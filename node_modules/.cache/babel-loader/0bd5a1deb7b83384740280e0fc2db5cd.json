{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as utils from 'utils';\nimport { authLogout, addLoader, removeLoader } from 'stores';\nexport var getSanctionsCheckStatus = function getSanctionsCheckStatus(rootProcessId) {\n  var viewLoader = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/claims.actions.getSanctionsCheckStatus'\n    };\n    dispatch(getSanctionsCheckStatusRequest());\n    viewLoader && dispatch(addLoader('getSanctionsCheckStatus'));\n\n    if (!rootProcessId) {\n      dispatch(getSanctionsCheckStatusFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Missing requests params'\n      })));\n      dispatch(removeLoader('getSanctionsCheckStatus'));\n      return;\n    }\n\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.bpmService,\n      path: \"workflow/process/task/\".concat(rootProcessId, \"/sanctionResult\")\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(getSanctionsCheckStatusSuccess(data.data));\n      return data.data;\n    }).catch(function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API post error'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(getSanctionsCheckStatusFailure(err));\n      return err;\n    }).finally(function () {\n      viewLoader && dispatch(removeLoader('getSanctionsCheckStatus'));\n    });\n  };\n};\nexport var getSanctionsCheckStatusRequest = function getSanctionsCheckStatusRequest(params) {\n  return {\n    type: 'GET_SANCTIONS_CHECK_STATUS_REQUEST',\n    payload: params\n  };\n};\nexport var getSanctionsCheckStatusSuccess = function getSanctionsCheckStatusSuccess(data) {\n  return {\n    type: 'GET_SANCTIONS_CHECK_STATUS_SUCCESS',\n    payload: data\n  };\n};\nexport var getSanctionsCheckStatusFailure = function getSanctionsCheckStatusFailure(error) {\n  return {\n    type: 'GET_SANCTIONS_CHECK_STATUS_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.getSanctionsCheckStatus.js"],"names":["utils","authLogout","addLoader","removeLoader","getSanctionsCheckStatus","rootProcessId","viewLoader","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","getSanctionsCheckStatusRequest","getSanctionsCheckStatusFailure","message","api","get","token","accessToken","bpmService","path","then","response","handleResponse","json","handleNewData","data","getSanctionsCheckStatusSuccess","catch","err","errorParams","handleError","handleUnauthorized","finally","params","type","payload","error"],"mappings":"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","sourcesContent":["import * as utils from 'utils';\r\nimport { authLogout, addLoader, removeLoader } from 'stores';\r\n\r\nexport const getSanctionsCheckStatus =\r\n  (rootProcessId, viewLoader = false) =>\r\n  (dispatch, getState) => {\r\n    // prettier-ignore\r\n    const { user: { auth }, config: { vars: { endpoint } } } = getState();\r\n\r\n    const defaultError = {\r\n      file: 'stores/claims.actions.getSanctionsCheckStatus',\r\n    };\r\n\r\n    dispatch(getSanctionsCheckStatusRequest());\r\n    viewLoader && dispatch(addLoader('getSanctionsCheckStatus'));\r\n\r\n    if (!rootProcessId) {\r\n      dispatch(getSanctionsCheckStatusFailure({ ...defaultError, message: 'Missing requests params' }));\r\n      dispatch(removeLoader('getSanctionsCheckStatus'));\r\n      return;\r\n    }\r\n\r\n    return utils.api\r\n      .get({\r\n        token: auth.accessToken,\r\n        endpoint: endpoint.bpmService,\r\n        path: `workflow/process/task/${rootProcessId}/sanctionResult`,\r\n      })\r\n      .then((response) => utils.api.handleResponse(response))\r\n      .then((json) => utils.api.handleNewData(json))\r\n      .then((data) => {\r\n        dispatch(getSanctionsCheckStatusSuccess(data.data));\r\n        return data.data;\r\n      })\r\n      .catch((err) => {\r\n        const errorParams = {\r\n          ...defaultError,\r\n          message: 'API post error',\r\n        };\r\n\r\n        utils.api.handleError(err, errorParams);\r\n        utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n        dispatch(getSanctionsCheckStatusFailure(err));\r\n        return err;\r\n      })\r\n      .finally(() => {\r\n        viewLoader && dispatch(removeLoader('getSanctionsCheckStatus'));\r\n      });\r\n  };\r\n\r\nexport const getSanctionsCheckStatusRequest = (params) => {\r\n  return {\r\n    type: 'GET_SANCTIONS_CHECK_STATUS_REQUEST',\r\n    payload: params,\r\n  };\r\n};\r\n\r\nexport const getSanctionsCheckStatusSuccess = (data) => {\r\n  return {\r\n    type: 'GET_SANCTIONS_CHECK_STATUS_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const getSanctionsCheckStatusFailure = (error) => {\r\n  return {\r\n    type: 'GET_SANCTIONS_CHECK_STATUS_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}