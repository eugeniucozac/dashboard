{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport get from 'lodash/get'; // app\n\nimport { removeLoader, addLoader, authLogout, enqueueNotification, transformOpeningMemoOutPUT, transformOpeningMemoInPUT } from 'stores';\nimport * as utils from 'utils';\nexport var updateOpeningMemo = function updateOpeningMemo(changes, openingMemoId) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var openingMemo = get(getState(), 'openingMemo.selected');\n    var defaultError = {\n      file: 'stores/openingMemo.actions.put',\n      message: 'Data missing for PUT request'\n    };\n    dispatch(putOpeningMemoRequest(changes));\n    dispatch(addLoader('updateOpeningMemo'));\n\n    if (!changes || !openingMemoId || !openingMemo) {\n      dispatch(putOpeningMemoFailure(defaultError));\n      dispatch(enqueueNotification('notification.openingMemo.editFail', 'error'));\n      dispatch(removeLoader('updateOpeningMemo'));\n      return;\n    }\n\n    var transformedPayload = transformOpeningMemoOutPUT(changes, openingMemo);\n    return utils.api.put({\n      token: auth.accessToken,\n      endpoint: endpoint.edge,\n      path: \"api/openingMemo/\".concat(openingMemoId),\n      data: transformedPayload\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleData(json);\n    }).then(function (data) {\n      var transformedPayload = transformOpeningMemoInPUT(data);\n      dispatch(putOpeningMemoSuccess(transformedPayload));\n      dispatch(enqueueNotification('notification.openingMemo.editSuccess', 'success'));\n    }).catch(function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API put error (openingMemo)'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(putOpeningMemoFailure(err));\n      dispatch(enqueueNotification('notification.openingMemo.editFail', 'error'));\n      return err;\n    }).finally(function () {\n      dispatch(removeLoader('updateOpeningMemo'));\n    });\n  };\n};\nexport var putOpeningMemoRequest = function putOpeningMemoRequest(payload) {\n  return {\n    type: 'OPENING_MEMO_PUT_REQUEST',\n    payload: payload\n  };\n};\nexport var putOpeningMemoSuccess = function putOpeningMemoSuccess(payload) {\n  return {\n    type: 'OPENING_MEMO_PUT_SUCCESS',\n    payload: payload\n  };\n};\nexport var putOpeningMemoFailure = function putOpeningMemoFailure(error) {\n  return {\n    type: 'OPENING_MEMO_PUT_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/openingMemo/openingMemo.actions.put.js"],"names":["get","removeLoader","addLoader","authLogout","enqueueNotification","transformOpeningMemoOutPUT","transformOpeningMemoInPUT","utils","updateOpeningMemo","changes","openingMemoId","dispatch","getState","auth","user","endpoint","config","vars","openingMemo","defaultError","file","message","putOpeningMemoRequest","putOpeningMemoFailure","transformedPayload","api","put","token","accessToken","edge","path","data","then","response","handleResponse","json","handleData","putOpeningMemoSuccess","catch","err","errorParams","handleError","handleUnauthorized","finally","payload","type","error"],"mappings":"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","sourcesContent":["import get from 'lodash/get';\r\n\r\n// app\r\nimport { removeLoader, addLoader, authLogout, enqueueNotification, transformOpeningMemoOutPUT, transformOpeningMemoInPUT } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const updateOpeningMemo = (changes, openingMemoId) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  const openingMemo = get(getState(), 'openingMemo.selected');\r\n\r\n  const defaultError = {\r\n    file: 'stores/openingMemo.actions.put',\r\n    message: 'Data missing for PUT request',\r\n  };\r\n\r\n  dispatch(putOpeningMemoRequest(changes));\r\n  dispatch(addLoader('updateOpeningMemo'));\r\n\r\n  if (!changes || !openingMemoId || !openingMemo) {\r\n    dispatch(putOpeningMemoFailure(defaultError));\r\n    dispatch(enqueueNotification('notification.openingMemo.editFail', 'error'));\r\n    dispatch(removeLoader('updateOpeningMemo'));\r\n    return;\r\n  }\r\n\r\n  const transformedPayload = transformOpeningMemoOutPUT(changes, openingMemo);\r\n\r\n  return utils.api\r\n    .put({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.edge,\r\n      path: `api/openingMemo/${openingMemoId}`,\r\n      data: transformedPayload,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleData(json))\r\n    .then((data) => {\r\n      const transformedPayload = transformOpeningMemoInPUT(data);\r\n      dispatch(putOpeningMemoSuccess(transformedPayload));\r\n      dispatch(enqueueNotification('notification.openingMemo.editSuccess', 'success'));\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        ...defaultError,\r\n        message: 'API put error (openingMemo)',\r\n      };\r\n\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(putOpeningMemoFailure(err));\r\n      dispatch(enqueueNotification('notification.openingMemo.editFail', 'error'));\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('updateOpeningMemo'));\r\n    });\r\n};\r\n\r\nexport const putOpeningMemoRequest = (payload) => {\r\n  return {\r\n    type: 'OPENING_MEMO_PUT_REQUEST',\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const putOpeningMemoSuccess = (payload) => {\r\n  return {\r\n    type: 'OPENING_MEMO_PUT_SUCCESS',\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const putOpeningMemoFailure = (error) => {\r\n  return {\r\n    type: 'OPENING_MEMO_PUT_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}