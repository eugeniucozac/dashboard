{"ast":null,"code":"var _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\pages\\\\TaskDashboard\\\\TaskDashboard.view.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types'; // app\n\nimport { Breadcrumb, Layout, PopoverMenu, SectionHeader, Tabs, PreventNavigation } from 'components';\nimport { TaskDetails, TaskNotes, ClaimsUploadViewSearchDocs } from 'modules';\nimport * as utils from 'utils';\nimport * as constants from 'consts'; // mui\n\nimport { Divider } from '@material-ui/core';\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nTaskDashboardView.propTypes = {\n  task: PropTypes.object.isRequired,\n  tabs: PropTypes.array.isRequired,\n  selectedTab: PropTypes.string.isRequired,\n  breadcrumbs: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    label: PropTypes.string.isRequired,\n    link: PropTypes.string\n  })).isRequired,\n  handleSelectTab: PropTypes.func.isRequired,\n  popoverActions: PropTypes.array.isRequired,\n  handleDirtyCheck: PropTypes.func.isRequired,\n  isDirtyRef: PropTypes.bool.isRequired,\n  setIsDirty: PropTypes.func.isRequired,\n  allowedNavigationUrls: PropTypes.array.isRequired\n};\nexport function TaskDashboardView(_ref) {\n  var task = _ref.task,\n      tabs = _ref.tabs,\n      selectedTab = _ref.selectedTab,\n      breadcrumbs = _ref.breadcrumbs,\n      handleSelectTab = _ref.handleSelectTab,\n      popoverActions = _ref.popoverActions,\n      handleDirtyCheck = _ref.handleDirtyCheck,\n      allowedNavigationUrls = _ref.allowedNavigationUrls,\n      isDirtyRef = _ref.isDirtyRef,\n      setIsDirty = _ref.setIsDirty;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Breadcrumb, {\n      links: breadcrumbs,\n      testid: \"task-dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Layout, {\n      testid: \"task-dashboard\",\n      children: /*#__PURE__*/_jsxDEV(Layout, {\n        main: true,\n        children: [/*#__PURE__*/_jsxDEV(SectionHeader, {\n          title: utils.string.t('claims.processing.task.title', {\n            id: task.taskRef\n          }),\n          icon: DescriptionIcon,\n          testid: \"task-ref-header\",\n          children: /*#__PURE__*/_jsxDEV(PopoverMenu, {\n            variant: \"outlined\",\n            id: \"task-functions\",\n            size: \"small\",\n            color: \"primary\",\n            text: utils.string.t('claims.processing.taskFunctions'),\n            isButton: true,\n            anchorOrigin: {\n              vertical: 'bottom',\n              horizontal: 'right'\n            },\n            transformOrigin: {\n              vertical: 'top',\n              horizontal: 'right'\n            },\n            items: popoverActions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n          tabs: tabs,\n          value: selectedTab,\n          onChange: function onChange(tabName) {\n            handleSelectTab(tabName);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), selectedTab === 'taskDetails' && /*#__PURE__*/_jsxDEV(TaskDetails, {\n          taskObj: task,\n          isDirtyRef: isDirtyRef,\n          setIsDirty: setIsDirty,\n          handleDirtyCheck: handleDirtyCheck\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this), selectedTab === 'documents' && /*#__PURE__*/_jsxDEV(ClaimsUploadViewSearchDocs, {\n          refData: task,\n          refIdName: constants.DMS_CONTEXT_TASK_ID,\n          dmsContext: constants.DMS_CONTEXT_TASK,\n          documentTypeKey: constants.DMS_DOCUMENT_TYPE_SECTION_KEYS.claims,\n          viewOptions: {\n            linkToLossAndClaim: true\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this), selectedTab === 'notes' && /*#__PURE__*/_jsxDEV(TaskNotes, {\n          taskObj: task\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 39\n        }, this), isDirtyRef && selectedTab === 'taskDetails' && /*#__PURE__*/_jsxDEV(PreventNavigation, {\n          dirty: true,\n          allowedUrls: allowedNavigationUrls,\n          title: 'status.alert',\n          subtitle: '',\n          hint: 'claims.notes.notifications.alertPopup',\n          maxWidth: 'xs',\n          confirmLabel: 'form.options.yesNoNa.yes',\n          cancelLabel: 'form.options.yesNoNa.no'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_c = TaskDashboardView;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskDashboardView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/pages/TaskDashboard/TaskDashboard.view.js"],"names":["React","PropTypes","Breadcrumb","Layout","PopoverMenu","SectionHeader","Tabs","PreventNavigation","TaskDetails","TaskNotes","ClaimsUploadViewSearchDocs","utils","constants","Divider","DescriptionIcon","TaskDashboardView","propTypes","task","object","isRequired","tabs","array","selectedTab","string","breadcrumbs","arrayOf","shape","name","label","link","handleSelectTab","func","popoverActions","handleDirtyCheck","isDirtyRef","bool","setIsDirty","allowedNavigationUrls","t","id","taskRef","vertical","horizontal","tabName","DMS_CONTEXT_TASK_ID","DMS_CONTEXT_TASK","DMS_DOCUMENT_TYPE_SECTION_KEYS","claims","linkToLossAndClaim"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// app\r\nimport { Breadcrumb, Layout, PopoverMenu, SectionHeader, Tabs, PreventNavigation } from 'components';\r\nimport { TaskDetails, TaskNotes, ClaimsUploadViewSearchDocs } from 'modules';\r\nimport * as utils from 'utils';\r\nimport * as constants from 'consts';\r\n\r\n// mui\r\nimport { Divider } from '@material-ui/core';\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\n\r\nTaskDashboardView.propTypes = {\r\n  task: PropTypes.object.isRequired,\r\n  tabs: PropTypes.array.isRequired,\r\n  selectedTab: PropTypes.string.isRequired,\r\n  breadcrumbs: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      label: PropTypes.string.isRequired,\r\n      link: PropTypes.string,\r\n    })\r\n  ).isRequired,\r\n  handleSelectTab: PropTypes.func.isRequired,\r\n  popoverActions: PropTypes.array.isRequired,\r\n  handleDirtyCheck: PropTypes.func.isRequired,\r\n  isDirtyRef: PropTypes.bool.isRequired,\r\n  setIsDirty: PropTypes.func.isRequired,\r\n  allowedNavigationUrls: PropTypes.array.isRequired\r\n};\r\nexport function TaskDashboardView({\r\n  task,\r\n  tabs,\r\n  selectedTab,\r\n  breadcrumbs,\r\n  handleSelectTab,\r\n  popoverActions,\r\n  handleDirtyCheck,\r\n  allowedNavigationUrls,\r\n  isDirtyRef,\r\n  setIsDirty\r\n}) {\r\n  return (\r\n    <>\r\n      <Breadcrumb links={breadcrumbs} testid=\"task-dashboard\" />\r\n      <Divider />\r\n\r\n      <Layout testid=\"task-dashboard\">\r\n        <Layout main>\r\n          <SectionHeader\r\n            title={utils.string.t('claims.processing.task.title', { id: task.taskRef })}\r\n            icon={DescriptionIcon}\r\n            testid=\"task-ref-header\"\r\n          >\r\n            <PopoverMenu\r\n              variant=\"outlined\"\r\n              id=\"task-functions\"\r\n              size=\"small\"\r\n              color=\"primary\"\r\n              text={utils.string.t('claims.processing.taskFunctions')}\r\n              isButton\r\n              anchorOrigin={{\r\n                vertical: 'bottom',\r\n                horizontal: 'right',\r\n              }}\r\n              transformOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'right',\r\n              }}\r\n              items={popoverActions}\r\n            />\r\n          </SectionHeader>\r\n          <Tabs\r\n            tabs={tabs}\r\n            value={selectedTab}\r\n            onChange={(tabName) => { handleSelectTab(tabName) }} />\r\n\r\n          {/* tabs content */}\r\n          {selectedTab === 'taskDetails' &&\r\n            <TaskDetails\r\n              taskObj={task}\r\n              isDirtyRef={isDirtyRef}\r\n              setIsDirty={setIsDirty}\r\n              handleDirtyCheck={handleDirtyCheck}\r\n            />}\r\n          {selectedTab === 'documents' && (\r\n            <ClaimsUploadViewSearchDocs\r\n              refData={task}\r\n              refIdName={constants.DMS_CONTEXT_TASK_ID}\r\n              dmsContext={constants.DMS_CONTEXT_TASK}\r\n              documentTypeKey={constants.DMS_DOCUMENT_TYPE_SECTION_KEYS.claims}\r\n              viewOptions={{linkToLossAndClaim: true}}\r\n            />\r\n          )}\r\n          {selectedTab === 'notes' && <TaskNotes taskObj={task} />}\r\n          {isDirtyRef && selectedTab === 'taskDetails' && (\r\n            <PreventNavigation\r\n              dirty={true}\r\n              allowedUrls={allowedNavigationUrls}\r\n              title={'status.alert'}\r\n              subtitle={''}\r\n              hint={'claims.notes.notifications.alertPopup'}\r\n              maxWidth={'xs'}\r\n              confirmLabel={'form.options.yesNoNa.yes'}\r\n              cancelLabel={'form.options.yesNoNa.no'}\r\n            />\r\n          )}\r\n        </Layout>\r\n      </Layout>\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}