{"ast":null,"code":"import get from 'lodash/get';\nimport { addLoader, removeLoader, enqueueNotification, getComplexityBasisValue, authLogout } from 'stores';\nimport * as utils from 'utils';\nexport var postComplexityDivisionMatrixByComplexId = function postComplexityDivisionMatrixByComplexId(updatedMatrixData) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint,\n        claims = _getState.claims;\n\n    var defaultError = {\n      file: 'stores/claims.actions.postComplexityDivisionMatrixByComplexId'\n    };\n    var complexRuleValueObj = get(claims, 'complexityManagement.complexityBasisValueId');\n    var complexRuleValueId = complexRuleValueObj.complexityRulesID;\n    var complexityIsComplex = complexRuleValueObj.isComplex;\n    var complexityRuleValue = complexRuleValueObj.complexityRulesValue;\n    var payload = {\n      complexDivisions: utils.generic.isValidArray(updatedMatrixData) ? updatedMatrixData : [],\n      complexityRuleValue: complexityRuleValue || ''\n    };\n    dispatch(postComplexityDivisionMatrixByComplexIdRequest(updatedMatrixData));\n    dispatch(addLoader('postComplexityDivisionMatrixByComplexId'));\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.claimService,\n      path: \"api/data/claims-triage/complex/complex-values/\".concat(complexRuleValueId, \"/division-matrix?isComplex=\").concat(complexityIsComplex),\n      data: payload\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json, true);\n    }).then(function (data) {\n      dispatch(enqueueNotification('notification.complexityBasisDivision.success', 'success'));\n      dispatch(getComplexityBasisValue());\n      return data;\n    }).catch(function (err) {\n      dispatch(postComplexityDivisionMatrixByComplexIdFailure(err, defaultError));\n      dispatch(enqueueNotification('notification.complexityBasisDivision.fail', 'error'));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      return err;\n    }).finally(function () {\n      dispatch(removeLoader('postComplexityDivisionMatrixByComplexId'));\n    });\n  };\n};\nexport var postComplexityDivisionMatrixByComplexIdRequest = function postComplexityDivisionMatrixByComplexIdRequest(updatedMatrixData) {\n  return {\n    type: 'CLAIMS_COMPLEXITY_DIVISION_BY_COMPLEX_ID_SAVE_REQUEST',\n    payload: updatedMatrixData\n  };\n};\nexport var postComplexityDivisionMatrixByComplexIdFailure = function postComplexityDivisionMatrixByComplexIdFailure(err) {\n  return {\n    type: 'CLAIMS_COMPLEXITY_DIVISION_BY_COMPLEX_ID_SAVE_FAILURE',\n    payload: err\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.postComplexityDivisionMatrixByComplexId.js"],"names":["get","addLoader","removeLoader","enqueueNotification","getComplexityBasisValue","authLogout","utils","postComplexityDivisionMatrixByComplexId","updatedMatrixData","dispatch","getState","auth","user","endpoint","config","vars","claims","defaultError","file","complexRuleValueObj","complexRuleValueId","complexityRulesID","complexityIsComplex","isComplex","complexityRuleValue","complexityRulesValue","payload","complexDivisions","generic","isValidArray","postComplexityDivisionMatrixByComplexIdRequest","api","post","token","accessToken","claimService","path","data","then","response","handleResponse","json","handleNewData","catch","err","postComplexityDivisionMatrixByComplexIdFailure","handleUnauthorized","finally","type"],"mappings":"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","sourcesContent":["import get from 'lodash/get';\r\n\r\nimport { addLoader, removeLoader, enqueueNotification, getComplexityBasisValue, authLogout } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const postComplexityDivisionMatrixByComplexId = (updatedMatrixData) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } }, claims } = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.postComplexityDivisionMatrixByComplexId',\r\n  };\r\n\r\n  const complexRuleValueObj = get(claims, 'complexityManagement.complexityBasisValueId');\r\n  const complexRuleValueId = complexRuleValueObj.complexityRulesID;\r\n  const complexityIsComplex = complexRuleValueObj.isComplex;\r\n  const complexityRuleValue = complexRuleValueObj.complexityRulesValue;\r\n\r\n  const payload = {\r\n    complexDivisions: utils.generic.isValidArray(updatedMatrixData) ? updatedMatrixData : [],\r\n    complexityRuleValue: complexityRuleValue || '',\r\n  };\r\n\r\n  dispatch(postComplexityDivisionMatrixByComplexIdRequest(updatedMatrixData));\r\n  dispatch(addLoader('postComplexityDivisionMatrixByComplexId'));\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.claimService,\r\n      path: `api/data/claims-triage/complex/complex-values/${complexRuleValueId}/division-matrix?isComplex=${complexityIsComplex}`,\r\n      data: payload,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json, true))\r\n    .then((data) => {\r\n      dispatch(enqueueNotification('notification.complexityBasisDivision.success', 'success'));\r\n      dispatch(getComplexityBasisValue());\r\n      return data;\r\n    })\r\n    .catch((err) => {\r\n      dispatch(postComplexityDivisionMatrixByComplexIdFailure(err, defaultError));\r\n      dispatch(enqueueNotification('notification.complexityBasisDivision.fail', 'error'));\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('postComplexityDivisionMatrixByComplexId'));\r\n    });\r\n};\r\n\r\nexport const postComplexityDivisionMatrixByComplexIdRequest = (updatedMatrixData) => {\r\n  return {\r\n    type: 'CLAIMS_COMPLEXITY_DIVISION_BY_COMPLEX_ID_SAVE_REQUEST',\r\n    payload: updatedMatrixData,\r\n  };\r\n};\r\n\r\nexport const postComplexityDivisionMatrixByComplexIdFailure = (err) => {\r\n  return {\r\n    type: 'CLAIMS_COMPLEXITY_DIVISION_BY_COMPLEX_ID_SAVE_FAILURE',\r\n    payload: err,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}