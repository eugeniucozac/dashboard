{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as utils from 'utils';\nimport * as constants from 'consts';\nimport { authLogout, addLoader, enqueueNotification, removeLoader, hideModal } from 'stores';\nexport var premiumProcessingCheckSigningCase = function premiumProcessingCheckSigningCase(params) {\n  return function (dispatch, getState) {\n    var _selectedCasesData$ca;\n\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    dispatch(addLoader('premiumProcessingCheckSigningCase'));\n    var defaultError = {\n      file: 'stores/premiumProcessing.actions.postCheckSigningCase'\n    };\n\n    if (!params) {\n      dispatch(premiumProcessingCheckSigningCaseError(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Missing parameters'\n      })));\n      dispatch(enqueueNotification('notification.submission.fail', 'error'));\n      dispatch(removeLoader('premiumProcessingCheckSigningCase'));\n      return;\n    }\n\n    var selectedCasesData = params === null || params === void 0 ? void 0 : params.selectedCase;\n    var _params$checkSignData = params.checkSignData,\n        workPackageReference = _params$checkSignData.workPackageReference,\n        bureauList = _params$checkSignData.bureauList,\n        riskReferenceId = _params$checkSignData.riskReferenceId,\n        department = _params$checkSignData.department,\n        packageSubmittedOn = _params$checkSignData.packageSubmittedOn;\n    var selectedBureauList = bureauList.map(function (list) {\n      return list.id;\n    });\n    var checkSigningCase = {\n      caseId: selectedCasesData === null || selectedCasesData === void 0 ? void 0 : selectedCasesData.caseId,\n      workPackageReference: workPackageReference,\n      bureauList: selectedBureauList,\n      riskReferenceId: riskReferenceId,\n      department: department,\n      gxbInstance: selectedCasesData === null || selectedCasesData === void 0 ? void 0 : (_selectedCasesData$ca = selectedCasesData.caseTeamData) === null || _selectedCasesData$ca === void 0 ? void 0 : _selectedCasesData$ca.xbInstanceId,\n      packageSubmittedOn: packageSubmittedOn\n    };\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.bpmService,\n      path: 'checksigning/task/createcase',\n      data: checkSigningCase\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      var _data$data;\n\n      dispatch(premiumProcessingCheckSigningCaseSuccess(data === null || data === void 0 ? void 0 : data.data));\n\n      if ((data === null || data === void 0 ? void 0 : (_data$data = data.data) === null || _data$data === void 0 ? void 0 : _data$data.status) === 1) {\n        dispatch(enqueueNotification('premiumProcessing.checkSigningCase.checkSigningCaseSuccessMsg', 'success'));\n      } else {\n        dispatch(enqueueNotification(data === null || data === void 0 ? void 0 : data.message, 'success'));\n      }\n\n      dispatch(hideModal());\n      return data;\n    }).catch(function (err) {\n      dispatch(premiumProcessingCheckSigningCaseError(err, {\n        file: 'stores/premiumProcessing.actions.postCheckSigningCase'\n      }));\n\n      if (err.response.status === constants.API_STATUS_NOT_FOUND) {\n        dispatch(enqueueNotification('premiumProcessing.checkSigningCase.checkSigningCaseErrorMsg', 'error'));\n      } else {\n        dispatch(enqueueNotification('premiumProcessing.checkSigningCase.checkSigningCaseErrorMsg', 'error'));\n      }\n\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n    }).finally(function () {\n      dispatch(removeLoader('premiumProcessingCheckSigningCase'));\n      dispatch(hideModal());\n    });\n  };\n};\nexport var premiumProcessingCheckSigningCaseRequest = function premiumProcessingCheckSigningCaseRequest(payload) {\n  return {\n    type: 'PREMIUM_PROCESSING_CHECK_SIGNING_CASE_REQUEST',\n    payload: payload\n  };\n};\nexport var premiumProcessingCheckSigningCaseSuccess = function premiumProcessingCheckSigningCaseSuccess(data) {\n  return {\n    type: 'PREMIUM_PROCESSING_CHECK_SIGNING_CASE_SUCCESS',\n    payload: data\n  };\n};\nexport var premiumProcessingCheckSigningCaseError = function premiumProcessingCheckSigningCaseError(error) {\n  return {\n    type: 'PREMIUM_PROCESSING_CHECK_SIGNING_CASE_ERROR',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/premiumProcessing/premiumProcessing.actions.postCheckSigningCase.js"],"names":["utils","constants","authLogout","addLoader","enqueueNotification","removeLoader","hideModal","premiumProcessingCheckSigningCase","params","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","premiumProcessingCheckSigningCaseError","message","selectedCasesData","selectedCase","checkSignData","workPackageReference","bureauList","riskReferenceId","department","packageSubmittedOn","selectedBureauList","map","list","id","checkSigningCase","caseId","gxbInstance","caseTeamData","xbInstanceId","api","post","token","accessToken","bpmService","path","data","then","response","handleResponse","json","handleNewData","premiumProcessingCheckSigningCaseSuccess","status","catch","err","API_STATUS_NOT_FOUND","handleUnauthorized","finally","premiumProcessingCheckSigningCaseRequest","payload","type","error"],"mappings":"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","sourcesContent":["import * as utils from 'utils';\r\nimport * as constants from 'consts';\r\nimport { authLogout, addLoader, enqueueNotification, removeLoader, hideModal } from 'stores';\r\n\r\nexport const premiumProcessingCheckSigningCase = (params) => (dispatch, getState) => {\r\n  const {\r\n    user: { auth },\r\n    config: {\r\n      vars: { endpoint },\r\n    },\r\n  } = getState();\r\n\r\n  dispatch(addLoader('premiumProcessingCheckSigningCase'));\r\n  const defaultError = {\r\n    file: 'stores/premiumProcessing.actions.postCheckSigningCase',\r\n  };\r\n  if (!params) {\r\n    dispatch(premiumProcessingCheckSigningCaseError({ ...defaultError, message: 'Missing parameters' }));\r\n    dispatch(enqueueNotification('notification.submission.fail', 'error'));\r\n    dispatch(removeLoader('premiumProcessingCheckSigningCase'));\r\n    return;\r\n  }\r\n\r\n  const selectedCasesData = params?.selectedCase;\r\n  const { workPackageReference, bureauList, riskReferenceId, department, packageSubmittedOn } = params.checkSignData;\r\n  const selectedBureauList = bureauList.map((list) => list.id);\r\n\r\n  const checkSigningCase = {\r\n    caseId: selectedCasesData?.caseId,\r\n    workPackageReference: workPackageReference,\r\n    bureauList: selectedBureauList,\r\n    riskReferenceId: riskReferenceId,\r\n    department: department,\r\n    gxbInstance: selectedCasesData?.caseTeamData?.xbInstanceId,\r\n    packageSubmittedOn: packageSubmittedOn,\r\n  };\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.bpmService,\r\n      path: 'checksigning/task/createcase',\r\n      data: checkSigningCase,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(premiumProcessingCheckSigningCaseSuccess(data?.data));\r\n      if(data?.data?.status === 1){\r\n        dispatch(enqueueNotification('premiumProcessing.checkSigningCase.checkSigningCaseSuccessMsg', 'success'));\r\n      }\r\n      else{\r\n        dispatch(enqueueNotification(data?.message, 'success'));\r\n      }\r\n     \r\n      dispatch(hideModal());\r\n      return data;\r\n    })\r\n    .catch((err) => {\r\n      dispatch(\r\n        premiumProcessingCheckSigningCaseError(err, {\r\n          file: 'stores/premiumProcessing.actions.postCheckSigningCase',\r\n        })\r\n      );\r\n      if (err.response.status === constants.API_STATUS_NOT_FOUND) {\r\n        dispatch(enqueueNotification('premiumProcessing.checkSigningCase.checkSigningCaseErrorMsg', 'error'));\r\n      } else {\r\n        dispatch(enqueueNotification('premiumProcessing.checkSigningCase.checkSigningCaseErrorMsg', 'error'));\r\n      }\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('premiumProcessingCheckSigningCase'));\r\n      dispatch(hideModal());\r\n    });\r\n};\r\n\r\nexport const premiumProcessingCheckSigningCaseRequest = (payload) => {\r\n  return {\r\n    type: 'PREMIUM_PROCESSING_CHECK_SIGNING_CASE_REQUEST',\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const premiumProcessingCheckSigningCaseSuccess = (data) => {\r\n  return {\r\n    type: 'PREMIUM_PROCESSING_CHECK_SIGNING_CASE_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const premiumProcessingCheckSigningCaseError = (error) => {\r\n  return {\r\n    type: 'PREMIUM_PROCESSING_CHECK_SIGNING_CASE_ERROR',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}