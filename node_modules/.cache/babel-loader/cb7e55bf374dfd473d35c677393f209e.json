{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport get from 'lodash/get'; // app\n\nimport * as utils from 'utils';\nvar utilsOffice = {\n  withFullName: function withFullName(offices) {\n    // method accepts Array of offices or a single office Object\n    var isArray = Array.isArray(offices);\n    var officesArray = isArray ? offices : [offices];\n    var newArray = officesArray.map(function (office) {\n      var parts = [];\n      var parentName = get(office, 'parent.name');\n      var officeName = get(office, 'name');\n      if (parentName) parts.push(parentName);\n      if (officeName) parts.push(officeName);\n      return _objectSpread(_objectSpread({}, office), {}, {\n        fullname: parts.join(' - ')\n      });\n    });\n    return isArray ? newArray : newArray[0];\n  },\n  getMainOffice: function getMainOffice(offices) {\n    if (!utils.generic.isValidArray(offices, true)) return;\n    return offices[0];\n  },\n  getMainOfficeName: function getMainOfficeName(offices) {\n    if (!utils.generic.isValidArray(offices, true)) return '';\n    return utilsOffice.getName(utilsOffice.getMainOffice(offices));\n  },\n  getParent: function getParent(office) {\n    if (!office || !utils.generic.isValidObject(office)) return;\n    return office.parent;\n  },\n  getName: function getName(office) {\n    if (!office || !utils.generic.isValidObject(office)) return '';\n    return office.name || '';\n  }\n};\nexport default utilsOffice;","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/utils/office/office.js"],"names":["get","utils","utilsOffice","withFullName","offices","isArray","Array","officesArray","newArray","map","office","parts","parentName","officeName","push","fullname","join","getMainOffice","generic","isValidArray","getMainOfficeName","getName","getParent","isValidObject","parent","name"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,YAAhB,C,CAEA;;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,IAAMC,WAAW,GAAG;AAClBC,EAAAA,YAAY,EAAE,sBAACC,OAAD,EAAa;AACzB;AACA,QAAMC,OAAO,GAAGC,KAAK,CAACD,OAAN,CAAcD,OAAd,CAAhB;AACA,QAAMG,YAAY,GAAGF,OAAO,GAAGD,OAAH,GAAa,CAACA,OAAD,CAAzC;AAEA,QAAMI,QAAQ,GAAGD,YAAY,CAACE,GAAb,CAAiB,UAACC,MAAD,EAAY;AAC5C,UAAMC,KAAK,GAAG,EAAd;AACA,UAAMC,UAAU,GAAGZ,GAAG,CAACU,MAAD,EAAS,aAAT,CAAtB;AACA,UAAMG,UAAU,GAAGb,GAAG,CAACU,MAAD,EAAS,MAAT,CAAtB;AAEA,UAAIE,UAAJ,EAAgBD,KAAK,CAACG,IAAN,CAAWF,UAAX;AAChB,UAAIC,UAAJ,EAAgBF,KAAK,CAACG,IAAN,CAAWD,UAAX;AAEhB,6CACKH,MADL;AAEEK,QAAAA,QAAQ,EAAEJ,KAAK,CAACK,IAAN,CAAW,KAAX;AAFZ;AAID,KAZgB,CAAjB;AAcA,WAAOX,OAAO,GAAGG,QAAH,GAAcA,QAAQ,CAAC,CAAD,CAApC;AACD,GArBiB;AAuBlBS,EAAAA,aAAa,EAAE,uBAACb,OAAD,EAAa;AAC1B,QAAI,CAACH,KAAK,CAACiB,OAAN,CAAcC,YAAd,CAA2Bf,OAA3B,EAAoC,IAApC,CAAL,EAAgD;AAChD,WAAOA,OAAO,CAAC,CAAD,CAAd;AACD,GA1BiB;AA4BlBgB,EAAAA,iBAAiB,EAAE,2BAAChB,OAAD,EAAa;AAC9B,QAAI,CAACH,KAAK,CAACiB,OAAN,CAAcC,YAAd,CAA2Bf,OAA3B,EAAoC,IAApC,CAAL,EAAgD,OAAO,EAAP;AAChD,WAAOF,WAAW,CAACmB,OAAZ,CAAoBnB,WAAW,CAACe,aAAZ,CAA0Bb,OAA1B,CAApB,CAAP;AACD,GA/BiB;AAiClBkB,EAAAA,SAAS,EAAE,mBAACZ,MAAD,EAAY;AACrB,QAAI,CAACA,MAAD,IAAW,CAACT,KAAK,CAACiB,OAAN,CAAcK,aAAd,CAA4Bb,MAA5B,CAAhB,EAAqD;AACrD,WAAOA,MAAM,CAACc,MAAd;AACD,GApCiB;AAsClBH,EAAAA,OAAO,EAAE,iBAACX,MAAD,EAAY;AACnB,QAAI,CAACA,MAAD,IAAW,CAACT,KAAK,CAACiB,OAAN,CAAcK,aAAd,CAA4Bb,MAA5B,CAAhB,EAAqD,OAAO,EAAP;AACrD,WAAOA,MAAM,CAACe,IAAP,IAAe,EAAtB;AACD;AAzCiB,CAApB;AA4CA,eAAevB,WAAf","sourcesContent":["import get from 'lodash/get';\r\n\r\n// app\r\nimport * as utils from 'utils';\r\n\r\nconst utilsOffice = {\r\n  withFullName: (offices) => {\r\n    // method accepts Array of offices or a single office Object\r\n    const isArray = Array.isArray(offices);\r\n    const officesArray = isArray ? offices : [offices];\r\n\r\n    const newArray = officesArray.map((office) => {\r\n      const parts = [];\r\n      const parentName = get(office, 'parent.name');\r\n      const officeName = get(office, 'name');\r\n\r\n      if (parentName) parts.push(parentName);\r\n      if (officeName) parts.push(officeName);\r\n\r\n      return {\r\n        ...office,\r\n        fullname: parts.join(' - '),\r\n      };\r\n    });\r\n\r\n    return isArray ? newArray : newArray[0];\r\n  },\r\n\r\n  getMainOffice: (offices) => {\r\n    if (!utils.generic.isValidArray(offices, true)) return;\r\n    return offices[0];\r\n  },\r\n\r\n  getMainOfficeName: (offices) => {\r\n    if (!utils.generic.isValidArray(offices, true)) return '';\r\n    return utilsOffice.getName(utilsOffice.getMainOffice(offices));\r\n  },\r\n\r\n  getParent: (office) => {\r\n    if (!office || !utils.generic.isValidObject(office)) return;\r\n    return office.parent;\r\n  },\r\n\r\n  getName: (office) => {\r\n    if (!office || !utils.generic.isValidObject(office)) return '';\r\n    return office.name || '';\r\n  },\r\n};\r\n\r\nexport default utilsOffice;\r\n"]},"metadata":{},"sourceType":"module"}