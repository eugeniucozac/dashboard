{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { authLogout, addLoader, removeLoader, enqueueNotification } from 'stores';\nimport * as utils from 'utils';\nexport var postCloseRFI = function postCloseRFI(taskID) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/claims.actions.postCloseRFI'\n    };\n    dispatch(postCloseRFIRequest(taskID));\n    dispatch(addLoader('postCloseRFI'));\n\n    if (!taskID) {\n      dispatch(postCloseRFIFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Missing requests params'\n      })));\n      dispatch(removeLoader('postCloseRFI'));\n      return;\n    }\n\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.bpmService,\n      path: \"api/workflow/process/rfi/\".concat(taskID, \"/close\")\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (data) {\n      dispatch(postCloseRFISuccess(data));\n      dispatch(enqueueNotification(utils.string.t('claims.processing.notification.closeRfiSuccess'), 'success'));\n      return data;\n    })[\"catch\"](function (error) {\n      dispatch(postCloseRFIFailure(error, defaultError));\n      utils.api.handleUnauthorized(error, dispatch, authLogout);\n      dispatch(enqueueNotification(utils.string.t('claims.processing.notification.closeRfiFailure'), 'error'));\n      return error;\n    })[\"finally\"](function () {\n      dispatch(removeLoader('postCloseRFI'));\n    });\n  };\n};\nexport var postCloseRFIRequest = function postCloseRFIRequest(taskID) {\n  return {\n    type: 'CLAIMS_CLOSE_RFI_POST_REQUEST',\n    payload: {\n      taskID: taskID\n    }\n  };\n};\nexport var postCloseRFISuccess = function postCloseRFISuccess(data) {\n  return {\n    type: 'CLAIMS_CLOSE_RFI_POST_SUCCESS',\n    payload: data\n  };\n};\nexport var postCloseRFIFailure = function postCloseRFIFailure(error) {\n  return {\n    type: 'CLAIMS_CLOSE_RFI_POST_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.postCloseRFI.js"],"names":["authLogout","addLoader","removeLoader","enqueueNotification","utils","postCloseRFI","taskID","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","postCloseRFIRequest","postCloseRFIFailure","message","api","post","token","accessToken","bpmService","path","then","response","handleResponse","data","postCloseRFISuccess","string","t","error","handleUnauthorized","type","payload"],"mappings":";AAAA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,YAAhC,EAA8CC,mBAA9C,QAAyE,QAAzE;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,MAAD;AAAA,SAAY,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC9D;AAD8D,oBAEHA,QAAQ,EAFL;AAAA,QAE9CC,IAF8C,aAEtDC,IAFsD,CAE9CD,IAF8C;AAAA,QAEpBE,QAFoB,aAEtCC,MAFsC,CAE5BC,IAF4B,CAEpBF,QAFoB;;AAG9D,QAAMG,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE;AADa,KAArB;AAIAR,IAAAA,QAAQ,CAACS,mBAAmB,CAACV,MAAD,CAApB,CAAR;AACAC,IAAAA,QAAQ,CAACN,SAAS,CAAC,cAAD,CAAV,CAAR;;AAEA,QAAI,CAACK,MAAL,EAAa;AACXC,MAAAA,QAAQ,CAACU,mBAAmB,iCAAMH,YAAN;AAAoBI,QAAAA,OAAO,EAAE;AAA7B,SAApB,CAAR;AACAX,MAAAA,QAAQ,CAACL,YAAY,CAAC,cAAD,CAAb,CAAR;AACA;AACD;;AAED,WAAOE,KAAK,CAACe,GAAN,CACJC,IADI,CACC;AACJC,MAAAA,KAAK,EAAEZ,IAAI,CAACa,WADR;AAEJX,MAAAA,QAAQ,EAAEA,QAAQ,CAACY,UAFf;AAGJC,MAAAA,IAAI,qCAA8BlB,MAA9B;AAHA,KADD,EAMJmB,IANI,CAMC,UAACC,QAAD;AAAA,aAActB,KAAK,CAACe,GAAN,CAAUQ,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAND,EAOJD,IAPI,CAOC,UAACG,IAAD,EAAU;AACdrB,MAAAA,QAAQ,CAACsB,mBAAmB,CAACD,IAAD,CAApB,CAAR;AACArB,MAAAA,QAAQ,CAACJ,mBAAmB,CAACC,KAAK,CAAC0B,MAAN,CAAaC,CAAb,CAAe,gDAAf,CAAD,EAAmE,SAAnE,CAApB,CAAR;AACA,aAAOH,IAAP;AACD,KAXI,WAYE,UAACI,KAAD,EAAW;AAChBzB,MAAAA,QAAQ,CAACU,mBAAmB,CAACe,KAAD,EAAQlB,YAAR,CAApB,CAAR;AACAV,MAAAA,KAAK,CAACe,GAAN,CAAUc,kBAAV,CAA6BD,KAA7B,EAAoCzB,QAApC,EAA8CP,UAA9C;AACAO,MAAAA,QAAQ,CAACJ,mBAAmB,CAACC,KAAK,CAAC0B,MAAN,CAAaC,CAAb,CAAe,gDAAf,CAAD,EAAmE,OAAnE,CAApB,CAAR;AACA,aAAOC,KAAP;AACD,KAjBI,aAkBI,YAAM;AACbzB,MAAAA,QAAQ,CAACL,YAAY,CAAC,cAAD,CAAb,CAAR;AACD,KApBI,CAAP;AAqBD,GArC2B;AAAA,CAArB;AAuCP,OAAO,IAAMc,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACV,MAAD,EAAY;AAC7C,SAAO;AACL4B,IAAAA,IAAI,EAAE,+BADD;AAELC,IAAAA,OAAO,EAAE;AAAE7B,MAAAA,MAAM,EAANA;AAAF;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMuB,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACD,IAAD,EAAU;AAC3C,SAAO;AACLM,IAAAA,IAAI,EAAE,+BADD;AAELC,IAAAA,OAAO,EAAEP;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMX,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACe,KAAD,EAAW;AAC5C,SAAO;AACLE,IAAAA,IAAI,EAAE,+BADD;AAELC,IAAAA,OAAO,EAAEH;AAFJ,GAAP;AAID,CALM","sourcesContent":["import { authLogout, addLoader, removeLoader, enqueueNotification } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const postCloseRFI = (taskID) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } } } = getState();\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.postCloseRFI',\r\n  };\r\n\r\n  dispatch(postCloseRFIRequest(taskID));\r\n  dispatch(addLoader('postCloseRFI'));\r\n\r\n  if (!taskID) {\r\n    dispatch(postCloseRFIFailure({ ...defaultError, message: 'Missing requests params' }));\r\n    dispatch(removeLoader('postCloseRFI'));\r\n    return;\r\n  }\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.bpmService,\r\n      path: `api/workflow/process/rfi/${taskID}/close`,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((data) => {\r\n      dispatch(postCloseRFISuccess(data));\r\n      dispatch(enqueueNotification(utils.string.t('claims.processing.notification.closeRfiSuccess'), 'success'));\r\n      return data;\r\n    })\r\n    .catch((error) => {\r\n      dispatch(postCloseRFIFailure(error, defaultError));\r\n      utils.api.handleUnauthorized(error, dispatch, authLogout);\r\n      dispatch(enqueueNotification(utils.string.t('claims.processing.notification.closeRfiFailure'), 'error'));\r\n      return error;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('postCloseRFI'));\r\n    });\r\n};\r\n\r\nexport const postCloseRFIRequest = (taskID) => {\r\n  return {\r\n    type: 'CLAIMS_CLOSE_RFI_POST_REQUEST',\r\n    payload: { taskID },\r\n  };\r\n};\r\n\r\nexport const postCloseRFISuccess = (data) => {\r\n  return {\r\n    type: 'CLAIMS_CLOSE_RFI_POST_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const postCloseRFIFailure = (error) => {\r\n  return {\r\n    type: 'CLAIMS_CLOSE_RFI_POST_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}