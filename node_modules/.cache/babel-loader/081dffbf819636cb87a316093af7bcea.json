{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { addLoader, removeLoader, enqueueNotification, hideModal, authLogout } from 'stores';\nimport * as utils from 'utils';\nexport var postSaveTaskCheckListActions = function postSaveTaskCheckListActions(taskId, data) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/claims.actions.postSaveTaskCheckListActions'\n    };\n\n    if (!taskId) {\n      dispatch(postSaveTaskCheckListActionsFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Missing requests params'\n      })));\n      dispatch(enqueueNotification('Missing requests params', 'error'));\n      dispatch(removeLoader('postSaveTaskCheckListActions'));\n      return;\n    }\n\n    dispatch(postSaveTaskCheckListActionsRequest(taskId, data));\n    dispatch(addLoader('postSaveTaskCheckListActions'));\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.bpmService,\n      path: \"workflow/task/\".concat(taskId, \"/detail\"),\n      data: data\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json, true);\n    }).then(function (data) {\n      dispatch(postSaveTaskCheckListActionsSuccess(data.data));\n      dispatch(enqueueNotification(data.message, 'success'));\n      dispatch(hideModal());\n      return data;\n    }).catch(function (error) {\n      dispatch(postSaveTaskCheckListActionsFailure(error, defaultError));\n      dispatch(enqueueNotification(error.json.message, 'error'));\n      utils.api.handleUnauthorized(error, dispatch, authLogout);\n      return error;\n    }).finally(function () {\n      dispatch(removeLoader('postSaveTaskCheckListActions'));\n    });\n  };\n};\nexport var postSaveTaskCheckListActionsRequest = function postSaveTaskCheckListActionsRequest(params) {\n  return {\n    type: 'CLAIMS_TASK_PROCESSING_SAVE_CHECKLIST_ACTIONS_REQUEST',\n    payload: params\n  };\n};\nexport var postSaveTaskCheckListActionsSuccess = function postSaveTaskCheckListActionsSuccess(data) {\n  return {\n    type: 'CLAIMS_TASK_PROCESSING_SAVE_CHECKLIST_ACTIONS_SUCCESS',\n    payload: data\n  };\n};\nexport var postSaveTaskCheckListActionsFailure = function postSaveTaskCheckListActionsFailure(error) {\n  return {\n    type: 'CLAIMS_TASK_PROCESSING_SAVE_CHECKLIST_ACTIONS_ERROR',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.postSaveTaskCheckListActions.js"],"names":["addLoader","removeLoader","enqueueNotification","hideModal","authLogout","utils","postSaveTaskCheckListActions","taskId","data","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","postSaveTaskCheckListActionsFailure","message","postSaveTaskCheckListActionsRequest","api","post","token","accessToken","bpmService","path","then","response","handleResponse","json","handleNewData","postSaveTaskCheckListActionsSuccess","catch","error","handleUnauthorized","finally","params","type","payload"],"mappings":"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","sourcesContent":["import { addLoader, removeLoader, enqueueNotification, hideModal, authLogout } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const postSaveTaskCheckListActions = (taskId, data) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } } } = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.postSaveTaskCheckListActions',\r\n  };\r\n\r\n  if (!taskId) {\r\n    dispatch(postSaveTaskCheckListActionsFailure({ ...defaultError, message: 'Missing requests params' }));\r\n    dispatch(enqueueNotification('Missing requests params', 'error'));\r\n    dispatch(removeLoader('postSaveTaskCheckListActions'));\r\n    return;\r\n  }\r\n\r\n  dispatch(postSaveTaskCheckListActionsRequest(taskId, data));\r\n  dispatch(addLoader('postSaveTaskCheckListActions'));\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.bpmService,\r\n      path: `workflow/task/${taskId}/detail`,\r\n      data: data,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json, true))\r\n    .then((data) => {\r\n      dispatch(postSaveTaskCheckListActionsSuccess(data.data));\r\n      dispatch(enqueueNotification(data.message, 'success'));\r\n      dispatch(hideModal());\r\n      return data;\r\n    })\r\n    .catch((error) => {\r\n      dispatch(postSaveTaskCheckListActionsFailure(error, defaultError));\r\n      dispatch(enqueueNotification(error.json.message, 'error'));\r\n      utils.api.handleUnauthorized(error, dispatch, authLogout);\r\n      return error;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('postSaveTaskCheckListActions'));\r\n    });\r\n};\r\n\r\nexport const postSaveTaskCheckListActionsRequest = (params) => {\r\n  return {\r\n    type: 'CLAIMS_TASK_PROCESSING_SAVE_CHECKLIST_ACTIONS_REQUEST',\r\n    payload: params,\r\n  };\r\n};\r\n\r\nexport const postSaveTaskCheckListActionsSuccess = (data) => {\r\n  return {\r\n    type: 'CLAIMS_TASK_PROCESSING_SAVE_CHECKLIST_ACTIONS_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const postSaveTaskCheckListActionsFailure = (error) => {\r\n  return {\r\n    type: 'CLAIMS_TASK_PROCESSING_SAVE_CHECKLIST_ACTIONS_ERROR',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}