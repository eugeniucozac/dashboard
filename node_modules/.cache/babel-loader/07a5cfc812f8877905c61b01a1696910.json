{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { removeLoader, addLoader, enqueueNotification, authLogout } from 'stores';\nimport * as utils from 'utils';\nexport var getTaskCaseViewType = function getTaskCaseViewType(params) {\n  return function (dispatch, getState) {\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/premiumProcessing.actions.getTaskCaseViewType'\n    };\n    dispatch(getTaskCaseViewTypeRequest(params));\n    dispatch(addLoader('getTaskCaseViewType'));\n\n    if (!(params === null || params === void 0 ? void 0 : params.caseId)) {\n      dispatch(getTaskCaseViewTypeFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Missing parameters'\n      })));\n      dispatch(enqueueNotification('premiumProcessing.invalidRequest', 'error'));\n      dispatch(removeLoader('getTaskCaseViewType'));\n      return;\n    }\n\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.bpmService,\n      path: \"workflow/process/notification/landing/page/\".concat(params === null || params === void 0 ? void 0 : params.caseId)\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(getTaskCaseViewTypeSuccess(data === null || data === void 0 ? void 0 : data.data));\n      return data;\n    })[\"catch\"](function (error) {\n      utils.api.handleError(error, _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API fetch error (premiumProcessing.getTaskCaseViewType)'\n      }));\n      utils.api.handleUnauthorized(error, dispatch, authLogout);\n      dispatch(getTaskCaseViewTypeFailure(error, defaultError, 'filter'));\n      dispatch(getTaskCaseViewTypeFailure(error, defaultError, 'search'));\n      dispatch(enqueueNotification('premiumProcessing.apiResponseError', 'error'));\n      return error;\n    })[\"finally\"](function () {\n      dispatch(removeLoader('getTaskCaseViewType'));\n    });\n  };\n};\nexport var getTaskCaseViewTypeRequest = function getTaskCaseViewTypeRequest(payload) {\n  return {\n    type: 'PREMIUM_PROCESSING_TASK_CASE_VIEW_TYPE_REQUEST',\n    payload: payload\n  };\n};\nexport var getTaskCaseViewTypeSuccess = function getTaskCaseViewTypeSuccess(data) {\n  return {\n    type: 'PREMIUM_PROCESSING_TASK_CASE_VIEW_TYPE_SUCCESS',\n    payload: data\n  };\n};\nexport var getTaskCaseViewTypeFailure = function getTaskCaseViewTypeFailure(error, defaultError, type) {\n  return {\n    type: 'PREMIUM_PROCESSING_TASK_CASE_VIEW_TYPE_FAILURE',\n    payload: {\n      error: error,\n      defaultError: defaultError,\n      type: type\n    }\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/premiumProcessing/premiumProcessing.actions.getTaskCaseViewType.js"],"names":["removeLoader","addLoader","enqueueNotification","authLogout","utils","getTaskCaseViewType","params","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","getTaskCaseViewTypeRequest","caseId","getTaskCaseViewTypeFailure","message","api","get","token","accessToken","bpmService","path","then","response","handleResponse","json","handleNewData","data","getTaskCaseViewTypeSuccess","error","handleError","handleUnauthorized","payload","type"],"mappings":"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","sourcesContent":["import { removeLoader, addLoader, enqueueNotification, authLogout } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const getTaskCaseViewType = (params) => (dispatch, getState) => {\r\n  const {\r\n    user: { auth },\r\n    config: {\r\n      vars: { endpoint },\r\n    },\r\n  } = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/premiumProcessing.actions.getTaskCaseViewType',\r\n  };\r\n  dispatch(getTaskCaseViewTypeRequest(params));\r\n  dispatch(addLoader('getTaskCaseViewType'));\r\n\r\n  if (!params?.caseId) {\r\n    dispatch(getTaskCaseViewTypeFailure({ ...defaultError, message: 'Missing parameters' }));\r\n    dispatch(enqueueNotification('premiumProcessing.invalidRequest', 'error'));\r\n    dispatch(removeLoader('getTaskCaseViewType'));\r\n    return;\r\n  }\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.bpmService,\r\n      path: `workflow/process/notification/landing/page/${params?.caseId}`,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(getTaskCaseViewTypeSuccess(data?.data));\r\n      return data;\r\n    })\r\n    .catch((error) => {\r\n      utils.api.handleError(error, { ...defaultError, message: 'API fetch error (premiumProcessing.getTaskCaseViewType)' });\r\n      utils.api.handleUnauthorized(error, dispatch, authLogout);\r\n      dispatch(getTaskCaseViewTypeFailure(error, defaultError, 'filter'));\r\n      dispatch(getTaskCaseViewTypeFailure(error, defaultError, 'search'));\r\n      dispatch(enqueueNotification('premiumProcessing.apiResponseError', 'error'));\r\n      return error;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('getTaskCaseViewType'));\r\n    });\r\n};\r\n\r\nexport const getTaskCaseViewTypeRequest = (payload) => {\r\n  return {\r\n    type: 'PREMIUM_PROCESSING_TASK_CASE_VIEW_TYPE_REQUEST',\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const getTaskCaseViewTypeSuccess = (data) => {\r\n  return {\r\n    type: 'PREMIUM_PROCESSING_TASK_CASE_VIEW_TYPE_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const getTaskCaseViewTypeFailure = (error, defaultError, type) => {\r\n  return {\r\n    type: 'PREMIUM_PROCESSING_TASK_CASE_VIEW_TYPE_FAILURE',\r\n    payload: { error, defaultError, type },\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}