{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { addLoader, authLogout, removeLoader, enqueueNotification, hideModal } from 'stores';\nimport * as utils from 'utils';\nexport var userEdit = function userEdit(user, id) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/administration.actions.userEdit'\n    };\n    dispatch(userEditRequest(user));\n    dispatch(addLoader('userEdit'));\n\n    if (!utils.generic.isValidObject(user)) {\n      dispatch(userEditFailure(defaultError));\n      dispatch(enqueueNotification('notification.user.invalidRequest', 'error'));\n      dispatch(removeLoader('userEdit'));\n      dispatch(hideModal());\n      return;\n    }\n\n    var role = user.role,\n        departments = user.departments,\n        businessProcesses = user.businessProcesses,\n        team = user.team,\n        xbInstances = user.xbInstances,\n        groups = user.groups,\n        otherProps = _objectWithoutProperties(user, [\"role\", \"departments\", \"businessProcesses\", \"team\", \"xbInstances\", \"groups\"]);\n\n    var putBody = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, otherProps), {}, {\n      userId: id\n    }, role && {\n      role: parseInt(role)\n    }), departments && {\n      departments: departments.map(function (d) {\n        return d.id;\n      })\n    }), businessProcesses && {\n      businessProcesses: user.businessProcesses.map(function (bp) {\n        return bp.businessProcessID;\n      })\n    }), xbInstances && {\n      xbInstances: user.xbInstances.map(function (xbi) {\n        return xbi.sourceID;\n      })\n    }), groups && {\n      groups: user.groups.map(function (g) {\n        return g.id;\n      })\n    }), {}, {\n      organisation: 0\n    }, (team === null || team === void 0 ? void 0 : team[0]) && {\n      organisation: parseInt(team[0])\n    });\n\n    return utils.api.put({\n      token: auth.accessToken,\n      endpoint: endpoint.authService,\n      path: \"api/users/\".concat(id),\n      data: putBody\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (data) {\n      return utils.api.handleNewData(data);\n    }).then(function (data) {\n      dispatch(userEditSuccess(data.data));\n      dispatch(enqueueNotification('notification.user.edit.ok', 'success'));\n    })[\"catch\"](function (err) {\n      utils.api.handleError(err, defaultError);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(userEditFailure(err));\n      dispatch(enqueueNotification('notification.user.edit.fail', 'error'));\n      return err;\n    })[\"finally\"](function () {\n      dispatch(removeLoader('userEdit'));\n      dispatch(hideModal());\n    });\n  };\n};\nexport var userEditRequest = function userEditRequest(payload) {\n  return {\n    type: 'ADMINISTRATION_USER_EDIT_REQUEST',\n    payload: payload\n  };\n};\nexport var userEditSuccess = function userEditSuccess(payload) {\n  return {\n    type: 'ADMINISTRATION_USER_EDIT_SUCCESS',\n    payload: payload\n  };\n};\nexport var userEditFailure = function userEditFailure(error) {\n  return {\n    type: 'ADMINISTRATION_USER_EDIT_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/administration/administration.actions.editUser.js"],"names":["addLoader","authLogout","removeLoader","enqueueNotification","hideModal","utils","userEdit","user","id","dispatch","getState","auth","endpoint","config","vars","defaultError","file","userEditRequest","generic","isValidObject","userEditFailure","role","departments","businessProcesses","team","xbInstances","groups","otherProps","putBody","userId","parseInt","map","d","bp","businessProcessID","xbi","sourceID","g","organisation","api","put","token","accessToken","authService","path","data","then","response","handleResponse","handleNewData","userEditSuccess","err","handleError","handleUnauthorized","payload","type","error"],"mappings":"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","sourcesContent":["import { addLoader, authLogout, removeLoader, enqueueNotification, hideModal } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const userEdit = (user, id) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n  const defaultError = { file: 'stores/administration.actions.userEdit' };\r\n\r\n  dispatch(userEditRequest(user));\r\n  dispatch(addLoader('userEdit'));\r\n\r\n  if (!utils.generic.isValidObject(user)) {\r\n    dispatch(userEditFailure(defaultError));\r\n    dispatch(enqueueNotification('notification.user.invalidRequest', 'error'));\r\n    dispatch(removeLoader('userEdit'));\r\n    dispatch(hideModal());\r\n    return;\r\n  }\r\n\r\n  const { role, departments, businessProcesses, team, xbInstances, groups, ...otherProps } = user;\r\n\r\n  const putBody = {\r\n    ...otherProps,\r\n    userId: id,\r\n    ...(role && { role: parseInt(role) }),\r\n    ...(departments && { departments: departments.map((d) => d.id) }),\r\n    ...(businessProcesses && { businessProcesses: user.businessProcesses.map((bp) => bp.businessProcessID) }),\r\n    ...(xbInstances && { xbInstances: user.xbInstances.map((xbi) => xbi.sourceID) }),\r\n    ...(groups && { groups: user.groups.map((g) => g.id) }),\r\n    organisation: 0,\r\n    ...(team?.[0] && { organisation: parseInt(team[0]) }),\r\n  };\r\n\r\n  return utils.api\r\n    .put({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.authService,\r\n      path: `api/users/${id}`,\r\n      data: putBody,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((data) => utils.api.handleNewData(data))\r\n    .then((data) => {\r\n      dispatch(userEditSuccess(data.data));\r\n      dispatch(enqueueNotification('notification.user.edit.ok', 'success'));\r\n    })\r\n    .catch((err) => {\r\n      utils.api.handleError(err, defaultError);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(userEditFailure(err));\r\n      dispatch(enqueueNotification('notification.user.edit.fail', 'error'));\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('userEdit'));\r\n      dispatch(hideModal());\r\n    });\r\n};\r\n\r\nexport const userEditRequest = (payload) => {\r\n  return {\r\n    type: 'ADMINISTRATION_USER_EDIT_REQUEST',\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const userEditSuccess = (payload) => {\r\n  return {\r\n    type: 'ADMINISTRATION_USER_EDIT_SUCCESS',\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const userEditFailure = (error) => {\r\n  return {\r\n    type: 'ADMINISTRATION_USER_EDIT_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}