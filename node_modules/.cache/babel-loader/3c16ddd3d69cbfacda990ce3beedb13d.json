{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { addLoader, removeLoader, enqueueNotification, authLogout } from 'stores';\nimport * as utils from 'utils';\nexport var condirmAdHocTask = function condirmAdHocTask(confirmActionPayload, taskId) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/claims.actions.confirmAdHocTask'\n    };\n    dispatch(confirmAdHocTaskRequest({\n      confirmActionPayload: confirmActionPayload,\n      taskId: taskId\n    }));\n    dispatch(addLoader('confirmAdHocTask'));\n\n    if (!confirmActionPayload || !taskId) {\n      dispatch(confirmAdHocTaskFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Missing requests params'\n      })));\n      dispatch(removeLoader('confirmAdHocTask'));\n      return;\n    }\n\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.bpmService,\n      path: \"workflow/process/confirm/task/\".concat(taskId, \"/adhoc\"),\n      data: confirmActionPayload\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(confirmAdHocTaskSuccess(data));\n      dispatch(enqueueNotification(utils.string.t('claims.processing.notification.adhocTaskSubmittedSuccess'), 'success'));\n      return data;\n    }).catch(function (error) {\n      dispatch(confirmAdHocTaskFailure(error, defaultError));\n      dispatch(enqueueNotification(utils.string.t('claims.processing.notification.adhocTaskSubmittedFailure'), 'error'));\n      utils.api.handleUnauthorized(error, dispatch, authLogout);\n      return error;\n    }).finally(function () {\n      dispatch(removeLoader('confirmAdHocTask'));\n    });\n  };\n};\nexport var confirmAdHocTaskRequest = function confirmAdHocTaskRequest(_ref) {\n  var confirmActionPayload = _ref.confirmActionPayload,\n      taskId = _ref.taskId;\n  return {\n    type: 'CLAIMS_CONFIRM_ADHOC_TASK_POST_REQUEST',\n    payload: {\n      confirmActionPayload: confirmActionPayload,\n      taskId: taskId\n    }\n  };\n};\nexport var confirmAdHocTaskSuccess = function confirmAdHocTaskSuccess(data) {\n  return {\n    type: 'CLAIMS_CONFIRM_ADHOC_TASK_POST_SUCCESS',\n    payload: data\n  };\n};\nexport var confirmAdHocTaskFailure = function confirmAdHocTaskFailure(error) {\n  return {\n    type: 'CLAIMS_CONFIRM_ADHOC_TASK_POST_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.confirmAdhocTask.js"],"names":["addLoader","removeLoader","enqueueNotification","authLogout","utils","condirmAdHocTask","confirmActionPayload","taskId","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","confirmAdHocTaskRequest","confirmAdHocTaskFailure","message","api","post","token","accessToken","bpmService","path","data","then","response","handleResponse","json","handleNewData","confirmAdHocTaskSuccess","string","t","catch","error","handleUnauthorized","finally","type","payload"],"mappings":"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","sourcesContent":["import { addLoader, removeLoader, enqueueNotification, authLogout } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const condirmAdHocTask = (confirmActionPayload, taskId) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } }} = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.confirmAdHocTask',\r\n  };\r\n\r\n  dispatch(confirmAdHocTaskRequest({ confirmActionPayload, taskId }));\r\n  dispatch(addLoader('confirmAdHocTask'));\r\n\r\n  if (!confirmActionPayload || !taskId) {\r\n    dispatch(confirmAdHocTaskFailure({ ...defaultError, message: 'Missing requests params' }));\r\n    dispatch(removeLoader('confirmAdHocTask'));\r\n    return;\r\n  }\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.bpmService,\r\n      path: `workflow/process/confirm/task/${taskId}/adhoc`,\r\n      data: confirmActionPayload,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(confirmAdHocTaskSuccess(data));\r\n      dispatch(enqueueNotification(utils.string.t('claims.processing.notification.adhocTaskSubmittedSuccess'), 'success'));\r\n      return data;\r\n    })\r\n    .catch((error) => {\r\n      dispatch(confirmAdHocTaskFailure(error, defaultError));\r\n      dispatch(enqueueNotification(utils.string.t('claims.processing.notification.adhocTaskSubmittedFailure'), 'error'));\r\n      utils.api.handleUnauthorized(error, dispatch, authLogout);\r\n      return error;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('confirmAdHocTask'));\r\n    });\r\n};\r\n\r\nexport const confirmAdHocTaskRequest = ({ confirmActionPayload, taskId }) => {\r\n  return {\r\n    type: 'CLAIMS_CONFIRM_ADHOC_TASK_POST_REQUEST',\r\n    payload: { confirmActionPayload, taskId },\r\n  };\r\n};\r\n\r\nexport const confirmAdHocTaskSuccess = (data) => {\r\n  return {\r\n    type: 'CLAIMS_CONFIRM_ADHOC_TASK_POST_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const confirmAdHocTaskFailure = (error) => {\r\n  return {\r\n    type: 'CLAIMS_CONFIRM_ADHOC_TASK_POST_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}