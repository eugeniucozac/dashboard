{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\RiskQuotes\\\\RiskQuotes.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux'; // app\n\nimport RiskQuotesView from './RiskQuotes.view';\nimport { CoverageComparison } from 'modules/QuoteBind';\nimport { getRiskQuotes, getCoverages, selectRiskQuotes, selectRiskQuotesLoading, showModal, acceptRiskQuote, declineRiskQuote, downloadRiskQuote, getRiskDetails, selectPartyOptions, selectRefDataCountriesIso2, requestToBind, requestDismissIssues, postRiskQuoteResponse } from 'stores';\nimport { RISK_QUOTE_STATUS_BOUND, RISK_QUOTE_STATUS_QUOTING } from 'consts';\nimport * as utils from 'utils';\nimport { useInterval } from 'hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar RiskQuotes = function RiskQuotes(_ref) {\n  _s();\n\n  var _risk$insured, _risk$reinsured;\n\n  var risk = _ref.risk,\n      riskStatus = _ref.riskStatus,\n      coverageDefinition = _ref.coverageDefinition,\n      riskIsLoading = _ref.riskIsLoading;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isCoverageComparisonOpen = _useState2[0],\n      setIsCoverageComparisonOpen = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isQuoteLoading = _useState4[0],\n      setIsQuoteLoading = _useState4[1];\n\n  var dispatch = useDispatch();\n  var quotes = useSelector(selectRiskQuotes);\n  var isLoading = useSelector(selectRiskQuotesLoading);\n  var partyOptions = useSelector(selectPartyOptions);\n  var refDataCountries = useSelector(selectRefDataCountriesIso2);\n  var hasBoundQuote = utils.generic.isValidArray(quotes, true) && quotes.some(function (q) {\n    return q.response && q.response.responseStatus === RISK_QUOTE_STATUS_BOUND;\n  });\n  var hasPendingQuote = utils.generic.isValidArray(quotes, true) && quotes.some(function (q) {\n    return q.status === RISK_QUOTE_STATUS_QUOTING;\n  });\n  var delay = hasPendingQuote ? 2000 : null;\n  var insuredSanctionsCheckResult = (risk === null || risk === void 0 ? void 0 : (_risk$insured = risk.insured) === null || _risk$insured === void 0 ? void 0 : _risk$insured.sanctionsCheckResult) || {};\n  var reInsuredSanctionsCheckResult = (risk === null || risk === void 0 ? void 0 : (_risk$reinsured = risk.reinsured) === null || _risk$reinsured === void 0 ? void 0 : _risk$reinsured.sanctionsCheckResult) || {};\n  var issues = (risk === null || risk === void 0 ? void 0 : risk.issues) || [];\n  var hasIssues = (issues === null || issues === void 0 ? void 0 : issues.length) || false;\n  var showCoverageComparison = (coverageDefinition === null || coverageDefinition === void 0 ? void 0 : coverageDefinition.length) > 0;\n  var issuesData = {\n    insuredSanctionsCheckResult: insuredSanctionsCheckResult,\n    reInsuredSanctionsCheckResult: reInsuredSanctionsCheckResult,\n    issues: issues,\n    hasIssues: hasIssues\n  };\n  useEffect(function () {\n    dispatch(getRiskQuotes(risk === null || risk === void 0 ? void 0 : risk.id));\n  }, [dispatch, risk === null || risk === void 0 ? void 0 : risk.id]);\n  useEffect(function () {\n    !hasPendingQuote && handleQuoteLoading(false);\n  }, [hasPendingQuote]);\n  useInterval(function () {\n    dispatch(getRiskQuotes(risk === null || risk === void 0 ? void 0 : risk.id, false));\n  }, delay);\n  useEffect(function () {\n    if (!isQuoteLoading && !hasPendingQuote && riskStatus === RISK_QUOTE_STATUS_QUOTING.toLowerCase()) {\n      dispatch(getRiskDetails(risk === null || risk === void 0 ? void 0 : risk.id, true, false));\n    }\n  }, [isQuoteLoading, riskStatus, hasPendingQuote, dispatch, risk === null || risk === void 0 ? void 0 : risk.id]);\n\n  var handlePatchRiskQuote = function handlePatchRiskQuote(_ref2) {\n    var quote = _ref2.quote;\n    dispatch(showModal({\n      component: 'EDIT_RISK_QUOTE',\n      props: {\n        title: 'risks.updateQuote',\n        fullWidth: true,\n        maxWidth: 'xs',\n        componentProps: {\n          quote: quote\n        }\n      }\n    }));\n  };\n\n  var handleBindRiskQuote = function handleBindRiskQuote(quote) {\n    var bindInfo = {\n      quoteId: quote === null || quote === void 0 ? void 0 : quote.id,\n      effectiveFrom: risk === null || risk === void 0 ? void 0 : risk.inceptionDate,\n      effectiveTo: risk === null || risk === void 0 ? void 0 : risk.expiryDate,\n      riskId: risk === null || risk === void 0 ? void 0 : risk.id,\n      responseStatus: RISK_QUOTE_STATUS_BOUND\n    };\n    dispatch(postRiskQuoteResponse(bindInfo));\n  };\n\n  var executePreBind = function executePreBind(quote, isPreBind, isReqBind) {\n    var product = risk.riskType;\n    var modalTitle = isPreBind ? \"\".concat(utils.string.t('risks.preBind')) : \"\".concat(utils.string.t('risks.postBind'));\n    dispatch(showModal({\n      component: 'PRE_BIND_QUOTE',\n      props: {\n        title: modalTitle,\n        fullWidth: true,\n        disableBackdropClick: true,\n        enableFullScreen: true,\n        maxWidth: 'lg',\n        componentProps: {\n          product: product,\n          risk: risk,\n          quote: quote,\n          isPreBind: isPreBind,\n          isReqBind: isReqBind\n        }\n      }\n    }));\n  };\n\n  var handlePreBind = function handlePreBind(quote, isPreBind) {\n    executePreBind(quote, isPreBind, false);\n  };\n\n  var handleRequestToBind = function handleRequestToBind(quote, displayPreBind) {\n    if (displayPreBind) {\n      executePreBind(quote, true, true);\n    } else {\n      dispatch(requestToBind(quote));\n    }\n  };\n\n  var handleAcceptRiskQuote = function handleAcceptRiskQuote(id) {\n    dispatch(acceptRiskQuote(id));\n  };\n\n  var handleDownloadQuote = function handleDownloadQuote(id) {\n    dispatch(downloadRiskQuote(id));\n  };\n\n  var handleDeclineRiskQuote = function handleDeclineRiskQuote(id) {\n    dispatch(showModal({\n      component: 'CONFIRM_DECLINE_RISK',\n      props: {\n        modalProps: {\n          fullWidth: true,\n          maxWidth: 'md'\n        },\n        title: 'risks.declineQuote',\n        maxWidth: 'xs',\n        componentProps: {\n          submitHandler: function submitHandler() {\n            dispatch(declineRiskQuote(id));\n          }\n        }\n      }\n    }));\n  };\n\n  var handleQuoteRefresh = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              handleQuoteLoading(true);\n              dispatch(getRiskDetails(risk === null || risk === void 0 ? void 0 : risk.id, true));\n              _context.next = 4;\n              return dispatch(getRiskQuotes(risk === null || risk === void 0 ? void 0 : risk.id));\n\n            case 4:\n              handleQuoteLoading(false);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleQuoteRefresh() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var handleRequestDismissIssues = function handleRequestDismissIssues(quote) {\n    dispatch(requestDismissIssues(quote));\n  };\n\n  var handleReQuoteRisk = function handleReQuoteRisk() {\n    var _risk$insured2;\n\n    var riskId = risk.id;\n    var riskData = risk.risk;\n    var riskType = risk.riskType;\n    var modalTitle = \"\".concat(utils.string.t('app.reQuote'), \" - \").concat(risk === null || risk === void 0 ? void 0 : (_risk$insured2 = risk.insured) === null || _risk$insured2 === void 0 ? void 0 : _risk$insured2.name);\n    dispatch(showModal({\n      component: 'ADD_EDIT_QUOTE_BIND',\n      props: {\n        title: modalTitle,\n        fullWidth: true,\n        disableBackdropClick: true,\n        enableFullScreen: true,\n        maxWidth: 'xl',\n        componentProps: {\n          product: {\n            value: riskType\n          },\n          riskData: riskData,\n          riskId: riskId\n        }\n      }\n    }));\n  };\n\n  var handleOpenCoverageComparison = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setIsCoverageComparisonOpen(function (prevState) {\n                return !prevState;\n              });\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleOpenCoverageComparison() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  var handleQuoteLoading = function handleQuoteLoading(isLoading) {\n    setIsQuoteLoading(isLoading);\n  };\n\n  var reFetchData = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id) {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              handleQuoteLoading(true);\n              dispatch(getRiskQuotes(id, false));\n              _context3.next = 4;\n              return dispatch(getCoverages(id));\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function reFetchData(_x) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(RiskQuotesView, {\n      isLoading: isLoading,\n      riskIsLoading: riskIsLoading,\n      quotes: quotes,\n      hasBoundQuote: hasBoundQuote,\n      riskStatus: risk === null || risk === void 0 ? void 0 : risk.riskStatus,\n      riskInsuredId: risk === null || risk === void 0 ? void 0 : risk.insuredId,\n      issuesData: issuesData,\n      parties: _objectSpread(_objectSpread({}, partyOptions), {}, {\n        countries: refDataCountries\n      }),\n      handlePatchRiskQuote: handlePatchRiskQuote,\n      handleDeclineRiskQuote: handleDeclineRiskQuote,\n      handleAcceptRiskQuote: handleAcceptRiskQuote,\n      handleBindRiskQuote: handleBindRiskQuote,\n      handleDownloadQuote: handleDownloadQuote,\n      handleRiskRefresh: handleQuoteRefresh,\n      handleRequestToBind: handleRequestToBind,\n      handleReQuoteRisk: handleReQuoteRisk,\n      handleQuoteRefresh: handleQuoteRefresh,\n      handlePreBind: handlePreBind,\n      handleRequestDismissIssues: handleRequestDismissIssues,\n      handleOpenCoverageComparison: handleOpenCoverageComparison,\n      showCoverageComparison: showCoverageComparison,\n      isQuoteLoading: isQuoteLoading || hasPendingQuote\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, _this), (risk === null || risk === void 0 ? void 0 : risk.id) && risk.riskType ? /*#__PURE__*/_jsxDEV(CoverageComparison, {\n      open: isCoverageComparisonOpen,\n      riskId: risk.id,\n      riskType: risk.riskType,\n      handleOpenCoverageComparison: handleOpenCoverageComparison,\n      handleQuoteLoading: handleQuoteLoading,\n      reFetchData: reFetchData,\n      coverageDefinitionFields: coverageDefinition\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 9\n    }, _this) : null]\n  }, void 0, true);\n};\n\n_s(RiskQuotes, \"uXBzD+HTidHkbzx2NQpl5pRIeno=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useInterval];\n});\n\n_c = RiskQuotes;\nRiskQuotes.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"RiskQuotes\"\n};\nexport default RiskQuotes;\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\modules\\\\RiskQuotes\\\\RiskQuotes.js\"] = {\n    name: \"RiskQuotes\",\n    docgenInfo: RiskQuotes.__docgenInfo,\n    path: \"src\\\\modules\\\\RiskQuotes\\\\RiskQuotes.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"RiskQuotes\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/RiskQuotes/RiskQuotes.js"],"names":["useState","useEffect","useSelector","useDispatch","RiskQuotesView","CoverageComparison","getRiskQuotes","getCoverages","selectRiskQuotes","selectRiskQuotesLoading","showModal","acceptRiskQuote","declineRiskQuote","downloadRiskQuote","getRiskDetails","selectPartyOptions","selectRefDataCountriesIso2","requestToBind","requestDismissIssues","postRiskQuoteResponse","RISK_QUOTE_STATUS_BOUND","RISK_QUOTE_STATUS_QUOTING","utils","useInterval","RiskQuotes","risk","riskStatus","coverageDefinition","riskIsLoading","isCoverageComparisonOpen","setIsCoverageComparisonOpen","isQuoteLoading","setIsQuoteLoading","dispatch","quotes","isLoading","partyOptions","refDataCountries","hasBoundQuote","generic","isValidArray","some","q","response","responseStatus","hasPendingQuote","status","delay","insuredSanctionsCheckResult","insured","sanctionsCheckResult","reInsuredSanctionsCheckResult","reinsured","issues","hasIssues","length","showCoverageComparison","issuesData","id","handleQuoteLoading","toLowerCase","handlePatchRiskQuote","quote","component","props","title","fullWidth","maxWidth","componentProps","handleBindRiskQuote","bindInfo","quoteId","effectiveFrom","inceptionDate","effectiveTo","expiryDate","riskId","executePreBind","isPreBind","isReqBind","product","riskType","modalTitle","string","t","disableBackdropClick","enableFullScreen","handlePreBind","handleRequestToBind","displayPreBind","handleAcceptRiskQuote","handleDownloadQuote","handleDeclineRiskQuote","modalProps","submitHandler","handleQuoteRefresh","handleRequestDismissIssues","handleReQuoteRisk","riskData","name","value","handleOpenCoverageComparison","prevState","reFetchData","insuredId","countries"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\n// app\r\nimport RiskQuotesView from './RiskQuotes.view';\r\nimport { CoverageComparison } from 'modules/QuoteBind';\r\nimport {\r\n  getRiskQuotes,\r\n  getCoverages,\r\n  selectRiskQuotes,\r\n  selectRiskQuotesLoading,\r\n  showModal,\r\n  acceptRiskQuote,\r\n  declineRiskQuote,\r\n  downloadRiskQuote,\r\n  getRiskDetails,\r\n  selectPartyOptions,\r\n  selectRefDataCountriesIso2,\r\n  requestToBind,\r\n  requestDismissIssues,\r\n  postRiskQuoteResponse,\r\n} from 'stores';\r\nimport { RISK_QUOTE_STATUS_BOUND, RISK_QUOTE_STATUS_QUOTING } from 'consts';\r\nimport * as utils from 'utils';\r\nimport { useInterval } from 'hooks';\r\n\r\nconst RiskQuotes = ({ risk, riskStatus, coverageDefinition, riskIsLoading }) => {\r\n  const [isCoverageComparisonOpen, setIsCoverageComparisonOpen] = useState(false);\r\n  const [isQuoteLoading, setIsQuoteLoading] = useState(false);\r\n\r\n  const dispatch = useDispatch();\r\n  const quotes = useSelector(selectRiskQuotes);\r\n  const isLoading = useSelector(selectRiskQuotesLoading);\r\n  const partyOptions = useSelector(selectPartyOptions);\r\n  const refDataCountries = useSelector(selectRefDataCountriesIso2);\r\n  const hasBoundQuote =\r\n    utils.generic.isValidArray(quotes, true) && quotes.some((q) => q.response && q.response.responseStatus === RISK_QUOTE_STATUS_BOUND);\r\n\r\n  const hasPendingQuote = utils.generic.isValidArray(quotes, true) && quotes.some((q) => q.status === RISK_QUOTE_STATUS_QUOTING);\r\n  const delay = hasPendingQuote ? 2000 : null;\r\n\r\n  const insuredSanctionsCheckResult = risk?.insured?.sanctionsCheckResult || {};\r\n  const reInsuredSanctionsCheckResult = risk?.reinsured?.sanctionsCheckResult || {};\r\n  const issues = risk?.issues || [];\r\n  const hasIssues = issues?.length || false;\r\n  const showCoverageComparison = coverageDefinition?.length > 0;\r\n\r\n  const issuesData = {\r\n    insuredSanctionsCheckResult,\r\n    reInsuredSanctionsCheckResult,\r\n    issues,\r\n    hasIssues,\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(getRiskQuotes(risk?.id));\r\n  }, [dispatch, risk?.id]);\r\n\r\n  useEffect(() => {\r\n    !hasPendingQuote && handleQuoteLoading(false);\r\n  }, [hasPendingQuote]);\r\n\r\n  useInterval(() => {\r\n    dispatch(getRiskQuotes(risk?.id, false));\r\n  }, delay);\r\n\r\n  useEffect(() => {\r\n    if (!isQuoteLoading && !hasPendingQuote && riskStatus === RISK_QUOTE_STATUS_QUOTING.toLowerCase()) {\r\n      dispatch(getRiskDetails(risk?.id, true, false));\r\n    }\r\n  }, [isQuoteLoading, riskStatus, hasPendingQuote, dispatch, risk?.id]);\r\n\r\n  const handlePatchRiskQuote = ({ quote }) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'EDIT_RISK_QUOTE',\r\n        props: {\r\n          title: 'risks.updateQuote',\r\n          fullWidth: true,\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            quote,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleBindRiskQuote = (quote) => {\r\n    const bindInfo = {\r\n      quoteId: quote?.id,\r\n      effectiveFrom: risk?.inceptionDate,\r\n      effectiveTo: risk?.expiryDate,\r\n      riskId: risk?.id,\r\n      responseStatus: RISK_QUOTE_STATUS_BOUND,\r\n    };\r\n    dispatch(postRiskQuoteResponse(bindInfo));\r\n  };\r\n\r\n  const executePreBind = (quote, isPreBind, isReqBind) => {\r\n    const product = risk.riskType;\r\n    const modalTitle = isPreBind ? `${utils.string.t('risks.preBind')}` : `${utils.string.t('risks.postBind')}`;\r\n\r\n    dispatch(\r\n      showModal({\r\n        component: 'PRE_BIND_QUOTE',\r\n        props: {\r\n          title: modalTitle,\r\n          fullWidth: true,\r\n          disableBackdropClick: true,\r\n          enableFullScreen: true,\r\n          maxWidth: 'lg',\r\n          componentProps: {\r\n            product: product,\r\n            risk,\r\n            quote,\r\n            isPreBind,\r\n            isReqBind,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handlePreBind = (quote, isPreBind) => {\r\n    executePreBind(quote, isPreBind, false);\r\n  };\r\n  const handleRequestToBind = (quote, displayPreBind) => {\r\n    if (displayPreBind) {\r\n      executePreBind(quote, true, true);\r\n    } else {\r\n      dispatch(requestToBind(quote));\r\n    }\r\n  };\r\n\r\n  const handleAcceptRiskQuote = (id) => {\r\n    dispatch(acceptRiskQuote(id));\r\n  };\r\n\r\n  const handleDownloadQuote = (id) => {\r\n    dispatch(downloadRiskQuote(id));\r\n  };\r\n\r\n  const handleDeclineRiskQuote = (id) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM_DECLINE_RISK',\r\n        props: {\r\n          modalProps: { fullWidth: true, maxWidth: 'md' },\r\n          title: 'risks.declineQuote',\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            submitHandler: () => {\r\n              dispatch(declineRiskQuote(id));\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleQuoteRefresh = async () => {\r\n    handleQuoteLoading(true);\r\n    dispatch(getRiskDetails(risk?.id, true));\r\n    await dispatch(getRiskQuotes(risk?.id));\r\n    handleQuoteLoading(false);\r\n  };\r\n\r\n  const handleRequestDismissIssues = (quote) => {\r\n    dispatch(requestDismissIssues(quote));\r\n  };\r\n\r\n  const handleReQuoteRisk = () => {\r\n    const riskId = risk.id;\r\n    const riskData = risk.risk;\r\n    const riskType = risk.riskType;\r\n    const modalTitle = `${utils.string.t('app.reQuote')} - ${risk?.insured?.name}`;\r\n\r\n    dispatch(\r\n      showModal({\r\n        component: 'ADD_EDIT_QUOTE_BIND',\r\n        props: {\r\n          title: modalTitle,\r\n          fullWidth: true,\r\n          disableBackdropClick: true,\r\n          enableFullScreen: true,\r\n          maxWidth: 'xl',\r\n          componentProps: {\r\n            product: { value: riskType },\r\n            riskData,\r\n            riskId,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleOpenCoverageComparison = async () => {\r\n    setIsCoverageComparisonOpen((prevState) => !prevState);\r\n  };\r\n  const handleQuoteLoading = (isLoading) => {\r\n    setIsQuoteLoading(isLoading);\r\n  };\r\n\r\n  const reFetchData = async (id) => {\r\n    handleQuoteLoading(true);\r\n    dispatch(getRiskQuotes(id, false));\r\n    await dispatch(getCoverages(id));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <RiskQuotesView\r\n        isLoading={isLoading}\r\n        riskIsLoading={riskIsLoading}\r\n        quotes={quotes}\r\n        hasBoundQuote={hasBoundQuote}\r\n        riskStatus={risk?.riskStatus}\r\n        riskInsuredId={risk?.insuredId}\r\n        issuesData={issuesData}\r\n        parties={{ ...partyOptions, countries: refDataCountries }}\r\n        handlePatchRiskQuote={handlePatchRiskQuote}\r\n        handleDeclineRiskQuote={handleDeclineRiskQuote}\r\n        handleAcceptRiskQuote={handleAcceptRiskQuote}\r\n        handleBindRiskQuote={handleBindRiskQuote}\r\n        handleDownloadQuote={handleDownloadQuote}\r\n        handleRiskRefresh={handleQuoteRefresh}\r\n        handleRequestToBind={handleRequestToBind}\r\n        handleReQuoteRisk={handleReQuoteRisk}\r\n        handleQuoteRefresh={handleQuoteRefresh}\r\n        handlePreBind={handlePreBind}\r\n        handleRequestDismissIssues={handleRequestDismissIssues}\r\n        handleOpenCoverageComparison={handleOpenCoverageComparison}\r\n        showCoverageComparison={showCoverageComparison}\r\n        isQuoteLoading={isQuoteLoading || hasPendingQuote}\r\n      />\r\n      {risk?.id && risk.riskType ? (\r\n        <CoverageComparison\r\n          open={isCoverageComparisonOpen}\r\n          riskId={risk.id}\r\n          riskType={risk.riskType}\r\n          handleOpenCoverageComparison={handleOpenCoverageComparison}\r\n          handleQuoteLoading={handleQuoteLoading}\r\n          reFetchData={reFetchData}\r\n          coverageDefinitionFields={coverageDefinition}\r\n        />\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RiskQuotes;\r\n"]},"metadata":{},"sourceType":"module"}