{"ast":null,"code":"import get from 'lodash/get';\nimport { authLogout } from 'stores';\nimport * as utils from 'utils';\nexport var getReferenceDataByType = function getReferenceDataByType(type, searchTerm) {\n  var limit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 200;\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    dispatch(getReferenceDataByTypeRequest(type, searchTerm, limit));\n    var endpointToStoreMap = {\n      market: 'markets',\n      client: 'clients',\n      insured: 'insureds',\n      'client/office': 'offices'\n    };\n    var data = {\n      searchStr: searchTerm,\n      limit: limit\n    };\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.edge,\n      path: \"api/\".concat(type, \"/search\"),\n      data: data\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleData(json);\n    }).then(function (data) {\n      dispatch(getReferenceDataByTypeSuccess(type, data));\n    }).then(function () {\n      // last then to return updated state data to components waiting for this promise\n      // ex: async Autocomplete (React-Select)\n      return getState().referenceData[endpointToStoreMap[type]];\n    }).catch(function (err) {\n      var errorParams = {\n        file: 'stores/referenceData.actions.getByType',\n        message: 'API fetch error (referenceData.getByType)'\n      };\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(getReferenceDataByTypeFailure(err));\n      return err;\n    });\n  };\n};\nexport var getReferenceDataByTypeRequest = function getReferenceDataByTypeRequest() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return {\n    type: 'REFERENCE_DATA_GET_BY_TYPE_REQUEST',\n    payload: args\n  };\n};\nexport var getReferenceDataByTypeSuccess = function getReferenceDataByTypeSuccess(type, data) {\n  var actionType;\n\n  switch (type) {\n    case 'market':\n      actionType = 'REFERENCE_DATA_GET_BY_TYPE_MARKETS_SUCCESS';\n      break;\n\n    case 'client':\n      actionType = 'REFERENCE_DATA_GET_BY_TYPE_CLIENTS_SUCCESS';\n      break;\n\n    case 'insured':\n      actionType = 'REFERENCE_DATA_GET_BY_TYPE_INSUREDS_SUCCESS';\n      break;\n\n    case 'client/office':\n      actionType = 'REFERENCE_DATA_GET_BY_TYPE_OFFICES_SUCCESS';\n      break;\n\n    default:\n      break;\n  }\n\n  if (!actionType) return;\n  return {\n    type: actionType,\n    payload: get(data, 'content') || []\n  };\n};\nexport var getReferenceDataByTypeFailure = function getReferenceDataByTypeFailure(error) {\n  return {\n    type: 'REFERENCE_DATA_TYPE_GET_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/referenceData/referenceData.actions.getByType.js"],"names":["get","authLogout","utils","getReferenceDataByType","type","searchTerm","limit","dispatch","getState","auth","user","endpoint","config","vars","getReferenceDataByTypeRequest","endpointToStoreMap","market","client","insured","data","searchStr","api","post","token","accessToken","edge","path","then","response","handleResponse","json","handleData","getReferenceDataByTypeSuccess","referenceData","catch","err","errorParams","file","message","handleError","handleUnauthorized","getReferenceDataByTypeFailure","args","payload","actionType","error"],"mappings":"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","sourcesContent":["import get from 'lodash/get';\r\nimport { authLogout } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const getReferenceDataByType =\r\n  (type, searchTerm, limit = 200) =>\r\n  (dispatch, getState) => {\r\n    // prettier-ignore\r\n    const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n    dispatch(getReferenceDataByTypeRequest(type, searchTerm, limit));\r\n\r\n    const endpointToStoreMap = {\r\n      market: 'markets',\r\n      client: 'clients',\r\n      insured: 'insureds',\r\n      'client/office': 'offices',\r\n    };\r\n\r\n    const data = {\r\n      searchStr: searchTerm,\r\n      limit,\r\n    };\r\n\r\n    return utils.api\r\n      .post({\r\n        token: auth.accessToken,\r\n        endpoint: endpoint.edge,\r\n        path: `api/${type}/search`,\r\n        data,\r\n      })\r\n      .then((response) => utils.api.handleResponse(response))\r\n      .then((json) => utils.api.handleData(json))\r\n      .then((data) => {\r\n        dispatch(getReferenceDataByTypeSuccess(type, data));\r\n      })\r\n      .then(() => {\r\n        // last then to return updated state data to components waiting for this promise\r\n        // ex: async Autocomplete (React-Select)\r\n        return getState().referenceData[endpointToStoreMap[type]];\r\n      })\r\n      .catch((err) => {\r\n        const errorParams = {\r\n          file: 'stores/referenceData.actions.getByType',\r\n          message: 'API fetch error (referenceData.getByType)',\r\n        };\r\n\r\n        utils.api.handleError(err, errorParams);\r\n        utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n        dispatch(getReferenceDataByTypeFailure(err));\r\n        return err;\r\n      });\r\n  };\r\n\r\nexport const getReferenceDataByTypeRequest = (...args) => {\r\n  return {\r\n    type: 'REFERENCE_DATA_GET_BY_TYPE_REQUEST',\r\n    payload: args,\r\n  };\r\n};\r\n\r\nexport const getReferenceDataByTypeSuccess = (type, data) => {\r\n  let actionType;\r\n\r\n  switch (type) {\r\n    case 'market':\r\n      actionType = 'REFERENCE_DATA_GET_BY_TYPE_MARKETS_SUCCESS';\r\n      break;\r\n    case 'client':\r\n      actionType = 'REFERENCE_DATA_GET_BY_TYPE_CLIENTS_SUCCESS';\r\n      break;\r\n    case 'insured':\r\n      actionType = 'REFERENCE_DATA_GET_BY_TYPE_INSUREDS_SUCCESS';\r\n      break;\r\n    case 'client/office':\r\n      actionType = 'REFERENCE_DATA_GET_BY_TYPE_OFFICES_SUCCESS';\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  if (!actionType) return;\r\n\r\n  return {\r\n    type: actionType,\r\n    payload: get(data, 'content') || [],\r\n  };\r\n};\r\n\r\nexport const getReferenceDataByTypeFailure = (error) => {\r\n  return {\r\n    type: 'REFERENCE_DATA_TYPE_GET_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}