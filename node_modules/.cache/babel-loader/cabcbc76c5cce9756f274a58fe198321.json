{"ast":null,"code":"import \"core-js/modules/es.array.filter\";\nimport _defineProperty from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\MarketingMarkets\\\\MarketingMarkets.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport toNumber from 'lodash/toNumber';\nimport get from 'lodash/get';\nimport groupBy from 'lodash/groupBy'; // app\n\nimport { MarketingMarketsView } from './MarketingMarkets.view';\nimport { bulkPlacementClear, bulkPlacementMarketingMarketSelect, getDepartmentMarkets, getPlacementMarkets, deletePlacementMarket, showModal, selectPlacementMarkets, selectPlacementLayers, selectFormattedAccountStatusList, selectRefDataDepartments, selectRefDataCapacityTypes, selectRefDataStatusesMarketQuote, selectRefDataStatusKeyByCode, selectRefDataStatusIdByCode, selectBulkToggleSelectMarketingMarkets, selectPlacementBulkItemsMarketingMarkets, selectDepartmentMarketsItems, selectPlacementDepartmentId } from 'stores';\nimport { Translate } from 'components';\nimport * as utils from 'utils';\nimport * as constants from 'consts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nMarketingMarkets.propTypes = {\n  placementId: PropTypes.string.isRequired\n};\nexport default function MarketingMarkets(_ref) {\n  _s();\n\n  var placementId = _ref.placementId;\n  var dispatch = useDispatch();\n  var placementLayers = useSelector(selectPlacementLayers) || [];\n  var placementMarkets = useSelector(selectPlacementMarkets) || [];\n  var refDataDepartments = useSelector(selectRefDataDepartments);\n  var refDataCapacityTypes = useSelector(selectRefDataCapacityTypes);\n  var refDataAccountStatuses = useSelector(selectFormattedAccountStatusList);\n  var refDataStatusesMarketQuote = useSelector(selectRefDataStatusesMarketQuote);\n  var statusPendingId = useSelector(selectRefDataStatusIdByCode('market', constants.STATUS_MARKET_PENDING));\n  var statusPendingKey = useSelector(selectRefDataStatusKeyByCode('market', constants.STATUS_MARKET_PENDING));\n  var statusQuotedId = useSelector(selectRefDataStatusIdByCode('market', constants.STATUS_MARKET_QUOTED));\n  var statusQuotedKey = useSelector(selectRefDataStatusKeyByCode('market', constants.STATUS_MARKET_QUOTED));\n  var statusDeclinedId = useSelector(selectRefDataStatusIdByCode('market', constants.STATUS_MARKET_DECLINED));\n  var statusDeclinedKey = useSelector(selectRefDataStatusKeyByCode('market', constants.STATUS_MARKET_DECLINED));\n  var showBulkSelect = useSelector(selectBulkToggleSelectMarketingMarkets);\n  var marketingMakets = useSelector(selectPlacementBulkItemsMarketingMarkets);\n  var placementIdNumber = toNumber(placementId);\n  var departmentMarketsItems = useSelector(selectDepartmentMarketsItems);\n  var placementSelectedDepartmentId = useSelector(selectPlacementDepartmentId);\n  var marketGroups = [].concat(_toConsumableArray(refDataCapacityTypes), [{\n    name: utils.string.t('market.noCapacityMarkets')\n  }]).map(function (type) {\n    type.markets = placementMarkets.filter(function (market) {\n      return type.id ? get(market, 'market.capacityTypeId') === type.id : !Boolean(get(market, 'market.capacityTypeId'));\n    });\n    return type;\n  }).filter(function (type) {\n    return utils.generic.isValidArray(type.markets, true);\n  });\n  useEffect(function () {\n    if (placementIdNumber) {\n      dispatch(getDepartmentMarkets(placementIdNumber));\n      dispatch(getPlacementMarkets(placementIdNumber));\n      dispatch(bulkPlacementClear());\n    }\n  }, [placementIdNumber] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  var handleEditPlacementMarketsLayers = function handleEditPlacementMarketsLayers(popoverData) {\n    dispatch(showModal({\n      component: 'EDIT_PLACEMENT_MARKETS_LAYERS',\n      props: {\n        fullWidth: false,\n        maxWidth: 'lg',\n        title: 'placement.marketing.manageMarket',\n        componentProps: _objectSpread(_objectSpread({}, popoverData), {}, {\n          placementMarket: popoverData.placementMarket\n        })\n      }\n    }));\n  };\n\n  var handleDeletePlacementMarket = function handleDeletePlacementMarket(popoverData) {\n    dispatch(showModal({\n      component: 'CONFIRM_DELETE',\n      props: {\n        fullWidth: true,\n        title: 'placement.marketing.deleteMarket',\n        maxWidth: 'xs',\n        componentProps: {\n          submitHandler: function submitHandler() {\n            dispatch(deletePlacementMarket(get(popoverData, 'placementMarket.id')));\n          }\n        }\n      }\n    }));\n  };\n\n  var handleChangeMarket = function handleChangeMarket(popoverData) {\n    var _popoverData$placemen, _popoverData$placemen2;\n\n    dispatch(showModal({\n      component: 'ADD_PLACEMENT_MARKET',\n      props: {\n        title: 'market.actions.changeMarket',\n        subtitle: (popoverData === null || popoverData === void 0 ? void 0 : (_popoverData$placemen = popoverData.placementMarket) === null || _popoverData$placemen === void 0 ? void 0 : (_popoverData$placemen2 = _popoverData$placemen.market) === null || _popoverData$placemen2 === void 0 ? void 0 : _popoverData$placemen2.edgeName) || '',\n        fullWidth: true,\n        maxWidth: 'sm',\n        componentProps: {\n          isChangeMarket: true,\n          placementId: placementId,\n          placementMarkets: [],\n          placementMarket: popoverData.placementMarket,\n          departmentId: placementSelectedDepartmentId,\n          departmentMarkets: departmentMarketsItems.map(function (item) {\n            return item.market;\n          })\n        }\n      }\n    }));\n  };\n\n  var cols = [{\n    id: 'name',\n    title: true\n  }, {\n    id: 'status',\n    label: /*#__PURE__*/_jsxDEV(Translate, {\n      label: \"market.cols.status\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 28\n    }, this),\n    style: {\n      width: '15%'\n    },\n    nowrap: true\n  }, {\n    id: 'underwriter',\n    label: /*#__PURE__*/_jsxDEV(Translate, {\n      label: \"market.cols.underwriterName\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 33\n    }, this),\n    style: {\n      width: '20%'\n    }\n  }, {\n    id: 'actions',\n    empty: true\n  }];\n  var popoverActions = [{\n    id: 'edit-placement-market',\n    label: 'market.actions.edit',\n    callback: function callback(popoverData) {\n      return handleEditPlacementMarketsLayers(popoverData);\n    }\n  }, {\n    id: 'delete-placement-market',\n    label: 'market.actions.delete',\n    callback: function callback(popoverData) {\n      return handleDeletePlacementMarket(popoverData);\n    }\n  }, {\n    id: 'change-placement-market',\n    label: 'market.actions.changeMarket',\n    callback: function callback(popoverData) {\n      return handleChangeMarket(popoverData);\n    }\n  }];\n  var marketsFiltered = placementMarkets.map(function (market) {\n    var _marketQuotesGroups$s, _marketQuotesGroups$s2, _marketQuotesGroups$s3, _market$quotes;\n\n    var placementMarketId = get(market, 'market.id');\n    var marketQuotes = placementLayers.reduce(function (acc, layer) {\n      var layerDepartment = utils.referenceData.departments.getById(refDataDepartments, layer.departmentId);\n      var layerBusinessTypes = utils.referenceData.businessTypes.getNameById(layerDepartment === null || layerDepartment === void 0 ? void 0 : layerDepartment.businessTypes, layer.businessTypeId);\n      return [].concat(_toConsumableArray(acc), _toConsumableArray(get(layer, 'markets', []).filter(function (m) {\n        return get(m, 'market.id') === placementMarketId;\n      }).map(function (m) {\n        return _objectSpread(_objectSpread({}, m), {}, {\n          placementlayerName: utils.layer.getName(layer),\n          placementlayerBusinessTypeId: layer.businessTypeId,\n          placementlayerBusinessType: layerBusinessTypes\n        });\n      })));\n    }, []);\n    var marketQuotesGroups = groupBy(marketQuotes, 'statusId');\n    market.quotes = (_market$quotes = {}, _defineProperty(_market$quotes, statusPendingKey, {\n      length: ((_marketQuotesGroups$s = marketQuotesGroups[statusPendingId]) === null || _marketQuotesGroups$s === void 0 ? void 0 : _marketQuotesGroups$s.length) || 0,\n      items: marketQuotesGroups[statusPendingId] || []\n    }), _defineProperty(_market$quotes, statusQuotedKey, {\n      length: ((_marketQuotesGroups$s2 = marketQuotesGroups[statusQuotedId]) === null || _marketQuotesGroups$s2 === void 0 ? void 0 : _marketQuotesGroups$s2.length) || 0,\n      items: marketQuotesGroups[statusQuotedId] || []\n    }), _defineProperty(_market$quotes, statusDeclinedKey, {\n      length: ((_marketQuotesGroups$s3 = marketQuotesGroups[statusDeclinedId]) === null || _marketQuotesGroups$s3 === void 0 ? void 0 : _marketQuotesGroups$s3.length) || 0,\n      items: marketQuotesGroups[statusDeclinedId] || []\n    }), _market$quotes);\n    market.statusLabel = utils.referenceData.status.getLabelById(refDataStatusesMarketQuote, market.statusId);\n    return market;\n  });\n\n  var handleBulkSelectMarketingMarkets = function handleBulkSelectMarketingMarkets(marketId) {\n    return function (event) {\n      event.stopPropagation();\n      dispatch(bulkPlacementMarketingMarketSelect(constants.SELECTED, marketId));\n    };\n  }; // abort\n\n\n  if (!placementId) return null;\n  return /*#__PURE__*/_jsxDEV(MarketingMarketsView, {\n    items: marketsFiltered,\n    groups: marketGroups,\n    cols: cols,\n    placementId: placementIdNumber,\n    marketAccountStatuses: refDataAccountStatuses,\n    popoverActions: popoverActions,\n    handleEditMarket: handleEditPlacementMarketsLayers,\n    showBulkSelect: showBulkSelect,\n    bulk: {\n      marketingMarkets: marketingMakets\n    },\n    handlers: {\n      bulkSelectMarketingMarket: handleBulkSelectMarketingMarkets,\n      changeMarket: handleChangeMarket\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 216,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MarketingMarkets, \"v4RGovboxD4ghL1iF8j3KvS5ETw=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = MarketingMarkets;\nMarketingMarkets.displayName = \"MarketingMarkets\";\nMarketingMarkets.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"MarketingMarkets\",\n  \"props\": {\n    \"placementId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\modules\\\\MarketingMarkets\\\\MarketingMarkets.js\"] = {\n    name: \"MarketingMarkets\",\n    docgenInfo: MarketingMarkets.__docgenInfo,\n    path: \"src\\\\modules\\\\MarketingMarkets\\\\MarketingMarkets.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"MarketingMarkets\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/MarketingMarkets/MarketingMarkets.js"],"names":["React","useEffect","PropTypes","useSelector","useDispatch","toNumber","get","groupBy","MarketingMarketsView","bulkPlacementClear","bulkPlacementMarketingMarketSelect","getDepartmentMarkets","getPlacementMarkets","deletePlacementMarket","showModal","selectPlacementMarkets","selectPlacementLayers","selectFormattedAccountStatusList","selectRefDataDepartments","selectRefDataCapacityTypes","selectRefDataStatusesMarketQuote","selectRefDataStatusKeyByCode","selectRefDataStatusIdByCode","selectBulkToggleSelectMarketingMarkets","selectPlacementBulkItemsMarketingMarkets","selectDepartmentMarketsItems","selectPlacementDepartmentId","Translate","utils","constants","MarketingMarkets","propTypes","placementId","string","isRequired","dispatch","placementLayers","placementMarkets","refDataDepartments","refDataCapacityTypes","refDataAccountStatuses","refDataStatusesMarketQuote","statusPendingId","STATUS_MARKET_PENDING","statusPendingKey","statusQuotedId","STATUS_MARKET_QUOTED","statusQuotedKey","statusDeclinedId","STATUS_MARKET_DECLINED","statusDeclinedKey","showBulkSelect","marketingMakets","placementIdNumber","departmentMarketsItems","placementSelectedDepartmentId","marketGroups","name","t","map","type","markets","filter","market","id","Boolean","generic","isValidArray","handleEditPlacementMarketsLayers","popoverData","component","props","fullWidth","maxWidth","title","componentProps","placementMarket","handleDeletePlacementMarket","submitHandler","handleChangeMarket","subtitle","edgeName","isChangeMarket","departmentId","departmentMarkets","item","cols","label","style","width","nowrap","empty","popoverActions","callback","marketsFiltered","placementMarketId","marketQuotes","reduce","acc","layer","layerDepartment","referenceData","departments","getById","layerBusinessTypes","businessTypes","getNameById","businessTypeId","m","placementlayerName","getName","placementlayerBusinessTypeId","placementlayerBusinessType","marketQuotesGroups","quotes","length","items","statusLabel","status","getLabelById","statusId","handleBulkSelectMarketingMarkets","marketId","event","stopPropagation","SELECTED","marketingMarkets","bulkSelectMarketingMarket","changeMarket"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport toNumber from 'lodash/toNumber';\r\nimport get from 'lodash/get';\r\nimport groupBy from 'lodash/groupBy';\r\n\r\n// app\r\nimport { MarketingMarketsView } from './MarketingMarkets.view';\r\nimport {\r\n  bulkPlacementClear,\r\n  bulkPlacementMarketingMarketSelect,\r\n  getDepartmentMarkets,\r\n  getPlacementMarkets,\r\n  deletePlacementMarket,\r\n  showModal,\r\n  selectPlacementMarkets,\r\n  selectPlacementLayers,\r\n  selectFormattedAccountStatusList,\r\n  selectRefDataDepartments,\r\n  selectRefDataCapacityTypes,\r\n  selectRefDataStatusesMarketQuote,\r\n  selectRefDataStatusKeyByCode,\r\n  selectRefDataStatusIdByCode,\r\n  selectBulkToggleSelectMarketingMarkets,\r\n  selectPlacementBulkItemsMarketingMarkets,\r\n  selectDepartmentMarketsItems,\r\n  selectPlacementDepartmentId,\r\n} from 'stores';\r\nimport { Translate } from 'components';\r\nimport * as utils from 'utils';\r\nimport * as constants from 'consts';\r\n\r\nMarketingMarkets.propTypes = {\r\n  placementId: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default function MarketingMarkets({ placementId }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const placementLayers = useSelector(selectPlacementLayers) || [];\r\n  const placementMarkets = useSelector(selectPlacementMarkets) || [];\r\n  const refDataDepartments = useSelector(selectRefDataDepartments);\r\n  const refDataCapacityTypes = useSelector(selectRefDataCapacityTypes);\r\n  const refDataAccountStatuses = useSelector(selectFormattedAccountStatusList);\r\n  const refDataStatusesMarketQuote = useSelector(selectRefDataStatusesMarketQuote);\r\n\r\n  const statusPendingId = useSelector(selectRefDataStatusIdByCode('market', constants.STATUS_MARKET_PENDING));\r\n  const statusPendingKey = useSelector(selectRefDataStatusKeyByCode('market', constants.STATUS_MARKET_PENDING));\r\n\r\n  const statusQuotedId = useSelector(selectRefDataStatusIdByCode('market', constants.STATUS_MARKET_QUOTED));\r\n  const statusQuotedKey = useSelector(selectRefDataStatusKeyByCode('market', constants.STATUS_MARKET_QUOTED));\r\n\r\n  const statusDeclinedId = useSelector(selectRefDataStatusIdByCode('market', constants.STATUS_MARKET_DECLINED));\r\n  const statusDeclinedKey = useSelector(selectRefDataStatusKeyByCode('market', constants.STATUS_MARKET_DECLINED));\r\n\r\n  const showBulkSelect = useSelector(selectBulkToggleSelectMarketingMarkets);\r\n  const marketingMakets = useSelector(selectPlacementBulkItemsMarketingMarkets);\r\n  const placementIdNumber = toNumber(placementId);\r\n\r\n  const departmentMarketsItems = useSelector(selectDepartmentMarketsItems);\r\n  const placementSelectedDepartmentId = useSelector(selectPlacementDepartmentId);\r\n\r\n  const marketGroups = [...refDataCapacityTypes, { name: utils.string.t('market.noCapacityMarkets') }]\r\n    .map((type) => {\r\n      type.markets = placementMarkets.filter((market) => {\r\n        return type.id ? get(market, 'market.capacityTypeId') === type.id : !Boolean(get(market, 'market.capacityTypeId'));\r\n      });\r\n\r\n      return type;\r\n    })\r\n    .filter((type) => utils.generic.isValidArray(type.markets, true));\r\n\r\n  useEffect(\r\n    () => {\r\n      if (placementIdNumber) {\r\n        dispatch(getDepartmentMarkets(placementIdNumber));\r\n        dispatch(getPlacementMarkets(placementIdNumber));\r\n        dispatch(bulkPlacementClear());\r\n      }\r\n    },\r\n    [placementIdNumber] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  const handleEditPlacementMarketsLayers = (popoverData) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'EDIT_PLACEMENT_MARKETS_LAYERS',\r\n        props: {\r\n          fullWidth: false,\r\n          maxWidth: 'lg',\r\n          title: 'placement.marketing.manageMarket',\r\n          componentProps: {\r\n            ...popoverData,\r\n            placementMarket: popoverData.placementMarket,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleDeletePlacementMarket = (popoverData) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM_DELETE',\r\n        props: {\r\n          fullWidth: true,\r\n          title: 'placement.marketing.deleteMarket',\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            submitHandler: () => {\r\n              dispatch(deletePlacementMarket(get(popoverData, 'placementMarket.id')));\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleChangeMarket = (popoverData) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'ADD_PLACEMENT_MARKET',\r\n        props: {\r\n          title: 'market.actions.changeMarket',\r\n          subtitle: popoverData?.placementMarket?.market?.edgeName || '',\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          componentProps: {\r\n            isChangeMarket: true,\r\n            placementId,\r\n            placementMarkets: [],\r\n            placementMarket: popoverData.placementMarket,\r\n            departmentId: placementSelectedDepartmentId,\r\n            departmentMarkets: departmentMarketsItems.map((item) => item.market),\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const cols = [\r\n    { id: 'name', title: true },\r\n    { id: 'status', label: <Translate label=\"market.cols.status\" />, style: { width: '15%' }, nowrap: true },\r\n    { id: 'underwriter', label: <Translate label=\"market.cols.underwriterName\" />, style: { width: '20%' } },\r\n    { id: 'actions', empty: true },\r\n  ];\r\n\r\n  const popoverActions = [\r\n    {\r\n      id: 'edit-placement-market',\r\n      label: 'market.actions.edit',\r\n      callback: (popoverData) => handleEditPlacementMarketsLayers(popoverData),\r\n    },\r\n    {\r\n      id: 'delete-placement-market',\r\n      label: 'market.actions.delete',\r\n      callback: (popoverData) => handleDeletePlacementMarket(popoverData),\r\n    },\r\n    {\r\n      id: 'change-placement-market',\r\n      label: 'market.actions.changeMarket',\r\n      callback: (popoverData) => handleChangeMarket(popoverData),\r\n    },\r\n  ];\r\n\r\n  const marketsFiltered = placementMarkets.map((market) => {\r\n    const placementMarketId = get(market, 'market.id');\r\n\r\n    const marketQuotes = placementLayers.reduce((acc, layer) => {\r\n      const layerDepartment = utils.referenceData.departments.getById(refDataDepartments, layer.departmentId);\r\n      const layerBusinessTypes = utils.referenceData.businessTypes.getNameById(layerDepartment?.businessTypes, layer.businessTypeId);\r\n\r\n      return [\r\n        ...acc,\r\n        ...get(layer, 'markets', [])\r\n          .filter((m) => get(m, 'market.id') === placementMarketId)\r\n          .map((m) => ({\r\n            ...m,\r\n            placementlayerName: utils.layer.getName(layer),\r\n            placementlayerBusinessTypeId: layer.businessTypeId,\r\n            placementlayerBusinessType: layerBusinessTypes,\r\n          })),\r\n      ];\r\n    }, []);\r\n\r\n    const marketQuotesGroups = groupBy(marketQuotes, 'statusId');\r\n\r\n    market.quotes = {\r\n      [statusPendingKey]: {\r\n        length: marketQuotesGroups[statusPendingId]?.length || 0,\r\n        items: marketQuotesGroups[statusPendingId] || [],\r\n      },\r\n      [statusQuotedKey]: {\r\n        length: marketQuotesGroups[statusQuotedId]?.length || 0,\r\n        items: marketQuotesGroups[statusQuotedId] || [],\r\n      },\r\n      [statusDeclinedKey]: {\r\n        length: marketQuotesGroups[statusDeclinedId]?.length || 0,\r\n        items: marketQuotesGroups[statusDeclinedId] || [],\r\n      },\r\n    };\r\n\r\n    market.statusLabel = utils.referenceData.status.getLabelById(refDataStatusesMarketQuote, market.statusId);\r\n\r\n    return market;\r\n  });\r\n\r\n  const handleBulkSelectMarketingMarkets = (marketId) => (event) => {\r\n    event.stopPropagation();\r\n    dispatch(bulkPlacementMarketingMarketSelect(constants.SELECTED, marketId));\r\n  };\r\n  // abort\r\n  if (!placementId) return null;\r\n  return (\r\n    <MarketingMarketsView\r\n      items={marketsFiltered}\r\n      groups={marketGroups}\r\n      cols={cols}\r\n      placementId={placementIdNumber}\r\n      marketAccountStatuses={refDataAccountStatuses}\r\n      popoverActions={popoverActions}\r\n      handleEditMarket={handleEditPlacementMarketsLayers}\r\n      showBulkSelect={showBulkSelect}\r\n      bulk={{\r\n        marketingMarkets: marketingMakets,\r\n      }}\r\n      handlers={{\r\n        bulkSelectMarketingMarket: handleBulkSelectMarketingMarkets,\r\n        changeMarket: handleChangeMarket,\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}