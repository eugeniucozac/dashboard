{"ast":null,"code":"import _defineProperty from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\PasteFromExcel\\\\PasteFromExcel.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport * as Yup from 'yup';\nimport startCase from 'lodash/startCase';\nimport merge from 'lodash/merge'; // app\n\nimport styles from './PasteFromExcel.styles';\nimport { PasteFromExcelView } from './PasteFromExcel.view';\nimport * as utils from 'utils'; // mui\n\nimport { makeStyles } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nPasteFromExcel.propTypes = {\n  name: PropTypes.string,\n  headers: PropTypes.arrayOf(PropTypes.shape({\n    key: PropTypes.string.isRequired,\n    value: PropTypes.string\n  })).isRequired,\n  steps: PropTypes.number,\n  labels: PropTypes.shape({\n    step1: PropTypes.shape({\n      title: PropTypes.node,\n      hint: PropTypes.string,\n      label: PropTypes.string,\n      required: PropTypes.string,\n      placeholder: PropTypes.string\n    }),\n    step2: PropTypes.shape({\n      title: PropTypes.node,\n      hint: PropTypes.string,\n      label: PropTypes.string,\n      error: PropTypes.string\n    }),\n    step3: PropTypes.shape({\n      title: PropTypes.node,\n      hint: PropTypes.string\n    }),\n    step4: PropTypes.shape({\n      title: PropTypes.node,\n      hint: PropTypes.string\n    })\n  }),\n  isValidateHeadersMapping: PropTypes.bool,\n  handlers: PropTypes.shape({\n    extract: PropTypes.func,\n    match: PropTypes.func,\n    submit: PropTypes.func.isRequired\n  }).isRequired\n};\nPasteFromExcel.defaultProps = {\n  steps: 3,\n  headers: [],\n  isValidateHeadersMapping: false,\n  handlers: {}\n};\nexport default function PasteFromExcel(_ref) {\n  _s();\n\n  var name = _ref.name,\n      headersMap = _ref.headers,\n      steps = _ref.steps,\n      labels = _ref.labels,\n      isValidateHeadersMapping = _ref.isValidateHeadersMapping,\n      handlers = _ref.handlers,\n      children = _ref.children;\n  var classes = makeStyles(styles, {\n    name: 'PasteFromExcel'\n  })();\n\n  var _useState = useState(1),\n      _useState2 = _slicedToArray(_useState, 2),\n      step = _useState2[0],\n      setStep = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      rows = _useState4[0],\n      setRows = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      columns = _useState6[0],\n      setColumns = _useState6[1];\n\n  var _useState7 = useState(headersMap),\n      _useState8 = _slicedToArray(_useState7, 2),\n      headers = _useState8[0],\n      setHeaders = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      isHeaderMappingMissing = _useState10[0],\n      setIsHeaderMappingMissing = _useState10[1];\n\n  var defaultLabels = {\n    step1: {\n      title: utils.string.html('products.pasteFromExcel.step1.title'),\n      hint: utils.string.t('products.pasteFromExcel.step1.hint'),\n      label: utils.string.t('products.pasteFromExcel.step1.label'),\n      required: utils.string.t('products.pasteFromExcel.step1.required'),\n      placeholder: utils.string.t('products.pasteFromExcel.step1.placeholder')\n    },\n    step2: {\n      title: utils.string.html('products.pasteFromExcel.step2.title'),\n      hint: utils.string.t('products.pasteFromExcel.step2.hint'),\n      label: utils.string.t('products.pasteFromExcel.step2.label'),\n      error: utils.string.t('products.pasteFromExcel.step2.error')\n    },\n    step3: {\n      title: utils.string.html('products.pasteFromExcel.step3.title'),\n      hint: utils.string.t('products.pasteFromExcel.step3.hint')\n    },\n    step4: {\n      title: utils.string.html('products.pasteFromExcel.step4.title'),\n      hint: utils.string.t('products.pasteFromExcel.step4.hint')\n    }\n  };\n  var mergedLabels = merge(defaultLabels, labels);\n\n  var handleExcelExtract = function handleExcelExtract(values) {\n    var cleanString = utils.excel.removeLineBreaksWithinCell(values.excelExtract);\n    var cellsByRow = utils.excel.splitCellsByRow(cleanString);\n    var objectRows = utils.excel.getObjects(cellsByRow);\n    var objectColumns = utils.excel.getColumns(cellsByRow);\n\n    var newHeaders = _toConsumableArray(headers.map(function (h) {\n      return objectColumns.includes(h.key) ? _objectSpread(_objectSpread({}, h), {}, {\n        value: h.value === '' ? h.key : h.value\n      }) : h;\n    }));\n\n    if (utils.generic.isFunction(handlers.extract)) {\n      handlers.extract({\n        headers: newHeaders,\n        rows: objectRows,\n        columns: objectColumns\n      });\n    }\n\n    stepChangeValidations(2, newHeaders);\n    setHeaders(newHeaders);\n    setColumns(objectColumns);\n    setRows(objectRows);\n  };\n\n  var handleColumnMatching = function handleColumnMatching(form) {\n    var newHeaders = _toConsumableArray(headers.map(function (h) {\n      return _objectSpread(_objectSpread({}, h), {}, {\n        value: form[h.key] === '__placeholder__' ? '' : form[h.key]\n      });\n    }));\n\n    if (utils.generic.isFunction(handlers.match)) {\n      handlers.match({\n        headers: newHeaders\n      });\n    }\n\n    setHeaders(newHeaders);\n    stepChangeValidations(3, newHeaders);\n  };\n\n  var handleSubmit = function handleSubmit(data) {\n    return function () {\n      if (utils.generic.isFunction(handlers.submit)) {\n        handlers.submit(data);\n      }\n    };\n  };\n\n  var fields = {\n    excelExtract: [{\n      name: 'excelExtract',\n      type: 'text',\n      label: mergedLabels.step1.label,\n      placeholder: mergedLabels.step1.placeholder,\n      value: '',\n      validation: Yup.string().required(mergedLabels.step1.required),\n      muiComponentProps: {\n        autoFocus: true,\n        multiline: true,\n        minRows: 3,\n        maxRows: 12,\n        classes: {\n          root: classes.textarea\n        }\n      }\n    }],\n    columnMatching: [headers.map(function (_ref2) {\n      var key = _ref2.key,\n          value = _ref2.value,\n          label = _ref2.label;\n      return {\n        name: key,\n        type: 'select',\n        gridSize: {\n          xs: 12,\n          sm: 6,\n          md: 4\n        },\n        label: label ? label : startCase(key),\n        value: value || '__placeholder__',\n        options: [{\n          value: '__placeholder__',\n          label: mergedLabels.step2.label,\n          placeholder: true\n        }].concat(_toConsumableArray(columns.map(function (col) {\n          return {\n            value: col,\n            label: startCase(col)\n          };\n        })))\n      };\n    })]\n  };\n  var isReady = utils.generic.isValidArray(rows, true) && utils.generic.isValidArray(columns, true);\n  var rowsFiltered = rows.map(function (row) {\n    return headers.reduce(function (acc, header) {\n      return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, header.key, row[header.value]));\n    }, {});\n  });\n  var columnsFiltered = headers.map(function (h) {\n    return {\n      id: h.key,\n      label: startCase(h.key),\n      compact: true\n    };\n  });\n\n  var setSteps = function setSteps(step) {\n    if (isValidateHeadersMapping && step === 3) setIsHeaderMappingMissing(headers.some(function (header) {\n      return header.value === '';\n    }));\n    setStep(step);\n  };\n\n  var stepChangeValidations = function stepChangeValidations(step, newHeaders) {\n    if (isValidateHeadersMapping && step === 3) setIsHeaderMappingMissing(newHeaders.some(function (header) {\n      return header.value === '';\n    }));\n    setStep(step);\n  };\n\n  return /*#__PURE__*/_jsxDEV(PasteFromExcelView, {\n    step: step,\n    steps: steps,\n    labels: mergedLabels,\n    fields: fields,\n    rows: rowsFiltered,\n    columns: columnsFiltered,\n    imported: isReady,\n    testid: name,\n    isHeaderMappingMissing: isHeaderMappingMissing,\n    handlers: {\n      setSteps: setSteps,\n      excelExtract: handleExcelExtract,\n      columnMatching: handleColumnMatching,\n      submit: handleSubmit\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PasteFromExcel, \"2bshiwRjzvPBxd8qvNN+oKk7j4w=\");\n\n_c = PasteFromExcel;\nPasteFromExcel.displayName = \"PasteFromExcel\";\nPasteFromExcel.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"PasteFromExcel\",\n  \"props\": {\n    \"steps\": {\n      \"defaultValue\": {\n        \"value\": \"3\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"headers\": {\n      \"defaultValue\": {\n        \"value\": \"[]\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"arrayOf\",\n        \"value\": {\n          \"name\": \"shape\",\n          \"value\": {\n            \"key\": {\n              \"name\": \"string\",\n              \"required\": true\n            },\n            \"value\": {\n              \"name\": \"string\",\n              \"required\": false\n            }\n          }\n        }\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"isValidateHeadersMapping\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"handlers\": {\n      \"defaultValue\": {\n        \"value\": \"{}\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"shape\",\n        \"value\": {\n          \"extract\": {\n            \"name\": \"func\",\n            \"required\": false\n          },\n          \"match\": {\n            \"name\": \"func\",\n            \"required\": false\n          },\n          \"submit\": {\n            \"name\": \"func\",\n            \"required\": true\n          }\n        }\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"labels\": {\n      \"type\": {\n        \"name\": \"shape\",\n        \"value\": {\n          \"step1\": {\n            \"name\": \"shape\",\n            \"value\": {\n              \"title\": {\n                \"name\": \"node\",\n                \"required\": false\n              },\n              \"hint\": {\n                \"name\": \"string\",\n                \"required\": false\n              },\n              \"label\": {\n                \"name\": \"string\",\n                \"required\": false\n              },\n              \"required\": {\n                \"name\": \"string\",\n                \"required\": false\n              },\n              \"placeholder\": {\n                \"name\": \"string\",\n                \"required\": false\n              }\n            },\n            \"required\": false\n          },\n          \"step2\": {\n            \"name\": \"shape\",\n            \"value\": {\n              \"title\": {\n                \"name\": \"node\",\n                \"required\": false\n              },\n              \"hint\": {\n                \"name\": \"string\",\n                \"required\": false\n              },\n              \"label\": {\n                \"name\": \"string\",\n                \"required\": false\n              },\n              \"error\": {\n                \"name\": \"string\",\n                \"required\": false\n              }\n            },\n            \"required\": false\n          },\n          \"step3\": {\n            \"name\": \"shape\",\n            \"value\": {\n              \"title\": {\n                \"name\": \"node\",\n                \"required\": false\n              },\n              \"hint\": {\n                \"name\": \"string\",\n                \"required\": false\n              }\n            },\n            \"required\": false\n          },\n          \"step4\": {\n            \"name\": \"shape\",\n            \"value\": {\n              \"title\": {\n                \"name\": \"node\",\n                \"required\": false\n              },\n              \"hint\": {\n                \"name\": \"string\",\n                \"required\": false\n              }\n            },\n            \"required\": false\n          }\n        }\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\modules\\\\PasteFromExcel\\\\PasteFromExcel.js\"] = {\n    name: \"PasteFromExcel\",\n    docgenInfo: PasteFromExcel.__docgenInfo,\n    path: \"src\\\\modules\\\\PasteFromExcel\\\\PasteFromExcel.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"PasteFromExcel\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/PasteFromExcel/PasteFromExcel.js"],"names":["React","useState","PropTypes","Yup","startCase","merge","styles","PasteFromExcelView","utils","makeStyles","PasteFromExcel","propTypes","name","string","headers","arrayOf","shape","key","isRequired","value","steps","number","labels","step1","title","node","hint","label","required","placeholder","step2","error","step3","step4","isValidateHeadersMapping","bool","handlers","extract","func","match","submit","defaultProps","headersMap","children","classes","step","setStep","rows","setRows","columns","setColumns","setHeaders","isHeaderMappingMissing","setIsHeaderMappingMissing","defaultLabels","html","t","mergedLabels","handleExcelExtract","values","cleanString","excel","removeLineBreaksWithinCell","excelExtract","cellsByRow","splitCellsByRow","objectRows","getObjects","objectColumns","getColumns","newHeaders","map","h","includes","generic","isFunction","stepChangeValidations","handleColumnMatching","form","handleSubmit","data","fields","type","validation","muiComponentProps","autoFocus","multiline","minRows","maxRows","root","textarea","columnMatching","gridSize","xs","sm","md","options","col","isReady","isValidArray","rowsFiltered","row","reduce","acc","header","columnsFiltered","id","compact","setSteps","some"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as Yup from 'yup';\r\nimport startCase from 'lodash/startCase';\r\nimport merge from 'lodash/merge';\r\n\r\n// app\r\nimport styles from './PasteFromExcel.styles';\r\nimport { PasteFromExcelView } from './PasteFromExcel.view';\r\nimport * as utils from 'utils';\r\n\r\n// mui\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nPasteFromExcel.propTypes = {\r\n  name: PropTypes.string,\r\n  headers: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      key: PropTypes.string.isRequired,\r\n      value: PropTypes.string,\r\n    })\r\n  ).isRequired,\r\n  steps: PropTypes.number,\r\n  labels: PropTypes.shape({\r\n    step1: PropTypes.shape({\r\n      title: PropTypes.node,\r\n      hint: PropTypes.string,\r\n      label: PropTypes.string,\r\n      required: PropTypes.string,\r\n      placeholder: PropTypes.string,\r\n    }),\r\n    step2: PropTypes.shape({\r\n      title: PropTypes.node,\r\n      hint: PropTypes.string,\r\n      label: PropTypes.string,\r\n      error: PropTypes.string,\r\n    }),\r\n    step3: PropTypes.shape({\r\n      title: PropTypes.node,\r\n      hint: PropTypes.string,\r\n    }),\r\n    step4: PropTypes.shape({\r\n      title: PropTypes.node,\r\n      hint: PropTypes.string,\r\n    }),\r\n  }),\r\n  isValidateHeadersMapping: PropTypes.bool,\r\n  handlers: PropTypes.shape({\r\n    extract: PropTypes.func,\r\n    match: PropTypes.func,\r\n    submit: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nPasteFromExcel.defaultProps = {\r\n  steps: 3,\r\n  headers: [],\r\n  isValidateHeadersMapping: false,\r\n  handlers: {},\r\n};\r\n\r\nexport default function PasteFromExcel({ name, headers: headersMap, steps, labels, isValidateHeadersMapping, handlers, children }) {\r\n  const classes = makeStyles(styles, { name: 'PasteFromExcel' })();\r\n\r\n  const [step, setStep] = useState(1);\r\n  const [rows, setRows] = useState([]);\r\n  const [columns, setColumns] = useState([]);\r\n  const [headers, setHeaders] = useState(headersMap);\r\n  const [isHeaderMappingMissing, setIsHeaderMappingMissing] = useState(false);\r\n\r\n  const defaultLabels = {\r\n    step1: {\r\n      title: utils.string.html('products.pasteFromExcel.step1.title'),\r\n      hint: utils.string.t('products.pasteFromExcel.step1.hint'),\r\n      label: utils.string.t('products.pasteFromExcel.step1.label'),\r\n      required: utils.string.t('products.pasteFromExcel.step1.required'),\r\n      placeholder: utils.string.t('products.pasteFromExcel.step1.placeholder'),\r\n    },\r\n    step2: {\r\n      title: utils.string.html('products.pasteFromExcel.step2.title'),\r\n      hint: utils.string.t('products.pasteFromExcel.step2.hint'),\r\n      label: utils.string.t('products.pasteFromExcel.step2.label'),\r\n      error: utils.string.t('products.pasteFromExcel.step2.error'),\r\n    },\r\n    step3: {\r\n      title: utils.string.html('products.pasteFromExcel.step3.title'),\r\n      hint: utils.string.t('products.pasteFromExcel.step3.hint'),\r\n    },\r\n    step4: {\r\n      title: utils.string.html('products.pasteFromExcel.step4.title'),\r\n      hint: utils.string.t('products.pasteFromExcel.step4.hint'),\r\n    },\r\n  };\r\n\r\n  const mergedLabels = merge(defaultLabels, labels);\r\n\r\n  const handleExcelExtract = (values) => {\r\n    const cleanString = utils.excel.removeLineBreaksWithinCell(values.excelExtract);\r\n    const cellsByRow = utils.excel.splitCellsByRow(cleanString);\r\n    const objectRows = utils.excel.getObjects(cellsByRow);\r\n    const objectColumns = utils.excel.getColumns(cellsByRow);\r\n    const newHeaders = [\r\n      ...headers.map((h) => {\r\n        return objectColumns.includes(h.key) ? { ...h, value: h.value === '' ? h.key : h.value } : h;\r\n      }),\r\n    ];\r\n\r\n    if (utils.generic.isFunction(handlers.extract)) {\r\n      handlers.extract({ headers: newHeaders, rows: objectRows, columns: objectColumns });\r\n    }\r\n\r\n    stepChangeValidations(2, newHeaders);\r\n    setHeaders(newHeaders);\r\n    setColumns(objectColumns);\r\n    setRows(objectRows);\r\n  };\r\n\r\n  const handleColumnMatching = (form) => {\r\n    const newHeaders = [...headers.map((h) => ({ ...h, value: form[h.key] === '__placeholder__' ? '' : form[h.key] }))];\r\n\r\n    if (utils.generic.isFunction(handlers.match)) {\r\n      handlers.match({ headers: newHeaders });\r\n    }\r\n\r\n    setHeaders(newHeaders);\r\n    stepChangeValidations(3, newHeaders);\r\n  };\r\n\r\n  const handleSubmit = (data) => () => {\r\n    if (utils.generic.isFunction(handlers.submit)) {\r\n      handlers.submit(data);\r\n    }\r\n  };\r\n\r\n  const fields = {\r\n    excelExtract: [\r\n      {\r\n        name: 'excelExtract',\r\n        type: 'text',\r\n        label: mergedLabels.step1.label,\r\n        placeholder: mergedLabels.step1.placeholder,\r\n        value: '',\r\n        validation: Yup.string().required(mergedLabels.step1.required),\r\n        muiComponentProps: {\r\n          autoFocus: true,\r\n          multiline: true,\r\n          minRows: 3,\r\n          maxRows: 12,\r\n          classes: {\r\n            root: classes.textarea,\r\n          },\r\n        },\r\n      },\r\n    ],\r\n    columnMatching: [\r\n      headers.map(({ key, value, label }) => {\r\n        return {\r\n          name: key,\r\n          type: 'select',\r\n          gridSize: { xs: 12, sm: 6, md: 4 },\r\n          label: label ? label : startCase(key),\r\n          value: value || '__placeholder__',\r\n          options: [\r\n            {\r\n              value: '__placeholder__',\r\n              label: mergedLabels.step2.label,\r\n              placeholder: true,\r\n            },\r\n            ...columns.map((col) => ({ value: col, label: startCase(col) })),\r\n          ],\r\n        };\r\n      }),\r\n    ],\r\n  };\r\n\r\n  const isReady = utils.generic.isValidArray(rows, true) && utils.generic.isValidArray(columns, true);\r\n\r\n  const rowsFiltered = rows.map((row) => {\r\n    return headers.reduce((acc, header) => {\r\n      return { ...acc, [header.key]: row[header.value] };\r\n    }, {});\r\n  });\r\n\r\n  const columnsFiltered = headers.map((h) => ({ id: h.key, label: startCase(h.key), compact: true }));\r\n\r\n  const setSteps = (step) => {\r\n    if (isValidateHeadersMapping && step === 3) setIsHeaderMappingMissing(headers.some((header) => header.value === ''));\r\n    setStep(step);\r\n  };\r\n  const stepChangeValidations = (step, newHeaders) => {\r\n    if (isValidateHeadersMapping && step === 3) setIsHeaderMappingMissing(newHeaders.some((header) => header.value === ''));\r\n    setStep(step);\r\n  };\r\n\r\n  return (\r\n    <PasteFromExcelView\r\n      step={step}\r\n      steps={steps}\r\n      labels={mergedLabels}\r\n      fields={fields}\r\n      rows={rowsFiltered}\r\n      columns={columnsFiltered}\r\n      imported={isReady}\r\n      testid={name}\r\n      isHeaderMappingMissing={isHeaderMappingMissing}\r\n      handlers={{\r\n        setSteps,\r\n        excelExtract: handleExcelExtract,\r\n        columnMatching: handleColumnMatching,\r\n        submit: handleSubmit,\r\n      }}\r\n      children={children}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}