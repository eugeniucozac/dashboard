{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ClaimsPolicySearch\\\\ClaimsPolicySearch.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ClaimsPolicySearchView from './ClaimsPolicySearch.view';\nimport { getPolicyInformation, selectClaimsPolicyInformation, getClaimantNames, selectClaimsPolicyData, getClaimDetails } from 'stores';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nClaimsPolicySearch.propTypes = {\n  isAllStepsCompleted: PropTypes.bool.isRequired,\n  activeStep: PropTypes.number.isRequired,\n  lastStep: PropTypes.bool.isRequired,\n  handleCancel: PropTypes.func.isRequired,\n  handleFinish: PropTypes.func.isRequired,\n  handleNext: PropTypes.func.isRequired,\n  handleBack: PropTypes.func.isRequired,\n  handleNextSubmit: PropTypes.func\n};\nexport default function ClaimsPolicySearch(props) {\n  _s();\n\n  var dispatch = useDispatch();\n  var policyInformation = useSelector(selectClaimsPolicyInformation);\n  var policyData = useSelector(selectClaimsPolicyData);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      confirm = _useState2[0],\n      setConfirm = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currentContextActive = _useState4[0],\n      setCurrentContextActive = _useState4[1];\n\n  var hasPolicyRef = Boolean(policyInformation === null || policyInformation === void 0 ? void 0 : policyInformation.policyRef);\n\n  var handleAddClaim = function handleAddClaim() {\n    dispatch(getClaimantNames());\n  };\n\n  useEffect(function () {\n    if (policyData === null || policyData === void 0 ? void 0 : policyData.xbInstanceID) {\n      dispatch(getPolicyInformation());\n      setConfirm(true);\n    }\n  }, [policyData]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var handleSearchNext = function handleSearchNext() {\n    dispatch(getClaimDetails());\n\n    if (confirm) {\n      handleAddClaim();\n    }\n\n    props.handleNext();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ClaimsPolicySearchView, _objectSpread(_objectSpread({}, props), {}, {\n      policyInformation: policyInformation,\n      handleAddClaim: handleAddClaim,\n      policyData: policyData,\n      handleSearchNext: handleSearchNext,\n      confirm: confirm,\n      setConfirm: setConfirm,\n      hasPolicyRef: hasPolicyRef,\n      currentContextActive: currentContextActive\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(ClaimsPolicySearch, \"0xWmgIYRYXQZ6l/cltgWhWld/yg=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = ClaimsPolicySearch;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimsPolicySearch\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ClaimsPolicySearch/ClaimsPolicySearch.js"],"names":["React","useEffect","useState","PropTypes","useDispatch","useSelector","ClaimsPolicySearchView","getPolicyInformation","selectClaimsPolicyInformation","getClaimantNames","selectClaimsPolicyData","getClaimDetails","ClaimsPolicySearch","propTypes","isAllStepsCompleted","bool","isRequired","activeStep","number","lastStep","handleCancel","func","handleFinish","handleNext","handleBack","handleNextSubmit","props","dispatch","policyInformation","policyData","confirm","setConfirm","currentContextActive","setCurrentContextActive","hasPolicyRef","Boolean","policyRef","handleAddClaim","xbInstanceID","handleSearchNext"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAOC,sBAAP,MAAmC,2BAAnC;AACA,SACEC,oBADF,EAEEC,6BAFF,EAGEC,gBAHF,EAIEC,sBAJF,EAKEC,eALF,QAMO,QANP;;;AAQAC,kBAAkB,CAACC,SAAnB,GAA+B;AAC7BC,EAAAA,mBAAmB,EAAEX,SAAS,CAACY,IAAV,CAAeC,UADP;AAE7BC,EAAAA,UAAU,EAAEd,SAAS,CAACe,MAAV,CAAiBF,UAFA;AAG7BG,EAAAA,QAAQ,EAAEhB,SAAS,CAACY,IAAV,CAAeC,UAHI;AAI7BI,EAAAA,YAAY,EAAEjB,SAAS,CAACkB,IAAV,CAAeL,UAJA;AAK7BM,EAAAA,YAAY,EAAEnB,SAAS,CAACkB,IAAV,CAAeL,UALA;AAM7BO,EAAAA,UAAU,EAAEpB,SAAS,CAACkB,IAAV,CAAeL,UANE;AAO7BQ,EAAAA,UAAU,EAAErB,SAAS,CAACkB,IAAV,CAAeL,UAPE;AAQ7BS,EAAAA,gBAAgB,EAAEtB,SAAS,CAACkB;AARC,CAA/B;AAWA,eAAe,SAAST,kBAAT,CAA4Bc,KAA5B,EAAmC;AAAA;;AAChD,MAAMC,QAAQ,GAAGvB,WAAW,EAA5B;AACA,MAAMwB,iBAAiB,GAAGvB,WAAW,CAACG,6BAAD,CAArC;AACA,MAAMqB,UAAU,GAAGxB,WAAW,CAACK,sBAAD,CAA9B;;AAHgD,kBAIlBR,QAAQ,CAAC,KAAD,CAJU;AAAA;AAAA,MAIzC4B,OAJyC;AAAA,MAIhCC,UAJgC;;AAAA,mBAKQ7B,QAAQ,CAAC,IAAD,CALhB;AAAA;AAAA,MAKzC8B,oBALyC;AAAA,MAKnBC,uBALmB;;AAMhD,MAAMC,YAAY,GAAGC,OAAO,CAACP,iBAAD,aAACA,iBAAD,uBAACA,iBAAiB,CAAEQ,SAApB,CAA5B;;AAEA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3BV,IAAAA,QAAQ,CAAClB,gBAAgB,EAAjB,CAAR;AACD,GAFD;;AAIAR,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI4B,UAAJ,aAAIA,UAAJ,uBAAIA,UAAU,CAAES,YAAhB,EAA8B;AAC5BX,MAAAA,QAAQ,CAACpB,oBAAoB,EAArB,CAAR;AACAwB,MAAAA,UAAU,CAAC,IAAD,CAAV;AACD;AACF,GALQ,EAKN,CAACF,UAAD,CALM,CAAT,CAZgD,CAiB9B;;AAElB,MAAMU,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC7BZ,IAAAA,QAAQ,CAAChB,eAAe,EAAhB,CAAR;;AACA,QAAImB,OAAJ,EAAa;AACXO,MAAAA,cAAc;AACf;;AACDX,IAAAA,KAAK,CAACH,UAAN;AACD,GAND;;AAQA,sBACE;AAAA,2BACE,QAAC,sBAAD,kCACMG,KADN;AAEE,MAAA,iBAAiB,EAAEE,iBAFrB;AAGE,MAAA,cAAc,EAAES,cAHlB;AAIE,MAAA,UAAU,EAAER,UAJd;AAKE,MAAA,gBAAgB,EAAEU,gBALpB;AAME,MAAA,OAAO,EAAET,OANX;AAOE,MAAA,UAAU,EAAEC,UAPd;AAQE,MAAA,YAAY,EAAEG,YARhB;AASE,MAAA,oBAAoB,EAAEF;AATxB;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAeD;;GA1CuBpB,kB;UACLR,W,EACSC,W,EACPA,W;;;KAHGO,kB","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport ClaimsPolicySearchView from './ClaimsPolicySearch.view';\r\nimport {\r\n  getPolicyInformation,\r\n  selectClaimsPolicyInformation,\r\n  getClaimantNames,\r\n  selectClaimsPolicyData,\r\n  getClaimDetails,\r\n} from 'stores';\r\n\r\nClaimsPolicySearch.propTypes = {\r\n  isAllStepsCompleted: PropTypes.bool.isRequired,\r\n  activeStep: PropTypes.number.isRequired,\r\n  lastStep: PropTypes.bool.isRequired,\r\n  handleCancel: PropTypes.func.isRequired,\r\n  handleFinish: PropTypes.func.isRequired,\r\n  handleNext: PropTypes.func.isRequired,\r\n  handleBack: PropTypes.func.isRequired,\r\n  handleNextSubmit: PropTypes.func,\r\n};\r\n\r\nexport default function ClaimsPolicySearch(props) {\r\n  const dispatch = useDispatch();\r\n  const policyInformation = useSelector(selectClaimsPolicyInformation);\r\n  const policyData = useSelector(selectClaimsPolicyData);\r\n  const [confirm, setConfirm] = useState(false);\r\n  const [currentContextActive, setCurrentContextActive] = useState(true);\r\n  const hasPolicyRef = Boolean(policyInformation?.policyRef);\r\n\r\n  const handleAddClaim = () => {\r\n    dispatch(getClaimantNames());\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (policyData?.xbInstanceID) {\r\n      dispatch(getPolicyInformation());\r\n      setConfirm(true);\r\n    }\r\n  }, [policyData]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const handleSearchNext = () => {\r\n    dispatch(getClaimDetails());\r\n    if (confirm) {\r\n      handleAddClaim();\r\n    }\r\n    props.handleNext();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ClaimsPolicySearchView\r\n        {...props}\r\n        policyInformation={policyInformation}\r\n        handleAddClaim={handleAddClaim}\r\n        policyData={policyData}\r\n        handleSearchNext={handleSearchNext}\r\n        confirm={confirm}\r\n        setConfirm={setConfirm}\r\n        hasPolicyRef={hasPolicyRef}\r\n        currentContextActive={currentContextActive}\r\n      />\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}