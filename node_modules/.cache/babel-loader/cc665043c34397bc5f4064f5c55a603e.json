{"ast":null,"code":"import _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\RiskIssues\\\\RiskIssues.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux'; // app\n\nimport { RiskIssuesView } from './RiskIssues.view';\nimport { updateIssue } from 'stores';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function RiskIssues(_ref) {\n  _s();\n\n  var riskIssues = _ref.riskIssues,\n      quoteIssues = _ref.quoteIssues,\n      insuredSanctionsCheckResult = _ref.insuredSanctionsCheckResult,\n      reInsuredSanctionsCheckResult = _ref.reInsuredSanctionsCheckResult,\n      canCurrentUserDismissIssues = _ref.canCurrentUserDismissIssues,\n      handleRiskRefresh = _ref.handleRiskRefresh,\n      quoteId = _ref.quoteId;\n\n  var _useState = useState(quoteIssues),\n      _useState2 = _slicedToArray(_useState, 2),\n      quoteIssuesState = _useState2[0],\n      setQuoteIssuesState = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isWaiting = _useState4[0],\n      setIsWaiting = _useState4[1];\n\n  var dispatch = useDispatch();\n  useEffect(function () {\n    var allIssuedPassed = quoteIssuesState === null || quoteIssuesState === void 0 ? void 0 : quoteIssuesState.filter(function (issue) {\n      return issue.issueStatus === 'PASSED';\n    }).length;\n    allIssuedPassed === (quoteIssuesState === null || quoteIssuesState === void 0 ? void 0 : quoteIssuesState.length) && (quoteIssuesState === null || quoteIssuesState === void 0 ? void 0 : quoteIssuesState.length) > 0 && handleRiskRefresh();\n  }, [quoteIssuesState, handleRiskRefresh]);\n\n  var handleUpdateIssue = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id, status) {\n      var result, updatedIssues;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!quoteId) {\n                _context.next = 8;\n                break;\n              }\n\n              setIsWaiting(true);\n              _context.next = 4;\n              return dispatch(updateIssue(id, status, quoteId));\n\n            case 4:\n              result = _context.sent;\n              updatedIssues = quoteIssuesState.map(function (issue) {\n                return issue.id === (result === null || result === void 0 ? void 0 : result.id) ? result : issue;\n              });\n              setQuoteIssuesState(updatedIssues);\n              setIsWaiting(false);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleUpdateIssue(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(RiskIssuesView, {\n    riskIssues: riskIssues,\n    quoteIssues: quoteIssuesState,\n    insuredSanctionsCheckResult: insuredSanctionsCheckResult,\n    reInsuredSanctionsCheckResult: reInsuredSanctionsCheckResult,\n    handleUpdateIssue: handleUpdateIssue,\n    canCurrentUserDismissIssues: canCurrentUserDismissIssues,\n    isWaiting: isWaiting\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RiskIssues, \"nD3fL3l4wVljQakhBbytwP+TYCs=\", false, function () {\n  return [useDispatch];\n});\n\n_c = RiskIssues;\n\nvar _c;\n\n$RefreshReg$(_c, \"RiskIssues\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/RiskIssues/RiskIssues.js"],"names":["useState","useEffect","useDispatch","RiskIssuesView","updateIssue","RiskIssues","riskIssues","quoteIssues","insuredSanctionsCheckResult","reInsuredSanctionsCheckResult","canCurrentUserDismissIssues","handleRiskRefresh","quoteId","quoteIssuesState","setQuoteIssuesState","isWaiting","setIsWaiting","dispatch","allIssuedPassed","filter","issue","issueStatus","length","handleUpdateIssue","id","status","result","updatedIssues","map"],"mappings":";;;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,aAA5B,C,CAEA;;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,WAAT,QAA4B,QAA5B;;AAEA,eAAe,SAASC,UAAT,OAQZ;AAAA;;AAAA,MAPDC,UAOC,QAPDA,UAOC;AAAA,MANDC,WAMC,QANDA,WAMC;AAAA,MALDC,2BAKC,QALDA,2BAKC;AAAA,MAJDC,6BAIC,QAJDA,6BAIC;AAAA,MAHDC,2BAGC,QAHDA,2BAGC;AAAA,MAFDC,iBAEC,QAFDA,iBAEC;AAAA,MADDC,OACC,QADDA,OACC;;AAAA,kBAC+CZ,QAAQ,CAACO,WAAD,CADvD;AAAA;AAAA,MACMM,gBADN;AAAA,MACwBC,mBADxB;;AAAA,mBAEiCd,QAAQ,CAAC,KAAD,CAFzC;AAAA;AAAA,MAEMe,SAFN;AAAA,MAEiBC,YAFjB;;AAGD,MAAMC,QAAQ,GAAGf,WAAW,EAA5B;AAEAD,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMiB,eAAe,GAAGL,gBAAH,aAAGA,gBAAH,uBAAGA,gBAAgB,CAAEM,MAAlB,CAAyB,UAACC,KAAD;AAAA,aAAWA,KAAK,CAACC,WAAN,KAAsB,QAAjC;AAAA,KAAzB,EAAoEC,MAA5F;AAEAJ,IAAAA,eAAe,MAAKL,gBAAL,aAAKA,gBAAL,uBAAKA,gBAAgB,CAAES,MAAvB,CAAf,IAAgD,CAAAT,gBAAgB,SAAhB,IAAAA,gBAAgB,WAAhB,YAAAA,gBAAgB,CAAES,MAAlB,IAA2B,CAA3E,IAAgFX,iBAAiB,EAAjG;AACD,GAJQ,EAIN,CAACE,gBAAD,EAAmBF,iBAAnB,CAJM,CAAT;;AAMA,MAAMY,iBAAiB;AAAA,yEAAG,iBAAOC,EAAP,EAAWC,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACpBb,OADoB;AAAA;AAAA;AAAA;;AAEtBI,cAAAA,YAAY,CAAC,IAAD,CAAZ;AAFsB;AAAA,qBAGDC,QAAQ,CAACb,WAAW,CAACoB,EAAD,EAAKC,MAAL,EAAab,OAAb,CAAZ,CAHP;;AAAA;AAGhBc,cAAAA,MAHgB;AAIhBC,cAAAA,aAJgB,GAIAd,gBAAgB,CAACe,GAAjB,CAAqB,UAACR,KAAD;AAAA,uBAAYA,KAAK,CAACI,EAAN,MAAaE,MAAb,aAAaA,MAAb,uBAAaA,MAAM,CAAEF,EAArB,IAA0BE,MAA1B,GAAmCN,KAA/C;AAAA,eAArB,CAJA;AAKtBN,cAAAA,mBAAmB,CAACa,aAAD,CAAnB;AACAX,cAAAA,YAAY,CAAC,KAAD,CAAZ;;AANsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAjBO,iBAAiB;AAAA;AAAA;AAAA,KAAvB;;AAUA,sBACE,QAAC,cAAD;AACE,IAAA,UAAU,EAAEjB,UADd;AAEE,IAAA,WAAW,EAAEO,gBAFf;AAGE,IAAA,2BAA2B,EAAEL,2BAH/B;AAIE,IAAA,6BAA6B,EAAEC,6BAJjC;AAKE,IAAA,iBAAiB,EAAEc,iBALrB;AAME,IAAA,2BAA2B,EAAEb,2BAN/B;AAOE,IAAA,SAAS,EAAEK;AAPb;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GAxCuBV,U;UAWLH,W;;;KAXKG,U","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\n// app\r\nimport { RiskIssuesView } from './RiskIssues.view';\r\nimport { updateIssue } from 'stores';\r\n\r\nexport default function RiskIssues({\r\n  riskIssues,\r\n  quoteIssues,\r\n  insuredSanctionsCheckResult,\r\n  reInsuredSanctionsCheckResult,\r\n  canCurrentUserDismissIssues,\r\n  handleRiskRefresh,\r\n  quoteId,\r\n}) {\r\n  const [quoteIssuesState, setQuoteIssuesState] = useState(quoteIssues);\r\n  const [isWaiting, setIsWaiting] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    const allIssuedPassed = quoteIssuesState?.filter((issue) => issue.issueStatus === 'PASSED').length;\r\n\r\n    allIssuedPassed === quoteIssuesState?.length && quoteIssuesState?.length > 0 && handleRiskRefresh();\r\n  }, [quoteIssuesState, handleRiskRefresh]);\r\n\r\n  const handleUpdateIssue = async (id, status) => {\r\n    if (quoteId) {\r\n      setIsWaiting(true);\r\n      const result = await dispatch(updateIssue(id, status, quoteId));\r\n      const updatedIssues = quoteIssuesState.map((issue) => (issue.id === result?.id ? result : issue));\r\n      setQuoteIssuesState(updatedIssues);\r\n      setIsWaiting(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <RiskIssuesView\r\n      riskIssues={riskIssues}\r\n      quoteIssues={quoteIssuesState}\r\n      insuredSanctionsCheckResult={insuredSanctionsCheckResult}\r\n      reInsuredSanctionsCheckResult={reInsuredSanctionsCheckResult}\r\n      handleUpdateIssue={handleUpdateIssue}\r\n      canCurrentUserDismissIssues={canCurrentUserDismissIssues}\r\n      isWaiting={isWaiting}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}