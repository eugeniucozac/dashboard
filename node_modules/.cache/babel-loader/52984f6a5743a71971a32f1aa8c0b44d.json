{"ast":null,"code":"import _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ProcessingInstructionsList\\\\ProcessingInstructionsList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport get from 'lodash/get';\nimport uniqBy from 'lodash/uniqBy'; //app\n\nimport styles from './ProcessingInstructionsList.styles';\nimport { ProcessingInstructionsListView } from './ProcessingInstructionsList.view';\nimport { MultiSelect, MultiSelectAsync } from 'components';\nimport { getProcessingInstructionsGridData, getNewInstructionsId, getPiRefData, showModal, getProcessingInstructionStatusUpdate, selectUser, selectRefDataXbInstances, selectPiDepartmentList, selectPiGridDataLoading, selectPiHasNoGridData } from 'stores';\nimport { useFlexiColumns } from 'hooks';\nimport * as utils from 'utils';\nimport config from 'config';\nimport * as constants from 'consts'; // mui\n\nimport { makeStyles } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nProcessingInstructionsList.propTypes = {\n  gridData: PropTypes.shape({\n    items: PropTypes.array.isRequired,\n    page: PropTypes.number.isRequired,\n    pageSize: PropTypes.number.isRequired,\n    itemsTotal: PropTypes.number.isRequired\n  }).isRequired,\n  processTypes: PropTypes.arrayOf(PropTypes.shape({\n    processTypeID: PropTypes.number.isRequired,\n    processTypeDetails: PropTypes.string.isRequired\n  })).isRequired,\n  departments: PropTypes.array.isRequired,\n  statuses: PropTypes.array.isRequired\n};\nexport default function ProcessingInstructionsList(_ref) {\n  _s();\n\n  var gridData = _ref.gridData,\n      _ref$processTypes = _ref.processTypes,\n      processTypes = _ref$processTypes === void 0 ? [] : _ref$processTypes,\n      _ref$departments = _ref.departments,\n      departments = _ref$departments === void 0 ? [] : _ref$departments,\n      _ref$statuses = _ref.statuses,\n      statuses = _ref$statuses === void 0 ? [] : _ref$statuses;\n  var dispatch = useDispatch();\n  var history = useHistory();\n  var classes = makeStyles(styles, {\n    name: 'ProcessingInstructionsList'\n  })();\n  var processingInstructionsSort = useSelector(function (state) {\n    return get(state, 'processingInstructions.gridData.sort');\n  });\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      totalRowsPerPage = _useState2[0],\n      setTotalRowsPerPage = _useState2[1];\n\n  var user = useSelector(selectUser);\n  var refDataXbInstances = useSelector(selectRefDataXbInstances);\n  var piGridDataLoading = useSelector(selectPiGridDataLoading);\n  var piHasNoGridData = useSelector(selectPiHasNoGridData);\n  var departmentList = useSelector(selectPiDepartmentList);\n  var userHasApproverAccess = utils.app.access.feature('processingInstructions.approverChecklist', ['create', 'update'], user);\n  var userHasWritePermission = utils.app.access.feature('processingInstructions.processingInstructions', ['create', 'update'], user);\n\n  var _useState3 = useState(piGridDataLoading),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isPiGridDataLoading = _useState4[0],\n      setIsPiGridDataLoading = _useState4[1];\n\n  var _useState5 = useState(piHasNoGridData),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isPiHasNoGridData = _useState6[0],\n      setIsPiHasNoGridData = _useState6[1];\n\n  var fetchAsyncAssureds = useCallback( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(searchTerm) {\n      var results, resultsParsed;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return dispatch(getPiRefData('assureds', searchTerm));\n\n            case 2:\n              results = _context.sent;\n              resultsParsed = (utils.generic.isValidArray(results) ? results : []).map(function (item) {\n                return {\n                  id: item,\n                  name: item\n                };\n              });\n              return _context.abrupt(\"return\", resultsParsed);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), [] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  useEffect(function () {\n    setIsPiGridDataLoading(piGridDataLoading);\n    setIsPiHasNoGridData(piHasNoGridData);\n  }, [piGridDataLoading, gridData, piHasNoGridData]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var fetchAsyncIds = useCallback( /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(searchTerm) {\n      var results, resultsParsed;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return dispatch(getPiRefData('ids', searchTerm));\n\n            case 2:\n              results = _context2.sent;\n              resultsParsed = (utils.generic.isValidArray(results) ? results : []).map(function (item) {\n                return {\n                  id: item,\n                  name: item\n                };\n              });\n              return _context2.abrupt(\"return\", resultsParsed);\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }(), [] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  var searchSubmit = function searchSubmit(_ref4) {\n    var search = _ref4.search,\n        filters = _ref4.filters;\n    dispatch(getProcessingInstructionsGridData({\n      query: search,\n      filters: filters\n    }));\n  };\n\n  var resetSubmit = function resetSubmit() {\n    dispatch(getProcessingInstructionsGridData({\n      filters: {}\n    }));\n  };\n\n  var handleSort = function handleSort(by, dir) {\n    dispatch(getProcessingInstructionsGridData({\n      sortBy: by,\n      direction: dir\n    }));\n  };\n\n  var handleChangePage = function handleChangePage(newPage) {\n    dispatch(getProcessingInstructionsGridData({\n      page: newPage + 1\n    }));\n  };\n\n  var handleChangeRowsPerPage = function handleChangeRowsPerPage(rowsPerPage) {\n    setTotalRowsPerPage(rowsPerPage);\n    dispatch(getProcessingInstructionsGridData({\n      size: rowsPerPage\n    }));\n  };\n\n  var handleProcessSelection = function handleProcessSelection(process) {\n    if (process) {\n      dispatch(getNewInstructionsId(process)).then(function (response) {\n        if (response === null || response === void 0 ? void 0 : response.id) {\n          var id = response === null || response === void 0 ? void 0 : response.id;\n          history.push(\"\".concat(config.routes.processingInstructions.steps, \"/\").concat(id));\n        }\n      });\n    }\n  };\n\n  var editPopup = function editPopup(instructionId) {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        fullWidth: true,\n        title: utils.string.t('processingInstructions.details.updateProcessingInstructionLabel'),\n        maxWidth: 'xs',\n        componentProps: {\n          cancelLabel: utils.string.t('processingInstructions.authorisations.form.cancel'),\n          confirmLabel: utils.string.t('processingInstructions.authorisations.form.proceed'),\n          confirmMessage: utils.string.t('processingInstructions.details.updateInstruction'),\n          submitHandler: function submitHandler() {\n            dispatch(getProcessingInstructionStatusUpdate(instructionId)).then(function (res) {\n              window.open(\"\".concat(config.routes.processingInstructions.steps, \"/\").concat(instructionId), '_blank');\n              dispatch(getProcessingInstructionsGridData({\n                size: totalRowsPerPage\n              }));\n            });\n          },\n          handleClose: function handleClose() {}\n        }\n      }\n    }));\n  };\n\n  var _useState7 = useState([{\n    id: 'instructionId',\n    label: utils.string.t('processingInstructions.gridColumns.instructionId'),\n    sort: {\n      type: 'number',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true,\n    mandatory: true\n  }, {\n    id: 'status',\n    label: utils.string.t('processingInstructions.gridColumns.status'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true\n  }, {\n    id: 'insuredName',\n    label: utils.string.t('processingInstructions.gridColumns.insuredCoverHolder'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true\n  }, {\n    id: 'inceptionDate',\n    label: utils.string.t('processingInstructions.gridColumns.inceptionDate'),\n    sort: {\n      type: 'date',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }, {\n    id: 'createdByDept',\n    label: utils.string.t('processingInstructions.gridColumns.department'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true\n  }, {\n    id: 'gxbInstance',\n    label: utils.string.t('processingInstructions.gridColumns.gxbInstance'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true\n  }, {\n    id: 'processType',\n    label: utils.string.t('processingInstructions.gridColumns.process'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true\n  }, {\n    id: 'frontEndContact',\n    label: utils.string.t('processingInstructions.gridColumns.frontEndContact'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true\n  }, {\n    id: 'createdDate',\n    label: utils.string.t('processingInstructions.gridColumns.createdDate'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true\n  }].concat(_toConsumableArray(userHasWritePermission ? [{\n    id: 'update',\n    label: utils.string.t('processingInstructions.gridColumns.update'),\n    visible: true\n  }] : []))),\n      _useState8 = _slicedToArray(_useState7, 1),\n      columns = _useState8[0];\n\n  var _useFlexiColumns = useFlexiColumns(columns),\n      columnsArray = _useFlexiColumns.columns,\n      isTableHidden = _useFlexiColumns.isTableHidden,\n      columnProps = _useFlexiColumns.columnProps,\n      toggleColumn = _useFlexiColumns.toggleColumn;\n\n  var optionsProcessTypes = processTypes.filter(function (type) {\n    return (type === null || type === void 0 ? void 0 : type.primary) && (type === null || type === void 0 ? void 0 : type.businessProcessID) === constants.BUSINESS_PROCESS_PREMIUM_PROCESSING_ID;\n  }).map(function (type) {\n    return {\n      id: type.processTypeDetails,\n      name: utils.string.t(\"processingInstructions.type.\".concat(type.processTypeID))\n    };\n  });\n  var optionsDepartments = uniqBy(departments, 'deptName').map(function (d) {\n    return {\n      id: d.id,\n      name: d.deptName\n    };\n  });\n  var optionsStatuses = (userHasApproverAccess ? statuses.filter(function (s) {\n    return utils.processingInstructions.status.isSubmittedAuthorisedSignatory(s === null || s === void 0 ? void 0 : s.instructionStatusID) || utils.processingInstructions.status.isSubmittedProcessing(s.instructionStatusID);\n  }) : statuses).map(function (s) {\n    return {\n      id: s.instructionStatusName,\n      name: utils.string.t(\"processingInstructions.status.\".concat(s.instructionStatusID))\n    };\n  });\n  var filtersArray = [{\n    id: 'assuredNames',\n    type: 'multiSelectAsync',\n    label: utils.string.t('processingInstructions.filters.types.insured'),\n    value: [],\n    maxHeight: 500,\n    nestedClasses: {\n      popover: classes.popoverAssureds\n    },\n    content: /*#__PURE__*/_jsxDEV(MultiSelectAsync, {\n      id: \"assuredNames\",\n      max: 5,\n      searchMinChars: 4,\n      placeholder: utils.string.t('app.search'),\n      labels: {\n        hint: utils.string.t('processingInstructions.filters.hintInsured')\n      },\n      handlers: {\n        fetch: fetchAsyncAssureds\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 9\n    }, this)\n  }, {\n    id: 'instructionIds',\n    type: 'multiSelectAsync',\n    label: utils.string.t('processingInstructions.filters.types.instructionId'),\n    value: [],\n    maxHeight: 500,\n    content: /*#__PURE__*/_jsxDEV(MultiSelectAsync, {\n      id: \"instructionIds\",\n      max: 5,\n      searchMinChars: 4,\n      placeholder: utils.string.t('app.search'),\n      labels: {\n        hint: utils.string.t('processingInstructions.filters.hintInsured')\n      },\n      handlers: {\n        fetch: fetchAsyncIds\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 9\n    }, this)\n  }, {\n    id: 'processTypes',\n    type: 'multiSelect',\n    label: utils.string.t('processingInstructions.filters.types.process'),\n    value: [],\n    options: optionsProcessTypes,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"processTypes\",\n      search: true,\n      options: optionsProcessTypes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 16\n    }, this)\n  }, {\n    id: 'createdByDepts',\n    type: 'multiSelect',\n    label: utils.string.t('processingInstructions.filters.types.department'),\n    value: [],\n    options: optionsDepartments,\n    nestedClasses: {\n      popover: classes.popoverDept\n    },\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"createdByDepts\",\n      search: true,\n      options: optionsDepartments,\n      max: 5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 16\n    }, this)\n  }, {\n    id: 'status',\n    type: 'multiSelect',\n    label: utils.string.t('processingInstructions.filters.types.status'),\n    value: [],\n    options: optionsStatuses,\n    nestedClasses: {\n      popover: classes.popoverStatus\n    },\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"status\",\n      search: true,\n      options: optionsStatuses\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 16\n    }, this)\n  }];\n  return /*#__PURE__*/_jsxDEV(ProcessingInstructionsListView, {\n    rows: gridData === null || gridData === void 0 ? void 0 : gridData.items,\n    processTypes: processTypes,\n    refDataXbInstances: refDataXbInstances,\n    departmentList: departmentList,\n    sort: processingInstructionsSort,\n    pagination: {\n      page: (gridData === null || gridData === void 0 ? void 0 : gridData.page) - 1,\n      rowsTotal: gridData === null || gridData === void 0 ? void 0 : gridData.itemsTotal,\n      rowsPerPage: gridData === null || gridData === void 0 ? void 0 : gridData.pageSize\n    },\n    columnsArray: columnsArray,\n    columnProps: columnProps,\n    isTableHidden: isTableHidden,\n    filtersArray: filtersArray,\n    isPiGridDataLoading: isPiGridDataLoading,\n    isPiHasNoGridData: isPiHasNoGridData,\n    handlers: {\n      searchSubmit: searchSubmit,\n      resetSubmit: resetSubmit,\n      handleSort: handleSort,\n      handleChangePage: handleChangePage,\n      handleChangeRowsPerPage: handleChangeRowsPerPage,\n      handleProcessSelection: handleProcessSelection,\n      toggleColumn: toggleColumn,\n      editPopup: editPopup\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 316,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ProcessingInstructionsList, \"X2d7WDcXRMiupf6bUGGEfLJXBIA=\", false, function () {\n  return [useDispatch, useHistory, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useFlexiColumns];\n});\n\n_c = ProcessingInstructionsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProcessingInstructionsList\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ProcessingInstructionsList/ProcessingInstructionsList.js"],"names":["React","useState","useCallback","useEffect","PropTypes","useDispatch","useSelector","useHistory","get","uniqBy","styles","ProcessingInstructionsListView","MultiSelect","MultiSelectAsync","getProcessingInstructionsGridData","getNewInstructionsId","getPiRefData","showModal","getProcessingInstructionStatusUpdate","selectUser","selectRefDataXbInstances","selectPiDepartmentList","selectPiGridDataLoading","selectPiHasNoGridData","useFlexiColumns","utils","config","constants","makeStyles","ProcessingInstructionsList","propTypes","gridData","shape","items","array","isRequired","page","number","pageSize","itemsTotal","processTypes","arrayOf","processTypeID","processTypeDetails","string","departments","statuses","dispatch","history","classes","name","processingInstructionsSort","state","totalRowsPerPage","setTotalRowsPerPage","user","refDataXbInstances","piGridDataLoading","piHasNoGridData","departmentList","userHasApproverAccess","app","access","feature","userHasWritePermission","isPiGridDataLoading","setIsPiGridDataLoading","isPiHasNoGridData","setIsPiHasNoGridData","fetchAsyncAssureds","searchTerm","results","resultsParsed","generic","isValidArray","map","item","id","fetchAsyncIds","searchSubmit","search","filters","query","resetSubmit","handleSort","by","dir","sortBy","direction","handleChangePage","newPage","handleChangeRowsPerPage","rowsPerPage","size","handleProcessSelection","process","then","response","push","routes","processingInstructions","steps","editPopup","instructionId","component","props","fullWidth","title","t","maxWidth","componentProps","cancelLabel","confirmLabel","confirmMessage","submitHandler","res","window","open","handleClose","label","sort","type","nowrap","visible","mandatory","columns","columnsArray","isTableHidden","columnProps","toggleColumn","optionsProcessTypes","filter","primary","businessProcessID","BUSINESS_PROCESS_PREMIUM_PROCESSING_ID","optionsDepartments","d","deptName","optionsStatuses","s","status","isSubmittedAuthorisedSignatory","instructionStatusID","isSubmittedProcessing","instructionStatusName","filtersArray","value","maxHeight","nestedClasses","popover","popoverAssureds","content","hint","fetch","options","popoverDept","popoverStatus","rowsTotal"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport get from 'lodash/get';\r\nimport uniqBy from 'lodash/uniqBy';\r\n\r\n//app\r\nimport styles from './ProcessingInstructionsList.styles';\r\nimport { ProcessingInstructionsListView } from './ProcessingInstructionsList.view';\r\nimport { MultiSelect, MultiSelectAsync } from 'components';\r\nimport {\r\n  getProcessingInstructionsGridData,\r\n  getNewInstructionsId,\r\n  getPiRefData,\r\n  showModal,\r\n  getProcessingInstructionStatusUpdate,\r\n  selectUser,\r\n  selectRefDataXbInstances,\r\n  selectPiDepartmentList,\r\n  selectPiGridDataLoading,\r\n  selectPiHasNoGridData,\r\n} from 'stores';\r\nimport { useFlexiColumns } from 'hooks';\r\nimport * as utils from 'utils';\r\nimport config from 'config';\r\nimport * as constants from 'consts';\r\n\r\n// mui\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nProcessingInstructionsList.propTypes = {\r\n  gridData: PropTypes.shape({\r\n    items: PropTypes.array.isRequired,\r\n    page: PropTypes.number.isRequired,\r\n    pageSize: PropTypes.number.isRequired,\r\n    itemsTotal: PropTypes.number.isRequired,\r\n  }).isRequired,\r\n  processTypes: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      processTypeID: PropTypes.number.isRequired,\r\n      processTypeDetails: PropTypes.string.isRequired,\r\n    })\r\n  ).isRequired,\r\n  departments: PropTypes.array.isRequired,\r\n  statuses: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default function ProcessingInstructionsList({ gridData, processTypes = [], departments = [], statuses = [] }) {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const classes = makeStyles(styles, { name: 'ProcessingInstructionsList' })();\r\n  const processingInstructionsSort = useSelector((state) => get(state, 'processingInstructions.gridData.sort'));\r\n  const [totalRowsPerPage, setTotalRowsPerPage] = useState(0);\r\n  const user = useSelector(selectUser);\r\n  const refDataXbInstances = useSelector(selectRefDataXbInstances);\r\n  const piGridDataLoading = useSelector(selectPiGridDataLoading);\r\n  const piHasNoGridData = useSelector(selectPiHasNoGridData);\r\n  const departmentList = useSelector(selectPiDepartmentList);\r\n\r\n  const userHasApproverAccess = utils.app.access.feature('processingInstructions.approverChecklist', ['create', 'update'], user);\r\n  const userHasWritePermission = utils.app.access.feature('processingInstructions.processingInstructions', ['create', 'update'], user);\r\n\r\n  const [isPiGridDataLoading, setIsPiGridDataLoading] = useState(piGridDataLoading);\r\n  const [isPiHasNoGridData, setIsPiHasNoGridData] = useState(piHasNoGridData);\r\n  const fetchAsyncAssureds = useCallback(\r\n    async (searchTerm) => {\r\n      const results = await dispatch(getPiRefData('assureds', searchTerm));\r\n      const resultsParsed = (utils.generic.isValidArray(results) ? results : []).map((item) => ({\r\n        id: item,\r\n        name: item,\r\n      }));\r\n\r\n      return resultsParsed;\r\n    },\r\n    [] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n  useEffect(() => {\r\n    setIsPiGridDataLoading(piGridDataLoading);\r\n    setIsPiHasNoGridData(piHasNoGridData);\r\n  }, [piGridDataLoading, gridData, piHasNoGridData]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const fetchAsyncIds = useCallback(\r\n    async (searchTerm) => {\r\n      const results = await dispatch(getPiRefData('ids', searchTerm));\r\n      const resultsParsed = (utils.generic.isValidArray(results) ? results : []).map((item) => ({\r\n        id: item,\r\n        name: item,\r\n      }));\r\n\r\n      return resultsParsed;\r\n    },\r\n    [] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  const searchSubmit = ({ search, filters }) => {\r\n    dispatch(getProcessingInstructionsGridData({ query: search, filters }));\r\n  };\r\n\r\n  const resetSubmit = () => {\r\n    dispatch(getProcessingInstructionsGridData({ filters: {} }));\r\n  };\r\n\r\n  const handleSort = (by, dir) => {\r\n    dispatch(getProcessingInstructionsGridData({ sortBy: by, direction: dir }));\r\n  };\r\n\r\n  const handleChangePage = (newPage) => {\r\n    dispatch(getProcessingInstructionsGridData({ page: newPage + 1 }));\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (rowsPerPage) => {\r\n    setTotalRowsPerPage(rowsPerPage);\r\n    dispatch(getProcessingInstructionsGridData({ size: rowsPerPage }));\r\n  };\r\n\r\n  const handleProcessSelection = (process) => {\r\n    if (process) {\r\n      dispatch(getNewInstructionsId(process)).then((response) => {\r\n        if (response?.id) {\r\n          const id = response?.id;\r\n          history.push(`${config.routes.processingInstructions.steps}/${id}`);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const editPopup = (instructionId) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          fullWidth: true,\r\n          title: utils.string.t('processingInstructions.details.updateProcessingInstructionLabel'),\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            cancelLabel: utils.string.t('processingInstructions.authorisations.form.cancel'),\r\n            confirmLabel: utils.string.t('processingInstructions.authorisations.form.proceed'),\r\n            confirmMessage: utils.string.t('processingInstructions.details.updateInstruction'),\r\n\r\n            submitHandler: () => {\r\n              dispatch(getProcessingInstructionStatusUpdate(instructionId)).then((res) => {\r\n                window.open(`${config.routes.processingInstructions.steps}/${instructionId}`, '_blank');\r\n                dispatch(getProcessingInstructionsGridData({ size: totalRowsPerPage }));\r\n              });\r\n            },\r\n            handleClose: () => {},\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const [columns] = useState([\r\n    {\r\n      id: 'instructionId',\r\n      label: utils.string.t('processingInstructions.gridColumns.instructionId'),\r\n      sort: { type: 'number', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n      mandatory: true,\r\n    },\r\n    {\r\n      id: 'status',\r\n      label: utils.string.t('processingInstructions.gridColumns.status'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: true,\r\n    },\r\n    {\r\n      id: 'insuredName',\r\n      label: utils.string.t('processingInstructions.gridColumns.insuredCoverHolder'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: true,\r\n    },\r\n    {\r\n      id: 'inceptionDate',\r\n      label: utils.string.t('processingInstructions.gridColumns.inceptionDate'),\r\n      sort: { type: 'date', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n    },\r\n    {\r\n      id: 'createdByDept',\r\n      label: utils.string.t('processingInstructions.gridColumns.department'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: true,\r\n    },\r\n    {\r\n      id: 'gxbInstance',\r\n      label: utils.string.t('processingInstructions.gridColumns.gxbInstance'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: true,\r\n    },\r\n    {\r\n      id: 'processType',\r\n      label: utils.string.t('processingInstructions.gridColumns.process'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: true,\r\n    },\r\n    {\r\n      id: 'frontEndContact',\r\n      label: utils.string.t('processingInstructions.gridColumns.frontEndContact'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: true,\r\n    },\r\n    {\r\n      id: 'createdDate',\r\n      label: utils.string.t('processingInstructions.gridColumns.createdDate'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: true,\r\n    },\r\n    ...(userHasWritePermission\r\n      ? [\r\n          {\r\n            id: 'update',\r\n            label: utils.string.t('processingInstructions.gridColumns.update'),\r\n            visible: true,\r\n          },\r\n        ]\r\n      : []),\r\n  ]);\r\n\r\n  const { columns: columnsArray, isTableHidden, columnProps, toggleColumn } = useFlexiColumns(columns);\r\n\r\n  const optionsProcessTypes = processTypes\r\n    .filter((type) => type?.primary && type?.businessProcessID === constants.BUSINESS_PROCESS_PREMIUM_PROCESSING_ID)\r\n    .map((type) => ({\r\n      id: type.processTypeDetails,\r\n      name: utils.string.t(`processingInstructions.type.${type.processTypeID}`),\r\n    }));\r\n\r\n  const optionsDepartments = uniqBy(departments, 'deptName').map((d) => ({ id: d.id, name: d.deptName }));\r\n\r\n  const optionsStatuses = (\r\n    userHasApproverAccess\r\n      ? statuses.filter(\r\n          (s) =>\r\n            utils.processingInstructions.status.isSubmittedAuthorisedSignatory(s?.instructionStatusID) ||\r\n            utils.processingInstructions.status.isSubmittedProcessing(s.instructionStatusID)\r\n        )\r\n      : statuses\r\n  ).map((s) => ({\r\n    id: s.instructionStatusName,\r\n    name: utils.string.t(`processingInstructions.status.${s.instructionStatusID}`),\r\n  }));\r\n\r\n  const filtersArray = [\r\n    {\r\n      id: 'assuredNames',\r\n      type: 'multiSelectAsync',\r\n      label: utils.string.t('processingInstructions.filters.types.insured'),\r\n      value: [],\r\n      maxHeight: 500,\r\n      nestedClasses: { popover: classes.popoverAssureds },\r\n      content: (\r\n        <MultiSelectAsync\r\n          id=\"assuredNames\"\r\n          max={5}\r\n          searchMinChars={4}\r\n          placeholder={utils.string.t('app.search')}\r\n          labels={{ hint: utils.string.t('processingInstructions.filters.hintInsured') }}\r\n          handlers={{\r\n            fetch: fetchAsyncAssureds,\r\n          }}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      id: 'instructionIds',\r\n      type: 'multiSelectAsync',\r\n      label: utils.string.t('processingInstructions.filters.types.instructionId'),\r\n      value: [],\r\n      maxHeight: 500,\r\n      content: (\r\n        <MultiSelectAsync\r\n          id=\"instructionIds\"\r\n          max={5}\r\n          searchMinChars={4}\r\n          placeholder={utils.string.t('app.search')}\r\n          labels={{ hint: utils.string.t('processingInstructions.filters.hintInsured') }}\r\n          handlers={{\r\n            fetch: fetchAsyncIds,\r\n          }}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      id: 'processTypes',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('processingInstructions.filters.types.process'),\r\n      value: [],\r\n      options: optionsProcessTypes,\r\n      content: <MultiSelect id=\"processTypes\" search options={optionsProcessTypes} />,\r\n    },\r\n    {\r\n      id: 'createdByDepts',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('processingInstructions.filters.types.department'),\r\n      value: [],\r\n      options: optionsDepartments,\r\n      nestedClasses: { popover: classes.popoverDept },\r\n      content: <MultiSelect id=\"createdByDepts\" search options={optionsDepartments} max={5} />,\r\n    },\r\n    {\r\n      id: 'status',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('processingInstructions.filters.types.status'),\r\n      value: [],\r\n      options: optionsStatuses,\r\n      nestedClasses: { popover: classes.popoverStatus },\r\n      content: <MultiSelect id=\"status\" search options={optionsStatuses} />,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <ProcessingInstructionsListView\r\n      rows={gridData?.items}\r\n      processTypes={processTypes}\r\n      refDataXbInstances={refDataXbInstances}\r\n      departmentList={departmentList}\r\n      sort={processingInstructionsSort}\r\n      pagination={{\r\n        page: gridData?.page - 1,\r\n        rowsTotal: gridData?.itemsTotal,\r\n        rowsPerPage: gridData?.pageSize,\r\n      }}\r\n      columnsArray={columnsArray}\r\n      columnProps={columnProps}\r\n      isTableHidden={isTableHidden}\r\n      filtersArray={filtersArray}\r\n      isPiGridDataLoading={isPiGridDataLoading}\r\n      isPiHasNoGridData={isPiHasNoGridData}\r\n      handlers={{\r\n        searchSubmit,\r\n        resetSubmit,\r\n        handleSort,\r\n        handleChangePage,\r\n        handleChangeRowsPerPage,\r\n        handleProcessSelection,\r\n        toggleColumn,\r\n        editPopup,\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}