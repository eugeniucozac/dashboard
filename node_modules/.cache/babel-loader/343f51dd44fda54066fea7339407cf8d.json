{"ast":null,"code":"import \"core-js/modules/es.promise.finally\";\nimport { addLoader, authLogout, removeLoader } from 'stores';\nimport * as utils from 'utils';\nexport var getPolicySections = function getPolicySections() {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint,\n        policyData = _getState.claims.policyData;\n\n    var defaultError = {\n      component: 'getPolicySections',\n      file: 'stores/claims.actions.getPolicySections'\n    };\n    var policyID = policyData.xbPolicyID || '';\n    var sourceID = policyData.xbInstanceID || '';\n    dispatch(getPolicySectionsRequest());\n    dispatch(addLoader('getPolicySections'));\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.claimService,\n      path: \"api/data/gui/policy/\".concat(policyID, \"/source/\").concat(sourceID, \"/section\")\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(getPolicySectionsSuccess(data.data));\n      return data.data;\n    })[\"catch\"](function (err) {\n      dispatch(getPolicySectionsFailure(err, defaultError));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      return err;\n    })[\"finally\"](function () {\n      dispatch(removeLoader('getPolicySections'));\n    });\n  };\n};\nexport var getPolicySectionsRequest = function getPolicySectionsRequest() {\n  return {\n    type: 'CLAIMS_POLICY_SECTIONS_GET_REQUEST'\n  };\n};\nexport var getPolicySectionsSuccess = function getPolicySectionsSuccess(data) {\n  return {\n    type: 'CLAIMS_POLICY_SECTIONS_GET_SUCCESS',\n    payload: data\n  };\n};\nexport var getPolicySectionsFailure = function getPolicySectionsFailure(err) {\n  return {\n    type: 'CLAIMS_POLICY_SECTIONS_GET_FAILURE',\n    payload: err\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.getPolicySections.js"],"names":["addLoader","authLogout","removeLoader","utils","getPolicySections","dispatch","getState","auth","user","endpoint","config","vars","policyData","claims","defaultError","component","file","policyID","xbPolicyID","sourceID","xbInstanceID","getPolicySectionsRequest","api","get","token","accessToken","claimService","path","then","response","handleResponse","json","handleNewData","data","getPolicySectionsSuccess","err","getPolicySectionsFailure","handleUnauthorized","type","payload"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,UAApB,EAAgCC,YAAhC,QAAoD,QAApD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB;AAAA,SAAM,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC7D;AAD6D,oBAEsBA,QAAQ,EAF9B;AAAA,QAE7CC,IAF6C,aAErDC,IAFqD,CAE7CD,IAF6C;AAAA,QAEnBE,QAFmB,aAErCC,MAFqC,CAE3BC,IAF2B,CAEnBF,QAFmB;AAAA,QAEKG,UAFL,aAELC,MAFK,CAEKD,UAFL;;AAI7D,QAAME,YAAY,GAAG;AACnBC,MAAAA,SAAS,EAAE,mBADQ;AAEnBC,MAAAA,IAAI,EAAE;AAFa,KAArB;AAKA,QAAMC,QAAQ,GAAGL,UAAU,CAACM,UAAX,IAAyB,EAA1C;AACA,QAAMC,QAAQ,GAAGP,UAAU,CAACQ,YAAX,IAA2B,EAA5C;AAEAf,IAAAA,QAAQ,CAACgB,wBAAwB,EAAzB,CAAR;AACAhB,IAAAA,QAAQ,CAACL,SAAS,CAAC,mBAAD,CAAV,CAAR;AAEA,WAAOG,KAAK,CAACmB,GAAN,CACJC,GADI,CACA;AACHC,MAAAA,KAAK,EAAEjB,IAAI,CAACkB,WADT;AAEHhB,MAAAA,QAAQ,EAAEA,QAAQ,CAACiB,YAFhB;AAGHC,MAAAA,IAAI,gCAAyBV,QAAzB,qBAA4CE,QAA5C;AAHD,KADA,EAMJS,IANI,CAMC,UAACC,QAAD;AAAA,aAAc1B,KAAK,CAACmB,GAAN,CAAUQ,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAND,EAOJD,IAPI,CAOC,UAACG,IAAD;AAAA,aAAU5B,KAAK,CAACmB,GAAN,CAAUU,aAAV,CAAwBD,IAAxB,CAAV;AAAA,KAPD,EAQJH,IARI,CAQC,UAACK,IAAD,EAAU;AACd5B,MAAAA,QAAQ,CAAC6B,wBAAwB,CAACD,IAAI,CAACA,IAAN,CAAzB,CAAR;AACA,aAAOA,IAAI,CAACA,IAAZ;AACD,KAXI,WAYE,UAACE,GAAD,EAAS;AACd9B,MAAAA,QAAQ,CAAC+B,wBAAwB,CAACD,GAAD,EAAMrB,YAAN,CAAzB,CAAR;AACAX,MAAAA,KAAK,CAACmB,GAAN,CAAUe,kBAAV,CAA6BF,GAA7B,EAAkC9B,QAAlC,EAA4CJ,UAA5C;AACA,aAAOkC,GAAP;AACD,KAhBI,aAiBI,YAAM;AACb9B,MAAAA,QAAQ,CAACH,YAAY,CAAC,mBAAD,CAAb,CAAR;AACD,KAnBI,CAAP;AAoBD,GAnCgC;AAAA,CAA1B;AAqCP,OAAO,IAAMmB,wBAAwB,GAAG,SAA3BA,wBAA2B,GAAM;AAC5C,SAAO;AACLiB,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,IAAMJ,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACD,IAAD,EAAU;AAChD,SAAO;AACLK,IAAAA,IAAI,EAAE,oCADD;AAELC,IAAAA,OAAO,EAAEN;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMG,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACD,GAAD,EAAS;AAC/C,SAAO;AACLG,IAAAA,IAAI,EAAE,oCADD;AAELC,IAAAA,OAAO,EAAEJ;AAFJ,GAAP;AAID,CALM","sourcesContent":["import { addLoader, authLogout, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const getPolicySections = () => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } }, claims: { policyData } } = getState();\r\n\r\n  const defaultError = {\r\n    component: 'getPolicySections',\r\n    file: 'stores/claims.actions.getPolicySections',\r\n  };\r\n\r\n  const policyID = policyData.xbPolicyID || '';\r\n  const sourceID = policyData.xbInstanceID || '';\r\n\r\n  dispatch(getPolicySectionsRequest());\r\n  dispatch(addLoader('getPolicySections'));\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.claimService,\r\n      path: `api/data/gui/policy/${policyID}/source/${sourceID}/section`,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(getPolicySectionsSuccess(data.data));\r\n      return data.data;\r\n    })\r\n    .catch((err) => {\r\n      dispatch(getPolicySectionsFailure(err, defaultError));\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('getPolicySections'));\r\n    });\r\n};\r\n\r\nexport const getPolicySectionsRequest = () => {\r\n  return {\r\n    type: 'CLAIMS_POLICY_SECTIONS_GET_REQUEST',\r\n  };\r\n};\r\n\r\nexport const getPolicySectionsSuccess = (data) => {\r\n  return {\r\n    type: 'CLAIMS_POLICY_SECTIONS_GET_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const getPolicySectionsFailure = (err) => {\r\n  return {\r\n    type: 'CLAIMS_POLICY_SECTIONS_GET_FAILURE',\r\n    payload: err,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}