{"ast":null,"code":"import \"core-js/modules/es.array.concat\";\nimport get from 'lodash/get';\nimport uniq from 'lodash/uniq';\nimport * as utils from 'utils';\nimport * as constants from 'consts';\nvar utilsPolicy = {\n  getMarkets: function getMarkets(policy) {\n    if (!policy || !utils.generic.isValidArray(policy.markets, true)) return [];\n    return get(policy, 'markets', []);\n  },\n  // layer OMS\n  // false/false means we want the total gross premium amount\n  getPremiumByCurrency: function getPremiumByCurrency(policy, currency) {\n    var isSigned = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var toOrder = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    if (!policy || !currency) return {};\n    var markets = utilsPolicy.getMarkets(policy);\n    return utils.markets.getPremiumByCurrency(markets, currency, isSigned, toOrder);\n  },\n  // policy GXB\n  // true/true means we want the premium value signed and ordered (based on markets %)\n  getPremiumBySettlementCurrency: function getPremiumBySettlementCurrency(policy) {\n    var isSigned = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var toOrder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    if (!policy) return {};\n    var markets = utilsPolicy.getMarkets(policy);\n    return utils.markets.getPremiumBySettlementCurrency(markets, isSigned, toOrder);\n  },\n  getName: function getName(policy) {\n    if (!policy) return '';\n    var amount = utils.string.t('format.number', {\n      value: {\n        number: policy.amount,\n        format: {\n          average: true,\n          totalLength: 12,\n          lowPrecision: false\n        }\n      }\n    }).toUpperCase();\n    var excess = utils.string.t('format.number', {\n      value: {\n        number: policy.excess,\n        format: {\n          average: true,\n          totalLength: 12,\n          lowPrecision: false\n        }\n      }\n    }).toUpperCase();\n    var hasAmount = Boolean(policy.amount);\n    var hasExcess = Boolean(policy.excess);\n    var hasBoth = hasAmount && hasExcess;\n    var currency = utilsPolicy.getCurrency(policy);\n\n    if (utilsPolicy.isPrimary(policy)) {\n      return \"\".concat(utils.string.t('placement.generic.primary'), \" \").concat(amount).concat(currency ? \" \".concat(currency) : '');\n    } else if (hasBoth) {\n      return \"\".concat(amount, \" xs \").concat(excess).concat(currency ? \" \".concat(currency) : '');\n    } else if (hasExcess) {\n      return \"xs \".concat(excess).concat(currency ? \" \".concat(currency) : '');\n    } else if (policy.uniqueMarketReference) {\n      return policy.uniqueMarketReference;\n    } else {\n      return '--';\n    }\n  },\n  getCurrency: function getCurrency(policy) {\n    if (!utils.generic.isValidArray(policy === null || policy === void 0 ? void 0 : policy.markets, true)) return;\n    var currencies = policy.markets.filter(function (market) {\n      return utils.market.getCurrency(market);\n    }).map(function (market) {\n      return utils.market.getCurrency(market);\n    });\n    return uniq(currencies).length === 1 ? uniq(currencies)[0] : false;\n  },\n  hasBoundPremium: function hasBoundPremium(policy) {\n    if (!policy || !utils.generic.isValidObject(policy) || !utilsPolicy.isOriginGxb(policy)) return false;\n    var premiumsByCurrency = utils.markets.getPremiumBySettlementCurrency(utilsPolicy.getMarkets(policy), true, true);\n    return Object.values(premiumsByCurrency).some(function (premium) {\n      return premium > 0;\n    });\n  },\n  isPrimary: function isPrimary(policy) {\n    return policy && policy.amount && !policy.excess;\n  },\n  isOriginEdge: function isOriginEdge(policy) {\n    return policy && policy.origin === constants.ORIGIN_EDGE;\n  },\n  isOriginGxb: function isOriginGxb(policy) {\n    return policy && policy.origin === constants.ORIGIN_GXB;\n  }\n};\nexport default utilsPolicy;","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/utils/policy/policy.js"],"names":["get","uniq","utils","constants","utilsPolicy","getMarkets","policy","generic","isValidArray","markets","getPremiumByCurrency","currency","isSigned","toOrder","getPremiumBySettlementCurrency","getName","amount","string","t","value","number","format","average","totalLength","lowPrecision","toUpperCase","excess","hasAmount","Boolean","hasExcess","hasBoth","getCurrency","isPrimary","uniqueMarketReference","currencies","filter","market","map","length","hasBoundPremium","isValidObject","isOriginGxb","premiumsByCurrency","Object","values","some","premium","isOriginEdge","origin","ORIGIN_EDGE","ORIGIN_GXB"],"mappings":"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","sourcesContent":["import get from 'lodash/get';\r\nimport uniq from 'lodash/uniq';\r\nimport * as utils from 'utils';\r\nimport * as constants from 'consts';\r\n\r\nconst utilsPolicy = {\r\n  getMarkets: (policy) => {\r\n    if (!policy || !utils.generic.isValidArray(policy.markets, true)) return [];\r\n\r\n    return get(policy, 'markets', []);\r\n  },\r\n\r\n  // layer OMS\r\n  // false/false means we want the total gross premium amount\r\n  getPremiumByCurrency: (policy, currency, isSigned = false, toOrder = true) => {\r\n    if (!policy || !currency) return {};\r\n\r\n    let markets = utilsPolicy.getMarkets(policy);\r\n    return utils.markets.getPremiumByCurrency(markets, currency, isSigned, toOrder);\r\n  },\r\n\r\n  // policy GXB\r\n  // true/true means we want the premium value signed and ordered (based on markets %)\r\n  getPremiumBySettlementCurrency: (policy, isSigned = false, toOrder = true) => {\r\n    if (!policy) return {};\r\n\r\n    let markets = utilsPolicy.getMarkets(policy);\r\n    return utils.markets.getPremiumBySettlementCurrency(markets, isSigned, toOrder);\r\n  },\r\n\r\n  getName: (policy) => {\r\n    if (!policy) return '';\r\n\r\n    const amount = utils.string\r\n      .t('format.number', { value: { number: policy.amount, format: { average: true, totalLength: 12, lowPrecision: false } } })\r\n      .toUpperCase();\r\n\r\n    const excess = utils.string\r\n      .t('format.number', { value: { number: policy.excess, format: { average: true, totalLength: 12, lowPrecision: false } } })\r\n      .toUpperCase();\r\n\r\n    const hasAmount = Boolean(policy.amount);\r\n    const hasExcess = Boolean(policy.excess);\r\n    const hasBoth = hasAmount && hasExcess;\r\n    const currency = utilsPolicy.getCurrency(policy);\r\n\r\n    if (utilsPolicy.isPrimary(policy)) {\r\n      return `${utils.string.t('placement.generic.primary')} ${amount}${currency ? ` ${currency}` : ''}`;\r\n    } else if (hasBoth) {\r\n      return `${amount} xs ${excess}${currency ? ` ${currency}` : ''}`;\r\n    } else if (hasExcess) {\r\n      return `xs ${excess}${currency ? ` ${currency}` : ''}`;\r\n    } else if (policy.uniqueMarketReference) {\r\n      return policy.uniqueMarketReference;\r\n    } else {\r\n      return '--';\r\n    }\r\n  },\r\n\r\n  getCurrency: (policy) => {\r\n    if (!utils.generic.isValidArray(policy?.markets, true)) return;\r\n\r\n    const currencies = policy.markets\r\n      .filter((market) => utils.market.getCurrency(market))\r\n      .map((market) => utils.market.getCurrency(market));\r\n\r\n    return uniq(currencies).length === 1 ? uniq(currencies)[0] : false;\r\n  },\r\n\r\n  hasBoundPremium: (policy) => {\r\n    if (!policy || !utils.generic.isValidObject(policy) || !utilsPolicy.isOriginGxb(policy)) return false;\r\n\r\n    const premiumsByCurrency = utils.markets.getPremiumBySettlementCurrency(utilsPolicy.getMarkets(policy), true, true);\r\n\r\n    return Object.values(premiumsByCurrency).some((premium) => premium > 0);\r\n  },\r\n\r\n  isPrimary: (policy) => {\r\n    return policy && policy.amount && !policy.excess;\r\n  },\r\n\r\n  isOriginEdge: (policy) => {\r\n    return policy && policy.origin === constants.ORIGIN_EDGE;\r\n  },\r\n\r\n  isOriginGxb: (policy) => {\r\n    return policy && policy.origin === constants.ORIGIN_GXB;\r\n  },\r\n};\r\n\r\nexport default utilsPolicy;\r\n"]},"metadata":{},"sourceType":"module"}