{"ast":null,"code":"import _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\PolicyDocuments\\\\PolicyDocuments.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport isEmpty from 'lodash/isEmpty'; // app\n\nimport { PolicyDocumentsView } from './PolicyDocuments.view';\nimport { selectFileUploadData, selectFileUploadLoading, selectFileUploadLoaded, getFileUploadGuiData } from 'stores';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nPolicyDocuments.propTypes = {\n  files: PropTypes.array.isRequired,\n  rejectedFiles: PropTypes.array\n};\nexport default function PolicyDocuments(_ref) {\n  _s();\n\n  var files = _ref.files,\n      rejectedFiles = _ref.rejectedFiles;\n  var dispatch = useDispatch();\n\n  var _useState = useState('upload'),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedTab = _useState2[0],\n      setSelectedTab = _useState2[1];\n\n  var fileUploadData = useSelector(selectFileUploadData);\n  var fileUploadDataLoading = useSelector(selectFileUploadLoading);\n  var fileUploadDataLoaded = useSelector(selectFileUploadLoaded);\n  var tabs = [{\n    value: 'upload',\n    label: utils.string.t('fileUpload.tabs.upload')\n  }, {\n    value: 'search',\n    label: utils.string.t('fileUpload.tabs.search')\n  }];\n  var fetchGuiData = useCallback(function () {\n    if (isEmpty(fileUploadData) && !fileUploadDataLoading) {\n      dispatch(getFileUploadGuiData(['DocumentType', 'XBInstance', 'Department']));\n    }\n  }, [dispatch]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    fetchGuiData();\n  }, [fetchGuiData]);\n  return /*#__PURE__*/_jsxDEV(PolicyDocumentsView, {\n    files: files,\n    rejectedFiles: rejectedFiles,\n    data: fileUploadData,\n    dataLoading: fileUploadDataLoading,\n    dataLoaded: fileUploadDataLoaded,\n    tabs: tabs,\n    selectedTab: selectedTab,\n    handleSelectTab: setSelectedTab\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PolicyDocuments, \"2qVD77UvtLd31JiDNtYm/HSGlgM=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = PolicyDocuments;\nPolicyDocuments.displayName = \"PolicyDocuments\";\nPolicyDocuments.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"PolicyDocuments\",\n  \"props\": {\n    \"files\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"rejectedFiles\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\modules\\\\PolicyDocuments\\\\PolicyDocuments.js\"] = {\n    name: \"PolicyDocuments\",\n    docgenInfo: PolicyDocuments.__docgenInfo,\n    path: \"src\\\\modules\\\\PolicyDocuments\\\\PolicyDocuments.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"PolicyDocuments\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/PolicyDocuments/PolicyDocuments.js"],"names":["React","useCallback","useState","useEffect","PropTypes","useDispatch","useSelector","isEmpty","PolicyDocumentsView","selectFileUploadData","selectFileUploadLoading","selectFileUploadLoaded","getFileUploadGuiData","utils","PolicyDocuments","propTypes","files","array","isRequired","rejectedFiles","dispatch","selectedTab","setSelectedTab","fileUploadData","fileUploadDataLoading","fileUploadDataLoaded","tabs","value","label","string","t","fetchGuiData"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,QAA7B,EAAuCC,SAAvC,QAAwD,OAAxD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,OAAP,MAAoB,gBAApB,C,CAEA;;AACA,SAASC,mBAAT,QAAoC,wBAApC;AACA,SAASC,oBAAT,EAA+BC,uBAA/B,EAAwDC,sBAAxD,EAAgFC,oBAAhF,QAA4G,QAA5G;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;AAEAC,eAAe,CAACC,SAAhB,GAA4B;AAC1BC,EAAAA,KAAK,EAAEZ,SAAS,CAACa,KAAV,CAAgBC,UADG;AAE1BC,EAAAA,aAAa,EAAEf,SAAS,CAACa;AAFC,CAA5B;AAKA,eAAe,SAASH,eAAT,OAAmD;AAAA;;AAAA,MAAxBE,KAAwB,QAAxBA,KAAwB;AAAA,MAAjBG,aAAiB,QAAjBA,aAAiB;AAChE,MAAMC,QAAQ,GAAGf,WAAW,EAA5B;;AADgE,kBAE1BH,QAAQ,CAAC,QAAD,CAFkB;AAAA;AAAA,MAEzDmB,WAFyD;AAAA,MAE5CC,cAF4C;;AAGhE,MAAMC,cAAc,GAAGjB,WAAW,CAACG,oBAAD,CAAlC;AACA,MAAMe,qBAAqB,GAAGlB,WAAW,CAACI,uBAAD,CAAzC;AACA,MAAMe,oBAAoB,GAAGnB,WAAW,CAACK,sBAAD,CAAxC;AAEA,MAAMe,IAAI,GAAG,CACX;AAAEC,IAAAA,KAAK,EAAE,QAAT;AAAmBC,IAAAA,KAAK,EAAEf,KAAK,CAACgB,MAAN,CAAaC,CAAb,CAAe,wBAAf;AAA1B,GADW,EAEX;AAAEH,IAAAA,KAAK,EAAE,QAAT;AAAmBC,IAAAA,KAAK,EAAEf,KAAK,CAACgB,MAAN,CAAaC,CAAb,CAAe,wBAAf;AAA1B,GAFW,CAAb;AAKA,MAAMC,YAAY,GAAG9B,WAAW,CAAC,YAAM;AACrC,QAAIM,OAAO,CAACgB,cAAD,CAAP,IAA2B,CAACC,qBAAhC,EAAuD;AACrDJ,MAAAA,QAAQ,CAACR,oBAAoB,CAAC,CAAC,cAAD,EAAiB,YAAjB,EAA+B,YAA/B,CAAD,CAArB,CAAR;AACD;AACF,GAJ+B,EAI7B,CAACQ,QAAD,CAJ6B,CAAhC,CAZgE,CAgBhD;;AAEhBjB,EAAAA,SAAS,CAAC,YAAM;AACd4B,IAAAA,YAAY;AACb,GAFQ,EAEN,CAACA,YAAD,CAFM,CAAT;AAIA,sBACE,QAAC,mBAAD;AACE,IAAA,KAAK,EAAEf,KADT;AAEE,IAAA,aAAa,EAAEG,aAFjB;AAGE,IAAA,IAAI,EAAEI,cAHR;AAIE,IAAA,WAAW,EAAEC,qBAJf;AAKE,IAAA,UAAU,EAAEC,oBALd;AAME,IAAA,IAAI,EAAEC,IANR;AAOE,IAAA,WAAW,EAAEL,WAPf;AAQE,IAAA,eAAe,EAAEC;AARnB;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GAlCuBR,e;UACLT,W,EAEMC,W,EACOA,W,EACDA,W;;;KALPQ,e;AAAAA,e","sourcesContent":["import React, { useCallback, useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport isEmpty from 'lodash/isEmpty';\r\n\r\n// app\r\nimport { PolicyDocumentsView } from './PolicyDocuments.view';\r\nimport { selectFileUploadData, selectFileUploadLoading, selectFileUploadLoaded, getFileUploadGuiData } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nPolicyDocuments.propTypes = {\r\n  files: PropTypes.array.isRequired,\r\n  rejectedFiles: PropTypes.array,\r\n};\r\n\r\nexport default function PolicyDocuments({ files, rejectedFiles }) {\r\n  const dispatch = useDispatch();\r\n  const [selectedTab, setSelectedTab] = useState('upload');\r\n  const fileUploadData = useSelector(selectFileUploadData);\r\n  const fileUploadDataLoading = useSelector(selectFileUploadLoading);\r\n  const fileUploadDataLoaded = useSelector(selectFileUploadLoaded);\r\n\r\n  const tabs = [\r\n    { value: 'upload', label: utils.string.t('fileUpload.tabs.upload') },\r\n    { value: 'search', label: utils.string.t('fileUpload.tabs.search') },\r\n  ];\r\n\r\n  const fetchGuiData = useCallback(() => {\r\n    if (isEmpty(fileUploadData) && !fileUploadDataLoading) {\r\n      dispatch(getFileUploadGuiData(['DocumentType', 'XBInstance', 'Department']));\r\n    }\r\n  }, [dispatch]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    fetchGuiData();\r\n  }, [fetchGuiData]);\r\n\r\n  return (\r\n    <PolicyDocumentsView\r\n      files={files}\r\n      rejectedFiles={rejectedFiles}\r\n      data={fileUploadData}\r\n      dataLoading={fileUploadDataLoading}\r\n      dataLoaded={fileUploadDataLoaded}\r\n      tabs={tabs}\r\n      selectedTab={selectedTab}\r\n      handleSelectTab={setSelectedTab}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}