{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\TaskDetails\\\\TaskDetails.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useHistory } from 'react-router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport get from 'lodash/get'; //app\n\nimport { TaskDetailsView } from './TaskDetails.view';\nimport * as utils from 'utils';\nimport { SANCTIONS_CHECK_STATUSES } from 'consts';\nimport styles from './TaskDetails.styles';\nimport { CURRENCY_PURCHASED_STATUS } from 'consts';\nimport { closeSanctionsCheck, selectClaimsTasksProcessingSelected, selectCurrencyPurchasedValue } from 'stores';\nimport config from 'config'; //mui\n\nimport { makeStyles } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nTaskDetails.propTypes = {\n  taskObj: PropTypes.object.isRequired\n};\nexport default function TaskDetails(_ref) {\n  _s();\n\n  var taskObj = _ref.taskObj;\n  var currencyPurchased = useSelector(selectCurrencyPurchasedValue);\n\n  var _useState = useState(currencyPurchased),\n      _useState2 = _slicedToArray(_useState, 2),\n      currencyValue = _useState2[0],\n      setCurrencyValue = _useState2[1];\n\n  var claimRefTasks = useSelector(selectClaimsTasksProcessingSelected);\n  var defaultApprovalStatus = get(claimRefTasks, '[0].approvalStatus') || '';\n\n  var _useState3 = useState(defaultApprovalStatus),\n      _useState4 = _slicedToArray(_useState3, 2),\n      approvalStatus = _useState4[0],\n      setApprovalStatus = _useState4[1];\n\n  var history = useHistory();\n  var dispatch = useDispatch();\n  var classes = makeStyles(styles, {\n    name: 'TaskDetails'\n  })();\n  var fields = [{\n    name: 'currencyPurchasedRadio',\n    type: 'radio',\n    value: currencyValue,\n    defaultValue: currencyValue,\n    muiFormGroupProps: {\n      row: true,\n      classes: {\n        root: classes.radioLabel\n      }\n    },\n    options: [{\n      value: CURRENCY_PURCHASED_STATUS.Yes,\n      label: utils.string.t('claims.processing.taskDetailsLabels.yes')\n    }, {\n      value: CURRENCY_PURCHASED_STATUS.No,\n      label: utils.string.t('claims.processing.taskDetailsLabels.no')\n    }, {\n      value: CURRENCY_PURCHASED_STATUS.notRequired,\n      label: utils.string.t('claims.processing.taskDetailsLabels.notRequired')\n    }]\n  }, {\n    name: 'sanctionsCheckState',\n    type: 'radio',\n    value: approvalStatus,\n    defaultValue: approvalStatus,\n    muiFormGroupProps: {\n      row: true,\n      classes: {\n        root: classes.radioLabel\n      }\n    },\n    options: [{\n      value: SANCTIONS_CHECK_STATUSES.approved,\n      label: utils.string.t('status.approved')\n    }, {\n      value: SANCTIONS_CHECK_STATUSES.rejected,\n      label: utils.string.t('status.rejected')\n    }]\n  }];\n  var defaultValues = utils.form.getInitialValues(fields);\n  var validationSchema = utils.form.getValidationSchema(fields);\n\n  var _useForm = useForm(_objectSpread({\n    defaultValues: defaultValues\n  }, validationSchema && {\n    resolver: yupResolver(validationSchema)\n  })),\n      control = _useForm.control,\n      watch = _useForm.watch,\n      setValue = _useForm.setValue;\n\n  useEffect(function () {\n    if (currencyPurchased !== '') {\n      setValue('currencyPurchasedRadio', currencyPurchased);\n      setCurrencyValue(currencyPurchased);\n    }\n  }, [currencyPurchased]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var currencyPurchasedValue = watch('currencyPurchasedRadio');\n  var sanctionsCheckState = watch('sanctionsCheckState');\n\n  var handleClose = function handleClose() {\n    var params = {\n      approvalStatus: approvalStatus,\n      taskId: taskObj === null || taskObj === void 0 ? void 0 : taskObj.taskId\n    };\n    dispatch(closeSanctionsCheck(params, function () {\n      return history.push(config.routes.claimsProcessing.root);\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(TaskDetailsView, {\n    taskObj: taskObj,\n    fields: fields,\n    currencyPurchasedValue: currencyPurchasedValue,\n    sanctionsCheckState: sanctionsCheckState,\n    control: control,\n    currencyValue: currencyValue,\n    handlers: {\n      handleClose: handleClose,\n      setApprovalStatus: setApprovalStatus,\n      setCurrencyValue: setCurrencyValue\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TaskDetails, \"gfVpVEpkDKRFfvY7XmOQ1XFZfxQ=\", false, function () {\n  return [useSelector, useSelector, useHistory, useDispatch, useForm];\n});\n\n_c = TaskDetails;\nTaskDetails.displayName = \"TaskDetails\";\nTaskDetails.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"TaskDetails\",\n  \"props\": {\n    \"taskObj\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\modules\\\\TaskDetails\\\\TaskDetails.js\"] = {\n    name: \"TaskDetails\",\n    docgenInfo: TaskDetails.__docgenInfo,\n    path: \"src\\\\modules\\\\TaskDetails\\\\TaskDetails.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskDetails\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/TaskDetails/TaskDetails.js"],"names":["React","useState","useEffect","PropTypes","useForm","yupResolver","useHistory","useDispatch","useSelector","get","TaskDetailsView","utils","SANCTIONS_CHECK_STATUSES","styles","CURRENCY_PURCHASED_STATUS","closeSanctionsCheck","selectClaimsTasksProcessingSelected","selectCurrencyPurchasedValue","config","makeStyles","TaskDetails","propTypes","taskObj","object","isRequired","currencyPurchased","currencyValue","setCurrencyValue","claimRefTasks","defaultApprovalStatus","approvalStatus","setApprovalStatus","history","dispatch","classes","name","fields","type","value","defaultValue","muiFormGroupProps","row","root","radioLabel","options","Yes","label","string","t","No","notRequired","approved","rejected","defaultValues","form","getInitialValues","validationSchema","getValidationSchema","resolver","control","watch","setValue","currencyPurchasedValue","sanctionsCheckState","handleClose","params","taskId","push","routes","claimsProcessing"],"mappings":"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","sourcesContent":["import { React, useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useHistory } from 'react-router';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport get from 'lodash/get';\r\n\r\n//app\r\nimport { TaskDetailsView } from './TaskDetails.view';\r\nimport * as utils from 'utils';\r\nimport { SANCTIONS_CHECK_STATUSES } from 'consts';\r\nimport styles from './TaskDetails.styles';\r\nimport { CURRENCY_PURCHASED_STATUS } from 'consts';\r\nimport { closeSanctionsCheck, selectClaimsTasksProcessingSelected, selectCurrencyPurchasedValue } from 'stores';\r\nimport config from 'config';\r\n\r\n//mui\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nTaskDetails.propTypes = {\r\n  taskObj: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default function TaskDetails({ taskObj }) {\r\n  const currencyPurchased = useSelector(selectCurrencyPurchasedValue);\r\n  const [currencyValue, setCurrencyValue] = useState(currencyPurchased);\r\n  const claimRefTasks = useSelector(selectClaimsTasksProcessingSelected);\r\n  const defaultApprovalStatus = get(claimRefTasks, '[0].approvalStatus') || '';\r\n  const [approvalStatus, setApprovalStatus] = useState(defaultApprovalStatus);\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n\r\n  const classes = makeStyles(styles, { name: 'TaskDetails' })();\r\n\r\n  const fields = [\r\n    {\r\n      name: 'currencyPurchasedRadio',\r\n      type: 'radio',\r\n      value: currencyValue,\r\n      defaultValue: currencyValue,\r\n      muiFormGroupProps: {\r\n        row: true,\r\n        classes: {\r\n          root: classes.radioLabel,\r\n        },\r\n      },\r\n      options: [\r\n        { value: CURRENCY_PURCHASED_STATUS.Yes, label: utils.string.t('claims.processing.taskDetailsLabels.yes') },\r\n        { value: CURRENCY_PURCHASED_STATUS.No, label: utils.string.t('claims.processing.taskDetailsLabels.no') },\r\n        {\r\n          value: CURRENCY_PURCHASED_STATUS.notRequired,\r\n          label: utils.string.t('claims.processing.taskDetailsLabels.notRequired'),\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      name: 'sanctionsCheckState',\r\n      type: 'radio',\r\n      value: approvalStatus,\r\n      defaultValue: approvalStatus,\r\n      muiFormGroupProps: {\r\n        row: true,\r\n        classes: {\r\n          root: classes.radioLabel,\r\n        },\r\n      },\r\n      options: [\r\n        { value: SANCTIONS_CHECK_STATUSES.approved, label: utils.string.t('status.approved') },\r\n        { value: SANCTIONS_CHECK_STATUSES.rejected, label: utils.string.t('status.rejected') },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  const defaultValues = utils.form.getInitialValues(fields);\r\n  const validationSchema = utils.form.getValidationSchema(fields);\r\n\r\n  const { control, watch, setValue } = useForm({\r\n    defaultValues,\r\n    ...(validationSchema && { resolver: yupResolver(validationSchema) }),\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (currencyPurchased !== '') {\r\n      setValue('currencyPurchasedRadio', currencyPurchased);\r\n      setCurrencyValue(currencyPurchased);\r\n    }\r\n  }, [currencyPurchased]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const currencyPurchasedValue = watch('currencyPurchasedRadio');\r\n  const sanctionsCheckState = watch('sanctionsCheckState');\r\n\r\n  const handleClose = () => {\r\n    const params = { approvalStatus, taskId: taskObj?.taskId };\r\n    dispatch(closeSanctionsCheck(params, () => history.push(config.routes.claimsProcessing.root)));\r\n  };\r\n\r\n  return (\r\n    <TaskDetailsView\r\n      taskObj={taskObj}\r\n      fields={fields}\r\n      currencyPurchasedValue={currencyPurchasedValue}\r\n      sanctionsCheckState={sanctionsCheckState}\r\n      control={control}\r\n      currencyValue={currencyValue}\r\n      handlers={{ handleClose, setApprovalStatus, setCurrencyValue }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}