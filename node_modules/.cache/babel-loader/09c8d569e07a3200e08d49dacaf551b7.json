{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { authLogout, enqueueNotification, hideModal, getRiskDetails, getRiskQuotes } from 'stores';\nimport * as utils from 'utils';\nimport isEmpty from 'lodash/isEmpty';\nexport var patchRisk = function patchRisk(values, productType, definitions, riskId) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/risk.actions.patchRisk',\n      message: 'Data missing for PATCH request'\n    };\n    dispatch(patchRiskRequest(values));\n\n    if (!riskId || !values || isEmpty(values) || !productType || !utils.generic.isValidArray(definitions)) {\n      dispatch(patchRiskFailure(defaultError));\n      dispatch(enqueueNotification('notification.generic.request', 'error'));\n      dispatch(hideModal());\n      return;\n    }\n\n    var body = _objectSpread(_objectSpread({}, utils.risk.parsedValues(utils.risk.filterConditionalValues(values, definitions), definitions)), {}, {\n      riskType: productType\n    });\n\n    var data = _objectSpread({\n      id: riskId\n    }, body);\n\n    return utils.api.patch({\n      token: auth.accessToken,\n      endpoint: endpoint.auth,\n      path: \"api/v1/risks/\".concat(riskId),\n      data: data\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleResponseJsonObject(json);\n    }).then(function (data) {\n      dispatch(patchRiskSuccess(data));\n      dispatch(enqueueNotification('notification.reQuote.success', 'success'));\n      return data;\n    }).then(function (data) {\n      dispatch(getRiskDetails(data === null || data === void 0 ? void 0 : data.id, true));\n      dispatch(getRiskQuotes(data === null || data === void 0 ? void 0 : data.id));\n      return data;\n    }).catch(function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API patch error (risk.patchRisk)'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(patchRiskFailure(err));\n      dispatch(enqueueNotification(utils.api.getErrorMessage(err), 'error'));\n      return err;\n    }).finally(function () {\n      dispatch(hideModal());\n      return;\n    });\n  };\n};\nexport var patchRiskRequest = function patchRiskRequest(formData) {\n  return {\n    type: 'RISK_PATCH_REQUEST',\n    payload: formData\n  };\n};\nexport var patchRiskSuccess = function patchRiskSuccess(responseData) {\n  return {\n    type: 'RISK_PATCH_SUCCESS',\n    payload: responseData\n  };\n};\nexport var patchRiskFailure = function patchRiskFailure(error) {\n  return {\n    type: 'RISK_PATCH_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/risk/risk.actions.patchRisk.js"],"names":["authLogout","enqueueNotification","hideModal","getRiskDetails","getRiskQuotes","utils","isEmpty","patchRisk","values","productType","definitions","riskId","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","message","patchRiskRequest","generic","isValidArray","patchRiskFailure","body","risk","parsedValues","filterConditionalValues","riskType","data","id","api","patch","token","accessToken","path","then","response","handleResponse","json","handleResponseJsonObject","patchRiskSuccess","catch","err","errorParams","handleError","handleUnauthorized","getErrorMessage","finally","formData","type","payload","responseData","error"],"mappings":"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","sourcesContent":["import { authLogout, enqueueNotification, hideModal, getRiskDetails, getRiskQuotes } from 'stores';\r\nimport * as utils from 'utils';\r\nimport isEmpty from 'lodash/isEmpty';\r\n\r\nexport const patchRisk = (values, productType, definitions, riskId) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/risk.actions.patchRisk',\r\n    message: 'Data missing for PATCH request',\r\n  };\r\n\r\n  dispatch(patchRiskRequest(values));\r\n\r\n  if (!riskId || !values || isEmpty(values) || !productType || !utils.generic.isValidArray(definitions)) {\r\n    dispatch(patchRiskFailure(defaultError));\r\n    dispatch(enqueueNotification('notification.generic.request', 'error'));\r\n    dispatch(hideModal());\r\n    return;\r\n  }\r\n\r\n  const body = {\r\n    ...utils.risk.parsedValues(utils.risk.filterConditionalValues(values, definitions), definitions),\r\n    riskType: productType,\r\n  };\r\n\r\n  const data = {\r\n    id: riskId,\r\n    ...body,\r\n  };\r\n\r\n  return utils.api\r\n    .patch({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.auth,\r\n      path: `api/v1/risks/${riskId}`,\r\n      data,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleResponseJsonObject(json))\r\n    .then((data) => {\r\n      dispatch(patchRiskSuccess(data));\r\n      dispatch(enqueueNotification('notification.reQuote.success', 'success'));\r\n      return data;\r\n    })\r\n    .then((data) => {\r\n      dispatch(getRiskDetails(data?.id, true));\r\n      dispatch(getRiskQuotes(data?.id));\r\n\r\n      return data;\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        ...defaultError,\r\n        message: 'API patch error (risk.patchRisk)',\r\n      };\r\n\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(patchRiskFailure(err));\r\n      dispatch(enqueueNotification(utils.api.getErrorMessage(err), 'error'));\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(hideModal());\r\n      return;\r\n    });\r\n};\r\n\r\nexport const patchRiskRequest = (formData) => {\r\n  return {\r\n    type: 'RISK_PATCH_REQUEST',\r\n    payload: formData,\r\n  };\r\n};\r\n\r\nexport const patchRiskSuccess = (responseData) => {\r\n  return {\r\n    type: 'RISK_PATCH_SUCCESS',\r\n    payload: responseData,\r\n  };\r\n};\r\n\r\nexport const patchRiskFailure = (error) => {\r\n  return {\r\n    type: 'RISK_PATCH_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}