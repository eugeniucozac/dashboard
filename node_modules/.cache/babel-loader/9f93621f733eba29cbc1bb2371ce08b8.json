{"ast":null,"code":"import _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\LinkClaimPolicy\\\\LinkClaimPolicy.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as Yup from 'yup';\nimport moment from 'moment';\nimport get from 'lodash/get'; // app\n\nimport styles from './LinkClaimPolicy.styles';\nimport { LinkClaimPolicyView } from './LinkClaimPolicy.view';\nimport { FormGrid } from 'components';\nimport { getInterest, getClaimDetails, getPolicyInsures, getPolicyClients, getPolicySections, selectClaimsPolicySections, selectClaimsInterestItems, selectClaimPolicyInsures, selectSectionEnabledUG, selectClaimsUnderwritingGroups, selectClaimPolicyClients, selectAllClaimDetails, postClaimDetailsInformation, postEditClaimDetailsInformation, selectLinkPoliciesData, getLinkPoliciesData, selectRefDataNewCountriesList, selectClaimsInterest, selectIsClaimPolicyClientsLoading, selectPolicySectionIsLoading, selectisClaimPolicyInsuresLoading } from 'stores';\nimport * as utils from 'utils';\nimport { CLAIM_SECTION_ENABLED_UG, CLAIM_POLICY_SECTION_DEFAULT } from 'consts'; //mui\n\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport { makeStyles } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SelectedClaimPolicy(_ref) {\n  _s();\n\n  var _interest,\n      _origCurrencies,\n      _settlementCurriencie,\n      _useSelector,\n      _countriesList,\n      _linkPoliciesData$dat4,\n      _isFormsEdited$index2,\n      _isFormsEdited$index3,\n      _isFormsEdited$index4,\n      _isFormsEdited$index5,\n      _linkPoliciesData$dat5,\n      _settlementCurriencie2,\n      _settlementCurriencie3,\n      _isFormsEdited$index6,\n      _linkPoliciesData$dat6,\n      _interest2,\n      _interest3,\n      _linkPoliciesData$dat7,\n      _isFormsEdited$index7,\n      _linkPoliciesData$dat8,\n      _linkPoliciesData$dat9,\n      _linkPoliciesData$dat10,\n      _this = this;\n\n  var policyData = _ref.policyData,\n      selectedPolicyRender = _ref.selectedPolicyRender,\n      setSelectedPolicyRender = _ref.setSelectedPolicyRender,\n      validation = _ref.validation,\n      setValidation = _ref.setValidation,\n      setActiveStep = _ref.setActiveStep,\n      index = _ref.index,\n      isFormsEdited = _ref.isFormsEdited,\n      setFormEditedStatus = _ref.setFormEditedStatus,\n      saveStatus = _ref.saveStatus,\n      sectionEnabledValidationFlag = _ref.sectionEnabledValidationFlag,\n      claimInfo = _ref.claimInfo,\n      handleFormStatus = _ref.handleFormStatus,\n      selectNextPolicy = _ref.selectNextPolicy,\n      setSelectNextPolicy = _ref.setSelectNextPolicy;\n  var classes = makeStyles(styles, {\n    name: 'LinkClaimPolicy'\n  })();\n  var dispatch = useDispatch();\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      uwResetKey = _useState2[0],\n      setUWResetKey = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      stepper = _useState4[0],\n      setStepper = _useState4[1];\n\n  var interest = useSelector(selectClaimsInterestItems);\n  interest = utils.generic.isValidArray(interest) ? (_interest = interest) === null || _interest === void 0 ? void 0 : _interest.map(function (intrst) {\n    return _objectSpread(_objectSpread({}, intrst), {}, {\n      description: \"\".concat(intrst.code, \" - \").concat(intrst.description)\n    });\n  }) : null;\n  var origCurrencies = useSelector(function (state) {\n    return get(state, 'referenceData.currencyCodes');\n  });\n  var allSettlementCurriencies = useSelector(function (state) {\n    return get(state, 'referenceData.settlementCurrency');\n  });\n  var settlementCurriencies = utils.referenceData.settlementCurrencyTypes.getAllById(allSettlementCurriencies, policyData === null || policyData === void 0 ? void 0 : policyData.xbInstanceID);\n  origCurrencies = utils.generic.isValidArray(origCurrencies) ? (_origCurrencies = origCurrencies) === null || _origCurrencies === void 0 ? void 0 : _origCurrencies.map(function (currency) {\n    return _objectSpread(_objectSpread({}, currency), {}, {\n      currencyName: \"\".concat(currency.currencyCd, \" - \").concat(currency.currencyName)\n    });\n  }) : null;\n  settlementCurriencies = utils.generic.isValidArray(settlementCurriencies) ? (_settlementCurriencie = settlementCurriencies) === null || _settlementCurriencie === void 0 ? void 0 : _settlementCurriencie.map(function (currency) {\n    return _objectSpread(_objectSpread({}, currency), {}, {\n      currencyName: \"\".concat(currency.currencyCd, \" - \").concat(currency.currencyName)\n    });\n  }) : null;\n  var allClaimDetails = useSelector(selectAllClaimDetails);\n  var underWritingGroups = useSelector(selectClaimsUnderwritingGroups);\n  var policySections = useSelector(selectClaimsPolicySections);\n  var claimPolicyInsures = useSelector(selectClaimPolicyInsures);\n  var isSectionEnabled = useSelector(selectSectionEnabledUG);\n  var claimPolicyClients = useSelector(selectClaimPolicyClients);\n  var isInterestLoading = (_useSelector = useSelector(selectClaimsInterest)) === null || _useSelector === void 0 ? void 0 : _useSelector.isLoading;\n  var isPoliciesClientsLoading = useSelector(selectIsClaimPolicyClientsLoading);\n  var isPolicySectionLoading = useSelector(selectPolicySectionIsLoading);\n  var isInsuredLoading = useSelector(selectisClaimPolicyInsuresLoading);\n  var countriesList = useSelector(selectRefDataNewCountriesList);\n  countriesList = utils.generic.isValidArray(countriesList) ? (_countriesList = countriesList) === null || _countriesList === void 0 ? void 0 : _countriesList.map(function (country) {\n    return _objectSpread(_objectSpread({}, country), {}, {\n      countryName: \"\".concat(country.countryCode, \" - \").concat(country.countryName)\n    });\n  }) : null;\n  var linkPoliciesData = useSelector(selectLinkPoliciesData);\n  var isBordereauFlag = (allClaimDetails === null || allClaimDetails === void 0 ? void 0 : allClaimDetails.isBordereau) === 1;\n  useEffect(function () {\n    if (selectedPolicyRender !== '') {\n      dispatch(getInterest({\n        viewLoader: false\n      }));\n      dispatch(getPolicyInsures({\n        viewLoader: false\n      }));\n      isSectionEnabled && dispatch(getPolicySections({\n        viewLoader: false\n      }));\n      dispatch(getPolicyClients({\n        viewLoader: false\n      })).then(function (response) {\n        if (utils.generic.isValidArray(response)) {\n          dispatch(getLinkPoliciesData({\n            loader: true,\n            fieldLoader: false\n          }));\n          setUWResetKey(new Date().getTime());\n        }\n      });\n      dispatch(getClaimDetails());\n    }\n  }, [selectedPolicyRender]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var sectionAllOption = (policyData === null || policyData === void 0 ? void 0 : policyData.policyType) === CLAIM_SECTION_ENABLED_UG[0] ? [] : [{\n    id: CLAIM_POLICY_SECTION_DEFAULT,\n    name: utils.string.t('app.all'),\n    description: null\n  }];\n  var policyInfo = [].concat(sectionAllOption, _toConsumableArray(utils.generic.isValidArray(policySections, true) ? policySections : []));\n\n  var postSaveHandler = function postSaveHandler(postData) {\n    if (!(claimInfo === null || claimInfo === void 0 ? void 0 : claimInfo.claimID)) {\n      dispatch(postClaimDetailsInformation(postData)).then(function (response) {\n        if (response) {\n          dispatch(getLinkPoliciesData({\n            data: postData\n          }));\n          var formState = isFormsEdited === null || isFormsEdited === void 0 ? void 0 : isFormsEdited.map(function (form) {\n            return _objectSpread({}, form);\n          });\n          formState[index]['formEditedStatus'] = false;\n          formState[index]['isSubmitted'] = false;\n          setFormEditedStatus(formState);\n          setValidation(false);\n        }\n      });\n    } else {\n      dispatch(postEditClaimDetailsInformation(postData)).then(function (response) {\n        if (response) {\n          dispatch(getLinkPoliciesData({\n            data: postData\n          }));\n          var formState = isFormsEdited === null || isFormsEdited === void 0 ? void 0 : isFormsEdited.map(function (form) {\n            return _objectSpread({}, form);\n          });\n          formState[index]['formEditedStatus'] = false;\n          formState[index]['isSubmitted'] = false;\n          setFormEditedStatus(formState);\n          setValidation(false);\n        }\n      });\n    }\n  };\n\n  var postEditSaveHandler = function postEditSaveHandler(postData) {\n    utils.dms.resetDmsFiles(dispatch);\n\n    if (claimInfo === null || claimInfo === void 0 ? void 0 : claimInfo.claimID) {\n      dispatch(postEditClaimDetailsInformation(postData)).then(function (response) {\n        if (response) {\n          dispatch(getLinkPoliciesData({\n            data: postData\n          }));\n          var formState = isFormsEdited === null || isFormsEdited === void 0 ? void 0 : isFormsEdited.map(function (form) {\n            return _objectSpread({}, form);\n          });\n          formState[index]['formEditedStatus'] = false;\n          formState[index]['isSubmitted'] = true;\n          setFormEditedStatus(formState);\n          setActiveStep(index + 1);\n          setValidation(true);\n          setSelectedPolicyRender('');\n        }\n      });\n    } else {\n      dispatch(postClaimDetailsInformation(postData)).then(function (response) {\n        if (response) {\n          dispatch(getLinkPoliciesData({\n            data: postData\n          }));\n          var formState = isFormsEdited === null || isFormsEdited === void 0 ? void 0 : isFormsEdited.map(function (form) {\n            return _objectSpread({}, form);\n          });\n          formState[index]['formEditedStatus'] = false;\n          formState[index]['isSubmitted'] = true;\n          setFormEditedStatus(formState);\n          setActiveStep(index + 1);\n          setValidation(true);\n          setSelectedPolicyRender('');\n        }\n      });\n    }\n  };\n\n  var postSaveNextHanlder = function postSaveNextHanlder(postData) {\n    if (claimInfo === null || claimInfo === void 0 ? void 0 : claimInfo.claimID) {\n      var policyUpdated = true;\n      dispatch(postEditClaimDetailsInformation(postData, policyUpdated)).then(function (response) {\n        if (response) {\n          var _isFormsEdited$index;\n\n          dispatch(getLinkPoliciesData({\n            data: postData\n          }));\n          var formState = isFormsEdited === null || isFormsEdited === void 0 ? void 0 : isFormsEdited.map(function (form) {\n            return _objectSpread({}, form);\n          });\n\n          if ((_isFormsEdited$index = isFormsEdited[index]) === null || _isFormsEdited$index === void 0 ? void 0 : _isFormsEdited$index.formEditedStatus) {\n            formState[index]['formEditedStatus'] = false;\n            formState[index]['isSubmitted'] = false;\n            setFormEditedStatus(formState);\n            setActiveStep(index + 1);\n            setValidation(true);\n            setSelectNextPolicy(false);\n          } else {\n            formState[index]['formEditedStatus'] = false;\n            formState[index]['isSubmitted'] = true;\n            setFormEditedStatus(formState);\n            setValidation(true);\n            setSelectedPolicyRender('');\n            setSelectNextPolicy(false);\n          }\n        }\n      });\n    }\n  };\n\n  var clientValue = function clientValue(claimPolicyClients) {\n    var _linkPoliciesData$dat;\n\n    return (linkPoliciesData === null || linkPoliciesData === void 0 ? void 0 : (_linkPoliciesData$dat = linkPoliciesData.data) === null || _linkPoliciesData$dat === void 0 ? void 0 : _linkPoliciesData$dat.client) && !(linkPoliciesData === null || linkPoliciesData === void 0 ? void 0 : linkPoliciesData.fieldLoader) ? claimPolicyClients === null || claimPolicyClients === void 0 ? void 0 : claimPolicyClients.find(function (clmPolicyclnt) {\n      return clmPolicyclnt.id === linkPoliciesData.data.client.id;\n    }) : (claimInfo === null || claimInfo === void 0 ? void 0 : claimInfo.clientID) ? claimPolicyClients === null || claimPolicyClients === void 0 ? void 0 : claimPolicyClients.find(function (clmPolicyclnt) {\n      var _claimInfo$clientID;\n\n      return clmPolicyclnt.id === (claimInfo === null || claimInfo === void 0 ? void 0 : (_claimInfo$clientID = claimInfo.clientID) === null || _claimInfo$clientID === void 0 ? void 0 : _claimInfo$clientID.toString());\n    }) : (claimPolicyClients === null || claimPolicyClients === void 0 ? void 0 : claimPolicyClients.length) === 1 ? claimPolicyClients[0] : null;\n  };\n\n  var countryCodeValue = function countryCodeValue(countriesList) {\n    var _linkPoliciesData$dat2;\n\n    return (linkPoliciesData === null || linkPoliciesData === void 0 ? void 0 : (_linkPoliciesData$dat2 = linkPoliciesData.data) === null || _linkPoliciesData$dat2 === void 0 ? void 0 : _linkPoliciesData$dat2.countryCode) && !(linkPoliciesData === null || linkPoliciesData === void 0 ? void 0 : linkPoliciesData.fieldLoader) ? countriesList === null || countriesList === void 0 ? void 0 : countriesList.find(function (country) {\n      return country.countryCode === linkPoliciesData.data.countryCode.countryCode;\n    }) : (claimInfo === null || claimInfo === void 0 ? void 0 : claimInfo.settlementCountry) ? countriesList === null || countriesList === void 0 ? void 0 : countriesList.find(function (country) {\n      return country.countryCode === claimInfo.settlementCountry;\n    }) : null;\n  };\n\n  var originalCurrencyValue = function originalCurrencyValue(origCurrencies) {\n    var _linkPoliciesData$dat3;\n\n    return (linkPoliciesData === null || linkPoliciesData === void 0 ? void 0 : (_linkPoliciesData$dat3 = linkPoliciesData.data) === null || _linkPoliciesData$dat3 === void 0 ? void 0 : _linkPoliciesData$dat3.originalCurrencyCode) && !(linkPoliciesData === null || linkPoliciesData === void 0 ? void 0 : linkPoliciesData.fieldLoader) ? origCurrencies === null || origCurrencies === void 0 ? void 0 : origCurrencies.find(function (currency) {\n      return currency.currencyCd === linkPoliciesData.data.originalCurrencyCode.currencyCd;\n    }) : (claimInfo === null || claimInfo === void 0 ? void 0 : claimInfo.originalCurrency) ? origCurrencies === null || origCurrencies === void 0 ? void 0 : origCurrencies.find(function (currency) {\n      return (currency === null || currency === void 0 ? void 0 : currency.currencyCd) === (claimInfo === null || claimInfo === void 0 ? void 0 : claimInfo.originalCurrency);\n    }) : null;\n  };\n\n  var fields = [{\n    name: 'insured',\n    type: 'autocompletemui',\n    options: claimPolicyInsures || [],\n    optionKey: 'id',\n    optionLabel: 'name',\n    label: utils.string.t('claims.claimInformation.insured'),\n    value: (linkPoliciesData === null || linkPoliciesData === void 0 ? void 0 : (_linkPoliciesData$dat4 = linkPoliciesData.data) === null || _linkPoliciesData$dat4 === void 0 ? void 0 : _linkPoliciesData$dat4.insured) && !(linkPoliciesData === null || linkPoliciesData === void 0 ? void 0 : linkPoliciesData.fieldLoader) ? claimPolicyInsures === null || claimPolicyInsures === void 0 ? void 0 : claimPolicyInsures.find(function (clmPolicy) {\n      return clmPolicy.id === linkPoliciesData.data.insured.id;\n    }) : (claimInfo === null || claimInfo === void 0 ? void 0 : claimInfo.insuredID) ? claimPolicyInsures === null || claimPolicyInsures === void 0 ? void 0 : claimPolicyInsures.find(function (clmPolicy) {\n      var _claimInfo$insuredID;\n\n      return clmPolicy.id === (claimInfo === null || claimInfo === void 0 ? void 0 : (_claimInfo$insuredID = claimInfo.insuredID) === null || _claimInfo$insuredID === void 0 ? void 0 : _claimInfo$insuredID.toString());\n    }) : (claimPolicyInsures === null || claimPolicyInsures === void 0 ? void 0 : claimPolicyInsures.length) === 1 ? claimPolicyInsures[0] : null,\n    validation: (isFormsEdited === null || isFormsEdited === void 0 ? void 0 : (_isFormsEdited$index2 = isFormsEdited[index]) === null || _isFormsEdited$index2 === void 0 ? void 0 : _isFormsEdited$index2.formEditedStatus) ? Yup.object().nullable().required(utils.string.t('validation.required')).when('$validation', function (validation, schema) {\n      return validation ? schema : Yup.object().nullable();\n    }) : false\n  }, {\n    name: 'client',\n    type: 'autocompletemui',\n    options: claimPolicyClients || [],\n    optionKey: 'id',\n    optionLabel: 'name',\n    label: utils.string.t('claims.claimInformation.client'),\n    value: clientValue(claimPolicyClients),\n    validation: (isFormsEdited === null || isFormsEdited === void 0 ? void 0 : (_isFormsEdited$index3 = isFormsEdited[index]) === null || _isFormsEdited$index3 === void 0 ? void 0 : _isFormsEdited$index3.formEditedStatus) ? Yup.object().nullable().required(utils.string.t('validation.required')).when('$validation', function (validation, schema) {\n      return validation ? schema : Yup.object().nullable();\n    }) : false\n  }, {\n    name: 'countryCode',\n    type: 'autocompletemui',\n    options: countriesList || [],\n    optionKey: 'countryCode',\n    optionLabel: 'countryName',\n    label: utils.string.t('claims.claimInformation.country'),\n    value: countryCodeValue(countriesList),\n    validation: (isFormsEdited === null || isFormsEdited === void 0 ? void 0 : (_isFormsEdited$index4 = isFormsEdited[index]) === null || _isFormsEdited$index4 === void 0 ? void 0 : _isFormsEdited$index4.formEditedStatus) ? Yup.object().nullable().required(utils.string.t('validation.required')) : false\n  }, {\n    name: 'originalCurrencyCode',\n    type: 'autocompletemui',\n    options: origCurrencies || [],\n    optionKey: 'currencyCd',\n    optionLabel: 'currencyName',\n    label: utils.string.t('claims.claimInformation.originalCurrency'),\n    value: originalCurrencyValue(origCurrencies),\n    validation: (isFormsEdited === null || isFormsEdited === void 0 ? void 0 : (_isFormsEdited$index5 = isFormsEdited[index]) === null || _isFormsEdited$index5 === void 0 ? void 0 : _isFormsEdited$index5.formEditedStatus) ? Yup.object().nullable().required(utils.string.t('validation.required')) : false\n  }, {\n    name: 'settlementCurrencyCode',\n    type: 'autocompletemui',\n    options: settlementCurriencies || [],\n    optionKey: 'currencyCd',\n    optionLabel: 'currencyName',\n    label: utils.string.t('claims.claimInformation.settlementCurrency'),\n    value: (linkPoliciesData === null || linkPoliciesData === void 0 ? void 0 : (_linkPoliciesData$dat5 = linkPoliciesData.data) === null || _linkPoliciesData$dat5 === void 0 ? void 0 : _linkPoliciesData$dat5.originalCurrencyCode) && !(linkPoliciesData === null || linkPoliciesData === void 0 ? void 0 : linkPoliciesData.fieldLoader) ? (_settlementCurriencie2 = settlementCurriencies) === null || _settlementCurriencie2 === void 0 ? void 0 : _settlementCurriencie2.find(function (currency) {\n      return currency.currencyCd === linkPoliciesData.data.settlementCurrencyCode.currencyCd;\n    }) : (claimInfo === null || claimInfo === void 0 ? void 0 : claimInfo.settlementCurrencyCode) ? (_settlementCurriencie3 = settlementCurriencies) === null || _settlementCurriencie3 === void 0 ? void 0 : _settlementCurriencie3.find(function (currency) {\n      return currency.currencyCd === (claimInfo === null || claimInfo === void 0 ? void 0 : claimInfo.settlementCurrencyCode);\n    }) : null,\n    validation: (isFormsEdited === null || isFormsEdited === void 0 ? void 0 : (_isFormsEdited$index6 = isFormsEdited[index]) === null || _isFormsEdited$index6 === void 0 ? void 0 : _isFormsEdited$index6.formEditedStatus) ? Yup.object().nullable().required(utils.string.t('validation.required')) : false\n  }, {\n    name: 'interest',\n    type: 'autocompletemui',\n    options: interest,\n    label: utils.string.t('claims.claimInformation.interest'),\n    value: (linkPoliciesData === null || linkPoliciesData === void 0 ? void 0 : (_linkPoliciesData$dat6 = linkPoliciesData.data) === null || _linkPoliciesData$dat6 === void 0 ? void 0 : _linkPoliciesData$dat6.interest) && !(linkPoliciesData === null || linkPoliciesData === void 0 ? void 0 : linkPoliciesData.fieldLoader) ? (_interest2 = interest) === null || _interest2 === void 0 ? void 0 : _interest2.find(function (intrst) {\n      return intrst.xbPolicyID === linkPoliciesData.data.interest.xbPolicyID;\n    }) : ((_interest3 = interest) === null || _interest3 === void 0 ? void 0 : _interest3.length) === 1 ? interest[0] : null,\n    optionKey: 'xbPolicyID',\n    optionLabel: 'description'\n  }, {\n    name: 'movementType',\n    type: 'toggle',\n    label: '',\n    value: 'Advice',\n    options: [{\n      label: utils.string.t('claims.typeOfSettlement.advice'),\n      value: 'Advice'\n    }, {\n      label: utils.string.t('claims.typeOfSettlement.settlement'),\n      value: 'Settlement'\n    }]\n  }, {\n    name: 'order',\n    type: 'radio',\n    defaultValue: '100',\n    muiFormGroupProps: {\n      row: true,\n      classes: {\n        root: classes.radioLabel\n      }\n    },\n    options: [{\n      label: utils.string.t('claims.typeOfSettlement.oneHundredPercent'),\n      value: '100'\n    }, {\n      label: utils.string.t('claims.typeOfSettlement.ourShare'),\n      value: '0'\n    }]\n  }, {\n    name: 'orderPercentage',\n    type: 'number',\n    defaultValue: underWritingGroups.percentageOfSelected || '0',\n    value: underWritingGroups.percentageOfSelected || '0',\n    muiComponentProps: {\n      disabled: true\n    },\n    validation: Yup.number().min(0, utils.string.t('claims.typeOfSettlement.errorMin')).max(100, utils.string.t('claims.typeOfSettlement.error'))\n  }].concat(_toConsumableArray(isBordereauFlag ? [{\n    name: 'certificateNumber',\n    type: 'text',\n    value: (allClaimDetails === null || allClaimDetails === void 0 ? void 0 : allClaimDetails.certificateNumber) || (linkPoliciesData === null || linkPoliciesData === void 0 ? void 0 : (_linkPoliciesData$dat7 = linkPoliciesData.data) === null || _linkPoliciesData$dat7 === void 0 ? void 0 : _linkPoliciesData$dat7.certificateNumber) || '',\n    muiComponentProps: {\n      classes: {\n        root: classes.formInput\n      }\n    },\n    validation: (isFormsEdited === null || isFormsEdited === void 0 ? void 0 : (_isFormsEdited$index7 = isFormsEdited[index]) === null || _isFormsEdited$index7 === void 0 ? void 0 : _isFormsEdited$index7.formEditedStatus) ? Yup.string().nullable().required(utils.string.t('validation.required')).max(17, utils.string.t('claims.claimInformation.validation.maxCerficateNumber')).when('$validation', function (validation, schema) {\n      return validation ? schema : Yup.string();\n    }) : false\n  }, {\n    type: 'datepicker',\n    name: 'certificateInceptionDate',\n    value: (policyData === null || policyData === void 0 ? void 0 : policyData.inceptionDate) || (linkPoliciesData === null || linkPoliciesData === void 0 ? void 0 : (_linkPoliciesData$dat8 = linkPoliciesData.data) === null || _linkPoliciesData$dat8 === void 0 ? void 0 : _linkPoliciesData$dat8.certificateInceptionDate) || null,\n    muiComponentProps: {\n      fullWidth: true\n    },\n    validation: Yup.date().nullable().test('from', utils.string.t('claims.claimInformation.validation.greaterThenExpDate'), function (value) {\n      return value && this.options.parent.certificateExpiryDate ? moment(value).isSameOrBefore(this.options.parent.certificateExpiryDate) : true;\n    }).when('$validation', function (validation, schema) {\n      return validation ? schema : Yup.date().nullable();\n    }),\n    outputFormat: 'iso'\n  }, {\n    type: 'datepicker',\n    name: 'certificateExpiryDate',\n    value: (policyData === null || policyData === void 0 ? void 0 : policyData.expiryDate) || (linkPoliciesData === null || linkPoliciesData === void 0 ? void 0 : (_linkPoliciesData$dat9 = linkPoliciesData.data) === null || _linkPoliciesData$dat9 === void 0 ? void 0 : _linkPoliciesData$dat9.certificateExpiryDate) || null,\n    muiComponentProps: {\n      fullWidth: true\n    },\n    validation: Yup.date().nullable().test('from', utils.string.t('claims.claimInformation.validation.lesserThenIncDate'), function (value) {\n      return value && this.options.parent.certificateInceptionDate ? moment(value).isSameOrAfter(this.options.parent.certificateInceptionDate) : true;\n    }).when('$validation', function (validation, schema) {\n      return validation ? schema : Yup.date().nullable();\n    }),\n    outputFormat: 'iso'\n  }] : []), _toConsumableArray(isSectionEnabled ? [{\n    name: 'ugSections',\n    type: 'autocompletemui',\n    value: (linkPoliciesData === null || linkPoliciesData === void 0 ? void 0 : (_linkPoliciesData$dat10 = linkPoliciesData.data) === null || _linkPoliciesData$dat10 === void 0 ? void 0 : _linkPoliciesData$dat10.ugSections) || null,\n    options: policyInfo,\n    optionKey: 'id',\n    optionLabel: 'name',\n    validation: sectionEnabledValidationFlag ? Yup.object().nullable().required(utils.string.t('validation.required')).when('$validation', function (validation, schema) {\n      return validation ? schema : Yup.object().nullable();\n    }) : false\n  }] : []));\n\n  if (isPoliciesClientsLoading || isInterestLoading || isPolicySectionLoading || isInsuredLoading) {\n    return /*#__PURE__*/_jsxDEV(FormGrid, {\n      container: true,\n      spacing: 4,\n      children: _toConsumableArray(new Array(2)).map(function (item, index) {\n        return /*#__PURE__*/_jsxDEV(Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(FormGrid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Skeleton, {\n              height: 30,\n              width: 100\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 446,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(FormGrid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(FormGrid, {\n              container: true,\n              spacing: 4,\n              children: [/*#__PURE__*/_jsxDEV(FormGrid, {\n                item: true,\n                xs: 12,\n                md: 4,\n                children: [/*#__PURE__*/_jsxDEV(Skeleton, {\n                  height: 16\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 451,\n                  columnNumber: 19\n                }, _this), /*#__PURE__*/_jsxDEV(Skeleton, {\n                  height: 30,\n                  variant: \"rect\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 452,\n                  columnNumber: 19\n                }, _this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 450,\n                columnNumber: 17\n              }, _this), /*#__PURE__*/_jsxDEV(FormGrid, {\n                item: true,\n                xs: 12,\n                md: 4,\n                children: [/*#__PURE__*/_jsxDEV(Skeleton, {\n                  height: 16\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 455,\n                  columnNumber: 19\n                }, _this), /*#__PURE__*/_jsxDEV(Skeleton, {\n                  height: 30,\n                  variant: \"rect\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 456,\n                  columnNumber: 19\n                }, _this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 454,\n                columnNumber: 17\n              }, _this), /*#__PURE__*/_jsxDEV(FormGrid, {\n                item: true,\n                xs: 12,\n                md: 4,\n                children: [/*#__PURE__*/_jsxDEV(Skeleton, {\n                  height: 16\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 459,\n                  columnNumber: 19\n                }, _this), /*#__PURE__*/_jsxDEV(Skeleton, {\n                  height: 30,\n                  variant: \"rect\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 460,\n                  columnNumber: 19\n                }, _this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 458,\n                columnNumber: 17\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 449,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 13\n          }, _this)]\n        }, \"skeleton-\".concat(index), true, {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 11\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 7\n    }, this);\n  }\n\n  return (linkPoliciesData === null || linkPoliciesData === void 0 ? void 0 : linkPoliciesData.searchBy) !== '' && (linkPoliciesData === null || linkPoliciesData === void 0 ? void 0 : linkPoliciesData.searchTerm) !== '' && (linkPoliciesData === null || linkPoliciesData === void 0 ? void 0 : linkPoliciesData.loader) && /*#__PURE__*/_jsxDEV(LinkClaimPolicyView, {\n    fields: fields,\n    policyData: policyData,\n    claimPolicyInsures: claimPolicyInsures,\n    interest: interest,\n    uwResetKey: uwResetKey,\n    hasClaimRef: false,\n    underWritingGroups: underWritingGroups,\n    claimPolicyClients: claimPolicyClients,\n    isBordereauFlag: isBordereauFlag,\n    validation: validation,\n    setValidation: setValidation,\n    index: index,\n    setActiveStep: setActiveStep,\n    isFormsEdited: isFormsEdited,\n    setFormEditedStatus: setFormEditedStatus,\n    postSaveHandler: postSaveHandler,\n    postEditSaveHandler: postEditSaveHandler,\n    saveStatus: saveStatus,\n    selectedPolicyRender: selectedPolicyRender,\n    handleFormStatus: handleFormStatus,\n    stepper: stepper,\n    setStepper: setStepper,\n    selectNextPolicy: selectNextPolicy,\n    postSaveNextHanlder: postSaveNextHanlder,\n    fieldsLoader: {\n      isPoliciesClientsLoading: isPoliciesClientsLoading,\n      isInterestLoading: isInterestLoading,\n      isPolicySectionLoading: isPolicySectionLoading,\n      isInsuredLoading: isInsuredLoading\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 474,\n    columnNumber: 7\n  }, this);\n}\n\n_s(SelectedClaimPolicy, \"qaBZ2yUTxBuPif/98z4dv8e6r1E=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = SelectedClaimPolicy;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectedClaimPolicy\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/LinkClaimPolicy/LinkClaimPolicy.js"],"names":["React","Fragment","useState","useEffect","useDispatch","useSelector","Yup","moment","get","styles","LinkClaimPolicyView","FormGrid","getInterest","getClaimDetails","getPolicyInsures","getPolicyClients","getPolicySections","selectClaimsPolicySections","selectClaimsInterestItems","selectClaimPolicyInsures","selectSectionEnabledUG","selectClaimsUnderwritingGroups","selectClaimPolicyClients","selectAllClaimDetails","postClaimDetailsInformation","postEditClaimDetailsInformation","selectLinkPoliciesData","getLinkPoliciesData","selectRefDataNewCountriesList","selectClaimsInterest","selectIsClaimPolicyClientsLoading","selectPolicySectionIsLoading","selectisClaimPolicyInsuresLoading","utils","CLAIM_SECTION_ENABLED_UG","CLAIM_POLICY_SECTION_DEFAULT","Skeleton","makeStyles","SelectedClaimPolicy","policyData","selectedPolicyRender","setSelectedPolicyRender","validation","setValidation","setActiveStep","index","isFormsEdited","setFormEditedStatus","saveStatus","sectionEnabledValidationFlag","claimInfo","handleFormStatus","selectNextPolicy","setSelectNextPolicy","classes","name","dispatch","uwResetKey","setUWResetKey","stepper","setStepper","interest","generic","isValidArray","map","intrst","description","code","origCurrencies","state","allSettlementCurriencies","settlementCurriencies","referenceData","settlementCurrencyTypes","getAllById","xbInstanceID","currency","currencyName","currencyCd","allClaimDetails","underWritingGroups","policySections","claimPolicyInsures","isSectionEnabled","claimPolicyClients","isInterestLoading","isLoading","isPoliciesClientsLoading","isPolicySectionLoading","isInsuredLoading","countriesList","country","countryName","countryCode","linkPoliciesData","isBordereauFlag","isBordereau","viewLoader","then","response","loader","fieldLoader","Date","getTime","sectionAllOption","policyType","id","string","t","policyInfo","postSaveHandler","postData","claimID","data","formState","form","postEditSaveHandler","dms","resetDmsFiles","postSaveNextHanlder","policyUpdated","formEditedStatus","clientValue","client","find","clmPolicyclnt","clientID","toString","length","countryCodeValue","settlementCountry","originalCurrencyValue","originalCurrencyCode","originalCurrency","fields","type","options","optionKey","optionLabel","label","value","insured","clmPolicy","insuredID","object","nullable","required","when","schema","settlementCurrencyCode","xbPolicyID","defaultValue","muiFormGroupProps","row","root","radioLabel","percentageOfSelected","muiComponentProps","disabled","number","min","max","certificateNumber","formInput","inceptionDate","certificateInceptionDate","fullWidth","date","test","parent","certificateExpiryDate","isSameOrBefore","outputFormat","expiryDate","isSameOrAfter","ugSections","Array","item","searchBy","searchTerm"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport * as Yup from 'yup';\r\nimport moment from 'moment';\r\nimport get from 'lodash/get';\r\n\r\n// app\r\nimport styles from './LinkClaimPolicy.styles';\r\nimport { LinkClaimPolicyView } from './LinkClaimPolicy.view';\r\nimport { FormGrid } from 'components';\r\nimport {\r\n  getInterest,\r\n  getClaimDetails,\r\n  getPolicyInsures,\r\n  getPolicyClients,\r\n  getPolicySections,\r\n  selectClaimsPolicySections,\r\n  selectClaimsInterestItems,\r\n  selectClaimPolicyInsures,\r\n  selectSectionEnabledUG,\r\n  selectClaimsUnderwritingGroups,\r\n  selectClaimPolicyClients,\r\n  selectAllClaimDetails,\r\n  postClaimDetailsInformation,\r\n  postEditClaimDetailsInformation,\r\n  selectLinkPoliciesData,\r\n  getLinkPoliciesData,\r\n  selectRefDataNewCountriesList,\r\n  selectClaimsInterest,\r\n  selectIsClaimPolicyClientsLoading,\r\n  selectPolicySectionIsLoading,\r\n  selectisClaimPolicyInsuresLoading,\r\n} from 'stores';\r\nimport * as utils from 'utils';\r\nimport { CLAIM_SECTION_ENABLED_UG, CLAIM_POLICY_SECTION_DEFAULT } from 'consts';\r\n\r\n//mui\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nexport default function SelectedClaimPolicy({\r\n  policyData,\r\n  selectedPolicyRender,\r\n  setSelectedPolicyRender,\r\n  validation,\r\n  setValidation,\r\n  setActiveStep,\r\n  index,\r\n  isFormsEdited,\r\n  setFormEditedStatus,\r\n  saveStatus,\r\n  sectionEnabledValidationFlag,\r\n  claimInfo,\r\n  handleFormStatus,\r\n  selectNextPolicy,\r\n  setSelectNextPolicy,\r\n}) {\r\n  const classes = makeStyles(styles, { name: 'LinkClaimPolicy' })();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const [uwResetKey, setUWResetKey] = useState();\r\n  const [stepper, setStepper] = useState(false);\r\n\r\n  let interest = useSelector(selectClaimsInterestItems);\r\n  interest = utils.generic.isValidArray(interest)\r\n    ? interest?.map((intrst) => ({ ...intrst, description: `${intrst.code} - ${intrst.description}` }))\r\n    : null;\r\n  let origCurrencies = useSelector((state) => get(state, 'referenceData.currencyCodes'));\r\n  let allSettlementCurriencies = useSelector((state) => get(state, 'referenceData.settlementCurrency'));\r\n  let settlementCurriencies = utils.referenceData.settlementCurrencyTypes.getAllById(allSettlementCurriencies, policyData?.xbInstanceID);\r\n  origCurrencies = utils.generic.isValidArray(origCurrencies)\r\n    ? origCurrencies?.map((currency) => ({ ...currency, currencyName: `${currency.currencyCd} - ${currency.currencyName}` }))\r\n    : null;\r\n  settlementCurriencies = utils.generic.isValidArray(settlementCurriencies)\r\n    ? settlementCurriencies?.map((currency) => ({ ...currency, currencyName: `${currency.currencyCd} - ${currency.currencyName}` }))\r\n    : null;\r\n  const allClaimDetails = useSelector(selectAllClaimDetails);\r\n  const underWritingGroups = useSelector(selectClaimsUnderwritingGroups);\r\n  const policySections = useSelector(selectClaimsPolicySections);\r\n  const claimPolicyInsures = useSelector(selectClaimPolicyInsures);\r\n  const isSectionEnabled = useSelector(selectSectionEnabledUG);\r\n  const claimPolicyClients = useSelector(selectClaimPolicyClients);\r\n  const isInterestLoading = useSelector(selectClaimsInterest)?.isLoading;\r\n  const isPoliciesClientsLoading = useSelector(selectIsClaimPolicyClientsLoading);\r\n  const isPolicySectionLoading = useSelector(selectPolicySectionIsLoading);\r\n  const isInsuredLoading = useSelector(selectisClaimPolicyInsuresLoading);\r\n\r\n  let countriesList = useSelector(selectRefDataNewCountriesList);\r\n  countriesList = utils.generic.isValidArray(countriesList)\r\n    ? countriesList?.map((country) => ({ ...country, countryName: `${country.countryCode} - ${country.countryName}` }))\r\n    : null;\r\n  const linkPoliciesData = useSelector(selectLinkPoliciesData);\r\n  const isBordereauFlag = allClaimDetails?.isBordereau === 1;\r\n\r\n  useEffect(() => {\r\n    if (selectedPolicyRender !== '') {\r\n      dispatch(getInterest({ viewLoader: false }));\r\n      dispatch(getPolicyInsures({ viewLoader: false }));\r\n      isSectionEnabled && dispatch(getPolicySections({ viewLoader: false }));\r\n      dispatch(getPolicyClients({ viewLoader: false })).then((response) => {\r\n        if (utils.generic.isValidArray(response)) {\r\n          dispatch(getLinkPoliciesData({ loader: true, fieldLoader: false }));\r\n          setUWResetKey(new Date().getTime());\r\n        }\r\n      });\r\n      dispatch(getClaimDetails());\r\n    }\r\n  }, [selectedPolicyRender]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const sectionAllOption =\r\n    policyData?.policyType === CLAIM_SECTION_ENABLED_UG[0]\r\n      ? []\r\n      : [{ id: CLAIM_POLICY_SECTION_DEFAULT, name: utils.string.t('app.all'), description: null }];\r\n\r\n  const policyInfo = [...sectionAllOption, ...(utils.generic.isValidArray(policySections, true) ? policySections : [])];\r\n\r\n  const postSaveHandler = (postData) => {\r\n    if (!claimInfo?.claimID) {\r\n      dispatch(postClaimDetailsInformation(postData)).then((response) => {\r\n        if (response) {\r\n          dispatch(getLinkPoliciesData({ data: postData }));\r\n          const formState = isFormsEdited?.map((form) => ({ ...form }));\r\n          formState[index]['formEditedStatus'] = false;\r\n          formState[index]['isSubmitted'] = false;\r\n          setFormEditedStatus(formState);\r\n          setValidation(false);\r\n        }\r\n      });\r\n    } else {\r\n      dispatch(postEditClaimDetailsInformation(postData)).then((response) => {\r\n        if (response) {\r\n          dispatch(getLinkPoliciesData({ data: postData }));\r\n          const formState = isFormsEdited?.map((form) => ({ ...form }));\r\n          formState[index]['formEditedStatus'] = false;\r\n          formState[index]['isSubmitted'] = false;\r\n          setFormEditedStatus(formState);\r\n          setValidation(false);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const postEditSaveHandler = (postData) => {\r\n    utils.dms.resetDmsFiles(dispatch);\r\n    if (claimInfo?.claimID) {\r\n      dispatch(postEditClaimDetailsInformation(postData)).then((response) => {\r\n        if (response) {\r\n          dispatch(getLinkPoliciesData({ data: postData }));\r\n          const formState = isFormsEdited?.map((form) => ({ ...form }));\r\n          formState[index]['formEditedStatus'] = false;\r\n          formState[index]['isSubmitted'] = true;\r\n          setFormEditedStatus(formState);\r\n          setActiveStep(index + 1);\r\n          setValidation(true);\r\n          setSelectedPolicyRender('');\r\n        }\r\n      });\r\n    } else {\r\n      dispatch(postClaimDetailsInformation(postData)).then((response) => {\r\n        if (response) {\r\n          dispatch(getLinkPoliciesData({ data: postData }));\r\n          const formState = isFormsEdited?.map((form) => ({ ...form }));\r\n          formState[index]['formEditedStatus'] = false;\r\n          formState[index]['isSubmitted'] = true;\r\n          setFormEditedStatus(formState);\r\n          setActiveStep(index + 1);\r\n          setValidation(true);\r\n          setSelectedPolicyRender('');\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const postSaveNextHanlder = (postData) => {\r\n    if (claimInfo?.claimID) {\r\n      const policyUpdated = true;\r\n      dispatch(postEditClaimDetailsInformation(postData, policyUpdated)).then((response) => {\r\n        if (response) {\r\n          dispatch(getLinkPoliciesData({ data: postData }));\r\n          const formState = isFormsEdited?.map((form) => ({ ...form }));\r\n          if (isFormsEdited[index]?.formEditedStatus) {\r\n            formState[index]['formEditedStatus'] = false;\r\n            formState[index]['isSubmitted'] = false;\r\n            setFormEditedStatus(formState);\r\n            setActiveStep(index + 1);\r\n            setValidation(true);\r\n            setSelectNextPolicy(false);\r\n          } else {\r\n            formState[index]['formEditedStatus'] = false;\r\n            formState[index]['isSubmitted'] = true;\r\n            setFormEditedStatus(formState);\r\n            setValidation(true);\r\n            setSelectedPolicyRender('');\r\n            setSelectNextPolicy(false);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  };\r\n  const clientValue = (claimPolicyClients) => {\r\n    return linkPoliciesData?.data?.client && !linkPoliciesData?.fieldLoader\r\n      ? claimPolicyClients?.find((clmPolicyclnt) => clmPolicyclnt.id === linkPoliciesData.data.client.id)\r\n      : claimInfo?.clientID\r\n      ? claimPolicyClients?.find((clmPolicyclnt) => clmPolicyclnt.id === claimInfo?.clientID?.toString())\r\n      : claimPolicyClients?.length === 1\r\n      ? claimPolicyClients[0]\r\n      : null;\r\n  };\r\n  const countryCodeValue = (countriesList) => {\r\n    return linkPoliciesData?.data?.countryCode && !linkPoliciesData?.fieldLoader\r\n      ? countriesList?.find((country) => country.countryCode === linkPoliciesData.data.countryCode.countryCode)\r\n      : claimInfo?.settlementCountry\r\n      ? countriesList?.find((country) => country.countryCode === claimInfo.settlementCountry)\r\n      : null;\r\n  };\r\n  const originalCurrencyValue = (origCurrencies) => {\r\n    return linkPoliciesData?.data?.originalCurrencyCode && !linkPoliciesData?.fieldLoader\r\n      ? origCurrencies?.find((currency) => currency.currencyCd === linkPoliciesData.data.originalCurrencyCode.currencyCd)\r\n      : claimInfo?.originalCurrency\r\n      ? origCurrencies?.find((currency) => currency?.currencyCd === claimInfo?.originalCurrency)\r\n      : null;\r\n  };\r\n  const fields = [\r\n    {\r\n      name: 'insured',\r\n      type: 'autocompletemui',\r\n      options: claimPolicyInsures || [],\r\n      optionKey: 'id',\r\n      optionLabel: 'name',\r\n      label: utils.string.t('claims.claimInformation.insured'),\r\n      value:\r\n        linkPoliciesData?.data?.insured && !linkPoliciesData?.fieldLoader\r\n          ? claimPolicyInsures?.find((clmPolicy) => clmPolicy.id === linkPoliciesData.data.insured.id)\r\n          : claimInfo?.insuredID\r\n          ? claimPolicyInsures?.find((clmPolicy) => clmPolicy.id === claimInfo?.insuredID?.toString())\r\n          : claimPolicyInsures?.length === 1\r\n          ? claimPolicyInsures[0]\r\n          : null,\r\n      validation: isFormsEdited?.[index]?.formEditedStatus\r\n        ? Yup.object()\r\n            .nullable()\r\n            .required(utils.string.t('validation.required'))\r\n            .when('$validation', (validation, schema) => (validation ? schema : Yup.object().nullable()))\r\n        : false,\r\n    },\r\n    {\r\n      name: 'client',\r\n      type: 'autocompletemui',\r\n      options: claimPolicyClients || [],\r\n      optionKey: 'id',\r\n      optionLabel: 'name',\r\n      label: utils.string.t('claims.claimInformation.client'),\r\n      value: clientValue(claimPolicyClients),\r\n      validation: isFormsEdited?.[index]?.formEditedStatus\r\n        ? Yup.object()\r\n            .nullable()\r\n            .required(utils.string.t('validation.required'))\r\n            .when('$validation', (validation, schema) => (validation ? schema : Yup.object().nullable()))\r\n        : false,\r\n    },\r\n    {\r\n      name: 'countryCode',\r\n      type: 'autocompletemui',\r\n      options: countriesList || [],\r\n      optionKey: 'countryCode',\r\n      optionLabel: 'countryName',\r\n      label: utils.string.t('claims.claimInformation.country'),\r\n      value: countryCodeValue(countriesList),\r\n      validation: isFormsEdited?.[index]?.formEditedStatus\r\n        ? Yup.object().nullable().required(utils.string.t('validation.required'))\r\n        : false,\r\n    },\r\n    {\r\n      name: 'originalCurrencyCode',\r\n      type: 'autocompletemui',\r\n      options: origCurrencies || [],\r\n      optionKey: 'currencyCd',\r\n      optionLabel: 'currencyName',\r\n      label: utils.string.t('claims.claimInformation.originalCurrency'),\r\n      value: originalCurrencyValue(origCurrencies),\r\n      validation: isFormsEdited?.[index]?.formEditedStatus\r\n        ? Yup.object().nullable().required(utils.string.t('validation.required'))\r\n        : false,\r\n    },\r\n    {\r\n      name: 'settlementCurrencyCode',\r\n      type: 'autocompletemui',\r\n      options: settlementCurriencies || [],\r\n      optionKey: 'currencyCd',\r\n      optionLabel: 'currencyName',\r\n      label: utils.string.t('claims.claimInformation.settlementCurrency'),\r\n      value:\r\n        linkPoliciesData?.data?.originalCurrencyCode && !linkPoliciesData?.fieldLoader\r\n          ? settlementCurriencies?.find((currency) => currency.currencyCd === linkPoliciesData.data.settlementCurrencyCode.currencyCd)\r\n          : claimInfo?.settlementCurrencyCode\r\n          ? settlementCurriencies?.find((currency) => currency.currencyCd === claimInfo?.settlementCurrencyCode)\r\n          : null,\r\n      validation: isFormsEdited?.[index]?.formEditedStatus\r\n        ? Yup.object().nullable().required(utils.string.t('validation.required'))\r\n        : false,\r\n    },\r\n    {\r\n      name: 'interest',\r\n      type: 'autocompletemui',\r\n      options: interest,\r\n      label: utils.string.t('claims.claimInformation.interest'),\r\n      value:\r\n        linkPoliciesData?.data?.interest && !linkPoliciesData?.fieldLoader\r\n          ? interest?.find((intrst) => intrst.xbPolicyID === linkPoliciesData.data.interest.xbPolicyID)\r\n          : interest?.length === 1\r\n          ? interest[0]\r\n          : null,\r\n      optionKey: 'xbPolicyID',\r\n      optionLabel: 'description',\r\n    },\r\n    {\r\n      name: 'movementType',\r\n      type: 'toggle',\r\n      label: '',\r\n      value: 'Advice',\r\n      options: [\r\n        {\r\n          label: utils.string.t('claims.typeOfSettlement.advice'),\r\n          value: 'Advice',\r\n        },\r\n        {\r\n          label: utils.string.t('claims.typeOfSettlement.settlement'),\r\n          value: 'Settlement',\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      name: 'order',\r\n      type: 'radio',\r\n      defaultValue: '100',\r\n      muiFormGroupProps: {\r\n        row: true,\r\n        classes: {\r\n          root: classes.radioLabel,\r\n        },\r\n      },\r\n      options: [\r\n        {\r\n          label: utils.string.t('claims.typeOfSettlement.oneHundredPercent'),\r\n          value: '100',\r\n        },\r\n        {\r\n          label: utils.string.t('claims.typeOfSettlement.ourShare'),\r\n          value: '0',\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      name: 'orderPercentage',\r\n      type: 'number',\r\n      defaultValue: underWritingGroups.percentageOfSelected || '0',\r\n      value: underWritingGroups.percentageOfSelected || '0',\r\n      muiComponentProps: {\r\n        disabled: true,\r\n      },\r\n      validation: Yup.number()\r\n        .min(0, utils.string.t('claims.typeOfSettlement.errorMin'))\r\n        .max(100, utils.string.t('claims.typeOfSettlement.error')),\r\n    },\r\n    ...(isBordereauFlag\r\n      ? [\r\n          {\r\n            name: 'certificateNumber',\r\n            type: 'text',\r\n            value: allClaimDetails?.certificateNumber || linkPoliciesData?.data?.certificateNumber || '',\r\n            muiComponentProps: {\r\n              classes: {\r\n                root: classes.formInput,\r\n              },\r\n            },\r\n            validation: isFormsEdited?.[index]?.formEditedStatus\r\n              ? Yup.string()\r\n                  .nullable()\r\n                  .required(utils.string.t('validation.required'))\r\n                  .max(17, utils.string.t('claims.claimInformation.validation.maxCerficateNumber'))\r\n                  .when('$validation', (validation, schema) => (validation ? schema : Yup.string()))\r\n              : false,\r\n          },\r\n          {\r\n            type: 'datepicker',\r\n            name: 'certificateInceptionDate',\r\n            value: policyData?.inceptionDate || linkPoliciesData?.data?.certificateInceptionDate || null,\r\n            muiComponentProps: {\r\n              fullWidth: true,\r\n            },\r\n            validation: Yup.date()\r\n              .nullable()\r\n              .test('from', utils.string.t('claims.claimInformation.validation.greaterThenExpDate'), function (value) {\r\n                return value && this.options.parent.certificateExpiryDate\r\n                  ? moment(value).isSameOrBefore(this.options.parent.certificateExpiryDate)\r\n                  : true;\r\n              })\r\n              .when('$validation', (validation, schema) => (validation ? schema : Yup.date().nullable())),\r\n            outputFormat: 'iso',\r\n          },\r\n          {\r\n            type: 'datepicker',\r\n            name: 'certificateExpiryDate',\r\n            value: policyData?.expiryDate || linkPoliciesData?.data?.certificateExpiryDate || null,\r\n            muiComponentProps: {\r\n              fullWidth: true,\r\n            },\r\n            validation: Yup.date()\r\n              .nullable()\r\n              .test('from', utils.string.t('claims.claimInformation.validation.lesserThenIncDate'), function (value) {\r\n                return value && this.options.parent.certificateInceptionDate\r\n                  ? moment(value).isSameOrAfter(this.options.parent.certificateInceptionDate)\r\n                  : true;\r\n              })\r\n              .when('$validation', (validation, schema) => (validation ? schema : Yup.date().nullable())),\r\n            outputFormat: 'iso',\r\n          },\r\n        ]\r\n      : []),\r\n    ...(isSectionEnabled\r\n      ? [\r\n          {\r\n            name: 'ugSections',\r\n            type: 'autocompletemui',\r\n            value: linkPoliciesData?.data?.ugSections || null,\r\n            options: policyInfo,\r\n            optionKey: 'id',\r\n            optionLabel: 'name',\r\n            validation: sectionEnabledValidationFlag\r\n              ? Yup.object()\r\n                  .nullable()\r\n                  .required(utils.string.t('validation.required'))\r\n                  .when('$validation', (validation, schema) => (validation ? schema : Yup.object().nullable()))\r\n              : false,\r\n          },\r\n        ]\r\n      : []),\r\n  ];\r\n  if (isPoliciesClientsLoading || isInterestLoading || isPolicySectionLoading || isInsuredLoading) {\r\n    return (\r\n      <FormGrid container spacing={4}>\r\n        {[...new Array(2)].map((item, index) => (\r\n          <Fragment key={`skeleton-${index}`}>\r\n            <FormGrid item xs={12}>\r\n              <Skeleton height={30} width={100} />\r\n            </FormGrid>\r\n            <FormGrid item xs={12}>\r\n              <FormGrid container spacing={4}>\r\n                <FormGrid item xs={12} md={4}>\r\n                  <Skeleton height={16} />\r\n                  <Skeleton height={30} variant=\"rect\" />\r\n                </FormGrid>\r\n                <FormGrid item xs={12} md={4}>\r\n                  <Skeleton height={16} />\r\n                  <Skeleton height={30} variant=\"rect\" />\r\n                </FormGrid>\r\n                <FormGrid item xs={12} md={4}>\r\n                  <Skeleton height={16} />\r\n                  <Skeleton height={30} variant=\"rect\" />\r\n                </FormGrid>\r\n              </FormGrid>\r\n            </FormGrid>\r\n          </Fragment>\r\n        ))}\r\n      </FormGrid>\r\n    );\r\n  }\r\n\r\n  return (\r\n    linkPoliciesData?.searchBy !== '' &&\r\n    linkPoliciesData?.searchTerm !== '' &&\r\n    linkPoliciesData?.loader && (\r\n      <LinkClaimPolicyView\r\n        fields={fields}\r\n        policyData={policyData}\r\n        claimPolicyInsures={claimPolicyInsures}\r\n        interest={interest}\r\n        uwResetKey={uwResetKey}\r\n        hasClaimRef={false}\r\n        underWritingGroups={underWritingGroups}\r\n        claimPolicyClients={claimPolicyClients}\r\n        isBordereauFlag={isBordereauFlag}\r\n        validation={validation}\r\n        setValidation={setValidation}\r\n        index={index}\r\n        setActiveStep={setActiveStep}\r\n        isFormsEdited={isFormsEdited}\r\n        setFormEditedStatus={setFormEditedStatus}\r\n        postSaveHandler={postSaveHandler}\r\n        postEditSaveHandler={postEditSaveHandler}\r\n        saveStatus={saveStatus}\r\n        selectedPolicyRender={selectedPolicyRender}\r\n        handleFormStatus={handleFormStatus}\r\n        stepper={stepper}\r\n        setStepper={setStepper}\r\n        selectNextPolicy={selectNextPolicy}\r\n        postSaveNextHanlder={postSaveNextHanlder}\r\n        fieldsLoader={{\r\n          isPoliciesClientsLoading: isPoliciesClientsLoading,\r\n          isInterestLoading: isInterestLoading,\r\n          isPolicySectionLoading: isPolicySectionLoading,\r\n          isInsuredLoading: isInsuredLoading,\r\n        }}\r\n      />\r\n    )\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}