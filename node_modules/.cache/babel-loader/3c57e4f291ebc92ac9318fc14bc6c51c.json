{"ast":null,"code":"var _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\TasksProcessingTable\\\\TasksProcessingTable.view.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get'; // app\n\nimport styles from './TasksProcessingTable.styles';\nimport { Empty, TableHead, Pagination, Skeleton, TableCell } from 'components';\nimport { TasksProcessingTableRow } from 'modules';\nimport { ReactComponent as IconSearchFile } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/svg/line-icon-report.svg\";\nimport * as utils from 'utils'; // mui\n\nimport { makeStyles, Table, TableBody, TableRow, Box } from '@material-ui/core';\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nTasksProcessingTableView.propTypes = {\n  isTaskTeam: PropTypes.bool.isRequired,\n  hasTasks: PropTypes.bool.isRequired,\n  taskItems: PropTypes.array.isRequired,\n  cols: PropTypes.array.isRequired,\n  columnProps: PropTypes.func.isRequired,\n  handleUpdateTaskPriority: PropTypes.func.isRequired,\n  sort: PropTypes.object.isRequired,\n  pagination: PropTypes.shape({\n    obj: PropTypes.object.isRequired,\n    handlers: PropTypes.shape({\n      handleChangePage: PropTypes.func.isRequired,\n      handleChangeRowsPerPage: PropTypes.func.isRequired\n    }).isRequired\n  }).isRequired,\n  refreshTasksGrid: PropTypes.func.isRequired,\n  premiumProcessingSaveAssignee: PropTypes.func,\n  isPremiumProcessing: PropTypes.bool,\n  handlers: PropTypes.shape({\n    selectTask: PropTypes.func.isRequired,\n    handleEditAdhoc: PropTypes.func.isRequired,\n    handleCreateRFITaskLevel: PropTypes.func.isRequired,\n    createSanctionsCheck: PropTypes.func.isRequired\n  }).isRequired,\n  tasksSelected: PropTypes.array.isRequired,\n  premiumProcessCheckBoxSelectedTaskList: PropTypes.array,\n  isTaskGridLoading: PropTypes.bool,\n  isTaskGridDataFetchingError: PropTypes.bool,\n  premiumProcessSelectedTaskList: PropTypes.array.isRequired\n};\nexport function TasksProcessingTableView(_ref) {\n  var _this = this;\n\n  var handleUpdateTaskPriority = _ref.handleUpdateTaskPriority,\n      isTaskTeam = _ref.isTaskTeam,\n      hasTasks = _ref.hasTasks,\n      taskItems = _ref.taskItems,\n      cols = _ref.cols,\n      columnProps = _ref.columnProps,\n      sort = _ref.sort,\n      pagination = _ref.pagination,\n      handlers = _ref.handlers,\n      refreshTasksGrid = _ref.refreshTasksGrid,\n      premiumProcessingSaveAssignee = _ref.premiumProcessingSaveAssignee,\n      tasksSelected = _ref.tasksSelected,\n      isPremiumProcessing = _ref.isPremiumProcessing,\n      premiumProcessCheckBoxSelectedTaskList = _ref.premiumProcessCheckBoxSelectedTaskList,\n      isTaskGridLoading = _ref.isTaskGridLoading,\n      isTaskGridDataFetchingError = _ref.isTaskGridDataFetchingError,\n      premiumProcessSelectedTaskList = _ref.premiumProcessSelectedTaskList;\n  var classes = makeStyles(styles, {\n    name: 'TasksProcessingTable'\n  })();\n  return /*#__PURE__*/_jsxDEV(Box, {\n    \"data-testid\": \"tasks-processing-search-table\",\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      className: classes.overFlowTable,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        stickyHeader: true,\n        size: \"small\",\n        \"data-testid\": \"tasks-processing-table\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          columns: cols,\n          sorting: sort,\n          nestedClasses: {\n            tableHead: classes.tableHead\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          \"data-testid\": \"tasks-list-body\",\n          children: !isTaskGridLoading && taskItems.map(function (task) {\n            return /*#__PURE__*/_jsxDEV(TasksProcessingTableRow, {\n              handleUpdateTaskPriority: handleUpdateTaskPriority,\n              isCheckBoxSelected: isPremiumProcessing ? utils.generic.isValidArray(premiumProcessCheckBoxSelectedTaskList, true) && (premiumProcessCheckBoxSelectedTaskList === null || premiumProcessCheckBoxSelectedTaskList === void 0 ? void 0 : premiumProcessCheckBoxSelectedTaskList.map(function (c) {\n                return c === null || c === void 0 ? void 0 : c.processId;\n              }).includes(task === null || task === void 0 ? void 0 : task.processId)) : utils.generic.isValidArray(tasksSelected, true) && (tasksSelected === null || tasksSelected === void 0 ? void 0 : tasksSelected.map(function (c) {\n                return c === null || c === void 0 ? void 0 : c.processId;\n              }).includes(task === null || task === void 0 ? void 0 : task.processId)),\n              isTaskSelected: isPremiumProcessing ? utils.generic.isValidArray(premiumProcessSelectedTaskList, true) && (premiumProcessSelectedTaskList === null || premiumProcessSelectedTaskList === void 0 ? void 0 : premiumProcessSelectedTaskList.map(function (c) {\n                return c === null || c === void 0 ? void 0 : c.processId;\n              }).includes(task === null || task === void 0 ? void 0 : task.processId)) : utils.generic.isValidArray(tasksSelected, true) && (tasksSelected === null || tasksSelected === void 0 ? void 0 : tasksSelected.map(function (c) {\n                return c === null || c === void 0 ? void 0 : c.processId;\n              }).includes(task === null || task === void 0 ? void 0 : task.processId)),\n              isTaskTeam: isTaskTeam,\n              premiumProcessCheckBoxSelectedTaskList: premiumProcessCheckBoxSelectedTaskList,\n              task: task,\n              columnProps: columnProps,\n              isPremiumProcessing: isPremiumProcessing,\n              handlers: {\n                selectTask: handlers.selectTask,\n                refreshTasksGrid: refreshTasksGrid,\n                premiumProcessingSaveAssignee: premiumProcessingSaveAssignee,\n                handleEditAdhoc: handlers.handleEditAdhoc,\n                handleCreateRFITaskLevel: handlers.handleCreateRFITaskLevel,\n                createSanctionsCheck: handlers.createSanctionsCheck\n              }\n            }, task.taskId || task.processId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 17\n            }, _this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), isTaskGridLoading && !isTaskGridDataFetchingError && /*#__PURE__*/_jsxDEV(TableBody, {\n          \"data-testid\": \"tasks-list-loading-body\",\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: /*#__PURE__*/_jsxDEV(TableCell, {\n              colSpan: cols.length,\n              children: /*#__PURE__*/_jsxDEV(Skeleton, {\n                width: \"100%\",\n                height: 40,\n                animation: \"wave\",\n                displayNumber: get(pagination, 'obj.rowsPerPage') || 10\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this), !hasTasks && !isTaskGridLoading && !isTaskGridDataFetchingError && /*#__PURE__*/_jsxDEV(TableBody, {\n          \"data-testid\": \"tasks-list-loading-body\",\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: /*#__PURE__*/_jsxDEV(TableCell, {\n              colSpan: cols.length,\n              children: /*#__PURE__*/_jsxDEV(Empty, {\n                title: utils.string.t('claims.noMatchFound'),\n                icon: /*#__PURE__*/_jsxDEV(IconSearchFile, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 120,\n                  columnNumber: 78\n                }, this),\n                padding: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this), isTaskGridDataFetchingError && /*#__PURE__*/_jsxDEV(TableBody, {\n          \"data-testid\": \"tasks-list-loading-body\",\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: /*#__PURE__*/_jsxDEV(TableCell, {\n              colSpan: cols.length,\n              children: /*#__PURE__*/_jsxDEV(Empty, {\n                bg: false,\n                errorText: utils.string.t('app.apiFetchingError'),\n                icon: /*#__PURE__*/_jsxDEV(ErrorOutlineIcon, {\n                  className: classes.apiFechErrorIcon\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 132,\n                  columnNumber: 27\n                }, this),\n                padding: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), hasTasks && /*#__PURE__*/_jsxDEV(Pagination, {\n      page: get(pagination, 'obj.page'),\n      count: get(pagination, 'obj.rowsTotal'),\n      rowsPerPage: get(pagination, 'obj.rowsPerPage'),\n      onChangePage: get(pagination, 'handlers.handleChangePage'),\n      onChangeRowsPerPage: get(pagination, 'handlers.handleChangeRowsPerPage')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_c = TasksProcessingTableView;\n\nvar _c;\n\n$RefreshReg$(_c, \"TasksProcessingTableView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/TasksProcessingTable/TasksProcessingTable.view.js"],"names":["React","PropTypes","get","styles","Empty","TableHead","Pagination","Skeleton","TableCell","TasksProcessingTableRow","utils","makeStyles","Table","TableBody","TableRow","Box","ErrorOutlineIcon","TasksProcessingTableView","propTypes","isTaskTeam","bool","isRequired","hasTasks","taskItems","array","cols","columnProps","func","handleUpdateTaskPriority","sort","object","pagination","shape","obj","handlers","handleChangePage","handleChangeRowsPerPage","refreshTasksGrid","premiumProcessingSaveAssignee","isPremiumProcessing","selectTask","handleEditAdhoc","handleCreateRFITaskLevel","createSanctionsCheck","tasksSelected","premiumProcessCheckBoxSelectedTaskList","isTaskGridLoading","isTaskGridDataFetchingError","premiumProcessSelectedTaskList","classes","name","overFlowTable","tableHead","map","task","generic","isValidArray","c","processId","includes","taskId","length","string","t","apiFechErrorIcon"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport get from 'lodash/get';\r\n\r\n// app\r\nimport styles from './TasksProcessingTable.styles';\r\nimport { Empty, TableHead, Pagination, Skeleton, TableCell } from 'components';\r\nimport { TasksProcessingTableRow } from 'modules';\r\nimport { ReactComponent as IconSearchFile } from '../../assets/svg/line-icon-report.svg';\r\nimport * as utils from 'utils';\r\n\r\n// mui\r\nimport { makeStyles, Table, TableBody, TableRow, Box } from '@material-ui/core';\r\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\r\n\r\nTasksProcessingTableView.propTypes = {\r\n  isTaskTeam: PropTypes.bool.isRequired,\r\n  hasTasks: PropTypes.bool.isRequired,\r\n  taskItems: PropTypes.array.isRequired,\r\n  cols: PropTypes.array.isRequired,\r\n  columnProps: PropTypes.func.isRequired,\r\n  handleUpdateTaskPriority: PropTypes.func.isRequired,\r\n  sort: PropTypes.object.isRequired,\r\n  pagination: PropTypes.shape({\r\n    obj: PropTypes.object.isRequired,\r\n    handlers: PropTypes.shape({\r\n      handleChangePage: PropTypes.func.isRequired,\r\n      handleChangeRowsPerPage: PropTypes.func.isRequired,\r\n    }).isRequired,\r\n  }).isRequired,\r\n  refreshTasksGrid: PropTypes.func.isRequired,\r\n  premiumProcessingSaveAssignee: PropTypes.func,\r\n  isPremiumProcessing: PropTypes.bool,\r\n  handlers: PropTypes.shape({\r\n    selectTask: PropTypes.func.isRequired,\r\n    handleEditAdhoc: PropTypes.func.isRequired,\r\n    handleCreateRFITaskLevel: PropTypes.func.isRequired,\r\n    createSanctionsCheck: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  tasksSelected: PropTypes.array.isRequired,\r\n  premiumProcessCheckBoxSelectedTaskList: PropTypes.array,\r\n  isTaskGridLoading: PropTypes.bool,\r\n  isTaskGridDataFetchingError: PropTypes.bool,\r\n  premiumProcessSelectedTaskList: PropTypes.array.isRequired,\r\n};\r\n\r\nexport function TasksProcessingTableView({\r\n  handleUpdateTaskPriority,\r\n  isTaskTeam,\r\n  hasTasks,\r\n  taskItems,\r\n  cols,\r\n  columnProps,\r\n  sort,\r\n  pagination,\r\n  handlers,\r\n  refreshTasksGrid,\r\n  premiumProcessingSaveAssignee,\r\n  tasksSelected,\r\n  isPremiumProcessing,\r\n  premiumProcessCheckBoxSelectedTaskList,\r\n  isTaskGridLoading,\r\n  isTaskGridDataFetchingError,\r\n  premiumProcessSelectedTaskList,\r\n}) {\r\n  const classes = makeStyles(styles, { name: 'TasksProcessingTable' })();\r\n\r\n  return (\r\n    <Box data-testid=\"tasks-processing-search-table\">\r\n      <Box className={classes.overFlowTable}>\r\n        <Table stickyHeader size=\"small\" data-testid=\"tasks-processing-table\">\r\n          <TableHead columns={cols} sorting={sort} nestedClasses={{ tableHead: classes.tableHead }} />\r\n          <TableBody data-testid=\"tasks-list-body\">\r\n            {!isTaskGridLoading &&\r\n              taskItems.map((task) => (\r\n                <TasksProcessingTableRow\r\n                  handleUpdateTaskPriority={handleUpdateTaskPriority}\r\n                  isCheckBoxSelected={\r\n                    isPremiumProcessing\r\n                      ? utils.generic.isValidArray(premiumProcessCheckBoxSelectedTaskList, true) &&\r\n                        premiumProcessCheckBoxSelectedTaskList?.map((c) => c?.processId).includes(task?.processId)\r\n                      : utils.generic.isValidArray(tasksSelected, true) && tasksSelected?.map((c) => c?.processId).includes(task?.processId)\r\n                  }\r\n                  isTaskSelected={\r\n                    isPremiumProcessing\r\n                      ? utils.generic.isValidArray(premiumProcessSelectedTaskList, true) &&\r\n                        premiumProcessSelectedTaskList?.map((c) => c?.processId).includes(task?.processId)\r\n                      : utils.generic.isValidArray(tasksSelected, true) && tasksSelected?.map((c) => c?.processId).includes(task?.processId)\r\n                  }\r\n                  isTaskTeam={isTaskTeam}\r\n                  premiumProcessCheckBoxSelectedTaskList={premiumProcessCheckBoxSelectedTaskList}\r\n                  key={task.taskId || task.processId}\r\n                  task={task}\r\n                  columnProps={columnProps}\r\n                  isPremiumProcessing={isPremiumProcessing}\r\n                  handlers={{\r\n                    selectTask: handlers.selectTask,\r\n                    refreshTasksGrid: refreshTasksGrid,\r\n                    premiumProcessingSaveAssignee: premiumProcessingSaveAssignee,\r\n                    handleEditAdhoc: handlers.handleEditAdhoc,\r\n                    handleCreateRFITaskLevel: handlers.handleCreateRFITaskLevel,\r\n                    createSanctionsCheck: handlers.createSanctionsCheck,\r\n                  }}\r\n                />\r\n              ))}\r\n          </TableBody>\r\n          {isTaskGridLoading && !isTaskGridDataFetchingError && (\r\n            <TableBody data-testid=\"tasks-list-loading-body\">\r\n              <TableRow>\r\n                <TableCell colSpan={cols.length}>\r\n                  <Skeleton width=\"100%\" height={40} animation=\"wave\" displayNumber={get(pagination, 'obj.rowsPerPage') || 10} />\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableBody>\r\n          )}\r\n          {!hasTasks && !isTaskGridLoading && !isTaskGridDataFetchingError && (\r\n            <TableBody data-testid=\"tasks-list-loading-body\">\r\n              <TableRow>\r\n                <TableCell colSpan={cols.length}>\r\n                  <Empty title={utils.string.t('claims.noMatchFound')} icon={<IconSearchFile />} padding />\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableBody>\r\n          )}\r\n          {isTaskGridDataFetchingError && (\r\n            <TableBody data-testid=\"tasks-list-loading-body\">\r\n              <TableRow>\r\n                <TableCell colSpan={cols.length}>\r\n                  <Empty\r\n                    bg={false}\r\n                    errorText={utils.string.t('app.apiFetchingError')}\r\n                    icon={<ErrorOutlineIcon className={classes.apiFechErrorIcon} />}\r\n                    padding\r\n                  />\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableBody>\r\n          )}\r\n        </Table>\r\n      </Box>\r\n\r\n      {hasTasks && (\r\n        <Pagination\r\n          page={get(pagination, 'obj.page')}\r\n          count={get(pagination, 'obj.rowsTotal')}\r\n          rowsPerPage={get(pagination, 'obj.rowsPerPage')}\r\n          onChangePage={get(pagination, 'handlers.handleChangePage')}\r\n          onChangeRowsPerPage={get(pagination, 'handlers.handleChangeRowsPerPage')}\r\n        />\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}