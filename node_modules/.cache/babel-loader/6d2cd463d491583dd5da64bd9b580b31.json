{"ast":null,"code":"import \"core-js/modules/es.parse-int\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport config from 'config';\nimport moment from 'moment';\nimport numbro from 'numbro';\nimport i18n from 'i18next';\nimport { reactI18nextModule } from 'react-i18next';\nimport isNumber from 'lodash/isNumber';\nimport * as utils from 'utils'; // Load internal app translations\n\nimport translationEN from './translations/en.json'; // import translationFR from './translations/fr.json';\n// Load moment locale translations (\"en\" is loaded by default)\n// import 'moment/locale/fr';\n\nexport var format = function format(value, type, lng) {\n  // lowercase\n  if (type === 'lowercase') {\n    var count = value.count !== undefined ? parseInt(value.count) : 1;\n    return i18n.t(value.label, {\n      count: count\n    }).toLowerCase();\n  } // uppercase\n\n\n  if (type === 'uppercase') {\n    var _count = value.count !== undefined ? parseInt(value.count) : 1;\n\n    return i18n.t(value.label, {\n      count: _count\n    }).toUpperCase();\n  } // date\n\n\n  if (type === 'date') {\n    var _format = value.format || config.ui.format.date.text;\n\n    return value.date ? moment(value.date).format(_format) : value[\"default\"] || '';\n  } // date from now\n\n\n  if (type === 'dateFromNow') {\n    return utils.date.fromNow(value.date, {\n      yesterday: i18n.t('time.yesterday'),\n      tomorrow: i18n.t('time.tomorrow')\n    });\n  } // escape number formatting if value is not a number\n\n\n  if (type === 'number' || type === 'percent' || type === 'currency' || type === 'currencySymbol') {\n    if (!isNumber(value.number) && !isNumber(numbro.unformat(value.number))) {\n      return value[\"default\"] || '';\n    }\n  } // number\n\n\n  if (type === 'number') {\n    return numbro(value.number).format(_objectSpread({\n      thousandSeparated: true,\n      mantissa: config.ui.format.number.decimal,\n      trimMantissa: true\n    }, value.format));\n  } // percent\n\n\n  if (type === 'percent') {\n    return numbro(value.number / 100).format(_objectSpread({\n      output: 'percent',\n      mantissa: config.ui.format.percent.decimal,\n      trimMantissa: true\n    }, value.format));\n  } // currency\n\n\n  if (type === 'currency') {\n    var translation;\n    if (type === 'currency') translation = value.currency; // commenting out in case symbol formatting is needed in near future\n    // if (type === 'currencyName') translation = i18n.t(`currency.${value.currency}.name`);\n    // if (type === 'currencySymbol') translation = i18n.t(`currency.${value.currency}.symbol`);\n\n    return i18n.t('currency.format', {\n      number: numbro(value.number).format(_objectSpread({\n        thousandSeparated: true,\n        mantissa: config.ui.format.currency.decimal,\n        optionalMantissa: true\n      }, value.format)),\n      currency: value.currency ? translation : ''\n    });\n  } // fallback\n\n\n  return value;\n};\nexport var initialiseI18n = function initialiseI18n() {\n  // reset moment to \"en\" by default after loading other locales\n  moment.locale(config.locale);\n  numbro.setLanguage(config.localeCountry);\n  i18n.use(reactI18nextModule).init({\n    resources: {\n      en: {\n        translation: translationEN\n      } // fr: {\n      //   translation: translationFR\n      // }\n\n    },\n    lng: 'en',\n    fallbackLng: 'en',\n    debug: false,\n    interpolation: {\n      escapeValue: false,\n      format: format\n    },\n    react: {\n      wait: false\n    }\n  }, function (err) {\n    if (err) {\n      return console.error('i18n: Something went wrong loading', err);\n    }\n  });\n};\nexport default i18n;","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/utils/i18n/i18n.js"],"names":["config","moment","numbro","i18n","reactI18nextModule","isNumber","utils","translationEN","format","value","type","lng","count","undefined","parseInt","t","label","toLowerCase","toUpperCase","ui","date","text","fromNow","yesterday","tomorrow","number","unformat","thousandSeparated","mantissa","decimal","trimMantissa","output","percent","translation","currency","optionalMantissa","initialiseI18n","locale","setLanguage","localeCountry","use","init","resources","en","fallbackLng","debug","interpolation","escapeValue","react","wait","err","console","error"],"mappings":"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","sourcesContent":["import config from 'config';\r\nimport moment from 'moment';\r\nimport numbro from 'numbro';\r\nimport i18n from 'i18next';\r\nimport { reactI18nextModule } from 'react-i18next';\r\nimport isNumber from 'lodash/isNumber';\r\nimport * as utils from 'utils';\r\n\r\n// Load internal app translations\r\nimport translationEN from './translations/en.json';\r\n// import translationFR from './translations/fr.json';\r\n\r\n// Load moment locale translations (\"en\" is loaded by default)\r\n// import 'moment/locale/fr';\r\n\r\nexport const format = (value, type, lng) => {\r\n  // lowercase\r\n  if (type === 'lowercase') {\r\n    const count = value.count !== undefined ? parseInt(value.count) : 1;\r\n    return i18n.t(value.label, { count: count }).toLowerCase();\r\n  }\r\n\r\n  // uppercase\r\n  if (type === 'uppercase') {\r\n    const count = value.count !== undefined ? parseInt(value.count) : 1;\r\n    return i18n.t(value.label, { count: count }).toUpperCase();\r\n  }\r\n\r\n  // date\r\n  if (type === 'date') {\r\n    const format = value.format || config.ui.format.date.text;\r\n    return value.date ? moment(value.date).format(format) : value.default || '';\r\n  }\r\n\r\n  // date from now\r\n  if (type === 'dateFromNow') {\r\n    return utils.date.fromNow(value.date, {\r\n      yesterday: i18n.t('time.yesterday'),\r\n      tomorrow: i18n.t('time.tomorrow'),\r\n    });\r\n  }\r\n\r\n  // escape number formatting if value is not a number\r\n  if (type === 'number' || type === 'percent' || type === 'currency' || type === 'currencySymbol') {\r\n    if (!isNumber(value.number) && !isNumber(numbro.unformat(value.number))) {\r\n      return value.default || '';\r\n    }\r\n  }\r\n\r\n  // number\r\n  if (type === 'number') {\r\n    return numbro(value.number).format({\r\n      thousandSeparated: true,\r\n      mantissa: config.ui.format.number.decimal,\r\n      trimMantissa: true,\r\n      ...value.format,\r\n    });\r\n  }\r\n\r\n  // percent\r\n  if (type === 'percent') {\r\n    return numbro(value.number / 100).format({\r\n      output: 'percent',\r\n      mantissa: config.ui.format.percent.decimal,\r\n      trimMantissa: true,\r\n      ...value.format,\r\n    });\r\n  }\r\n\r\n  // currency\r\n  if (type === 'currency') {\r\n    let translation;\r\n\r\n    if (type === 'currency') translation = value.currency;\r\n    // commenting out in case symbol formatting is needed in near future\r\n    // if (type === 'currencyName') translation = i18n.t(`currency.${value.currency}.name`);\r\n    // if (type === 'currencySymbol') translation = i18n.t(`currency.${value.currency}.symbol`);\r\n\r\n    return i18n.t('currency.format', {\r\n      number: numbro(value.number).format({\r\n        thousandSeparated: true,\r\n        mantissa: config.ui.format.currency.decimal,\r\n        optionalMantissa: true,\r\n        ...value.format,\r\n      }),\r\n      currency: value.currency ? translation : '',\r\n    });\r\n  }\r\n\r\n  // fallback\r\n  return value;\r\n};\r\n\r\nexport const initialiseI18n = () => {\r\n  // reset moment to \"en\" by default after loading other locales\r\n  moment.locale(config.locale);\r\n  numbro.setLanguage(config.localeCountry);\r\n\r\n  i18n.use(reactI18nextModule).init(\r\n    {\r\n      resources: {\r\n        en: {\r\n          translation: translationEN,\r\n        },\r\n        // fr: {\r\n        //   translation: translationFR\r\n        // }\r\n      },\r\n      lng: 'en',\r\n      fallbackLng: 'en',\r\n      debug: false,\r\n      interpolation: {\r\n        escapeValue: false,\r\n        format: format,\r\n      },\r\n      react: {\r\n        wait: false,\r\n      },\r\n    },\r\n    (err) => {\r\n      if (err) {\r\n        return console.error('i18n: Something went wrong loading', err);\r\n      }\r\n    }\r\n  );\r\n};\r\n\r\nexport default i18n;\r\n"]},"metadata":{},"sourceType":"module"}