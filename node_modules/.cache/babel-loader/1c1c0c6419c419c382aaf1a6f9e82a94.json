{"ast":null,"code":"import _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutProperties from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\components\\\\FormAutocompleteMui\\\\FormAutocompleteMui.view.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Controller } from 'react-hook-form';\nimport get from 'lodash/get';\nimport parse from 'autosuggest-highlight/parse';\nimport match from 'autosuggest-highlight/match';\nimport classnames from 'classnames'; // app\n\nimport * as utils from 'utils';\nimport styles from './FormAutocompleteMui.styles';\nimport uniq from 'lodash/uniq';\nimport LabelAndCreate from './LabelAndCreate'; // mui\n\nimport { makeStyles, CircularProgress, Chip, TextField } from '@material-ui/core';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nFormAutocompleteMuiView.propTypes = {\n  control: PropTypes.object,\n  name: PropTypes.string.isRequired,\n  value: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),\n  defaultValue: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),\n  options: PropTypes.array.isRequired,\n  filterOptions: PropTypes.func,\n  fieldProps: PropTypes.object.isRequired,\n  onChange: PropTypes.func,\n  onInputChange: PropTypes.func,\n  showSpinner: PropTypes.bool,\n  showCreate: PropTypes.bool,\n  nestedClasses: PropTypes.shape({\n    root: PropTypes.string\n  })\n};\nexport function FormAutocompleteMuiView(_ref) {\n  var _this = this;\n\n  var control = _ref.control,\n      setValue = _ref.setValue,\n      name = _ref.name,\n      value = _ref.value,\n      defaultValue = _ref.defaultValue,\n      options = _ref.options,\n      filterOptions = _ref.filterOptions,\n      fieldProps = _ref.fieldProps,\n      _onChange = _ref.onChange,\n      _onInputChange = _ref.onInputChange,\n      showSpinner = _ref.showSpinner,\n      nestedClasses = _ref.nestedClasses;\n  var errorMsg = get(fieldProps, 'error.message', '');\n  var isMultiple = get(fieldProps, 'muiComponentProps.multiple', false);\n  var fixedOptions = options.filter(function (option) {\n    return option.fixed;\n  });\n  var classes = makeStyles(styles, {\n    name: 'FormAutocompleteMui'\n  })({\n    multiple: isMultiple\n  });\n\n  var _ref2 = (fieldProps === null || fieldProps === void 0 ? void 0 : fieldProps.muiComponentProps) || {},\n      inputProps = _ref2.inputProps,\n      muiComponentProps = _objectWithoutProperties(_ref2, [\"inputProps\"]);\n\n  var renderAutocomplete = function renderAutocomplete(controllerOnChange, props) {\n    var propsValue = props === null || props === void 0 ? void 0 : props.value;\n    var optionKey = fieldProps.optionKey || 'value';\n    var label = (fieldProps === null || fieldProps === void 0 ? void 0 : fieldProps.showCreate) ? /*#__PURE__*/_jsxDEV(LabelAndCreate, {\n      label: fieldProps === null || fieldProps === void 0 ? void 0 : fieldProps.label,\n      targetField: fieldProps === null || fieldProps === void 0 ? void 0 : fieldProps.targetField,\n      setValue: setValue,\n      value: propsValue,\n      name: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, _this) : fieldProps === null || fieldProps === void 0 ? void 0 : fieldProps.label; // when editing draft risk the defaultValues, value/id is string or array of strings\n\n    if (typeof propsValue === 'string') {\n      var parsedValue = utils.generic.getAutocompleteValue(propsValue, options, optionKey);\n      parsedValue && utils.generic.isFunction(setValue) && setValue(name, parsedValue);\n    } else if (isMultiple && utils.generic.isValidArray(propsValue, true) && propsValue.every(function (val) {\n      return typeof val === 'string';\n    })) {\n      var parsedValues = utils.generic.getAutocompleteMultipleValues(propsValue, options, optionKey);\n      utils.generic.isValidArray(parsedValues, true) && utils.generic.isFunction(setValue) && setValue(name, parsedValues);\n    }\n\n    return /*#__PURE__*/_jsxDEV(Autocomplete, _objectSpread({\n      value: propsValue,\n      onChange: function onChange(e, data) {\n        var newData = fixedOptions.length > 0 ? uniq([].concat(_toConsumableArray(fixedOptions), _toConsumableArray(data))) : data;\n        if (utils.generic.isFunction(_onChange)) _onChange(e, newData);\n        if (utils.generic.isFunction(controllerOnChange)) controllerOnChange(newData);\n        if (utils.generic.isFunction(fieldProps === null || fieldProps === void 0 ? void 0 : fieldProps.callback)) fieldProps.callback(e, newData);\n      },\n      onInputChange: function onInputChange(e, data) {\n        if (utils.generic.isFunction(_onInputChange)) _onInputChange(e, data);\n      },\n      options: options,\n      filterOptions: filterOptions,\n      getOptionLabel: function getOptionLabel(option) {\n        return option && option[fieldProps.optionLabel] ? option[fieldProps.optionLabel] : '';\n      },\n      multiple: isMultiple,\n      className: classnames(nestedClasses.root),\n      classes: {\n        inputRoot: classes.inputRoot,\n        input: classes.input\n      },\n      ChipProps: {\n        size: 'small',\n        variant: 'outlined'\n      },\n      autoComplete: true,\n      autoHighlight: true,\n      renderTags: function renderTags(value, getTagProps) {\n        return value.map(function (option, index) {\n          return /*#__PURE__*/_jsxDEV(Chip, _objectSpread(_objectSpread({}, getTagProps({\n            index: index\n          })), {}, {\n            variant: \"outlined\",\n            size: \"small\",\n            label: option[fieldProps.optionLabel],\n            disabled: option.fixed\n          }), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, _this);\n        });\n      },\n      renderOption: function renderOption(option, _ref3) {\n        var inputValue = _ref3.inputValue;\n        var title = option[fieldProps.optionLabel];\n        var matches = match(title, inputValue);\n        var parts = parse(title, matches);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: parts.map(function (part, index) {\n            return /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                fontWeight: part.highlight ? 700 : 400\n              },\n              children: part.text\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 17\n            }, _this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, _this);\n      },\n      renderInput: function renderInput(params) {\n        return /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n          fullWidth: true,\n          variant: \"outlined\",\n          margin: \"normal\",\n          name: name,\n          label: label,\n          error: !!errorMsg,\n          helperText: !!errorMsg ? errorMsg : fieldProps.helperText,\n          placeholder: fieldProps.placeholder,\n          \"data-form-type\": \"autocomplete\",\n          inputProps: _objectSpread(_objectSpread({}, params.inputProps), inputProps),\n          InputProps: _objectSpread(_objectSpread({}, params.InputProps), {}, {\n            endAdornment: /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [showSpinner && /*#__PURE__*/_jsxDEV(CircularProgress, {\n                color: \"inherit\",\n                size: 20\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 35\n              }, _this), params.InputProps.endAdornment]\n            }, void 0, true)\n          })\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, _this);\n      },\n      disabled: fieldProps.disabled\n    }, muiComponentProps), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, _this);\n  };\n\n  return control ? /*#__PURE__*/_jsxDEV(Controller, {\n    name: name,\n    control: control,\n    defaultValue: value,\n    onChange: function onChange(_ref4) {\n      var _ref5 = _slicedToArray(_ref4, 2),\n          data = _ref5[1];\n\n      return data;\n    },\n    render: function render(_ref6) {\n      var onChange = _ref6.onChange,\n          props = _objectWithoutProperties(_ref6, [\"onChange\"]);\n\n      return renderAutocomplete(onChange, props);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this) : renderAutocomplete();\n}\n_c = FormAutocompleteMuiView;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormAutocompleteMuiView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/FormAutocompleteMui/FormAutocompleteMui.view.js"],"names":["React","PropTypes","Controller","get","parse","match","classnames","utils","styles","uniq","LabelAndCreate","makeStyles","CircularProgress","Chip","TextField","Autocomplete","FormAutocompleteMuiView","propTypes","control","object","name","string","isRequired","value","oneOfType","array","defaultValue","options","filterOptions","func","fieldProps","onChange","onInputChange","showSpinner","bool","showCreate","nestedClasses","shape","root","setValue","errorMsg","isMultiple","fixedOptions","filter","option","fixed","classes","multiple","muiComponentProps","inputProps","renderAutocomplete","controllerOnChange","props","propsValue","optionKey","label","targetField","parsedValue","generic","getAutocompleteValue","isFunction","isValidArray","every","val","parsedValues","getAutocompleteMultipleValues","e","data","newData","length","callback","optionLabel","inputRoot","input","size","variant","getTagProps","map","index","inputValue","title","matches","parts","part","fontWeight","highlight","text","params","helperText","placeholder","InputProps","endAdornment","disabled"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Controller } from 'react-hook-form';\r\nimport get from 'lodash/get';\r\nimport parse from 'autosuggest-highlight/parse';\r\nimport match from 'autosuggest-highlight/match';\r\nimport classnames from 'classnames';\r\n\r\n// app\r\nimport * as utils from 'utils';\r\nimport styles from './FormAutocompleteMui.styles';\r\nimport uniq from 'lodash/uniq';\r\nimport LabelAndCreate from './LabelAndCreate';\r\n\r\n// mui\r\nimport { makeStyles, CircularProgress, Chip, TextField } from '@material-ui/core';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nFormAutocompleteMuiView.propTypes = {\r\n  control: PropTypes.object,\r\n  name: PropTypes.string.isRequired,\r\n  value: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),\r\n  defaultValue: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),\r\n  options: PropTypes.array.isRequired,\r\n  filterOptions: PropTypes.func,\r\n  fieldProps: PropTypes.object.isRequired,\r\n  onChange: PropTypes.func,\r\n  onInputChange: PropTypes.func,\r\n  showSpinner: PropTypes.bool,\r\n  showCreate: PropTypes.bool,\r\n  nestedClasses: PropTypes.shape({\r\n    root: PropTypes.string,\r\n  }),\r\n};\r\n\r\nexport function FormAutocompleteMuiView({\r\n  control,\r\n  setValue,\r\n  name,\r\n  value,\r\n  defaultValue,\r\n  options,\r\n  filterOptions,\r\n  fieldProps,\r\n  onChange,\r\n  onInputChange,\r\n  showSpinner,\r\n  nestedClasses,\r\n}) {\r\n  const errorMsg = get(fieldProps, 'error.message', '');\r\n  const isMultiple = get(fieldProps, 'muiComponentProps.multiple', false);\r\n  const fixedOptions = options.filter((option) => option.fixed);\r\n\r\n  const classes = makeStyles(styles, { name: 'FormAutocompleteMui' })({ multiple: isMultiple });\r\n  const { inputProps, ...muiComponentProps } = fieldProps?.muiComponentProps || {};\r\n\r\n  const renderAutocomplete = (controllerOnChange, props) => {\r\n    const propsValue = props?.value;\r\n    const optionKey = fieldProps.optionKey || 'value';\r\n\r\n    const label = fieldProps?.showCreate ? (\r\n      <LabelAndCreate label={fieldProps?.label} targetField={fieldProps?.targetField} setValue={setValue} value={propsValue} name={name} />\r\n    ) : (\r\n      fieldProps?.label\r\n    );\r\n\r\n    // when editing draft risk the defaultValues, value/id is string or array of strings\r\n    if (typeof propsValue === 'string') {\r\n      const parsedValue = utils.generic.getAutocompleteValue(propsValue, options, optionKey);\r\n      parsedValue && utils.generic.isFunction(setValue) && setValue(name, parsedValue);\r\n    } else if (isMultiple && utils.generic.isValidArray(propsValue, true) && propsValue.every((val) => typeof val === 'string')) {\r\n      const parsedValues = utils.generic.getAutocompleteMultipleValues(propsValue, options, optionKey);\r\n      utils.generic.isValidArray(parsedValues, true) && utils.generic.isFunction(setValue) && setValue(name, parsedValues);\r\n    }\r\n    return (\r\n      <Autocomplete\r\n        value={propsValue}\r\n        onChange={(e, data) => {\r\n          const newData = fixedOptions.length > 0 ? uniq([...fixedOptions, ...data]) : data;\r\n          if (utils.generic.isFunction(onChange)) onChange(e, newData);\r\n          if (utils.generic.isFunction(controllerOnChange)) controllerOnChange(newData);\r\n          if (utils.generic.isFunction(fieldProps?.callback)) fieldProps.callback(e, newData);\r\n        }}\r\n        onInputChange={(e, data) => {\r\n          if (utils.generic.isFunction(onInputChange)) onInputChange(e, data);\r\n        }}\r\n        options={options}\r\n        filterOptions={filterOptions}\r\n        getOptionLabel={(option) => (option && option[fieldProps.optionLabel] ? option[fieldProps.optionLabel] : '')}\r\n        multiple={isMultiple}\r\n        className={classnames(nestedClasses.root)}\r\n        classes={{\r\n          inputRoot: classes.inputRoot,\r\n          input: classes.input,\r\n        }}\r\n        ChipProps={{\r\n          size: 'small',\r\n          variant: 'outlined',\r\n        }}\r\n        autoComplete\r\n        autoHighlight\r\n        renderTags={(value, getTagProps) => {\r\n          return value.map((option, index) => (\r\n            <Chip\r\n              {...getTagProps({ index })}\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              label={option[fieldProps.optionLabel]}\r\n              disabled={option.fixed}\r\n            />\r\n          ));\r\n        }}\r\n        renderOption={(option, { inputValue }) => {\r\n          const title = option[fieldProps.optionLabel];\r\n          const matches = match(title, inputValue);\r\n          const parts = parse(title, matches);\r\n\r\n          return (\r\n            <div>\r\n              {parts.map((part, index) => (\r\n                <span key={index} style={{ fontWeight: part.highlight ? 700 : 400 }}>\r\n                  {part.text}\r\n                </span>\r\n              ))}\r\n            </div>\r\n          );\r\n        }}\r\n        renderInput={(params) => (\r\n          <TextField\r\n            {...params}\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            name={name}\r\n            label={label}\r\n            error={!!errorMsg}\r\n            helperText={!!errorMsg ? errorMsg : fieldProps.helperText}\r\n            placeholder={fieldProps.placeholder}\r\n            data-form-type=\"autocomplete\"\r\n            inputProps={{\r\n              ...params.inputProps,\r\n              ...inputProps,\r\n            }}\r\n            InputProps={{\r\n              ...params.InputProps,\r\n              endAdornment: (\r\n                <>\r\n                  {showSpinner && <CircularProgress color=\"inherit\" size={20} />}\r\n                  {params.InputProps.endAdornment}\r\n                </>\r\n              ),\r\n            }}\r\n          />\r\n        )}\r\n        disabled={fieldProps.disabled}\r\n        {...muiComponentProps}\r\n      />\r\n    );\r\n  };\r\n\r\n  return control ? (\r\n    <Controller\r\n      name={name}\r\n      control={control}\r\n      defaultValue={value}\r\n      onChange={([, data]) => data}\r\n      render={({ onChange, ...props }) => renderAutocomplete(onChange, props)}\r\n    />\r\n  ) : (\r\n    renderAutocomplete()\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}