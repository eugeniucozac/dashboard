{"ast":null,"code":"import _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as utils from 'utils';\nimport { enqueueNotification, authLogout } from 'stores';\nimport get from 'lodash/get';\nexport var postClaimAndLossDocumentsToGxb = function postClaimAndLossDocumentsToGxb(params) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint,\n        claims = _getState.claims; // prettier-ignore\n\n\n    var referenceId = params.referenceId,\n        sectionType = params.sectionType,\n        documents = params.documents;\n    var lossDocuments = get(claims, 'dmsDocDetails.manageDocument.lossDocumentDetails') || [];\n    var claimDocuments = get(claims, 'dmsDocDetails.manageDocument.claimDocumentDetails') || [];\n    var ViewDocuments = [].concat(_toConsumableArray(lossDocuments), _toConsumableArray(claimDocuments));\n    var checkedDocuments = Object.keys(Object.fromEntries(Object.entries(documents).filter(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n\n      return value;\n    })));\n    var gxbDocuments = [];\n    ViewDocuments === null || ViewDocuments === void 0 ? void 0 : ViewDocuments.forEach(function (item) {\n      gxbDocuments.push({\n        documentId: item.documentId,\n        isSentToGxb: checkedDocuments.includes(item.documentId.toString()) ? 1 : 0,\n        referenceId: referenceId,\n        sectionType: sectionType\n      });\n    });\n    dispatch(postClaimsAndLossDocumentsToGxbRequest(gxbDocuments));\n    return utils.api.put({\n      token: auth.accessToken,\n      endpoint: endpoint.dmsService,\n      path: 'dms/document/gxbContext',\n      data: gxbDocuments\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(enqueueNotification(data === null || data === void 0 ? void 0 : data.message, 'success'));\n      dispatch(postClaimsAndLossDocumentsToGxSuccess(data === null || data === void 0 ? void 0 : data.data));\n      return data;\n    }).catch(function (err) {\n      var defaultError = {\n        file: 'stores/dms.actions.postDmsDocuments'\n      };\n      dispatch(enqueueNotification('notification.uploadDmsFile.fail', 'error'));\n      utils.api.handleError(err, defaultError);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      return dispatch(postClaimsAndLossDocumentsToGxFailure(err));\n    });\n  };\n};\nexport var postClaimsAndLossDocumentsToGxbRequest = function postClaimsAndLossDocumentsToGxbRequest(params) {\n  return {\n    type: 'DMS_POST_CLAIM_AND_LOSS_DOCUMENTS_REQUEST',\n    payload: params\n  };\n};\nexport var postClaimsAndLossDocumentsToGxSuccess = function postClaimsAndLossDocumentsToGxSuccess(data) {\n  return {\n    type: 'DMS_POST_CLAIM_AND_LOSS_DOCUMENTS_SUCCESS',\n    payload: data\n  };\n};\nexport var postClaimsAndLossDocumentsToGxFailure = function postClaimsAndLossDocumentsToGxFailure(err) {\n  return {\n    type: 'DMS_POST_CLAIM_AND_LOSS_DOCUMENTS_ERROR',\n    payload: err\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/dms/dms.actions.postClaimAndLossDocumentsToGxb.js"],"names":["utils","enqueueNotification","authLogout","get","postClaimAndLossDocumentsToGxb","params","dispatch","getState","auth","user","endpoint","config","vars","claims","referenceId","sectionType","documents","lossDocuments","claimDocuments","ViewDocuments","checkedDocuments","Object","keys","fromEntries","entries","filter","key","value","gxbDocuments","forEach","item","push","documentId","isSentToGxb","includes","toString","postClaimsAndLossDocumentsToGxbRequest","api","put","token","accessToken","dmsService","path","data","then","response","handleResponse","json","handleNewData","message","postClaimsAndLossDocumentsToGxSuccess","catch","err","defaultError","file","handleError","handleUnauthorized","postClaimsAndLossDocumentsToGxFailure","type","payload"],"mappings":"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","sourcesContent":["import * as utils from 'utils';\r\nimport { enqueueNotification, authLogout } from 'stores';\r\nimport get from 'lodash/get';\r\n\r\nexport const postClaimAndLossDocumentsToGxb = (params) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } }, claims } = getState();\r\n  // prettier-ignore\r\n  const { referenceId, sectionType, documents } = params;\r\n\r\n  const lossDocuments = get(claims, 'dmsDocDetails.manageDocument.lossDocumentDetails') || [];\r\n  const claimDocuments = get(claims, 'dmsDocDetails.manageDocument.claimDocumentDetails') || [];\r\n\r\n  const ViewDocuments = [...lossDocuments, ...claimDocuments];\r\n\r\n  const checkedDocuments = Object.keys(Object.fromEntries(Object.entries(documents).filter(([key, value]) => value)));\r\n\r\n  let gxbDocuments = [];\r\n\r\n  ViewDocuments?.forEach((item) => {\r\n    gxbDocuments.push({\r\n      documentId: item.documentId,\r\n      isSentToGxb: checkedDocuments.includes(item.documentId.toString()) ? 1 : 0,\r\n      referenceId: referenceId,\r\n      sectionType: sectionType,\r\n    });\r\n  });\r\n\r\n  dispatch(postClaimsAndLossDocumentsToGxbRequest(gxbDocuments));\r\n\r\n  return utils.api\r\n    .put({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.dmsService,\r\n      path: 'dms/document/gxbContext',\r\n      data: gxbDocuments,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(enqueueNotification(data?.message, 'success'));\r\n      dispatch(postClaimsAndLossDocumentsToGxSuccess(data?.data));\r\n      return data;\r\n    })\r\n\r\n    .catch((err) => {\r\n      const defaultError = {\r\n        file: 'stores/dms.actions.postDmsDocuments',\r\n      };\r\n      dispatch(enqueueNotification('notification.uploadDmsFile.fail', 'error'));\r\n      utils.api.handleError(err, defaultError);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      return dispatch(postClaimsAndLossDocumentsToGxFailure(err));\r\n    });\r\n};\r\n\r\nexport const postClaimsAndLossDocumentsToGxbRequest = (params) => {\r\n  return {\r\n    type: 'DMS_POST_CLAIM_AND_LOSS_DOCUMENTS_REQUEST',\r\n    payload: params,\r\n  };\r\n};\r\n\r\nexport const postClaimsAndLossDocumentsToGxSuccess = (data) => {\r\n  return {\r\n    type: 'DMS_POST_CLAIM_AND_LOSS_DOCUMENTS_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const postClaimsAndLossDocumentsToGxFailure = (err) => {\r\n  return {\r\n    type: 'DMS_POST_CLAIM_AND_LOSS_DOCUMENTS_ERROR',\r\n    payload: err,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}