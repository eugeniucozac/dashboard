{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as utils from 'utils';\nimport { authLogout, enqueueNotification } from 'stores';\nexport var searchRiskRefIds = function searchRiskRefIds(query) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/processingInstructions.actions.getRiskRefIds'\n    };\n    dispatch(searchRiskRefIdsRequest(query));\n\n    if (!query) {\n      dispatch(searchRiskRefIdsFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Missing risk reference id search query'\n      })));\n      return;\n    }\n\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.ppService,\n      path: \"risk/reference/dropdownSearch/\".concat(query)\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      if (json && json.status === 'OK' && json.data) {\n        if (json.data.length === 0) {\n          dispatch(enqueueNotification(utils.string.t('processingInstructions.noRiskRefInDepartAndInstance', {\n            query: query\n          }), 'warning'));\n          return;\n        } // success\n\n\n        dispatch(searchRiskRefIdsSuccess(json.data));\n        return json.data;\n      } else {\n        // fail\n        return Promise.reject(_objectSpread({\n          message: \"API data format error\".concat(json.status ? \" (\".concat(json.status, \")\") : '')\n        }, json && _objectSpread({}, json)));\n      }\n    })[\"catch\"](function (err) {\n      utils.api.handleError(err, _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API fetch error (processingInstructions.searchRiskRefIds)'\n      }));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(searchRiskRefIdsFailure(err));\n      return err;\n    });\n  };\n};\nexport var searchRiskRefIdsRequest = function searchRiskRefIdsRequest(query) {\n  return {\n    type: 'PROCESSING_INSTRUCTIONS_SEARCH_RISK_IDS_REQUEST',\n    payload: query\n  };\n};\nexport var searchRiskRefIdsSuccess = function searchRiskRefIdsSuccess(responseData) {\n  return {\n    type: 'PROCESSING_INSTRUCTIONS_SEARCH_RISK_IDS_SUCCESS',\n    payload: responseData\n  };\n};\nexport var searchRiskRefIdsFailure = function searchRiskRefIdsFailure(error) {\n  return {\n    type: 'PROCESSING_INSTRUCTIONS_SEARCH_RISK_IDS_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/processingInstructions/processingInstructions.actions.getRiskRefIds.js"],"names":["utils","authLogout","enqueueNotification","searchRiskRefIds","query","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","searchRiskRefIdsRequest","searchRiskRefIdsFailure","message","api","get","token","accessToken","ppService","path","then","response","handleResponse","json","status","data","length","string","t","searchRiskRefIdsSuccess","Promise","reject","err","handleError","handleUnauthorized","type","payload","responseData","error"],"mappings":"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","sourcesContent":["import * as utils from 'utils';\r\nimport { authLogout, enqueueNotification } from 'stores';\r\n\r\nexport const searchRiskRefIds = (query) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/processingInstructions.actions.getRiskRefIds',\r\n  };\r\n\r\n  dispatch(searchRiskRefIdsRequest(query));\r\n\r\n  if (!query) {\r\n    dispatch(searchRiskRefIdsFailure({ ...defaultError, message: 'Missing risk reference id search query' }));\r\n    return;\r\n  }\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.ppService,\r\n      path: `risk/reference/dropdownSearch/${query}`,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => {\r\n      if (json && json.status === 'OK' && json.data) {\r\n        if (json.data.length === 0) {\r\n          dispatch(enqueueNotification(utils.string.t('processingInstructions.noRiskRefInDepartAndInstance', { query: query }), 'warning'));\r\n          return;\r\n        }\r\n        // success\r\n        dispatch(searchRiskRefIdsSuccess(json.data));\r\n        return json.data;\r\n      } else {\r\n        // fail\r\n        return Promise.reject({\r\n          message: `API data format error${json.status ? ` (${json.status})` : ''}`,\r\n          ...(json && { ...json }),\r\n        });\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      utils.api.handleError(err, { ...defaultError, message: 'API fetch error (processingInstructions.searchRiskRefIds)' });\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(searchRiskRefIdsFailure(err));\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const searchRiskRefIdsRequest = (query) => {\r\n  return {\r\n    type: 'PROCESSING_INSTRUCTIONS_SEARCH_RISK_IDS_REQUEST',\r\n    payload: query,\r\n  };\r\n};\r\n\r\nexport const searchRiskRefIdsSuccess = (responseData) => {\r\n  return {\r\n    type: 'PROCESSING_INSTRUCTIONS_SEARCH_RISK_IDS_SUCCESS',\r\n    payload: responseData,\r\n  };\r\n};\r\n\r\nexport const searchRiskRefIdsFailure = (error) => {\r\n  return {\r\n    type: 'PROCESSING_INSTRUCTIONS_SEARCH_RISK_IDS_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}