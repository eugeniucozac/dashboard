{"ast":null,"code":"var _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\LayerMarketTableInfoRow\\\\LayerMarketTableInfoRow.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux'; // app\n\nimport styles from './LayerMarketTableInfoRow.style';\nimport { TableCell, Translate, Badge } from 'components';\nimport { selectRefDataStatusesMarketQuote } from 'stores';\nimport * as utils from 'utils';\nimport { makeStyles, TableRow } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nLayerMarketTableInfoRow.propTypes = {\n  marketGroup: PropTypes.array.isRequired\n};\nexport default function LayerMarketTableInfoRow(_ref) {\n  _s();\n\n  var _marketGroup$;\n\n  var marketGroup = _ref.marketGroup;\n  var classes = makeStyles(styles, {\n    name: 'LayerMarketTableInfoRow'\n  })();\n  var currency = utils.markets.getCurrency(marketGroup);\n  var layerPremiumByCurrency = utils.markets.getPremiumByCurrency(marketGroup, currency, false, false);\n  var hasMultiplePremiums = utils.markets.hasMultiplePremiums(marketGroup);\n  var hasPremium = layerPremiumByCurrency[currency];\n  var layerWritten = utils.markets.getLineSize(marketGroup);\n  var referenceDataStatusesPolicyMarketQuote = useSelector(selectRefDataStatusesMarketQuote);\n  var marketStatus = utils.referenceData.status.getLabelById(referenceDataStatusesPolicyMarketQuote, (_marketGroup$ = marketGroup[0]) === null || _marketGroup$ === void 0 ? void 0 : _marketGroup$.statusId);\n  var badgeTypes = {\n    quoted: 'success',\n    declined: 'error',\n    pending: 'alert',\n    undefined: 'alert'\n  };\n  var checkRowLength = marketStatus === 'quoted' ? 0 : 1;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: marketGroup.length > checkRowLength ? /*#__PURE__*/_jsxDEV(TableRow, {\n      className: classes.infoRow,\n      \"data-testid\": \"layer-row\",\n      children: [/*#__PURE__*/_jsxDEV(TableCell, {\n        colSpan: 3,\n        \"data-testid\": \"layer-main-cell\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n        narrow: true,\n        nowrap: true,\n        center: true,\n        bold: true,\n        \"data-testid\": \"layer-premium-cell\",\n        children: hasMultiplePremiums || !currency ? utils.string.t('app.various') : /*#__PURE__*/_jsxDEV(Translate, {\n          label: \"format.currency\",\n          options: {\n            value: {\n              number: Boolean(layerPremiumByCurrency[currency]) ? layerPremiumByCurrency[currency] : null,\n              currency: hasPremium ? currency : '',\n              \"default\": '-'\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n        narrow: true,\n        nowrap: true,\n        center: true,\n        bold: true,\n        \"data-testid\": \"layer-written-cell\",\n        children: /*#__PURE__*/_jsxDEV(Translate, {\n          label: \"format.percent\",\n          options: {\n            value: {\n              number: layerWritten\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n        compact: true,\n        narrow: true,\n        nowrap: true,\n        center: true,\n        bold: true,\n        \"data-testid\": \"layer-status-cell\",\n        children: /*#__PURE__*/_jsxDEV(Badge, {\n          type: badgeTypes[marketStatus],\n          standalone: true,\n          badgeContent: marketGroup.length,\n          showZero: true,\n          className: classes.item,\n          \"data-testid\": \"success-badge\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n        colSpan: 2,\n        \"data-testid\": \"layer-main-cell\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this) : null\n  }, void 0, false);\n}\n\n_s(LayerMarketTableInfoRow, \"Wq6+z9pttSZjvoe6TSYG0+I3KA8=\", false, function () {\n  return [useSelector];\n});\n\n_c = LayerMarketTableInfoRow;\nLayerMarketTableInfoRow.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"LayerMarketTableInfoRow\",\n  \"props\": {\n    \"marketGroup\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\modules\\\\LayerMarketTableInfoRow\\\\LayerMarketTableInfoRow.js\"] = {\n    name: \"LayerMarketTableInfoRow\",\n    docgenInfo: LayerMarketTableInfoRow.__docgenInfo,\n    path: \"src\\\\modules\\\\LayerMarketTableInfoRow\\\\LayerMarketTableInfoRow.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"LayerMarketTableInfoRow\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/LayerMarketTableInfoRow/LayerMarketTableInfoRow.js"],"names":["React","PropTypes","useSelector","styles","TableCell","Translate","Badge","selectRefDataStatusesMarketQuote","utils","makeStyles","TableRow","LayerMarketTableInfoRow","propTypes","marketGroup","array","isRequired","classes","name","currency","markets","getCurrency","layerPremiumByCurrency","getPremiumByCurrency","hasMultiplePremiums","hasPremium","layerWritten","getLineSize","referenceDataStatusesPolicyMarketQuote","marketStatus","referenceData","status","getLabelById","statusId","badgeTypes","quoted","declined","pending","undefined","checkRowLength","length","infoRow","string","t","value","number","Boolean","item"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector } from 'react-redux';\r\n\r\n// app\r\nimport styles from './LayerMarketTableInfoRow.style';\r\nimport { TableCell, Translate, Badge } from 'components';\r\nimport { selectRefDataStatusesMarketQuote } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nimport { makeStyles, TableRow } from '@material-ui/core';\r\n\r\nLayerMarketTableInfoRow.propTypes = {\r\n  marketGroup: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default function LayerMarketTableInfoRow({ marketGroup }) {\r\n  const classes = makeStyles(styles, { name: 'LayerMarketTableInfoRow' })();\r\n\r\n  const currency = utils.markets.getCurrency(marketGroup);\r\n  const layerPremiumByCurrency = utils.markets.getPremiumByCurrency(marketGroup, currency, false, false);\r\n  const hasMultiplePremiums = utils.markets.hasMultiplePremiums(marketGroup);\r\n  const hasPremium = layerPremiumByCurrency[currency];\r\n  const layerWritten = utils.markets.getLineSize(marketGroup);\r\n  const referenceDataStatusesPolicyMarketQuote = useSelector(selectRefDataStatusesMarketQuote);\r\n\r\n  const marketStatus = utils.referenceData.status.getLabelById(referenceDataStatusesPolicyMarketQuote, marketGroup[0]?.statusId);\r\n  const badgeTypes = {\r\n    quoted: 'success',\r\n    declined: 'error',\r\n    pending: 'alert',\r\n    undefined: 'alert',\r\n  };\r\n\r\n  const checkRowLength = marketStatus === 'quoted' ? 0 : 1;\r\n\r\n  return (\r\n    <>\r\n      {marketGroup.length > checkRowLength ? (\r\n        <TableRow className={classes.infoRow} data-testid=\"layer-row\">\r\n          <TableCell colSpan={3} data-testid=\"layer-main-cell\"></TableCell>\r\n\r\n          <TableCell narrow nowrap center bold data-testid=\"layer-premium-cell\">\r\n            {hasMultiplePremiums || !currency ? (\r\n              utils.string.t('app.various')\r\n            ) : (\r\n              <Translate\r\n                label=\"format.currency\"\r\n                options={{\r\n                  value: {\r\n                    number: Boolean(layerPremiumByCurrency[currency]) ? layerPremiumByCurrency[currency] : null,\r\n                    currency: hasPremium ? currency : '',\r\n                    default: '-',\r\n                  },\r\n                }}\r\n              />\r\n            )}\r\n          </TableCell>\r\n\r\n          <TableCell narrow nowrap center bold data-testid=\"layer-written-cell\">\r\n            <Translate label=\"format.percent\" options={{ value: { number: layerWritten } }} />\r\n          </TableCell>\r\n\r\n          <TableCell compact narrow nowrap center bold data-testid=\"layer-status-cell\">\r\n            <Badge\r\n              type={badgeTypes[marketStatus]}\r\n              standalone\r\n              badgeContent={marketGroup.length}\r\n              showZero={true}\r\n              className={classes.item}\r\n              data-testid=\"success-badge\"\r\n            />\r\n          </TableCell>\r\n          <TableCell colSpan={2} data-testid=\"layer-main-cell\"></TableCell>\r\n        </TableRow>\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}