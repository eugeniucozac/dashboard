{"ast":null,"code":"import _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\TasksManagement\\\\TasksManagement.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { useParams } from 'react-router';\nimport { useHistory } from 'react-router';\nimport get from 'lodash/get'; //app\n\nimport { showModal, hideModal, selectClaimsTasksProcessingFilterLoading, selectClaimsTasksProcessingFilterValues, selectPremiumProcessingFilterValues, selectClaimsTasksProcessing, selectedClaimsProcessingTaskType, selectedPremiumProcessingTaskType, selectEditAdhocTaskStatus, getClaimsTasksProcessing, resetClaimsProcessingTasksItems, resetClaimsProcessingTasksFilters, resetClaimsProcessingTaskSearch, resetPremiumProcessingTaskSearch, selectCasesList, getPremiumProcessingTasksDetails, getTaskCaseViewType, selectMultiSelectedCase, selectUser, resetPremiumProcessingTasksFilters, enqueueNotification, resetPremiumProcessingTaskDetails, collapseNav, udpateIsCheckSigningToggle } from 'stores';\nimport { TasksManagementView } from './TasksManagement.view';\nimport styles from './TasksManagement.styles';\nimport { MultiSelect, FormDate } from 'components';\nimport * as utils from 'utils';\nimport { useFlexiColumns } from 'hooks';\nimport { TEAM_TASKS_SPECIFIC_COLUMNS, TASK_TEAM_TYPE, TASKS_SEARCH_OPTION_PROCESS_REF, TASKS_SEARCH_OPTION_DESCRIPTION, TASKS_SEARCH_OPTION_TASKI_REF, TASKS_SEARCH_OPTION_ASSIGNED_TO, CLAIM_PROCESSING_REQ_TYPES, API_RESPONSE_OK, TASKS_SEARCH_OPTION_WORK_PACKAGE_REFERENCE } from 'consts';\nimport config from 'config'; //mui\n\nimport { makeStyles } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nTasksManagement.propTypes = {\n  isPremiumProcessing: PropTypes.bool,\n  premiumProcessingSaveAssigneeDetails: PropTypes.func\n};\nexport default function TasksManagement(_ref) {\n  _s();\n\n  var _ref$isPremiumProcess = _ref.isPremiumProcessing,\n      isPremiumProcessing = _ref$isPremiumProcess === void 0 ? false : _ref$isPremiumProcess,\n      premiumProcessingSaveAssigneeDetails = _ref.premiumProcessingSaveAssigneeDetails;\n  var classes = makeStyles(styles, {\n    name: 'TasksManagement'\n  })();\n  var dispatch = useDispatch();\n  var params = useParams();\n  var history = useHistory();\n  var claimsTasksProcessing = useSelector(selectClaimsTasksProcessing);\n  var claimsTasksProcessingFilters = useSelector(selectClaimsTasksProcessingFilterValues);\n  var editAdhocStatus = useSelector(selectEditAdhocTaskStatus);\n  var premiumProcessingCaseList = useSelector(selectCasesList);\n  var premiumProcessingFilters = useSelector(selectPremiumProcessingFilterValues);\n  var loggedUserDetails = useSelector(selectUser);\n  var userRoleDetails = loggedUserDetails === null || loggedUserDetails === void 0 ? void 0 : loggedUserDetails.userRole;\n  var uiNavExpanded = useSelector(function (state) {\n    return get(state, 'ui.nav.expanded');\n  });\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isCheckSigningValue = _useState2[0],\n      setIsCheckSigningValue = _useState2[1];\n\n  var ppMultiSelectedCasesList = useSelector(selectMultiSelectedCase);\n  var isFetchingFilters = useSelector(selectClaimsTasksProcessingFilterLoading);\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      newPage = _useState4[0],\n      setNewPage = _useState4[1];\n\n  var _useState5 = useState(utils.string.t('claims.searchByTasks.options.TaskRef')),\n      _useState6 = _slicedToArray(_useState5, 2),\n      searchByText = _useState6[0],\n      setSearchByText = _useState6[1];\n\n  var selectedTaskViewType = TASK_TEAM_TYPE.myTask;\n\n  if (isPremiumProcessing && utils.generic.isValidArray(userRoleDetails, true) && (utils.user.isSeniorManager(userRoleDetails[0]) || utils.user.isAdminUser(userRoleDetails[0]))) {\n    selectedTaskViewType = TASK_TEAM_TYPE.myTeam;\n  }\n\n  var _useState7 = useState(isPremiumProcessing ? selectedTaskViewType : claimsTasksProcessing.taskType || TASK_TEAM_TYPE.myTask),\n      _useState8 = _slicedToArray(_useState7, 2),\n      taskType = _useState8[0],\n      setTaskType = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      isTaskTeam = _useState10[0],\n      setIsTaskTeam = _useState10[1];\n\n  var _useState11 = useState(''),\n      _useState12 = _slicedToArray(_useState11, 2),\n      searchTerm = _useState12[0],\n      setSearchTerm = _useState12[1];\n\n  var searchTypeCall = CLAIM_PROCESSING_REQ_TYPES.search;\n  var filterTypeCall = CLAIM_PROCESSING_REQ_TYPES.filter;\n  var refId = params.refId;\n  var selectOptions = [{\n    label: utils.string.t('claims.searchByTasks.options.TaskRef'),\n    value: TASKS_SEARCH_OPTION_TASKI_REF\n  }, {\n    label: isPremiumProcessing ? utils.string.t('claims.searchByTasks.options.riskRef') : utils.string.t('claims.searchByTasks.options.ClaimRef'),\n    value: TASKS_SEARCH_OPTION_PROCESS_REF\n  }, {\n    label: utils.string.t('claims.searchByTasks.options.Description'),\n    value: TASKS_SEARCH_OPTION_DESCRIPTION\n  }].concat(_toConsumableArray(taskType === TASK_TEAM_TYPE.myTeam ? [{\n    label: utils.string.t('claims.searchByTasks.options.AssignedTo'),\n    value: TASKS_SEARCH_OPTION_ASSIGNED_TO\n  }] : []), _toConsumableArray(isCheckSigningValue ? [{\n    label: utils.string.t('claims.searchByTasks.options.workPackage'),\n    value: TASKS_SEARCH_OPTION_WORK_PACKAGE_REFERENCE\n  }] : []));\n  var taskTypeOptions = [{\n    value: 'myTask',\n    label: utils.string.t('claims.processing.myTasks')\n  }, {\n    value: 'myTeam',\n    label: utils.string.t('claims.processing.myTeamTasks')\n  }].concat(_toConsumableArray(isPremiumProcessing ? [{\n    value: 'taskHistory',\n    label: utils.string.t('claims.processing.tasksHistory')\n  }] : []));\n\n  if (isPremiumProcessing) {\n    if (utils.user.isSeniorManager((userRoleDetails === null || userRoleDetails === void 0 ? void 0 : userRoleDetails.length) > 0 && userRoleDetails[0]) || utils.user.isAdminUser((userRoleDetails === null || userRoleDetails === void 0 ? void 0 : userRoleDetails.length) > 0 && userRoleDetails[0])) {\n      taskTypeOptions = [{\n        value: 'myTeam',\n        label: utils.string.t('claims.processing.myTeamTasks')\n      }, {\n        value: 'taskHistory',\n        label: utils.string.t('claims.processing.tasksHistory')\n      }];\n    }\n  }\n\n  var fields = [{\n    name: 'taskType',\n    type: 'radio',\n    value: taskType,\n    defaultValue: taskType,\n    muiFormGroupProps: {\n      row: true,\n      classes: {\n        root: classes.radioLabel\n      }\n    },\n    options: taskTypeOptions\n  }, {\n    name: isPremiumProcessing ? 'caseCreatedOn' : 'createdOn',\n    type: 'datepicker',\n    value: null\n  }, {\n    name: 'targetDueDate',\n    type: 'datepicker',\n    value: null\n  }, {\n    name: 'inceptionDate',\n    type: 'datepicker',\n    value: null\n  }, {\n    name: 'searchType',\n    type: 'autocompletemui',\n    options: selectOptions,\n    value: (selectOptions === null || selectOptions === void 0 ? void 0 : selectOptions.find(function (item) {\n      return (item === null || item === void 0 ? void 0 : item.value) === isPremiumProcessing ? TASKS_SEARCH_OPTION_TASKI_REF : TASKS_SEARCH_OPTION_PROCESS_REF;\n    })) || null,\n    muiComponentProps: {\n      inputProps: {\n        title: searchByText || ''\n      }\n    },\n    validation: Yup.object().nullable().required(utils.string.t('validation.required')),\n    callback: function callback(event, data) {\n      setSearchByText(data === null || data === void 0 ? void 0 : data.label);\n    }\n  }];\n  var defaultValues = utils.form.getInitialValues(fields);\n  var validationSchema = utils.form.getValidationSchema(fields);\n\n  var _useForm = useForm(_objectSpread({\n    defaultValues: defaultValues\n  }, validationSchema && {\n    resolver: yupResolver(validationSchema)\n  })),\n      control = _useForm.control,\n      watch = _useForm.watch,\n      setValue = _useForm.setValue;\n\n  var taskTypeValue = watch('taskType');\n  var watchSearchType = watch('searchType');\n  var yesNoOptions = [{\n    id: utils.string.t('app.yes'),\n    name: utils.string.t('app.yes')\n  }, {\n    id: utils.string.t('app.no'),\n    name: utils.string.t('app.no')\n  }];\n  var tableFilterFields = [].concat(_toConsumableArray(!isPremiumProcessing ? [{\n    id: isPremiumProcessing ? 'caseCreatedOn' : 'createdOn',\n    type: 'datepicker',\n    label: utils.string.t('claims.processing.tasksGridColumns.dateAndTimeCreated'),\n    value: '',\n    content: /*#__PURE__*/_jsxDEV(FormDate, _objectSpread(_objectSpread({\n      control: control\n    }, utils.form.getFieldProps(defaultValues, isPremiumProcessing ? 'caseCreatedOn' : 'createdOn')), {}, {\n      id: \"creationdatepicker\",\n      name: isPremiumProcessing ? 'caseCreatedOn' : 'createdOn',\n      type: \"datepicker\",\n      value: '',\n      label: '',\n      plainText: true,\n      plainTextIcon: true,\n      placeholder: utils.string.t('app.selectDate'),\n      muiComponentProps: {\n        fullWidth: false,\n        margin: 'dense'\n      },\n      muiPickerProps: {\n        clearable: false,\n        variant: 'inline',\n        format: 'DD-MM-YYYY'\n      }\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 13\n    }, this)\n  }] : []), [{\n    id: 'targetDueDate',\n    type: 'datepicker',\n    label: utils.string.t('claims.processing.tasksGridColumns.dueDate'),\n    value: '',\n    content: /*#__PURE__*/_jsxDEV(FormDate, _objectSpread(_objectSpread({\n      control: control\n    }, utils.form.getFieldProps(defaultValues, 'targetDueDate')), {}, {\n      id: \"duedatepicker\",\n      name: \"targetDueDate\",\n      type: \"datepicker\",\n      value: '',\n      label: '',\n      plainText: true,\n      plainTextIcon: true,\n      placeholder: utils.string.t('app.selectDate'),\n      muiComponentProps: {\n        fullWidth: false,\n        margin: 'dense'\n      },\n      muiPickerProps: {\n        clearable: false,\n        variant: 'inline',\n        format: 'DD-MM-YYYY'\n      }\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 9\n    }, this)\n  }, {\n    id: 'taskType',\n    type: 'multiSelect',\n    label: utils.string.t('claims.processing.tasksGridColumns.taskType'),\n    value: [],\n    options: isPremiumProcessing ? premiumProcessingFilters === null || premiumProcessingFilters === void 0 ? void 0 : premiumProcessingFilters.taskType : claimsTasksProcessingFilters === null || claimsTasksProcessingFilters === void 0 ? void 0 : claimsTasksProcessingFilters.taskType,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"taskType\",\n      search: true,\n      options: isPremiumProcessing ? premiumProcessingFilters === null || premiumProcessingFilters === void 0 ? void 0 : premiumProcessingFilters.taskType : claimsTasksProcessingFilters === null || claimsTasksProcessingFilters === void 0 ? void 0 : claimsTasksProcessingFilters.taskType\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 9\n    }, this)\n  }, {\n    id: 'priority',\n    type: 'multiSelect',\n    label: utils.string.t('claims.processing.tasksGridColumns.priority'),\n    value: [],\n    options: isPremiumProcessing ? premiumProcessingFilters === null || premiumProcessingFilters === void 0 ? void 0 : premiumProcessingFilters.priority : claimsTasksProcessingFilters === null || claimsTasksProcessingFilters === void 0 ? void 0 : claimsTasksProcessingFilters.priority,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"priority\",\n      search: true,\n      options: isPremiumProcessing ? premiumProcessingFilters === null || premiumProcessingFilters === void 0 ? void 0 : premiumProcessingFilters.priority : claimsTasksProcessingFilters === null || claimsTasksProcessingFilters === void 0 ? void 0 : claimsTasksProcessingFilters.priority\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 9\n    }, this)\n  }, {\n    id: 'status',\n    type: 'multiSelect',\n    label: utils.string.t('claims.processing.tasksGridColumns.status'),\n    value: [],\n    options: isPremiumProcessing ? premiumProcessingFilters === null || premiumProcessingFilters === void 0 ? void 0 : premiumProcessingFilters.status : claimsTasksProcessingFilters === null || claimsTasksProcessingFilters === void 0 ? void 0 : claimsTasksProcessingFilters.status,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"status\",\n      search: true,\n      options: isPremiumProcessing ? premiumProcessingFilters === null || premiumProcessingFilters === void 0 ? void 0 : premiumProcessingFilters.status : claimsTasksProcessingFilters === null || claimsTasksProcessingFilters === void 0 ? void 0 : claimsTasksProcessingFilters.status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 9\n    }, this)\n  }, {\n    id: 'createdBy',\n    type: 'multiSelect',\n    label: utils.string.t('claims.processing.tasksGridColumns.createdBy'),\n    value: [],\n    options: isPremiumProcessing ? premiumProcessingFilters === null || premiumProcessingFilters === void 0 ? void 0 : premiumProcessingFilters.requestedBy : claimsTasksProcessingFilters === null || claimsTasksProcessingFilters === void 0 ? void 0 : claimsTasksProcessingFilters.requestedBy,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"createdBy\",\n      search: true,\n      options: isPremiumProcessing ? premiumProcessingFilters === null || premiumProcessingFilters === void 0 ? void 0 : premiumProcessingFilters.requestedBy : claimsTasksProcessingFilters === null || claimsTasksProcessingFilters === void 0 ? void 0 : claimsTasksProcessingFilters.requestedBy\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 9\n    }, this)\n  }, {\n    id: 'assignee',\n    type: 'multiSelect',\n    label: utils.string.t('claims.processing.tasksGridColumns.assignedTo'),\n    value: [],\n    options: isPremiumProcessing ? premiumProcessingFilters === null || premiumProcessingFilters === void 0 ? void 0 : premiumProcessingFilters.assignee : claimsTasksProcessingFilters === null || claimsTasksProcessingFilters === void 0 ? void 0 : claimsTasksProcessingFilters.assignee,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"assignee\",\n      search: true,\n      options: isPremiumProcessing ? premiumProcessingFilters === null || premiumProcessingFilters === void 0 ? void 0 : premiumProcessingFilters.assignee : claimsTasksProcessingFilters === null || claimsTasksProcessingFilters === void 0 ? void 0 : claimsTasksProcessingFilters.assignee\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 9\n    }, this)\n  }], _toConsumableArray(!isPremiumProcessing ? [{\n    id: 'additionalAssignee',\n    type: 'multiSelect',\n    label: utils.string.t('claims.processing.tasksGridColumns.additionalAssignee'),\n    value: [],\n    options: claimsTasksProcessingFilters === null || claimsTasksProcessingFilters === void 0 ? void 0 : claimsTasksProcessingFilters.additionalAssignee,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"additionalAssignee\",\n      search: true,\n      options: claimsTasksProcessingFilters === null || claimsTasksProcessingFilters === void 0 ? void 0 : claimsTasksProcessingFilters.additionalAssignee\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 20\n    }, this)\n  }] : [{\n    id: 'inceptionDate',\n    type: 'datepicker',\n    label: utils.string.t('claims.processing.tasksGridColumns.inceptionDate'),\n    value: '',\n    content: /*#__PURE__*/_jsxDEV(FormDate, _objectSpread(_objectSpread({\n      control: control\n    }, utils.form.getFieldProps(defaultValues, 'inceptionDate')), {}, {\n      id: \"inceptionDatedatepicker\",\n      name: \"inceptionDate\",\n      type: \"datepicker\",\n      value: '',\n      label: '',\n      plainText: true,\n      plainTextIcon: true,\n      placeholder: utils.string.t('app.selectDate'),\n      muiComponentProps: {\n        fullWidth: false,\n        margin: 'dense'\n      },\n      muiPickerProps: {\n        clearable: false,\n        variant: 'inline',\n        format: 'DD-MM-YYYY'\n      }\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 13\n    }, this)\n  }, {\n    id: 'insuredName',\n    type: 'multiSelect',\n    label: utils.string.t('claims.processing.tasksGridColumns.insuredName'),\n    value: [],\n    options: isPremiumProcessing ? premiumProcessingFilters === null || premiumProcessingFilters === void 0 ? void 0 : premiumProcessingFilters.assuredName : claimsTasksProcessingFilters === null || claimsTasksProcessingFilters === void 0 ? void 0 : claimsTasksProcessingFilters.insuredName,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"insuredName\",\n      search: true,\n      options: isPremiumProcessing ? premiumProcessingFilters === null || premiumProcessingFilters === void 0 ? void 0 : premiumProcessingFilters.assuredName : claimsTasksProcessingFilters === null || claimsTasksProcessingFilters === void 0 ? void 0 : claimsTasksProcessingFilters.insuredName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 13\n    }, this)\n  }, {\n    id: 'division',\n    type: 'multiSelect',\n    label: utils.string.t('claims.processing.tasksGridColumns.division'),\n    value: [],\n    options: isPremiumProcessing ? premiumProcessingFilters === null || premiumProcessingFilters === void 0 ? void 0 : premiumProcessingFilters.division : claimsTasksProcessingFilters === null || claimsTasksProcessingFilters === void 0 ? void 0 : claimsTasksProcessingFilters.division,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"division\",\n      search: true,\n      options: isPremiumProcessing ? premiumProcessingFilters === null || premiumProcessingFilters === void 0 ? void 0 : premiumProcessingFilters.division : claimsTasksProcessingFilters === null || claimsTasksProcessingFilters === void 0 ? void 0 : claimsTasksProcessingFilters.division\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 13\n    }, this)\n  }, {\n    id: 'instructionId',\n    type: 'multiSelect',\n    label: utils.string.t('claims.processing.tasksGridColumns.instructionId'),\n    value: [],\n    options: premiumProcessingFilters === null || premiumProcessingFilters === void 0 ? void 0 : premiumProcessingFilters.instructionId,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"instructionId\",\n      search: true,\n      options: premiumProcessingFilters === null || premiumProcessingFilters === void 0 ? void 0 : premiumProcessingFilters.instructionId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 20\n    }, this)\n  }, {\n    id: 'processSubType',\n    type: 'multiSelect',\n    label: utils.string.t('claims.processing.tasksGridColumns.processSubType'),\n    value: [],\n    options: premiumProcessingFilters === null || premiumProcessingFilters === void 0 ? void 0 : premiumProcessingFilters.processSubType,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"processSubType\",\n      search: true,\n      options: premiumProcessingFilters === null || premiumProcessingFilters === void 0 ? void 0 : premiumProcessingFilters.processSubType\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 20\n    }, this)\n  }]), _toConsumableArray(isPremiumProcessing ? [{\n    id: 'ppc',\n    type: 'multiSelect',\n    label: utils.string.t('claims.processing.tasksGridColumns.ppwPPC'),\n    value: [],\n    options: yesNoOptions,\n    nestedClasses: {\n      root: classes.fieldWidth\n    },\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"ppc\",\n      search: true,\n      options: yesNoOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 20\n    }, this)\n  }] : []));\n  var columns = [{\n    id: 'id',\n    empty: true,\n    visible: true\n  }, _objectSpread(_objectSpread({\n    id: 'taskRef',\n    label: utils.string.t('claims.processing.tasksGridColumns.taskRef')\n  }, !isPremiumProcessing && {\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    }\n  }), {}, {\n    nowrap: true,\n    visible: true,\n    mandatory: !isPremiumProcessing ? true : false\n  }), _objectSpread(_objectSpread({\n    id: 'createdOn',\n    label: utils.string.t('claims.processing.tasksGridColumns.dateAndTimeCreated')\n  }, !isPremiumProcessing && {\n    sort: {\n      type: 'date',\n      direction: 'asc'\n    }\n  }), {}, {\n    nowrap: true,\n    visible: true,\n    mandatory: !isPremiumProcessing ? true : false\n  }), {\n    id: isPremiumProcessing ? 'taskName' : 'taskType',\n    label: utils.string.t('claims.processing.tasksGridColumns.taskName'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }, {\n    id: 'description',\n    label: utils.string.t('claims.processing.tasksGridColumns.description'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true,\n    ellipsis: true\n  }, {\n    id: 'targetDueDate',\n    label: utils.string.t('claims.processing.tasksGridColumns.dueDate'),\n    sort: {\n      type: 'date',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: !isPremiumProcessing\n  }, {\n    id: 'processRef',\n    label: isPremiumProcessing ? utils.string.t('claims.processing.tasksGridColumns.riskRef') : utils.string.t('claims.processing.tasksGridColumns.claimRef'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: !isPremiumProcessing\n  }, {\n    id: 'assignee',\n    label: utils.string.t('claims.processing.tasksGridColumns.assignedTo'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }].concat(_toConsumableArray(!isPremiumProcessing ? [{\n    id: 'additionalAssignee',\n    label: utils.string.t('claims.processing.tasksGridColumns.additionalAssignee'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: isPremiumProcessing ? false : true\n  }] : []), [{\n    id: 'priority',\n    label: utils.string.t('claims.processing.tasksGridColumns.priority'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }, {\n    id: 'status',\n    label: utils.string.t('claims.processing.tasksGridColumns.status'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }], _toConsumableArray(!isPremiumProcessing ? [{\n    id: 'team',\n    label: utils.string.t('app.team'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true\n  }] : []), _toConsumableArray(isPremiumProcessing ? [{\n    id: 'inceptionDate',\n    label: utils.string.t('claims.processing.tasksGridColumns.inceptionDate'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }, {\n    id: 'assuredName',\n    label: utils.string.t('claims.processing.tasksGridColumns.insuredName'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }, {\n    id: 'type',\n    label: utils.string.t('claims.processing.tasksGridColumns.type'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }, {\n    id: 'group',\n    label: utils.string.t('claims.processing.tasksGridColumns.group'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true\n  }, {\n    id: 'departmentName',\n    label: utils.string.t('claims.processing.tasksGridColumns.division'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true\n  }, {\n    id: 'processSubType',\n    label: utils.string.t('claims.processing.tasksGridColumns.processSubType'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true\n  }, {\n    id: 'xbInstanceId',\n    label: utils.string.t('claims.processing.tasksGridColumns.xbInstance'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true\n  }] : [{\n    id: 'requestedBy',\n    label: utils.string.t('claims.processing.tasksGridColumns.createdBy'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }, {\n    id: 'actions',\n    menu: true,\n    visible: true,\n    mandatory: true\n  }]), _toConsumableArray(isPremiumProcessing && taskType === TASK_TEAM_TYPE.myTeam ? [{\n    id: 'actions',\n    menu: true,\n    visible: true,\n    mandatory: true\n  }] : []));\n\n  var _useFlexiColumns = useFlexiColumns(columns),\n      columnsArray = _useFlexiColumns.columns,\n      columnProps = _useFlexiColumns.columnProps,\n      toggleColumn = _useFlexiColumns.toggleColumn,\n      isTableHidden = _useFlexiColumns.isTableHidden;\n\n  if (isPremiumProcessing) {\n    var _columnsVisible$;\n\n    var columnsVisible = columnsArray === null || columnsArray === void 0 ? void 0 : columnsArray.filter(function (columnData) {\n      return columnData.visible !== false;\n    });\n\n    if ((columnsVisible === null || columnsVisible === void 0 ? void 0 : columnsVisible.length) === 2 && ((_columnsVisible$ = columnsVisible[0]) === null || _columnsVisible$ === void 0 ? void 0 : _columnsVisible$.visible)) {\n      var selectColumn = columnsArray === null || columnsArray === void 0 ? void 0 : columnsArray.find(function (e) {\n        return e.id === 'id' || e.id === 'assignee';\n      });\n      toggleColumn(selectColumn || null);\n    }\n  }\n\n  var managedTaskColumnsArray = utils.generic.isValidArray(columnsArray, true) && taskType === TASK_TEAM_TYPE.myTask ? columnsArray === null || columnsArray === void 0 ? void 0 : columnsArray.filter(function (item) {\n    return item.id !== TEAM_TASKS_SPECIFIC_COLUMNS;\n  }) : columnsArray;\n  var managedTableFilterFields = !isTaskTeam ? tableFilterFields.filter(function (item) {\n    return item.id !== TEAM_TASKS_SPECIFIC_COLUMNS;\n  }) : tableFilterFields;\n\n  var resetFilter = function resetFilter() {\n    setValue('createdOn', null);\n    setValue('targetDueDate', null);\n    setValue('inceptionDate', null);\n\n    if (isPremiumProcessing) {\n      setValue('caseCreatedOn', null);\n      dispatch(resetPremiumProcessingTasksFilters);\n      dispatch(getPremiumProcessingTasksDetails({\n        requestType: searchTypeCall,\n        isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\n        taskType: taskType,\n        query: searchTerm,\n        filterTerm: {}\n      }));\n      dispatch(getPremiumProcessingTasksDetails({\n        requestType: filterTypeCall,\n        isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\n        taskType: taskType,\n        query: searchTerm,\n        filterTerm: {}\n      }));\n    } else {\n      dispatch(resetClaimsProcessingTasksFilters());\n      dispatch(getClaimsTasksProcessing({\n        requestType: searchTypeCall,\n        taskType: taskType,\n        query: searchTerm,\n        filterTerm: {}\n      }));\n      dispatch(getClaimsTasksProcessing({\n        requestType: filterTypeCall,\n        taskType: taskType,\n        query: searchTerm,\n        filterTerm: {}\n      }));\n    }\n  };\n\n  var resetSearch = function resetSearch() {\n    if (isPremiumProcessing) {\n      dispatch(resetPremiumProcessingTaskSearch());\n      dispatch(getPremiumProcessingTasksDetails({\n        requestType: searchTypeCall,\n        isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\n        taskType: taskType,\n        filterTerm: []\n      }));\n      dispatch(getPremiumProcessingTasksDetails({\n        requestType: filterTypeCall,\n        isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\n        taskType: taskType,\n        filterTerm: []\n      }));\n    } else {\n      dispatch(resetClaimsProcessingTaskSearch());\n      dispatch(getClaimsTasksProcessing({\n        requestType: searchTypeCall,\n        taskType: taskType,\n        filterTerm: []\n      }));\n      dispatch(getClaimsTasksProcessing({\n        requestType: filterTypeCall,\n        taskType: taskType,\n        filterTerm: []\n      }));\n    }\n  };\n\n  var handleSearch = function handleSearch(_ref2) {\n    var search = _ref2.search,\n        filters = _ref2.filters;\n    var searchType = (watchSearchType === null || watchSearchType === void 0 ? void 0 : watchSearchType.value) || '';\n    setSearchTerm(search);\n\n    if (isPremiumProcessing) {\n      dispatch(getPremiumProcessingTasksDetails({\n        requestType: searchTypeCall,\n        taskType: taskType,\n        query: search,\n        isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\n        direction: 'desc',\n        searchType: searchType,\n        navigation: false\n      }));\n      dispatch(getPremiumProcessingTasksDetails({\n        requestType: filterTypeCall,\n        taskType: taskType,\n        isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\n        query: search,\n        direction: 'desc',\n        searchType: searchType,\n        navigation: false\n      }));\n    } else {\n      dispatch(getClaimsTasksProcessing({\n        requestType: searchTypeCall,\n        taskType: taskType,\n        query: search,\n        direction: 'asc',\n        searchType: searchType,\n        navigation: false\n      }));\n      dispatch(getClaimsTasksProcessing({\n        requestType: filterTypeCall,\n        taskType: taskType,\n        query: search,\n        direction: 'asc',\n        searchType: searchType,\n        navigation: false\n      }));\n    }\n  };\n\n  var handleSearchFilter = function handleSearchFilter(_ref3) {\n    var search = _ref3.search,\n        filters = _ref3.filters;\n\n    if (isPremiumProcessing) {\n      dispatch(getPremiumProcessingTasksDetails({\n        requestType: searchTypeCall,\n        taskType: taskType,\n        query: search,\n        filterTerm: filters,\n        isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\n        navigation: false\n      }));\n      dispatch(getPremiumProcessingTasksDetails({\n        requestType: filterTypeCall,\n        taskType: taskType,\n        query: search,\n        filterTerm: filters,\n        isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\n        navigation: false\n      }));\n    } else {\n      dispatch(getClaimsTasksProcessing({\n        requestType: searchTypeCall,\n        taskType: taskType,\n        query: search,\n        filterTerm: filters,\n        navigation: false\n      }));\n      dispatch(getClaimsTasksProcessing({\n        requestType: filterTypeCall,\n        taskType: taskType,\n        query: search,\n        filterTerm: filters,\n        navigation: false\n      }));\n    }\n  };\n\n  var handleChangePage = function handleChangePage(newPage) {\n    setNewPage(newPage);\n\n    if (isPremiumProcessing) {\n      dispatch(getPremiumProcessingTasksDetails({\n        requestType: searchTypeCall,\n        isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\n        taskType: taskType,\n        page: newPage,\n        query: searchTerm,\n        navigation: true\n      }));\n      dispatch(getPremiumProcessingTasksDetails({\n        requestType: filterTypeCall,\n        isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\n        taskType: taskType,\n        page: newPage,\n        query: searchTerm,\n        navigation: true\n      }));\n    } else {\n      dispatch(getClaimsTasksProcessing({\n        requestType: searchTypeCall,\n        taskType: taskType,\n        page: newPage,\n        query: searchTerm,\n        navigation: true\n      }));\n    }\n  };\n\n  var handleChangeRowsPerPage = function handleChangeRowsPerPage(rowsPerPage) {\n    if (isPremiumProcessing) {\n      dispatch(getPremiumProcessingTasksDetails({\n        requestType: searchTypeCall,\n        taskType: taskType,\n        size: rowsPerPage,\n        isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\n        query: searchTerm,\n        navigation: true\n      }));\n      dispatch(getPremiumProcessingTasksDetails({\n        requestType: filterTypeCall,\n        taskType: taskType,\n        size: rowsPerPage,\n        isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\n        query: searchTerm,\n        navigation: true\n      }));\n    } else {\n      dispatch(getClaimsTasksProcessing({\n        requestType: searchTypeCall,\n        taskType: taskType,\n        size: rowsPerPage,\n        query: searchTerm,\n        navigation: true\n      }));\n    }\n  };\n\n  var handleSort = function handleSort(by, dir) {\n    if (isPremiumProcessing) {\n      if (by === 'createdOn') {\n        // TODO:: This is temparary fix UI and API should have same field name.\n        by = 'caseCreatedOn';\n      }\n\n      dispatch(getPremiumProcessingTasksDetails({\n        requestType: searchTypeCall,\n        taskType: taskType,\n        sortBy: by,\n        direction: dir,\n        query: searchTerm,\n        isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\n        navigation: false\n      }));\n    } else {\n      dispatch(getClaimsTasksProcessing({\n        requestType: searchTypeCall,\n        taskType: taskType,\n        sortBy: by,\n        direction: dir,\n        query: searchTerm,\n        navigation: false\n      }));\n    }\n  };\n\n  var refreshTasksGrid = function refreshTasksGrid() {\n    if (isPremiumProcessing) {\n      dispatch(getPremiumProcessingTasksDetails({\n        requestType: searchTypeCall,\n        isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\n        taskType: taskType\n      }));\n      dispatch(getPremiumProcessingTasksDetails({\n        requestType: filterTypeCall,\n        isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\n        taskType: taskType\n      }));\n    } else {\n      dispatch(getClaimsTasksProcessing({\n        requestType: searchTypeCall,\n        taskType: taskType\n      }));\n      dispatch(getClaimsTasksProcessing({\n        requestType: filterTypeCall,\n        taskType: taskType\n      }));\n    }\n  };\n\n  var hasTasks = isPremiumProcessing ? utils.generic.isValidArray(premiumProcessingCaseList === null || premiumProcessingCaseList === void 0 ? void 0 : premiumProcessingCaseList.items, true) : utils.generic.isValidArray(claimsTasksProcessing === null || claimsTasksProcessing === void 0 ? void 0 : claimsTasksProcessing.items, true);\n  var tasksSelected = isPremiumProcessing ? ppMultiSelectedCasesList || [] : (claimsTasksProcessing === null || claimsTasksProcessing === void 0 ? void 0 : claimsTasksProcessing.selected) || [];\n  var enableBulkAssign = isPremiumProcessing ? utils.generic.isValidArray(ppMultiSelectedCasesList, true) && ppMultiSelectedCasesList.length > 1 && ppMultiSelectedCasesList.length <= 10 : utils.generic.isValidArray(tasksSelected, true) && tasksSelected.length > 1 && tasksSelected.length <= 10;\n\n  var handleBulkAssign = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return dispatch(showModal({\n                component: 'ADD_ASSIGNEE',\n                props: {\n                  title: utils.string.t('app.assign'),\n                  hideCompOnBlur: false,\n                  fullWidth: true,\n                  maxWidth: 'sm',\n                  disableAutoFocus: true,\n                  componentProps: {\n                    isPremiumProcessing: isPremiumProcessing,\n                    taskDetails: tasksSelected,\n                    submitHandler: function submitHandler(data) {\n                      refreshTasksGrid();\n\n                      if (isPremiumProcessing) {\n                        premiumProcessingSaveAssigneeResponseHandler(data.premiumProcessingSaveAssigneeResponse); //TODO:: premiumProcessingSaveAssigneeDetails();\n                      }\n                    }\n                  }\n                }\n              }));\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleBulkAssign() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  var handleUpdateTaskPriority = function handleUpdateTaskPriority(task) {\n    dispatch(showModal({\n      component: 'SET_PRIORITY',\n      props: {\n        title: utils.string.t('claims.modals.taskFunction.setTaskPriorityTitle'),\n        fullWidth: true,\n        maxWidth: 'sm',\n        disableAutoFocus: true,\n        componentProps: {\n          task: task,\n          handlers: {\n            cancel: function cancel() {\n              dispatch(hideModal());\n            },\n            submit: function submit() {\n              refreshTasksGrid();\n              dispatch(hideModal());\n            }\n          }\n        }\n      }\n    }));\n  };\n\n  var premiumProcessingSaveAssigneeResponseHandler = function premiumProcessingSaveAssigneeResponseHandler(data) {\n    if (isPremiumProcessing) {\n      dispatch(getPremiumProcessingTasksDetails({\n        requestType: searchTypeCall,\n        isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\n        taskType: taskType,\n        filterTerm: []\n      }));\n      dispatch(getPremiumProcessingTasksDetails({\n        requestType: filterTypeCall,\n        isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\n        taskType: taskType,\n        filterTerm: []\n      }));\n      premiumProcessingSaveAssigneeDetails(data);\n    }\n  };\n\n  var getPremiumProcessingNotificationDetails = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var response, _response$data, _response$data2, _response$data3;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return dispatch(getTaskCaseViewType({\n                caseId: refId\n              }));\n\n            case 2:\n              response = _context2.sent;\n\n              if (response && (response === null || response === void 0 ? void 0 : response.status) === API_RESPONSE_OK) {\n                if (response.data.isCaseIdForLoggedInUser === 0) {\n                  dispatch(enqueueNotification(utils.string.t('premiumProcessing.premiumProcessingNotificationCaseSearch', {\n                    id: refId\n                  }), 'warning'));\n                  dispatch(resetPremiumProcessingTaskDetails('filter'));\n                  dispatch(resetPremiumProcessingTaskDetails('search'));\n                } else {\n                  if (response.data.taskType) {\n                    setValue('taskType', response.data.taskType);\n                  }\n\n                  if ((response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.isCheckSigningCaseIndicator) === 1) {\n                    setIsCheckSigningValue(true);\n                  }\n\n                  dispatch(getPremiumProcessingTasksDetails({\n                    requestType: searchTypeCall,\n                    isCheckSigning: (response === null || response === void 0 ? void 0 : (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.isCheckSigningCaseIndicator) === 1 ? true : false,\n                    taskType: response.data.taskType,\n                    query: refId,\n                    direction: 'desc',\n                    searchType: 'taskRef',\n                    navigation: false\n                  }));\n                  dispatch(getPremiumProcessingTasksDetails({\n                    requestType: filterTypeCall,\n                    isCheckSigning: (response === null || response === void 0 ? void 0 : (_response$data3 = response.data) === null || _response$data3 === void 0 ? void 0 : _response$data3.isCheckSigningCaseIndicator) === 1 ? true : false,\n                    taskType: response.data.taskType,\n                    query: refId,\n                    direction: 'desc',\n                    searchType: 'taskRef',\n                    navigation: false\n                  }));\n                }\n              }\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function getPremiumProcessingNotificationDetails() {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  var resetNotificationFilters = function resetNotificationFilters() {\n    if (isPremiumProcessing) {\n      dispatch(getPremiumProcessingTasksDetails({\n        requestType: searchTypeCall,\n        isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\n        taskType: taskType,\n        query: '',\n        filterTerm: {}\n      }));\n      dispatch(getPremiumProcessingTasksDetails({\n        requestType: filterTypeCall,\n        isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\n        taskType: taskType,\n        query: '',\n        filterTerm: {}\n      }));\n      dispatch(resetPremiumProcessingTasksFilters);\n      dispatch(resetPremiumProcessingTaskSearch);\n      history.push(\"\".concat(config.routes.premiumProcessing.root));\n    }\n  };\n\n  useEffect(function () {\n    var searchType = (watchSearchType === null || watchSearchType === void 0 ? void 0 : watchSearchType.value) || '';\n\n    if (refId && !isPremiumProcessing) {\n      dispatch(getClaimsTasksProcessing({\n        requestType: searchTypeCall,\n        taskType: taskType,\n        searchType: searchType,\n        page: newPage,\n        query: refId\n      }));\n      dispatch(getClaimsTasksProcessing({\n        requestType: filterTypeCall,\n        taskType: taskType,\n        searchType: searchType,\n        page: newPage,\n        query: refId\n      }));\n    } else if (refId && isPremiumProcessing) {\n      getPremiumProcessingNotificationDetails();\n    }\n  }, [refId]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    if (taskType && !refId) {\n      setValue('taskType', taskType);\n      setIsTaskTeam(taskType === TASK_TEAM_TYPE.myTeam);\n\n      if (isPremiumProcessing) {\n        dispatch(getPremiumProcessingTasksDetails({\n          requestType: searchTypeCall,\n          taskType: taskType,\n          isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\n          filterTerm: []\n        }));\n        dispatch(getPremiumProcessingTasksDetails({\n          requestType: filterTypeCall,\n          taskType: taskType,\n          isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\n          filterTerm: []\n        }));\n      } else {\n        dispatch(getClaimsTasksProcessing({\n          requestType: searchTypeCall,\n          taskType: taskType,\n          filterTerm: []\n        }));\n        dispatch(getClaimsTasksProcessing({\n          requestType: filterTypeCall,\n          taskType: taskType,\n          filterTerm: []\n        }));\n      }\n    }\n\n    return function () {\n      dispatch(resetClaimsProcessingTasksItems());\n      dispatch(resetClaimsProcessingTasksFilters());\n      dispatch(resetClaimsProcessingTaskSearch());\n      isPremiumProcessing && dispatch(resetPremiumProcessingTasksFilters);\n      isPremiumProcessing && dispatch(resetPremiumProcessingTaskSearch);\n    };\n  }, [taskType]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var premiumProcessingManageColumns = function premiumProcessingManageColumns() {\n    if (utils.generic.isValidArray(managedTaskColumnsArray, true)) {\n      managedTaskColumnsArray === null || managedTaskColumnsArray === void 0 ? void 0 : managedTaskColumnsArray.forEach(function (data) {\n        if (data.id !== 'id' && data.id !== 'actions') {\n          data.visible = false;\n        }\n\n        if (data.id === 'assuredName' || data.id === 'inceptionDate' || data.id === 'processRef' || data.id === 'departmentName' || data.id === 'processSubType') {\n          data.visible = true;\n        }\n\n        if (taskType === TASK_TEAM_TYPE.myTask || taskType === TASK_TEAM_TYPE.myTeam) {\n          if (data.id === 'type' || data.id === 'priority' || data.id === 'targetDueDate' || data.id === 'taskName') {\n            data.visible = true;\n          }\n        }\n\n        if (taskType === TASK_TEAM_TYPE.myTeam || taskType === TASK_TEAM_TYPE.taskHistory) {\n          if (data.id === 'status' || data.id === 'assignee') {\n            data.visible = true;\n          }\n        }\n\n        if (taskType === TASK_TEAM_TYPE.taskHistory) {\n          if (data.id === 'xbInstanceId') {\n            data.visible = true;\n          }\n        }\n\n        if (data.userSelected) {\n          data.visible = true;\n        }\n\n        if (data.defaultUnselected) {\n          data.visible = false;\n        }\n      });\n    }\n  };\n\n  var toggleCheckSigning = function toggleCheckSigning(event) {\n    var _event$target, _event$target2;\n\n    var searchType = (watchSearchType === null || watchSearchType === void 0 ? void 0 : watchSearchType.value) || '';\n    setIsCheckSigningValue(event === null || event === void 0 ? void 0 : (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.checked);\n    var checkedValue = event === null || event === void 0 ? void 0 : (_event$target2 = event.target) === null || _event$target2 === void 0 ? void 0 : _event$target2.checked;\n    dispatch(udpateIsCheckSigningToggle(checkedValue));\n    dispatch(getPremiumProcessingTasksDetails({\n      requestType: searchTypeCall,\n      searchType: searchType,\n      query: searchTerm,\n      isCheckSigning: checkedValue,\n      taskType: taskType,\n      filterTerm: []\n    }));\n    dispatch(getPremiumProcessingTasksDetails({\n      requestType: filterTypeCall,\n      searchType: searchType,\n      query: searchTerm,\n      isCheckSigning: checkedValue,\n      taskType: taskType,\n      filterTerm: []\n    }));\n  };\n\n  useEffect(function () {\n    if (isPremiumProcessing) {\n      premiumProcessingManageColumns();\n    }\n\n    return isPremiumProcessing ? dispatch(selectedPremiumProcessingTaskType(taskType)) : dispatch(selectedClaimsProcessingTaskType(taskType));\n  }, [taskType]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    var searchType = (watchSearchType === null || watchSearchType === void 0 ? void 0 : watchSearchType.value) || '';\n\n    if (editAdhocStatus) {\n      dispatch(getClaimsTasksProcessing({\n        requestType: searchTypeCall,\n        taskType: taskType,\n        searchType: searchType,\n        page: newPage,\n        query: searchTerm\n      }));\n      dispatch(getClaimsTasksProcessing({\n        requestType: filterTypeCall,\n        taskType: taskType,\n        searchType: searchType,\n        page: newPage,\n        query: searchTerm\n      }));\n    }\n  }, [editAdhocStatus]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var toggleFlexiColumns = function toggleFlexiColumns(columns) {\n    if (uiNavExpanded) {\n      dispatch(collapseNav());\n    }\n\n    if (isPremiumProcessing) {\n      if (!columns.visible) {\n        columns.userSelected = true;\n\n        if (utils.generic.isValidObject(columns, 'defaultUnselected')) {\n          columns.defaultUnselected = false;\n        }\n      } else {\n        columns.userSelected = false;\n\n        if (!utils.generic.isValidObject(columns, 'defaultUnselected')) {\n          columns.defaultUnselected = true;\n        }\n      }\n    }\n\n    toggleColumn(columns);\n  };\n\n  return /*#__PURE__*/_jsxDEV(TasksManagementView, {\n    isTaskTeam: isTaskTeam,\n    setValue: setValue,\n    hasTasks: hasTasks,\n    enableBulkAssign: enableBulkAssign,\n    fields: fields,\n    notificationRefId: refId,\n    control: control,\n    taskTypeValue: taskTypeValue,\n    tasks: isPremiumProcessing ? premiumProcessingCaseList : claimsTasksProcessing,\n    sort: _objectSpread(_objectSpread({}, isPremiumProcessing && premiumProcessingCaseList ? premiumProcessingCaseList.sort : claimsTasksProcessing.sort), {}, {\n      direction: isPremiumProcessing && premiumProcessingCaseList ? premiumProcessingCaseList.sort.direction.toLowerCase() : claimsTasksProcessing.sort.direction.toLowerCase(),\n      type: 'numeric'\n    }),\n    columnsArray: managedTaskColumnsArray,\n    columnProps: columnProps,\n    tableFilterFields: managedTableFilterFields,\n    isFetchingFilters: isFetchingFilters,\n    isPremiumProcessing: isPremiumProcessing,\n    isTableHidden: isTableHidden,\n    isCheckSigningValue: isCheckSigningValue,\n    handlers: {\n      toggleColumn: toggleFlexiColumns,\n      resetFilter: resetFilter,\n      resetSearch: resetSearch,\n      handleSearch: handleSearch,\n      handleSearchFilter: handleSearchFilter,\n      handleChangePage: handleChangePage,\n      handleChangeRowsPerPage: handleChangeRowsPerPage,\n      handleSort: handleSort,\n      setTaskType: setTaskType,\n      refreshTasksGrid: refreshTasksGrid,\n      premiumProcessingSaveAssignee: premiumProcessingSaveAssigneeResponseHandler,\n      handleBulkAssign: handleBulkAssign,\n      handleUpdateTaskPriority: handleUpdateTaskPriority,\n      resetNotificationFilters: resetNotificationFilters,\n      toggleCheckSigning: toggleCheckSigning\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1196,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TasksManagement, \"oWyc9tqh9XE+Ffdwi+FfvF4Ck50=\", false, function () {\n  return [useDispatch, useParams, useHistory, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useForm, useFlexiColumns];\n});\n\n_c = TasksManagement;\n\nvar _c;\n\n$RefreshReg$(_c, \"TasksManagement\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/TasksManagement/TasksManagement.js"],"names":["React","useEffect","useState","useSelector","useDispatch","useForm","yupResolver","Yup","PropTypes","useParams","useHistory","get","showModal","hideModal","selectClaimsTasksProcessingFilterLoading","selectClaimsTasksProcessingFilterValues","selectPremiumProcessingFilterValues","selectClaimsTasksProcessing","selectedClaimsProcessingTaskType","selectedPremiumProcessingTaskType","selectEditAdhocTaskStatus","getClaimsTasksProcessing","resetClaimsProcessingTasksItems","resetClaimsProcessingTasksFilters","resetClaimsProcessingTaskSearch","resetPremiumProcessingTaskSearch","selectCasesList","getPremiumProcessingTasksDetails","getTaskCaseViewType","selectMultiSelectedCase","selectUser","resetPremiumProcessingTasksFilters","enqueueNotification","resetPremiumProcessingTaskDetails","collapseNav","udpateIsCheckSigningToggle","TasksManagementView","styles","MultiSelect","FormDate","utils","useFlexiColumns","TEAM_TASKS_SPECIFIC_COLUMNS","TASK_TEAM_TYPE","TASKS_SEARCH_OPTION_PROCESS_REF","TASKS_SEARCH_OPTION_DESCRIPTION","TASKS_SEARCH_OPTION_TASKI_REF","TASKS_SEARCH_OPTION_ASSIGNED_TO","CLAIM_PROCESSING_REQ_TYPES","API_RESPONSE_OK","TASKS_SEARCH_OPTION_WORK_PACKAGE_REFERENCE","config","makeStyles","TasksManagement","propTypes","isPremiumProcessing","bool","premiumProcessingSaveAssigneeDetails","func","classes","name","dispatch","params","history","claimsTasksProcessing","claimsTasksProcessingFilters","editAdhocStatus","premiumProcessingCaseList","premiumProcessingFilters","loggedUserDetails","userRoleDetails","userRole","uiNavExpanded","state","isCheckSigningValue","setIsCheckSigningValue","ppMultiSelectedCasesList","isFetchingFilters","newPage","setNewPage","string","t","searchByText","setSearchByText","selectedTaskViewType","myTask","generic","isValidArray","user","isSeniorManager","isAdminUser","myTeam","taskType","setTaskType","isTaskTeam","setIsTaskTeam","searchTerm","setSearchTerm","searchTypeCall","search","filterTypeCall","filter","refId","selectOptions","label","value","taskTypeOptions","length","fields","type","defaultValue","muiFormGroupProps","row","root","radioLabel","options","find","item","muiComponentProps","inputProps","title","validation","object","nullable","required","callback","event","data","defaultValues","form","getInitialValues","validationSchema","getValidationSchema","resolver","control","watch","setValue","taskTypeValue","watchSearchType","yesNoOptions","id","tableFilterFields","content","getFieldProps","fullWidth","margin","clearable","variant","format","priority","status","requestedBy","assignee","additionalAssignee","assuredName","insuredName","division","instructionId","processSubType","nestedClasses","fieldWidth","columns","empty","visible","sort","direction","nowrap","mandatory","ellipsis","menu","columnsArray","columnProps","toggleColumn","isTableHidden","columnsVisible","columnData","selectColumn","e","managedTaskColumnsArray","managedTableFilterFields","resetFilter","requestType","isCheckSigning","query","filterTerm","resetSearch","handleSearch","filters","searchType","navigation","handleSearchFilter","handleChangePage","page","handleChangeRowsPerPage","rowsPerPage","size","handleSort","by","dir","sortBy","refreshTasksGrid","hasTasks","items","tasksSelected","selected","enableBulkAssign","handleBulkAssign","component","props","hideCompOnBlur","maxWidth","disableAutoFocus","componentProps","taskDetails","submitHandler","premiumProcessingSaveAssigneeResponseHandler","premiumProcessingSaveAssigneeResponse","handleUpdateTaskPriority","task","handlers","cancel","submit","getPremiumProcessingNotificationDetails","caseId","response","isCaseIdForLoggedInUser","isCheckSigningCaseIndicator","resetNotificationFilters","push","routes","premiumProcessing","premiumProcessingManageColumns","forEach","taskHistory","userSelected","defaultUnselected","toggleCheckSigning","target","checked","checkedValue","toggleFlexiColumns","isValidObject","toLowerCase","premiumProcessingSaveAssignee"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as Yup from 'yup';\r\nimport PropTypes from 'prop-types';\r\nimport { useParams } from 'react-router';\r\nimport { useHistory } from 'react-router';\r\nimport get from 'lodash/get';\r\n\r\n//app\r\nimport {\r\n  showModal,\r\n  hideModal,\r\n  selectClaimsTasksProcessingFilterLoading,\r\n  selectClaimsTasksProcessingFilterValues,\r\n  selectPremiumProcessingFilterValues,\r\n  selectClaimsTasksProcessing,\r\n  selectedClaimsProcessingTaskType,\r\n  selectedPremiumProcessingTaskType,\r\n  selectEditAdhocTaskStatus,\r\n  getClaimsTasksProcessing,\r\n  resetClaimsProcessingTasksItems,\r\n  resetClaimsProcessingTasksFilters,\r\n  resetClaimsProcessingTaskSearch,\r\n  resetPremiumProcessingTaskSearch,\r\n  selectCasesList,\r\n  getPremiumProcessingTasksDetails,\r\n  getTaskCaseViewType,\r\n  selectMultiSelectedCase,\r\n  selectUser,\r\n  resetPremiumProcessingTasksFilters,\r\n  enqueueNotification,\r\n  resetPremiumProcessingTaskDetails,\r\n  collapseNav,\r\n  udpateIsCheckSigningToggle,\r\n} from 'stores';\r\nimport { TasksManagementView } from './TasksManagement.view';\r\nimport styles from './TasksManagement.styles';\r\nimport { MultiSelect, FormDate } from 'components';\r\nimport * as utils from 'utils';\r\nimport { useFlexiColumns } from 'hooks';\r\nimport {\r\n  TEAM_TASKS_SPECIFIC_COLUMNS,\r\n  TASK_TEAM_TYPE,\r\n  TASKS_SEARCH_OPTION_PROCESS_REF,\r\n  TASKS_SEARCH_OPTION_DESCRIPTION,\r\n  TASKS_SEARCH_OPTION_TASKI_REF,\r\n  TASKS_SEARCH_OPTION_ASSIGNED_TO,\r\n  CLAIM_PROCESSING_REQ_TYPES,\r\n  API_RESPONSE_OK,\r\n  TASKS_SEARCH_OPTION_WORK_PACKAGE_REFERENCE\r\n} from 'consts';\r\nimport config from 'config';\r\n\r\n//mui\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nTasksManagement.propTypes = {\r\n  isPremiumProcessing: PropTypes.bool,\r\n  premiumProcessingSaveAssigneeDetails: PropTypes.func,\r\n};\r\nexport default function TasksManagement({ isPremiumProcessing = false, premiumProcessingSaveAssigneeDetails }) {\r\n  const classes = makeStyles(styles, { name: 'TasksManagement' })();\r\n  const dispatch = useDispatch();\r\n  const params = useParams();\r\n  const history = useHistory();\r\n  const claimsTasksProcessing = useSelector(selectClaimsTasksProcessing);\r\n  const claimsTasksProcessingFilters = useSelector(selectClaimsTasksProcessingFilterValues);\r\n  const editAdhocStatus = useSelector(selectEditAdhocTaskStatus);\r\n  const premiumProcessingCaseList = useSelector(selectCasesList);\r\n  const premiumProcessingFilters = useSelector(selectPremiumProcessingFilterValues);\r\n  const loggedUserDetails = useSelector(selectUser);\r\n  const userRoleDetails = loggedUserDetails?.userRole;\r\n  const uiNavExpanded = useSelector((state) => get(state, 'ui.nav.expanded'));\r\n\r\n  const [isCheckSigningValue, setIsCheckSigningValue] = useState(false);\r\n  const ppMultiSelectedCasesList = useSelector(selectMultiSelectedCase);\r\n  const isFetchingFilters = useSelector(selectClaimsTasksProcessingFilterLoading);\r\n\r\n  const [newPage, setNewPage] = useState(0);\r\n  const [searchByText, setSearchByText] = useState(utils.string.t('claims.searchByTasks.options.TaskRef'));\r\n  let selectedTaskViewType = TASK_TEAM_TYPE.myTask;\r\n  if (\r\n    isPremiumProcessing &&\r\n    utils.generic.isValidArray(userRoleDetails, true) &&\r\n    (utils.user.isSeniorManager(userRoleDetails[0]) || utils.user.isAdminUser(userRoleDetails[0]))\r\n  ) {\r\n    selectedTaskViewType = TASK_TEAM_TYPE.myTeam;\r\n  }\r\n\r\n  const [taskType, setTaskType] = useState(\r\n    isPremiumProcessing ? selectedTaskViewType : claimsTasksProcessing.taskType || TASK_TEAM_TYPE.myTask\r\n  );\r\n  const [isTaskTeam, setIsTaskTeam] = useState(false);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  const searchTypeCall = CLAIM_PROCESSING_REQ_TYPES.search;\r\n  const filterTypeCall = CLAIM_PROCESSING_REQ_TYPES.filter;\r\n\r\n  const { refId } = params;\r\n\r\n  const selectOptions = [\r\n    { label: utils.string.t('claims.searchByTasks.options.TaskRef'), value: TASKS_SEARCH_OPTION_TASKI_REF },\r\n    {\r\n      label: isPremiumProcessing\r\n        ? utils.string.t('claims.searchByTasks.options.riskRef')\r\n        : utils.string.t('claims.searchByTasks.options.ClaimRef'),\r\n      value: TASKS_SEARCH_OPTION_PROCESS_REF,\r\n    },\r\n    { label: utils.string.t('claims.searchByTasks.options.Description'), value: TASKS_SEARCH_OPTION_DESCRIPTION },\r\n    ...(taskType === TASK_TEAM_TYPE.myTeam\r\n      ? [\r\n        {\r\n          label: utils.string.t('claims.searchByTasks.options.AssignedTo'),\r\n          value: TASKS_SEARCH_OPTION_ASSIGNED_TO,\r\n        },\r\n      ]\r\n      : []),\r\n    ...(isCheckSigningValue ? [\r\n      {\r\n        label: utils.string.t('claims.searchByTasks.options.workPackage'),\r\n        value: TASKS_SEARCH_OPTION_WORK_PACKAGE_REFERENCE,\r\n      },\r\n    ] : [])\r\n  ];\r\n\r\n  let taskTypeOptions = [\r\n    { value: 'myTask', label: utils.string.t('claims.processing.myTasks') },\r\n    { value: 'myTeam', label: utils.string.t('claims.processing.myTeamTasks') },\r\n    ...(isPremiumProcessing ? [{ value: 'taskHistory', label: utils.string.t('claims.processing.tasksHistory') }] : []),\r\n  ];\r\n  if (isPremiumProcessing) {\r\n    if (\r\n      utils.user.isSeniorManager(userRoleDetails?.length > 0 && userRoleDetails[0]) ||\r\n      utils.user.isAdminUser(userRoleDetails?.length > 0 && userRoleDetails[0])\r\n    ) {\r\n      taskTypeOptions = [\r\n        {\r\n          value: 'myTeam',\r\n          label: utils.string.t('claims.processing.myTeamTasks'),\r\n        },\r\n        {\r\n          value: 'taskHistory',\r\n          label: utils.string.t('claims.processing.tasksHistory'),\r\n        },\r\n      ];\r\n    }\r\n  }\r\n  const fields = [\r\n    {\r\n      name: 'taskType',\r\n      type: 'radio',\r\n      value: taskType,\r\n      defaultValue: taskType,\r\n      muiFormGroupProps: {\r\n        row: true,\r\n        classes: {\r\n          root: classes.radioLabel,\r\n        },\r\n      },\r\n      options: taskTypeOptions,\r\n    },\r\n    { name: isPremiumProcessing ? 'caseCreatedOn' : 'createdOn', type: 'datepicker', value: null },\r\n    { name: 'targetDueDate', type: 'datepicker', value: null },\r\n    { name: 'inceptionDate', type: 'datepicker', value: null },\r\n    {\r\n      name: 'searchType',\r\n      type: 'autocompletemui',\r\n      options: selectOptions,\r\n      value:\r\n        selectOptions?.find((item) =>\r\n          item?.value === isPremiumProcessing ? TASKS_SEARCH_OPTION_TASKI_REF : TASKS_SEARCH_OPTION_PROCESS_REF\r\n        ) || null,\r\n      muiComponentProps: {\r\n        inputProps: {\r\n          title: searchByText || '',\r\n        },\r\n      },\r\n      validation: Yup.object().nullable().required(utils.string.t('validation.required')),\r\n      callback: (event, data) => {\r\n        setSearchByText(data?.label);\r\n      },\r\n    },\r\n  ];\r\n\r\n  const defaultValues = utils.form.getInitialValues(fields);\r\n  const validationSchema = utils.form.getValidationSchema(fields);\r\n\r\n  const { control, watch, setValue } = useForm({\r\n    defaultValues,\r\n    ...(validationSchema && { resolver: yupResolver(validationSchema) }),\r\n  });\r\n  const taskTypeValue = watch('taskType');\r\n  const watchSearchType = watch('searchType');\r\n\r\n\r\n  const yesNoOptions = [\r\n    { id: utils.string.t('app.yes'), name: utils.string.t('app.yes') },\r\n    { id: utils.string.t('app.no'), name: utils.string.t('app.no') },\r\n  ];\r\n\r\n  const tableFilterFields = [\r\n    ...(!isPremiumProcessing\r\n      ? [\r\n        {\r\n          id: isPremiumProcessing ? 'caseCreatedOn' : 'createdOn',\r\n          type: 'datepicker',\r\n          label: utils.string.t('claims.processing.tasksGridColumns.dateAndTimeCreated'),\r\n          value: '',\r\n          content: (\r\n            <FormDate\r\n              control={control}\r\n              {...utils.form.getFieldProps(defaultValues, isPremiumProcessing ? 'caseCreatedOn' : 'createdOn')}\r\n              id=\"creationdatepicker\"\r\n              name={isPremiumProcessing ? 'caseCreatedOn' : 'createdOn'}\r\n              type=\"datepicker\"\r\n              value={''}\r\n              label={''}\r\n              plainText\r\n              plainTextIcon\r\n              placeholder={utils.string.t('app.selectDate')}\r\n              muiComponentProps={{\r\n                fullWidth: false,\r\n                margin: 'dense',\r\n              }}\r\n              muiPickerProps={{\r\n                clearable: false,\r\n                variant: 'inline',\r\n                format: 'DD-MM-YYYY',\r\n              }}\r\n            />\r\n          ),\r\n        },\r\n      ]\r\n      : []),\r\n    {\r\n      id: 'targetDueDate',\r\n      type: 'datepicker',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.dueDate'),\r\n      value: '',\r\n      content: (\r\n        <FormDate\r\n          control={control}\r\n          {...utils.form.getFieldProps(defaultValues, 'targetDueDate')}\r\n          id=\"duedatepicker\"\r\n          name=\"targetDueDate\"\r\n          type=\"datepicker\"\r\n          value={''}\r\n          label={''}\r\n          plainText\r\n          plainTextIcon\r\n          placeholder={utils.string.t('app.selectDate')}\r\n          muiComponentProps={{\r\n            fullWidth: false,\r\n            margin: 'dense',\r\n          }}\r\n          muiPickerProps={{\r\n            clearable: false,\r\n            variant: 'inline',\r\n            format: 'DD-MM-YYYY',\r\n          }}\r\n        />\r\n      ),\r\n    },\r\n\r\n    {\r\n      id: 'taskType',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.taskType'),\r\n      value: [],\r\n      options: isPremiumProcessing ? premiumProcessingFilters?.taskType : claimsTasksProcessingFilters?.taskType,\r\n      content: (\r\n        <MultiSelect\r\n          id=\"taskType\"\r\n          search\r\n          options={isPremiumProcessing ? premiumProcessingFilters?.taskType : claimsTasksProcessingFilters?.taskType}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      id: 'priority',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.priority'),\r\n      value: [],\r\n      options: isPremiumProcessing ? premiumProcessingFilters?.priority : claimsTasksProcessingFilters?.priority,\r\n      content: (\r\n        <MultiSelect\r\n          id=\"priority\"\r\n          search\r\n          options={isPremiumProcessing ? premiumProcessingFilters?.priority : claimsTasksProcessingFilters?.priority}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      id: 'status',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.status'),\r\n      value: [],\r\n      options: isPremiumProcessing ? premiumProcessingFilters?.status : claimsTasksProcessingFilters?.status,\r\n      content: (\r\n        <MultiSelect\r\n          id=\"status\"\r\n          search\r\n          options={isPremiumProcessing ? premiumProcessingFilters?.status : claimsTasksProcessingFilters?.status}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      id: 'createdBy',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.createdBy'),\r\n      value: [],\r\n      options: isPremiumProcessing ? premiumProcessingFilters?.requestedBy : claimsTasksProcessingFilters?.requestedBy,\r\n      content: (\r\n        <MultiSelect\r\n          id=\"createdBy\"\r\n          search\r\n          options={isPremiumProcessing ? premiumProcessingFilters?.requestedBy : claimsTasksProcessingFilters?.requestedBy}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      id: 'assignee',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.assignedTo'),\r\n      value: [],\r\n      options: isPremiumProcessing ? premiumProcessingFilters?.assignee : claimsTasksProcessingFilters?.assignee,\r\n      content: (\r\n        <MultiSelect\r\n          id=\"assignee\"\r\n          search\r\n          options={isPremiumProcessing ? premiumProcessingFilters?.assignee : claimsTasksProcessingFilters?.assignee}\r\n        />\r\n      ),\r\n    },\r\n    ...(!isPremiumProcessing\r\n      ? [\r\n        {\r\n          id: 'additionalAssignee',\r\n          type: 'multiSelect',\r\n          label: utils.string.t('claims.processing.tasksGridColumns.additionalAssignee'),\r\n          value: [],\r\n          options: claimsTasksProcessingFilters?.additionalAssignee,\r\n          content: <MultiSelect id=\"additionalAssignee\" search options={claimsTasksProcessingFilters?.additionalAssignee} />,\r\n        },\r\n      ]\r\n      : [\r\n        {\r\n          id: 'inceptionDate',\r\n          type: 'datepicker',\r\n          label: utils.string.t('claims.processing.tasksGridColumns.inceptionDate'),\r\n          value: '',\r\n          content: (\r\n            <FormDate\r\n              control={control}\r\n              {...utils.form.getFieldProps(defaultValues, 'inceptionDate')}\r\n              id=\"inceptionDatedatepicker\"\r\n              name=\"inceptionDate\"\r\n              type=\"datepicker\"\r\n              value={''}\r\n              label={''}\r\n              plainText\r\n              plainTextIcon\r\n              placeholder={utils.string.t('app.selectDate')}\r\n              muiComponentProps={{\r\n                fullWidth: false,\r\n                margin: 'dense',\r\n              }}\r\n              muiPickerProps={{\r\n                clearable: false,\r\n                variant: 'inline',\r\n                format: 'DD-MM-YYYY',\r\n              }}\r\n            />\r\n          ),\r\n        },\r\n        {\r\n          id: 'insuredName',\r\n          type: 'multiSelect',\r\n          label: utils.string.t('claims.processing.tasksGridColumns.insuredName'),\r\n          value: [],\r\n          options: isPremiumProcessing ? premiumProcessingFilters?.assuredName : claimsTasksProcessingFilters?.insuredName,\r\n          content: (\r\n            <MultiSelect\r\n              id=\"insuredName\"\r\n              search\r\n              options={isPremiumProcessing ? premiumProcessingFilters?.assuredName : claimsTasksProcessingFilters?.insuredName}\r\n            />\r\n          ),\r\n        },\r\n        {\r\n          id: 'division',\r\n          type: 'multiSelect',\r\n          label: utils.string.t('claims.processing.tasksGridColumns.division'),\r\n          value: [],\r\n          options: isPremiumProcessing ? premiumProcessingFilters?.division : claimsTasksProcessingFilters?.division,\r\n          content: (\r\n            <MultiSelect\r\n              id=\"division\"\r\n              search\r\n              options={isPremiumProcessing ? premiumProcessingFilters?.division : claimsTasksProcessingFilters?.division}\r\n            />\r\n          ),\r\n        },\r\n        {\r\n          id: 'instructionId',\r\n          type: 'multiSelect',\r\n          label: utils.string.t('claims.processing.tasksGridColumns.instructionId'),\r\n          value: [],\r\n          options: premiumProcessingFilters?.instructionId,\r\n          content: <MultiSelect id=\"instructionId\" search options={premiumProcessingFilters?.instructionId} />,\r\n        },\r\n        {\r\n          id: 'processSubType',\r\n          type: 'multiSelect',\r\n          label: utils.string.t('claims.processing.tasksGridColumns.processSubType'),\r\n          value: [],\r\n          options: premiumProcessingFilters?.processSubType,\r\n          content: <MultiSelect id=\"processSubType\" search options={premiumProcessingFilters?.processSubType} />,\r\n        },\r\n      ]),\r\n    ...(isPremiumProcessing\r\n      ? [\r\n        {\r\n          id: 'ppc',\r\n          type: 'multiSelect',\r\n          label: utils.string.t('claims.processing.tasksGridColumns.ppwPPC'),\r\n          value: [],\r\n          options: yesNoOptions,\r\n          nestedClasses: { root: classes.fieldWidth },\r\n          content: <MultiSelect id=\"ppc\" search options={yesNoOptions} />,\r\n        },\r\n      ]\r\n      : []),\r\n  ];\r\n\r\n  const columns = [\r\n    { id: 'id', empty: true, visible: true },\r\n    {\r\n      id: 'taskRef',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.taskRef'),\r\n      ...(!isPremiumProcessing && {\r\n        sort: { type: 'lexical', direction: 'asc' },\r\n      }),\r\n      nowrap: true,\r\n      visible: true,\r\n      mandatory: !isPremiumProcessing ? true : false,\r\n    },\r\n    {\r\n      id: 'createdOn',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.dateAndTimeCreated'),\r\n      ...(!isPremiumProcessing && {\r\n        sort: { type: 'date', direction: 'asc' },\r\n      }),\r\n      nowrap: true,\r\n      visible: true,\r\n      mandatory: !isPremiumProcessing ? true : false,\r\n    },\r\n    {\r\n      id: isPremiumProcessing ? 'taskName' : 'taskType',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.taskName'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n    },\r\n    {\r\n      id: 'description',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.description'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n      ellipsis: true,\r\n    },\r\n    {\r\n      id: 'targetDueDate',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.dueDate'),\r\n      sort: { type: 'date', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: !isPremiumProcessing,\r\n    },\r\n    {\r\n      id: 'processRef',\r\n      label: isPremiumProcessing\r\n        ? utils.string.t('claims.processing.tasksGridColumns.riskRef')\r\n        : utils.string.t('claims.processing.tasksGridColumns.claimRef'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: !isPremiumProcessing,\r\n    },\r\n    {\r\n      id: 'assignee',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.assignedTo'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n    },\r\n    ...(!isPremiumProcessing\r\n      ? [\r\n        {\r\n          id: 'additionalAssignee',\r\n          label: utils.string.t('claims.processing.tasksGridColumns.additionalAssignee'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          nowrap: true,\r\n          visible: isPremiumProcessing ? false : true,\r\n        },\r\n      ]\r\n      : []),\r\n    {\r\n      id: 'priority',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.priority'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n    },\r\n    {\r\n      id: 'status',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.status'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n    },\r\n\r\n    ...(!isPremiumProcessing\r\n      ? [{ id: 'team', label: utils.string.t('app.team'), sort: { type: 'lexical', direction: 'asc' }, nowrap: true }]\r\n      : []),\r\n\r\n    ...(isPremiumProcessing\r\n      ? [\r\n        {\r\n          id: 'inceptionDate',\r\n          label: utils.string.t('claims.processing.tasksGridColumns.inceptionDate'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          nowrap: true,\r\n          visible: true,\r\n        },\r\n        {\r\n          id: 'assuredName',\r\n          label: utils.string.t('claims.processing.tasksGridColumns.insuredName'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          nowrap: true,\r\n          visible: true,\r\n        },\r\n        {\r\n          id: 'type',\r\n          label: utils.string.t('claims.processing.tasksGridColumns.type'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          nowrap: true,\r\n          visible: true,\r\n        },\r\n        {\r\n          id: 'group',\r\n          label: utils.string.t('claims.processing.tasksGridColumns.group'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          nowrap: true,\r\n        },\r\n        {\r\n          id: 'departmentName',\r\n          label: utils.string.t('claims.processing.tasksGridColumns.division'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          nowrap: true,\r\n        },\r\n        {\r\n          id: 'processSubType',\r\n          label: utils.string.t('claims.processing.tasksGridColumns.processSubType'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          nowrap: true,\r\n        },\r\n        {\r\n          id: 'xbInstanceId',\r\n          label: utils.string.t('claims.processing.tasksGridColumns.xbInstance'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          nowrap: true,\r\n        },\r\n      ]\r\n      : [\r\n        {\r\n          id: 'requestedBy',\r\n          label: utils.string.t('claims.processing.tasksGridColumns.createdBy'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          nowrap: true,\r\n          visible: true,\r\n        },\r\n        { id: 'actions', menu: true, visible: true, mandatory: true },\r\n      ]),\r\n    ...(isPremiumProcessing && taskType === TASK_TEAM_TYPE.myTeam ? [{ id: 'actions', menu: true, visible: true, mandatory: true }] : []),\r\n  ];\r\n\r\n  const { columns: columnsArray, columnProps, toggleColumn, isTableHidden } = useFlexiColumns(columns);\r\n\r\n  if (isPremiumProcessing) {\r\n    const columnsVisible = columnsArray?.filter((columnData) => columnData.visible !== false);\r\n    if (columnsVisible?.length === 2 && columnsVisible[0]?.visible ) {\r\n      const selectColumn = columnsArray?.find((e) => e.id === 'id' || e.id === 'assignee');\r\n      toggleColumn(selectColumn || null);\r\n    }\r\n  }\r\n\r\n  let managedTaskColumnsArray =\r\n    utils.generic.isValidArray(columnsArray, true) && taskType === TASK_TEAM_TYPE.myTask\r\n      ? columnsArray?.filter((item) => item.id !== TEAM_TASKS_SPECIFIC_COLUMNS)\r\n      : columnsArray;\r\n\r\n  const managedTableFilterFields = !isTaskTeam\r\n    ? tableFilterFields.filter((item) => item.id !== TEAM_TASKS_SPECIFIC_COLUMNS)\r\n    : tableFilterFields;\r\n\r\n  const resetFilter = () => {\r\n    setValue('createdOn', null);\r\n    setValue('targetDueDate', null);\r\n    setValue('inceptionDate', null);\r\n    if (isPremiumProcessing) {\r\n      setValue('caseCreatedOn', null);\r\n      dispatch(resetPremiumProcessingTasksFilters);\r\n      dispatch(\r\n        getPremiumProcessingTasksDetails({\r\n          requestType: searchTypeCall,\r\n          isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\r\n          taskType,\r\n          query: searchTerm,\r\n          filterTerm: {},\r\n        })\r\n      );\r\n      dispatch(\r\n        getPremiumProcessingTasksDetails({\r\n          requestType: filterTypeCall,\r\n          isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\r\n          taskType,\r\n          query: searchTerm,\r\n          filterTerm: {},\r\n        })\r\n      );\r\n    } else {\r\n      dispatch(resetClaimsProcessingTasksFilters());\r\n      dispatch(getClaimsTasksProcessing({ requestType: searchTypeCall, taskType, query: searchTerm, filterTerm: {} }));\r\n      dispatch(getClaimsTasksProcessing({ requestType: filterTypeCall, taskType, query: searchTerm, filterTerm: {} }));\r\n    }\r\n  };\r\n\r\n  const resetSearch = () => {\r\n    if (isPremiumProcessing) {\r\n      dispatch(resetPremiumProcessingTaskSearch());\r\n      dispatch(\r\n        getPremiumProcessingTasksDetails({\r\n          requestType: searchTypeCall,\r\n          isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\r\n          taskType,\r\n          filterTerm: [],\r\n        })\r\n      );\r\n      dispatch(\r\n        getPremiumProcessingTasksDetails({\r\n          requestType: filterTypeCall,\r\n          isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\r\n          taskType,\r\n          filterTerm: [],\r\n        })\r\n      );\r\n    } else {\r\n      dispatch(resetClaimsProcessingTaskSearch());\r\n      dispatch(getClaimsTasksProcessing({ requestType: searchTypeCall, taskType, filterTerm: [] }));\r\n      dispatch(getClaimsTasksProcessing({ requestType: filterTypeCall, taskType, filterTerm: [] }));\r\n    }\r\n  };\r\n\r\n  const handleSearch = ({ search, filters }) => {\r\n    const searchType = watchSearchType?.value || '';\r\n\r\n    setSearchTerm(search);\r\n\r\n    if (isPremiumProcessing) {\r\n      dispatch(\r\n        getPremiumProcessingTasksDetails({\r\n          requestType: searchTypeCall,\r\n          taskType,\r\n          query: search,\r\n          isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\r\n          direction: 'desc',\r\n          searchType: searchType,\r\n          navigation: false,\r\n        })\r\n      );\r\n      dispatch(\r\n        getPremiumProcessingTasksDetails({\r\n          requestType: filterTypeCall,\r\n          taskType,\r\n          isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\r\n          query: search,\r\n          direction: 'desc',\r\n          searchType: searchType,\r\n          navigation: false,\r\n        })\r\n      );\r\n    } else {\r\n      dispatch(\r\n        getClaimsTasksProcessing({\r\n          requestType: searchTypeCall,\r\n          taskType,\r\n          query: search,\r\n          direction: 'asc',\r\n          searchType: searchType,\r\n          navigation: false,\r\n        })\r\n      );\r\n      dispatch(\r\n        getClaimsTasksProcessing({\r\n          requestType: filterTypeCall,\r\n          taskType,\r\n          query: search,\r\n          direction: 'asc',\r\n          searchType: searchType,\r\n          navigation: false,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleSearchFilter = ({ search, filters }) => {\r\n    if (isPremiumProcessing) {\r\n      dispatch(\r\n        getPremiumProcessingTasksDetails({\r\n          requestType: searchTypeCall,\r\n          taskType,\r\n          query: search,\r\n          filterTerm: filters,\r\n          isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\r\n          navigation: false,\r\n        })\r\n      );\r\n      dispatch(\r\n        getPremiumProcessingTasksDetails({\r\n          requestType: filterTypeCall,\r\n          taskType,\r\n          query: search,\r\n          filterTerm: filters,\r\n          isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\r\n          navigation: false,\r\n        })\r\n      );\r\n    } else {\r\n      dispatch(getClaimsTasksProcessing({ requestType: searchTypeCall, taskType, query: search, filterTerm: filters, navigation: false }));\r\n      dispatch(\r\n        getClaimsTasksProcessing({\r\n          requestType: filterTypeCall,\r\n          taskType,\r\n          query: search,\r\n          filterTerm: filters,\r\n          navigation: false,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleChangePage = (newPage) => {\r\n    setNewPage(newPage);\r\n    if (isPremiumProcessing) {\r\n      dispatch(\r\n        getPremiumProcessingTasksDetails({\r\n          requestType: searchTypeCall,\r\n          isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\r\n          taskType,\r\n          page: newPage,\r\n          query: searchTerm,\r\n          navigation: true,\r\n        })\r\n      );\r\n      dispatch(\r\n        getPremiumProcessingTasksDetails({\r\n          requestType: filterTypeCall,\r\n          isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\r\n          taskType,\r\n          page: newPage,\r\n          query: searchTerm,\r\n          navigation: true,\r\n        })\r\n      );\r\n    } else {\r\n      dispatch(getClaimsTasksProcessing({ requestType: searchTypeCall, taskType, page: newPage, query: searchTerm, navigation: true }));\r\n    }\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (rowsPerPage) => {\r\n    if (isPremiumProcessing) {\r\n      dispatch(\r\n        getPremiumProcessingTasksDetails({\r\n          requestType: searchTypeCall,\r\n          taskType,\r\n          size: rowsPerPage,\r\n          isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\r\n          query: searchTerm,\r\n          navigation: true,\r\n        })\r\n      );\r\n      dispatch(\r\n        getPremiumProcessingTasksDetails({\r\n          requestType: filterTypeCall,\r\n          taskType,\r\n          size: rowsPerPage,\r\n          isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\r\n          query: searchTerm,\r\n          navigation: true,\r\n        })\r\n      );\r\n    } else {\r\n      dispatch(getClaimsTasksProcessing({ requestType: searchTypeCall, taskType, size: rowsPerPage, query: searchTerm, navigation: true }));\r\n    }\r\n  };\r\n\r\n  const handleSort = (by, dir) => {\r\n    if (isPremiumProcessing) {\r\n      if (by === 'createdOn') {\r\n        // TODO:: This is temparary fix UI and API should have same field name.\r\n        by = 'caseCreatedOn';\r\n      }\r\n      dispatch(\r\n        getPremiumProcessingTasksDetails({\r\n          requestType: searchTypeCall,\r\n          taskType,\r\n          sortBy: by,\r\n          direction: dir,\r\n          query: searchTerm,\r\n          isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\r\n          navigation: false,\r\n        })\r\n      );\r\n    } else {\r\n      dispatch(\r\n        getClaimsTasksProcessing({\r\n          requestType: searchTypeCall,\r\n          taskType,\r\n          sortBy: by,\r\n          direction: dir,\r\n          query: searchTerm,\r\n          navigation: false,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const refreshTasksGrid = () => {\r\n    if (isPremiumProcessing) {\r\n      dispatch(\r\n        getPremiumProcessingTasksDetails({\r\n          requestType: searchTypeCall,\r\n          isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\r\n          taskType,\r\n        })\r\n      );\r\n      dispatch(\r\n        getPremiumProcessingTasksDetails({\r\n          requestType: filterTypeCall,\r\n          isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\r\n          taskType,\r\n        })\r\n      );\r\n    } else {\r\n      dispatch(getClaimsTasksProcessing({ requestType: searchTypeCall, taskType }));\r\n      dispatch(getClaimsTasksProcessing({ requestType: filterTypeCall, taskType }));\r\n    }\r\n  };\r\n\r\n  const hasTasks = isPremiumProcessing\r\n    ? utils.generic.isValidArray(premiumProcessingCaseList?.items, true)\r\n    : utils.generic.isValidArray(claimsTasksProcessing?.items, true);\r\n  const tasksSelected = isPremiumProcessing ? ppMultiSelectedCasesList || [] : claimsTasksProcessing?.selected || [];\r\n\r\n  const enableBulkAssign = isPremiumProcessing\r\n    ? utils.generic.isValidArray(ppMultiSelectedCasesList, true) &&\r\n    ppMultiSelectedCasesList.length > 1 &&\r\n    ppMultiSelectedCasesList.length <= 10\r\n    : utils.generic.isValidArray(tasksSelected, true) && tasksSelected.length > 1 && tasksSelected.length <= 10;\r\n\r\n  const handleBulkAssign = async () => {\r\n    await dispatch(\r\n      showModal({\r\n        component: 'ADD_ASSIGNEE',\r\n        props: {\r\n          title: utils.string.t('app.assign'),\r\n          hideCompOnBlur: false,\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            isPremiumProcessing,\r\n            taskDetails: tasksSelected,\r\n            submitHandler: (data) => {\r\n              refreshTasksGrid();\r\n              if (isPremiumProcessing) {\r\n                premiumProcessingSaveAssigneeResponseHandler(data.premiumProcessingSaveAssigneeResponse);\r\n                //TODO:: premiumProcessingSaveAssigneeDetails();\r\n              }\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleUpdateTaskPriority = (task) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'SET_PRIORITY',\r\n        props: {\r\n          title: utils.string.t('claims.modals.taskFunction.setTaskPriorityTitle'),\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            task,\r\n            handlers: {\r\n              cancel: () => {\r\n                dispatch(hideModal());\r\n              },\r\n              submit: () => {\r\n                refreshTasksGrid();\r\n                dispatch(hideModal());\r\n              },\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const premiumProcessingSaveAssigneeResponseHandler = (data) => {\r\n    if (isPremiumProcessing) {\r\n      dispatch(\r\n        getPremiumProcessingTasksDetails({\r\n          requestType: searchTypeCall,\r\n          isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\r\n          taskType,\r\n          filterTerm: [],\r\n        })\r\n      );\r\n      dispatch(\r\n        getPremiumProcessingTasksDetails({\r\n          requestType: filterTypeCall,\r\n          isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\r\n          taskType,\r\n          filterTerm: [],\r\n        })\r\n      );\r\n      premiumProcessingSaveAssigneeDetails(data);\r\n    }\r\n  };\r\n  const getPremiumProcessingNotificationDetails = async () => {\r\n    const response = await dispatch(getTaskCaseViewType({ caseId: refId }));\r\n    if (response && response?.status === API_RESPONSE_OK) {\r\n      if (response.data.isCaseIdForLoggedInUser === 0) {\r\n        dispatch(\r\n          enqueueNotification(utils.string.t('premiumProcessing.premiumProcessingNotificationCaseSearch', { id: refId }), 'warning')\r\n        );\r\n        dispatch(resetPremiumProcessingTaskDetails('filter'));\r\n        dispatch(resetPremiumProcessingTaskDetails('search'));\r\n      } else {\r\n        if (response.data.taskType) {\r\n          setValue('taskType', response.data.taskType);\r\n        }\r\n        if (response?.data?.isCheckSigningCaseIndicator === 1) {\r\n          setIsCheckSigningValue(true);\r\n        }\r\n        dispatch(\r\n          getPremiumProcessingTasksDetails({\r\n            requestType: searchTypeCall,\r\n            isCheckSigning: response?.data?.isCheckSigningCaseIndicator === 1 ? true : false,\r\n            taskType: response.data.taskType,\r\n            query: refId,\r\n            direction: 'desc',\r\n            searchType: 'taskRef',\r\n            navigation: false,\r\n          })\r\n        );\r\n        dispatch(\r\n          getPremiumProcessingTasksDetails({\r\n            requestType: filterTypeCall,\r\n            isCheckSigning: response?.data?.isCheckSigningCaseIndicator === 1 ? true : false,\r\n            taskType: response.data.taskType,\r\n            query: refId,\r\n            direction: 'desc',\r\n            searchType: 'taskRef',\r\n            navigation: false,\r\n          })\r\n        );\r\n      }\r\n    }\r\n  };\r\n  const resetNotificationFilters = () => {\r\n    if (isPremiumProcessing) {\r\n      dispatch(\r\n        getPremiumProcessingTasksDetails({\r\n          requestType: searchTypeCall,\r\n          isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\r\n          taskType,\r\n          query: '',\r\n          filterTerm: {},\r\n        })\r\n      );\r\n      dispatch(\r\n        getPremiumProcessingTasksDetails({\r\n          requestType: filterTypeCall,\r\n          isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\r\n          taskType,\r\n          query: '',\r\n          filterTerm: {},\r\n        })\r\n      );\r\n      dispatch(resetPremiumProcessingTasksFilters);\r\n      dispatch(resetPremiumProcessingTaskSearch);\r\n      history.push(`${config.routes.premiumProcessing.root}`);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    const searchType = watchSearchType?.value || '';\r\n    if (refId && !isPremiumProcessing) {\r\n      dispatch(\r\n        getClaimsTasksProcessing({\r\n          requestType: searchTypeCall,\r\n          taskType,\r\n          searchType: searchType,\r\n          page: newPage,\r\n          query: refId,\r\n        })\r\n      );\r\n      dispatch(\r\n        getClaimsTasksProcessing({\r\n          requestType: filterTypeCall,\r\n          taskType,\r\n          searchType: searchType,\r\n          page: newPage,\r\n          query: refId,\r\n        })\r\n      );\r\n    } else if (refId && isPremiumProcessing) {\r\n      getPremiumProcessingNotificationDetails();\r\n    }\r\n  }, [refId]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    if (taskType && !refId) {\r\n      setValue('taskType', taskType);\r\n      setIsTaskTeam(taskType === TASK_TEAM_TYPE.myTeam);\r\n      if (isPremiumProcessing) {\r\n        dispatch(\r\n          getPremiumProcessingTasksDetails({\r\n            requestType: searchTypeCall,\r\n            taskType,\r\n            isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\r\n            filterTerm: [],\r\n          })\r\n        );\r\n        dispatch(\r\n          getPremiumProcessingTasksDetails({\r\n            requestType: filterTypeCall,\r\n            taskType,\r\n            isCheckSigning: isCheckSigningValue ? isCheckSigningValue : false,\r\n            filterTerm: [],\r\n          })\r\n        );\r\n      } else {\r\n        dispatch(getClaimsTasksProcessing({ requestType: searchTypeCall, taskType, filterTerm: [] }));\r\n        dispatch(getClaimsTasksProcessing({ requestType: filterTypeCall, taskType, filterTerm: [] }));\r\n      }\r\n    }\r\n    return () => {\r\n      dispatch(resetClaimsProcessingTasksItems());\r\n      dispatch(resetClaimsProcessingTasksFilters());\r\n      dispatch(resetClaimsProcessingTaskSearch());\r\n      isPremiumProcessing && dispatch(resetPremiumProcessingTasksFilters);\r\n      isPremiumProcessing && dispatch(resetPremiumProcessingTaskSearch);\r\n    };\r\n  }, [taskType]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const premiumProcessingManageColumns = () => {\r\n    if (utils.generic.isValidArray(managedTaskColumnsArray, true)) {\r\n      managedTaskColumnsArray?.forEach((data) => {\r\n        if (data.id !== 'id' && data.id !== 'actions') {\r\n          data.visible = false;\r\n        }\r\n        if (\r\n          data.id === 'assuredName' ||\r\n          data.id === 'inceptionDate' ||\r\n          data.id === 'processRef' ||\r\n          data.id === 'departmentName' ||\r\n          data.id === 'processSubType'\r\n        ) {\r\n          data.visible = true;\r\n        }\r\n        if (taskType === TASK_TEAM_TYPE.myTask || taskType === TASK_TEAM_TYPE.myTeam) {\r\n          if (data.id === 'type' || data.id === 'priority' || data.id === 'targetDueDate' || data.id === 'taskName') {\r\n            data.visible = true;\r\n          }\r\n        }\r\n\r\n        if (taskType === TASK_TEAM_TYPE.myTeam || taskType === TASK_TEAM_TYPE.taskHistory) {\r\n          if (data.id === 'status' || data.id === 'assignee') {\r\n            data.visible = true;\r\n          }\r\n        }\r\n        if (taskType === TASK_TEAM_TYPE.taskHistory) {\r\n          if (data.id === 'xbInstanceId') {\r\n            data.visible = true;\r\n          }\r\n        }\r\n\r\n        if (data.userSelected) {\r\n          data.visible = true;\r\n        }\r\n\r\n        if (data.defaultUnselected) {\r\n          data.visible = false;\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const toggleCheckSigning = (event) => {\r\n    const searchType = watchSearchType?.value || '';\r\n    setIsCheckSigningValue(event?.target?.checked);\r\n    const checkedValue = event?.target?.checked\r\n    dispatch(udpateIsCheckSigningToggle(checkedValue));\r\n    dispatch(\r\n      getPremiumProcessingTasksDetails({\r\n        requestType: searchTypeCall,\r\n        searchType: searchType,\r\n        query: searchTerm,\r\n        isCheckSigning: checkedValue,\r\n        taskType,\r\n        filterTerm: [],\r\n      })\r\n    );\r\n    dispatch(\r\n      getPremiumProcessingTasksDetails({\r\n        requestType: filterTypeCall,\r\n        searchType: searchType,\r\n        query: searchTerm,\r\n        isCheckSigning: checkedValue,\r\n        taskType,\r\n        filterTerm: [],\r\n      })\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isPremiumProcessing) {\r\n      premiumProcessingManageColumns();\r\n    }\r\n    return isPremiumProcessing\r\n      ? dispatch(selectedPremiumProcessingTaskType(taskType))\r\n      : dispatch(selectedClaimsProcessingTaskType(taskType));\r\n  }, [taskType]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    const searchType = watchSearchType?.value || '';\r\n    if (editAdhocStatus) {\r\n      dispatch(\r\n        getClaimsTasksProcessing({\r\n          requestType: searchTypeCall,\r\n          taskType,\r\n          searchType: searchType,\r\n          page: newPage,\r\n          query: searchTerm,\r\n        })\r\n      );\r\n      dispatch(\r\n        getClaimsTasksProcessing({\r\n          requestType: filterTypeCall,\r\n          taskType,\r\n          searchType: searchType,\r\n          page: newPage,\r\n          query: searchTerm,\r\n        })\r\n      );\r\n    }\r\n  }, [editAdhocStatus]); // eslint-disable-line react-hooks/exhaustive-deps\r\n  const toggleFlexiColumns = (columns) => {\r\n    if (uiNavExpanded) {\r\n      dispatch(collapseNav());\r\n    }\r\n    if (isPremiumProcessing) {\r\n      if (!columns.visible) {\r\n        columns.userSelected = true;\r\n        if (utils.generic.isValidObject(columns, 'defaultUnselected')) {\r\n          columns.defaultUnselected = false;\r\n        }\r\n      } else {\r\n        columns.userSelected = false;\r\n        if (!utils.generic.isValidObject(columns, 'defaultUnselected')) {\r\n          columns.defaultUnselected = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    toggleColumn(columns);\r\n  };\r\n  return (\r\n    <TasksManagementView\r\n      isTaskTeam={isTaskTeam}\r\n      setValue={setValue}\r\n      hasTasks={hasTasks}\r\n      enableBulkAssign={enableBulkAssign}\r\n      fields={fields}\r\n      notificationRefId={refId}\r\n      control={control}\r\n      taskTypeValue={taskTypeValue}\r\n      tasks={isPremiumProcessing ? premiumProcessingCaseList : claimsTasksProcessing}\r\n      sort={{\r\n        ...(isPremiumProcessing && premiumProcessingCaseList ? premiumProcessingCaseList.sort : claimsTasksProcessing.sort),\r\n        direction:\r\n          isPremiumProcessing && premiumProcessingCaseList\r\n            ? premiumProcessingCaseList.sort.direction.toLowerCase()\r\n            : claimsTasksProcessing.sort.direction.toLowerCase(),\r\n        type: 'numeric',\r\n      }}\r\n      columnsArray={managedTaskColumnsArray}\r\n      columnProps={columnProps}\r\n      tableFilterFields={managedTableFilterFields}\r\n      isFetchingFilters={isFetchingFilters}\r\n      isPremiumProcessing={isPremiumProcessing}\r\n      isTableHidden={isTableHidden}\r\n      isCheckSigningValue={isCheckSigningValue}\r\n      handlers={{\r\n        toggleColumn: toggleFlexiColumns,\r\n        resetFilter,\r\n        resetSearch,\r\n        handleSearch,\r\n        handleSearchFilter,\r\n        handleChangePage,\r\n        handleChangeRowsPerPage,\r\n        handleSort,\r\n        setTaskType,\r\n        refreshTasksGrid,\r\n        premiumProcessingSaveAssignee: premiumProcessingSaveAssigneeResponseHandler,\r\n        handleBulkAssign,\r\n        handleUpdateTaskPriority,\r\n        resetNotificationFilters,\r\n        toggleCheckSigning\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}