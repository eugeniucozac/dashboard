{"ast":null,"code":"import _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ClaimActionTable\\\\ClaimActionLevelChildren.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types'; //app\n\nimport { ClaimActionRow } from './ClaimActionRow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nClaimActionLevelChildren.prototype = {\n  data: PropTypes.array.isRequired,\n  columnProps: PropTypes.array.isRequired\n};\nexport function ClaimActionLevelChildren(_ref) {\n  _s();\n\n  var _data$actionChildItem,\n      _this = this;\n\n  var data = _ref.data,\n      columnProps = _ref.columnProps;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isOpen = _useState2[0],\n      setIsOpen = _useState2[1];\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ClaimActionRow, {\n      columnProps: columnProps,\n      data: data,\n      isOpen: isOpen,\n      onClick: function onClick() {\n        return setIsOpen(!isOpen);\n      },\n      level: 3\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), isOpen && (data === null || data === void 0 ? void 0 : data.actionChildItemList) ? data === null || data === void 0 ? void 0 : (_data$actionChildItem = data.actionChildItemList) === null || _data$actionChildItem === void 0 ? void 0 : _data$actionChildItem.map(function (itemLevelFourth, index) {\n      return /*#__PURE__*/_jsxDEV(ClaimActionRow, {\n        columnProps: columnProps,\n        data: itemLevelFourth,\n        level: 4\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 20\n      }, _this);\n    }) : null]\n  }, void 0, true);\n}\n\n_s(ClaimActionLevelChildren, \"mEi83NlPXQzy/XIDfTYWzOSvaHw=\");\n\n_c = ClaimActionLevelChildren;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimActionLevelChildren\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ClaimActionTable/ClaimActionLevelChildren.js"],"names":["React","useState","PropTypes","ClaimActionRow","ClaimActionLevelChildren","prototype","data","array","isRequired","columnProps","isOpen","setIsOpen","actionChildItemList","map","itemLevelFourth","index"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;;AACA,SAASC,cAAT,QAA+B,kBAA/B;;;AACAC,wBAAwB,CAACC,SAAzB,GAAqC;AACnCC,EAAAA,IAAI,EAAEJ,SAAS,CAACK,KAAV,CAAgBC,UADa;AAEnCC,EAAAA,WAAW,EAAEP,SAAS,CAACK,KAAV,CAAgBC;AAFM,CAArC;AAKA,OAAO,SAASJ,wBAAT,OAAyD;AAAA;;AAAA;AAAA;;AAAA,MAArBE,IAAqB,QAArBA,IAAqB;AAAA,MAAfG,WAAe,QAAfA,WAAe;;AAAA,kBAClCR,QAAQ,CAAC,IAAD,CAD0B;AAAA;AAAA,MACvDS,MADuD;AAAA,MAC/CC,SAD+C;;AAE9D,sBACE;AAAA,4BACE,QAAC,cAAD;AAAgB,MAAA,WAAW,EAAEF,WAA7B;AAA0C,MAAA,IAAI,EAAEH,IAAhD;AAAsD,MAAA,MAAM,EAAEI,MAA9D;AAAsE,MAAA,OAAO,EAAE;AAAA,eAAMC,SAAS,CAAC,CAACD,MAAF,CAAf;AAAA,OAA/E;AAAyG,MAAA,KAAK,EAAE;AAAhH;AAAA;AAAA;AAAA;AAAA,YADF,EAEGA,MAAM,KAAIJ,IAAJ,aAAIA,IAAJ,uBAAIA,IAAI,CAAEM,mBAAV,CAAN,GACGN,IADH,aACGA,IADH,gDACGA,IAAI,CAAEM,mBADT,0DACG,sBAA2BC,GAA3B,CAA+B,UAACC,eAAD,EAAkBC,KAAlB,EAA4B;AACzD,0BAAO,QAAC,cAAD;AAA4B,QAAA,WAAW,EAAEN,WAAzC;AAAsD,QAAA,IAAI,EAAEK,eAA5D;AAA6E,QAAA,KAAK,EAAE;AAApF,SAAqBC,KAArB;AAAA;AAAA;AAAA;AAAA,eAAP;AACD,KAFD,CADH,GAIG,IANN;AAAA,kBADF;AAUD;;GAZeX,wB;;KAAAA,wB","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n//app\r\nimport { ClaimActionRow } from './ClaimActionRow';\r\nClaimActionLevelChildren.prototype = {\r\n  data: PropTypes.array.isRequired,\r\n  columnProps: PropTypes.array.isRequired,\r\n};\r\n\r\nexport function ClaimActionLevelChildren({ data, columnProps }) {\r\n  const [isOpen, setIsOpen] = useState(true);\r\n  return (\r\n    <>\r\n      <ClaimActionRow columnProps={columnProps} data={data} isOpen={isOpen} onClick={() => setIsOpen(!isOpen)} level={3} />\r\n      {isOpen && data?.actionChildItemList\r\n        ? data?.actionChildItemList?.map((itemLevelFourth, index) => {\r\n            return <ClaimActionRow key={index} columnProps={columnProps} data={itemLevelFourth} level={4} />;\r\n          })\r\n        : null}\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}