{"ast":null,"code":"// app\nimport { addLoader, authLogout, enqueueNotification, hideModal, removeLoader } from 'stores';\nimport * as utils from 'utils';\nimport * as constants from 'consts';\nexport var uploadDocument = function uploadDocument(_ref) {\n  var data = _ref.data,\n      placement = _ref.placement,\n      documentType = _ref.documentType,\n      documentTypeId = _ref.documentTypeId,\n      redirectionCallback = _ref.redirectionCallback;\n  return function (dispatch, getState) {\n    var state = getState(); // prettier-ignore\n\n    var auth = state.user.auth,\n        endpoint = state.config.vars.endpoint;\n    dispatch(postUploadRequest({\n      data: data,\n      documentType: documentType,\n      placement: placement,\n      documentTypeId: documentTypeId\n    }));\n    dispatch(addLoader('uploadDocument'));\n    var validProps = utils.generic.isValidObject(placement) || documentType && documentTypeId;\n\n    if (!data.folder || !data.file || !validProps) {\n      dispatch(enqueueNotification('notification.document.fail', 'error'));\n      dispatch(removeLoader('uploadDocument'));\n      return;\n    }\n\n    var form = new FormData();\n    form.append('uploaderEmail', state.user.emailId);\n    form.append('uploaderFullName', state.user.fullName);\n    form.append('teamId', 'unknown');\n    /*TODO*/\n\n    form.append('teamName', 'unknown');\n    /*TODO*/\n\n    if (placement) {\n      form.append('placementId', placement.id);\n      form.append('placementName', placement.insureds.map(function (insured) {\n        return insured.name;\n      }).join(', '));\n      form.append('placementYear', placement.inceptionDate.split('-')[0]);\n    }\n\n    if (documentType && documentType === constants.FOLDER_MODELLING) {\n      form.append('modellingId', documentTypeId);\n    }\n\n    form.append('folder', data.folder);\n    form.append('file', data.file);\n    return utils.api.multiPartPost({\n      token: auth.accessToken,\n      endpoint: endpoint.document,\n      path: 'api/document',\n      data: form\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleData(json);\n    }).then(function (data) {\n      dispatch(postUploadSuccess(data));\n      dispatch(enqueueNotification('notification.document.success', 'success'));\n    }).catch(function (err) {\n      var errorParams = {\n        file: 'stores/document.actions',\n        message: 'API multipart post error (document)'\n      };\n      dispatch(postUploadFailure(err));\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(enqueueNotification('notification.document.fail', 'error'));\n    }).finally(function () {\n      dispatch(removeLoader('uploadDocument'));\n      dispatch(hideModal());\n\n      if (utils.generic.isFunction(redirectionCallback)) {\n        redirectionCallback();\n        return;\n      }\n\n      return;\n    });\n  };\n};\nexport var postUploadRequest = function postUploadRequest(payload) {\n  return {\n    type: 'DOCUMENT_UPLOAD_POST_REQUEST',\n    payload: payload\n  };\n};\nexport var postUploadSuccess = function postUploadSuccess(data) {\n  return {\n    type: 'DOCUMENT_UPLOAD_POST_SUCCESS',\n    payload: {\n      data: data\n    }\n  };\n};\nexport var postUploadFailure = function postUploadFailure(error) {\n  return {\n    type: 'DOCUMENT_UPLOAD_POST_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/document/document.actions.upload.js"],"names":["addLoader","authLogout","enqueueNotification","hideModal","removeLoader","utils","constants","uploadDocument","data","placement","documentType","documentTypeId","redirectionCallback","dispatch","getState","state","auth","user","endpoint","config","vars","postUploadRequest","validProps","generic","isValidObject","folder","file","form","FormData","append","emailId","fullName","id","insureds","map","insured","name","join","inceptionDate","split","FOLDER_MODELLING","api","multiPartPost","token","accessToken","document","path","then","response","handleResponse","json","handleData","postUploadSuccess","catch","err","errorParams","message","postUploadFailure","handleError","handleUnauthorized","finally","isFunction","payload","type","error"],"mappings":"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","sourcesContent":["// app\r\nimport { addLoader, authLogout, enqueueNotification, hideModal, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\nimport * as constants from 'consts';\r\n\r\nexport const uploadDocument =\r\n  ({ data, placement, documentType, documentTypeId, redirectionCallback }) =>\r\n  (dispatch, getState) => {\r\n    const state = getState();\r\n\r\n    // prettier-ignore\r\n    const { user: { auth }, config: { vars: { endpoint }}} = state;\r\n\r\n    dispatch(postUploadRequest({ data, documentType, placement, documentTypeId }));\r\n    dispatch(addLoader('uploadDocument'));\r\n\r\n    const validProps = utils.generic.isValidObject(placement) || (documentType && documentTypeId);\r\n\r\n    if (!data.folder || !data.file || !validProps) {\r\n      dispatch(enqueueNotification('notification.document.fail', 'error'));\r\n      dispatch(removeLoader('uploadDocument'));\r\n      return;\r\n    }\r\n\r\n    let form = new FormData();\r\n    form.append('uploaderEmail', state.user.emailId);\r\n    form.append('uploaderFullName', state.user.fullName);\r\n    form.append('teamId', 'unknown'); /*TODO*/\r\n    form.append('teamName', 'unknown'); /*TODO*/\r\n\r\n    if (placement) {\r\n      form.append('placementId', placement.id);\r\n      form.append('placementName', placement.insureds.map((insured) => insured.name).join(', '));\r\n      form.append('placementYear', placement.inceptionDate.split('-')[0]);\r\n    }\r\n\r\n    if (documentType && documentType === constants.FOLDER_MODELLING) {\r\n      form.append('modellingId', documentTypeId);\r\n    }\r\n\r\n    form.append('folder', data.folder);\r\n    form.append('file', data.file);\r\n\r\n    return utils.api\r\n      .multiPartPost({\r\n        token: auth.accessToken,\r\n        endpoint: endpoint.document,\r\n        path: 'api/document',\r\n        data: form,\r\n      })\r\n      .then((response) => utils.api.handleResponse(response))\r\n      .then((json) => utils.api.handleData(json))\r\n      .then((data) => {\r\n        dispatch(postUploadSuccess(data));\r\n        dispatch(enqueueNotification('notification.document.success', 'success'));\r\n      })\r\n      .catch((err) => {\r\n        const errorParams = {\r\n          file: 'stores/document.actions',\r\n          message: 'API multipart post error (document)',\r\n        };\r\n\r\n        dispatch(postUploadFailure(err));\r\n        utils.api.handleError(err, errorParams);\r\n        utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n        dispatch(enqueueNotification('notification.document.fail', 'error'));\r\n      })\r\n      .finally(() => {\r\n        dispatch(removeLoader('uploadDocument'));\r\n        dispatch(hideModal());\r\n\r\n        if (utils.generic.isFunction(redirectionCallback)) {\r\n          redirectionCallback();\r\n          return;\r\n        }\r\n\r\n        return;\r\n      });\r\n  };\r\n\r\nexport const postUploadRequest = (payload) => {\r\n  return {\r\n    type: 'DOCUMENT_UPLOAD_POST_REQUEST',\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const postUploadSuccess = (data) => {\r\n  return {\r\n    type: 'DOCUMENT_UPLOAD_POST_SUCCESS',\r\n    payload: {\r\n      data,\r\n    },\r\n  };\r\n};\r\n\r\nexport const postUploadFailure = (error) => {\r\n  return {\r\n    type: 'DOCUMENT_UPLOAD_POST_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}