{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n// app\nimport { enqueueNotification } from 'stores';\nimport * as utils from 'utils';\nimport { createWhitespacePolicy, patchPolicy } from 'stores';\nexport var patchPolicyPostWhitespace = function patchPolicyPostWhitespace(policy, body) {\n  return function (dispatch, getState) {\n    dispatch(patchPolicyPostWhitespaceRequest(policy, body));\n    var defaultError = {\n      file: 'stores/bundled.actions.patchPolicyPostWhitespace',\n      message: 'Data missing for request'\n    };\n\n    if (!utils.generic.isValidObject(policy) || !utils.generic.isValidObject(body)) {\n      dispatch(patchPolicyPostWhitespaceFailure(defaultError));\n      dispatch(enqueueNotification('notification.patchPolicyPostWhitespace.fail', 'error'));\n      return;\n    }\n\n    var umrId = body.umrId;\n    return dispatch(patchPolicy(policy.id, {\n      umrId: umrId\n    })).then(function () {\n      return dispatch(createWhitespacePolicy(_objectSpread({\n        toPeriod: policy.expiryDate,\n        fromPeriod: policy.inceptionDate\n      }, body)));\n    })[\"catch\"](function (err) {\n      return err;\n    });\n  };\n};\nexport var patchPolicyPostWhitespaceRequest = function patchPolicyPostWhitespaceRequest(policy, body) {\n  return {\n    type: 'PATCH_POLICY_POST_WHITESPACE_REQUEST',\n    payload: {\n      policy: policy,\n      body: body\n    }\n  };\n};\nexport var patchPolicyPostWhitespaceFailure = function patchPolicyPostWhitespaceFailure(error) {\n  return {\n    type: 'PATCH_POLICY_POST_WHITESPACE_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/bundled/bundled.actions.patchPolicyPostWhitespace.js"],"names":["enqueueNotification","utils","createWhitespacePolicy","patchPolicy","patchPolicyPostWhitespace","policy","body","dispatch","getState","patchPolicyPostWhitespaceRequest","defaultError","file","message","generic","isValidObject","patchPolicyPostWhitespaceFailure","umrId","id","then","toPeriod","expiryDate","fromPeriod","inceptionDate","err","type","payload","error"],"mappings":";AAAA;AACA,SAASA,mBAAT,QAAoC,QAApC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,sBAAT,EAAiCC,WAAjC,QAAoD,QAApD;AAEA,OAAO,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACC,MAAD,EAASC,IAAT;AAAA,SAAkB,UAACC,QAAD,EAAWC,QAAX,EAAwB;AACjFD,IAAAA,QAAQ,CAACE,gCAAgC,CAACJ,MAAD,EAASC,IAAT,CAAjC,CAAR;AAEA,QAAMI,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE,kDADa;AAEnBC,MAAAA,OAAO,EAAE;AAFU,KAArB;;AAKA,QAAI,CAACX,KAAK,CAACY,OAAN,CAAcC,aAAd,CAA4BT,MAA5B,CAAD,IAAwC,CAACJ,KAAK,CAACY,OAAN,CAAcC,aAAd,CAA4BR,IAA5B,CAA7C,EAAgF;AAC9EC,MAAAA,QAAQ,CAACQ,gCAAgC,CAACL,YAAD,CAAjC,CAAR;AACAH,MAAAA,QAAQ,CAACP,mBAAmB,CAAC,6CAAD,EAAgD,OAAhD,CAApB,CAAR;AACA;AACD;;AAZgF,QAczEgB,KAdyE,GAc/DV,IAd+D,CAczEU,KAdyE;AAejF,WAAOT,QAAQ,CAACJ,WAAW,CAACE,MAAM,CAACY,EAAR,EAAY;AAAED,MAAAA,KAAK,EAALA;AAAF,KAAZ,CAAZ,CAAR,CACJE,IADI,CACC,YAAM;AACV,aAAOX,QAAQ,CACbL,sBAAsB;AACpBiB,QAAAA,QAAQ,EAAEd,MAAM,CAACe,UADG;AAEpBC,QAAAA,UAAU,EAAEhB,MAAM,CAACiB;AAFC,SAGjBhB,IAHiB,EADT,CAAf;AAOD,KATI,WAUE,UAACiB,GAAD;AAAA,aAASA,GAAT;AAAA,KAVF,CAAP;AAWD,GA1BwC;AAAA,CAAlC;AA4BP,OAAO,IAAMd,gCAAgC,GAAG,SAAnCA,gCAAmC,CAACJ,MAAD,EAASC,IAAT,EAAkB;AAChE,SAAO;AACLkB,IAAAA,IAAI,EAAE,sCADD;AAELC,IAAAA,OAAO,EAAE;AAAEpB,MAAAA,MAAM,EAANA,MAAF;AAAUC,MAAAA,IAAI,EAAJA;AAAV;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMS,gCAAgC,GAAG,SAAnCA,gCAAmC,CAACW,KAAD,EAAW;AACzD,SAAO;AACLF,IAAAA,IAAI,EAAE,sCADD;AAELC,IAAAA,OAAO,EAAEC;AAFJ,GAAP;AAID,CALM","sourcesContent":["// app\r\nimport { enqueueNotification } from 'stores';\r\nimport * as utils from 'utils';\r\nimport { createWhitespacePolicy, patchPolicy } from 'stores';\r\n\r\nexport const patchPolicyPostWhitespace = (policy, body) => (dispatch, getState) => {\r\n  dispatch(patchPolicyPostWhitespaceRequest(policy, body));\r\n\r\n  const defaultError = {\r\n    file: 'stores/bundled.actions.patchPolicyPostWhitespace',\r\n    message: 'Data missing for request',\r\n  };\r\n\r\n  if (!utils.generic.isValidObject(policy) || !utils.generic.isValidObject(body)) {\r\n    dispatch(patchPolicyPostWhitespaceFailure(defaultError));\r\n    dispatch(enqueueNotification('notification.patchPolicyPostWhitespace.fail', 'error'));\r\n    return;\r\n  }\r\n\r\n  const { umrId } = body;\r\n  return dispatch(patchPolicy(policy.id, { umrId }))\r\n    .then(() => {\r\n      return dispatch(\r\n        createWhitespacePolicy({\r\n          toPeriod: policy.expiryDate,\r\n          fromPeriod: policy.inceptionDate,\r\n          ...body,\r\n        })\r\n      );\r\n    })\r\n    .catch((err) => err);\r\n};\r\n\r\nexport const patchPolicyPostWhitespaceRequest = (policy, body) => {\r\n  return {\r\n    type: 'PATCH_POLICY_POST_WHITESPACE_REQUEST',\r\n    payload: { policy, body },\r\n  };\r\n};\r\n\r\nexport const patchPolicyPostWhitespaceFailure = (error) => {\r\n  return {\r\n    type: 'PATCH_POLICY_POST_WHITESPACE_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}