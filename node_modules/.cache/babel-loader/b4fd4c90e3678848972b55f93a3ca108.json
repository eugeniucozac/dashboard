{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\DmsAttachDocumentsTable\\\\DmsAttachDocumentsTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectDmsClientSideUploadFiles, removeDmsClientSideUploadedDocuments, showModal } from 'stores';\nimport PropTypes from 'prop-types'; // app\n\nimport { DmsAttachDocumentsTableView } from './DmsAttachDocumentsTable.view';\nimport * as utils from 'utils';\nimport { useFlexiColumns } from 'hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nDmsAttachDocumentsTable.propTypes = {\n  documentList: PropTypes.array\n};\nexport function DmsAttachDocumentsTable(_ref) {\n  _s();\n\n  var _utils$dmsFormatter;\n\n  var documentList = _ref.documentList;\n  var dispatch = useDispatch();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isMultiSelect = _useState2[0],\n      setIsMultiSelect = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selectedDocs = _useState4[0],\n      setSelectedDocs = _useState4[1];\n\n  var clientUploadedFiles = useSelector(selectDmsClientSideUploadFiles);\n  var cols = [{\n    id: 'multiSelect',\n    visible: true\n  }, {\n    id: 'documentName',\n    label: utils.string.t('dms.view.columns.documentName'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true\n  }, {\n    id: 'documentSource',\n    label: utils.string.t('dms.view.columns.documentSource'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true\n  }, {\n    id: 'documentTypeDescription',\n    label: utils.string.t('dms.view.columns.documentType'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true\n  }, {\n    id: 'docClassification',\n    label: utils.string.t('dms.view.columns.documentClassification'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true\n  }, {\n    id: 'updatedDate',\n    label: utils.string.t('dms.view.columns.uploadedDate'),\n    sort: {\n      type: 'date',\n      direction: 'asc'\n    },\n    visible: true\n  }, {\n    id: 'createdByName',\n    label: utils.string.t('dms.view.columns.uploadedBy'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true\n  }, {\n    id: 'actions',\n    menu: true,\n    visible: true\n  }];\n  var popoverActions = [{\n    id: 'delete',\n    label: utils.string.t('dms.view.popOverMenuItems.delete'),\n    callback: function callback(_ref2) {\n      var index = _ref2.index;\n      return confirmDocumentDelete({\n        isMultiDelete: false,\n        index: index\n      });\n    }\n  }, {\n    id: 'unlink',\n    label: utils.string.t('dms.view.popOverMenuItems.unlink'),\n    callback: function callback(_ref3) {\n      var index = _ref3.index;\n      return confirmDocumentUnlink({\n        isMultiLink: false,\n        index: index\n      });\n    }\n  }];\n  var docClassification = utils === null || utils === void 0 ? void 0 : (_utils$dmsFormatter = utils.dmsFormatter) === null || _utils$dmsFormatter === void 0 ? void 0 : _utils$dmsFormatter.getDocumentClassificationList();\n  var docClassificationMap = new Map(docClassification === null || docClassification === void 0 ? void 0 : docClassification.map(function (item) {\n    return [item === null || item === void 0 ? void 0 : item.id, item === null || item === void 0 ? void 0 : item.value];\n  }));\n\n  var getDocClassification = function getDocClassification(value) {\n    return docClassificationMap === null || docClassificationMap === void 0 ? void 0 : docClassificationMap.get(Number(value));\n  };\n\n  var showCheckboxesClick = function showCheckboxesClick(event) {\n    var _event$target;\n\n    setIsMultiSelect(event === null || event === void 0 ? void 0 : (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.checked);\n  };\n\n  var handleCheckboxClick = function handleCheckboxClick(e, doc) {\n    e.stopPropagation();\n    var newlySelectedDocs = [].concat(_toConsumableArray(selectedDocs), [doc]);\n\n    if (selectedDocs === null || selectedDocs === void 0 ? void 0 : selectedDocs.find(function (docs) {\n      return docs.documentName === doc.documentName;\n    })) {\n      newlySelectedDocs = newlySelectedDocs.filter(function (selectedDoc) {\n        return selectedDoc.documentName !== doc.documentName;\n      });\n    }\n\n    setSelectedDocs(newlySelectedDocs);\n  };\n\n  var removeMultipleDocument = function removeMultipleDocument() {\n    var uploadedFiles = _objectSpread({}, clientUploadedFiles);\n\n    var documentList = _toConsumableArray(uploadedFiles === null || uploadedFiles === void 0 ? void 0 : uploadedFiles.documentTableList);\n\n    selectedDocs === null || selectedDocs === void 0 ? void 0 : selectedDocs.forEach(function (item) {\n      var index = documentList === null || documentList === void 0 ? void 0 : documentList.findIndex(function (doc) {\n        return (doc === null || doc === void 0 ? void 0 : doc.documentName) === (item === null || item === void 0 ? void 0 : item.documentName);\n      });\n\n      if (!(item === null || item === void 0 ? void 0 : item.isLink)) {\n        removeDocument(index);\n      } else if (item === null || item === void 0 ? void 0 : item.isLink) {\n        unlinkDocument(index);\n      }\n    });\n  };\n\n  var unlinkMultipleDocument = function unlinkMultipleDocument() {\n    var uploadedFiles = _objectSpread({}, clientUploadedFiles);\n\n    var documentList = _toConsumableArray(uploadedFiles === null || uploadedFiles === void 0 ? void 0 : uploadedFiles.documentTableList);\n\n    selectedDocs === null || selectedDocs === void 0 ? void 0 : selectedDocs.forEach(function (item) {\n      var index = documentList === null || documentList === void 0 ? void 0 : documentList.findIndex(function (doc) {\n        return (doc === null || doc === void 0 ? void 0 : doc.documentName) === (item === null || item === void 0 ? void 0 : item.documentName);\n      });\n\n      if (item === null || item === void 0 ? void 0 : item.isLink) {\n        unlinkDocument(index);\n      } else if (!(item === null || item === void 0 ? void 0 : item.isLink)) {\n        removeDocument(index);\n      }\n    });\n  };\n\n  var confirmDocumentDelete = function confirmDocumentDelete(params) {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        fullWidth: true,\n        title: utils.string.t('dms.view.deleteDocument.title'),\n        maxWidth: 'xs',\n        componentProps: {\n          confirmLabel: utils.string.t('dms.view.deleteDocument.confirmLabel'),\n          confirmMessage: (params === null || params === void 0 ? void 0 : params.isMultiDelete) ? utils.string.t('dms.view.deleteDocument.confirmMessageForMulti', {\n            count: selectedDocs === null || selectedDocs === void 0 ? void 0 : selectedDocs.length\n          }) : utils.string.t('dms.view.deleteDocument.confirmMessage'),\n          submitHandler: function submitHandler() {\n            return (params === null || params === void 0 ? void 0 : params.isMultiDelete) ? removeMultipleDocument() : removeDocument(params === null || params === void 0 ? void 0 : params.index);\n          }\n        }\n      }\n    }));\n  };\n\n  var confirmDocumentUnlink = function confirmDocumentUnlink(params) {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        fullWidth: true,\n        title: utils.string.t('dms.view.unlinkDocument.title'),\n        maxWidth: 'xs',\n        componentProps: {\n          confirmLabel: utils.string.t('dms.view.unlinkDocument.confirmLabel'),\n          confirmMessage: (params === null || params === void 0 ? void 0 : params.isMultiLink) ? utils.string.t('dms.view.unlinkDocument.confirmMessageForMulti', {\n            count: selectedDocs === null || selectedDocs === void 0 ? void 0 : selectedDocs.length\n          }) : utils.string.t('dms.view.unlinkDocument.confirmMessage'),\n          submitHandler: function submitHandler() {\n            return (params === null || params === void 0 ? void 0 : params.isMultiLink) ? unlinkMultipleDocument() : unlinkDocument(params === null || params === void 0 ? void 0 : params.index);\n          }\n        }\n      }\n    }));\n  };\n\n  var removeDocument = function removeDocument(index) {\n    var _documentList$index;\n\n    var uploadedFiles = _objectSpread({}, clientUploadedFiles);\n\n    var documentList = _toConsumableArray(uploadedFiles === null || uploadedFiles === void 0 ? void 0 : uploadedFiles.documentTableList);\n\n    if (!utils.generic.isInvalidOrEmptyArray(documentList) && !((_documentList$index = documentList[index]) === null || _documentList$index === void 0 ? void 0 : _documentList$index.isLink)) {\n      var _documentList$index2, _uploadedFiles$upload, _uploadedFiles$upload2, _uploadedFiles$upload3, _uploadedFiles$upload4, _uploadedFiles$upload5, _uploadedFiles$upload6, _uploadedFiles$upload7, _uploadedFiles$upload8, _uploadedFiles$upload9, _uploadedFiles$upload10, _uploadedFiles$upload11, _uploadedFiles$docume, _uploadedFiles$docume2;\n\n      var uploadedDocName = (_documentList$index2 = documentList[index]) === null || _documentList$index2 === void 0 ? void 0 : _documentList$index2.documentName;\n\n      var submitFiles = _toConsumableArray(uploadedFiles === null || uploadedFiles === void 0 ? void 0 : (_uploadedFiles$upload = uploadedFiles.uploadFileDetails) === null || _uploadedFiles$upload === void 0 ? void 0 : _uploadedFiles$upload.submitFiles);\n\n      var searchSubmitIndex = submitFiles === null || submitFiles === void 0 ? void 0 : submitFiles.findIndex(function (uploadSubmitItem) {\n        return (uploadSubmitItem === null || uploadSubmitItem === void 0 ? void 0 : uploadSubmitItem.name) === uploadedDocName;\n      });\n      !utils.generic.isInvalidOrEmptyArray(uploadedFiles === null || uploadedFiles === void 0 ? void 0 : (_uploadedFiles$upload2 = uploadedFiles.uploadFileDetails) === null || _uploadedFiles$upload2 === void 0 ? void 0 : _uploadedFiles$upload2.submitFiles) && (uploadedFiles === null || uploadedFiles === void 0 ? void 0 : (_uploadedFiles$upload3 = uploadedFiles.uploadFileDetails) === null || _uploadedFiles$upload3 === void 0 ? void 0 : (_uploadedFiles$upload4 = _uploadedFiles$upload3.submitFiles) === null || _uploadedFiles$upload4 === void 0 ? void 0 : _uploadedFiles$upload4.splice(searchSubmitIndex, 1));\n\n      var documentDto = _toConsumableArray(uploadedFiles === null || uploadedFiles === void 0 ? void 0 : (_uploadedFiles$upload5 = uploadedFiles.uploadFileDetails) === null || _uploadedFiles$upload5 === void 0 ? void 0 : (_uploadedFiles$upload6 = _uploadedFiles$upload5.submitData) === null || _uploadedFiles$upload6 === void 0 ? void 0 : _uploadedFiles$upload6.documentDto);\n\n      var searchDtoIndex = documentDto === null || documentDto === void 0 ? void 0 : documentDto.findIndex(function (docDtoItem) {\n        return (docDtoItem === null || docDtoItem === void 0 ? void 0 : docDtoItem.documentName) === uploadedDocName;\n      });\n      !utils.generic.isInvalidOrEmptyArray(uploadedFiles === null || uploadedFiles === void 0 ? void 0 : (_uploadedFiles$upload7 = uploadedFiles.uploadFileDetails) === null || _uploadedFiles$upload7 === void 0 ? void 0 : (_uploadedFiles$upload8 = _uploadedFiles$upload7.submitData) === null || _uploadedFiles$upload8 === void 0 ? void 0 : _uploadedFiles$upload8.documentDto) && (uploadedFiles === null || uploadedFiles === void 0 ? void 0 : (_uploadedFiles$upload9 = uploadedFiles.uploadFileDetails) === null || _uploadedFiles$upload9 === void 0 ? void 0 : (_uploadedFiles$upload10 = _uploadedFiles$upload9.submitData) === null || _uploadedFiles$upload10 === void 0 ? void 0 : (_uploadedFiles$upload11 = _uploadedFiles$upload10.documentDto) === null || _uploadedFiles$upload11 === void 0 ? void 0 : _uploadedFiles$upload11.splice(searchDtoIndex, 1));\n      uploadedFiles === null || uploadedFiles === void 0 ? void 0 : (_uploadedFiles$docume = uploadedFiles.documentTableList) === null || _uploadedFiles$docume === void 0 ? void 0 : _uploadedFiles$docume.splice(index, 1);\n      uploadedFiles === null || uploadedFiles === void 0 ? void 0 : (_uploadedFiles$docume2 = uploadedFiles.documentNameList) === null || _uploadedFiles$docume2 === void 0 ? void 0 : _uploadedFiles$docume2.splice(index, 1);\n    }\n\n    dispatch(removeDmsClientSideUploadedDocuments({\n      uploadedFiles: uploadedFiles\n    }));\n  };\n\n  var unlinkDocument = function unlinkDocument(index) {\n    var _documentList$index3;\n\n    var uploadedFiles = _objectSpread({}, clientUploadedFiles);\n\n    var documentList = _toConsumableArray(uploadedFiles === null || uploadedFiles === void 0 ? void 0 : uploadedFiles.documentTableList);\n\n    if (!utils.generic.isInvalidOrEmptyArray(documentList) && ((_documentList$index3 = documentList[index]) === null || _documentList$index3 === void 0 ? void 0 : _documentList$index3.isLink)) {\n      var _documentList$index4, _uploadedFiles$linked, _uploadedFiles$docume3, _uploadedFiles$docume4;\n\n      var linkedDocId = (_documentList$index4 = documentList[index]) === null || _documentList$index4 === void 0 ? void 0 : _documentList$index4.documentId;\n\n      var linkedDocList = _toConsumableArray(uploadedFiles === null || uploadedFiles === void 0 ? void 0 : uploadedFiles.linkedDocumentList);\n\n      var searchIndex = linkedDocList === null || linkedDocList === void 0 ? void 0 : linkedDocList.findIndex(function (linkedDocItem) {\n        return (linkedDocItem === null || linkedDocItem === void 0 ? void 0 : linkedDocItem.documentId) === linkedDocId;\n      });\n      uploadedFiles === null || uploadedFiles === void 0 ? void 0 : (_uploadedFiles$linked = uploadedFiles.linkedDocumentList) === null || _uploadedFiles$linked === void 0 ? void 0 : _uploadedFiles$linked.splice(searchIndex, 1);\n      uploadedFiles === null || uploadedFiles === void 0 ? void 0 : (_uploadedFiles$docume3 = uploadedFiles.documentTableList) === null || _uploadedFiles$docume3 === void 0 ? void 0 : _uploadedFiles$docume3.splice(index, 1);\n      uploadedFiles === null || uploadedFiles === void 0 ? void 0 : (_uploadedFiles$docume4 = uploadedFiles.documentNameList) === null || _uploadedFiles$docume4 === void 0 ? void 0 : _uploadedFiles$docume4.splice(index, 1);\n    }\n\n    dispatch(removeDmsClientSideUploadedDocuments({\n      uploadedFiles: uploadedFiles\n    }));\n  };\n\n  var handleMutipleDelete = function handleMutipleDelete() {\n    confirmDocumentDelete({\n      isMultiDelete: true\n    });\n  };\n\n  var handleMutipleUnlinking = function handleMutipleUnlinking() {\n    confirmDocumentUnlink({\n      isMultiLink: true\n    });\n  };\n\n  var _useFlexiColumns = useFlexiColumns(cols),\n      columnsArray = _useFlexiColumns.columns;\n\n  return /*#__PURE__*/_jsxDEV(DmsAttachDocumentsTableView, {\n    columnsArray: columnsArray,\n    documentList: documentList,\n    popoverActions: popoverActions,\n    isMultiSelect: isMultiSelect,\n    selectedDocs: selectedDocs,\n    handlers: {\n      getDocClassification: getDocClassification,\n      handleCheckboxClick: handleCheckboxClick,\n      showCheckboxesClick: showCheckboxesClick,\n      handleMutipleDelete: handleMutipleDelete,\n      handleMutipleUnlinking: handleMutipleUnlinking\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 217,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DmsAttachDocumentsTable, \"G9CDMgZIFtThcRcOuk340kuUaBw=\", false, function () {\n  return [useDispatch, useSelector, useFlexiColumns];\n});\n\n_c = DmsAttachDocumentsTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"DmsAttachDocumentsTable\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/DmsAttachDocumentsTable/DmsAttachDocumentsTable.js"],"names":["React","useState","useDispatch","useSelector","selectDmsClientSideUploadFiles","removeDmsClientSideUploadedDocuments","showModal","PropTypes","DmsAttachDocumentsTableView","utils","useFlexiColumns","DmsAttachDocumentsTable","propTypes","documentList","array","dispatch","isMultiSelect","setIsMultiSelect","selectedDocs","setSelectedDocs","clientUploadedFiles","cols","id","visible","label","string","t","sort","type","direction","menu","popoverActions","callback","index","confirmDocumentDelete","isMultiDelete","confirmDocumentUnlink","isMultiLink","docClassification","dmsFormatter","getDocumentClassificationList","docClassificationMap","Map","map","item","value","getDocClassification","get","Number","showCheckboxesClick","event","target","checked","handleCheckboxClick","e","doc","stopPropagation","newlySelectedDocs","find","docs","documentName","filter","selectedDoc","removeMultipleDocument","uploadedFiles","documentTableList","forEach","findIndex","isLink","removeDocument","unlinkDocument","unlinkMultipleDocument","params","component","props","fullWidth","title","maxWidth","componentProps","confirmLabel","confirmMessage","count","length","submitHandler","generic","isInvalidOrEmptyArray","uploadedDocName","submitFiles","uploadFileDetails","searchSubmitIndex","uploadSubmitItem","name","splice","documentDto","submitData","searchDtoIndex","docDtoItem","documentNameList","linkedDocId","documentId","linkedDocList","linkedDocumentList","searchIndex","linkedDocItem","handleMutipleDelete","handleMutipleUnlinking","columnsArray","columns"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectDmsClientSideUploadFiles, removeDmsClientSideUploadedDocuments, showModal } from 'stores';\r\nimport PropTypes from 'prop-types';\r\n\r\n// app\r\nimport { DmsAttachDocumentsTableView } from './DmsAttachDocumentsTable.view';\r\nimport * as utils from 'utils';\r\nimport { useFlexiColumns } from 'hooks';\r\n\r\nDmsAttachDocumentsTable.propTypes = {\r\n  documentList: PropTypes.array,\r\n};\r\n\r\nexport function DmsAttachDocumentsTable({ documentList }) {\r\n  const dispatch = useDispatch();\r\n  const [isMultiSelect, setIsMultiSelect] = useState(false);\r\n  const [selectedDocs, setSelectedDocs] = useState([]);\r\n\r\n  const clientUploadedFiles = useSelector(selectDmsClientSideUploadFiles);\r\n\r\n  const cols = [\r\n    {\r\n      id: 'multiSelect',\r\n      visible: true,\r\n    },\r\n    {\r\n      id: 'documentName',\r\n      label: utils.string.t('dms.view.columns.documentName'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: true,\r\n    },\r\n    {\r\n      id: 'documentSource',\r\n      label: utils.string.t('dms.view.columns.documentSource'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: true,\r\n    },\r\n\r\n    {\r\n      id: 'documentTypeDescription',\r\n      label: utils.string.t('dms.view.columns.documentType'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: true,\r\n    },\r\n    {\r\n      id: 'docClassification',\r\n      label: utils.string.t('dms.view.columns.documentClassification'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: true,\r\n    },\r\n    { id: 'updatedDate', label: utils.string.t('dms.view.columns.uploadedDate'), sort: { type: 'date', direction: 'asc' }, visible: true },\r\n    {\r\n      id: 'createdByName',\r\n      label: utils.string.t('dms.view.columns.uploadedBy'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: true,\r\n    },\r\n    { id: 'actions', menu: true, visible: true },\r\n  ];\r\n\r\n  const popoverActions = [\r\n    {\r\n      id: 'delete',\r\n      label: utils.string.t('dms.view.popOverMenuItems.delete'),\r\n      callback: ({ index }) => confirmDocumentDelete({ isMultiDelete: false, index }),\r\n    },\r\n    {\r\n      id: 'unlink',\r\n      label: utils.string.t('dms.view.popOverMenuItems.unlink'),\r\n      callback: ({ index }) => confirmDocumentUnlink({ isMultiLink: false, index }),\r\n    },\r\n  ];\r\n\r\n  const docClassification = utils?.dmsFormatter?.getDocumentClassificationList();\r\n\r\n  const docClassificationMap = new Map(\r\n    docClassification?.map((item) => {\r\n      return [item?.id, item?.value];\r\n    })\r\n  );\r\n\r\n  const getDocClassification = (value) => {\r\n    return docClassificationMap?.get(Number(value));\r\n  };\r\n\r\n  const showCheckboxesClick = (event) => {\r\n    setIsMultiSelect(event?.target?.checked);\r\n  };\r\n\r\n  const handleCheckboxClick = (e, doc) => {\r\n    e.stopPropagation();\r\n    let newlySelectedDocs = [...selectedDocs, doc];\r\n    if (selectedDocs?.find((docs) => docs.documentName === doc.documentName)) {\r\n      newlySelectedDocs = newlySelectedDocs.filter((selectedDoc) => selectedDoc.documentName !== doc.documentName);\r\n    }\r\n\r\n    setSelectedDocs(newlySelectedDocs);\r\n  };\r\n\r\n  const removeMultipleDocument = () => {\r\n    const uploadedFiles = { ...clientUploadedFiles };\r\n    const documentList = [...uploadedFiles?.documentTableList];\r\n    selectedDocs?.forEach((item) => {\r\n      const index = documentList?.findIndex((doc) => doc?.documentName === item?.documentName);\r\n      if (!item?.isLink) {\r\n        removeDocument(index);\r\n      } else if (item?.isLink) {\r\n        unlinkDocument(index);\r\n      }\r\n    });\r\n  };\r\n\r\n  const unlinkMultipleDocument = () => {\r\n    const uploadedFiles = { ...clientUploadedFiles };\r\n    const documentList = [...uploadedFiles?.documentTableList];\r\n    selectedDocs?.forEach((item) => {\r\n      const index = documentList?.findIndex((doc) => doc?.documentName === item?.documentName);\r\n      if (item?.isLink) {\r\n        unlinkDocument(index);\r\n      } else if (!item?.isLink) {\r\n        removeDocument(index);\r\n      }\r\n    });\r\n  };\r\n\r\n  const confirmDocumentDelete = (params) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          fullWidth: true,\r\n          title: utils.string.t('dms.view.deleteDocument.title'),\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            confirmLabel: utils.string.t('dms.view.deleteDocument.confirmLabel'),\r\n            confirmMessage: params?.isMultiDelete\r\n              ? utils.string.t('dms.view.deleteDocument.confirmMessageForMulti', {\r\n                  count: selectedDocs?.length,\r\n                })\r\n              : utils.string.t('dms.view.deleteDocument.confirmMessage'),\r\n            submitHandler: () => (params?.isMultiDelete ? removeMultipleDocument() : removeDocument(params?.index)),\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const confirmDocumentUnlink = (params) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          fullWidth: true,\r\n          title: utils.string.t('dms.view.unlinkDocument.title'),\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            confirmLabel: utils.string.t('dms.view.unlinkDocument.confirmLabel'),\r\n            confirmMessage: params?.isMultiLink\r\n              ? utils.string.t('dms.view.unlinkDocument.confirmMessageForMulti', {\r\n                  count: selectedDocs?.length,\r\n                })\r\n              : utils.string.t('dms.view.unlinkDocument.confirmMessage'),\r\n            submitHandler: () => (params?.isMultiLink ? unlinkMultipleDocument() : unlinkDocument(params?.index)),\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const removeDocument = (index) => {\r\n    const uploadedFiles = { ...clientUploadedFiles };\r\n    const documentList = [...uploadedFiles?.documentTableList];\r\n    if (!utils.generic.isInvalidOrEmptyArray(documentList) && !documentList[index]?.isLink) {\r\n      const uploadedDocName = documentList[index]?.documentName;\r\n      const submitFiles = [...uploadedFiles?.uploadFileDetails?.submitFiles];\r\n      const searchSubmitIndex = submitFiles?.findIndex((uploadSubmitItem) => uploadSubmitItem?.name === uploadedDocName);\r\n      !utils.generic.isInvalidOrEmptyArray(uploadedFiles?.uploadFileDetails?.submitFiles) &&\r\n        uploadedFiles?.uploadFileDetails?.submitFiles?.splice(searchSubmitIndex, 1);\r\n\r\n      const documentDto = [...uploadedFiles?.uploadFileDetails?.submitData?.documentDto];\r\n      const searchDtoIndex = documentDto?.findIndex((docDtoItem) => docDtoItem?.documentName === uploadedDocName);\r\n      !utils.generic.isInvalidOrEmptyArray(uploadedFiles?.uploadFileDetails?.submitData?.documentDto) &&\r\n        uploadedFiles?.uploadFileDetails?.submitData?.documentDto?.splice(searchDtoIndex, 1);\r\n      uploadedFiles?.documentTableList?.splice(index, 1);\r\n      uploadedFiles?.documentNameList?.splice(index, 1);\r\n    }\r\n    dispatch(removeDmsClientSideUploadedDocuments({ uploadedFiles: uploadedFiles }));\r\n  };\r\n\r\n  const unlinkDocument = (index) => {\r\n    const uploadedFiles = { ...clientUploadedFiles };\r\n    const documentList = [...uploadedFiles?.documentTableList];\r\n    if (!utils.generic.isInvalidOrEmptyArray(documentList) && documentList[index]?.isLink) {\r\n      const linkedDocId = documentList[index]?.documentId;\r\n      const linkedDocList = [...uploadedFiles?.linkedDocumentList];\r\n      const searchIndex = linkedDocList?.findIndex((linkedDocItem) => linkedDocItem?.documentId === linkedDocId);\r\n      uploadedFiles?.linkedDocumentList?.splice(searchIndex, 1);\r\n      uploadedFiles?.documentTableList?.splice(index, 1);\r\n      uploadedFiles?.documentNameList?.splice(index, 1);\r\n    }\r\n\r\n    dispatch(removeDmsClientSideUploadedDocuments({ uploadedFiles: uploadedFiles }));\r\n  };\r\n\r\n  const handleMutipleDelete = () => {\r\n    confirmDocumentDelete({ isMultiDelete: true });\r\n  };\r\n\r\n  const handleMutipleUnlinking = () => {\r\n    confirmDocumentUnlink({ isMultiLink: true });\r\n  };\r\n\r\n  const { columns: columnsArray } = useFlexiColumns(cols);\r\n\r\n  return (\r\n    <DmsAttachDocumentsTableView\r\n      columnsArray={columnsArray}\r\n      documentList={documentList}\r\n      popoverActions={popoverActions}\r\n      isMultiSelect={isMultiSelect}\r\n      selectedDocs={selectedDocs}\r\n      handlers={{\r\n        getDocClassification: getDocClassification,\r\n        handleCheckboxClick: handleCheckboxClick,\r\n        showCheckboxesClick: showCheckboxesClick,\r\n        handleMutipleDelete: handleMutipleDelete,\r\n        handleMutipleUnlinking: handleMutipleUnlinking,\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}