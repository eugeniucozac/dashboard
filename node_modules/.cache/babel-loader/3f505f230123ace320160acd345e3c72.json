{"ast":null,"code":"import _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as utils from 'utils';\nimport * as constants from 'consts';\nimport { resetFilesUploaded, resetDmsDocumentsUpload, resetDmsDocumentsView, resetDmsDocumentsHistory } from 'stores';\nvar utilsDms = {\n  getFilesForm: function getFilesForm(files) {\n    return files.map(function (file, ind) {\n      return {\n        formFileName: (file === null || file === void 0 ? void 0 : file.name) || \"file-\".concat(ind),\n        formDocType: {\n          id: 0,\n          label: ''\n        },\n        formDocClassificationType: {\n          id: 3\n        },\n        paymentFields: {\n          paymentDate: '',\n          paymentReference: '',\n          lossPayee: '',\n          amount: '',\n          currency: ''\n        },\n        isDuplicateFileName: false,\n        // Duplicate means the file which was already uploaded to sharepoint before\n        isInvalidFileName: false // Invalid means the file which contains blacklisted special characters\n\n      };\n    });\n  },\n  checkIfClaimsScreenContext: function checkIfClaimsScreenContext(context) {\n    return constants.DMS_CLAIMS_CONTEXT_TYPES.includes(context);\n  },\n  getFileKey: function getFileKey(file) {\n    return \"\".concat(file === null || file === void 0 ? void 0 : file.name, \"-\").concat(file === null || file === void 0 ? void 0 : file.lastModified);\n  },\n  checkIfInvalidFileName: function checkIfInvalidFileName(fileName) {\n    return constants.DMS_UPLOAD_FORBIDDEN_CHAR.test(fileName);\n  },\n  getDuplicateFileIndexes: function getDuplicateFileIndexes(currentFiles, previousUploadedFiles) {\n    if (Boolean(previousUploadedFiles.length)) {\n      var duplicateIndexes = [];\n      previousUploadedFiles.forEach(function (prevItem, index) {\n        currentFiles.forEach(function (currentItem, index) {\n          if ((currentItem === null || currentItem === void 0 ? void 0 : currentItem.name) === (prevItem === null || prevItem === void 0 ? void 0 : prevItem.documentName)) {\n            duplicateIndexes.push(index);\n          }\n        });\n      });\n      return duplicateIndexes;\n    } else {\n      return [];\n    }\n  },\n  getFolderTypes: function getFolderTypes(documentTypes) {\n    return _toConsumableArray(new Set(utils.generic.isValidArray(documentTypes) ? documentTypes.filter(function (type) {\n      return (type === null || type === void 0 ? void 0 : type.folderName) !== null;\n    }).map(function (type) {\n      return type === null || type === void 0 ? void 0 : type.folderName;\n    }) : [])).sort().map(function (name) {\n      return {\n        id: name,\n        label: name\n      };\n    });\n  },\n  refinedDocTypeByFolderName: function refinedDocTypeByFolderName(folderNameFilter, documentTypes) {\n    var folderNameFilterKey = (folderNameFilter === null || folderNameFilter === void 0 ? void 0 : folderNameFilter.label) || '';\n    return folderNameFilterKey ? documentTypes.filter(function (docType) {\n      return docType.folderName === folderNameFilterKey;\n    }) : documentTypes;\n  },\n  getOnlyFileProperties: function getOnlyFileProperties(files) {\n    return files.map(function (file) {\n      return {\n        name: file.name,\n        path: file.path,\n        lastModified: file.lastModifiedDate,\n        size: file.size,\n        type: file.lastModifiedDate\n      };\n    });\n  },\n  trimFileProperties: function trimFileProperties(files) {\n    return files.map(function (file) {\n      return {\n        name: file.name,\n        path: file.path,\n        lastModifiedDate: file.lastModifiedDate\n      };\n    });\n  },\n  getFullFileProperties: function getFullFileProperties(files, liteFiles) {\n    var activePaths = liteFiles === null || liteFiles === void 0 ? void 0 : liteFiles.map(function (file) {\n      return file.path;\n    });\n    return files.filter(function (file) {\n      return activePaths === null || activePaths === void 0 ? void 0 : activePaths.includes(file.path);\n    });\n  },\n  constructUploadDocsRequest: function constructUploadDocsRequest(context, files, filesFormData, documentMetaData) {\n    var fetchDocsDto = utilsDms.constructUploadDocsDto(files, filesFormData); // TODO documentMetaData to come as props rather than from metaData API\n\n    var fileUploadRequestPayload = {\n      // Loss\n      lossId: documentMetaData === null || documentMetaData === void 0 ? void 0 : documentMetaData.lossId,\n      lossName: documentMetaData === null || documentMetaData === void 0 ? void 0 : documentMetaData.lossName,\n      catCodesID: documentMetaData === null || documentMetaData === void 0 ? void 0 : documentMetaData.catCodesID,\n      lossCreatedDate: context === constants.DMS_CONTEXT_LOSS ? documentMetaData.createdDate : null,\n      // Policy\n      policyId: documentMetaData === null || documentMetaData === void 0 ? void 0 : documentMetaData.policyId,\n      policyRef: documentMetaData === null || documentMetaData === void 0 ? void 0 : documentMetaData.policyRef,\n      year: documentMetaData === null || documentMetaData === void 0 ? void 0 : documentMetaData.year,\n      xbInstanceId: documentMetaData === null || documentMetaData === void 0 ? void 0 : documentMetaData.xbInstanceId,\n      departmentId: documentMetaData === null || documentMetaData === void 0 ? void 0 : documentMetaData.departmentId,\n      subDepartmentId: documentMetaData === null || documentMetaData === void 0 ? void 0 : documentMetaData.subDepartmentId,\n      departmentName: documentMetaData === null || documentMetaData === void 0 ? void 0 : documentMetaData.departmentName,\n      insuredName: documentMetaData === null || documentMetaData === void 0 ? void 0 : documentMetaData.insuredName,\n      // Claims\n      claimId: documentMetaData === null || documentMetaData === void 0 ? void 0 : documentMetaData.claimId,\n      uniqueMarketRef: (documentMetaData === null || documentMetaData === void 0 ? void 0 : documentMetaData.uniqueMarketRef) || null,\n      ucr: (documentMetaData === null || documentMetaData === void 0 ? void 0 : documentMetaData.ucr) || null,\n      // documentDto\n      documentDto: fetchDocsDto\n    };\n    return fileUploadRequestPayload;\n  },\n  constructUploadDocsDto: function constructUploadDocsDto(files, filesFormData) {\n    var result = [];\n    filesFormData === null || filesFormData === void 0 ? void 0 : filesFormData.forEach(function (fileForm, ind) {\n      var _fileForm$formDocType, _fileForm$formDocType2, _files$ind, _files$ind$lastModifi, _fileForm$formDocClas;\n\n      result.push({\n        documentName: fileForm === null || fileForm === void 0 ? void 0 : fileForm.formFileName,\n        documentTypeId: fileForm === null || fileForm === void 0 ? void 0 : (_fileForm$formDocType = fileForm.formDocType) === null || _fileForm$formDocType === void 0 ? void 0 : _fileForm$formDocType.id,\n        documentTypeDescription: fileForm === null || fileForm === void 0 ? void 0 : (_fileForm$formDocType2 = fileForm.formDocType) === null || _fileForm$formDocType2 === void 0 ? void 0 : _fileForm$formDocType2.label,\n        fileLastModifiedDate: files === null || files === void 0 ? void 0 : (_files$ind = files[ind]) === null || _files$ind === void 0 ? void 0 : (_files$ind$lastModifi = _files$ind.lastModifiedDate) === null || _files$ind$lastModifi === void 0 ? void 0 : _files$ind$lastModifi.toISOString(),\n        docClassification: fileForm === null || fileForm === void 0 ? void 0 : (_fileForm$formDocClas = fileForm.formDocClassificationType) === null || _fileForm$formDocClas === void 0 ? void 0 : _fileForm$formDocClas.id,\n        tags: [],\n        metadataFields: utilsDms.constructUploadDocsPaymentsData(fileForm)\n      });\n    });\n    return result;\n  },\n  constructUploadDocsPaymentsData: function constructUploadDocsPaymentsData(fileForm) {\n    var _fileForm$paymentFiel, _fileForm$paymentFiel2, _fileForm$paymentFiel3, _fileForm$paymentFiel4;\n\n    var paymentFields = constants.DMS_DOCUMENT_TYPE_PAYMENT_PROPS;\n    return [{\n      prop: paymentFields.paymentReference,\n      value: fileForm === null || fileForm === void 0 ? void 0 : (_fileForm$paymentFiel = fileForm.paymentFields) === null || _fileForm$paymentFiel === void 0 ? void 0 : _fileForm$paymentFiel.paymentReference\n    }, {\n      prop: paymentFields.lossPayee,\n      value: fileForm === null || fileForm === void 0 ? void 0 : (_fileForm$paymentFiel2 = fileForm.paymentFields) === null || _fileForm$paymentFiel2 === void 0 ? void 0 : _fileForm$paymentFiel2.lossPayee\n    }, {\n      prop: paymentFields.amount,\n      value: fileForm === null || fileForm === void 0 ? void 0 : (_fileForm$paymentFiel3 = fileForm.paymentFields) === null || _fileForm$paymentFiel3 === void 0 ? void 0 : _fileForm$paymentFiel3.amount\n    }, {\n      prop: paymentFields.currency,\n      value: fileForm === null || fileForm === void 0 ? void 0 : (_fileForm$paymentFiel4 = fileForm.paymentFields) === null || _fileForm$paymentFiel4 === void 0 ? void 0 : _fileForm$paymentFiel4.currency\n    }, {\n      prop: paymentFields.paymentDate,\n      value: new Date().toISOString()\n    }];\n  },\n  getDocMetaDataAfterUpload: function getDocMetaDataAfterUpload(filesMetaData) {\n    return filesMetaData === null || filesMetaData === void 0 ? void 0 : filesMetaData.map(function (_ref) {\n      var createdDate = _ref.createdDate,\n          documentVersion = _ref.documentVersion,\n          createdByName = _ref.createdByName,\n          fileLastModifiedDate = _ref.fileLastModifiedDate,\n          documentUploaded = _ref.documentUploaded;\n      return {\n        createdDate: createdDate,\n        documentVersion: documentVersion,\n        createdByName: createdByName,\n        fileLastModifiedDate: fileLastModifiedDate,\n        documentUploaded: documentUploaded\n      };\n    });\n  },\n  checkIfAllUploaded: function checkIfAllUploaded(filesMetaData) {\n    return filesMetaData === null || filesMetaData === void 0 ? void 0 : filesMetaData.every(function (_ref2) {\n      var documentUploaded = _ref2.documentUploaded;\n      return documentUploaded;\n    });\n  },\n  dmsDocumentViewLauncher: function dmsDocumentViewLauncher(documentId, documentName) {\n    if (documentId && documentName) {\n      var fileWindow = window.open();\n      fileWindow.location.href = window.location.origin + '/document/' + documentId + '/' + documentName;\n    }\n  },\n  resetDmsFiles: function resetDmsFiles(dispatch) {\n    dispatch(resetFilesUploaded());\n    dispatch(resetDmsDocumentsView());\n    dispatch(resetDmsDocumentsHistory());\n    dispatch(resetDmsDocumentsUpload());\n  }\n};\nexport default utilsDms;","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/utils/dms/dms.js"],"names":["utils","constants","resetFilesUploaded","resetDmsDocumentsUpload","resetDmsDocumentsView","resetDmsDocumentsHistory","utilsDms","getFilesForm","files","map","file","ind","formFileName","name","formDocType","id","label","formDocClassificationType","paymentFields","paymentDate","paymentReference","lossPayee","amount","currency","isDuplicateFileName","isInvalidFileName","checkIfClaimsScreenContext","context","DMS_CLAIMS_CONTEXT_TYPES","includes","getFileKey","lastModified","checkIfInvalidFileName","fileName","DMS_UPLOAD_FORBIDDEN_CHAR","test","getDuplicateFileIndexes","currentFiles","previousUploadedFiles","Boolean","length","duplicateIndexes","forEach","prevItem","index","currentItem","documentName","push","getFolderTypes","documentTypes","Set","generic","isValidArray","filter","type","folderName","sort","refinedDocTypeByFolderName","folderNameFilter","folderNameFilterKey","docType","getOnlyFileProperties","path","lastModifiedDate","size","trimFileProperties","getFullFileProperties","liteFiles","activePaths","constructUploadDocsRequest","filesFormData","documentMetaData","fetchDocsDto","constructUploadDocsDto","fileUploadRequestPayload","lossId","lossName","catCodesID","lossCreatedDate","DMS_CONTEXT_LOSS","createdDate","policyId","policyRef","year","xbInstanceId","departmentId","subDepartmentId","departmentName","insuredName","claimId","uniqueMarketRef","ucr","documentDto","result","fileForm","documentTypeId","documentTypeDescription","fileLastModifiedDate","toISOString","docClassification","tags","metadataFields","constructUploadDocsPaymentsData","DMS_DOCUMENT_TYPE_PAYMENT_PROPS","prop","value","Date","getDocMetaDataAfterUpload","filesMetaData","documentVersion","createdByName","documentUploaded","checkIfAllUploaded","every","dmsDocumentViewLauncher","documentId","fileWindow","window","open","location","href","origin","resetDmsFiles","dispatch"],"mappings":"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","sourcesContent":["import * as utils from 'utils';\r\nimport * as constants from 'consts';\r\nimport { resetFilesUploaded, resetDmsDocumentsUpload, resetDmsDocumentsView, resetDmsDocumentsHistory } from 'stores';\r\n\r\nconst utilsDms = {\r\n  getFilesForm: (files) => {\r\n    return files.map((file, ind) => {\r\n      return {\r\n        formFileName: file?.name || `file-${ind}`,\r\n        formDocType: { id: 0, label: '' },\r\n        formDocClassificationType: { id: 3 },\r\n        paymentFields: { paymentDate: '', paymentReference: '', lossPayee: '', amount: '', currency: '' },\r\n        isDuplicateFileName: false, // Duplicate means the file which was already uploaded to sharepoint before\r\n        isInvalidFileName: false, // Invalid means the file which contains blacklisted special characters\r\n      };\r\n    });\r\n  },\r\n\r\n  checkIfClaimsScreenContext: (context) => {\r\n    return constants.DMS_CLAIMS_CONTEXT_TYPES.includes(context);\r\n  },\r\n\r\n  getFileKey: (file) => {\r\n    return `${file?.name}-${file?.lastModified}`;\r\n  },\r\n\r\n  checkIfInvalidFileName: (fileName) => {\r\n    return constants.DMS_UPLOAD_FORBIDDEN_CHAR.test(fileName);\r\n  },\r\n\r\n  getDuplicateFileIndexes: (currentFiles, previousUploadedFiles) => {\r\n    if (Boolean(previousUploadedFiles.length)) {\r\n      const duplicateIndexes = [];\r\n      previousUploadedFiles.forEach((prevItem, index) => {\r\n        currentFiles.forEach((currentItem, index) => {\r\n          if (currentItem?.name === prevItem?.documentName) {\r\n            duplicateIndexes.push(index);\r\n          }\r\n        });\r\n      });\r\n      return duplicateIndexes;\r\n    } else {\r\n      return [];\r\n    }\r\n  },\r\n\r\n  getFolderTypes: (documentTypes) => {\r\n    return [\r\n      ...new Set(\r\n        utils.generic.isValidArray(documentTypes)\r\n          ? documentTypes.filter((type) => type?.folderName !== null).map((type) => type?.folderName)\r\n          : []\r\n      ),\r\n    ]\r\n      .sort()\r\n      .map((name) => ({ id: name, label: name }));\r\n  },\r\n\r\n  refinedDocTypeByFolderName: (folderNameFilter, documentTypes) => {\r\n    const folderNameFilterKey = folderNameFilter?.label || '';\r\n    return folderNameFilterKey ? documentTypes.filter((docType) => docType.folderName === folderNameFilterKey) : documentTypes;\r\n  },\r\n\r\n  getOnlyFileProperties: (files) => {\r\n    return files.map((file) => ({\r\n      name: file.name,\r\n      path: file.path,\r\n      lastModified: file.lastModifiedDate,\r\n      size: file.size,\r\n      type: file.lastModifiedDate,\r\n    }));\r\n  },\r\n\r\n  trimFileProperties: (files) => {\r\n    return files.map((file) => ({ name: file.name, path: file.path, lastModifiedDate: file.lastModifiedDate }));\r\n  },\r\n\r\n  getFullFileProperties: (files, liteFiles) => {\r\n    const activePaths = liteFiles?.map(file => file.path);\r\n    return files.filter((file) => activePaths?.includes(file.path));\r\n  },\r\n\r\n  constructUploadDocsRequest: (context, files, filesFormData, documentMetaData) => {\r\n    const fetchDocsDto = utilsDms.constructUploadDocsDto(files, filesFormData);\r\n    // TODO documentMetaData to come as props rather than from metaData API\r\n    const fileUploadRequestPayload = {\r\n      // Loss\r\n      lossId: documentMetaData?.lossId,\r\n      lossName: documentMetaData?.lossName,\r\n      catCodesID: documentMetaData?.catCodesID,\r\n      lossCreatedDate: context === constants.DMS_CONTEXT_LOSS ? documentMetaData.createdDate : null,\r\n      // Policy\r\n      policyId: documentMetaData?.policyId,\r\n      policyRef: documentMetaData?.policyRef,\r\n      year: documentMetaData?.year,\r\n      xbInstanceId: documentMetaData?.xbInstanceId,\r\n      departmentId: documentMetaData?.departmentId,\r\n      subDepartmentId: documentMetaData?.subDepartmentId,\r\n      departmentName: documentMetaData?.departmentName,\r\n      insuredName: documentMetaData?.insuredName,\r\n      // Claims\r\n      claimId: documentMetaData?.claimId,\r\n      uniqueMarketRef: documentMetaData?.uniqueMarketRef || null,\r\n      ucr: documentMetaData?.ucr || null,\r\n      // documentDto\r\n      documentDto: fetchDocsDto,\r\n    };\r\n    return fileUploadRequestPayload;\r\n  },\r\n\r\n  constructUploadDocsDto: (files, filesFormData) => {\r\n    let result = [];\r\n    filesFormData?.forEach((fileForm, ind) => {\r\n      result.push({\r\n        documentName: fileForm?.formFileName,\r\n        documentTypeId: fileForm?.formDocType?.id,\r\n        documentTypeDescription: fileForm?.formDocType?.label,\r\n        fileLastModifiedDate: files?.[ind]?.lastModifiedDate?.toISOString(),\r\n        docClassification: fileForm?.formDocClassificationType?.id,\r\n        tags: [],\r\n        metadataFields: utilsDms.constructUploadDocsPaymentsData(fileForm),\r\n      });\r\n    });\r\n    return result;\r\n  },\r\n\r\n  constructUploadDocsPaymentsData: (fileForm) => {\r\n    const paymentFields = constants.DMS_DOCUMENT_TYPE_PAYMENT_PROPS;\r\n    return [\r\n      { prop: paymentFields.paymentReference, value: fileForm?.paymentFields?.paymentReference },\r\n      { prop: paymentFields.lossPayee, value: fileForm?.paymentFields?.lossPayee },\r\n      { prop: paymentFields.amount, value: fileForm?.paymentFields?.amount },\r\n      { prop: paymentFields.currency, value: fileForm?.paymentFields?.currency },\r\n      { prop: paymentFields.paymentDate, value: new Date().toISOString() },\r\n    ];\r\n  },\r\n\r\n  getDocMetaDataAfterUpload: (filesMetaData) => {\r\n    return filesMetaData?.map(({ createdDate, documentVersion, createdByName, fileLastModifiedDate, documentUploaded }) => ({\r\n      createdDate,\r\n      documentVersion,\r\n      createdByName,\r\n      fileLastModifiedDate,\r\n      documentUploaded,\r\n    }));\r\n  },\r\n\r\n  checkIfAllUploaded: (filesMetaData) => {\r\n    return filesMetaData?.every(({ documentUploaded }) => documentUploaded);\r\n  },\r\n\r\n  dmsDocumentViewLauncher: (documentId, documentName) => {\r\n    if (documentId && documentName) {\r\n      const fileWindow = window.open();\r\n      fileWindow.location.href = window.location.origin + '/document/' + documentId + '/' + documentName;\r\n    }\r\n  },\r\n\r\n  resetDmsFiles: (dispatch) => {\r\n    dispatch(resetFilesUploaded());\r\n    dispatch(resetDmsDocumentsView());\r\n    dispatch(resetDmsDocumentsHistory());\r\n    dispatch(resetDmsDocumentsUpload());\r\n  },\r\n};\r\n\r\nexport default utilsDms;\r\n"]},"metadata":{},"sourceType":"module"}