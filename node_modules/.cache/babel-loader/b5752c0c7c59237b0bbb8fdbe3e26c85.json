{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ProcessingInstructionsChecklist\\\\ProcessingInstructionsChecklist.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory, useParams } from 'react-router'; // app\n\nimport ProcessingInstructionsChecklistView from './ProcessingInstructionsChecklist.view';\nimport { processingInstructionsSchema } from 'schemas';\nimport { enqueueNotification, checkListUpdate, showModal, selectUser, selectPiProducingBrokers, selectPiAccountExecutives, selectPiFacilityTypes, selectAccountExecutivesForRiskReference, selectProducingBrokerNamesForRiskReference } from 'stores';\nimport * as utils from 'utils';\nimport config from 'config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nProcessingInstructionsChecklist.propTypes = {\n  instruction: PropTypes.object.isRequired,\n  handlers: PropTypes.shape({\n    back: PropTypes.func.isRequired,\n    next: PropTypes.func.isRequired\n  }).isRequired\n};\nexport default function ProcessingInstructionsChecklist(_ref) {\n  _s();\n\n  var _instruction$riskRefe,\n      _instruction$details7,\n      _instruction$details8,\n      _instruction$details9,\n      _instruction$details10,\n      _this = this;\n\n  var instruction = _ref.instruction,\n      handlers = _ref.handlers,\n      childRef = _ref.childRef;\n  var dispatch = useDispatch();\n  var history = useHistory();\n\n  var _useParams = useParams(),\n      id = _useParams.id,\n      step = _useParams.step,\n      tab = _useParams.tab;\n\n  var piProducingBrokers = useSelector(selectProducingBrokerNamesForRiskReference);\n  var piAccountExecutives = useSelector(selectAccountExecutivesForRiskReference);\n  var producingBrokersFromRoles = useSelector(selectPiProducingBrokers);\n  var accountExecutivesFromRoles = useSelector(selectPiAccountExecutives);\n  var producingBrokers = utils.generic.isValidArray(piProducingBrokers, true) ? piProducingBrokers : producingBrokersFromRoles;\n  var accountExecutives = utils.generic.isValidArray(piAccountExecutives, true) ? piAccountExecutives : accountExecutivesFromRoles;\n  var facilityTypes = useSelector(selectPiFacilityTypes);\n  var user = useSelector(selectUser);\n  var columns = [{\n    id: 'detail',\n    label: utils.string.t('processingInstructions.checklist.cols.detail')\n  }, {\n    id: 'frontEndContact',\n    label: utils.string.t('processingInstructions.checklist.cols.frontEndContact'),\n    align: 'center'\n  }, {\n    id: 'authorisedSignatory',\n    label: utils.string.t('processingInstructions.checklist.cols.authorisedSignatory'),\n    align: 'center'\n  }];\n  var tabs = [{\n    value: 'general',\n    label: utils.string.t('processingInstructions.checklist.tabs.general.title')\n  }, {\n    value: 'pre-placing',\n    label: utils.string.t('processingInstructions.checklist.tabs.prePlacing.title')\n  }, {\n    value: 'mrc',\n    label: utils.string.t('processingInstructions.checklist.tabs.mrc.title')\n  }, {\n    value: 'other-details',\n    label: utils.string.t('processingInstructions.checklist.tabs.otherDetails.title')\n  }, {\n    value: 'risk-references',\n    label: utils.string.t('processingInstructions.checklist.tabs.riskRefs.title')\n  }];\n  var isValidTab = tabs.map(function (item) {\n    return item.value;\n  }).includes(tab);\n\n  var _useState = useState(isValidTab ? tab : 'general'),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedTab = _useState2[0],\n      setSelectedTab = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      defaultValues = _useState4[0],\n      setDefaultValues = _useState4[1];\n\n  var _useState5 = useState({}),\n      _useState6 = _slicedToArray(_useState5, 2),\n      schemaData = _useState6[0],\n      setSchemaData = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      resetKey = _useState8[0],\n      setResetKey = _useState8[1];\n\n  var leadRef = instruction === null || instruction === void 0 ? void 0 : (_instruction$riskRefe = instruction.riskReferences) === null || _instruction$riskRefe === void 0 ? void 0 : _instruction$riskRefe.find(function (r) {\n    return r.leadPolicy;\n  });\n  var leadRefProducingBrokerName = leadRef === null || leadRef === void 0 ? void 0 : leadRef.producingBrokerName;\n  var leadRefAccountExecutiveName = leadRef === null || leadRef === void 0 ? void 0 : leadRef.accountExecutive;\n  var isFdo = utils.processingInstructions.isFdo(instruction === null || instruction === void 0 ? void 0 : instruction.processTypeId);\n  var isDraft = utils.processingInstructions.status.isDraft(instruction === null || instruction === void 0 ? void 0 : instruction.statusId);\n  var isRejectedDraft = utils.processingInstructions.status.isRejectedDraft(instruction === null || instruction === void 0 ? void 0 : instruction.statusId);\n  var isSubmittedAuthorisedSignatory = utils.processingInstructions.status.isSubmittedAuthorisedSignatory(instruction === null || instruction === void 0 ? void 0 : instruction.statusId);\n  var isReopened = utils.processingInstructions.status.isReopened(instruction === null || instruction === void 0 ? void 0 : instruction.statusId);\n  var userHasWritePermission = utils.app.access.feature('processingInstructions.processingInstructions', ['create', 'update'], user);\n  var userHasApproverAccess = utils.app.access.feature('processingInstructions.approverChecklist', ['create', 'update'], user);\n  var isCheckboxesEditable = userHasApproverAccess && isSubmittedAuthorisedSignatory;\n  var isEditable = userHasWritePermission && (isDraft || isRejectedDraft || isReopened);\n  var isReadOnly = !isEditable;\n\n  var getFacilityTypeId = function getFacilityTypeId() {\n    var _instruction$details;\n\n    var facilityTypeId = instruction === null || instruction === void 0 ? void 0 : (_instruction$details = instruction.details) === null || _instruction$details === void 0 ? void 0 : _instruction$details.facilityTypeId;\n\n    if (!facilityTypeId && utils.generic.isValidArray(facilityTypes, true)) {\n      var item = facilityTypes.find(function (type) {\n        var _instruction$details2;\n\n        return type.facilityTypeID === (instruction === null || instruction === void 0 ? void 0 : (_instruction$details2 = instruction.details) === null || _instruction$details2 === void 0 ? void 0 : _instruction$details2.facilityTypeId);\n      });\n      facilityTypeId = item === null || item === void 0 ? void 0 : item.facilityTypeID;\n    }\n\n    return facilityTypeId || '';\n  };\n\n  var getProducingBrokerId = function getProducingBrokerId() {\n    var _instruction$details3;\n\n    var producingBrokerId = instruction === null || instruction === void 0 ? void 0 : (_instruction$details3 = instruction.details) === null || _instruction$details3 === void 0 ? void 0 : _instruction$details3.producingBrokerId;\n    var item;\n\n    if (utils.generic.isValidArray(piProducingBrokers, true)) {\n      if (producingBrokerId) {\n        var _item;\n\n        item = piProducingBrokers.find(function (type) {\n          return type.id === producingBrokerId;\n        });\n        producingBrokerId = (_item = item) === null || _item === void 0 ? void 0 : _item.id;\n      } else if (leadRefProducingBrokerName) {\n        var leadProducingBroker = piProducingBrokers === null || piProducingBrokers === void 0 ? void 0 : piProducingBrokers.find(function (type) {\n          var _type$value;\n\n          return (type === null || type === void 0 ? void 0 : (_type$value = type.value) === null || _type$value === void 0 ? void 0 : _type$value.toLowerCase()) === (leadRefProducingBrokerName === null || leadRefProducingBrokerName === void 0 ? void 0 : leadRefProducingBrokerName.toLowerCase());\n        });\n        producingBrokerId = leadProducingBroker === null || leadProducingBroker === void 0 ? void 0 : leadProducingBroker.id;\n      }\n    } else if (!producingBrokerId && utils.generic.isValidArray(producingBrokers, true)) {\n      var _item2;\n\n      item = producingBrokers.find(function (type) {\n        var _instruction$details4;\n\n        return type.id === (instruction === null || instruction === void 0 ? void 0 : (_instruction$details4 = instruction.details) === null || _instruction$details4 === void 0 ? void 0 : _instruction$details4.producingBrokerId);\n      });\n      producingBrokerId = (_item2 = item) === null || _item2 === void 0 ? void 0 : _item2.id;\n    }\n\n    return producingBrokerId || '';\n  };\n\n  var getSelectedProducingBrokerName = function getSelectedProducingBrokerName(producingBrokerId) {\n    var _piProducingBrokers$f;\n\n    var selectedProducingBrokerName = piProducingBrokers === null || piProducingBrokers === void 0 ? void 0 : (_piProducingBrokers$f = piProducingBrokers.find(function (producingBroker) {\n      return (producingBroker === null || producingBroker === void 0 ? void 0 : producingBroker.id) === producingBrokerId;\n    })) === null || _piProducingBrokers$f === void 0 ? void 0 : _piProducingBrokers$f.value;\n    return selectedProducingBrokerName;\n  };\n\n  var getAccountExecutiveId = function getAccountExecutiveId() {\n    var _instruction$details5;\n\n    var accountExecutiveId = instruction === null || instruction === void 0 ? void 0 : (_instruction$details5 = instruction.details) === null || _instruction$details5 === void 0 ? void 0 : _instruction$details5.accountExecutiveId;\n    var item;\n\n    if (utils.generic.isValidArray(piAccountExecutives, true)) {\n      if (accountExecutiveId) {\n        var _item3;\n\n        item = piAccountExecutives.find(function (type) {\n          return type.id === accountExecutiveId;\n        });\n        accountExecutiveId = (_item3 = item) === null || _item3 === void 0 ? void 0 : _item3.id;\n      } else if (leadRefAccountExecutiveName) {\n        var leadAccountExecutive = piAccountExecutives === null || piAccountExecutives === void 0 ? void 0 : piAccountExecutives.find(function (type) {\n          return type.value.toLowerCase() === (leadRefAccountExecutiveName === null || leadRefAccountExecutiveName === void 0 ? void 0 : leadRefAccountExecutiveName.toLowerCase());\n        });\n        accountExecutiveId = leadAccountExecutive === null || leadAccountExecutive === void 0 ? void 0 : leadAccountExecutive.id;\n      }\n    } else if (!accountExecutiveId && utils.generic.isValidArray(accountExecutives, true)) {\n      var _item4;\n\n      item = accountExecutives.find(function (type) {\n        var _instruction$details6;\n\n        return type.id === (instruction === null || instruction === void 0 ? void 0 : (_instruction$details6 = instruction.details) === null || _instruction$details6 === void 0 ? void 0 : _instruction$details6.accountExecutiveId);\n      });\n      accountExecutiveId = (_item4 = item) === null || _item4 === void 0 ? void 0 : _item4.id;\n    }\n\n    return accountExecutiveId || '';\n  };\n\n  var getSelectedAccountExecutiveName = function getSelectedAccountExecutiveName(accountExecutiveId) {\n    var _piAccountExecutives$;\n\n    var selectedAccountExecutiveName = piAccountExecutives === null || piAccountExecutives === void 0 ? void 0 : (_piAccountExecutives$ = piAccountExecutives.find(function (accountExec) {\n      return (accountExec === null || accountExec === void 0 ? void 0 : accountExec.id) === accountExecutiveId;\n    })) === null || _piAccountExecutives$ === void 0 ? void 0 : _piAccountExecutives$.value;\n    return selectedAccountExecutiveName;\n  };\n\n  var fields = [{\n    name: 'invoicingClient',\n    group: 'general',\n    type: 'text',\n    label: utils.string.t('processingInstructions.checklist.fields.invoicingClient'),\n    value: (leadRef === null || leadRef === void 0 ? void 0 : leadRef.clientName) || '',\n    muiComponentProps: {\n      InputProps: {\n        readOnly: true,\n        disabled: true\n      }\n    }\n  }, {\n    name: 'contactName',\n    group: 'general',\n    type: 'text',\n    label: utils.string.t('processingInstructions.checklist.fields.contactName'),\n    value: (instruction === null || instruction === void 0 ? void 0 : (_instruction$details7 = instruction.details) === null || _instruction$details7 === void 0 ? void 0 : _instruction$details7.contactName) || '',\n    muiComponentProps: {\n      inputProps: {\n        maxLength: 50\n      },\n      InputProps: {\n        readOnly: isReadOnly,\n        disabled: isReadOnly\n      }\n    }\n  }, {\n    name: 'clientEmail',\n    group: 'general',\n    type: 'text',\n    label: utils.string.t('processingInstructions.checklist.fields.clientEmail'),\n    value: (instruction === null || instruction === void 0 ? void 0 : (_instruction$details8 = instruction.details) === null || _instruction$details8 === void 0 ? void 0 : _instruction$details8.clientEmail) || '',\n    muiComponentProps: {\n      inputProps: {\n        maxLength: 50\n      },\n      InputProps: {\n        readOnly: isReadOnly,\n        disabled: isReadOnly\n      }\n    }\n  }, {\n    name: 'eocInvoiceContactName',\n    group: 'general',\n    type: 'text',\n    label: utils.string.t('processingInstructions.checklist.fields.eocInvoiceContactName'),\n    value: (instruction === null || instruction === void 0 ? void 0 : (_instruction$details9 = instruction.details) === null || _instruction$details9 === void 0 ? void 0 : _instruction$details9.eocInvoiceContactName) || '',\n    muiComponentProps: {\n      inputProps: {\n        maxLength: 50\n      },\n      InputProps: {\n        readOnly: isReadOnly,\n        disabled: isReadOnly\n      }\n    }\n  }, {\n    name: 'eocInvoiceMail',\n    group: 'general',\n    type: 'text',\n    label: utils.string.t('processingInstructions.checklist.fields.eocInvoiceMail'),\n    value: (instruction === null || instruction === void 0 ? void 0 : (_instruction$details10 = instruction.details) === null || _instruction$details10 === void 0 ? void 0 : _instruction$details10.eocInvoiceMail) || '',\n    muiComponentProps: {\n      inputProps: {\n        maxLength: 50\n      },\n      InputProps: {\n        readOnly: isReadOnly,\n        disabled: isReadOnly\n      }\n    }\n  }, {\n    name: 'producingBroker',\n    group: 'general',\n    type: 'select',\n    label: utils.string.t('processingInstructions.checklist.fields.producingBroker'),\n    value: getProducingBrokerId(),\n    options: producingBrokers,\n    optionKey: 'id',\n    optionLabel: 'value',\n    muiComponentProps: {\n      disabled: isReadOnly || utils.generic.isInvalidOrEmptyArray(producingBrokers)\n    }\n  }, {\n    name: 'accountExecutive',\n    group: 'general',\n    type: 'select',\n    label: utils.string.t('processingInstructions.checklist.fields.accountExecutive'),\n    value: getAccountExecutiveId(),\n    options: accountExecutives,\n    optionKey: 'id',\n    optionLabel: 'value',\n    muiComponentProps: {\n      disabled: isReadOnly || utils.generic.isInvalidOrEmptyArray(accountExecutives)\n    }\n  }].concat(_toConsumableArray(isFdo ? [{\n    name: 'businessType',\n    group: 'general',\n    type: 'text',\n    label: utils.string.t('processingInstructions.checklist.fields.businessType'),\n    value: (leadRef === null || leadRef === void 0 ? void 0 : leadRef.businessType) || '',\n    muiComponentProps: {\n      InputProps: {\n        readOnly: true,\n        disabled: true\n      }\n    }\n  }, {\n    name: 'facilityType',\n    group: 'general',\n    type: 'select',\n    label: utils.string.t('processingInstructions.checklist.fields.facilityType'),\n    value: getFacilityTypeId(),\n    options: facilityTypes,\n    optionKey: 'facilityTypeID',\n    optionLabel: 'facilityTypeDetails',\n    disabled: isReadOnly || utils.generic.isInvalidOrEmptyArray(facilityTypes)\n  }] : []));\n  useEffect(function () {\n    var _childRef$current, _childRef$current$pro;\n\n    var reset = childRef === null || childRef === void 0 ? void 0 : (_childRef$current = childRef.current) === null || _childRef$current === void 0 ? void 0 : (_childRef$current$pro = _childRef$current.props) === null || _childRef$current$pro === void 0 ? void 0 : _childRef$current$pro.resetFunc;\n    var schema = utils.schemas.parsePiChecklist(processingInstructionsSchema, instruction);\n\n    var updatedDefaultValues = _objectSpread({\n      checklist: utils.form.getNestedInitialValues(schema === null || schema === void 0 ? void 0 : schema.rows, 'columnName')\n    }, utils.form.getInitialValues(fields));\n\n    setSchemaData(schema);\n    setDefaultValues(updatedDefaultValues);\n\n    if (utils.generic.isFunction(reset)) {\n      reset(updatedDefaultValues, {\n        keepDirty: false\n      });\n    }\n  }, [instruction] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  var validateAllChecklistSelected = function validateAllChecklistSelected(valuesChecklist) {\n    return Object.values(valuesChecklist).every(function (c) {\n      return ['YES', 'NO', 'NA'].includes(c.accountHandler);\n    });\n  };\n\n  var validateChecklistDates = function validateChecklistDates(valuesChecklist) {\n    var _valuesChecklist$quot, _valuesChecklist$quot2, _valuesChecklist$duty, _valuesChecklist$duty2, _valuesChecklist$evid, _valuesChecklist$evid2;\n\n    if ((valuesChecklist === null || valuesChecklist === void 0 ? void 0 : (_valuesChecklist$quot = valuesChecklist.quotesPutUp) === null || _valuesChecklist$quot === void 0 ? void 0 : _valuesChecklist$quot.accountHandler) === 'YES' && (valuesChecklist === null || valuesChecklist === void 0 ? void 0 : (_valuesChecklist$quot2 = valuesChecklist.quotesPutUp) === null || _valuesChecklist$quot2 === void 0 ? void 0 : _valuesChecklist$quot2.signedDate) === null) {\n      return false;\n    }\n\n    if ((valuesChecklist === null || valuesChecklist === void 0 ? void 0 : (_valuesChecklist$duty = valuesChecklist.dutyOfDisclosure) === null || _valuesChecklist$duty === void 0 ? void 0 : _valuesChecklist$duty.accountHandler) === 'YES' && (valuesChecklist === null || valuesChecklist === void 0 ? void 0 : (_valuesChecklist$duty2 = valuesChecklist.dutyOfDisclosure) === null || _valuesChecklist$duty2 === void 0 ? void 0 : _valuesChecklist$duty2.signedDate) === null) {\n      return false;\n    }\n\n    if ((valuesChecklist === null || valuesChecklist === void 0 ? void 0 : (_valuesChecklist$evid = valuesChecklist.evidence) === null || _valuesChecklist$evid === void 0 ? void 0 : _valuesChecklist$evid.accountHandler) === 'YES' && (valuesChecklist === null || valuesChecklist === void 0 ? void 0 : (_valuesChecklist$evid2 = valuesChecklist.evidence) === null || _valuesChecklist$evid2 === void 0 ? void 0 : _valuesChecklist$evid2.signedDate) === null) {\n      return false;\n    }\n\n    return true;\n  };\n\n  var checklistCompletedModal = function checklistCompletedModal() {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        fullWidth: true,\n        title: utils.string.t('processingInstructions.checklist.warning.title'),\n        maxWidth: 'xs',\n        componentProps: {\n          confirmLabel: utils.string.t('app.yes'),\n          cancelLabel: utils.string.t('app.no'),\n          confirmMessage: /*#__PURE__*/_jsxDEV(\"span\", {\n            dangerouslySetInnerHTML: {\n              __html: \"\".concat(utils.string.t('processingInstructions.checklist.allChecklistSelected'))\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 15\n          }, _this),\n          buttonColors: {\n            confirm: 'secondary',\n            cancel: 'primary'\n          },\n          submitHandler: function submitHandler() {\n            handlers.next();\n          },\n          cancelHandler: function cancelHandler() {},\n          handleClose: function handleClose() {}\n        }\n      }\n    }));\n  };\n\n  var handleSave = function handleSave() {\n    var _childRef$current$pro2;\n\n    var formValues = (_childRef$current$pro2 = childRef.current.props) === null || _childRef$current$pro2 === void 0 ? void 0 : _childRef$current$pro2.values;\n    var isProducingBrokerSelected = Boolean(formValues === null || formValues === void 0 ? void 0 : formValues.producingBroker);\n    var isFacilityTypeSelected = Boolean(isFdo ? formValues === null || formValues === void 0 ? void 0 : formValues.facilityType : true);\n    var isChecklistDatesSelected = validateChecklistDates(formValues === null || formValues === void 0 ? void 0 : formValues.checklist);\n\n    var updatedInstruction = _objectSpread(_objectSpread({}, instruction), {}, {\n      details: _objectSpread(_objectSpread({}, instruction.details), {}, {\n        accountExecutive: getSelectedAccountExecutiveName(formValues.accountExecutive),\n        producingBrokerName: getSelectedProducingBrokerName(formValues.producingBroker)\n      })\n    });\n\n    if (isProducingBrokerSelected && isChecklistDatesSelected && isFacilityTypeSelected) {\n      dispatch(checkListUpdate(formValues, updatedInstruction));\n    } else if (!isProducingBrokerSelected) {\n      dispatch(enqueueNotification('processingInstructions.addRiskReference.noProducingBrokerValue', 'warning'));\n    } else if (!isFacilityTypeSelected) {\n      dispatch(enqueueNotification('processingInstructions.addRiskReference.noFacilityTypeValue', 'warning'));\n    } else if (!isChecklistDatesSelected) {\n      dispatch(enqueueNotification('processingInstructions.checklist.prePlacing.mandatoryDateSelection', 'warning'));\n    }\n  };\n\n  var handleNext = function handleNext() {\n    var _childRef$current$pro3;\n\n    var formValues = (_childRef$current$pro3 = childRef.current.props) === null || _childRef$current$pro3 === void 0 ? void 0 : _childRef$current$pro3.values;\n    var isProducingBrokerSelected = Boolean(formValues === null || formValues === void 0 ? void 0 : formValues.producingBroker);\n    var isFacilityTypeSelected = Boolean(isFdo ? formValues === null || formValues === void 0 ? void 0 : formValues.facilityType : true);\n    var isChecklistCompleted = validateAllChecklistSelected(formValues === null || formValues === void 0 ? void 0 : formValues.checklist);\n\n    if (!isEditable || isChecklistCompleted || selectedTab === 'general' && isProducingBrokerSelected && isFacilityTypeSelected) {\n      handlers.next();\n    } else if (!isProducingBrokerSelected) {\n      dispatch(enqueueNotification('processingInstructions.addRiskReference.noProducingBrokerValue', 'warning'));\n    } else if (!isFacilityTypeSelected) {\n      dispatch(enqueueNotification('processingInstructions.addRiskReference.noFacilityTypeValue', 'warning'));\n    } else if (isEditable && !isChecklistCompleted) {\n      checklistCompletedModal(formValues, instruction);\n    }\n  };\n\n  var handleCancel = function handleCancel() {\n    var _childRef$current2, _childRef$current2$pr;\n\n    var reset = childRef === null || childRef === void 0 ? void 0 : (_childRef$current2 = childRef.current) === null || _childRef$current2 === void 0 ? void 0 : (_childRef$current2$pr = _childRef$current2.props) === null || _childRef$current2$pr === void 0 ? void 0 : _childRef$current2$pr.resetFunc;\n    setResetKey(new Date().getTime());\n\n    if (utils.generic.isFunction(reset)) {\n      reset(defaultValues, {\n        keepDirty: false\n      });\n    }\n  };\n\n  var showAlertNavigation = function showAlertNavigation(submitHandler, cancelHandler) {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        title: 'navigation.page.title',\n        subtitle: 'navigation.page.subtitle',\n        fullWidth: true,\n        maxWidth: 'sm',\n        componentProps: {\n          cancelLabel: utils.string.t('navigation.page.cancel'),\n          confirmLabel: utils.string.t('navigation.page.confirm'),\n          submitHandler: submitHandler,\n          cancelHandler: cancelHandler\n        }\n      }\n    }));\n  };\n\n  var toggleTab = function toggleTab(isPageDirty) {\n    return function (tab) {\n      if (isPageDirty) {\n        showAlertNavigation(function () {\n          return switchTab(tab);\n        }, function () {});\n      } else {\n        switchTab(tab);\n      }\n    };\n  };\n\n  var switchTab = function switchTab(tab) {\n    var _childRef$current$pro4;\n\n    var formValues = (_childRef$current$pro4 = childRef.current.props) === null || _childRef$current$pro4 === void 0 ? void 0 : _childRef$current$pro4.values;\n\n    var _ref2 = (formValues === null || formValues === void 0 ? void 0 : formValues.checklist) || {},\n        quotesPutUp = _ref2.quotesPutUp,\n        dutyOfDisclosure = _ref2.dutyOfDisclosure,\n        evidence = _ref2.evidence;\n\n    if (tab !== 'pre-placing') {\n      if ((quotesPutUp === null || quotesPutUp === void 0 ? void 0 : quotesPutUp.accountHandler) === 'YES' && (quotesPutUp === null || quotesPutUp === void 0 ? void 0 : quotesPutUp.signedDate) === null) {\n        dispatch(enqueueNotification('processingInstructions.checklist.prePlacing.mandatoryDateSelection', 'warning'));\n        return;\n      }\n\n      if ((dutyOfDisclosure === null || dutyOfDisclosure === void 0 ? void 0 : dutyOfDisclosure.accountHandler) === 'YES' && (dutyOfDisclosure === null || dutyOfDisclosure === void 0 ? void 0 : dutyOfDisclosure.signedDate) === null) {\n        dispatch(enqueueNotification('processingInstructions.checklist.prePlacing.mandatoryDateSelection', 'warning'));\n        return;\n      }\n\n      if ((evidence === null || evidence === void 0 ? void 0 : evidence.accountHandler) === 'YES' && (evidence === null || evidence === void 0 ? void 0 : evidence.signedDate) === null) {\n        dispatch(enqueueNotification('processingInstructions.checklist.prePlacing.mandatoryDateSelection', 'warning'));\n        return;\n      }\n    }\n\n    setSelectedTab(tab);\n    history.replace(\"\".concat(config.routes.processingInstructions.steps, \"/\").concat(id).concat(step ? \"/\".concat(step) : '').concat(tab ? \"/\".concat(tab) : ''));\n  }; // abort if data is not ready/available\n\n\n  if (!defaultValues || !instruction) return null;\n  return /*#__PURE__*/_jsxDEV(ProcessingInstructionsChecklistView, {\n    instruction: instruction,\n    leadRef: leadRef,\n    defaultValues: defaultValues,\n    columns: columns,\n    tabs: tabs,\n    selectedTab: selectedTab,\n    fields: fields,\n    schemaData: schemaData,\n    isFdo: isFdo,\n    isReadOnly: isReadOnly,\n    isEditable: isEditable,\n    isCheckboxesEditable: isCheckboxesEditable,\n    handlers: _objectSpread(_objectSpread({}, handlers), {}, {\n      cancel: handleCancel,\n      save: handleSave,\n      next: handleNext,\n      toggleTab: toggleTab\n    }),\n    resetKey: resetKey,\n    ref: childRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 462,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ProcessingInstructionsChecklist, \"c1GGqXZFoKrKAlZTh/0lcqt4/rI=\", false, function () {\n  return [useDispatch, useHistory, useParams, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = ProcessingInstructionsChecklist;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProcessingInstructionsChecklist\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ProcessingInstructionsChecklist/ProcessingInstructionsChecklist.js"],"names":["React","useEffect","useState","PropTypes","useSelector","useDispatch","useHistory","useParams","ProcessingInstructionsChecklistView","processingInstructionsSchema","enqueueNotification","checkListUpdate","showModal","selectUser","selectPiProducingBrokers","selectPiAccountExecutives","selectPiFacilityTypes","selectAccountExecutivesForRiskReference","selectProducingBrokerNamesForRiskReference","utils","config","ProcessingInstructionsChecklist","propTypes","instruction","object","isRequired","handlers","shape","back","func","next","childRef","dispatch","history","id","step","tab","piProducingBrokers","piAccountExecutives","producingBrokersFromRoles","accountExecutivesFromRoles","producingBrokers","generic","isValidArray","accountExecutives","facilityTypes","user","columns","label","string","t","align","tabs","value","isValidTab","map","item","includes","selectedTab","setSelectedTab","defaultValues","setDefaultValues","schemaData","setSchemaData","resetKey","setResetKey","leadRef","riskReferences","find","r","leadPolicy","leadRefProducingBrokerName","producingBrokerName","leadRefAccountExecutiveName","accountExecutive","isFdo","processingInstructions","processTypeId","isDraft","status","statusId","isRejectedDraft","isSubmittedAuthorisedSignatory","isReopened","userHasWritePermission","app","access","feature","userHasApproverAccess","isCheckboxesEditable","isEditable","isReadOnly","getFacilityTypeId","facilityTypeId","details","type","facilityTypeID","getProducingBrokerId","producingBrokerId","leadProducingBroker","toLowerCase","getSelectedProducingBrokerName","selectedProducingBrokerName","producingBroker","getAccountExecutiveId","accountExecutiveId","leadAccountExecutive","getSelectedAccountExecutiveName","selectedAccountExecutiveName","accountExec","fields","name","group","clientName","muiComponentProps","InputProps","readOnly","disabled","contactName","inputProps","maxLength","clientEmail","eocInvoiceContactName","eocInvoiceMail","options","optionKey","optionLabel","isInvalidOrEmptyArray","businessType","reset","current","props","resetFunc","schema","schemas","parsePiChecklist","updatedDefaultValues","checklist","form","getNestedInitialValues","rows","getInitialValues","isFunction","keepDirty","validateAllChecklistSelected","valuesChecklist","Object","values","every","c","accountHandler","validateChecklistDates","quotesPutUp","signedDate","dutyOfDisclosure","evidence","checklistCompletedModal","component","fullWidth","title","maxWidth","componentProps","confirmLabel","cancelLabel","confirmMessage","__html","buttonColors","confirm","cancel","submitHandler","cancelHandler","handleClose","handleSave","formValues","isProducingBrokerSelected","Boolean","isFacilityTypeSelected","facilityType","isChecklistDatesSelected","updatedInstruction","handleNext","isChecklistCompleted","handleCancel","Date","getTime","showAlertNavigation","subtitle","toggleTab","isPageDirty","switchTab","replace","routes","steps","save"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useHistory, useParams } from 'react-router';\r\n\r\n// app\r\nimport ProcessingInstructionsChecklistView from './ProcessingInstructionsChecklist.view';\r\nimport { processingInstructionsSchema } from 'schemas';\r\nimport {\r\n  enqueueNotification,\r\n  checkListUpdate,\r\n  showModal,\r\n  selectUser,\r\n  selectPiProducingBrokers,\r\n  selectPiAccountExecutives,\r\n  selectPiFacilityTypes,\r\n  selectAccountExecutivesForRiskReference,\r\n  selectProducingBrokerNamesForRiskReference,\r\n} from 'stores';\r\nimport * as utils from 'utils';\r\nimport config from 'config';\r\n\r\nProcessingInstructionsChecklist.propTypes = {\r\n  instruction: PropTypes.object.isRequired,\r\n  handlers: PropTypes.shape({\r\n    back: PropTypes.func.isRequired,\r\n    next: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default function ProcessingInstructionsChecklist({ instruction, handlers, childRef }) {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const { id, step, tab } = useParams();\r\n  const piProducingBrokers = useSelector(selectProducingBrokerNamesForRiskReference);\r\n  const piAccountExecutives = useSelector(selectAccountExecutivesForRiskReference);\r\n\r\n  const producingBrokersFromRoles = useSelector(selectPiProducingBrokers);\r\n  const accountExecutivesFromRoles = useSelector(selectPiAccountExecutives);\r\n  const producingBrokers = utils.generic.isValidArray(piProducingBrokers, true) ? piProducingBrokers : producingBrokersFromRoles;\r\n  const accountExecutives = utils.generic.isValidArray(piAccountExecutives, true) ? piAccountExecutives : accountExecutivesFromRoles;\r\n  const facilityTypes = useSelector(selectPiFacilityTypes);\r\n  const user = useSelector(selectUser);\r\n\r\n  const columns = [\r\n    { id: 'detail', label: utils.string.t('processingInstructions.checklist.cols.detail') },\r\n    { id: 'frontEndContact', label: utils.string.t('processingInstructions.checklist.cols.frontEndContact'), align: 'center' },\r\n    { id: 'authorisedSignatory', label: utils.string.t('processingInstructions.checklist.cols.authorisedSignatory'), align: 'center' },\r\n  ];\r\n\r\n  const tabs = [\r\n    { value: 'general', label: utils.string.t('processingInstructions.checklist.tabs.general.title') },\r\n    { value: 'pre-placing', label: utils.string.t('processingInstructions.checklist.tabs.prePlacing.title') },\r\n    { value: 'mrc', label: utils.string.t('processingInstructions.checklist.tabs.mrc.title') },\r\n    { value: 'other-details', label: utils.string.t('processingInstructions.checklist.tabs.otherDetails.title') },\r\n    { value: 'risk-references', label: utils.string.t('processingInstructions.checklist.tabs.riskRefs.title') },\r\n  ];\r\n\r\n  const isValidTab = tabs.map((item) => item.value).includes(tab);\r\n\r\n  const [selectedTab, setSelectedTab] = useState(isValidTab ? tab : 'general');\r\n  const [defaultValues, setDefaultValues] = useState();\r\n  const [schemaData, setSchemaData] = useState({});\r\n  const [resetKey, setResetKey] = useState();\r\n  const leadRef = instruction?.riskReferences?.find((r) => r.leadPolicy);\r\n\r\n  const leadRefProducingBrokerName = leadRef?.producingBrokerName;\r\n  const leadRefAccountExecutiveName = leadRef?.accountExecutive;\r\n  \r\n  const isFdo = utils.processingInstructions.isFdo(instruction?.processTypeId);\r\n  const isDraft = utils.processingInstructions.status.isDraft(instruction?.statusId);\r\n  const isRejectedDraft = utils.processingInstructions.status.isRejectedDraft(instruction?.statusId);\r\n  const isSubmittedAuthorisedSignatory = utils.processingInstructions.status.isSubmittedAuthorisedSignatory(instruction?.statusId);\r\n  const isReopened = utils.processingInstructions.status.isReopened(instruction?.statusId);\r\n  const userHasWritePermission = utils.app.access.feature('processingInstructions.processingInstructions', ['create', 'update'], user);\r\n  const userHasApproverAccess = utils.app.access.feature('processingInstructions.approverChecklist', ['create', 'update'], user);\r\n  const isCheckboxesEditable = userHasApproverAccess && isSubmittedAuthorisedSignatory;\r\n  const isEditable = userHasWritePermission && (isDraft || isRejectedDraft || isReopened);\r\n  const isReadOnly = !isEditable;\r\n\r\n  const getFacilityTypeId = () => {\r\n    let facilityTypeId = instruction?.details?.facilityTypeId;\r\n\r\n    if (!facilityTypeId && utils.generic.isValidArray(facilityTypes, true)) {\r\n      const item = facilityTypes.find((type) => type.facilityTypeID === instruction?.details?.facilityTypeId);\r\n      facilityTypeId = item?.facilityTypeID;\r\n    }\r\n\r\n    return facilityTypeId || '';\r\n  };\r\n\r\n  const getProducingBrokerId = () => {\r\n    let producingBrokerId = instruction?.details?.producingBrokerId;\r\n    let item;\r\n\r\n    if (utils.generic.isValidArray(piProducingBrokers, true)) {\r\n      if (producingBrokerId) {\r\n        item = piProducingBrokers.find((type) => type.id === producingBrokerId);\r\n        producingBrokerId = item?.id;\r\n      } else if (leadRefProducingBrokerName) {\r\n        const leadProducingBroker = piProducingBrokers?.find(\r\n          (type) => type?.value?.toLowerCase() === leadRefProducingBrokerName?.toLowerCase()\r\n        );\r\n        producingBrokerId = leadProducingBroker?.id;\r\n      }\r\n    } else if (!producingBrokerId && utils.generic.isValidArray(producingBrokers, true)) {\r\n      item = producingBrokers.find((type) => type.id === instruction?.details?.producingBrokerId);\r\n      producingBrokerId = item?.id;\r\n    }\r\n\r\n    return producingBrokerId || '';\r\n  };\r\n\r\n  const getSelectedProducingBrokerName = (producingBrokerId) => {\r\n    const selectedProducingBrokerName = piProducingBrokers?.find((producingBroker) => producingBroker?.id === producingBrokerId)?.value;\r\n    return selectedProducingBrokerName;\r\n  };\r\n\r\n  const getAccountExecutiveId = () => {\r\n    let accountExecutiveId = instruction?.details?.accountExecutiveId;\r\n    let item;\r\n    if (utils.generic.isValidArray(piAccountExecutives, true)) {\r\n      if (accountExecutiveId) {\r\n        item = piAccountExecutives.find((type) => type.id === accountExecutiveId);\r\n        accountExecutiveId = item?.id;\r\n      } else if (leadRefAccountExecutiveName) {\r\n        const leadAccountExecutive = piAccountExecutives?.find(\r\n          (type) => type.value.toLowerCase() === leadRefAccountExecutiveName?.toLowerCase()\r\n        );\r\n        accountExecutiveId = leadAccountExecutive?.id;\r\n      }\r\n    } else if (!accountExecutiveId && utils.generic.isValidArray(accountExecutives, true)) {\r\n      item = accountExecutives.find((type) => type.id === instruction?.details?.accountExecutiveId);\r\n      accountExecutiveId = item?.id;\r\n    }\r\n\r\n    return accountExecutiveId || '';\r\n  };\r\n\r\n  const getSelectedAccountExecutiveName = (accountExecutiveId) => {\r\n    const selectedAccountExecutiveName = piAccountExecutives?.find((accountExec) => accountExec?.id === accountExecutiveId)?.value;\r\n    return selectedAccountExecutiveName;\r\n  };\r\n\r\n  const fields = [\r\n    {\r\n      name: 'invoicingClient',\r\n      group: 'general',\r\n      type: 'text',\r\n      label: utils.string.t('processingInstructions.checklist.fields.invoicingClient'),\r\n      value: leadRef?.clientName || '',\r\n      muiComponentProps: {\r\n        InputProps: {\r\n          readOnly: true,\r\n          disabled: true,\r\n        },\r\n      },\r\n    },\r\n    {\r\n      name: 'contactName',\r\n      group: 'general',\r\n      type: 'text',\r\n      label: utils.string.t('processingInstructions.checklist.fields.contactName'),\r\n      value: instruction?.details?.contactName || '',\r\n      muiComponentProps: {\r\n        inputProps: {\r\n          maxLength: 50,\r\n        },\r\n        InputProps: {\r\n          readOnly: isReadOnly,\r\n          disabled: isReadOnly,\r\n        },\r\n      },\r\n    },\r\n    {\r\n      name: 'clientEmail',\r\n      group: 'general',\r\n      type: 'text',\r\n      label: utils.string.t('processingInstructions.checklist.fields.clientEmail'),\r\n      value: instruction?.details?.clientEmail || '',\r\n      muiComponentProps: {\r\n        inputProps: {\r\n          maxLength: 50,\r\n        },\r\n        InputProps: {\r\n          readOnly: isReadOnly,\r\n          disabled: isReadOnly,\r\n        },\r\n      },\r\n    },\r\n    {\r\n      name: 'eocInvoiceContactName',\r\n      group: 'general',\r\n      type: 'text',\r\n      label: utils.string.t('processingInstructions.checklist.fields.eocInvoiceContactName'),\r\n      value: instruction?.details?.eocInvoiceContactName || '',\r\n      muiComponentProps: {\r\n        inputProps: {\r\n          maxLength: 50,\r\n        },\r\n        InputProps: {\r\n          readOnly: isReadOnly,\r\n          disabled: isReadOnly,\r\n        },\r\n      },\r\n    },\r\n    {\r\n      name: 'eocInvoiceMail',\r\n      group: 'general',\r\n      type: 'text',\r\n      label: utils.string.t('processingInstructions.checklist.fields.eocInvoiceMail'),\r\n      value: instruction?.details?.eocInvoiceMail || '',\r\n      muiComponentProps: {\r\n        inputProps: {\r\n          maxLength: 50,\r\n        },\r\n        InputProps: {\r\n          readOnly: isReadOnly,\r\n          disabled: isReadOnly,\r\n        },\r\n      },\r\n    },\r\n    {\r\n      name: 'producingBroker',\r\n      group: 'general',\r\n      type: 'select',\r\n      label: utils.string.t('processingInstructions.checklist.fields.producingBroker'),\r\n      value: getProducingBrokerId(),\r\n      options: producingBrokers,\r\n      optionKey: 'id',\r\n      optionLabel: 'value',\r\n      muiComponentProps: {\r\n        disabled: isReadOnly || utils.generic.isInvalidOrEmptyArray(producingBrokers),\r\n      },\r\n    },\r\n    {\r\n      name: 'accountExecutive',\r\n      group: 'general',\r\n      type: 'select',\r\n      label: utils.string.t('processingInstructions.checklist.fields.accountExecutive'),\r\n      value: getAccountExecutiveId(),\r\n      options: accountExecutives,\r\n      optionKey: 'id',\r\n      optionLabel: 'value',\r\n      muiComponentProps: {\r\n        disabled: isReadOnly || utils.generic.isInvalidOrEmptyArray(accountExecutives),\r\n      },\r\n    },\r\n    ...(isFdo\r\n      ? [\r\n          {\r\n            name: 'businessType',\r\n            group: 'general',\r\n            type: 'text',\r\n            label: utils.string.t('processingInstructions.checklist.fields.businessType'),\r\n            value: leadRef?.businessType || '',\r\n            muiComponentProps: {\r\n              InputProps: {\r\n                readOnly: true,\r\n                disabled: true,\r\n              },\r\n            },\r\n          },\r\n          {\r\n            name: 'facilityType',\r\n            group: 'general',\r\n            type: 'select',\r\n            label: utils.string.t('processingInstructions.checklist.fields.facilityType'),\r\n            value: getFacilityTypeId(),\r\n            options: facilityTypes,\r\n            optionKey: 'facilityTypeID',\r\n            optionLabel: 'facilityTypeDetails',\r\n            disabled: isReadOnly || utils.generic.isInvalidOrEmptyArray(facilityTypes),\r\n          },\r\n        ]\r\n      : []),\r\n  ];\r\n\r\n  useEffect(\r\n    () => {\r\n      const reset = childRef?.current?.props?.resetFunc;\r\n      const schema = utils.schemas.parsePiChecklist(processingInstructionsSchema, instruction);\r\n      const updatedDefaultValues = {\r\n        checklist: utils.form.getNestedInitialValues(schema?.rows, 'columnName'),\r\n        ...utils.form.getInitialValues(fields),\r\n      };\r\n\r\n      setSchemaData(schema);\r\n      setDefaultValues(updatedDefaultValues);\r\n\r\n      if (utils.generic.isFunction(reset)) {\r\n        reset(updatedDefaultValues, {\r\n          keepDirty: false,\r\n        });\r\n      }\r\n    },\r\n    [instruction] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  const validateAllChecklistSelected = (valuesChecklist) => {\r\n    return Object.values(valuesChecklist).every((c) => ['YES', 'NO', 'NA'].includes(c.accountHandler));\r\n  };\r\n\r\n  const validateChecklistDates = (valuesChecklist) => {\r\n    if (valuesChecklist?.quotesPutUp?.accountHandler === 'YES' && valuesChecklist?.quotesPutUp?.signedDate === null) {\r\n      return false;\r\n    }\r\n\r\n    if (valuesChecklist?.dutyOfDisclosure?.accountHandler === 'YES' && valuesChecklist?.dutyOfDisclosure?.signedDate === null) {\r\n      return false;\r\n    }\r\n\r\n    if (valuesChecklist?.evidence?.accountHandler === 'YES' && valuesChecklist?.evidence?.signedDate === null) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  const checklistCompletedModal = () => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          fullWidth: true,\r\n          title: utils.string.t('processingInstructions.checklist.warning.title'),\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            confirmLabel: utils.string.t('app.yes'),\r\n            cancelLabel: utils.string.t('app.no'),\r\n            confirmMessage: (\r\n              <span\r\n                dangerouslySetInnerHTML={{\r\n                  __html: `${utils.string.t('processingInstructions.checklist.allChecklistSelected')}`,\r\n                }}\r\n              />\r\n            ),\r\n            buttonColors: { confirm: 'secondary', cancel: 'primary' },\r\n            submitHandler: () => {\r\n              handlers.next();\r\n            },\r\n            cancelHandler: () => {},\r\n            handleClose: () => {},\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleSave = () => {\r\n    const formValues = childRef.current.props?.values;\r\n    const isProducingBrokerSelected = Boolean(formValues?.producingBroker);\r\n    const isFacilityTypeSelected = Boolean(isFdo ? formValues?.facilityType : true);\r\n    const isChecklistDatesSelected = validateChecklistDates(formValues?.checklist);\r\n\r\n    const updatedInstruction = {\r\n      ...instruction,\r\n      details: {\r\n        ...instruction.details,\r\n        accountExecutive: getSelectedAccountExecutiveName(formValues.accountExecutive),\r\n        producingBrokerName: getSelectedProducingBrokerName(formValues.producingBroker),\r\n      },\r\n    };\r\n    if (isProducingBrokerSelected && isChecklistDatesSelected && isFacilityTypeSelected) {\r\n      dispatch(checkListUpdate(formValues, updatedInstruction));\r\n    } else if (!isProducingBrokerSelected) {\r\n      dispatch(enqueueNotification('processingInstructions.addRiskReference.noProducingBrokerValue', 'warning'));\r\n    } else if (!isFacilityTypeSelected) {\r\n      dispatch(enqueueNotification('processingInstructions.addRiskReference.noFacilityTypeValue', 'warning'));\r\n    } else if (!isChecklistDatesSelected) {\r\n      dispatch(enqueueNotification('processingInstructions.checklist.prePlacing.mandatoryDateSelection', 'warning'));\r\n    }\r\n  };\r\n\r\n  const handleNext = () => {\r\n    const formValues = childRef.current.props?.values;\r\n    const isProducingBrokerSelected = Boolean(formValues?.producingBroker);\r\n    const isFacilityTypeSelected = Boolean(isFdo ? formValues?.facilityType : true);\r\n    const isChecklistCompleted = validateAllChecklistSelected(formValues?.checklist);\r\n\r\n    if (!isEditable || isChecklistCompleted || (selectedTab === 'general' && isProducingBrokerSelected && isFacilityTypeSelected)) {\r\n      handlers.next();\r\n    } else if (!isProducingBrokerSelected) {\r\n      dispatch(enqueueNotification('processingInstructions.addRiskReference.noProducingBrokerValue', 'warning'));\r\n    } else if (!isFacilityTypeSelected) {\r\n      dispatch(enqueueNotification('processingInstructions.addRiskReference.noFacilityTypeValue', 'warning'));\r\n    } else if (isEditable && !isChecklistCompleted) {\r\n      checklistCompletedModal(formValues, instruction);\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    const reset = childRef?.current?.props?.resetFunc;\r\n\r\n    setResetKey(new Date().getTime());\r\n\r\n    if (utils.generic.isFunction(reset)) {\r\n      reset(defaultValues, { keepDirty: false });\r\n    }\r\n  };\r\n\r\n  const showAlertNavigation = (submitHandler, cancelHandler) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          title: 'navigation.page.title',\r\n          subtitle: 'navigation.page.subtitle',\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          componentProps: {\r\n            cancelLabel: utils.string.t('navigation.page.cancel'),\r\n            confirmLabel: utils.string.t('navigation.page.confirm'),\r\n            submitHandler,\r\n            cancelHandler,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const toggleTab = (isPageDirty) => (tab) => {\r\n    if (isPageDirty) {\r\n      showAlertNavigation(\r\n        () => switchTab(tab),\r\n        () => {}\r\n      );\r\n    } else {\r\n      switchTab(tab);\r\n    }\r\n  };\r\n\r\n  const switchTab = (tab) => {\r\n    const formValues = childRef.current.props?.values;\r\n    const { quotesPutUp, dutyOfDisclosure, evidence } = formValues?.checklist || {};\r\n\r\n    if (tab !== 'pre-placing') {\r\n      if (quotesPutUp?.accountHandler === 'YES' && quotesPutUp?.signedDate === null) {\r\n        dispatch(enqueueNotification('processingInstructions.checklist.prePlacing.mandatoryDateSelection', 'warning'));\r\n        return;\r\n      }\r\n\r\n      if (dutyOfDisclosure?.accountHandler === 'YES' && dutyOfDisclosure?.signedDate === null) {\r\n        dispatch(enqueueNotification('processingInstructions.checklist.prePlacing.mandatoryDateSelection', 'warning'));\r\n        return;\r\n      }\r\n\r\n      if (evidence?.accountHandler === 'YES' && evidence?.signedDate === null) {\r\n        dispatch(enqueueNotification('processingInstructions.checklist.prePlacing.mandatoryDateSelection', 'warning'));\r\n        return;\r\n      }\r\n    }\r\n\r\n    setSelectedTab(tab);\r\n    history.replace(`${config.routes.processingInstructions.steps}/${id}${step ? `/${step}` : ''}${tab ? `/${tab}` : ''}`);\r\n  };\r\n\r\n  // abort if data is not ready/available\r\n  if (!defaultValues || !instruction) return null;\r\n\r\n  return (\r\n    <ProcessingInstructionsChecklistView\r\n      instruction={instruction}\r\n      leadRef={leadRef}\r\n      defaultValues={defaultValues}\r\n      columns={columns}\r\n      tabs={tabs}\r\n      selectedTab={selectedTab}\r\n      fields={fields}\r\n      schemaData={schemaData}\r\n      isFdo={isFdo}\r\n      isReadOnly={isReadOnly}\r\n      isEditable={isEditable}\r\n      isCheckboxesEditable={isCheckboxesEditable}\r\n      handlers={{\r\n        ...handlers,\r\n        cancel: handleCancel,\r\n        save: handleSave,\r\n        next: handleNext,\r\n        toggleTab,\r\n      }}\r\n      resetKey={resetKey}\r\n      ref={childRef}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}