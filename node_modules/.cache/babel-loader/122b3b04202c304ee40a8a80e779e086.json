{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as utils from 'utils';\nimport { authLogout, addLoader, enqueueNotification, removeLoader } from 'stores';\nexport var closeSanctionsCheck = function closeSanctionsCheck(_ref, successCallback) {\n  var approvalStatus = _ref.approvalStatus,\n      taskId = _ref.taskId,\n      resolutionComments = _ref.resolutionComments,\n      caseIncidentID = _ref.caseIncidentID,\n      processId = _ref.processId;\n  return function (dispatch, getState) {\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/claims.actions.closeSanctionsCheck'\n    };\n    dispatch(closeSanctionsCheckRequest({\n      approvalStatus: approvalStatus,\n      taskId: taskId\n    }));\n    dispatch(addLoader('closeSanctionsCheck'));\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.bpmService,\n      path: \"workflow/task/\".concat(taskId, \"/next\"),\n      data: {\n        approvalStatus: approvalStatus,\n        resolutionComments: resolutionComments,\n        taskId: taskId,\n        caseIncidentID: caseIncidentID,\n        processId: processId\n      }\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json, true);\n    }).then(function (data) {\n      dispatch(closeSanctionsCheckSuccess(data));\n      successCallback();\n      dispatch(enqueueNotification('notification.closeSanctionsCheck.success', 'success'));\n    }).catch(function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API post error'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(closeSanctionsCheckFailure(err));\n      dispatch(enqueueNotification('notification.closeSanctionsCheck.fail', 'error'));\n    }).finally(function () {\n      dispatch(removeLoader('closeSanctionsCheck'));\n    });\n  };\n};\nexport var closeSanctionsCheckRequest = function closeSanctionsCheckRequest(params) {\n  return {\n    type: 'CLOSE_SANCTIONS_CHECK_SUCCESS',\n    payload: params\n  };\n};\nexport var closeSanctionsCheckSuccess = function closeSanctionsCheckSuccess(data) {\n  return {\n    type: 'CLOSE_SANCTIONS_CHECK_SUCCESS',\n    payload: data\n  };\n};\nexport var closeSanctionsCheckFailure = function closeSanctionsCheckFailure(err) {\n  return {\n    type: 'CLOSE_SANCTIONS_CHECK_SUCCESS',\n    payload: err\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.closeSanctionsCheck.js"],"names":["utils","authLogout","addLoader","enqueueNotification","removeLoader","closeSanctionsCheck","successCallback","approvalStatus","taskId","resolutionComments","caseIncidentID","processId","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","closeSanctionsCheckRequest","api","post","token","accessToken","bpmService","path","data","then","response","handleResponse","json","handleNewData","closeSanctionsCheckSuccess","catch","err","errorParams","message","handleError","handleUnauthorized","closeSanctionsCheckFailure","finally","params","type","payload"],"mappings":"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","sourcesContent":["import * as utils from 'utils';\r\nimport { authLogout, addLoader, enqueueNotification, removeLoader } from 'stores';\r\n\r\nexport const closeSanctionsCheck =\r\n  ({ approvalStatus, taskId, resolutionComments, caseIncidentID, processId }, successCallback) =>\r\n    (dispatch, getState) => {\r\n      const {\r\n        user: { auth },\r\n        config: {\r\n          vars: { endpoint },\r\n        },\r\n      } = getState();\r\n      const defaultError = {\r\n        file: 'stores/claims.actions.closeSanctionsCheck',\r\n      };\r\n\r\n      dispatch(closeSanctionsCheckRequest({ approvalStatus, taskId }));\r\n      dispatch(addLoader('closeSanctionsCheck'));\r\n      return utils.api\r\n        .post({\r\n          token: auth.accessToken,\r\n          endpoint: endpoint.bpmService,\r\n          path: `workflow/task/${taskId}/next`,\r\n          data: { approvalStatus, resolutionComments, taskId, caseIncidentID, processId },\r\n        })\r\n        .then((response) => utils.api.handleResponse(response))\r\n        .then((json) => utils.api.handleNewData(json, true))\r\n        .then((data) => {\r\n          dispatch(closeSanctionsCheckSuccess(data));\r\n          successCallback();\r\n          dispatch(enqueueNotification('notification.closeSanctionsCheck.success', 'success'));\r\n        })\r\n        .catch((err) => {\r\n          const errorParams = {\r\n            ...defaultError,\r\n            message: 'API post error',\r\n          };\r\n\r\n          utils.api.handleError(err, errorParams);\r\n          utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n          dispatch(closeSanctionsCheckFailure(err));\r\n          dispatch(enqueueNotification('notification.closeSanctionsCheck.fail', 'error'));\r\n        })\r\n        .finally(() => {\r\n          dispatch(removeLoader('closeSanctionsCheck'));\r\n        });\r\n    };\r\n\r\nexport const closeSanctionsCheckRequest = (params) => {\r\n  return {\r\n    type: 'CLOSE_SANCTIONS_CHECK_SUCCESS',\r\n    payload: params,\r\n  };\r\n};\r\n\r\nexport const closeSanctionsCheckSuccess = (data) => {\r\n  return {\r\n    type: 'CLOSE_SANCTIONS_CHECK_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const closeSanctionsCheckFailure = (err) => {\r\n  return {\r\n    type: 'CLOSE_SANCTIONS_CHECK_SUCCESS',\r\n    payload: err,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}