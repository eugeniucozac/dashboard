{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ConfigLoader\\\\ConfigLoader.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport get from 'lodash/get'; // app\n\nimport { ConfigLoaderView } from './ConfigLoader.view';\nimport { setBrand, setConfigVars } from 'stores';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ConfigLoader(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var configVars = useSelector(function (state) {\n    return get(state, 'config.vars');\n  });\n  var dispatch = useDispatch();\n  var defaultError = {\n    file: 'modules/ConfigLoader'\n  };\n  useEffect(function () {\n    dispatch(setBrand(utils.app.getHostName())); // fetch config file\n\n    fetch('/config/config.json', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (response) {\n      if (response.ok) {\n        return response.json();\n      } else {\n        return response.json().then(function () {\n          return Promise.reject(_objectSpread(_objectSpread(_objectSpread({\n            ok: response.ok,\n            message: 'Configuration fetch response invalid'\n          }, response.status && {\n            status: response.status\n          }), response.type && {\n            type: response.type\n          }), response.statusText && {\n            statusText: response.statusText\n          }));\n        });\n      }\n    }).then(function (json) {\n      if (json && json.env) {\n        dispatch(setConfigVars(json));\n        return json;\n      } else {\n        return Promise.reject({\n          message: 'Configuration properties missing or corrupted'\n        });\n      }\n    }).catch(function (err) {\n      utils.api.handleError(err, defaultError);\n      return err;\n    }).finally(function () {\n      setLoading(false);\n    });\n  }, [] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  return /*#__PURE__*/_jsxDEV(ConfigLoaderView, {\n    isLoading: loading,\n    hasConfig: Boolean(configVars && configVars.env),\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ConfigLoader, \"K2Pm8gs3Wl/t/+y8ePD7jz0NVN0=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = ConfigLoader;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConfigLoader\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ConfigLoader/ConfigLoader.js"],"names":["React","useState","useEffect","useDispatch","useSelector","get","ConfigLoaderView","setBrand","setConfigVars","utils","ConfigLoader","children","loading","setLoading","configVars","state","dispatch","defaultError","file","app","getHostName","fetch","method","headers","then","response","ok","json","Promise","reject","message","status","type","statusText","env","catch","err","api","handleError","finally","Boolean"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport get from 'lodash/get';\r\n\r\n// app\r\nimport { ConfigLoaderView } from './ConfigLoader.view';\r\nimport { setBrand, setConfigVars } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport default function ConfigLoader({ children }) {\r\n  const [loading, setLoading] = useState(true);\r\n  const configVars = useSelector((state) => get(state, 'config.vars'));\r\n  const dispatch = useDispatch();\r\n\r\n  const defaultError = {\r\n    file: 'modules/ConfigLoader',\r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n      dispatch(setBrand(utils.app.getHostName()));\r\n\r\n      // fetch config file\r\n      fetch('/config/config.json', {\r\n        method: 'GET',\r\n        headers: { 'Content-Type': 'application/json' },\r\n      })\r\n        .then((response) => {\r\n          if (response.ok) {\r\n            return response.json();\r\n          } else {\r\n            return response.json().then(() => {\r\n              return Promise.reject({\r\n                ok: response.ok,\r\n                message: 'Configuration fetch response invalid',\r\n                ...(response.status && { status: response.status }),\r\n                ...(response.type && { type: response.type }),\r\n                ...(response.statusText && { statusText: response.statusText }),\r\n              });\r\n            });\r\n          }\r\n        })\r\n        .then((json) => {\r\n          if (json && json.env) {\r\n            dispatch(setConfigVars(json));\r\n            return json;\r\n          } else {\r\n            return Promise.reject({ message: 'Configuration properties missing or corrupted' });\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          utils.api.handleError(err, defaultError);\r\n          return err;\r\n        })\r\n        .finally(() => {\r\n          setLoading(false);\r\n        });\r\n    },\r\n    [] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  return (\r\n    <ConfigLoaderView isLoading={loading} hasConfig={Boolean(configVars && configVars.env)}>\r\n      {children}\r\n    </ConfigLoaderView>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}