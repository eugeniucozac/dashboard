{"ast":null,"code":"import _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as utils from 'utils';\nimport config from 'config';\nimport isNumber from 'lodash/isNumber';\nimport round from 'lodash/round';\nexport var setLefts = function setLefts(layers) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'written';\n  // abort\n  if (!utils.generic.isValidArray(layers, true)) return [];\n  var setLayers = [];\n\n  var getRights = function getRights() {\n    return setLayers.reduce(function (arr, sl) {\n      arr.push(sl.left + sl[type]);\n      return arr;\n    }, [0]);\n  };\n\n  var isClear = function isClear(left, right, amount, xs) {\n    for (var i = 0; i < setLayers.length; i++) {\n      var sl = setLayers[i];\n      var yAxisClear = sl.amount + sl.xs <= xs || sl.xs >= amount + xs;\n      var xAxisClear = sl.left + sl[type] <= left || sl.left >= right;\n      if (!yAxisClear && !xAxisClear) return false;\n    }\n\n    return true;\n  };\n\n  var setLeft = function setLeft(layer) {\n    var rights = getRights().sort();\n\n    for (var i = 0; i < rights.length; i++) {\n      var left = rights[i];\n\n      if (isClear(left, left + layer[type], layer.amount, layer.xs)) {\n        layer.left = round(left, 6);\n        return;\n      }\n    }\n  };\n\n  layers.sort(function (a, b) {\n    return a.order && a.order - b.order;\n  }).forEach(function (l) {\n    setLeft(l);\n    setLayers.push(l);\n  });\n  return setLayers;\n};\nexport var mapById = function mapById(layers) {\n  // abort\n  if (!utils.generic.isValidArray(layers, true)) return {};\n  return layers.reduce(function (map, l) {\n    map[l.id] = l;\n    return map;\n  }, {});\n};\nexport var sortByLeft = function sortByLeft(layers) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'written';\n  // abort\n  if (!utils.generic.isValidArray(layers, true)) return [];\n  layers.sort(function (a, b) {\n    return a.left + a[type] * 0.5 - (b.left + b[type] * 0.5);\n  });\n\n  for (var i = 0; i < layers.length; i++) {\n    layers[i].order = i + 1;\n  }\n\n  return layers;\n};\nexport var calcMaxAmount = function calcMaxAmount(layers) {\n  // abort\n  if (!utils.generic.isValidArray(layers, true)) return 0;\n  var maxAmount = layers.reduce(function (max, layer) {\n    return layer.amount + layer.xs > max ? layer.amount + layer.xs : max;\n  }, 0);\n  return round(maxAmount, config.ui.format.currency.decimal);\n};\nexport var calcMaxPercentage = function calcMaxPercentage(layers) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'written';\n  // abort\n  if (!utils.generic.isValidArray(layers, true)) return 1;\n  var maxPercentage = layers.reduce(function (max, layer) {\n    var right = isNumber(layer.left + layer[type]) ? layer.left + layer[type] : 0;\n    return right > max ? right : max;\n  }, 1);\n  return round(maxPercentage, config.ui.format.percent.decimal);\n};\nexport var getXaxis = function getXaxis() {\n  for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n    values[_key] = arguments[_key];\n  }\n\n  // abort\n  if (!utils.generic.isValidArray(values, true)) return [];\n  var valuesNumber = values.reduce(function (acc, value) {\n    if (isNumber(value)) acc.push(value);\n    return acc;\n  }, []); // returns set of unique values\n\n  return _toConsumableArray(new Set(valuesNumber));\n};\nexport var getYaxis = function getYaxis(layers) {\n  // abort\n  if (!utils.generic.isValidArray(layers, true)) return [0];\n  var values = layers.reduce(function (acc, layer) {\n    if (isNumber(layer.xs)) acc.push(layer.xs);\n    if (isNumber(layer.xs) && isNumber(layer.amount)) acc.push(layer.amount + layer.xs);\n    return acc;\n  }, [0]); // returns set of unique values\n\n  return _toConsumableArray(new Set(values)).sort(function (a, b) {\n    return a - b;\n  });\n};\nexport var getLimits = function getLimits(limits) {\n  // abort\n  if (!utils.generic.isValidArray(limits, true)) return [];\n  var values = limits.reduce(function (acc, limit) {\n    if (isNumber(limit.value)) acc.push(limit.value);\n    return acc;\n  }, []);\n  return _toConsumableArray(new Set(values)).sort(function (a, b) {\n    return a - b;\n  });\n};\nexport var getTranches = function getTranches(layers) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'written';\n  // abort\n  if (!utils.generic.isValidArray(layers, true)) return [];\n  var values = layers.reduce(function (acc, layer) {\n    if (isNumber(layer.xs)) acc.push(layer.xs);\n    if (isNumber(layer.xs) && isNumber(layer.amount)) acc.push(layer.amount + layer.xs);\n    return acc;\n  }, []); // returns set of unique values\n\n  var uniqueValuesSorted = _toConsumableArray(new Set(values)).sort(function (a, b) {\n    return a - b;\n  });\n\n  return uniqueValuesSorted.reduce(function (acc, cur, idx, src) {\n    if (idx >= src.length - 1) return acc;\n    return [].concat(_toConsumableArray(acc), [{\n      l: cur,\n      u: src[idx + 1],\n      percentage: percentageInTranche(layers, cur, src[idx + 1], type)\n    }]);\n  }, []);\n};\nexport var percentageInTranche = function percentageInTranche(layers, lower, upper) {\n  var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'written';\n  // abort\n  if (!isNumber(lower) || !isNumber(upper) || lower === upper || !utils.generic.isValidArray(layers, true)) return 0;\n  var percentage = layers.reduce(function (sum, layer) {\n    var w = layer.xs <= lower && layer.xs + layer.amount >= upper ? layer[type] : 0;\n    return sum + w;\n  }, 0);\n  return round(percentage, config.ui.format.percent.decimal);\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/Mudmap/Mudmap.utils.js"],"names":["utils","config","isNumber","round","setLefts","layers","type","generic","isValidArray","setLayers","getRights","reduce","arr","sl","push","left","isClear","right","amount","xs","i","length","yAxisClear","xAxisClear","setLeft","layer","rights","sort","a","b","order","forEach","l","mapById","map","id","sortByLeft","calcMaxAmount","maxAmount","max","ui","format","currency","decimal","calcMaxPercentage","maxPercentage","percent","getXaxis","values","valuesNumber","acc","value","Set","getYaxis","getLimits","limits","limit","getTranches","uniqueValuesSorted","cur","idx","src","u","percentage","percentageInTranche","lower","upper","sum","w"],"mappings":"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","sourcesContent":["import * as utils from 'utils';\r\nimport config from 'config';\r\nimport isNumber from 'lodash/isNumber';\r\nimport round from 'lodash/round';\r\n\r\nexport const setLefts = (layers, type = 'written') => {\r\n  // abort\r\n  if (!utils.generic.isValidArray(layers, true)) return [];\r\n\r\n  const setLayers = [];\r\n\r\n  const getRights = () => {\r\n    return setLayers.reduce(\r\n      (arr, sl) => {\r\n        arr.push(sl.left + sl[type]);\r\n        return arr;\r\n      },\r\n      [0]\r\n    );\r\n  };\r\n\r\n  const isClear = (left, right, amount, xs) => {\r\n    for (let i = 0; i < setLayers.length; i++) {\r\n      let sl = setLayers[i];\r\n      let yAxisClear = sl.amount + sl.xs <= xs || sl.xs >= amount + xs;\r\n      let xAxisClear = sl.left + sl[type] <= left || sl.left >= right;\r\n      if (!yAxisClear && !xAxisClear) return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const setLeft = (layer) => {\r\n    const rights = getRights().sort();\r\n\r\n    for (let i = 0; i < rights.length; i++) {\r\n      let left = rights[i];\r\n      if (isClear(left, left + layer[type], layer.amount, layer.xs)) {\r\n        layer.left = round(left, 6);\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n  layers\r\n    .sort((a, b) => a.order && a.order - b.order)\r\n    .forEach((l) => {\r\n      setLeft(l);\r\n      setLayers.push(l);\r\n    });\r\n\r\n  return setLayers;\r\n};\r\n\r\nexport const mapById = (layers) => {\r\n  // abort\r\n  if (!utils.generic.isValidArray(layers, true)) return {};\r\n\r\n  return layers.reduce((map, l) => {\r\n    map[l.id] = l;\r\n    return map;\r\n  }, {});\r\n};\r\n\r\nexport const sortByLeft = (layers, type = 'written') => {\r\n  // abort\r\n  if (!utils.generic.isValidArray(layers, true)) return [];\r\n\r\n  layers.sort((a, b) => {\r\n    return a.left + a[type] * 0.5 - (b.left + b[type] * 0.5);\r\n  });\r\n\r\n  for (let i = 0; i < layers.length; i++) {\r\n    layers[i].order = i + 1;\r\n  }\r\n  return layers;\r\n};\r\n\r\nexport const calcMaxAmount = (layers) => {\r\n  // abort\r\n  if (!utils.generic.isValidArray(layers, true)) return 0;\r\n\r\n  const maxAmount = layers.reduce((max, layer) => {\r\n    return layer.amount + layer.xs > max ? layer.amount + layer.xs : max;\r\n  }, 0);\r\n\r\n  return round(maxAmount, config.ui.format.currency.decimal);\r\n};\r\n\r\nexport const calcMaxPercentage = (layers, type = 'written') => {\r\n  // abort\r\n  if (!utils.generic.isValidArray(layers, true)) return 1;\r\n\r\n  const maxPercentage = layers.reduce((max, layer) => {\r\n    const right = isNumber(layer.left + layer[type]) ? layer.left + layer[type] : 0;\r\n    return right > max ? right : max;\r\n  }, 1);\r\n\r\n  return round(maxPercentage, config.ui.format.percent.decimal);\r\n};\r\n\r\nexport const getXaxis = (...values) => {\r\n  // abort\r\n  if (!utils.generic.isValidArray(values, true)) return [];\r\n\r\n  const valuesNumber = values.reduce((acc, value) => {\r\n    if (isNumber(value)) acc.push(value);\r\n    return acc;\r\n  }, []);\r\n\r\n  // returns set of unique values\r\n  return [...new Set(valuesNumber)];\r\n};\r\n\r\nexport const getYaxis = (layers) => {\r\n  // abort\r\n  if (!utils.generic.isValidArray(layers, true)) return [0];\r\n\r\n  const values = layers.reduce(\r\n    (acc, layer) => {\r\n      if (isNumber(layer.xs)) acc.push(layer.xs);\r\n      if (isNumber(layer.xs) && isNumber(layer.amount)) acc.push(layer.amount + layer.xs);\r\n      return acc;\r\n    },\r\n    [0]\r\n  );\r\n\r\n  // returns set of unique values\r\n  return [...new Set(values)].sort((a, b) => a - b);\r\n};\r\n\r\nexport const getLimits = (limits) => {\r\n  // abort\r\n  if (!utils.generic.isValidArray(limits, true)) return [];\r\n\r\n  const values = limits.reduce((acc, limit) => {\r\n    if (isNumber(limit.value)) acc.push(limit.value);\r\n    return acc;\r\n  }, []);\r\n\r\n  return [...new Set(values)].sort((a, b) => a - b);\r\n};\r\n\r\nexport const getTranches = (layers, type = 'written') => {\r\n  // abort\r\n  if (!utils.generic.isValidArray(layers, true)) return [];\r\n\r\n  const values = layers.reduce((acc, layer) => {\r\n    if (isNumber(layer.xs)) acc.push(layer.xs);\r\n    if (isNumber(layer.xs) && isNumber(layer.amount)) acc.push(layer.amount + layer.xs);\r\n    return acc;\r\n  }, []);\r\n\r\n  // returns set of unique values\r\n  const uniqueValuesSorted = [...new Set(values)].sort((a, b) => a - b);\r\n\r\n  return uniqueValuesSorted.reduce((acc, cur, idx, src) => {\r\n    if (idx >= src.length - 1) return acc;\r\n    return [\r\n      ...acc,\r\n      {\r\n        l: cur,\r\n        u: src[idx + 1],\r\n        percentage: percentageInTranche(layers, cur, src[idx + 1], type),\r\n      },\r\n    ];\r\n  }, []);\r\n};\r\n\r\nexport const percentageInTranche = (layers, lower, upper, type = 'written') => {\r\n  // abort\r\n  if (!isNumber(lower) || !isNumber(upper) || lower === upper || !utils.generic.isValidArray(layers, true)) return 0;\r\n\r\n  const percentage = layers.reduce((sum, layer) => {\r\n    let w = layer.xs <= lower && layer.xs + layer.amount >= upper ? layer[type] : 0;\r\n    return sum + w;\r\n  }, 0);\r\n\r\n  return round(percentage, config.ui.format.percent.decimal);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}