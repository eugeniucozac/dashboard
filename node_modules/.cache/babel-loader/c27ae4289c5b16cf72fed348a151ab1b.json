{"ast":null,"code":"import { addLoader, authLogout, removeLoader } from 'stores';\nimport * as utils from 'utils';\nexport var getReOpenTaskLists = function getReOpenTaskLists() {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/claims.actions.getReOpenTaskLists'\n    };\n    dispatch(getReOpenTaskListsRequest());\n    dispatch(addLoader('getReOpenTaskLists'));\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.bpmService,\n      path: 'workflow/task/ReopenClaim/nextTaskList'\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      var res = data === null || data === void 0 ? void 0 : data.data;\n      dispatch(getReOpenTaskListsSuccess(res));\n      return res;\n    }).catch(function (err) {\n      dispatch(getReOpenTaskListsFailure(err, defaultError));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      return err;\n    }).finally(function () {\n      dispatch(removeLoader('getReOpenTaskLists'));\n    });\n  };\n};\nexport var getReOpenTaskListsRequest = function getReOpenTaskListsRequest() {\n  return {\n    type: 'CLAIMS_REOPEN_TASK_LIST_GET_REQUEST'\n  };\n};\nexport var getReOpenTaskListsSuccess = function getReOpenTaskListsSuccess(data) {\n  return {\n    type: 'CLAIMS_REOPEN_TASK_LIST_GET_SUCCESS',\n    payload: data\n  };\n};\nexport var getReOpenTaskListsFailure = function getReOpenTaskListsFailure(err) {\n  return {\n    type: 'CLAIMS_REOPEN_TASK_LIST_GET_FAILURE',\n    payload: err\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.getReOpenTaskLists.js"],"names":["addLoader","authLogout","removeLoader","utils","getReOpenTaskLists","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","getReOpenTaskListsRequest","api","get","token","accessToken","bpmService","path","then","response","handleResponse","json","handleNewData","data","res","getReOpenTaskListsSuccess","catch","err","getReOpenTaskListsFailure","handleUnauthorized","finally","type","payload"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,UAApB,EAAgCC,YAAhC,QAAoD,QAApD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA,SAAM,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC9D;AAD8D,oBAEHA,QAAQ,EAFL;AAAA,QAE9CC,IAF8C,aAEtDC,IAFsD,CAE9CD,IAF8C;AAAA,QAEpBE,QAFoB,aAEtCC,MAFsC,CAE5BC,IAF4B,CAEpBF,QAFoB;;AAI9D,QAAMG,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE;AADa,KAArB;AAIAR,IAAAA,QAAQ,CAACS,yBAAyB,EAA1B,CAAR;AACAT,IAAAA,QAAQ,CAACL,SAAS,CAAC,oBAAD,CAAV,CAAR;AAEA,WAAOG,KAAK,CAACY,GAAN,CACJC,GADI,CACA;AACHC,MAAAA,KAAK,EAAEV,IAAI,CAACW,WADT;AAEHT,MAAAA,QAAQ,EAAEA,QAAQ,CAACU,UAFhB;AAGHC,MAAAA,IAAI,EAAE;AAHH,KADA,EAMJC,IANI,CAMC,UAACC,QAAD;AAAA,aAAcnB,KAAK,CAACY,GAAN,CAAUQ,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAND,EAOJD,IAPI,CAOC,UAACG,IAAD;AAAA,aAAUrB,KAAK,CAACY,GAAN,CAAUU,aAAV,CAAwBD,IAAxB,CAAV;AAAA,KAPD,EAQJH,IARI,CAQC,UAACK,IAAD,EAAU;AACd,UAAMC,GAAG,GAAGD,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEA,IAAlB;AACArB,MAAAA,QAAQ,CAACuB,yBAAyB,CAACD,GAAD,CAA1B,CAAR;AACA,aAAOA,GAAP;AACD,KAZI,EAaJE,KAbI,CAaE,UAACC,GAAD,EAAS;AACdzB,MAAAA,QAAQ,CAAC0B,yBAAyB,CAACD,GAAD,EAAMlB,YAAN,CAA1B,CAAR;AACAT,MAAAA,KAAK,CAACY,GAAN,CAAUiB,kBAAV,CAA6BF,GAA7B,EAAkCzB,QAAlC,EAA4CJ,UAA5C;AACA,aAAO6B,GAAP;AACD,KAjBI,EAkBJG,OAlBI,CAkBI,YAAM;AACb5B,MAAAA,QAAQ,CAACH,YAAY,CAAC,oBAAD,CAAb,CAAR;AACD,KApBI,CAAP;AAqBD,GAhCiC;AAAA,CAA3B;AAkCP,OAAO,IAAMY,yBAAyB,GAAG,SAA5BA,yBAA4B,GAAM;AAC7C,SAAO;AACLoB,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,IAAMN,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACF,IAAD,EAAU;AACjD,SAAO;AACLQ,IAAAA,IAAI,EAAE,qCADD;AAELC,IAAAA,OAAO,EAAET;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMK,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACD,GAAD,EAAS;AAChD,SAAO;AACLI,IAAAA,IAAI,EAAE,qCADD;AAELC,IAAAA,OAAO,EAAEL;AAFJ,GAAP;AAID,CALM","sourcesContent":["import { addLoader, authLogout, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const getReOpenTaskLists = () => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } } } = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.getReOpenTaskLists',\r\n  };\r\n\r\n  dispatch(getReOpenTaskListsRequest());\r\n  dispatch(addLoader('getReOpenTaskLists'));\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.bpmService,\r\n      path: 'workflow/task/ReopenClaim/nextTaskList',\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      const res = data?.data;\r\n      dispatch(getReOpenTaskListsSuccess(res));\r\n      return res;\r\n    })\r\n    .catch((err) => {\r\n      dispatch(getReOpenTaskListsFailure(err, defaultError));\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('getReOpenTaskLists'));\r\n    });\r\n};\r\n\r\nexport const getReOpenTaskListsRequest = () => {\r\n  return {\r\n    type: 'CLAIMS_REOPEN_TASK_LIST_GET_REQUEST',\r\n  };\r\n};\r\n\r\nexport const getReOpenTaskListsSuccess = (data) => {\r\n  return {\r\n    type: 'CLAIMS_REOPEN_TASK_LIST_GET_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const getReOpenTaskListsFailure = (err) => {\r\n  return {\r\n    type: 'CLAIMS_REOPEN_TASK_LIST_GET_FAILURE',\r\n    payload: err,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}