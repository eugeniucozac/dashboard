{"ast":null,"code":"import _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\pages\\\\ClaimDashboard\\\\ClaimDashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory, useParams } from 'react-router'; // app\n\nimport { ClaimDashboardView } from './ClaimDashboard.view';\nimport { selectClaimsProcessingSelected, showModal, hideModal, returnToTeamQueueClaim, selectIsUserClaim, selectIsClosedClaim, selectIsTeamClaim } from 'stores';\nimport * as utils from 'utils';\nimport config from 'config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ClaimDashboard() {\n  _s();\n\n  var _this = this;\n\n  var history = useHistory();\n  var dispatch = useDispatch();\n  var isReassignFormDirtyRef = useRef(false);\n  var user = useSelector(function (state) {\n    return state.user;\n  });\n  var params = useParams();\n\n  var _useState = useState((params === null || params === void 0 ? void 0 : params.tab) || 'claimRefDetail'),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedTab = _useState2[0],\n      setSelectedTab = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      checkRedirectLocation = _useState4[0],\n      setCheckRedirectLocation = _useState4[1];\n\n  var _useState5 = useState({}),\n      _useState6 = _slicedToArray(_useState5, 2),\n      claimRefFromLossObj = _useState6[0],\n      setClaimRefFromLossObj = _useState6[1];\n\n  var claimsProcessingSelected = useSelector(selectClaimsProcessingSelected);\n  var claimSelected = claimsProcessingSelected === null || claimsProcessingSelected === void 0 ? void 0 : claimsProcessingSelected[0];\n  var userHasAllClaimsPermission = utils.app.access.feature('claimsProcessing.allClaims', ['read', 'create', 'update'], user); //const isReassignEnabled = constants.REASSIGN_ENABLED_TASK_STATUSES.includes(claimSelected?.processState);\n\n  var isUsersClaim = useSelector(selectIsUserClaim);\n  var isClosedClaim = useSelector(selectIsClosedClaim);\n  var isTeamClaim = useSelector(selectIsTeamClaim);\n\n  var setCheckPage = function setCheckPage(val, associateClaimData, lossRef) {\n    setCheckRedirectLocation(val);\n    setClaimRefFromLossObj({\n      claimID: associateClaimData === null || associateClaimData === void 0 ? void 0 : associateClaimData.claimID,\n      claimRef: associateClaimData === null || associateClaimData === void 0 ? void 0 : associateClaimData.claimRef,\n      lossRef: lossRef,\n      sourceId: associateClaimData === null || associateClaimData === void 0 ? void 0 : associateClaimData.sourceID,\n      policyId: associateClaimData === null || associateClaimData === void 0 ? void 0 : associateClaimData.xbPolicyID\n    });\n\n    if (associateClaimData === null || associateClaimData === void 0 ? void 0 : associateClaimData.claimRef) {\n      history.push(\"\".concat(config.routes.claimsProcessing.claim, \"/\").concat(associateClaimData === null || associateClaimData === void 0 ? void 0 : associateClaimData.claimRef));\n    }\n  };\n\n  useEffect(function () {\n    if ((claimsProcessingSelected === null || claimsProcessingSelected === void 0 ? void 0 : claimsProcessingSelected.length) !== 1 || !(claimSelected === null || claimSelected === void 0 ? void 0 : claimSelected.claimRef)) {\n      history.replace(config.routes.claimsFNOL.root);\n    }\n  }, [history, claimsProcessingSelected]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var handleSelectTab = function handleSelectTab(tabName) {\n    setSelectedTab(tabName);\n  };\n\n  var handleCreateRFIModal = function handleCreateRFIModal(claim) {\n    dispatch(showModal({\n      component: 'CREATE_RFI',\n      props: {\n        title: utils.string.t('claims.processing.taskFunction.createRFI'),\n        hideCompOnBlur: false,\n        fullWidth: true,\n        maxWidth: 'md',\n        disableAutoFocus: true,\n        componentProps: {\n          claim: claim,\n          cancelHandler: function cancelHandler() {\n            dispatch(hideModal());\n          }\n        }\n      }\n    }));\n  };\n\n  var setIsReassignFormDirty = function setIsReassignFormDirty(isDirty) {\n    isReassignFormDirtyRef.current = isDirty;\n  };\n\n  var bulkAssignConfirm = function bulkAssignConfirm() {\n    if (isReassignFormDirtyRef.current) {\n      dispatch(showModal({\n        component: 'CONFIRM',\n        props: {\n          title: utils.string.t('navigation.form.subtitle'),\n          hint: utils.string.t('navigation.form.title'),\n          fullWidth: true,\n          maxWidth: 'xs',\n          componentProps: {\n            cancelLabel: utils.string.t('app.no'),\n            confirmLabel: utils.string.t('app.yes'),\n            submitHandler: function submitHandler() {\n              dispatch(hideModal('SINGLE_ASSIGN_CLAIM'));\n            }\n          }\n        }\n      }));\n    } else {\n      dispatch(hideModal('SINGLE_ASSIGN_CLAIM'));\n    }\n  };\n\n  var handleReassignClaim = function handleReassignClaim(claim) {\n    dispatch(showModal({\n      component: 'SINGLE_ASSIGN_CLAIM',\n      props: {\n        title: 'claims.processing.bulkAssign.title',\n        fullWidth: true,\n        maxWidth: 'sm',\n        hideCompOnBlur: false,\n        componentProps: {\n          claimsProcessingSelected: [claim],\n          setIsDirty: setIsReassignFormDirty,\n          clickXHandler: function clickXHandler() {\n            bulkAssignConfirm();\n          },\n          cancelHandler: function cancelHandler() {\n            bulkAssignConfirm();\n          }\n        }\n      }\n    }));\n  };\n\n  var handleReturnClaimToQueue = function handleReturnClaimToQueue(claim) {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        title: utils.string.t('status.alert'),\n        fullWidth: true,\n        maxWidth: 'xs',\n        componentProps: {\n          cancelLabel: utils.string.t('app.no'),\n          confirmLabel: utils.string.t('app.yes'),\n          confirmMessage: /*#__PURE__*/_jsxDEV(\"span\", {\n            dangerouslySetInnerHTML: {\n              __html: \"\".concat(utils.string.t('claims.complexityRulesManagementDetails.alertModal.note'))\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 15\n          }, _this),\n          submitHandler: function submitHandler() {\n            dispatch(returnToTeamQueueClaim(claim));\n          },\n          cancelHandler: function cancelHandler() {\n            dispatch(hideModal());\n          }\n        }\n      }\n    }));\n  };\n\n  var handleCreateAdhocTask = function handleCreateAdhocTask(claim) {\n    dispatch(showModal({\n      component: 'CREATE_AD_HOC_TASK',\n      props: {\n        title: utils.string.t('claims.processing.taskFunction.createAdhocTask'),\n        hideCompOnBlur: false,\n        fullWidth: true,\n        maxWidth: 'md',\n        disableAutoFocus: true,\n        componentProps: {\n          claim: claim,\n          cancelHandler: function cancelHandler() {\n            dispatch(hideModal());\n          }\n        }\n      }\n    }));\n  };\n\n  var handleReOpenClaim = function handleReOpenClaim(claim) {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        title: utils.string.t('claims.claimRef.popOverItems.reOpen'),\n        hint: utils.string.t('claims.claimRef.popOverItems.reOpenClaimMessage'),\n        fullWidth: true,\n        maxWidth: 'xs',\n        componentProps: {\n          cancelLabel: utils.string.t('app.no'),\n          confirmLabel: utils.string.t('app.yes'),\n          submitHandler: function submitHandler() {\n            handleSetClaimTaskSelection(claim);\n          },\n          cancelHandler: function cancelHandler() {\n            dispatch(hideModal());\n          }\n        }\n      }\n    }));\n  };\n\n  var handleSetClaimTaskSelection = function handleSetClaimTaskSelection(claim) {\n    dispatch(showModal({\n      component: 'SET_CLAIM_TASK_SELECTION',\n      props: {\n        title: utils.string.t('claims.modals.claimFunctions.setClaimTaskSelection'),\n        fullWidth: true,\n        maxWidth: 'sm',\n        disableAutoFocus: true,\n        componentProps: {\n          claim: claim,\n          cancelHandler: function cancelHandler() {\n            dispatch(hideModal());\n          }\n        }\n      }\n    }));\n  };\n\n  var popoverItems = [{\n    id: 'reAssignClaim',\n    label: utils.string.t('app.reAssing'),\n    disabled: isClosedClaim || !(userHasAllClaimsPermission && isTeamClaim),\n    callback: function callback() {\n      return handleReassignClaim(claimSelected);\n    }\n  }, {\n    id: 'createAdhocTask',\n    label: utils.string.t('claims.processing.summary.buttons.createTask'),\n    disabled: isClosedClaim || !isUsersClaim,\n    callback: function callback() {\n      return handleCreateAdhocTask(claimSelected);\n    }\n  }, {\n    id: 'createRFI',\n    label: utils.string.t('claims.processing.summary.buttons.createNewRFI'),\n    disabled: isClosedClaim,\n    callback: function callback() {\n      return handleCreateRFIModal(claimSelected);\n    }\n  }, {\n    id: 'setClaimPriority',\n    label: utils.string.t('claims.claimRef.popOverItems.setClaimPriority'),\n    disabled: isClosedClaim || !isUsersClaim,\n    callback: function callback() {\n      return handleSetClaimPriority(claimSelected);\n    }\n  }, {\n    id: 'claimToTeamQueue',\n    label: utils.string.t('claims.processing.summary.buttons.releaseQueue'),\n    disabled: isClosedClaim || !isUsersClaim,\n    callback: function callback() {\n      return handleReturnClaimToQueue(claimSelected);\n    }\n  }, {\n    id: 'reOpenClaim',\n    label: utils.string.t('claims.claimRef.popOverItems.reopenClaim'),\n    disabled: !isClosedClaim,\n    callback: function callback() {\n      return handleReOpenClaim(claimsProcessingSelected === null || claimsProcessingSelected === void 0 ? void 0 : claimsProcessingSelected[0]);\n    }\n  }];\n  var breadcrumbs = [{\n    name: 'claimsFnol',\n    label: utils.string.t('loss.title'),\n    link: config.routes.claimsFNOL.root\n  }, {\n    name: 'lossRef',\n    label: \"\".concat(utils.string.t('loss.text', {\n      lossRef: claimSelected === null || claimSelected === void 0 ? void 0 : claimSelected.lossRef\n    })),\n    link: \"\".concat(config.routes.claimsFNOL.loss, \"/\").concat(!checkRedirectLocation ? claimSelected === null || claimSelected === void 0 ? void 0 : claimSelected.claimRef : claimRefFromLossObj === null || claimRefFromLossObj === void 0 ? void 0 : claimRefFromLossObj.claimRef),\n    active: true\n  }, {\n    name: 'claimRef',\n    label: \"\".concat(utils.string.t('claims.claimRef.text', {\n      claimRef: claimSelected === null || claimSelected === void 0 ? void 0 : claimSelected.claimRef\n    })),\n    link: \"\".concat(config.routes.claimsFNOL.claim, \"/\").concat(claimSelected === null || claimSelected === void 0 ? void 0 : claimSelected.claimRef),\n    active: true\n  }];\n  var tabs = [{\n    value: 'claimRefDetail',\n    label: utils.string.t('claims.claimRef.detail')\n  }, {\n    value: 'claimRefActions',\n    label: utils.string.t('claims.claimRef.actions')\n  }, {\n    value: 'claimRefDocs',\n    label: utils.string.t('claims.claimRef.docs')\n  }, {\n    value: 'claimRefNotes',\n    label: utils.string.t('claims.claimRef.notes')\n  }, {\n    value: 'claimRefAuditTrail',\n    label: utils.string.t('claims.claimRef.auditTrail')\n  }];\n\n  var handleSetClaimPriority = function handleSetClaimPriority(claim) {\n    dispatch(showModal({\n      component: 'SET_CLAIM_PRIORITY',\n      props: {\n        title: utils.string.t('claims.modals.claimFunctions.setClaimPriority'),\n        fullWidth: true,\n        maxWidth: 'sm',\n        disableAutoFocus: true,\n        componentProps: {\n          claim: claim,\n          cancelHandler: function cancelHandler() {\n            dispatch(hideModal());\n          }\n        }\n      }\n    }));\n  }; // abort\n\n\n  if (!utils.generic.isValidObject(claimSelected, 'claimRef')) return null;\n  return /*#__PURE__*/_jsxDEV(ClaimDashboardView, {\n    tabs: tabs,\n    selectedTab: selectedTab,\n    handleSelectTab: handleSelectTab,\n    popoverItems: popoverItems,\n    claimObj: claimSelected,\n    claimRefFromLossObj: claimRefFromLossObj,\n    breadcrumbs: breadcrumbs,\n    setCheckPage: setCheckPage,\n    checkRedirectLocation: checkRedirectLocation\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 316,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ClaimDashboard, \"sh5l3m/qlprWBMT45Wv7G5VVRYk=\", false, function () {\n  return [useHistory, useDispatch, useSelector, useParams, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = ClaimDashboard;\nClaimDashboard.displayName = \"ClaimDashboard\";\nClaimDashboard.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"ClaimDashboard\"\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\pages\\\\ClaimDashboard\\\\ClaimDashboard.js\"] = {\n    name: \"ClaimDashboard\",\n    docgenInfo: ClaimDashboard.__docgenInfo,\n    path: \"src\\\\pages\\\\ClaimDashboard\\\\ClaimDashboard.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimDashboard\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/pages/ClaimDashboard/ClaimDashboard.js"],"names":["React","useEffect","useState","useRef","useSelector","useDispatch","useHistory","useParams","ClaimDashboardView","selectClaimsProcessingSelected","showModal","hideModal","returnToTeamQueueClaim","selectIsUserClaim","selectIsClosedClaim","selectIsTeamClaim","utils","config","ClaimDashboard","history","dispatch","isReassignFormDirtyRef","user","state","params","tab","selectedTab","setSelectedTab","checkRedirectLocation","setCheckRedirectLocation","claimRefFromLossObj","setClaimRefFromLossObj","claimsProcessingSelected","claimSelected","userHasAllClaimsPermission","app","access","feature","isUsersClaim","isClosedClaim","isTeamClaim","setCheckPage","val","associateClaimData","lossRef","claimID","claimRef","sourceId","sourceID","policyId","xbPolicyID","push","routes","claimsProcessing","claim","length","replace","claimsFNOL","root","handleSelectTab","tabName","handleCreateRFIModal","component","props","title","string","t","hideCompOnBlur","fullWidth","maxWidth","disableAutoFocus","componentProps","cancelHandler","setIsReassignFormDirty","isDirty","current","bulkAssignConfirm","hint","cancelLabel","confirmLabel","submitHandler","handleReassignClaim","setIsDirty","clickXHandler","handleReturnClaimToQueue","confirmMessage","__html","handleCreateAdhocTask","handleReOpenClaim","handleSetClaimTaskSelection","popoverItems","id","label","disabled","callback","handleSetClaimPriority","breadcrumbs","name","link","loss","active","tabs","value","generic","isValidObject"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useHistory, useParams } from 'react-router';\r\n\r\n// app\r\nimport { ClaimDashboardView } from './ClaimDashboard.view';\r\nimport { selectClaimsProcessingSelected, showModal, hideModal, returnToTeamQueueClaim, selectIsUserClaim, selectIsClosedClaim, selectIsTeamClaim } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nimport config from 'config';\r\n\r\nexport default function ClaimDashboard() {\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  const isReassignFormDirtyRef = useRef(false);\r\n  const user = useSelector((state) => state.user);\r\n  const params = useParams();\r\n  const [selectedTab, setSelectedTab] = useState(params?.tab || 'claimRefDetail');\r\n  const [checkRedirectLocation, setCheckRedirectLocation] = useState(false);\r\n  const [claimRefFromLossObj, setClaimRefFromLossObj] = useState({});\r\n  const claimsProcessingSelected = useSelector(selectClaimsProcessingSelected);\r\n  const claimSelected = claimsProcessingSelected?.[0];\r\n\r\n  const userHasAllClaimsPermission = utils.app.access.feature('claimsProcessing.allClaims', ['read', 'create', 'update'], user);\r\n  //const isReassignEnabled = constants.REASSIGN_ENABLED_TASK_STATUSES.includes(claimSelected?.processState);\r\n  const isUsersClaim = useSelector(selectIsUserClaim);\r\n  const isClosedClaim = useSelector(selectIsClosedClaim);\r\n  const isTeamClaim = useSelector(selectIsTeamClaim);\r\n\r\n  const setCheckPage = (val, associateClaimData, lossRef) => {\r\n    setCheckRedirectLocation(val);\r\n    setClaimRefFromLossObj({\r\n      claimID: associateClaimData?.claimID,\r\n      claimRef: associateClaimData?.claimRef,\r\n      lossRef: lossRef,\r\n      sourceId: associateClaimData?.sourceID,\r\n      policyId: associateClaimData?.xbPolicyID,\r\n    });\r\n    if (associateClaimData?.claimRef) {\r\n      history.push(`${config.routes.claimsProcessing.claim}/${associateClaimData?.claimRef}`);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (claimsProcessingSelected?.length !== 1 || !claimSelected?.claimRef) {\r\n      history.replace(config.routes.claimsFNOL.root);\r\n    }\r\n  }, [history, claimsProcessingSelected]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const handleSelectTab = (tabName) => {\r\n    setSelectedTab(tabName);\r\n  };\r\n\r\n  const handleCreateRFIModal = (claim) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CREATE_RFI',\r\n        props: {\r\n          title: utils.string.t('claims.processing.taskFunction.createRFI'),\r\n          hideCompOnBlur: false,\r\n          fullWidth: true,\r\n          maxWidth: 'md',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            claim,\r\n            cancelHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const setIsReassignFormDirty = (isDirty) => {\r\n    isReassignFormDirtyRef.current = isDirty;\r\n  };\r\n\r\n  const bulkAssignConfirm = () => {\r\n    if (isReassignFormDirtyRef.current) {\r\n      dispatch(\r\n        showModal({\r\n          component: 'CONFIRM',\r\n          props: {\r\n            title: utils.string.t('navigation.form.subtitle'),\r\n            hint: utils.string.t('navigation.form.title'),\r\n            fullWidth: true,\r\n            maxWidth: 'xs',\r\n            componentProps: {\r\n              cancelLabel: utils.string.t('app.no'),\r\n              confirmLabel: utils.string.t('app.yes'),\r\n              submitHandler: () => {\r\n                dispatch(hideModal('SINGLE_ASSIGN_CLAIM'));\r\n              },\r\n            },\r\n          },\r\n        })\r\n      );\r\n    } else {\r\n      dispatch(hideModal('SINGLE_ASSIGN_CLAIM'));\r\n    }\r\n  };\r\n\r\n  const handleReassignClaim = (claim) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'SINGLE_ASSIGN_CLAIM',\r\n        props: {\r\n          title: 'claims.processing.bulkAssign.title',\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          hideCompOnBlur: false,\r\n          componentProps: {\r\n            claimsProcessingSelected: [claim],\r\n            setIsDirty: setIsReassignFormDirty,\r\n            clickXHandler: () => {\r\n              bulkAssignConfirm();\r\n            },\r\n            cancelHandler: () => {\r\n              bulkAssignConfirm();\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleReturnClaimToQueue = (claim) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          title: utils.string.t('status.alert'),\r\n          fullWidth: true,\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            cancelLabel: utils.string.t('app.no'),\r\n            confirmLabel: utils.string.t('app.yes'),\r\n            confirmMessage: (\r\n              <span\r\n                dangerouslySetInnerHTML={{\r\n                  __html: `${utils.string.t('claims.complexityRulesManagementDetails.alertModal.note')}`,\r\n                }}\r\n              />\r\n            ),\r\n            submitHandler: () => {\r\n              dispatch(returnToTeamQueueClaim(claim));\r\n            },\r\n            cancelHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleCreateAdhocTask = (claim) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CREATE_AD_HOC_TASK',\r\n        props: {\r\n          title: utils.string.t('claims.processing.taskFunction.createAdhocTask'),\r\n          hideCompOnBlur: false,\r\n          fullWidth: true,\r\n          maxWidth: 'md',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            claim,\r\n            cancelHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n  const handleReOpenClaim = (claim) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          title: utils.string.t('claims.claimRef.popOverItems.reOpen'),\r\n          hint: utils.string.t('claims.claimRef.popOverItems.reOpenClaimMessage'),\r\n          fullWidth: true,\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            cancelLabel: utils.string.t('app.no'),\r\n            confirmLabel: utils.string.t('app.yes'),\r\n            submitHandler: () => {\r\n              handleSetClaimTaskSelection(claim);\r\n            },\r\n            cancelHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n  const handleSetClaimTaskSelection = (claim) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'SET_CLAIM_TASK_SELECTION',\r\n        props: {\r\n          title: utils.string.t('claims.modals.claimFunctions.setClaimTaskSelection'),\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            claim,\r\n            cancelHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const popoverItems = [\r\n    {\r\n      id: 'reAssignClaim',\r\n      label: utils.string.t('app.reAssing'),\r\n      disabled: isClosedClaim || !(userHasAllClaimsPermission && isTeamClaim),\r\n      callback: () => handleReassignClaim(claimSelected),\r\n    },\r\n    {\r\n      id: 'createAdhocTask',\r\n      label: utils.string.t('claims.processing.summary.buttons.createTask'),\r\n      disabled: isClosedClaim || !isUsersClaim,\r\n      callback: () => handleCreateAdhocTask(claimSelected),\r\n    },\r\n    {\r\n      id: 'createRFI',\r\n      label: utils.string.t('claims.processing.summary.buttons.createNewRFI'),\r\n      disabled: isClosedClaim,\r\n      callback: () => handleCreateRFIModal(claimSelected),\r\n    },\r\n    {\r\n      id: 'setClaimPriority',\r\n      label: utils.string.t('claims.claimRef.popOverItems.setClaimPriority'),\r\n      disabled: isClosedClaim || !isUsersClaim,\r\n      callback: () => handleSetClaimPriority(claimSelected),\r\n    },\r\n    {\r\n      id: 'claimToTeamQueue',\r\n      label: utils.string.t('claims.processing.summary.buttons.releaseQueue'),\r\n      disabled: isClosedClaim || !isUsersClaim,\r\n      callback: () => handleReturnClaimToQueue(claimSelected),\r\n    },\r\n    {\r\n      id: 'reOpenClaim',\r\n      label: utils.string.t('claims.claimRef.popOverItems.reopenClaim'),\r\n      disabled: !isClosedClaim,\r\n      callback: () => handleReOpenClaim(claimsProcessingSelected?.[0]),\r\n    },\r\n  ];\r\n\r\n  const breadcrumbs = [\r\n    {\r\n      name: 'claimsFnol',\r\n      label: utils.string.t('loss.title'),\r\n      link: config.routes.claimsFNOL.root,\r\n    },\r\n    {\r\n      name: 'lossRef',\r\n      label: `${utils.string.t('loss.text', {\r\n        lossRef: claimSelected?.lossRef,\r\n      })}`,\r\n      link: `${config.routes.claimsFNOL.loss}/${!checkRedirectLocation ? claimSelected?.claimRef : claimRefFromLossObj?.claimRef}`,\r\n      active: true,\r\n    },\r\n    {\r\n      name: 'claimRef',\r\n      label: `${utils.string.t('claims.claimRef.text', {\r\n        claimRef: claimSelected?.claimRef,\r\n      })}`,\r\n      link: `${config.routes.claimsFNOL.claim}/${claimSelected?.claimRef}`,\r\n      active: true,\r\n    }, \r\n  ];\r\n\r\n  const tabs = [\r\n    { value: 'claimRefDetail', label: utils.string.t('claims.claimRef.detail') },\r\n    { value: 'claimRefActions', label: utils.string.t('claims.claimRef.actions') },\r\n    { value: 'claimRefDocs', label: utils.string.t('claims.claimRef.docs') },\r\n    { value: 'claimRefNotes', label: utils.string.t('claims.claimRef.notes') },\r\n    { value: 'claimRefAuditTrail', label: utils.string.t('claims.claimRef.auditTrail') },\r\n  ];\r\n\r\n  const handleSetClaimPriority = (claim) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'SET_CLAIM_PRIORITY',\r\n        props: {\r\n          title: utils.string.t('claims.modals.claimFunctions.setClaimPriority'),\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            claim,\r\n            cancelHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  // abort\r\n  if (!utils.generic.isValidObject(claimSelected, 'claimRef')) return null;\r\n\r\n  return (\r\n    <ClaimDashboardView\r\n      tabs={tabs}\r\n      selectedTab={selectedTab}\r\n      handleSelectTab={handleSelectTab}\r\n      popoverItems={popoverItems}\r\n      claimObj={claimSelected}\r\n      claimRefFromLossObj={claimRefFromLossObj}\r\n      breadcrumbs={breadcrumbs}\r\n      setCheckPage={setCheckPage}\r\n      checkRedirectLocation={checkRedirectLocation}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}