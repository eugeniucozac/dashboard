{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { authLogout, addLoader, removeLoader } from 'stores';\nimport * as utils from 'utils';\nimport get from 'lodash/get';\nexport var getComplexityValues = function getComplexityValues(divisionID, xbInstanceID) {\n  var includeDefaultValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var sourceDepartments = arguments.length > 3 ? arguments[3] : undefined;\n  return function (dispatch, getState) {\n    var _policyData$divisionI, _policyData$xbInstanc;\n\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/claims.actions.getComplexityValues'\n    };\n    dispatch(getComplexityValuesRequest(divisionID, xbInstanceID, includeDefaultValues, sourceDepartments));\n    dispatch(addLoader('getComplexityValues'));\n    var state = getState();\n    var policyData = get(state, 'claims.policyData') || '';\n    var isMultipleSourceDepartments = Boolean(sourceDepartments);\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.claimService,\n      path: 'api/data/claims-triage/complex/complexity-values',\n      params: _objectSpread(_objectSpread({}, isMultipleSourceDepartments ? {\n        sourceDepartments: sourceDepartments\n      } : {\n        departmentID: (_policyData$divisionI = policyData === null || policyData === void 0 ? void 0 : policyData.divisionID) !== null && _policyData$divisionI !== void 0 ? _policyData$divisionI : divisionID,\n        xbInstanceID: (_policyData$xbInstanc = policyData === null || policyData === void 0 ? void 0 : policyData.xbInstanceID) !== null && _policyData$xbInstanc !== void 0 ? _policyData$xbInstanc : xbInstanceID\n      }), {}, {\n        includeDefaultValues: includeDefaultValues\n      })\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (data) {\n      dispatch(getComplexityValuesSuccess(data.data));\n      dispatch(removeLoader('getComplexityValues'));\n      return data.data;\n    }).catch(function (err) {\n      dispatch(getComplexityValuesFailure(err, defaultError));\n      dispatch(removeLoader('getComplexityValues'));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      return err;\n    });\n  };\n};\nexport var getComplexityValuesRequest = function getComplexityValuesRequest(divisionID, xbInstanceID, includeDefaultValues) {\n  return {\n    type: 'CLAIMS_COMPLEXITY_VALUES_GET_REQUEST',\n    payload: {\n      divisionID: divisionID,\n      xbInstanceID: xbInstanceID,\n      includeDefaultValues: includeDefaultValues\n    }\n  };\n};\nexport var getComplexityValuesSuccess = function getComplexityValuesSuccess(data) {\n  return {\n    type: 'CLAIMS_COMPLEXITY_VALUES_GET_SUCCESS',\n    payload: data\n  };\n};\nexport var getComplexityValuesFailure = function getComplexityValuesFailure(data) {\n  return {\n    type: 'CLAIMS_COMPLEXITY_VALUES_GET_FAILURE',\n    payload: data\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.getComplexityValues.js"],"names":["authLogout","addLoader","removeLoader","utils","get","getComplexityValues","divisionID","xbInstanceID","includeDefaultValues","sourceDepartments","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","getComplexityValuesRequest","state","policyData","isMultipleSourceDepartments","Boolean","api","token","accessToken","claimService","path","params","departmentID","then","response","handleResponse","data","getComplexityValuesSuccess","catch","err","getComplexityValuesFailure","handleUnauthorized","type","payload"],"mappings":"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","sourcesContent":["import { authLogout, addLoader, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\nimport get from 'lodash/get';\r\n\r\nexport const getComplexityValues =\r\n  (divisionID, xbInstanceID, includeDefaultValues = true, sourceDepartments) =>\r\n  (dispatch, getState) => {\r\n    // prettier-ignore\r\n    const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n    const defaultError = {\r\n      file: 'stores/claims.actions.getComplexityValues',\r\n    };\r\n\r\n    dispatch(getComplexityValuesRequest(divisionID, xbInstanceID, includeDefaultValues, sourceDepartments));\r\n    dispatch(addLoader('getComplexityValues'));\r\n\r\n    const state = getState();\r\n    const policyData = get(state, 'claims.policyData') || '';\r\n    const isMultipleSourceDepartments = Boolean(sourceDepartments);\r\n\r\n    return utils.api\r\n      .get({\r\n        token: auth.accessToken,\r\n        endpoint: endpoint.claimService,\r\n        path: 'api/data/claims-triage/complex/complexity-values',\r\n        params: {\r\n          ...(isMultipleSourceDepartments\r\n            ? { sourceDepartments }\r\n            : {\r\n                departmentID: policyData?.divisionID ?? divisionID,\r\n                xbInstanceID: policyData?.xbInstanceID ?? xbInstanceID,\r\n              }),\r\n          includeDefaultValues,\r\n        },\r\n      })\r\n      .then((response) => utils.api.handleResponse(response))\r\n      .then((data) => {\r\n        dispatch(getComplexityValuesSuccess(data.data));\r\n        dispatch(removeLoader('getComplexityValues'));\r\n        return data.data;\r\n      })\r\n      .catch((err) => {\r\n        dispatch(getComplexityValuesFailure(err, defaultError));\r\n        dispatch(removeLoader('getComplexityValues'));\r\n        utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n        return err;\r\n      });\r\n  };\r\n\r\nexport const getComplexityValuesRequest = (divisionID, xbInstanceID, includeDefaultValues) => {\r\n  return {\r\n    type: 'CLAIMS_COMPLEXITY_VALUES_GET_REQUEST',\r\n    payload: { divisionID, xbInstanceID, includeDefaultValues },\r\n  };\r\n};\r\n\r\nexport const getComplexityValuesSuccess = (data) => {\r\n  return {\r\n    type: 'CLAIMS_COMPLEXITY_VALUES_GET_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const getComplexityValuesFailure = (data) => {\r\n  return {\r\n    type: 'CLAIMS_COMPLEXITY_VALUES_GET_FAILURE',\r\n    payload: data,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}