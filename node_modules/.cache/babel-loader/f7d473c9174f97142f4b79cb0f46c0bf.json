{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\forms\\\\AddManageSetting\\\\AddManageSetting.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types'; // app\n\nimport { AddManageSettingView } from './AddManageSetting.view';\nimport { hideModal, uploadDocumentList, selectRefDataNewDocumentTypes } from 'stores';\nimport * as utils from 'utils';\nimport * as constants from 'consts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nAddManageSetting.propTypes = {\n  instruction: PropTypes.object,\n  documents: PropTypes.object,\n  riskRef: PropTypes.object.isRequired,\n  files: PropTypes.arrayOf(PropTypes.shape({\n    file: PropTypes.object,\n    name: PropTypes.string,\n    type: PropTypes.object\n  })),\n  rejectedFiles: PropTypes.array,\n  multiple: PropTypes.bool,\n  maxFiles: PropTypes.number,\n  maxSize: PropTypes.number,\n  accept: PropTypes.string\n};\nAddManageSetting.defaultProps = {\n  multiple: constants.PROCESSING_INSTRUCTION_FILE_UPLOAD_ALLOW_MULTIPLE,\n  maxFiles: constants.PROCESSING_INSTRUCTION_FILE_UPLOAD_MAX_FILES,\n  maxSize: constants.PROCESSING_INSTRUCTION_FILE_UPLOAD_MAX_FILE_SIZE,\n  accept: constants.PROCESSING_INSTRUCTION_FILE_UPLOAD_ALLOWED_FILE_EXT\n};\nexport default function AddManageSetting(_ref) {\n  _s();\n\n  var instruction = _ref.instruction,\n      documents = _ref.documents,\n      riskRef = _ref.riskRef,\n      files = _ref.files,\n      rejectedFiles = _ref.rejectedFiles,\n      multiple = _ref.multiple,\n      maxFiles = _ref.maxFiles,\n      maxSize = _ref.maxSize,\n      accept = _ref.accept;\n  var dispatch = useDispatch();\n\n  var _useState = useState(files),\n      _useState2 = _slicedToArray(_useState, 2),\n      filesAttached = _useState2[0],\n      setFilesAttached = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      warnings = _useState4[0],\n      setWarnings = _useState4[1];\n\n  var documentTypes = useSelector(selectRefDataNewDocumentTypes);\n\n  var setWarningDuplicates = function setWarningDuplicates(hasDuplicates) {\n    return hasDuplicates ? {\n      duplicates: {\n        message: utils.string.t('fileUpload.messages.duplicates'),\n        type: 'alert'\n      }\n    } : {\n      duplicates: {}\n    };\n  };\n\n  var setWarningTooManyFiles = function setWarningTooManyFiles(filesCurrentlyAttached) {\n    return filesCurrentlyAttached && filesCurrentlyAttached.length > maxFiles ? {\n      tooManyFiles: {\n        message: utils.string.t('fileUpload.messages.tooManyFiles', {\n          max: maxFiles\n        }),\n        type: 'error'\n      }\n    } : {\n      tooManyFiles: {}\n    };\n  };\n\n  var setWarningMaxFileSize = function setWarningMaxFileSize(rejectedFiles) {\n    return rejectedFiles && rejectedFiles.length > 0 && rejectedFiles.some(function (f) {\n      return f.size > maxSize;\n    }) ? {\n      maxFileSize: {\n        message: utils.string.t('fileUpload.messages.maxFileSize', {\n          max: utils.string.t('format.number', {\n            value: {\n              number: maxSize,\n              format: {\n                output: 'byte',\n                base: 'decimal',\n                mantissa: 0\n              }\n            }\n          }),\n          filename: rejectedFiles.map(function (f) {\n            return f.name;\n          }).filter(Boolean) // filter out empty array item, in case f.name is falsy or empty ''\n          .join(', ')\n        }),\n        type: 'alert'\n      }\n    } : {\n      maxFileSize: {}\n    };\n  };\n\n  var setWarningForRejectedFile = function setWarningForRejectedFile(rejectedFiles) {\n    var _rejectedFiles$;\n\n    var acceptSplittedExtension = accept === null || accept === void 0 ? void 0 : accept.split(',');\n    var slicedExtensionArray = acceptSplittedExtension === null || acceptSplittedExtension === void 0 ? void 0 : acceptSplittedExtension.map(function (s) {\n      return s === null || s === void 0 ? void 0 : s.slice(1);\n    });\n    return (rejectedFiles === null || rejectedFiles === void 0 ? void 0 : rejectedFiles.length) > 0 && (slicedExtensionArray === null || slicedExtensionArray === void 0 ? void 0 : slicedExtensionArray.indexOf(rejectedFiles === null || rejectedFiles === void 0 ? void 0 : (_rejectedFiles$ = rejectedFiles[0]) === null || _rejectedFiles$ === void 0 ? void 0 : _rejectedFiles$.path.split('.').pop())) === -1 ? {\n      rejectedFormat: {\n        message: utils.string.t('fileUpload.messages.rejectedFileFormat'),\n        type: 'alert'\n      }\n    } : {\n      rejectedFormat: {}\n    };\n  };\n\n  var isEndorsement = utils.processingInstructions.isEndorsement(instruction === null || instruction === void 0 ? void 0 : instruction.processTypeId);\n  var isBordereau = utils.processingInstructions.isBordereau(instruction === null || instruction === void 0 ? void 0 : instruction.processTypeId);\n  var isFeeAndAmendment = utils.processingInstructions.isFeeAndAmendment(instruction === null || instruction === void 0 ? void 0 : instruction.processTypeId);\n  var faBorderProcessType = isBordereau || isFeeAndAmendment;\n  var endorseFaBorderProcessType = isEndorsement || isBordereau || isFeeAndAmendment;\n  var cols = [{\n    id: 'filename',\n    label: utils.string.t('app.filename')\n  }].concat(_toConsumableArray(isEndorsement || isBordereau || isFeeAndAmendment ? [{\n    id: 'documentType',\n    label: utils.string.t('fileUpload.fields.documentType.label')\n  }] : []), [{\n    id: 'actions',\n    empty: true,\n    menu: true\n  }]);\n  useEffect(function () {\n    setWarnings(_objectSpread(_objectSpread(_objectSpread({}, warnings), setWarningTooManyFiles(filesAttached)), setWarningMaxFileSize(rejectedFiles)));\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var documentType = isEndorsement ? constants.PI_ENDORSEMENT_TYPE_DOCUMENT : faBorderProcessType ? constants.PI_FABORDER_TYPE_DOCUMENT : constants.PI_CLOSING_FDO_TYPE_DOCUMENT;\n  var documentTypeField = {\n    name: 'documentType',\n    type: 'autocompletemui',\n    value: (documentTypes === null || documentTypes === void 0 ? void 0 : documentTypes.find(function (type) {\n      return type.documentTypeDescription === documentType.documentTypeDescription && type.sectionKey === documentType.sectionKey && type.sourceID === documentType.sourceID;\n    })) || null,\n    options: documentTypes,\n    optionKey: 'documentTypeID',\n    optionLabel: 'documentTypeDescription',\n    muiComponentProps: {\n      size: 'small',\n      disabled: true,\n      disableClearable: true\n    },\n    callback: function callback(event, data, values) {\n      setFilesAttached((values === null || values === void 0 ? void 0 : values.files) || []);\n    }\n  };\n  var fields = [{\n    type: 'file',\n    name: 'filesUpload',\n    value: null,\n    showUploadPreview: false,\n    showMaxFilesError: false,\n    componentProps: {\n      multiple: multiple,\n      maxFiles: maxFiles,\n      maxSize: maxSize,\n      accept: accept\n    }\n  }];\n  var actions = [{\n    name: 'cancel',\n    label: utils.string.t('app.cancel'),\n    handler: function handler() {\n      return dispatch(hideModal());\n    }\n  }, {\n    name: 'submit',\n    label: utils.string.t('app.save'),\n    handler: function handler(data) {\n      var files = data.files;\n      var objectType = 'Policy';\n      dispatch(uploadDocumentList({\n        instruction: instruction,\n        documents: documents,\n        riskRef: riskRef,\n        files: files,\n        objectType: objectType\n      }));\n    }\n  }];\n\n  var handleFilesAdded = function handleFilesAdded(filesCurrentlyAttached, rejectedFiles, hasDuplicates) {\n    setWarnings(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, warnings), setWarningDuplicates(hasDuplicates)), setWarningTooManyFiles(filesCurrentlyAttached)), setWarningMaxFileSize(rejectedFiles)), setWarningForRejectedFile(rejectedFiles)));\n    setFilesAttached(filesCurrentlyAttached);\n  };\n\n  var handleFilesRemoved = function handleFilesRemoved(filesCurrentlyAttached) {\n    setWarnings(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, warnings), setWarningDuplicates(false)), setWarningTooManyFiles(filesCurrentlyAttached)), setWarningMaxFileSize(false)), setWarningForRejectedFile(false)));\n    setFilesAttached(filesCurrentlyAttached);\n  };\n\n  var getFileKey = function getFileKey(file) {\n    return \"\".concat(file.name, \"-\").concat(file.size, \"-\").concat(file.lastModified);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AddManageSettingView, {\n    riskRef: riskRef,\n    cols: cols,\n    files: files,\n    fields: fields,\n    actions: actions,\n    warnings: warnings,\n    documentTypeField: documentTypeField,\n    endorseFaBorderProcessType: endorseFaBorderProcessType,\n    handlers: {\n      getFileKey: getFileKey,\n      onFilesAdded: handleFilesAdded,\n      onFilesRemoved: handleFilesRemoved\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddManageSetting, \"nOWeFw4N0uma3Zhz7ryo24YB0gk=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = AddManageSetting;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddManageSetting\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/forms/AddManageSetting/AddManageSetting.js"],"names":["React","useState","useEffect","useDispatch","useSelector","PropTypes","AddManageSettingView","hideModal","uploadDocumentList","selectRefDataNewDocumentTypes","utils","constants","AddManageSetting","propTypes","instruction","object","documents","riskRef","isRequired","files","arrayOf","shape","file","name","string","type","rejectedFiles","array","multiple","bool","maxFiles","number","maxSize","accept","defaultProps","PROCESSING_INSTRUCTION_FILE_UPLOAD_ALLOW_MULTIPLE","PROCESSING_INSTRUCTION_FILE_UPLOAD_MAX_FILES","PROCESSING_INSTRUCTION_FILE_UPLOAD_MAX_FILE_SIZE","PROCESSING_INSTRUCTION_FILE_UPLOAD_ALLOWED_FILE_EXT","dispatch","filesAttached","setFilesAttached","warnings","setWarnings","documentTypes","setWarningDuplicates","hasDuplicates","duplicates","message","t","setWarningTooManyFiles","filesCurrentlyAttached","length","tooManyFiles","max","setWarningMaxFileSize","some","f","size","maxFileSize","value","format","output","base","mantissa","filename","map","filter","Boolean","join","setWarningForRejectedFile","acceptSplittedExtension","split","slicedExtensionArray","s","slice","indexOf","path","pop","rejectedFormat","isEndorsement","processingInstructions","processTypeId","isBordereau","isFeeAndAmendment","faBorderProcessType","endorseFaBorderProcessType","cols","id","label","empty","menu","documentType","PI_ENDORSEMENT_TYPE_DOCUMENT","PI_FABORDER_TYPE_DOCUMENT","PI_CLOSING_FDO_TYPE_DOCUMENT","documentTypeField","find","documentTypeDescription","sectionKey","sourceID","options","optionKey","optionLabel","muiComponentProps","disabled","disableClearable","callback","event","data","values","fields","showUploadPreview","showMaxFilesError","componentProps","actions","handler","objectType","handleFilesAdded","handleFilesRemoved","getFileKey","lastModified","onFilesAdded","onFilesRemoved"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;;AACA,SAASC,oBAAT,QAAqC,yBAArC;AACA,SAASC,SAAT,EAAoBC,kBAApB,EAAwCC,6BAAxC,QAA6E,QAA7E;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,SAAZ,MAA2B,QAA3B;;AAEAC,gBAAgB,CAACC,SAAjB,GAA6B;AAC3BC,EAAAA,WAAW,EAAET,SAAS,CAACU,MADI;AAE3BC,EAAAA,SAAS,EAAEX,SAAS,CAACU,MAFM;AAG3BE,EAAAA,OAAO,EAAEZ,SAAS,CAACU,MAAV,CAAiBG,UAHC;AAI3BC,EAAAA,KAAK,EAAEd,SAAS,CAACe,OAAV,CACLf,SAAS,CAACgB,KAAV,CAAgB;AACdC,IAAAA,IAAI,EAAEjB,SAAS,CAACU,MADF;AAEdQ,IAAAA,IAAI,EAAElB,SAAS,CAACmB,MAFF;AAGdC,IAAAA,IAAI,EAAEpB,SAAS,CAACU;AAHF,GAAhB,CADK,CAJoB;AAW3BW,EAAAA,aAAa,EAAErB,SAAS,CAACsB,KAXE;AAY3BC,EAAAA,QAAQ,EAAEvB,SAAS,CAACwB,IAZO;AAa3BC,EAAAA,QAAQ,EAAEzB,SAAS,CAAC0B,MAbO;AAc3BC,EAAAA,OAAO,EAAE3B,SAAS,CAAC0B,MAdQ;AAe3BE,EAAAA,MAAM,EAAE5B,SAAS,CAACmB;AAfS,CAA7B;AAkBAZ,gBAAgB,CAACsB,YAAjB,GAAgC;AAC9BN,EAAAA,QAAQ,EAAEjB,SAAS,CAACwB,iDADU;AAE9BL,EAAAA,QAAQ,EAAEnB,SAAS,CAACyB,4CAFU;AAG9BJ,EAAAA,OAAO,EAAErB,SAAS,CAAC0B,gDAHW;AAI9BJ,EAAAA,MAAM,EAAEtB,SAAS,CAAC2B;AAJY,CAAhC;AAOA,eAAe,SAAS1B,gBAAT,OAA0H;AAAA;;AAAA,MAA9FE,WAA8F,QAA9FA,WAA8F;AAAA,MAAjFE,SAAiF,QAAjFA,SAAiF;AAAA,MAAtEC,OAAsE,QAAtEA,OAAsE;AAAA,MAA7DE,KAA6D,QAA7DA,KAA6D;AAAA,MAAtDO,aAAsD,QAAtDA,aAAsD;AAAA,MAAvCE,QAAuC,QAAvCA,QAAuC;AAAA,MAA7BE,QAA6B,QAA7BA,QAA6B;AAAA,MAAnBE,OAAmB,QAAnBA,OAAmB;AAAA,MAAVC,MAAU,QAAVA,MAAU;AACvI,MAAMM,QAAQ,GAAGpC,WAAW,EAA5B;;AADuI,kBAE7FF,QAAQ,CAACkB,KAAD,CAFqF;AAAA;AAAA,MAEhIqB,aAFgI;AAAA,MAEjHC,gBAFiH;;AAAA,mBAGvGxC,QAAQ,CAAC,EAAD,CAH+F;AAAA;AAAA,MAGhIyC,QAHgI;AAAA,MAGtHC,WAHsH;;AAIvI,MAAMC,aAAa,GAAGxC,WAAW,CAACK,6BAAD,CAAjC;;AAEA,MAAMoC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,aAAD,EAAmB;AAC9C,WAAOA,aAAa,GAChB;AAAEC,MAAAA,UAAU,EAAE;AAAEC,QAAAA,OAAO,EAAEtC,KAAK,CAACc,MAAN,CAAayB,CAAb,CAAe,gCAAf,CAAX;AAA6DxB,QAAAA,IAAI,EAAE;AAAnE;AAAd,KADgB,GAEhB;AAAEsB,MAAAA,UAAU,EAAE;AAAd,KAFJ;AAGD,GAJD;;AAMA,MAAMG,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,sBAAD,EAA4B;AACzD,WAAOA,sBAAsB,IAAIA,sBAAsB,CAACC,MAAvB,GAAgCtB,QAA1D,GACH;AAAEuB,MAAAA,YAAY,EAAE;AAAEL,QAAAA,OAAO,EAAEtC,KAAK,CAACc,MAAN,CAAayB,CAAb,CAAe,kCAAf,EAAmD;AAAEK,UAAAA,GAAG,EAAExB;AAAP,SAAnD,CAAX;AAAkFL,QAAAA,IAAI,EAAE;AAAxF;AAAhB,KADG,GAEH;AAAE4B,MAAAA,YAAY,EAAE;AAAhB,KAFJ;AAGD,GAJD;;AAMA,MAAME,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAC7B,aAAD,EAAmB;AAC/C,WAAOA,aAAa,IAAIA,aAAa,CAAC0B,MAAd,GAAuB,CAAxC,IAA6C1B,aAAa,CAAC8B,IAAd,CAAmB,UAACC,CAAD;AAAA,aAAOA,CAAC,CAACC,IAAF,GAAS1B,OAAhB;AAAA,KAAnB,CAA7C,GACH;AACE2B,MAAAA,WAAW,EAAE;AACXX,QAAAA,OAAO,EAAEtC,KAAK,CAACc,MAAN,CAAayB,CAAb,CAAe,iCAAf,EAAkD;AACzDK,UAAAA,GAAG,EAAE5C,KAAK,CAACc,MAAN,CAAayB,CAAb,CAAe,eAAf,EAAgC;AACnCW,YAAAA,KAAK,EAAE;AAAE7B,cAAAA,MAAM,EAAEC,OAAV;AAAmB6B,cAAAA,MAAM,EAAE;AAAEC,gBAAAA,MAAM,EAAE,MAAV;AAAkBC,gBAAAA,IAAI,EAAE,SAAxB;AAAmCC,gBAAAA,QAAQ,EAAE;AAA7C;AAA3B;AAD4B,WAAhC,CADoD;AAIzDC,UAAAA,QAAQ,EAAEvC,aAAa,CACpBwC,GADO,CACH,UAACT,CAAD;AAAA,mBAAOA,CAAC,CAAClC,IAAT;AAAA,WADG,EAEP4C,MAFO,CAEAC,OAFA,EAES;AAFT,WAGPC,IAHO,CAGF,IAHE;AAJ+C,SAAlD,CADE;AAUX5C,QAAAA,IAAI,EAAE;AAVK;AADf,KADG,GAeH;AAAEkC,MAAAA,WAAW,EAAE;AAAf,KAfJ;AAgBD,GAjBD;;AAmBA,MAAMW,yBAAyB,GAAG,SAA5BA,yBAA4B,CAAC5C,aAAD,EAAmB;AAAA;;AACnD,QAAM6C,uBAAuB,GAAGtC,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAEuC,KAAR,CAAc,GAAd,CAAhC;AACA,QAAMC,oBAAoB,GAAGF,uBAAH,aAAGA,uBAAH,uBAAGA,uBAAuB,CAAEL,GAAzB,CAA6B,UAACQ,CAAD;AAAA,aAAOA,CAAP,aAAOA,CAAP,uBAAOA,CAAC,CAAEC,KAAH,CAAS,CAAT,CAAP;AAAA,KAA7B,CAA7B;AACA,WAAO,CAAAjD,aAAa,SAAb,IAAAA,aAAa,WAAb,YAAAA,aAAa,CAAE0B,MAAf,IAAwB,CAAxB,IAA6B,CAAAqB,oBAAoB,SAApB,IAAAA,oBAAoB,WAApB,YAAAA,oBAAoB,CAAEG,OAAtB,CAA8BlD,aAA9B,aAA8BA,aAA9B,0CAA8BA,aAAa,CAAG,CAAH,CAA3C,oDAA8B,gBAAoBmD,IAApB,CAAyBL,KAAzB,CAA+B,GAA/B,EAAoCM,GAApC,EAA9B,OAA6E,CAAC,CAA3G,GACH;AAAEC,MAAAA,cAAc,EAAE;AAAE/B,QAAAA,OAAO,EAAEtC,KAAK,CAACc,MAAN,CAAayB,CAAb,CAAe,wCAAf,CAAX;AAAqExB,QAAAA,IAAI,EAAE;AAA3E;AAAlB,KADG,GAEH;AAAEsD,MAAAA,cAAc,EAAE;AAAlB,KAFJ;AAGD,GAND;;AAQA,MAAMC,aAAa,GAAGtE,KAAK,CAACuE,sBAAN,CAA6BD,aAA7B,CAA2ClE,WAA3C,aAA2CA,WAA3C,uBAA2CA,WAAW,CAAEoE,aAAxD,CAAtB;AACA,MAAMC,WAAW,GAAGzE,KAAK,CAACuE,sBAAN,CAA6BE,WAA7B,CAAyCrE,WAAzC,aAAyCA,WAAzC,uBAAyCA,WAAW,CAAEoE,aAAtD,CAApB;AACA,MAAME,iBAAiB,GAAG1E,KAAK,CAACuE,sBAAN,CAA6BG,iBAA7B,CAA+CtE,WAA/C,aAA+CA,WAA/C,uBAA+CA,WAAW,CAAEoE,aAA5D,CAA1B;AACA,MAAMG,mBAAmB,GAAGF,WAAW,IAAIC,iBAA3C;AACA,MAAME,0BAA0B,GAAGN,aAAa,IAAIG,WAAjB,IAAgCC,iBAAnE;AAEA,MAAMG,IAAI,IACR;AAAEC,IAAAA,EAAE,EAAE,UAAN;AAAkBC,IAAAA,KAAK,EAAE/E,KAAK,CAACc,MAAN,CAAayB,CAAb,CAAe,cAAf;AAAzB,GADQ,4BAEJ+B,aAAa,IAAIG,WAAjB,IAAgCC,iBAAhC,GACA,CACE;AACEI,IAAAA,EAAE,EAAE,cADN;AAEEC,IAAAA,KAAK,EAAE/E,KAAK,CAACc,MAAN,CAAayB,CAAb,CAAe,sCAAf;AAFT,GADF,CADA,GAOA,EATI,IAUR;AAAEuC,IAAAA,EAAE,EAAE,SAAN;AAAiBE,IAAAA,KAAK,EAAE,IAAxB;AAA8BC,IAAAA,IAAI,EAAE;AAApC,GAVQ,EAAV;AAaAzF,EAAAA,SAAS,CAAC,YAAM;AACdyC,IAAAA,WAAW,+CACND,QADM,GAENQ,sBAAsB,CAACV,aAAD,CAFhB,GAGNe,qBAAqB,CAAC7B,aAAD,CAHf,EAAX;AAKD,GANQ,EAMN,EANM,CAAT,CAhEuI,CAsE/H;;AAER,MAAMkE,YAAY,GAAGZ,aAAa,GAC9BrE,SAAS,CAACkF,4BADoB,GAE9BR,mBAAmB,GACnB1E,SAAS,CAACmF,yBADS,GAEnBnF,SAAS,CAACoF,4BAJd;AAMA,MAAMC,iBAAiB,GAAG;AACxBzE,IAAAA,IAAI,EAAE,cADkB;AAExBE,IAAAA,IAAI,EAAE,iBAFkB;AAGxBmC,IAAAA,KAAK,EACH,CAAAhB,aAAa,SAAb,IAAAA,aAAa,WAAb,YAAAA,aAAa,CAAEqD,IAAf,CACE,UAACxE,IAAD;AAAA,aACEA,IAAI,CAACyE,uBAAL,KAAiCN,YAAY,CAACM,uBAA9C,IACAzE,IAAI,CAAC0E,UAAL,KAAoBP,YAAY,CAACO,UADjC,IAEA1E,IAAI,CAAC2E,QAAL,KAAkBR,YAAY,CAACQ,QAHjC;AAAA,KADF,MAKK,IATiB;AAUxBC,IAAAA,OAAO,EAAEzD,aAVe;AAWxB0D,IAAAA,SAAS,EAAE,gBAXa;AAYxBC,IAAAA,WAAW,EAAE,yBAZW;AAaxBC,IAAAA,iBAAiB,EAAE;AACjB9C,MAAAA,IAAI,EAAE,OADW;AAEjB+C,MAAAA,QAAQ,EAAE,IAFO;AAGjBC,MAAAA,gBAAgB,EAAE;AAHD,KAbK;AAkBxBC,IAAAA,QAAQ,EAAE,kBAACC,KAAD,EAAQC,IAAR,EAAcC,MAAd,EAAyB;AACjCrE,MAAAA,gBAAgB,CAAC,CAAAqE,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAE3F,KAAR,KAAiB,EAAlB,CAAhB;AACD;AApBuB,GAA1B;AAuBA,MAAM4F,MAAM,GAAG,CACb;AACEtF,IAAAA,IAAI,EAAE,MADR;AAEEF,IAAAA,IAAI,EAAE,aAFR;AAGEqC,IAAAA,KAAK,EAAE,IAHT;AAIEoD,IAAAA,iBAAiB,EAAE,KAJrB;AAKEC,IAAAA,iBAAiB,EAAE,KALrB;AAMEC,IAAAA,cAAc,EAAE;AACdtF,MAAAA,QAAQ,EAARA,QADc;AAEdE,MAAAA,QAAQ,EAARA,QAFc;AAGdE,MAAAA,OAAO,EAAPA,OAHc;AAIdC,MAAAA,MAAM,EAANA;AAJc;AANlB,GADa,CAAf;AAgBA,MAAMkF,OAAO,GAAG,CACd;AACE5F,IAAAA,IAAI,EAAE,QADR;AAEEkE,IAAAA,KAAK,EAAE/E,KAAK,CAACc,MAAN,CAAayB,CAAb,CAAe,YAAf,CAFT;AAGEmE,IAAAA,OAAO,EAAE;AAAA,aAAM7E,QAAQ,CAAChC,SAAS,EAAV,CAAd;AAAA;AAHX,GADc,EAMd;AACEgB,IAAAA,IAAI,EAAE,QADR;AAEEkE,IAAAA,KAAK,EAAE/E,KAAK,CAACc,MAAN,CAAayB,CAAb,CAAe,UAAf,CAFT;AAGEmE,IAAAA,OAAO,EAAE,iBAACP,IAAD,EAAU;AACjB,UAAM1F,KAAK,GAAG0F,IAAI,CAAC1F,KAAnB;AACA,UAAMkG,UAAU,GAAG,QAAnB;AAEA9E,MAAAA,QAAQ,CAAC/B,kBAAkB,CAAC;AAAEM,QAAAA,WAAW,EAAXA,WAAF;AAAeE,QAAAA,SAAS,EAATA,SAAf;AAA0BC,QAAAA,OAAO,EAAPA,OAA1B;AAAmCE,QAAAA,KAAK,EAALA,KAAnC;AAA0CkG,QAAAA,UAAU,EAAVA;AAA1C,OAAD,CAAnB,CAAR;AACD;AARH,GANc,CAAhB;;AAkBA,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACnE,sBAAD,EAAyBzB,aAAzB,EAAwCoB,aAAxC,EAA0D;AACjFH,IAAAA,WAAW,2EACND,QADM,GAENG,oBAAoB,CAACC,aAAD,CAFd,GAGNI,sBAAsB,CAACC,sBAAD,CAHhB,GAINI,qBAAqB,CAAC7B,aAAD,CAJf,GAKN4C,yBAAyB,CAAC5C,aAAD,CALnB,EAAX;AAQAe,IAAAA,gBAAgB,CAACU,sBAAD,CAAhB;AACD,GAVD;;AAYA,MAAMoE,kBAAkB,GAAG,SAArBA,kBAAqB,CAACpE,sBAAD,EAA4B;AACrDR,IAAAA,WAAW,2EACND,QADM,GAENG,oBAAoB,CAAC,KAAD,CAFd,GAGNK,sBAAsB,CAACC,sBAAD,CAHhB,GAINI,qBAAqB,CAAC,KAAD,CAJf,GAKNe,yBAAyB,CAAC,KAAD,CALnB,EAAX;AAQA7B,IAAAA,gBAAgB,CAACU,sBAAD,CAAhB;AACD,GAVD;;AAYA,MAAMqE,UAAU,GAAG,SAAbA,UAAa,CAAClG,IAAD,EAAU;AAC3B,qBAAUA,IAAI,CAACC,IAAf,cAAuBD,IAAI,CAACoC,IAA5B,cAAoCpC,IAAI,CAACmG,YAAzC;AACD,GAFD;;AAIA,sBACE,QAAC,oBAAD;AACE,IAAA,OAAO,EAAExG,OADX;AAEE,IAAA,IAAI,EAAEsE,IAFR;AAGE,IAAA,KAAK,EAAEpE,KAHT;AAIE,IAAA,MAAM,EAAE4F,MAJV;AAKE,IAAA,OAAO,EAAEI,OALX;AAME,IAAA,QAAQ,EAAEzE,QANZ;AAOE,IAAA,iBAAiB,EAAEsD,iBAPrB;AAQE,IAAA,0BAA0B,EAAEV,0BAR9B;AASE,IAAA,QAAQ,EAAE;AACRkC,MAAAA,UAAU,EAAVA,UADQ;AAERE,MAAAA,YAAY,EAAEJ,gBAFN;AAGRK,MAAAA,cAAc,EAAEJ;AAHR;AATZ;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD;;GApLuB3G,gB;UACLT,W,EAGKC,W;;;KAJAQ,gB","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\n// app\r\nimport { AddManageSettingView } from './AddManageSetting.view';\r\nimport { hideModal, uploadDocumentList, selectRefDataNewDocumentTypes } from 'stores';\r\nimport * as utils from 'utils';\r\nimport * as constants from 'consts';\r\n\r\nAddManageSetting.propTypes = {\r\n  instruction: PropTypes.object,\r\n  documents: PropTypes.object,\r\n  riskRef: PropTypes.object.isRequired,\r\n  files: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      file: PropTypes.object,\r\n      name: PropTypes.string,\r\n      type: PropTypes.object,\r\n    })\r\n  ),\r\n  rejectedFiles: PropTypes.array,\r\n  multiple: PropTypes.bool,\r\n  maxFiles: PropTypes.number,\r\n  maxSize: PropTypes.number,\r\n  accept: PropTypes.string,\r\n};\r\n\r\nAddManageSetting.defaultProps = {\r\n  multiple: constants.PROCESSING_INSTRUCTION_FILE_UPLOAD_ALLOW_MULTIPLE,\r\n  maxFiles: constants.PROCESSING_INSTRUCTION_FILE_UPLOAD_MAX_FILES,\r\n  maxSize: constants.PROCESSING_INSTRUCTION_FILE_UPLOAD_MAX_FILE_SIZE,\r\n  accept: constants.PROCESSING_INSTRUCTION_FILE_UPLOAD_ALLOWED_FILE_EXT,\r\n};\r\n\r\nexport default function AddManageSetting({ instruction, documents, riskRef, files, rejectedFiles, multiple, maxFiles, maxSize, accept }) {\r\n  const dispatch = useDispatch();\r\n  const [filesAttached, setFilesAttached] = useState(files);\r\n  const [warnings, setWarnings] = useState({});\r\n  const documentTypes = useSelector(selectRefDataNewDocumentTypes);\r\n\r\n  const setWarningDuplicates = (hasDuplicates) => {\r\n    return hasDuplicates\r\n      ? { duplicates: { message: utils.string.t('fileUpload.messages.duplicates'), type: 'alert' } }\r\n      : { duplicates: {} };\r\n  };\r\n\r\n  const setWarningTooManyFiles = (filesCurrentlyAttached) => {\r\n    return filesCurrentlyAttached && filesCurrentlyAttached.length > maxFiles\r\n      ? { tooManyFiles: { message: utils.string.t('fileUpload.messages.tooManyFiles', { max: maxFiles }), type: 'error' } }\r\n      : { tooManyFiles: {} };\r\n  };\r\n\r\n  const setWarningMaxFileSize = (rejectedFiles) => {\r\n    return rejectedFiles && rejectedFiles.length > 0 && rejectedFiles.some((f) => f.size > maxSize)\r\n      ? {\r\n          maxFileSize: {\r\n            message: utils.string.t('fileUpload.messages.maxFileSize', {\r\n              max: utils.string.t('format.number', {\r\n                value: { number: maxSize, format: { output: 'byte', base: 'decimal', mantissa: 0 } },\r\n              }),\r\n              filename: rejectedFiles\r\n                .map((f) => f.name)\r\n                .filter(Boolean) // filter out empty array item, in case f.name is falsy or empty ''\r\n                .join(', '),\r\n            }),\r\n            type: 'alert',\r\n          },\r\n        }\r\n      : { maxFileSize: {} };\r\n  };\r\n\r\n  const setWarningForRejectedFile = (rejectedFiles) => {\r\n    const acceptSplittedExtension = accept?.split(',');\r\n    const slicedExtensionArray = acceptSplittedExtension?.map((s) => s?.slice(1));\r\n    return rejectedFiles?.length > 0 && slicedExtensionArray?.indexOf(rejectedFiles?.[0]?.path.split('.').pop()) === -1\r\n      ? { rejectedFormat: { message: utils.string.t('fileUpload.messages.rejectedFileFormat'), type: 'alert' } }\r\n      : { rejectedFormat: {} };\r\n  };\r\n\r\n  const isEndorsement = utils.processingInstructions.isEndorsement(instruction?.processTypeId);\r\n  const isBordereau = utils.processingInstructions.isBordereau(instruction?.processTypeId);\r\n  const isFeeAndAmendment = utils.processingInstructions.isFeeAndAmendment(instruction?.processTypeId);\r\n  const faBorderProcessType = isBordereau || isFeeAndAmendment;\r\n  const endorseFaBorderProcessType = isEndorsement || isBordereau || isFeeAndAmendment;\r\n\r\n  const cols = [\r\n    { id: 'filename', label: utils.string.t('app.filename') },\r\n    ...(isEndorsement || isBordereau || isFeeAndAmendment\r\n      ? [\r\n          {\r\n            id: 'documentType',\r\n            label: utils.string.t('fileUpload.fields.documentType.label'),\r\n          },\r\n        ]\r\n      : []),\r\n    { id: 'actions', empty: true, menu: true },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    setWarnings({\r\n      ...warnings,\r\n      ...setWarningTooManyFiles(filesAttached),\r\n      ...setWarningMaxFileSize(rejectedFiles),\r\n    });\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const documentType = isEndorsement\r\n    ? constants.PI_ENDORSEMENT_TYPE_DOCUMENT\r\n    : faBorderProcessType\r\n    ? constants.PI_FABORDER_TYPE_DOCUMENT\r\n    : constants.PI_CLOSING_FDO_TYPE_DOCUMENT;\r\n\r\n  const documentTypeField = {\r\n    name: 'documentType',\r\n    type: 'autocompletemui',\r\n    value:\r\n      documentTypes?.find(\r\n        (type) =>\r\n          type.documentTypeDescription === documentType.documentTypeDescription &&\r\n          type.sectionKey === documentType.sectionKey &&\r\n          type.sourceID === documentType.sourceID\r\n      ) || null,\r\n    options: documentTypes,\r\n    optionKey: 'documentTypeID',\r\n    optionLabel: 'documentTypeDescription',\r\n    muiComponentProps: {\r\n      size: 'small',\r\n      disabled: true,\r\n      disableClearable: true,\r\n    },\r\n    callback: (event, data, values) => {\r\n      setFilesAttached(values?.files || []);\r\n    },\r\n  };\r\n\r\n  const fields = [\r\n    {\r\n      type: 'file',\r\n      name: 'filesUpload',\r\n      value: null,\r\n      showUploadPreview: false,\r\n      showMaxFilesError: false,\r\n      componentProps: {\r\n        multiple,\r\n        maxFiles,\r\n        maxSize,\r\n        accept,\r\n      },\r\n    },\r\n  ];\r\n\r\n  const actions = [\r\n    {\r\n      name: 'cancel',\r\n      label: utils.string.t('app.cancel'),\r\n      handler: () => dispatch(hideModal()),\r\n    },\r\n    {\r\n      name: 'submit',\r\n      label: utils.string.t('app.save'),\r\n      handler: (data) => {\r\n        const files = data.files;\r\n        const objectType = 'Policy';\r\n\r\n        dispatch(uploadDocumentList({ instruction, documents, riskRef, files, objectType }));\r\n      },\r\n    },\r\n  ];\r\n\r\n  const handleFilesAdded = (filesCurrentlyAttached, rejectedFiles, hasDuplicates) => {\r\n    setWarnings({\r\n      ...warnings,\r\n      ...setWarningDuplicates(hasDuplicates),\r\n      ...setWarningTooManyFiles(filesCurrentlyAttached),\r\n      ...setWarningMaxFileSize(rejectedFiles),\r\n      ...setWarningForRejectedFile(rejectedFiles),\r\n    });\r\n\r\n    setFilesAttached(filesCurrentlyAttached);\r\n  };\r\n\r\n  const handleFilesRemoved = (filesCurrentlyAttached) => {\r\n    setWarnings({\r\n      ...warnings,\r\n      ...setWarningDuplicates(false),\r\n      ...setWarningTooManyFiles(filesCurrentlyAttached),\r\n      ...setWarningMaxFileSize(false),\r\n      ...setWarningForRejectedFile(false),\r\n    });\r\n\r\n    setFilesAttached(filesCurrentlyAttached);\r\n  };\r\n\r\n  const getFileKey = (file) => {\r\n    return `${file.name}-${file.size}-${file.lastModified}`;\r\n  };\r\n\r\n  return (\r\n    <AddManageSettingView\r\n      riskRef={riskRef}\r\n      cols={cols}\r\n      files={files}\r\n      fields={fields}\r\n      actions={actions}\r\n      warnings={warnings}\r\n      documentTypeField={documentTypeField}\r\n      endorseFaBorderProcessType={endorseFaBorderProcessType}\r\n      handlers={{\r\n        getFileKey,\r\n        onFilesAdded: handleFilesAdded,\r\n        onFilesRemoved: handleFilesRemoved,\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}