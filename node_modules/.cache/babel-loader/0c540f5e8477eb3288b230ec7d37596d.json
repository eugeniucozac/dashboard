{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { addLoader, authLogout, enqueueNotification, getRiskDetails, getRiskQuotes, hideModal, removeLoader } from 'stores';\nimport * as utils from 'utils';\nimport isEmpty from 'lodash/isEmpty';\nexport var postRiskQuote = function postRiskQuote(formData) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/risk.actions.postQuote',\n      message: 'Data missing for POST request'\n    };\n    dispatch(postQuoteRequest(formData));\n    dispatch(addLoader('postQuote'));\n\n    if (!formData || !formData.facility || isEmpty(formData)) {\n      dispatch(postQuoteFailure(defaultError));\n      dispatch(enqueueNotification('notification.generic.request', 'error'));\n      dispatch(hideModal());\n      dispatch(removeLoader('postQuote'));\n      return;\n    }\n\n    var _formData$facility = formData.facility,\n        facility = _formData$facility === void 0 ? '{}' : _formData$facility,\n        data = _objectWithoutProperties(formData, [\"facility\"]);\n\n    var body = _objectSpread(_objectSpread({}, data), JSON.parse(facility));\n\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.auth,\n      path: 'api/v1/quotes',\n      data: body\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleResponseJsonObject(json);\n    }).then(function (data) {\n      dispatch(postQuoteSuccess(data));\n      return data;\n    }).then(function (data) {\n      dispatch(getRiskDetails(data.riskId));\n      return data.riskId;\n    }).then(function (riskId) {\n      return dispatch(getRiskQuotes(riskId));\n    }).then(function () {\n      dispatch(enqueueNotification('notification.postRiskQuote.success', 'success'));\n    }).catch(function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API post error (risk.postQuote)'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(postQuoteFailure(err));\n      dispatch(enqueueNotification(utils.api.getErrorMessage(err), 'error'));\n      return err;\n    }).finally(function () {\n      dispatch(hideModal());\n      dispatch(removeLoader('postQuote'));\n      return;\n    });\n  };\n};\nexport var postQuoteRequest = function postQuoteRequest(formData) {\n  return {\n    type: 'RISK_POST_QUOTE_REQUEST',\n    payload: formData\n  };\n};\nexport var postQuoteSuccess = function postQuoteSuccess(responseData) {\n  return {\n    type: 'RISK_POST_QUOTE_SUCCESS',\n    payload: responseData\n  };\n};\nexport var postQuoteFailure = function postQuoteFailure(error) {\n  return {\n    type: 'RISK_POST_QUOTE_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/risk/risk.actions.postQuote.js"],"names":["addLoader","authLogout","enqueueNotification","getRiskDetails","getRiskQuotes","hideModal","removeLoader","utils","isEmpty","postRiskQuote","formData","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","message","postQuoteRequest","facility","postQuoteFailure","data","body","JSON","parse","api","post","token","accessToken","path","then","response","handleResponse","json","handleResponseJsonObject","postQuoteSuccess","riskId","catch","err","errorParams","handleError","handleUnauthorized","getErrorMessage","finally","type","payload","responseData","error"],"mappings":"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","sourcesContent":["import { addLoader, authLogout, enqueueNotification, getRiskDetails, getRiskQuotes, hideModal, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\nimport isEmpty from 'lodash/isEmpty';\r\n\r\nexport const postRiskQuote = (formData) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/risk.actions.postQuote',\r\n    message: 'Data missing for POST request',\r\n  };\r\n\r\n  dispatch(postQuoteRequest(formData));\r\n  dispatch(addLoader('postQuote'));\r\n\r\n  if (!formData || !formData.facility || isEmpty(formData)) {\r\n    dispatch(postQuoteFailure(defaultError));\r\n    dispatch(enqueueNotification('notification.generic.request', 'error'));\r\n    dispatch(hideModal());\r\n    dispatch(removeLoader('postQuote'));\r\n    return;\r\n  }\r\n\r\n  const { facility = '{}', ...data } = formData;\r\n\r\n  const body = {\r\n    ...data,\r\n    ...JSON.parse(facility),\r\n  };\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.auth,\r\n      path: 'api/v1/quotes',\r\n      data: body,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleResponseJsonObject(json))\r\n    .then((data) => {\r\n      dispatch(postQuoteSuccess(data));\r\n      return data;\r\n    })\r\n    .then((data) => {\r\n      dispatch(getRiskDetails(data.riskId));\r\n      return data.riskId;\r\n    })\r\n    .then((riskId) => {\r\n      return dispatch(getRiskQuotes(riskId));\r\n    })\r\n    .then(() => {\r\n      dispatch(enqueueNotification('notification.postRiskQuote.success', 'success'));\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        ...defaultError,\r\n        message: 'API post error (risk.postQuote)',\r\n      };\r\n\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(postQuoteFailure(err));\r\n      dispatch(enqueueNotification(utils.api.getErrorMessage(err), 'error'));\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(hideModal());\r\n      dispatch(removeLoader('postQuote'));\r\n      return;\r\n    });\r\n};\r\n\r\nexport const postQuoteRequest = (formData) => {\r\n  return {\r\n    type: 'RISK_POST_QUOTE_REQUEST',\r\n    payload: formData,\r\n  };\r\n};\r\n\r\nexport const postQuoteSuccess = (responseData) => {\r\n  return {\r\n    type: 'RISK_POST_QUOTE_SUCCESS',\r\n    payload: responseData,\r\n  };\r\n};\r\n\r\nexport const postQuoteFailure = (error) => {\r\n  return {\r\n    type: 'RISK_POST_QUOTE_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}