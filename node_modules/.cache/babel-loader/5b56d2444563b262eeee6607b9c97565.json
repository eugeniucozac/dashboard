{"ast":null,"code":"import _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\pages\\\\ClaimsComplexityRules\\\\ClaimsComplexityRules.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet'; // app\n\nimport { ClaimsComplexityRulesView } from './ClaimsComplexityRules.view';\nimport { setComplexityManagementTab, showModal } from 'stores';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ClaimsComplexityRules() {\n  _s();\n\n  var dispatch = useDispatch();\n  var brand = useSelector(function (state) {\n    return state.ui.brand;\n  });\n\n  var _useState = useState('contractPolicyRef'),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedTab = _useState2[0],\n      setSelectedTab = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isSelectedTabDirty = _useState4[0],\n      setIsSelectedTabDirty = _useState4[1];\n\n  var handleSelectTab = function handleSelectTab(tabName) {\n    if (tabName !== selectedTab) {\n      dispatch(setComplexityManagementTab(tabName));\n\n      if (isSelectedTabDirty) {\n        dispatch(showModal({\n          component: 'CONFIRM',\n          props: {\n            fullWidth: true,\n            title: utils.string.t('claims.complexityRulesManagementDetails.alertModal.title'),\n            maxWidth: 'xs',\n            componentProps: {\n              confirmLabel: utils.string.t('app.yes'),\n              cancelLabel: utils.string.t('app.no'),\n              confirmMessage: utils.string.t('claims.complexityRulesManagementDetails.alertModal.subTitle'),\n              buttonColors: {\n                confirm: 'secondary',\n                cancel: 'primary'\n              },\n              submitHandler: function submitHandler() {\n                setSelectedTab(tabName);\n                dispatch(setComplexityManagementTab(tabName));\n                setIsSelectedTabDirty(false);\n              },\n              cancelHandler: function cancelHandler() {},\n              handleClose: function handleClose() {}\n            }\n          }\n        }));\n      } else {\n        setSelectedTab(tabName);\n      }\n    }\n  };\n\n  var tabs = [{\n    value: 'contractPolicyRef',\n    label: utils.string.t('claims.complexityRulesManagementDetails.contractPolicyRef')\n  }, {\n    value: 'insured',\n    label: utils.string.t('claims.complexityRulesManagementDetails.insured')\n  }, {\n    value: 'division',\n    label: utils.string.t('claims.complexityRulesManagementDetails.division')\n  }, {\n    value: 'complexityValues',\n    label: utils.string.t('claims.complexityRulesManagementDetails.complexityValues')\n  }, {\n    value: 'referralValues',\n    label: utils.string.t('claims.complexityRulesManagementDetails.referralValues')\n  }];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"\".concat(utils.string.t('claims.actions.complexityRulesManagement'), \" - \").concat(utils.app.getAppName(brand))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ClaimsComplexityRulesView, {\n      tabs: tabs,\n      selectedTab: selectedTab,\n      handleSelectTab: handleSelectTab,\n      setIsSelectedTabDirty: setIsSelectedTabDirty\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ClaimsComplexityRules, \"PMOgr8dHnL4RIj5pGyDp7lKVC6g=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = ClaimsComplexityRules;\nClaimsComplexityRules.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"ClaimsComplexityRules\"\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\pages\\\\ClaimsComplexityRules\\\\ClaimsComplexityRules.js\"] = {\n    name: \"ClaimsComplexityRules\",\n    docgenInfo: ClaimsComplexityRules.__docgenInfo,\n    path: \"src\\\\pages\\\\ClaimsComplexityRules\\\\ClaimsComplexityRules.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimsComplexityRules\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/pages/ClaimsComplexityRules/ClaimsComplexityRules.js"],"names":["React","useState","useDispatch","useSelector","Helmet","ClaimsComplexityRulesView","setComplexityManagementTab","showModal","utils","ClaimsComplexityRules","dispatch","brand","state","ui","selectedTab","setSelectedTab","isSelectedTabDirty","setIsSelectedTabDirty","handleSelectTab","tabName","component","props","fullWidth","title","string","t","maxWidth","componentProps","confirmLabel","cancelLabel","confirmMessage","buttonColors","confirm","cancel","submitHandler","cancelHandler","handleClose","tabs","value","label","app","getAppName"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Helmet } from 'react-helmet';\r\n\r\n// app\r\nimport { ClaimsComplexityRulesView } from './ClaimsComplexityRules.view';\r\nimport { setComplexityManagementTab, showModal } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport default function ClaimsComplexityRules() {\r\n  const dispatch = useDispatch();\r\n  const brand = useSelector((state) => state.ui.brand);\r\n\r\n  const [selectedTab, setSelectedTab] = useState('contractPolicyRef');\r\n\r\n  const [isSelectedTabDirty, setIsSelectedTabDirty] = useState(false);\r\n\r\n  const handleSelectTab = (tabName) => {\r\n    if (tabName !== selectedTab) {\r\n      dispatch(setComplexityManagementTab(tabName));\r\n      if (isSelectedTabDirty) {\r\n        dispatch(\r\n          showModal({\r\n            component: 'CONFIRM',\r\n            props: {\r\n              fullWidth: true,\r\n              title: utils.string.t('claims.complexityRulesManagementDetails.alertModal.title'),\r\n              maxWidth: 'xs',\r\n              componentProps: {\r\n                confirmLabel: utils.string.t('app.yes'),\r\n                cancelLabel: utils.string.t('app.no'),\r\n                confirmMessage: utils.string.t('claims.complexityRulesManagementDetails.alertModal.subTitle'),\r\n                buttonColors: { confirm: 'secondary', cancel: 'primary' },\r\n                submitHandler: () => {\r\n                  setSelectedTab(tabName);\r\n                  dispatch(setComplexityManagementTab(tabName));\r\n                  setIsSelectedTabDirty(false);\r\n                },\r\n                cancelHandler: () => {},\r\n                handleClose: () => {},\r\n              },\r\n            },\r\n          })\r\n        );\r\n      } else {\r\n        setSelectedTab(tabName);\r\n      }\r\n    }\r\n  };\r\n\r\n  const tabs = [\r\n    { value: 'contractPolicyRef', label: utils.string.t('claims.complexityRulesManagementDetails.contractPolicyRef') },\r\n    { value: 'insured', label: utils.string.t('claims.complexityRulesManagementDetails.insured') },\r\n    { value: 'division', label: utils.string.t('claims.complexityRulesManagementDetails.division') },\r\n    { value: 'complexityValues', label: utils.string.t('claims.complexityRulesManagementDetails.complexityValues') },\r\n    { value: 'referralValues', label: utils.string.t('claims.complexityRulesManagementDetails.referralValues') },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>{`${utils.string.t('claims.actions.complexityRulesManagement')} - ${utils.app.getAppName(brand)}`}</title>\r\n      </Helmet>\r\n      <ClaimsComplexityRulesView\r\n        tabs={tabs}\r\n        selectedTab={selectedTab}\r\n        handleSelectTab={handleSelectTab}\r\n        setIsSelectedTabDirty={setIsSelectedTabDirty}\r\n      />\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}