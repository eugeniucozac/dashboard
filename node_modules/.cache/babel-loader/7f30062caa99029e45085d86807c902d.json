{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ClaimsTab\\\\ClaimsTabTableRow.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types'; // app\n\nimport { ClaimsTabTableRowView } from './ClaimsTabTableRow.view';\nimport { showModal, hideModal } from 'stores';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nClaimsTabTableRow.prototype = {\n  claim: PropTypes.object.isRequired,\n  isSelected: PropTypes.bool,\n  columnProps: PropTypes.object.isRequired,\n  handlers: PropTypes.shape({\n    clickClaim: PropTypes.func.isRequired,\n    selectClaim: PropTypes.func.isRequired\n  }).isRequired\n};\nexport function ClaimsTabTableRow(_ref) {\n  _s();\n\n  var claim = _ref.claim,\n      handlers = _ref.handlers,\n      rest = _objectWithoutProperties(_ref, [\"claim\", \"handlers\"]);\n\n  var dispatch = useDispatch();\n  var isFormDirtyRef = useRef(false);\n\n  var setFormDirty = function setFormDirty(isDirty) {\n    isFormDirtyRef.current = isDirty;\n  };\n\n  var confirmHideModal = function confirmHideModal(modalName) {\n    if (isFormDirtyRef.current) {\n      dispatch(showModal({\n        component: 'CONFIRM',\n        props: {\n          title: utils.string.t('navigation.form.subtitle'),\n          hint: utils.string.t('navigation.form.title'),\n          fullWidth: true,\n          maxWidth: 'xs',\n          componentProps: {\n            cancelLabel: utils.string.t('app.no'),\n            confirmLabel: utils.string.t('app.yes'),\n            submitHandler: function submitHandler() {\n              dispatch(hideModal(modalName));\n            }\n          }\n        }\n      }));\n    } else {\n      dispatch(hideModal(modalName));\n    }\n  };\n\n  var handleChangeComplexityPriorityAssignmentClaim = function handleChangeComplexityPriorityAssignmentClaim(claim) {\n    dispatch(showModal({\n      component: 'CHANGE_COMPLEXITY_PRIORITY_ASSIGNMENT',\n      props: {\n        title: 'claims.processing.summary.buttons.changeComplexityPriorityAssignment',\n        fullWidth: true,\n        maxWidth: 'sm',\n        hideCompOnBlur: false,\n        componentProps: {\n          claimsProcessingSelected: [claim],\n          fetchClaimDetails: true,\n          setIsDirty: setFormDirty,\n          clickXHandler: function clickXHandler() {\n            confirmHideModal('CHANGE_COMPLEXITY_PRIORITY_ASSIGNMENT');\n          },\n          cancelHandler: function cancelHandler() {\n            confirmHideModal('CHANGE_COMPLEXITY_PRIORITY_ASSIGNMENT');\n          }\n        }\n      }\n    }));\n  };\n\n  var rowActions = [{\n    id: 'editClaim',\n    label: utils.string.t('claims.claimsTab.popOverButtonItems.editClaim')\n  }, {\n    id: 'changeItems',\n    label: utils.string.t('claims.claimsTab.popOverButtonItems.changeItems'),\n    callback: function callback() {\n      return handleChangeComplexityPriorityAssignmentClaim(claim);\n    }\n  }, {\n    id: 'createRFI',\n    label: utils.string.t('claims.claimsTab.popOverButtonItems.createRFI')\n  }, {\n    id: 'createAdhocTask',\n    label: utils.string.t('claims.claimsTab.popOverButtonItems.createAdhocTask')\n  }];\n  return /*#__PURE__*/_jsxDEV(ClaimsTabTableRowView, _objectSpread(_objectSpread({\n    claim: claim,\n    handlers: {\n      selectClaim: handlers.selectClaim,\n      clickClaim: handlers.clickClaim\n    }\n  }, rest), {}, {\n    rowActions: rowActions\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ClaimsTabTableRow, \"vnxzmFdaPbXQ0optrMTELtMU5us=\", false, function () {\n  return [useDispatch];\n});\n\n_c = ClaimsTabTableRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimsTabTableRow\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ClaimsTab/ClaimsTabTableRow.js"],"names":["React","useRef","useDispatch","PropTypes","ClaimsTabTableRowView","showModal","hideModal","utils","ClaimsTabTableRow","prototype","claim","object","isRequired","isSelected","bool","columnProps","handlers","shape","clickClaim","func","selectClaim","rest","dispatch","isFormDirtyRef","setFormDirty","isDirty","current","confirmHideModal","modalName","component","props","title","string","t","hint","fullWidth","maxWidth","componentProps","cancelLabel","confirmLabel","submitHandler","handleChangeComplexityPriorityAssignmentClaim","hideCompOnBlur","claimsProcessingSelected","fetchClaimDetails","setIsDirty","clickXHandler","cancelHandler","rowActions","id","label","callback"],"mappings":"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","sourcesContent":["import React, { useRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\n// app\r\nimport { ClaimsTabTableRowView } from './ClaimsTabTableRow.view';\r\nimport { showModal, hideModal } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nClaimsTabTableRow.prototype = {\r\n  claim: PropTypes.object.isRequired,\r\n  isSelected: PropTypes.bool,\r\n  columnProps: PropTypes.object.isRequired,\r\n  handlers: PropTypes.shape({\r\n    clickClaim: PropTypes.func.isRequired,\r\n    selectClaim: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport function ClaimsTabTableRow({ claim, handlers, ...rest }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const isFormDirtyRef = useRef(false);\r\n\r\n  const setFormDirty = (isDirty) => {\r\n    isFormDirtyRef.current = isDirty;\r\n  };\r\n\r\n  const confirmHideModal = (modalName) => {\r\n    if (isFormDirtyRef.current) {\r\n      dispatch(\r\n        showModal({\r\n          component: 'CONFIRM',\r\n          props: {\r\n            title: utils.string.t('navigation.form.subtitle'),\r\n            hint: utils.string.t('navigation.form.title'),\r\n            fullWidth: true,\r\n            maxWidth: 'xs',\r\n            componentProps: {\r\n              cancelLabel: utils.string.t('app.no'),\r\n              confirmLabel: utils.string.t('app.yes'),\r\n              submitHandler: () => {\r\n                dispatch(hideModal(modalName));\r\n              },\r\n            },\r\n          },\r\n        })\r\n      );\r\n    } else {\r\n      dispatch(hideModal(modalName));\r\n    }\r\n  };\r\n\r\n  const handleChangeComplexityPriorityAssignmentClaim = (claim) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CHANGE_COMPLEXITY_PRIORITY_ASSIGNMENT',\r\n        props: {\r\n          title: 'claims.processing.summary.buttons.changeComplexityPriorityAssignment',\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          hideCompOnBlur: false,\r\n          componentProps: {\r\n            claimsProcessingSelected: [claim],\r\n            fetchClaimDetails: true,\r\n            setIsDirty: setFormDirty,\r\n            clickXHandler: () => {\r\n              confirmHideModal('CHANGE_COMPLEXITY_PRIORITY_ASSIGNMENT');\r\n            },\r\n            cancelHandler: () => {\r\n              confirmHideModal('CHANGE_COMPLEXITY_PRIORITY_ASSIGNMENT');\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const rowActions = [\r\n    {\r\n      id: 'editClaim',\r\n      label: utils.string.t('claims.claimsTab.popOverButtonItems.editClaim'),\r\n    },\r\n    {\r\n      id: 'changeItems',\r\n      label: utils.string.t('claims.claimsTab.popOverButtonItems.changeItems'),\r\n      callback: () => handleChangeComplexityPriorityAssignmentClaim(claim),\r\n    },\r\n    {\r\n      id: 'createRFI',\r\n      label: utils.string.t('claims.claimsTab.popOverButtonItems.createRFI'),\r\n    },\r\n    {\r\n      id: 'createAdhocTask',\r\n      label: utils.string.t('claims.claimsTab.popOverButtonItems.createAdhocTask'),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <ClaimsTabTableRowView\r\n      claim={claim}\r\n      handlers={{\r\n        selectClaim: handlers.selectClaim,\r\n        clickClaim: handlers.clickClaim,\r\n      }}\r\n      {...rest}\r\n      rowActions={rowActions}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}