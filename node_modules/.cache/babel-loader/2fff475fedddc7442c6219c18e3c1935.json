{"ast":null,"code":"import _defineProperty from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\components\\\\FormDate\\\\FormDate.view.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Controller } from 'react-hook-form';\nimport classnames from 'classnames';\nimport omit from 'lodash/omit'; // app\n\nimport styles from './FormDate.styles';\nimport { FormText } from 'components';\nimport * as utils from 'utils';\nimport config from 'config'; // mui\n\nimport { makeStyles, Box } from '@material-ui/core';\nimport TodayIcon from '@material-ui/icons/Today';\nimport EventIcon from '@material-ui/icons/Event';\nimport { DatePicker, KeyboardDatePicker } from '@material-ui/pickers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nFormDateView.propTypes = {\n  control: PropTypes.object,\n  name: PropTypes.string.isRequired,\n  type: PropTypes.oneOf(['date', 'datepicker']).isRequired,\n  label: PropTypes.string,\n  hint: PropTypes.string,\n  placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  outputFormat: PropTypes.string,\n  plainText: PropTypes.bool,\n  plainTextIcon: PropTypes.bool,\n  muiComponentProps: PropTypes.object,\n  muiPickerProps: PropTypes.object,\n  handleUpdate: PropTypes.func,\n  nestedClasses: PropTypes.object,\n  error: PropTypes.object,\n  handlers: PropTypes.shape({\n    toggelDatePicker: PropTypes.func\n  })\n};\nFormDateView.defaultProps = {\n  placeholder: true,\n  muiComponentProps: {},\n  muiPickerProps: {},\n  nestedClasses: {}\n};\nexport function FormDateView(_ref) {\n  _s();\n\n  var _this = this;\n\n  var control = _ref.control,\n      label = _ref.label,\n      hint = _ref.hint,\n      error = _ref.error,\n      icon = _ref.icon,\n      placeholder = _ref.placeholder,\n      outputFormat = _ref.outputFormat,\n      plainText = _ref.plainText,\n      plainTextIcon = _ref.plainTextIcon,\n      muiComponentProps = _ref.muiComponentProps,\n      muiPickerProps = _ref.muiPickerProps,\n      nestedClasses = _ref.nestedClasses,\n      type = _ref.type,\n      name = _ref.name,\n      _ref$value = _ref.value,\n      value = _ref$value === void 0 ? null : _ref$value,\n      defaultValue = _ref.defaultValue,\n      handleUpdate = _ref.handleUpdate,\n      handlers = _ref.handlers;\n  var classes = makeStyles(styles, {\n    name: 'FormDate'\n  })();\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isValidDate = _useState2[0],\n      setIsValidDate = _useState2[1];\n\n  var helperTextProps = {\n    error: Boolean(error),\n    helperText: error && error.message || (plainText ? undefined : hint)\n  };\n\n  if (type === 'datepicker') {\n    var _classnames, _classnames2;\n\n    var format = muiPickerProps.format || config.ui.format.date.numeric;\n    var dateValue = value ? utils.string.t('format.date', {\n      value: {\n        date: value,\n        format: format\n      }\n    }) : '';\n    var inputVariant = plainText ? undefined : 'outlined';\n    var pickerVariant = muiPickerProps.variant || 'dialog';\n\n    var pickerProps = _objectSpread(_objectSpread(_objectSpread({}, omit(muiPickerProps, ['clearable', 'showTodayButton'])), pickerVariant === 'dialog' && {\n      clearable: muiPickerProps.clearable\n    }), pickerVariant === 'dialog' && {\n      showTodayButton: muiPickerProps.showTodayButton\n    });\n\n    helperTextProps.error = isValidDate ? Boolean(error) : true;\n    helperTextProps.helperText = isValidDate ? error && error.message || (plainText ? undefined : hint) : (muiComponentProps === null || muiComponentProps === void 0 ? void 0 : muiComponentProps.helperText) || utils.string.t('app.invalidDate');\n\n    var calendarProps = _objectSpread(_objectSpread(_objectSpread(_objectSpread({\n      label: plainText ? undefined : label,\n      emptyLabel: typeof placeholder === 'string' ? placeholder : placeholder ? utils.string.t('app.inputDate') : undefined,\n      autoOk: true,\n      id: name,\n      inputVariant: inputVariant\n    }, muiComponentProps), pickerProps), helperTextProps), {}, {\n      format: format,\n      margin: muiComponentProps.margin || 'normal',\n      inputProps: {\n        'data-form-type': type\n      },\n      InputProps: {\n        'data-value': dateValue,\n        classes: {\n          root: classnames((_classnames = {}, _defineProperty(_classnames, classes.dateInputWrapper, plainText), _defineProperty(_classnames, classes.adornedEnd, !Boolean(plainText)), _defineProperty(_classnames, nestedClasses.root, plainText && Boolean(nestedClasses.root)), _defineProperty(_classnames, nestedClasses.rootDatepicker, !plainText && Boolean(nestedClasses.rootDatepicker)), _classnames)),\n          input: classnames((_classnames2 = {}, _defineProperty(_classnames2, classes.dateInput, plainText), _defineProperty(_classnames2, classes.dateInputDisabled, plainText && (muiComponentProps === null || muiComponentProps === void 0 ? void 0 : muiComponentProps.disabled)), _defineProperty(_classnames2, nestedClasses.input, plainText && Boolean(nestedClasses.input)), _defineProperty(_classnames2, nestedClasses.inputDatepicker, !plainText && Boolean(nestedClasses.inputDatepicker)), _classnames2))\n        }\n      }\n    });\n\n    return /*#__PURE__*/_jsxDEV(Controller, {\n      control: control,\n      defaultValue: defaultValue,\n      render: function render(_ref2) {\n        var _onChange = _ref2.onChange,\n            name = _ref2.name,\n            value = _ref2.value;\n        return plainText ? /*#__PURE__*/_jsxDEV(Box, {\n          display: \"flex\",\n          alignItems: \"end\",\n          className: classnames(_defineProperty({}, nestedClasses.datepicker, Boolean(nestedClasses.datepicker))),\n          children: [/*#__PURE__*/_jsxDEV(DatePicker, _objectSpread({\n            value: value || dateValue || null,\n            onChange: function onChange(value) {\n              var date; // TODO added on 06/03/2020: make ISO the default when all endpoints support this format\n\n              if (outputFormat === 'iso') {\n                date = value === null || value === void 0 ? void 0 : value.toISOString();\n              } else {\n                date = value === null || value === void 0 ? void 0 : value.format('YYYY-MM-DD');\n              }\n\n              if (handlers && utils.generic.isFunction(handlers.toggelDatePicker)) {\n                handlers.toggelDatePicker(name, date);\n              } // if user clears the datepicker, value will be null // in this case, we don't want to show invalid date helper text\n\n\n              if (value === null || (value === null || value === void 0 ? void 0 : value.isValid())) setIsValidDate(true);else setIsValidDate(false);\n\n              _onChange(date);\n            }\n          }, calendarProps), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 15\n          }, _this), plainTextIcon && /*#__PURE__*/_jsxDEV(TodayIcon, {\n            className: classes.dateIcon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 33\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, _this) : /*#__PURE__*/_jsxDEV(KeyboardDatePicker, _objectSpread(_objectSpread({\n          name: name,\n          value: value,\n          onChange: function onChange(value) {\n            var date; // TODO added on 06/03/2020: make ISO the default when all endpoints support this format\n\n            if (outputFormat === 'iso') {\n              date = value === null || value === void 0 ? void 0 : value.toISOString();\n            } else {\n              date = value === null || value === void 0 ? void 0 : value.format('YYYY-MM-DD');\n            }\n\n            if (utils.generic.isFunction(handleUpdate)) {\n              handleUpdate(name, date);\n            }\n\n            if (handlers && utils.generic.isFunction(handlers.toggelDatePicker)) {\n              handlers.toggelDatePicker(name, date);\n            } // if user clears the datepicker, value will be null\n            // in this case, we don't want to show invalid date helper text\n\n\n            if (value === null || (value === null || value === void 0 ? void 0 : value.isValid())) setIsValidDate(true);else setIsValidDate(false);\n\n            _onChange(date || null);\n          }\n        }, calendarProps), {}, {\n          keyboardIcon: icon ? /*#__PURE__*/_jsxDEV(TodayIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 36\n          }, _this) : /*#__PURE__*/_jsxDEV(EventIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 52\n          }, _this)\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, _this);\n      },\n      id: name,\n      name: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(FormText, {\n    control: control,\n    type: \"date\",\n    id: name,\n    name: name,\n    label: label,\n    hint: hint,\n    error: error,\n    muiComponentProps: _objectSpread(_objectSpread({}, muiComponentProps), {}, {\n      InputLabelProps: {\n        shrink: true,\n        classes: {\n          root: classes.label\n        }\n      }\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FormDateView, \"ORwO+PayM+i9FlNaEH+xDnze3/w=\");\n\n_c = FormDateView;\nFormDateView.displayName = \"FormDateView\";\nFormDateView.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"FormDateView\",\n  \"props\": {\n    \"value\": {\n      \"defaultValue\": {\n        \"value\": \"null\",\n        \"computed\": false\n      },\n      \"required\": false\n    },\n    \"placeholder\": {\n      \"defaultValue\": {\n        \"value\": \"true\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"union\",\n        \"value\": [{\n          \"name\": \"string\"\n        }, {\n          \"name\": \"bool\"\n        }]\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"muiComponentProps\": {\n      \"defaultValue\": {\n        \"value\": \"{}\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"muiPickerProps\": {\n      \"defaultValue\": {\n        \"value\": \"{}\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"nestedClasses\": {\n      \"defaultValue\": {\n        \"value\": \"{}\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"control\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"'date'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'datepicker'\",\n          \"computed\": false\n        }]\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"hint\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"outputFormat\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"plainText\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"plainTextIcon\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"handleUpdate\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"handlers\": {\n      \"type\": {\n        \"name\": \"shape\",\n        \"value\": {\n          \"toggelDatePicker\": {\n            \"name\": \"func\",\n            \"required\": false\n          }\n        }\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\components\\\\FormDate\\\\FormDate.view.js\"] = {\n    name: \"FormDateView\",\n    docgenInfo: FormDateView.__docgenInfo,\n    path: \"src\\\\components\\\\FormDate\\\\FormDate.view.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"FormDateView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/FormDate/FormDate.view.js"],"names":["React","useState","PropTypes","Controller","classnames","omit","styles","FormText","utils","config","makeStyles","Box","TodayIcon","EventIcon","DatePicker","KeyboardDatePicker","FormDateView","propTypes","control","object","name","string","isRequired","type","oneOf","label","hint","placeholder","oneOfType","bool","outputFormat","plainText","plainTextIcon","muiComponentProps","muiPickerProps","handleUpdate","func","nestedClasses","error","handlers","shape","toggelDatePicker","defaultProps","icon","value","defaultValue","classes","isValidDate","setIsValidDate","helperTextProps","Boolean","helperText","message","undefined","format","ui","date","numeric","dateValue","t","inputVariant","pickerVariant","variant","pickerProps","clearable","showTodayButton","calendarProps","emptyLabel","autoOk","id","margin","inputProps","InputProps","root","dateInputWrapper","adornedEnd","rootDatepicker","input","dateInput","dateInputDisabled","disabled","inputDatepicker","onChange","datepicker","toISOString","generic","isFunction","isValid","dateIcon","InputLabelProps","shrink"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Controller } from 'react-hook-form';\r\nimport classnames from 'classnames';\r\nimport omit from 'lodash/omit';\r\n\r\n// app\r\nimport styles from './FormDate.styles';\r\nimport { FormText } from 'components';\r\nimport * as utils from 'utils';\r\nimport config from 'config';\r\n\r\n// mui\r\nimport { makeStyles, Box } from '@material-ui/core';\r\nimport TodayIcon from '@material-ui/icons/Today';\r\nimport EventIcon from '@material-ui/icons/Event';\r\nimport { DatePicker, KeyboardDatePicker } from '@material-ui/pickers';\r\n\r\nFormDateView.propTypes = {\r\n  control: PropTypes.object,\r\n  name: PropTypes.string.isRequired,\r\n  type: PropTypes.oneOf(['date', 'datepicker']).isRequired,\r\n  label: PropTypes.string,\r\n  hint: PropTypes.string,\r\n  placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\r\n  outputFormat: PropTypes.string,\r\n  plainText: PropTypes.bool,\r\n  plainTextIcon: PropTypes.bool,\r\n  muiComponentProps: PropTypes.object,\r\n  muiPickerProps: PropTypes.object,\r\n  handleUpdate: PropTypes.func,\r\n  nestedClasses: PropTypes.object,\r\n  error: PropTypes.object,\r\n  handlers: PropTypes.shape({\r\n    toggelDatePicker: PropTypes.func,\r\n  }),\r\n};\r\n\r\nFormDateView.defaultProps = {\r\n  placeholder: true,\r\n  muiComponentProps: {},\r\n  muiPickerProps: {},\r\n  nestedClasses: {},\r\n};\r\n\r\nexport function FormDateView({\r\n  control,\r\n  label,\r\n  hint,\r\n  error,\r\n  icon,\r\n  placeholder,\r\n  outputFormat, // TODO: remove when ISO is the default\r\n  plainText,\r\n  plainTextIcon,\r\n  muiComponentProps,\r\n  muiPickerProps,\r\n  nestedClasses,\r\n  type,\r\n  name,\r\n  value = null,\r\n  defaultValue,\r\n  handleUpdate,\r\n  handlers,\r\n}) {\r\n  const classes = makeStyles(styles, { name: 'FormDate' })();\r\n  const [isValidDate, setIsValidDate] = useState(true);\r\n\r\n  const helperTextProps = {\r\n    error: Boolean(error),\r\n    helperText: (error && error.message) || (plainText ? undefined : hint),\r\n  };\r\n\r\n  if (type === 'datepicker') {\r\n    const format = muiPickerProps.format || config.ui.format.date.numeric;\r\n    const dateValue = value ? utils.string.t('format.date', { value: { date: value, format } }) : '';\r\n    const inputVariant = plainText ? undefined : 'outlined';\r\n    const pickerVariant = muiPickerProps.variant || 'dialog';\r\n\r\n    const pickerProps = {\r\n      ...omit(muiPickerProps, ['clearable', 'showTodayButton']),\r\n      ...(pickerVariant === 'dialog' && { clearable: muiPickerProps.clearable }),\r\n      ...(pickerVariant === 'dialog' && { showTodayButton: muiPickerProps.showTodayButton }),\r\n    };\r\n\r\n    helperTextProps.error = isValidDate ? Boolean(error) : true;\r\n    helperTextProps.helperText = isValidDate\r\n      ? (error && error.message) || (plainText ? undefined : hint)\r\n      : muiComponentProps?.helperText || utils.string.t('app.invalidDate');\r\n\r\n    const calendarProps = {\r\n      label: plainText ? undefined : label,\r\n      emptyLabel: typeof placeholder === 'string' ? placeholder : placeholder ? utils.string.t('app.inputDate') : undefined,\r\n      autoOk: true,\r\n      id: name,\r\n      inputVariant: inputVariant,\r\n      ...muiComponentProps,\r\n      ...pickerProps,\r\n      ...helperTextProps,\r\n      format: format,\r\n      margin: muiComponentProps.margin || 'normal',\r\n      inputProps: {\r\n        'data-form-type': type,\r\n      },\r\n      InputProps: {\r\n        'data-value': dateValue,\r\n        classes: {\r\n          root: classnames({\r\n            [classes.dateInputWrapper]: plainText,\r\n            [classes.adornedEnd]: !Boolean(plainText),\r\n            [nestedClasses.root]: plainText && Boolean(nestedClasses.root),\r\n            [nestedClasses.rootDatepicker]: !plainText && Boolean(nestedClasses.rootDatepicker),\r\n          }),\r\n          input: classnames({\r\n            [classes.dateInput]: plainText,\r\n            [classes.dateInputDisabled]: plainText && muiComponentProps?.disabled,\r\n            [nestedClasses.input]: plainText && Boolean(nestedClasses.input),\r\n            [nestedClasses.inputDatepicker]: !plainText && Boolean(nestedClasses.inputDatepicker),\r\n          }),\r\n        },\r\n      },\r\n    };\r\n\r\n    return (\r\n      <Controller\r\n        control={control}\r\n        defaultValue={defaultValue}\r\n        render={({ onChange, name, value }) => {\r\n          return plainText ? (\r\n            <Box\r\n              display=\"flex\"\r\n              alignItems=\"end\"\r\n              className={classnames({\r\n                [nestedClasses.datepicker]: Boolean(nestedClasses.datepicker),\r\n              })}\r\n            >\r\n              <DatePicker\r\n                value={value || dateValue || null}\r\n                onChange={(value) => {\r\n                  let date; // TODO added on 06/03/2020: make ISO the default when all endpoints support this format\r\n                  if (outputFormat === 'iso') {\r\n                    date = value?.toISOString();\r\n                  } else {\r\n                    date = value?.format('YYYY-MM-DD');\r\n                  }\r\n                  if (handlers && utils.generic.isFunction(handlers.toggelDatePicker)) {\r\n                    handlers.toggelDatePicker(name, date);\r\n                  } // if user clears the datepicker, value will be null // in this case, we don't want to show invalid date helper text\r\n                  if (value === null || value?.isValid()) setIsValidDate(true);\r\n                  else setIsValidDate(false);\r\n                  onChange(date);\r\n                }}\r\n                {...calendarProps}\r\n              />\r\n              {plainTextIcon && <TodayIcon className={classes.dateIcon} />}\r\n            </Box>\r\n          ) : (\r\n            <KeyboardDatePicker\r\n              name={name}\r\n              value={value}\r\n              onChange={(value) => {\r\n                let date;\r\n                // TODO added on 06/03/2020: make ISO the default when all endpoints support this format\r\n                if (outputFormat === 'iso') {\r\n                  date = value?.toISOString();\r\n                } else {\r\n                  date = value?.format('YYYY-MM-DD');\r\n                }\r\n\r\n                if (utils.generic.isFunction(handleUpdate)) {\r\n                  handleUpdate(name, date);\r\n                }\r\n                if (handlers && utils.generic.isFunction(handlers.toggelDatePicker)) {\r\n                  handlers.toggelDatePicker(name, date);\r\n                }\r\n\r\n                // if user clears the datepicker, value will be null\r\n                // in this case, we don't want to show invalid date helper text\r\n                if (value === null || value?.isValid()) setIsValidDate(true);\r\n                else setIsValidDate(false);\r\n\r\n                onChange(date || null);\r\n              }}\r\n              {...calendarProps}\r\n              keyboardIcon={icon ? <TodayIcon /> : <EventIcon />}\r\n            />\r\n          );\r\n        }}\r\n        id={name}\r\n        name={name}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <FormText\r\n      control={control}\r\n      type=\"date\"\r\n      id={name}\r\n      name={name}\r\n      label={label}\r\n      hint={hint}\r\n      error={error}\r\n      muiComponentProps={{\r\n        ...muiComponentProps,\r\n        InputLabelProps: {\r\n          shrink: true,\r\n          classes: {\r\n            root: classes.label,\r\n          },\r\n        },\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}