{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\forms\\\\AddPlacementMarket\\\\AddPlacementMarket.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as Yup from 'yup';\nimport { firstBy } from 'thenby';\nimport get from 'lodash/get'; // app\n\nimport { AddPlacementMarketView } from './AddPlacementMarket.view';\nimport { StatusIcon, Restricted, OptionDetail } from 'components';\nimport { showModal, postAddPlacementMarket, resetReferenceDataMarkets, getReferenceDataByType, selectPlacementDepartmentName, selectFormattedAccountStatusList, changePlacementMarket } from 'stores';\nimport { ROLE_BROKER } from 'consts';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nAddPlacementMarket.propTypes = {\n  isChangeMarket: PropTypes.bool,\n  placementId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  placementMarkets: PropTypes.array.isRequired,\n  placementMarket: PropTypes.object,\n  departmentId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  departmentMarkets: PropTypes.array.isRequired,\n  handleClose: PropTypes.func.isRequired\n};\nexport default function AddPlacementMarket(_ref) {\n  _s();\n\n  var _this = this;\n\n  var placementId = _ref.placementId,\n      _ref$placementMarkets = _ref.placementMarkets,\n      placementMarkets = _ref$placementMarkets === void 0 ? [] : _ref$placementMarkets,\n      _ref$placementMarket = _ref.placementMarket,\n      placementMarket = _ref$placementMarket === void 0 ? {} : _ref$placementMarket,\n      departmentId = _ref.departmentId,\n      _ref$departmentMarket = _ref.departmentMarkets,\n      departmentMarkets = _ref$departmentMarket === void 0 ? [] : _ref$departmentMarket,\n      handleClose = _ref.handleClose,\n      isChangeMarket = _ref.isChangeMarket;\n  var dispatch = useDispatch();\n  var formattedAccountStatusList = useSelector(selectFormattedAccountStatusList);\n  var departmentName = useSelector(selectPlacementDepartmentName);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      underwritersVisible = _useState2[0],\n      setUnderwritersVisible = _useState2[1];\n\n  var marketsInUse = isChangeMarket ? departmentMarkets.map(function (market) {\n    return get(market, 'market.id');\n  }).filter(Boolean) : placementMarkets.map(function (market) {\n    return get(market, 'market.id');\n  }).filter(Boolean);\n  var placementMarketId = placementMarket === null || placementMarket === void 0 ? void 0 : placementMarket.id;\n  useEffect(function () {\n    dispatch(resetReferenceDataMarkets());\n  }, [] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  var filterMarketsInUse = function filterMarketsInUse(marketsInUse, departmentId) {\n    return function (list) {\n      var listFiltered = list.filter(function (item) {\n        return !marketsInUse.includes(item.id);\n      });\n      return sortGroupMarkets(listFiltered);\n    };\n  };\n\n  var sortGroupMarkets = function sortGroupMarkets(markets) {\n    var departmentOrder = [departmentName, utils.string.t('placement.marketing.others')];\n    var statusOrder = formattedAccountStatusList.map(function (status) {\n      return status.id;\n    });\n\n    var departmentSort = function departmentSort(a, b) {\n      return departmentOrder.indexOf(a.groupBy) - departmentOrder.indexOf(b.groupBy);\n    };\n\n    var statusSort = function statusSort(a, b) {\n      return statusOrder.indexOf(a.statusId) - statusOrder.indexOf(b.statusId);\n    };\n\n    var marketsGrouped = markets.map(function (market) {\n      var _market$departmentIds;\n\n      return _objectSpread(_objectSpread({}, market), {}, {\n        groupBy: ((_market$departmentIds = market.departmentIds) === null || _market$departmentIds === void 0 ? void 0 : _market$departmentIds.includes(departmentId)) ? departmentOrder[0] : departmentOrder[1]\n      });\n    });\n    return marketsGrouped.sort(firstBy(departmentSort).thenBy(statusSort));\n  };\n\n  var getMarketDetail = function getMarketDetail(_ref2) {\n    var gxbBeReference = _ref2.gxbBeReference,\n        address = _ref2.address;\n    var addressStr = utils.market.getAddress(address);\n    if (!gxbBeReference && !addressStr) return;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [gxbBeReference && /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [utils.string.t('placement.generic.gxbBeReference'), \": \", gxbBeReference, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, _this), addressStr && /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [utils.string.t('app.address'), \": \", addressStr]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, _this)]\n    }, void 0, true);\n  };\n\n  var renderOption = function renderOption(market) {\n    var marketDetail = getMarketDetail(market);\n    return /*#__PURE__*/_jsxDEV(OptionDetail, {\n      label: market.edgeName,\n      detail: marketDetail,\n      children: /*#__PURE__*/_jsxDEV(Restricted, {\n        include: [ROLE_BROKER],\n        children: /*#__PURE__*/_jsxDEV(StatusIcon, {\n          translationPath: \"statusMarket\",\n          list: formattedAccountStatusList,\n          id: market.statusId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, _this);\n  };\n\n  var handleEditPlacementMarketsLayers = function handleEditPlacementMarketsLayers(placementMarket) {\n    dispatch(showModal({\n      component: 'EDIT_PLACEMENT_MARKETS_LAYERS',\n      props: {\n        fullWidth: false,\n        maxWidth: 'lg',\n        title: 'placement.marketing.manageMarket',\n        componentProps: {\n          placementMarket: placementMarket\n        }\n      }\n    }));\n  };\n\n  var fields = [{\n    name: 'placementId',\n    type: 'hidden',\n    value: placementId\n  }, [{\n    name: 'markets',\n    gridSize: {\n      xs: 12\n    },\n    type: 'autocompletemui',\n    label: utils.string.t('placement.marketing.fields.markets.label'),\n    hint: utils.string.t('placement.marketing.fields.markets.hint'),\n    options: [],\n    optionKey: 'id',\n    optionLabel: 'edgeName',\n    optionsFetch: {\n      type: 'market',\n      handler: function handler(type, searchTerm) {\n        return dispatch(getReferenceDataByType(type, searchTerm));\n      },\n      filter: filterMarketsInUse(marketsInUse, departmentId)\n    },\n    validation: Yup.object().nullable().required(utils.string.t('validation.required')),\n    muiComponentProps: {\n      renderOption: renderOption,\n      groupBy: function groupBy(option) {\n        return option.groupBy;\n      },\n      'data-testid': 'market'\n    }\n  }]];\n  var actions = [{\n    name: 'cancel',\n    label: utils.string.t('app.cancel'),\n    handler: handleClose\n  }, {\n    name: 'secondary',\n    label: utils.string.t('app.saveEdit'),\n    handler: function handler() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      if (isChangeMarket) {\n        return dispatch(changePlacementMarket.apply(void 0, [placementMarketId].concat(args))).then(function (res) {\n          if (res === null || res === void 0 ? void 0 : res.id) {\n            handleEditPlacementMarketsLayers(res);\n          }\n        });\n      }\n\n      return dispatch(postAddPlacementMarket.apply(void 0, args)).then(function (res) {\n        handleEditPlacementMarketsLayers(res);\n      });\n    }\n  }, {\n    name: 'submit',\n    label: utils.string.t('app.saveClose'),\n    handler: function handler() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      if (isChangeMarket) {\n        return dispatch(changePlacementMarket.apply(void 0, [placementMarketId].concat(args)));\n      }\n\n      return dispatch(postAddPlacementMarket.apply(void 0, args));\n    }\n  }];\n  return /*#__PURE__*/_jsxDEV(AddPlacementMarketView, {\n    fields: fields,\n    actions: actions,\n    isUnderwritersVisible: underwritersVisible,\n    handlers: {\n      showUnderwriters: setUnderwritersVisible\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddPlacementMarket, \"W1BRdTOFYigW+bCuESIaQ/+kVWU=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = AddPlacementMarket;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddPlacementMarket\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/forms/AddPlacementMarket/AddPlacementMarket.js"],"names":["React","useEffect","useState","PropTypes","useDispatch","useSelector","Yup","firstBy","get","AddPlacementMarketView","StatusIcon","Restricted","OptionDetail","showModal","postAddPlacementMarket","resetReferenceDataMarkets","getReferenceDataByType","selectPlacementDepartmentName","selectFormattedAccountStatusList","changePlacementMarket","ROLE_BROKER","utils","AddPlacementMarket","propTypes","isChangeMarket","bool","placementId","oneOfType","string","number","isRequired","placementMarkets","array","placementMarket","object","departmentId","departmentMarkets","handleClose","func","dispatch","formattedAccountStatusList","departmentName","underwritersVisible","setUnderwritersVisible","marketsInUse","map","market","filter","Boolean","placementMarketId","id","filterMarketsInUse","list","listFiltered","item","includes","sortGroupMarkets","markets","departmentOrder","t","statusOrder","status","departmentSort","a","b","indexOf","groupBy","statusSort","statusId","marketsGrouped","departmentIds","sort","thenBy","getMarketDetail","gxbBeReference","address","addressStr","getAddress","renderOption","marketDetail","edgeName","handleEditPlacementMarketsLayers","component","props","fullWidth","maxWidth","title","componentProps","fields","name","type","value","gridSize","xs","label","hint","options","optionKey","optionLabel","optionsFetch","handler","searchTerm","validation","nullable","required","muiComponentProps","option","actions","args","then","res","showUnderwriters"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,OAAOC,GAAP,MAAgB,YAAhB,C,CAEA;;AACA,SAASC,sBAAT,QAAuC,2BAAvC;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,YAAjC,QAAqD,YAArD;AACA,SACEC,SADF,EAEEC,sBAFF,EAGEC,yBAHF,EAIEC,sBAJF,EAKEC,6BALF,EAMEC,gCANF,EAOEC,qBAPF,QAQO,QARP;AASA,SAASC,WAAT,QAA4B,QAA5B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;;AAEAC,kBAAkB,CAACC,SAAnB,GAA+B;AAC7BC,EAAAA,cAAc,EAAErB,SAAS,CAACsB,IADG;AAE7BC,EAAAA,WAAW,EAAEvB,SAAS,CAACwB,SAAV,CAAoB,CAACxB,SAAS,CAACyB,MAAX,EAAmBzB,SAAS,CAAC0B,MAA7B,CAApB,EAA0DC,UAF1C;AAG7BC,EAAAA,gBAAgB,EAAE5B,SAAS,CAAC6B,KAAV,CAAgBF,UAHL;AAI7BG,EAAAA,eAAe,EAAE9B,SAAS,CAAC+B,MAJE;AAK7BC,EAAAA,YAAY,EAAEhC,SAAS,CAACwB,SAAV,CAAoB,CAACxB,SAAS,CAACyB,MAAX,EAAmBzB,SAAS,CAAC0B,MAA7B,CAApB,EAA0DC,UAL3C;AAM7BM,EAAAA,iBAAiB,EAAEjC,SAAS,CAAC6B,KAAV,CAAgBF,UANN;AAO7BO,EAAAA,WAAW,EAAElC,SAAS,CAACmC,IAAV,CAAeR;AAPC,CAA/B;AAUA,eAAe,SAASR,kBAAT,OAQZ;AAAA;;AAAA;;AAAA,MAPDI,WAOC,QAPDA,WAOC;AAAA,mCANDK,gBAMC;AAAA,MANDA,gBAMC,sCANkB,EAMlB;AAAA,kCALDE,eAKC;AAAA,MALDA,eAKC,qCALiB,EAKjB;AAAA,MAJDE,YAIC,QAJDA,YAIC;AAAA,mCAHDC,iBAGC;AAAA,MAHDA,iBAGC,sCAHmB,EAGnB;AAAA,MAFDC,WAEC,QAFDA,WAEC;AAAA,MADDb,cACC,QADDA,cACC;AACD,MAAMe,QAAQ,GAAGnC,WAAW,EAA5B;AAEA,MAAMoC,0BAA0B,GAAGnC,WAAW,CAACa,gCAAD,CAA9C;AACA,MAAMuB,cAAc,GAAGpC,WAAW,CAACY,6BAAD,CAAlC;;AAJC,kBAMqDf,QAAQ,CAAC,KAAD,CAN7D;AAAA;AAAA,MAMMwC,mBANN;AAAA,MAM2BC,sBAN3B;;AAQD,MAAMC,YAAY,GAAGpB,cAAc,GAC/BY,iBAAiB,CAACS,GAAlB,CAAsB,UAACC,MAAD;AAAA,WAAYtC,GAAG,CAACsC,MAAD,EAAS,WAAT,CAAf;AAAA,GAAtB,EAA4DC,MAA5D,CAAmEC,OAAnE,CAD+B,GAE/BjB,gBAAgB,CAACc,GAAjB,CAAqB,UAACC,MAAD;AAAA,WAAYtC,GAAG,CAACsC,MAAD,EAAS,WAAT,CAAf;AAAA,GAArB,EAA2DC,MAA3D,CAAkEC,OAAlE,CAFJ;AAIA,MAAMC,iBAAiB,GAAGhB,eAAH,aAAGA,eAAH,uBAAGA,eAAe,CAAEiB,EAA3C;AAEAjD,EAAAA,SAAS,CACP,YAAM;AACJsC,IAAAA,QAAQ,CAACxB,yBAAyB,EAA1B,CAAR;AACD,GAHM,EAIP,EAJO,CAIJ;AAJI,GAAT;;AAOA,MAAMoC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACP,YAAD,EAAeT,YAAf;AAAA,WAAgC,UAACiB,IAAD,EAAU;AACnE,UAAMC,YAAY,GAAGD,IAAI,CAACL,MAAL,CAAY,UAACO,IAAD,EAAU;AACzC,eAAO,CAACV,YAAY,CAACW,QAAb,CAAsBD,IAAI,CAACJ,EAA3B,CAAR;AACD,OAFoB,CAArB;AAIA,aAAOM,gBAAgB,CAACH,YAAD,CAAvB;AACD,KAN0B;AAAA,GAA3B;;AAQA,MAAMG,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,OAAD,EAAa;AACpC,QAAMC,eAAe,GAAG,CAACjB,cAAD,EAAiBpB,KAAK,CAACO,MAAN,CAAa+B,CAAb,CAAe,4BAAf,CAAjB,CAAxB;AACA,QAAMC,WAAW,GAAGpB,0BAA0B,CAACK,GAA3B,CAA+B,UAACgB,MAAD;AAAA,aAAYA,MAAM,CAACX,EAAnB;AAAA,KAA/B,CAApB;;AAEA,QAAMY,cAAc,GAAG,SAAjBA,cAAiB,CAACC,CAAD,EAAIC,CAAJ;AAAA,aAAUN,eAAe,CAACO,OAAhB,CAAwBF,CAAC,CAACG,OAA1B,IAAqCR,eAAe,CAACO,OAAhB,CAAwBD,CAAC,CAACE,OAA1B,CAA/C;AAAA,KAAvB;;AACA,QAAMC,UAAU,GAAG,SAAbA,UAAa,CAACJ,CAAD,EAAIC,CAAJ;AAAA,aAAUJ,WAAW,CAACK,OAAZ,CAAoBF,CAAC,CAACK,QAAtB,IAAkCR,WAAW,CAACK,OAAZ,CAAoBD,CAAC,CAACI,QAAtB,CAA5C;AAAA,KAAnB;;AAEA,QAAMC,cAAc,GAAGZ,OAAO,CAACZ,GAAR,CAAY,UAACC,MAAD,EAAY;AAAA;;AAC7C,6CACKA,MADL;AAEEoB,QAAAA,OAAO,EAAE,0BAAApB,MAAM,CAACwB,aAAP,gFAAsBf,QAAtB,CAA+BpB,YAA/B,KAA+CuB,eAAe,CAAC,CAAD,CAA9D,GAAoEA,eAAe,CAAC,CAAD;AAF9F;AAID,KALsB,CAAvB;AAOA,WAAOW,cAAc,CAACE,IAAf,CAAoBhE,OAAO,CAACuD,cAAD,CAAP,CAAwBU,MAAxB,CAA+BL,UAA/B,CAApB,CAAP;AACD,GAfD;;AAiBA,MAAMM,eAAe,GAAG,SAAlBA,eAAkB,QAAiC;AAAA,QAA9BC,cAA8B,SAA9BA,cAA8B;AAAA,QAAdC,OAAc,SAAdA,OAAc;AACvD,QAAMC,UAAU,GAAGvD,KAAK,CAACyB,MAAN,CAAa+B,UAAb,CAAwBF,OAAxB,CAAnB;AACA,QAAI,CAACD,cAAD,IAAmB,CAACE,UAAxB,EAAoC;AAEpC,wBACE;AAAA,iBACGF,cAAc,iBACb;AAAA,mBACGrD,KAAK,CAACO,MAAN,CAAa+B,CAAb,CAAe,kCAAf,CADH,QACyDe,cADzD,eAEE;AAAA;AAAA;AAAA;AAAA,iBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,eAFJ,EAOGE,UAAU,iBACT;AAAA,mBACGvD,KAAK,CAACO,MAAN,CAAa+B,CAAb,CAAe,aAAf,CADH,QACoCiB,UADpC;AAAA;AAAA;AAAA;AAAA;AAAA,eARJ;AAAA,oBADF;AAeD,GAnBD;;AAqBA,MAAME,YAAY,GAAG,SAAfA,YAAe,CAAChC,MAAD,EAAY;AAC/B,QAAMiC,YAAY,GAAGN,eAAe,CAAC3B,MAAD,CAApC;AAEA,wBACE,QAAC,YAAD;AAAc,MAAA,KAAK,EAAEA,MAAM,CAACkC,QAA5B;AAAsC,MAAA,MAAM,EAAED,YAA9C;AAAA,6BACE,QAAC,UAAD;AAAY,QAAA,OAAO,EAAE,CAAC3D,WAAD,CAArB;AAAA,+BACE,QAAC,UAAD;AAAY,UAAA,eAAe,EAAC,cAA5B;AAA2C,UAAA,IAAI,EAAEoB,0BAAjD;AAA6E,UAAA,EAAE,EAAEM,MAAM,CAACsB;AAAxF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,aADF;AAOD,GAVD;;AAYA,MAAMa,gCAAgC,GAAG,SAAnCA,gCAAmC,CAAChD,eAAD,EAAqB;AAC5DM,IAAAA,QAAQ,CACN1B,SAAS,CAAC;AACRqE,MAAAA,SAAS,EAAE,+BADH;AAERC,MAAAA,KAAK,EAAE;AACLC,QAAAA,SAAS,EAAE,KADN;AAELC,QAAAA,QAAQ,EAAE,IAFL;AAGLC,QAAAA,KAAK,EAAE,kCAHF;AAILC,QAAAA,cAAc,EAAE;AACdtD,UAAAA,eAAe,EAAfA;AADc;AAJX;AAFC,KAAD,CADH,CAAR;AAaD,GAdD;;AAgBA,MAAMuD,MAAM,GAAG,CACb;AACEC,IAAAA,IAAI,EAAE,aADR;AAEEC,IAAAA,IAAI,EAAE,QAFR;AAGEC,IAAAA,KAAK,EAAEjE;AAHT,GADa,EAMb,CACE;AACE+D,IAAAA,IAAI,EAAE,SADR;AAEEG,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAFZ;AAGEH,IAAAA,IAAI,EAAE,iBAHR;AAIEI,IAAAA,KAAK,EAAEzE,KAAK,CAACO,MAAN,CAAa+B,CAAb,CAAe,0CAAf,CAJT;AAKEoC,IAAAA,IAAI,EAAE1E,KAAK,CAACO,MAAN,CAAa+B,CAAb,CAAe,yCAAf,CALR;AAMEqC,IAAAA,OAAO,EAAE,EANX;AAOEC,IAAAA,SAAS,EAAE,IAPb;AAQEC,IAAAA,WAAW,EAAE,UARf;AASEC,IAAAA,YAAY,EAAE;AACZT,MAAAA,IAAI,EAAE,QADM;AAEZU,MAAAA,OAAO,EAAE,iBAACV,IAAD,EAAOW,UAAP;AAAA,eAAsB9D,QAAQ,CAACvB,sBAAsB,CAAC0E,IAAD,EAAOW,UAAP,CAAvB,CAA9B;AAAA,OAFG;AAGZtD,MAAAA,MAAM,EAAEI,kBAAkB,CAACP,YAAD,EAAeT,YAAf;AAHd,KAThB;AAcEmE,IAAAA,UAAU,EAAEhG,GAAG,CAAC4B,MAAJ,GAAaqE,QAAb,GAAwBC,QAAxB,CAAiCnF,KAAK,CAACO,MAAN,CAAa+B,CAAb,CAAe,qBAAf,CAAjC,CAdd;AAeE8C,IAAAA,iBAAiB,EAAE;AACjB3B,MAAAA,YAAY,EAAZA,YADiB;AAEjBZ,MAAAA,OAAO,EAAE,iBAACwC,MAAD;AAAA,eAAYA,MAAM,CAACxC,OAAnB;AAAA,OAFQ;AAGjB,qBAAe;AAHE;AAfrB,GADF,CANa,CAAf;AA+BA,MAAMyC,OAAO,GAAG,CACd;AACElB,IAAAA,IAAI,EAAE,QADR;AAEEK,IAAAA,KAAK,EAAEzE,KAAK,CAACO,MAAN,CAAa+B,CAAb,CAAe,YAAf,CAFT;AAGEyC,IAAAA,OAAO,EAAE/D;AAHX,GADc,EAMd;AACEoD,IAAAA,IAAI,EAAE,WADR;AAEEK,IAAAA,KAAK,EAAEzE,KAAK,CAACO,MAAN,CAAa+B,CAAb,CAAe,cAAf,CAFT;AAGEyC,IAAAA,OAAO,EAAE,mBAAa;AAAA,wCAATQ,IAAS;AAATA,QAAAA,IAAS;AAAA;;AACpB,UAAIpF,cAAJ,EAAoB;AAClB,eAAOe,QAAQ,CAACpB,qBAAqB,MAArB,UAAsB8B,iBAAtB,SAA4C2D,IAA5C,EAAD,CAAR,CAA4DC,IAA5D,CAAiE,UAACC,GAAD,EAAS;AAC/E,cAAIA,GAAJ,aAAIA,GAAJ,uBAAIA,GAAG,CAAE5D,EAAT,EAAa;AACX+B,YAAAA,gCAAgC,CAAC6B,GAAD,CAAhC;AACD;AACF,SAJM,CAAP;AAKD;;AACD,aAAOvE,QAAQ,CAACzB,sBAAsB,MAAtB,SAA0B8F,IAA1B,CAAD,CAAR,CAA0CC,IAA1C,CAA+C,UAACC,GAAD,EAAS;AAC7D7B,QAAAA,gCAAgC,CAAC6B,GAAD,CAAhC;AACD,OAFM,CAAP;AAGD;AAdH,GANc,EAsBd;AACErB,IAAAA,IAAI,EAAE,QADR;AAEEK,IAAAA,KAAK,EAAEzE,KAAK,CAACO,MAAN,CAAa+B,CAAb,CAAe,eAAf,CAFT;AAGEyC,IAAAA,OAAO,EAAE,mBAAa;AAAA,yCAATQ,IAAS;AAATA,QAAAA,IAAS;AAAA;;AACpB,UAAIpF,cAAJ,EAAoB;AAClB,eAAOe,QAAQ,CAACpB,qBAAqB,MAArB,UAAsB8B,iBAAtB,SAA4C2D,IAA5C,EAAD,CAAf;AACD;;AACD,aAAOrE,QAAQ,CAACzB,sBAAsB,MAAtB,SAA0B8F,IAA1B,CAAD,CAAf;AACD;AARH,GAtBc,CAAhB;AAkCA,sBACE,QAAC,sBAAD;AACE,IAAA,MAAM,EAAEpB,MADV;AAEE,IAAA,OAAO,EAAEmB,OAFX;AAGE,IAAA,qBAAqB,EAAEjE,mBAHzB;AAIE,IAAA,QAAQ,EAAE;AACRqE,MAAAA,gBAAgB,EAAEpE;AADV;AAJZ;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;GAlLuBrB,kB;UASLlB,W,EAEkBC,W,EACZA,W;;;KAZDiB,kB","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport * as Yup from 'yup';\r\nimport { firstBy } from 'thenby';\r\nimport get from 'lodash/get';\r\n\r\n// app\r\nimport { AddPlacementMarketView } from './AddPlacementMarket.view';\r\nimport { StatusIcon, Restricted, OptionDetail } from 'components';\r\nimport {\r\n  showModal,\r\n  postAddPlacementMarket,\r\n  resetReferenceDataMarkets,\r\n  getReferenceDataByType,\r\n  selectPlacementDepartmentName,\r\n  selectFormattedAccountStatusList,\r\n  changePlacementMarket,\r\n} from 'stores';\r\nimport { ROLE_BROKER } from 'consts';\r\nimport * as utils from 'utils';\r\n\r\nAddPlacementMarket.propTypes = {\r\n  isChangeMarket: PropTypes.bool,\r\n  placementId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n  placementMarkets: PropTypes.array.isRequired,\r\n  placementMarket: PropTypes.object,\r\n  departmentId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n  departmentMarkets: PropTypes.array.isRequired,\r\n  handleClose: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default function AddPlacementMarket({\r\n  placementId,\r\n  placementMarkets = [],\r\n  placementMarket = {},\r\n  departmentId,\r\n  departmentMarkets = [],\r\n  handleClose,\r\n  isChangeMarket,\r\n}) {\r\n  const dispatch = useDispatch();\r\n\r\n  const formattedAccountStatusList = useSelector(selectFormattedAccountStatusList);\r\n  const departmentName = useSelector(selectPlacementDepartmentName);\r\n\r\n  const [underwritersVisible, setUnderwritersVisible] = useState(false);\r\n\r\n  const marketsInUse = isChangeMarket\r\n    ? departmentMarkets.map((market) => get(market, 'market.id')).filter(Boolean)\r\n    : placementMarkets.map((market) => get(market, 'market.id')).filter(Boolean);\r\n\r\n  const placementMarketId = placementMarket?.id;\r\n\r\n  useEffect(\r\n    () => {\r\n      dispatch(resetReferenceDataMarkets());\r\n    },\r\n    [] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  const filterMarketsInUse = (marketsInUse, departmentId) => (list) => {\r\n    const listFiltered = list.filter((item) => {\r\n      return !marketsInUse.includes(item.id);\r\n    });\r\n\r\n    return sortGroupMarkets(listFiltered);\r\n  };\r\n\r\n  const sortGroupMarkets = (markets) => {\r\n    const departmentOrder = [departmentName, utils.string.t('placement.marketing.others')];\r\n    const statusOrder = formattedAccountStatusList.map((status) => status.id);\r\n\r\n    const departmentSort = (a, b) => departmentOrder.indexOf(a.groupBy) - departmentOrder.indexOf(b.groupBy);\r\n    const statusSort = (a, b) => statusOrder.indexOf(a.statusId) - statusOrder.indexOf(b.statusId);\r\n\r\n    const marketsGrouped = markets.map((market) => {\r\n      return {\r\n        ...market,\r\n        groupBy: market.departmentIds?.includes(departmentId) ? departmentOrder[0] : departmentOrder[1],\r\n      };\r\n    });\r\n\r\n    return marketsGrouped.sort(firstBy(departmentSort).thenBy(statusSort));\r\n  };\r\n\r\n  const getMarketDetail = ({ gxbBeReference, address }) => {\r\n    const addressStr = utils.market.getAddress(address);\r\n    if (!gxbBeReference && !addressStr) return;\r\n\r\n    return (\r\n      <>\r\n        {gxbBeReference && (\r\n          <span>\r\n            {utils.string.t('placement.generic.gxbBeReference')}: {gxbBeReference}\r\n            <br />\r\n          </span>\r\n        )}\r\n        {addressStr && (\r\n          <span>\r\n            {utils.string.t('app.address')}: {addressStr}\r\n          </span>\r\n        )}\r\n      </>\r\n    );\r\n  };\r\n\r\n  const renderOption = (market) => {\r\n    const marketDetail = getMarketDetail(market);\r\n\r\n    return (\r\n      <OptionDetail label={market.edgeName} detail={marketDetail}>\r\n        <Restricted include={[ROLE_BROKER]}>\r\n          <StatusIcon translationPath=\"statusMarket\" list={formattedAccountStatusList} id={market.statusId} />\r\n        </Restricted>\r\n      </OptionDetail>\r\n    );\r\n  };\r\n\r\n  const handleEditPlacementMarketsLayers = (placementMarket) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'EDIT_PLACEMENT_MARKETS_LAYERS',\r\n        props: {\r\n          fullWidth: false,\r\n          maxWidth: 'lg',\r\n          title: 'placement.marketing.manageMarket',\r\n          componentProps: {\r\n            placementMarket,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const fields = [\r\n    {\r\n      name: 'placementId',\r\n      type: 'hidden',\r\n      value: placementId,\r\n    },\r\n    [\r\n      {\r\n        name: 'markets',\r\n        gridSize: { xs: 12 },\r\n        type: 'autocompletemui',\r\n        label: utils.string.t('placement.marketing.fields.markets.label'),\r\n        hint: utils.string.t('placement.marketing.fields.markets.hint'),\r\n        options: [],\r\n        optionKey: 'id',\r\n        optionLabel: 'edgeName',\r\n        optionsFetch: {\r\n          type: 'market',\r\n          handler: (type, searchTerm) => dispatch(getReferenceDataByType(type, searchTerm)),\r\n          filter: filterMarketsInUse(marketsInUse, departmentId),\r\n        },\r\n        validation: Yup.object().nullable().required(utils.string.t('validation.required')),\r\n        muiComponentProps: {\r\n          renderOption,\r\n          groupBy: (option) => option.groupBy,\r\n          'data-testid': 'market',\r\n        },\r\n      },\r\n    ],\r\n  ];\r\n\r\n  const actions = [\r\n    {\r\n      name: 'cancel',\r\n      label: utils.string.t('app.cancel'),\r\n      handler: handleClose,\r\n    },\r\n    {\r\n      name: 'secondary',\r\n      label: utils.string.t('app.saveEdit'),\r\n      handler: (...args) => {\r\n        if (isChangeMarket) {\r\n          return dispatch(changePlacementMarket(placementMarketId, ...args)).then((res) => {\r\n            if (res?.id) {\r\n              handleEditPlacementMarketsLayers(res);\r\n            }\r\n          });\r\n        }\r\n        return dispatch(postAddPlacementMarket(...args)).then((res) => {\r\n          handleEditPlacementMarketsLayers(res);\r\n        });\r\n      },\r\n    },\r\n    {\r\n      name: 'submit',\r\n      label: utils.string.t('app.saveClose'),\r\n      handler: (...args) => {\r\n        if (isChangeMarket) {\r\n          return dispatch(changePlacementMarket(placementMarketId, ...args));\r\n        }\r\n        return dispatch(postAddPlacementMarket(...args));\r\n      },\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <AddPlacementMarketView\r\n      fields={fields}\r\n      actions={actions}\r\n      isUnderwritersVisible={underwritersVisible}\r\n      handlers={{\r\n        showUnderwriters: setUnderwritersVisible,\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}