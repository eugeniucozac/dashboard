{"ast":null,"code":"var _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\pages\\\\ProcessingInstructions\\\\ProcessingInstructions.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useDispatch, useSelector } from 'react-redux';\nimport get from 'lodash/get'; // app\n\nimport { ProcessingInstructionsView } from './ProcessingInstructions.view';\nimport * as utils from 'utils';\nimport { getProcessingInstructionsGridData, getPiRefData, getDepartments, resetPiSearchParams } from 'stores';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar ProcessingInstructions = function ProcessingInstructions() {\n  _s();\n\n  var dispatch = useDispatch();\n  var uiBrand = useSelector(function (state) {\n    return get(state, 'ui.brand');\n  });\n  var processingInstructionGridData = useSelector(function (state) {\n    return state.processingInstructions.gridData;\n  });\n  var processTypes = useSelector(function (state) {\n    return get(state, 'referenceData.processTypes');\n  }) || [];\n  var departments = useSelector(function (state) {\n    return state.processingInstructions.departmentList;\n  }) || [];\n  var statuses = useSelector(function (state) {\n    return state.processingInstructions.statuses;\n  }) || [];\n  var isProcessTypesLoaded = utils.generic.isValidArray(processTypes, true);\n  var isDeparmentsLoaded = utils.generic.isValidArray(departments, true);\n  var isStatusesLoaded = utils.generic.isValidArray(statuses, true);\n  useEffect(function () {\n    dispatch(getProcessingInstructionsGridData()); // only fetch refData if it hasn't been loaded already\n\n    if (!isProcessTypesLoaded) dispatch(getPiRefData('processTypes'));\n    if (!isDeparmentsLoaded) dispatch(getDepartments());\n    if (!isStatusesLoaded) dispatch(getPiRefData('status')); // cleanup\n\n    return function () {\n      dispatch(resetPiSearchParams());\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"\".concat(utils.string.t('processingInstructions.title'), \" - \").concat(utils.app.getAppName(uiBrand))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(ProcessingInstructionsView, {\n      gridData: processingInstructionGridData,\n      processTypes: processTypes,\n      departments: departments,\n      statuses: statuses\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(ProcessingInstructions, \"Ful/25v/mx+6bknM1uu4tt/LBKM=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = ProcessingInstructions;\nexport default ProcessingInstructions;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProcessingInstructions\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/pages/ProcessingInstructions/ProcessingInstructions.js"],"names":["React","useEffect","Helmet","useDispatch","useSelector","get","ProcessingInstructionsView","utils","getProcessingInstructionsGridData","getPiRefData","getDepartments","resetPiSearchParams","ProcessingInstructions","dispatch","uiBrand","state","processingInstructionGridData","processingInstructions","gridData","processTypes","departments","departmentList","statuses","isProcessTypesLoaded","generic","isValidArray","isDeparmentsLoaded","isStatusesLoaded","string","t","app","getAppName"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport get from 'lodash/get';\r\n\r\n// app\r\nimport { ProcessingInstructionsView } from './ProcessingInstructions.view';\r\nimport * as utils from 'utils';\r\nimport { getProcessingInstructionsGridData, getPiRefData, getDepartments, resetPiSearchParams } from 'stores';\r\n\r\nconst ProcessingInstructions = () => {\r\n  const dispatch = useDispatch();\r\n  const uiBrand = useSelector((state) => get(state, 'ui.brand'));\r\n  const processingInstructionGridData = useSelector((state) => state.processingInstructions.gridData);\r\n  const processTypes = useSelector((state) => get(state, 'referenceData.processTypes')) || [];\r\n\r\n  const departments = useSelector((state) => state.processingInstructions.departmentList) || [];\r\n  const statuses = useSelector((state) => state.processingInstructions.statuses) || [];\r\n\r\n  const isProcessTypesLoaded = utils.generic.isValidArray(processTypes, true);\r\n  const isDeparmentsLoaded = utils.generic.isValidArray(departments, true);\r\n  const isStatusesLoaded = utils.generic.isValidArray(statuses, true);\r\n\r\n  useEffect(() => {\r\n    dispatch(getProcessingInstructionsGridData());\r\n\r\n    // only fetch refData if it hasn't been loaded already\r\n    if (!isProcessTypesLoaded) dispatch(getPiRefData('processTypes'));\r\n    if (!isDeparmentsLoaded) dispatch(getDepartments());\r\n    if (!isStatusesLoaded) dispatch(getPiRefData('status'));\r\n\r\n    // cleanup\r\n    return () => {\r\n      dispatch(resetPiSearchParams());\r\n    };\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>{`${utils.string.t('processingInstructions.title')} - ${utils.app.getAppName(uiBrand)}`}</title>\r\n      </Helmet>\r\n      <ProcessingInstructionsView\r\n        gridData={processingInstructionGridData}\r\n        processTypes={processTypes}\r\n        departments={departments}\r\n        statuses={statuses}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProcessingInstructions;\r\n"]},"metadata":{},"sourceType":"module"}