{"ast":null,"code":"import { authLogout } from 'stores';\nimport * as utils from 'utils';\nimport isString from 'lodash/isString';\nimport get from 'lodash/get';\nexport var getSearchResults = function getSearchResults(term) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var prevSearchTerm = get(getState(), 'search.resultsTerm'); // abort\n\n    if (!term || !isString(term) || term.trim() === prevSearchTerm) return;\n    var searchTerm = term.trim();\n    dispatch(getSearchRequest(searchTerm));\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.edge,\n      path: \"api/search?name=\".concat(encodeURIComponent(searchTerm), \"&limit=8\")\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (data) {\n      dispatch(getSearchSuccess(data, searchTerm));\n      return data;\n    }).catch(function (err) {\n      var errorParams = {\n        file: 'stores/search.actions.get',\n        message: 'API fetch error (search.get)'\n      };\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(getSearchFailure(err, searchTerm));\n      return err;\n    });\n  };\n};\nexport var getSearchRequest = function getSearchRequest(searchTerm) {\n  return {\n    type: 'SEARCH_GET_REQUEST',\n    payload: searchTerm\n  };\n};\nexport var getSearchSuccess = function getSearchSuccess(data, searchTerm) {\n  return {\n    type: 'SEARCH_GET_SUCCESS',\n    payload: {\n      results: data && data.results,\n      term: searchTerm\n    }\n  };\n};\nexport var getSearchFailure = function getSearchFailure(error, searchTerm) {\n  return {\n    type: 'SEARCH_GET_FAILURE',\n    payload: {\n      error: error,\n      term: searchTerm\n    }\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/search/search.actions.get.js"],"names":["authLogout","utils","isString","get","getSearchResults","term","dispatch","getState","auth","user","endpoint","config","vars","prevSearchTerm","trim","searchTerm","getSearchRequest","api","token","accessToken","edge","path","encodeURIComponent","then","response","handleResponse","data","getSearchSuccess","catch","err","errorParams","file","message","handleError","handleUnauthorized","getSearchFailure","type","payload","results","error"],"mappings":"AAAA,SAASA,UAAT,QAA2B,QAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AAEA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,IAAD;AAAA,SAAU,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAChE;AADgE,oBAEPA,QAAQ,EAFD;AAAA,QAEhDC,IAFgD,aAExDC,IAFwD,CAEhDD,IAFgD;AAAA,QAEtBE,QAFsB,aAExCC,MAFwC,CAE9BC,IAF8B,CAEtBF,QAFsB;;AAGhE,QAAMG,cAAc,GAAGV,GAAG,CAACI,QAAQ,EAAT,EAAa,oBAAb,CAA1B,CAHgE,CAKhE;;AACA,QAAI,CAACF,IAAD,IAAS,CAACH,QAAQ,CAACG,IAAD,CAAlB,IAA4BA,IAAI,CAACS,IAAL,OAAgBD,cAAhD,EAAgE;AAChE,QAAME,UAAU,GAAGV,IAAI,CAACS,IAAL,EAAnB;AAEAR,IAAAA,QAAQ,CAACU,gBAAgB,CAACD,UAAD,CAAjB,CAAR;AAEA,WAAOd,KAAK,CAACgB,GAAN,CACJd,GADI,CACA;AACHe,MAAAA,KAAK,EAAEV,IAAI,CAACW,WADT;AAEHT,MAAAA,QAAQ,EAAEA,QAAQ,CAACU,IAFhB;AAGHC,MAAAA,IAAI,4BAAqBC,kBAAkB,CAACP,UAAD,CAAvC;AAHD,KADA,EAMJQ,IANI,CAMC,UAACC,QAAD;AAAA,aAAcvB,KAAK,CAACgB,GAAN,CAAUQ,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAND,EAOJD,IAPI,CAOC,UAACG,IAAD,EAAU;AACdpB,MAAAA,QAAQ,CAACqB,gBAAgB,CAACD,IAAD,EAAOX,UAAP,CAAjB,CAAR;AACA,aAAOW,IAAP;AACD,KAVI,EAWJE,KAXI,CAWE,UAACC,GAAD,EAAS;AACd,UAAMC,WAAW,GAAG;AAClBC,QAAAA,IAAI,EAAE,2BADY;AAElBC,QAAAA,OAAO,EAAE;AAFS,OAApB;AAKA/B,MAAAA,KAAK,CAACgB,GAAN,CAAUgB,WAAV,CAAsBJ,GAAtB,EAA2BC,WAA3B;AACA7B,MAAAA,KAAK,CAACgB,GAAN,CAAUiB,kBAAV,CAA6BL,GAA7B,EAAkCvB,QAAlC,EAA4CN,UAA5C;AACAM,MAAAA,QAAQ,CAAC6B,gBAAgB,CAACN,GAAD,EAAMd,UAAN,CAAjB,CAAR;AACA,aAAOc,GAAP;AACD,KArBI,CAAP;AAsBD,GAjC+B;AAAA,CAAzB;AAmCP,OAAO,IAAMb,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACD,UAAD,EAAgB;AAC9C,SAAO;AACLqB,IAAAA,IAAI,EAAE,oBADD;AAELC,IAAAA,OAAO,EAAEtB;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMY,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACD,IAAD,EAAOX,UAAP,EAAsB;AACpD,SAAO;AACLqB,IAAAA,IAAI,EAAE,oBADD;AAELC,IAAAA,OAAO,EAAE;AACPC,MAAAA,OAAO,EAAEZ,IAAI,IAAIA,IAAI,CAACY,OADf;AAEPjC,MAAAA,IAAI,EAAEU;AAFC;AAFJ,GAAP;AAOD,CARM;AAUP,OAAO,IAAMoB,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACI,KAAD,EAAQxB,UAAR,EAAuB;AACrD,SAAO;AACLqB,IAAAA,IAAI,EAAE,oBADD;AAELC,IAAAA,OAAO,EAAE;AACPE,MAAAA,KAAK,EAALA,KADO;AAEPlC,MAAAA,IAAI,EAAEU;AAFC;AAFJ,GAAP;AAOD,CARM","sourcesContent":["import { authLogout } from 'stores';\r\nimport * as utils from 'utils';\r\nimport isString from 'lodash/isString';\r\nimport get from 'lodash/get';\r\n\r\nexport const getSearchResults = (term) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n  const prevSearchTerm = get(getState(), 'search.resultsTerm');\r\n\r\n  // abort\r\n  if (!term || !isString(term) || term.trim() === prevSearchTerm) return;\r\n  const searchTerm = term.trim();\r\n\r\n  dispatch(getSearchRequest(searchTerm));\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.edge,\r\n      path: `api/search?name=${encodeURIComponent(searchTerm)}&limit=8`,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((data) => {\r\n      dispatch(getSearchSuccess(data, searchTerm));\r\n      return data;\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        file: 'stores/search.actions.get',\r\n        message: 'API fetch error (search.get)',\r\n      };\r\n\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(getSearchFailure(err, searchTerm));\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const getSearchRequest = (searchTerm) => {\r\n  return {\r\n    type: 'SEARCH_GET_REQUEST',\r\n    payload: searchTerm,\r\n  };\r\n};\r\n\r\nexport const getSearchSuccess = (data, searchTerm) => {\r\n  return {\r\n    type: 'SEARCH_GET_SUCCESS',\r\n    payload: {\r\n      results: data && data.results,\r\n      term: searchTerm,\r\n    },\r\n  };\r\n};\r\n\r\nexport const getSearchFailure = (error, searchTerm) => {\r\n  return {\r\n    type: 'SEARCH_GET_FAILURE',\r\n    payload: {\r\n      error,\r\n      term: searchTerm,\r\n    },\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}