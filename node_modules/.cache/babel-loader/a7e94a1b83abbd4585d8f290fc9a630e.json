{"ast":null,"code":"import { authLogout } from 'stores';\nimport * as utils from 'utils';\nexport var getFacilityLimits = function getFacilityLimits(facilityId) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/risk.actions.getFacilityLimits'\n    };\n    dispatch(getFacilityLimitReq(facilityId));\n\n    if (!facilityId) {\n      dispatch(getFacilityLimitFailure(defaultError));\n      return;\n    }\n\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.auth,\n      path: \"api/v1/limits?facilityId=\".concat(facilityId)\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleResponseJsonObject(json);\n    }).then(function (data) {\n      dispatch(getFacilityLimitSuccess(data));\n      return data;\n    }).catch(function (err) {\n      utils.api.handleError(err, defaultError);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(getFacilityLimitFailure(err, facilityId));\n      return err;\n    });\n  };\n};\nexport var getFacilityLimitReq = function getFacilityLimitReq(facilityId) {\n  return {\n    type: 'RISK_FACILITY_LIMIT_GET_REQUEST',\n    payload: facilityId\n  };\n};\nexport var getFacilityLimitSuccess = function getFacilityLimitSuccess(data) {\n  return {\n    type: 'RISK_FACILITY_LIMIT_GET_SUCCESS',\n    payload: data\n  };\n};\nexport var getFacilityLimitFailure = function getFacilityLimitFailure(error, facilityId) {\n  return {\n    type: 'RISK_FACILITY_LIMIT_GET_FAILURE',\n    payload: {\n      error: error,\n      facilityId: facilityId\n    }\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/risk/risk.actions.getFacilityLimits.js"],"names":["authLogout","utils","getFacilityLimits","facilityId","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","getFacilityLimitReq","getFacilityLimitFailure","api","get","token","accessToken","path","then","response","handleResponse","json","handleResponseJsonObject","data","getFacilityLimitSuccess","catch","err","handleError","handleUnauthorized","type","payload","error"],"mappings":"AAAA,SAASA,UAAT,QAA2B,QAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,UAAD;AAAA,SAAgB,UAACC,QAAD,EAAWC,QAAX,EAAwB;AACvE;AADuE,oBAEZA,QAAQ,EAFI;AAAA,QAEvDC,IAFuD,aAE/DC,IAF+D,CAEvDD,IAFuD;AAAA,QAE7BE,QAF6B,aAE/CC,MAF+C,CAErCC,IAFqC,CAE7BF,QAF6B;;AAIvE,QAAMG,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE;AADa,KAArB;AAIAR,IAAAA,QAAQ,CAACS,mBAAmB,CAACV,UAAD,CAApB,CAAR;;AAEA,QAAI,CAACA,UAAL,EAAiB;AACfC,MAAAA,QAAQ,CAACU,uBAAuB,CAACH,YAAD,CAAxB,CAAR;AACA;AACD;;AAED,WAAOV,KAAK,CAACc,GAAN,CACJC,GADI,CACA;AACHC,MAAAA,KAAK,EAAEX,IAAI,CAACY,WADT;AAEHV,MAAAA,QAAQ,EAAEA,QAAQ,CAACF,IAFhB;AAGHa,MAAAA,IAAI,qCAA8BhB,UAA9B;AAHD,KADA,EAMJiB,IANI,CAMC,UAACC,QAAD;AAAA,aAAcpB,KAAK,CAACc,GAAN,CAAUO,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAND,EAOJD,IAPI,CAOC,UAACG,IAAD,EAAU;AACd,aAAOtB,KAAK,CAACc,GAAN,CAAUS,wBAAV,CAAmCD,IAAnC,CAAP;AACD,KATI,EAUJH,IAVI,CAUC,UAACK,IAAD,EAAU;AACdrB,MAAAA,QAAQ,CAACsB,uBAAuB,CAACD,IAAD,CAAxB,CAAR;AACA,aAAOA,IAAP;AACD,KAbI,EAcJE,KAdI,CAcE,UAACC,GAAD,EAAS;AACd3B,MAAAA,KAAK,CAACc,GAAN,CAAUc,WAAV,CAAsBD,GAAtB,EAA2BjB,YAA3B;AACAV,MAAAA,KAAK,CAACc,GAAN,CAAUe,kBAAV,CAA6BF,GAA7B,EAAkCxB,QAAlC,EAA4CJ,UAA5C;AACAI,MAAAA,QAAQ,CAACU,uBAAuB,CAACc,GAAD,EAAMzB,UAAN,CAAxB,CAAR;AACA,aAAOyB,GAAP;AACD,KAnBI,CAAP;AAoBD,GAnCgC;AAAA,CAA1B;AAqCP,OAAO,IAAMf,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACV,UAAD,EAAgB;AACjD,SAAO;AACL4B,IAAAA,IAAI,EAAE,iCADD;AAELC,IAAAA,OAAO,EAAE7B;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMuB,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACD,IAAD,EAAU;AAC/C,SAAO;AACLM,IAAAA,IAAI,EAAE,iCADD;AAELC,IAAAA,OAAO,EAAEP;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMX,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACmB,KAAD,EAAQ9B,UAAR,EAAuB;AAC5D,SAAO;AACL4B,IAAAA,IAAI,EAAE,iCADD;AAELC,IAAAA,OAAO,EAAE;AAAEC,MAAAA,KAAK,EAALA,KAAF;AAAS9B,MAAAA,UAAU,EAAVA;AAAT;AAFJ,GAAP;AAID,CALM","sourcesContent":["import { authLogout } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const getFacilityLimits = (facilityId) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } } } = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/risk.actions.getFacilityLimits',\r\n  };\r\n\r\n  dispatch(getFacilityLimitReq(facilityId));\r\n\r\n  if (!facilityId) {\r\n    dispatch(getFacilityLimitFailure(defaultError));\r\n    return;\r\n  }\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.auth,\r\n      path: `api/v1/limits?facilityId=${facilityId}`,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => {\r\n      return utils.api.handleResponseJsonObject(json);\r\n    })\r\n    .then((data) => {\r\n      dispatch(getFacilityLimitSuccess(data));\r\n      return data;\r\n    })\r\n    .catch((err) => {\r\n      utils.api.handleError(err, defaultError);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(getFacilityLimitFailure(err, facilityId));\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const getFacilityLimitReq = (facilityId) => {\r\n  return {\r\n    type: 'RISK_FACILITY_LIMIT_GET_REQUEST',\r\n    payload: facilityId,\r\n  };\r\n};\r\n\r\nexport const getFacilityLimitSuccess = (data) => {\r\n  return {\r\n    type: 'RISK_FACILITY_LIMIT_GET_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const getFacilityLimitFailure = (error, facilityId) => {\r\n  return {\r\n    type: 'RISK_FACILITY_LIMIT_GET_FAILURE',\r\n    payload: { error, facilityId },\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}