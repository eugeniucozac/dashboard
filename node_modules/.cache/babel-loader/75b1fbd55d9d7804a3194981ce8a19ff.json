{"ast":null,"code":"import _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport get from 'lodash/get';\nimport { createSelector } from 'reselect';\nimport { selectRefDataDepartments } from 'stores';\nimport * as utils from 'utils';\n\nvar getXbInstanceDepts = function getXbInstanceDepts(xbInstances) {\n  if (utils.generic.isInvalidOrEmptyArray(xbInstances)) return [];\n  return xbInstances.reduce(function (acc, cur) {\n    return [].concat(_toConsumableArray(acc), _toConsumableArray(cur.department || []));\n  }, []);\n};\n\nexport var selectUser = function selectUser(state) {\n  return state.user;\n};\nexport var selectUserAuthenticated = function selectUserAuthenticated(state) {\n  return Boolean(get(state, 'user.auth.accessToken'));\n};\nexport var selectUserAuthInProgress = function selectUserAuthInProgress(state) {\n  return Boolean(get(state, 'user.auth.inProgress'));\n};\nexport var selectIsBroker = createSelector(selectUser, function (user) {\n  return utils.user.isBroker(user);\n});\nexport var selectIsCobroker = createSelector(selectUser, function (user) {\n  return utils.user.isCobroker(user);\n});\nexport var selectIsUnderwriter = createSelector(selectUser, function (user) {\n  return utils.user.isUnderwriter(user);\n});\nexport var selectIsAdmin = createSelector(selectUser, function (user) {\n  return utils.user.isAdmin(user);\n});\nexport var selectUserIsExtended = createSelector(selectUser, function (user) {\n  return utils.user.isExtended(user);\n});\nexport var selectUserIsCurrent = createSelector(selectUser, function (user) {\n  return utils.user.isCurrentEdge(user);\n});\nexport var selectUserOffices = function selectUserOffices(state) {\n  return get(state, 'user.offices') || [];\n};\nexport var selectUserDetails = function selectUserDetails(state) {\n  return get(state, 'user.userDetails') || {};\n};\nexport var selectUserRole = function selectUserRole(state) {\n  return get(state, 'user.userRole') || {};\n};\nexport var selectUserGroup = function selectUserGroup(state) {\n  return get(state, 'user.group') || [];\n};\nexport var selectUserBusinessProcess = function selectUserBusinessProcess(state) {\n  return get(state, 'user.businessProcess') || [];\n};\nexport var selectUserXbInstance = function selectUserXbInstance(state) {\n  return get(state, 'user.xbInstance') || [];\n};\nexport var selectUserPrivilege = function selectUserPrivilege(state) {\n  return get(state, 'user.privilege') || {};\n};\nexport var selectUserRoutes = function selectUserRoutes(state) {\n  return get(state, 'user.routes') || [];\n};\nexport var selectIsReportAdmin = createSelector(selectUser, function (user) {\n  return utils.user.isReportAdmin(user);\n});\nexport var selectUserEmail = function selectUserEmail(state) {\n  return get(state, 'user.emailId') || '';\n};\nexport var selectUserDepartmentId = function selectUserDepartmentId(state) {\n  return get(state, 'user.departmentSelected');\n};\nexport var selectUserDepartmentIds = function selectUserDepartmentIds(state) {\n  return get(state, 'user.departmentIds') || [];\n};\nexport var selectUserDepartment = createSelector(selectUserIsExtended, selectUserXbInstance, selectUserDepartmentId, selectRefDataDepartments, function (isExtended, xbInstances, departmentId, departments) {\n  var depts = departments;\n\n  if (isExtended) {\n    depts = getXbInstanceDepts(xbInstances);\n  } else {\n    if (!departmentId || !utils.generic.isValidArray(departments)) return;\n  }\n\n  return depts.find(function (dept) {\n    return departmentId.toString() === dept.id.toString();\n  });\n});\nexport var selectUserDepartments = createSelector(selectUserIsExtended, selectUserXbInstance, selectUserDepartmentIds, selectRefDataDepartments, function (isExtended, xbInstances, deptIds, refDataDepts) {\n  var depts;\n\n  if (isExtended) {\n    depts = getXbInstanceDepts(xbInstances);\n  } else {\n    depts = deptIds.map(function (deptId) {\n      var department = utils.referenceData.departments.getById(refDataDepts, deptId) || {};\n      if (!deptId || !department.name) return null;\n      return {\n        id: department.id,\n        name: department.name\n      };\n    }).filter(function (dept) {\n      return dept;\n    });\n  }\n\n  return depts ? depts.filter(function (d) {\n    return d && d.id && d.name;\n  }) : [];\n});\nexport var selectUserOrganisation = function selectUserOrganisation(state) {\n  return {\n    id: get(state, 'user.organisation.id', ''),\n    name: get(state, 'user.organisation.name', '')\n  };\n};\nexport var selectHasUserTokenExpired = function selectHasUserTokenExpired(state) {\n  return get(state, 'user.hasTokenExpired') || false;\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/user/user.selectors.js"],"names":["get","createSelector","selectRefDataDepartments","utils","getXbInstanceDepts","xbInstances","generic","isInvalidOrEmptyArray","reduce","acc","cur","department","selectUser","state","user","selectUserAuthenticated","Boolean","selectUserAuthInProgress","selectIsBroker","isBroker","selectIsCobroker","isCobroker","selectIsUnderwriter","isUnderwriter","selectIsAdmin","isAdmin","selectUserIsExtended","isExtended","selectUserIsCurrent","isCurrentEdge","selectUserOffices","selectUserDetails","selectUserRole","selectUserGroup","selectUserBusinessProcess","selectUserXbInstance","selectUserPrivilege","selectUserRoutes","selectIsReportAdmin","isReportAdmin","selectUserEmail","selectUserDepartmentId","selectUserDepartmentIds","selectUserDepartment","departmentId","departments","depts","isValidArray","find","dept","toString","id","selectUserDepartments","deptIds","refDataDepts","map","deptId","referenceData","getById","name","filter","d","selectUserOrganisation","selectHasUserTokenExpired"],"mappings":"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","sourcesContent":["import get from 'lodash/get';\r\nimport { createSelector } from 'reselect';\r\nimport { selectRefDataDepartments } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nconst getXbInstanceDepts = (xbInstances) => {\r\n  if (utils.generic.isInvalidOrEmptyArray(xbInstances)) return [];\r\n\r\n  return xbInstances.reduce((acc, cur) => {\r\n    return [...acc, ...(cur.department || [])];\r\n  }, []);\r\n};\r\n\r\nexport const selectUser = (state) => state.user;\r\nexport const selectUserAuthenticated = (state) => Boolean(get(state, 'user.auth.accessToken'));\r\nexport const selectUserAuthInProgress = (state) => Boolean(get(state, 'user.auth.inProgress'));\r\n\r\nexport const selectIsBroker = createSelector(selectUser, (user) => utils.user.isBroker(user));\r\nexport const selectIsCobroker = createSelector(selectUser, (user) => utils.user.isCobroker(user));\r\nexport const selectIsUnderwriter = createSelector(selectUser, (user) => utils.user.isUnderwriter(user));\r\nexport const selectIsAdmin = createSelector(selectUser, (user) => utils.user.isAdmin(user));\r\n\r\nexport const selectUserIsExtended = createSelector(selectUser, (user) => utils.user.isExtended(user));\r\nexport const selectUserIsCurrent = createSelector(selectUser, (user) => utils.user.isCurrentEdge(user));\r\n\r\nexport const selectUserOffices = (state) => get(state, 'user.offices') || [];\r\nexport const selectUserDetails = (state) => get(state, 'user.userDetails') || {};\r\nexport const selectUserRole = (state) => get(state, 'user.userRole') || {};\r\nexport const selectUserGroup = (state) => get(state, 'user.group') || [];\r\nexport const selectUserBusinessProcess = (state) => get(state, 'user.businessProcess') || [];\r\nexport const selectUserXbInstance = (state) => get(state, 'user.xbInstance') || [];\r\nexport const selectUserPrivilege = (state) => get(state, 'user.privilege') || {};\r\nexport const selectUserRoutes = (state) => get(state, 'user.routes') || [];\r\nexport const selectIsReportAdmin = createSelector(selectUser, (user) => utils.user.isReportAdmin(user));\r\nexport const selectUserEmail = (state) => get(state, 'user.emailId') || '';\r\n\r\nexport const selectUserDepartmentId = (state) => get(state, 'user.departmentSelected');\r\nexport const selectUserDepartmentIds = (state) => get(state, 'user.departmentIds') || [];\r\n\r\nexport const selectUserDepartment = createSelector(\r\n  selectUserIsExtended,\r\n  selectUserXbInstance,\r\n  selectUserDepartmentId,\r\n  selectRefDataDepartments,\r\n  (isExtended, xbInstances, departmentId, departments) => {\r\n    let depts = departments;\r\n\r\n    if (isExtended) {\r\n      depts = getXbInstanceDepts(xbInstances);\r\n    } else {\r\n      if (!departmentId || !utils.generic.isValidArray(departments)) return;\r\n    }\r\n\r\n    return depts.find((dept) => departmentId.toString() === dept.id.toString());\r\n  }\r\n);\r\n\r\nexport const selectUserDepartments = createSelector(\r\n  selectUserIsExtended,\r\n  selectUserXbInstance,\r\n  selectUserDepartmentIds,\r\n  selectRefDataDepartments,\r\n  (isExtended, xbInstances, deptIds, refDataDepts) => {\r\n    let depts;\r\n\r\n    if (isExtended) {\r\n      depts = getXbInstanceDepts(xbInstances);\r\n    } else {\r\n      depts = deptIds\r\n        .map((deptId) => {\r\n          const department = utils.referenceData.departments.getById(refDataDepts, deptId) || {};\r\n\r\n          if (!deptId || !department.name) return null;\r\n\r\n          return {\r\n            id: department.id,\r\n            name: department.name,\r\n          };\r\n        })\r\n        .filter((dept) => dept);\r\n    }\r\n\r\n    return depts ? depts.filter((d) => d && d.id && d.name) : [];\r\n  }\r\n);\r\n\r\nexport const selectUserOrganisation = (state) => ({\r\n  id: get(state, 'user.organisation.id', ''),\r\n  name: get(state, 'user.organisation.name', ''),\r\n});\r\n\r\nexport const selectHasUserTokenExpired = (state) => get(state, 'user.hasTokenExpired') || false;\r\n"]},"metadata":{},"sourceType":"module"}