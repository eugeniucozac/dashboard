{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\forms\\\\AddClaimTaskNote\\\\AddClaimTaskNote.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport * as Yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup'; // app\n\nimport { AddClaimTaskNoteView } from './AddClaimTaskNote.view';\nimport { useFormActions } from 'hooks';\nimport { addTaskNote } from 'stores';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nAddClaimTaskNote.propTypes = {\n  taskObj: PropTypes.object.isRequired,\n  setIsDirty: PropTypes.func.isRequired,\n  confirmHandler: PropTypes.func.isRequired\n};\nexport default function AddClaimTaskNote(_ref) {\n  _s();\n\n  var taskObj = _ref.taskObj,\n      setIsDirty = _ref.setIsDirty,\n      confirmHandler = _ref.confirmHandler;\n  var dispatch = useDispatch();\n  var fields = [{\n    name: 'claimRef',\n    type: 'hidden',\n    value: (taskObj === null || taskObj === void 0 ? void 0 : taskObj.processRef) || '',\n    textOnly: true\n  }, {\n    name: 'taskId',\n    type: 'hidden',\n    value: taskObj === null || taskObj === void 0 ? void 0 : taskObj.taskRef,\n    textOnly: true\n  }, {\n    name: 'taskType',\n    type: 'hidden',\n    value: (taskObj === null || taskObj === void 0 ? void 0 : taskObj.taskType) || '',\n    textOnly: true\n  }, {\n    name: 'details',\n    type: 'textarea',\n    value: '',\n    muiComponentProps: {\n      multiline: true,\n      rows: 3,\n      rowsMax: 6\n    },\n    validation: Yup.string().max(1000, utils.string.t('validation.string.max')).required(utils.string.t('validation.required'))\n  }];\n  var actions = [{\n    name: 'cancel',\n    label: utils.string.t('app.cancel'),\n    handler: function handler() {\n      confirmHandler();\n    }\n  }, {\n    name: 'submit',\n    label: utils.string.t('app.save'),\n    handler: function handler(formValues) {\n      return dispatch(addTaskNote(formValues, taskObj));\n    }\n  }];\n  var defaultValues = utils.form.getInitialValues(fields);\n  var validationSchema = utils.form.getValidationSchema(fields);\n  var formProps = useForm(_objectSpread({\n    defaultValues: defaultValues\n  }, validationSchema && {\n    resolver: yupResolver(validationSchema)\n  }));\n\n  var _useFormActions = useFormActions(actions),\n      cancel = _useFormActions.cancel,\n      submit = _useFormActions.submit;\n\n  var formValues = formProps.watch(['details']);\n  useEffect(function () {\n    // the form is considered dirty if any of the values are truthy\n    var isDirty = Object.values(formValues).some(function (v) {\n      return Boolean(v);\n    });\n    setIsDirty(isDirty);\n  }, [formValues]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/_jsxDEV(AddClaimTaskNoteView, {\n    fields: fields,\n    buttons: {\n      cancel: cancel,\n      submit: submit\n    },\n    formProps: formProps\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 10\n  }, this);\n}\n\n_s(AddClaimTaskNote, \"dskVvMMTibq4VFcDkX8A5+SbCPY=\", false, function () {\n  return [useDispatch, useForm, useFormActions];\n});\n\n_c = AddClaimTaskNote;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddClaimTaskNote\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/forms/AddClaimTaskNote/AddClaimTaskNote.js"],"names":["React","useEffect","PropTypes","useDispatch","useForm","Yup","yupResolver","AddClaimTaskNoteView","useFormActions","addTaskNote","utils","AddClaimTaskNote","propTypes","taskObj","object","isRequired","setIsDirty","func","confirmHandler","dispatch","fields","name","type","value","processRef","textOnly","taskRef","taskType","muiComponentProps","multiline","rows","rowsMax","validation","string","max","t","required","actions","label","handler","formValues","defaultValues","form","getInitialValues","validationSchema","getValidationSchema","formProps","resolver","cancel","submit","watch","isDirty","Object","values","some","v","Boolean"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useForm } from 'react-hook-form';\r\nimport * as Yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n\r\n// app\r\nimport { AddClaimTaskNoteView } from './AddClaimTaskNote.view';\r\nimport { useFormActions } from 'hooks';\r\nimport { addTaskNote } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nAddClaimTaskNote.propTypes = {\r\n  taskObj: PropTypes.object.isRequired,\r\n  setIsDirty: PropTypes.func.isRequired,\r\n  confirmHandler: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default function AddClaimTaskNote({ taskObj, setIsDirty, confirmHandler }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const fields = [\r\n    {\r\n      name: 'claimRef',\r\n      type: 'hidden',\r\n      value: taskObj?.processRef || '',\r\n      textOnly: true,\r\n    },\r\n    {\r\n      name: 'taskId',\r\n      type: 'hidden',\r\n      value: taskObj?.taskRef,\r\n      textOnly: true,\r\n    },\r\n    {\r\n      name: 'taskType',\r\n      type: 'hidden',\r\n      value: taskObj?.taskType || '',\r\n      textOnly: true,\r\n    },\r\n    {\r\n      name: 'details',\r\n      type: 'textarea',\r\n      value: '',\r\n      muiComponentProps: {\r\n        multiline: true,\r\n        rows: 3,\r\n        rowsMax: 6,\r\n      },\r\n      validation: Yup.string().max(1000, utils.string.t('validation.string.max')).required(utils.string.t('validation.required')),\r\n    },\r\n  ];\r\n\r\n  const actions = [\r\n    {\r\n      name: 'cancel',\r\n      label: utils.string.t('app.cancel'),\r\n      handler: () => {\r\n        confirmHandler();\r\n      },\r\n    },\r\n    {\r\n      name: 'submit',\r\n      label: utils.string.t('app.save'),\r\n      handler: (formValues) => {\r\n        return dispatch(addTaskNote(formValues, taskObj));\r\n      },\r\n    },\r\n  ];\r\n\r\n  const defaultValues = utils.form.getInitialValues(fields);\r\n  const validationSchema = utils.form.getValidationSchema(fields);\r\n\r\n  const formProps = useForm({\r\n    defaultValues,\r\n    ...(validationSchema && { resolver: yupResolver(validationSchema) }),\r\n  });\r\n\r\n  const { cancel, submit } = useFormActions(actions);\r\n\r\n  const formValues = formProps.watch(['details']);\r\n\r\n  useEffect(() => {\r\n    // the form is considered dirty if any of the values are truthy\r\n    const isDirty = Object.values(formValues).some((v) => Boolean(v));\r\n\r\n    setIsDirty(isDirty);\r\n  }, [formValues]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return <AddClaimTaskNoteView fields={fields} buttons={{ cancel, submit }} formProps={formProps} />;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}