{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport omit from 'lodash/omit';\nimport get from 'lodash/get'; // app\n\nimport { addLoader, authLogout, enqueueNotification, removeLoader } from 'stores';\nimport * as utils from 'utils';\nexport var putTrip = function putTrip() {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/trip.actions.putTrip',\n      message: 'Data missing for PUT request'\n    };\n    var state = getState();\n    var tripSelected = get(state, 'trip.selected') || {};\n    var tripEditingInProgress = get(state, 'trip.editingInProgress') || {};\n    var trip = tripSelected.editing ? _objectSpread(_objectSpread({}, tripSelected), tripEditingInProgress) : tripSelected;\n    var visits = trip.visits || [];\n    dispatch(putTripRequest(trip.id));\n    dispatch(addLoader('putTrip'));\n\n    if (!trip.id) {\n      dispatch(putTripFailure(defaultError));\n      dispatch(enqueueNotification('notification.editTrip.fail', 'error'));\n      dispatch(removeLoader('putTrip'));\n      return;\n    } // get the data for PUT\n\n\n    var body = _objectSpread(_objectSpread({}, omit(trip, ['visits'])), {}, {\n      visit: visits.map(function (visit) {\n        if (visit.isExistingLeadVisit) {\n          return omit(visit, ['isExistingLeadVisit', 'isNewVisit']);\n        }\n\n        if (visit.isNewVisit) {\n          return omit(visit, ['isNewVisit', 'id']);\n        }\n\n        return visit;\n      })\n    });\n\n    return utils.api.put({\n      token: auth.accessToken,\n      endpoint: endpoint.edge,\n      path: 'api/trip',\n      data: body\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleData(json);\n    }).then(function (data) {\n      dispatch(putTripSuccess(data));\n      dispatch(enqueueNotification('notification.editTrip.success', 'success'));\n    }).catch(function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API post error (trip.putTrip)'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(putTripFailure(err));\n      dispatch(enqueueNotification('notification.editTrip.fail', 'error'));\n      return err;\n    }).finally(function () {\n      dispatch(removeLoader('putTrip'));\n    });\n  };\n};\nexport var putTripRequest = function putTripRequest(formData) {\n  return {\n    type: 'TRIP_PUT_REQUEST',\n    payload: formData\n  };\n};\nexport var putTripSuccess = function putTripSuccess(responseData) {\n  return {\n    type: 'TRIP_PUT_SUCCESS',\n    payload: responseData\n  };\n};\nexport var putTripFailure = function putTripFailure(error) {\n  return {\n    type: 'TRIP_PUT_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/trip/trip.actions.putTrip.js"],"names":["omit","get","addLoader","authLogout","enqueueNotification","removeLoader","utils","putTrip","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","message","state","tripSelected","tripEditingInProgress","trip","editing","visits","putTripRequest","id","putTripFailure","body","visit","map","isExistingLeadVisit","isNewVisit","api","put","token","accessToken","edge","path","data","then","response","handleResponse","json","handleData","putTripSuccess","catch","err","errorParams","handleError","handleUnauthorized","finally","formData","type","payload","responseData","error"],"mappings":";AAAA,OAAOA,IAAP,MAAiB,aAAjB;AACA,OAAOC,GAAP,MAAgB,YAAhB,C,CAEA;;AACA,SAASC,SAAT,EAAoBC,UAApB,EAAgCC,mBAAhC,EAAqDC,YAArD,QAAyE,QAAzE;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA,SAAM,UAACC,QAAD,EAAWC,QAAX,EAAwB;AACnD;AADmD,oBAEMA,QAAQ,EAFd;AAAA,QAEnCC,IAFmC,aAE3CC,IAF2C,CAEnCD,IAFmC;AAAA,QAETE,QAFS,aAE3BC,MAF2B,CAEjBC,IAFiB,CAETF,QAFS;;AAInD,QAAMG,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE,6BADa;AAEnBC,MAAAA,OAAO,EAAE;AAFU,KAArB;AAKA,QAAMC,KAAK,GAAGT,QAAQ,EAAtB;AACA,QAAMU,YAAY,GAAGlB,GAAG,CAACiB,KAAD,EAAQ,eAAR,CAAH,IAA+B,EAApD;AACA,QAAME,qBAAqB,GAAGnB,GAAG,CAACiB,KAAD,EAAQ,wBAAR,CAAH,IAAwC,EAAtE;AACA,QAAMG,IAAI,GAAGF,YAAY,CAACG,OAAb,mCAA4BH,YAA5B,GAA6CC,qBAA7C,IAAuED,YAApF;AACA,QAAMI,MAAM,GAAGF,IAAI,CAACE,MAAL,IAAe,EAA9B;AAEAf,IAAAA,QAAQ,CAACgB,cAAc,CAACH,IAAI,CAACI,EAAN,CAAf,CAAR;AACAjB,IAAAA,QAAQ,CAACN,SAAS,CAAC,SAAD,CAAV,CAAR;;AAEA,QAAI,CAACmB,IAAI,CAACI,EAAV,EAAc;AACZjB,MAAAA,QAAQ,CAACkB,cAAc,CAACX,YAAD,CAAf,CAAR;AACAP,MAAAA,QAAQ,CAACJ,mBAAmB,CAAC,4BAAD,EAA+B,OAA/B,CAApB,CAAR;AACAI,MAAAA,QAAQ,CAACH,YAAY,CAAC,SAAD,CAAb,CAAR;AACA;AACD,KAvBkD,CAyBnD;;;AACA,QAAMsB,IAAI,mCACL3B,IAAI,CAACqB,IAAD,EAAO,CAAC,QAAD,CAAP,CADC;AAERO,MAAAA,KAAK,EAAEL,MAAM,CAACM,GAAP,CAAW,UAACD,KAAD,EAAW;AAC3B,YAAIA,KAAK,CAACE,mBAAV,EAA+B;AAC7B,iBAAO9B,IAAI,CAAC4B,KAAD,EAAQ,CAAC,qBAAD,EAAwB,YAAxB,CAAR,CAAX;AACD;;AAED,YAAIA,KAAK,CAACG,UAAV,EAAsB;AACpB,iBAAO/B,IAAI,CAAC4B,KAAD,EAAQ,CAAC,YAAD,EAAe,IAAf,CAAR,CAAX;AACD;;AAED,eAAOA,KAAP;AACD,OAVM;AAFC,MAAV;;AAeA,WAAOtB,KAAK,CAAC0B,GAAN,CACJC,GADI,CACA;AACHC,MAAAA,KAAK,EAAExB,IAAI,CAACyB,WADT;AAEHvB,MAAAA,QAAQ,EAAEA,QAAQ,CAACwB,IAFhB;AAGHC,MAAAA,IAAI,EAAE,UAHH;AAIHC,MAAAA,IAAI,EAAEX;AAJH,KADA,EAOJY,IAPI,CAOC,UAACC,QAAD;AAAA,aAAclC,KAAK,CAAC0B,GAAN,CAAUS,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAPD,EAQJD,IARI,CAQC,UAACG,IAAD;AAAA,aAAUpC,KAAK,CAAC0B,GAAN,CAAUW,UAAV,CAAqBD,IAArB,CAAV;AAAA,KARD,EASJH,IATI,CASC,UAACD,IAAD,EAAU;AACd9B,MAAAA,QAAQ,CAACoC,cAAc,CAACN,IAAD,CAAf,CAAR;AACA9B,MAAAA,QAAQ,CAACJ,mBAAmB,CAAC,+BAAD,EAAkC,SAAlC,CAApB,CAAR;AACD,KAZI,EAaJyC,KAbI,CAaE,UAACC,GAAD,EAAS;AACd,UAAMC,WAAW,mCACZhC,YADY;AAEfE,QAAAA,OAAO,EAAE;AAFM,QAAjB;;AAKAX,MAAAA,KAAK,CAAC0B,GAAN,CAAUgB,WAAV,CAAsBF,GAAtB,EAA2BC,WAA3B;AACAzC,MAAAA,KAAK,CAAC0B,GAAN,CAAUiB,kBAAV,CAA6BH,GAA7B,EAAkCtC,QAAlC,EAA4CL,UAA5C;AACAK,MAAAA,QAAQ,CAACkB,cAAc,CAACoB,GAAD,CAAf,CAAR;AACAtC,MAAAA,QAAQ,CAACJ,mBAAmB,CAAC,4BAAD,EAA+B,OAA/B,CAApB,CAAR;AACA,aAAO0C,GAAP;AACD,KAxBI,EAyBJI,OAzBI,CAyBI,YAAM;AACb1C,MAAAA,QAAQ,CAACH,YAAY,CAAC,SAAD,CAAb,CAAR;AACD,KA3BI,CAAP;AA4BD,GArEsB;AAAA,CAAhB;AAuEP,OAAO,IAAMmB,cAAc,GAAG,SAAjBA,cAAiB,CAAC2B,QAAD,EAAc;AAC1C,SAAO;AACLC,IAAAA,IAAI,EAAE,kBADD;AAELC,IAAAA,OAAO,EAAEF;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMP,cAAc,GAAG,SAAjBA,cAAiB,CAACU,YAAD,EAAkB;AAC9C,SAAO;AACLF,IAAAA,IAAI,EAAE,kBADD;AAELC,IAAAA,OAAO,EAAEC;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAM5B,cAAc,GAAG,SAAjBA,cAAiB,CAAC6B,KAAD,EAAW;AACvC,SAAO;AACLH,IAAAA,IAAI,EAAE,kBADD;AAELC,IAAAA,OAAO,EAAEE;AAFJ,GAAP;AAID,CALM","sourcesContent":["import omit from 'lodash/omit';\r\nimport get from 'lodash/get';\r\n\r\n// app\r\nimport { addLoader, authLogout, enqueueNotification, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const putTrip = () => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/trip.actions.putTrip',\r\n    message: 'Data missing for PUT request',\r\n  };\r\n\r\n  const state = getState();\r\n  const tripSelected = get(state, 'trip.selected') || {};\r\n  const tripEditingInProgress = get(state, 'trip.editingInProgress') || {};\r\n  const trip = tripSelected.editing ? { ...tripSelected, ...tripEditingInProgress } : tripSelected;\r\n  const visits = trip.visits || [];\r\n\r\n  dispatch(putTripRequest(trip.id));\r\n  dispatch(addLoader('putTrip'));\r\n\r\n  if (!trip.id) {\r\n    dispatch(putTripFailure(defaultError));\r\n    dispatch(enqueueNotification('notification.editTrip.fail', 'error'));\r\n    dispatch(removeLoader('putTrip'));\r\n    return;\r\n  }\r\n\r\n  // get the data for PUT\r\n  const body = {\r\n    ...omit(trip, ['visits']),\r\n    visit: visits.map((visit) => {\r\n      if (visit.isExistingLeadVisit) {\r\n        return omit(visit, ['isExistingLeadVisit', 'isNewVisit']);\r\n      }\r\n\r\n      if (visit.isNewVisit) {\r\n        return omit(visit, ['isNewVisit', 'id']);\r\n      }\r\n\r\n      return visit;\r\n    }),\r\n  };\r\n\r\n  return utils.api\r\n    .put({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.edge,\r\n      path: 'api/trip',\r\n      data: body,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleData(json))\r\n    .then((data) => {\r\n      dispatch(putTripSuccess(data));\r\n      dispatch(enqueueNotification('notification.editTrip.success', 'success'));\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        ...defaultError,\r\n        message: 'API post error (trip.putTrip)',\r\n      };\r\n\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(putTripFailure(err));\r\n      dispatch(enqueueNotification('notification.editTrip.fail', 'error'));\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('putTrip'));\r\n    });\r\n};\r\n\r\nexport const putTripRequest = (formData) => {\r\n  return {\r\n    type: 'TRIP_PUT_REQUEST',\r\n    payload: formData,\r\n  };\r\n};\r\n\r\nexport const putTripSuccess = (responseData) => {\r\n  return {\r\n    type: 'TRIP_PUT_SUCCESS',\r\n    payload: responseData,\r\n  };\r\n};\r\n\r\nexport const putTripFailure = (error) => {\r\n  return {\r\n    type: 'TRIP_PUT_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}