{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\PremiumProcessingCaseNotes\\\\PremiumProcessingCaseNotes.view.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport orderBy from 'lodash/orderBy'; //app\n\nimport { FormContainer, FormFields, FormText, Button, FormGrid, Translate } from 'components';\nimport styles from './PremiumProcessingCaseNotes.styles';\nimport * as utils from 'utils';\nimport { premiumProcessingNoteSave } from 'stores';\nimport { NOTES_API_SUCCESS_STATUS, NOTES_STAGECODE } from 'consts'; // mui\n\nimport { makeStyles, Box, Grid, Divider, Typography } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nPremiumProcessingCaseNotesView.propTypes = {\n  taskId: PropTypes.string.isRequired,\n  caseNotesHistory: PropTypes.array,\n  enableSaveNotes: PropTypes.bool,\n  fields: PropTypes.array,\n  bpmStageName: PropTypes.arrayOf(PropTypes.shape({\n    bpmStageCode: PropTypes.string.isRequired,\n    bpmStageName: PropTypes.string.isRequired\n  })).isRequired\n};\nexport default function PremiumProcessingCaseNotesView(_ref) {\n  _s();\n\n  var _this = this;\n\n  var taskId = _ref.taskId,\n      caseNotesHistory = _ref.caseNotesHistory,\n      enableSaveNotes = _ref.enableSaveNotes,\n      fields = _ref.fields,\n      bpmStageName = _ref.bpmStageName;\n  var classes = makeStyles(styles, {\n    name: 'PremiumProcessingCaseNotes'\n  })();\n  var defaultValues = utils.form.getInitialValues(fields);\n\n  var _useForm = useForm({\n    defaultValues: defaultValues\n  }),\n      control = _useForm.control,\n      errors = _useForm.errors,\n      watch = _useForm.watch,\n      reset = _useForm.reset;\n\n  var dispatch = useDispatch();\n  var notesFieldValue = watch('notesField');\n  enableSaveNotes = notesFieldValue ? true : false;\n  var notesLength = 150;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      expanded = _useState2[0],\n      setExpanded = _useState2[1];\n\n  var caseNotesHistoryDesc = orderBy(caseNotesHistory, ['commentedDate'], ['desc']);\n  useEffect(function () {}, [enableSaveNotes, notesFieldValue]);\n\n  var saveNotes = function saveNotes(noteComments) {\n    dispatch(premiumProcessingNoteSave({\n      comments: noteComments,\n      taskId: taskId\n    })).then(function (response) {\n      if ((response === null || response === void 0 ? void 0 : response.status) === NOTES_API_SUCCESS_STATUS) {\n        reset('', 'notesField');\n      }\n    });\n  };\n\n  var handleClickExpandCollapse = function handleClickExpandCollapse(id, labelText) {\n    return function () {\n      if (labelText === 'app.seeMore') {\n        setExpanded([].concat(_toConsumableArray(expanded), [id]));\n      } else {\n        setExpanded(_toConsumableArray(expanded === null || expanded === void 0 ? void 0 : expanded.filter(function (item) {\n          return item !== id;\n        })));\n      }\n    };\n  };\n\n  var toggle_button = function toggle_button(notesData, labelText) {\n    return /*#__PURE__*/_jsxDEV(Button, {\n      size: \"xsmall\",\n      variant: \"text\",\n      text: /*#__PURE__*/_jsxDEV(Translate, {\n        label: labelText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, _this),\n      onClick: handleClickExpandCollapse(notesData === null || notesData === void 0 ? void 0 : notesData.notesId, labelText),\n      nestedClasses: {\n        btn: classes.toggle,\n        label: classes.label\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }, _this);\n  };\n\n  var notesMessageTruncated = function notesMessageTruncated(noteMsg) {\n    var _noteMsg$notes;\n\n    var isCollapsed = !expanded.includes(noteMsg.notesId);\n    var isTruncated = (noteMsg === null || noteMsg === void 0 ? void 0 : (_noteMsg$notes = noteMsg.notes) === null || _noteMsg$notes === void 0 ? void 0 : _noteMsg$notes.length) > notesLength;\n\n    if (isTruncated && isCollapsed) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [noteMsg === null || noteMsg === void 0 ? void 0 : noteMsg.notes.slice(0, notesLength - 20).trim(), \"...\", toggle_button(noteMsg, 'app.seeMore')]\n      }, void 0, true);\n    } else {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [noteMsg === null || noteMsg === void 0 ? void 0 : noteMsg.notes, isTruncated && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: toggle_button(noteMsg, 'app.seeLess')\n        }, void 0, false)]\n      }, void 0, true);\n    }\n  };\n\n  var getStageName = function getStageName(stageCodes) {\n    if (stageCodes !== NOTES_STAGECODE) {\n      var _bpmStageName$find;\n\n      return bpmStageName === null || bpmStageName === void 0 ? void 0 : (_bpmStageName$find = bpmStageName.find(function (bpmName) {\n        var _bpmName$bpmStageCode;\n\n        return (bpmName === null || bpmName === void 0 ? void 0 : (_bpmName$bpmStageCode = bpmName.bpmStageCode) === null || _bpmName$bpmStageCode === void 0 ? void 0 : _bpmName$bpmStageCode.toString()) === (stageCodes === null || stageCodes === void 0 ? void 0 : stageCodes.toString());\n      })) === null || _bpmStageName$find === void 0 ? void 0 : _bpmStageName$find.bpmShortStageName;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(FormContainer, {\n    children: [/*#__PURE__*/_jsxDEV(FormFields, {\n      children: [/*#__PURE__*/_jsxDEV(FormText, _objectSpread(_objectSpread({}, utils.form.getFieldProps(fields, 'notesField')), {}, {\n        control: control,\n        error: errors.notes\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        className: classes.noteSaveButton,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          color: \"primary\",\n          size: \"small\",\n          text: utils.string.t('premiumProcessing.caseSummary.saveNote'),\n          onClick: function onClick() {\n            saveNotes(notesFieldValue);\n          },\n          disabled: !enableSaveNotes\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormGrid, {\n      children: caseNotesHistoryDesc.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n        \"data-testid\": \"notes\",\n        marginTop: 2,\n        children: caseNotesHistoryDesc.map(function (note, idx) {\n          var bpmStageNames = getStageName(note.stageCode);\n          return /*#__PURE__*/_jsxDEV(Box, {\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              py: 2,\n              children: [/*#__PURE__*/_jsxDEV(FormGrid, {\n                container: true,\n                alignItems: \"center\",\n                justify: \"flex-start\",\n                spacing: 1,\n                children: /*#__PURE__*/_jsxDEV(FormGrid, {\n                  item: true,\n                  children: [note.stageCode === NOTES_STAGECODE && /*#__PURE__*/_jsxDEV(Typography, {\n                    className: classes.noteStatus,\n                    children: [utils.string.t('premiumProcessing.stage'), \":\", ' ', utils.string.t('premiumProcessing.caseDetailsSection.processingInstruction')]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 122,\n                    columnNumber: 27\n                  }, _this), note.stageCode !== NOTES_STAGECODE && /*#__PURE__*/_jsxDEV(Typography, {\n                    className: classes.noteStatus,\n                    children: [utils.string.t('premiumProcessing.stage'), \": \", bpmStageNames]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 128,\n                    columnNumber: 27\n                  }, _this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 120,\n                  columnNumber: 23\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 21\n              }, _this), /*#__PURE__*/_jsxDEV(Box, {\n                pb: 2,\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  children: notesMessageTruncated(note)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 135,\n                  columnNumber: 23\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 134,\n                columnNumber: 21\n              }, _this), /*#__PURE__*/_jsxDEV(Box, {\n                className: classes.noteUpdatedBy,\n                children: [utils.string.t('premiumProcessing.commentedBy'), \" \", note.commentedBy, \" (\", note.roleName, \") -\", note.commentedDate]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 21\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 19\n            }, _this), idx !== caseNotesHistory.length - 1 && /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 59\n            }, _this)]\n          }, note.notesId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 17\n          }, _this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PremiumProcessingCaseNotesView, \"KhzGOq2fdixgsmBR37/9ybd2qZo=\", false, function () {\n  return [useForm, useDispatch];\n});\n\n_c = PremiumProcessingCaseNotesView;\n\nvar _c;\n\n$RefreshReg$(_c, \"PremiumProcessingCaseNotesView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/PremiumProcessingCaseNotes/PremiumProcessingCaseNotes.view.js"],"names":["React","useEffect","useState","useForm","useDispatch","PropTypes","orderBy","FormContainer","FormFields","FormText","Button","FormGrid","Translate","styles","utils","premiumProcessingNoteSave","NOTES_API_SUCCESS_STATUS","NOTES_STAGECODE","makeStyles","Box","Grid","Divider","Typography","PremiumProcessingCaseNotesView","propTypes","taskId","string","isRequired","caseNotesHistory","array","enableSaveNotes","bool","fields","bpmStageName","arrayOf","shape","bpmStageCode","classes","name","defaultValues","form","getInitialValues","control","errors","watch","reset","dispatch","notesFieldValue","notesLength","expanded","setExpanded","caseNotesHistoryDesc","saveNotes","noteComments","comments","then","response","status","handleClickExpandCollapse","id","labelText","filter","item","toggle_button","notesData","notesId","btn","toggle","label","notesMessageTruncated","noteMsg","isCollapsed","includes","isTruncated","notes","length","slice","trim","getStageName","stageCodes","find","bpmName","toString","bpmShortStageName","getFieldProps","noteSaveButton","t","map","note","idx","bpmStageNames","stageCode","noteStatus","noteUpdatedBy","commentedBy","roleName","commentedDate"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport orderBy from 'lodash/orderBy';\r\n\r\n//app\r\nimport { FormContainer, FormFields, FormText, Button, FormGrid, Translate } from 'components';\r\nimport styles from './PremiumProcessingCaseNotes.styles';\r\nimport * as utils from 'utils';\r\nimport { premiumProcessingNoteSave } from 'stores';\r\nimport { NOTES_API_SUCCESS_STATUS, NOTES_STAGECODE } from 'consts';\r\n\r\n// mui\r\nimport { makeStyles, Box, Grid, Divider, Typography } from '@material-ui/core';\r\n\r\nPremiumProcessingCaseNotesView.propTypes = {\r\n  taskId: PropTypes.string.isRequired,\r\n  caseNotesHistory: PropTypes.array,\r\n  enableSaveNotes: PropTypes.bool,\r\n  fields: PropTypes.array,\r\n  bpmStageName: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      bpmStageCode: PropTypes.string.isRequired,\r\n      bpmStageName: PropTypes.string.isRequired,\r\n    })\r\n  ).isRequired,\r\n};\r\n\r\nexport default function PremiumProcessingCaseNotesView({ taskId, caseNotesHistory, enableSaveNotes, fields, bpmStageName }) {\r\n  const classes = makeStyles(styles, { name: 'PremiumProcessingCaseNotes' })();\r\n  const defaultValues = utils.form.getInitialValues(fields);\r\n  const { control, errors, watch, reset } = useForm({ defaultValues });\r\n  const dispatch = useDispatch();\r\n  const notesFieldValue = watch('notesField');\r\n  enableSaveNotes = notesFieldValue ? true : false;\r\n  const notesLength = 150;\r\n  const [expanded, setExpanded] = useState([]);\r\n  const caseNotesHistoryDesc = orderBy(caseNotesHistory, ['commentedDate'], ['desc']);\r\n\r\n  useEffect(() => {}, [enableSaveNotes, notesFieldValue]);\r\n  const saveNotes = (noteComments) => {\r\n    dispatch(premiumProcessingNoteSave({ comments: noteComments, taskId: taskId })).then((response) => {\r\n      if (response?.status === NOTES_API_SUCCESS_STATUS) {\r\n        reset('', 'notesField');\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleClickExpandCollapse = (id, labelText) => () => {\r\n    if (labelText === 'app.seeMore') {\r\n      setExpanded([...expanded, id]);\r\n    } else {\r\n      setExpanded([...expanded?.filter((item) => item !== id)]);\r\n    }\r\n  };\r\n\r\n  const toggle_button = (notesData, labelText) => (\r\n    <Button\r\n      size=\"xsmall\"\r\n      variant=\"text\"\r\n      text={<Translate label={labelText} />}\r\n      onClick={handleClickExpandCollapse(notesData?.notesId, labelText)}\r\n      nestedClasses={{ btn: classes.toggle, label: classes.label }}\r\n    />\r\n  );\r\n\r\n  const notesMessageTruncated = (noteMsg) => {\r\n    const isCollapsed = !expanded.includes(noteMsg.notesId);\r\n    const isTruncated = noteMsg?.notes?.length > notesLength;\r\n    if (isTruncated && isCollapsed) {\r\n      return (\r\n        <>\r\n          {noteMsg?.notes.slice(0, notesLength - 20).trim()}\r\n          ...\r\n          {toggle_button(noteMsg, 'app.seeMore')}\r\n        </>\r\n      );\r\n    } else {\r\n      return (\r\n        <>\r\n          {noteMsg?.notes}\r\n          {isTruncated && <>{toggle_button(noteMsg, 'app.seeLess')}</>}\r\n        </>\r\n      );\r\n    }\r\n  };\r\n\r\n  const getStageName = (stageCodes) => {\r\n    if (stageCodes !== NOTES_STAGECODE) {\r\n      return bpmStageName?.find((bpmName) => bpmName?.bpmStageCode?.toString() === stageCodes?.toString())?.bpmShortStageName;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FormContainer>\r\n      <FormFields>\r\n        <FormText {...utils.form.getFieldProps(fields, 'notesField')} control={control} error={errors.notes} />\r\n        <Grid item className={classes.noteSaveButton}>\r\n          <Button\r\n            color=\"primary\"\r\n            size=\"small\"\r\n            text={utils.string.t('premiumProcessing.caseSummary.saveNote')}\r\n            onClick={() => {\r\n              saveNotes(notesFieldValue);\r\n            }}\r\n            disabled={!enableSaveNotes}\r\n          />\r\n        </Grid>\r\n      </FormFields>\r\n      <FormGrid>\r\n        {caseNotesHistoryDesc.length > 0 && (\r\n          <Box data-testid=\"notes\" marginTop={2}>\r\n            {caseNotesHistoryDesc.map((note, idx) => {\r\n              const bpmStageNames = getStageName(note.stageCode);\r\n              return (\r\n                <Box key={note.notesId}>\r\n                  <Box py={2}>\r\n                    <FormGrid container alignItems=\"center\" justify=\"flex-start\" spacing={1}>\r\n                      <FormGrid item>\r\n                        {note.stageCode === NOTES_STAGECODE && (\r\n                          <Typography className={classes.noteStatus}>\r\n                            {utils.string.t('premiumProcessing.stage')}:{' '}\r\n                            {utils.string.t('premiumProcessing.caseDetailsSection.processingInstruction')}\r\n                          </Typography>\r\n                        )}\r\n                        {note.stageCode !== NOTES_STAGECODE && (\r\n                          <Typography className={classes.noteStatus}>\r\n                            {utils.string.t('premiumProcessing.stage')}: {bpmStageNames}\r\n                          </Typography>\r\n                        )}\r\n                      </FormGrid>\r\n                    </FormGrid>\r\n                    <Box pb={2}>\r\n                      <Typography>{notesMessageTruncated(note)}</Typography>\r\n                    </Box>\r\n                    <Box className={classes.noteUpdatedBy}>\r\n                      {utils.string.t('premiumProcessing.commentedBy')} {note.commentedBy} ({note.roleName}) -{note.commentedDate}\r\n                    </Box>\r\n                  </Box>\r\n                  {idx !== caseNotesHistory.length - 1 && <Divider />}\r\n                </Box>\r\n              );\r\n            })}\r\n          </Box>\r\n        )}\r\n      </FormGrid>\r\n    </FormContainer>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}