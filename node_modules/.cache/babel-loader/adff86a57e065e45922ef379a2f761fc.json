{"ast":null,"code":"import _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\TaskCheckList\\\\TaskCheckList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport * as Yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport xorBy from 'lodash/xorBy';\nimport { useHistory } from 'react-router'; //app\n\nimport { TaskCheckListView } from './TaskCheckList.view';\nimport { showModal, hideModal, getTaskChecklist, getNextTaskList, selectTaskCheckList, selectTaskNextActionList, selectUserOrganisation, resetTaskProcessingChecklistChanges, postSaveTaskCheckListActions, postSaveNextTaskAction, postCloseClaim, getCurrencyPurchasedValue, selectClaimsFnolPushBackRoute, selectFnolSelectedTab, addTaskNote } from 'stores';\nimport { FormCheckbox } from 'components';\nimport * as utils from 'utils';\nimport { ORGANIZATIONS, TASK_CHECKLIST_WARNINGS, CLOSE_CLAIM, ADVICE_AND_SETTLEMENT, TASK_TAB_COMPLETED_STATUS, CLAIMS_FNOL_PUSH_BACK_ROUTES, FIRST_ADVICE_FEEDBACK } from 'consts';\nimport config from 'config'; //mui\n\nimport { Box } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nTaskCheckList.propTypes = {\n  task: PropTypes.object.isRequired,\n  currencyPurchasedValue: PropTypes.string.isRequired,\n  isCurrencyChanged: PropTypes.bool.isRequired,\n  isDirtyRef: PropTypes.bool.isRequired,\n  setIsDirty: PropTypes.func.isRequired,\n  handleDirtyCheck: PropTypes.func.isRequired\n};\nexport default function TaskCheckList(_ref) {\n  _s();\n\n  var task = _ref.task,\n      currencyPurchasedValue = _ref.currencyPurchasedValue,\n      isCurrencyChanged = _ref.isCurrencyChanged,\n      isDirtyRef = _ref.isDirtyRef,\n      setIsDirty = _ref.setIsDirty,\n      handleDirtyCheck = _ref.handleDirtyCheck,\n      sanctionCheckStatus = _ref.sanctionCheckStatus,\n      formHandlers = _ref.formHandlers;\n  var dispatch = useDispatch();\n  var history = useHistory();\n  var taskCheckList = useSelector(selectTaskCheckList);\n  var taskNextActionList = useSelector(selectTaskNextActionList);\n  var userOrgDetail = useSelector(selectUserOrganisation);\n  var pushBackRoute = useSelector(selectClaimsFnolPushBackRoute);\n  var fnolSelectedTab = useSelector(selectFnolSelectedTab);\n  var taskCode = task === null || task === void 0 ? void 0 : task.taskDefKey;\n  var taskId = task === null || task === void 0 ? void 0 : task.taskId;\n  var userOrgName = (userOrgDetail === null || userOrgDetail === void 0 ? void 0 : userOrgDetail.name.toLowerCase()) || ORGANIZATIONS.mphasis.name;\n  var isMphasisUser = userOrgName === ORGANIZATIONS.mphasis.name;\n  var saveType = {\n    checkList: 'checkList',\n    nextAction: 'nextAction',\n    completeTask: 'completeTask'\n  };\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      allSelectionFlag = _useState2[0],\n      setAllSelectionFlag = _useState2[1];\n\n  var _useState3 = useState(!isMphasisUser),\n      _useState4 = _slicedToArray(_useState3, 2),\n      nextActionFlag = _useState4[0],\n      setNextActionFlag = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      mandatoryList = _useState6[0],\n      setMandatoryList = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      nextActionVal = _useState8[0],\n      setNextActionVal = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      checkListChanges = _useState10[0],\n      setCheckListChanges = _useState10[1];\n\n  var fields = utils.generic.isValidArray(taskCheckList, true) ? taskCheckList.map(function (eachCheck) {\n    return {\n      name: eachCheck === null || eachCheck === void 0 ? void 0 : eachCheck.actionListID.toString(),\n      type: 'checkbox',\n      defaultValue: Boolean(eachCheck === null || eachCheck === void 0 ? void 0 : eachCheck.isActioned) || false,\n      validation: (eachCheck === null || eachCheck === void 0 ? void 0 : eachCheck.isMandatory) ? Yup.bool().required() : Yup.bool(),\n      muiComponentProps: {\n        onChange: function onChange(name, value) {\n          return handleCheckListChange(name, value);\n        }\n      }\n    };\n  }) : [];\n  var defaultValues = utils.form.getInitialValues(fields);\n  var validationSchema = utils.form.getValidationSchema(fields);\n  var checkListForm = useForm(_objectSpread({\n    defaultValues: defaultValues\n  }, validationSchema && {\n    resolver: yupResolver(validationSchema)\n  }));\n  var headerFields = [{\n    name: 'selectAllValues',\n    type: 'checkbox',\n    defaultValue: false,\n    muiComponentProps: {\n      onChange: function onChange(name, value) {\n        return handleAllCheckListSelected(name, value);\n      }\n    }\n  }];\n  var columns = [{\n    id: 'select',\n    label: /*#__PURE__*/_jsxDEV(Box, {\n      mb: -1.25,\n      children: utils.generic.isValidArray(taskCheckList, true) && /*#__PURE__*/_jsxDEV(FormCheckbox, _objectSpread({}, utils.form.getFieldProps(headerFields, 'selectAllValues')), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this),\n    visible: true\n  }, {\n    id: 'ChecklistItems',\n    label: utils.string.t('claims.processing.taskDetailsCheckList.columns.ChecklistItems'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true,\n    mandatory: true\n  }, {\n    id: 'lastUpdatedBy',\n    label: utils.string.t('claims.processing.taskDetailsCheckList.columns.lastUpdatedBy'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true,\n    mandatory: true\n  }, {\n    id: 'lastUpdatedOn',\n    label: utils.string.t('claims.processing.taskDetailsCheckList.columns.lastUpdatedOn'),\n    sort: {\n      type: 'date',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true,\n    mandatory: true\n  }];\n  var popoverActions = [{\n    id: 'blank',\n    label: '',\n    callback: function callback() {\n      return handleNextActionSelected('');\n    }\n  }].concat(_toConsumableArray(taskNextActionList.map(function (action) {\n    return {\n      id: action === null || action === void 0 ? void 0 : action.taskCode,\n      label: action === null || action === void 0 ? void 0 : action.taskLabel,\n      data: action,\n      callback: function callback() {\n        return handleNextActionSelected(action === null || action === void 0 ? void 0 : action.taskCode);\n      }\n    };\n  }))); // this has to be removed after check list added to 'First Advice- Advise Market','First Advice- Client Acknowledgement'\n\n  var demoTasks = ['First Advice - Advise to Market', 'First Advice - Client Acknowledgement', 'First Advice: Advise Market', 'First Advice: Client Acknowledgement'];\n\n  var fetchDataFromBackend = function fetchDataFromBackend() {\n    /** This if-else condition has to be removed after the \r\n     'First Advice- Advise Market','First Advice- Client Acknowledgement'\r\n      checklist created\r\n     **/\n    if (demoTasks.includes(task === null || task === void 0 ? void 0 : task.description)) {\n      dispatch(getTaskChecklist({\n        taskCode: 'FirstAdvice',\n        taskId: taskId,\n        userOrgName: userOrgName,\n        viewLoader: false\n      }));\n    } else {\n      taskCode === FIRST_ADVICE_FEEDBACK ? dispatch(getTaskChecklist({\n        taskCode: 'FirstAdviceFeedback',\n        taskId: taskId,\n        userOrgName: userOrgName,\n        viewLoader: false\n      })) : dispatch(getTaskChecklist({\n        taskCode: taskCode,\n        taskId: taskId,\n        userOrgName: userOrgName,\n        viewLoader: false\n      }));\n    }\n\n    dispatch(getNextTaskList({\n      taskCode: taskCode,\n      viewLoader: false\n    }));\n\n    if (taskCode === ADVICE_AND_SETTLEMENT) {\n      dispatch(getCurrencyPurchasedValue(task === null || task === void 0 ? void 0 : task.processId));\n    }\n  };\n\n  var constructMandatoryList = function constructMandatoryList() {\n    var result = taskCheckList.filter(function (item) {\n      return (item === null || item === void 0 ? void 0 : item.isMandatory) && !(item === null || item === void 0 ? void 0 : item.isActioned);\n    }).map(function (item) {\n      return item === null || item === void 0 ? void 0 : item.actionListID.toString();\n    });\n    setMandatoryList(result);\n  };\n\n  var updateMandatoryList = function updateMandatoryList(name) {\n    if (isMphasisUser) {\n      var wasMandatory = !!taskCheckList.find(function (item) {\n        return (item === null || item === void 0 ? void 0 : item.actionListID.toString()) === name && (item === null || item === void 0 ? void 0 : item.isMandatory);\n      });\n\n      if (wasMandatory) {\n        var newList = xorBy(mandatoryList, [name]) || [];\n        setMandatoryList(newList);\n      }\n    } else {\n      setMandatoryList([]);\n    }\n  };\n\n  var handleCheckListChange = function handleCheckListChange(name, value) {\n    updateMandatoryList(name);\n    var findCheckItem = taskCheckList.find(function (item) {\n      var keyCheck = item === null || item === void 0 ? void 0 : item.actionListID.toString();\n      return keyCheck === name;\n    });\n\n    if (findCheckItem) {\n      var constructChangeItem = [findCheckItem].map(function (item) {\n        return {\n          actionListDetailID: item === null || item === void 0 ? void 0 : item.actionListDetailID,\n          actionListID: item === null || item === void 0 ? void 0 : item.actionListID,\n          isActioned: !value ? 0 : 1\n        };\n      });\n      var newChangeList = xorBy(checkListChanges, constructChangeItem, 'actionListID');\n      setCheckListChanges(newChangeList);\n    }\n  };\n\n  var handleAllCheckListSelected = function handleAllCheckListSelected(name, isAllSelected) {\n    setAllSelectionFlag(isAllSelected);\n\n    if (isMphasisUser) {\n      if (isAllSelected) {\n        setMandatoryList([]);\n      } else {\n        constructMandatoryList();\n      }\n\n      setNextActionFlag(isAllSelected);\n    }\n\n    var constructChangeItem = taskCheckList.map(function (item) {\n      return {\n        actionListDetailID: item === null || item === void 0 ? void 0 : item.actionListDetailID,\n        actionListID: item === null || item === void 0 ? void 0 : item.actionListID,\n        isActioned: !isAllSelected ? 0 : 1\n      };\n    });\n    setCheckListChanges(constructChangeItem);\n  };\n\n  var handleNextActionSelected = function handleNextActionSelected(nextActionCode) {\n    setNextActionVal(nextActionCode);\n\n    if (nextActionCode === CLOSE_CLAIM) {\n      handleConfirmClaimClose(nextActionCode);\n    } else {\n      handleNextTaskWarning(saveType.nextAction, nextActionCode);\n    }\n  };\n\n  var checkListChangeSave = function checkListChangeSave() {\n    if (isMphasisUser && utils.generic.isValidArray(mandatoryList, true)) {\n      handleMandatoryWarning();\n    } else {\n      saveTaskOperations(saveType.checkList);\n    }\n  };\n\n  var checkListChangeReset = function checkListChangeReset() {\n    checkListForm.reset();\n    setCheckListChanges([]);\n\n    if (utils.generic.isValidArray(taskCheckList, true) && isMphasisUser) {\n      constructMandatoryList();\n    } else {\n      setMandatoryList([]);\n    }\n  };\n\n  var completeTask = function completeTask() {\n    handleTaskCompleteWarning();\n  };\n\n  var saveTaskOperations = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(type, nextActionCode) {\n      var saveRequest;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // \"nextTaskCode\" is null for postSaveNextTaskAction to mark task as complete\n              // \"nextTaskCode\" is null for postSaveTaskCheckListActions & postSaveNextTaskAction (complete task scenario)\n              saveRequest = {\n                processID: task === null || task === void 0 ? void 0 : task.processId,\n                nextTaskCode: type !== saveType.nextAction ? null : nextActionCode || nextActionVal,\n                currencyPurchased: currencyPurchasedValue,\n                approvalStatus: task === null || task === void 0 ? void 0 : task.approvalStatus,\n                actionListDetails: checkListChanges\n              };\n\n              if (!(type === saveType.checkList)) {\n                _context.next = 7;\n                break;\n              }\n\n              _context.next = 4;\n              return dispatch(postSaveTaskCheckListActions(task === null || task === void 0 ? void 0 : task.taskId, saveRequest)).then(function (resp) {\n                var _resp$json;\n\n                if (resp.status === 'OK' || (resp === null || resp === void 0 ? void 0 : (_resp$json = resp.json) === null || _resp$json === void 0 ? void 0 : _resp$json.statusCode) === 500) {\n                  if ((task === null || task === void 0 ? void 0 : task.taskDefKey) === FIRST_ADVICE_FEEDBACK) {\n                    var notesDescription = formHandlers === null || formHandlers === void 0 ? void 0 : formHandlers.getValues();\n                    if ((notesDescription === null || notesDescription === void 0 ? void 0 : notesDescription.details) !== '') dispatch(addTaskNote(formHandlers === null || formHandlers === void 0 ? void 0 : formHandlers.getValues(), task));\n                  }\n                }\n              });\n\n            case 4:\n              fetchDataFromBackend();\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.next = 9;\n              return dispatch(postSaveNextTaskAction(task === null || task === void 0 ? void 0 : task.taskId, saveRequest)).then(function (resp) {\n                var _resp$json2;\n\n                if (resp.status === 'OK' || (resp === null || resp === void 0 ? void 0 : (_resp$json2 = resp.json) === null || _resp$json2 === void 0 ? void 0 : _resp$json2.statusCode) === 500) {\n                  if ((task === null || task === void 0 ? void 0 : task.taskDefKey) === FIRST_ADVICE_FEEDBACK) {\n                    var notesDescription = formHandlers === null || formHandlers === void 0 ? void 0 : formHandlers.getValues();\n                    if ((notesDescription === null || notesDescription === void 0 ? void 0 : notesDescription.details) !== '') dispatch(addTaskNote(formHandlers === null || formHandlers === void 0 ? void 0 : formHandlers.getValues(), task));\n                    formHandlers === null || formHandlers === void 0 ? void 0 : formHandlers.setValue('details', '');\n                  }\n                }\n              });\n\n            case 9:\n              navigateToTaskGrid();\n\n            case 10:\n              checkListChangeReset();\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function saveTaskOperations(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var closeClaimTask = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(nextActionCode) {\n      var payload;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              payload = {\n                nextTaskCode: nextActionCode,\n                processID: task === null || task === void 0 ? void 0 : task.rootProcessId\n              };\n              _context2.next = 3;\n              return dispatch(postCloseClaim(task === null || task === void 0 ? void 0 : task.taskId, payload));\n\n            case 3:\n              navigateToTaskGrid();\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function closeClaimTask(_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var handleMandatoryWarning = function handleMandatoryWarning() {\n    dispatch(showModal({\n      component: 'CHECK_LIST_ALERTS',\n      props: {\n        title: utils.string.t('navigation.alert'),\n        hideCompOnBlur: false,\n        fullWidth: true,\n        maxWidth: 'sm',\n        disableAutoFocus: true,\n        componentProps: {\n          type: TASK_CHECKLIST_WARNINGS.type.mandatory,\n          handlers: {\n            submit: function submit() {\n              dispatch(hideModal());\n\n              if (nextActionVal) {\n                handleNextTaskWarning();\n              } else {\n                saveTaskOperations(saveType.checkList);\n              }\n            },\n            cancel: function cancel() {\n              dispatch(hideModal());\n            }\n          }\n        }\n      }\n    }));\n  };\n\n  var handleNextTaskWarning = function handleNextTaskWarning() {\n    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : saveType.checkList;\n    var nextActionCode = arguments.length > 1 ? arguments[1] : undefined;\n    dispatch(showModal({\n      component: 'CHECK_LIST_ALERTS',\n      props: {\n        title: utils.string.t('navigation.alert'),\n        hideCompOnBlur: false,\n        fullWidth: true,\n        maxWidth: 'sm',\n        disableAutoFocus: true,\n        componentProps: {\n          type: TASK_CHECKLIST_WARNINGS.type.nextTask,\n          handlers: {\n            submit: function submit() {\n              dispatch(hideModal());\n              saveTaskOperations(type, nextActionCode);\n            },\n            cancel: function cancel() {\n              dispatch(hideModal());\n            }\n          }\n        }\n      }\n    }));\n  };\n\n  var handleTaskCompleteWarning = function handleTaskCompleteWarning() {\n    dispatch(showModal({\n      component: 'CHECK_LIST_ALERTS',\n      props: {\n        title: utils.string.t('navigation.alert'),\n        hideCompOnBlur: false,\n        fullWidth: true,\n        maxWidth: 'sm',\n        disableAutoFocus: true,\n        componentProps: {\n          type: TASK_CHECKLIST_WARNINGS.type.completeTask,\n          handlers: {\n            submit: function submit() {\n              dispatch(hideModal());\n              saveTaskOperations(saveType.completeTask);\n            },\n            cancel: function cancel() {\n              dispatch(hideModal());\n            }\n          }\n        }\n      }\n    }));\n  };\n\n  var checklistDirtyCheck = function checklistDirtyCheck() {\n    if (isDirtyRef) {\n      handleDirtyCheck('', true);\n    } else {\n      switch (pushBackRoute) {\n        case CLAIMS_FNOL_PUSH_BACK_ROUTES.routes.lossAndClaims:\n          return history.replace(\"\".concat(config.routes.claimsFNOL.root).concat(fnolSelectedTab ? \"/tab/\".concat(fnolSelectedTab) : ''));\n\n        case CLAIMS_FNOL_PUSH_BACK_ROUTES.routes.lossDashboard:\n          return history.replace(\"\".concat(config.routes.claimsFNOL.loss, \"/\").concat(task === null || task === void 0 ? void 0 : task.lossRef));\n\n        case CLAIMS_FNOL_PUSH_BACK_ROUTES.routes.claimsDashboard:\n          return history.replace(\"\".concat(config.routes.claimsFNOL.claim, \"/\").concat(task === null || task === void 0 ? void 0 : task.processRef));\n\n        default:\n          return;\n      }\n    }\n  };\n\n  var handleConfirmClaimClose = function handleConfirmClaimClose(nextActionCode) {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        title: utils.string.t('status.alert'),\n        hint: utils.string.t('claims.processing.taskDetailsCheckList.closeClaims'),\n        fullWidth: true,\n        maxWidth: 'xs',\n        componentProps: {\n          cancelLabel: utils.string.t('app.no'),\n          confirmLabel: utils.string.t('app.yes'),\n          submitHandler: function submitHandler() {\n            closeClaimTask(nextActionCode);\n          }\n        }\n      }\n    }));\n  };\n\n  var navigateToTaskGrid = function navigateToTaskGrid() {\n    history.push(\"\".concat(config.routes.claimsFNOL.claim, \"/\").concat(task === null || task === void 0 ? void 0 : task.processRef));\n  };\n\n  var isCompletedTask = (task === null || task === void 0 ? void 0 : task.status) === TASK_TAB_COMPLETED_STATUS;\n  var isCheckListChanged = utils.generic.isValidArray(checkListChanges, true);\n  var hasCheckList = utils.generic.isValidArray(taskCheckList, true);\n  var hasNextActions = utils.generic.isValidArray(popoverActions, true) && popoverActions.length > 1;\n  useEffect(function () {\n    fetchDataFromBackend();\n    return function () {\n      dispatch(resetTaskProcessingChecklistChanges());\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    if (utils.generic.isValidArray(taskCheckList, true) && isMphasisUser) {\n      constructMandatoryList();\n    }\n  }, [taskCheckList]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    if (isMphasisUser) {\n      if (utils.generic.isValidArray(taskCheckList, true) && !utils.generic.isValidArray(mandatoryList, true)) {\n        setNextActionFlag(true);\n      } else {\n        setNextActionFlag(false);\n      }\n    }\n  }, [mandatoryList]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    setIsDirty(isCheckListChanged || isCurrencyChanged);\n  }, [isCheckListChanged, isCurrencyChanged]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/_jsxDEV(TaskCheckListView, {\n    isCompletedTask: isCompletedTask,\n    allSelectionFlag: allSelectionFlag,\n    nextActionFlag: nextActionFlag,\n    isMphasisUser: isMphasisUser,\n    isCheckListChanged: isCheckListChanged,\n    hasCheckList: hasCheckList,\n    hasNextActions: hasNextActions,\n    columns: columns,\n    rows: taskCheckList,\n    fields: fields,\n    formControls: checkListForm,\n    popoverActions: popoverActions,\n    isCurrencyChanged: isCurrencyChanged,\n    task: task,\n    sanctionCheckStatus: sanctionCheckStatus,\n    handlers: {\n      checkListChangeSave: checkListChangeSave,\n      checkListChangeReset: checkListChangeReset,\n      completeTask: completeTask,\n      checklistDirtyCheck: checklistDirtyCheck\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 488,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TaskCheckList, \"4vpwiflyImQ7Yr+AVb9F21gzLU0=\", false, function () {\n  return [useDispatch, useHistory, useSelector, useSelector, useSelector, useSelector, useSelector, useForm];\n});\n\n_c = TaskCheckList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskCheckList\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/TaskCheckList/TaskCheckList.js"],"names":["React","useEffect","useState","PropTypes","useSelector","useDispatch","useForm","Yup","yupResolver","xorBy","useHistory","TaskCheckListView","showModal","hideModal","getTaskChecklist","getNextTaskList","selectTaskCheckList","selectTaskNextActionList","selectUserOrganisation","resetTaskProcessingChecklistChanges","postSaveTaskCheckListActions","postSaveNextTaskAction","postCloseClaim","getCurrencyPurchasedValue","selectClaimsFnolPushBackRoute","selectFnolSelectedTab","addTaskNote","FormCheckbox","utils","ORGANIZATIONS","TASK_CHECKLIST_WARNINGS","CLOSE_CLAIM","ADVICE_AND_SETTLEMENT","TASK_TAB_COMPLETED_STATUS","CLAIMS_FNOL_PUSH_BACK_ROUTES","FIRST_ADVICE_FEEDBACK","config","Box","TaskCheckList","propTypes","task","object","isRequired","currencyPurchasedValue","string","isCurrencyChanged","bool","isDirtyRef","setIsDirty","func","handleDirtyCheck","sanctionCheckStatus","formHandlers","dispatch","history","taskCheckList","taskNextActionList","userOrgDetail","pushBackRoute","fnolSelectedTab","taskCode","taskDefKey","taskId","userOrgName","name","toLowerCase","mphasis","isMphasisUser","saveType","checkList","nextAction","completeTask","allSelectionFlag","setAllSelectionFlag","nextActionFlag","setNextActionFlag","mandatoryList","setMandatoryList","nextActionVal","setNextActionVal","checkListChanges","setCheckListChanges","fields","generic","isValidArray","map","eachCheck","actionListID","toString","type","defaultValue","Boolean","isActioned","validation","isMandatory","required","muiComponentProps","onChange","value","handleCheckListChange","defaultValues","form","getInitialValues","validationSchema","getValidationSchema","checkListForm","resolver","headerFields","handleAllCheckListSelected","columns","id","label","getFieldProps","visible","t","sort","direction","nowrap","mandatory","popoverActions","callback","handleNextActionSelected","action","taskLabel","data","demoTasks","fetchDataFromBackend","includes","description","viewLoader","processId","constructMandatoryList","result","filter","item","updateMandatoryList","wasMandatory","find","newList","findCheckItem","keyCheck","constructChangeItem","actionListDetailID","newChangeList","isAllSelected","nextActionCode","handleConfirmClaimClose","handleNextTaskWarning","checkListChangeSave","handleMandatoryWarning","saveTaskOperations","checkListChangeReset","reset","handleTaskCompleteWarning","saveRequest","processID","nextTaskCode","currencyPurchased","approvalStatus","actionListDetails","then","resp","status","json","statusCode","notesDescription","getValues","details","setValue","navigateToTaskGrid","closeClaimTask","payload","rootProcessId","component","props","title","hideCompOnBlur","fullWidth","maxWidth","disableAutoFocus","componentProps","handlers","submit","cancel","nextTask","checklistDirtyCheck","routes","lossAndClaims","replace","claimsFNOL","root","lossDashboard","loss","lossRef","claimsDashboard","claim","processRef","hint","cancelLabel","confirmLabel","submitHandler","push","isCompletedTask","isCheckListChanged","hasCheckList","hasNextActions","length"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,SAASC,UAAT,QAA2B,cAA3B,C,CAEA;;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,SACEC,SADF,EAEEC,SAFF,EAGEC,gBAHF,EAIEC,eAJF,EAKEC,mBALF,EAMEC,wBANF,EAOEC,sBAPF,EAQEC,mCARF,EASEC,4BATF,EAUEC,sBAVF,EAWEC,cAXF,EAYEC,yBAZF,EAaEC,6BAbF,EAcEC,qBAdF,EAeEC,WAfF,QAgBO,QAhBP;AAiBA,SAASC,YAAT,QAA6B,YAA7B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SACEC,aADF,EAEEC,uBAFF,EAGEC,WAHF,EAIEC,qBAJF,EAKEC,yBALF,EAMEC,4BANF,EAOEC,qBAPF,QAQO,QARP;AASA,OAAOC,MAAP,MAAmB,QAAnB,C,CAEA;;AACA,SAASC,GAAT,QAAoB,mBAApB;;AAEAC,aAAa,CAACC,SAAd,GAA0B;AACxBC,EAAAA,IAAI,EAAErC,SAAS,CAACsC,MAAV,CAAiBC,UADC;AAExBC,EAAAA,sBAAsB,EAAExC,SAAS,CAACyC,MAAV,CAAiBF,UAFjB;AAGxBG,EAAAA,iBAAiB,EAAE1C,SAAS,CAAC2C,IAAV,CAAeJ,UAHV;AAIxBK,EAAAA,UAAU,EAAE5C,SAAS,CAAC2C,IAAV,CAAeJ,UAJH;AAKxBM,EAAAA,UAAU,EAAE7C,SAAS,CAAC8C,IAAV,CAAeP,UALH;AAMxBQ,EAAAA,gBAAgB,EAAE/C,SAAS,CAAC8C,IAAV,CAAeP;AANT,CAA1B;AAQA,eAAe,SAASJ,aAAT,OASZ;AAAA;;AAAA,MARDE,IAQC,QARDA,IAQC;AAAA,MAPDG,sBAOC,QAPDA,sBAOC;AAAA,MANDE,iBAMC,QANDA,iBAMC;AAAA,MALDE,UAKC,QALDA,UAKC;AAAA,MAJDC,UAIC,QAJDA,UAIC;AAAA,MAHDE,gBAGC,QAHDA,gBAGC;AAAA,MAFDC,mBAEC,QAFDA,mBAEC;AAAA,MADDC,YACC,QADDA,YACC;AACD,MAAMC,QAAQ,GAAGhD,WAAW,EAA5B;AACA,MAAMiD,OAAO,GAAG5C,UAAU,EAA1B;AAEA,MAAM6C,aAAa,GAAGnD,WAAW,CAACY,mBAAD,CAAjC;AACA,MAAMwC,kBAAkB,GAAGpD,WAAW,CAACa,wBAAD,CAAtC;AACA,MAAMwC,aAAa,GAAGrD,WAAW,CAACc,sBAAD,CAAjC;AACA,MAAMwC,aAAa,GAAGtD,WAAW,CAACoB,6BAAD,CAAjC;AACA,MAAMmC,eAAe,GAAGvD,WAAW,CAACqB,qBAAD,CAAnC;AAEA,MAAMmC,QAAQ,GAAGpB,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEqB,UAAvB;AACA,MAAMC,MAAM,GAAGtB,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEsB,MAArB;AACA,MAAMC,WAAW,GAAG,CAAAN,aAAa,SAAb,IAAAA,aAAa,WAAb,YAAAA,aAAa,CAAEO,IAAf,CAAoBC,WAApB,OAAqCpC,aAAa,CAACqC,OAAd,CAAsBF,IAA/E;AACA,MAAMG,aAAa,GAAGJ,WAAW,KAAKlC,aAAa,CAACqC,OAAd,CAAsBF,IAA5D;AACA,MAAMI,QAAQ,GAAG;AAAEC,IAAAA,SAAS,EAAE,WAAb;AAA0BC,IAAAA,UAAU,EAAE,YAAtC;AAAoDC,IAAAA,YAAY,EAAE;AAAlE,GAAjB;;AAdC,kBAgB+CrE,QAAQ,CAAC,KAAD,CAhBvD;AAAA;AAAA,MAgBMsE,gBAhBN;AAAA,MAgBwBC,mBAhBxB;;AAAA,mBAiB2CvE,QAAQ,CAAC,CAACiE,aAAF,CAjBnD;AAAA;AAAA,MAiBMO,cAjBN;AAAA,MAiBsBC,iBAjBtB;;AAAA,mBAkByCzE,QAAQ,CAAC,EAAD,CAlBjD;AAAA;AAAA,MAkBM0E,aAlBN;AAAA,MAkBqBC,gBAlBrB;;AAAA,mBAmByC3E,QAAQ,CAAC,EAAD,CAnBjD;AAAA;AAAA,MAmBM4E,aAnBN;AAAA,MAmBqBC,gBAnBrB;;AAAA,mBAoB+C7E,QAAQ,CAAC,EAAD,CApBvD;AAAA;AAAA,MAoBM8E,gBApBN;AAAA,MAoBwBC,mBApBxB;;AAsBD,MAAIC,MAAM,GAAGtD,KAAK,CAACuD,OAAN,CAAcC,YAAd,CAA2B7B,aAA3B,EAA0C,IAA1C,IACTA,aAAa,CAAC8B,GAAd,CAAkB,UAACC,SAAD;AAAA,WAAgB;AAChCtB,MAAAA,IAAI,EAAEsB,SAAF,aAAEA,SAAF,uBAAEA,SAAS,CAAEC,YAAX,CAAwBC,QAAxB,EAD0B;AAEhCC,MAAAA,IAAI,EAAE,UAF0B;AAGhCC,MAAAA,YAAY,EAAEC,OAAO,CAACL,SAAD,aAACA,SAAD,uBAACA,SAAS,CAAEM,UAAZ,CAAP,IAAkC,KAHhB;AAIhCC,MAAAA,UAAU,EAAE,CAAAP,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEQ,WAAX,IAAyBvF,GAAG,CAACuC,IAAJ,GAAWiD,QAAX,EAAzB,GAAiDxF,GAAG,CAACuC,IAAJ,EAJ7B;AAKhCkD,MAAAA,iBAAiB,EAAE;AACjBC,QAAAA,QAAQ,EAAE,kBAACjC,IAAD,EAAOkC,KAAP;AAAA,iBAAiBC,qBAAqB,CAACnC,IAAD,EAAOkC,KAAP,CAAtC;AAAA;AADO;AALa,KAAhB;AAAA,GAAlB,CADS,GAUT,EAVJ;AAYA,MAAME,aAAa,GAAGxE,KAAK,CAACyE,IAAN,CAAWC,gBAAX,CAA4BpB,MAA5B,CAAtB;AACA,MAAMqB,gBAAgB,GAAG3E,KAAK,CAACyE,IAAN,CAAWG,mBAAX,CAA+BtB,MAA/B,CAAzB;AAEA,MAAMuB,aAAa,GAAGnG,OAAO;AAC3B8F,IAAAA,aAAa,EAAbA;AAD2B,KAEvBG,gBAAgB,IAAI;AAAEG,IAAAA,QAAQ,EAAElG,WAAW,CAAC+F,gBAAD;AAAvB,GAFG,EAA7B;AAKA,MAAMI,YAAY,GAAG,CACnB;AACE3C,IAAAA,IAAI,EAAE,iBADR;AAEEyB,IAAAA,IAAI,EAAE,UAFR;AAGEC,IAAAA,YAAY,EAAE,KAHhB;AAIEM,IAAAA,iBAAiB,EAAE;AACjBC,MAAAA,QAAQ,EAAE,kBAACjC,IAAD,EAAOkC,KAAP;AAAA,eAAiBU,0BAA0B,CAAC5C,IAAD,EAAOkC,KAAP,CAA3C;AAAA;AADO;AAJrB,GADmB,CAArB;AAWA,MAAMW,OAAO,GAAG,CACd;AACEC,IAAAA,EAAE,EAAE,QADN;AAEEC,IAAAA,KAAK,eACH,QAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAC,IAAV;AAAA,gBACGnF,KAAK,CAACuD,OAAN,CAAcC,YAAd,CAA2B7B,aAA3B,EAA0C,IAA1C,kBACC,QAAC,YAAD,oBAAkB3B,KAAK,CAACyE,IAAN,CAAWW,aAAX,CAAyBL,YAAzB,EAAuC,iBAAvC,CAAlB;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YAHJ;AASEM,IAAAA,OAAO,EAAE;AATX,GADc,EAYd;AACEH,IAAAA,EAAE,EAAE,gBADN;AAEEC,IAAAA,KAAK,EAAEnF,KAAK,CAACgB,MAAN,CAAasE,CAAb,CAAe,+DAAf,CAFT;AAGEC,IAAAA,IAAI,EAAE;AAAE1B,MAAAA,IAAI,EAAE,SAAR;AAAmB2B,MAAAA,SAAS,EAAE;AAA9B,KAHR;AAIEC,IAAAA,MAAM,EAAE,IAJV;AAKEJ,IAAAA,OAAO,EAAE,IALX;AAMEK,IAAAA,SAAS,EAAE;AANb,GAZc,EAoBd;AACER,IAAAA,EAAE,EAAE,eADN;AAEEC,IAAAA,KAAK,EAAEnF,KAAK,CAACgB,MAAN,CAAasE,CAAb,CAAe,8DAAf,CAFT;AAGEC,IAAAA,IAAI,EAAE;AAAE1B,MAAAA,IAAI,EAAE,SAAR;AAAmB2B,MAAAA,SAAS,EAAE;AAA9B,KAHR;AAIEC,IAAAA,MAAM,EAAE,IAJV;AAKEJ,IAAAA,OAAO,EAAE,IALX;AAMEK,IAAAA,SAAS,EAAE;AANb,GApBc,EA4Bd;AACER,IAAAA,EAAE,EAAE,eADN;AAEEC,IAAAA,KAAK,EAAEnF,KAAK,CAACgB,MAAN,CAAasE,CAAb,CAAe,8DAAf,CAFT;AAGEC,IAAAA,IAAI,EAAE;AAAE1B,MAAAA,IAAI,EAAE,MAAR;AAAgB2B,MAAAA,SAAS,EAAE;AAA3B,KAHR;AAIEC,IAAAA,MAAM,EAAE,IAJV;AAKEJ,IAAAA,OAAO,EAAE,IALX;AAMEK,IAAAA,SAAS,EAAE;AANb,GA5Bc,CAAhB;AAsCA,MAAMC,cAAc,IAClB;AAAET,IAAAA,EAAE,EAAE,OAAN;AAAeC,IAAAA,KAAK,EAAE,EAAtB;AAA0BS,IAAAA,QAAQ,EAAE;AAAA,aAAMC,wBAAwB,CAAC,EAAD,CAA9B;AAAA;AAApC,GADkB,4BAEfjE,kBAAkB,CAAC6B,GAAnB,CAAuB,UAACqC,MAAD;AAAA,WAAa;AACrCZ,MAAAA,EAAE,EAAEY,MAAF,aAAEA,MAAF,uBAAEA,MAAM,CAAE9D,QADyB;AAErCmD,MAAAA,KAAK,EAAEW,MAAF,aAAEA,MAAF,uBAAEA,MAAM,CAAEC,SAFsB;AAGrCC,MAAAA,IAAI,EAAEF,MAH+B;AAIrCF,MAAAA,QAAQ,EAAE;AAAA,eAAMC,wBAAwB,CAACC,MAAD,aAACA,MAAD,uBAACA,MAAM,CAAE9D,QAAT,CAA9B;AAAA;AAJ2B,KAAb;AAAA,GAAvB,CAFe,EAApB,CA3FC,CAoGD;;AACA,MAAMiE,SAAS,GAAG,CAChB,iCADgB,EAEhB,uCAFgB,EAGhB,6BAHgB,EAIhB,sCAJgB,CAAlB;;AAMA,MAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAM;AACjC;AACJ;AACA;AACA;AACI,QAAID,SAAS,CAACE,QAAV,CAAmBvF,IAAnB,aAAmBA,IAAnB,uBAAmBA,IAAI,CAAEwF,WAAzB,CAAJ,EAA2C;AACzC3E,MAAAA,QAAQ,CAACvC,gBAAgB,CAAC;AAAE8C,QAAAA,QAAQ,EAAE,aAAZ;AAA2BE,QAAAA,MAAM,EAANA,MAA3B;AAAmCC,QAAAA,WAAW,EAAXA,WAAnC;AAAgDkE,QAAAA,UAAU,EAAE;AAA5D,OAAD,CAAjB,CAAR;AACD,KAFD,MAEO;AACLrE,MAAAA,QAAQ,KAAKzB,qBAAb,GACIkB,QAAQ,CAACvC,gBAAgB,CAAC;AAAE8C,QAAAA,QAAQ,EAAE,qBAAZ;AAAmCE,QAAAA,MAAM,EAANA,MAAnC;AAA2CC,QAAAA,WAAW,EAAXA,WAA3C;AAAwDkE,QAAAA,UAAU,EAAE;AAApE,OAAD,CAAjB,CADZ,GAEI5E,QAAQ,CAACvC,gBAAgB,CAAC;AAAE8C,QAAAA,QAAQ,EAARA,QAAF;AAAYE,QAAAA,MAAM,EAANA,MAAZ;AAAoBC,QAAAA,WAAW,EAAXA,WAApB;AAAiCkE,QAAAA,UAAU,EAAE;AAA7C,OAAD,CAAjB,CAFZ;AAGD;;AAED5E,IAAAA,QAAQ,CAACtC,eAAe,CAAC;AAAE6C,MAAAA,QAAQ,EAARA,QAAF;AAAYqE,MAAAA,UAAU,EAAE;AAAxB,KAAD,CAAhB,CAAR;;AACA,QAAIrE,QAAQ,KAAK5B,qBAAjB,EAAwC;AACtCqB,MAAAA,QAAQ,CAAC9B,yBAAyB,CAACiB,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAE0F,SAAP,CAA1B,CAAR;AACD;AACF,GAjBD;;AAmBA,MAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,GAAM;AACnC,QAAMC,MAAM,GAAG7E,aAAa,CACzB8E,MADY,CACL,UAACC,IAAD;AAAA,aAAU,CAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAExC,WAAN,KAAqB,EAACwC,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAE1C,UAAP,CAA/B;AAAA,KADK,EAEZP,GAFY,CAER,UAACiD,IAAD,EAAU;AACb,aAAOA,IAAP,aAAOA,IAAP,uBAAOA,IAAI,CAAE/C,YAAN,CAAmBC,QAAnB,EAAP;AACD,KAJY,CAAf;AAKAX,IAAAA,gBAAgB,CAACuD,MAAD,CAAhB;AACD,GAPD;;AASA,MAAMG,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACvE,IAAD,EAAU;AACpC,QAAIG,aAAJ,EAAmB;AACjB,UAAMqE,YAAY,GAAG,CAAC,CAACjF,aAAa,CAACkF,IAAd,CAAmB,UAACH,IAAD,EAAU;AAClD,eAAO,CAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAE/C,YAAN,CAAmBC,QAAnB,QAAkCxB,IAAlC,KAA0CsE,IAA1C,aAA0CA,IAA1C,uBAA0CA,IAAI,CAAExC,WAAhD,CAAP;AACD,OAFsB,CAAvB;;AAGA,UAAI0C,YAAJ,EAAkB;AAChB,YAAME,OAAO,GAAGjI,KAAK,CAACmE,aAAD,EAAgB,CAACZ,IAAD,CAAhB,CAAL,IAAgC,EAAhD;AACAa,QAAAA,gBAAgB,CAAC6D,OAAD,CAAhB;AACD;AACF,KARD,MAQO;AACL7D,MAAAA,gBAAgB,CAAC,EAAD,CAAhB;AACD;AACF,GAZD;;AAcA,MAAMsB,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACnC,IAAD,EAAOkC,KAAP,EAAiB;AAC7CqC,IAAAA,mBAAmB,CAACvE,IAAD,CAAnB;AACA,QAAM2E,aAAa,GAAGpF,aAAa,CAACkF,IAAd,CAAmB,UAACH,IAAD,EAAU;AACjD,UAAMM,QAAQ,GAAGN,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAE/C,YAAN,CAAmBC,QAAnB,EAAjB;AACA,aAAOoD,QAAQ,KAAK5E,IAApB;AACD,KAHqB,CAAtB;;AAIA,QAAI2E,aAAJ,EAAmB;AACjB,UAAME,mBAAmB,GAAG,CAACF,aAAD,EAAgBtD,GAAhB,CAAoB,UAACiD,IAAD,EAAU;AACxD,eAAO;AACLQ,UAAAA,kBAAkB,EAAER,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEQ,kBADrB;AAELvD,UAAAA,YAAY,EAAE+C,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAE/C,YAFf;AAGLK,UAAAA,UAAU,EAAE,CAACM,KAAD,GAAS,CAAT,GAAa;AAHpB,SAAP;AAKD,OAN2B,CAA5B;AAOA,UAAM6C,aAAa,GAAGtI,KAAK,CAACuE,gBAAD,EAAmB6D,mBAAnB,EAAwC,cAAxC,CAA3B;AACA5D,MAAAA,mBAAmB,CAAC8D,aAAD,CAAnB;AACD;AACF,GAjBD;;AAmBA,MAAMnC,0BAA0B,GAAG,SAA7BA,0BAA6B,CAAC5C,IAAD,EAAOgF,aAAP,EAAyB;AAC1DvE,IAAAA,mBAAmB,CAACuE,aAAD,CAAnB;;AACA,QAAI7E,aAAJ,EAAmB;AACjB,UAAI6E,aAAJ,EAAmB;AACjBnE,QAAAA,gBAAgB,CAAC,EAAD,CAAhB;AACD,OAFD,MAEO;AACLsD,QAAAA,sBAAsB;AACvB;;AACDxD,MAAAA,iBAAiB,CAACqE,aAAD,CAAjB;AACD;;AACD,QAAMH,mBAAmB,GAAGtF,aAAa,CAAC8B,GAAd,CAAkB,UAACiD,IAAD,EAAU;AACtD,aAAO;AACLQ,QAAAA,kBAAkB,EAAER,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEQ,kBADrB;AAELvD,QAAAA,YAAY,EAAE+C,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAE/C,YAFf;AAGLK,QAAAA,UAAU,EAAE,CAACoD,aAAD,GAAiB,CAAjB,GAAqB;AAH5B,OAAP;AAKD,KAN2B,CAA5B;AAOA/D,IAAAA,mBAAmB,CAAC4D,mBAAD,CAAnB;AACD,GAlBD;;AAoBA,MAAMpB,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACwB,cAAD,EAAoB;AACnDlE,IAAAA,gBAAgB,CAACkE,cAAD,CAAhB;;AACA,QAAIA,cAAc,KAAKlH,WAAvB,EAAoC;AAClCmH,MAAAA,uBAAuB,CAACD,cAAD,CAAvB;AACD,KAFD,MAEO;AACLE,MAAAA,qBAAqB,CAAC/E,QAAQ,CAACE,UAAV,EAAsB2E,cAAtB,CAArB;AACD;AACF,GAPD;;AASA,MAAMG,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAChC,QAAIjF,aAAa,IAAIvC,KAAK,CAACuD,OAAN,CAAcC,YAAd,CAA2BR,aAA3B,EAA0C,IAA1C,CAArB,EAAsE;AACpEyE,MAAAA,sBAAsB;AACvB,KAFD,MAEO;AACLC,MAAAA,kBAAkB,CAAClF,QAAQ,CAACC,SAAV,CAAlB;AACD;AACF,GAND;;AAQA,MAAMkF,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAM;AACjC9C,IAAAA,aAAa,CAAC+C,KAAd;AACAvE,IAAAA,mBAAmB,CAAC,EAAD,CAAnB;;AACA,QAAIrD,KAAK,CAACuD,OAAN,CAAcC,YAAd,CAA2B7B,aAA3B,EAA0C,IAA1C,KAAmDY,aAAvD,EAAsE;AACpEgE,MAAAA,sBAAsB;AACvB,KAFD,MAEO;AACLtD,MAAAA,gBAAgB,CAAC,EAAD,CAAhB;AACD;AACF,GARD;;AAUA,MAAMN,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzBkF,IAAAA,yBAAyB;AAC1B,GAFD;;AAIA,MAAMH,kBAAkB;AAAA,yEAAG,iBAAO7D,IAAP,EAAawD,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AACzB;AACA;AAEMS,cAAAA,WAJmB,GAIL;AAClBC,gBAAAA,SAAS,EAAEnH,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAE0F,SADC;AAElB0B,gBAAAA,YAAY,EAAEnE,IAAI,KAAKrB,QAAQ,CAACE,UAAlB,GAA+B,IAA/B,GAAsC2E,cAAc,IAAInE,aAFpD;AAGlB+E,gBAAAA,iBAAiB,EAAElH,sBAHD;AAIlBmH,gBAAAA,cAAc,EAAEtH,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEsH,cAJJ;AAKlBC,gBAAAA,iBAAiB,EAAE/E;AALD,eAJK;;AAAA,oBAYrBS,IAAI,KAAKrB,QAAQ,CAACC,SAZG;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAajBhB,QAAQ,CAACjC,4BAA4B,CAACoB,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEsB,MAAP,EAAe4F,WAAf,CAA7B,CAAR,CAAkEM,IAAlE,CAAuE,UAACC,IAAD,EAAU;AAAA;;AACrF,oBAAIA,IAAI,CAACC,MAAL,KAAgB,IAAhB,IAAwB,CAAAD,IAAI,SAAJ,IAAAA,IAAI,WAAJ,0BAAAA,IAAI,CAAEE,IAAN,0DAAYC,UAAZ,MAA2B,GAAvD,EAA4D;AAC1D,sBAAI,CAAA5H,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEqB,UAAN,MAAqB1B,qBAAzB,EAAgD;AAC9C,wBAAMkI,gBAAgB,GAAGjH,YAAH,aAAGA,YAAH,uBAAGA,YAAY,CAAEkH,SAAd,EAAzB;AACA,wBAAI,CAAAD,gBAAgB,SAAhB,IAAAA,gBAAgB,WAAhB,YAAAA,gBAAgB,CAAEE,OAAlB,MAA8B,EAAlC,EAAsClH,QAAQ,CAAC3B,WAAW,CAAC0B,YAAD,aAACA,YAAD,uBAACA,YAAY,CAAEkH,SAAd,EAAD,EAA4B9H,IAA5B,CAAZ,CAAR;AACvC;AACF;AACF,eAPK,CAbiB;;AAAA;AAqBvBsF,cAAAA,oBAAoB;AArBG;AAAA;;AAAA;AAAA;AAAA,qBAuBjBzE,QAAQ,CAAChC,sBAAsB,CAACmB,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEsB,MAAP,EAAe4F,WAAf,CAAvB,CAAR,CAA4DM,IAA5D,CAAiE,UAACC,IAAD,EAAU;AAAA;;AAC/E,oBAAIA,IAAI,CAACC,MAAL,KAAgB,IAAhB,IAAwB,CAAAD,IAAI,SAAJ,IAAAA,IAAI,WAAJ,2BAAAA,IAAI,CAAEE,IAAN,4DAAYC,UAAZ,MAA2B,GAAvD,EAA4D;AAC1D,sBAAI,CAAA5H,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEqB,UAAN,MAAqB1B,qBAAzB,EAAgD;AAC9C,wBAAMkI,gBAAgB,GAAGjH,YAAH,aAAGA,YAAH,uBAAGA,YAAY,CAAEkH,SAAd,EAAzB;AACA,wBAAI,CAAAD,gBAAgB,SAAhB,IAAAA,gBAAgB,WAAhB,YAAAA,gBAAgB,CAAEE,OAAlB,MAA8B,EAAlC,EAAsClH,QAAQ,CAAC3B,WAAW,CAAC0B,YAAD,aAACA,YAAD,uBAACA,YAAY,CAAEkH,SAAd,EAAD,EAA4B9H,IAA5B,CAAZ,CAAR;AACtCY,oBAAAA,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAEoH,QAAd,CAAuB,SAAvB,EAAkC,EAAlC;AACD;AACF;AACF,eARK,CAvBiB;;AAAA;AAgCvBC,cAAAA,kBAAkB;;AAhCK;AAmCzBlB,cAAAA,oBAAoB;;AAnCK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAlBD,kBAAkB;AAAA;AAAA;AAAA,KAAxB;;AAsCA,MAAMoB,cAAc;AAAA,yEAAG,kBAAOzB,cAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACf0B,cAAAA,OADe,GACL;AACdf,gBAAAA,YAAY,EAAEX,cADA;AAEdU,gBAAAA,SAAS,EAAEnH,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEoI;AAFH,eADK;AAAA;AAAA,qBAKfvH,QAAQ,CAAC/B,cAAc,CAACkB,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEsB,MAAP,EAAe6G,OAAf,CAAf,CALO;;AAAA;AAMrBF,cAAAA,kBAAkB;;AANG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAdC,cAAc;AAAA;AAAA;AAAA,KAApB;;AASA,MAAMrB,sBAAsB,GAAG,SAAzBA,sBAAyB,GAAM;AACnChG,IAAAA,QAAQ,CACNzC,SAAS,CAAC;AACRiK,MAAAA,SAAS,EAAE,mBADH;AAERC,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAEnJ,KAAK,CAACgB,MAAN,CAAasE,CAAb,CAAe,kBAAf,CADF;AAEL8D,QAAAA,cAAc,EAAE,KAFX;AAGLC,QAAAA,SAAS,EAAE,IAHN;AAILC,QAAAA,QAAQ,EAAE,IAJL;AAKLC,QAAAA,gBAAgB,EAAE,IALb;AAMLC,QAAAA,cAAc,EAAE;AACd3F,UAAAA,IAAI,EAAE3D,uBAAuB,CAAC2D,IAAxB,CAA6B6B,SADrB;AAEd+D,UAAAA,QAAQ,EAAE;AACRC,YAAAA,MAAM,EAAE,kBAAM;AACZjI,cAAAA,QAAQ,CAACxC,SAAS,EAAV,CAAR;;AACA,kBAAIiE,aAAJ,EAAmB;AACjBqE,gBAAAA,qBAAqB;AACtB,eAFD,MAEO;AACLG,gBAAAA,kBAAkB,CAAClF,QAAQ,CAACC,SAAV,CAAlB;AACD;AACF,aARO;AASRkH,YAAAA,MAAM,EAAE,kBAAM;AACZlI,cAAAA,QAAQ,CAACxC,SAAS,EAAV,CAAR;AACD;AAXO;AAFI;AANX;AAFC,KAAD,CADH,CAAR;AA4BD,GA7BD;;AA+BA,MAAMsI,qBAAqB,GAAG,SAAxBA,qBAAwB,GAA+C;AAAA,QAA9C1D,IAA8C,uEAAvCrB,QAAQ,CAACC,SAA8B;AAAA,QAAnB4E,cAAmB;AAC3E5F,IAAAA,QAAQ,CACNzC,SAAS,CAAC;AACRiK,MAAAA,SAAS,EAAE,mBADH;AAERC,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAEnJ,KAAK,CAACgB,MAAN,CAAasE,CAAb,CAAe,kBAAf,CADF;AAEL8D,QAAAA,cAAc,EAAE,KAFX;AAGLC,QAAAA,SAAS,EAAE,IAHN;AAILC,QAAAA,QAAQ,EAAE,IAJL;AAKLC,QAAAA,gBAAgB,EAAE,IALb;AAMLC,QAAAA,cAAc,EAAE;AACd3F,UAAAA,IAAI,EAAE3D,uBAAuB,CAAC2D,IAAxB,CAA6B+F,QADrB;AAEdH,UAAAA,QAAQ,EAAE;AACRC,YAAAA,MAAM,EAAE,kBAAM;AACZjI,cAAAA,QAAQ,CAACxC,SAAS,EAAV,CAAR;AACAyI,cAAAA,kBAAkB,CAAC7D,IAAD,EAAOwD,cAAP,CAAlB;AACD,aAJO;AAKRsC,YAAAA,MAAM,EAAE,kBAAM;AACZlI,cAAAA,QAAQ,CAACxC,SAAS,EAAV,CAAR;AACD;AAPO;AAFI;AANX;AAFC,KAAD,CADH,CAAR;AAwBD,GAzBD;;AA2BA,MAAM4I,yBAAyB,GAAG,SAA5BA,yBAA4B,GAAM;AACtCpG,IAAAA,QAAQ,CACNzC,SAAS,CAAC;AACRiK,MAAAA,SAAS,EAAE,mBADH;AAERC,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAEnJ,KAAK,CAACgB,MAAN,CAAasE,CAAb,CAAe,kBAAf,CADF;AAEL8D,QAAAA,cAAc,EAAE,KAFX;AAGLC,QAAAA,SAAS,EAAE,IAHN;AAILC,QAAAA,QAAQ,EAAE,IAJL;AAKLC,QAAAA,gBAAgB,EAAE,IALb;AAMLC,QAAAA,cAAc,EAAE;AACd3F,UAAAA,IAAI,EAAE3D,uBAAuB,CAAC2D,IAAxB,CAA6BlB,YADrB;AAEd8G,UAAAA,QAAQ,EAAE;AACRC,YAAAA,MAAM,EAAE,kBAAM;AACZjI,cAAAA,QAAQ,CAACxC,SAAS,EAAV,CAAR;AACAyI,cAAAA,kBAAkB,CAAClF,QAAQ,CAACG,YAAV,CAAlB;AACD,aAJO;AAKRgH,YAAAA,MAAM,EAAE,kBAAM;AACZlI,cAAAA,QAAQ,CAACxC,SAAS,EAAV,CAAR;AACD;AAPO;AAFI;AANX;AAFC,KAAD,CADH,CAAR;AAwBD,GAzBD;;AA2BA,MAAM4K,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAChC,QAAI1I,UAAJ,EAAgB;AACdG,MAAAA,gBAAgB,CAAC,EAAD,EAAK,IAAL,CAAhB;AACD,KAFD,MAEO;AACL,cAAQQ,aAAR;AACE,aAAKxB,4BAA4B,CAACwJ,MAA7B,CAAoCC,aAAzC;AACE,iBAAOrI,OAAO,CAACsI,OAAR,WAAmBxJ,MAAM,CAACsJ,MAAP,CAAcG,UAAd,CAAyBC,IAA5C,SAAmDnI,eAAe,kBAAWA,eAAX,IAA+B,EAAjG,EAAP;;AACF,aAAKzB,4BAA4B,CAACwJ,MAA7B,CAAoCK,aAAzC;AACE,iBAAOzI,OAAO,CAACsI,OAAR,WAAmBxJ,MAAM,CAACsJ,MAAP,CAAcG,UAAd,CAAyBG,IAA5C,cAAoDxJ,IAApD,aAAoDA,IAApD,uBAAoDA,IAAI,CAAEyJ,OAA1D,EAAP;;AACF,aAAK/J,4BAA4B,CAACwJ,MAA7B,CAAoCQ,eAAzC;AACE,iBAAO5I,OAAO,CAACsI,OAAR,WAAmBxJ,MAAM,CAACsJ,MAAP,CAAcG,UAAd,CAAyBM,KAA5C,cAAqD3J,IAArD,aAAqDA,IAArD,uBAAqDA,IAAI,CAAE4J,UAA3D,EAAP;;AACF;AACE;AARJ;AAUD;AACF,GAfD;;AAiBA,MAAMlD,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACD,cAAD,EAAoB;AAClD5F,IAAAA,QAAQ,CACNzC,SAAS,CAAC;AACRiK,MAAAA,SAAS,EAAE,SADH;AAERC,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAEnJ,KAAK,CAACgB,MAAN,CAAasE,CAAb,CAAe,cAAf,CADF;AAELmF,QAAAA,IAAI,EAAEzK,KAAK,CAACgB,MAAN,CAAasE,CAAb,CAAe,oDAAf,CAFD;AAGL+D,QAAAA,SAAS,EAAE,IAHN;AAILC,QAAAA,QAAQ,EAAE,IAJL;AAKLE,QAAAA,cAAc,EAAE;AACdkB,UAAAA,WAAW,EAAE1K,KAAK,CAACgB,MAAN,CAAasE,CAAb,CAAe,QAAf,CADC;AAEdqF,UAAAA,YAAY,EAAE3K,KAAK,CAACgB,MAAN,CAAasE,CAAb,CAAe,SAAf,CAFA;AAGdsF,UAAAA,aAAa,EAAE,yBAAM;AACnB9B,YAAAA,cAAc,CAACzB,cAAD,CAAd;AACD;AALa;AALX;AAFC,KAAD,CADH,CAAR;AAkBD,GAnBD;;AAqBA,MAAMwB,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAC/BnH,IAAAA,OAAO,CAACmJ,IAAR,WAAgBrK,MAAM,CAACsJ,MAAP,CAAcG,UAAd,CAAyBM,KAAzC,cAAkD3J,IAAlD,aAAkDA,IAAlD,uBAAkDA,IAAI,CAAE4J,UAAxD;AACD,GAFD;;AAIA,MAAMM,eAAe,GAAG,CAAAlK,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAE0H,MAAN,MAAiBjI,yBAAzC;AACA,MAAM0K,kBAAkB,GAAG/K,KAAK,CAACuD,OAAN,CAAcC,YAAd,CAA2BJ,gBAA3B,EAA6C,IAA7C,CAA3B;AACA,MAAM4H,YAAY,GAAGhL,KAAK,CAACuD,OAAN,CAAcC,YAAd,CAA2B7B,aAA3B,EAA0C,IAA1C,CAArB;AACA,MAAMsJ,cAAc,GAAGjL,KAAK,CAACuD,OAAN,CAAcC,YAAd,CAA2BmC,cAA3B,EAA2C,IAA3C,KAAoDA,cAAc,CAACuF,MAAf,GAAwB,CAAnG;AAEA7M,EAAAA,SAAS,CAAC,YAAM;AACd6H,IAAAA,oBAAoB;AACpB,WAAO,YAAM;AACXzE,MAAAA,QAAQ,CAAClC,mCAAmC,EAApC,CAAR;AACD,KAFD;AAGD,GALQ,EAKN,EALM,CAAT,CA9YC,CAmZO;;AAERlB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI2B,KAAK,CAACuD,OAAN,CAAcC,YAAd,CAA2B7B,aAA3B,EAA0C,IAA1C,KAAmDY,aAAvD,EAAsE;AACpEgE,MAAAA,sBAAsB;AACvB;AACF,GAJQ,EAIN,CAAC5E,aAAD,CAJM,CAAT,CArZC,CAyZoB;;AAErBtD,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIkE,aAAJ,EAAmB;AACjB,UAAIvC,KAAK,CAACuD,OAAN,CAAcC,YAAd,CAA2B7B,aAA3B,EAA0C,IAA1C,KAAmD,CAAC3B,KAAK,CAACuD,OAAN,CAAcC,YAAd,CAA2BR,aAA3B,EAA0C,IAA1C,CAAxD,EAAyG;AACvGD,QAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACD,OAFD,MAEO;AACLA,QAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACD;AACF;AACF,GARQ,EAQN,CAACC,aAAD,CARM,CAAT,CA3ZC,CAmaoB;;AAErB3E,EAAAA,SAAS,CAAC,YAAM;AACd+C,IAAAA,UAAU,CAAC2J,kBAAkB,IAAI9J,iBAAvB,CAAV;AACD,GAFQ,EAEN,CAAC8J,kBAAD,EAAqB9J,iBAArB,CAFM,CAAT,CAraC,CAua4C;;AAE7C,sBACE,QAAC,iBAAD;AACE,IAAA,eAAe,EAAE6J,eADnB;AAEE,IAAA,gBAAgB,EAAElI,gBAFpB;AAGE,IAAA,cAAc,EAAEE,cAHlB;AAIE,IAAA,aAAa,EAAEP,aAJjB;AAKE,IAAA,kBAAkB,EAAEwI,kBALtB;AAME,IAAA,YAAY,EAAEC,YANhB;AAOE,IAAA,cAAc,EAAEC,cAPlB;AAQE,IAAA,OAAO,EAAEhG,OARX;AASE,IAAA,IAAI,EAAEtD,aATR;AAUE,IAAA,MAAM,EAAE2B,MAVV;AAWE,IAAA,YAAY,EAAEuB,aAXhB;AAYE,IAAA,cAAc,EAAEc,cAZlB;AAaE,IAAA,iBAAiB,EAAE1E,iBAbrB;AAcE,IAAA,IAAI,EAAEL,IAdR;AAeE,IAAA,mBAAmB,EAAEW,mBAfvB;AAgBE,IAAA,QAAQ,EAAE;AACRiG,MAAAA,mBAAmB,EAAnBA,mBADQ;AAERG,MAAAA,oBAAoB,EAApBA,oBAFQ;AAGRhF,MAAAA,YAAY,EAAZA,YAHQ;AAIRkH,MAAAA,mBAAmB,EAAnBA;AAJQ;AAhBZ;AAAA;AAAA;AAAA;AAAA,UADF;AAyBD;;GA3cuBnJ,a;UAULjC,W,EACDK,U,EAEMN,W,EACKA,W,EACLA,W,EACAA,W,EACEA,W,EA6BFE,O;;;KA9CAgC,a","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useForm } from 'react-hook-form';\r\nimport * as Yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport xorBy from 'lodash/xorBy';\r\nimport { useHistory } from 'react-router';\r\n\r\n//app\r\nimport { TaskCheckListView } from './TaskCheckList.view';\r\nimport {\r\n  showModal,\r\n  hideModal,\r\n  getTaskChecklist,\r\n  getNextTaskList,\r\n  selectTaskCheckList,\r\n  selectTaskNextActionList,\r\n  selectUserOrganisation,\r\n  resetTaskProcessingChecklistChanges,\r\n  postSaveTaskCheckListActions,\r\n  postSaveNextTaskAction,\r\n  postCloseClaim,\r\n  getCurrencyPurchasedValue,\r\n  selectClaimsFnolPushBackRoute,\r\n  selectFnolSelectedTab,\r\n  addTaskNote,\r\n} from 'stores';\r\nimport { FormCheckbox } from 'components';\r\nimport * as utils from 'utils';\r\nimport {\r\n  ORGANIZATIONS,\r\n  TASK_CHECKLIST_WARNINGS,\r\n  CLOSE_CLAIM,\r\n  ADVICE_AND_SETTLEMENT,\r\n  TASK_TAB_COMPLETED_STATUS,\r\n  CLAIMS_FNOL_PUSH_BACK_ROUTES,\r\n  FIRST_ADVICE_FEEDBACK,\r\n} from 'consts';\r\nimport config from 'config';\r\n\r\n//mui\r\nimport { Box } from '@material-ui/core';\r\n\r\nTaskCheckList.propTypes = {\r\n  task: PropTypes.object.isRequired,\r\n  currencyPurchasedValue: PropTypes.string.isRequired,\r\n  isCurrencyChanged: PropTypes.bool.isRequired,\r\n  isDirtyRef: PropTypes.bool.isRequired,\r\n  setIsDirty: PropTypes.func.isRequired,\r\n  handleDirtyCheck: PropTypes.func.isRequired,\r\n};\r\nexport default function TaskCheckList({\r\n  task,\r\n  currencyPurchasedValue,\r\n  isCurrencyChanged,\r\n  isDirtyRef,\r\n  setIsDirty,\r\n  handleDirtyCheck,\r\n  sanctionCheckStatus,\r\n  formHandlers,\r\n}) {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const taskCheckList = useSelector(selectTaskCheckList);\r\n  const taskNextActionList = useSelector(selectTaskNextActionList);\r\n  const userOrgDetail = useSelector(selectUserOrganisation);\r\n  const pushBackRoute = useSelector(selectClaimsFnolPushBackRoute);\r\n  const fnolSelectedTab = useSelector(selectFnolSelectedTab);\r\n\r\n  const taskCode = task?.taskDefKey;\r\n  const taskId = task?.taskId;\r\n  const userOrgName = userOrgDetail?.name.toLowerCase() || ORGANIZATIONS.mphasis.name;\r\n  const isMphasisUser = userOrgName === ORGANIZATIONS.mphasis.name;\r\n  const saveType = { checkList: 'checkList', nextAction: 'nextAction', completeTask: 'completeTask' };\r\n\r\n  const [allSelectionFlag, setAllSelectionFlag] = useState(false);\r\n  const [nextActionFlag, setNextActionFlag] = useState(!isMphasisUser);\r\n  const [mandatoryList, setMandatoryList] = useState([]);\r\n  const [nextActionVal, setNextActionVal] = useState('');\r\n  const [checkListChanges, setCheckListChanges] = useState([]);\r\n\r\n  let fields = utils.generic.isValidArray(taskCheckList, true)\r\n    ? taskCheckList.map((eachCheck) => ({\r\n        name: eachCheck?.actionListID.toString(),\r\n        type: 'checkbox',\r\n        defaultValue: Boolean(eachCheck?.isActioned) || false,\r\n        validation: eachCheck?.isMandatory ? Yup.bool().required() : Yup.bool(),\r\n        muiComponentProps: {\r\n          onChange: (name, value) => handleCheckListChange(name, value),\r\n        },\r\n      }))\r\n    : [];\r\n\r\n  const defaultValues = utils.form.getInitialValues(fields);\r\n  const validationSchema = utils.form.getValidationSchema(fields);\r\n\r\n  const checkListForm = useForm({\r\n    defaultValues,\r\n    ...(validationSchema && { resolver: yupResolver(validationSchema) }),\r\n  });\r\n\r\n  const headerFields = [\r\n    {\r\n      name: 'selectAllValues',\r\n      type: 'checkbox',\r\n      defaultValue: false,\r\n      muiComponentProps: {\r\n        onChange: (name, value) => handleAllCheckListSelected(name, value),\r\n      },\r\n    },\r\n  ];\r\n\r\n  const columns = [\r\n    {\r\n      id: 'select',\r\n      label: (\r\n        <Box mb={-1.25}>\r\n          {utils.generic.isValidArray(taskCheckList, true) && (\r\n            <FormCheckbox {...utils.form.getFieldProps(headerFields, 'selectAllValues')} />\r\n          )}\r\n        </Box>\r\n      ),\r\n      visible: true,\r\n    },\r\n    {\r\n      id: 'ChecklistItems',\r\n      label: utils.string.t('claims.processing.taskDetailsCheckList.columns.ChecklistItems'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n      mandatory: true,\r\n    },\r\n    {\r\n      id: 'lastUpdatedBy',\r\n      label: utils.string.t('claims.processing.taskDetailsCheckList.columns.lastUpdatedBy'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n      mandatory: true,\r\n    },\r\n    {\r\n      id: 'lastUpdatedOn',\r\n      label: utils.string.t('claims.processing.taskDetailsCheckList.columns.lastUpdatedOn'),\r\n      sort: { type: 'date', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n      mandatory: true,\r\n    },\r\n  ];\r\n\r\n  const popoverActions = [\r\n    { id: 'blank', label: '', callback: () => handleNextActionSelected('') },\r\n    ...taskNextActionList.map((action) => ({\r\n      id: action?.taskCode,\r\n      label: action?.taskLabel,\r\n      data: action,\r\n      callback: () => handleNextActionSelected(action?.taskCode),\r\n    })),\r\n  ];\r\n  // this has to be removed after check list added to 'First Advice- Advise Market','First Advice- Client Acknowledgement'\r\n  const demoTasks = [\r\n    'First Advice - Advise to Market',\r\n    'First Advice - Client Acknowledgement',\r\n    'First Advice: Advise Market',\r\n    'First Advice: Client Acknowledgement',\r\n  ];\r\n  const fetchDataFromBackend = () => {\r\n    /** This if-else condition has to be removed after the \r\n     'First Advice- Advise Market','First Advice- Client Acknowledgement'\r\n      checklist created\r\n     **/\r\n    if (demoTasks.includes(task?.description)) {\r\n      dispatch(getTaskChecklist({ taskCode: 'FirstAdvice', taskId, userOrgName, viewLoader: false }));\r\n    } else {\r\n      taskCode === FIRST_ADVICE_FEEDBACK\r\n        ? dispatch(getTaskChecklist({ taskCode: 'FirstAdviceFeedback', taskId, userOrgName, viewLoader: false }))\r\n        : dispatch(getTaskChecklist({ taskCode, taskId, userOrgName, viewLoader: false }));\r\n    }\r\n\r\n    dispatch(getNextTaskList({ taskCode, viewLoader: false }));\r\n    if (taskCode === ADVICE_AND_SETTLEMENT) {\r\n      dispatch(getCurrencyPurchasedValue(task?.processId));\r\n    }\r\n  };\r\n\r\n  const constructMandatoryList = () => {\r\n    const result = taskCheckList\r\n      .filter((item) => item?.isMandatory && !item?.isActioned)\r\n      .map((item) => {\r\n        return item?.actionListID.toString();\r\n      });\r\n    setMandatoryList(result);\r\n  };\r\n\r\n  const updateMandatoryList = (name) => {\r\n    if (isMphasisUser) {\r\n      const wasMandatory = !!taskCheckList.find((item) => {\r\n        return item?.actionListID.toString() === name && item?.isMandatory;\r\n      });\r\n      if (wasMandatory) {\r\n        const newList = xorBy(mandatoryList, [name]) || [];\r\n        setMandatoryList(newList);\r\n      }\r\n    } else {\r\n      setMandatoryList([]);\r\n    }\r\n  };\r\n\r\n  const handleCheckListChange = (name, value) => {\r\n    updateMandatoryList(name);\r\n    const findCheckItem = taskCheckList.find((item) => {\r\n      const keyCheck = item?.actionListID.toString();\r\n      return keyCheck === name;\r\n    });\r\n    if (findCheckItem) {\r\n      const constructChangeItem = [findCheckItem].map((item) => {\r\n        return {\r\n          actionListDetailID: item?.actionListDetailID,\r\n          actionListID: item?.actionListID,\r\n          isActioned: !value ? 0 : 1,\r\n        };\r\n      });\r\n      const newChangeList = xorBy(checkListChanges, constructChangeItem, 'actionListID');\r\n      setCheckListChanges(newChangeList);\r\n    }\r\n  };\r\n\r\n  const handleAllCheckListSelected = (name, isAllSelected) => {\r\n    setAllSelectionFlag(isAllSelected);\r\n    if (isMphasisUser) {\r\n      if (isAllSelected) {\r\n        setMandatoryList([]);\r\n      } else {\r\n        constructMandatoryList();\r\n      }\r\n      setNextActionFlag(isAllSelected);\r\n    }\r\n    const constructChangeItem = taskCheckList.map((item) => {\r\n      return {\r\n        actionListDetailID: item?.actionListDetailID,\r\n        actionListID: item?.actionListID,\r\n        isActioned: !isAllSelected ? 0 : 1,\r\n      };\r\n    });\r\n    setCheckListChanges(constructChangeItem);\r\n  };\r\n\r\n  const handleNextActionSelected = (nextActionCode) => {\r\n    setNextActionVal(nextActionCode);\r\n    if (nextActionCode === CLOSE_CLAIM) {\r\n      handleConfirmClaimClose(nextActionCode);\r\n    } else {\r\n      handleNextTaskWarning(saveType.nextAction, nextActionCode);\r\n    }\r\n  };\r\n\r\n  const checkListChangeSave = () => {\r\n    if (isMphasisUser && utils.generic.isValidArray(mandatoryList, true)) {\r\n      handleMandatoryWarning();\r\n    } else {\r\n      saveTaskOperations(saveType.checkList);\r\n    }\r\n  };\r\n\r\n  const checkListChangeReset = () => {\r\n    checkListForm.reset();\r\n    setCheckListChanges([]);\r\n    if (utils.generic.isValidArray(taskCheckList, true) && isMphasisUser) {\r\n      constructMandatoryList();\r\n    } else {\r\n      setMandatoryList([]);\r\n    }\r\n  };\r\n\r\n  const completeTask = () => {\r\n    handleTaskCompleteWarning();\r\n  };\r\n\r\n  const saveTaskOperations = async (type, nextActionCode) => {\r\n    // \"nextTaskCode\" is null for postSaveNextTaskAction to mark task as complete\r\n    // \"nextTaskCode\" is null for postSaveTaskCheckListActions & postSaveNextTaskAction (complete task scenario)\r\n\r\n    const saveRequest = {\r\n      processID: task?.processId,\r\n      nextTaskCode: type !== saveType.nextAction ? null : nextActionCode || nextActionVal,\r\n      currencyPurchased: currencyPurchasedValue,\r\n      approvalStatus: task?.approvalStatus,\r\n      actionListDetails: checkListChanges,\r\n    };\r\n\r\n    if (type === saveType.checkList) {\r\n      await dispatch(postSaveTaskCheckListActions(task?.taskId, saveRequest)).then((resp) => {\r\n        if (resp.status === 'OK' || resp?.json?.statusCode === 500) {\r\n          if (task?.taskDefKey === FIRST_ADVICE_FEEDBACK) {\r\n            const notesDescription = formHandlers?.getValues();\r\n            if (notesDescription?.details !== '') dispatch(addTaskNote(formHandlers?.getValues(), task));\r\n          }\r\n        }\r\n      });\r\n      fetchDataFromBackend();\r\n    } else {\r\n      await dispatch(postSaveNextTaskAction(task?.taskId, saveRequest)).then((resp) => {\r\n        if (resp.status === 'OK' || resp?.json?.statusCode === 500) {\r\n          if (task?.taskDefKey === FIRST_ADVICE_FEEDBACK) {\r\n            const notesDescription = formHandlers?.getValues();\r\n            if (notesDescription?.details !== '') dispatch(addTaskNote(formHandlers?.getValues(), task));\r\n            formHandlers?.setValue('details', '');\r\n          }\r\n        }\r\n      });\r\n      navigateToTaskGrid();\r\n    }\r\n\r\n    checkListChangeReset();\r\n  };\r\n\r\n  const closeClaimTask = async (nextActionCode) => {\r\n    const payload = {\r\n      nextTaskCode: nextActionCode,\r\n      processID: task?.rootProcessId,\r\n    };\r\n    await dispatch(postCloseClaim(task?.taskId, payload));\r\n    navigateToTaskGrid();\r\n  };\r\n\r\n  const handleMandatoryWarning = () => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CHECK_LIST_ALERTS',\r\n        props: {\r\n          title: utils.string.t('navigation.alert'),\r\n          hideCompOnBlur: false,\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            type: TASK_CHECKLIST_WARNINGS.type.mandatory,\r\n            handlers: {\r\n              submit: () => {\r\n                dispatch(hideModal());\r\n                if (nextActionVal) {\r\n                  handleNextTaskWarning();\r\n                } else {\r\n                  saveTaskOperations(saveType.checkList);\r\n                }\r\n              },\r\n              cancel: () => {\r\n                dispatch(hideModal());\r\n              },\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleNextTaskWarning = (type = saveType.checkList, nextActionCode) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CHECK_LIST_ALERTS',\r\n        props: {\r\n          title: utils.string.t('navigation.alert'),\r\n          hideCompOnBlur: false,\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            type: TASK_CHECKLIST_WARNINGS.type.nextTask,\r\n            handlers: {\r\n              submit: () => {\r\n                dispatch(hideModal());\r\n                saveTaskOperations(type, nextActionCode);\r\n              },\r\n              cancel: () => {\r\n                dispatch(hideModal());\r\n              },\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleTaskCompleteWarning = () => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CHECK_LIST_ALERTS',\r\n        props: {\r\n          title: utils.string.t('navigation.alert'),\r\n          hideCompOnBlur: false,\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            type: TASK_CHECKLIST_WARNINGS.type.completeTask,\r\n            handlers: {\r\n              submit: () => {\r\n                dispatch(hideModal());\r\n                saveTaskOperations(saveType.completeTask);\r\n              },\r\n              cancel: () => {\r\n                dispatch(hideModal());\r\n              },\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const checklistDirtyCheck = () => {\r\n    if (isDirtyRef) {\r\n      handleDirtyCheck('', true);\r\n    } else {\r\n      switch (pushBackRoute) {\r\n        case CLAIMS_FNOL_PUSH_BACK_ROUTES.routes.lossAndClaims:\r\n          return history.replace(`${config.routes.claimsFNOL.root}${fnolSelectedTab ? `/tab/${fnolSelectedTab}` : ''}`);\r\n        case CLAIMS_FNOL_PUSH_BACK_ROUTES.routes.lossDashboard:\r\n          return history.replace(`${config.routes.claimsFNOL.loss}/${task?.lossRef}`);\r\n        case CLAIMS_FNOL_PUSH_BACK_ROUTES.routes.claimsDashboard:\r\n          return history.replace(`${config.routes.claimsFNOL.claim}/${task?.processRef}`);\r\n        default:\r\n          return;\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleConfirmClaimClose = (nextActionCode) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          title: utils.string.t('status.alert'),\r\n          hint: utils.string.t('claims.processing.taskDetailsCheckList.closeClaims'),\r\n          fullWidth: true,\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            cancelLabel: utils.string.t('app.no'),\r\n            confirmLabel: utils.string.t('app.yes'),\r\n            submitHandler: () => {\r\n              closeClaimTask(nextActionCode);\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const navigateToTaskGrid = () => {\r\n    history.push(`${config.routes.claimsFNOL.claim}/${task?.processRef}`);\r\n  };\r\n\r\n  const isCompletedTask = task?.status === TASK_TAB_COMPLETED_STATUS;\r\n  const isCheckListChanged = utils.generic.isValidArray(checkListChanges, true);\r\n  const hasCheckList = utils.generic.isValidArray(taskCheckList, true);\r\n  const hasNextActions = utils.generic.isValidArray(popoverActions, true) && popoverActions.length > 1;\r\n\r\n  useEffect(() => {\r\n    fetchDataFromBackend();\r\n    return () => {\r\n      dispatch(resetTaskProcessingChecklistChanges());\r\n    };\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    if (utils.generic.isValidArray(taskCheckList, true) && isMphasisUser) {\r\n      constructMandatoryList();\r\n    }\r\n  }, [taskCheckList]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    if (isMphasisUser) {\r\n      if (utils.generic.isValidArray(taskCheckList, true) && !utils.generic.isValidArray(mandatoryList, true)) {\r\n        setNextActionFlag(true);\r\n      } else {\r\n        setNextActionFlag(false);\r\n      }\r\n    }\r\n  }, [mandatoryList]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    setIsDirty(isCheckListChanged || isCurrencyChanged);\r\n  }, [isCheckListChanged, isCurrencyChanged]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <TaskCheckListView\r\n      isCompletedTask={isCompletedTask}\r\n      allSelectionFlag={allSelectionFlag}\r\n      nextActionFlag={nextActionFlag}\r\n      isMphasisUser={isMphasisUser}\r\n      isCheckListChanged={isCheckListChanged}\r\n      hasCheckList={hasCheckList}\r\n      hasNextActions={hasNextActions}\r\n      columns={columns}\r\n      rows={taskCheckList}\r\n      fields={fields}\r\n      formControls={checkListForm}\r\n      popoverActions={popoverActions}\r\n      isCurrencyChanged={isCurrencyChanged}\r\n      task={task}\r\n      sanctionCheckStatus={sanctionCheckStatus}\r\n      handlers={{\r\n        checkListChangeSave,\r\n        checkListChangeReset,\r\n        completeTask,\r\n        checklistDirtyCheck,\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}