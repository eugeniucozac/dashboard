{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\forms\\\\ModellingTask\\\\ModellingTask.view.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport FormHelperText from '@material-ui/core/FormHelperText'; // app\n\nimport styles from './ModellingTask.styles';\nimport * as utils from 'utils';\nimport { Button, FormContainer, FormFields, FormActions, FormGrid, FormDate, FormCheckbox, FormText, FormRadio, FormFileDrop, FormAutocomplete, FormSelect, Translate } from 'components'; // mui\n\nimport { makeStyles, Box } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModellingTaskView.propTypes = {\n  fields: PropTypes.array,\n  actions: PropTypes.array,\n  createdModellingTask: PropTypes.object,\n  folderValue: PropTypes.string,\n  isNew: PropTypes.bool,\n  validateFileType: PropTypes.func\n};\nexport function ModellingTaskView(_ref) {\n  _s();\n\n  var fields = _ref.fields,\n      actions = _ref.actions,\n      isNew = _ref.isNew,\n      validateFileType = _ref.validateFileType;\n  var classes = makeStyles(styles, {\n    name: 'ModellingTask'\n  })();\n  var defaultValues = utils.form.getInitialValues(fields);\n  var validationSchema = utils.form.getValidationSchema(fields);\n\n  var _useForm = useForm(_objectSpread({\n    defaultValues: defaultValues\n  }, validationSchema && {\n    resolver: yupResolver(validationSchema)\n  })),\n      control = _useForm.control,\n      register = _useForm.register,\n      watch = _useForm.watch,\n      reset = _useForm.reset,\n      errors = _useForm.errors,\n      handleSubmit = _useForm.handleSubmit,\n      setValue = _useForm.setValue,\n      trigger = _useForm.trigger,\n      formState = _useForm.formState,\n      getValues = _useForm.getValues;\n\n  var modellingTypeValue = watch('modellingType');\n  var fileTypeValue = watch('fileType');\n  var cancel = actions && actions.find(function (action) {\n    return action.name === 'cancel';\n  });\n  var submit = actions && actions.find(function (action) {\n    return action.name === 'submit';\n  });\n\n  var update = function update(id, value) {\n    setValue(id, value);\n    trigger(id);\n  };\n\n  var onCancel = function onCancel() {\n    cancel && utils.generic.isFunction(cancel.handler) && cancel.handler();\n    reset();\n  };\n\n  var onSubmit = function onSubmit(data, errors) {\n    var formData = getValues();\n    return submit && utils.generic.isFunction(submit.handler) && submit.handler(formData);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(FormContainer, {\n      type: \"dialog\",\n      onSubmit: handleSubmit(onSubmit),\n      \"data-testid\": \"form-addLayer\",\n      children: [/*#__PURE__*/_jsxDEV(FormFields, {\n        type: \"dialog\",\n        children: [/*#__PURE__*/_jsxDEV(FormGrid, {\n          container: true,\n          children: /*#__PURE__*/_jsxDEV(FormGrid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(FormAutocomplete, _objectSpread(_objectSpread({}, utils.form.getFieldProps(fields, 'insured')), {}, {\n              handleUpdate: update,\n              control: control,\n              error: errors.insured\n            }), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormGrid, {\n          container: true,\n          children: [/*#__PURE__*/_jsxDEV(FormGrid, {\n            item: true,\n            xs: 6,\n            children: /*#__PURE__*/_jsxDEV(FormRadio, _objectSpread(_objectSpread({}, utils.form.getFieldProps(fields, 'modellingType', control, errors)), {}, {\n              muiFormGroupProps: {\n                className: classes.formRadio\n              }\n            }), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormGrid, {\n            item: true,\n            xs: 6,\n            children: /*#__PURE__*/_jsxDEV(FormDate, _objectSpread(_objectSpread({}, utils.form.getFieldProps(fields, 'dueDate')), {}, {\n              control: control,\n              error: errors.dueDate\n            }), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormGrid, {\n          container: true,\n          children: [isNew ? /*#__PURE__*/_jsxDEV(FormGrid, {\n            item: true,\n            xs: 6,\n            children: [/*#__PURE__*/_jsxDEV(Translate, {\n              label: \"placement.generic.attachments\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(FormFileDrop, {\n              control: control,\n              onChange: function onChange(file) {\n                setValue('file', file);\n              },\n              name: \"file\",\n              dragLabel: utils.string.t('form.dragDrop.dragFileEmailHere'),\n              showUploadPreview: true,\n              fileNameLength: 30\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this) : null, /*#__PURE__*/_jsxDEV(FormGrid, {\n            item: true,\n            xs: 6,\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              className: isNew ? classes.fileTypeGridNew : classes.fileTypeGrid,\n              children: [/*#__PURE__*/_jsxDEV(FormCheckbox, _objectSpread(_objectSpread({}, utils.form.getFieldProps(fields, 'fileType')), {}, {\n                control: control,\n                register: register,\n                watch: watch,\n                error: errors.fileType\n              }), void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 17\n              }, this), validateFileType(modellingTypeValue, fileTypeValue) ? /*#__PURE__*/_jsxDEV(FormHelperText, {\n                className: classes.helpertext,\n                children: utils.string.t('placement.modelling.fileType.label')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 19\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this), !isNew ? /*#__PURE__*/_jsxDEV(FormGrid, {\n            item: true,\n            xs: 6,\n            children: /*#__PURE__*/_jsxDEV(FormSelect, _objectSpread(_objectSpread({}, utils.form.getFieldProps(fields, 'status')), {}, {\n              control: control\n            }), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 15\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormGrid, {\n          container: true,\n          children: /*#__PURE__*/_jsxDEV(FormGrid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(FormText, _objectSpread(_objectSpread({}, utils.form.getFieldProps(fields, 'notes')), {}, {\n              control: control,\n              error: errors.notes\n            }), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormActions, {\n        type: \"dialog\",\n        children: [cancel && /*#__PURE__*/_jsxDEV(Button, {\n          text: cancel.label,\n          variant: \"text\",\n          onClick: onCancel,\n          disabled: formState.isSubmitting\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 22\n        }, this), submit && /*#__PURE__*/_jsxDEV(Button, {\n          text: submit.label,\n          type: \"submit\",\n          disabled: formState.isSubmitting,\n          color: \"primary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ModellingTaskView, \"9cDbx0IcXAywLF6SfoHiV4o7Mhs=\", false, function () {\n  return [useForm];\n});\n\n_c = ModellingTaskView;\nModellingTaskView.displayName = \"ModellingTaskView\";\nModellingTaskView.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"ModellingTaskView\",\n  \"props\": {\n    \"fields\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"actions\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"createdModellingTask\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"folderValue\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"isNew\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"validateFileType\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\forms\\\\ModellingTask\\\\ModellingTask.view.js\"] = {\n    name: \"ModellingTaskView\",\n    docgenInfo: ModellingTaskView.__docgenInfo,\n    path: \"src\\\\forms\\\\ModellingTask\\\\ModellingTask.view.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ModellingTaskView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/forms/ModellingTask/ModellingTask.view.js"],"names":["React","PropTypes","useForm","yupResolver","FormHelperText","styles","utils","Button","FormContainer","FormFields","FormActions","FormGrid","FormDate","FormCheckbox","FormText","FormRadio","FormFileDrop","FormAutocomplete","FormSelect","Translate","makeStyles","Box","ModellingTaskView","propTypes","fields","array","actions","createdModellingTask","object","folderValue","string","isNew","bool","validateFileType","func","classes","name","defaultValues","form","getInitialValues","validationSchema","getValidationSchema","resolver","control","register","watch","reset","errors","handleSubmit","setValue","trigger","formState","getValues","modellingTypeValue","fileTypeValue","cancel","find","action","submit","update","id","value","onCancel","generic","isFunction","handler","onSubmit","data","formData","root","getFieldProps","insured","className","formRadio","dueDate","file","t","fileTypeGridNew","fileTypeGrid","fileType","helpertext","notes","label","isSubmitting"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\n\r\n// app\r\nimport styles from './ModellingTask.styles';\r\nimport * as utils from 'utils';\r\n\r\nimport {\r\n  Button,\r\n  FormContainer,\r\n  FormFields,\r\n  FormActions,\r\n  FormGrid,\r\n  FormDate,\r\n  FormCheckbox,\r\n  FormText,\r\n  FormRadio,\r\n  FormFileDrop,\r\n  FormAutocomplete,\r\n  FormSelect,\r\n  Translate,\r\n} from 'components';\r\n\r\n// mui\r\nimport { makeStyles, Box } from '@material-ui/core';\r\n\r\nModellingTaskView.propTypes = {\r\n  fields: PropTypes.array,\r\n  actions: PropTypes.array,\r\n  createdModellingTask: PropTypes.object,\r\n  folderValue: PropTypes.string,\r\n  isNew: PropTypes.bool,\r\n  validateFileType: PropTypes.func,\r\n};\r\n\r\nexport function ModellingTaskView({ fields, actions, isNew, validateFileType }) {\r\n  const classes = makeStyles(styles, { name: 'ModellingTask' })();\r\n  const defaultValues = utils.form.getInitialValues(fields);\r\n  const validationSchema = utils.form.getValidationSchema(fields);\r\n\r\n  const { control, register, watch, reset, errors, handleSubmit, setValue, trigger, formState, getValues } = useForm({\r\n    defaultValues,\r\n    ...(validationSchema && { resolver: yupResolver(validationSchema) }),\r\n  });\r\n\r\n  const modellingTypeValue = watch('modellingType');\r\n  const fileTypeValue = watch('fileType');\r\n\r\n  const cancel = actions && actions.find((action) => action.name === 'cancel');\r\n  const submit = actions && actions.find((action) => action.name === 'submit');\r\n\r\n  const update = (id, value) => {\r\n    setValue(id, value);\r\n    trigger(id);\r\n  };\r\n  const onCancel = () => {\r\n    cancel && utils.generic.isFunction(cancel.handler) && cancel.handler();\r\n    reset();\r\n  };\r\n\r\n  const onSubmit = (data, errors) => {\r\n    const formData = getValues();\r\n    return submit && utils.generic.isFunction(submit.handler) && submit.handler(formData);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <FormContainer type=\"dialog\" onSubmit={handleSubmit(onSubmit)} data-testid=\"form-addLayer\">\r\n        <FormFields type=\"dialog\">\r\n          <FormGrid container>\r\n            <FormGrid item xs={12}>\r\n              <FormAutocomplete\r\n                {...utils.form.getFieldProps(fields, 'insured')}\r\n                handleUpdate={update}\r\n                control={control}\r\n                error={errors.insured}\r\n              />\r\n            </FormGrid>\r\n          </FormGrid>\r\n          <FormGrid container>\r\n            <FormGrid item xs={6}>\r\n              <FormRadio\r\n                {...utils.form.getFieldProps(fields, 'modellingType', control, errors)}\r\n                muiFormGroupProps={{ className: classes.formRadio }}\r\n              />\r\n            </FormGrid>\r\n            <FormGrid item xs={6}>\r\n              <FormDate {...utils.form.getFieldProps(fields, 'dueDate')} control={control} error={errors.dueDate} />\r\n            </FormGrid>\r\n          </FormGrid>\r\n\r\n          <FormGrid container>\r\n            {isNew ? (\r\n              <FormGrid item xs={6}>\r\n                <Translate label=\"placement.generic.attachments\" />\r\n                <FormFileDrop\r\n                  control={control}\r\n                  onChange={(file) => {\r\n                    setValue('file', file);\r\n                  }}\r\n                  name=\"file\"\r\n                  dragLabel={utils.string.t('form.dragDrop.dragFileEmailHere')}\r\n                  showUploadPreview={true}\r\n                  fileNameLength={30}\r\n                />\r\n              </FormGrid>\r\n            ) : null}\r\n            <FormGrid item xs={6}>\r\n              <Box className={isNew ? classes.fileTypeGridNew : classes.fileTypeGrid}>\r\n                <FormCheckbox\r\n                  {...utils.form.getFieldProps(fields, 'fileType')}\r\n                  control={control}\r\n                  register={register}\r\n                  watch={watch}\r\n                  error={errors.fileType}\r\n                />\r\n                {validateFileType(modellingTypeValue, fileTypeValue) ? (\r\n                  <FormHelperText className={classes.helpertext}>{utils.string.t('placement.modelling.fileType.label')}</FormHelperText>\r\n                ) : null}\r\n              </Box>\r\n            </FormGrid>\r\n\r\n            {!isNew ? (\r\n              <FormGrid item xs={6}>\r\n                <FormSelect {...utils.form.getFieldProps(fields, 'status')} control={control} />\r\n              </FormGrid>\r\n            ) : null}\r\n          </FormGrid>\r\n          <FormGrid container>\r\n            <FormGrid item xs={12}>\r\n              <FormText {...utils.form.getFieldProps(fields, 'notes')} control={control} error={errors.notes} />\r\n            </FormGrid>\r\n          </FormGrid>\r\n        </FormFields>\r\n\r\n        <FormActions type=\"dialog\">\r\n          {cancel && <Button text={cancel.label} variant=\"text\" onClick={onCancel} disabled={formState.isSubmitting} />}\r\n          {submit && <Button text={submit.label} type=\"submit\" disabled={formState.isSubmitting} color=\"primary\" />}\r\n        </FormActions>\r\n      </FormContainer>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}