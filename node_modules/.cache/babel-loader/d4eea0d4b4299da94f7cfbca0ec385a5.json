{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { authLogout, addLoader, removeLoader } from 'stores';\nimport * as utils from 'utils';\nimport get from 'lodash/get';\nexport var getCasesList = function getCasesList() {\n  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint,\n        premiumProcessing = _getState.premiumProcessing;\n\n    var defaultError = {\n      file: 'stores/premiumProcessing.actions.getCases'\n    };\n    var type = params.hasOwnProperty('type') ? params.type : get(premiumProcessing, 'casesList.type');\n    var prevDirection = get(premiumProcessing, 'casesList.sort.direction') || '';\n    var newDirection = params.hasOwnProperty('direction') ? params.direction : prevDirection;\n    var prevSortBy = get(premiumProcessing, 'casesList.sort.by') || '';\n    var newSortBy = params.hasOwnProperty('orderBy') ? params.orderBy : prevSortBy;\n    var prevFilters = get(premiumProcessing, 'casesList.filters');\n    var filtersObject = params.hasOwnProperty('filters') ? params.filters : prevFilters;\n    var request = {\n      page: params && params.page || 1,\n      pageSize: params && params.size || premiumProcessing.casesList.pageSize,\n      sortBy: newSortBy,\n      taskView: type,\n      direction: newDirection,\n      filters: filtersObject || {},\n      checkSigning: params.checkSigning || false\n    };\n    dispatch(getCasesListRequest(request));\n    dispatch(addLoader('getCasesList'));\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.bpmService,\n      path: 'workflow/process/taskSummary/',\n      data: request\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      if ((data === null || data === void 0 ? void 0 : data.data.length) > 0) {\n        data === null || data === void 0 ? void 0 : data.data.forEach(function (element) {\n          element.id = \"\".concat(element.taskId, \"_\").concat(element.caseId, \"_\").concat(element.bpmProcessId);\n          element.assignedToUser['id'] = element.assignedToUser.emailId;\n        });\n      }\n\n      dispatch(getCasesListSuccess(data));\n      return data;\n    }).catch(function (err) {\n      utils.api.handleError(err, _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API fetch error (premiumProcessing.post)'\n      }));\n      dispatch(getCasesListFailure(err));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      return err;\n    }).finally(function () {\n      dispatch(removeLoader('getCasesList'));\n    });\n  };\n};\nexport var getCasesListRequest = function getCasesListRequest(params) {\n  return {\n    type: 'PREMIUM_PROCESSING_CASES_LIST_GET_REQUEST',\n    payload: params\n  };\n};\nexport var getCasesListSuccess = function getCasesListSuccess(data) {\n  return {\n    type: 'PREMIUM_PROCESSING_CASES_LIST_GET_SUCCESS',\n    payload: {\n      items: data.data,\n      pagination: data.pagination,\n      type: data.type,\n      fitlers: data.filters\n    }\n  };\n};\nexport var getCasesListFailure = function getCasesListFailure(error) {\n  return {\n    type: 'PREMIUM_PROCESSING_CASES_LIST_GET_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/premiumProcessing/premiumProcessing.actions.getCases.js"],"names":["authLogout","addLoader","removeLoader","utils","get","getCasesList","params","dispatch","getState","auth","user","endpoint","config","vars","premiumProcessing","defaultError","file","type","hasOwnProperty","prevDirection","newDirection","direction","prevSortBy","newSortBy","orderBy","prevFilters","filtersObject","filters","request","page","pageSize","size","casesList","sortBy","taskView","checkSigning","getCasesListRequest","api","post","token","accessToken","bpmService","path","data","then","response","handleResponse","json","handleNewData","length","forEach","element","id","taskId","caseId","bpmProcessId","assignedToUser","emailId","getCasesListSuccess","catch","err","handleError","message","getCasesListFailure","handleUnauthorized","finally","payload","items","pagination","fitlers","error"],"mappings":"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","sourcesContent":["import { authLogout, addLoader, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\nimport get from 'lodash/get';\r\n\r\nexport const getCasesList =\r\n  (params = {}) =>\r\n  (dispatch, getState) => {\r\n    // prettier-ignore\r\n    const { user: { auth }, config: { vars: { endpoint }}, premiumProcessing} = getState();\r\n\r\n    const defaultError = {\r\n      file: 'stores/premiumProcessing.actions.getCases',\r\n    };\r\n\r\n    const type = params.hasOwnProperty('type') ? params.type : get(premiumProcessing, 'casesList.type');\r\n    const prevDirection = get(premiumProcessing, 'casesList.sort.direction') || '';\r\n    const newDirection = params.hasOwnProperty('direction') ? params.direction : prevDirection;\r\n\r\n    const prevSortBy = get(premiumProcessing, 'casesList.sort.by') || '';\r\n    const newSortBy = params.hasOwnProperty('orderBy') ? params.orderBy : prevSortBy;\r\n\r\n    const prevFilters = get(premiumProcessing, 'casesList.filters');\r\n    const filtersObject = params.hasOwnProperty('filters') ? params.filters : prevFilters;\r\n    const request = {\r\n      page: (params && params.page) || 1,\r\n      pageSize: (params && params.size) || premiumProcessing.casesList.pageSize,\r\n      sortBy: newSortBy,\r\n      taskView: type,\r\n      direction: newDirection,\r\n      filters: filtersObject || {},\r\n      checkSigning: params.checkSigning || false,\r\n    };\r\n    dispatch(getCasesListRequest(request));\r\n    dispatch(addLoader('getCasesList'));\r\n    return utils.api\r\n      .post({\r\n        token: auth.accessToken,\r\n        endpoint: endpoint.bpmService,\r\n        path: 'workflow/process/taskSummary/',\r\n        data: request,\r\n      })\r\n      .then((response) => utils.api.handleResponse(response))\r\n      .then((json) => utils.api.handleNewData(json))\r\n      .then((data) => {\r\n        if (data?.data.length > 0) {\r\n          data?.data.forEach((element) => {\r\n            element.id = `${element.taskId}_${element.caseId}_${element.bpmProcessId}`;\r\n            element.assignedToUser['id'] = element.assignedToUser.emailId;\r\n          });\r\n        }\r\n        dispatch(getCasesListSuccess(data));\r\n        return data;\r\n      })\r\n      .catch((err) => {\r\n        utils.api.handleError(err, { ...defaultError, message: 'API fetch error (premiumProcessing.post)' });\r\n        dispatch(getCasesListFailure(err));\r\n        utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n        return err;\r\n      })\r\n      .finally(() => {\r\n        dispatch(removeLoader('getCasesList'));\r\n      });\r\n  };\r\n\r\nexport const getCasesListRequest = (params) => {\r\n  return {\r\n    type: 'PREMIUM_PROCESSING_CASES_LIST_GET_REQUEST',\r\n    payload: params,\r\n  };\r\n};\r\n\r\nexport const getCasesListSuccess = (data) => {\r\n  return {\r\n    type: 'PREMIUM_PROCESSING_CASES_LIST_GET_SUCCESS',\r\n    payload: {\r\n      items: data.data,\r\n      pagination: data.pagination,\r\n      type: data.type,\r\n      fitlers: data.filters,\r\n    },\r\n  };\r\n};\r\n\r\nexport const getCasesListFailure = (error) => {\r\n  return {\r\n    type: 'PREMIUM_PROCESSING_CASES_LIST_GET_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}