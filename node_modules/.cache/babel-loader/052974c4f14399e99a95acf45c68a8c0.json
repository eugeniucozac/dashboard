{"ast":null,"code":"import _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\n/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport { transformToNestObject } from 'react-hook-form';\n/**\n * From 0.32.0, Yup add TypeScript support and `path` typing is optional that's why we have `@ts-expect-error`\n * FYI: `path`: a string, indicating where there error was thrown. `path` is empty at the root level.\n * react-hook-form's values are object so path is defined\n * https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n */\n\nvar parseErrorSchema = function parseErrorSchema(error, validateAllFieldCriteria) {\n  return Array.isArray(error.inner) && error.inner.length ? error.inner.reduce(function (previous, _ref) {\n    var path = _ref.path,\n        message = _ref.message,\n        type = _ref.type;\n    // @ts-expect-error\n    var previousTypes = previous[path] && previous[path].types || {};\n    var key = path || type;\n    return Object.assign(Object.assign({}, previous), key ? _defineProperty({}, key, Object.assign(Object.assign({}, previous[key] || {\n      message: message,\n      type: type\n    }), validateAllFieldCriteria ? {\n      types: Object.assign(Object.assign({}, previousTypes), _defineProperty({}, type, previousTypes[type] ? // @ts-expect-error\n      [].concat(_toConsumableArray([].concat(previousTypes[type])), [message]) : message))\n    } : {})) : {});\n  }, {}) : _defineProperty({}, error.path, {\n    message: error.message,\n    type: error.type\n  });\n};\n\nexport var yupResolver = function yupResolver(schema) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    abortEarly: false\n  };\n  return /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, context) {\n      var validateAllFieldCriteria,\n          parsedErrors,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              validateAllFieldCriteria = _args.length > 2 && _args[2] !== undefined ? _args[2] : false;\n              _context.prev = 1;\n\n              if (options.context && process.env.NODE_ENV === 'development') {\n                // eslint-disable-next-line no-console\n                console.warn(\"You should not used the yup options context. Please, use the 'useForm' context object instead\");\n              }\n\n              _context.next = 5;\n              return schema.validate(values, Object.assign(Object.assign({}, options), {\n                context: context\n              }));\n\n            case 5:\n              _context.t0 = _context.sent;\n              _context.t1 = {};\n              return _context.abrupt(\"return\", {\n                values: _context.t0,\n                errors: _context.t1\n              });\n\n            case 10:\n              _context.prev = 10;\n              _context.t2 = _context[\"catch\"](1);\n              parsedErrors = parseErrorSchema(_context.t2, validateAllFieldCriteria);\n              return _context.abrupt(\"return\", {\n                values: {},\n                errors: transformToNestObject(parsedErrors)\n              });\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 10]]);\n    }));\n\n    return function (_x, _x2) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["../src/yup.ts"],"names":[],"mappings":";;;;;AAAA;AACA,SAAmB,qBAAnB,QAA6D,iBAA7D;AAGA;;;;;AAKG;;AACH,IAAM,gBAAgB,GAAG,SAAnB,gBAAmB,CACvB,KADuB,EAEvB,wBAFuB,EAGrB;AACF,SAAO,KAAK,CAAC,OAAN,CAAc,KAAK,CAAC,KAApB,KAA8B,KAAK,CAAC,KAAN,CAAY,MAA1C,GACH,KAAK,CAAC,KAAN,CAAY,MAAZ,CACE,UAAC,QAAD,QAA2D;AAAA,QAAzB,IAAyB,QAAzB,IAAyB;AAAA,QAAnB,OAAmB,QAAnB,OAAmB;AAAA,QAAV,IAAU,QAAV,IAAU;AACzD;AACA,QAAM,aAAa,GAAI,QAAQ,CAAC,IAAD,CAAR,IAAkB,QAAQ,CAAC,IAAD,CAAR,CAAe,KAAlC,IAA4C,EAAlE;AACA,QAAM,GAAG,GAAG,IAAI,IAAI,IAApB;AAEA,WAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,QADL,CAAA,EAEM,GAAG,uBAEA,GAFA,EAEI,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACC,QAAQ,CAAC,GAAD,CAAR,IAAiB;AACnB,MAAA,OAAO,EAAP,OADmB;AAEnB,MAAA,IAAI,EAAJ;AAFmB,KADlB,CAAA,EAKC,wBAAwB,GACxB;AACE,MAAA,KAAK,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACA,aADA,CAAA,sBAGF,IAHE,EAGK,aAAa,CAAC,IAAD,CAAb,GACJ;AADI,mCAEA,GAAG,MAAH,CAAU,aAAa,CAAC,IAAD,CAAvB,CAFA,IAEgC,OAFhC,KAGJ,OAND;AADP,KADwB,GAWxB,EAhBD,CAFJ,IAqBH,EAvBN,CAAA;AAyBD,GA/BH,EAgCE,EAhCF,CADG,uBAqCA,KAAK,CAAC,IArCN,EAqCa;AAAE,IAAA,OAAO,EAAE,KAAK,CAAC,OAAjB;AAA0B,IAAA,IAAI,EAAE,KAAK,CAAC;AAAtC,GArCb,CAAP;AAuCD,CA3CD;;AAiDA,OAAO,IAAM,WAAW,GAAG,SAAd,WAAc,CACzB,MADyB;AAAA,MAEzB,OAFyB,uEAEuB;AAC9C,IAAA,UAAU,EAAE;AADkC,GAFvB;AAAA;AAAA,yEAKE,iBAC3B,MAD2B,EAE3B,OAF2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAG3B,cAAA,wBAH2B,2DAGA,KAHA;AAAA;;AAMzB,kBAAI,OAAO,CAAC,OAAR,IAAmB,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,aAAhD,EAA+D;AAC7D;AACA,gBAAA,OAAO,CAAC,IAAR,CACE,+FADF;AAGD;;AAXwB;AAAA,qBAaT,MAAM,CAAC,QAAP,CAAgB,MAAhB,EAAsB,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAC/B,OAD+B,CAAA,EACxB;AACV,gBAAA,OAAO,EAAP;AADU,eADwB,CAAtB,CAbS;;AAAA;AAAA;AAAA,4BAiBf,EAjBe;AAAA;AAavB,gBAAA,MAbuB;AAiBvB,gBAAA,MAjBuB;AAAA;;AAAA;AAAA;AAAA;AAoBnB,cAAA,YApBmB,GAoBJ,gBAAgB,cAAI,wBAAJ,CApBZ;AAAA,+CAqBlB;AACL,gBAAA,MAAM,EAAE,EADH;AAEL,gBAAA,MAAM,EAAE,qBAAqB,CAAC,YAAD;AAFxB,eArBkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KALF;;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB","sourceRoot":"","sourcesContent":["/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport { transformToNestObject } from 'react-hook-form';\n/**\n * From 0.32.0, Yup add TypeScript support and `path` typing is optional that's why we have `@ts-expect-error`\n * FYI: `path`: a string, indicating where there error was thrown. `path` is empty at the root level.\n * react-hook-form's values are object so path is defined\n * https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n */\nconst parseErrorSchema = (error, validateAllFieldCriteria) => {\n    return Array.isArray(error.inner) && error.inner.length\n        ? error.inner.reduce((previous, { path, message, type }) => {\n            // @ts-expect-error\n            const previousTypes = (previous[path] && previous[path].types) || {};\n            const key = path || type;\n            return Object.assign(Object.assign({}, previous), (key\n                ? {\n                    [key]: Object.assign(Object.assign({}, (previous[key] || {\n                        message,\n                        type,\n                    })), (validateAllFieldCriteria\n                        ? {\n                            types: Object.assign(Object.assign({}, previousTypes), { \n                                // @ts-expect-error\n                                [type]: previousTypes[type]\n                                    ? // @ts-expect-error\n                                        [...[].concat(previousTypes[type]), message]\n                                    : message }),\n                        }\n                        : {})),\n                }\n                : {}));\n        }, {})\n        : {\n            // @ts-expect-error\n            [error.path]: { message: error.message, type: error.type },\n        };\n};\nexport const yupResolver = (schema, options = {\n    abortEarly: false,\n}) => async (values, context, validateAllFieldCriteria = false) => {\n    try {\n        if (options.context && process.env.NODE_ENV === 'development') {\n            // eslint-disable-next-line no-console\n            console.warn(\"You should not used the yup options context. Please, use the 'useForm' context object instead\");\n        }\n        return {\n            values: await schema.validate(values, Object.assign(Object.assign({}, options), { context })),\n            errors: {},\n        };\n    }\n    catch (e) {\n        const parsedErrors = parseErrorSchema(e, validateAllFieldCriteria);\n        return {\n            values: {},\n            errors: transformToNestObject(parsedErrors),\n        };\n    }\n};\n//# sourceMappingURL=yup.js.map"]},"metadata":{},"sourceType":"module"}