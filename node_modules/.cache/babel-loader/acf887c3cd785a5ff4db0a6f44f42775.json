{"ast":null,"code":"import _defineProperty from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\forms\\\\AddProductsClient\\\\AddProductsClient.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux'; // app\n\nimport { AddProductsClientView } from './AddProductsClient.view';\nimport { getRiskCountries, selectRiskCountries, postClient } from 'stores';\nimport { productAdminSchema } from 'schemas';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nAddProductsClient.propTypes = {\n  fields: PropTypes.array,\n  handleClose: PropTypes.func.isRequired\n};\nAddProductsClient.defaultProps = {\n  handleClose: function handleClose() {},\n  productsAdmin: true\n};\nexport default function AddProductsClient(_ref) {\n  _s();\n\n  var fields = _ref.fields,\n      submitHandler = _ref.submitHandler,\n      cancelHandler = _ref.cancelHandler,\n      handleClose = _ref.handleClose,\n      productsAdmin = _ref.productsAdmin;\n  var dispatch = useDispatch();\n  var countriesLoading = useSelector(function (state) {\n    return state.risk.countries.loading;\n  });\n  var countries = useSelector(selectRiskCountries);\n\n  var _useState = useState({\n    countries: countries\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      options = _useState2[0],\n      setOptions = _useState2[1];\n\n  useEffect(function () {\n    if (!utils.generic.isValidArray(countries, true)) {\n      dispatch(getRiskCountries());\n    }\n  }, [] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  useEffect(function () {\n    if (!countries) return;\n    setOptions({\n      countries: countries\n    });\n  }, [countries]);\n\n  var hydrateOptions = function hydrateOptions(fields) {\n    if (!fields) return [];\n    return fields.map(function (field) {\n      return _objectSpread(_objectSpread({}, field), {}, {\n        label: utils.string.t(field.label)\n      }, field.optionsDynamicKey && {\n        options: utils.form.getSelectOptions(field.optionsDynamicKey, _defineProperty({}, field.optionsDynamicKey, options[field.optionsDynamicKey]))\n      });\n    });\n  };\n\n  var handleSubmit = function handleSubmit(values) {\n    return dispatch(postClient(values, true)).then(function (response) {\n      var isSuccess = response && response.id && !response.ok; // success\n\n      if (isSuccess && utils.generic.isFunction(submitHandler)) {\n        if (utils.generic.isFunction(handleClose)) {\n          handleClose();\n        }\n\n        return submitHandler(response);\n      } // fail\n\n\n      handleCancel();\n    });\n  };\n\n  var handleCancel = function handleCancel() {\n    if (utils.generic.isFunction(cancelHandler)) {\n      cancelHandler();\n    }\n\n    if (utils.generic.isFunction(handleClose)) {\n      handleClose();\n    }\n  };\n\n  var actions = [{\n    name: 'submit',\n    label: productsAdmin ? utils.string.t('products.admin.clients.create') : utils.string.t('app.submit'),\n    handler: handleSubmit\n  }, {\n    name: 'cancel',\n    label: utils.string.t('app.cancel'),\n    handler: handleCancel\n  }];\n  var hasFields = utils.generic.isValidArray(fields, true);\n\n  var _productAdminSchema$g = productAdminSchema.getSchema('clients'),\n      schemaFields = _productAdminSchema$g.fields;\n\n  var fieldsArray = hasFields ? [hydrateOptions(fields)] : [hydrateOptions(schemaFields)];\n  var hasArrayFields = utils.generic.isValidArray(fieldsArray, true); // abort\n\n  if (!hasArrayFields || utils.generic.isInvalidOrEmptyArray(options === null || options === void 0 ? void 0 : options.countries)) return null;\n  return /*#__PURE__*/_jsxDEV(AddProductsClientView, {\n    fields: fieldsArray,\n    actions: actions,\n    loading: countriesLoading,\n    defaultValues: utils.form.getInitialValues(fieldsArray),\n    validationSchema: utils.form.getValidationSchema(fieldsArray)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddProductsClient, \"H9NjYdQsnvh4O3ALfe299P7BhIc=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = AddProductsClient;\nAddProductsClient.displayName = \"AddProductsClient\";\nAddProductsClient.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"AddProductsClient\",\n  \"props\": {\n    \"handleClose\": {\n      \"defaultValue\": {\n        \"value\": \"() => {}\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"productsAdmin\": {\n      \"defaultValue\": {\n        \"value\": \"true\",\n        \"computed\": false\n      },\n      \"required\": false\n    },\n    \"fields\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\forms\\\\AddProductsClient\\\\AddProductsClient.js\"] = {\n    name: \"AddProductsClient\",\n    docgenInfo: AddProductsClient.__docgenInfo,\n    path: \"src\\\\forms\\\\AddProductsClient\\\\AddProductsClient.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"AddProductsClient\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/forms/AddProductsClient/AddProductsClient.js"],"names":["React","useEffect","useState","PropTypes","useDispatch","useSelector","AddProductsClientView","getRiskCountries","selectRiskCountries","postClient","productAdminSchema","utils","AddProductsClient","propTypes","fields","array","handleClose","func","isRequired","defaultProps","productsAdmin","submitHandler","cancelHandler","dispatch","countriesLoading","state","risk","countries","loading","options","setOptions","generic","isValidArray","hydrateOptions","map","field","label","string","t","optionsDynamicKey","form","getSelectOptions","handleSubmit","values","then","response","isSuccess","id","ok","isFunction","handleCancel","actions","name","handler","hasFields","getSchema","schemaFields","fieldsArray","hasArrayFields","isInvalidOrEmptyArray","getInitialValues","getValidationSchema"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n// app\r\nimport { AddProductsClientView } from './AddProductsClient.view';\r\nimport { getRiskCountries, selectRiskCountries, postClient } from 'stores';\r\nimport { productAdminSchema } from 'schemas';\r\nimport * as utils from 'utils';\r\n\r\nAddProductsClient.propTypes = {\r\n  fields: PropTypes.array,\r\n  handleClose: PropTypes.func.isRequired,\r\n};\r\n\r\nAddProductsClient.defaultProps = {\r\n  handleClose: () => {},\r\n  productsAdmin: true,\r\n};\r\n\r\nexport default function AddProductsClient({ fields, submitHandler, cancelHandler, handleClose, productsAdmin }) {\r\n  const dispatch = useDispatch();\r\n  const countriesLoading = useSelector((state) => state.risk.countries.loading);\r\n  const countries = useSelector(selectRiskCountries);\r\n\r\n  const [options, setOptions] = useState({ countries });\r\n\r\n  useEffect(\r\n    () => {\r\n      if (!utils.generic.isValidArray(countries, true)) {\r\n        dispatch(getRiskCountries());\r\n      }\r\n    },\r\n    [] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!countries) return;\r\n    setOptions({ countries });\r\n  }, [countries]);\r\n\r\n  const hydrateOptions = (fields) => {\r\n    if (!fields) return [];\r\n\r\n    return fields.map((field) => ({\r\n      ...field,\r\n      label: utils.string.t(field.label),\r\n      ...(field.optionsDynamicKey && {\r\n        options: utils.form.getSelectOptions(field.optionsDynamicKey, {\r\n          [field.optionsDynamicKey]: options[field.optionsDynamicKey],\r\n        }),\r\n      }),\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = (values) => {\r\n    return dispatch(postClient(values, true)).then((response) => {\r\n      const isSuccess = response && response.id && !response.ok;\r\n\r\n      // success\r\n      if (isSuccess && utils.generic.isFunction(submitHandler)) {\r\n        if (utils.generic.isFunction(handleClose)) {\r\n          handleClose();\r\n        }\r\n        return submitHandler(response);\r\n      }\r\n\r\n      // fail\r\n      handleCancel();\r\n    });\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    if (utils.generic.isFunction(cancelHandler)) {\r\n      cancelHandler();\r\n    }\r\n    if (utils.generic.isFunction(handleClose)) {\r\n      handleClose();\r\n    }\r\n  };\r\n\r\n  const actions = [\r\n    {\r\n      name: 'submit',\r\n      label: productsAdmin ? utils.string.t('products.admin.clients.create') : utils.string.t('app.submit'),\r\n      handler: handleSubmit,\r\n    },\r\n    {\r\n      name: 'cancel',\r\n      label: utils.string.t('app.cancel'),\r\n      handler: handleCancel,\r\n    },\r\n  ];\r\n\r\n  const hasFields = utils.generic.isValidArray(fields, true);\r\n\r\n  const { fields: schemaFields } = productAdminSchema.getSchema('clients');\r\n\r\n  const fieldsArray = hasFields ? [hydrateOptions(fields)] : [hydrateOptions(schemaFields)];\r\n\r\n  const hasArrayFields = utils.generic.isValidArray(fieldsArray, true);\r\n\r\n  // abort\r\n  if (!hasArrayFields || utils.generic.isInvalidOrEmptyArray(options?.countries)) return null;\r\n\r\n  return (\r\n    <AddProductsClientView\r\n      fields={fieldsArray}\r\n      actions={actions}\r\n      loading={countriesLoading}\r\n      defaultValues={utils.form.getInitialValues(fieldsArray)}\r\n      validationSchema={utils.form.getValidationSchema(fieldsArray)}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}