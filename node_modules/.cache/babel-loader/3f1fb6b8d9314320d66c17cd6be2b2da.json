{"ast":null,"code":"import _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\pages\\\\QuoteBind\\\\QuoteBind.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { useHistory } from 'react-router-dom';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty'; // app\n\nimport { QuoteBindView } from './QuoteBind.view';\nimport { getRiskProducts, getRiskList, selectRiskListItems, selectRiskListPagination, selectRiskListSort, selectRiskListLoading, selectProductsSorted, selectRefDataStatusesMarketQuote, selectIsAdmin, selectIsBroker, showModal } from 'stores';\nimport { usePagination } from 'hooks';\nimport * as utils from 'utils';\nimport config from 'config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function QuoteBind() {\n  _s();\n\n  var dispatch = useDispatch();\n  var history = useHistory();\n  var brand = useSelector(function (state) {\n    return state.ui.brand;\n  });\n  var riskProducts = useSelector(selectProductsSorted);\n  var riskList = useSelector(function (state) {\n    return state.risk.list;\n  });\n  var riskListLoading = useSelector(selectRiskListLoading);\n  var riskItems = useSelector(selectRiskListItems);\n  var riskPagination = useSelector(selectRiskListPagination);\n  var riskSort = useSelector(selectRiskListSort);\n  var isAdmin = useSelector(selectIsAdmin);\n  var userIsBroker = useSelector(selectIsBroker);\n  var statuses = useSelector(selectRefDataStatusesMarketQuote);\n\n  var _useState = useState('risks'),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedTab = _useState2[0],\n      setSelectedTab = _useState2[1];\n\n  var handleSearch = function handleSearch(query) {\n    dispatch(getRiskList({\n      query: query\n    }));\n  };\n\n  var handleSearchReset = function handleSearchReset() {\n    if (get(riskList, 'query')) {\n      dispatch(getRiskList({\n        query: ''\n      }));\n    }\n  };\n\n  var handleChangePage = function handleChangePage(newPage) {\n    dispatch(getRiskList({\n      page: newPage + 1\n    }));\n  };\n\n  var handleChangeRowsPerPage = function handleChangeRowsPerPage(rowsPerPage) {\n    dispatch(getRiskList({\n      size: rowsPerPage\n    }));\n  };\n\n  var handleClickRow = function handleClickRow(risk) {\n    return function (event) {\n      history.push(\"\".concat(config.routes.quoteBind.riskDetails, \"/\").concat(risk.id));\n    };\n  };\n\n  var handleClickLaunchBdx = function handleClickLaunchBdx(event) {\n    dispatch(showModal({\n      component: 'DOWNLOAD_BORDEREAUX',\n      props: {\n        title: 'products.reports',\n        fullWidth: true,\n        maxWidth: 'sm'\n      }\n    }));\n  };\n\n  var handleClickAddRisk = function handleClickAddRisk(event) {\n    dispatch(showModal({\n      component: 'ADD_RISK',\n      props: {\n        title: 'risks.addRisk',\n        fullScreen: true,\n        disableAutoFocus: true\n      }\n    }));\n  };\n\n  var pagination = usePagination(riskItems, riskPagination, handleChangePage, handleChangeRowsPerPage);\n  useEffect(function () {\n    dispatch(getRiskList());\n\n    if (isEmpty(riskProducts)) {\n      dispatch(getRiskProducts());\n    }\n  }, [] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  var handleSelectTab = function handleSelectTab(tabName) {\n    setSelectedTab(tabName);\n  };\n\n  var tabs = [{\n    value: 'risks',\n    label: utils.string.t('products.tabs.risks')\n  }];\n  userIsBroker && tabs.push({\n    value: 'draftRisks',\n    label: utils.string.t('products.tabs.draftRisks.label')\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"\".concat(utils.string.t('products.title'), \" - \").concat(utils.app.getAppName(brand), \" - \").concat(utils.string.t('products.tabs.risks'))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(QuoteBindView, {\n      isAdmin: isAdmin,\n      list: riskList,\n      riskListLoading: riskListLoading,\n      riskProducts: riskProducts,\n      sort: riskSort,\n      pagination: pagination.obj,\n      statuses: statuses,\n      tabs: tabs,\n      selectedTab: selectedTab,\n      handlers: {\n        search: handleSearch,\n        searchReset: handleSearchReset,\n        changePage: pagination.handlers.handleChangePage,\n        changeRowsPerPage: pagination.handlers.handleChangeRowsPerPage,\n        clickLaunchBdx: handleClickLaunchBdx,\n        clickRow: handleClickRow,\n        clickAddRisk: handleClickAddRisk,\n        handleSelectTab: handleSelectTab\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(QuoteBind, \"M+YyZmlTgCAaglEQSMND4eD5VgE=\", false, function () {\n  return [useDispatch, useHistory, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, usePagination];\n});\n\n_c = QuoteBind;\nQuoteBind.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"QuoteBind\"\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\pages\\\\QuoteBind\\\\QuoteBind.js\"] = {\n    name: \"QuoteBind\",\n    docgenInfo: QuoteBind.__docgenInfo,\n    path: \"src\\\\pages\\\\QuoteBind\\\\QuoteBind.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"QuoteBind\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/pages/QuoteBind/QuoteBind.js"],"names":["React","useEffect","useState","useSelector","useDispatch","Helmet","useHistory","get","isEmpty","QuoteBindView","getRiskProducts","getRiskList","selectRiskListItems","selectRiskListPagination","selectRiskListSort","selectRiskListLoading","selectProductsSorted","selectRefDataStatusesMarketQuote","selectIsAdmin","selectIsBroker","showModal","usePagination","utils","config","QuoteBind","dispatch","history","brand","state","ui","riskProducts","riskList","risk","list","riskListLoading","riskItems","riskPagination","riskSort","isAdmin","userIsBroker","statuses","selectedTab","setSelectedTab","handleSearch","query","handleSearchReset","handleChangePage","newPage","page","handleChangeRowsPerPage","rowsPerPage","size","handleClickRow","event","push","routes","quoteBind","riskDetails","id","handleClickLaunchBdx","component","props","title","fullWidth","maxWidth","handleClickAddRisk","fullScreen","disableAutoFocus","pagination","handleSelectTab","tabName","tabs","value","label","string","t","app","getAppName","obj","search","searchReset","changePage","handlers","changeRowsPerPage","clickLaunchBdx","clickRow","clickAddRisk"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,OAAP,MAAoB,gBAApB,C,CAEA;;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SACEC,eADF,EAEEC,WAFF,EAGEC,mBAHF,EAIEC,wBAJF,EAKEC,kBALF,EAMEC,qBANF,EAOEC,oBAPF,EAQEC,gCARF,EASEC,aATF,EAUEC,cAVF,EAWEC,SAXF,QAYO,QAZP;AAaA,SAASC,aAAT,QAA8B,OAA9B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,QAAnB;;;AAEA,eAAe,SAASC,SAAT,GAAqB;AAAA;;AAClC,MAAMC,QAAQ,GAAGrB,WAAW,EAA5B;AACA,MAAMsB,OAAO,GAAGpB,UAAU,EAA1B;AAEA,MAAMqB,KAAK,GAAGxB,WAAW,CAAC,UAACyB,KAAD;AAAA,WAAWA,KAAK,CAACC,EAAN,CAASF,KAApB;AAAA,GAAD,CAAzB;AACA,MAAMG,YAAY,GAAG3B,WAAW,CAACa,oBAAD,CAAhC;AACA,MAAMe,QAAQ,GAAG5B,WAAW,CAAC,UAACyB,KAAD;AAAA,WAAWA,KAAK,CAACI,IAAN,CAAWC,IAAtB;AAAA,GAAD,CAA5B;AACA,MAAMC,eAAe,GAAG/B,WAAW,CAACY,qBAAD,CAAnC;AACA,MAAMoB,SAAS,GAAGhC,WAAW,CAACS,mBAAD,CAA7B;AACA,MAAMwB,cAAc,GAAGjC,WAAW,CAACU,wBAAD,CAAlC;AACA,MAAMwB,QAAQ,GAAGlC,WAAW,CAACW,kBAAD,CAA5B;AACA,MAAMwB,OAAO,GAAGnC,WAAW,CAACe,aAAD,CAA3B;AACA,MAAMqB,YAAY,GAAGpC,WAAW,CAACgB,cAAD,CAAhC;AACA,MAAMqB,QAAQ,GAAGrC,WAAW,CAACc,gCAAD,CAA5B;;AAbkC,kBAcIf,QAAQ,CAAC,OAAD,CAdZ;AAAA;AAAA,MAc3BuC,WAd2B;AAAA,MAcdC,cAdc;;AAgBlC,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAW;AAC9BnB,IAAAA,QAAQ,CAACd,WAAW,CAAC;AAAEiC,MAAAA,KAAK,EAAEA;AAAT,KAAD,CAAZ,CAAR;AACD,GAFD;;AAIA,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9B,QAAItC,GAAG,CAACwB,QAAD,EAAW,OAAX,CAAP,EAA4B;AAC1BN,MAAAA,QAAQ,CAACd,WAAW,CAAC;AAAEiC,QAAAA,KAAK,EAAE;AAAT,OAAD,CAAZ,CAAR;AACD;AACF,GAJD;;AAMA,MAAME,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,OAAD,EAAa;AACpCtB,IAAAA,QAAQ,CAACd,WAAW,CAAC;AAAEqC,MAAAA,IAAI,EAAED,OAAO,GAAG;AAAlB,KAAD,CAAZ,CAAR;AACD,GAFD;;AAIA,MAAME,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,WAAD,EAAiB;AAC/CzB,IAAAA,QAAQ,CAACd,WAAW,CAAC;AAAEwC,MAAAA,IAAI,EAAED;AAAR,KAAD,CAAZ,CAAR;AACD,GAFD;;AAIA,MAAME,cAAc,GAAG,SAAjBA,cAAiB,CAACpB,IAAD;AAAA,WAAU,UAACqB,KAAD,EAAW;AAC1C3B,MAAAA,OAAO,CAAC4B,IAAR,WAAgB/B,MAAM,CAACgC,MAAP,CAAcC,SAAd,CAAwBC,WAAxC,cAAuDzB,IAAI,CAAC0B,EAA5D;AACD,KAFsB;AAAA,GAAvB;;AAIA,MAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACN,KAAD,EAAW;AACtC5B,IAAAA,QAAQ,CACNL,SAAS,CAAC;AACRwC,MAAAA,SAAS,EAAE,qBADH;AAERC,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAE,kBADF;AAELC,QAAAA,SAAS,EAAE,IAFN;AAGLC,QAAAA,QAAQ,EAAE;AAHL;AAFC,KAAD,CADH,CAAR;AAUD,GAXD;;AAaA,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACZ,KAAD,EAAW;AACpC5B,IAAAA,QAAQ,CACNL,SAAS,CAAC;AACRwC,MAAAA,SAAS,EAAE,UADH;AAERC,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAE,eADF;AAELI,QAAAA,UAAU,EAAE,IAFP;AAGLC,QAAAA,gBAAgB,EAAE;AAHb;AAFC,KAAD,CADH,CAAR;AAUD,GAXD;;AAaA,MAAMC,UAAU,GAAG/C,aAAa,CAACc,SAAD,EAAYC,cAAZ,EAA4BU,gBAA5B,EAA8CG,uBAA9C,CAAhC;AAEAhD,EAAAA,SAAS,CACP,YAAM;AACJwB,IAAAA,QAAQ,CAACd,WAAW,EAAZ,CAAR;;AACA,QAAIH,OAAO,CAACsB,YAAD,CAAX,EAA2B;AACzBL,MAAAA,QAAQ,CAACf,eAAe,EAAhB,CAAR;AACD;AACF,GANM,EAOP,EAPO,CAOJ;AAPI,GAAT;;AASA,MAAM2D,eAAe,GAAG,SAAlBA,eAAkB,CAACC,OAAD,EAAa;AACnC5B,IAAAA,cAAc,CAAC4B,OAAD,CAAd;AACD,GAFD;;AAIA,MAAMC,IAAI,GAAG,CACX;AACEC,IAAAA,KAAK,EAAE,OADT;AAEEC,IAAAA,KAAK,EAAEnD,KAAK,CAACoD,MAAN,CAAaC,CAAb,CAAe,qBAAf;AAFT,GADW,CAAb;AAOApC,EAAAA,YAAY,IACVgC,IAAI,CAACjB,IAAL,CAAU;AACRkB,IAAAA,KAAK,EAAE,YADC;AAERC,IAAAA,KAAK,EAAEnD,KAAK,CAACoD,MAAN,CAAaC,CAAb,CAAe,gCAAf;AAFC,GAAV,CADF;AAMA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAA,6BACE;AAAA,4BAAWrD,KAAK,CAACoD,MAAN,CAAaC,CAAb,CAAe,gBAAf,CAAX,gBAAiDrD,KAAK,CAACsD,GAAN,CAAUC,UAAV,CAAqBlD,KAArB,CAAjD,gBAAkFL,KAAK,CAACoD,MAAN,CAAaC,CAAb,CAAe,qBAAf,CAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAKE,QAAC,aAAD;AACE,MAAA,OAAO,EAAErC,OADX;AAEE,MAAA,IAAI,EAAEP,QAFR;AAGE,MAAA,eAAe,EAAEG,eAHnB;AAIE,MAAA,YAAY,EAAEJ,YAJhB;AAKE,MAAA,IAAI,EAAEO,QALR;AAME,MAAA,UAAU,EAAE+B,UAAU,CAACU,GANzB;AAOE,MAAA,QAAQ,EAAEtC,QAPZ;AAQE,MAAA,IAAI,EAAE+B,IARR;AASE,MAAA,WAAW,EAAE9B,WATf;AAUE,MAAA,QAAQ,EAAE;AACRsC,QAAAA,MAAM,EAAEpC,YADA;AAERqC,QAAAA,WAAW,EAAEnC,iBAFL;AAGRoC,QAAAA,UAAU,EAAEb,UAAU,CAACc,QAAX,CAAoBpC,gBAHxB;AAIRqC,QAAAA,iBAAiB,EAAEf,UAAU,CAACc,QAAX,CAAoBjC,uBAJ/B;AAKRmC,QAAAA,cAAc,EAAEzB,oBALR;AAMR0B,QAAAA,QAAQ,EAAEjC,cANF;AAORkC,QAAAA,YAAY,EAAErB,kBAPN;AAQRI,QAAAA,eAAe,EAAEA;AART;AAVZ;AAAA;AAAA;AAAA;AAAA,YALF;AAAA,kBADF;AA6BD;;GAzHuB7C,S;UACLpB,W,EACDE,U,EAEFH,W,EACOA,W,EACJA,W,EACOA,W,EACNA,W,EACKA,W,EACNA,W,EACDA,W,EACKA,W,EACJA,W,EAmDEkB,a;;;KAhEGG,S","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Helmet } from 'react-helmet';\r\nimport { useHistory } from 'react-router-dom';\r\nimport get from 'lodash/get';\r\nimport isEmpty from 'lodash/isEmpty';\r\n\r\n// app\r\nimport { QuoteBindView } from './QuoteBind.view';\r\nimport {\r\n  getRiskProducts,\r\n  getRiskList,\r\n  selectRiskListItems,\r\n  selectRiskListPagination,\r\n  selectRiskListSort,\r\n  selectRiskListLoading,\r\n  selectProductsSorted,\r\n  selectRefDataStatusesMarketQuote,\r\n  selectIsAdmin,\r\n  selectIsBroker,\r\n  showModal,\r\n} from 'stores';\r\nimport { usePagination } from 'hooks';\r\nimport * as utils from 'utils';\r\nimport config from 'config';\r\n\r\nexport default function QuoteBind() {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const brand = useSelector((state) => state.ui.brand);\r\n  const riskProducts = useSelector(selectProductsSorted);\r\n  const riskList = useSelector((state) => state.risk.list);\r\n  const riskListLoading = useSelector(selectRiskListLoading);\r\n  const riskItems = useSelector(selectRiskListItems);\r\n  const riskPagination = useSelector(selectRiskListPagination);\r\n  const riskSort = useSelector(selectRiskListSort);\r\n  const isAdmin = useSelector(selectIsAdmin);\r\n  const userIsBroker = useSelector(selectIsBroker);\r\n  const statuses = useSelector(selectRefDataStatusesMarketQuote);\r\n  const [selectedTab, setSelectedTab] = useState('risks');\r\n\r\n  const handleSearch = (query) => {\r\n    dispatch(getRiskList({ query: query }));\r\n  };\r\n\r\n  const handleSearchReset = () => {\r\n    if (get(riskList, 'query')) {\r\n      dispatch(getRiskList({ query: '' }));\r\n    }\r\n  };\r\n\r\n  const handleChangePage = (newPage) => {\r\n    dispatch(getRiskList({ page: newPage + 1 }));\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (rowsPerPage) => {\r\n    dispatch(getRiskList({ size: rowsPerPage }));\r\n  };\r\n\r\n  const handleClickRow = (risk) => (event) => {\r\n    history.push(`${config.routes.quoteBind.riskDetails}/${risk.id}`);\r\n  };\r\n\r\n  const handleClickLaunchBdx = (event) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'DOWNLOAD_BORDEREAUX',\r\n        props: {\r\n          title: 'products.reports',\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleClickAddRisk = (event) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'ADD_RISK',\r\n        props: {\r\n          title: 'risks.addRisk',\r\n          fullScreen: true,\r\n          disableAutoFocus: true,\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const pagination = usePagination(riskItems, riskPagination, handleChangePage, handleChangeRowsPerPage);\r\n\r\n  useEffect(\r\n    () => {\r\n      dispatch(getRiskList());\r\n      if (isEmpty(riskProducts)) {\r\n        dispatch(getRiskProducts());\r\n      }\r\n    },\r\n    [] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n  const handleSelectTab = (tabName) => {\r\n    setSelectedTab(tabName);\r\n  };\r\n\r\n  const tabs = [\r\n    {\r\n      value: 'risks',\r\n      label: utils.string.t('products.tabs.risks'),\r\n    },\r\n  ];\r\n\r\n  userIsBroker &&\r\n    tabs.push({\r\n      value: 'draftRisks',\r\n      label: utils.string.t('products.tabs.draftRisks.label'),\r\n    });\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>{`${utils.string.t('products.title')} - ${utils.app.getAppName(brand)} - ${utils.string.t('products.tabs.risks')}`}</title>\r\n      </Helmet>\r\n\r\n      <QuoteBindView\r\n        isAdmin={isAdmin}\r\n        list={riskList}\r\n        riskListLoading={riskListLoading}\r\n        riskProducts={riskProducts}\r\n        sort={riskSort}\r\n        pagination={pagination.obj}\r\n        statuses={statuses}\r\n        tabs={tabs}\r\n        selectedTab={selectedTab}\r\n        handlers={{\r\n          search: handleSearch,\r\n          searchReset: handleSearchReset,\r\n          changePage: pagination.handlers.handleChangePage,\r\n          changeRowsPerPage: pagination.handlers.handleChangeRowsPerPage,\r\n          clickLaunchBdx: handleClickLaunchBdx,\r\n          clickRow: handleClickRow,\r\n          clickAddRisk: handleClickAddRisk,\r\n          handleSelectTab: handleSelectTab,\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}