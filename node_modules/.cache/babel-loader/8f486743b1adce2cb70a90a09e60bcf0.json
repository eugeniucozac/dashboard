{"ast":null,"code":"var _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\components\\\\DocumentAutoUpload\\\\DocumentAutoUpload.view.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport PropTypes from 'prop-types'; // app\n\nimport { FormPopoverMenuRHF, FormFileDrop, Info } from 'components';\nimport * as utils from 'utils';\nimport styles from './DocumentAutoUpload.styles'; // mui\n\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport { makeStyles, Divider } from '@material-ui/core';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nDocumentAutoUploadView.propTypes = {\n  folders: PropTypes.array.isRequired,\n  folderValue: PropTypes.string.isRequired,\n  link: PropTypes.string,\n  divider: PropTypes.bool,\n  onUpdateFolderValue: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired\n};\nexport function DocumentAutoUploadView(_ref) {\n  _s();\n\n  var link = _ref.link,\n      folders = _ref.folders,\n      folderValue = _ref.folderValue,\n      onSubmit = _ref.onSubmit,\n      onUpdateFolderValue = _ref.onUpdateFolderValue,\n      divider = _ref.divider;\n  var classes = makeStyles(styles, {\n    name: 'DocumentAutoUpload'\n  })();\n\n  var _useForm = useForm({\n    defaultValues: {\n      folder: folderValue\n    }\n  }),\n      control = _useForm.control,\n      setValue = _useForm.setValue,\n      getValues = _useForm.getValues;\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: classes.form,\n    children: [divider && /*#__PURE__*/_jsxDEV(Divider, {\n      className: classes.divider\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(Info, {\n      link: link,\n      title: utils.string.t('placement.document.title'),\n      avatarIcon: DescriptionIcon,\n      content: /*#__PURE__*/_jsxDEV(FormPopoverMenuRHF, {\n        control: control,\n        name: \"folder\",\n        offset: true,\n        placeholder: utils.string.t('app.select'),\n        text: utils.form.getLabelById(folders, folderValue),\n        size: \"small\",\n        icon: ArrowDropDownIcon,\n        iconPosition: \"right\",\n        anchorOrigin: {\n          vertical: 'bottom',\n          horizontal: 'left'\n        },\n        nestedClasses: {\n          btn: classes.popoverButton\n        },\n        items: folders.map(function (_ref2) {\n          var id = _ref2.id,\n              label = _ref2.label;\n          return {\n            id: id,\n            label: label,\n            callback: function callback() {\n              onUpdateFolderValue(id);\n              setValue('folder', id);\n            }\n          };\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormFileDrop, {\n      control: control,\n      showUploadPreview: false,\n      dragLabel: utils.string.t('form.dragDrop.dragFileEmailHere'),\n      onChange: function onChange(file) {\n        setValue('file', file);\n        onSubmit(getValues());\n      },\n      name: \"file\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DocumentAutoUploadView, \"66Prk8Ja+J76fSe8PoVznN7PED0=\", false, function () {\n  return [useForm];\n});\n\n_c = DocumentAutoUploadView;\nDocumentAutoUploadView.displayName = \"DocumentAutoUploadView\";\nDocumentAutoUploadView.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"DocumentAutoUploadView\",\n  \"props\": {\n    \"folders\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"folderValue\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"link\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"divider\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"onUpdateFolderValue\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"onSubmit\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\components\\\\DocumentAutoUpload\\\\DocumentAutoUpload.view.js\"] = {\n    name: \"DocumentAutoUploadView\",\n    docgenInfo: DocumentAutoUploadView.__docgenInfo,\n    path: \"src\\\\components\\\\DocumentAutoUpload\\\\DocumentAutoUpload.view.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"DocumentAutoUploadView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/DocumentAutoUpload/DocumentAutoUpload.view.js"],"names":["React","useForm","PropTypes","FormPopoverMenuRHF","FormFileDrop","Info","utils","styles","DescriptionIcon","makeStyles","Divider","ArrowDropDownIcon","DocumentAutoUploadView","propTypes","folders","array","isRequired","folderValue","string","link","divider","bool","onUpdateFolderValue","func","onSubmit","classes","name","defaultValues","folder","control","setValue","getValues","form","t","getLabelById","vertical","horizontal","btn","popoverButton","map","id","label","callback","file"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport PropTypes from 'prop-types';\r\n\r\n// app\r\nimport { FormPopoverMenuRHF, FormFileDrop, Info } from 'components';\r\nimport * as utils from 'utils';\r\nimport styles from './DocumentAutoUpload.styles';\r\n\r\n// mui\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\nimport { makeStyles, Divider } from '@material-ui/core';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\n\r\nDocumentAutoUploadView.propTypes = {\r\n  folders: PropTypes.array.isRequired,\r\n  folderValue: PropTypes.string.isRequired,\r\n  link: PropTypes.string,\r\n  divider: PropTypes.bool,\r\n  onUpdateFolderValue: PropTypes.func.isRequired,\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport function DocumentAutoUploadView({ link, folders, folderValue, onSubmit, onUpdateFolderValue, divider }) {\r\n  const classes = makeStyles(styles, { name: 'DocumentAutoUpload' })();\r\n  const { control, setValue, getValues } = useForm({ defaultValues: { folder: folderValue } });\r\n\r\n  return (\r\n    <form className={classes.form}>\r\n      {divider && <Divider className={classes.divider} />}\r\n      <Info\r\n        link={link}\r\n        title={utils.string.t('placement.document.title')}\r\n        avatarIcon={DescriptionIcon}\r\n        content={\r\n          <FormPopoverMenuRHF\r\n            control={control}\r\n            name=\"folder\"\r\n            offset\r\n            placeholder={utils.string.t('app.select')}\r\n            text={utils.form.getLabelById(folders, folderValue)}\r\n            size=\"small\"\r\n            icon={ArrowDropDownIcon}\r\n            iconPosition=\"right\"\r\n            anchorOrigin={{\r\n              vertical: 'bottom',\r\n              horizontal: 'left',\r\n            }}\r\n            nestedClasses={{ btn: classes.popoverButton }}\r\n            items={folders.map(({ id, label }) => ({\r\n              id,\r\n              label,\r\n              callback: () => {\r\n                onUpdateFolderValue(id);\r\n                setValue('folder', id);\r\n              },\r\n            }))}\r\n          />\r\n        }\r\n      />\r\n      <FormFileDrop\r\n        control={control}\r\n        showUploadPreview={false}\r\n        dragLabel={utils.string.t('form.dragDrop.dragFileEmailHere')}\r\n        onChange={(file) => {\r\n          setValue('file', file);\r\n          onSubmit(getValues());\r\n        }}\r\n        name=\"file\"\r\n      />\r\n    </form>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}