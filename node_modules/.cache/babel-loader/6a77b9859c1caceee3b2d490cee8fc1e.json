{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\forms\\\\PremiumTaxSignedLinesDocumentUpload\\\\PremiumTaxSignedLinesDocumentUpload.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types'; // app\n\nimport { PremiumTaxSignedLinesDocumentUploadView } from './PremiumTaxSignedLinesDocumentUpload.view';\nimport { hideModal } from 'stores';\nimport * as utils from 'utils';\nimport * as constants from 'consts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nPremiumTaxSignedLinesDocumentUpload.propTypes = {\n  riskRef: PropTypes.object.isRequired,\n  uploadDocumentType: PropTypes.string.isRequired,\n  files: PropTypes.arrayOf(PropTypes.shape({\n    file: PropTypes.object,\n    name: PropTypes.string,\n    type: PropTypes.object\n  })),\n  rejectedFiles: PropTypes.array,\n  multiple: PropTypes.bool,\n  maxFiles: PropTypes.number,\n  maxSize: PropTypes.number,\n  accept: PropTypes.string,\n  showMaxFilesError: PropTypes.bool,\n  handleFileUpload: PropTypes.func.isRequired\n};\nPremiumTaxSignedLinesDocumentUpload.defaultProps = {\n  multiple: constants.PROCESSING_INSTRUCTION_FILE_UPLOAD_ALLOW_MULTIPLE,\n  maxFiles: constants.PROCESSING_INSTRUCTION_DETAILS_FILE_UPLOAD_MAX_FILES,\n  maxSize: constants.PROCESSING_INSTRUCTION_FILE_UPLOAD_MAX_FILE_SIZE,\n  accept: constants.PROCESSING_INSTRUCTION_FILE_UPLOAD_ALLOWED_FILE_EXT,\n  showMaxFilesError: false\n};\nexport default function PremiumTaxSignedLinesDocumentUpload(_ref) {\n  _s();\n\n  var riskRef = _ref.riskRef,\n      uploadDocumentType = _ref.uploadDocumentType,\n      files = _ref.files,\n      rejectedFiles = _ref.rejectedFiles,\n      multiple = _ref.multiple,\n      maxFiles = _ref.maxFiles,\n      maxSize = _ref.maxSize,\n      accept = _ref.accept,\n      showMaxFilesError = _ref.showMaxFilesError,\n      handleFileUpload = _ref.handleFileUpload;\n  var dispatch = useDispatch();\n\n  var _useState = useState(files),\n      _useState2 = _slicedToArray(_useState, 2),\n      filesAttached = _useState2[0],\n      setFilesAttached = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      warnings = _useState4[0],\n      setWarnings = _useState4[1];\n\n  var setWarningDuplicates = function setWarningDuplicates(hasDuplicates) {\n    return hasDuplicates ? {\n      duplicates: {\n        message: utils.string.t('fileUpload.messages.duplicates'),\n        type: 'alert'\n      }\n    } : {\n      duplicates: {}\n    };\n  };\n\n  var setWarningTooManyFiles = function setWarningTooManyFiles(filesCurrentlyAttached) {\n    return filesCurrentlyAttached && filesCurrentlyAttached.length > maxFiles ? {\n      tooManyFiles: {\n        message: utils.string.t('fileUpload.messages.tooManyFiles', {\n          max: maxFiles\n        }),\n        type: 'error'\n      }\n    } : {\n      tooManyFiles: {}\n    };\n  };\n\n  var setWarningMaxFileSize = function setWarningMaxFileSize(rejectedFiles) {\n    return rejectedFiles && rejectedFiles.length > 0 && rejectedFiles.some(function (f) {\n      return f.size > maxSize;\n    }) ? {\n      maxFileSize: {\n        message: utils.string.t('fileUpload.messages.maxFileSize', {\n          max: utils.string.t('format.number', {\n            value: {\n              number: maxSize,\n              format: {\n                output: 'byte',\n                base: 'decimal',\n                mantissa: 0\n              }\n            }\n          }),\n          filename: rejectedFiles.map(function (f) {\n            return f.name;\n          }).filter(Boolean) // filter out empty array item, in case f.name is falsy or empty ''\n          .join(', ')\n        }),\n        type: 'alert'\n      }\n    } : {\n      maxFileSize: {}\n    };\n  };\n\n  var setWarningForRejectedFile = function setWarningForRejectedFile(rejectedFiles) {\n    var _rejectedFiles$;\n\n    var acceptSplittedExtension = accept === null || accept === void 0 ? void 0 : accept.split(',');\n    var slicedExtensionArray = acceptSplittedExtension === null || acceptSplittedExtension === void 0 ? void 0 : acceptSplittedExtension.map(function (s) {\n      return s === null || s === void 0 ? void 0 : s.slice(1);\n    });\n    return (rejectedFiles === null || rejectedFiles === void 0 ? void 0 : rejectedFiles.length) > 0 && (slicedExtensionArray === null || slicedExtensionArray === void 0 ? void 0 : slicedExtensionArray.indexOf(rejectedFiles === null || rejectedFiles === void 0 ? void 0 : (_rejectedFiles$ = rejectedFiles[0]) === null || _rejectedFiles$ === void 0 ? void 0 : _rejectedFiles$.path.split('.').pop())) === -1 ? {\n      rejectedFormat: {\n        message: utils.string.t('fileUpload.messages.rejectedFileFormat'),\n        type: 'alert'\n      }\n    } : {\n      rejectedFormat: {}\n    };\n  };\n\n  useEffect(function () {\n    setWarnings(_objectSpread(_objectSpread(_objectSpread({}, warnings), setWarningTooManyFiles(filesAttached)), setWarningMaxFileSize(rejectedFiles)));\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var fields = [{\n    type: 'file',\n    name: 'filesUpload',\n    value: null,\n    showUploadPreview: false,\n    showMaxFilesError: showMaxFilesError,\n    componentProps: {\n      multiple: multiple,\n      maxFiles: maxFiles,\n      maxSize: maxSize,\n      accept: accept\n    }\n  }];\n  var actions = [{\n    name: 'cancel',\n    label: utils.string.t('app.cancel'),\n    handler: function handler() {\n      return dispatch(hideModal());\n    }\n  }, {\n    name: 'submit',\n    label: utils.string.t('app.save'),\n    handler: function handler(data) {\n      handleFileUpload(data, uploadDocumentType);\n    }\n  }];\n\n  var handleFilesAdded = function handleFilesAdded(filesCurrentlyAttached, rejectedFiles, hasDuplicates) {\n    setWarnings(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, warnings), setWarningDuplicates(hasDuplicates)), setWarningTooManyFiles(filesCurrentlyAttached)), setWarningMaxFileSize(rejectedFiles)), setWarningForRejectedFile(rejectedFiles)));\n    setFilesAttached(filesCurrentlyAttached);\n  };\n\n  var handleFilesRemoved = function handleFilesRemoved(filesCurrentlyAttached) {\n    setWarnings(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, warnings), setWarningDuplicates(false)), setWarningTooManyFiles(filesCurrentlyAttached)), setWarningMaxFileSize(false)), setWarningForRejectedFile(false)));\n    setFilesAttached(filesCurrentlyAttached);\n  };\n\n  var getFileKey = function getFileKey(file) {\n    return \"\".concat(file.name, \"-\").concat(file.size, \"-\").concat(file.lastModified);\n  };\n\n  return /*#__PURE__*/_jsxDEV(PremiumTaxSignedLinesDocumentUploadView, {\n    riskRef: riskRef,\n    files: files,\n    fields: fields,\n    actions: actions,\n    warnings: warnings,\n    handlers: {\n      getFileKey: getFileKey,\n      onFilesAdded: handleFilesAdded,\n      onFilesRemoved: handleFilesRemoved\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PremiumTaxSignedLinesDocumentUpload, \"yCslbQU4g2Wsu6Qj/y0q614Ag9U=\", false, function () {\n  return [useDispatch];\n});\n\n_c = PremiumTaxSignedLinesDocumentUpload;\n\nvar _c;\n\n$RefreshReg$(_c, \"PremiumTaxSignedLinesDocumentUpload\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/forms/PremiumTaxSignedLinesDocumentUpload/PremiumTaxSignedLinesDocumentUpload.js"],"names":["React","useState","useEffect","useDispatch","PropTypes","PremiumTaxSignedLinesDocumentUploadView","hideModal","utils","constants","PremiumTaxSignedLinesDocumentUpload","propTypes","riskRef","object","isRequired","uploadDocumentType","string","files","arrayOf","shape","file","name","type","rejectedFiles","array","multiple","bool","maxFiles","number","maxSize","accept","showMaxFilesError","handleFileUpload","func","defaultProps","PROCESSING_INSTRUCTION_FILE_UPLOAD_ALLOW_MULTIPLE","PROCESSING_INSTRUCTION_DETAILS_FILE_UPLOAD_MAX_FILES","PROCESSING_INSTRUCTION_FILE_UPLOAD_MAX_FILE_SIZE","PROCESSING_INSTRUCTION_FILE_UPLOAD_ALLOWED_FILE_EXT","dispatch","filesAttached","setFilesAttached","warnings","setWarnings","setWarningDuplicates","hasDuplicates","duplicates","message","t","setWarningTooManyFiles","filesCurrentlyAttached","length","tooManyFiles","max","setWarningMaxFileSize","some","f","size","maxFileSize","value","format","output","base","mantissa","filename","map","filter","Boolean","join","setWarningForRejectedFile","acceptSplittedExtension","split","slicedExtensionArray","s","slice","indexOf","path","pop","rejectedFormat","fields","showUploadPreview","componentProps","actions","label","handler","data","handleFilesAdded","handleFilesRemoved","getFileKey","lastModified","onFilesAdded","onFilesRemoved"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;;AACA,SAASC,uCAAT,QAAwD,4CAAxD;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,SAAZ,MAA2B,QAA3B;;AAEAC,mCAAmC,CAACC,SAApC,GAAgD;AAC9CC,EAAAA,OAAO,EAAEP,SAAS,CAACQ,MAAV,CAAiBC,UADoB;AAE9CC,EAAAA,kBAAkB,EAAEV,SAAS,CAACW,MAAV,CAAiBF,UAFS;AAG9CG,EAAAA,KAAK,EAAEZ,SAAS,CAACa,OAAV,CACLb,SAAS,CAACc,KAAV,CAAgB;AACdC,IAAAA,IAAI,EAAEf,SAAS,CAACQ,MADF;AAEdQ,IAAAA,IAAI,EAAEhB,SAAS,CAACW,MAFF;AAGdM,IAAAA,IAAI,EAAEjB,SAAS,CAACQ;AAHF,GAAhB,CADK,CAHuC;AAU9CU,EAAAA,aAAa,EAAElB,SAAS,CAACmB,KAVqB;AAW9CC,EAAAA,QAAQ,EAAEpB,SAAS,CAACqB,IAX0B;AAY9CC,EAAAA,QAAQ,EAAEtB,SAAS,CAACuB,MAZ0B;AAa9CC,EAAAA,OAAO,EAAExB,SAAS,CAACuB,MAb2B;AAc9CE,EAAAA,MAAM,EAAEzB,SAAS,CAACW,MAd4B;AAe9Ce,EAAAA,iBAAiB,EAAE1B,SAAS,CAACqB,IAfiB;AAgB9CM,EAAAA,gBAAgB,EAAE3B,SAAS,CAAC4B,IAAV,CAAenB;AAhBa,CAAhD;AAmBAJ,mCAAmC,CAACwB,YAApC,GAAmD;AACjDT,EAAAA,QAAQ,EAAEhB,SAAS,CAAC0B,iDAD6B;AAEjDR,EAAAA,QAAQ,EAAElB,SAAS,CAAC2B,oDAF6B;AAGjDP,EAAAA,OAAO,EAAEpB,SAAS,CAAC4B,gDAH8B;AAIjDP,EAAAA,MAAM,EAAErB,SAAS,CAAC6B,mDAJ+B;AAKjDP,EAAAA,iBAAiB,EAAE;AAL8B,CAAnD;AAQA,eAAe,SAASrB,mCAAT,OAWZ;AAAA;;AAAA,MAVDE,OAUC,QAVDA,OAUC;AAAA,MATDG,kBASC,QATDA,kBASC;AAAA,MARDE,KAQC,QARDA,KAQC;AAAA,MAPDM,aAOC,QAPDA,aAOC;AAAA,MANDE,QAMC,QANDA,QAMC;AAAA,MALDE,QAKC,QALDA,QAKC;AAAA,MAJDE,OAIC,QAJDA,OAIC;AAAA,MAHDC,MAGC,QAHDA,MAGC;AAAA,MAFDC,iBAEC,QAFDA,iBAEC;AAAA,MADDC,gBACC,QADDA,gBACC;AACD,MAAMO,QAAQ,GAAGnC,WAAW,EAA5B;;AADC,kBAEyCF,QAAQ,CAACe,KAAD,CAFjD;AAAA;AAAA,MAEMuB,aAFN;AAAA,MAEqBC,gBAFrB;;AAAA,mBAG+BvC,QAAQ,CAAC,EAAD,CAHvC;AAAA;AAAA,MAGMwC,QAHN;AAAA,MAGgBC,WAHhB;;AAKD,MAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,aAAD,EAAmB;AAC9C,WAAOA,aAAa,GAChB;AAAEC,MAAAA,UAAU,EAAE;AAAEC,QAAAA,OAAO,EAAEvC,KAAK,CAACQ,MAAN,CAAagC,CAAb,CAAe,gCAAf,CAAX;AAA6D1B,QAAAA,IAAI,EAAE;AAAnE;AAAd,KADgB,GAEhB;AAAEwB,MAAAA,UAAU,EAAE;AAAd,KAFJ;AAGD,GAJD;;AAMA,MAAMG,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,sBAAD,EAA4B;AACzD,WAAOA,sBAAsB,IAAIA,sBAAsB,CAACC,MAAvB,GAAgCxB,QAA1D,GACH;AAAEyB,MAAAA,YAAY,EAAE;AAAEL,QAAAA,OAAO,EAAEvC,KAAK,CAACQ,MAAN,CAAagC,CAAb,CAAe,kCAAf,EAAmD;AAAEK,UAAAA,GAAG,EAAE1B;AAAP,SAAnD,CAAX;AAAkFL,QAAAA,IAAI,EAAE;AAAxF;AAAhB,KADG,GAEH;AAAE8B,MAAAA,YAAY,EAAE;AAAhB,KAFJ;AAGD,GAJD;;AAMA,MAAME,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAC/B,aAAD,EAAmB;AAC/C,WAAOA,aAAa,IAAIA,aAAa,CAAC4B,MAAd,GAAuB,CAAxC,IAA6C5B,aAAa,CAACgC,IAAd,CAAmB,UAACC,CAAD;AAAA,aAAOA,CAAC,CAACC,IAAF,GAAS5B,OAAhB;AAAA,KAAnB,CAA7C,GACH;AACE6B,MAAAA,WAAW,EAAE;AACXX,QAAAA,OAAO,EAAEvC,KAAK,CAACQ,MAAN,CAAagC,CAAb,CAAe,iCAAf,EAAkD;AACzDK,UAAAA,GAAG,EAAE7C,KAAK,CAACQ,MAAN,CAAagC,CAAb,CAAe,eAAf,EAAgC;AACnCW,YAAAA,KAAK,EAAE;AAAE/B,cAAAA,MAAM,EAAEC,OAAV;AAAmB+B,cAAAA,MAAM,EAAE;AAAEC,gBAAAA,MAAM,EAAE,MAAV;AAAkBC,gBAAAA,IAAI,EAAE,SAAxB;AAAmCC,gBAAAA,QAAQ,EAAE;AAA7C;AAA3B;AAD4B,WAAhC,CADoD;AAIzDC,UAAAA,QAAQ,EAAEzC,aAAa,CACpB0C,GADO,CACH,UAACT,CAAD;AAAA,mBAAOA,CAAC,CAACnC,IAAT;AAAA,WADG,EAEP6C,MAFO,CAEAC,OAFA,EAES;AAFT,WAGPC,IAHO,CAGF,IAHE;AAJ+C,SAAlD,CADE;AAUX9C,QAAAA,IAAI,EAAE;AAVK;AADf,KADG,GAeH;AAAEoC,MAAAA,WAAW,EAAE;AAAf,KAfJ;AAgBD,GAjBD;;AAmBA,MAAMW,yBAAyB,GAAG,SAA5BA,yBAA4B,CAAC9C,aAAD,EAAmB;AAAA;;AACnD,QAAM+C,uBAAuB,GAAGxC,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAEyC,KAAR,CAAc,GAAd,CAAhC;AACA,QAAMC,oBAAoB,GAAGF,uBAAH,aAAGA,uBAAH,uBAAGA,uBAAuB,CAAEL,GAAzB,CAA6B,UAACQ,CAAD;AAAA,aAAOA,CAAP,aAAOA,CAAP,uBAAOA,CAAC,CAAEC,KAAH,CAAS,CAAT,CAAP;AAAA,KAA7B,CAA7B;AACA,WAAO,CAAAnD,aAAa,SAAb,IAAAA,aAAa,WAAb,YAAAA,aAAa,CAAE4B,MAAf,IAAwB,CAAxB,IAA6B,CAAAqB,oBAAoB,SAApB,IAAAA,oBAAoB,WAApB,YAAAA,oBAAoB,CAAEG,OAAtB,CAA8BpD,aAA9B,aAA8BA,aAA9B,0CAA8BA,aAAa,CAAG,CAAH,CAA3C,oDAA8B,gBAAoBqD,IAApB,CAAyBL,KAAzB,CAA+B,GAA/B,EAAoCM,GAApC,EAA9B,OAA6E,CAAC,CAA3G,GACH;AAAEC,MAAAA,cAAc,EAAE;AAAE/B,QAAAA,OAAO,EAAEvC,KAAK,CAACQ,MAAN,CAAagC,CAAb,CAAe,wCAAf,CAAX;AAAqE1B,QAAAA,IAAI,EAAE;AAA3E;AAAlB,KADG,GAEH;AAAEwD,MAAAA,cAAc,EAAE;AAAlB,KAFJ;AAGD,GAND;;AAQA3E,EAAAA,SAAS,CAAC,YAAM;AACdwC,IAAAA,WAAW,+CACND,QADM,GAENO,sBAAsB,CAACT,aAAD,CAFhB,GAGNc,qBAAqB,CAAC/B,aAAD,CAHf,EAAX;AAKD,GANQ,EAMN,EANM,CAAT,CA5CC,CAkDO;;AAER,MAAMwD,MAAM,GAAG,CACb;AACEzD,IAAAA,IAAI,EAAE,MADR;AAEED,IAAAA,IAAI,EAAE,aAFR;AAGEsC,IAAAA,KAAK,EAAE,IAHT;AAIEqB,IAAAA,iBAAiB,EAAE,KAJrB;AAKEjD,IAAAA,iBAAiB,EAAEA,iBALrB;AAMEkD,IAAAA,cAAc,EAAE;AACdxD,MAAAA,QAAQ,EAARA,QADc;AAEdE,MAAAA,QAAQ,EAARA,QAFc;AAGdE,MAAAA,OAAO,EAAPA,OAHc;AAIdC,MAAAA,MAAM,EAANA;AAJc;AANlB,GADa,CAAf;AAgBA,MAAMoD,OAAO,GAAG,CACd;AACE7D,IAAAA,IAAI,EAAE,QADR;AAEE8D,IAAAA,KAAK,EAAE3E,KAAK,CAACQ,MAAN,CAAagC,CAAb,CAAe,YAAf,CAFT;AAGEoC,IAAAA,OAAO,EAAE;AAAA,aAAM7C,QAAQ,CAAChC,SAAS,EAAV,CAAd;AAAA;AAHX,GADc,EAMd;AACEc,IAAAA,IAAI,EAAE,QADR;AAEE8D,IAAAA,KAAK,EAAE3E,KAAK,CAACQ,MAAN,CAAagC,CAAb,CAAe,UAAf,CAFT;AAGEoC,IAAAA,OAAO,EAAE,iBAACC,IAAD,EAAU;AACjBrD,MAAAA,gBAAgB,CAACqD,IAAD,EAAOtE,kBAAP,CAAhB;AACD;AALH,GANc,CAAhB;;AAeA,MAAMuE,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACpC,sBAAD,EAAyB3B,aAAzB,EAAwCsB,aAAxC,EAA0D;AACjFF,IAAAA,WAAW,2EACND,QADM,GAENE,oBAAoB,CAACC,aAAD,CAFd,GAGNI,sBAAsB,CAACC,sBAAD,CAHhB,GAINI,qBAAqB,CAAC/B,aAAD,CAJf,GAKN8C,yBAAyB,CAAC9C,aAAD,CALnB,EAAX;AAQAkB,IAAAA,gBAAgB,CAACS,sBAAD,CAAhB;AACD,GAVD;;AAYA,MAAMqC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACrC,sBAAD,EAA4B;AACrDP,IAAAA,WAAW,2EACND,QADM,GAENE,oBAAoB,CAAC,KAAD,CAFd,GAGNK,sBAAsB,CAACC,sBAAD,CAHhB,GAINI,qBAAqB,CAAC,KAAD,CAJf,GAKNe,yBAAyB,CAAC,KAAD,CALnB,EAAX;AAQA5B,IAAAA,gBAAgB,CAACS,sBAAD,CAAhB;AACD,GAVD;;AAYA,MAAMsC,UAAU,GAAG,SAAbA,UAAa,CAACpE,IAAD,EAAU;AAC3B,qBAAUA,IAAI,CAACC,IAAf,cAAuBD,IAAI,CAACqC,IAA5B,cAAoCrC,IAAI,CAACqE,YAAzC;AACD,GAFD;;AAIA,sBACE,QAAC,uCAAD;AACE,IAAA,OAAO,EAAE7E,OADX;AAEE,IAAA,KAAK,EAAEK,KAFT;AAGE,IAAA,MAAM,EAAE8D,MAHV;AAIE,IAAA,OAAO,EAAEG,OAJX;AAKE,IAAA,QAAQ,EAAExC,QALZ;AAME,IAAA,QAAQ,EAAE;AACR8C,MAAAA,UAAU,EAAVA,UADQ;AAERE,MAAAA,YAAY,EAAEJ,gBAFN;AAGRK,MAAAA,cAAc,EAAEJ;AAHR;AANZ;AAAA;AAAA;AAAA;AAAA,UADF;AAcD;;GAxIuB7E,mC;UAYLN,W;;;KAZKM,mC","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\n// app\r\nimport { PremiumTaxSignedLinesDocumentUploadView } from './PremiumTaxSignedLinesDocumentUpload.view';\r\nimport { hideModal } from 'stores';\r\nimport * as utils from 'utils';\r\nimport * as constants from 'consts';\r\n\r\nPremiumTaxSignedLinesDocumentUpload.propTypes = {\r\n  riskRef: PropTypes.object.isRequired,\r\n  uploadDocumentType: PropTypes.string.isRequired,\r\n  files: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      file: PropTypes.object,\r\n      name: PropTypes.string,\r\n      type: PropTypes.object,\r\n    })\r\n  ),\r\n  rejectedFiles: PropTypes.array,\r\n  multiple: PropTypes.bool,\r\n  maxFiles: PropTypes.number,\r\n  maxSize: PropTypes.number,\r\n  accept: PropTypes.string,\r\n  showMaxFilesError: PropTypes.bool,\r\n  handleFileUpload: PropTypes.func.isRequired,\r\n};\r\n\r\nPremiumTaxSignedLinesDocumentUpload.defaultProps = {\r\n  multiple: constants.PROCESSING_INSTRUCTION_FILE_UPLOAD_ALLOW_MULTIPLE,\r\n  maxFiles: constants.PROCESSING_INSTRUCTION_DETAILS_FILE_UPLOAD_MAX_FILES,\r\n  maxSize: constants.PROCESSING_INSTRUCTION_FILE_UPLOAD_MAX_FILE_SIZE,\r\n  accept: constants.PROCESSING_INSTRUCTION_FILE_UPLOAD_ALLOWED_FILE_EXT,\r\n  showMaxFilesError: false,\r\n};\r\n\r\nexport default function PremiumTaxSignedLinesDocumentUpload({\r\n  riskRef,\r\n  uploadDocumentType,\r\n  files,\r\n  rejectedFiles,\r\n  multiple,\r\n  maxFiles,\r\n  maxSize,\r\n  accept,\r\n  showMaxFilesError,\r\n  handleFileUpload,\r\n}) {\r\n  const dispatch = useDispatch();\r\n  const [filesAttached, setFilesAttached] = useState(files);\r\n  const [warnings, setWarnings] = useState({});\r\n\r\n  const setWarningDuplicates = (hasDuplicates) => {\r\n    return hasDuplicates\r\n      ? { duplicates: { message: utils.string.t('fileUpload.messages.duplicates'), type: 'alert' } }\r\n      : { duplicates: {} };\r\n  };\r\n\r\n  const setWarningTooManyFiles = (filesCurrentlyAttached) => {\r\n    return filesCurrentlyAttached && filesCurrentlyAttached.length > maxFiles\r\n      ? { tooManyFiles: { message: utils.string.t('fileUpload.messages.tooManyFiles', { max: maxFiles }), type: 'error' } }\r\n      : { tooManyFiles: {} };\r\n  };\r\n\r\n  const setWarningMaxFileSize = (rejectedFiles) => {\r\n    return rejectedFiles && rejectedFiles.length > 0 && rejectedFiles.some((f) => f.size > maxSize)\r\n      ? {\r\n          maxFileSize: {\r\n            message: utils.string.t('fileUpload.messages.maxFileSize', {\r\n              max: utils.string.t('format.number', {\r\n                value: { number: maxSize, format: { output: 'byte', base: 'decimal', mantissa: 0 } },\r\n              }),\r\n              filename: rejectedFiles\r\n                .map((f) => f.name)\r\n                .filter(Boolean) // filter out empty array item, in case f.name is falsy or empty ''\r\n                .join(', '),\r\n            }),\r\n            type: 'alert',\r\n          },\r\n        }\r\n      : { maxFileSize: {} };\r\n  };\r\n\r\n  const setWarningForRejectedFile = (rejectedFiles) => {\r\n    const acceptSplittedExtension = accept?.split(',');\r\n    const slicedExtensionArray = acceptSplittedExtension?.map((s) => s?.slice(1));\r\n    return rejectedFiles?.length > 0 && slicedExtensionArray?.indexOf(rejectedFiles?.[0]?.path.split('.').pop()) === -1\r\n      ? { rejectedFormat: { message: utils.string.t('fileUpload.messages.rejectedFileFormat'), type: 'alert' } }\r\n      : { rejectedFormat: {} };\r\n  };\r\n\r\n  useEffect(() => {\r\n    setWarnings({\r\n      ...warnings,\r\n      ...setWarningTooManyFiles(filesAttached),\r\n      ...setWarningMaxFileSize(rejectedFiles),\r\n    });\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const fields = [\r\n    {\r\n      type: 'file',\r\n      name: 'filesUpload',\r\n      value: null,\r\n      showUploadPreview: false,\r\n      showMaxFilesError: showMaxFilesError,\r\n      componentProps: {\r\n        multiple,\r\n        maxFiles,\r\n        maxSize,\r\n        accept,\r\n      },\r\n    },\r\n  ];\r\n\r\n  const actions = [\r\n    {\r\n      name: 'cancel',\r\n      label: utils.string.t('app.cancel'),\r\n      handler: () => dispatch(hideModal()),\r\n    },\r\n    {\r\n      name: 'submit',\r\n      label: utils.string.t('app.save'),\r\n      handler: (data) => {\r\n        handleFileUpload(data, uploadDocumentType);\r\n      },\r\n    },\r\n  ];\r\n\r\n  const handleFilesAdded = (filesCurrentlyAttached, rejectedFiles, hasDuplicates) => {\r\n    setWarnings({\r\n      ...warnings,\r\n      ...setWarningDuplicates(hasDuplicates),\r\n      ...setWarningTooManyFiles(filesCurrentlyAttached),\r\n      ...setWarningMaxFileSize(rejectedFiles),\r\n      ...setWarningForRejectedFile(rejectedFiles),\r\n    });\r\n\r\n    setFilesAttached(filesCurrentlyAttached);\r\n  };\r\n\r\n  const handleFilesRemoved = (filesCurrentlyAttached) => {\r\n    setWarnings({\r\n      ...warnings,\r\n      ...setWarningDuplicates(false),\r\n      ...setWarningTooManyFiles(filesCurrentlyAttached),\r\n      ...setWarningMaxFileSize(false),\r\n      ...setWarningForRejectedFile(false),\r\n    });\r\n\r\n    setFilesAttached(filesCurrentlyAttached);\r\n  };\r\n\r\n  const getFileKey = (file) => {\r\n    return `${file.name}-${file.size}-${file.lastModified}`;\r\n  };\r\n\r\n  return (\r\n    <PremiumTaxSignedLinesDocumentUploadView\r\n      riskRef={riskRef}\r\n      files={files}\r\n      fields={fields}\r\n      actions={actions}\r\n      warnings={warnings}\r\n      handlers={{\r\n        getFileKey,\r\n        onFilesAdded: handleFilesAdded,\r\n        onFilesRemoved: handleFilesRemoved,\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}