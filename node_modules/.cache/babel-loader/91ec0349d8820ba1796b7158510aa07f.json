{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { addLoader, authLogout, enqueueNotification, getRiskDetails, getRiskQuotes, hideModal, removeLoader } from 'stores';\nimport * as utils from 'utils';\nexport var declineRiskQuote = function declineRiskQuote(quoteId) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/risk.actions.declineQuote'\n    };\n    dispatch(declineQuoteRequest(quoteId));\n    dispatch(addLoader('declineQuote'));\n\n    if (!quoteId) {\n      dispatch(declineQuoteFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Data missing for POST request'\n      })));\n      dispatch(enqueueNotification('notification.generic.request', 'error'));\n      dispatch(hideModal());\n      dispatch(removeLoader('declineQuote'));\n      return;\n    }\n\n    var path = \"api/v1/quotes/\".concat(quoteId, \"/decline\");\n    return utils.api.put({\n      token: auth.accessToken,\n      endpoint: endpoint.auth,\n      path: path\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleResponseJsonObject(json);\n    }).then(function (data) {\n      dispatch(declineQuoteSuccess(data));\n      return data;\n    }).then(function (data) {\n      dispatch(getRiskDetails(data.riskId));\n      return data.riskId;\n    }).then(function (riskId) {\n      return dispatch(getRiskQuotes(riskId));\n    }).then(function () {\n      dispatch(enqueueNotification('notification.declineRiskQuote.success', 'success'));\n    })[\"catch\"](function (err) {\n      utils.api.handleError(err, defaultError);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(declineQuoteFailure(err));\n      dispatch(enqueueNotification(utils.api.getErrorMessage(err), 'error'));\n      return err;\n    })[\"finally\"](function () {\n      dispatch(hideModal());\n      dispatch(removeLoader('declineQuote'));\n      return;\n    });\n  };\n};\nexport var declineQuoteRequest = function declineQuoteRequest(id) {\n  return {\n    type: 'RISK_DECLINE_QUOTE_REQUEST',\n    payload: id\n  };\n};\nexport var declineQuoteSuccess = function declineQuoteSuccess(responseData) {\n  return {\n    type: 'RISK_DECLINE_QUOTE_SUCCESS',\n    payload: responseData\n  };\n};\nexport var declineQuoteFailure = function declineQuoteFailure(error) {\n  return {\n    type: 'RISK_DECLINE_QUOTE_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/risk/risk.actions.declineQuote.js"],"names":["addLoader","authLogout","enqueueNotification","getRiskDetails","getRiskQuotes","hideModal","removeLoader","utils","declineRiskQuote","quoteId","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","declineQuoteRequest","declineQuoteFailure","message","path","api","put","token","accessToken","then","response","handleResponse","json","handleResponseJsonObject","data","declineQuoteSuccess","riskId","err","handleError","handleUnauthorized","getErrorMessage","id","type","payload","responseData","error"],"mappings":"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","sourcesContent":["import { addLoader, authLogout, enqueueNotification, getRiskDetails, getRiskQuotes, hideModal, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const declineRiskQuote = (quoteId) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/risk.actions.declineQuote',\r\n  };\r\n\r\n  dispatch(declineQuoteRequest(quoteId));\r\n  dispatch(addLoader('declineQuote'));\r\n\r\n  if (!quoteId) {\r\n    dispatch(declineQuoteFailure({ ...defaultError, message: 'Data missing for POST request' }));\r\n    dispatch(enqueueNotification('notification.generic.request', 'error'));\r\n    dispatch(hideModal());\r\n    dispatch(removeLoader('declineQuote'));\r\n    return;\r\n  }\r\n\r\n  const path = `api/v1/quotes/${quoteId}/decline`;\r\n\r\n  return utils.api\r\n    .put({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.auth,\r\n      path,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleResponseJsonObject(json))\r\n    .then((data) => {\r\n      dispatch(declineQuoteSuccess(data));\r\n      return data;\r\n    })\r\n    .then((data) => {\r\n      dispatch(getRiskDetails(data.riskId));\r\n      return data.riskId;\r\n    })\r\n    .then((riskId) => {\r\n      return dispatch(getRiskQuotes(riskId));\r\n    })\r\n    .then(() => {\r\n      dispatch(enqueueNotification('notification.declineRiskQuote.success', 'success'));\r\n    })\r\n    .catch((err) => {\r\n      utils.api.handleError(err, defaultError);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(declineQuoteFailure(err));\r\n      dispatch(enqueueNotification(utils.api.getErrorMessage(err), 'error'));\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(hideModal());\r\n      dispatch(removeLoader('declineQuote'));\r\n      return;\r\n    });\r\n};\r\n\r\nexport const declineQuoteRequest = (id) => {\r\n  return {\r\n    type: 'RISK_DECLINE_QUOTE_REQUEST',\r\n    payload: id,\r\n  };\r\n};\r\n\r\nexport const declineQuoteSuccess = (responseData) => {\r\n  return {\r\n    type: 'RISK_DECLINE_QUOTE_SUCCESS',\r\n    payload: responseData,\r\n  };\r\n};\r\n\r\nexport const declineQuoteFailure = (error) => {\r\n  return {\r\n    type: 'RISK_DECLINE_QUOTE_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}