{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\RfiQueryForm\\\\RfiQueryForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport * as Yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useHistory } from 'react-router';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux'; //app\n\nimport * as utils from 'utils';\nimport { RfiQueryFormView } from './RfiQueryForm.view';\nimport { Loader } from 'components';\nimport config from 'config';\nimport { CREATE_RFI_FORM, TASK_TAB_COMPLETED_STATUS } from 'consts';\nimport { getUsersByOrg, selectClaimsAssignedToUsers, postSendRFI, postCloseRFI, showModal, selectUserEmail, resetClaimsAssignedToUsers, setDmsTaskContextType, getRfiHistory } from 'stores'; // mui\n\nimport { Box } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function RfiQueryForm(props) {\n  _s();\n\n  var _useSelector, _rfiTask$requestedBy3;\n\n  var dispatch = useDispatch();\n  var history = useHistory();\n  var assignedToUsers = ((_useSelector = useSelector(selectClaimsAssignedToUsers)) === null || _useSelector === void 0 ? void 0 : _useSelector.items) || null;\n  var userEmail = useSelector(selectUserEmail);\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      resetKey = _useState2[0],\n      setResetKey = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isDataReady = _useState4[0],\n      setIsDataReady = _useState4[1];\n\n  var rfiTask = props.rfiTask;\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isResponseSubmitted = _useState6[0],\n      setIsResponseSubmitted = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      uploadDocumentsControl = _useState8[0],\n      setUploadDocumentsControl = _useState8[1];\n\n  var defaultAssignedUser = function defaultAssignedUser() {\n    var _rfiTask$requestedBy;\n\n    return (userEmail === null || userEmail === void 0 ? void 0 : userEmail.toLowerCase()) === (rfiTask === null || rfiTask === void 0 ? void 0 : (_rfiTask$requestedBy = rfiTask.requestedBy) === null || _rfiTask$requestedBy === void 0 ? void 0 : _rfiTask$requestedBy.toLowerCase()) ? assignedToUsers === null || assignedToUsers === void 0 ? void 0 : assignedToUsers.find(function (_ref) {\n      var _rfiTask$rfiSentTo;\n\n      var email = _ref.email;\n      return (email === null || email === void 0 ? void 0 : email.toLowerCase()) === (rfiTask === null || rfiTask === void 0 ? void 0 : (_rfiTask$rfiSentTo = rfiTask.rfiSentTo) === null || _rfiTask$rfiSentTo === void 0 ? void 0 : _rfiTask$rfiSentTo.toLowerCase());\n    }) : utils.generic.isValidArray(assignedToUsers, true) ? assignedToUsers === null || assignedToUsers === void 0 ? void 0 : assignedToUsers.find(function (_ref2) {\n      var _rfiTask$requestedBy2;\n\n      var email = _ref2.email;\n      return (email === null || email === void 0 ? void 0 : email.toLowerCase()) === (rfiTask === null || rfiTask === void 0 ? void 0 : (_rfiTask$requestedBy2 = rfiTask.requestedBy) === null || _rfiTask$requestedBy2 === void 0 ? void 0 : _rfiTask$requestedBy2.toLowerCase());\n    }) : null;\n  };\n\n  var fields = [{\n    name: 'sendTo',\n    type: 'autocompletemui',\n    value: defaultAssignedUser(),\n    options: utils.generic.isValidArray(assignedToUsers, true) ? assignedToUsers : [],\n    optionKey: 'email',\n    optionLabel: 'fullName',\n    muiComponentProps: {\n      disabled: (rfiTask === null || rfiTask === void 0 ? void 0 : rfiTask.status) === TASK_TAB_COMPLETED_STATUS\n    },\n    validation: Yup.object().required(utils.string.t('validation.required'))\n  }, {\n    name: 'description',\n    type: 'textarea',\n    hint: utils.string.t('claims.processing.validation.rfiHistoryMaxDesc', {\n      char: 1000\n    }),\n    muiComponentProps: {\n      inputProps: {\n        maxLength: 1000\n      },\n      multiline: true,\n      rows: 3,\n      rowsMax: 3,\n      'data-testid': 'details'\n    },\n    validation: Yup.string().required(utils.string.t('validation.required')).max(1000, utils.string.t('claims.processing.validation.rfiHistoryMaxDesc', {\n      char: 1000\n    }))\n  }];\n  var actions = [{\n    name: 'secondary',\n    label: utils.string.t('app.close'),\n    disabled: userEmail.toLowerCase() !== (rfiTask === null || rfiTask === void 0 ? void 0 : (_rfiTask$requestedBy3 = rfiTask.requestedBy) === null || _rfiTask$requestedBy3 === void 0 ? void 0 : _rfiTask$requestedBy3.toLowerCase()),\n    handler: function handler() {\n      handleCloseRFI();\n    }\n  }, {\n    name: 'submit',\n    label: utils.string.t('app.reply'),\n    handler: function handler(values) {\n      handleRFISend(values);\n    }\n  }];\n  var dmsActions = {\n    skipUpload: {\n      label: utils.string.t('app.no'),\n      handler: function handler() {\n        setUploadDocumentsControl(false);\n        history.replace(config.routes.claimsProcessing.root);\n      }\n    },\n    upload: {\n      label: utils.string.t('app.yes'),\n      handler: function handler() {\n        setUploadDocumentsControl(true);\n      }\n    },\n    submitReply: {\n      label: utils.string.t('claims.processing.rfi.submitReply'),\n      handler: function handler() {\n        history.replace(config.routes.claimsProcessing.root);\n      }\n    }\n  };\n\n  var handleRFISend = function handleRFISend(values) {\n    if (values) {\n      var _props$selectedQueryC;\n\n      var sendToObj = assignedToUsers.find(function (user) {\n        var _values$sendTo;\n\n        return user.email === (values === null || values === void 0 ? void 0 : (_values$sendTo = values.sendTo) === null || _values$sendTo === void 0 ? void 0 : _values$sendTo.email);\n      });\n      var rfiSendData = {\n        assignedTo: sendToObj === null || sendToObj === void 0 ? void 0 : sendToObj.email,\n        bpmTaskID: rfiTask === null || rfiTask === void 0 ? void 0 : rfiTask.taskId,\n        caseIncidentID: rfiTask === null || rfiTask === void 0 ? void 0 : rfiTask.caseIncidentID,\n        notes: values === null || values === void 0 ? void 0 : values.description,\n        team: sendToObj === null || sendToObj === void 0 ? void 0 : sendToObj.organisationName,\n        queryCodeDescription: props === null || props === void 0 ? void 0 : (_props$selectedQueryC = props.selectedQueryCode) === null || _props$selectedQueryC === void 0 ? void 0 : _props$selectedQueryC.queryCodeDescription\n      };\n      dispatch(postSendRFI(rfiSendData)).then(function (data) {\n        dispatch(getRfiHistory(rfiTask === null || rfiTask === void 0 ? void 0 : rfiTask.taskId));\n\n        if (data.status === 'OK') {\n          setIsResponseSubmitted(true);\n          var _data$data = data.data,\n              caseIncidentID = _data$data.caseIncidentID,\n              caseIncidentNotesID = _data$data.caseIncidentNotesID;\n\n          if (caseIncidentID && caseIncidentNotesID) {\n            dispatch(setDmsTaskContextType({\n              caseIncidentID: caseIncidentID,\n              caseIncidentNotesID: caseIncidentNotesID\n            }));\n          }\n        }\n      });\n    }\n  };\n\n  var handleCloseRFI = function handleCloseRFI() {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        fullWidth: true,\n        title: utils.string.t('status.alert'),\n        maxWidth: 'xs',\n        componentProps: {\n          confirmLabel: utils.string.t('app.yes'),\n          cancelLabel: utils.string.t('app.no'),\n          confirmMessage: utils.string.t('claims.processing.modal.rfiCloseConfirm'),\n          buttonColors: {\n            confirm: 'secondary',\n            cancel: 'default'\n          },\n          submitHandler: function submitHandler() {\n            dispatch(postCloseRFI(rfiTask === null || rfiTask === void 0 ? void 0 : rfiTask.taskId, history)).then(function (data) {\n              if (data.status === 'OK') {\n                setTimeout(function () {\n                  return history.replace(config.routes.claimsProcessing.root);\n                }, 1000);\n              }\n            });\n          }\n        }\n      }\n    }));\n  };\n\n  useEffect(function () {\n    dispatch(getUsersByOrg('', [rfiTask], CREATE_RFI_FORM, false));\n    dispatch(resetClaimsAssignedToUsers());\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    if ((assignedToUsers === null || assignedToUsers === void 0 ? void 0 : assignedToUsers.length) > 0) {\n      setResetKey(new Date().getTime());\n      setIsDataReady(true);\n    }\n  }, [assignedToUsers]);\n  var defaultValues = utils.form.getInitialValues(fields);\n  var validationSchema = utils.form.getValidationSchema(fields);\n\n  var _useForm = useForm(_objectSpread({\n    defaultValues: defaultValues\n  }, validationSchema && {\n    resolver: yupResolver(validationSchema)\n  })),\n      control = _useForm.control,\n      reset = _useForm.reset,\n      errors = _useForm.errors,\n      handleSubmit = _useForm.handleSubmit,\n      formState = _useForm.formState,\n      setValue = _useForm.setValue;\n\n  if (!isDataReady) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      height: \"300px\",\n      children: /*#__PURE__*/_jsxDEV(Loader, {\n        visible: true,\n        absolute: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(RfiQueryFormView, _objectSpread(_objectSpread({}, props), {}, {\n    fields: fields,\n    actions: actions,\n    formProps: {\n      control: control,\n      handleSubmit: handleSubmit,\n      setValue: setValue,\n      errors: errors,\n      formState: formState,\n      reset: reset\n    },\n    resetKey: resetKey,\n    dmsActions: dmsActions,\n    isResponseSubmitted: isResponseSubmitted,\n    uploadDocumentsControl: uploadDocumentsControl\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RfiQueryForm, \"Upf7Fih6mG4fLc1IFSOP17t6F3U=\", false, function () {\n  return [useDispatch, useHistory, useSelector, useSelector, useForm];\n});\n\n_c = RfiQueryForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RfiQueryForm\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/RfiQueryForm/RfiQueryForm.js"],"names":["React","useEffect","useState","Yup","yupResolver","useHistory","useForm","useDispatch","useSelector","utils","RfiQueryFormView","Loader","config","CREATE_RFI_FORM","TASK_TAB_COMPLETED_STATUS","getUsersByOrg","selectClaimsAssignedToUsers","postSendRFI","postCloseRFI","showModal","selectUserEmail","resetClaimsAssignedToUsers","setDmsTaskContextType","getRfiHistory","Box","RfiQueryForm","props","dispatch","history","assignedToUsers","items","userEmail","resetKey","setResetKey","isDataReady","setIsDataReady","rfiTask","isResponseSubmitted","setIsResponseSubmitted","uploadDocumentsControl","setUploadDocumentsControl","defaultAssignedUser","toLowerCase","requestedBy","find","email","rfiSentTo","generic","isValidArray","fields","name","type","value","options","optionKey","optionLabel","muiComponentProps","disabled","status","validation","object","required","string","t","hint","char","inputProps","maxLength","multiline","rows","rowsMax","max","actions","label","handler","handleCloseRFI","values","handleRFISend","dmsActions","skipUpload","replace","routes","claimsProcessing","root","upload","submitReply","sendToObj","user","sendTo","rfiSendData","assignedTo","bpmTaskID","taskId","caseIncidentID","notes","description","team","organisationName","queryCodeDescription","selectedQueryCode","then","data","caseIncidentNotesID","component","fullWidth","title","maxWidth","componentProps","confirmLabel","cancelLabel","confirmMessage","buttonColors","confirm","cancel","submitHandler","setTimeout","length","Date","getTime","defaultValues","form","getInitialValues","validationSchema","getValidationSchema","resolver","control","reset","errors","handleSubmit","formState","setValue"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport * as Yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useHistory } from 'react-router';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n//app\r\nimport * as utils from 'utils';\r\nimport { RfiQueryFormView } from './RfiQueryForm.view';\r\nimport { Loader } from 'components';\r\nimport config from 'config';\r\nimport { CREATE_RFI_FORM, TASK_TAB_COMPLETED_STATUS } from 'consts';\r\nimport {\r\n  getUsersByOrg,\r\n  selectClaimsAssignedToUsers,\r\n  postSendRFI,\r\n  postCloseRFI,\r\n  showModal,\r\n  selectUserEmail,\r\n  resetClaimsAssignedToUsers,\r\n  setDmsTaskContextType,\r\n  getRfiHistory,\r\n} from 'stores';\r\n\r\n// mui\r\nimport { Box } from '@material-ui/core';\r\n\r\nexport default function RfiQueryForm(props) {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const assignedToUsers = useSelector(selectClaimsAssignedToUsers)?.items || null;\r\n  const userEmail = useSelector(selectUserEmail);\r\n  const [resetKey, setResetKey] = useState();\r\n  const [isDataReady, setIsDataReady] = useState(false);\r\n  const { rfiTask } = props;\r\n  const [isResponseSubmitted, setIsResponseSubmitted] = useState(false);\r\n  const [uploadDocumentsControl, setUploadDocumentsControl] = useState(false);\r\n\r\n  const defaultAssignedUser = () =>\r\n    userEmail?.toLowerCase() === rfiTask?.requestedBy?.toLowerCase()\r\n      ? assignedToUsers?.find(({ email }) => email?.toLowerCase() === rfiTask?.rfiSentTo?.toLowerCase())\r\n      : utils.generic.isValidArray(assignedToUsers, true)\r\n      ? assignedToUsers?.find(({ email }) => email?.toLowerCase() === rfiTask?.requestedBy?.toLowerCase())\r\n      : null;\r\n\r\n  const fields = [\r\n    {\r\n      name: 'sendTo',\r\n      type: 'autocompletemui',\r\n      value: defaultAssignedUser(),\r\n      options: utils.generic.isValidArray(assignedToUsers, true) ? assignedToUsers : [],\r\n      optionKey: 'email',\r\n      optionLabel: 'fullName',\r\n      muiComponentProps: {\r\n        disabled: rfiTask?.status === TASK_TAB_COMPLETED_STATUS,\r\n      },\r\n      validation: Yup.object().required(utils.string.t('validation.required')),\r\n    },\r\n    {\r\n      name: 'description',\r\n      type: 'textarea',\r\n      hint: utils.string.t('claims.processing.validation.rfiHistoryMaxDesc', { char: 1000 }),\r\n      muiComponentProps: {\r\n        inputProps: { maxLength: 1000 },\r\n        multiline: true,\r\n        rows: 3,\r\n        rowsMax: 3,\r\n        'data-testid': 'details',\r\n      },\r\n      validation: Yup.string()\r\n        .required(utils.string.t('validation.required'))\r\n        .max(1000, utils.string.t('claims.processing.validation.rfiHistoryMaxDesc', { char: 1000 })),\r\n    },\r\n  ];\r\n\r\n  const actions = [\r\n    {\r\n      name: 'secondary',\r\n      label: utils.string.t('app.close'),\r\n      disabled: userEmail.toLowerCase() !== rfiTask?.requestedBy?.toLowerCase(),\r\n      handler: () => {\r\n        handleCloseRFI();\r\n      },\r\n    },\r\n    {\r\n      name: 'submit',\r\n      label: utils.string.t('app.reply'),\r\n      handler: (values) => {\r\n        handleRFISend(values);\r\n      },\r\n    },\r\n  ];\r\n\r\n  const dmsActions = {\r\n    skipUpload: {\r\n      label: utils.string.t('app.no'),\r\n      handler: () => {\r\n        setUploadDocumentsControl(false);\r\n        history.replace(config.routes.claimsProcessing.root);\r\n      },\r\n    },\r\n    upload: {\r\n      label: utils.string.t('app.yes'),\r\n      handler: () => {\r\n        setUploadDocumentsControl(true);\r\n      },\r\n    },\r\n    submitReply: {\r\n      label: utils.string.t('claims.processing.rfi.submitReply'),\r\n      handler: () => {\r\n        history.replace(config.routes.claimsProcessing.root);\r\n      },\r\n    },\r\n  };\r\n\r\n  const handleRFISend = (values) => {\r\n    if (values) {\r\n      const sendToObj = assignedToUsers.find((user) => user.email === values?.sendTo?.email);\r\n      const rfiSendData = {\r\n        assignedTo: sendToObj?.email,\r\n        bpmTaskID: rfiTask?.taskId,\r\n        caseIncidentID: rfiTask?.caseIncidentID,\r\n        notes: values?.description,\r\n        team: sendToObj?.organisationName,\r\n        queryCodeDescription: props?.selectedQueryCode?.queryCodeDescription,\r\n      };\r\n      dispatch(postSendRFI(rfiSendData)).then((data) => {\r\n        dispatch(getRfiHistory(rfiTask?.taskId));\r\n        if (data.status === 'OK') {\r\n          setIsResponseSubmitted(true);\r\n          const { caseIncidentID, caseIncidentNotesID } = data.data;\r\n          if (caseIncidentID && caseIncidentNotesID) {\r\n            dispatch(setDmsTaskContextType({ caseIncidentID, caseIncidentNotesID }));\r\n          }\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleCloseRFI = () => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          fullWidth: true,\r\n          title: utils.string.t('status.alert'),\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            confirmLabel: utils.string.t('app.yes'),\r\n            cancelLabel: utils.string.t('app.no'),\r\n            confirmMessage: utils.string.t('claims.processing.modal.rfiCloseConfirm'),\r\n            buttonColors: { confirm: 'secondary', cancel: 'default' },\r\n            submitHandler: () => {\r\n              dispatch(postCloseRFI(rfiTask?.taskId, history)).then((data) => {\r\n                if (data.status === 'OK') {\r\n                  setTimeout(() => history.replace(config.routes.claimsProcessing.root), 1000);\r\n                }\r\n              });\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsersByOrg('', [rfiTask], CREATE_RFI_FORM, false));\r\n    dispatch(resetClaimsAssignedToUsers());\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    if (assignedToUsers?.length > 0) {\r\n      setResetKey(new Date().getTime());\r\n      setIsDataReady(true);\r\n    }\r\n  }, [assignedToUsers]);\r\n\r\n  const defaultValues = utils.form.getInitialValues(fields);\r\n  const validationSchema = utils.form.getValidationSchema(fields);\r\n\r\n  const { control, reset, errors, handleSubmit, formState, setValue } = useForm({\r\n    defaultValues,\r\n    ...(validationSchema && { resolver: yupResolver(validationSchema) }),\r\n  });\r\n\r\n  if (!isDataReady) {\r\n    return (\r\n      <Box height=\"300px\">\r\n        <Loader visible absolute />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <RfiQueryFormView\r\n      {...props}\r\n      fields={fields}\r\n      actions={actions}\r\n      formProps={{ control, handleSubmit, setValue, errors, formState, reset }}\r\n      resetKey={resetKey}\r\n      dmsActions={dmsActions}\r\n      isResponseSubmitted={isResponseSubmitted}\r\n      uploadDocumentsControl={uploadDocumentsControl}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}