{"ast":null,"code":"import * as utils from 'utils';\nimport { authLogout } from 'stores';\nexport var getNewOdsReferenceTypes = function getNewOdsReferenceTypes() {\n  return function (dispatch, getState) {\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    dispatch(getNewOdsReferenceTypesRequest());\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.odsService,\n      path: \"referenceData/ResolutionCode,querycode\"\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      if (data && data.status === utils.string.t('app.ok') && data.data) {\n        dispatch(getNewOdsReferenceTypesSuccess(data.data));\n      }\n    }).catch(function (err) {\n      var errorParams = {\n        file: 'stores/referenceData.actions.get',\n        message: 'API fetch error (getNewOdsReferenceTypes.get)'\n      };\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(getNewOdsReferenceTypesFailure(err));\n      return err;\n    });\n  };\n};\nexport var getNewOdsReferenceTypesRequest = function getNewOdsReferenceTypesRequest() {\n  return {\n    type: 'REFERENCE_DATA_TYPE_NEW_ODS_REQUEST'\n  };\n};\nexport var getNewOdsReferenceTypesSuccess = function getNewOdsReferenceTypesSuccess(data) {\n  return {\n    type: 'REFERENCE_DATA_TYPE_NEW_ODS_SUCCESS',\n    payload: data\n  };\n};\nexport var getNewOdsReferenceTypesFailure = function getNewOdsReferenceTypesFailure(error) {\n  return {\n    type: 'REFERENCE_DATA_TYPE_NEW_ODS_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/referenceData/referenceDataTypeNewOds.actions.get.js"],"names":["utils","authLogout","getNewOdsReferenceTypes","dispatch","getState","auth","user","endpoint","config","vars","getNewOdsReferenceTypesRequest","api","get","token","accessToken","odsService","path","then","response","handleResponse","json","handleNewData","data","status","string","t","getNewOdsReferenceTypesSuccess","catch","err","errorParams","file","message","handleError","handleUnauthorized","getNewOdsReferenceTypesFailure","type","payload","error"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,QAA3B;AAEA,OAAO,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B;AAAA,SAAM,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAAA,oBAM/DA,QAAQ,EANuD;AAAA,QAEzDC,IAFyD,aAEjEC,IAFiE,CAEzDD,IAFyD;AAAA,QAIvDE,QAJuD,aAGjEC,MAHiE,CAI/DC,IAJ+D,CAIvDF,QAJuD;;AAOnEJ,IAAAA,QAAQ,CAACO,8BAA8B,EAA/B,CAAR;AACA,WAAOV,KAAK,CAACW,GAAN,CACJC,GADI,CACA;AACHC,MAAAA,KAAK,EAAER,IAAI,CAACS,WADT;AAEHP,MAAAA,QAAQ,EAAEA,QAAQ,CAACQ,UAFhB;AAGHC,MAAAA,IAAI;AAHD,KADA,EAMJC,IANI,CAMC,UAACC,QAAD;AAAA,aAAclB,KAAK,CAACW,GAAN,CAAUQ,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAND,EAOJD,IAPI,CAOC,UAACG,IAAD;AAAA,aAAUpB,KAAK,CAACW,GAAN,CAAUU,aAAV,CAAwBD,IAAxB,CAAV;AAAA,KAPD,EAQJH,IARI,CAQC,UAACK,IAAD,EAAU;AACd,UAAIA,IAAI,IAAIA,IAAI,CAACC,MAAL,KAAgBvB,KAAK,CAACwB,MAAN,CAAaC,CAAb,CAAe,QAAf,CAAxB,IAAoDH,IAAI,CAACA,IAA7D,EAAmE;AACjEnB,QAAAA,QAAQ,CAACuB,8BAA8B,CAACJ,IAAI,CAACA,IAAN,CAA/B,CAAR;AACD;AACF,KAZI,EAaJK,KAbI,CAaE,UAACC,GAAD,EAAS;AACd,UAAMC,WAAW,GAAG;AAClBC,QAAAA,IAAI,EAAE,kCADY;AAElBC,QAAAA,OAAO,EAAE;AAFS,OAApB;AAIA/B,MAAAA,KAAK,CAACW,GAAN,CAAUqB,WAAV,CAAsBJ,GAAtB,EAA2BC,WAA3B;AACA7B,MAAAA,KAAK,CAACW,GAAN,CAAUsB,kBAAV,CAA6BL,GAA7B,EAAkCzB,QAAlC,EAA4CF,UAA5C;AACAE,MAAAA,QAAQ,CAAC+B,8BAA8B,CAACN,GAAD,CAA/B,CAAR;AACA,aAAOA,GAAP;AACD,KAtBI,CAAP;AAuBD,GA/BsC;AAAA,CAAhC;AAgCP,OAAO,IAAMlB,8BAA8B,GAAG,SAAjCA,8BAAiC,GAAM;AAClD,SAAO;AACLyB,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM;AAKP,OAAO,IAAMT,8BAA8B,GAAG,SAAjCA,8BAAiC,CAACJ,IAAD,EAAU;AACtD,SAAO;AACLa,IAAAA,IAAI,EAAE,qCADD;AAELC,IAAAA,OAAO,EAAEd;AAFJ,GAAP;AAID,CALM;AAMP,OAAO,IAAMY,8BAA8B,GAAG,SAAjCA,8BAAiC,CAACG,KAAD,EAAW;AACvD,SAAO;AACLF,IAAAA,IAAI,EAAE,qCADD;AAELC,IAAAA,OAAO,EAAEC;AAFJ,GAAP;AAID,CALM","sourcesContent":["import * as utils from 'utils';\r\nimport { authLogout } from 'stores';\r\n\r\nexport const getNewOdsReferenceTypes = () => (dispatch, getState) => {\r\n  const {\r\n    user: { auth },\r\n    config: {\r\n      vars: { endpoint },\r\n    },\r\n  } = getState();\r\n  dispatch(getNewOdsReferenceTypesRequest());\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.odsService,\r\n      path: `referenceData/ResolutionCode,querycode`,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      if (data && data.status === utils.string.t('app.ok') && data.data) {\r\n        dispatch(getNewOdsReferenceTypesSuccess(data.data));\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        file: 'stores/referenceData.actions.get',\r\n        message: 'API fetch error (getNewOdsReferenceTypes.get)',\r\n      };\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(getNewOdsReferenceTypesFailure(err));\r\n      return err;\r\n    });\r\n};\r\nexport const getNewOdsReferenceTypesRequest = () => {\r\n  return {\r\n    type: 'REFERENCE_DATA_TYPE_NEW_ODS_REQUEST',\r\n  };\r\n};\r\nexport const getNewOdsReferenceTypesSuccess = (data) => {\r\n  return {\r\n    type: 'REFERENCE_DATA_TYPE_NEW_ODS_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\nexport const getNewOdsReferenceTypesFailure = (error) => {\r\n  return {\r\n    type: 'REFERENCE_DATA_TYPE_NEW_ODS_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}