{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { authLogout, addLoader, removeLoader } from 'stores';\nimport * as utils from 'utils';\nexport var getClaimsBasicInformation = function getClaimsBasicInformation(claimId, claimRef, sourceId, divisionId) {\n  var viewLoader = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/claims.actions.getClaimsBasicInformation'\n    };\n    dispatch(getClaimsBasicInformationRequest({\n      claimId: claimId,\n      claimRef: claimRef,\n      sourceId: sourceId,\n      divisionId: divisionId,\n      viewLoader: viewLoader\n    }));\n    viewLoader && dispatch(addLoader('getClaimsBasicInformation'));\n\n    if (!claimId || !claimRef || !sourceId || !divisionId) {\n      dispatch(getClaimsBasicInformationFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Missing request params'\n      })));\n    }\n\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.claimService,\n      path: \"api/data/claims/\".concat(claimId, \"/basic-detail\"),\n      params: {\n        sourceId: sourceId,\n        claimRef: claimRef,\n        divisionId: divisionId,\n        isBasicDetail: true\n      }\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (data) {\n      dispatch(getClaimsBasicInformationSuccess(data.data));\n      return data.data;\n    }).catch(function (err) {\n      dispatch(getClaimsBasicInformationFailure(err, defaultError));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      return err;\n    }).finally(function () {\n      viewLoader && dispatch(removeLoader('getClaimsBasicInformation'));\n    });\n  };\n};\nexport var getClaimsBasicInformationRequest = function getClaimsBasicInformationRequest(params) {\n  return {\n    type: 'CLAIMS_BASIC_INFORMATION_GET_REQUEST',\n    payload: params\n  };\n};\nexport var getClaimsBasicInformationSuccess = function getClaimsBasicInformationSuccess(data) {\n  return {\n    type: 'CLAIMS_BASIC_INFORMATION_GET_SUCCESS',\n    payload: data\n  };\n};\nexport var getClaimsBasicInformationFailure = function getClaimsBasicInformationFailure(err) {\n  return {\n    type: 'CLAIMS_BASIC_INFORMATION_GET_FAILURE',\n    payload: err\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.getClaimsBasicInformation.js"],"names":["authLogout","addLoader","removeLoader","utils","getClaimsBasicInformation","claimId","claimRef","sourceId","divisionId","viewLoader","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","getClaimsBasicInformationRequest","getClaimsBasicInformationFailure","message","api","get","token","accessToken","claimService","path","params","isBasicDetail","then","response","handleResponse","data","getClaimsBasicInformationSuccess","catch","err","handleUnauthorized","finally","type","payload"],"mappings":"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","sourcesContent":["import { authLogout, addLoader, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const getClaimsBasicInformation =\r\n  (claimId, claimRef, sourceId, divisionId, viewLoader = true) =>\r\n  (dispatch, getState) => {\r\n    // prettier-ignore\r\n    const { user: { auth }, config: { vars: { endpoint } } } = getState();\r\n\r\n    const defaultError = {\r\n      file: 'stores/claims.actions.getClaimsBasicInformation',\r\n    };\r\n\r\n    dispatch(getClaimsBasicInformationRequest({ claimId, claimRef, sourceId, divisionId, viewLoader }));\r\n    viewLoader && dispatch(addLoader('getClaimsBasicInformation'));\r\n\r\n    if (!claimId || !claimRef || !sourceId || !divisionId) {\r\n      dispatch(getClaimsBasicInformationFailure({ ...defaultError, message: 'Missing request params' }));\r\n    }\r\n\r\n    return utils.api\r\n      .get({\r\n        token: auth.accessToken,\r\n        endpoint: endpoint.claimService,\r\n        path: `api/data/claims/${claimId}/basic-detail`,\r\n        params: {\r\n          sourceId,\r\n          claimRef,\r\n          divisionId,\r\n          isBasicDetail: true,\r\n        },\r\n      })\r\n      .then((response) => utils.api.handleResponse(response))\r\n      .then((data) => {\r\n        dispatch(getClaimsBasicInformationSuccess(data.data));\r\n        return data.data;\r\n      })\r\n      .catch((err) => {\r\n        dispatch(getClaimsBasicInformationFailure(err, defaultError));\r\n        utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n        return err;\r\n      })\r\n      .finally(() => {\r\n        viewLoader && dispatch(removeLoader('getClaimsBasicInformation'));\r\n      });\r\n  };\r\n\r\nexport const getClaimsBasicInformationRequest = (params) => {\r\n  return {\r\n    type: 'CLAIMS_BASIC_INFORMATION_GET_REQUEST',\r\n    payload: params,\r\n  };\r\n};\r\n\r\nexport const getClaimsBasicInformationSuccess = (data) => {\r\n  return {\r\n    type: 'CLAIMS_BASIC_INFORMATION_GET_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const getClaimsBasicInformationFailure = (err) => {\r\n  return {\r\n    type: 'CLAIMS_BASIC_INFORMATION_GET_FAILURE',\r\n    payload: err,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}