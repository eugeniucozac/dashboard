{"ast":null,"code":"import * as utils from 'utils';\nimport { authLogout } from 'stores';\nexport var getTripAddresses = function getTripAddresses(searchTerm) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    dispatch(getTripAddressesRequest(searchTerm));\n    var body = {\n      address: searchTerm\n    };\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.location,\n      path: 'api/search',\n      data: body\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleData(json);\n    }).then(function (data) {\n      dispatch(getTripAddressesSuccess(data)); // last then to return updated state data to components waiting for this promise\n      // ex: async Autocomplete (React-Select)\n\n      return getState().trip.addresses.filter(function (address) {\n        return address.lat && address.lng;\n      });\n    }).catch(function (err) {\n      var errorParams = {\n        file: 'stores/trip.actions.getTripAddresses',\n        message: 'API fetch error (trip.getTripAddresses)'\n      };\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(getTripAddressesFailure(err));\n      return err;\n    });\n  };\n};\nexport var getTripAddressesRequest = function getTripAddressesRequest(searchTerm) {\n  return {\n    type: 'TRIP_ADDRESSES_GET_REQUEST',\n    payload: searchTerm\n  };\n};\nexport var getTripAddressesSuccess = function getTripAddressesSuccess(responseData) {\n  return {\n    type: 'TRIP_ADDRESSES_GET_SUCCESS',\n    payload: responseData\n  };\n};\nexport var getTripAddressesFailure = function getTripAddressesFailure(error) {\n  return {\n    type: 'TRIP_ADDRESSES_GET_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/trip/trip.actions.getAddresses.js"],"names":["utils","authLogout","getTripAddresses","searchTerm","dispatch","getState","auth","user","endpoint","config","vars","getTripAddressesRequest","body","address","api","post","token","accessToken","location","path","data","then","response","handleResponse","json","handleData","getTripAddressesSuccess","trip","addresses","filter","lat","lng","catch","err","errorParams","file","message","handleError","handleUnauthorized","getTripAddressesFailure","type","payload","responseData","error"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,QAA3B;AAEA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,UAAD;AAAA,SAAgB,UAACC,QAAD,EAAWC,QAAX,EAAwB;AACtE;AADsE,oBAEbA,QAAQ,EAFK;AAAA,QAEtDC,IAFsD,aAE9DC,IAF8D,CAEtDD,IAFsD;AAAA,QAE5BE,QAF4B,aAE9CC,MAF8C,CAEpCC,IAFoC,CAE5BF,QAF4B;;AAItEJ,IAAAA,QAAQ,CAACO,uBAAuB,CAACR,UAAD,CAAxB,CAAR;AAEA,QAAMS,IAAI,GAAG;AACXC,MAAAA,OAAO,EAAEV;AADE,KAAb;AAIA,WAAOH,KAAK,CAACc,GAAN,CACJC,IADI,CACC;AACJC,MAAAA,KAAK,EAAEV,IAAI,CAACW,WADR;AAEJT,MAAAA,QAAQ,EAAEA,QAAQ,CAACU,QAFf;AAGJC,MAAAA,IAAI,EAAE,YAHF;AAIJC,MAAAA,IAAI,EAAER;AAJF,KADD,EAOJS,IAPI,CAOC,UAACC,QAAD;AAAA,aAActB,KAAK,CAACc,GAAN,CAAUS,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAPD,EAQJD,IARI,CAQC,UAACG,IAAD;AAAA,aAAUxB,KAAK,CAACc,GAAN,CAAUW,UAAV,CAAqBD,IAArB,CAAV;AAAA,KARD,EASJH,IATI,CASC,UAACD,IAAD,EAAU;AACdhB,MAAAA,QAAQ,CAACsB,uBAAuB,CAACN,IAAD,CAAxB,CAAR,CADc,CAGd;AACA;;AACA,aAAOf,QAAQ,GAAGsB,IAAX,CAAgBC,SAAhB,CAA0BC,MAA1B,CAAiC,UAAChB,OAAD;AAAA,eAAaA,OAAO,CAACiB,GAAR,IAAejB,OAAO,CAACkB,GAApC;AAAA,OAAjC,CAAP;AACD,KAfI,EAgBJC,KAhBI,CAgBE,UAACC,GAAD,EAAS;AACd,UAAMC,WAAW,GAAG;AAClBC,QAAAA,IAAI,EAAE,sCADY;AAElBC,QAAAA,OAAO,EAAE;AAFS,OAApB;AAKApC,MAAAA,KAAK,CAACc,GAAN,CAAUuB,WAAV,CAAsBJ,GAAtB,EAA2BC,WAA3B;AACAlC,MAAAA,KAAK,CAACc,GAAN,CAAUwB,kBAAV,CAA6BL,GAA7B,EAAkC7B,QAAlC,EAA4CH,UAA5C;AACAG,MAAAA,QAAQ,CAACmC,uBAAuB,CAACN,GAAD,CAAxB,CAAR;AACA,aAAOA,GAAP;AACD,KA1BI,CAAP;AA2BD,GArC+B;AAAA,CAAzB;AAuCP,OAAO,IAAMtB,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACR,UAAD,EAAgB;AACrD,SAAO;AACLqC,IAAAA,IAAI,EAAE,4BADD;AAELC,IAAAA,OAAO,EAAEtC;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMuB,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACgB,YAAD,EAAkB;AACvD,SAAO;AACLF,IAAAA,IAAI,EAAE,4BADD;AAELC,IAAAA,OAAO,EAAEC;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMH,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACI,KAAD,EAAW;AAChD,SAAO;AACLH,IAAAA,IAAI,EAAE,4BADD;AAELC,IAAAA,OAAO,EAAEE;AAFJ,GAAP;AAID,CALM","sourcesContent":["import * as utils from 'utils';\r\nimport { authLogout } from 'stores';\r\n\r\nexport const getTripAddresses = (searchTerm) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  dispatch(getTripAddressesRequest(searchTerm));\r\n\r\n  const body = {\r\n    address: searchTerm,\r\n  };\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.location,\r\n      path: 'api/search',\r\n      data: body,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleData(json))\r\n    .then((data) => {\r\n      dispatch(getTripAddressesSuccess(data));\r\n\r\n      // last then to return updated state data to components waiting for this promise\r\n      // ex: async Autocomplete (React-Select)\r\n      return getState().trip.addresses.filter((address) => address.lat && address.lng);\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        file: 'stores/trip.actions.getTripAddresses',\r\n        message: 'API fetch error (trip.getTripAddresses)',\r\n      };\r\n\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(getTripAddressesFailure(err));\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const getTripAddressesRequest = (searchTerm) => {\r\n  return {\r\n    type: 'TRIP_ADDRESSES_GET_REQUEST',\r\n    payload: searchTerm,\r\n  };\r\n};\r\n\r\nexport const getTripAddressesSuccess = (responseData) => {\r\n  return {\r\n    type: 'TRIP_ADDRESSES_GET_SUCCESS',\r\n    payload: responseData,\r\n  };\r\n};\r\n\r\nexport const getTripAddressesFailure = (error) => {\r\n  return {\r\n    type: 'TRIP_ADDRESSES_GET_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}