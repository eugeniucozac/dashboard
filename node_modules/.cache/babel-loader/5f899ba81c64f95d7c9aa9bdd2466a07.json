{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { addLoader, removeLoader, enqueueNotification, hideModal, authLogout } from 'stores';\nimport * as constants from 'consts';\nimport * as utils from 'utils';\nexport var singleAssignClaim = function singleAssignClaim(claims, formData) {\n  return function (dispatch, getState) {\n    var _formData$assignTo, _formData$assignTo$or, _organisation$id, _complexity$complexti, _claims$, _claims$$complexity, _constants$ORGANIZATI, _constants$ORGANIZATI2;\n\n    // prettier-ignore\n    var _getState = getState(),\n        _getState$user = _getState.user,\n        auth = _getState$user.auth,\n        organisation = _getState$user.organisation,\n        endpoint = _getState.config.vars.endpoint;\n\n    var assignTo = formData.assignTo,\n        notes = formData.notes,\n        team = formData.team,\n        complexity = formData.complexity,\n        complexityBasis = formData.complexityBasis;\n    var defaultError = {\n      file: 'stores/claims.actions.singleAssignClaim'\n    };\n    dispatch(singleAssignClaimRequest(claims, formData));\n    dispatch(addLoader('singleAssignClaim'));\n\n    if (utils.generic.isInvalidOrEmptyArray(claims) || !team) {\n      dispatch(singleAssignClaimFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Missing request params'\n      })));\n    }\n\n    var isAssigneeOnSameTeam = (formData === null || formData === void 0 ? void 0 : (_formData$assignTo = formData.assignTo) === null || _formData$assignTo === void 0 ? void 0 : (_formData$assignTo$or = _formData$assignTo.organisationId) === null || _formData$assignTo$or === void 0 ? void 0 : _formData$assignTo$or.toString()) === (organisation === null || organisation === void 0 ? void 0 : (_organisation$id = organisation.id) === null || _organisation$id === void 0 ? void 0 : _organisation$id.toString());\n    var isComplexityChanged = (complexity === null || complexity === void 0 ? void 0 : (_complexity$complexti = complexity.complextityType) === null || _complexity$complexti === void 0 ? void 0 : _complexity$complexti.toLowerCase()) !== (claims === null || claims === void 0 ? void 0 : (_claims$ = claims[0]) === null || _claims$ === void 0 ? void 0 : (_claims$$complexity = _claims$.complexity) === null || _claims$$complexity === void 0 ? void 0 : _claims$$complexity.toLowerCase());\n    var postPayload = {\n      note: notes,\n      assignTo: (assignTo === null || assignTo === void 0 ? void 0 : assignTo.email) || null,\n      organizationId: isAssigneeOnSameTeam ? null : constants === null || constants === void 0 ? void 0 : (_constants$ORGANIZATI = constants.ORGANIZATIONS[team.toLowerCase()]) === null || _constants$ORGANIZATI === void 0 ? void 0 : _constants$ORGANIZATI.id,\n      organizationName: isAssigneeOnSameTeam ? null : constants === null || constants === void 0 ? void 0 : (_constants$ORGANIZATI2 = constants.ORGANIZATIONS[team.toLowerCase()]) === null || _constants$ORGANIZATI2 === void 0 ? void 0 : _constants$ORGANIZATI2.label,\n      complexityRuleId: (complexityBasis === null || complexityBasis === void 0 ? void 0 : complexityBasis.complexityRulesID) || null,\n      complexityType: isComplexityChanged ? (complexity === null || complexity === void 0 ? void 0 : complexity.complextityType) || null : null,\n      processDetail: claims.map(function (claim) {\n        return {\n          claimID: claim === null || claim === void 0 ? void 0 : claim.claimID,\n          caseIncidentID: claim === null || claim === void 0 ? void 0 : claim.caseIncidentID,\n          processId: claim === null || claim === void 0 ? void 0 : claim.processID\n        };\n      })\n    };\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.claimService,\n      path: 'api/workflow/claim/updateAssignee',\n      data: postPayload\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(singleAssignClaimSuccess(data.data));\n      dispatch(enqueueNotification(utils.string.t('claims.processing.bulkAssign.notifications.claims.success'), 'success'));\n      return data;\n    })[\"catch\"](function (error) {\n      dispatch(singleAssignClaimFailure(error, defaultError));\n      dispatch(enqueueNotification(utils.string.t('claims.processing.bulkAssign.notifications.claims.failure'), 'error'));\n      utils.api.handleUnauthorized(error, dispatch, authLogout);\n      return error;\n    })[\"finally\"](function () {\n      dispatch(hideModal());\n      dispatch(removeLoader('singleAssignClaim'));\n    });\n  };\n};\nexport var singleAssignClaimRequest = function singleAssignClaimRequest(claims, formData) {\n  return {\n    type: 'CLAIMS_PROCESSING_SINGLE_ASSIGN_REQUEST',\n    payload: {\n      claims: claims,\n      formData: formData\n    }\n  };\n};\nexport var singleAssignClaimSuccess = function singleAssignClaimSuccess(data) {\n  return {\n    type: 'CLAIMS_PROCESSING_SINGLE_ASSIGN_SUCCESS',\n    payload: data\n  };\n};\nexport var singleAssignClaimFailure = function singleAssignClaimFailure(error) {\n  return {\n    type: 'CLAIMS_PROCESSING_SINGLE_ASSIGN_ERROR',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.singleAssignClaim.js"],"names":["addLoader","removeLoader","enqueueNotification","hideModal","authLogout","constants","utils","singleAssignClaim","claims","formData","dispatch","getState","user","auth","organisation","endpoint","config","vars","assignTo","notes","team","complexity","complexityBasis","defaultError","file","singleAssignClaimRequest","generic","isInvalidOrEmptyArray","singleAssignClaimFailure","message","isAssigneeOnSameTeam","organisationId","toString","id","isComplexityChanged","complextityType","toLowerCase","postPayload","note","email","organizationId","ORGANIZATIONS","organizationName","label","complexityRuleId","complexityRulesID","complexityType","processDetail","map","claim","claimID","caseIncidentID","processId","processID","api","post","token","accessToken","claimService","path","data","then","response","handleResponse","json","handleNewData","singleAssignClaimSuccess","string","t","error","handleUnauthorized","type","payload"],"mappings":"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","sourcesContent":["import { addLoader, removeLoader, enqueueNotification, hideModal, authLogout } from 'stores';\r\nimport * as constants from 'consts';\r\nimport * as utils from 'utils';\r\n\r\nexport const singleAssignClaim = (claims, formData) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth, organisation }, config: { vars: { endpoint } } } = getState();\r\n\r\n  const { assignTo, notes, team, complexity, complexityBasis } = formData;\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.singleAssignClaim',\r\n  };\r\n\r\n  dispatch(singleAssignClaimRequest(claims, formData));\r\n  dispatch(addLoader('singleAssignClaim'));\r\n\r\n  if (utils.generic.isInvalidOrEmptyArray(claims) || !team) {\r\n    dispatch(singleAssignClaimFailure({ ...defaultError, message: 'Missing request params' }));\r\n  }\r\n\r\n  const isAssigneeOnSameTeam = formData?.assignTo?.organisationId?.toString() === organisation?.id?.toString();\r\n\r\n  const isComplexityChanged = complexity?.complextityType?.toLowerCase() !== claims?.[0]?.complexity?.toLowerCase();\r\n  const postPayload = {\r\n    note: notes,\r\n    assignTo: assignTo?.email || null,\r\n    organizationId: isAssigneeOnSameTeam ? null : constants?.ORGANIZATIONS[team.toLowerCase()]?.id,\r\n    organizationName: isAssigneeOnSameTeam ? null : constants?.ORGANIZATIONS[team.toLowerCase()]?.label,\r\n    complexityRuleId: complexityBasis?.complexityRulesID || null,\r\n    complexityType: isComplexityChanged ? complexity?.complextityType || null : null,\r\n    processDetail: claims.map((claim) => ({\r\n      claimID: claim?.claimID,\r\n      caseIncidentID: claim?.caseIncidentID,\r\n      processId: claim?.processID,\r\n    })),\r\n  };\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.claimService,\r\n      path: 'api/workflow/claim/updateAssignee',\r\n      data: postPayload,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(singleAssignClaimSuccess(data.data));\r\n      dispatch(enqueueNotification(utils.string.t('claims.processing.bulkAssign.notifications.claims.success'), 'success'));\r\n      return data;\r\n    })\r\n    .catch((error) => {\r\n      dispatch(singleAssignClaimFailure(error, defaultError));\r\n      dispatch(enqueueNotification(utils.string.t('claims.processing.bulkAssign.notifications.claims.failure'), 'error'));\r\n      utils.api.handleUnauthorized(error, dispatch, authLogout);\r\n      return error;\r\n    })\r\n    .finally(() => {\r\n      dispatch(hideModal());\r\n      dispatch(removeLoader('singleAssignClaim'));\r\n    });\r\n};\r\n\r\nexport const singleAssignClaimRequest = (claims, formData) => {\r\n  return {\r\n    type: 'CLAIMS_PROCESSING_SINGLE_ASSIGN_REQUEST',\r\n    payload: { claims, formData },\r\n  };\r\n};\r\n\r\nexport const singleAssignClaimSuccess = (data) => {\r\n  return {\r\n    type: 'CLAIMS_PROCESSING_SINGLE_ASSIGN_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const singleAssignClaimFailure = (error) => {\r\n  return {\r\n    type: 'CLAIMS_PROCESSING_SINGLE_ASSIGN_ERROR',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}