{"ast":null,"code":"import { addLoader, authLogout, removeLoader } from 'stores';\nimport * as utils from 'utils';\nimport get from 'lodash/get';\nexport var postClaimsProcessingFilters = function postClaimsProcessingFilters(params) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint,\n        claims = _getState.claims;\n\n    var defaultError = {\n      file: 'stores/claims.actions.postClaimsProcessingFilters'\n    };\n    dispatch(postClaimsProcessingFiltersRequest());\n    dispatch(addLoader('postClaimsProcessingFilters'));\n    var prevDirection = get(claims, 'processing.sort.direction') || '';\n    var newDirection = params.hasOwnProperty('direction') ? params.direction : prevDirection;\n    var prevQuery = get(claims, 'processing.query') || '';\n    var newQuery = params.hasOwnProperty('term') ? params.term : prevQuery;\n    var prevSortBy = get(claims, 'processing.sort.by') || '';\n    var newSortBy = params.hasOwnProperty('sortBy') ? params.sortBy : prevSortBy;\n    var data = {\n      direction: newDirection,\n      page: params && params.page || 0,\n      pageSize: params && params.size || claims.processing.pageSize,\n      search: newQuery,\n      sortBy: newSortBy\n    };\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.claimService,\n      path: 'api/data/claimsProcessing/search/filter-values',\n      data: data\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (data) {\n      dispatch(postClaimsProcessingFiltersSuccess(data.data));\n      dispatch(removeLoader('postClaimsProcessingFilters'));\n      return data;\n    })[\"catch\"](function (err) {\n      dispatch(postClaimsProcessingFiltersFailure(err, defaultError));\n      dispatch(removeLoader('postClaimsProcessingFilters'));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      return err;\n    });\n  };\n};\nexport var postClaimsProcessingFiltersRequest = function postClaimsProcessingFiltersRequest(data) {\n  return {\n    type: 'CLAIMS_PROCESSING_FILTERS_POST_REQUEST',\n    payload: data\n  };\n};\nexport var postClaimsProcessingFiltersSuccess = function postClaimsProcessingFiltersSuccess(data) {\n  return {\n    type: 'CLAIMS_PROCESSING_FILTERS_POST_SUCCESS',\n    payload: data\n  };\n};\nexport var postClaimsProcessingFiltersFailure = function postClaimsProcessingFiltersFailure(data) {\n  return {\n    type: 'CLAIMS_PROCESSING_FILTER_POST_ERROR',\n    payload: data\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.postClaimsProcessingFilters.js"],"names":["addLoader","authLogout","removeLoader","utils","get","postClaimsProcessingFilters","params","dispatch","getState","auth","user","endpoint","config","vars","claims","defaultError","file","postClaimsProcessingFiltersRequest","prevDirection","newDirection","hasOwnProperty","direction","prevQuery","newQuery","term","prevSortBy","newSortBy","sortBy","data","page","pageSize","size","processing","search","api","post","token","accessToken","claimService","path","then","response","handleResponse","postClaimsProcessingFiltersSuccess","err","postClaimsProcessingFiltersFailure","handleUnauthorized","type","payload"],"mappings":"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","sourcesContent":["import { addLoader, authLogout, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\nimport get from 'lodash/get';\r\n\r\nexport const postClaimsProcessingFilters = (params) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}, claims} = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.postClaimsProcessingFilters',\r\n  };\r\n\r\n  dispatch(postClaimsProcessingFiltersRequest());\r\n  dispatch(addLoader('postClaimsProcessingFilters'));\r\n\r\n  const prevDirection = get(claims, 'processing.sort.direction') || '';\r\n  const newDirection = params.hasOwnProperty('direction') ? params.direction : prevDirection;\r\n\r\n  const prevQuery = get(claims, 'processing.query') || '';\r\n  const newQuery = params.hasOwnProperty('term') ? params.term : prevQuery;\r\n\r\n  const prevSortBy = get(claims, 'processing.sort.by') || '';\r\n  const newSortBy = params.hasOwnProperty('sortBy') ? params.sortBy : prevSortBy;\r\n\r\n  const data = {\r\n    direction: newDirection,\r\n    page: (params && params.page) || 0,\r\n    pageSize: (params && params.size) || claims.processing.pageSize,\r\n    search: newQuery,\r\n    sortBy: newSortBy,\r\n  };\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.claimService,\r\n      path: 'api/data/claimsProcessing/search/filter-values',\r\n      data,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((data) => {\r\n      dispatch(postClaimsProcessingFiltersSuccess(data.data));\r\n      dispatch(removeLoader('postClaimsProcessingFilters'));\r\n      return data;\r\n    })\r\n    .catch((err) => {\r\n      dispatch(postClaimsProcessingFiltersFailure(err, defaultError));\r\n      dispatch(removeLoader('postClaimsProcessingFilters'));\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const postClaimsProcessingFiltersRequest = (data) => {\r\n  return {\r\n    type: 'CLAIMS_PROCESSING_FILTERS_POST_REQUEST',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const postClaimsProcessingFiltersSuccess = (data) => {\r\n  return {\r\n    type: 'CLAIMS_PROCESSING_FILTERS_POST_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const postClaimsProcessingFiltersFailure = (data) => {\r\n  return {\r\n    type: 'CLAIMS_PROCESSING_FILTER_POST_ERROR',\r\n    payload: data,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}