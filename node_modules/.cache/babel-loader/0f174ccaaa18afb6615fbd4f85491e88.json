{"ast":null,"code":"import \"core-js/modules/es.array.map\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport isEmpty from 'lodash/isEmpty';\nimport { addLoader, authLogout, removeLoader, enqueueNotification, hideModal } from 'stores';\nimport * as utils from 'utils';\nexport var editUser = function editUser(editedUser, previousUser) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    dispatch(editUserRequest(editedUser));\n    dispatch(addLoader('editUser'));\n    var defaultError = {\n      file: 'stores/admin.actions.editUser'\n    };\n    var rolesKeys = utils.user.getRolesString().map(function (role) {\n      return role.value;\n    });\n\n    if (!utils.generic.isValidObject(editedUser) || !rolesKeys.includes(editedUser.role) || !utils.generic.isValidObject(previousUser)) {\n      if (!rolesKeys.includes(editedUser.role)) defaultError.message = 'Invalid role type';\n      dispatch(editUserFailure(defaultError));\n      dispatch(enqueueNotification('notification.admin.userPatchFail', 'error'));\n      dispatch(removeLoader('editUser'));\n      dispatch(hideModal());\n      return;\n    }\n\n    var departments = editedUser.departments,\n        offices = editedUser.offices,\n        carriers = editedUser.carriers,\n        clients = editedUser.clients,\n        products = editedUser.products,\n        coverholder = editedUser.coverholder,\n        rest = _objectWithoutProperties(editedUser, [\"departments\", \"offices\", \"carriers\", \"clients\", \"products\", \"coverholder\"]);\n\n    var isCoBroker = utils.user.isCobroker(editedUser);\n\n    var editedUserToIds = _objectSpread(_objectSpread(_objectSpread({}, rest), departments && {\n      departmentIds: departments.map(function (department) {\n        return department.id;\n      })\n    }), offices && {\n      clientOfficeIds: isCoBroker ? offices.map(function (office) {\n        return office.id;\n      }) : []\n    });\n\n    var previousUserToIds = _objectSpread(_objectSpread({}, previousUser), {}, {\n      clientOfficeIds: previousUser.offices.map(function (office) {\n        return office.id;\n      })\n    });\n\n    var patchChanges = utils.generic.getDifferences(previousUserToIds, editedUserToIds);\n\n    if (!isEmpty(patchChanges)) {\n      return utils.api.patch({\n        token: auth.accessToken,\n        endpoint: endpoint.edge,\n        path: \"api/user/\".concat(previousUser.id),\n        data: patchChanges\n      }).then(function (response) {\n        return utils.api.handleResponse(response);\n      }).then(function (json) {\n        return utils.api.handleData(json);\n      }).then(function (data) {\n        dispatch(editUserSuccess(data));\n        dispatch(enqueueNotification('notification.admin.userPatchSuccess', 'success'));\n      })[\"catch\"](function (err) {\n        utils.api.handleError(err, defaultError);\n        utils.api.handleUnauthorized(err, dispatch, authLogout);\n        dispatch(editUserFailure(err));\n        dispatch(enqueueNotification('notification.admin.userPatchFail', 'error'));\n        return err;\n      })[\"finally\"](function () {\n        dispatch(removeLoader('editUser'));\n        dispatch(hideModal());\n      });\n    } else {\n      dispatch(removeLoader('editUser'));\n      dispatch(hideModal());\n    }\n  };\n};\nexport var editUserRequest = function editUserRequest(payload) {\n  return {\n    type: 'ADMIN_USER_EDIT_REQUEST',\n    payload: payload\n  };\n};\nexport var editUserSuccess = function editUserSuccess(payload) {\n  return {\n    type: 'ADMIN_USER_EDIT_SUCCESS',\n    payload: payload\n  };\n};\nexport var editUserFailure = function editUserFailure(error) {\n  return {\n    type: 'ADMIN_USER_EDIT_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/admin/admin.actions.editUser.js"],"names":["isEmpty","addLoader","authLogout","removeLoader","enqueueNotification","hideModal","utils","editUser","editedUser","previousUser","dispatch","getState","auth","user","endpoint","config","vars","editUserRequest","defaultError","file","rolesKeys","getRolesString","map","role","value","generic","isValidObject","includes","message","editUserFailure","departments","offices","carriers","clients","products","coverholder","rest","isCoBroker","isCobroker","editedUserToIds","departmentIds","department","id","clientOfficeIds","office","previousUserToIds","patchChanges","getDifferences","api","patch","token","accessToken","edge","path","data","then","response","handleResponse","json","handleData","editUserSuccess","err","handleError","handleUnauthorized","payload","type","error"],"mappings":"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","sourcesContent":["import isEmpty from 'lodash/isEmpty';\r\nimport { addLoader, authLogout, removeLoader, enqueueNotification, hideModal } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const editUser = (editedUser, previousUser) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  dispatch(editUserRequest(editedUser));\r\n  dispatch(addLoader('editUser'));\r\n\r\n  const defaultError = {\r\n    file: 'stores/admin.actions.editUser',\r\n  };\r\n\r\n  const rolesKeys = utils.user.getRolesString().map((role) => role.value);\r\n\r\n  if (!utils.generic.isValidObject(editedUser) || !rolesKeys.includes(editedUser.role) || !utils.generic.isValidObject(previousUser)) {\r\n    if (!rolesKeys.includes(editedUser.role)) defaultError.message = 'Invalid role type';\r\n\r\n    dispatch(editUserFailure(defaultError));\r\n    dispatch(enqueueNotification('notification.admin.userPatchFail', 'error'));\r\n    dispatch(removeLoader('editUser'));\r\n    dispatch(hideModal());\r\n    return;\r\n  }\r\n\r\n  const { departments, offices, carriers, clients, products, coverholder, ...rest } = editedUser;\r\n\r\n  const isCoBroker = utils.user.isCobroker(editedUser);\r\n\r\n  const editedUserToIds = {\r\n    ...rest,\r\n    ...(departments && { departmentIds: departments.map((department) => department.id) }),\r\n    ...(offices && { clientOfficeIds: isCoBroker ? offices.map((office) => office.id) : [] }),\r\n  };\r\n\r\n  const previousUserToIds = {\r\n    ...previousUser,\r\n    clientOfficeIds: previousUser.offices.map((office) => office.id),\r\n  };\r\n\r\n  const patchChanges = utils.generic.getDifferences(previousUserToIds, editedUserToIds);\r\n  if (!isEmpty(patchChanges)) {\r\n    return utils.api\r\n      .patch({\r\n        token: auth.accessToken,\r\n        endpoint: endpoint.edge,\r\n        path: `api/user/${previousUser.id}`,\r\n        data: patchChanges,\r\n      })\r\n      .then((response) => utils.api.handleResponse(response))\r\n      .then((json) => utils.api.handleData(json))\r\n      .then((data) => {\r\n        dispatch(editUserSuccess(data));\r\n        dispatch(enqueueNotification('notification.admin.userPatchSuccess', 'success'));\r\n      })\r\n      .catch((err) => {\r\n        utils.api.handleError(err, defaultError);\r\n        utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n        dispatch(editUserFailure(err));\r\n        dispatch(enqueueNotification('notification.admin.userPatchFail', 'error'));\r\n        return err;\r\n      })\r\n      .finally(() => {\r\n        dispatch(removeLoader('editUser'));\r\n        dispatch(hideModal());\r\n      });\r\n  } else {\r\n    dispatch(removeLoader('editUser'));\r\n    dispatch(hideModal());\r\n  }\r\n};\r\n\r\nexport const editUserRequest = (payload) => {\r\n  return {\r\n    type: 'ADMIN_USER_EDIT_REQUEST',\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const editUserSuccess = (payload) => {\r\n  return {\r\n    type: 'ADMIN_USER_EDIT_SUCCESS',\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const editUserFailure = (error) => {\r\n  return {\r\n    type: 'ADMIN_USER_EDIT_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}