{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport get from 'lodash/get'; // app\n\nimport * as utils from 'utils';\nimport { authLogout, addLoader, enqueueNotification, hideModal, removeLoader } from 'stores';\nexport var duplicateLine = function duplicateLine(lineId, formData) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/placement.actions.duplicateLine',\n      message: 'Data missing for POST request'\n    };\n    dispatch(duplicateLineRequest(formData));\n    dispatch(addLoader('duplicateLine'));\n\n    if (!formData || !get(formData.market, 'market.id') || !lineId) {\n      dispatch(duplicateLineFailure(defaultError));\n      dispatch(enqueueNotification('notification.duplicateLine.fail', 'error'));\n      dispatch(hideModal());\n      dispatch(removeLoader('duplicateLine'));\n      return;\n    }\n\n    var id = lineId;\n    return utils.api.put({\n      token: auth.accessToken,\n      endpoint: endpoint.edge,\n      path: \"api/placementlayerMarket/\".concat(id, \"/duplicate-line\"),\n      data: {\n        marketId: get(formData.market, 'market.id')\n      }\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleData(json);\n    }).then(function (data) {\n      dispatch(duplicateLineSuccess(data));\n      dispatch(enqueueNotification('notification.duplicateLine.success', 'success'));\n      dispatch(hideModal());\n      dispatch(removeLoader('duplicateLine'));\n      return data;\n    }).catch(function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API post error (placement.duplicateLine)'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(duplicateLineFailure(err));\n      dispatch(enqueueNotification('notification.duplicateLine.fail', 'error'));\n      dispatch(hideModal());\n      dispatch(removeLoader('duplicateLine'));\n      return err;\n    });\n  };\n};\nexport var duplicateLineRequest = function duplicateLineRequest(data) {\n  return {\n    type: 'DUPLICATE_LINE_PUT_REQUEST',\n    payload: data\n  };\n};\nexport var duplicateLineSuccess = function duplicateLineSuccess(data) {\n  return {\n    type: 'PLACEMENT_LAYER_MARKET_POST_SUCCESS',\n    payload: data\n  };\n};\nexport var duplicateLineFailure = function duplicateLineFailure(error) {\n  return {\n    type: 'DUPLICATE_LINE_PUT_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/placement/placement.actions.duplicateLine.js"],"names":["get","utils","authLogout","addLoader","enqueueNotification","hideModal","removeLoader","duplicateLine","lineId","formData","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","message","duplicateLineRequest","market","duplicateLineFailure","id","api","put","token","accessToken","edge","path","data","marketId","then","response","handleResponse","json","handleData","duplicateLineSuccess","catch","err","errorParams","handleError","handleUnauthorized","type","payload","error"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,YAAhB,C,CAEA;;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,mBAAhC,EAAqDC,SAArD,EAAgEC,YAAhE,QAAoF,QAApF;AAEA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,MAAD,EAASC,QAAT;AAAA,SAAsB,UAACC,QAAD,EAAWC,QAAX,EAAwB;AACzE;AADyE,oBAEdA,QAAQ,EAFM;AAAA,QAEzDC,IAFyD,aAEjEC,IAFiE,CAEzDD,IAFyD;AAAA,QAE/BE,QAF+B,aAEjDC,MAFiD,CAEvCC,IAFuC,CAE/BF,QAF+B;;AAIzE,QAAMG,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE,wCADa;AAEnBC,MAAAA,OAAO,EAAE;AAFU,KAArB;AAKAT,IAAAA,QAAQ,CAACU,oBAAoB,CAACX,QAAD,CAArB,CAAR;AACAC,IAAAA,QAAQ,CAACP,SAAS,CAAC,eAAD,CAAV,CAAR;;AAEA,QAAI,CAACM,QAAD,IAAa,CAACT,GAAG,CAACS,QAAQ,CAACY,MAAV,EAAkB,WAAlB,CAAjB,IAAmD,CAACb,MAAxD,EAAgE;AAC9DE,MAAAA,QAAQ,CAACY,oBAAoB,CAACL,YAAD,CAArB,CAAR;AACAP,MAAAA,QAAQ,CAACN,mBAAmB,CAAC,iCAAD,EAAoC,OAApC,CAApB,CAAR;AACAM,MAAAA,QAAQ,CAACL,SAAS,EAAV,CAAR;AACAK,MAAAA,QAAQ,CAACJ,YAAY,CAAC,eAAD,CAAb,CAAR;AACA;AACD;;AAED,QAAMiB,EAAE,GAAGf,MAAX;AACA,WAAOP,KAAK,CAACuB,GAAN,CACJC,GADI,CACA;AACHC,MAAAA,KAAK,EAAEd,IAAI,CAACe,WADT;AAEHb,MAAAA,QAAQ,EAAEA,QAAQ,CAACc,IAFhB;AAGHC,MAAAA,IAAI,qCAA8BN,EAA9B,oBAHD;AAIHO,MAAAA,IAAI,EAAE;AACJC,QAAAA,QAAQ,EAAE/B,GAAG,CAACS,QAAQ,CAACY,MAAV,EAAkB,WAAlB;AADT;AAJH,KADA,EASJW,IATI,CASC,UAACC,QAAD;AAAA,aAAchC,KAAK,CAACuB,GAAN,CAAUU,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KATD,EAUJD,IAVI,CAUC,UAACG,IAAD;AAAA,aAAUlC,KAAK,CAACuB,GAAN,CAAUY,UAAV,CAAqBD,IAArB,CAAV;AAAA,KAVD,EAWJH,IAXI,CAWC,UAACF,IAAD,EAAU;AACdpB,MAAAA,QAAQ,CAAC2B,oBAAoB,CAACP,IAAD,CAArB,CAAR;AACApB,MAAAA,QAAQ,CAACN,mBAAmB,CAAC,oCAAD,EAAuC,SAAvC,CAApB,CAAR;AACAM,MAAAA,QAAQ,CAACL,SAAS,EAAV,CAAR;AACAK,MAAAA,QAAQ,CAACJ,YAAY,CAAC,eAAD,CAAb,CAAR;AACA,aAAOwB,IAAP;AACD,KAjBI,EAkBJQ,KAlBI,CAkBE,UAACC,GAAD,EAAS;AACd,UAAMC,WAAW,mCACZvB,YADY;AAEfE,QAAAA,OAAO,EAAE;AAFM,QAAjB;;AAIAlB,MAAAA,KAAK,CAACuB,GAAN,CAAUiB,WAAV,CAAsBF,GAAtB,EAA2BC,WAA3B;AACAvC,MAAAA,KAAK,CAACuB,GAAN,CAAUkB,kBAAV,CAA6BH,GAA7B,EAAkC7B,QAAlC,EAA4CR,UAA5C;AACAQ,MAAAA,QAAQ,CAACY,oBAAoB,CAACiB,GAAD,CAArB,CAAR;AACA7B,MAAAA,QAAQ,CAACN,mBAAmB,CAAC,iCAAD,EAAoC,OAApC,CAApB,CAAR;AACAM,MAAAA,QAAQ,CAACL,SAAS,EAAV,CAAR;AACAK,MAAAA,QAAQ,CAACJ,YAAY,CAAC,eAAD,CAAb,CAAR;AACA,aAAOiC,GAAP;AACD,KA9BI,CAAP;AA+BD,GApD4B;AAAA,CAAtB;AAsDP,OAAO,IAAMnB,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACU,IAAD,EAAU;AAC5C,SAAO;AACLa,IAAAA,IAAI,EAAE,4BADD;AAELC,IAAAA,OAAO,EAAEd;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMO,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACP,IAAD,EAAU;AAC5C,SAAO;AACLa,IAAAA,IAAI,EAAE,qCADD;AAELC,IAAAA,OAAO,EAAEd;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMR,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACuB,KAAD,EAAW;AAC7C,SAAO;AACLF,IAAAA,IAAI,EAAE,4BADD;AAELC,IAAAA,OAAO,EAAEC;AAFJ,GAAP;AAID,CALM","sourcesContent":["import get from 'lodash/get';\r\n\r\n// app\r\nimport * as utils from 'utils';\r\nimport { authLogout, addLoader, enqueueNotification, hideModal, removeLoader } from 'stores';\r\n\r\nexport const duplicateLine = (lineId, formData) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } } } = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/placement.actions.duplicateLine',\r\n    message: 'Data missing for POST request',\r\n  };\r\n\r\n  dispatch(duplicateLineRequest(formData));\r\n  dispatch(addLoader('duplicateLine'));\r\n\r\n  if (!formData || !get(formData.market, 'market.id') || !lineId) {\r\n    dispatch(duplicateLineFailure(defaultError));\r\n    dispatch(enqueueNotification('notification.duplicateLine.fail', 'error'));\r\n    dispatch(hideModal());\r\n    dispatch(removeLoader('duplicateLine'));\r\n    return;\r\n  }\r\n\r\n  const id = lineId;\r\n  return utils.api\r\n    .put({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.edge,\r\n      path: `api/placementlayerMarket/${id}/duplicate-line`,\r\n      data: {\r\n        marketId: get(formData.market, 'market.id'),\r\n      },\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleData(json))\r\n    .then((data) => {\r\n      dispatch(duplicateLineSuccess(data));\r\n      dispatch(enqueueNotification('notification.duplicateLine.success', 'success'));\r\n      dispatch(hideModal());\r\n      dispatch(removeLoader('duplicateLine'));\r\n      return data;\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        ...defaultError,\r\n        message: 'API post error (placement.duplicateLine)',\r\n      };\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(duplicateLineFailure(err));\r\n      dispatch(enqueueNotification('notification.duplicateLine.fail', 'error'));\r\n      dispatch(hideModal());\r\n      dispatch(removeLoader('duplicateLine'));\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const duplicateLineRequest = (data) => {\r\n  return {\r\n    type: 'DUPLICATE_LINE_PUT_REQUEST',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const duplicateLineSuccess = (data) => {\r\n  return {\r\n    type: 'PLACEMENT_LAYER_MARKET_POST_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const duplicateLineFailure = (error) => {\r\n  return {\r\n    type: 'DUPLICATE_LINE_PUT_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}