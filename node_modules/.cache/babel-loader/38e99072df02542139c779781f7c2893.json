{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { addLoader, authLogout, enqueueNotification, hideModal, removeLoader } from 'stores';\nimport * as utils from 'utils';\nimport get from 'lodash/get';\nimport has from 'lodash/has';\nexport var postFacilityRates = function postFacilityRates() {\n  var formData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var facilityId = arguments.length > 1 ? arguments[1] : undefined;\n  var ratesId = arguments.length > 2 ? arguments[2] : undefined;\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var _formData$countries = formData.countries,\n        countries = _formData$countries === void 0 ? [] : _formData$countries,\n        brokerageFee = formData.brokerageFee,\n        clientCommissionRate = formData.clientCommissionRate,\n        brokerCommissionRate = formData.brokerCommissionRate,\n        reinsuranceRate = formData.reinsuranceRate;\n    var defaultError = {\n      file: 'stores/risk.actions.postFacilityRates',\n      message: 'Data missing for POST request'\n    };\n    dispatch(postFacilityRatesRequest({\n      formData: formData,\n      facilityId: facilityId,\n      ratesId: ratesId\n    }));\n    dispatch(addLoader('postFacilityRates'));\n    var hasRatesData = has(formData, 'countries') && has(formData, 'brokerageFee') && has(formData, 'clientCommissionRate') && has(formData, 'brokerCommissionRate') && has(formData, 'reinsuranceRate');\n\n    if (!facilityId || !hasRatesData) {\n      dispatch(postFacilityRatesFailure(defaultError));\n      dispatch(enqueueNotification('notification.generic.request', 'error'));\n      dispatch(hideModal());\n      dispatch(removeLoader('postFacilityRates'));\n      return;\n    }\n\n    var body = _objectSpread(_objectSpread({}, ratesId && {\n      id: ratesId\n    }), {}, {\n      facilityId: facilityId,\n      brokerageFee: brokerageFee,\n      clientCommissionRate: clientCommissionRate,\n      brokerCommissionRate: brokerCommissionRate,\n      reinsuranceRate: reinsuranceRate,\n      countryRates: countries.map(function (country) {\n        return {\n          country: get(country, 'countryCode.value'),\n          value: get(country, 'rate'),\n          refer: get(country, 'refer')\n        };\n      }, {})\n    });\n\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.auth,\n      path: \"api/v1/rates?facilityId=\".concat(facilityId),\n      data: body\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleResponseJsonObject(json);\n    }).then(function (data) {\n      dispatch(postFacilityRatesSuccess(data));\n      dispatch(enqueueNotification('notification.postFacilityRates.success', 'success'));\n    })[\"catch\"](function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API post error (risk.postFacilityRates)'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(postFacilityRatesFailure(err));\n      dispatch(enqueueNotification(utils.api.getErrorMessage(err), 'error'));\n      return err;\n    })[\"finally\"](function () {\n      dispatch(hideModal());\n      dispatch(removeLoader('postFacilityRates'));\n      return;\n    });\n  };\n};\nexport var postFacilityRatesRequest = function postFacilityRatesRequest(formData) {\n  return {\n    type: 'RISK_FACILITY_RATES_POST_REQUEST',\n    payload: formData\n  };\n};\nexport var postFacilityRatesSuccess = function postFacilityRatesSuccess(responseData) {\n  return {\n    type: 'RISK_FACILITY_RATES_POST_SUCCESS',\n    payload: responseData\n  };\n};\nexport var postFacilityRatesFailure = function postFacilityRatesFailure(error) {\n  return {\n    type: 'RISK_FACILITY_RATES_POST_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/risk/risk.actions.postFacilityRates.js"],"names":["addLoader","authLogout","enqueueNotification","hideModal","removeLoader","utils","get","has","postFacilityRates","formData","facilityId","ratesId","dispatch","getState","auth","user","endpoint","config","vars","countries","brokerageFee","clientCommissionRate","brokerCommissionRate","reinsuranceRate","defaultError","file","message","postFacilityRatesRequest","hasRatesData","postFacilityRatesFailure","body","id","countryRates","map","country","value","refer","api","post","token","accessToken","path","data","then","response","handleResponse","json","handleResponseJsonObject","postFacilityRatesSuccess","err","errorParams","handleError","handleUnauthorized","getErrorMessage","type","payload","responseData","error"],"mappings":"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","sourcesContent":["import { addLoader, authLogout, enqueueNotification, hideModal, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\nimport get from 'lodash/get';\r\nimport has from 'lodash/has';\r\nexport const postFacilityRates =\r\n  (formData = {}, facilityId, ratesId) =>\r\n  (dispatch, getState) => {\r\n    // prettier-ignore\r\n    const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n    const { countries = [], brokerageFee, clientCommissionRate, brokerCommissionRate, reinsuranceRate } = formData;\r\n\r\n    const defaultError = {\r\n      file: 'stores/risk.actions.postFacilityRates',\r\n      message: 'Data missing for POST request',\r\n    };\r\n\r\n    dispatch(postFacilityRatesRequest({ formData, facilityId, ratesId }));\r\n    dispatch(addLoader('postFacilityRates'));\r\n\r\n    const hasRatesData =\r\n      has(formData, 'countries') &&\r\n      has(formData, 'brokerageFee') &&\r\n      has(formData, 'clientCommissionRate') &&\r\n      has(formData, 'brokerCommissionRate') &&\r\n      has(formData, 'reinsuranceRate');\r\n\r\n    if (!facilityId || !hasRatesData) {\r\n      dispatch(postFacilityRatesFailure(defaultError));\r\n      dispatch(enqueueNotification('notification.generic.request', 'error'));\r\n      dispatch(hideModal());\r\n      dispatch(removeLoader('postFacilityRates'));\r\n      return;\r\n    }\r\n\r\n    const body = {\r\n      ...(ratesId && { id: ratesId }),\r\n      facilityId,\r\n      brokerageFee,\r\n      clientCommissionRate,\r\n      brokerCommissionRate,\r\n      reinsuranceRate,\r\n      countryRates: countries.map((country) => {\r\n        return {\r\n          country: get(country, 'countryCode.value'),\r\n          value: get(country, 'rate'),\r\n          refer: get(country, 'refer'),\r\n        };\r\n      }, {}),\r\n    };\r\n\r\n    return utils.api\r\n      .post({\r\n        token: auth.accessToken,\r\n        endpoint: endpoint.auth,\r\n        path: `api/v1/rates?facilityId=${facilityId}`,\r\n        data: body,\r\n      })\r\n      .then((response) => utils.api.handleResponse(response))\r\n      .then((json) => utils.api.handleResponseJsonObject(json))\r\n      .then((data) => {\r\n        dispatch(postFacilityRatesSuccess(data));\r\n        dispatch(enqueueNotification('notification.postFacilityRates.success', 'success'));\r\n      })\r\n      .catch((err) => {\r\n        const errorParams = {\r\n          ...defaultError,\r\n          message: 'API post error (risk.postFacilityRates)',\r\n        };\r\n        utils.api.handleError(err, errorParams);\r\n        utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n        dispatch(postFacilityRatesFailure(err));\r\n        dispatch(enqueueNotification(utils.api.getErrorMessage(err), 'error'));\r\n        return err;\r\n      })\r\n      .finally(() => {\r\n        dispatch(hideModal());\r\n        dispatch(removeLoader('postFacilityRates'));\r\n        return;\r\n      });\r\n  };\r\n\r\nexport const postFacilityRatesRequest = (formData) => {\r\n  return {\r\n    type: 'RISK_FACILITY_RATES_POST_REQUEST',\r\n    payload: formData,\r\n  };\r\n};\r\n\r\nexport const postFacilityRatesSuccess = (responseData) => {\r\n  return {\r\n    type: 'RISK_FACILITY_RATES_POST_SUCCESS',\r\n    payload: responseData,\r\n  };\r\n};\r\n\r\nexport const postFacilityRatesFailure = (error) => {\r\n  return {\r\n    type: 'RISK_FACILITY_RATES_POST_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}