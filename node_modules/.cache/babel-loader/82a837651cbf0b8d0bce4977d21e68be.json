{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { authLogout, addLoader, removeLoader } from 'stores';\nimport * as utils from 'utils';\nimport get from 'lodash/get';\nexport var getPolicyInformation = function getPolicyInformation() {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/claims.actions.getPolicyInformation'\n    };\n    var state = getState();\n    var policyData = get(state, 'claims.policyData') || {};\n    var claimInformation = get(state, 'claims.claimsInformation') || {};\n    var policyId = (policyData === null || policyData === void 0 ? void 0 : policyData.xbPolicyID) || (claimInformation === null || claimInformation === void 0 ? void 0 : claimInformation.policyID) || '';\n    var instanceId = (policyData === null || policyData === void 0 ? void 0 : policyData.xbInstanceID) || (claimInformation === null || claimInformation === void 0 ? void 0 : claimInformation.sourceID) || '';\n    dispatch(getPolicyInformationRequest());\n    dispatch(addLoader('getPolicyInformation'));\n\n    if (!policyId || !instanceId) {\n      dispatch(getPolicyInformationFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Missing requests params'\n      })));\n      dispatch(removeLoader('getPolicyInformation'));\n      return;\n    }\n\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.claimService,\n      path: \"api/data/policy/\".concat(policyId, \"/source/\").concat(instanceId, \"/details\")\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (data) {\n      dispatch(getPolicyInformationSuccess(data.data));\n      return data.data;\n    }).catch(function (err) {\n      dispatch(getPolicyInformationFailure(err, defaultError));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      return err;\n    }).finally(function () {\n      dispatch(removeLoader('getPolicyInformation'));\n    });\n  };\n};\nexport var getPolicyInformationRequest = function getPolicyInformationRequest() {\n  return {\n    type: 'CLAIMS_POLICY_INFORMATION_GET_REQUEST'\n  };\n};\nexport var getPolicyInformationSuccess = function getPolicyInformationSuccess(data) {\n  return {\n    type: 'CLAIMS_POLICY_INFORMATION_GET_SUCCESS',\n    payload: data\n  };\n};\nexport var getPolicyInformationFailure = function getPolicyInformationFailure(error) {\n  return {\n    type: 'CLAIMS_POLICY_INFORMATION_GET_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.getPolicyInformation.js"],"names":["authLogout","addLoader","removeLoader","utils","get","getPolicyInformation","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","state","policyData","claimInformation","policyId","xbPolicyID","policyID","instanceId","xbInstanceID","sourceID","getPolicyInformationRequest","getPolicyInformationFailure","message","api","token","accessToken","claimService","path","then","response","handleResponse","data","getPolicyInformationSuccess","catch","err","handleUnauthorized","finally","type","payload","error"],"mappings":"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","sourcesContent":["import { authLogout, addLoader, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\nimport get from 'lodash/get';\r\n\r\nexport const getPolicyInformation = () => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.getPolicyInformation',\r\n  };\r\n\r\n  const state = getState();\r\n  const policyData = get(state, 'claims.policyData') || {};\r\n  const claimInformation = get(state, 'claims.claimsInformation') || {};\r\n  const policyId = policyData?.xbPolicyID || claimInformation?.policyID || '';\r\n  const instanceId = policyData?.xbInstanceID || claimInformation?.sourceID || '';\r\n\r\n  dispatch(getPolicyInformationRequest());\r\n  dispatch(addLoader('getPolicyInformation'));\r\n\r\n  if (!policyId || !instanceId) {\r\n    dispatch(getPolicyInformationFailure({ ...defaultError, message: 'Missing requests params' }));\r\n    dispatch(removeLoader('getPolicyInformation'));\r\n    return;\r\n  }\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.claimService,\r\n      path: `api/data/policy/${policyId}/source/${instanceId}/details`,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((data) => {\r\n      dispatch(getPolicyInformationSuccess(data.data));\r\n      return data.data;\r\n    })\r\n    .catch((err) => {\r\n      dispatch(getPolicyInformationFailure(err, defaultError));\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('getPolicyInformation'));\r\n    });\r\n};\r\n\r\nexport const getPolicyInformationRequest = () => {\r\n  return {\r\n    type: 'CLAIMS_POLICY_INFORMATION_GET_REQUEST',\r\n  };\r\n};\r\n\r\nexport const getPolicyInformationSuccess = (data) => {\r\n  return {\r\n    type: 'CLAIMS_POLICY_INFORMATION_GET_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const getPolicyInformationFailure = (error) => {\r\n  return {\r\n    type: 'CLAIMS_POLICY_INFORMATION_GET_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}