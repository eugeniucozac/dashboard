{"ast":null,"code":"var _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\forms\\\\CheckListAlerts\\\\CheckListAlerts.view.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types'; // app\n\nimport styles from './CheckListAlerts.styles';\nimport { Button, FormContainer, FormActions } from 'components';\nimport * as utils from 'utils';\nimport { TASK_CHECKLIST_WARNINGS } from 'consts'; // mui\n\nimport { makeStyles, Box, Typography } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nCheckListAlertsView.propTypes = {\n  type: PropTypes.oneOf(TASK_CHECKLIST_WARNINGS.all),\n  actions: PropTypes.shape({\n    submit: PropTypes.object.isRequired,\n    cancel: PropTypes.object.isRequired\n  }).isRequired\n};\nexport function CheckListAlertsView(_ref) {\n  var type = _ref.type,\n      actions = _ref.actions;\n  var classes = makeStyles(styles, {\n    name: 'CheckListAlerts'\n  })();\n  var cancel = actions.cancel,\n      submit = actions.submit;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(FormContainer, {\n      type: \"dialog\",\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        p: 5,\n        children: [type === TASK_CHECKLIST_WARNINGS.type.mandatory && /*#__PURE__*/_jsxDEV(Typography, {\n          children: utils.string.t('claims.processing.taskDetailsCheckList.mandatoryTaskWarning')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }, this), type === TASK_CHECKLIST_WARNINGS.type.nextTask && /*#__PURE__*/_jsxDEV(Typography, {\n          children: utils.string.t('claims.processing.taskDetailsCheckList.nextTaskNavWarning')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }, this), type === TASK_CHECKLIST_WARNINGS.type.completeTask && /*#__PURE__*/_jsxDEV(Typography, {\n          children: utils.string.t('claims.processing.taskDetailsCheckList.taskCompleteWarning')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormActions, {\n        type: \"dialog\",\n        children: [cancel && /*#__PURE__*/_jsxDEV(Button, {\n          text: cancel.label,\n          variant: \"text\",\n          onClick: cancel.handler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 22\n        }, this), submit && /*#__PURE__*/_jsxDEV(Button, {\n          text: submit.label,\n          color: \"primary\",\n          onClick: submit.handler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n_c = CheckListAlertsView;\nCheckListAlertsView.displayName = \"CheckListAlertsView\";\nCheckListAlertsView.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"CheckListAlertsView\",\n  \"props\": {\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"computed\": true,\n        \"value\": \"TASK_CHECKLIST_WARNINGS.all\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"actions\": {\n      \"type\": {\n        \"name\": \"shape\",\n        \"value\": {\n          \"submit\": {\n            \"name\": \"object\",\n            \"required\": true\n          },\n          \"cancel\": {\n            \"name\": \"object\",\n            \"required\": true\n          }\n        }\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\forms\\\\CheckListAlerts\\\\CheckListAlerts.view.js\"] = {\n    name: \"CheckListAlertsView\",\n    docgenInfo: CheckListAlertsView.__docgenInfo,\n    path: \"src\\\\forms\\\\CheckListAlerts\\\\CheckListAlerts.view.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckListAlertsView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/forms/CheckListAlerts/CheckListAlerts.view.js"],"names":["React","PropTypes","styles","Button","FormContainer","FormActions","utils","TASK_CHECKLIST_WARNINGS","makeStyles","Box","Typography","CheckListAlertsView","propTypes","type","oneOf","all","actions","shape","submit","object","isRequired","cancel","classes","name","root","mandatory","string","t","nextTask","completeTask","label","handler"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,MAAT,EAAiBC,aAAjB,EAAgCC,WAAhC,QAAmD,YAAnD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,uBAAT,QAAwC,QAAxC,C,CAEA;;AACA,SAASC,UAAT,EAAqBC,GAArB,EAA0BC,UAA1B,QAA4C,mBAA5C;;AAEAC,mBAAmB,CAACC,SAApB,GAAgC;AAC9BC,EAAAA,IAAI,EAAEZ,SAAS,CAACa,KAAV,CAAgBP,uBAAuB,CAACQ,GAAxC,CADwB;AAE9BC,EAAAA,OAAO,EAAEf,SAAS,CAACgB,KAAV,CAAgB;AACvBC,IAAAA,MAAM,EAAEjB,SAAS,CAACkB,MAAV,CAAiBC,UADF;AAEvBC,IAAAA,MAAM,EAAEpB,SAAS,CAACkB,MAAV,CAAiBC;AAFF,GAAhB,EAGNA;AAL2B,CAAhC;AAOA,OAAO,SAAST,mBAAT,OAAgD;AAAA,MAAjBE,IAAiB,QAAjBA,IAAiB;AAAA,MAAXG,OAAW,QAAXA,OAAW;AACrD,MAAMM,OAAO,GAAGd,UAAU,CAACN,MAAD,EAAS;AAAEqB,IAAAA,IAAI,EAAE;AAAR,GAAT,CAAV,EAAhB;AADqD,MAE7CF,MAF6C,GAE1BL,OAF0B,CAE7CK,MAF6C;AAAA,MAErCH,MAFqC,GAE1BF,OAF0B,CAErCE,MAFqC;AAIrD,sBACE;AAAK,IAAA,SAAS,EAAEI,OAAO,CAACE,IAAxB;AAAA,2BACE,QAAC,aAAD;AAAe,MAAA,IAAI,EAAC,QAApB;AAAA,8BACE,QAAC,GAAD;AAAK,QAAA,CAAC,EAAE,CAAR;AAAA,mBACGX,IAAI,KAAKN,uBAAuB,CAACM,IAAxB,CAA6BY,SAAtC,iBACC,QAAC,UAAD;AAAA,oBAAanB,KAAK,CAACoB,MAAN,CAAaC,CAAb,CAAe,6DAAf;AAAb;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAIGd,IAAI,KAAKN,uBAAuB,CAACM,IAAxB,CAA6Be,QAAtC,iBACC,QAAC,UAAD;AAAA,oBAAatB,KAAK,CAACoB,MAAN,CAAaC,CAAb,CAAe,2DAAf;AAAb;AAAA;AAAA;AAAA;AAAA,gBALJ,EAOGd,IAAI,KAAKN,uBAAuB,CAACM,IAAxB,CAA6BgB,YAAtC,iBACC,QAAC,UAAD;AAAA,oBAAavB,KAAK,CAACoB,MAAN,CAAaC,CAAb,CAAe,4DAAf;AAAb;AAAA;AAAA;AAAA;AAAA,gBARJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAYE,QAAC,WAAD;AAAa,QAAA,IAAI,EAAC,QAAlB;AAAA,mBACGN,MAAM,iBAAI,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAEA,MAAM,CAACS,KAArB;AAA4B,UAAA,OAAO,EAAC,MAApC;AAA2C,UAAA,OAAO,EAAET,MAAM,CAACU;AAA3D;AAAA;AAAA;AAAA;AAAA,gBADb,EAEGb,MAAM,iBAAI,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAEA,MAAM,CAACY,KAArB;AAA4B,UAAA,KAAK,EAAC,SAAlC;AAA4C,UAAA,OAAO,EAAEZ,MAAM,CAACa;AAA5D;AAAA;AAAA;AAAA;AAAA,gBAFb;AAAA;AAAA;AAAA;AAAA;AAAA,cAZF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD;KAzBepB,mB;AAAAA,mB","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// app\r\nimport styles from './CheckListAlerts.styles';\r\nimport { Button, FormContainer, FormActions } from 'components';\r\nimport * as utils from 'utils';\r\nimport { TASK_CHECKLIST_WARNINGS } from 'consts';\r\n\r\n// mui\r\nimport { makeStyles, Box, Typography } from '@material-ui/core';\r\n\r\nCheckListAlertsView.propTypes = {\r\n  type: PropTypes.oneOf(TASK_CHECKLIST_WARNINGS.all),\r\n  actions: PropTypes.shape({\r\n    submit: PropTypes.object.isRequired,\r\n    cancel: PropTypes.object.isRequired,\r\n  }).isRequired,\r\n};\r\nexport function CheckListAlertsView({ type, actions }) {\r\n  const classes = makeStyles(styles, { name: 'CheckListAlerts' })();\r\n  const { cancel, submit } = actions;\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <FormContainer type=\"dialog\">\r\n        <Box p={5}>\r\n          {type === TASK_CHECKLIST_WARNINGS.type.mandatory && (\r\n            <Typography>{utils.string.t('claims.processing.taskDetailsCheckList.mandatoryTaskWarning')}</Typography>\r\n          )}\r\n          {type === TASK_CHECKLIST_WARNINGS.type.nextTask && (\r\n            <Typography>{utils.string.t('claims.processing.taskDetailsCheckList.nextTaskNavWarning')}</Typography>\r\n          )}\r\n          {type === TASK_CHECKLIST_WARNINGS.type.completeTask && (\r\n            <Typography>{utils.string.t('claims.processing.taskDetailsCheckList.taskCompleteWarning')}</Typography>\r\n          )}\r\n        </Box>\r\n        <FormActions type=\"dialog\">\r\n          {cancel && <Button text={cancel.label} variant=\"text\" onClick={cancel.handler} />}\r\n          {submit && <Button text={submit.label} color=\"primary\" onClick={submit.handler} />}\r\n        </FormActions>\r\n      </FormContainer>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}