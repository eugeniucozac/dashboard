{"ast":null,"code":"var _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\forms\\\\AddEditClaimRefNotes\\\\AddEditClaimRefNotes.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport * as Yup from 'yup'; //app\n\nimport { AddEditClaimRefNotesView } from './AddEditClaimRefNotes.view';\nimport { hideModal, showModal, postSaveClaimNotes } from 'stores';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nAddEditClaimRefNotes.propTypes = {\n  claim: PropTypes.object\n};\nexport default function AddEditClaimRefNotes(_ref) {\n  _s();\n\n  var claim = _ref.claim;\n  var dispatch = useDispatch();\n  var fields = [{\n    name: 'caseIncidentID',\n    type: 'hidden',\n    value: claim === null || claim === void 0 ? void 0 : claim.caseIncidentID\n  }, {\n    name: 'notesDescription',\n    type: 'textarea',\n    value: '',\n    validation: Yup.string().max(1000, utils.string.t('validation.string.max')).required(utils.string.t('validation.required')),\n    muiComponentProps: {\n      multiline: true,\n      rows: 3,\n      rowsMax: 6\n    }\n  }];\n  var actions = [{\n    name: 'cancel',\n    label: utils.string.t('app.cancel'),\n    handler: function handler() {\n      dispatch(showModal({\n        component: 'CONFIRM',\n        props: {\n          title: utils.string.t('status.alert'),\n          hint: utils.string.t('claims.notes.notifications.alertPopup'),\n          fullWidth: true,\n          maxWidth: 'xs',\n          componentProps: {\n            cancelLabel: utils.string.t('app.no'),\n            confirmLabel: utils.string.t('app.yes'),\n            submitHandler: function submitHandler() {\n              dispatch(hideModal());\n            },\n            cancelHandler: function cancelHandler() {}\n          }\n        }\n      }));\n    }\n  }, {\n    name: 'submit',\n    label: utils.string.t('app.save'),\n    handler: function handler(values) {\n      return dispatch(postSaveClaimNotes(values));\n    }\n  }];\n  return /*#__PURE__*/_jsxDEV(AddEditClaimRefNotesView, {\n    actions: actions,\n    fields: fields,\n    claim: claim\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 10\n  }, this);\n}\n\n_s(AddEditClaimRefNotes, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n\n_c = AddEditClaimRefNotes;\nAddEditClaimRefNotes.displayName = \"AddEditClaimRefNotes\";\nAddEditClaimRefNotes.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"AddEditClaimRefNotes\",\n  \"props\": {\n    \"claim\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\forms\\\\AddEditClaimRefNotes\\\\AddEditClaimRefNotes.js\"] = {\n    name: \"AddEditClaimRefNotes\",\n    docgenInfo: AddEditClaimRefNotes.__docgenInfo,\n    path: \"src\\\\forms\\\\AddEditClaimRefNotes\\\\AddEditClaimRefNotes.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"AddEditClaimRefNotes\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/forms/AddEditClaimRefNotes/AddEditClaimRefNotes.js"],"names":["React","PropTypes","useDispatch","Yup","AddEditClaimRefNotesView","hideModal","showModal","postSaveClaimNotes","utils","AddEditClaimRefNotes","propTypes","claim","object","dispatch","fields","name","type","value","caseIncidentID","validation","string","max","t","required","muiComponentProps","multiline","rows","rowsMax","actions","label","handler","component","props","title","hint","fullWidth","maxWidth","componentProps","cancelLabel","confirmLabel","submitHandler","cancelHandler","values"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch } from 'react-redux';\r\nimport * as Yup from 'yup';\r\n\r\n//app\r\nimport { AddEditClaimRefNotesView } from './AddEditClaimRefNotes.view';\r\nimport { hideModal, showModal, postSaveClaimNotes } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nAddEditClaimRefNotes.propTypes = {\r\n  claim: PropTypes.object,\r\n};\r\nexport default function AddEditClaimRefNotes({ claim }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const fields = [\r\n    {\r\n      name: 'caseIncidentID',\r\n      type: 'hidden',\r\n      value: claim?.caseIncidentID,\r\n    },\r\n    {\r\n      name: 'notesDescription',\r\n      type: 'textarea',\r\n      value: '',\r\n      validation: Yup.string().max(1000, utils.string.t('validation.string.max')).required(utils.string.t('validation.required')),\r\n      muiComponentProps: {\r\n        multiline: true,\r\n        rows: 3,\r\n        rowsMax: 6,\r\n      },\r\n    },\r\n  ];\r\n\r\n  const actions = [\r\n    {\r\n      name: 'cancel',\r\n      label: utils.string.t('app.cancel'),\r\n      handler: () => {\r\n        dispatch(\r\n          showModal({\r\n            component: 'CONFIRM',\r\n            props: {\r\n              title: utils.string.t('status.alert'),\r\n              hint: utils.string.t('claims.notes.notifications.alertPopup'),\r\n              fullWidth: true,\r\n              maxWidth: 'xs',\r\n              componentProps: {\r\n                cancelLabel: utils.string.t('app.no'),\r\n                confirmLabel: utils.string.t('app.yes'),\r\n                submitHandler: () => {\r\n                  dispatch(hideModal());\r\n                },\r\n                cancelHandler: () => {},\r\n              },\r\n            },\r\n          })\r\n        );\r\n      },\r\n    },\r\n    {\r\n      name: 'submit',\r\n      label: utils.string.t('app.save'),\r\n      handler: (values) => dispatch(postSaveClaimNotes(values)),\r\n    },\r\n  ];\r\n\r\n  return <AddEditClaimRefNotesView actions={actions} fields={fields} claim={claim} />;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}