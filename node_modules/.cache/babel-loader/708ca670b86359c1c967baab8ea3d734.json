{"ast":null,"code":"import _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\PlacementMap\\\\PlacementMap.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport get from 'lodash/get'; // app\n\nimport styles from './PlacementMap.styles';\nimport { mapLayers } from 'utils/map/mapLayers';\nimport { MapBox, MapBoxButton, Restricted, Translate } from 'components';\nimport { showModal, resetLocations, deletePlacementLocations, getLocationGroupsForPlacement, retryGeocoding } from 'stores';\nimport * as constants from 'consts';\nimport * as utils from 'utils'; // mui\n\nimport { withStyles, CircularProgress, Link, Typography } from '@material-ui/core';\nimport LocationOffIcon from '@material-ui/icons/LocationOff';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    configVars: get(state, 'config.vars'),\n    userAccessToken: get(state, 'user.auth.accessToken'),\n    locationUploading: get(state, 'location.uploading'),\n    locationGeocoding: get(state, 'location.geocoding'),\n    placementSelectedId: get(state, 'placement.selected.id')\n  };\n}; // dispatch\n\n\nvar mapDispatchToProps = {\n  showModal: showModal,\n  resetLocations: resetLocations,\n  deletePlacementLocations: deletePlacementLocations,\n  getLocationGroupsForPlacement: getLocationGroupsForPlacement,\n  retryGeocoding: retryGeocoding\n};\nexport var PlacementMap = /*#__PURE__*/function (_Component) {\n  _inherits(PlacementMap, _Component);\n\n  var _super = _createSuper(PlacementMap);\n\n  function PlacementMap(props) {\n    var _this;\n\n    _classCallCheck(this, PlacementMap);\n\n    _this = _super.call(this, props);\n\n    _this.onLoadMap = function (mapInstance) {\n      _this.setState({\n        map: mapInstance\n      }, function () {\n        _this.addSources();\n      });\n    };\n\n    _this.onChangeMap = function () {\n      _this.addSources();\n    };\n\n    _this.addSources = function () {\n      var _this$props = _this.props,\n          configVars = _this$props.configVars,\n          placementSelectedId = _this$props.placementSelectedId;\n\n      var clusterLayers = _this.getClustersLayers(); // remove sources before trying to add new ones\n      // mapbox breaks if sources/layers already exist\n\n\n      _this.removeSources();\n\n      _this.state.map.addSource('location-geojson', {\n        type: 'geojson',\n        data: configVars.endpoint.location + '/api/locations/' + placementSelectedId + '/geo',\n        cluster: true,\n        //clusterMaxZoom: 20, // Max zoom to cluster points on\n        clusterRadius: 60,\n        // Radius of each cluster when clustering points (defaults to 50)\n        clusterProperties: {\n          mtiv: ['+', ['get', 'mtiv']],\n          '4tiv': ['+', ['get', '4tiv']],\n          tiv: ['+', ['get', 'tiv']]\n        }\n      });\n\n      clusterLayers.forEach(function (layer, i) {\n        var clusterName = 'cluster-' + i;\n\n        _this.state.map.addLayer({\n          id: clusterName,\n          type: 'circle',\n          source: 'location-geojson',\n          paint: {\n            'circle-color': layer[1],\n            'circle-radius': layer[2],\n            'circle-stroke-width': 1,\n            'circle-stroke-color': '#fff'\n          },\n          filter: i === 0 ? ['all', ['>=', ['get', 'mtiv'], layer[0]]] : ['all', ['>=', ['get', 'mtiv'], layer[0]], ['<', ['get', 'mtiv'], clusterLayers[i - 1][0]]]\n        });\n      });\n\n      _this.state.map.addLayer({\n        id: 'cluster-label',\n        type: 'symbol',\n        source: 'location-geojson',\n        filter: ['all', ['has', 'point_count']],\n        layout: {\n          'text-field': ['format', ['get', 'point_count'], {}, '\\n', {}, '~$', {}, ['to-string', ['/', ['get', '4tiv'], 100]], {}, 'm', {}],\n          'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n          'text-offset': [0, -0.25],\n          'text-size': 8\n        },\n        paint: {\n          'text-color': '#fff'\n        }\n      });\n\n      _this.state.map.addLayer({\n        id: 'non-cluster-label',\n        type: 'symbol',\n        source: 'location-geojson',\n        filter: ['all', ['!has', 'point_count']],\n        layout: {\n          'text-field': ['format', '~$', {}, ['to-string', ['/', ['get', '4tiv'], 100]], {}, 'm', {}],\n          'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n          'text-size': 8\n        },\n        paint: {\n          'text-color': '#fff'\n        }\n      });\n    };\n\n    _this.removeSources = function () {\n      var layers = ['cluster-label', 'non-cluster-label'].concat(_toConsumableArray(_this.getClustersLayers().map(function (l, i) {\n        return 'cluster-' + i;\n      })));\n      var sources = ['location-geojson'];\n\n      _this.cleanup(layers, sources);\n    };\n\n    _this.cleanup = function (layers, sources) {\n      var map = _this.state.map; // mapbox is specific about the order: remove layers first, then sources\n\n      layers.forEach(function (layer, i) {\n        if (map.getLayer(layer)) {\n          map.removeLayer(layer);\n        }\n      });\n      sources.forEach(function (source, i) {\n        if (map.getSource(source)) {\n          map.removeSource(source);\n        }\n      });\n    };\n\n    _this.getClustersLayers = function () {\n      var tivSizes = [0, 0.1, 1, 10, 100, 1000, 10000];\n      var tivRadius = [16, 18, 20, 22, 26, 30, 34];\n      var tivColors = utils.color.scale(tivSizes.length * 2);\n      return tivSizes.map(function (s, i) {\n        return [tivSizes[i], tivColors[i * 2], tivRadius[i]];\n      }).reverse();\n    };\n\n    _this.getLocationsGeocoded = function (locations) {\n      if (!utils.generic.isValidArray(locations, true)) return [];\n      return locations.filter(function (location) {\n        var found = get(location, 'geocodeResult.locationsFound');\n        return location && found && found > 0;\n      });\n    };\n\n    _this.handleClickRemoveLocations = function (event) {\n      _this.props.showModal({\n        component: 'CONFIRM',\n        props: {\n          title: 'map.locations.remove',\n          subtitle: 'map.locations.removeHint',\n          fullWidth: true,\n          maxWidth: 'xs',\n          componentProps: {\n            submitHandler: function submitHandler() {\n              _this.props.deletePlacementLocations();\n\n              _this.removeSources();\n            }\n          }\n        }\n      });\n    };\n\n    _this.handleClickGeocodingTryAgain = function (id) {\n      return function (event) {\n        _this.props.retryGeocoding();\n\n        _this.props.getLocationGroupsForPlacement(id);\n      };\n    };\n\n    _this.state = {\n      map: null\n    };\n    return _this;\n  }\n\n  _createClass(PlacementMap, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          center = _this$props2.center,\n          zoom = _this$props2.zoom,\n          userAccessToken = _this$props2.userAccessToken,\n          locationUploading = _this$props2.locationUploading,\n          locationGeocoding = _this$props2.locationGeocoding,\n          placementSelectedId = _this$props2.placementSelectedId,\n          classes = _this$props2.classes;\n      var locations = this.getLocationsGeocoded(this.props.locations);\n      var locationsFiltered = this.getLocationsGeocoded(this.props.locationsFiltered);\n\n      var mapBtnDelete = /*#__PURE__*/_jsxDEV(Restricted, {\n        include: [constants.ROLE_BROKER],\n        children: locations.length > 0 && /*#__PURE__*/_jsxDEV(MapBoxButton, {\n          icon: LocationOffIcon,\n          size: \"small\",\n          disabled: locationUploading,\n          tooltip: {\n            title: utils.string.t('map.locations.remove')\n          },\n          onClick: this.handleClickRemoveLocations,\n          \"data-testid\": \"map-locations-remove-button\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 7\n      }, this);\n\n      var mapHeader = /*#__PURE__*/_jsxDEV(Restricted, {\n        include: [constants.ROLE_BROKER],\n        children: [locationGeocoding.status && locations.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.geocoding,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            className: classes.geocodingText,\n            children: [/*#__PURE__*/_jsxDEV(Translate, {\n              label: \"app.geocoding\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 15\n            }, this), ': ' + locationGeocoding.completed + ' / ' + locationGeocoding.total]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: '1em'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this), locationGeocoding.result === 'failed' && locations.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.geocoding,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            className: classes.geocodingText,\n            children: [/*#__PURE__*/_jsxDEV(Translate, {\n              label: \"placement.overview.map.geocodingFailed\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \" - \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Link, {\n              onClick: this.handleClickGeocodingTryAgain(placementSelectedId),\n              className: classes.geocodingLink,\n              children: /*#__PURE__*/_jsxDEV(Translate, {\n                label: \"app.tryAgain\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 7\n      }, this);\n\n      return /*#__PURE__*/_jsxDEV(MapBox, {\n        id: \"placement-overview\",\n        height: 450,\n        allowScrollZoom: false,\n        placementOverflow: true,\n        showMarkers: false,\n        fitBounds: true,\n        center: center,\n        zoom: zoom,\n        layers: mapLayers,\n        locations: locations.map(function (l) {\n          return l.geocodeResult;\n        }),\n        locationsFiltered: locationsFiltered.map(function (l) {\n          return l.geocodeResult;\n        }),\n        buttons: [mapBtnDelete],\n        header: mapHeader,\n        instanceObject: {\n          transformRequest: function transformRequest(url, resourceType) {\n            if (resourceType === 'Source' && url.includes('api/locations')) {\n              return {\n                url: url,\n                headers: {\n                  Authorization: 'Bearer ' + userAccessToken\n                }\n              };\n            }\n          }\n        },\n        onLoad: this.onLoadMap,\n        onChange: this.onChangeMap\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return PlacementMap;\n}(Component);\nPlacementMap.propTypes = {\n  locations: PropTypes.array.isRequired,\n  locationsFiltered: PropTypes.array.isRequired,\n  center: PropTypes.array,\n  zoom: PropTypes.number\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(compose(withStyles(styles))(PlacementMap));","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/PlacementMap/PlacementMap.js"],"names":["React","Component","PropTypes","connect","compose","get","styles","mapLayers","MapBox","MapBoxButton","Restricted","Translate","showModal","resetLocations","deletePlacementLocations","getLocationGroupsForPlacement","retryGeocoding","constants","utils","withStyles","CircularProgress","Link","Typography","LocationOffIcon","mapStateToProps","state","configVars","userAccessToken","locationUploading","locationGeocoding","placementSelectedId","mapDispatchToProps","PlacementMap","props","onLoadMap","mapInstance","setState","map","addSources","onChangeMap","clusterLayers","getClustersLayers","removeSources","addSource","type","data","endpoint","location","cluster","clusterRadius","clusterProperties","mtiv","tiv","forEach","layer","i","clusterName","addLayer","id","source","paint","filter","layout","layers","l","sources","cleanup","getLayer","removeLayer","getSource","removeSource","tivSizes","tivRadius","tivColors","color","scale","length","s","reverse","getLocationsGeocoded","locations","generic","isValidArray","found","handleClickRemoveLocations","event","component","title","subtitle","fullWidth","maxWidth","componentProps","submitHandler","handleClickGeocodingTryAgain","center","zoom","classes","locationsFiltered","mapBtnDelete","ROLE_BROKER","string","t","mapHeader","status","geocoding","geocodingText","completed","total","result","geocodingLink","geocodeResult","transformRequest","url","resourceType","includes","headers","Authorization","propTypes","array","isRequired","number"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,OAAOC,GAAP,MAAgB,YAAhB,C,CAEA;;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,MAAT,EAAiBC,YAAjB,EAA+BC,UAA/B,EAA2CC,SAA3C,QAA4D,YAA5D;AACA,SAASC,SAAT,EAAoBC,cAApB,EAAoCC,wBAApC,EAA8DC,6BAA9D,EAA6FC,cAA7F,QAAmH,QAAnH;AACA,OAAO,KAAKC,SAAZ,MAA2B,QAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB,C,CAEA;;AACA,SAASC,UAAT,EAAqBC,gBAArB,EAAuCC,IAAvC,EAA6CC,UAA7C,QAA+D,mBAA/D;AACA,OAAOC,eAAP,MAA4B,gCAA5B;;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SAAY;AAClCC,IAAAA,UAAU,EAAErB,GAAG,CAACoB,KAAD,EAAQ,aAAR,CADmB;AAElCE,IAAAA,eAAe,EAAEtB,GAAG,CAACoB,KAAD,EAAQ,uBAAR,CAFc;AAGlCG,IAAAA,iBAAiB,EAAEvB,GAAG,CAACoB,KAAD,EAAQ,oBAAR,CAHY;AAIlCI,IAAAA,iBAAiB,EAAExB,GAAG,CAACoB,KAAD,EAAQ,oBAAR,CAJY;AAKlCK,IAAAA,mBAAmB,EAAEzB,GAAG,CAACoB,KAAD,EAAQ,uBAAR;AALU,GAAZ;AAAA,CAAxB,C,CAQA;;;AACA,IAAMM,kBAAkB,GAAG;AACzBnB,EAAAA,SAAS,EAATA,SADyB;AAEzBC,EAAAA,cAAc,EAAdA,cAFyB;AAGzBC,EAAAA,wBAAwB,EAAxBA,wBAHyB;AAIzBC,EAAAA,6BAA6B,EAA7BA,6BAJyB;AAKzBC,EAAAA,cAAc,EAAdA;AALyB,CAA3B;AAQA,WAAagB,YAAb;AAAA;;AAAA;;AAQE,wBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AADiB,UAQnBC,SARmB,GAQP,UAACC,WAAD,EAAiB;AAC3B,YAAKC,QAAL,CAAc;AAAEC,QAAAA,GAAG,EAAEF;AAAP,OAAd,EAAoC,YAAM;AACxC,cAAKG,UAAL;AACD,OAFD;AAGD,KAZkB;;AAAA,UAcnBC,WAdmB,GAcL,YAAM;AAClB,YAAKD,UAAL;AACD,KAhBkB;;AAAA,UAkBnBA,UAlBmB,GAkBN,YAAM;AAAA,wBAC2B,MAAKL,KADhC;AAAA,UACTP,UADS,eACTA,UADS;AAAA,UACGI,mBADH,eACGA,mBADH;;AAGjB,UAAMU,aAAa,GAAG,MAAKC,iBAAL,EAAtB,CAHiB,CAKjB;AACA;;;AACA,YAAKC,aAAL;;AAEA,YAAKjB,KAAL,CAAWY,GAAX,CAAeM,SAAf,CAAyB,kBAAzB,EAA6C;AAC3CC,QAAAA,IAAI,EAAE,SADqC;AAE3CC,QAAAA,IAAI,EAAEnB,UAAU,CAACoB,QAAX,CAAoBC,QAApB,GAA+B,iBAA/B,GAAmDjB,mBAAnD,GAAyE,MAFpC;AAG3CkB,QAAAA,OAAO,EAAE,IAHkC;AAI3C;AACAC,QAAAA,aAAa,EAAE,EAL4B;AAKxB;AACnBC,QAAAA,iBAAiB,EAAE;AACjBC,UAAAA,IAAI,EAAE,CAAC,GAAD,EAAM,CAAC,KAAD,EAAQ,MAAR,CAAN,CADW;AAEjB,kBAAQ,CAAC,GAAD,EAAM,CAAC,KAAD,EAAQ,MAAR,CAAN,CAFS;AAGjBC,UAAAA,GAAG,EAAE,CAAC,GAAD,EAAM,CAAC,KAAD,EAAQ,KAAR,CAAN;AAHY;AANwB,OAA7C;;AAaAZ,MAAAA,aAAa,CAACa,OAAd,CAAsB,UAACC,KAAD,EAAQC,CAAR,EAAc;AAClC,YAAMC,WAAW,GAAG,aAAaD,CAAjC;;AACA,cAAK9B,KAAL,CAAWY,GAAX,CAAeoB,QAAf,CAAwB;AACtBC,UAAAA,EAAE,EAAEF,WADkB;AAEtBZ,UAAAA,IAAI,EAAE,QAFgB;AAGtBe,UAAAA,MAAM,EAAE,kBAHc;AAItBC,UAAAA,KAAK,EAAE;AACL,4BAAgBN,KAAK,CAAC,CAAD,CADhB;AAEL,6BAAiBA,KAAK,CAAC,CAAD,CAFjB;AAGL,mCAAuB,CAHlB;AAIL,mCAAuB;AAJlB,WAJe;AAUtBO,UAAAA,MAAM,EACJN,CAAC,KAAK,CAAN,GACI,CAAC,KAAD,EAAQ,CAAC,IAAD,EAAO,CAAC,KAAD,EAAQ,MAAR,CAAP,EAAwBD,KAAK,CAAC,CAAD,CAA7B,CAAR,CADJ,GAEI,CAAC,KAAD,EAAQ,CAAC,IAAD,EAAO,CAAC,KAAD,EAAQ,MAAR,CAAP,EAAwBA,KAAK,CAAC,CAAD,CAA7B,CAAR,EAA2C,CAAC,GAAD,EAAM,CAAC,KAAD,EAAQ,MAAR,CAAN,EAAuBd,aAAa,CAACe,CAAC,GAAG,CAAL,CAAb,CAAqB,CAArB,CAAvB,CAA3C;AAbgB,SAAxB;AAeD,OAjBD;;AAmBA,YAAK9B,KAAL,CAAWY,GAAX,CAAeoB,QAAf,CAAwB;AACtBC,QAAAA,EAAE,EAAE,eADkB;AAEtBd,QAAAA,IAAI,EAAE,QAFgB;AAGtBe,QAAAA,MAAM,EAAE,kBAHc;AAItBE,QAAAA,MAAM,EAAE,CAAC,KAAD,EAAQ,CAAC,KAAD,EAAQ,aAAR,CAAR,CAJc;AAKtBC,QAAAA,MAAM,EAAE;AACN,wBAAc,CAAC,QAAD,EAAW,CAAC,KAAD,EAAQ,aAAR,CAAX,EAAmC,EAAnC,EAAuC,IAAvC,EAA6C,EAA7C,EAAiD,IAAjD,EAAuD,EAAvD,EAA2D,CAAC,WAAD,EAAc,CAAC,GAAD,EAAM,CAAC,KAAD,EAAQ,MAAR,CAAN,EAAuB,GAAvB,CAAd,CAA3D,EAAuG,EAAvG,EAA2G,GAA3G,EAAgH,EAAhH,CADR;AAEN,uBAAa,CAAC,qBAAD,EAAwB,uBAAxB,CAFP;AAGN,yBAAe,CAAC,CAAD,EAAI,CAAC,IAAL,CAHT;AAIN,uBAAa;AAJP,SALc;AAWtBF,QAAAA,KAAK,EAAE;AACL,wBAAc;AADT;AAXe,OAAxB;;AAgBA,YAAKnC,KAAL,CAAWY,GAAX,CAAeoB,QAAf,CAAwB;AACtBC,QAAAA,EAAE,EAAE,mBADkB;AAEtBd,QAAAA,IAAI,EAAE,QAFgB;AAGtBe,QAAAA,MAAM,EAAE,kBAHc;AAItBE,QAAAA,MAAM,EAAE,CAAC,KAAD,EAAQ,CAAC,MAAD,EAAS,aAAT,CAAR,CAJc;AAKtBC,QAAAA,MAAM,EAAE;AACN,wBAAc,CAAC,QAAD,EAAW,IAAX,EAAiB,EAAjB,EAAqB,CAAC,WAAD,EAAc,CAAC,GAAD,EAAM,CAAC,KAAD,EAAQ,MAAR,CAAN,EAAuB,GAAvB,CAAd,CAArB,EAAiE,EAAjE,EAAqE,GAArE,EAA0E,EAA1E,CADR;AAEN,uBAAa,CAAC,qBAAD,EAAwB,uBAAxB,CAFP;AAGN,uBAAa;AAHP,SALc;AAUtBF,QAAAA,KAAK,EAAE;AACL,wBAAc;AADT;AAVe,OAAxB;AAcD,KAzFkB;;AAAA,UA2FnBlB,aA3FmB,GA2FH,YAAM;AACpB,UAAMqB,MAAM,IAAI,eAAJ,EAAqB,mBAArB,4BAA6C,MAAKtB,iBAAL,GAAyBJ,GAAzB,CAA6B,UAAC2B,CAAD,EAAIT,CAAJ;AAAA,eAAU,aAAaA,CAAvB;AAAA,OAA7B,CAA7C,EAAZ;AACA,UAAMU,OAAO,GAAG,CAAC,kBAAD,CAAhB;;AAEA,YAAKC,OAAL,CAAaH,MAAb,EAAqBE,OAArB;AACD,KAhGkB;;AAAA,UAkGnBC,OAlGmB,GAkGT,UAACH,MAAD,EAASE,OAAT,EAAqB;AAAA,UACrB5B,GADqB,GACb,MAAKZ,KADQ,CACrBY,GADqB,EAG7B;;AACA0B,MAAAA,MAAM,CAACV,OAAP,CAAe,UAACC,KAAD,EAAQC,CAAR,EAAc;AAC3B,YAAIlB,GAAG,CAAC8B,QAAJ,CAAab,KAAb,CAAJ,EAAyB;AACvBjB,UAAAA,GAAG,CAAC+B,WAAJ,CAAgBd,KAAhB;AACD;AACF,OAJD;AAMAW,MAAAA,OAAO,CAACZ,OAAR,CAAgB,UAACM,MAAD,EAASJ,CAAT,EAAe;AAC7B,YAAIlB,GAAG,CAACgC,SAAJ,CAAcV,MAAd,CAAJ,EAA2B;AACzBtB,UAAAA,GAAG,CAACiC,YAAJ,CAAiBX,MAAjB;AACD;AACF,OAJD;AAKD,KAjHkB;;AAAA,UAmHnBlB,iBAnHmB,GAmHC,YAAM;AACxB,UAAM8B,QAAQ,GAAG,CAAC,CAAD,EAAI,GAAJ,EAAS,CAAT,EAAY,EAAZ,EAAgB,GAAhB,EAAqB,IAArB,EAA2B,KAA3B,CAAjB;AACA,UAAMC,SAAS,GAAG,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,CAAlB;AACA,UAAMC,SAAS,GAAGvD,KAAK,CAACwD,KAAN,CAAYC,KAAZ,CAAkBJ,QAAQ,CAACK,MAAT,GAAkB,CAApC,CAAlB;AAEA,aAAOL,QAAQ,CACZlC,GADI,CACA,UAACwC,CAAD,EAAItB,CAAJ,EAAU;AACb,eAAO,CAACgB,QAAQ,CAAChB,CAAD,CAAT,EAAckB,SAAS,CAAClB,CAAC,GAAG,CAAL,CAAvB,EAAgCiB,SAAS,CAACjB,CAAD,CAAzC,CAAP;AACD,OAHI,EAIJuB,OAJI,EAAP;AAKD,KA7HkB;;AAAA,UA+HnBC,oBA/HmB,GA+HI,UAACC,SAAD,EAAe;AACpC,UAAI,CAAC9D,KAAK,CAAC+D,OAAN,CAAcC,YAAd,CAA2BF,SAA3B,EAAsC,IAAtC,CAAL,EAAkD,OAAO,EAAP;AAElD,aAAOA,SAAS,CAACnB,MAAV,CAAiB,UAACd,QAAD,EAAc;AACpC,YAAMoC,KAAK,GAAG9E,GAAG,CAAC0C,QAAD,EAAW,8BAAX,CAAjB;AACA,eAAOA,QAAQ,IAAIoC,KAAZ,IAAqBA,KAAK,GAAG,CAApC;AACD,OAHM,CAAP;AAID,KAtIkB;;AAAA,UAwInBC,0BAxImB,GAwIU,UAACC,KAAD,EAAW;AACtC,YAAKpD,KAAL,CAAWrB,SAAX,CAAqB;AACnB0E,QAAAA,SAAS,EAAE,SADQ;AAEnBrD,QAAAA,KAAK,EAAE;AACLsD,UAAAA,KAAK,EAAE,sBADF;AAELC,UAAAA,QAAQ,EAAE,0BAFL;AAGLC,UAAAA,SAAS,EAAE,IAHN;AAILC,UAAAA,QAAQ,EAAE,IAJL;AAKLC,UAAAA,cAAc,EAAE;AACdC,YAAAA,aAAa,EAAE,yBAAM;AACnB,oBAAK3D,KAAL,CAAWnB,wBAAX;;AACA,oBAAK4B,aAAL;AACD;AAJa;AALX;AAFY,OAArB;AAeD,KAxJkB;;AAAA,UA0JnBmD,4BA1JmB,GA0JY,UAACnC,EAAD;AAAA,aAAQ,UAAC2B,KAAD,EAAW;AAChD,cAAKpD,KAAL,CAAWjB,cAAX;;AACA,cAAKiB,KAAL,CAAWlB,6BAAX,CAAyC2C,EAAzC;AACD,OAH8B;AAAA,KA1JZ;;AAGjB,UAAKjC,KAAL,GAAa;AACXY,MAAAA,GAAG,EAAE;AADM,KAAb;AAHiB;AAMlB;;AAdH;AAAA;AAAA,WAuKE,kBAAS;AAAA,yBACuG,KAAKJ,KAD5G;AAAA,UACC6D,MADD,gBACCA,MADD;AAAA,UACSC,IADT,gBACSA,IADT;AAAA,UACepE,eADf,gBACeA,eADf;AAAA,UACgCC,iBADhC,gBACgCA,iBADhC;AAAA,UACmDC,iBADnD,gBACmDA,iBADnD;AAAA,UACsEC,mBADtE,gBACsEA,mBADtE;AAAA,UAC2FkE,OAD3F,gBAC2FA,OAD3F;AAGP,UAAMhB,SAAS,GAAG,KAAKD,oBAAL,CAA0B,KAAK9C,KAAL,CAAW+C,SAArC,CAAlB;AACA,UAAMiB,iBAAiB,GAAG,KAAKlB,oBAAL,CAA0B,KAAK9C,KAAL,CAAWgE,iBAArC,CAA1B;;AAEA,UAAMC,YAAY,gBAChB,QAAC,UAAD;AAAY,QAAA,OAAO,EAAE,CAACjF,SAAS,CAACkF,WAAX,CAArB;AAAA,kBACGnB,SAAS,CAACJ,MAAV,GAAmB,CAAnB,iBACC,QAAC,YAAD;AACE,UAAA,IAAI,EAAErD,eADR;AAEE,UAAA,IAAI,EAAC,OAFP;AAGE,UAAA,QAAQ,EAAEK,iBAHZ;AAIE,UAAA,OAAO,EAAE;AAAE2D,YAAAA,KAAK,EAAErE,KAAK,CAACkF,MAAN,CAAaC,CAAb,CAAe,sBAAf;AAAT,WAJX;AAKE,UAAA,OAAO,EAAE,KAAKjB,0BALhB;AAME,yBAAY;AANd;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,cADF;;AAeA,UAAMkB,SAAS,gBACb,QAAC,UAAD;AAAY,QAAA,OAAO,EAAE,CAACrF,SAAS,CAACkF,WAAX,CAArB;AAAA,mBACGtE,iBAAiB,CAAC0E,MAAlB,IAA4BvB,SAAS,CAACJ,MAAV,GAAmB,CAA/C,iBACC;AAAK,UAAA,SAAS,EAAEoB,OAAO,CAACQ,SAAxB;AAAA,kCACE,QAAC,UAAD;AAAY,YAAA,OAAO,EAAC,OAApB;AAA4B,YAAA,SAAS,EAAER,OAAO,CAACS,aAA/C;AAAA,oCACE,QAAC,SAAD;AAAW,cAAA,KAAK,EAAC;AAAjB;AAAA;AAAA;AAAA;AAAA,oBADF,EAEG,OAAO5E,iBAAiB,CAAC6E,SAAzB,GAAqC,KAArC,GAA6C7E,iBAAiB,CAAC8E,KAFlE;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAKE,QAAC,gBAAD;AAAkB,YAAA,IAAI,EAAE;AAAxB;AAAA;AAAA;AAAA;AAAA,kBALF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAWG9E,iBAAiB,CAAC+E,MAAlB,KAA6B,QAA7B,IAAyC5B,SAAS,CAACJ,MAAV,GAAmB,CAA5D,iBACC;AAAK,UAAA,SAAS,EAAEoB,OAAO,CAACQ,SAAxB;AAAA,iCACE,QAAC,UAAD;AAAY,YAAA,OAAO,EAAC,OAApB;AAA4B,YAAA,SAAS,EAAER,OAAO,CAACS,aAA/C;AAAA,oCACE,QAAC,SAAD;AAAW,cAAA,KAAK,EAAC;AAAjB;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,eAGE,QAAC,IAAD;AAAM,cAAA,OAAO,EAAE,KAAKZ,4BAAL,CAAkC/D,mBAAlC,CAAf;AAAuE,cAAA,SAAS,EAAEkE,OAAO,CAACa,aAA1F;AAAA,qCACE,QAAC,SAAD;AAAW,gBAAA,KAAK,EAAC;AAAjB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;;AA0BA,0BACE,QAAC,MAAD;AACE,QAAA,EAAE,EAAC,oBADL;AAEE,QAAA,MAAM,EAAE,GAFV;AAGE,QAAA,eAAe,EAAE,KAHnB;AAIE,QAAA,iBAAiB,EAAE,IAJrB;AAKE,QAAA,WAAW,EAAE,KALf;AAME,QAAA,SAAS,MANX;AAOE,QAAA,MAAM,EAAEf,MAPV;AAQE,QAAA,IAAI,EAAEC,IARR;AASE,QAAA,MAAM,EAAExF,SATV;AAUE,QAAA,SAAS,EAAEyE,SAAS,CAAC3C,GAAV,CAAc,UAAC2B,CAAD;AAAA,iBAAOA,CAAC,CAAC8C,aAAT;AAAA,SAAd,CAVb;AAWE,QAAA,iBAAiB,EAAEb,iBAAiB,CAAC5D,GAAlB,CAAsB,UAAC2B,CAAD;AAAA,iBAAOA,CAAC,CAAC8C,aAAT;AAAA,SAAtB,CAXrB;AAYE,QAAA,OAAO,EAAE,CAACZ,YAAD,CAZX;AAaE,QAAA,MAAM,EAAEI,SAbV;AAcE,QAAA,cAAc,EAAE;AACdS,UAAAA,gBAAgB,EAAE,0BAACC,GAAD,EAAMC,YAAN,EAAuB;AACvC,gBAAIA,YAAY,KAAK,QAAjB,IAA6BD,GAAG,CAACE,QAAJ,CAAa,eAAb,CAAjC,EAAgE;AAC9D,qBAAO;AACLF,gBAAAA,GAAG,EAAEA,GADA;AAELG,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,EAAE,YAAYzF;AAA7B;AAFJ,eAAP;AAID;AACF;AARa,SAdlB;AAwBE,QAAA,MAAM,EAAE,KAAKO,SAxBf;AAyBE,QAAA,QAAQ,EAAE,KAAKK;AAzBjB;AAAA;AAAA;AAAA;AAAA,cADF;AA6BD;AAnPH;;AAAA;AAAA,EAAkCtC,SAAlC;AAAa+B,Y,CACJqF,S,GAAY;AACjBrC,EAAAA,SAAS,EAAE9E,SAAS,CAACoH,KAAV,CAAgBC,UADV;AAEjBtB,EAAAA,iBAAiB,EAAE/F,SAAS,CAACoH,KAAV,CAAgBC,UAFlB;AAGjBzB,EAAAA,MAAM,EAAE5F,SAAS,CAACoH,KAHD;AAIjBvB,EAAAA,IAAI,EAAE7F,SAAS,CAACsH;AAJC,C;AAqPrB,eAAerH,OAAO,CAACqB,eAAD,EAAkBO,kBAAlB,CAAP,CAA6C3B,OAAO,CAACe,UAAU,CAACb,MAAD,CAAX,CAAP,CAA4B0B,YAA5B,CAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport get from 'lodash/get';\r\n\r\n// app\r\nimport styles from './PlacementMap.styles';\r\nimport { mapLayers } from 'utils/map/mapLayers';\r\nimport { MapBox, MapBoxButton, Restricted, Translate } from 'components';\r\nimport { showModal, resetLocations, deletePlacementLocations, getLocationGroupsForPlacement, retryGeocoding } from 'stores';\r\nimport * as constants from 'consts';\r\nimport * as utils from 'utils';\r\n\r\n// mui\r\nimport { withStyles, CircularProgress, Link, Typography } from '@material-ui/core';\r\nimport LocationOffIcon from '@material-ui/icons/LocationOff';\r\n\r\nconst mapStateToProps = (state) => ({\r\n  configVars: get(state, 'config.vars'),\r\n  userAccessToken: get(state, 'user.auth.accessToken'),\r\n  locationUploading: get(state, 'location.uploading'),\r\n  locationGeocoding: get(state, 'location.geocoding'),\r\n  placementSelectedId: get(state, 'placement.selected.id'),\r\n});\r\n\r\n// dispatch\r\nconst mapDispatchToProps = {\r\n  showModal,\r\n  resetLocations,\r\n  deletePlacementLocations,\r\n  getLocationGroupsForPlacement,\r\n  retryGeocoding,\r\n};\r\n\r\nexport class PlacementMap extends Component {\r\n  static propTypes = {\r\n    locations: PropTypes.array.isRequired,\r\n    locationsFiltered: PropTypes.array.isRequired,\r\n    center: PropTypes.array,\r\n    zoom: PropTypes.number,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      map: null,\r\n    };\r\n  }\r\n\r\n  onLoadMap = (mapInstance) => {\r\n    this.setState({ map: mapInstance }, () => {\r\n      this.addSources();\r\n    });\r\n  };\r\n\r\n  onChangeMap = () => {\r\n    this.addSources();\r\n  };\r\n\r\n  addSources = () => {\r\n    const { configVars, placementSelectedId } = this.props;\r\n\r\n    const clusterLayers = this.getClustersLayers();\r\n\r\n    // remove sources before trying to add new ones\r\n    // mapbox breaks if sources/layers already exist\r\n    this.removeSources();\r\n\r\n    this.state.map.addSource('location-geojson', {\r\n      type: 'geojson',\r\n      data: configVars.endpoint.location + '/api/locations/' + placementSelectedId + '/geo',\r\n      cluster: true,\r\n      //clusterMaxZoom: 20, // Max zoom to cluster points on\r\n      clusterRadius: 60, // Radius of each cluster when clustering points (defaults to 50)\r\n      clusterProperties: {\r\n        mtiv: ['+', ['get', 'mtiv']],\r\n        '4tiv': ['+', ['get', '4tiv']],\r\n        tiv: ['+', ['get', 'tiv']],\r\n      },\r\n    });\r\n\r\n    clusterLayers.forEach((layer, i) => {\r\n      const clusterName = 'cluster-' + i;\r\n      this.state.map.addLayer({\r\n        id: clusterName,\r\n        type: 'circle',\r\n        source: 'location-geojson',\r\n        paint: {\r\n          'circle-color': layer[1],\r\n          'circle-radius': layer[2],\r\n          'circle-stroke-width': 1,\r\n          'circle-stroke-color': '#fff',\r\n        },\r\n        filter:\r\n          i === 0\r\n            ? ['all', ['>=', ['get', 'mtiv'], layer[0]]]\r\n            : ['all', ['>=', ['get', 'mtiv'], layer[0]], ['<', ['get', 'mtiv'], clusterLayers[i - 1][0]]],\r\n      });\r\n    });\r\n\r\n    this.state.map.addLayer({\r\n      id: 'cluster-label',\r\n      type: 'symbol',\r\n      source: 'location-geojson',\r\n      filter: ['all', ['has', 'point_count']],\r\n      layout: {\r\n        'text-field': ['format', ['get', 'point_count'], {}, '\\n', {}, '~$', {}, ['to-string', ['/', ['get', '4tiv'], 100]], {}, 'm', {}],\r\n        'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\r\n        'text-offset': [0, -0.25],\r\n        'text-size': 8,\r\n      },\r\n      paint: {\r\n        'text-color': '#fff',\r\n      },\r\n    });\r\n\r\n    this.state.map.addLayer({\r\n      id: 'non-cluster-label',\r\n      type: 'symbol',\r\n      source: 'location-geojson',\r\n      filter: ['all', ['!has', 'point_count']],\r\n      layout: {\r\n        'text-field': ['format', '~$', {}, ['to-string', ['/', ['get', '4tiv'], 100]], {}, 'm', {}],\r\n        'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\r\n        'text-size': 8,\r\n      },\r\n      paint: {\r\n        'text-color': '#fff',\r\n      },\r\n    });\r\n  };\r\n\r\n  removeSources = () => {\r\n    const layers = ['cluster-label', 'non-cluster-label', ...this.getClustersLayers().map((l, i) => 'cluster-' + i)];\r\n    const sources = ['location-geojson'];\r\n\r\n    this.cleanup(layers, sources);\r\n  };\r\n\r\n  cleanup = (layers, sources) => {\r\n    const { map } = this.state;\r\n\r\n    // mapbox is specific about the order: remove layers first, then sources\r\n    layers.forEach((layer, i) => {\r\n      if (map.getLayer(layer)) {\r\n        map.removeLayer(layer);\r\n      }\r\n    });\r\n\r\n    sources.forEach((source, i) => {\r\n      if (map.getSource(source)) {\r\n        map.removeSource(source);\r\n      }\r\n    });\r\n  };\r\n\r\n  getClustersLayers = () => {\r\n    const tivSizes = [0, 0.1, 1, 10, 100, 1000, 10000];\r\n    const tivRadius = [16, 18, 20, 22, 26, 30, 34];\r\n    const tivColors = utils.color.scale(tivSizes.length * 2);\r\n\r\n    return tivSizes\r\n      .map((s, i) => {\r\n        return [tivSizes[i], tivColors[i * 2], tivRadius[i]];\r\n      })\r\n      .reverse();\r\n  };\r\n\r\n  getLocationsGeocoded = (locations) => {\r\n    if (!utils.generic.isValidArray(locations, true)) return [];\r\n\r\n    return locations.filter((location) => {\r\n      const found = get(location, 'geocodeResult.locationsFound');\r\n      return location && found && found > 0;\r\n    });\r\n  };\r\n\r\n  handleClickRemoveLocations = (event) => {\r\n    this.props.showModal({\r\n      component: 'CONFIRM',\r\n      props: {\r\n        title: 'map.locations.remove',\r\n        subtitle: 'map.locations.removeHint',\r\n        fullWidth: true,\r\n        maxWidth: 'xs',\r\n        componentProps: {\r\n          submitHandler: () => {\r\n            this.props.deletePlacementLocations();\r\n            this.removeSources();\r\n          },\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  handleClickGeocodingTryAgain = (id) => (event) => {\r\n    this.props.retryGeocoding();\r\n    this.props.getLocationGroupsForPlacement(id);\r\n  };\r\n\r\n  render() {\r\n    const { center, zoom, userAccessToken, locationUploading, locationGeocoding, placementSelectedId, classes } = this.props;\r\n\r\n    const locations = this.getLocationsGeocoded(this.props.locations);\r\n    const locationsFiltered = this.getLocationsGeocoded(this.props.locationsFiltered);\r\n\r\n    const mapBtnDelete = (\r\n      <Restricted include={[constants.ROLE_BROKER]}>\r\n        {locations.length > 0 && (\r\n          <MapBoxButton\r\n            icon={LocationOffIcon}\r\n            size=\"small\"\r\n            disabled={locationUploading}\r\n            tooltip={{ title: utils.string.t('map.locations.remove') }}\r\n            onClick={this.handleClickRemoveLocations}\r\n            data-testid=\"map-locations-remove-button\"\r\n          />\r\n        )}\r\n      </Restricted>\r\n    );\r\n\r\n    const mapHeader = (\r\n      <Restricted include={[constants.ROLE_BROKER]}>\r\n        {locationGeocoding.status && locations.length > 0 && (\r\n          <div className={classes.geocoding}>\r\n            <Typography variant=\"body2\" className={classes.geocodingText}>\r\n              <Translate label=\"app.geocoding\" />\r\n              {': ' + locationGeocoding.completed + ' / ' + locationGeocoding.total}\r\n            </Typography>\r\n            <CircularProgress size={'1em'} />\r\n          </div>\r\n        )}\r\n\r\n        {locationGeocoding.result === 'failed' && locations.length > 0 && (\r\n          <div className={classes.geocoding}>\r\n            <Typography variant=\"body2\" className={classes.geocodingText}>\r\n              <Translate label=\"placement.overview.map.geocodingFailed\" />\r\n              <span> - </span>\r\n              <Link onClick={this.handleClickGeocodingTryAgain(placementSelectedId)} className={classes.geocodingLink}>\r\n                <Translate label=\"app.tryAgain\" />\r\n              </Link>\r\n            </Typography>\r\n          </div>\r\n        )}\r\n      </Restricted>\r\n    );\r\n\r\n    return (\r\n      <MapBox\r\n        id=\"placement-overview\"\r\n        height={450}\r\n        allowScrollZoom={false}\r\n        placementOverflow={true}\r\n        showMarkers={false}\r\n        fitBounds\r\n        center={center}\r\n        zoom={zoom}\r\n        layers={mapLayers}\r\n        locations={locations.map((l) => l.geocodeResult)}\r\n        locationsFiltered={locationsFiltered.map((l) => l.geocodeResult)}\r\n        buttons={[mapBtnDelete]}\r\n        header={mapHeader}\r\n        instanceObject={{\r\n          transformRequest: (url, resourceType) => {\r\n            if (resourceType === 'Source' && url.includes('api/locations')) {\r\n              return {\r\n                url: url,\r\n                headers: { Authorization: 'Bearer ' + userAccessToken },\r\n              };\r\n            }\r\n          },\r\n        }}\r\n        onLoad={this.onLoadMap}\r\n        onChange={this.onChangeMap}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(compose(withStyles(styles))(PlacementMap));\r\n"]},"metadata":{},"sourceType":"module"}