{"ast":null,"code":"import _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\MarketingStructuring\\\\MarketingStructuring.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { firstBy } from 'thenby';\nimport toNumber from 'lodash/toNumber';\nimport groupBy from 'lodash/groupBy';\nimport get from 'lodash/get';\nimport * as constants from 'consts'; // app\n\nimport { MarketingStructuringView } from './MarketingStructuring.view';\nimport { bulkPlacementClear, getPlacementMarkets, getComments, selectPlacementLayers, selectPlacementDepartmentId, selectPlacementBulkType, selectBulkToggleSelect, selectPlacementBulkItemsLayers, selectPlacementBulkItemsMarkets, selectRefDataDepartmentById, showModal, bulkToggleSelect, bulkPlacementLayerToggle, bulkPlacementClearAll, disableBulkToggleSelect } from 'stores';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nMarketingStructuring.propTypes = {\n  placementId: PropTypes.string.isRequired\n};\nexport default function MarketingStructuring(_ref) {\n  _s();\n\n  var placementId = _ref.placementId;\n  var dispatch = useDispatch();\n  var placementLayers = useSelector(selectPlacementLayers);\n  var placementDepartmentId = useSelector(selectPlacementDepartmentId);\n  var placementBulkType = useSelector(selectPlacementBulkType);\n  var placementBulkItemsLayers = useSelector(selectPlacementBulkItemsLayers);\n  var placementBulkItemsLayerMarkets = useSelector(selectPlacementBulkItemsMarkets);\n  var department = useSelector(selectRefDataDepartmentById(placementDepartmentId));\n  var showBulkSelect = useSelector(selectBulkToggleSelect);\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      tab = _useState2[0],\n      setTab = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      commentIDs = _useState4[0],\n      setCommentIDs = _useState4[1];\n\n  var placementIdNumber = toNumber(placementId);\n  useEffect(function () {\n    if (placementIdNumber) {\n      dispatch(getPlacementMarkets(placementIdNumber));\n      dispatch(bulkPlacementClear());\n    }\n  }, [placementIdNumber] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  useEffect(function () {\n    dispatch(disableBulkToggleSelect());\n    dispatch(bulkPlacementClearAll());\n  }, [tab] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  useEffect(function () {\n    if (placementIdNumber) {\n      var fetchComments = /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(placementId) {\n          var commentsID, allComments;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  commentsID = \"placement/\".concat(placementId, \"/layerMarket\");\n                  _context.next = 3;\n                  return dispatch(getComments(commentsID));\n\n                case 3:\n                  allComments = _context.sent;\n                  setCommentIDs(allComments === null || allComments === void 0 ? void 0 : allComments.map(function (comment) {\n                    return {\n                      id: toNumber(comment.typeId),\n                      nrDays: utils.date.diffDays(utils.date.today(), comment.date)\n                    };\n                  }));\n\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function fetchComments(_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n\n      fetchComments(placementIdNumber);\n    }\n  }, [] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  var groups = groupBy(placementLayers, function (layer) {\n    return layer.businessTypeId;\n  });\n  var tabs = Object.keys(groups).map(function (group) {\n    var businessTypeId = toNumber(group);\n    var businessTypeName = utils.referenceData.businessTypes.getNameById(department.businessTypes, businessTypeId);\n    return {\n      value: businessTypeId,\n      label: businessTypeName\n    };\n  }).sort(firstBy('value'));\n  var selectedTab = tab && tabs.map(function (tab) {\n    return tab.value;\n  }).includes(tab) ? tab : tabs && tabs.length && get(tabs, '[0].value');\n\n  var handleBulkUpdate = function handleBulkUpdate(event, updateMarket) {\n    dispatch(showModal({\n      component: 'BULK_UPDATE_LAYER',\n      props: {\n        title: updateMarket ? 'placement.marketing.bulkEditLayer' : 'placement.marketing.bulkEditLines',\n        fullWidth: true,\n        maxWidth: updateMarket ? 'xs' : 'sm',\n        componentProps: {\n          isLayerBulkEdit: updateMarket\n        }\n      }\n    }));\n  };\n\n  var getUpdateString = function getUpdateString() {\n    if (placementBulkType === 'layer') {\n      return 'placement.marketing.editNumLayers';\n    } else if (placementBulkType === 'layerMarket') {\n      return 'placement.marketing.editNumMarkets';\n    } else {\n      return 'placement.marketing.editItems';\n    }\n  };\n\n  var handleBulkSelectAll = function handleBulkSelectAll() {\n    groups[selectedTab].forEach(function (layer) {\n      var markets = layer.markets ? layer.markets : [];\n      dispatch(bulkPlacementLayerToggle(constants.SELECTALL, layer.id, markets));\n    });\n  };\n\n  var handleBulkClearAll = function handleBulkClearAll() {\n    dispatch(bulkPlacementClearAll());\n  };\n\n  var handleToggleBulkSelect = function handleToggleBulkSelect() {\n    dispatch(bulkToggleSelect());\n    dispatch(bulkPlacementClearAll());\n  }; // abort\n\n\n  if (!placementId) return null;\n  return /*#__PURE__*/_jsxDEV(MarketingStructuringView, {\n    layers: groups[selectedTab] || [],\n    commentIDs: commentIDs,\n    tabs: tabs,\n    showBulkSelect: showBulkSelect,\n    bulk: {\n      type: placementBulkType,\n      items: placementBulkItemsLayers,\n      itemsMarkets: placementBulkItemsLayerMarkets\n    },\n    handlers: {\n      getUpdateString: getUpdateString,\n      bulkUpdate: handleBulkUpdate,\n      toggleTab: function toggleTab(tabSelected) {\n        return setTab(tabSelected);\n      },\n      toggleBulkSelect: handleToggleBulkSelect,\n      selectBulkAll: handleBulkSelectAll,\n      clearAllPlacement: handleBulkClearAll\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MarketingStructuring, \"8dYhGBi0F1rDv97CM4na9HEN0e0=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = MarketingStructuring;\nMarketingStructuring.displayName = \"MarketingStructuring\";\nMarketingStructuring.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"MarketingStructuring\",\n  \"props\": {\n    \"placementId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\modules\\\\MarketingStructuring\\\\MarketingStructuring.js\"] = {\n    name: \"MarketingStructuring\",\n    docgenInfo: MarketingStructuring.__docgenInfo,\n    path: \"src\\\\modules\\\\MarketingStructuring\\\\MarketingStructuring.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"MarketingStructuring\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/MarketingStructuring/MarketingStructuring.js"],"names":["React","useEffect","useState","PropTypes","useSelector","useDispatch","firstBy","toNumber","groupBy","get","constants","MarketingStructuringView","bulkPlacementClear","getPlacementMarkets","getComments","selectPlacementLayers","selectPlacementDepartmentId","selectPlacementBulkType","selectBulkToggleSelect","selectPlacementBulkItemsLayers","selectPlacementBulkItemsMarkets","selectRefDataDepartmentById","showModal","bulkToggleSelect","bulkPlacementLayerToggle","bulkPlacementClearAll","disableBulkToggleSelect","utils","MarketingStructuring","propTypes","placementId","string","isRequired","dispatch","placementLayers","placementDepartmentId","placementBulkType","placementBulkItemsLayers","placementBulkItemsLayerMarkets","department","showBulkSelect","tab","setTab","commentIDs","setCommentIDs","placementIdNumber","fetchComments","commentsID","allComments","map","comment","id","typeId","nrDays","date","diffDays","today","groups","layer","businessTypeId","tabs","Object","keys","group","businessTypeName","referenceData","businessTypes","getNameById","value","label","sort","selectedTab","includes","length","handleBulkUpdate","event","updateMarket","component","props","title","fullWidth","maxWidth","componentProps","isLayerBulkEdit","getUpdateString","handleBulkSelectAll","forEach","markets","SELECTALL","handleBulkClearAll","handleToggleBulkSelect","type","items","itemsMarkets","bulkUpdate","toggleTab","tabSelected","toggleBulkSelect","selectBulkAll","clearAllPlacement"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { firstBy } from 'thenby';\r\nimport toNumber from 'lodash/toNumber';\r\nimport groupBy from 'lodash/groupBy';\r\nimport get from 'lodash/get';\r\n\r\nimport * as constants from 'consts';\r\n// app\r\nimport { MarketingStructuringView } from './MarketingStructuring.view';\r\nimport {\r\n  bulkPlacementClear,\r\n  getPlacementMarkets,\r\n  getComments,\r\n  selectPlacementLayers,\r\n  selectPlacementDepartmentId,\r\n  selectPlacementBulkType,\r\n  selectBulkToggleSelect,\r\n  selectPlacementBulkItemsLayers,\r\n  selectPlacementBulkItemsMarkets,\r\n  selectRefDataDepartmentById,\r\n  showModal,\r\n  bulkToggleSelect,\r\n  bulkPlacementLayerToggle,\r\n  bulkPlacementClearAll,\r\n  disableBulkToggleSelect,\r\n} from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nMarketingStructuring.propTypes = {\r\n  placementId: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default function MarketingStructuring({ placementId }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const placementLayers = useSelector(selectPlacementLayers);\r\n  const placementDepartmentId = useSelector(selectPlacementDepartmentId);\r\n  const placementBulkType = useSelector(selectPlacementBulkType);\r\n  const placementBulkItemsLayers = useSelector(selectPlacementBulkItemsLayers);\r\n  const placementBulkItemsLayerMarkets = useSelector(selectPlacementBulkItemsMarkets);\r\n  const department = useSelector(selectRefDataDepartmentById(placementDepartmentId));\r\n  const showBulkSelect = useSelector(selectBulkToggleSelect);\r\n\r\n  const [tab, setTab] = useState();\r\n  const [commentIDs, setCommentIDs] = useState([]);\r\n  const placementIdNumber = toNumber(placementId);\r\n\r\n  useEffect(\r\n    () => {\r\n      if (placementIdNumber) {\r\n        dispatch(getPlacementMarkets(placementIdNumber));\r\n        dispatch(bulkPlacementClear());\r\n      }\r\n    },\r\n    [placementIdNumber] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  useEffect(\r\n    () => {\r\n      dispatch(disableBulkToggleSelect());\r\n      dispatch(bulkPlacementClearAll());\r\n    },\r\n    [tab] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  useEffect(\r\n    () => {\r\n      if (placementIdNumber) {\r\n        const fetchComments = async (placementId) => {\r\n          const commentsID = `placement/${placementId}/layerMarket`;\r\n          const allComments = await dispatch(getComments(commentsID));\r\n\r\n          setCommentIDs(\r\n            allComments?.map((comment) => ({\r\n              id: toNumber(comment.typeId),\r\n              nrDays: utils.date.diffDays(utils.date.today(), comment.date),\r\n            }))\r\n          );\r\n        };\r\n        fetchComments(placementIdNumber);\r\n      }\r\n    },\r\n    [] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  const groups = groupBy(placementLayers, (layer) => layer.businessTypeId);\r\n  const tabs = Object.keys(groups)\r\n    .map((group) => {\r\n      const businessTypeId = toNumber(group);\r\n      const businessTypeName = utils.referenceData.businessTypes.getNameById(department.businessTypes, businessTypeId);\r\n      return {\r\n        value: businessTypeId,\r\n        label: businessTypeName,\r\n      };\r\n    })\r\n    .sort(firstBy('value'));\r\n  const selectedTab = tab && tabs.map((tab) => tab.value).includes(tab) ? tab : tabs && tabs.length && get(tabs, '[0].value');\r\n\r\n  const handleBulkUpdate = (event, updateMarket) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'BULK_UPDATE_LAYER',\r\n        props: {\r\n          title: updateMarket ? 'placement.marketing.bulkEditLayer' : 'placement.marketing.bulkEditLines',\r\n          fullWidth: true,\r\n          maxWidth: updateMarket ? 'xs' : 'sm',\r\n          componentProps: {\r\n            isLayerBulkEdit: updateMarket,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const getUpdateString = () => {\r\n    if (placementBulkType === 'layer') {\r\n      return 'placement.marketing.editNumLayers';\r\n    } else if (placementBulkType === 'layerMarket') {\r\n      return 'placement.marketing.editNumMarkets';\r\n    } else {\r\n      return 'placement.marketing.editItems';\r\n    }\r\n  };\r\n  const handleBulkSelectAll = () => {\r\n    groups[selectedTab].forEach((layer) => {\r\n      const markets = layer.markets ? layer.markets : [];\r\n      dispatch(bulkPlacementLayerToggle(constants.SELECTALL, layer.id, markets));\r\n    });\r\n  };\r\n\r\n  const handleBulkClearAll = () => {\r\n    dispatch(bulkPlacementClearAll());\r\n  };\r\n\r\n  const handleToggleBulkSelect = () => {\r\n    dispatch(bulkToggleSelect());\r\n    dispatch(bulkPlacementClearAll());\r\n  };\r\n  // abort\r\n  if (!placementId) return null;\r\n\r\n  return (\r\n    <MarketingStructuringView\r\n      layers={groups[selectedTab] || []}\r\n      commentIDs={commentIDs}\r\n      tabs={tabs}\r\n      showBulkSelect={showBulkSelect}\r\n      bulk={{\r\n        type: placementBulkType,\r\n        items: placementBulkItemsLayers,\r\n        itemsMarkets: placementBulkItemsLayerMarkets,\r\n      }}\r\n      handlers={{\r\n        getUpdateString,\r\n        bulkUpdate: handleBulkUpdate,\r\n        toggleTab: (tabSelected) => setTab(tabSelected),\r\n        toggleBulkSelect: handleToggleBulkSelect,\r\n        selectBulkAll: handleBulkSelectAll,\r\n        clearAllPlacement: handleBulkClearAll,\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}