{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { addLoader, removeLoader, enqueueNotification, hideModal, authLogout } from 'stores';\nimport * as utils from 'utils';\nexport var postSaveNextTaskAction = function postSaveNextTaskAction(taskId, data) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/claims.actions.postSaveNextTaskAction'\n    };\n\n    if (!taskId) {\n      dispatch(postSaveNextTaskActionFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Missing requests params'\n      })));\n      dispatch(enqueueNotification('Missing requests params', 'error'));\n      dispatch(removeLoader('postSaveNextTaskAction'));\n      return;\n    }\n\n    dispatch(postSaveNextTaskActionRequest(taskId, data));\n    dispatch(addLoader('postSaveNextTaskAction'));\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.bpmService,\n      path: \"workflow/task/\".concat(taskId, \"/next\"),\n      data: data\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json, true);\n    }).then(function (data) {\n      dispatch(postSaveNextTaskActionSuccess(data.data));\n      dispatch(enqueueNotification(data.message, 'success'));\n      dispatch(hideModal());\n      return data;\n    })[\"catch\"](function (error) {\n      dispatch(postSaveNextTaskActionFailure(error, defaultError));\n      dispatch(enqueueNotification(error.json.message, 'error'));\n      utils.api.handleUnauthorized(error, dispatch, authLogout);\n      return error;\n    })[\"finally\"](function () {\n      dispatch(removeLoader('postSaveNextTaskAction'));\n    });\n  };\n};\nexport var postSaveNextTaskActionRequest = function postSaveNextTaskActionRequest(params) {\n  return {\n    type: 'CLAIMS_TASK_PROCESSING_SAVE_NEXT_ACTION_REQUEST',\n    payload: params\n  };\n};\nexport var postSaveNextTaskActionSuccess = function postSaveNextTaskActionSuccess(data) {\n  return {\n    type: 'CLAIMS_TASK_PROCESSING_SAVE_NEXT_ACTION_SUCCESS',\n    payload: data\n  };\n};\nexport var postSaveNextTaskActionFailure = function postSaveNextTaskActionFailure(error) {\n  return {\n    type: 'CLAIMS_TASK_PROCESSING_SAVE_NEXT_ACTION_ERROR',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.postSaveNextTaskAction.js"],"names":["addLoader","removeLoader","enqueueNotification","hideModal","authLogout","utils","postSaveNextTaskAction","taskId","data","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","postSaveNextTaskActionFailure","message","postSaveNextTaskActionRequest","api","post","token","accessToken","bpmService","path","then","response","handleResponse","json","handleNewData","postSaveNextTaskActionSuccess","error","handleUnauthorized","params","type","payload"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,YAApB,EAAkCC,mBAAlC,EAAuDC,SAAvD,EAAkEC,UAAlE,QAAoF,QAApF;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAO,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,MAAD,EAASC,IAAT;AAAA,SAAkB,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC9E;AAD8E,oBAEnBA,QAAQ,EAFW;AAAA,QAE9DC,IAF8D,aAEtEC,IAFsE,CAE9DD,IAF8D;AAAA,QAEpCE,QAFoC,aAEtDC,MAFsD,CAE5CC,IAF4C,CAEpCF,QAFoC;;AAI9E,QAAMG,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE;AADa,KAArB;;AAIA,QAAI,CAACV,MAAL,EAAa;AACXE,MAAAA,QAAQ,CAACS,6BAA6B,iCAAMF,YAAN;AAAoBG,QAAAA,OAAO,EAAE;AAA7B,SAA9B,CAAR;AACAV,MAAAA,QAAQ,CAACP,mBAAmB,CAAC,yBAAD,EAA4B,OAA5B,CAApB,CAAR;AACAO,MAAAA,QAAQ,CAACR,YAAY,CAAC,wBAAD,CAAb,CAAR;AACA;AACD;;AAEDQ,IAAAA,QAAQ,CAACW,6BAA6B,CAACb,MAAD,EAASC,IAAT,CAA9B,CAAR;AACAC,IAAAA,QAAQ,CAACT,SAAS,CAAC,wBAAD,CAAV,CAAR;AAEA,WAAOK,KAAK,CAACgB,GAAN,CACJC,IADI,CACC;AACJC,MAAAA,KAAK,EAAEZ,IAAI,CAACa,WADR;AAEJX,MAAAA,QAAQ,EAAEA,QAAQ,CAACY,UAFf;AAGJC,MAAAA,IAAI,0BAAmBnB,MAAnB,UAHA;AAIJC,MAAAA,IAAI,EAAEA;AAJF,KADD,EAOJmB,IAPI,CAOC,UAACC,QAAD;AAAA,aAAcvB,KAAK,CAACgB,GAAN,CAAUQ,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAPD,EAQJD,IARI,CAQC,UAACG,IAAD;AAAA,aAAUzB,KAAK,CAACgB,GAAN,CAAUU,aAAV,CAAwBD,IAAxB,EAA8B,IAA9B,CAAV;AAAA,KARD,EASJH,IATI,CASC,UAACnB,IAAD,EAAU;AACdC,MAAAA,QAAQ,CAACuB,6BAA6B,CAACxB,IAAI,CAACA,IAAN,CAA9B,CAAR;AACAC,MAAAA,QAAQ,CAACP,mBAAmB,CAACM,IAAI,CAACW,OAAN,EAAe,SAAf,CAApB,CAAR;AACAV,MAAAA,QAAQ,CAACN,SAAS,EAAV,CAAR;AACA,aAAOK,IAAP;AACD,KAdI,WAeE,UAACyB,KAAD,EAAW;AAChBxB,MAAAA,QAAQ,CAACS,6BAA6B,CAACe,KAAD,EAAQjB,YAAR,CAA9B,CAAR;AACAP,MAAAA,QAAQ,CAACP,mBAAmB,CAAC+B,KAAK,CAACH,IAAN,CAAWX,OAAZ,EAAqB,OAArB,CAApB,CAAR;AACAd,MAAAA,KAAK,CAACgB,GAAN,CAAUa,kBAAV,CAA6BD,KAA7B,EAAoCxB,QAApC,EAA8CL,UAA9C;AACA,aAAO6B,KAAP;AACD,KApBI,aAqBI,YAAM;AACbxB,MAAAA,QAAQ,CAACR,YAAY,CAAC,wBAAD,CAAb,CAAR;AACD,KAvBI,CAAP;AAwBD,GA1CqC;AAAA,CAA/B;AA4CP,OAAO,IAAMmB,6BAA6B,GAAG,SAAhCA,6BAAgC,CAACe,MAAD,EAAY;AACvD,SAAO;AACLC,IAAAA,IAAI,EAAE,iDADD;AAELC,IAAAA,OAAO,EAAEF;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMH,6BAA6B,GAAG,SAAhCA,6BAAgC,CAACxB,IAAD,EAAU;AACrD,SAAO;AACL4B,IAAAA,IAAI,EAAE,iDADD;AAELC,IAAAA,OAAO,EAAE7B;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMU,6BAA6B,GAAG,SAAhCA,6BAAgC,CAACe,KAAD,EAAW;AACtD,SAAO;AACLG,IAAAA,IAAI,EAAE,+CADD;AAELC,IAAAA,OAAO,EAAEJ;AAFJ,GAAP;AAID,CALM","sourcesContent":["import { addLoader, removeLoader, enqueueNotification, hideModal, authLogout } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const postSaveNextTaskAction = (taskId, data) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } } } = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.postSaveNextTaskAction',\r\n  };\r\n\r\n  if (!taskId) {\r\n    dispatch(postSaveNextTaskActionFailure({ ...defaultError, message: 'Missing requests params' }));\r\n    dispatch(enqueueNotification('Missing requests params', 'error'));\r\n    dispatch(removeLoader('postSaveNextTaskAction'));\r\n    return;\r\n  }\r\n\r\n  dispatch(postSaveNextTaskActionRequest(taskId, data));\r\n  dispatch(addLoader('postSaveNextTaskAction'));\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.bpmService,\r\n      path: `workflow/task/${taskId}/next`,\r\n      data: data,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json, true))\r\n    .then((data) => {\r\n      dispatch(postSaveNextTaskActionSuccess(data.data));\r\n      dispatch(enqueueNotification(data.message, 'success'));\r\n      dispatch(hideModal());\r\n      return data;\r\n    })\r\n    .catch((error) => {\r\n      dispatch(postSaveNextTaskActionFailure(error, defaultError));\r\n      dispatch(enqueueNotification(error.json.message, 'error'));\r\n      utils.api.handleUnauthorized(error, dispatch, authLogout);\r\n      return error;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('postSaveNextTaskAction'));\r\n    });\r\n};\r\n\r\nexport const postSaveNextTaskActionRequest = (params) => {\r\n  return {\r\n    type: 'CLAIMS_TASK_PROCESSING_SAVE_NEXT_ACTION_REQUEST',\r\n    payload: params,\r\n  };\r\n};\r\n\r\nexport const postSaveNextTaskActionSuccess = (data) => {\r\n  return {\r\n    type: 'CLAIMS_TASK_PROCESSING_SAVE_NEXT_ACTION_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const postSaveNextTaskActionFailure = (error) => {\r\n  return {\r\n    type: 'CLAIMS_TASK_PROCESSING_SAVE_NEXT_ACTION_ERROR',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}