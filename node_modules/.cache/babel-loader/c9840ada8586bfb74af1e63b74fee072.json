{"ast":null,"code":"import { authLogout, addLoader, removeLoader } from 'stores';\nimport * as utils from 'utils';\nexport var getComplexityDivisionMatrixByComplexId = function getComplexityDivisionMatrixByComplexId(complexRuleValueId) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/claims.actions.getComplexityDivisionMatrixByComplexId'\n    };\n    dispatch(getComplexityDivisionMatrixByComplexIdRequest(complexRuleValueId));\n    dispatch(addLoader('getComplexityDivisionMatrixByComplexId'));\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.claimService,\n      path: \"api/data/claims-triage/complex/complex-values/\".concat(complexRuleValueId, \"/division-matrix\")\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(getComplexityDivisionMatrixByComplexIdSuccess(data.data));\n      return data.data;\n    }).catch(function (err) {\n      dispatch(getComplexityDivisionMatrixByComplexIdFailure(err, defaultError));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      return err;\n    }).finally(function () {\n      dispatch(removeLoader('getComplexityDivisionMatrixByComplexId'));\n    });\n  };\n};\nexport var getComplexityDivisionMatrixByComplexIdRequest = function getComplexityDivisionMatrixByComplexIdRequest(complexRuleValueId) {\n  return {\n    type: 'CLAIMS_COMPLEXITY_DIVISION_BY_COMPLEX_ID_GET_REQUEST',\n    payload: complexRuleValueId\n  };\n};\nexport var getComplexityDivisionMatrixByComplexIdSuccess = function getComplexityDivisionMatrixByComplexIdSuccess(data) {\n  return {\n    type: 'CLAIMS_COMPLEXITY_DIVISION_BY_COMPLEX_ID_GET_SUCCESS',\n    payload: data\n  };\n};\nexport var getComplexityDivisionMatrixByComplexIdFailure = function getComplexityDivisionMatrixByComplexIdFailure(err) {\n  return {\n    type: 'CLAIMS_COMPLEXITY_DIVISION_BY_COMPLEX_ID_GET_FAILURE',\n    payload: err\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.getComplexityDivisionMatrixByComplexId.js"],"names":["authLogout","addLoader","removeLoader","utils","getComplexityDivisionMatrixByComplexId","complexRuleValueId","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","getComplexityDivisionMatrixByComplexIdRequest","api","get","token","accessToken","claimService","path","then","response","handleResponse","json","handleNewData","data","getComplexityDivisionMatrixByComplexIdSuccess","catch","err","getComplexityDivisionMatrixByComplexIdFailure","handleUnauthorized","finally","type","payload"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,YAAhC,QAAoD,QAApD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAO,IAAMC,sCAAsC,GAAG,SAAzCA,sCAAyC,CAACC,kBAAD;AAAA,SAAwB,UAACC,QAAD,EAAWC,QAAX,EAAwB;AACpG;AADoG,oBAEzCA,QAAQ,EAFiC;AAAA,QAEpFC,IAFoF,aAE5FC,IAF4F,CAEpFD,IAFoF;AAAA,QAE1DE,QAF0D,aAE5EC,MAF4E,CAElEC,IAFkE,CAE1DF,QAF0D;;AAIpG,QAAMG,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE;AADa,KAArB;AAIAR,IAAAA,QAAQ,CAACS,6CAA6C,CAACV,kBAAD,CAA9C,CAAR;AACAC,IAAAA,QAAQ,CAACL,SAAS,CAAC,wCAAD,CAAV,CAAR;AAEA,WAAOE,KAAK,CAACa,GAAN,CACJC,GADI,CACA;AACHC,MAAAA,KAAK,EAAEV,IAAI,CAACW,WADT;AAEHT,MAAAA,QAAQ,EAAEA,QAAQ,CAACU,YAFhB;AAGHC,MAAAA,IAAI,0DAAmDhB,kBAAnD;AAHD,KADA,EAMJiB,IANI,CAMC,UAACC,QAAD;AAAA,aAAcpB,KAAK,CAACa,GAAN,CAAUQ,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAND,EAOJD,IAPI,CAOC,UAACG,IAAD;AAAA,aAAUtB,KAAK,CAACa,GAAN,CAAUU,aAAV,CAAwBD,IAAxB,CAAV;AAAA,KAPD,EAQJH,IARI,CAQC,UAACK,IAAD,EAAU;AACdrB,MAAAA,QAAQ,CAACsB,6CAA6C,CAACD,IAAI,CAACA,IAAN,CAA9C,CAAR;AACA,aAAOA,IAAI,CAACA,IAAZ;AACD,KAXI,EAYJE,KAZI,CAYE,UAACC,GAAD,EAAS;AACdxB,MAAAA,QAAQ,CAACyB,6CAA6C,CAACD,GAAD,EAAMjB,YAAN,CAA9C,CAAR;AACAV,MAAAA,KAAK,CAACa,GAAN,CAAUgB,kBAAV,CAA6BF,GAA7B,EAAkCxB,QAAlC,EAA4CN,UAA5C;AACA,aAAO8B,GAAP;AACD,KAhBI,EAiBJG,OAjBI,CAiBI,YAAM;AACb3B,MAAAA,QAAQ,CAACJ,YAAY,CAAC,wCAAD,CAAb,CAAR;AACD,KAnBI,CAAP;AAoBD,GA/BqD;AAAA,CAA/C;AAiCP,OAAO,IAAMa,6CAA6C,GAAG,SAAhDA,6CAAgD,CAACV,kBAAD,EAAwB;AACnF,SAAO;AACL6B,IAAAA,IAAI,EAAE,sDADD;AAELC,IAAAA,OAAO,EAAE9B;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMuB,6CAA6C,GAAG,SAAhDA,6CAAgD,CAACD,IAAD,EAAU;AACrE,SAAO;AACLO,IAAAA,IAAI,EAAE,sDADD;AAELC,IAAAA,OAAO,EAAER;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMI,6CAA6C,GAAG,SAAhDA,6CAAgD,CAACD,GAAD,EAAS;AACpE,SAAO;AACLI,IAAAA,IAAI,EAAE,sDADD;AAELC,IAAAA,OAAO,EAAEL;AAFJ,GAAP;AAID,CALM","sourcesContent":["import { authLogout, addLoader, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const getComplexityDivisionMatrixByComplexId = (complexRuleValueId) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } } } = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.getComplexityDivisionMatrixByComplexId',\r\n  };\r\n\r\n  dispatch(getComplexityDivisionMatrixByComplexIdRequest(complexRuleValueId));\r\n  dispatch(addLoader('getComplexityDivisionMatrixByComplexId'));\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.claimService,\r\n      path: `api/data/claims-triage/complex/complex-values/${complexRuleValueId}/division-matrix`,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(getComplexityDivisionMatrixByComplexIdSuccess(data.data));\r\n      return data.data;\r\n    })\r\n    .catch((err) => {\r\n      dispatch(getComplexityDivisionMatrixByComplexIdFailure(err, defaultError));\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('getComplexityDivisionMatrixByComplexId'));\r\n    });\r\n};\r\n\r\nexport const getComplexityDivisionMatrixByComplexIdRequest = (complexRuleValueId) => {\r\n  return {\r\n    type: 'CLAIMS_COMPLEXITY_DIVISION_BY_COMPLEX_ID_GET_REQUEST',\r\n    payload: complexRuleValueId,\r\n  };\r\n};\r\n\r\nexport const getComplexityDivisionMatrixByComplexIdSuccess = (data) => {\r\n  return {\r\n    type: 'CLAIMS_COMPLEXITY_DIVISION_BY_COMPLEX_ID_GET_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const getComplexityDivisionMatrixByComplexIdFailure = (err) => {\r\n  return {\r\n    type: 'CLAIMS_COMPLEXITY_DIVISION_BY_COMPLEX_ID_GET_FAILURE',\r\n    payload: err,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}