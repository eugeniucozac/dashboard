{"ast":null,"code":"import \"core-js/modules/es.array.concat\";\nimport * as utils from 'utils';\nimport { authLogout } from 'stores';\nexport var getTripLeads = function getTripLeads(lat, lng) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    dispatch(getTripLeadsRequest(lat, lng));\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.edge,\n      path: \"api/client/search/\".concat(lat, \"/\").concat(lng, \"/100\")\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleData(json);\n    }).then(function (data) {\n      dispatch(getTripLeadsSuccess(data)); // last then to return updated state data to components waiting for this promise\n      // ex: async Autocomplete (React-Select)\n\n      return getState().trip.leads;\n    })[\"catch\"](function (err) {\n      var errorParams = {\n        file: 'stores/trip.actions.getTripLeads',\n        message: 'API fetch error (trip.getTripLeads)'\n      };\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(getTripLeadsFailure(err));\n      return err;\n    });\n  };\n};\nexport var getTripLeadsRequest = function getTripLeadsRequest(lat, lng) {\n  return {\n    type: 'TRIP_LEADS_GET_REQUEST',\n    payload: {\n      lat: lat,\n      lng: lng\n    }\n  };\n};\nexport var getTripLeadsSuccess = function getTripLeadsSuccess(responseData) {\n  return {\n    type: 'TRIP_LEADS_GET_SUCCESS',\n    payload: responseData\n  };\n};\nexport var getTripLeadsFailure = function getTripLeadsFailure(error) {\n  return {\n    type: 'TRIP_LEADS_GET_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/trip/trip.actions.getLeads.js"],"names":["utils","authLogout","getTripLeads","lat","lng","dispatch","getState","auth","user","endpoint","config","vars","getTripLeadsRequest","api","get","token","accessToken","edge","path","then","response","handleResponse","json","handleData","data","getTripLeadsSuccess","trip","leads","err","errorParams","file","message","handleError","handleUnauthorized","getTripLeadsFailure","type","payload","responseData","error"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,QAA3B;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD,EAAMC,GAAN;AAAA,SAAc,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAChE;AADgE,oBAEPA,QAAQ,EAFD;AAAA,QAEhDC,IAFgD,aAExDC,IAFwD,CAEhDD,IAFgD;AAAA,QAEtBE,QAFsB,aAExCC,MAFwC,CAE9BC,IAF8B,CAEtBF,QAFsB;;AAIhEJ,IAAAA,QAAQ,CAACO,mBAAmB,CAACT,GAAD,EAAMC,GAAN,CAApB,CAAR;AAEA,WAAOJ,KAAK,CAACa,GAAN,CACJC,GADI,CACA;AACHC,MAAAA,KAAK,EAAER,IAAI,CAACS,WADT;AAEHP,MAAAA,QAAQ,EAAEA,QAAQ,CAACQ,IAFhB;AAGHC,MAAAA,IAAI,8BAAuBf,GAAvB,cAA8BC,GAA9B;AAHD,KADA,EAMJe,IANI,CAMC,UAACC,QAAD;AAAA,aAAcpB,KAAK,CAACa,GAAN,CAAUQ,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAND,EAOJD,IAPI,CAOC,UAACG,IAAD;AAAA,aAAUtB,KAAK,CAACa,GAAN,CAAUU,UAAV,CAAqBD,IAArB,CAAV;AAAA,KAPD,EAQJH,IARI,CAQC,UAACK,IAAD,EAAU;AACdnB,MAAAA,QAAQ,CAACoB,mBAAmB,CAACD,IAAD,CAApB,CAAR,CADc,CAGd;AACA;;AACA,aAAOlB,QAAQ,GAAGoB,IAAX,CAAgBC,KAAvB;AACD,KAdI,WAeE,UAACC,GAAD,EAAS;AACd,UAAMC,WAAW,GAAG;AAClBC,QAAAA,IAAI,EAAE,kCADY;AAElBC,QAAAA,OAAO,EAAE;AAFS,OAApB;AAKA/B,MAAAA,KAAK,CAACa,GAAN,CAAUmB,WAAV,CAAsBJ,GAAtB,EAA2BC,WAA3B;AACA7B,MAAAA,KAAK,CAACa,GAAN,CAAUoB,kBAAV,CAA6BL,GAA7B,EAAkCvB,QAAlC,EAA4CJ,UAA5C;AACAI,MAAAA,QAAQ,CAAC6B,mBAAmB,CAACN,GAAD,CAApB,CAAR;AACA,aAAOA,GAAP;AACD,KAzBI,CAAP;AA0BD,GAhC2B;AAAA,CAArB;AAkCP,OAAO,IAAMhB,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACT,GAAD,EAAMC,GAAN,EAAc;AAC/C,SAAO;AACL+B,IAAAA,IAAI,EAAE,wBADD;AAELC,IAAAA,OAAO,EAAE;AAAEjC,MAAAA,GAAG,EAAHA,GAAF;AAAOC,MAAAA,GAAG,EAAHA;AAAP;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMqB,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACY,YAAD,EAAkB;AACnD,SAAO;AACLF,IAAAA,IAAI,EAAE,wBADD;AAELC,IAAAA,OAAO,EAAEC;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMH,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACI,KAAD,EAAW;AAC5C,SAAO;AACLH,IAAAA,IAAI,EAAE,wBADD;AAELC,IAAAA,OAAO,EAAEE;AAFJ,GAAP;AAID,CALM","sourcesContent":["import * as utils from 'utils';\r\nimport { authLogout } from 'stores';\r\n\r\nexport const getTripLeads = (lat, lng) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  dispatch(getTripLeadsRequest(lat, lng));\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.edge,\r\n      path: `api/client/search/${lat}/${lng}/100`,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleData(json))\r\n    .then((data) => {\r\n      dispatch(getTripLeadsSuccess(data));\r\n\r\n      // last then to return updated state data to components waiting for this promise\r\n      // ex: async Autocomplete (React-Select)\r\n      return getState().trip.leads;\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        file: 'stores/trip.actions.getTripLeads',\r\n        message: 'API fetch error (trip.getTripLeads)',\r\n      };\r\n\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(getTripLeadsFailure(err));\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const getTripLeadsRequest = (lat, lng) => {\r\n  return {\r\n    type: 'TRIP_LEADS_GET_REQUEST',\r\n    payload: { lat, lng },\r\n  };\r\n};\r\n\r\nexport const getTripLeadsSuccess = (responseData) => {\r\n  return {\r\n    type: 'TRIP_LEADS_GET_SUCCESS',\r\n    payload: responseData,\r\n  };\r\n};\r\n\r\nexport const getTripLeadsFailure = (error) => {\r\n  return {\r\n    type: 'TRIP_LEADS_GET_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}