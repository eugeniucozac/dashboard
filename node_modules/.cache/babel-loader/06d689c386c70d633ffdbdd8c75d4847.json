{"ast":null,"code":"import \"core-js/modules/es.array.find\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n// app\nimport { addLoader, authLogout, enqueueNotification, hideModal, removeLoader, storeProcessingInstructionDocuments } from 'stores';\nimport * as utils from 'utils';\nimport * as constants from 'consts';\nexport var uploadPremiumTaxSignedLinesDocument = function uploadPremiumTaxSignedLinesDocument(formData) {\n  return function (dispatch, getState) {\n    var _businessProcesses$fi;\n\n    var state = getState(); // prettier-ignore\n\n    var _state$user = state.user,\n        auth = _state$user.auth,\n        id = _state$user.id,\n        endpoint = state.config.vars.endpoint,\n        businessProcesses = state.referenceData.businessProcesses;\n    var files = formData.files,\n        documents = formData.documents,\n        riskRef = formData.riskRef,\n        uploadDocumentType = formData.uploadDocumentType,\n        objectType = formData.objectType,\n        instruction = formData.instruction;\n    var businessProcess = businessProcesses === null || businessProcesses === void 0 ? void 0 : (_businessProcesses$fi = businessProcesses.find(function (bp) {\n      return bp.businessProcessID === (instruction === null || instruction === void 0 ? void 0 : instruction.businessProcessId);\n    })) === null || _businessProcesses$fi === void 0 ? void 0 : _businessProcesses$fi.businessProcessName;\n    var defaultError = {\n      file: 'stores/processingInstructions.actions.uploadPremiumTaxSignedLinesDocument'\n    };\n    dispatch(uploadPremiumTaxSignedLinesDocumentRequest(files));\n    dispatch(addLoader({\n      key: 'uploadPremiumTaxSignedLinesDocument',\n      message: utils.string.t('fileUpload.uploading')\n    }));\n    var validFormData = (riskRef === null || riskRef === void 0 ? void 0 : riskRef.departmentCode) && (riskRef === null || riskRef === void 0 ? void 0 : riskRef.policyUID) && (riskRef === null || riskRef === void 0 ? void 0 : riskRef.riskRefId) && (riskRef === null || riskRef === void 0 ? void 0 : riskRef.xbPolicyId) && uploadDocumentType && (riskRef === null || riskRef === void 0 ? void 0 : riskRef.xbInstanceId) && objectType && utils.generic.isValidArray(files, true);\n\n    if (!formData || !validFormData) {\n      dispatch(uploadPremiumTaxSignedLinesDocumentFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: utils.string.t('processingInstructions.missingUploadFileDataParameters')\n      })));\n      if (!(riskRef === null || riskRef === void 0 ? void 0 : riskRef.departmentCode)) dispatch(enqueueNotification('notification.fileUpload.upload.departmentCodeMissing', 'error'));else dispatch(enqueueNotification('notification.fileUpload.upload.fail', 'error'));\n      dispatch(removeLoader('uploadPremiumTaxSignedLinesDocument'));\n      return;\n    }\n\n    var form = new FormData();\n    files.forEach(function (fileObj) {\n      if (fileObj.file) {\n        form.append('uploadFiles', fileObj.file);\n      }\n    });\n    var processDocumentDTOJson = {\n      endorsementId: 0,\n      endorsementUid: null,\n      departmentCode: riskRef.departmentCode,\n      instructionId: instruction.id,\n      businessProcess: businessProcess,\n      policyUid: riskRef.policyUID,\n      policyRef: riskRef.riskRefId,\n      documentTypeId: null,\n      policyId: riskRef.xbPolicyId,\n      documentTypeDescription: uploadDocumentType,\n      sourceId: riskRef.xbInstanceId,\n      objectType: objectType,\n      documentSource: 'GXB',\n      // In future documentSource will be dynamic value and coming from riskreference object\n      createdBy: id //After RBAC implementation in the api side remove this createdBy\n\n    };\n    form.append('processDocumentDTOJson', JSON.stringify(processDocumentDTOJson));\n    return utils.api.multiPartPost({\n      token: auth.accessToken,\n      endpoint: endpoint.dmsService,\n      path: 'gxbUploadDocument',\n      data: form\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (json) {\n      var newFiles = json.data;\n      if (!utils.generic.isValidArray(newFiles)) return;\n      var newGxbDocs = [];\n      newFiles.forEach(function (file) {\n        var newFile = {};\n        newFile.departmentCode = file === null || file === void 0 ? void 0 : file.departmentCode;\n        newFile.folderUuid = file === null || file === void 0 ? void 0 : file.folderUid;\n        newFile.name = file === null || file === void 0 ? void 0 : file.documentName;\n        newFile.path = file === null || file === void 0 ? void 0 : file.documentPath;\n        newFile.policyId = file === null || file === void 0 ? void 0 : file.policyId;\n        newFile.sectionType = file === null || file === void 0 ? void 0 : file.sectionType;\n        newFile.source = file === null || file === void 0 ? void 0 : file.documentSource;\n        newFile.typeId = file === null || file === void 0 ? void 0 : file.documentTypeId;\n        newFile.uuid = file === null || file === void 0 ? void 0 : file.documentUid;\n        newFile.documentId = file === null || file === void 0 ? void 0 : file.documentId;\n        newFile.version = file === null || file === void 0 ? void 0 : file.version;\n        newGxbDocs.push(newFile);\n      });\n\n      var updatedDocuments = _objectSpread(_objectSpread(_objectSpread({}, documents), uploadDocumentType === constants.PI_PREMIUM_CALCULATION_SHEET && {\n        premiumTaxDocument: newGxbDocs[0]\n      }), uploadDocumentType === constants.PI_MARKET_SIGNED_SLIP && {\n        signedLinesDocument: newGxbDocs[0]\n      });\n\n      dispatch(storeProcessingInstructionDocuments(updatedDocuments));\n      dispatch(uploadPremiumTaxSignedLinesDocumentSuccess(json.data));\n      dispatch(enqueueNotification(json.message, 'success'));\n      return json.data;\n    })[\"catch\"](function (err) {\n      var errorParams = {\n        file: 'stores/processingInstructions.actions.uploadPremiumTaxSignedLinesDocument',\n        message: utils.string.t('processingInstructions.apiMultipartPostError(uploadPremiumTaxSignedLinesDocument))')\n      };\n      dispatch(uploadPremiumTaxSignedLinesDocumentFailure(err));\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n\n      if (err.response.status === constants.API_STATUS_NOT_FOUND) {\n        dispatch(enqueueNotification(err.json.message, 'error'));\n      } else {\n        dispatch(enqueueNotification('notification.fileUpload.upload.fail', 'error'));\n      }\n    })[\"finally\"](function () {\n      dispatch(removeLoader('uploadPremiumTaxSignedLinesDocument'));\n      dispatch(hideModal());\n      return;\n    });\n  };\n};\nexport var uploadPremiumTaxSignedLinesDocumentRequest = function uploadPremiumTaxSignedLinesDocumentRequest(payload) {\n  return {\n    type: 'UPLOAD_PREMIUM_TAX_SIGNED_LINES_DOCUMENT_REQUEST',\n    payload: payload\n  };\n};\nexport var uploadPremiumTaxSignedLinesDocumentSuccess = function uploadPremiumTaxSignedLinesDocumentSuccess(data) {\n  return {\n    type: 'UPLOAD_PREMIUM_TAX_SIGNED_LINES_DOCUMENT_SUCCESS',\n    payload: {\n      data: data\n    }\n  };\n};\nexport var uploadPremiumTaxSignedLinesDocumentFailure = function uploadPremiumTaxSignedLinesDocumentFailure(error) {\n  return {\n    type: 'UPLOAD_PREMIUM_TAX_SIGNED_LINES_DOCUMENT_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/processingInstructions/processingInstructions.actions.uploadPremiumTaxSignedLinesDocument.js"],"names":["addLoader","authLogout","enqueueNotification","hideModal","removeLoader","storeProcessingInstructionDocuments","utils","constants","uploadPremiumTaxSignedLinesDocument","formData","dispatch","getState","state","user","auth","id","endpoint","config","vars","businessProcesses","referenceData","files","documents","riskRef","uploadDocumentType","objectType","instruction","businessProcess","find","bp","businessProcessID","businessProcessId","businessProcessName","defaultError","file","uploadPremiumTaxSignedLinesDocumentRequest","key","message","string","t","validFormData","departmentCode","policyUID","riskRefId","xbPolicyId","xbInstanceId","generic","isValidArray","uploadPremiumTaxSignedLinesDocumentFailure","form","FormData","forEach","fileObj","append","processDocumentDTOJson","endorsementId","endorsementUid","instructionId","policyUid","policyRef","documentTypeId","policyId","documentTypeDescription","sourceId","documentSource","createdBy","JSON","stringify","api","multiPartPost","token","accessToken","dmsService","path","data","then","response","handleResponse","json","handleNewData","newFiles","newGxbDocs","newFile","folderUuid","folderUid","name","documentName","documentPath","sectionType","source","typeId","uuid","documentUid","documentId","version","push","updatedDocuments","PI_PREMIUM_CALCULATION_SHEET","premiumTaxDocument","PI_MARKET_SIGNED_SLIP","signedLinesDocument","uploadPremiumTaxSignedLinesDocumentSuccess","err","errorParams","handleError","handleUnauthorized","status","API_STATUS_NOT_FOUND","payload","type","error"],"mappings":"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","sourcesContent":["// app\r\nimport { addLoader, authLogout, enqueueNotification, hideModal, removeLoader, storeProcessingInstructionDocuments } from 'stores';\r\nimport * as utils from 'utils';\r\nimport * as constants from 'consts';\r\n\r\nexport const uploadPremiumTaxSignedLinesDocument = (formData) => (dispatch, getState) => {\r\n  const state = getState();\r\n\r\n  // prettier-ignore\r\n  const { user:{ auth, id}, config: { vars: { endpoint } },  referenceData: {businessProcesses} } = state;\r\n\r\n  const { files, documents, riskRef, uploadDocumentType, objectType, instruction } = formData;\r\n  const businessProcess = businessProcesses?.find((bp) => bp.businessProcessID === instruction?.businessProcessId)?.businessProcessName;\r\n\r\n  const defaultError = {\r\n    file: 'stores/processingInstructions.actions.uploadPremiumTaxSignedLinesDocument',\r\n  };\r\n\r\n  dispatch(uploadPremiumTaxSignedLinesDocumentRequest(files));\r\n  dispatch(addLoader({ key: 'uploadPremiumTaxSignedLinesDocument', message: utils.string.t('fileUpload.uploading') }));\r\n\r\n  const validFormData =\r\n    riskRef?.departmentCode &&\r\n    riskRef?.policyUID &&\r\n    riskRef?.riskRefId &&\r\n    riskRef?.xbPolicyId &&\r\n    uploadDocumentType &&\r\n    riskRef?.xbInstanceId &&\r\n    objectType &&\r\n    utils.generic.isValidArray(files, true);\r\n\r\n  if (!formData || !validFormData) {\r\n    dispatch(\r\n      uploadPremiumTaxSignedLinesDocumentFailure({\r\n        ...defaultError,\r\n        message: utils.string.t('processingInstructions.missingUploadFileDataParameters'),\r\n      })\r\n    );\r\n\r\n    if (!riskRef?.departmentCode) dispatch(enqueueNotification('notification.fileUpload.upload.departmentCodeMissing', 'error'));\r\n    else dispatch(enqueueNotification('notification.fileUpload.upload.fail', 'error'));\r\n\r\n    dispatch(removeLoader('uploadPremiumTaxSignedLinesDocument'));\r\n    return;\r\n  }\r\n\r\n  let form = new FormData();\r\n\r\n  files.forEach((fileObj) => {\r\n    if (fileObj.file) {\r\n      form.append('uploadFiles', fileObj.file);\r\n    }\r\n  });\r\n\r\n  const processDocumentDTOJson = {\r\n    endorsementId: 0,\r\n    endorsementUid: null,\r\n    departmentCode: riskRef.departmentCode,\r\n    instructionId: instruction.id,\r\n    businessProcess: businessProcess,\r\n    policyUid: riskRef.policyUID,\r\n    policyRef: riskRef.riskRefId,\r\n    documentTypeId: null,\r\n    policyId: riskRef.xbPolicyId,\r\n    documentTypeDescription: uploadDocumentType,\r\n    sourceId: riskRef.xbInstanceId,\r\n    objectType: objectType,\r\n    documentSource: 'GXB', // In future documentSource will be dynamic value and coming from riskreference object\r\n    createdBy: id, //After RBAC implementation in the api side remove this createdBy\r\n  };\r\n\r\n  form.append('processDocumentDTOJson', JSON.stringify(processDocumentDTOJson));\r\n\r\n  return utils.api\r\n    .multiPartPost({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.dmsService,\r\n      path: 'gxbUploadDocument',\r\n      data: form,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((json) => {\r\n      const newFiles = json.data;\r\n      if (!utils.generic.isValidArray(newFiles)) return;\r\n      const newGxbDocs = [];\r\n      newFiles.forEach((file) => {\r\n        let newFile = {};\r\n        newFile.departmentCode = file?.departmentCode;\r\n        newFile.folderUuid = file?.folderUid;\r\n        newFile.name = file?.documentName;\r\n        newFile.path = file?.documentPath;\r\n        newFile.policyId = file?.policyId;\r\n        newFile.sectionType = file?.sectionType;\r\n        newFile.source = file?.documentSource;\r\n        newFile.typeId = file?.documentTypeId;\r\n        newFile.uuid = file?.documentUid;\r\n        newFile.documentId = file?.documentId;\r\n        newFile.version = file?.version;\r\n        newGxbDocs.push(newFile);\r\n      });\r\n\r\n      const updatedDocuments = {\r\n        ...documents,\r\n        ...(uploadDocumentType === constants.PI_PREMIUM_CALCULATION_SHEET && { premiumTaxDocument: newGxbDocs[0] }),\r\n        ...(uploadDocumentType === constants.PI_MARKET_SIGNED_SLIP && { signedLinesDocument: newGxbDocs[0] }),\r\n      };\r\n\r\n      dispatch(storeProcessingInstructionDocuments(updatedDocuments));\r\n      dispatch(uploadPremiumTaxSignedLinesDocumentSuccess(json.data));\r\n      dispatch(enqueueNotification(json.message, 'success'));\r\n      return json.data;\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        file: 'stores/processingInstructions.actions.uploadPremiumTaxSignedLinesDocument',\r\n        message: utils.string.t('processingInstructions.apiMultipartPostError(uploadPremiumTaxSignedLinesDocument))'),\r\n      };\r\n\r\n      dispatch(uploadPremiumTaxSignedLinesDocumentFailure(err));\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      if (err.response.status === constants.API_STATUS_NOT_FOUND) {\r\n        dispatch(enqueueNotification(err.json.message, 'error'));\r\n      } else {\r\n        dispatch(enqueueNotification('notification.fileUpload.upload.fail', 'error'));\r\n      }\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('uploadPremiumTaxSignedLinesDocument'));\r\n      dispatch(hideModal());\r\n      return;\r\n    });\r\n};\r\n\r\nexport const uploadPremiumTaxSignedLinesDocumentRequest = (payload) => {\r\n  return {\r\n    type: 'UPLOAD_PREMIUM_TAX_SIGNED_LINES_DOCUMENT_REQUEST',\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const uploadPremiumTaxSignedLinesDocumentSuccess = (data) => {\r\n  return {\r\n    type: 'UPLOAD_PREMIUM_TAX_SIGNED_LINES_DOCUMENT_SUCCESS',\r\n    payload: {\r\n      data,\r\n    },\r\n  };\r\n};\r\n\r\nexport const uploadPremiumTaxSignedLinesDocumentFailure = (error) => {\r\n  return {\r\n    type: 'UPLOAD_PREMIUM_TAX_SIGNED_LINES_DOCUMENT_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}