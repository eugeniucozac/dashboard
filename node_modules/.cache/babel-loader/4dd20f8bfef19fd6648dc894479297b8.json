{"ast":null,"code":"import _defineProperty from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\forms\\\\AddInsured\\\\AddInsured.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux'; // app\n\nimport { AddInsuredView } from './AddInsured.view';\nimport { postInsured, getRiskCountries, getClients, selectRiskCountries, selectPartyClientsSorted } from 'stores';\nimport { productAdminSchema } from 'schemas';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nAddInsured.propTypes = {\n  submitHandler: PropTypes.func.isRequired,\n  handleClose: PropTypes.func.isRequired,\n  cancelHandler: PropTypes.func,\n  reInsured: PropTypes.bool\n};\nAddInsured.defaultProps = {\n  handleClose: function handleClose() {},\n  reInsured: false\n};\nexport default function AddInsured(_ref) {\n  _s();\n\n  var submitHandler = _ref.submitHandler,\n      handleClose = _ref.handleClose,\n      cancelHandler = _ref.cancelHandler,\n      reInsured = _ref.reInsured;\n  var dispatch = useDispatch();\n  var countries = useSelector(selectRiskCountries);\n  var clients = useSelector(selectPartyClientsSorted);\n\n  var _useState = useState({\n    countries: countries,\n    clients: clients\n  }),\n      _useState2 = _slicedToArray(_useState, 1),\n      options = _useState2[0];\n\n  useEffect(function () {\n    if (!utils.generic.isValidArray(options.countries, true)) {\n      dispatch(getRiskCountries());\n    }\n  }, [] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  useEffect(function () {\n    if (!utils.generic.isValidArray(options.clients, true)) {\n      dispatch(getClients({\n        size: 1000\n      }));\n    }\n  }, [] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  var hydrateFields = function hydrateFields(fields) {\n    if (!fields) return [];\n    return fields.map(function (field) {\n      return _objectSpread(_objectSpread(_objectSpread({}, field), {}, {\n        label: utils.string.t(field.label)\n      }, field.options && {\n        options: field.options.map(function (option) {\n          return _objectSpread(_objectSpread({}, option), {}, {\n            label: utils.string.t(option.label)\n          });\n        })\n      }), field.optionsDynamicKey && {\n        options: utils.form.getSelectOptions(field.optionsDynamicKey, _defineProperty({}, field.optionsDynamicKey, options[field.optionsDynamicKey]))\n      });\n    });\n  };\n\n  var handleSubmit = function handleSubmit(values) {\n    return dispatch(postInsured(values, true, reInsured)).then(function (response) {\n      var isSuccess = response && response.id && !response.ok; // success\n\n      if (isSuccess && utils.generic.isFunction(submitHandler)) {\n        if (utils.generic.isFunction(handleClose)) {\n          handleClose();\n        }\n\n        return submitHandler(response);\n      } // fail\n\n\n      handleCancel();\n    });\n  };\n\n  var handleCancel = function handleCancel() {\n    if (utils.generic.isFunction(cancelHandler)) {\n      cancelHandler();\n    }\n\n    if (utils.generic.isFunction(handleClose)) {\n      handleClose();\n    }\n  };\n\n  var _productAdminSchema$g = productAdminSchema.getSchema('insureds'),\n      fields = _productAdminSchema$g.fields;\n\n  var hydratedFields = [hydrateFields(fields)];\n  var actions = [{\n    name: 'submit',\n    label: utils.string.t('app.submit'),\n    handler: handleSubmit\n  }, {\n    name: 'cancel',\n    label: utils.string.t('app.cancel'),\n    handler: handleCancel\n  }];\n  return /*#__PURE__*/_jsxDEV(AddInsuredView, {\n    actions: actions,\n    fields: hydratedFields\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 10\n  }, this);\n}\n\n_s(AddInsured, \"JGZOhyKehasBip+yJzhwQMoFgLI=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = AddInsured;\nAddInsured.displayName = \"AddInsured\";\nAddInsured.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"AddInsured\",\n  \"props\": {\n    \"handleClose\": {\n      \"defaultValue\": {\n        \"value\": \"() => {}\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"reInsured\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"submitHandler\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"cancelHandler\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\forms\\\\AddInsured\\\\AddInsured.js\"] = {\n    name: \"AddInsured\",\n    docgenInfo: AddInsured.__docgenInfo,\n    path: \"src\\\\forms\\\\AddInsured\\\\AddInsured.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"AddInsured\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/forms/AddInsured/AddInsured.js"],"names":["React","useEffect","useState","PropTypes","useDispatch","useSelector","AddInsuredView","postInsured","getRiskCountries","getClients","selectRiskCountries","selectPartyClientsSorted","productAdminSchema","utils","AddInsured","propTypes","submitHandler","func","isRequired","handleClose","cancelHandler","reInsured","bool","defaultProps","dispatch","countries","clients","options","generic","isValidArray","size","hydrateFields","fields","map","field","label","string","t","option","optionsDynamicKey","form","getSelectOptions","handleSubmit","values","then","response","isSuccess","id","ok","isFunction","handleCancel","getSchema","hydratedFields","actions","name","handler"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC,C,CAEA;;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,WAAT,EAAsBC,gBAAtB,EAAwCC,UAAxC,EAAoDC,mBAApD,EAAyEC,wBAAzE,QAAyG,QAAzG;AACA,SAASC,kBAAT,QAAmC,SAAnC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;AAEAC,UAAU,CAACC,SAAX,GAAuB;AACrBC,EAAAA,aAAa,EAAEb,SAAS,CAACc,IAAV,CAAeC,UADT;AAErBC,EAAAA,WAAW,EAAEhB,SAAS,CAACc,IAAV,CAAeC,UAFP;AAGrBE,EAAAA,aAAa,EAAEjB,SAAS,CAACc,IAHJ;AAIrBI,EAAAA,SAAS,EAAElB,SAAS,CAACmB;AAJA,CAAvB;AAOAR,UAAU,CAACS,YAAX,GAA0B;AACxBJ,EAAAA,WAAW,EAAE,uBAAM,CAAE,CADG;AAExBE,EAAAA,SAAS,EAAE;AAFa,CAA1B;AAKA,eAAe,SAASP,UAAT,OAA8E;AAAA;;AAAA,MAAxDE,aAAwD,QAAxDA,aAAwD;AAAA,MAAzCG,WAAyC,QAAzCA,WAAyC;AAAA,MAA5BC,aAA4B,QAA5BA,aAA4B;AAAA,MAAbC,SAAa,QAAbA,SAAa;AAC3F,MAAMG,QAAQ,GAAGpB,WAAW,EAA5B;AACA,MAAMqB,SAAS,GAAGpB,WAAW,CAACK,mBAAD,CAA7B;AACA,MAAMgB,OAAO,GAAGrB,WAAW,CAACM,wBAAD,CAA3B;;AAH2F,kBAKzET,QAAQ,CAAC;AAAEuB,IAAAA,SAAS,EAATA,SAAF;AAAaC,IAAAA,OAAO,EAAPA;AAAb,GAAD,CALiE;AAAA;AAAA,MAKpFC,OALoF;;AAM3F1B,EAAAA,SAAS,CACP,YAAM;AACJ,QAAI,CAACY,KAAK,CAACe,OAAN,CAAcC,YAAd,CAA2BF,OAAO,CAACF,SAAnC,EAA8C,IAA9C,CAAL,EAA0D;AACxDD,MAAAA,QAAQ,CAAChB,gBAAgB,EAAjB,CAAR;AACD;AACF,GALM,EAMP,EANO,CAMJ;AANI,GAAT;AASAP,EAAAA,SAAS,CACP,YAAM;AACJ,QAAI,CAACY,KAAK,CAACe,OAAN,CAAcC,YAAd,CAA2BF,OAAO,CAACD,OAAnC,EAA4C,IAA5C,CAAL,EAAwD;AACtDF,MAAAA,QAAQ,CAACf,UAAU,CAAC;AAAEqB,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAX,CAAR;AACD;AACF,GALM,EAMP,EANO,CAMJ;AANI,GAAT;;AASA,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,MAAD,EAAY;AAChC,QAAI,CAACA,MAAL,EAAa,OAAO,EAAP;AAEb,WAAOA,MAAM,CAACC,GAAP,CAAW,UAACC,KAAD;AAAA,2DACbA,KADa;AAEhBC,QAAAA,KAAK,EAAEtB,KAAK,CAACuB,MAAN,CAAaC,CAAb,CAAeH,KAAK,CAACC,KAArB;AAFS,SAGZD,KAAK,CAACP,OAAN,IAAiB;AAAEA,QAAAA,OAAO,EAAEO,KAAK,CAACP,OAAN,CAAcM,GAAd,CAAkB,UAACK,MAAD;AAAA,iDAAkBA,MAAlB;AAA0BH,YAAAA,KAAK,EAAEtB,KAAK,CAACuB,MAAN,CAAaC,CAAb,CAAeC,MAAM,CAACH,KAAtB;AAAjC;AAAA,SAAlB;AAAX,OAHL,GAIZD,KAAK,CAACK,iBAAN,IAA2B;AAC7BZ,QAAAA,OAAO,EAAEd,KAAK,CAAC2B,IAAN,CAAWC,gBAAX,CAA4BP,KAAK,CAACK,iBAAlC,sBACNL,KAAK,CAACK,iBADA,EACoBZ,OAAO,CAACO,KAAK,CAACK,iBAAP,CAD3B;AADoB,OAJf;AAAA,KAAX,CAAP;AAUD,GAbD;;AAeA,MAAMG,YAAY,GAAG,SAAfA,YAAe,CAACC,MAAD,EAAY;AAC/B,WAAOnB,QAAQ,CAACjB,WAAW,CAACoC,MAAD,EAAS,IAAT,EAAetB,SAAf,CAAZ,CAAR,CAA+CuB,IAA/C,CAAoD,UAACC,QAAD,EAAc;AACvE,UAAMC,SAAS,GAAGD,QAAQ,IAAIA,QAAQ,CAACE,EAArB,IAA2B,CAACF,QAAQ,CAACG,EAAvD,CADuE,CAGvE;;AACA,UAAIF,SAAS,IAAIjC,KAAK,CAACe,OAAN,CAAcqB,UAAd,CAAyBjC,aAAzB,CAAjB,EAA0D;AACxD,YAAIH,KAAK,CAACe,OAAN,CAAcqB,UAAd,CAAyB9B,WAAzB,CAAJ,EAA2C;AACzCA,UAAAA,WAAW;AACZ;;AACD,eAAOH,aAAa,CAAC6B,QAAD,CAApB;AACD,OATsE,CAWvE;;;AACAK,MAAAA,YAAY;AACb,KAbM,CAAP;AAcD,GAfD;;AAiBA,MAAMA,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,QAAIrC,KAAK,CAACe,OAAN,CAAcqB,UAAd,CAAyB7B,aAAzB,CAAJ,EAA6C;AAC3CA,MAAAA,aAAa;AACd;;AACD,QAAIP,KAAK,CAACe,OAAN,CAAcqB,UAAd,CAAyB9B,WAAzB,CAAJ,EAA2C;AACzCA,MAAAA,WAAW;AACZ;AACF,GAPD;;AAxD2F,8BAiExEP,kBAAkB,CAACuC,SAAnB,CAA6B,UAA7B,CAjEwE;AAAA,MAiEnFnB,MAjEmF,yBAiEnFA,MAjEmF;;AAmE3F,MAAMoB,cAAc,GAAG,CAACrB,aAAa,CAACC,MAAD,CAAd,CAAvB;AAEA,MAAMqB,OAAO,GAAG,CACd;AACEC,IAAAA,IAAI,EAAE,QADR;AAEEnB,IAAAA,KAAK,EAAEtB,KAAK,CAACuB,MAAN,CAAaC,CAAb,CAAe,YAAf,CAFT;AAGEkB,IAAAA,OAAO,EAAEb;AAHX,GADc,EAMd;AACEY,IAAAA,IAAI,EAAE,QADR;AAEEnB,IAAAA,KAAK,EAAEtB,KAAK,CAACuB,MAAN,CAAaC,CAAb,CAAe,YAAf,CAFT;AAGEkB,IAAAA,OAAO,EAAEL;AAHX,GANc,CAAhB;AAaA,sBAAO,QAAC,cAAD;AAAgB,IAAA,OAAO,EAAEG,OAAzB;AAAkC,IAAA,MAAM,EAAED;AAA1C;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GAnFuBtC,U;UACLV,W,EACCC,W,EACFA,W;;;KAHMS,U;AAAAA,U","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n// app\r\nimport { AddInsuredView } from './AddInsured.view';\r\nimport { postInsured, getRiskCountries, getClients, selectRiskCountries, selectPartyClientsSorted } from 'stores';\r\nimport { productAdminSchema } from 'schemas';\r\nimport * as utils from 'utils';\r\n\r\nAddInsured.propTypes = {\r\n  submitHandler: PropTypes.func.isRequired,\r\n  handleClose: PropTypes.func.isRequired,\r\n  cancelHandler: PropTypes.func,\r\n  reInsured: PropTypes.bool,\r\n};\r\n\r\nAddInsured.defaultProps = {\r\n  handleClose: () => {},\r\n  reInsured: false,\r\n};\r\n\r\nexport default function AddInsured({ submitHandler, handleClose, cancelHandler, reInsured }) {\r\n  const dispatch = useDispatch();\r\n  const countries = useSelector(selectRiskCountries);\r\n  const clients = useSelector(selectPartyClientsSorted);\r\n\r\n  const [options] = useState({ countries, clients });\r\n  useEffect(\r\n    () => {\r\n      if (!utils.generic.isValidArray(options.countries, true)) {\r\n        dispatch(getRiskCountries());\r\n      }\r\n    },\r\n    [] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  useEffect(\r\n    () => {\r\n      if (!utils.generic.isValidArray(options.clients, true)) {\r\n        dispatch(getClients({ size: 1000 }));\r\n      }\r\n    },\r\n    [] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  const hydrateFields = (fields) => {\r\n    if (!fields) return [];\r\n\r\n    return fields.map((field) => ({\r\n      ...field,\r\n      label: utils.string.t(field.label),\r\n      ...(field.options && { options: field.options.map((option) => ({ ...option, label: utils.string.t(option.label) })) }),\r\n      ...(field.optionsDynamicKey && {\r\n        options: utils.form.getSelectOptions(field.optionsDynamicKey, {\r\n          [field.optionsDynamicKey]: options[field.optionsDynamicKey],\r\n        }),\r\n      }),\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = (values) => {\r\n    return dispatch(postInsured(values, true, reInsured)).then((response) => {\r\n      const isSuccess = response && response.id && !response.ok;\r\n\r\n      // success\r\n      if (isSuccess && utils.generic.isFunction(submitHandler)) {\r\n        if (utils.generic.isFunction(handleClose)) {\r\n          handleClose();\r\n        }\r\n        return submitHandler(response);\r\n      }\r\n\r\n      // fail\r\n      handleCancel();\r\n    });\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    if (utils.generic.isFunction(cancelHandler)) {\r\n      cancelHandler();\r\n    }\r\n    if (utils.generic.isFunction(handleClose)) {\r\n      handleClose();\r\n    }\r\n  };\r\n\r\n  const { fields } = productAdminSchema.getSchema('insureds');\r\n\r\n  const hydratedFields = [hydrateFields(fields)];\r\n\r\n  const actions = [\r\n    {\r\n      name: 'submit',\r\n      label: utils.string.t('app.submit'),\r\n      handler: handleSubmit,\r\n    },\r\n    {\r\n      name: 'cancel',\r\n      label: utils.string.t('app.cancel'),\r\n      handler: handleCancel,\r\n    },\r\n  ];\r\n\r\n  return <AddInsuredView actions={actions} fields={hydratedFields} />;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}