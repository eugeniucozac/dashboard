{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\PremiumProcessingCaseRfiResolve\\\\PremiumProcessingCaseRfiResolve.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as Yup from 'yup';\nimport { useHistory } from 'react-router'; // app\n\nimport PremiumProcessingCaseRfiResolveView from './PremiumProcessingCaseRfiResolve.view';\nimport { getRfiResolutionCodes, getCaseRFIDetails, selectRfiResolutionCodes, selectAssignedToUsers, getAssignedToUsersList, premiumProcessingResolveRFI, selectorDmsViewFiles, selectRefDataQueryCodes, getViewTableDocuments, selectCaseDetails } from 'stores';\nimport { useConfirmNavigation } from 'hooks';\nimport * as constants from 'consts';\nimport * as utils from 'utils';\nimport config from 'config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nPremiumProcessingCaseRfiResolve.propTypes = {\n  rfiDetails: PropTypes.object.isRequired,\n  isEditable: PropTypes.bool.isRequired,\n  isPageDirty: PropTypes.bool.isRequired,\n  isResolved: PropTypes.bool,\n  handlers: PropTypes.shape({\n    setIsPageDirty: PropTypes.func.isRequired\n  })\n};\nexport default function PremiumProcessingCaseRfiResolve(_ref) {\n  _s();\n\n  var _rfiDetails$caseId;\n\n  var rfiDetails = _ref.rfiDetails,\n      isPageDirty = _ref.isPageDirty,\n      isEditable = _ref.isEditable,\n      isResolved = _ref.isResolved,\n      handlers = _ref.handlers;\n  var dispatch = useDispatch();\n  var history = useHistory();\n  var queryCodes = useSelector(selectRefDataQueryCodes);\n  var caseDetails = useSelector(selectCaseDetails);\n  var selectAssignees = useSelector(selectAssignedToUsers);\n  var resolutionCodes = useSelector(selectRfiResolutionCodes);\n  var dmsViewFiles = useSelector(selectorDmsViewFiles);\n\n  var _useState = useState(constants.DMS_VIEW_TAB_VIEW),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedDmsTab = _useState2[0],\n      setSelectedDmsTab = _useState2[1];\n\n  var queryCode = queryCodes.find(function (queryCode) {\n    return (queryCode === null || queryCode === void 0 ? void 0 : queryCode.queryCodeDetails) === (rfiDetails === null || rfiDetails === void 0 ? void 0 : rfiDetails.queryCode);\n  });\n\n  var _useConfirmNavigation = useConfirmNavigation({\n    title: utils.string.t('navigation.form.titleClear'),\n    subtitle: utils.string.t('navigation.form.subtitle')\n  }),\n      confirmNavigation = _useConfirmNavigation.confirmNavigation;\n\n  var caseRFIBureau = (rfiDetails === null || rfiDetails === void 0 ? void 0 : rfiDetails.rfiType) === constants.BUREAU_RFITYPE;\n  var tabDetails = (caseDetails === null || caseDetails === void 0 ? void 0 : caseDetails.taskView) === constants.WORKBASKET || (caseDetails === null || caseDetails === void 0 ? void 0 : caseDetails.taskView) === constants.ALL_CASES;\n  var resolutionTypeInternals = utils.generic.isValidArray(resolutionCodes, true) ? resolutionCodes.filter(function (resolutionCodes) {\n    return resolutionCodes.rfiTypeID === constants.RFI_TYPE_FOR_QUERY_CODE;\n  }) : [];\n  var isAssignedToUserList = utils.generic.isValidArray(selectAssignees, true);\n\n  var fetchDmsDocuments = function fetchDmsDocuments(id) {\n    if (id) {\n      dispatch(getViewTableDocuments({\n        referenceId: id,\n        sectionType: constants.DMS_CONTEXT_RFI\n      }));\n    }\n  };\n\n  useEffect(function () {\n    if (utils.generic.isInvalidOrEmptyArray(resolutionCodes)) {\n      dispatch(getRfiResolutionCodes());\n    }\n\n    if (!isAssignedToUserList) {\n      dispatch(getAssignedToUsersList());\n    } // fetch RFI documents\n\n\n    fetchDmsDocuments(rfiDetails === null || rfiDetails === void 0 ? void 0 : rfiDetails.queryId);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    fetchDmsDocuments(rfiDetails === null || rfiDetails === void 0 ? void 0 : rfiDetails.queryId);\n  }, [rfiDetails === null || rfiDetails === void 0 ? void 0 : rfiDetails.queryId]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var resetForm = function resetForm(resetFn) {\n    if (utils.generic.isFunction(resetFn)) {\n      resetFn(utils.form.getInitialValues(fields), {\n        keepDirty: false\n      });\n    }\n  };\n\n  var handleCancel = function handleCancel(resetFn) {\n    if (isPageDirty) {\n      confirmNavigation(function () {\n        return resetForm(resetFn);\n      });\n    } else {\n      resetForm(resetFn);\n    }\n  };\n\n  var selectDmsTab = function selectDmsTab(tabName) {\n    setSelectedDmsTab(tabName);\n  };\n\n  var fields = [{\n    name: 'resolutionCode',\n    type: 'autocompletemui',\n    value: !isEditable && resolutionCodes ? resolutionCodes.find(function (option) {\n      return (option === null || option === void 0 ? void 0 : option.resolutionCd) === (rfiDetails === null || rfiDetails === void 0 ? void 0 : rfiDetails.resolutionCode);\n    }) || null : null,\n    options: resolutionTypeInternals,\n    optionKey: 'resolutionCodeID',\n    optionLabel: 'resolutionCodeDescription',\n    label: utils.string.t('premiumProcessing.rfi.resolutionCode'),\n    validation: !caseRFIBureau ? Yup.object().nullable().required(utils.string.t('validation.required')) : '',\n    muiComponentProps: {\n      disabled: !isEditable || tabDetails\n    }\n  }, {\n    name: 'typeYourResponse',\n    type: 'textarea',\n    value: !isEditable ? (rfiDetails === null || rfiDetails === void 0 ? void 0 : rfiDetails.resolutionComments) || '' : '',\n    validation: Yup.string().min(5, utils.string.t('validation.string.min')).max(4000, utils.string.t('validation.string.max')).required(utils.string.t('validation.required')),\n    label: isEditable ? utils.string.t('premiumProcessing.rfi.resolutionNotes') : utils.string.t('premiumProcessing.rfi.typeYourResponse'),\n    fullWidth: true,\n    muiComponentProps: {\n      inputProps: {\n        maxLength: 4000\n      },\n      multiline: true,\n      rows: 5,\n      rowsMax: 10,\n      disabled: !isEditable || tabDetails\n    }\n  }].concat(_toConsumableArray(rfiDetails.rfiType === constants.BUREAU_RFITYPE ? [{\n    name: 'bureauQueryDescription',\n    type: 'textarea',\n    label: utils.string.t('premiumProcessing.rfi.bureauQuery'),\n    value: rfiDetails === null || rfiDetails === void 0 ? void 0 : rfiDetails.bureauQuery,\n    muiComponentProps: {\n      inputProps: {\n        maxLength: 4000\n      },\n      multiline: true,\n      rows: 5,\n      rowsMax: 10,\n      disabled: true\n    },\n    validation: Yup.string().min(5, utils.string.t('validation.string.min')).max(4000, utils.string.t('validation.string.max'))\n  }] : []));\n  var actions = [{\n    name: 'cancel',\n    label: utils.string.t('app.cancel'),\n    handler: function handler(reset) {\n      return handleCancel(reset);\n    }\n  }, {\n    name: 'submit',\n    label: utils.string.t('premiumProcessing.rfi.resolveRfi'),\n    handler: function handler(reset) {\n      return function (values) {\n        if (values) {\n          var _values$resolutionCod;\n\n          handlers.setIsPageDirty(false);\n          dispatch(premiumProcessingResolveRFI({\n            queryId: rfiDetails === null || rfiDetails === void 0 ? void 0 : rfiDetails.queryId,\n            taskId: rfiDetails === null || rfiDetails === void 0 ? void 0 : rfiDetails.taskId,\n            resolutionCode: values === null || values === void 0 ? void 0 : (_values$resolutionCod = values.resolutionCode) === null || _values$resolutionCod === void 0 ? void 0 : _values$resolutionCod.resolutionCd,\n            resolutionComments: values === null || values === void 0 ? void 0 : values.typeYourResponse,\n            documentId: []\n          })).then(function (response) {\n            // success POST\n            if ((response === null || response === void 0 ? void 0 : response.status) === constants.API_RESPONSE_OK) {\n              reset();\n              history.push(\"\".concat(config.routes.premiumProcessing.root));\n            }\n          });\n        }\n      };\n    }\n  }];\n  var dms = {\n    context: constants.DMS_CONTEXT_CASE,\n    referenceId: rfiDetails === null || rfiDetails === void 0 ? void 0 : (_rfiDetails$caseId = rfiDetails.caseId) === null || _rfiDetails$caseId === void 0 ? void 0 : _rfiDetails$caseId.toString() // confirm with API which ID should be used for reference\n\n  };\n  var tabs = [{\n    value: constants.DMS_VIEW_TAB_VIEW,\n    label: utils.string.t('dms.wrapper.tabs.viewDocuments')\n  }]; // abort\n\n  if (!rfiDetails.taskId || !isResolved && utils.generic.isInvalidOrEmptyArray(resolutionCodes)) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(PremiumProcessingCaseRfiResolveView, {\n    fields: fields,\n    actions: actions,\n    rfiDetails: rfiDetails,\n    queryCode: queryCode,\n    dms: dms,\n    dmsTabs: tabs,\n    documents: dmsViewFiles,\n    selectedDmsTab: selectedDmsTab,\n    isEditable: isEditable,\n    isPageDirty: isPageDirty,\n    handlers: _objectSpread(_objectSpread({}, handlers), {}, {\n      selectDmsTab: selectDmsTab\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PremiumProcessingCaseRfiResolve, \"p3yR5XuqhbGnmYWRfMhArK7z75s=\", false, function () {\n  return [useDispatch, useHistory, useSelector, useSelector, useSelector, useSelector, useSelector, useConfirmNavigation];\n});\n\n_c = PremiumProcessingCaseRfiResolve;\n\nvar _c;\n\n$RefreshReg$(_c, \"PremiumProcessingCaseRfiResolve\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/PremiumProcessingCaseRfiResolve/PremiumProcessingCaseRfiResolve.js"],"names":["React","useEffect","useState","useDispatch","useSelector","PropTypes","Yup","useHistory","PremiumProcessingCaseRfiResolveView","getRfiResolutionCodes","getCaseRFIDetails","selectRfiResolutionCodes","selectAssignedToUsers","getAssignedToUsersList","premiumProcessingResolveRFI","selectorDmsViewFiles","selectRefDataQueryCodes","getViewTableDocuments","selectCaseDetails","useConfirmNavigation","constants","utils","config","PremiumProcessingCaseRfiResolve","propTypes","rfiDetails","object","isRequired","isEditable","bool","isPageDirty","isResolved","handlers","shape","setIsPageDirty","func","dispatch","history","queryCodes","caseDetails","selectAssignees","resolutionCodes","dmsViewFiles","DMS_VIEW_TAB_VIEW","selectedDmsTab","setSelectedDmsTab","queryCode","find","queryCodeDetails","title","string","t","subtitle","confirmNavigation","caseRFIBureau","rfiType","BUREAU_RFITYPE","tabDetails","taskView","WORKBASKET","ALL_CASES","resolutionTypeInternals","generic","isValidArray","filter","rfiTypeID","RFI_TYPE_FOR_QUERY_CODE","isAssignedToUserList","fetchDmsDocuments","id","referenceId","sectionType","DMS_CONTEXT_RFI","isInvalidOrEmptyArray","queryId","resetForm","resetFn","isFunction","form","getInitialValues","fields","keepDirty","handleCancel","selectDmsTab","tabName","name","type","value","option","resolutionCd","resolutionCode","options","optionKey","optionLabel","label","validation","nullable","required","muiComponentProps","disabled","resolutionComments","min","max","fullWidth","inputProps","maxLength","multiline","rows","rowsMax","bureauQuery","actions","handler","reset","values","taskId","typeYourResponse","documentId","then","response","status","API_RESPONSE_OK","push","routes","premiumProcessing","root","dms","context","DMS_CONTEXT_CASE","caseId","toString","tabs"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport * as Yup from 'yup';\r\nimport { useHistory } from 'react-router';\r\n\r\n// app\r\n\r\nimport PremiumProcessingCaseRfiResolveView from './PremiumProcessingCaseRfiResolve.view';\r\nimport {\r\n  getRfiResolutionCodes,\r\n  getCaseRFIDetails,\r\n  selectRfiResolutionCodes,\r\n  selectAssignedToUsers,\r\n  getAssignedToUsersList,\r\n  premiumProcessingResolveRFI,\r\n  selectorDmsViewFiles,\r\n  selectRefDataQueryCodes,\r\n  getViewTableDocuments,\r\n  selectCaseDetails,\r\n} from 'stores';\r\nimport { useConfirmNavigation } from 'hooks';\r\nimport * as constants from 'consts';\r\nimport * as utils from 'utils';\r\nimport config from 'config';\r\n\r\nPremiumProcessingCaseRfiResolve.propTypes = {\r\n  rfiDetails: PropTypes.object.isRequired,\r\n  isEditable: PropTypes.bool.isRequired,\r\n  isPageDirty: PropTypes.bool.isRequired,\r\n  isResolved: PropTypes.bool,\r\n  handlers: PropTypes.shape({\r\n    setIsPageDirty: PropTypes.func.isRequired,\r\n  }),\r\n};\r\nexport default function PremiumProcessingCaseRfiResolve({ rfiDetails, isPageDirty, isEditable, isResolved, handlers }) {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const queryCodes = useSelector(selectRefDataQueryCodes);\r\n  const caseDetails = useSelector(selectCaseDetails);\r\n  const selectAssignees = useSelector(selectAssignedToUsers);\r\n  const resolutionCodes = useSelector(selectRfiResolutionCodes);\r\n  const dmsViewFiles = useSelector(selectorDmsViewFiles);\r\n\r\n  const [selectedDmsTab, setSelectedDmsTab] = useState(constants.DMS_VIEW_TAB_VIEW);\r\n\r\n  const queryCode = queryCodes.find((queryCode) => queryCode?.queryCodeDetails === rfiDetails?.queryCode);\r\n\r\n  const { confirmNavigation } = useConfirmNavigation({\r\n    title: utils.string.t('navigation.form.titleClear'),\r\n    subtitle: utils.string.t('navigation.form.subtitle'),\r\n  });\r\n\r\n  const caseRFIBureau = rfiDetails?.rfiType === constants.BUREAU_RFITYPE;\r\n  const tabDetails = caseDetails?.taskView === constants.WORKBASKET || caseDetails?.taskView === constants.ALL_CASES;\r\n\r\n  const resolutionTypeInternals = utils.generic.isValidArray(resolutionCodes, true)\r\n    ? resolutionCodes.filter((resolutionCodes) => resolutionCodes.rfiTypeID === constants.RFI_TYPE_FOR_QUERY_CODE)\r\n    : [];\r\n\r\n  const isAssignedToUserList = utils.generic.isValidArray(selectAssignees, true);\r\n\r\n  const fetchDmsDocuments = (id) => {\r\n    if (id) {\r\n      dispatch(getViewTableDocuments({ referenceId: id, sectionType: constants.DMS_CONTEXT_RFI }));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (utils.generic.isInvalidOrEmptyArray(resolutionCodes)) {\r\n      dispatch(getRfiResolutionCodes());\r\n    }\r\n\r\n    if (!isAssignedToUserList) {\r\n      dispatch(getAssignedToUsersList());\r\n    }\r\n\r\n    // fetch RFI documents\r\n    fetchDmsDocuments(rfiDetails?.queryId);\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    fetchDmsDocuments(rfiDetails?.queryId);\r\n  }, [rfiDetails?.queryId]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const resetForm = (resetFn) => {\r\n    if (utils.generic.isFunction(resetFn)) {\r\n      resetFn(utils.form.getInitialValues(fields), { keepDirty: false });\r\n    }\r\n  };\r\n\r\n  const handleCancel = (resetFn) => {\r\n    if (isPageDirty) {\r\n      confirmNavigation(() => resetForm(resetFn));\r\n    } else {\r\n      resetForm(resetFn);\r\n    }\r\n  };\r\n\r\n  const selectDmsTab = (tabName) => {\r\n    setSelectedDmsTab(tabName);\r\n  };\r\n\r\n  const fields = [\r\n    {\r\n      name: 'resolutionCode',\r\n      type: 'autocompletemui',\r\n      value:\r\n        !isEditable && resolutionCodes\r\n          ? resolutionCodes.find((option) => option?.resolutionCd === rfiDetails?.resolutionCode) || null\r\n          : null,\r\n      options: resolutionTypeInternals,\r\n      optionKey: 'resolutionCodeID',\r\n      optionLabel: 'resolutionCodeDescription',\r\n      label: utils.string.t('premiumProcessing.rfi.resolutionCode'),\r\n      validation: !caseRFIBureau ? Yup.object().nullable().required(utils.string.t('validation.required')) : '',\r\n      muiComponentProps: {\r\n        disabled: !isEditable || tabDetails,\r\n      },\r\n    },\r\n    {\r\n      name: 'typeYourResponse',\r\n      type: 'textarea',\r\n      value: !isEditable ? rfiDetails?.resolutionComments || '' : '',\r\n      validation: Yup.string()\r\n        .min(5, utils.string.t('validation.string.min'))\r\n        .max(4000, utils.string.t('validation.string.max'))\r\n        .required(utils.string.t('validation.required')),\r\n      label: isEditable\r\n        ? utils.string.t('premiumProcessing.rfi.resolutionNotes')\r\n        : utils.string.t('premiumProcessing.rfi.typeYourResponse'),\r\n      fullWidth: true,\r\n      muiComponentProps: {\r\n        inputProps: {\r\n          maxLength: 4000,\r\n        },\r\n        multiline: true,\r\n        rows: 5,\r\n        rowsMax: 10,\r\n        disabled: !isEditable || tabDetails,\r\n      },\r\n    },\r\n    ...(rfiDetails.rfiType === constants.BUREAU_RFITYPE\r\n      ? [\r\n          {\r\n            name: 'bureauQueryDescription',\r\n            type: 'textarea',\r\n            label: utils.string.t('premiumProcessing.rfi.bureauQuery'),\r\n            value: rfiDetails?.bureauQuery,\r\n            muiComponentProps: {\r\n              inputProps: { maxLength: 4000 },\r\n              multiline: true,\r\n              rows: 5,\r\n              rowsMax: 10,\r\n              disabled: true,\r\n            },\r\n            validation: Yup.string().min(5, utils.string.t('validation.string.min')).max(4000, utils.string.t('validation.string.max')),\r\n          },\r\n        ]\r\n      : []),\r\n  ];\r\n\r\n  const actions = [\r\n    {\r\n      name: 'cancel',\r\n      label: utils.string.t('app.cancel'),\r\n      handler: (reset) => handleCancel(reset),\r\n    },\r\n    {\r\n      name: 'submit',\r\n      label: utils.string.t('premiumProcessing.rfi.resolveRfi'),\r\n\r\n      handler: (reset) => (values) => {\r\n        if (values) {\r\n          handlers.setIsPageDirty(false);\r\n          dispatch(\r\n            premiumProcessingResolveRFI({\r\n              queryId: rfiDetails?.queryId,\r\n              taskId: rfiDetails?.taskId,\r\n              resolutionCode: values?.resolutionCode?.resolutionCd,\r\n              resolutionComments: values?.typeYourResponse,\r\n              documentId: [],\r\n            })\r\n          ).then((response) => {\r\n            // success POST\r\n            if (response?.status === constants.API_RESPONSE_OK) {\r\n              reset();\r\n              history.push(`${config.routes.premiumProcessing.root}`);\r\n            }\r\n          });\r\n        }\r\n      },\r\n    },\r\n  ];\r\n\r\n  const dms = {\r\n    context: constants.DMS_CONTEXT_CASE,\r\n    referenceId: rfiDetails?.caseId?.toString(), // confirm with API which ID should be used for reference\r\n  };\r\n\r\n  const tabs = [\r\n    {\r\n      value: constants.DMS_VIEW_TAB_VIEW,\r\n      label: utils.string.t('dms.wrapper.tabs.viewDocuments'),\r\n    },\r\n  ];\r\n\r\n  // abort\r\n  if (!rfiDetails.taskId || (!isResolved && utils.generic.isInvalidOrEmptyArray(resolutionCodes))) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <PremiumProcessingCaseRfiResolveView\r\n      fields={fields}\r\n      actions={actions}\r\n      rfiDetails={rfiDetails}\r\n      queryCode={queryCode}\r\n      dms={dms}\r\n      dmsTabs={tabs}\r\n      documents={dmsViewFiles}\r\n      selectedDmsTab={selectedDmsTab}\r\n      isEditable={isEditable}\r\n      isPageDirty={isPageDirty}\r\n      handlers={{ ...handlers, selectDmsTab }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}