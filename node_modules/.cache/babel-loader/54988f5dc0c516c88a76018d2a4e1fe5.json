{"ast":null,"code":"import _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\forms\\\\DmsUploadFiles\\\\DmsUploadFiles.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux'; // app\n\nimport { DmsUploadFilesView } from './DmsUploadFiles.view';\nimport { hideModal, getDmsMetaData, selectRefDataNewDocumentTypesByContextSource, selectRefDataNewDocumentTypeLookUpByContextSource, selectDmsMetaData, selectorDmsViewFiles, selectSettlementCurrency, removeLoader, postDmsDocuments } from 'stores';\nimport * as constants from 'consts';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nDmsUploadFiles.propTypes = {\n  files: PropTypes.array.isRequired,\n  context: PropTypes.string.isRequired,\n  referenceId: PropTypes.string.isRequired,\n  sourceId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  documentTypeKey: PropTypes.oneOf(Object.values(constants.DMS_DOCUMENT_TYPE_SECTION_KEYS.type)),\n  searchParamsAfterUpload: PropTypes.shape({\n    referenceId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n    sectionType: PropTypes.string.isRequired\n  }),\n  postDmsDocumentsSuccess: PropTypes.func,\n  onClosingUploadModal: PropTypes.func\n};\nDmsUploadFiles.defaultProps = {\n  documentTypeKey: constants.DMS_DOCUMENT_TYPE_SECTION_KEYS.type.policy,\n  postDmsDocumentsSuccess: function postDmsDocumentsSuccess() {},\n  onClosingUploadModal: function onClosingUploadModal() {}\n};\nexport default function DmsUploadFiles(_ref) {\n  _s();\n\n  var files = _ref.files,\n      context = _ref.context,\n      referenceId = _ref.referenceId,\n      sourceId = _ref.sourceId,\n      documentTypeKey = _ref.documentTypeKey,\n      searchParamsAfterUpload = _ref.searchParamsAfterUpload,\n      postDmsDocumentsSuccess = _ref.postDmsDocumentsSuccess,\n      onClosingUploadModal = _ref.onClosingUploadModal;\n  var dispatch = useDispatch();\n  var filesLiteVersion = utils.dms.trimFileProperties(files);\n  var isDmsFromPi = utils.dmsFormatter.isDmsFromPi(documentTypeKey);\n  var showFolderFilter = !(isDmsFromPi || documentTypeKey === constants.DMS_DOCUMENT_TYPE_SECTION_KEYS.type.policy); // redux\n\n  var selectCurrencies = useSelector(selectSettlementCurrency);\n  var documentMetaData = useSelector(selectDmsMetaData);\n  var previousUploadedFiles = useSelector(selectorDmsViewFiles);\n  var xbInstanceId = sourceId ? sourceId : constants.DMS_CLAIM_SOURCE_ID;\n\n  var _utils$dmsFormatter$g = utils.dmsFormatter.getDocumentTypeFilterKeys(context, xbInstanceId, documentTypeKey),\n      dmsSectionKey = _utils$dmsFormatter$g.dmsSectionKey,\n      selectedSourceId = _utils$dmsFormatter$g.sourceId;\n\n  var documentTypesBeforeFilter = useSelector(dmsSectionKey === constants.DMS_DOCUMENT_TYPE_SECTION_KEYS.type.policy ? selectRefDataNewDocumentTypeLookUpByContextSource(dmsSectionKey, selectedSourceId) : selectRefDataNewDocumentTypesByContextSource(dmsSectionKey, selectedSourceId));\n\n  var _ref2 = isDmsFromPi && utils.dmsFormatter.getDocumentTypeInfo(documentTypeKey, selectedSourceId),\n      documentTypeDescription = _ref2.documentTypeDescription,\n      sectionKey = _ref2.sectionKey,\n      dmsSourceID = _ref2.dmsSourceID;\n\n  var documentTypesAfterFilter = (context === constants.DMS_CONTEXT_POLICY || context === constants.DMS_CONTEXT_PROCESSING_INSTRUCTION) && isDmsFromPi ? documentTypesBeforeFilter === null || documentTypesBeforeFilter === void 0 ? void 0 : documentTypesBeforeFilter.filter(function (type) {\n    return type.documentTypeDescription === documentTypeDescription && type.sectionKey === sectionKey && type.sourceID === dmsSourceID;\n  }) : documentTypesBeforeFilter; // state\n\n  var _useState = useState(filesLiteVersion),\n      _useState2 = _slicedToArray(_useState, 2),\n      activeFiles = _useState2[0],\n      setActiveFiles = _useState2[1];\n\n  var _useState3 = useState(documentTypesAfterFilter),\n      _useState4 = _slicedToArray(_useState3, 2),\n      refinedDocTypes = _useState4[0],\n      setRefinedDocTypes = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isMetaDataLoaded = _useState6[0],\n      setIsMetaDataLoaded = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      showDocTypeRequired = _useState8[0],\n      setShowDocTypeRequired = _useState8[1];\n\n  var _useState9 = useState(true),\n      _useState10 = _slicedToArray(_useState9, 2),\n      canSubmit = _useState10[0],\n      setCanSubmit = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      filesSubmitted = _useState12[0],\n      setFilesSubmitted = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      isUploading = _useState14[0],\n      setIsUploading = _useState14[1];\n\n  var _useState15 = useState((filesLiteVersion === null || filesLiteVersion === void 0 ? void 0 : filesLiteVersion.map(function () {\n    return false;\n  })) || []),\n      _useState16 = _slicedToArray(_useState15, 2),\n      uploadStatus = _useState16[0],\n      setUploadStatus = _useState16[1];\n\n  var _useState17 = useState([]),\n      _useState18 = _slicedToArray(_useState17, 2),\n      postUploadMetaData = _useState18[0],\n      setPostUploadMetaData = _useState18[1];\n\n  var tableFormArrayRef = useRef(utils.dms.getFilesForm(activeFiles || []));\n  var duplicateFileIndexes = utils.dms.getDuplicateFileIndexes(activeFiles, previousUploadedFiles);\n  var folderTypes = utils.dms.getFolderTypes(documentTypesAfterFilter);\n  var currencies = utils.currency.listWithCodeAndCurrency(selectCurrencies);\n  var cols = [{\n    id: 'fileName',\n    label: utils.string.t('claims.lossInformation.dmsUploadDocument.cols.fileName')\n  }, {\n    id: 'documentType',\n    label: utils.string.t('claims.lossInformation.dmsUploadDocument.cols.documentType')\n  }, {\n    id: 'documentClassification',\n    label: utils.string.t('claims.lossInformation.dmsUploadDocument.cols.documentClassification')\n  }, {\n    id: 'removeDoc',\n    empty: true\n  }]; // handlers\n\n  var handleFolderTypeSelection = function handleFolderTypeSelection(event, value) {\n    setRefinedDocTypes(utils.dms.refinedDocTypeByFolderName(value, documentTypesAfterFilter));\n  };\n\n  var handleRemoveFiles = function handleRemoveFiles(removalIndex) {\n    var newList = _toConsumableArray(activeFiles);\n\n    newList.splice(removalIndex, 1);\n\n    var newForm = _toConsumableArray(tableFormArrayRef === null || tableFormArrayRef === void 0 ? void 0 : tableFormArrayRef.current);\n\n    newForm.splice(removalIndex, 1);\n    tableFormArrayRef.current = _toConsumableArray(newForm);\n    setActiveFiles(newList);\n    checkIfInvalidFiles(tableFormArrayRef === null || tableFormArrayRef === void 0 ? void 0 : tableFormArrayRef.current);\n  };\n\n  var handleTableForm = function handleTableForm(index, rowFormState) {\n    var _rowFormState$formDoc;\n\n    var newForm = _toConsumableArray(tableFormArrayRef === null || tableFormArrayRef === void 0 ? void 0 : tableFormArrayRef.current);\n\n    newForm[index] = {\n      formFileName: (rowFormState === null || rowFormState === void 0 ? void 0 : rowFormState.formFileName) || '',\n      formDocType: rowFormState === null || rowFormState === void 0 ? void 0 : rowFormState.formDocType,\n      formDocClassificationType: {\n        id: (rowFormState === null || rowFormState === void 0 ? void 0 : (_rowFormState$formDoc = rowFormState.formDocClassificationType) === null || _rowFormState$formDoc === void 0 ? void 0 : _rowFormState$formDoc.id) || 0\n      },\n      paymentFields: rowFormState === null || rowFormState === void 0 ? void 0 : rowFormState.paymentFields,\n      isDuplicateFileName: (rowFormState === null || rowFormState === void 0 ? void 0 : rowFormState.isDuplicateFileName) || false,\n      isInvalidFileName: (rowFormState === null || rowFormState === void 0 ? void 0 : rowFormState.isInvalidFileName) || false\n    };\n    tableFormArrayRef.current = _toConsumableArray(newForm);\n    checkIfInvalidFiles(tableFormArrayRef === null || tableFormArrayRef === void 0 ? void 0 : tableFormArrayRef.current);\n  };\n\n  var checkIfInvalidFiles = function checkIfInvalidFiles(fileFormArray) {\n    var invalidCondition = utils.generic.isValidArray(fileFormArray, true) && fileFormArray.every(function (fileForm) {\n      return !(fileForm === null || fileForm === void 0 ? void 0 : fileForm.isInvalidFileName);\n    });\n    if (!canSubmit && invalidCondition) setCanSubmit(true);\n    if (canSubmit && !invalidCondition) setCanSubmit(false);\n  };\n\n  var checkIfSubmittable = function checkIfSubmittable(fileFormArray) {\n    var submitCondition = utils.generic.isValidArray(fileFormArray, true) && fileFormArray.every(function (fileForm) {\n      var _fileForm$formDocType;\n\n      return (fileForm === null || fileForm === void 0 ? void 0 : (_fileForm$formDocType = fileForm.formDocType) === null || _fileForm$formDocType === void 0 ? void 0 : _fileForm$formDocType.id) && !(fileForm === null || fileForm === void 0 ? void 0 : fileForm.isInvalidFileName);\n    });\n    setCanSubmit(submitCondition);\n    return submitCondition;\n  };\n\n  var handleFilesSubmission = function handleFilesSubmission(e) {\n    e.preventDefault();\n    var filesFormData = tableFormArrayRef === null || tableFormArrayRef === void 0 ? void 0 : tableFormArrayRef.current;\n\n    if (checkIfSubmittable(filesFormData)) {\n      setIsUploading(true);\n      makeUploadCall(filesFormData);\n    } else {\n      setShowDocTypeRequired(true);\n    }\n  };\n\n  var makeUploadCall = function makeUploadCall(filesFormData) {\n    var submitData = utils.dms.constructUploadDocsRequest(context, filesLiteVersion, filesFormData, documentMetaData);\n    var submitFiles = utils.dms.getFullFileProperties(files, filesLiteVersion);\n    dispatch(postDmsDocuments({\n      context: context,\n      documentTypeKey: documentTypeKey,\n      submitData: submitData,\n      submitFiles: submitFiles\n    })).then(function (data) {\n      var _data$status;\n\n      setIsUploading(false);\n\n      if ((data === null || data === void 0 ? void 0 : (_data$status = data.status) === null || _data$status === void 0 ? void 0 : _data$status.toLowerCase()) === constants.API_RESPONSE_OK.toLowerCase()) {\n        var _data$data, _data$data2;\n\n        setFilesSubmitted(true);\n        markUploadFailedFiles(data === null || data === void 0 ? void 0 : data.data);\n        postDmsDocumentsSuccess(data);\n        setPostUploadMetaData(utils.dms.getDocMetaDataAfterUpload(data === null || data === void 0 ? void 0 : (_data$data = data.data) === null || _data$data === void 0 ? void 0 : _data$data.documentDto));\n\n        if (utils.dms.checkIfAllUploaded(data === null || data === void 0 ? void 0 : (_data$data2 = data.data) === null || _data$data2 === void 0 ? void 0 : _data$data2.documentDto)) {\n          dispatch(hideModal('DMS_UPLOAD_FILES'));\n          onClosingUploadModal();\n        }\n      }\n    });\n  };\n\n  var markUploadFailedFiles = function markUploadFailedFiles(data) {\n    var _ref3;\n\n    var docDtoInfo = (data === null || data === void 0 ? void 0 : data.documentDto) || [];\n    var uploadFiles = docDtoInfo === null || docDtoInfo === void 0 ? void 0 : docDtoInfo.map(function (eachFile) {\n      return eachFile === null || eachFile === void 0 ? void 0 : eachFile.documentName;\n    });\n    var uploadStatus = docDtoInfo === null || docDtoInfo === void 0 ? void 0 : docDtoInfo.map(function (eachFile) {\n      return eachFile === null || eachFile === void 0 ? void 0 : eachFile.documentUploaded;\n    });\n    if (utils.dms.checkIfAllUploaded(docDtoInfo)) setCanSubmit(false);\n    var newList = (_ref3 = _toConsumableArray(activeFiles)) === null || _ref3 === void 0 ? void 0 : _ref3.filter(function (item, index) {\n      return !uploadStatus[index];\n    });\n\n    var currentForm = _toConsumableArray(tableFormArrayRef === null || tableFormArrayRef === void 0 ? void 0 : tableFormArrayRef.current);\n\n    var removalIndex = [];\n    var newForm = currentForm === null || currentForm === void 0 ? void 0 : currentForm.filter(function (item) {\n      var matchIndex = uploadFiles === null || uploadFiles === void 0 ? void 0 : uploadFiles.indexOf(item === null || item === void 0 ? void 0 : item.formFileName);\n      removalIndex.push(matchIndex);\n      return matchIndex > -1 && !uploadStatus[matchIndex];\n    });\n\n    if (utils.generic.isValidArray(removalIndex, true)) {\n      removalIndex.forEach(function (ind) {\n        uploadStatus.splice(ind, 1);\n      });\n    }\n\n    tableFormArrayRef.current = _toConsumableArray(newForm);\n    setActiveFiles(newList);\n    setUploadStatus(uploadStatus);\n  };\n\n  var handleRetrySingleFile = function handleRetrySingleFile(retryIndex) {\n    var submitData = utils.dms.constructUploadDocsRequest(context, [filesLiteVersion[retryIndex]], [tableFormArrayRef === null || tableFormArrayRef === void 0 ? void 0 : tableFormArrayRef.current[retryIndex]], documentMetaData);\n    var submitFiles = utils.dms.getFullFileProperties([files[retryIndex]], [filesLiteVersion[retryIndex]]);\n    dispatch(postDmsDocuments({\n      context: context,\n      documentTypeKey: documentTypeKey,\n      submitData: submitData,\n      submitFiles: submitFiles\n    })).then(function (data) {\n      var _data$status2;\n\n      setIsUploading(false);\n\n      if ((data === null || data === void 0 ? void 0 : (_data$status2 = data.status) === null || _data$status2 === void 0 ? void 0 : _data$status2.toLowerCase()) === constants.API_RESPONSE_OK.toLowerCase()) {\n        var _data$data3;\n\n        setFilesSubmitted(true);\n        markUploadFailedFiles(data === null || data === void 0 ? void 0 : data.data);\n\n        if (utils.dms.checkIfAllUploaded(data === null || data === void 0 ? void 0 : (_data$data3 = data.data) === null || _data$data3 === void 0 ? void 0 : _data$data3.documentDto)) {\n          dispatch(hideModal('DMS_UPLOAD_FILES'));\n          postDmsDocumentsSuccess(data);\n          onClosingUploadModal();\n        }\n      }\n    });\n  };\n\n  var handleCancel = function handleCancel() {\n    dispatch(hideModal('DMS_UPLOAD_FILES'));\n    onClosingUploadModal();\n  };\n\n  useEffect(function () {\n    dispatch(getDmsMetaData(context, xbInstanceId, referenceId)).then(function (data) {\n      setIsMetaDataLoaded((data === null || data === void 0 ? void 0 : data.status) === constants.API_RESPONSE_OK);\n    });\n    dispatch(removeLoader('DmsUploadFiles'));\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var resetDocTypeRequired = function resetDocTypeRequired() {\n    setShowDocTypeRequired(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(DmsUploadFilesView, {\n    context: context,\n    files: activeFiles,\n    duplicateFileIndexes: duplicateFileIndexes,\n    cols: cols,\n    currencies: currencies,\n    folderTypes: folderTypes,\n    documentTypes: refinedDocTypes,\n    isMetaDataLoaded: isMetaDataLoaded,\n    showDocTypeRequired: showDocTypeRequired,\n    canSubmit: canSubmit,\n    filesSubmitted: filesSubmitted,\n    isUploading: isUploading,\n    uploadStatus: uploadStatus,\n    isDmsFromPi: isDmsFromPi,\n    showFolderFilter: showFolderFilter,\n    postUploadMetaData: postUploadMetaData,\n    resetDocTypeRequired: resetDocTypeRequired,\n    handlers: {\n      handleFolderTypeSelection: handleFolderTypeSelection,\n      handleRemoveFiles: handleRemoveFiles,\n      handleTableForm: handleTableForm,\n      handleFilesSubmission: handleFilesSubmission,\n      handleRetrySingleFile: handleRetrySingleFile,\n      handleCancel: handleCancel\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 270,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DmsUploadFiles, \"iGZfVxnRMCF28FSXKDYQSbMmQyk=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = DmsUploadFiles;\n\nvar _c;\n\n$RefreshReg$(_c, \"DmsUploadFiles\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/forms/DmsUploadFiles/DmsUploadFiles.js"],"names":["React","useState","useEffect","useRef","PropTypes","useDispatch","useSelector","DmsUploadFilesView","hideModal","getDmsMetaData","selectRefDataNewDocumentTypesByContextSource","selectRefDataNewDocumentTypeLookUpByContextSource","selectDmsMetaData","selectorDmsViewFiles","selectSettlementCurrency","removeLoader","postDmsDocuments","constants","utils","DmsUploadFiles","propTypes","files","array","isRequired","context","string","referenceId","sourceId","oneOfType","number","documentTypeKey","oneOf","Object","values","DMS_DOCUMENT_TYPE_SECTION_KEYS","type","searchParamsAfterUpload","shape","sectionType","postDmsDocumentsSuccess","func","onClosingUploadModal","defaultProps","policy","dispatch","filesLiteVersion","dms","trimFileProperties","isDmsFromPi","dmsFormatter","showFolderFilter","selectCurrencies","documentMetaData","previousUploadedFiles","xbInstanceId","DMS_CLAIM_SOURCE_ID","getDocumentTypeFilterKeys","dmsSectionKey","selectedSourceId","documentTypesBeforeFilter","getDocumentTypeInfo","documentTypeDescription","sectionKey","dmsSourceID","documentTypesAfterFilter","DMS_CONTEXT_POLICY","DMS_CONTEXT_PROCESSING_INSTRUCTION","filter","sourceID","activeFiles","setActiveFiles","refinedDocTypes","setRefinedDocTypes","isMetaDataLoaded","setIsMetaDataLoaded","showDocTypeRequired","setShowDocTypeRequired","canSubmit","setCanSubmit","filesSubmitted","setFilesSubmitted","isUploading","setIsUploading","map","uploadStatus","setUploadStatus","postUploadMetaData","setPostUploadMetaData","tableFormArrayRef","getFilesForm","duplicateFileIndexes","getDuplicateFileIndexes","folderTypes","getFolderTypes","currencies","currency","listWithCodeAndCurrency","cols","id","label","t","empty","handleFolderTypeSelection","event","value","refinedDocTypeByFolderName","handleRemoveFiles","removalIndex","newList","splice","newForm","current","checkIfInvalidFiles","handleTableForm","index","rowFormState","formFileName","formDocType","formDocClassificationType","paymentFields","isDuplicateFileName","isInvalidFileName","fileFormArray","invalidCondition","generic","isValidArray","every","fileForm","checkIfSubmittable","submitCondition","handleFilesSubmission","e","preventDefault","filesFormData","makeUploadCall","submitData","constructUploadDocsRequest","submitFiles","getFullFileProperties","then","data","status","toLowerCase","API_RESPONSE_OK","markUploadFailedFiles","getDocMetaDataAfterUpload","documentDto","checkIfAllUploaded","docDtoInfo","uploadFiles","eachFile","documentName","documentUploaded","item","currentForm","matchIndex","indexOf","push","forEach","ind","handleRetrySingleFile","retryIndex","handleCancel","resetDocTypeRequired"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n// app\r\nimport { DmsUploadFilesView } from './DmsUploadFiles.view';\r\nimport {\r\n  hideModal,\r\n  getDmsMetaData,\r\n  selectRefDataNewDocumentTypesByContextSource,\r\n  selectRefDataNewDocumentTypeLookUpByContextSource,\r\n  selectDmsMetaData,\r\n  selectorDmsViewFiles,\r\n  selectSettlementCurrency,\r\n  removeLoader,\r\n  postDmsDocuments,\r\n} from 'stores';\r\nimport * as constants from 'consts';\r\nimport * as utils from 'utils';\r\n\r\nDmsUploadFiles.propTypes = {\r\n  files: PropTypes.array.isRequired,\r\n  context: PropTypes.string.isRequired,\r\n  referenceId: PropTypes.string.isRequired,\r\n  sourceId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n  documentTypeKey: PropTypes.oneOf(Object.values(constants.DMS_DOCUMENT_TYPE_SECTION_KEYS.type)),\r\n  searchParamsAfterUpload: PropTypes.shape({\r\n    referenceId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\r\n    sectionType: PropTypes.string.isRequired,\r\n  }),\r\n  postDmsDocumentsSuccess: PropTypes.func,\r\n  onClosingUploadModal: PropTypes.func,\r\n};\r\n\r\nDmsUploadFiles.defaultProps = {\r\n  documentTypeKey: constants.DMS_DOCUMENT_TYPE_SECTION_KEYS.type.policy,\r\n  postDmsDocumentsSuccess: () => { },\r\n  onClosingUploadModal: () => { },\r\n};\r\n\r\nexport default function DmsUploadFiles({\r\n  files,\r\n  context,\r\n  referenceId,\r\n  sourceId,\r\n  documentTypeKey,\r\n  searchParamsAfterUpload,\r\n  postDmsDocumentsSuccess,\r\n  onClosingUploadModal,\r\n}) {\r\n  const dispatch = useDispatch();\r\n\r\n  const filesLiteVersion = utils.dms.trimFileProperties(files);\r\n  const isDmsFromPi = utils.dmsFormatter.isDmsFromPi(documentTypeKey);\r\n  const showFolderFilter = !(isDmsFromPi || documentTypeKey === constants.DMS_DOCUMENT_TYPE_SECTION_KEYS.type.policy);\r\n\r\n  // redux\r\n  const selectCurrencies = useSelector(selectSettlementCurrency);\r\n  const documentMetaData = useSelector(selectDmsMetaData);\r\n  const previousUploadedFiles = useSelector(selectorDmsViewFiles);\r\n\r\n  const xbInstanceId = sourceId ? sourceId : constants.DMS_CLAIM_SOURCE_ID;\r\n\r\n  const { dmsSectionKey, sourceId: selectedSourceId } = utils.dmsFormatter.getDocumentTypeFilterKeys(context, xbInstanceId, documentTypeKey);\r\n  const documentTypesBeforeFilter = useSelector(\r\n    dmsSectionKey === constants.DMS_DOCUMENT_TYPE_SECTION_KEYS.type.policy\r\n      ? selectRefDataNewDocumentTypeLookUpByContextSource(dmsSectionKey, selectedSourceId)\r\n      : selectRefDataNewDocumentTypesByContextSource(dmsSectionKey, selectedSourceId)\r\n  );\r\n\r\n  const { documentTypeDescription, sectionKey, dmsSourceID } =\r\n    isDmsFromPi && utils.dmsFormatter.getDocumentTypeInfo(documentTypeKey, selectedSourceId);\r\n\r\n  const documentTypesAfterFilter =\r\n    (context === constants.DMS_CONTEXT_POLICY\r\n      || context === constants.DMS_CONTEXT_PROCESSING_INSTRUCTION) && isDmsFromPi ?\r\n      documentTypesBeforeFilter?.filter(\r\n        (type) => (\r\n          type.documentTypeDescription === documentTypeDescription\r\n          && type.sectionKey === sectionKey\r\n          && type.sourceID === dmsSourceID\r\n        )\r\n      ) : documentTypesBeforeFilter;\r\n\r\n  // state\r\n  const [activeFiles, setActiveFiles] = useState(filesLiteVersion);\r\n  const [refinedDocTypes, setRefinedDocTypes] = useState(documentTypesAfterFilter);\r\n  const [isMetaDataLoaded, setIsMetaDataLoaded] = useState(false);\r\n  const [showDocTypeRequired, setShowDocTypeRequired] = useState(false);\r\n  const [canSubmit, setCanSubmit] = useState(true);\r\n  const [filesSubmitted, setFilesSubmitted] = useState(false);\r\n  const [isUploading, setIsUploading] = useState(false);\r\n  const [uploadStatus, setUploadStatus] = useState(filesLiteVersion?.map(() => false) || []);\r\n  const [postUploadMetaData, setPostUploadMetaData] = useState([]);\r\n\r\n  const tableFormArrayRef = useRef(utils.dms.getFilesForm(activeFiles || []));\r\n  const duplicateFileIndexes = utils.dms.getDuplicateFileIndexes(activeFiles, previousUploadedFiles);\r\n  const folderTypes = utils.dms.getFolderTypes(documentTypesAfterFilter);\r\n  const currencies = utils.currency.listWithCodeAndCurrency(selectCurrencies);\r\n\r\n  const cols = [\r\n    {\r\n      id: 'fileName',\r\n      label: utils.string.t('claims.lossInformation.dmsUploadDocument.cols.fileName'),\r\n    },\r\n    {\r\n      id: 'documentType',\r\n      label: utils.string.t('claims.lossInformation.dmsUploadDocument.cols.documentType'),\r\n    },\r\n    {\r\n      id: 'documentClassification',\r\n      label: utils.string.t('claims.lossInformation.dmsUploadDocument.cols.documentClassification'),\r\n    },\r\n    {\r\n      id: 'removeDoc',\r\n      empty: true,\r\n    },\r\n  ];\r\n\r\n  // handlers\r\n  const handleFolderTypeSelection = (event, value) => {\r\n    setRefinedDocTypes(utils.dms.refinedDocTypeByFolderName(value, documentTypesAfterFilter));\r\n  };\r\n\r\n  const handleRemoveFiles = (removalIndex) => {\r\n    const newList = [...activeFiles];\r\n    newList.splice(removalIndex, 1);\r\n\r\n    const newForm = [...tableFormArrayRef?.current];\r\n    newForm.splice(removalIndex, 1);\r\n    tableFormArrayRef.current = [...newForm];\r\n\r\n    setActiveFiles(newList);\r\n    checkIfInvalidFiles(tableFormArrayRef?.current);\r\n  };\r\n\r\n  const handleTableForm = (index, rowFormState) => {\r\n    const newForm = [...tableFormArrayRef?.current];\r\n    newForm[index] = {\r\n      formFileName: rowFormState?.formFileName || '',\r\n      formDocType: rowFormState?.formDocType,\r\n      formDocClassificationType: { id: rowFormState?.formDocClassificationType?.id || 0 },\r\n      paymentFields: rowFormState?.paymentFields,\r\n      isDuplicateFileName: rowFormState?.isDuplicateFileName || false,\r\n      isInvalidFileName: rowFormState?.isInvalidFileName || false,\r\n    };\r\n    tableFormArrayRef.current = [...newForm];\r\n\r\n    checkIfInvalidFiles(tableFormArrayRef?.current);\r\n  };\r\n\r\n  const checkIfInvalidFiles = (fileFormArray) => {\r\n    const invalidCondition = utils.generic.isValidArray(fileFormArray, true) &&\r\n      fileFormArray.every((fileForm) => !fileForm?.isInvalidFileName);\r\n    if (!canSubmit && invalidCondition) setCanSubmit(true);\r\n    if (canSubmit && !invalidCondition) setCanSubmit(false);\r\n  };\r\n\r\n  const checkIfSubmittable = (fileFormArray) => {\r\n    const submitCondition = utils.generic.isValidArray(fileFormArray, true) &&\r\n      fileFormArray.every((fileForm) => {\r\n        return fileForm?.formDocType?.id && !fileForm?.isInvalidFileName;\r\n      });\r\n    setCanSubmit(submitCondition);\r\n    return submitCondition;\r\n  };\r\n\r\n  const handleFilesSubmission = (e) => {\r\n    e.preventDefault();\r\n    const filesFormData = tableFormArrayRef?.current;\r\n\r\n    if (checkIfSubmittable(filesFormData)) {\r\n      setIsUploading(true);\r\n      makeUploadCall(filesFormData);\r\n    } else {\r\n      setShowDocTypeRequired(true);\r\n    }\r\n  };\r\n\r\n  const makeUploadCall = (filesFormData) => {\r\n\r\n    const submitData = utils.dms.constructUploadDocsRequest(context, filesLiteVersion, filesFormData, documentMetaData);\r\n    const submitFiles = utils.dms.getFullFileProperties(files, filesLiteVersion);\r\n\r\n    dispatch(postDmsDocuments({ context, documentTypeKey, submitData, submitFiles }))\r\n      .then((data) => {\r\n        setIsUploading(false);\r\n        if (data?.status?.toLowerCase() === constants.API_RESPONSE_OK.toLowerCase()) {\r\n          setFilesSubmitted(true);\r\n          markUploadFailedFiles(data?.data);\r\n          postDmsDocumentsSuccess(data);\r\n          setPostUploadMetaData(utils.dms.getDocMetaDataAfterUpload(data?.data?.documentDto));\r\n          if (utils.dms.checkIfAllUploaded(data?.data?.documentDto)) {\r\n            dispatch(hideModal('DMS_UPLOAD_FILES'));\r\n            onClosingUploadModal();\r\n          }\r\n        }\r\n      });\r\n\r\n  }\r\n\r\n  const markUploadFailedFiles = (data) => {\r\n\r\n    const docDtoInfo = data?.documentDto || [];\r\n\r\n    const uploadFiles = docDtoInfo?.map((eachFile) => eachFile?.documentName);\r\n    const uploadStatus = docDtoInfo?.map((eachFile) => eachFile?.documentUploaded);\r\n\r\n    if (utils.dms.checkIfAllUploaded(docDtoInfo)) setCanSubmit(false);\r\n\r\n    const newList = [...activeFiles]?.filter((item, index) => (!uploadStatus[index]));\r\n\r\n    const currentForm = [...tableFormArrayRef?.current];\r\n    let removalIndex = [];\r\n\r\n    const newForm = currentForm?.filter((item) => {\r\n      const matchIndex = uploadFiles?.indexOf(item?.formFileName);\r\n      removalIndex.push(matchIndex);\r\n      return matchIndex > -1 && !uploadStatus[matchIndex];\r\n    });\r\n\r\n    if (utils.generic.isValidArray(removalIndex, true)) {\r\n      removalIndex.forEach((ind) => {\r\n        uploadStatus.splice(ind, 1);\r\n      });\r\n    }\r\n\r\n    tableFormArrayRef.current = [...newForm];\r\n\r\n    setActiveFiles(newList);\r\n    setUploadStatus(uploadStatus);\r\n  };\r\n\r\n  const handleRetrySingleFile = (retryIndex) => {\r\n    const submitData = utils.dms.constructUploadDocsRequest(context, [filesLiteVersion[retryIndex]], [tableFormArrayRef?.current[retryIndex]], documentMetaData);\r\n    const submitFiles = utils.dms.getFullFileProperties([files[retryIndex]], [filesLiteVersion[retryIndex]]);\r\n\r\n    dispatch(postDmsDocuments({ context, documentTypeKey, submitData, submitFiles }))\r\n      .then((data) => {\r\n        setIsUploading(false);\r\n        if (data?.status?.toLowerCase() === constants.API_RESPONSE_OK.toLowerCase()) {\r\n          setFilesSubmitted(true);\r\n          markUploadFailedFiles(data?.data);\r\n          if (utils.dms.checkIfAllUploaded(data?.data?.documentDto)) {\r\n            dispatch(hideModal('DMS_UPLOAD_FILES'));\r\n            postDmsDocumentsSuccess(data);\r\n            onClosingUploadModal();\r\n          }\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    dispatch(hideModal('DMS_UPLOAD_FILES'));\r\n    onClosingUploadModal();\r\n  }\r\n\r\n  useEffect(() => {\r\n    dispatch(getDmsMetaData(context, xbInstanceId, referenceId)).then((data) => {\r\n      setIsMetaDataLoaded(data?.status === constants.API_RESPONSE_OK);\r\n    });\r\n    dispatch(removeLoader('DmsUploadFiles'));\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const resetDocTypeRequired = () => {\r\n    setShowDocTypeRequired(false);\r\n  }\r\n\r\n  return (\r\n    <DmsUploadFilesView\r\n      context={context}\r\n      files={activeFiles}\r\n      duplicateFileIndexes={duplicateFileIndexes}\r\n      cols={cols}\r\n      currencies={currencies}\r\n      folderTypes={folderTypes}\r\n      documentTypes={refinedDocTypes}\r\n      isMetaDataLoaded={isMetaDataLoaded}\r\n      showDocTypeRequired={showDocTypeRequired}\r\n      canSubmit={canSubmit}\r\n      filesSubmitted={filesSubmitted}\r\n      isUploading={isUploading}\r\n      uploadStatus={uploadStatus}\r\n      isDmsFromPi={isDmsFromPi}\r\n      showFolderFilter={showFolderFilter}\r\n      postUploadMetaData={postUploadMetaData}\r\n      resetDocTypeRequired={resetDocTypeRequired}\r\n      handlers={{\r\n        handleFolderTypeSelection,\r\n        handleRemoveFiles,\r\n        handleTableForm,\r\n        handleFilesSubmission,\r\n        handleRetrySingleFile,\r\n        handleCancel,\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}