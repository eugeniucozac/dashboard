{"ast":null,"code":"import { authLogout } from 'stores';\nimport * as utils from 'utils';\nexport var getClaimsTasksReporting = function getClaimsTasksReporting(processType) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/claims.actions.getClaimsTasksReporting'\n    };\n    dispatch(getClaimsTasksReportingRequest(processType));\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.bpmService,\n      path: \"workflow/process/getClaimsTasksStats?processType=\".concat(processType)\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(getClaimsTasksReportingSuccess(data.data));\n      return data;\n    })[\"catch\"](function (err) {\n      utils.api.handleError(err, defaultError);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(getClaimsTasksReportingFailure(err));\n      return err;\n    });\n  };\n};\nexport var getClaimsTasksReportingRequest = function getClaimsTasksReportingRequest(params) {\n  return {\n    type: 'TASKS_CLAIMS_REPORTING_GET_REQUEST',\n    payload: params\n  };\n};\nexport var getClaimsTasksReportingSuccess = function getClaimsTasksReportingSuccess(data) {\n  return {\n    type: 'TASKS_CLAIMS_REPORTING_GET_SUCCESS',\n    payload: data\n  };\n};\nexport var getClaimsTasksReportingFailure = function getClaimsTasksReportingFailure(error) {\n  return {\n    type: 'TASKS_CLAIMS_REPORTING_GET_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.getClaimsTasksReporting.js"],"names":["authLogout","utils","getClaimsTasksReporting","processType","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","getClaimsTasksReportingRequest","api","get","token","accessToken","bpmService","path","then","response","handleResponse","json","handleNewData","data","getClaimsTasksReportingSuccess","err","handleError","handleUnauthorized","getClaimsTasksReportingFailure","params","type","payload","error"],"mappings":"AAAA,SAASA,UAAT,QAA2B,QAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAO,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,WAAD;AAAA,SAAiB,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC9E;AAD8E,oBAGnBA,QAAQ,EAHW;AAAA,QAG9DC,IAH8D,aAGtEC,IAHsE,CAG9DD,IAH8D;AAAA,QAGpCE,QAHoC,aAGtDC,MAHsD,CAG5CC,IAH4C,CAGpCF,QAHoC;;AAK9E,QAAMG,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE;AADa,KAArB;AAIAR,IAAAA,QAAQ,CAACS,8BAA8B,CAACV,WAAD,CAA/B,CAAR;AAEA,WAAOF,KAAK,CAACa,GAAN,CACJC,GADI,CACA;AACHC,MAAAA,KAAK,EAAEV,IAAI,CAACW,WADT;AAEHT,MAAAA,QAAQ,EAAEA,QAAQ,CAACU,UAFhB;AAGHC,MAAAA,IAAI,6DAAsDhB,WAAtD;AAHD,KADA,EAMJiB,IANI,CAMC,UAACC,QAAD;AAAA,aAAcpB,KAAK,CAACa,GAAN,CAAUQ,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAND,EAOJD,IAPI,CAOC,UAACG,IAAD;AAAA,aAAUtB,KAAK,CAACa,GAAN,CAAUU,aAAV,CAAwBD,IAAxB,CAAV;AAAA,KAPD,EAQJH,IARI,CAQC,UAACK,IAAD,EAAU;AACdrB,MAAAA,QAAQ,CAACsB,8BAA8B,CAACD,IAAI,CAACA,IAAN,CAA/B,CAAR;AACA,aAAOA,IAAP;AACD,KAXI,WAYE,UAACE,GAAD,EAAS;AACd1B,MAAAA,KAAK,CAACa,GAAN,CAAUc,WAAV,CAAsBD,GAAtB,EAA2BhB,YAA3B;AACAV,MAAAA,KAAK,CAACa,GAAN,CAAUe,kBAAV,CAA6BF,GAA7B,EAAkCvB,QAAlC,EAA4CJ,UAA5C;AACAI,MAAAA,QAAQ,CAAC0B,8BAA8B,CAACH,GAAD,CAA/B,CAAR;AACA,aAAOA,GAAP;AACD,KAjBI,CAAP;AAkBD,GA7BsC;AAAA,CAAhC;AA+BP,OAAO,IAAMd,8BAA8B,GAAG,SAAjCA,8BAAiC,CAACkB,MAAD,EAAY;AACxD,SAAO;AACLC,IAAAA,IAAI,EAAE,oCADD;AAELC,IAAAA,OAAO,EAAEF;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAML,8BAA8B,GAAG,SAAjCA,8BAAiC,CAACD,IAAD,EAAU;AACtD,SAAO;AACLO,IAAAA,IAAI,EAAE,oCADD;AAELC,IAAAA,OAAO,EAAER;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMK,8BAA8B,GAAG,SAAjCA,8BAAiC,CAACI,KAAD,EAAW;AACvD,SAAO;AACLF,IAAAA,IAAI,EAAE,oCADD;AAELC,IAAAA,OAAO,EAAEC;AAFJ,GAAP;AAID,CALM","sourcesContent":["import { authLogout } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const getClaimsTasksReporting = (processType) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n\r\n  const { user: { auth }, config: { vars: { endpoint } } } = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.getClaimsTasksReporting',\r\n  };\r\n\r\n  dispatch(getClaimsTasksReportingRequest(processType));\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.bpmService,\r\n      path: `workflow/process/getClaimsTasksStats?processType=${processType}`,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(getClaimsTasksReportingSuccess(data.data));\r\n      return data;\r\n    })\r\n    .catch((err) => {\r\n      utils.api.handleError(err, defaultError);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(getClaimsTasksReportingFailure(err));\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const getClaimsTasksReportingRequest = (params) => {\r\n  return {\r\n    type: 'TASKS_CLAIMS_REPORTING_GET_REQUEST',\r\n    payload: params,\r\n  };\r\n};\r\n\r\nexport const getClaimsTasksReportingSuccess = (data) => {\r\n  return {\r\n    type: 'TASKS_CLAIMS_REPORTING_GET_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const getClaimsTasksReportingFailure = (error) => {\r\n  return {\r\n    type: 'TASKS_CLAIMS_REPORTING_GET_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}