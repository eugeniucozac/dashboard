{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from 'react';\nimport { useForm, useFieldArray } from 'react-hook-form';\nimport { useSelector, useDispatch } from 'react-redux'; // app\n\nimport { hideModal, showModal, removeFileUpload, getUploadedFiles, fetchDocumentMetaData, getDocumentMetaData, uploadFiles, getDmsContext, postDmsDocuments, getDocumentUploaded, selectRefDataNewDocumentTypesByContextSource, selectRefDataNewDocumentTypeLookUpByContextSource, setDmsContext, selectSettlementCurrency, resetFileUpload, selectRefDataXbInstances, resetPostStatus, updateUploadDocumentDto, updateFileName, selectorDmsViewFiles } from 'stores';\nimport * as utils from 'utils';\nimport * as constants from 'consts';\n\nvar useDmsUpload = function useDmsUpload(documentTypeKey, selectedSourceId, metaDataSectionRef, postDmsDocumentsSuccess) {\n  _s();\n\n  var dispatch = useDispatch();\n  var errorRef = useRef(); // form\n\n  var _useForm = useForm(),\n      control = _useForm.control,\n      formState = _useForm.formState,\n      handleSubmit = _useForm.handleSubmit,\n      register = _useForm.register,\n      setValue = _useForm.setValue,\n      setError = _useForm.setError,\n      getValues = _useForm.getValues,\n      clearErrors = _useForm.clearErrors; // state\n\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedItem = _useState2[0],\n      setSelectedItem = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      rowIndex = _useState4[0],\n      setRowIndex = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      indexDocTypeUnfilled = _useState6[0],\n      setRowIndexDocType = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      postSubmissionRowIndex = _useState8[0],\n      setPostSubmissionRowIndex = _useState8[1];\n\n  var _useState9 = useState(''),\n      _useState10 = _slicedToArray(_useState9, 2),\n      selectedItemClassification = _useState10[0],\n      setSelectedItemClassification = _useState10[1];\n\n  var _useState11 = useState(\"filesClassification\".concat('3')),\n      _useState12 = _slicedToArray(_useState11, 2),\n      rowIndexClassification = _useState12[0],\n      setRowIndexClassification = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      isMetaDataLoaded = _useState14[0],\n      setIsMetaDataLoaded = _useState14[1]; // redux\n\n\n  var uploadedFiles = useSelector(getUploadedFiles);\n\n  var _useSelector = useSelector(getDocumentMetaData),\n      documentMetaData = _useSelector.documentMetaData;\n\n  var dmsContext = useSelector(getDmsContext);\n  var refDataXbInstances = useSelector(selectRefDataXbInstances);\n\n  var _useSelector2 = useSelector(getDocumentUploaded),\n      isFulfilled = _useSelector2.isFulfilled,\n      isPending = _useSelector2.isPending,\n      isRejected = _useSelector2.isRejected,\n      documentDto = _useSelector2.documentDto,\n      refDocumentDto = _useSelector2.refDocumentDto;\n\n  var documentDetails = useSelector(selectorDmsViewFiles);\n  var xbInstanceId = selectedSourceId ? selectedSourceId : constants.DMS_CLAIM_SOURCE_ID;\n\n  var _utils$dmsFormatter$g = utils.dmsFormatter.getDocumentTypeFilterKeys(dmsContext, xbInstanceId, documentTypeKey),\n      dmsSectionKey = _utils$dmsFormatter$g.dmsSectionKey,\n      sourceId = _utils$dmsFormatter$g.sourceId;\n\n  var isDmsFromPi = utils.dmsFormatter.isDmsFromPi(documentTypeKey);\n\n  var _ref = isDmsFromPi && utils.dmsFormatter.getDocumentTypeInfo(documentTypeKey, sourceId),\n      documentTypeDescription = _ref.documentTypeDescription,\n      sectionKey = _ref.sectionKey,\n      dmsSourceID = _ref.dmsSourceID;\n\n  var documentTypesBeforeFilter = useSelector(dmsSectionKey === constants.DMS_DOCUMENT_TYPE_SECTION_KEYS.type.policy ? selectRefDataNewDocumentTypeLookUpByContextSource(dmsSectionKey, sourceId) : selectRefDataNewDocumentTypesByContextSource(dmsSectionKey, sourceId));\n  var documentTypesAfterFilter = (dmsContext === constants.DMS_CONTEXT_POLICY || dmsContext === constants.DMS_CONTEXT_PROCESSING_INSTRUCTION) && isDmsFromPi ? documentTypesBeforeFilter === null || documentTypesBeforeFilter === void 0 ? void 0 : documentTypesBeforeFilter.filter(function (type) {\n    return type.documentTypeDescription === documentTypeDescription && type.sectionKey === sectionKey && type.sourceID === dmsSourceID;\n  }) : documentTypesBeforeFilter;\n  var currencies = useSelector(selectSettlementCurrency);\n  currencies = currencies.map(function (currency) {\n    return _objectSpread(_objectSpread({}, currency), {}, {\n      name: \"\".concat(currency.id, \" - \").concat(currency.name)\n    });\n  });\n  var docClassificationTypes = [{\n    id: 1,\n    value: utils.string.t('dms.upload.modalItems.classificationType.low')\n  }, {\n    id: 2,\n    value: utils.string.t('dms.upload.modalItems.classificationType.guarded')\n  }, {\n    id: 3,\n    value: utils.string.t('dms.upload.modalItems.classificationType.high')\n  }, {\n    id: 4,\n    value: utils.string.t('dms.upload.modalItems.classificationType.severe')\n  }];\n\n  var _utils$dmsFormatter$f = utils.dmsFormatter.formatDocumentMetaData(documentMetaData, dmsContext, refDataXbInstances),\n      commonInfo = _utils$dmsFormatter$f.commonInfo,\n      lossInfo = _utils$dmsFormatter$f.lossInfo,\n      claimInfo = _utils$dmsFormatter$f.claimInfo,\n      policyInfo = _utils$dmsFormatter$f.policyInfo;\n\n  var cols = [{\n    id: 'fileName',\n    label: utils.string.t('claims.lossInformation.dmsUploadDocument.cols.fileName')\n  }, {\n    id: 'documentType',\n    label: utils.string.t('claims.lossInformation.dmsUploadDocument.cols.documentType')\n  }, {\n    id: 'documentClassification',\n    label: utils.string.t('claims.lossInformation.dmsUploadDocument.cols.documentClassification')\n  }, {\n    id: 'tag',\n    label: utils.string.t('claims.lossInformation.dmsUploadDocument.cols.tag')\n  }, {\n    id: 'removeDoc',\n    empty: true\n  }];\n\n  var _useFieldArray = useFieldArray({\n    control: control,\n    name: 'files'\n  }),\n      fieldsArray = _useFieldArray.fields,\n      appendFieldArray = _useFieldArray.append,\n      removeFieldArray = _useFieldArray.remove;\n\n  var getFileKey = utils.dmsFormatter.getFileKey;\n  var duplicateIndex = utils.dmsFormatter.getDuplicateIndexes(fieldsArray, documentDetails);\n\n  var handleCancel = function handleCancel() {\n    return function () {\n      dispatch(hideModal(constants.DMS_MODULE));\n    };\n  };\n\n  var handleShowModal = function handleShowModal(newContext) {\n    return function (files) {\n      dispatch(setDmsContext(newContext));\n      dispatch(showModal({\n        component: 'DMS_UPLOAD',\n        props: {\n          fullWidth: true,\n          title: utils.string.t('dms.upload.modalItems.uploadDocuments'),\n          maxWidth: 'xl',\n          componentProps: {\n            confirmLabel: utils.string.t('app.ok'),\n            cancelLabel: utils.string.t('app.goBack'),\n            confirmMessage: utils.string.t('processingInstructions.documentsWillNotBeSaved'),\n            buttonColors: {\n              confirm: 'secondary',\n              cancel: 'primary'\n            }\n          }\n        }\n      }));\n      var uniqueFiles = utils.dmsFormatter.getUniqueFiles(files, uploadedFiles);\n      dispatch(uploadFiles(uniqueFiles));\n    };\n  };\n\n  var handleSubmitUpload = function handleSubmitUpload(formValues) {\n    utils.dmsFormatter.getInvalidInputs(fieldsArray, formValues, setError);\n    var isDocTypeVaild = utils.dmsFormatter.getSelectedDocumentType(formValues, uploadedFiles).length > 0;\n    setRowIndexDocType(utils.dmsFormatter.getSelectedDocumentType(formValues, uploadedFiles));\n\n    if (!isDocTypeVaild || isFulfilled && formState.isSubmitSuccessful) {\n      var metaData = {\n        catCodesID: documentMetaData === null || documentMetaData === void 0 ? void 0 : documentMetaData.catCodesID,\n        year: documentMetaData === null || documentMetaData === void 0 ? void 0 : documentMetaData.year,\n        lossName: documentMetaData === null || documentMetaData === void 0 ? void 0 : documentMetaData.lossName,\n        documentTypeId: selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.documentTypeID,\n        sourceId: documentMetaData === null || documentMetaData === void 0 ? void 0 : documentMetaData.xbInstanceId,\n        documentTypeDescription: selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.documentTypeDescription,\n        claimId: documentMetaData === null || documentMetaData === void 0 ? void 0 : documentMetaData.claimId\n      };\n\n      if (!errorRef.current) {\n        dispatch(postDmsDocuments({\n          fieldsArray: fieldsArray,\n          metaData: metaData,\n          formValues: formValues,\n          documentTypeKey: documentTypeKey\n        })).then(function (data) {\n          var _data$status;\n\n          if ((data === null || data === void 0 ? void 0 : (_data$status = data.status) === null || _data$status === void 0 ? void 0 : _data$status.toLowerCase()) === constants.API_RESPONSE_OK.toLowerCase()) postDmsDocumentsSuccess(data);\n        });\n      }\n    }\n  };\n\n  var isActionDispatched = utils.dmsFormatter.getActionDispatched(isPending, isFulfilled, isRejected);\n  var hasPaymentDocumentType = utils.dmsFormatter.getPaymentDocumentType(selectedItem);\n  var getIcons = utils.dmsFormatter.getIcons;\n\n  var handleRemoveFiles = function handleRemoveFiles(fileName) {\n    return function (index) {\n      if (isActionDispatched || !formState.isSubmitSuccessful) {\n        removeFieldArray(index);\n        dispatch(removeFileUpload(fileName));\n      }\n    };\n  };\n\n  var handleSelectDocClassification = function handleSelectDocClassification(selectedItemClassification, index) {\n    setSelectedItemClassification(selectedItemClassification);\n    setValue(\"filesClassification\".concat(index), selectedItemClassification);\n    setRowIndexClassification(index);\n  };\n\n  var handleResetFilter = function handleResetFilter() {\n    fieldsArray === null || fieldsArray === void 0 ? void 0 : fieldsArray.forEach(function (data, index) {\n      setValue(\"files\".concat(index), undefined);\n    });\n    setSelectedItem('');\n  };\n\n  var handleSelectedItem = function handleSelectedItem(selectedItem, index) {\n    setSelectedItem(selectedItem);\n    setValue(\"files\".concat(index), selectedItem);\n    setRowIndex(index);\n\n    if (indexDocTypeUnfilled.includes(index)) {\n      var arr = indexDocTypeUnfilled;\n      setRowIndexDocType(arr.filter(function (data) {\n        return data !== index;\n      }));\n    }\n  };\n\n  var handleInputChange = function handleInputChange(name, index) {\n    return function (e) {\n      setValue(name, e.target.value);\n      dispatch(updateFileName({\n        fileName: e.target.value,\n        fileIndex: index\n      }));\n\n      if (errorRef.current) {\n        clearErrors(name);\n      }\n    };\n  };\n\n  var handleSingleFileSubmission = function handleSingleFileSubmission(index) {\n    setPostSubmissionRowIndex(index);\n    return utils.dmsFormatter.setCurrentFieldValues(index, getValues);\n  };\n\n  useEffect(function () {\n    if (isFulfilled) {\n      documentDto.forEach(function (item, i) {\n        if (item.documentUploaded) {\n          dispatch(removeFileUpload(item.documentName));\n          dispatch(updateUploadDocumentDto(item.documentName));\n        }\n      });\n    }\n  }, [isFulfilled, documentDto, dispatch]);\n  useEffect(function () {\n    dispatch(fetchDocumentMetaData(xbInstanceId, metaDataSectionRef)).then(function (data) {\n      setIsMetaDataLoaded((data === null || data === void 0 ? void 0 : data.status) === constants.API_RESPONSE_OK);\n    });\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    removeFieldArray(fieldsArray);\n    appendFieldArray(uploadedFiles); // TODO - remove this rule in the next PR\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [uploadedFiles === null || uploadedFiles === void 0 ? void 0 : uploadedFiles.length]);\n  useEffect(function () {\n    if (Object.keys(formState.errors).length > 0) {\n      errorRef.current = true;\n    } else {\n      errorRef.current = false;\n    }\n  }, [formState.errors]);\n  useEffect(function () {\n    return function () {\n      if (!isActionDispatched) {\n        dispatch(resetFileUpload());\n      }\n    };\n  }, [isActionDispatched, dispatch]);\n  return {\n    uploadedFiles: uploadedFiles,\n    getFileKey: getFileKey,\n    handleRemoveFiles: handleRemoveFiles,\n    fieldsArray: fieldsArray,\n    formState: formState,\n    control: control,\n    cols: cols,\n    handleShowModal: handleShowModal,\n    commonInfo: commonInfo,\n    lossInfo: lossInfo,\n    claimInfo: claimInfo,\n    policyInfo: policyInfo,\n    handleSubmit: handleSubmit,\n    handleSubmitUpload: handleSubmitUpload,\n    isPending: isPending,\n    isRejected: isRejected,\n    isFulfilled: isFulfilled,\n    getIcons: getIcons,\n    dmsContext: dmsContext,\n    handleCancel: handleCancel,\n    documentTypes: documentTypesAfterFilter,\n    hasPaymentDocumentType: hasPaymentDocumentType,\n    rowIndex: rowIndex,\n    handleSelectedItem: handleSelectedItem,\n    selectedItem: selectedItem,\n    documentDto: documentDto,\n    register: register,\n    getValues: getValues,\n    duplicateIndex: duplicateIndex,\n    handleSelectDocClassification: handleSelectDocClassification,\n    selectedItemClassification: selectedItemClassification,\n    rowIndexClassification: rowIndexClassification,\n    docClassificationTypes: docClassificationTypes,\n    indexDocTypeUnfilled: indexDocTypeUnfilled,\n    setValue: setValue,\n    currencies: currencies,\n    handleInputChange: handleInputChange,\n    resetPostStatus: resetPostStatus,\n    handleSingleFileSubmission: handleSingleFileSubmission,\n    isActionDispatched: isActionDispatched,\n    handleResetFilter: handleResetFilter,\n    postSubmissionRowIndex: postSubmissionRowIndex,\n    refDocumentDto: refDocumentDto,\n    isDmsFromPi: isDmsFromPi,\n    isMetaDataLoaded: isMetaDataLoaded\n  };\n};\n\n_s(useDmsUpload, \"0CS71V202+akA5pxP2essU9YZe0=\", false, function () {\n  return [useDispatch, useForm, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useFieldArray];\n});\n\nexport default useDmsUpload;","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/forms/DmsUpload/useDmsUpload.js"],"names":["useEffect","useState","useRef","useForm","useFieldArray","useSelector","useDispatch","hideModal","showModal","removeFileUpload","getUploadedFiles","fetchDocumentMetaData","getDocumentMetaData","uploadFiles","getDmsContext","postDmsDocuments","getDocumentUploaded","selectRefDataNewDocumentTypesByContextSource","selectRefDataNewDocumentTypeLookUpByContextSource","setDmsContext","selectSettlementCurrency","resetFileUpload","selectRefDataXbInstances","resetPostStatus","updateUploadDocumentDto","updateFileName","selectorDmsViewFiles","utils","constants","useDmsUpload","documentTypeKey","selectedSourceId","metaDataSectionRef","postDmsDocumentsSuccess","dispatch","errorRef","control","formState","handleSubmit","register","setValue","setError","getValues","clearErrors","selectedItem","setSelectedItem","rowIndex","setRowIndex","indexDocTypeUnfilled","setRowIndexDocType","postSubmissionRowIndex","setPostSubmissionRowIndex","selectedItemClassification","setSelectedItemClassification","rowIndexClassification","setRowIndexClassification","isMetaDataLoaded","setIsMetaDataLoaded","uploadedFiles","documentMetaData","dmsContext","refDataXbInstances","isFulfilled","isPending","isRejected","documentDto","refDocumentDto","documentDetails","xbInstanceId","DMS_CLAIM_SOURCE_ID","dmsFormatter","getDocumentTypeFilterKeys","dmsSectionKey","sourceId","isDmsFromPi","getDocumentTypeInfo","documentTypeDescription","sectionKey","dmsSourceID","documentTypesBeforeFilter","DMS_DOCUMENT_TYPE_SECTION_KEYS","type","policy","documentTypesAfterFilter","DMS_CONTEXT_POLICY","DMS_CONTEXT_PROCESSING_INSTRUCTION","filter","sourceID","currencies","map","currency","name","id","docClassificationTypes","value","string","t","formatDocumentMetaData","commonInfo","lossInfo","claimInfo","policyInfo","cols","label","empty","fieldsArray","fields","appendFieldArray","append","removeFieldArray","remove","getFileKey","duplicateIndex","getDuplicateIndexes","handleCancel","DMS_MODULE","handleShowModal","newContext","files","component","props","fullWidth","title","maxWidth","componentProps","confirmLabel","cancelLabel","confirmMessage","buttonColors","confirm","cancel","uniqueFiles","getUniqueFiles","handleSubmitUpload","formValues","getInvalidInputs","isDocTypeVaild","getSelectedDocumentType","length","isSubmitSuccessful","metaData","catCodesID","year","lossName","documentTypeId","documentTypeID","claimId","current","then","data","status","toLowerCase","API_RESPONSE_OK","isActionDispatched","getActionDispatched","hasPaymentDocumentType","getPaymentDocumentType","getIcons","handleRemoveFiles","fileName","index","handleSelectDocClassification","handleResetFilter","forEach","undefined","handleSelectedItem","includes","arr","handleInputChange","e","target","fileIndex","handleSingleFileSubmission","setCurrentFieldValues","item","i","documentUploaded","documentName","Object","keys","errors","documentTypes"],"mappings":"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","sourcesContent":["import { useEffect, useState, useRef } from 'react';\r\nimport { useForm, useFieldArray } from 'react-hook-form';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\n// app\r\nimport {\r\n  hideModal,\r\n  showModal,\r\n  removeFileUpload,\r\n  getUploadedFiles,\r\n  fetchDocumentMetaData,\r\n  getDocumentMetaData,\r\n  uploadFiles,\r\n  getDmsContext,\r\n  postDmsDocuments,\r\n  getDocumentUploaded,\r\n  selectRefDataNewDocumentTypesByContextSource,\r\n  selectRefDataNewDocumentTypeLookUpByContextSource,\r\n  setDmsContext,\r\n  selectSettlementCurrency,\r\n  resetFileUpload,\r\n  selectRefDataXbInstances,\r\n  resetPostStatus,\r\n  updateUploadDocumentDto,\r\n  updateFileName,\r\n  selectorDmsViewFiles,\r\n} from 'stores';\r\nimport * as utils from 'utils';\r\nimport * as constants from 'consts';\r\n\r\nconst useDmsUpload = (documentTypeKey, selectedSourceId, metaDataSectionRef, postDmsDocumentsSuccess) => {\r\n  const dispatch = useDispatch();\r\n  const errorRef = useRef();\r\n\r\n  // form\r\n  const { control, formState, handleSubmit, register, setValue, setError, getValues, clearErrors } = useForm();\r\n\r\n  // state\r\n  const [selectedItem, setSelectedItem] = useState('');\r\n  const [rowIndex, setRowIndex] = useState(null);\r\n  const [indexDocTypeUnfilled, setRowIndexDocType] = useState([]);\r\n  const [postSubmissionRowIndex, setPostSubmissionRowIndex] = useState(null);\r\n  const [selectedItemClassification, setSelectedItemClassification] = useState('');\r\n  const [rowIndexClassification, setRowIndexClassification] = useState(`filesClassification${'3'}`);\r\n  const [isMetaDataLoaded, setIsMetaDataLoaded] = useState(false);\r\n\r\n  // redux\r\n  const uploadedFiles = useSelector(getUploadedFiles);\r\n  const { documentMetaData } = useSelector(getDocumentMetaData);\r\n  const dmsContext = useSelector(getDmsContext);\r\n  const refDataXbInstances = useSelector(selectRefDataXbInstances);\r\n  const { isFulfilled, isPending, isRejected, documentDto, refDocumentDto } = useSelector(getDocumentUploaded);\r\n  const documentDetails = useSelector(selectorDmsViewFiles);\r\n\r\n  const xbInstanceId = selectedSourceId ? selectedSourceId : constants.DMS_CLAIM_SOURCE_ID;\r\n\r\n  const { dmsSectionKey, sourceId } = utils.dmsFormatter.getDocumentTypeFilterKeys(dmsContext, xbInstanceId, documentTypeKey);\r\n  const isDmsFromPi = utils.dmsFormatter.isDmsFromPi(documentTypeKey);\r\n  const { documentTypeDescription, sectionKey, dmsSourceID } =\r\n    isDmsFromPi && utils.dmsFormatter.getDocumentTypeInfo(documentTypeKey, sourceId);\r\n  const documentTypesBeforeFilter = useSelector(\r\n    dmsSectionKey === constants.DMS_DOCUMENT_TYPE_SECTION_KEYS.type.policy\r\n      ? selectRefDataNewDocumentTypeLookUpByContextSource(dmsSectionKey, sourceId)\r\n      : selectRefDataNewDocumentTypesByContextSource(dmsSectionKey, sourceId)\r\n  );\r\n  const documentTypesAfterFilter =\r\n    (dmsContext === constants.DMS_CONTEXT_POLICY || dmsContext === constants.DMS_CONTEXT_PROCESSING_INSTRUCTION) && isDmsFromPi\r\n      ? documentTypesBeforeFilter?.filter(\r\n          (type) =>\r\n            type.documentTypeDescription === documentTypeDescription && type.sectionKey === sectionKey && type.sourceID === dmsSourceID\r\n        )\r\n      : documentTypesBeforeFilter;\r\n\r\n  let currencies = useSelector(selectSettlementCurrency);\r\n  currencies = currencies.map((currency) => ({ ...currency, name: `${currency.id} - ${currency.name}` }));\r\n\r\n  const docClassificationTypes = [\r\n    { id: 1, value: utils.string.t('dms.upload.modalItems.classificationType.low') },\r\n    { id: 2, value: utils.string.t('dms.upload.modalItems.classificationType.guarded') },\r\n    { id: 3, value: utils.string.t('dms.upload.modalItems.classificationType.high') },\r\n    { id: 4, value: utils.string.t('dms.upload.modalItems.classificationType.severe') },\r\n  ];\r\n  const { commonInfo, lossInfo, claimInfo, policyInfo } = utils.dmsFormatter.formatDocumentMetaData(\r\n    documentMetaData,\r\n    dmsContext,\r\n    refDataXbInstances\r\n  );\r\n\r\n  const cols = [\r\n    {\r\n      id: 'fileName',\r\n      label: utils.string.t('claims.lossInformation.dmsUploadDocument.cols.fileName'),\r\n    },\r\n    {\r\n      id: 'documentType',\r\n      label: utils.string.t('claims.lossInformation.dmsUploadDocument.cols.documentType'),\r\n    },\r\n    {\r\n      id: 'documentClassification',\r\n      label: utils.string.t('claims.lossInformation.dmsUploadDocument.cols.documentClassification'),\r\n    },\r\n    {\r\n      id: 'tag',\r\n      label: utils.string.t('claims.lossInformation.dmsUploadDocument.cols.tag'),\r\n    },\r\n    {\r\n      id: 'removeDoc',\r\n      empty: true,\r\n    },\r\n  ];\r\n\r\n  const {\r\n    fields: fieldsArray,\r\n    append: appendFieldArray,\r\n    remove: removeFieldArray,\r\n  } = useFieldArray({\r\n    control,\r\n    name: 'files',\r\n  });\r\n\r\n  const getFileKey = utils.dmsFormatter.getFileKey;\r\n  const duplicateIndex = utils.dmsFormatter.getDuplicateIndexes(fieldsArray, documentDetails);\r\n\r\n  const handleCancel = () => () => {\r\n    dispatch(hideModal(constants.DMS_MODULE));\r\n  };\r\n\r\n  const handleShowModal = (newContext) => (files) => {\r\n    dispatch(setDmsContext(newContext));\r\n    dispatch(\r\n      showModal({\r\n        component: 'DMS_UPLOAD',\r\n        props: {\r\n          fullWidth: true,\r\n          title: utils.string.t('dms.upload.modalItems.uploadDocuments'),\r\n          maxWidth: 'xl',\r\n          componentProps: {\r\n            confirmLabel: utils.string.t('app.ok'),\r\n            cancelLabel: utils.string.t('app.goBack'),\r\n            confirmMessage: utils.string.t('processingInstructions.documentsWillNotBeSaved'),\r\n            buttonColors: { confirm: 'secondary', cancel: 'primary' },\r\n          },\r\n        },\r\n      })\r\n    );\r\n    const uniqueFiles = utils.dmsFormatter.getUniqueFiles(files, uploadedFiles);\r\n    dispatch(uploadFiles(uniqueFiles));\r\n  };\r\n\r\n  const handleSubmitUpload = (formValues) => {\r\n    utils.dmsFormatter.getInvalidInputs(fieldsArray, formValues, setError);\r\n    const isDocTypeVaild = utils.dmsFormatter.getSelectedDocumentType(formValues, uploadedFiles).length > 0;\r\n    setRowIndexDocType(utils.dmsFormatter.getSelectedDocumentType(formValues, uploadedFiles));\r\n\r\n    if (!isDocTypeVaild || (isFulfilled && formState.isSubmitSuccessful)) {\r\n      const metaData = {\r\n        catCodesID: documentMetaData?.catCodesID,\r\n        year: documentMetaData?.year,\r\n        lossName: documentMetaData?.lossName,\r\n        documentTypeId: selectedItem?.documentTypeID,\r\n        sourceId: documentMetaData?.xbInstanceId,\r\n        documentTypeDescription: selectedItem?.documentTypeDescription,\r\n        claimId: documentMetaData?.claimId,\r\n      };\r\n\r\n      if (!errorRef.current) {\r\n        dispatch(postDmsDocuments({ fieldsArray, metaData, formValues, documentTypeKey })).then((data) => {\r\n          if (data?.status?.toLowerCase() === constants.API_RESPONSE_OK.toLowerCase()) postDmsDocumentsSuccess(data);\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const isActionDispatched = utils.dmsFormatter.getActionDispatched(isPending, isFulfilled, isRejected);\r\n  const hasPaymentDocumentType = utils.dmsFormatter.getPaymentDocumentType(selectedItem);\r\n  const getIcons = utils.dmsFormatter.getIcons;\r\n\r\n  const handleRemoveFiles = (fileName) => (index) => {\r\n    if (isActionDispatched || !formState.isSubmitSuccessful) {\r\n      removeFieldArray(index);\r\n      dispatch(removeFileUpload(fileName));\r\n    }\r\n  };\r\n\r\n  const handleSelectDocClassification = (selectedItemClassification, index) => {\r\n    setSelectedItemClassification(selectedItemClassification);\r\n    setValue(`filesClassification${index}`, selectedItemClassification);\r\n    setRowIndexClassification(index);\r\n  };\r\n  const handleResetFilter = () => {\r\n    fieldsArray?.forEach((data, index) => {\r\n      setValue(`files${index}`, undefined);\r\n    });\r\n    setSelectedItem('');\r\n  };\r\n  const handleSelectedItem = (selectedItem, index) => {\r\n    setSelectedItem(selectedItem);\r\n    setValue(`files${index}`, selectedItem);\r\n    setRowIndex(index);\r\n    if (indexDocTypeUnfilled.includes(index)) {\r\n      const arr = indexDocTypeUnfilled;\r\n      setRowIndexDocType(arr.filter((data) => data !== index));\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (name, index) => (e) => {\r\n    setValue(name, e.target.value);\r\n    dispatch(updateFileName({ fileName: e.target.value, fileIndex: index }));\r\n\r\n    if (errorRef.current) {\r\n      clearErrors(name);\r\n    }\r\n  };\r\n\r\n  const handleSingleFileSubmission = (index) => {\r\n    setPostSubmissionRowIndex(index);\r\n\r\n    return utils.dmsFormatter.setCurrentFieldValues(index, getValues);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isFulfilled) {\r\n      documentDto.forEach((item, i) => {\r\n        if (item.documentUploaded) {\r\n          dispatch(removeFileUpload(item.documentName));\r\n          dispatch(updateUploadDocumentDto(item.documentName));\r\n        }\r\n      });\r\n    }\r\n  }, [isFulfilled, documentDto, dispatch]);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchDocumentMetaData(xbInstanceId, metaDataSectionRef)).then((data) => {\r\n      setIsMetaDataLoaded(data?.status === constants.API_RESPONSE_OK);\r\n    });\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    removeFieldArray(fieldsArray);\r\n    appendFieldArray(uploadedFiles);\r\n    // TODO - remove this rule in the next PR\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [uploadedFiles?.length]);\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(formState.errors).length > 0) {\r\n      errorRef.current = true;\r\n    } else {\r\n      errorRef.current = false;\r\n    }\r\n  }, [formState.errors]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (!isActionDispatched) {\r\n        dispatch(resetFileUpload());\r\n      }\r\n    };\r\n  }, [isActionDispatched, dispatch]);\r\n\r\n  return {\r\n    uploadedFiles,\r\n    getFileKey,\r\n    handleRemoveFiles,\r\n    fieldsArray,\r\n    formState,\r\n    control,\r\n    cols,\r\n    handleShowModal,\r\n    commonInfo,\r\n    lossInfo,\r\n    claimInfo,\r\n    policyInfo,\r\n    handleSubmit,\r\n    handleSubmitUpload,\r\n    isPending,\r\n    isRejected,\r\n    isFulfilled,\r\n    getIcons,\r\n    dmsContext,\r\n    handleCancel,\r\n    documentTypes: documentTypesAfterFilter,\r\n    hasPaymentDocumentType,\r\n    rowIndex,\r\n    handleSelectedItem,\r\n    selectedItem,\r\n    documentDto,\r\n    register,\r\n    getValues,\r\n    duplicateIndex,\r\n    handleSelectDocClassification,\r\n    selectedItemClassification,\r\n    rowIndexClassification,\r\n    docClassificationTypes,\r\n    indexDocTypeUnfilled,\r\n    setValue,\r\n    currencies,\r\n    handleInputChange,\r\n    resetPostStatus,\r\n    handleSingleFileSubmission,\r\n    isActionDispatched,\r\n    handleResetFilter,\r\n    postSubmissionRowIndex,\r\n    refDocumentDto,\r\n    isDmsFromPi,\r\n    isMetaDataLoaded,\r\n  };\r\n};\r\n\r\nexport default useDmsUpload;\r\n"]},"metadata":{},"sourceType":"module"}