{"ast":null,"code":"import { addLoader, authLogout, removeLoader } from 'stores';\nimport * as utils from 'utils';\nimport { ORGANIZATIONS } from 'consts';\nexport var getTaskChecklist = function getTaskChecklist() {\n  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return function (dispatch, getState) {\n    var _ORGANIZATIONS$userOr, _params$viewLoader;\n\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var taskCode = params.taskCode,\n        taskId = params.taskId,\n        userOrgName = params.userOrgName;\n    var orgId = (_ORGANIZATIONS$userOr = ORGANIZATIONS[userOrgName]) === null || _ORGANIZATIONS$userOr === void 0 ? void 0 : _ORGANIZATIONS$userOr.id;\n    var viewLoader = (_params$viewLoader = params === null || params === void 0 ? void 0 : params.viewLoader) !== null && _params$viewLoader !== void 0 ? _params$viewLoader : true;\n    var defaultError = {\n      file: 'stores/claims.actions.getTaskChecklist'\n    };\n    dispatch(getTaskChecklistRequest(params));\n    viewLoader && dispatch(addLoader('getTaskChecklist'));\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.bpmService,\n      path: \"workflow/task/\".concat(taskCode, \"/checkList?organisationId=\").concat(orgId, \"&taskId=\").concat(taskId)\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (data) {\n      return utils.api.handleNewData(data);\n    }).then(function (json) {\n      dispatch(getTaskChecklistSuccess(json));\n      return json;\n    }).catch(function (err) {\n      dispatch(getTaskChecklistFailure(err, defaultError));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      return err;\n    }).finally(function () {\n      viewLoader && dispatch(removeLoader('getTaskChecklist'));\n    });\n  };\n};\nexport var getTaskChecklistRequest = function getTaskChecklistRequest(params) {\n  return {\n    type: 'CLAIMS_TASK_PROCESSING_GET_CHECKLIST_REQUEST',\n    payload: params\n  };\n};\nexport var getTaskChecklistSuccess = function getTaskChecklistSuccess(json) {\n  return {\n    type: 'CLAIMS_TASK_PROCESSING_GET_CHECKLIST_SUCCESS',\n    payload: json.data\n  };\n};\nexport var getTaskChecklistFailure = function getTaskChecklistFailure(error) {\n  return {\n    type: 'CLAIMS_TASK_PROCESSING_GET_CHECKLIST_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.getTaskChecklist.js"],"names":["addLoader","authLogout","removeLoader","utils","ORGANIZATIONS","getTaskChecklist","params","dispatch","getState","auth","user","endpoint","config","vars","taskCode","taskId","userOrgName","orgId","id","viewLoader","defaultError","file","getTaskChecklistRequest","api","get","token","accessToken","bpmService","path","then","response","handleResponse","data","handleNewData","json","getTaskChecklistSuccess","catch","err","getTaskChecklistFailure","handleUnauthorized","finally","type","payload","error"],"mappings":"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","sourcesContent":["import { addLoader, authLogout, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\nimport { ORGANIZATIONS } from 'consts';\r\n\r\nexport const getTaskChecklist =\r\n  (params = {}) =>\r\n  (dispatch, getState) => {\r\n    // prettier-ignore\r\n    const { user: { auth }, config: { vars: { endpoint } } } = getState();\r\n\r\n    const { taskCode, taskId, userOrgName } = params;\r\n\r\n    const orgId = ORGANIZATIONS[userOrgName]?.id;\r\n    const viewLoader = params?.viewLoader ?? true\r\n\r\n    const defaultError = {\r\n      file: 'stores/claims.actions.getTaskChecklist',\r\n    };\r\n\r\n    dispatch(getTaskChecklistRequest(params));\r\n    viewLoader &&  dispatch(addLoader('getTaskChecklist'));\r\n\r\n    return utils.api\r\n      .get({\r\n        token: auth.accessToken,\r\n        endpoint: endpoint.bpmService,\r\n        path: `workflow/task/${taskCode}/checkList?organisationId=${orgId}&taskId=${taskId}`,\r\n      })\r\n      .then((response) => utils.api.handleResponse(response))\r\n      .then((data) => utils.api.handleNewData(data))\r\n      .then((json) => {\r\n        dispatch(getTaskChecklistSuccess(json));\r\n        return json;\r\n      })\r\n      .catch((err) => {\r\n        dispatch(getTaskChecklistFailure(err, defaultError));\r\n        utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n        return err;\r\n      })\r\n      .finally(() => {\r\n        viewLoader &&  dispatch(removeLoader('getTaskChecklist'));\r\n      });\r\n  };\r\n\r\nexport const getTaskChecklistRequest = (params) => {\r\n  return {\r\n    type: 'CLAIMS_TASK_PROCESSING_GET_CHECKLIST_REQUEST',\r\n    payload: params,\r\n  };\r\n};\r\n\r\nexport const getTaskChecklistSuccess = (json) => {\r\n  return {\r\n    type: 'CLAIMS_TASK_PROCESSING_GET_CHECKLIST_SUCCESS',\r\n    payload: json.data,\r\n  };\r\n};\r\n\r\nexport const getTaskChecklistFailure = (error) => {\r\n  return {\r\n    type: 'CLAIMS_TASK_PROCESSING_GET_CHECKLIST_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}