{"ast":null,"code":"import _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ClaimRefTasks\\\\ClaimRefTasks.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useForm } from 'react-hook-form';\nimport { useSelector, useDispatch } from 'react-redux';\nimport ClaimRefTasksView from './ClaimRefTasks.view'; //app\n\nimport { showModal, getClaimRefTasks, selectClaimRefTaskData, selectClaimRefTaskFilters, selectClaimsTasksProcessingSelected, selectClaimsProcessingTasksSelected } from 'stores';\nimport { MultiSelect, FormDate } from 'components';\nimport { useFlexiColumns } from 'hooks';\nimport * as utils from 'utils';\nimport { CLAIM_PROCESSING_REQ_TYPES } from 'consts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nClaimRefTasks.propTypes = {\n  claim: PropTypes.shape({\n    claimID: PropTypes.number.isRequired\n  })\n};\nexport default function ClaimRefTasks(_ref) {\n  _s();\n\n  var claim = _ref.claim;\n  var dispatch = useDispatch();\n  var claimRefTasks = useSelector(selectClaimRefTaskData);\n  var claimRefTasksFilters = useSelector(selectClaimRefTaskFilters);\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      searchValue = _useState2[0],\n      setSearchValue = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      resetKey = _useState4[0],\n      setResetKey = _useState4[1];\n\n  var searchTypeCall = CLAIM_PROCESSING_REQ_TYPES.search;\n  var filterTypeCall = CLAIM_PROCESSING_REQ_TYPES.filter;\n  var hasTasks = utils.generic.isValidArray(claimRefTasks, true);\n  var tasksProcessingSelected = useSelector(selectClaimsTasksProcessingSelected);\n  var enableBulkAssign = utils.generic.isValidArray(tasksProcessingSelected, true) && tasksProcessingSelected.length > 1 && tasksProcessingSelected.length <= 10;\n  var columns = [{\n    id: 'id',\n    empty: true,\n    visible: true\n  }, {\n    id: 'taskRef',\n    label: utils.string.t('claims.processing.tasksGridColumns.taskRef'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: false,\n    visible: true,\n    mandatory: true\n  }, {\n    id: 'createdOn',\n    label: utils.string.t('claims.processing.tasksGridColumns.dateAndTimeCreated'),\n    sort: {\n      type: 'date',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true,\n    mandatory: true\n  }, {\n    id: 'team',\n    label: utils.string.t('app.team'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true\n  }, {\n    id: 'taskType',\n    label: utils.string.t('claims.processing.tasksGridColumns.taskName'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }, {\n    id: 'description',\n    label: utils.string.t('claims.processing.tasksGridColumns.description'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true,\n    ellipsis: true\n  }, {\n    id: 'targetDueDate',\n    label: utils.string.t('claims.processing.tasksGridColumns.dueDate'),\n    sort: {\n      type: 'date',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }, {\n    id: 'assignee',\n    label: utils.string.t('claims.processing.tasksGridColumns.assignedTo'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true\n  }, {\n    id: 'additionalAssignee',\n    label: utils.string.t('claims.processing.tasksGridColumns.additionalAssignee'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }, {\n    id: 'priority',\n    label: utils.string.t('claims.processing.tasksGridColumns.priority'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true\n  }, {\n    id: 'status',\n    label: utils.string.t('claims.processing.tasksGridColumns.status'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    style: {\n      textAlign: 'center'\n    },\n    nowrap: true,\n    visible: true\n  }];\n  var dateFields = [{\n    name: 'createdOn',\n    type: 'datepicker',\n    value: null\n  }, {\n    name: 'targetDueDate',\n    type: 'datepicker',\n    value: null\n  }];\n  var defaultValues = utils.form.getInitialValues(dateFields);\n\n  var _useForm = useForm({\n    defaultValues: defaultValues\n  }),\n      control = _useForm.control,\n      reset = _useForm.reset,\n      setValue = _useForm.setValue;\n\n  var tableFilterFields = [{\n    id: 'createdOn',\n    type: 'datepicker',\n    label: utils.string.t('claims.processing.tasksGridColumns.dateCreated'),\n    value: '',\n    content: /*#__PURE__*/_jsxDEV(FormDate, _objectSpread(_objectSpread({\n      control: control\n    }, utils.form.getFieldProps(dateFields, 'createdOn')), {}, {\n      id: \"datepicker\",\n      label: '',\n      plainText: true,\n      plainTextIcon: true,\n      placeholder: utils.string.t('app.selectDate'),\n      muiComponentProps: {\n        fullWidth: false,\n        margin: 'dense'\n      },\n      muiPickerProps: {\n        clearable: false,\n        variant: 'inline',\n        format: 'DD-MM-YYYY'\n      }\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }, this)\n  }, {\n    id: 'targetDueDate',\n    type: 'datepicker',\n    label: utils.string.t('claims.processing.tasksGridColumns.dueDate'),\n    value: '',\n    content: /*#__PURE__*/_jsxDEV(FormDate, _objectSpread(_objectSpread({\n      control: control\n    }, utils.form.getFieldProps(dateFields, 'targetDueDate')), {}, {\n      id: \"datepicker\",\n      label: '',\n      plainText: true,\n      plainTextIcon: true,\n      placeholder: utils.string.t('app.selectDate'),\n      muiComponentProps: {\n        fullWidth: false,\n        margin: 'dense'\n      },\n      muiPickerProps: {\n        clearable: false,\n        variant: 'inline',\n        format: 'DD-MM-YYYY'\n      }\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }, this)\n  }, {\n    id: 'taskType',\n    type: 'multiSelect',\n    label: utils.string.t('claims.processing.tasksGridColumns.taskType'),\n    value: [],\n    options: claimRefTasksFilters === null || claimRefTasksFilters === void 0 ? void 0 : claimRefTasksFilters.taskType,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"taskType\",\n      search: true,\n      options: claimRefTasksFilters === null || claimRefTasksFilters === void 0 ? void 0 : claimRefTasksFilters.taskType\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 16\n    }, this)\n  }, {\n    id: 'priority',\n    type: 'multiSelect',\n    label: utils.string.t('claims.processing.tasksGridColumns.priority'),\n    value: [],\n    options: claimRefTasksFilters === null || claimRefTasksFilters === void 0 ? void 0 : claimRefTasksFilters.priority,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"priority\",\n      search: true,\n      options: claimRefTasksFilters === null || claimRefTasksFilters === void 0 ? void 0 : claimRefTasksFilters.priority\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 16\n    }, this)\n  }, {\n    id: 'status',\n    type: 'multiSelect',\n    label: utils.string.t('claims.processing.tasksGridColumns.status'),\n    value: [],\n    options: claimRefTasksFilters === null || claimRefTasksFilters === void 0 ? void 0 : claimRefTasksFilters.status,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"status\",\n      search: true,\n      options: claimRefTasksFilters === null || claimRefTasksFilters === void 0 ? void 0 : claimRefTasksFilters.status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 16\n    }, this)\n  }, {\n    id: 'createdBy',\n    type: 'multiSelect',\n    label: utils.string.t('claims.processing.tasksGridColumns.createdBy'),\n    value: [],\n    options: claimRefTasksFilters === null || claimRefTasksFilters === void 0 ? void 0 : claimRefTasksFilters.requestedBy,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"createdBy\",\n      search: true,\n      options: claimRefTasksFilters === null || claimRefTasksFilters === void 0 ? void 0 : claimRefTasksFilters.requestedBy\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 16\n    }, this)\n  }];\n\n  var resetFilterDatePicker = function resetFilterDatePicker() {\n    setValue('createdOn', null);\n    setValue('targetDueDate', null);\n  };\n\n  var onResetFilter = function onResetFilter() {\n    dispatch(getClaimRefTasks({\n      requestType: searchTypeCall,\n      search: searchValue,\n      filterTerm: {}\n    }));\n    reset();\n    resetFilterDatePicker();\n  };\n\n  var onResetSearch = function onResetSearch() {\n    setSearchValue('');\n    setResetKey(new Date().getTime());\n    resetFilterDatePicker();\n    dispatch(getClaimRefTasks({\n      requestType: searchTypeCall,\n      search: '',\n      filterTerm: {}\n    }));\n    dispatch(getClaimRefTasks({\n      requestType: filterTypeCall,\n      search: '',\n      filterTerm: {}\n    }));\n  };\n\n  var handleSearch = function handleSearch(_ref2) {\n    var search = _ref2.search;\n    setSearchValue(search);\n    setResetKey(new Date().getTime());\n    resetFilterDatePicker();\n    dispatch(getClaimRefTasks({\n      requestType: searchTypeCall,\n      search: search,\n      direction: 'desc',\n      filterTerm: {}\n    }));\n    dispatch(getClaimRefTasks({\n      requestType: filterTypeCall,\n      search: search,\n      direction: 'desc',\n      filterTerm: {}\n    }));\n  };\n\n  var handleSearchFilter = function handleSearchFilter(_ref3) {\n    var filters = _ref3.filters;\n    dispatch(getClaimRefTasks({\n      requestType: searchTypeCall,\n      search: searchValue,\n      filterTerm: filters\n    }));\n  };\n\n  var handleChangePage = function handleChangePage(newPage) {\n    dispatch(getClaimRefTasks({\n      requestType: searchTypeCall,\n      page: newPage,\n      search: searchValue\n    }));\n  };\n\n  var handleChangeRowsPerPage = function handleChangeRowsPerPage(rowsPerPage) {\n    dispatch(getClaimRefTasks({\n      requestType: searchTypeCall,\n      size: rowsPerPage,\n      search: searchValue\n    }));\n  };\n\n  var handleSort = function handleSort(by, dir) {\n    dispatch(getClaimRefTasks({\n      requestType: searchTypeCall,\n      sortBy: by,\n      direction: dir.toUpperCase(),\n      search: searchValue\n    }));\n  };\n\n  var selectTask = function selectTask(taskObj) {\n    return function () {\n      if (taskObj === null || taskObj === void 0 ? void 0 : taskObj.taskId) {\n        dispatch(selectClaimsProcessingTasksSelected(taskObj, true));\n      }\n    };\n  };\n\n  var handleBulkAssign = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return dispatch(showModal({\n                component: 'ADD_ASSIGNEE',\n                props: {\n                  title: utils.string.t('app.assign'),\n                  hideCompOnBlur: false,\n                  fullWidth: true,\n                  maxWidth: 'sm',\n                  disableAutoFocus: true,\n                  componentProps: {\n                    taskDetails: tasksProcessingSelected,\n                    submitHandler: function submitHandler() {\n                      onResetFilter();\n                    }\n                  }\n                }\n              }));\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleBulkAssign() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  var _useFlexiColumns = useFlexiColumns(columns),\n      columnsArray = _useFlexiColumns.columns,\n      columnProps = _useFlexiColumns.columnProps,\n      toggleColumn = _useFlexiColumns.toggleColumn;\n\n  useEffect(function () {\n    dispatch(getClaimRefTasks({\n      requestType: searchTypeCall\n    }));\n    dispatch(getClaimRefTasks({\n      requestType: filterTypeCall\n    }));\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/_jsxDEV(ClaimRefTasksView, {\n    columnsArray: columnsArray,\n    columnProps: columnProps,\n    sort: _objectSpread(_objectSpread({}, claimRefTasks === null || claimRefTasks === void 0 ? void 0 : claimRefTasks.sort), {}, {\n      type: 'numeric'\n    }),\n    hasTasks: hasTasks,\n    enableBulkAssign: enableBulkAssign,\n    tableFilterFields: tableFilterFields,\n    tasks: (claimRefTasks === null || claimRefTasks === void 0 ? void 0 : claimRefTasks.length) > 0 ? claimRefTasks : [],\n    toggleColumn: toggleColumn,\n    resetKey: resetKey,\n    handlers: {\n      onResetFilter: onResetFilter,\n      onResetSearch: onResetSearch,\n      handleSearch: handleSearch,\n      handleSearchFilter: handleSearchFilter,\n      handleChangePage: handleChangePage,\n      handleChangeRowsPerPage: handleChangeRowsPerPage,\n      handleSort: handleSort,\n      selectTask: selectTask,\n      handleBulkAssign: handleBulkAssign\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 299,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ClaimRefTasks, \"b1JsK5rgaSo+Qun+51kl8a3INvM=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useForm, useFlexiColumns];\n});\n\n_c = ClaimRefTasks;\nClaimRefTasks.displayName = \"ClaimRefTasks\";\nClaimRefTasks.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"ClaimRefTasks\",\n  \"props\": {\n    \"claim\": {\n      \"type\": {\n        \"name\": \"shape\",\n        \"value\": {\n          \"claimID\": {\n            \"name\": \"number\",\n            \"required\": true\n          }\n        }\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\modules\\\\ClaimRefTasks\\\\ClaimRefTasks.js\"] = {\n    name: \"ClaimRefTasks\",\n    docgenInfo: ClaimRefTasks.__docgenInfo,\n    path: \"src\\\\modules\\\\ClaimRefTasks\\\\ClaimRefTasks.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimRefTasks\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ClaimRefTasks/ClaimRefTasks.js"],"names":["React","useEffect","useState","PropTypes","useForm","useSelector","useDispatch","ClaimRefTasksView","showModal","getClaimRefTasks","selectClaimRefTaskData","selectClaimRefTaskFilters","selectClaimsTasksProcessingSelected","selectClaimsProcessingTasksSelected","MultiSelect","FormDate","useFlexiColumns","utils","CLAIM_PROCESSING_REQ_TYPES","ClaimRefTasks","propTypes","claim","shape","claimID","number","isRequired","dispatch","claimRefTasks","claimRefTasksFilters","searchValue","setSearchValue","resetKey","setResetKey","searchTypeCall","search","filterTypeCall","filter","hasTasks","generic","isValidArray","tasksProcessingSelected","enableBulkAssign","length","columns","id","empty","visible","label","string","t","sort","type","direction","nowrap","mandatory","ellipsis","style","textAlign","dateFields","name","value","defaultValues","form","getInitialValues","control","reset","setValue","tableFilterFields","content","getFieldProps","fullWidth","margin","clearable","variant","format","options","taskType","priority","status","requestedBy","resetFilterDatePicker","onResetFilter","requestType","filterTerm","onResetSearch","Date","getTime","handleSearch","handleSearchFilter","filters","handleChangePage","newPage","page","handleChangeRowsPerPage","rowsPerPage","size","handleSort","by","dir","sortBy","toUpperCase","selectTask","taskObj","taskId","handleBulkAssign","component","props","title","hideCompOnBlur","maxWidth","disableAutoFocus","componentProps","taskDetails","submitHandler","columnsArray","columnProps","toggleColumn"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport ClaimRefTasksView from './ClaimRefTasks.view';\r\n\r\n//app\r\nimport {\r\n  showModal,\r\n  getClaimRefTasks,\r\n  selectClaimRefTaskData,\r\n  selectClaimRefTaskFilters,\r\n  selectClaimsTasksProcessingSelected,\r\n  selectClaimsProcessingTasksSelected,\r\n} from 'stores';\r\nimport { MultiSelect, FormDate } from 'components';\r\nimport { useFlexiColumns } from 'hooks';\r\nimport * as utils from 'utils';\r\nimport { CLAIM_PROCESSING_REQ_TYPES } from 'consts';\r\n\r\nClaimRefTasks.propTypes = {\r\n  claim: PropTypes.shape({\r\n    claimID: PropTypes.number.isRequired,\r\n  }),\r\n};\r\n\r\nexport default function ClaimRefTasks({ claim }) {\r\n  const dispatch = useDispatch();\r\n  const claimRefTasks = useSelector(selectClaimRefTaskData);\r\n  const claimRefTasksFilters = useSelector(selectClaimRefTaskFilters);\r\n  const [searchValue, setSearchValue] = useState('');\r\n  const [resetKey, setResetKey] = useState(); \r\n\r\n  const searchTypeCall = CLAIM_PROCESSING_REQ_TYPES.search;\r\n  const filterTypeCall = CLAIM_PROCESSING_REQ_TYPES.filter;\r\n\r\n  const hasTasks = utils.generic.isValidArray(claimRefTasks, true);\r\n  const tasksProcessingSelected = useSelector(selectClaimsTasksProcessingSelected);\r\n  const enableBulkAssign =\r\n    utils.generic.isValidArray(tasksProcessingSelected, true) && tasksProcessingSelected.length > 1 && tasksProcessingSelected.length <= 10;\r\n\r\n  const columns = [\r\n    { id: 'id', empty: true, visible: true },\r\n    {\r\n      id: 'taskRef',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.taskRef'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: false,\r\n      visible: true,\r\n      mandatory: true,\r\n    },\r\n    {\r\n      id: 'createdOn',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.dateAndTimeCreated'),\r\n      sort: { type: 'date', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n      mandatory: true,\r\n    },\r\n    {\r\n      id: 'team',\r\n      label: utils.string.t('app.team'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: true,\r\n    },\r\n    {\r\n      id: 'taskType',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.taskName'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n    },\r\n    {\r\n      id: 'description',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.description'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n      ellipsis: true,\r\n    },\r\n    {\r\n      id: 'targetDueDate',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.dueDate'),\r\n      sort: { type: 'date', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n    },\r\n\r\n    {\r\n      id: 'assignee',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.assignedTo'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: true,\r\n    },\r\n    {\r\n      id: 'additionalAssignee',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.additionalAssignee'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n    },\r\n    {\r\n      id: 'priority',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.priority'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: true,\r\n    },\r\n    {\r\n      id: 'status',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.status'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      style: { textAlign: 'center' },\r\n      nowrap: true,\r\n      visible: true,\r\n    },\r\n  ];\r\n\r\n  const dateFields = [\r\n    {\r\n      name: 'createdOn',\r\n      type: 'datepicker',\r\n      value: null,\r\n    },\r\n    {\r\n      name: 'targetDueDate',\r\n      type: 'datepicker',\r\n      value: null,\r\n    },\r\n  ];\r\n\r\n  const defaultValues = utils.form.getInitialValues(dateFields);\r\n  const { control, reset, setValue } = useForm({ defaultValues });\r\n\r\n  const tableFilterFields = [\r\n   \r\n    {\r\n      id: 'createdOn',\r\n      type: 'datepicker',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.dateCreated'),\r\n      value: '',\r\n      content: (\r\n        <FormDate\r\n          control={control}\r\n          {...utils.form.getFieldProps(dateFields, 'createdOn')}\r\n          id=\"datepicker\"\r\n          label={''}\r\n          plainText\r\n          plainTextIcon\r\n          placeholder={utils.string.t('app.selectDate')}\r\n          muiComponentProps={{\r\n            fullWidth: false,\r\n            margin: 'dense',\r\n          }}\r\n          muiPickerProps={{\r\n            clearable: false,\r\n            variant: 'inline',\r\n            format: 'DD-MM-YYYY',\r\n          }}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      id: 'targetDueDate',\r\n      type: 'datepicker',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.dueDate'),\r\n      value: '',\r\n      content: (\r\n        <FormDate\r\n          control={control}\r\n          {...utils.form.getFieldProps(dateFields, 'targetDueDate')}\r\n          id=\"datepicker\"\r\n          label={''}\r\n          plainText\r\n          plainTextIcon\r\n          placeholder={utils.string.t('app.selectDate')}\r\n          muiComponentProps={{\r\n            fullWidth: false,\r\n            margin: 'dense',\r\n          }}\r\n          muiPickerProps={{\r\n            clearable: false,\r\n            variant: 'inline',\r\n            format: 'DD-MM-YYYY',\r\n          }}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      id: 'taskType',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.taskType'),\r\n      value: [],\r\n      options: claimRefTasksFilters?.taskType,\r\n      content: <MultiSelect id=\"taskType\" search options={claimRefTasksFilters?.taskType} />,\r\n    },\r\n    {\r\n      id: 'priority',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.priority'),\r\n      value: [],\r\n      options: claimRefTasksFilters?.priority,\r\n      content: <MultiSelect id=\"priority\" search options={claimRefTasksFilters?.priority} />,\r\n    },\r\n    {\r\n      id: 'status',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.status'),\r\n      value: [],\r\n      options: claimRefTasksFilters?.status,\r\n      content: <MultiSelect id=\"status\" search options={claimRefTasksFilters?.status} />,\r\n    },\r\n    {\r\n      id: 'createdBy',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.createdBy'),\r\n      value: [],\r\n      options: claimRefTasksFilters?.requestedBy,\r\n      content: <MultiSelect id=\"createdBy\" search options={claimRefTasksFilters?.requestedBy} />,\r\n    },\r\n  ];\r\n\r\n  const resetFilterDatePicker = () => {\r\n    setValue('createdOn', null);\r\n    setValue('targetDueDate', null);\r\n  };\r\n\r\n  const onResetFilter = () => {\r\n    dispatch(getClaimRefTasks({ requestType: searchTypeCall, search: searchValue, filterTerm: {} }));\r\n    reset();\r\n    resetFilterDatePicker();\r\n  };\r\n\r\n  const onResetSearch = () => {\r\n    setSearchValue('');\r\n    setResetKey(new Date().getTime());\r\n    resetFilterDatePicker();\r\n    dispatch(getClaimRefTasks({ requestType: searchTypeCall, search: '', filterTerm: {} }));\r\n    dispatch(getClaimRefTasks({ requestType: filterTypeCall, search: '', filterTerm: {} }));\r\n  };\r\n\r\n  const handleSearch = ({ search }) => {\r\n    setSearchValue(search);\r\n    setResetKey(new Date().getTime());\r\n    resetFilterDatePicker();\r\n    dispatch(getClaimRefTasks({ requestType: searchTypeCall, search, direction: 'desc', filterTerm: {} }));\r\n    dispatch(getClaimRefTasks({ requestType: filterTypeCall, search, direction: 'desc', filterTerm: {} }));\r\n  };\r\n\r\n  const handleSearchFilter = ({ filters }) => {\r\n    dispatch(getClaimRefTasks({ requestType: searchTypeCall, search: searchValue, filterTerm: filters }));\r\n  };\r\n\r\n  const handleChangePage = (newPage) => {\r\n    dispatch(getClaimRefTasks({ requestType: searchTypeCall, page: newPage, search: searchValue }));\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (rowsPerPage) => {\r\n    dispatch(getClaimRefTasks({ requestType: searchTypeCall, size: rowsPerPage, search: searchValue }));\r\n  };\r\n\r\n  const handleSort = (by, dir) => {\r\n    dispatch(getClaimRefTasks({ requestType: searchTypeCall, sortBy: by, direction: dir.toUpperCase(), search: searchValue }));\r\n  };\r\n\r\n  const selectTask = (taskObj) => () => {\r\n    if (taskObj?.taskId) {\r\n      dispatch(selectClaimsProcessingTasksSelected(taskObj, true));\r\n    }\r\n  };\r\n\r\n  const handleBulkAssign = async () => {\r\n    await dispatch(\r\n      showModal({\r\n        component: 'ADD_ASSIGNEE',\r\n        props: {\r\n          title: utils.string.t('app.assign'),\r\n          hideCompOnBlur: false,\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            taskDetails: tasksProcessingSelected,\r\n            submitHandler: () => {\r\n              onResetFilter();\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n  const { columns: columnsArray, columnProps, toggleColumn } = useFlexiColumns(columns);\r\n\r\n  useEffect(() => {\r\n    dispatch(getClaimRefTasks({ requestType: searchTypeCall }));\r\n    dispatch(getClaimRefTasks({ requestType: filterTypeCall }));\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <ClaimRefTasksView\r\n      columnsArray={columnsArray}\r\n      columnProps={columnProps}\r\n      sort={{\r\n        ...claimRefTasks?.sort,\r\n        type: 'numeric',\r\n      }}\r\n      hasTasks={hasTasks}\r\n      enableBulkAssign={enableBulkAssign}\r\n      tableFilterFields={tableFilterFields}\r\n      tasks={claimRefTasks?.length > 0 ? claimRefTasks : []}\r\n      toggleColumn={toggleColumn}\r\n      resetKey={resetKey}\r\n      handlers={{\r\n        onResetFilter,\r\n        onResetSearch,\r\n        handleSearch,\r\n        handleSearchFilter,\r\n        handleChangePage,\r\n        handleChangeRowsPerPage,\r\n        handleSort,\r\n        selectTask,\r\n        handleBulkAssign,\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}