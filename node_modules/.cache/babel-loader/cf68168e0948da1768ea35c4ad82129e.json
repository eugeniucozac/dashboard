{"ast":null,"code":"// app\nimport { authLogout } from 'stores';\nimport * as utils from 'utils';\nimport * as constants from 'consts';\nexport var uploadGeneratedPiPdfToGxb = function uploadGeneratedPiPdfToGxb(fileObj) {\n  return function (dispatch, getState) {\n    var state = getState(); // prettier-ignore\n\n    var auth = state.user.auth,\n        endpoint = state.config.vars.endpoint;\n    var pdf = fileObj.pdf,\n        riskRef = fileObj.riskRef,\n        documentTypesAfterFilter = fileObj.documentTypesAfterFilter,\n        instruction = fileObj.instruction,\n        metaData = fileObj.metaData;\n    var _documentTypesAfterFi = documentTypesAfterFilter[0],\n        documentTypeID = _documentTypesAfterFi.documentTypeID,\n        documentTypeDescription = _documentTypesAfterFi.documentTypeDescription,\n        sourceID = _documentTypesAfterFi.sourceID;\n    var catCodesID = metaData.catCodesID,\n        lossId = metaData.lossId,\n        departmentId = metaData.departmentId,\n        departmentName = metaData.departmentName,\n        insuredName = metaData.insuredName,\n        policyId = metaData.policyId,\n        policyRef = metaData.policyRef,\n        subDepartmentId = metaData.subDepartmentId,\n        uniqueMarketRef = metaData.uniqueMarketRef,\n        year = metaData.year;\n    dispatch(uploadGeneratedPiPdfToGxbRequest(pdf));\n    var pdfName = (instruction === null || instruction === void 0 ? void 0 : instruction.hasOwnProperty('reopenedDate')) ? \"Processing-instruction-\".concat(instruction === null || instruction === void 0 ? void 0 : instruction.id, \"-\").concat(riskRef === null || riskRef === void 0 ? void 0 : riskRef.riskRefId, \"_new.pdf\") : \"Processing-instruction-\".concat(instruction === null || instruction === void 0 ? void 0 : instruction.id, \"-\").concat(riskRef === null || riskRef === void 0 ? void 0 : riskRef.riskRefId, \".pdf\");\n    var formData = new FormData();\n    var newPdf = new File([pdf], pdfName, {\n      type: 'application/pdf'\n    });\n    var docDto = [];\n    formData.append('uploadFiles', newPdf);\n    docDto.push({\n      tags: [],\n      documentName: pdfName,\n      documentTypeId: documentTypeID,\n      documentTypeDescription: documentTypeDescription,\n      fileLastModifiedDate: new Date(),\n      docClassification: '3',\n      metadataFields: []\n    });\n    formData.append('fileUploadRequestPayload', JSON.stringify({\n      catCodesID: catCodesID,\n      lossId: lossId,\n      sectionType: constants.DMS_CONTEXT_PROCESSING_INSTRUCTION,\n      srcApplication: constants.DMS_SRC_APPLICATION_EDGE,\n      referenceId: instruction === null || instruction === void 0 ? void 0 : instruction.id,\n      xbInstanceId: sourceID,\n      departmentId: departmentId,\n      departmentName: departmentName,\n      insuredName: insuredName,\n      policyId: policyId,\n      policyRef: policyRef,\n      subDepartmentId: subDepartmentId,\n      uniqueMarketRef: uniqueMarketRef,\n      year: year,\n      documentDto: [].concat(docDto)\n    }));\n    return utils.api.multiPartPost({\n      token: auth.accessToken,\n      endpoint: endpoint.dmsService,\n      path: 'dms/document/upload',\n      data: formData\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (json) {\n      dispatch(uploadGeneratedPiPdfToGxbSuccess(json.data));\n      return json.data;\n    }).catch(function (err) {\n      var errorParams = {\n        file: 'stores/processingInstructions.actions.uploadGeneratedPiPdfToGxb',\n        message: utils.string.t('processingInstructions.apiMultipartPostError(uploadGeneratedPiPdfToGxb))')\n      };\n      dispatch(uploadGeneratedPiPdfToGxbFailure(err));\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      return err;\n    });\n  };\n};\nexport var uploadGeneratedPiPdfToGxbRequest = function uploadGeneratedPiPdfToGxbRequest(payload) {\n  return {\n    type: 'UPLOAD_GENERATED_PROCESSING_INSTRUCTION_PDF_TO_GXB_REQUEST',\n    payload: payload\n  };\n};\nexport var uploadGeneratedPiPdfToGxbSuccess = function uploadGeneratedPiPdfToGxbSuccess(data) {\n  return {\n    type: 'UPLOAD_GENERATED_PROCESSING_INSTRUCTION_PDF_TO_GXB_SUCCESS',\n    payload: {\n      data: data\n    }\n  };\n};\nexport var uploadGeneratedPiPdfToGxbFailure = function uploadGeneratedPiPdfToGxbFailure(error) {\n  return {\n    type: 'UPLOAD_GENERATED_PROCESSING_INSTRUCTION_PDF_TO_GXB_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/processingInstructions/processingInstructions.actions.uploadGeneratedPiPdfToGxb.js"],"names":["authLogout","utils","constants","uploadGeneratedPiPdfToGxb","fileObj","dispatch","getState","state","auth","user","endpoint","config","vars","pdf","riskRef","documentTypesAfterFilter","instruction","metaData","documentTypeID","documentTypeDescription","sourceID","catCodesID","lossId","departmentId","departmentName","insuredName","policyId","policyRef","subDepartmentId","uniqueMarketRef","year","uploadGeneratedPiPdfToGxbRequest","pdfName","hasOwnProperty","id","riskRefId","formData","FormData","newPdf","File","type","docDto","append","push","tags","documentName","documentTypeId","fileLastModifiedDate","Date","docClassification","metadataFields","JSON","stringify","sectionType","DMS_CONTEXT_PROCESSING_INSTRUCTION","srcApplication","DMS_SRC_APPLICATION_EDGE","referenceId","xbInstanceId","documentDto","api","multiPartPost","token","accessToken","dmsService","path","data","then","response","handleResponse","json","handleNewData","uploadGeneratedPiPdfToGxbSuccess","catch","err","errorParams","file","message","string","t","uploadGeneratedPiPdfToGxbFailure","handleError","handleUnauthorized","payload","error"],"mappings":"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","sourcesContent":["// app\r\nimport { authLogout } from 'stores';\r\nimport * as utils from 'utils';\r\nimport * as constants from 'consts';\r\n\r\nexport const uploadGeneratedPiPdfToGxb = (fileObj) => (dispatch, getState) => {\r\n  const state = getState();\r\n\r\n  // prettier-ignore\r\n  const { user:{ auth }, config: { vars: { endpoint } } } = state;\r\n\r\n  const { pdf, riskRef, documentTypesAfterFilter, instruction, metaData } = fileObj;\r\n  const { documentTypeID, documentTypeDescription, sourceID } = documentTypesAfterFilter[0];\r\n  const { catCodesID, lossId, departmentId, departmentName, insuredName, policyId, policyRef, subDepartmentId, uniqueMarketRef, year } =\r\n    metaData;\r\n\r\n  dispatch(uploadGeneratedPiPdfToGxbRequest(pdf));\r\n\r\n  const pdfName = instruction?.hasOwnProperty('reopenedDate')\r\n    ? `Processing-instruction-${instruction?.id}-${riskRef?.riskRefId}_new.pdf`\r\n    : `Processing-instruction-${instruction?.id}-${riskRef?.riskRefId}.pdf`;\r\n\r\n  let formData = new FormData();\r\n  const newPdf = new File([pdf], pdfName, {\r\n    type: 'application/pdf',\r\n  });\r\n\r\n  let docDto = [];\r\n  formData.append('uploadFiles', newPdf);\r\n\r\n  docDto.push({\r\n    tags: [],\r\n    documentName: pdfName,\r\n    documentTypeId: documentTypeID,\r\n    documentTypeDescription: documentTypeDescription,\r\n    fileLastModifiedDate: new Date(),\r\n    docClassification: '3',\r\n    metadataFields: [],\r\n  });\r\n\r\n  formData.append(\r\n    'fileUploadRequestPayload',\r\n    JSON.stringify({\r\n      catCodesID,\r\n      lossId,\r\n      sectionType: constants.DMS_CONTEXT_PROCESSING_INSTRUCTION,\r\n      srcApplication: constants.DMS_SRC_APPLICATION_EDGE,\r\n      referenceId: instruction?.id,\r\n      xbInstanceId: sourceID,\r\n      departmentId,\r\n      departmentName,\r\n      insuredName,\r\n      policyId,\r\n      policyRef,\r\n      subDepartmentId,\r\n      uniqueMarketRef,\r\n      year,\r\n      documentDto: [...docDto],\r\n    })\r\n  );\r\n\r\n  return utils.api\r\n    .multiPartPost({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.dmsService,\r\n      path: 'dms/document/upload',\r\n      data: formData,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((json) => {\r\n      dispatch(uploadGeneratedPiPdfToGxbSuccess(json.data));\r\n      return json.data;\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        file: 'stores/processingInstructions.actions.uploadGeneratedPiPdfToGxb',\r\n        message: utils.string.t('processingInstructions.apiMultipartPostError(uploadGeneratedPiPdfToGxb))'),\r\n      };\r\n\r\n      dispatch(uploadGeneratedPiPdfToGxbFailure(err));\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const uploadGeneratedPiPdfToGxbRequest = (payload) => {\r\n  return {\r\n    type: 'UPLOAD_GENERATED_PROCESSING_INSTRUCTION_PDF_TO_GXB_REQUEST',\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const uploadGeneratedPiPdfToGxbSuccess = (data) => {\r\n  return {\r\n    type: 'UPLOAD_GENERATED_PROCESSING_INSTRUCTION_PDF_TO_GXB_SUCCESS',\r\n    payload: {\r\n      data,\r\n    },\r\n  };\r\n};\r\n\r\nexport const uploadGeneratedPiPdfToGxbFailure = (error) => {\r\n  return {\r\n    type: 'UPLOAD_GENERATED_PROCESSING_INSTRUCTION_PDF_TO_GXB_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}