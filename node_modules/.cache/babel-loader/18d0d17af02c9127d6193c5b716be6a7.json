{"ast":null,"code":"import { authLogout } from 'stores';\nimport * as utils from 'utils';\nexport var getRiskQuotes = function getRiskQuotes(id) {\n  var updateLoading = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/risk.actions.getQuotes'\n    };\n    updateLoading && dispatch(getRiskQuotesRequest(id));\n\n    if (!id) {\n      dispatch(getRiskQuotesFailure(defaultError));\n      return;\n    }\n\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.auth,\n      path: \"api/v1/risks/\".concat(id, \"/quotes\")\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleResponseJsonArray(json);\n    }).then(function (data) {\n      dispatch(getRiskQuotesSuccess(data, id));\n      return data;\n    }).catch(function (err) {\n      utils.api.handleError(err, defaultError);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(getRiskQuotesFailure(err));\n      return err;\n    });\n  };\n};\nexport var getRiskQuotesRequest = function getRiskQuotesRequest(id) {\n  return {\n    type: 'RISK_QUOTES_GET_REQUEST',\n    payload: id\n  };\n};\nexport var getRiskQuotesSuccess = function getRiskQuotesSuccess(data, riskId) {\n  return {\n    type: 'RISK_QUOTES_GET_SUCCESS',\n    payload: {\n      items: data,\n      riskId: riskId\n    }\n  };\n};\nexport var getRiskQuotesFailure = function getRiskQuotesFailure(error) {\n  return {\n    type: 'RISK_QUOTES_GET_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/risk/risk.actions.getQuotes.js"],"names":["authLogout","utils","getRiskQuotes","id","updateLoading","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","getRiskQuotesRequest","getRiskQuotesFailure","api","get","token","accessToken","path","then","response","handleResponse","json","handleResponseJsonArray","data","getRiskQuotesSuccess","catch","err","handleError","handleUnauthorized","type","payload","riskId","items","error"],"mappings":"AAAA,SAASA,UAAT,QAA2B,QAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAO,IAAMC,aAAa,GACxB,SADWA,aACX,CAACC,EAAD;AAAA,MAAKC,aAAL,uEAAqB,IAArB;AAAA,SACA,UAACC,QAAD,EAAWC,QAAX,EAAwB;AACtB;AADsB,oBAEmCA,QAAQ,EAF3C;AAAA,QAENC,IAFM,aAEdC,IAFc,CAEND,IAFM;AAAA,QAEoBE,QAFpB,aAEEC,MAFF,CAEYC,IAFZ,CAEoBF,QAFpB;;AAItB,QAAMG,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE;AADa,KAArB;AAIAT,IAAAA,aAAa,IAAIC,QAAQ,CAACS,oBAAoB,CAACX,EAAD,CAArB,CAAzB;;AAEA,QAAI,CAACA,EAAL,EAAS;AACPE,MAAAA,QAAQ,CAACU,oBAAoB,CAACH,YAAD,CAArB,CAAR;AACA;AACD;;AAED,WAAOX,KAAK,CAACe,GAAN,CACJC,GADI,CACA;AACHC,MAAAA,KAAK,EAAEX,IAAI,CAACY,WADT;AAEHV,MAAAA,QAAQ,EAAEA,QAAQ,CAACF,IAFhB;AAGHa,MAAAA,IAAI,yBAAkBjB,EAAlB;AAHD,KADA,EAMJkB,IANI,CAMC,UAACC,QAAD;AAAA,aAAcrB,KAAK,CAACe,GAAN,CAAUO,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAND,EAOJD,IAPI,CAOC,UAACG,IAAD;AAAA,aAAUvB,KAAK,CAACe,GAAN,CAAUS,uBAAV,CAAkCD,IAAlC,CAAV;AAAA,KAPD,EAQJH,IARI,CAQC,UAACK,IAAD,EAAU;AACdrB,MAAAA,QAAQ,CAACsB,oBAAoB,CAACD,IAAD,EAAOvB,EAAP,CAArB,CAAR;AACA,aAAOuB,IAAP;AACD,KAXI,EAYJE,KAZI,CAYE,UAACC,GAAD,EAAS;AACd5B,MAAAA,KAAK,CAACe,GAAN,CAAUc,WAAV,CAAsBD,GAAtB,EAA2BjB,YAA3B;AACAX,MAAAA,KAAK,CAACe,GAAN,CAAUe,kBAAV,CAA6BF,GAA7B,EAAkCxB,QAAlC,EAA4CL,UAA5C;AACAK,MAAAA,QAAQ,CAACU,oBAAoB,CAACc,GAAD,CAArB,CAAR;AACA,aAAOA,GAAP;AACD,KAjBI,CAAP;AAkBD,GAlCD;AAAA,CADK;AAqCP,OAAO,IAAMf,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACX,EAAD,EAAQ;AAC1C,SAAO;AACL6B,IAAAA,IAAI,EAAE,yBADD;AAELC,IAAAA,OAAO,EAAE9B;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMwB,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACD,IAAD,EAAOQ,MAAP,EAAkB;AACpD,SAAO;AACLF,IAAAA,IAAI,EAAE,yBADD;AAELC,IAAAA,OAAO,EAAE;AAAEE,MAAAA,KAAK,EAAET,IAAT;AAAeQ,MAAAA,MAAM,EAANA;AAAf;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMnB,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACqB,KAAD,EAAW;AAC7C,SAAO;AACLJ,IAAAA,IAAI,EAAE,yBADD;AAELC,IAAAA,OAAO,EAAEG;AAFJ,GAAP;AAID,CALM","sourcesContent":["import { authLogout } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const getRiskQuotes =\r\n  (id, updateLoading = true) =>\r\n  (dispatch, getState) => {\r\n    // prettier-ignore\r\n    const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n    const defaultError = {\r\n      file: 'stores/risk.actions.getQuotes',\r\n    };\r\n\r\n    updateLoading && dispatch(getRiskQuotesRequest(id));\r\n\r\n    if (!id) {\r\n      dispatch(getRiskQuotesFailure(defaultError));\r\n      return;\r\n    }\r\n\r\n    return utils.api\r\n      .get({\r\n        token: auth.accessToken,\r\n        endpoint: endpoint.auth,\r\n        path: `api/v1/risks/${id}/quotes`,\r\n      })\r\n      .then((response) => utils.api.handleResponse(response))\r\n      .then((json) => utils.api.handleResponseJsonArray(json))\r\n      .then((data) => {\r\n        dispatch(getRiskQuotesSuccess(data, id));\r\n        return data;\r\n      })\r\n      .catch((err) => {\r\n        utils.api.handleError(err, defaultError);\r\n        utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n        dispatch(getRiskQuotesFailure(err));\r\n        return err;\r\n      });\r\n  };\r\n\r\nexport const getRiskQuotesRequest = (id) => {\r\n  return {\r\n    type: 'RISK_QUOTES_GET_REQUEST',\r\n    payload: id,\r\n  };\r\n};\r\n\r\nexport const getRiskQuotesSuccess = (data, riskId) => {\r\n  return {\r\n    type: 'RISK_QUOTES_GET_SUCCESS',\r\n    payload: { items: data, riskId },\r\n  };\r\n};\r\n\r\nexport const getRiskQuotesFailure = (error) => {\r\n  return {\r\n    type: 'RISK_QUOTES_GET_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}