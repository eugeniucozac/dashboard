{"ast":null,"code":"import _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\components\\\\App\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport get from 'lodash/get'; // app\n\nimport { AppView } from './App.view';\nimport { setBrand, selectUser, selectUserIsExtended, selectIsAdmin, selectUserIsCurrent, selectDmsDocViewerState } from 'stores';\nimport * as utils from 'utils';\nimport { HOTJAR_ID, HOTJAR_VERSION } from 'consts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      userIsLoaded = _useState2[0],\n      setUserIsLoaded = _useState2[1];\n\n  var dispatch = useDispatch();\n  var user = useSelector(selectUser);\n  var userIsAdmin = useSelector(selectIsAdmin);\n  var userIsExtendedEdge = useSelector(selectUserIsExtended);\n  var userIsCurrentEdge = useSelector(selectUserIsCurrent);\n  var uiBrand = useSelector(function (state) {\n    return get(state, 'ui.brand');\n  });\n  var uiLoaderQueue = useSelector(function (state) {\n    return get(state, 'ui.loader.queue', []);\n  });\n  var configVars = useSelector(function (state) {\n    return get(state, 'config.vars');\n  });\n  var isServiceWorkerUpdated = useSelector(function (state) {\n    return get(state, 'ui.serviceWorkerUpdated');\n  });\n  var serviceWorkerRegistration = useSelector(function (state) {\n    return get(state, 'ui.serviceWorkerRegistration');\n  });\n  var isDmsDocViewerModeOn = useSelector(selectDmsDocViewerState);\n\n  var updateServiceWorker = function updateServiceWorker() {\n    var registrationWaiting = serviceWorkerRegistration.waiting;\n\n    if (registrationWaiting) {\n      registrationWaiting.postMessage({\n        type: 'SKIP_WAITING'\n      });\n      registrationWaiting.addEventListener('statechange', function (e) {\n        if (e.target.state === 'activated') {\n          window.location.reload();\n        }\n      });\n    }\n  };\n\n  useEffect(function () {\n    var _user$auth;\n\n    (user === null || user === void 0 ? void 0 : user.id) && (user === null || user === void 0 ? void 0 : (_user$auth = user.auth) === null || _user$auth === void 0 ? void 0 : _user$auth.accessToken) && setUserIsLoaded(true);\n  }, [user]);\n  useEffect(function () {\n    if (!uiBrand) {\n      dispatch(setBrand(utils.app.getHostName()));\n    }\n\n    document.title = utils.app.getAppName(uiBrand);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    if (utils.app.isPriceForbesProduction()) {\n      utils.app.hotjar(HOTJAR_ID, HOTJAR_VERSION);\n    }\n  }, []);\n  return userIsLoaded ? /*#__PURE__*/_jsxDEV(AppView, {\n    isBroker: utils.user.isBroker(user),\n    isUnderwriter: utils.user.isUnderwriter(user),\n    isAdmin: userIsAdmin,\n    isExtendedEdge: userIsExtendedEdge,\n    isCurrentEdge: userIsCurrentEdge,\n    isUserLoaded: utils.user.isLoaded(user),\n    isDev: utils.app.isDevelopment(configVars),\n    isDmsDocViewerModeOn: isDmsDocViewerModeOn,\n    landingPage: utils.user.getLandingPage(user),\n    hasLoader: uiLoaderQueue.length > 0,\n    sw: {\n      isServiceWorkerUpdated: isServiceWorkerUpdated,\n      updateServiceWorker: updateServiceWorker\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this) : null;\n}\n\n_s(App, \"oFFHMZYVEBDojg5rdnpoo7BLe2s=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/App/App.js"],"names":["React","useState","useEffect","useDispatch","useSelector","get","AppView","setBrand","selectUser","selectUserIsExtended","selectIsAdmin","selectUserIsCurrent","selectDmsDocViewerState","utils","HOTJAR_ID","HOTJAR_VERSION","App","userIsLoaded","setUserIsLoaded","dispatch","user","userIsAdmin","userIsExtendedEdge","userIsCurrentEdge","uiBrand","state","uiLoaderQueue","configVars","isServiceWorkerUpdated","serviceWorkerRegistration","isDmsDocViewerModeOn","updateServiceWorker","registrationWaiting","waiting","postMessage","type","addEventListener","e","target","window","location","reload","id","auth","accessToken","app","getHostName","document","title","getAppName","isPriceForbesProduction","hotjar","isBroker","isUnderwriter","isLoaded","isDevelopment","getLandingPage","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport get from 'lodash/get';\r\n\r\n// app\r\nimport { AppView } from './App.view';\r\nimport { setBrand, selectUser, selectUserIsExtended, selectIsAdmin, selectUserIsCurrent, selectDmsDocViewerState } from 'stores';\r\nimport * as utils from 'utils';\r\nimport { HOTJAR_ID, HOTJAR_VERSION } from 'consts';\r\n\r\nexport default function App() {\r\n  const [userIsLoaded, setUserIsLoaded] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(selectUser);\r\n\r\n  const userIsAdmin = useSelector(selectIsAdmin);\r\n  const userIsExtendedEdge = useSelector(selectUserIsExtended);\r\n  const userIsCurrentEdge = useSelector(selectUserIsCurrent);\r\n  const uiBrand = useSelector((state) => get(state, 'ui.brand'));\r\n  const uiLoaderQueue = useSelector((state) => get(state, 'ui.loader.queue', []));\r\n  const configVars = useSelector((state) => get(state, 'config.vars'));\r\n\r\n  const isServiceWorkerUpdated = useSelector((state) => get(state, 'ui.serviceWorkerUpdated'));\r\n  const serviceWorkerRegistration = useSelector((state) => get(state, 'ui.serviceWorkerRegistration'));\r\n  const isDmsDocViewerModeOn = useSelector(selectDmsDocViewerState);\r\n\r\n  const updateServiceWorker = () => {\r\n    const registrationWaiting = serviceWorkerRegistration.waiting;\r\n\r\n    if (registrationWaiting) {\r\n      registrationWaiting.postMessage({ type: 'SKIP_WAITING' });\r\n\r\n      registrationWaiting.addEventListener('statechange', (e) => {\r\n        if (e.target.state === 'activated') {\r\n          window.location.reload();\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    user?.id && user?.auth?.accessToken && setUserIsLoaded(true);\r\n  }, [user]);\r\n\r\n  useEffect(() => {\r\n    if (!uiBrand) {\r\n      dispatch(setBrand(utils.app.getHostName()));\r\n    }\r\n\r\n    document.title = utils.app.getAppName(uiBrand);\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    if (utils.app.isPriceForbesProduction()) {\r\n      utils.app.hotjar(HOTJAR_ID, HOTJAR_VERSION);\r\n    }\r\n  }, []);\r\n\r\n  return userIsLoaded ? (\r\n    <AppView\r\n      isBroker={utils.user.isBroker(user)}\r\n      isUnderwriter={utils.user.isUnderwriter(user)}\r\n      isAdmin={userIsAdmin}\r\n      isExtendedEdge={userIsExtendedEdge}\r\n      isCurrentEdge={userIsCurrentEdge}\r\n      isUserLoaded={utils.user.isLoaded(user)}\r\n      isDev={utils.app.isDevelopment(configVars)}\r\n      isDmsDocViewerModeOn={isDmsDocViewerModeOn}\r\n      landingPage={utils.user.getLandingPage(user)}\r\n      hasLoader={uiLoaderQueue.length > 0}\r\n      sw={{ isServiceWorkerUpdated: isServiceWorkerUpdated, updateServiceWorker: updateServiceWorker }}\r\n    />\r\n  ) : null;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}