{"ast":null,"code":"import _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport moment from 'moment';\nimport * as utils from 'utils';\nvar utilsFilters = {\n  // return only the rows (and their parents) which match the search criteria\n  items: function items() {\n    var _items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    var query = arguments.length > 1 ? arguments[1] : undefined;\n    var columns = arguments.length > 2 ? arguments[2] : undefined;\n    var filterableColumns = arguments.length > 3 ? arguments[3] : undefined;\n    var nestedKey = arguments.length > 4 ? arguments[4] : undefined;\n    var filters = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    return _items.reduce(function (acc, item) {\n      var options = item[nestedKey] || [];\n\n      if (utilsFilters.hasMatch(item, columns, filterableColumns, query, filters)) {\n        return [].concat(_toConsumableArray(acc), [item]);\n      } else {\n        if (utilsFilters.hasMatchDeep(options, query, columns, filterableColumns, nestedKey, filters)) {\n          return [].concat(_toConsumableArray(acc), [_objectSpread(_objectSpread({}, item), {}, _defineProperty({}, nestedKey, utilsFilters.items(options, query, columns, filterableColumns, nestedKey, filters)))]);\n        } else {\n          return acc;\n        }\n      }\n    }, []);\n  },\n  hasFilters: function hasFilters(currentFiltersApplied) {\n    return function (filter) {\n      return filter.type === 'array' && utils.generic.isValidArray(currentFiltersApplied === null || currentFiltersApplied === void 0 ? void 0 : currentFiltersApplied[filter.name], true) || filter.type === 'date' && Boolean(currentFiltersApplied === null || currentFiltersApplied === void 0 ? void 0 : currentFiltersApplied[filter.name]);\n    };\n  },\n  // check if there is a match for the filters AND search query on any of the searchable columns\n  hasMatch: function hasMatch(obj) {\n    var columns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var filterableColumns = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var query = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n    var filters = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    var values = Object.entries(obj).reduce(function (acc, _ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n\n      return columns.includes(key) ? [].concat(_toConsumableArray(acc), [value]) : acc;\n    }, []);\n    var isTask = Boolean(obj.taskId);\n    var activeFilters = filterableColumns.filter(utilsFilters.hasFilters(filters));\n    var hasActiveFilters = (activeFilters === null || activeFilters === void 0 ? void 0 : activeFilters.length) > 0;\n    var hasSearchQuery = (query === null || query === void 0 ? void 0 : query.length) > 0; // don't search/filter on loss and claims (ONLY on tasks)\n\n    if (!isTask) {\n      return false;\n    } // check search ONLY\n\n\n    if (hasSearchQuery && !hasActiveFilters) {\n      return utilsFilters.matchQuery(values, query);\n    } // check search AND filters\n\n\n    if (hasSearchQuery && hasActiveFilters) {\n      return utilsFilters.matchQuery(values, query) && utilsFilters.matchFilters(activeFilters, filters, obj);\n    } // check filters ONLY\n\n\n    if (!hasSearchQuery && hasActiveFilters) {\n      return utilsFilters.matchFilters(activeFilters, filters, obj);\n    }\n  },\n  // check if any of the nested items have a match with the search query\n  hasMatchDeep: function hasMatchDeep(items, query, columns, filterableColumns, nestedKey) {\n    var filters = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    return items.reduce(function (acc, cur) {\n      var options = cur[nestedKey] || [];\n\n      if (utilsFilters.hasMatch(cur, columns, filterableColumns, query, filters)) {\n        return true;\n      } else {\n        return acc || utilsFilters.hasMatchDeep(options, query, columns, filterableColumns, nestedKey, filters);\n      }\n    }, false);\n  },\n  // check if any of the values matches the search query\n  matchQuery: function matchQuery(values, query) {\n    return Boolean(query && values.some(function (value) {\n      return value === null || value === void 0 ? void 0 : value.toLowerCase().includes(query === null || query === void 0 ? void 0 : query.toLowerCase());\n    }));\n  },\n  // check if all the filters enabled match at least on one option\n  matchFilters: function matchFilters(filtersEnabled, filters, row) {\n    return filtersEnabled.reduce(function (acc, _ref3) {\n      var name = _ref3.name,\n          type = _ref3.type;\n      var isArray = type === 'array';\n      var isDate = type === 'date';\n      var filterValue = filters === null || filters === void 0 ? void 0 : filters[name];\n      var isFilterMatch = isArray && (filterValue === null || filterValue === void 0 ? void 0 : filterValue.some(function (filterObjValue) {\n        var _row$name;\n\n        return row === null || row === void 0 ? void 0 : (_row$name = row[name]) === null || _row$name === void 0 ? void 0 : _row$name.includes(filterObjValue === null || filterObjValue === void 0 ? void 0 : filterObjValue.name);\n      })) || isDate && moment(filterValue).isSame(row === null || row === void 0 ? void 0 : row[name], 'day');\n      return acc && isFilterMatch;\n    }, true);\n  }\n};\nexport default utilsFilters;","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/utils/filters/filters.js"],"names":["moment","utils","utilsFilters","items","query","columns","filterableColumns","nestedKey","filters","reduce","acc","item","options","hasMatch","hasMatchDeep","hasFilters","currentFiltersApplied","filter","type","generic","isValidArray","name","Boolean","obj","values","Object","entries","key","value","includes","isTask","taskId","activeFilters","hasActiveFilters","length","hasSearchQuery","matchQuery","matchFilters","cur","some","toLowerCase","filtersEnabled","row","isArray","isDate","filterValue","isFilterMatch","filterObjValue","isSame"],"mappings":"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","sourcesContent":["import moment from 'moment';\r\nimport * as utils from 'utils';\r\n\r\nconst utilsFilters = {\r\n  // return only the rows (and their parents) which match the search criteria\r\n  items: (items = [], query, columns, filterableColumns, nestedKey, filters = {}) => {\r\n    return items.reduce((acc, item) => {\r\n      const options = item[nestedKey] || [];\r\n\r\n      if (utilsFilters.hasMatch(item, columns, filterableColumns, query, filters)) {\r\n        return [...acc, item];\r\n      } else {\r\n        if (utilsFilters.hasMatchDeep(options, query, columns, filterableColumns, nestedKey, filters)) {\r\n          return [...acc, { ...item, [nestedKey]: utilsFilters.items(options, query, columns, filterableColumns, nestedKey, filters) }];\r\n        } else {\r\n          return acc;\r\n        }\r\n      }\r\n    }, []);\r\n  },\r\n\r\n  hasFilters: (currentFiltersApplied) => (filter) => {\r\n    return (\r\n      (filter.type === 'array' && utils.generic.isValidArray(currentFiltersApplied?.[filter.name], true)) ||\r\n      (filter.type === 'date' && Boolean(currentFiltersApplied?.[filter.name]))\r\n    );\r\n  },\r\n\r\n  // check if there is a match for the filters AND search query on any of the searchable columns\r\n  hasMatch: (obj, columns = [], filterableColumns = [], query = '', filters = {}) => {\r\n    const values = Object.entries(obj).reduce((acc, [key, value]) => {\r\n      return columns.includes(key) ? [...acc, value] : acc;\r\n    }, []);\r\n\r\n    const isTask = Boolean(obj.taskId);\r\n    const activeFilters = filterableColumns.filter(utilsFilters.hasFilters(filters));\r\n    const hasActiveFilters = activeFilters?.length > 0;\r\n    const hasSearchQuery = query?.length > 0;\r\n\r\n    // don't search/filter on loss and claims (ONLY on tasks)\r\n    if (!isTask) {\r\n      return false;\r\n    }\r\n\r\n    // check search ONLY\r\n    if (hasSearchQuery && !hasActiveFilters) {\r\n      return utilsFilters.matchQuery(values, query);\r\n    }\r\n\r\n    // check search AND filters\r\n    if (hasSearchQuery && hasActiveFilters) {\r\n      return utilsFilters.matchQuery(values, query) && utilsFilters.matchFilters(activeFilters, filters, obj);\r\n    }\r\n\r\n    // check filters ONLY\r\n    if (!hasSearchQuery && hasActiveFilters) {\r\n      return utilsFilters.matchFilters(activeFilters, filters, obj);\r\n    }\r\n  },\r\n\r\n  // check if any of the nested items have a match with the search query\r\n  hasMatchDeep: (items, query, columns, filterableColumns, nestedKey, filters = {}) => {\r\n    return items.reduce((acc, cur) => {\r\n      const options = cur[nestedKey] || [];\r\n\r\n      if (utilsFilters.hasMatch(cur, columns, filterableColumns, query, filters)) {\r\n        return true;\r\n      } else {\r\n        return acc || utilsFilters.hasMatchDeep(options, query, columns, filterableColumns, nestedKey, filters);\r\n      }\r\n    }, false);\r\n  },\r\n\r\n  // check if any of the values matches the search query\r\n  matchQuery: (values, query) => {\r\n    return Boolean(query && values.some((value) => value?.toLowerCase().includes(query?.toLowerCase())));\r\n  },\r\n\r\n  // check if all the filters enabled match at least on one option\r\n  matchFilters: (filtersEnabled, filters, row) => {\r\n    return filtersEnabled.reduce((acc, { name, type }) => {\r\n      const isArray = type === 'array';\r\n      const isDate = type === 'date';\r\n      const filterValue = filters?.[name];\r\n\r\n      const isFilterMatch =\r\n        (isArray && filterValue?.some((filterObjValue) => row?.[name]?.includes(filterObjValue?.name))) ||\r\n        (isDate && moment(filterValue).isSame(row?.[name], 'day'));\r\n\r\n      return acc && isFilterMatch;\r\n    }, true);\r\n  },\r\n};\r\n\r\nexport default utilsFilters;\r\n"]},"metadata":{},"sourceType":"module"}