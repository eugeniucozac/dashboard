{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\forms\\\\DmsUploadFiles\\\\DmsUploadFilesRow.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types'; // app\n\nimport { DmsUploadFilesRowView } from './DmsUploadFilesRow.view';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nDmsUploadFilesRow.propTypes = {\n  index: PropTypes.number,\n  file: PropTypes.any,\n  duplicateFileIndexes: PropTypes.array,\n  filesSubmitted: PropTypes.bool,\n  currencies: PropTypes.array,\n  documentTypes: PropTypes.array,\n  showDocTypeRequired: PropTypes.bool,\n  isUploading: PropTypes.bool,\n  uploadStatus: PropTypes.bool,\n  handlers: PropTypes.shape({\n    removeFiles: PropTypes.func,\n    updateTableForm: PropTypes.func,\n    retrySingleFile: PropTypes.func\n  })\n};\nexport default function DmsUploadFilesRow(_ref) {\n  _s();\n\n  var index = _ref.index,\n      file = _ref.file,\n      duplicateFileIndexes = _ref.duplicateFileIndexes,\n      filesSubmitted = _ref.filesSubmitted,\n      currencies = _ref.currencies,\n      documentTypes = _ref.documentTypes,\n      showDocTypeRequired = _ref.showDocTypeRequired,\n      isUploading = _ref.isUploading,\n      uploadStatus = _ref.uploadStatus,\n      handlers = _ref.handlers;\n  var fileName = file === null || file === void 0 ? void 0 : file.name; // View Reference Data\n\n  var docTypesActions = utils.generic.isValidArray(documentTypes, true) ? documentTypes.map(function (docType) {\n    var typeID = (docType === null || docType === void 0 ? void 0 : docType.documentTypeID) || 0;\n    var typeDesc = (docType === null || docType === void 0 ? void 0 : docType.documentTypeDescription) || '';\n    return {\n      id: typeID,\n      label: typeDesc,\n      callback: function callback() {\n        return handleSelectDocType(typeID, typeDesc);\n      }\n    };\n  }) : [];\n  var docClassificationTypes = [{\n    id: 1,\n    value: utils.string.t('dms.upload.modalItems.classificationType.low')\n  }, {\n    id: 2,\n    value: utils.string.t('dms.upload.modalItems.classificationType.guarded')\n  }, {\n    id: 3,\n    value: utils.string.t('dms.upload.modalItems.classificationType.high')\n  }, {\n    id: 4,\n    value: utils.string.t('dms.upload.modalItems.classificationType.severe')\n  }];\n  var docClassificationTypesActions = docClassificationTypes.map(function (item, ind) {\n    var classificationId = (item === null || item === void 0 ? void 0 : item.id) || '';\n    var classificationVal = (item === null || item === void 0 ? void 0 : item.value) || '';\n    return {\n      id: classificationId,\n      label: classificationVal,\n      callback: function callback() {\n        return handleSelectDocClassification(classificationId, classificationVal);\n      }\n    };\n  }); // State\n\n  var _useState = useState(duplicateFileIndexes.includes(index)),\n      _useState2 = _slicedToArray(_useState, 2),\n      isDuplicateFileName = _useState2[0],\n      setIsDuplicateFileName = _useState2[1];\n\n  var initialDuplicateState = useRef(isDuplicateFileName);\n\n  var _useState3 = useState(utils.dms.checkIfInvalidFileName(fileName)),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isInvalidFileName = _useState4[0],\n      setIsInvalidFileName = _useState4[1];\n\n  var _useState5 = useState({\n    formFileName: fileName,\n    formDocType: docTypesActions.length === 1 ? {\n      id: docTypesActions[0].id,\n      label: docTypesActions[0].label\n    } : {\n      id: 0,\n      label: ''\n    },\n    formDocClassificationType: docClassificationTypesActions[2],\n    paymentFields: {\n      paymentDate: '',\n      paymentReference: '',\n      lossPayee: '',\n      amount: \"\",\n      currency: \"\"\n    },\n    isDuplicateFileName: isDuplicateFileName,\n    isInvalidFileName: isInvalidFileName\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      fileRowForm = _useState6[0],\n      setFileRowForm = _useState6[1]; // handlers\n\n\n  var handleFileNameChange = function handleFileNameChange() {\n    return function (e) {\n      var _e$target;\n\n      var newName = (e === null || e === void 0 ? void 0 : (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.value) || '';\n      setFileRowForm(_objectSpread(_objectSpread({}, fileRowForm), {}, {\n        formFileName: newName,\n        isDuplicateFileName: checkDuplicateFileNameState(fileName, newName),\n        isInvalidFileName: checkInvalidFileNameState(newName)\n      }));\n    };\n  };\n\n  var handleSelectDocType = function handleSelectDocType(typeID, typeDesc) {\n    setFileRowForm(_objectSpread(_objectSpread({}, fileRowForm), {}, {\n      formDocType: {\n        id: typeID,\n        label: typeDesc\n      }\n    }));\n  };\n\n  var handleSelectDocClassification = function handleSelectDocClassification(id, value) {\n    setFileRowForm(_objectSpread(_objectSpread({}, fileRowForm), {}, {\n      formDocClassificationType: {\n        id: id,\n        label: value\n      }\n    }));\n  };\n\n  var handlePaymentDateChange = function handlePaymentDateChange() {\n    return function (e) {\n      setFileRowForm(_objectSpread(_objectSpread({}, fileRowForm), {}, {\n        paymentFields: _objectSpread(_objectSpread({}, fileRowForm === null || fileRowForm === void 0 ? void 0 : fileRowForm.paymentFields), {}, {\n          paymentDate: new Date(e.target.value).toISOString() || null\n        })\n      }));\n    };\n  };\n\n  var handlePaymentRefChange = function handlePaymentRefChange() {\n    return function (e) {\n      var _e$target2;\n\n      setFileRowForm(_objectSpread(_objectSpread({}, fileRowForm), {}, {\n        paymentFields: _objectSpread(_objectSpread({}, fileRowForm === null || fileRowForm === void 0 ? void 0 : fileRowForm.paymentFields), {}, {\n          paymentReference: (e === null || e === void 0 ? void 0 : (_e$target2 = e.target) === null || _e$target2 === void 0 ? void 0 : _e$target2.value) || ''\n        })\n      }));\n    };\n  };\n\n  var handleLossPayeeChange = function handleLossPayeeChange() {\n    return function (e) {\n      var _e$target3;\n\n      setFileRowForm(_objectSpread(_objectSpread({}, fileRowForm), {}, {\n        paymentFields: _objectSpread(_objectSpread({}, fileRowForm === null || fileRowForm === void 0 ? void 0 : fileRowForm.paymentFields), {}, {\n          lossPayee: (e === null || e === void 0 ? void 0 : (_e$target3 = e.target) === null || _e$target3 === void 0 ? void 0 : _e$target3.value) || ''\n        })\n      }));\n    };\n  };\n\n  var handlePaymentAmountChange = function handlePaymentAmountChange() {\n    return function (e) {\n      var _e$target4;\n\n      setFileRowForm(_objectSpread(_objectSpread({}, fileRowForm), {}, {\n        paymentFields: _objectSpread(_objectSpread({}, fileRowForm === null || fileRowForm === void 0 ? void 0 : fileRowForm.paymentFields), {}, {\n          amount: (e === null || e === void 0 ? void 0 : (_e$target4 = e.target) === null || _e$target4 === void 0 ? void 0 : _e$target4.value) || ''\n        })\n      }));\n    };\n  };\n\n  var handlePaymentCurrencyChange = function handlePaymentCurrencyChange(name, value) {\n    setFileRowForm(_objectSpread(_objectSpread({}, fileRowForm), {}, {\n      paymentFields: _objectSpread(_objectSpread({}, fileRowForm === null || fileRowForm === void 0 ? void 0 : fileRowForm.paymentFields), {}, {\n        currency: value\n      })\n    }));\n  };\n\n  var checkDuplicateFileNameState = function checkDuplicateFileNameState(initVal, newVal) {\n    if (initialDuplicateState.current && initVal !== newVal) {\n      setIsDuplicateFileName(false);\n      return false;\n    } else if (initialDuplicateState.current && initVal === newVal) {\n      setIsDuplicateFileName(true);\n      return true;\n    }\n  };\n\n  var checkInvalidFileNameState = function checkInvalidFileNameState(newName) {\n    if (!utils.dms.checkIfInvalidFileName(newName)) {\n      setIsInvalidFileName(false);\n      return false;\n    } else {\n      setIsInvalidFileName(true);\n      return true;\n    }\n  };\n\n  useEffect(function () {\n    var _fileRowForm$formDocT;\n\n    if (utils.generic.isValidObject(fileRowForm) && (fileRowForm === null || fileRowForm === void 0 ? void 0 : (_fileRowForm$formDocT = fileRowForm.formDocType) === null || _fileRowForm$formDocT === void 0 ? void 0 : _fileRowForm$formDocT.id)) {\n      handlers.updateTableForm(index, fileRowForm);\n    }\n  }, [fileRowForm]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    if ((documentTypes === null || documentTypes === void 0 ? void 0 : documentTypes.length) === 1) {\n      setFileRowForm(_objectSpread(_objectSpread({}, fileRowForm), {}, {\n        formDocType: {\n          id: docTypesActions[0].id,\n          label: docTypesActions[0].label\n        }\n      }));\n    }\n  }, [documentTypes]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/_jsxDEV(DmsUploadFilesRowView, {\n    index: index,\n    file: file,\n    getFileKey: utils.dms.getFileKey,\n    docTypesActions: docTypesActions,\n    docClassificationTypesActions: docClassificationTypesActions,\n    currencies: currencies,\n    fileRowForm: fileRowForm,\n    errors: {\n      isDuplicateFileName: isDuplicateFileName,\n      isInvalidFileName: isInvalidFileName\n    },\n    filesSubmitted: filesSubmitted,\n    showDocTypeRequired: showDocTypeRequired,\n    isUploading: isUploading,\n    uploadStatus: uploadStatus,\n    handlers: {\n      removeFiles: handlers.removeFiles,\n      fileNameChange: handleFileNameChange,\n      retrySingleFile: handlers.retrySingleFile,\n      paymentDateInput: handlePaymentDateChange,\n      paymentRefInput: handlePaymentRefChange,\n      lossPayeeInput: handleLossPayeeChange,\n      paymentAmountInput: handlePaymentAmountChange,\n      paymentCurrencyInput: handlePaymentCurrencyChange\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DmsUploadFilesRow, \"QTH5Fuj5NSnmAYePx+ijKZEjI9c=\");\n\n_c = DmsUploadFilesRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"DmsUploadFilesRow\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/forms/DmsUploadFiles/DmsUploadFilesRow.js"],"names":["React","useState","useEffect","useRef","PropTypes","DmsUploadFilesRowView","utils","DmsUploadFilesRow","propTypes","index","number","file","any","duplicateFileIndexes","array","filesSubmitted","bool","currencies","documentTypes","showDocTypeRequired","isUploading","uploadStatus","handlers","shape","removeFiles","func","updateTableForm","retrySingleFile","fileName","name","docTypesActions","generic","isValidArray","map","docType","typeID","documentTypeID","typeDesc","documentTypeDescription","id","label","callback","handleSelectDocType","docClassificationTypes","value","string","t","docClassificationTypesActions","item","ind","classificationId","classificationVal","handleSelectDocClassification","includes","isDuplicateFileName","setIsDuplicateFileName","initialDuplicateState","dms","checkIfInvalidFileName","isInvalidFileName","setIsInvalidFileName","formFileName","formDocType","length","formDocClassificationType","paymentFields","paymentDate","paymentReference","lossPayee","amount","currency","fileRowForm","setFileRowForm","handleFileNameChange","e","newName","target","checkDuplicateFileNameState","checkInvalidFileNameState","handlePaymentDateChange","Date","toISOString","handlePaymentRefChange","handleLossPayeeChange","handlePaymentAmountChange","handlePaymentCurrencyChange","initVal","newVal","current","isValidObject","getFileKey","fileNameChange","paymentDateInput","paymentRefInput","lossPayeeInput","paymentAmountInput","paymentCurrencyInput"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// app\r\nimport { DmsUploadFilesRowView } from './DmsUploadFilesRow.view';\r\nimport * as utils from 'utils';\r\n\r\nDmsUploadFilesRow.propTypes = {\r\n  index: PropTypes.number,\r\n  file: PropTypes.any,\r\n  duplicateFileIndexes: PropTypes.array,\r\n  filesSubmitted: PropTypes.bool,\r\n  currencies: PropTypes.array,\r\n  documentTypes: PropTypes.array,\r\n  showDocTypeRequired: PropTypes.bool,\r\n  isUploading: PropTypes.bool,\r\n  uploadStatus: PropTypes.bool,\r\n  handlers: PropTypes.shape({\r\n    removeFiles: PropTypes.func,\r\n    updateTableForm: PropTypes.func,\r\n    retrySingleFile: PropTypes.func,\r\n  }),\r\n};\r\n\r\nexport default function DmsUploadFilesRow({\r\n  index,\r\n  file,\r\n  duplicateFileIndexes,\r\n  filesSubmitted,\r\n  currencies,\r\n  documentTypes,\r\n  showDocTypeRequired,\r\n  isUploading,\r\n  uploadStatus,\r\n  handlers\r\n}) {\r\n  const fileName = file?.name;\r\n\r\n  // View Reference Data\r\n  const docTypesActions =\r\n    utils.generic.isValidArray(documentTypes, true) ? documentTypes\r\n      .map((docType) => {\r\n        const typeID = docType?.documentTypeID || 0;\r\n        const typeDesc = docType?.documentTypeDescription || '';\r\n        return {\r\n          id: typeID,\r\n          label: typeDesc,\r\n          callback: () => handleSelectDocType(typeID, typeDesc),\r\n        }\r\n      }) : [];\r\n\r\n  const docClassificationTypes = [\r\n    { id: 1, value: utils.string.t('dms.upload.modalItems.classificationType.low') },\r\n    { id: 2, value: utils.string.t('dms.upload.modalItems.classificationType.guarded') },\r\n    { id: 3, value: utils.string.t('dms.upload.modalItems.classificationType.high') },\r\n    { id: 4, value: utils.string.t('dms.upload.modalItems.classificationType.severe') },\r\n  ];\r\n  const docClassificationTypesActions = docClassificationTypes.map((item, ind) => {\r\n    const classificationId = item?.id || '';\r\n    const classificationVal = item?.value || '';\r\n    return {\r\n      id: classificationId,\r\n      label: classificationVal,\r\n      callback: () => handleSelectDocClassification(classificationId, classificationVal),\r\n    }\r\n  });\r\n\r\n  // State\r\n  const [isDuplicateFileName, setIsDuplicateFileName] = useState(duplicateFileIndexes.includes(index));\r\n  const initialDuplicateState = useRef(isDuplicateFileName);\r\n  const [isInvalidFileName, setIsInvalidFileName] = useState(utils.dms.checkIfInvalidFileName(fileName));\r\n  const [fileRowForm, setFileRowForm] = useState({\r\n    formFileName: fileName,\r\n    formDocType: (docTypesActions.length === 1 ? { id: docTypesActions[0].id, label: docTypesActions[0].label}  \r\n      : { id: 0, label:''} ),\r\n    formDocClassificationType: docClassificationTypesActions[2],\r\n    paymentFields: { paymentDate: '', paymentReference: '', lossPayee: '', amount: \"\", currency: \"\" },\r\n    isDuplicateFileName: isDuplicateFileName,\r\n    isInvalidFileName: isInvalidFileName\r\n  })\r\n\r\n  // handlers\r\n  const handleFileNameChange = () => (e) => {\r\n    const newName = e?.target?.value || '';\r\n    setFileRowForm({\r\n      ...fileRowForm, formFileName: newName,\r\n      isDuplicateFileName: checkDuplicateFileNameState(fileName, newName),\r\n      isInvalidFileName: checkInvalidFileNameState(newName),\r\n    });\r\n  };\r\n\r\n  const handleSelectDocType = (typeID, typeDesc) => {\r\n    setFileRowForm({ ...fileRowForm, formDocType: { id: typeID, label: typeDesc } });\r\n  };\r\n\r\n  const handleSelectDocClassification = (id, value) => {\r\n    setFileRowForm({ ...fileRowForm, formDocClassificationType: { id: id, label: value } });\r\n  };\r\n\r\n  const handlePaymentDateChange = () => (e) => {\r\n    setFileRowForm({\r\n      ...fileRowForm,\r\n      paymentFields: {\r\n        ...fileRowForm?.paymentFields,\r\n        paymentDate: new Date(e.target.value).toISOString() || null\r\n      }\r\n    });\r\n  };\r\n\r\n  const handlePaymentRefChange = () => (e) => {\r\n    setFileRowForm({\r\n      ...fileRowForm,\r\n      paymentFields: {\r\n        ...fileRowForm?.paymentFields,\r\n        paymentReference: e?.target?.value || ''\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleLossPayeeChange = () => (e) => {\r\n    setFileRowForm({\r\n      ...fileRowForm,\r\n      paymentFields: {\r\n        ...fileRowForm?.paymentFields,\r\n        lossPayee: e?.target?.value || ''\r\n      }\r\n    });\r\n  };\r\n\r\n  const handlePaymentAmountChange = () => (e) => {\r\n    setFileRowForm({\r\n      ...fileRowForm,\r\n      paymentFields: {\r\n        ...fileRowForm?.paymentFields,\r\n        amount: e?.target?.value || ''\r\n      }\r\n    });\r\n  };\r\n\r\n  const handlePaymentCurrencyChange = (name, value) => {\r\n    setFileRowForm({\r\n      ...fileRowForm,\r\n      paymentFields: {\r\n        ...fileRowForm?.paymentFields,\r\n        currency: value\r\n      }\r\n    });\r\n  };\r\n\r\n  const checkDuplicateFileNameState = (initVal, newVal) => {\r\n    if (initialDuplicateState.current && initVal !== newVal) {\r\n      setIsDuplicateFileName(false);\r\n      return false;\r\n    } else if (initialDuplicateState.current && initVal === newVal) {\r\n      setIsDuplicateFileName(true);\r\n      return true;\r\n    }\r\n  };\r\n\r\n  const checkInvalidFileNameState = (newName) => {\r\n    if (!utils.dms.checkIfInvalidFileName(newName)) {\r\n      setIsInvalidFileName(false);\r\n      return false;\r\n    } else {\r\n      setIsInvalidFileName(true);\r\n      return true;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (utils.generic.isValidObject(fileRowForm) && fileRowForm?.formDocType?.id) {\r\n      handlers.updateTableForm(index, fileRowForm);\r\n    }\r\n  }, [fileRowForm]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    if (documentTypes?.length === 1) {\r\n      setFileRowForm({ ...fileRowForm, formDocType: { id: docTypesActions[0].id, label: docTypesActions[0].label} });\r\n    }\r\n  }, [documentTypes]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <DmsUploadFilesRowView\r\n        index={index}\r\n        file={file}\r\n        getFileKey={utils.dms.getFileKey}\r\n        docTypesActions={docTypesActions}\r\n        docClassificationTypesActions={docClassificationTypesActions}\r\n        currencies={currencies}\r\n        fileRowForm={fileRowForm}\r\n        errors={{\r\n          isDuplicateFileName,\r\n          isInvalidFileName\r\n        }}\r\n        filesSubmitted={filesSubmitted}\r\n        showDocTypeRequired={showDocTypeRequired}\r\n        isUploading={isUploading}\r\n        uploadStatus={uploadStatus}\r\n        handlers={{\r\n          removeFiles: handlers.removeFiles,\r\n          fileNameChange: handleFileNameChange,\r\n          retrySingleFile: handlers.retrySingleFile,\r\n          paymentDateInput: handlePaymentDateChange,\r\n          paymentRefInput: handlePaymentRefChange,\r\n          lossPayeeInput: handleLossPayeeChange,\r\n          paymentAmountInput: handlePaymentAmountChange,\r\n          paymentCurrencyInput: handlePaymentCurrencyChange,\r\n        }}\r\n      />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}