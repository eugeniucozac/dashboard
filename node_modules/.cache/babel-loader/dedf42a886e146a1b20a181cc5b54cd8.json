{"ast":null,"code":"import _defineProperty from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\forms\\\\PolicyDocumentsUpload\\\\PolicyDocumentsUpload.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as Yup from 'yup';\nimport classnames from 'classnames'; // app\n\nimport { PolicyDocumentsUploadView } from './PolicyDocumentsUpload.view';\nimport styles from './PolicyDocumentsUpload.styles';\nimport { OptionDetail } from 'components';\nimport { selectRefDataXbInstances, hideModal, fileUploadDocuments, selectFileUploadData, selectUser, searchRiskIds, getFileUploadPolicyDetails } from 'stores';\nimport * as utils from 'utils';\nimport * as constants from 'consts'; // mui\n\nimport { makeStyles } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nPolicyDocumentsUpload.propTypes = {\n  files: PropTypes.arrayOf(PropTypes.shape({\n    file: PropTypes.object,\n    name: PropTypes.string,\n    type: PropTypes.object\n  })).isRequired,\n  rejectedFiles: PropTypes.array,\n  multiple: PropTypes.bool,\n  maxFiles: PropTypes.number,\n  maxSize: PropTypes.number,\n  accept: PropTypes.string\n};\nPolicyDocumentsUpload.defaultProps = {\n  multiple: constants.POLICY_FILE_UPLOAD_ALLOW_MULTIPLE,\n  maxFiles: constants.POLICY_FILE_UPLOAD_MAX_FILES,\n  maxSize: constants.POLICY_FILE_UPLOAD_MAX_FILE_SIZE,\n  accept: constants.POLICY_FILE_UPLOAD_ALLOWED_FILE_EXT\n};\nexport default function PolicyDocumentsUpload(_ref) {\n  _s();\n\n  var _this = this,\n      _classnames;\n\n  var files = _ref.files,\n      rejectedFiles = _ref.rejectedFiles,\n      multiple = _ref.multiple,\n      maxFiles = _ref.maxFiles,\n      maxSize = _ref.maxSize,\n      accept = _ref.accept;\n  var classes = makeStyles(styles, {\n    name: 'PolicyDocumentsUpload'\n  })();\n  var dispatch = useDispatch();\n  var riskFieldRef = useRef(null);\n  var claimFieldRef = useRef(null);\n  var user = useSelector(selectUser);\n  var fileUploadData = useSelector(selectFileUploadData);\n  var refDataXbInstances = useSelector(selectRefDataXbInstances);\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      policyData = _useState2[0],\n      setPolicyData = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      searchReferenceValue = _useState4[0],\n      setSearchReferenceValue = _useState4[1];\n\n  var _useState5 = useState('risk'),\n      _useState6 = _slicedToArray(_useState5, 2),\n      searchReferenceType = _useState6[0],\n      setSearchReferenceType = _useState6[1];\n\n  var _useState7 = useState(files),\n      _useState8 = _slicedToArray(_useState7, 2),\n      filesAttached = _useState8[0],\n      setFilesAttached = _useState8[1];\n\n  var _useState9 = useState({}),\n      _useState10 = _slicedToArray(_useState9, 2),\n      warnings = _useState10[0],\n      setWarnings = _useState10[1];\n\n  var fetchPolicyRefs = useCallback( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(type, searchTerm) {\n      var refs;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(searchTerm.length >= 4)) {\n                _context.next = 9;\n                break;\n              }\n\n              _context.next = 3;\n              return dispatch(searchRiskIds(searchTerm));\n\n            case 3:\n              refs = _context.sent;\n\n              if (!utils.generic.isValidArray(refs)) {\n                _context.next = 8;\n                break;\n              }\n\n              return _context.abrupt(\"return\", refs);\n\n            case 8:\n              return _context.abrupt(\"return\", []);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), [dispatch]);\n  var fetchPolicyDetails = useCallback( /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(riskRefObject) {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return dispatch(getFileUploadPolicyDetails(searchReferenceType, riskRefObject));\n\n            case 2:\n              response = _context2.sent;\n\n              if (response) {\n                setPolicyData(response);\n              }\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }(), [dispatch, searchReferenceType]);\n\n  var setWarningDuplicates = function setWarningDuplicates(hasDuplicates) {\n    return hasDuplicates ? {\n      duplicates: {\n        message: utils.string.t('fileUpload.messages.duplicates'),\n        type: 'alert'\n      }\n    } : {\n      duplicates: {}\n    };\n  };\n\n  var setWarningTooManyFiles = function setWarningTooManyFiles(filesCurrentlyAttached) {\n    return filesCurrentlyAttached && filesCurrentlyAttached.length > maxFiles ? {\n      tooManyFiles: {\n        message: utils.string.t('fileUpload.messages.tooManyFiles', {\n          max: maxFiles\n        }),\n        type: 'error'\n      }\n    } : {\n      tooManyFiles: {}\n    };\n  };\n\n  var setWarningMaxFileSize = function setWarningMaxFileSize(rejectedFiles) {\n    return rejectedFiles && rejectedFiles.length > 0 && rejectedFiles.some(function (f) {\n      return f.size > maxSize;\n    }) ? {\n      maxFileSize: {\n        message: utils.string.t('fileUpload.messages.maxFileSize', {\n          max: utils.string.t('format.number', {\n            value: {\n              number: maxSize,\n              format: {\n                output: 'byte',\n                base: 'decimal',\n                mantissa: 0\n              }\n            }\n          }),\n          filename: rejectedFiles.map(function (f) {\n            return f.name;\n          }).filter(Boolean) // filter out empty array item, in case f.name is falsy or empty ''\n          .join(', ')\n        }),\n        type: 'alert'\n      }\n    } : {\n      maxFileSize: {}\n    };\n  };\n\n  var setWarningForRejectedFile = function setWarningForRejectedFile(rejectedFiles) {\n    var _rejectedFiles$;\n\n    var acceptSplittedExtension = accept === null || accept === void 0 ? void 0 : accept.split(',');\n    var slicedExtensionArray = acceptSplittedExtension === null || acceptSplittedExtension === void 0 ? void 0 : acceptSplittedExtension.map(function (s) {\n      return s === null || s === void 0 ? void 0 : s.slice(1);\n    });\n    return (rejectedFiles === null || rejectedFiles === void 0 ? void 0 : rejectedFiles.length) > 0 && (slicedExtensionArray === null || slicedExtensionArray === void 0 ? void 0 : slicedExtensionArray.indexOf(rejectedFiles === null || rejectedFiles === void 0 ? void 0 : (_rejectedFiles$ = rejectedFiles[0]) === null || _rejectedFiles$ === void 0 ? void 0 : _rejectedFiles$.path.split('.').pop())) === -1 ? {\n      rejectedFormat: {\n        message: utils.string.t('fileUpload.messages.rejectedFileFormat'),\n        type: 'alert'\n      }\n    } : {\n      rejectedFormat: {}\n    };\n  };\n\n  useEffect(function () {\n    setWarnings(_objectSpread(_objectSpread(_objectSpread({}, warnings), setWarningTooManyFiles(filesAttached)), setWarningMaxFileSize(rejectedFiles)));\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var getOptionTooltip = function getOptionTooltip(_ref4) {\n    var xbInstance = _ref4.xbInstance,\n        xbInstanceId = _ref4.xbInstanceId;\n    if (!xbInstance || !xbInstanceId) return;\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [utils.string.t('fileUpload.xbInstance'), \": \", xbInstance]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, _this);\n  };\n\n  var renderOption = function renderOption(item) {\n    return /*#__PURE__*/_jsxDEV(OptionDetail, {\n      label: item.policyRef,\n      sublabel: item.insuredName,\n      detail: getOptionTooltip(item)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 12\n    }, _this);\n  };\n\n  var searchFields = [{\n    name: 'riskReference',\n    type: 'autocompletemui',\n    label: utils.string.t('fileUpload.fields.riskRef.label'),\n    hint: utils.string.t('fileUpload.hint', {\n      count: 4\n    }),\n    value: searchReferenceValue || null,\n    options: (policyData === null || policyData === void 0 ? void 0 : policyData.policyID) ? [{\n      policyID: policyData.policyID,\n      policyRef: policyData.policyRef,\n      insuredID: policyData.insuredID,\n      insuredName: policyData.insuredName,\n      xbInstanceId: policyData.xbInstanceId,\n      xbInstance: policyData.xbInstance\n    }] : [],\n    optionKey: 'policyID',\n    optionLabel: 'policyRef',\n    optionsFetch: {\n      type: 'risk',\n      handler: fetchPolicyRefs\n    },\n    muiComponentProps: {\n      ref: riskFieldRef,\n      fullWidth: true,\n      noOptionsText: utils.string.t('fileUpload.noRiskOptions'),\n      disabled: searchReferenceType !== 'risk',\n      renderOption: renderOption,\n      classes: {\n        root: classes.searchField,\n        inputRoot: classnames((_classnames = {}, _defineProperty(_classnames, classes.searchFieldInput, true), _defineProperty(_classnames, classes.searchFieldInputDisabled, searchReferenceType !== 'risk'), _classnames))\n      },\n      inputProps: {\n        maxLength: 25,\n        onFocus: function onFocus() {\n          handleFieldFocus('risk');\n        }\n      }\n    },\n    callback: function callback(event, data) {\n      if (!data) {\n        setPolicyData(null);\n      }\n\n      setSearchReferenceValue(data);\n    }\n  } // {\n  //   name: 'claimReference',\n  //   type: 'text',\n  //   label: utils.string.t('fileUpload.fields.claimRef.label'),\n  //   hint: utils.string.t('fileUpload.hint', { count: 4 }),\n  //   options: [],\n  //   optionKey: 'id',\n  //   optionLabel: 'name',\n  //   optionsFetch: {\n  //     type: 'claim',\n  //     handler: fetchPolicyRefs,\n  //   },\n  //   muiComponentProps: {\n  //     ref: claimFieldRef,\n  //     disabled: searchReferenceType !== 'claim',\n  //     fullWidth: true,\n  //     noOptionsText: utils.string.t('fileUpload.noRiskOptions'),\n  //     classes: {\n  //       root: classes.searchField,\n  //       inputRoot: classnames({\n  //         [classes.searchFieldInput]: true,\n  //         [classes.searchFieldInputDisabled]: searchReferenceType !== 'claim',\n  //       }),\n  //     },\n  //     inputProps: {\n  //       maxLength: 25,\n  //       onFocus: () => {\n  //         handleFieldFocus('claim');\n  //       },\n  //     },\n  //   },\n  // },\n  ];\n  var documentTypeField = {\n    name: 'documentType',\n    type: 'autocompletemui',\n    value: null,\n    // documentType options should be taken from new refData API instead of custom fileUpload GUI API\n    // this can only happen once fileUpload is available for Extended Edge users\n    options: (fileUploadData === null || fileUploadData === void 0 ? void 0 : fileUploadData.DocumentType) || [],\n    optionKey: 'id',\n    optionLabel: 'value',\n    muiComponentProps: {\n      size: 'small'\n    },\n    callback: function callback(event, data, values) {\n      setFilesAttached((values === null || values === void 0 ? void 0 : values.files) || []);\n    }\n  };\n  var fields = [{\n    name: 'sectionType',\n    type: 'autocompletemui',\n    label: utils.string.t('fileUpload.fields.sectionType.label'),\n    value: {\n      value: 'policy',\n      label: 'Policy'\n    },\n    options: [{\n      value: 'policy',\n      label: 'Policy'\n    }],\n    muiComponentProps: {\n      disabled: true\n    }\n  }, {\n    name: 'inceptionDate',\n    type: 'datepicker',\n    label: utils.string.t('fileUpload.fields.inceptionDate.label'),\n    value: (policyData === null || policyData === void 0 ? void 0 : policyData.inceptionDate) || null,\n    muiPickerProps: {\n      disabled: true\n    },\n    muiComponentProps: {\n      fullWidth: true\n    }\n  }, {\n    name: 'expiryDate',\n    type: 'datepicker',\n    label: utils.string.t('fileUpload.fields.expiryDate.label'),\n    value: (policyData === null || policyData === void 0 ? void 0 : policyData.expiryDate) || null,\n    muiPickerProps: {\n      disabled: true\n    },\n    muiComponentProps: {\n      fullWidth: true\n    }\n  }, {\n    name: 'department',\n    type: 'autocompletemui',\n    label: utils.string.t('fileUpload.fields.department.label'),\n    value: (policyData === null || policyData === void 0 ? void 0 : policyData.departmentID) && (policyData === null || policyData === void 0 ? void 0 : policyData.departmentName) && {\n      id: policyData.departmentID,\n      value: policyData.departmentName\n    } || null,\n    options: (fileUploadData === null || fileUploadData === void 0 ? void 0 : fileUploadData.Department) || null,\n    optionKey: 'id',\n    optionLabel: 'value',\n    muiComponentProps: {\n      disabled: true\n    }\n  }, {\n    name: 'insuredName',\n    type: 'text',\n    value: (policyData === null || policyData === void 0 ? void 0 : policyData.insuredName) || '',\n    label: utils.string.t('fileUpload.fields.insuredName.label'),\n    muiComponentProps: {\n      readOnly: true,\n      disabled: true\n    }\n  }, {\n    name: 'insuredID',\n    type: 'hidden',\n    value: (policyData === null || policyData === void 0 ? void 0 : policyData.insuredID) || ''\n  }, {\n    name: 'policyID',\n    type: 'hidden',\n    value: (policyData === null || policyData === void 0 ? void 0 : policyData.policyID) || ''\n  }, {\n    name: 'policyRef',\n    type: 'text',\n    value: (policyData === null || policyData === void 0 ? void 0 : policyData.policyRef) || '',\n    label: utils.string.t('fileUpload.fields.policyRef.label'),\n    muiComponentProps: {\n      readOnly: true,\n      disabled: true\n    }\n  }, {\n    name: 'umr',\n    type: 'text',\n    value: (policyData === null || policyData === void 0 ? void 0 : policyData.uniqueMarketRef) || '',\n    label: utils.string.t('fileUpload.fields.umr.label'),\n    muiComponentProps: {\n      readOnly: true,\n      disabled: true\n    }\n  }, {\n    name: 'xbInstance',\n    type: 'autocompletemui',\n    label: utils.string.t('fileUpload.fields.xbInstance.label'),\n    value: (policyData === null || policyData === void 0 ? void 0 : policyData.xbInstanceId) && (policyData === null || policyData === void 0 ? void 0 : policyData.xbInstance) && refDataXbInstances.find(function (xbi) {\n      return xbi.id === policyData.xbInstanceId;\n    }) || null,\n    options: refDataXbInstances,\n    optionKey: 'id',\n    optionLabel: 'value',\n    muiComponentProps: {\n      disabled: true\n    }\n  }, {\n    name: 'sourceSystem',\n    type: 'autocompletemui',\n    label: utils.string.t('fileUpload.fields.sourceSystem.label'),\n    value: {\n      value: 'edge',\n      label: 'Edge'\n    },\n    options: [{\n      value: 'edge',\n      label: 'Edge'\n    }],\n    muiComponentProps: {\n      disabled: true\n    }\n  }, {\n    name: 'uploadDate',\n    type: 'datepicker',\n    label: utils.string.t('fileUpload.fields.uploadDate.label'),\n    value: utils.date.today(),\n    muiPickerProps: {\n      disabled: true\n    },\n    muiComponentProps: {\n      fullWidth: true\n    }\n  }, {\n    name: 'uploadBy',\n    type: 'autocompletemui',\n    label: utils.string.t('fileUpload.fields.uploadBy.label'),\n    value: {\n      value: user.id,\n      label: utils.user.fullname(user)\n    },\n    options: [{\n      value: user.id,\n      label: utils.user.fullname(user)\n    }],\n    muiComponentProps: {\n      disabled: true\n    }\n  }, {\n    type: 'file',\n    name: 'filesUpload',\n    label: utils.string.t('app.file_plural'),\n    value: null,\n    showUploadPreview: false,\n    showMaxFilesError: false,\n    componentProps: {\n      multiple: multiple,\n      maxFiles: maxFiles,\n      maxSize: maxSize,\n      accept: accept\n    }\n  }, {\n    type: 'hidden',\n    name: 'files',\n    value: utils.generic.isValidArray(filesAttached, true) ? filesAttached.map(function (f) {\n      return {\n        file: f.file,\n        name: f.name,\n        type: f.type || null\n      };\n    }) : [],\n    validation: Yup.array().of(Yup.object().shape({\n      file: Yup.mixed(),\n      name: Yup.string(),\n      type: Yup.object().nullable().required(utils.string.t('validation.required'))\n    })).min(1, utils.string.t('validation.required')).required(utils.string.t('validation.required'))\n  }];\n  var actions = [{\n    name: 'cancel',\n    label: utils.string.t('app.cancel'),\n    handler: function handler() {\n      return dispatch(hideModal());\n    }\n  }, {\n    name: 'submit',\n    label: utils.string.t('fileUpload.saveDocuments'),\n    handler: function handler(data) {\n      dispatch(fileUploadDocuments(data));\n    }\n  }];\n\n  var handleRadioClick = function handleRadioClick(e) {\n    var _e$target;\n\n    var type = (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.value;\n    var fieldRef = type === 'risk' ? riskFieldRef : type === 'claim' ? claimFieldRef : null;\n\n    if (type) {\n      setSearchReferenceType(type);\n      fieldRef.current.focus();\n    }\n  };\n\n  var handleFieldFocus = function handleFieldFocus(type) {\n    if (type) {\n      setSearchReferenceType(type);\n    }\n  };\n\n  var handleFilesAdded = function handleFilesAdded(filesCurrentlyAttached, rejectedFiles, hasDuplicates) {\n    setWarnings(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, warnings), setWarningDuplicates(hasDuplicates)), setWarningTooManyFiles(filesCurrentlyAttached)), setWarningMaxFileSize(rejectedFiles)), setWarningForRejectedFile(rejectedFiles)));\n    setFilesAttached(filesCurrentlyAttached);\n  };\n\n  var handleFilesRemoved = function handleFilesRemoved(filesCurrentlyAttached) {\n    setWarnings(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, warnings), setWarningDuplicates(false)), setWarningTooManyFiles(filesCurrentlyAttached)), setWarningMaxFileSize(false)), setWarningForRejectedFile(false)));\n    setFilesAttached(filesCurrentlyAttached);\n  };\n\n  var getFileKey = function getFileKey(file) {\n    return \"\".concat(file.name, \"-\").concat(file.size, \"-\").concat(file.lastModified);\n  };\n\n  return /*#__PURE__*/_jsxDEV(PolicyDocumentsUploadView, {\n    resetKey: \"\".concat(policyData === null || policyData === void 0 ? void 0 : policyData.id, \"-\").concat(policyData === null || policyData === void 0 ? void 0 : policyData.policyRef),\n    searchFields: searchFields,\n    fields: fields,\n    documentTypeField: documentTypeField,\n    actions: actions,\n    searchReferenceType: searchReferenceType,\n    warnings: warnings,\n    isPolicyDataLoaded: Boolean(policyData),\n    handlers: {\n      getFileKey: getFileKey,\n      onRadioClick: handleRadioClick,\n      onFetchPolicy: fetchPolicyDetails,\n      onFilesAdded: handleFilesAdded,\n      onFilesRemoved: handleFilesRemoved\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 480,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PolicyDocumentsUpload, \"7z32LFYq6/c2Kcsf/H/5L7vzDk8=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = PolicyDocumentsUpload;\n\nvar _c;\n\n$RefreshReg$(_c, \"PolicyDocumentsUpload\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/forms/PolicyDocumentsUpload/PolicyDocumentsUpload.js"],"names":["React","useState","useEffect","useRef","useCallback","useDispatch","useSelector","PropTypes","Yup","classnames","PolicyDocumentsUploadView","styles","OptionDetail","selectRefDataXbInstances","hideModal","fileUploadDocuments","selectFileUploadData","selectUser","searchRiskIds","getFileUploadPolicyDetails","utils","constants","makeStyles","PolicyDocumentsUpload","propTypes","files","arrayOf","shape","file","object","name","string","type","isRequired","rejectedFiles","array","multiple","bool","maxFiles","number","maxSize","accept","defaultProps","POLICY_FILE_UPLOAD_ALLOW_MULTIPLE","POLICY_FILE_UPLOAD_MAX_FILES","POLICY_FILE_UPLOAD_MAX_FILE_SIZE","POLICY_FILE_UPLOAD_ALLOWED_FILE_EXT","classes","dispatch","riskFieldRef","claimFieldRef","user","fileUploadData","refDataXbInstances","policyData","setPolicyData","searchReferenceValue","setSearchReferenceValue","searchReferenceType","setSearchReferenceType","filesAttached","setFilesAttached","warnings","setWarnings","fetchPolicyRefs","searchTerm","length","refs","generic","isValidArray","fetchPolicyDetails","riskRefObject","response","setWarningDuplicates","hasDuplicates","duplicates","message","t","setWarningTooManyFiles","filesCurrentlyAttached","tooManyFiles","max","setWarningMaxFileSize","some","f","size","maxFileSize","value","format","output","base","mantissa","filename","map","filter","Boolean","join","setWarningForRejectedFile","acceptSplittedExtension","split","slicedExtensionArray","s","slice","indexOf","path","pop","rejectedFormat","getOptionTooltip","xbInstance","xbInstanceId","renderOption","item","policyRef","insuredName","searchFields","label","hint","count","options","policyID","insuredID","optionKey","optionLabel","optionsFetch","handler","muiComponentProps","ref","fullWidth","noOptionsText","disabled","root","searchField","inputRoot","searchFieldInput","searchFieldInputDisabled","inputProps","maxLength","onFocus","handleFieldFocus","callback","event","data","documentTypeField","DocumentType","values","fields","inceptionDate","muiPickerProps","expiryDate","departmentID","departmentName","id","Department","readOnly","uniqueMarketRef","find","xbi","date","today","fullname","showUploadPreview","showMaxFilesError","componentProps","validation","of","mixed","nullable","required","min","actions","handleRadioClick","e","target","fieldRef","current","focus","handleFilesAdded","handleFilesRemoved","getFileKey","lastModified","onRadioClick","onFetchPolicy","onFilesAdded","onFilesRemoved"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport * as Yup from 'yup';\r\nimport classnames from 'classnames';\r\n\r\n// app\r\nimport { PolicyDocumentsUploadView } from './PolicyDocumentsUpload.view';\r\nimport styles from './PolicyDocumentsUpload.styles';\r\nimport { OptionDetail } from 'components';\r\nimport {\r\n  selectRefDataXbInstances,\r\n  hideModal,\r\n  fileUploadDocuments,\r\n  selectFileUploadData,\r\n  selectUser,\r\n  searchRiskIds,\r\n  getFileUploadPolicyDetails,\r\n} from 'stores';\r\nimport * as utils from 'utils';\r\nimport * as constants from 'consts';\r\n\r\n// mui\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nPolicyDocumentsUpload.propTypes = {\r\n  files: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      file: PropTypes.object,\r\n      name: PropTypes.string,\r\n      type: PropTypes.object,\r\n    })\r\n  ).isRequired,\r\n  rejectedFiles: PropTypes.array,\r\n  multiple: PropTypes.bool,\r\n  maxFiles: PropTypes.number,\r\n  maxSize: PropTypes.number,\r\n  accept: PropTypes.string,\r\n};\r\n\r\nPolicyDocumentsUpload.defaultProps = {\r\n  multiple: constants.POLICY_FILE_UPLOAD_ALLOW_MULTIPLE,\r\n  maxFiles: constants.POLICY_FILE_UPLOAD_MAX_FILES,\r\n  maxSize: constants.POLICY_FILE_UPLOAD_MAX_FILE_SIZE,\r\n  accept: constants.POLICY_FILE_UPLOAD_ALLOWED_FILE_EXT,\r\n};\r\n\r\nexport default function PolicyDocumentsUpload({ files, rejectedFiles, multiple, maxFiles, maxSize, accept }) {\r\n  const classes = makeStyles(styles, { name: 'PolicyDocumentsUpload' })();\r\n  const dispatch = useDispatch();\r\n  const riskFieldRef = useRef(null);\r\n  const claimFieldRef = useRef(null);\r\n  const user = useSelector(selectUser);\r\n  const fileUploadData = useSelector(selectFileUploadData);\r\n  const refDataXbInstances = useSelector(selectRefDataXbInstances);\r\n  const [policyData, setPolicyData] = useState(null);\r\n  const [searchReferenceValue, setSearchReferenceValue] = useState(null);\r\n  const [searchReferenceType, setSearchReferenceType] = useState('risk');\r\n  const [filesAttached, setFilesAttached] = useState(files);\r\n  const [warnings, setWarnings] = useState({});\r\n\r\n  const fetchPolicyRefs = useCallback(\r\n    async (type, searchTerm) => {\r\n      if (searchTerm.length >= 4) {\r\n        const refs = await dispatch(searchRiskIds(searchTerm));\r\n\r\n        if (utils.generic.isValidArray(refs)) {\r\n          return refs;\r\n        } else {\r\n          return [];\r\n        }\r\n      }\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  const fetchPolicyDetails = useCallback(\r\n    async (riskRefObject) => {\r\n      let response = await dispatch(getFileUploadPolicyDetails(searchReferenceType, riskRefObject));\r\n      if (response) {\r\n        setPolicyData(response);\r\n      }\r\n    },\r\n    [dispatch, searchReferenceType]\r\n  );\r\n\r\n  const setWarningDuplicates = (hasDuplicates) => {\r\n    return hasDuplicates\r\n      ? { duplicates: { message: utils.string.t('fileUpload.messages.duplicates'), type: 'alert' } }\r\n      : { duplicates: {} };\r\n  };\r\n\r\n  const setWarningTooManyFiles = (filesCurrentlyAttached) => {\r\n    return filesCurrentlyAttached && filesCurrentlyAttached.length > maxFiles\r\n      ? { tooManyFiles: { message: utils.string.t('fileUpload.messages.tooManyFiles', { max: maxFiles }), type: 'error' } }\r\n      : { tooManyFiles: {} };\r\n  };\r\n\r\n  const setWarningMaxFileSize = (rejectedFiles) => {\r\n    return rejectedFiles && rejectedFiles.length > 0 && rejectedFiles.some((f) => f.size > maxSize)\r\n      ? {\r\n          maxFileSize: {\r\n            message: utils.string.t('fileUpload.messages.maxFileSize', {\r\n              max: utils.string.t('format.number', {\r\n                value: { number: maxSize, format: { output: 'byte', base: 'decimal', mantissa: 0 } },\r\n              }),\r\n              filename: rejectedFiles\r\n                .map((f) => f.name)\r\n                .filter(Boolean) // filter out empty array item, in case f.name is falsy or empty ''\r\n                .join(', '),\r\n            }),\r\n            type: 'alert',\r\n          },\r\n        }\r\n      : { maxFileSize: {} };\r\n  };\r\n\r\n  const setWarningForRejectedFile = (rejectedFiles) => {\r\n    const acceptSplittedExtension = accept?.split(',');\r\n    const slicedExtensionArray = acceptSplittedExtension?.map((s) => s?.slice(1));\r\n    return rejectedFiles?.length > 0 && slicedExtensionArray?.indexOf(rejectedFiles?.[0]?.path.split('.').pop()) === -1\r\n      ? { rejectedFormat: { message: utils.string.t('fileUpload.messages.rejectedFileFormat'), type: 'alert' } }\r\n      : { rejectedFormat: {} };\r\n  };\r\n\r\n  useEffect(() => {\r\n    setWarnings({\r\n      ...warnings,\r\n      ...setWarningTooManyFiles(filesAttached),\r\n      ...setWarningMaxFileSize(rejectedFiles),\r\n    });\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const getOptionTooltip = ({ xbInstance, xbInstanceId }) => {\r\n    if (!xbInstance || !xbInstanceId) return;\r\n\r\n    return (\r\n      <span>\r\n        {utils.string.t('fileUpload.xbInstance')}: {xbInstance}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  const renderOption = (item) => {\r\n    return <OptionDetail label={item.policyRef} sublabel={item.insuredName} detail={getOptionTooltip(item)} />;\r\n  };\r\n\r\n  const searchFields = [\r\n    {\r\n      name: 'riskReference',\r\n      type: 'autocompletemui',\r\n      label: utils.string.t('fileUpload.fields.riskRef.label'),\r\n      hint: utils.string.t('fileUpload.hint', { count: 4 }),\r\n      value: searchReferenceValue || null,\r\n      options: policyData?.policyID\r\n        ? [\r\n            {\r\n              policyID: policyData.policyID,\r\n              policyRef: policyData.policyRef,\r\n              insuredID: policyData.insuredID,\r\n              insuredName: policyData.insuredName,\r\n              xbInstanceId: policyData.xbInstanceId,\r\n              xbInstance: policyData.xbInstance,\r\n            },\r\n          ]\r\n        : [],\r\n      optionKey: 'policyID',\r\n      optionLabel: 'policyRef',\r\n      optionsFetch: {\r\n        type: 'risk',\r\n        handler: fetchPolicyRefs,\r\n      },\r\n      muiComponentProps: {\r\n        ref: riskFieldRef,\r\n        fullWidth: true,\r\n        noOptionsText: utils.string.t('fileUpload.noRiskOptions'),\r\n        disabled: searchReferenceType !== 'risk',\r\n        renderOption,\r\n        classes: {\r\n          root: classes.searchField,\r\n          inputRoot: classnames({\r\n            [classes.searchFieldInput]: true,\r\n            [classes.searchFieldInputDisabled]: searchReferenceType !== 'risk',\r\n          }),\r\n        },\r\n        inputProps: {\r\n          maxLength: 25,\r\n          onFocus: () => {\r\n            handleFieldFocus('risk');\r\n          },\r\n        },\r\n      },\r\n      callback: (event, data) => {\r\n        if (!data) {\r\n          setPolicyData(null);\r\n        }\r\n\r\n        setSearchReferenceValue(data);\r\n      },\r\n    },\r\n    // {\r\n    //   name: 'claimReference',\r\n    //   type: 'text',\r\n    //   label: utils.string.t('fileUpload.fields.claimRef.label'),\r\n    //   hint: utils.string.t('fileUpload.hint', { count: 4 }),\r\n    //   options: [],\r\n    //   optionKey: 'id',\r\n    //   optionLabel: 'name',\r\n    //   optionsFetch: {\r\n    //     type: 'claim',\r\n    //     handler: fetchPolicyRefs,\r\n    //   },\r\n    //   muiComponentProps: {\r\n    //     ref: claimFieldRef,\r\n    //     disabled: searchReferenceType !== 'claim',\r\n    //     fullWidth: true,\r\n    //     noOptionsText: utils.string.t('fileUpload.noRiskOptions'),\r\n    //     classes: {\r\n    //       root: classes.searchField,\r\n    //       inputRoot: classnames({\r\n    //         [classes.searchFieldInput]: true,\r\n    //         [classes.searchFieldInputDisabled]: searchReferenceType !== 'claim',\r\n    //       }),\r\n    //     },\r\n    //     inputProps: {\r\n    //       maxLength: 25,\r\n    //       onFocus: () => {\r\n    //         handleFieldFocus('claim');\r\n    //       },\r\n    //     },\r\n    //   },\r\n    // },\r\n  ];\r\n\r\n  const documentTypeField = {\r\n    name: 'documentType',\r\n    type: 'autocompletemui',\r\n    value: null,\r\n    // documentType options should be taken from new refData API instead of custom fileUpload GUI API\r\n    // this can only happen once fileUpload is available for Extended Edge users\r\n    options: fileUploadData?.DocumentType || [],\r\n    optionKey: 'id',\r\n    optionLabel: 'value',\r\n    muiComponentProps: {\r\n      size: 'small',\r\n    },\r\n    callback: (event, data, values) => {\r\n      setFilesAttached(values?.files || []);\r\n    },\r\n  };\r\n\r\n  const fields = [\r\n    {\r\n      name: 'sectionType',\r\n      type: 'autocompletemui',\r\n      label: utils.string.t('fileUpload.fields.sectionType.label'),\r\n      value: { value: 'policy', label: 'Policy' },\r\n      options: [{ value: 'policy', label: 'Policy' }],\r\n      muiComponentProps: {\r\n        disabled: true,\r\n      },\r\n    },\r\n    {\r\n      name: 'inceptionDate',\r\n      type: 'datepicker',\r\n      label: utils.string.t('fileUpload.fields.inceptionDate.label'),\r\n      value: policyData?.inceptionDate || null,\r\n      muiPickerProps: {\r\n        disabled: true,\r\n      },\r\n      muiComponentProps: {\r\n        fullWidth: true,\r\n      },\r\n    },\r\n    {\r\n      name: 'expiryDate',\r\n      type: 'datepicker',\r\n      label: utils.string.t('fileUpload.fields.expiryDate.label'),\r\n      value: policyData?.expiryDate || null,\r\n      muiPickerProps: {\r\n        disabled: true,\r\n      },\r\n      muiComponentProps: {\r\n        fullWidth: true,\r\n      },\r\n    },\r\n    {\r\n      name: 'department',\r\n      type: 'autocompletemui',\r\n      label: utils.string.t('fileUpload.fields.department.label'),\r\n      value:\r\n        (policyData?.departmentID && policyData?.departmentName && { id: policyData.departmentID, value: policyData.departmentName }) ||\r\n        null,\r\n      options: fileUploadData?.Department || null,\r\n      optionKey: 'id',\r\n      optionLabel: 'value',\r\n      muiComponentProps: {\r\n        disabled: true,\r\n      },\r\n    },\r\n    {\r\n      name: 'insuredName',\r\n      type: 'text',\r\n      value: policyData?.insuredName || '',\r\n      label: utils.string.t('fileUpload.fields.insuredName.label'),\r\n      muiComponentProps: {\r\n        readOnly: true,\r\n        disabled: true,\r\n      },\r\n    },\r\n    {\r\n      name: 'insuredID',\r\n      type: 'hidden',\r\n      value: policyData?.insuredID || '',\r\n    },\r\n    {\r\n      name: 'policyID',\r\n      type: 'hidden',\r\n      value: policyData?.policyID || '',\r\n    },\r\n    {\r\n      name: 'policyRef',\r\n      type: 'text',\r\n      value: policyData?.policyRef || '',\r\n      label: utils.string.t('fileUpload.fields.policyRef.label'),\r\n      muiComponentProps: {\r\n        readOnly: true,\r\n        disabled: true,\r\n      },\r\n    },\r\n    {\r\n      name: 'umr',\r\n      type: 'text',\r\n      value: policyData?.uniqueMarketRef || '',\r\n      label: utils.string.t('fileUpload.fields.umr.label'),\r\n      muiComponentProps: {\r\n        readOnly: true,\r\n        disabled: true,\r\n      },\r\n    },\r\n    {\r\n      name: 'xbInstance',\r\n      type: 'autocompletemui',\r\n      label: utils.string.t('fileUpload.fields.xbInstance.label'),\r\n      value:\r\n        (policyData?.xbInstanceId && policyData?.xbInstance && refDataXbInstances.find((xbi) => xbi.id === policyData.xbInstanceId)) ||\r\n        null,\r\n      options: refDataXbInstances,\r\n      optionKey: 'id',\r\n      optionLabel: 'value',\r\n      muiComponentProps: {\r\n        disabled: true,\r\n      },\r\n    },\r\n    {\r\n      name: 'sourceSystem',\r\n      type: 'autocompletemui',\r\n      label: utils.string.t('fileUpload.fields.sourceSystem.label'),\r\n      value: { value: 'edge', label: 'Edge' },\r\n      options: [{ value: 'edge', label: 'Edge' }],\r\n      muiComponentProps: {\r\n        disabled: true,\r\n      },\r\n    },\r\n    {\r\n      name: 'uploadDate',\r\n      type: 'datepicker',\r\n      label: utils.string.t('fileUpload.fields.uploadDate.label'),\r\n      value: utils.date.today(),\r\n      muiPickerProps: {\r\n        disabled: true,\r\n      },\r\n      muiComponentProps: {\r\n        fullWidth: true,\r\n      },\r\n    },\r\n    {\r\n      name: 'uploadBy',\r\n      type: 'autocompletemui',\r\n      label: utils.string.t('fileUpload.fields.uploadBy.label'),\r\n      value: { value: user.id, label: utils.user.fullname(user) },\r\n      options: [{ value: user.id, label: utils.user.fullname(user) }],\r\n      muiComponentProps: {\r\n        disabled: true,\r\n      },\r\n    },\r\n    {\r\n      type: 'file',\r\n      name: 'filesUpload',\r\n      label: utils.string.t('app.file_plural'),\r\n      value: null,\r\n      showUploadPreview: false,\r\n      showMaxFilesError: false,\r\n      componentProps: {\r\n        multiple,\r\n        maxFiles,\r\n        maxSize,\r\n        accept,\r\n      },\r\n    },\r\n    {\r\n      type: 'hidden',\r\n      name: 'files',\r\n      value: utils.generic.isValidArray(filesAttached, true)\r\n        ? filesAttached.map((f) => ({ file: f.file, name: f.name, type: f.type || null }))\r\n        : [],\r\n      validation: Yup.array()\r\n        .of(\r\n          Yup.object().shape({\r\n            file: Yup.mixed(),\r\n            name: Yup.string(),\r\n            type: Yup.object().nullable().required(utils.string.t('validation.required')),\r\n          })\r\n        )\r\n        .min(1, utils.string.t('validation.required'))\r\n        .required(utils.string.t('validation.required')),\r\n    },\r\n  ];\r\n\r\n  const actions = [\r\n    {\r\n      name: 'cancel',\r\n      label: utils.string.t('app.cancel'),\r\n      handler: () => dispatch(hideModal()),\r\n    },\r\n    {\r\n      name: 'submit',\r\n      label: utils.string.t('fileUpload.saveDocuments'),\r\n      handler: (data) => {\r\n        dispatch(fileUploadDocuments(data));\r\n      },\r\n    },\r\n  ];\r\n\r\n  const handleRadioClick = (e) => {\r\n    const type = e.target?.value;\r\n    const fieldRef = type === 'risk' ? riskFieldRef : type === 'claim' ? claimFieldRef : null;\r\n\r\n    if (type) {\r\n      setSearchReferenceType(type);\r\n      fieldRef.current.focus();\r\n    }\r\n  };\r\n\r\n  const handleFieldFocus = (type) => {\r\n    if (type) {\r\n      setSearchReferenceType(type);\r\n    }\r\n  };\r\n\r\n  const handleFilesAdded = (filesCurrentlyAttached, rejectedFiles, hasDuplicates) => {\r\n    setWarnings({\r\n      ...warnings,\r\n      ...setWarningDuplicates(hasDuplicates),\r\n      ...setWarningTooManyFiles(filesCurrentlyAttached),\r\n      ...setWarningMaxFileSize(rejectedFiles),\r\n      ...setWarningForRejectedFile(rejectedFiles),\r\n    });\r\n\r\n    setFilesAttached(filesCurrentlyAttached);\r\n  };\r\n\r\n  const handleFilesRemoved = (filesCurrentlyAttached) => {\r\n    setWarnings({\r\n      ...warnings,\r\n      ...setWarningDuplicates(false),\r\n      ...setWarningTooManyFiles(filesCurrentlyAttached),\r\n      ...setWarningMaxFileSize(false),\r\n      ...setWarningForRejectedFile(false),\r\n    });\r\n\r\n    setFilesAttached(filesCurrentlyAttached);\r\n  };\r\n\r\n  const getFileKey = (file) => {\r\n    return `${file.name}-${file.size}-${file.lastModified}`;\r\n  };\r\n\r\n  return (\r\n    <PolicyDocumentsUploadView\r\n      resetKey={`${policyData?.id}-${policyData?.policyRef}`}\r\n      searchFields={searchFields}\r\n      fields={fields}\r\n      documentTypeField={documentTypeField}\r\n      actions={actions}\r\n      searchReferenceType={searchReferenceType}\r\n      warnings={warnings}\r\n      isPolicyDataLoaded={Boolean(policyData)}\r\n      handlers={{\r\n        getFileKey,\r\n        onRadioClick: handleRadioClick,\r\n        onFetchPolicy: fetchPolicyDetails,\r\n        onFilesAdded: handleFilesAdded,\r\n        onFilesRemoved: handleFilesRemoved,\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}