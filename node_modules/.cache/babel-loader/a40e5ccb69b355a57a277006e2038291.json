{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport get from 'lodash/get';\nimport uniq from 'lodash/uniq';\nimport uniqBy from 'lodash/uniqBy';\nimport isString from 'lodash/isString';\nimport compact from 'lodash/compact'; // app\n\nimport * as utils from 'utils';\nimport config from 'config';\nimport groupBy from 'lodash/groupBy';\nimport toNumber from 'lodash/toNumber';\nvar utilsPlacement = {\n  getInsureds: function getInsureds(placement) {\n    if (!placement || !utils.generic.isValidArray(placement.insureds, true)) return '';\n    return placement.insureds.filter(function (insured) {\n      return insured.id && insured.name && insured.name.trim();\n    }).map(function (insured) {\n      return insured.name;\n    }).join(', ');\n  },\n  getClients: function getClients(placement) {\n    if (!placement || !utils.generic.isValidArray(placement.clients, true)) return [];\n    return _toConsumableArray(placement.clients).filter(function (client) {\n      return client.name && isString(client.name) && client.name.trim();\n    }).map(function (client) {\n      var parentName = client.parent && client.parent.trim();\n      var clientName = client.name && client.name.trim();\n      return clientName.includes(parentName) ? clientName : [parentName, clientName].filter(function (i) {\n        return i;\n      }).join(' ');\n    });\n  },\n  getOffices: function getOffices(placement) {\n    if (!placement || !utils.generic.isValidArray(placement.clients, true)) return [];\n    return compact(uniq(placement.clients.reduce(function (acc, client) {\n      var offices = client.offices || [];\n      return [].concat(_toConsumableArray(acc), _toConsumableArray(offices.map(function (o) {\n        return o.name;\n      })));\n    }, [])));\n  },\n  getOfficeCobrokers: function getOfficeCobrokers(placement) {\n    if (!placement || !utils.generic.isValidArray(placement.clients, true)) return [];\n    var allCoBrokers = placement.clients.reduce(function (acc, client) {\n      if (client.type === 'office' && utils.generic.isValidArray(client.cobrokers, true)) {\n        return [].concat(_toConsumableArray(acc), _toConsumableArray(client.cobrokers));\n      }\n\n      return acc;\n    }, []);\n    return uniqBy(allCoBrokers, 'id');\n  },\n  getYear: function getYear(placement) {\n    if (!placement || !placement.inceptionDate) return '';\n    var date = new Date(placement.inceptionDate);\n    var year = date && date.getFullYear();\n    return year || '';\n  },\n  getDepartmentName: function getDepartmentName(placement, depts) {\n    if (!placement || !placement.departmentId || !utils.generic.isValidArray(depts, true)) return '';\n    var dept = utils.referenceData.departments.getById(depts, placement.departmentId);\n    return dept ? dept.name : '';\n  },\n  // item could be layers or policies\n  // it should work with both as their structure should be the same\n  // departments without a valid id and/or name are excluded\n  getTabsByBusinessTypeId: function getTabsByBusinessTypeId(items, department) {\n    if (!items || !department || !utils.generic.isValidArray(items, true)) return [];\n    var groups = groupBy(items, function (item) {\n      return item.businessTypeId;\n    });\n    return Object.keys(groups).map(function (group) {\n      var businessTypeId = toNumber(group);\n      var businessTypeName = utils.referenceData.businessTypes.getNameById(department.businessTypes, businessTypeId);\n      return {\n        value: businessTypeId,\n        label: businessTypeName\n      };\n    }).filter(function (obj) {\n      return Boolean(obj.value && obj.label);\n    });\n  },\n  // layer OMS\n  // false/false means we want the total gross premium amount\n  // check that the default flags make sense\n  // getPremiumByCurrency: (placement, currency, isSigned = false, toOrder = false) => {\n  //   if (!placement || !currency || !utils.generic.isValidArray(placement.policies, true)) return {};\n  //\n  //   return placement.policies.reduce((acc, policy) => {\n  //     const premiumsByCurrency = utils.policy.getPremiumByCurrency(policy, currency, isSigned, toOrder);\n  //\n  //     return utils.placement.mergePremiumsByCurrency(acc, premiumsByCurrency);\n  //   }, {});\n  // },\n  // policy GXB\n  // true/true means we want the premium value signed and ordered (based on markets %)\n  getPremiumBySettlementCurrency: function getPremiumBySettlementCurrency(placement) {\n    var isSigned = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var toOrder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    if (!placement || !utils.generic.isValidArray(placement.policies, true)) return {};\n    return placement.policies.reduce(function (acc, policy) {\n      // only keep GXB policies\n      if (!utils.policy.isOriginGxb(policy)) return acc;\n      var premiumsByCurrency = utils.policy.getPremiumBySettlementCurrency(policy, isSigned, toOrder);\n      return utils.placement.mergePremiumsByCurrency(acc, premiumsByCurrency);\n    }, {});\n  },\n  mergePremiumsByCurrency: function mergePremiumsByCurrency(acc, premiumsByCurrency) {\n    var obj = {};\n    var keys = uniq([].concat(_toConsumableArray(Object.keys(premiumsByCurrency)), _toConsumableArray(Object.keys(acc))));\n    keys.forEach(function (key) {\n      obj[key] = (acc[key] || 0) + (premiumsByCurrency[key] || 0);\n    });\n    return obj;\n  },\n  isBound: function isBound(placement, statusBoundId) {\n    // this assumes the developer is passing the correct status ID for \"bound\"\n    if (!placement || !statusBoundId) return false;\n    return placement.statusId === statusBoundId;\n  },\n  getByYear: function getByYear(placements, year, withPremium) {\n    if (!year || !placements || !utils.generic.isValidArray(placements, true)) return [];\n    return placements.filter(function (placement) {\n      var isSameYear = year === utils.placement.getYear(placement); // Only keep placements with premiums\n\n      if (withPremium) {\n        return isSameYear && placement.policies.reduce(function (acc, policy) {\n          return acc || utils.policy.hasBoundPremium(policy);\n        }, false);\n      } else {\n        return isSameYear;\n      }\n    });\n  },\n  isPhysicalLoss: function isPhysicalLoss(placement) {\n    if (!utils.generic.isValidObject(placement) || !config.departments || !utils.generic.isValidArray(config.departments.physicalLoss)) return false;\n    var department = config.departments.physicalLoss.find(function (department) {\n      return department.id === placement.departmentId;\n    });\n    return !!department;\n  },\n  getFilteredBreadcrumbs: function getFilteredBreadcrumbs(_ref) {\n    var breadcrumbs = _ref.breadcrumbs,\n        placement = _ref.placement,\n        isBroker = _ref.isBroker,\n        isDev = _ref.isDev,\n        statusBoundId = _ref.statusBoundId;\n    return breadcrumbs.map(function (breadcrumb) {\n      return _objectSpread(_objectSpread({}, breadcrumb), placement && placement.id && {\n        link: \"\".concat(breadcrumb.route, \"/\").concat(placement.id)\n      });\n    }).filter(function (breadcrumb) {\n      var showForPhysicalLoss = breadcrumb.showForPhysicalLoss,\n          showForIsBroker = breadcrumb.showForIsBroker,\n          showForIsDev = breadcrumb.showForIsDev;\n      return (breadcrumb.name !== 'bound' || utils.placement.isBound(placement, statusBoundId)) && (!showForPhysicalLoss || showForPhysicalLoss && utils.placement.isPhysicalLoss(placement)) && (!showForIsBroker || showForIsBroker && isBroker) && (!showForIsDev || showForIsDev && isDev);\n    });\n  },\n  layer: {\n    getById: function getById(layers, id) {\n      if (!id || utils.generic.isInvalidOrEmptyArray(layers)) return;\n      return layers.find(function (layer) {\n        return layer.id === id;\n      });\n    }\n  },\n  parsePlacements: function parsePlacements(items) {\n    return items.map(function (placement) {\n      // structure clients (and offices) into array of objects\n      if (placement.clients && placement.clients.length > 0) {\n        var clientsArray = placement.clients.reduce(function (acc, client) {\n          if (client.offices && client.offices.length > 0) {\n            client.offices.forEach(function (office) {\n              if (office.id && office.name) {\n                acc.push({\n                  id: client.id,\n                  name: office.name,\n                  cobrokers: office.cobrokers,\n                  parent: get(office, 'parent.name') || '',\n                  logoFileName: get(office, 'parent.logoFileName') || '',\n                  type: 'office'\n                });\n              }\n            });\n          } else {\n            if (client.id && client.name) {\n              acc.push({\n                id: client.id,\n                name: client.name,\n                type: 'client'\n              });\n            }\n          }\n\n          return acc;\n        }, []);\n        placement.clients = uniqBy(clientsArray, 'id');\n      } else {\n        placement.clients = [];\n      }\n\n      if (placement.config) {\n        try {\n          placement.config = JSON.parse(placement.config);\n        } catch (_unused) {\n          placement.config = null;\n        }\n      } // Bound data now comes from a different source and is made to look like Edge data.\n      // To minimise disruption below I swap the id for the notes.\n      // This obviously isn't the DB record id but it is the most unique thing in the absence of in id.\n      // It keeps the app performing as expected given how often an id is used as a key.\n\n\n      if (placement && placement.policies) {\n        placement.policies.forEach(function (p) {\n          if (!p.id) p.id = p.notes;\n\n          if (utils.generic.isValidArray(p.markets, true)) {\n            p.markets.forEach(function (m) {\n              if (!m.id) m.id = utils.market.getName(m);\n            });\n          }\n        });\n      }\n\n      return placement;\n    });\n  },\n  isSelected: function isSelected(typeName, modellingAttachmentTypes) {\n    return modellingAttachmentTypes === null || modellingAttachmentTypes === void 0 ? void 0 : modellingAttachmentTypes.map(function (type) {\n      return type.modellingAttachmentTypeKey;\n    }).includes(typeName);\n  },\n  renderFileTypeOptions: function renderFileTypeOptions(modellingTypeValue, isNew, modellingAttachmentTypes) {\n    switch (modellingTypeValue) {\n      case 'QUOTING':\n        return [{\n          label: utils.string.t('placement.modelling.sovAttached.label'),\n          id: 'fileType.sovAttachedQuote',\n          name: 'fileType.sovAttachedQuote',\n          value: isNew ? false : utils.placement.isSelected('sovAttachedQuote', modellingAttachmentTypes) || false\n        }, {\n          label: utils.string.t('placement.modelling.expiringSlip.label'),\n          id: 'fileType.expiringSlip',\n          name: 'fileType.expiringSlip',\n          value: isNew ? false : utils.placement.isSelected('expiringSlip', modellingAttachmentTypes) || false\n        }];\n\n      case 'BOUND':\n        return [{\n          label: utils.string.t('placement.modelling.sovAttached.label'),\n          id: 'fileType.sovAttachedBound',\n          name: 'fileType.sovAttachedBound',\n          value: isNew ? false : utils.placement.isSelected('sovAttachedBound', modellingAttachmentTypes) || false\n        }, {\n          label: utils.string.t('placement.modelling.boundUmrSlip.label'),\n          id: 'fileType.boundUmrSlip',\n          name: 'fileType.boundUmrSlip',\n          value: isNew ? false : utils.placement.isSelected('boundUmrSlip', modellingAttachmentTypes) || false\n        }];\n\n      default:\n        return [];\n    }\n  },\n  checkAllTruthyValues: function checkAllTruthyValues(fileTypeValue) {\n    return Object.values(fileTypeValue).every(function (item) {\n      return item;\n    });\n  }\n};\nexport default utilsPlacement;","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/utils/placement/placement.js"],"names":["get","uniq","uniqBy","isString","compact","utils","config","groupBy","toNumber","utilsPlacement","getInsureds","placement","generic","isValidArray","insureds","filter","insured","id","name","trim","map","join","getClients","clients","client","parentName","parent","clientName","includes","i","getOffices","reduce","acc","offices","o","getOfficeCobrokers","allCoBrokers","type","cobrokers","getYear","inceptionDate","date","Date","year","getFullYear","getDepartmentName","depts","departmentId","dept","referenceData","departments","getById","getTabsByBusinessTypeId","items","department","groups","item","businessTypeId","Object","keys","group","businessTypeName","businessTypes","getNameById","value","label","obj","Boolean","getPremiumBySettlementCurrency","isSigned","toOrder","policies","policy","isOriginGxb","premiumsByCurrency","mergePremiumsByCurrency","forEach","key","isBound","statusBoundId","statusId","getByYear","placements","withPremium","isSameYear","hasBoundPremium","isPhysicalLoss","isValidObject","physicalLoss","find","getFilteredBreadcrumbs","breadcrumbs","isBroker","isDev","breadcrumb","link","route","showForPhysicalLoss","showForIsBroker","showForIsDev","layer","layers","isInvalidOrEmptyArray","parsePlacements","length","clientsArray","office","push","logoFileName","JSON","parse","p","notes","markets","m","market","getName","isSelected","typeName","modellingAttachmentTypes","modellingAttachmentTypeKey","renderFileTypeOptions","modellingTypeValue","isNew","string","t","checkAllTruthyValues","fileTypeValue","values","every"],"mappings":"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","sourcesContent":["import get from 'lodash/get';\r\nimport uniq from 'lodash/uniq';\r\nimport uniqBy from 'lodash/uniqBy';\r\nimport isString from 'lodash/isString';\r\nimport compact from 'lodash/compact';\r\n\r\n// app\r\nimport * as utils from 'utils';\r\nimport config from 'config';\r\nimport groupBy from 'lodash/groupBy';\r\nimport toNumber from 'lodash/toNumber';\r\n\r\nconst utilsPlacement = {\r\n  getInsureds: (placement) => {\r\n    if (!placement || !utils.generic.isValidArray(placement.insureds, true)) return '';\r\n\r\n    return placement.insureds\r\n      .filter((insured) => insured.id && insured.name && insured.name.trim())\r\n      .map((insured) => insured.name)\r\n      .join(', ');\r\n  },\r\n\r\n  getClients: (placement) => {\r\n    if (!placement || !utils.generic.isValidArray(placement.clients, true)) return [];\r\n\r\n    return [...placement.clients]\r\n      .filter((client) => client.name && isString(client.name) && client.name.trim())\r\n      .map((client) => {\r\n        const parentName = client.parent && client.parent.trim();\r\n        const clientName = client.name && client.name.trim();\r\n\r\n        return clientName.includes(parentName) ? clientName : [parentName, clientName].filter((i) => i).join(' ');\r\n      });\r\n  },\r\n\r\n  getOffices: (placement) => {\r\n    if (!placement || !utils.generic.isValidArray(placement.clients, true)) return [];\r\n\r\n    return compact(\r\n      uniq(\r\n        placement.clients.reduce((acc, client) => {\r\n          const offices = client.offices || [];\r\n          return [...acc, ...offices.map((o) => o.name)];\r\n        }, [])\r\n      )\r\n    );\r\n  },\r\n\r\n  getOfficeCobrokers: (placement) => {\r\n    if (!placement || !utils.generic.isValidArray(placement.clients, true)) return [];\r\n\r\n    const allCoBrokers = placement.clients.reduce((acc, client) => {\r\n      if (client.type === 'office' && utils.generic.isValidArray(client.cobrokers, true)) {\r\n        return [...acc, ...client.cobrokers];\r\n      }\r\n\r\n      return acc;\r\n    }, []);\r\n\r\n    return uniqBy(allCoBrokers, 'id');\r\n  },\r\n\r\n  getYear: (placement) => {\r\n    if (!placement || !placement.inceptionDate) return '';\r\n\r\n    const date = new Date(placement.inceptionDate);\r\n    const year = date && date.getFullYear();\r\n\r\n    return year || '';\r\n  },\r\n\r\n  getDepartmentName: (placement, depts) => {\r\n    if (!placement || !placement.departmentId || !utils.generic.isValidArray(depts, true)) return '';\r\n\r\n    const dept = utils.referenceData.departments.getById(depts, placement.departmentId);\r\n\r\n    return dept ? dept.name : '';\r\n  },\r\n\r\n  // item could be layers or policies\r\n  // it should work with both as their structure should be the same\r\n  // departments without a valid id and/or name are excluded\r\n  getTabsByBusinessTypeId: (items, department) => {\r\n    if (!items || !department || !utils.generic.isValidArray(items, true)) return [];\r\n\r\n    const groups = groupBy(items, (item) => item.businessTypeId);\r\n\r\n    return Object.keys(groups)\r\n      .map((group) => {\r\n        const businessTypeId = toNumber(group);\r\n        const businessTypeName = utils.referenceData.businessTypes.getNameById(department.businessTypes, businessTypeId);\r\n        return {\r\n          value: businessTypeId,\r\n          label: businessTypeName,\r\n        };\r\n      })\r\n      .filter((obj) => Boolean(obj.value && obj.label));\r\n  },\r\n\r\n  // layer OMS\r\n  // false/false means we want the total gross premium amount\r\n  // check that the default flags make sense\r\n  // getPremiumByCurrency: (placement, currency, isSigned = false, toOrder = false) => {\r\n  //   if (!placement || !currency || !utils.generic.isValidArray(placement.policies, true)) return {};\r\n  //\r\n  //   return placement.policies.reduce((acc, policy) => {\r\n  //     const premiumsByCurrency = utils.policy.getPremiumByCurrency(policy, currency, isSigned, toOrder);\r\n  //\r\n  //     return utils.placement.mergePremiumsByCurrency(acc, premiumsByCurrency);\r\n  //   }, {});\r\n  // },\r\n\r\n  // policy GXB\r\n  // true/true means we want the premium value signed and ordered (based on markets %)\r\n  getPremiumBySettlementCurrency: (placement, isSigned = true, toOrder = true) => {\r\n    if (!placement || !utils.generic.isValidArray(placement.policies, true)) return {};\r\n\r\n    return placement.policies.reduce((acc, policy) => {\r\n      // only keep GXB policies\r\n      if (!utils.policy.isOriginGxb(policy)) return acc;\r\n\r\n      const premiumsByCurrency = utils.policy.getPremiumBySettlementCurrency(policy, isSigned, toOrder);\r\n      return utils.placement.mergePremiumsByCurrency(acc, premiumsByCurrency);\r\n    }, {});\r\n  },\r\n\r\n  mergePremiumsByCurrency: (acc, premiumsByCurrency) => {\r\n    const obj = {};\r\n    const keys = uniq([...Object.keys(premiumsByCurrency), ...Object.keys(acc)]);\r\n\r\n    keys.forEach((key) => {\r\n      obj[key] = (acc[key] || 0) + (premiumsByCurrency[key] || 0);\r\n    });\r\n\r\n    return obj;\r\n  },\r\n\r\n  isBound: (placement, statusBoundId) => {\r\n    // this assumes the developer is passing the correct status ID for \"bound\"\r\n    if (!placement || !statusBoundId) return false;\r\n\r\n    return placement.statusId === statusBoundId;\r\n  },\r\n\r\n  getByYear: (placements, year, withPremium) => {\r\n    if (!year || !placements || !utils.generic.isValidArray(placements, true)) return [];\r\n\r\n    return placements.filter((placement) => {\r\n      const isSameYear = year === utils.placement.getYear(placement);\r\n\r\n      // Only keep placements with premiums\r\n      if (withPremium) {\r\n        return (\r\n          isSameYear &&\r\n          placement.policies.reduce((acc, policy) => {\r\n            return acc || utils.policy.hasBoundPremium(policy);\r\n          }, false)\r\n        );\r\n      } else {\r\n        return isSameYear;\r\n      }\r\n    });\r\n  },\r\n\r\n  isPhysicalLoss: (placement) => {\r\n    if (!utils.generic.isValidObject(placement) || !config.departments || !utils.generic.isValidArray(config.departments.physicalLoss))\r\n      return false;\r\n\r\n    const department = config.departments.physicalLoss.find((department) => department.id === placement.departmentId);\r\n    return !!department;\r\n  },\r\n\r\n  getFilteredBreadcrumbs: ({ breadcrumbs, placement, isBroker, isDev, statusBoundId }) => {\r\n    return breadcrumbs\r\n      .map((breadcrumb) => ({\r\n        ...breadcrumb,\r\n        ...(placement && placement.id && { link: `${breadcrumb.route}/${placement.id}` }),\r\n      }))\r\n      .filter((breadcrumb) => {\r\n        const { showForPhysicalLoss, showForIsBroker, showForIsDev } = breadcrumb;\r\n        return (\r\n          (breadcrumb.name !== 'bound' || utils.placement.isBound(placement, statusBoundId)) &&\r\n          (!showForPhysicalLoss || (showForPhysicalLoss && utils.placement.isPhysicalLoss(placement))) &&\r\n          (!showForIsBroker || (showForIsBroker && isBroker)) &&\r\n          (!showForIsDev || (showForIsDev && isDev))\r\n        );\r\n      });\r\n  },\r\n\r\n  layer: {\r\n    getById: (layers, id) => {\r\n      if (!id || utils.generic.isInvalidOrEmptyArray(layers)) return;\r\n\r\n      return layers.find((layer) => {\r\n        return layer.id === id;\r\n      });\r\n    },\r\n  },\r\n  parsePlacements: (items) => {\r\n    return items.map((placement) => {\r\n      // structure clients (and offices) into array of objects\r\n      if (placement.clients && placement.clients.length > 0) {\r\n        const clientsArray = placement.clients.reduce((acc, client) => {\r\n          if (client.offices && client.offices.length > 0) {\r\n            client.offices.forEach((office) => {\r\n              if (office.id && office.name) {\r\n                acc.push({\r\n                  id: client.id,\r\n                  name: office.name,\r\n                  cobrokers: office.cobrokers,\r\n                  parent: get(office, 'parent.name') || '',\r\n                  logoFileName: get(office, 'parent.logoFileName') || '',\r\n                  type: 'office',\r\n                });\r\n              }\r\n            });\r\n          } else {\r\n            if (client.id && client.name) {\r\n              acc.push({\r\n                id: client.id,\r\n                name: client.name,\r\n                type: 'client',\r\n              });\r\n            }\r\n          }\r\n\r\n          return acc;\r\n        }, []);\r\n\r\n        placement.clients = uniqBy(clientsArray, 'id');\r\n      } else {\r\n        placement.clients = [];\r\n      }\r\n\r\n      if (placement.config) {\r\n        try {\r\n          placement.config = JSON.parse(placement.config);\r\n        } catch {\r\n          placement.config = null;\r\n        }\r\n      }\r\n\r\n      // Bound data now comes from a different source and is made to look like Edge data.\r\n      // To minimise disruption below I swap the id for the notes.\r\n      // This obviously isn't the DB record id but it is the most unique thing in the absence of in id.\r\n      // It keeps the app performing as expected given how often an id is used as a key.\r\n      if (placement && placement.policies) {\r\n        placement.policies.forEach((p) => {\r\n          if (!p.id) p.id = p.notes;\r\n\r\n          if (utils.generic.isValidArray(p.markets, true)) {\r\n            p.markets.forEach((m) => {\r\n              if (!m.id) m.id = utils.market.getName(m);\r\n            });\r\n          }\r\n        });\r\n      }\r\n\r\n      return placement;\r\n    });\r\n  },\r\n\r\n  isSelected: (typeName, modellingAttachmentTypes) => {\r\n    return modellingAttachmentTypes?.map((type) => type.modellingAttachmentTypeKey).includes(typeName);\r\n  },\r\n\r\n  renderFileTypeOptions: (modellingTypeValue, isNew, modellingAttachmentTypes) => {\r\n    switch (modellingTypeValue) {\r\n      case 'QUOTING':\r\n        return [\r\n          {\r\n            label: utils.string.t('placement.modelling.sovAttached.label'),\r\n            id: 'fileType.sovAttachedQuote',\r\n            name: 'fileType.sovAttachedQuote',\r\n            value: isNew ? false : utils.placement.isSelected('sovAttachedQuote', modellingAttachmentTypes) || false,\r\n          },\r\n          {\r\n            label: utils.string.t('placement.modelling.expiringSlip.label'),\r\n            id: 'fileType.expiringSlip',\r\n            name: 'fileType.expiringSlip',\r\n            value: isNew ? false : utils.placement.isSelected('expiringSlip', modellingAttachmentTypes) || false,\r\n          },\r\n        ];\r\n\r\n      case 'BOUND':\r\n        return [\r\n          {\r\n            label: utils.string.t('placement.modelling.sovAttached.label'),\r\n            id: 'fileType.sovAttachedBound',\r\n            name: 'fileType.sovAttachedBound',\r\n            value: isNew ? false : utils.placement.isSelected('sovAttachedBound', modellingAttachmentTypes) || false,\r\n          },\r\n          {\r\n            label: utils.string.t('placement.modelling.boundUmrSlip.label'),\r\n            id: 'fileType.boundUmrSlip',\r\n            name: 'fileType.boundUmrSlip',\r\n            value: isNew ? false : utils.placement.isSelected('boundUmrSlip', modellingAttachmentTypes) || false,\r\n          },\r\n        ];\r\n      default:\r\n        return [];\r\n    }\r\n  },\r\n  checkAllTruthyValues: (fileTypeValue) => Object.values(fileTypeValue).every((item) => item),\r\n};\r\n\r\nexport default utilsPlacement;\r\n"]},"metadata":{},"sourceType":"module"}