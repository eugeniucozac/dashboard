{"ast":null,"code":"import _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// app\nimport { addLoader, authLogout, enqueueNotification, removeLoader } from 'stores';\nimport * as utils from 'utils';\nimport get from 'lodash/get';\nexport var removeComplexityPolicy = function removeComplexityPolicy(data) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint,\n        claims = _getState.claims;\n\n    var getPoliciesData = get(claims, 'complexityPoliciesFlagged.items') || [];\n    var defaultError = {\n      file: 'stores/claims.actions.removeComplexityPolicy'\n    };\n    var checkedPolicies = Object.keys(Object.fromEntries(Object.entries(data).filter(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n\n      return value;\n    })));\n    var xbInstanceIDs = getPoliciesData === null || getPoliciesData === void 0 ? void 0 : getPoliciesData.filter(function (item) {\n      var _item$xbPolicyID;\n\n      return checkedPolicies === null || checkedPolicies === void 0 ? void 0 : checkedPolicies.includes(item === null || item === void 0 ? void 0 : (_item$xbPolicyID = item.xbPolicyID) === null || _item$xbPolicyID === void 0 ? void 0 : _item$xbPolicyID.toString());\n    });\n    var mappedPolicies = xbInstanceIDs === null || xbInstanceIDs === void 0 ? void 0 : xbInstanceIDs.map(function (item) {\n      var _item$xbPolicyID2, _item$xbInstanceID;\n\n      return {\n        attributeType: 'Policy',\n        attributeValue: item === null || item === void 0 ? void 0 : (_item$xbPolicyID2 = item.xbPolicyID) === null || _item$xbPolicyID2 === void 0 ? void 0 : _item$xbPolicyID2.toString(),\n        complexityAttributesID: 0,\n        isActive: 0,\n        isComplex: 1,\n        sourceID: item === null || item === void 0 ? void 0 : (_item$xbInstanceID = item.xbInstanceID) === null || _item$xbInstanceID === void 0 ? void 0 : _item$xbInstanceID.toString()\n      };\n    });\n    dispatch(removeComplexityPolicyRequest(mappedPolicies));\n    dispatch(addLoader('removeComplexityPolicy'));\n    return utils.api.put({\n      token: auth.accessToken,\n      endpoint: endpoint.claimService,\n      path: 'api/data/claims-triage/complex/policy/update',\n      data: mappedPolicies\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(enqueueNotification('notification.policyRemove.remove.success', 'success'));\n      dispatch(removeLoader('removeComplexityPolicy'));\n    }).catch(function (err) {\n      dispatch(removeComplexityPolicyFailure(err, defaultError));\n      dispatch(enqueueNotification('notification.policyRemove.remove.fail', 'error'));\n      dispatch(removeLoader('removeComplexityPolicy'));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      return err;\n    });\n  };\n};\nexport var removeComplexityPolicyRequest = function removeComplexityPolicyRequest(payload) {\n  return {\n    type: 'CLAIMS_COMPLEXITY_INSURED_REMOVE_REQUEST',\n    payload: payload\n  };\n};\nexport var removeComplexityPolicySuccess = function removeComplexityPolicySuccess(payload) {\n  return {\n    type: 'CLAIMS_COMPLEXITY_INSURED_REMOVE_SUCCESS',\n    payload: payload\n  };\n};\nexport var removeComplexityPolicyFailure = function removeComplexityPolicyFailure(error) {\n  return {\n    type: 'CLAIMS_COMPLEXITY_INSURED_REMOVE_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.removeComplexityPolicy.js"],"names":["addLoader","authLogout","enqueueNotification","removeLoader","utils","get","removeComplexityPolicy","data","dispatch","getState","auth","user","endpoint","config","vars","claims","getPoliciesData","defaultError","file","checkedPolicies","Object","keys","fromEntries","entries","filter","key","value","xbInstanceIDs","item","includes","xbPolicyID","toString","mappedPolicies","map","attributeType","attributeValue","complexityAttributesID","isActive","isComplex","sourceID","xbInstanceID","removeComplexityPolicyRequest","api","put","token","accessToken","claimService","path","then","response","handleResponse","json","handleNewData","catch","err","removeComplexityPolicyFailure","handleUnauthorized","payload","type","removeComplexityPolicySuccess","error"],"mappings":"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","sourcesContent":["// app\r\nimport { addLoader, authLogout, enqueueNotification, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\nimport get from 'lodash/get';\r\n\r\nexport const removeComplexityPolicy = (data) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } }, claims } = getState();\r\n  const getPoliciesData = get(claims, 'complexityPoliciesFlagged.items') || [];\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.removeComplexityPolicy',\r\n  };\r\n  const checkedPolicies = Object.keys(Object.fromEntries(Object.entries(data).filter(([key, value]) => value)));\r\n  const xbInstanceIDs = getPoliciesData?.filter((item) => checkedPolicies?.includes(item?.xbPolicyID?.toString()));\r\n\r\n  const mappedPolicies = xbInstanceIDs?.map((item) => ({\r\n    attributeType: 'Policy',\r\n    attributeValue: item?.xbPolicyID?.toString(),\r\n    complexityAttributesID: 0,\r\n    isActive: 0,\r\n    isComplex: 1,\r\n    sourceID: item?.xbInstanceID?.toString(),\r\n  }));\r\n\r\n  dispatch(removeComplexityPolicyRequest(mappedPolicies));\r\n  dispatch(addLoader('removeComplexityPolicy'));\r\n\r\n  return utils.api\r\n    .put({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.claimService,\r\n      path: 'api/data/claims-triage/complex/policy/update',\r\n      data: mappedPolicies,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(enqueueNotification('notification.policyRemove.remove.success', 'success'));\r\n      dispatch(removeLoader('removeComplexityPolicy'));\r\n    })\r\n    .catch((err) => {\r\n      dispatch(removeComplexityPolicyFailure(err, defaultError));\r\n      dispatch(enqueueNotification('notification.policyRemove.remove.fail', 'error'));\r\n      dispatch(removeLoader('removeComplexityPolicy'));\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const removeComplexityPolicyRequest = (payload) => {\r\n  return {\r\n    type: 'CLAIMS_COMPLEXITY_INSURED_REMOVE_REQUEST',\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const removeComplexityPolicySuccess = (payload) => {\r\n  return {\r\n    type: 'CLAIMS_COMPLEXITY_INSURED_REMOVE_SUCCESS',\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const removeComplexityPolicyFailure = (error) => {\r\n  return {\r\n    type: 'CLAIMS_COMPLEXITY_INSURED_REMOVE_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}