{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ClaimsPolicySearch\\\\ClaimsPolicySearch.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ClaimsPolicySearchView from './ClaimsPolicySearch.view';\nimport { selectLossId, selectLossQualifiers, selectCatCodes, getPolicyInformation, selectClaimsPolicyInformation, getClaimantNames, selectClaimsPolicyData, getClaimDetails, selectClaimsUnderwritingGroups } from 'stores';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nClaimsPolicySearch.propTypes = {\n  isAllStepsCompleted: PropTypes.bool.isRequired,\n  activeStep: PropTypes.number.isRequired,\n  lastStep: PropTypes.bool.isRequired,\n  handleCancel: PropTypes.func.isRequired,\n  handleFinish: PropTypes.func.isRequired,\n  handleNext: PropTypes.func.isRequired,\n  handleBack: PropTypes.func.isRequired,\n  handleNextSubmit: PropTypes.func\n};\nexport default function ClaimsPolicySearch(props) {\n  _s();\n\n  var dispatch = useDispatch();\n  var lossInformation = useSelector(selectLossId);\n  var catCodes = useSelector(selectCatCodes);\n  var lossQualifiers = useSelector(selectLossQualifiers);\n  var policyInformation = useSelector(selectClaimsPolicyInformation);\n  var policyData = useSelector(selectClaimsPolicyData);\n  var underWritingGroups = useSelector(selectClaimsUnderwritingGroups);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      confirm = _useState2[0],\n      setConfirm = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currentContextActive = _useState4[0],\n      setCurrentContextActive = _useState4[1];\n\n  var hasPolicyRef = Boolean(policyInformation === null || policyInformation === void 0 ? void 0 : policyInformation.policyRef);\n\n  var handleAddClaim = function handleAddClaim() {\n    dispatch(getClaimantNames());\n  };\n\n  useEffect(function () {\n    if (policyData === null || policyData === void 0 ? void 0 : policyData.xbInstanceID) {\n      dispatch(getPolicyInformation());\n      setConfirm(true);\n    }\n  }, [policyData]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var handleSearchNext = function handleSearchNext() {\n    dispatch(getClaimDetails());\n\n    if (confirm) {\n      handleAddClaim();\n    }\n\n    props.handleNext();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ClaimsPolicySearchView, _objectSpread(_objectSpread({}, props), {}, {\n      policyInformation: policyInformation,\n      handleAddClaim: handleAddClaim,\n      lossInformation: lossInformation,\n      catCodes: catCodes,\n      lossQualifiers: lossQualifiers,\n      policyData: policyData,\n      handleSearchNext: handleSearchNext,\n      confirm: confirm,\n      setConfirm: setConfirm,\n      hasPolicyRef: hasPolicyRef,\n      setCurrentContextActive: setCurrentContextActive,\n      currentContextActive: currentContextActive,\n      underWritingGroups: underWritingGroups\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(ClaimsPolicySearch, \"/t1fm90XY23yw4TQLC1zEVlVJlk=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = ClaimsPolicySearch;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimsPolicySearch\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ClaimsPolicySearch/ClaimsPolicySearch.js"],"names":["React","useEffect","useState","PropTypes","useDispatch","useSelector","ClaimsPolicySearchView","selectLossId","selectLossQualifiers","selectCatCodes","getPolicyInformation","selectClaimsPolicyInformation","getClaimantNames","selectClaimsPolicyData","getClaimDetails","selectClaimsUnderwritingGroups","ClaimsPolicySearch","propTypes","isAllStepsCompleted","bool","isRequired","activeStep","number","lastStep","handleCancel","func","handleFinish","handleNext","handleBack","handleNextSubmit","props","dispatch","lossInformation","catCodes","lossQualifiers","policyInformation","policyData","underWritingGroups","confirm","setConfirm","currentContextActive","setCurrentContextActive","hasPolicyRef","Boolean","policyRef","handleAddClaim","xbInstanceID","handleSearchNext"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport ClaimsPolicySearchView from './ClaimsPolicySearch.view';\r\nimport {\r\n  selectLossId,\r\n  selectLossQualifiers,\r\n  selectCatCodes,\r\n  getPolicyInformation,\r\n  selectClaimsPolicyInformation,\r\n  getClaimantNames,\r\n  selectClaimsPolicyData,\r\n  getClaimDetails,\r\n  selectClaimsUnderwritingGroups\r\n} from 'stores';\r\n\r\nClaimsPolicySearch.propTypes = {\r\n  isAllStepsCompleted: PropTypes.bool.isRequired,\r\n  activeStep: PropTypes.number.isRequired,\r\n  lastStep: PropTypes.bool.isRequired,\r\n  handleCancel: PropTypes.func.isRequired,\r\n  handleFinish: PropTypes.func.isRequired,\r\n  handleNext: PropTypes.func.isRequired,\r\n  handleBack: PropTypes.func.isRequired,\r\n  handleNextSubmit: PropTypes.func,\r\n};\r\n\r\nexport default function ClaimsPolicySearch(props) {\r\n  const dispatch = useDispatch();\r\n  const lossInformation = useSelector(selectLossId);\r\n  const catCodes = useSelector(selectCatCodes);\r\n  const lossQualifiers = useSelector(selectLossQualifiers);\r\n  const policyInformation = useSelector(selectClaimsPolicyInformation);\r\n  const policyData = useSelector(selectClaimsPolicyData);\r\n  const underWritingGroups = useSelector(selectClaimsUnderwritingGroups);\r\n  const [confirm, setConfirm] = useState(false);\r\n  const [currentContextActive, setCurrentContextActive] = useState(true);\r\n  const hasPolicyRef = Boolean(policyInformation?.policyRef);\r\n\r\n  const handleAddClaim = () => {\r\n    dispatch(getClaimantNames());\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (policyData?.xbInstanceID) {\r\n      dispatch(getPolicyInformation());\r\n      setConfirm(true);\r\n    }\r\n  }, [policyData]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const handleSearchNext = () => {\r\n    dispatch(getClaimDetails());\r\n    if (confirm) {\r\n      handleAddClaim();\r\n    }\r\n    props.handleNext();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ClaimsPolicySearchView\r\n        {...props}\r\n        policyInformation={policyInformation}\r\n        handleAddClaim={handleAddClaim}\r\n        lossInformation={lossInformation}\r\n        catCodes={catCodes}\r\n        lossQualifiers={lossQualifiers}\r\n        policyData={policyData}\r\n        handleSearchNext={handleSearchNext}\r\n        confirm={confirm}\r\n        setConfirm={setConfirm}\r\n        hasPolicyRef={hasPolicyRef}\r\n        setCurrentContextActive={setCurrentContextActive}\r\n        currentContextActive={currentContextActive}\r\n        underWritingGroups={underWritingGroups}\r\n      />\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}