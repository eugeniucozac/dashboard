{"ast":null,"code":"import get from 'lodash/get';\nimport { authLogout, addLoader, removeLoader } from 'stores';\nimport * as utils from 'utils';\nexport var getClaimantNames = function getClaimantNames() {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/claims.actions.getClaimantNames'\n    };\n    var state = getState();\n    var policyRef = get(state, 'claims.policyData.policyNumber') || '';\n    dispatch(getClaimantNamesRequest());\n    dispatch(addLoader('getClaimantNames'));\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.claimService,\n      path: \"api/data/gui/policy/\".concat(policyRef, \"/claimant-names\")\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (data) {\n      dispatch(getClaimantNamesSuccess(data.data));\n      dispatch(removeLoader('getClaimantNames'));\n      return data.data;\n    }).catch(function (err) {\n      dispatch(getClaimantNamesFailure(err, defaultError));\n      dispatch(removeLoader('getClaimantNames'));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      return err;\n    });\n  };\n};\nexport var getClaimantNamesRequest = function getClaimantNamesRequest(data) {\n  return {\n    type: 'CLAIMS_CLAIMANT_NAMES_GET_REQUEST',\n    payload: data\n  };\n};\nexport var getClaimantNamesSuccess = function getClaimantNamesSuccess(data) {\n  return {\n    type: 'CLAIMS_CLAIMANT_NAMES_GET_SUCCESS',\n    payload: data\n  };\n};\nexport var getClaimantNamesFailure = function getClaimantNamesFailure(data) {\n  return {\n    type: 'CLAIMS_CLAIMANT_NAMES_GET_FAILURE',\n    payload: data\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.getClaimantNames.js"],"names":["get","authLogout","addLoader","removeLoader","utils","getClaimantNames","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","state","policyRef","getClaimantNamesRequest","api","token","accessToken","claimService","path","then","response","handleResponse","data","getClaimantNamesSuccess","catch","err","getClaimantNamesFailure","handleUnauthorized","type","payload"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,YAAhB;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,YAAhC,QAAoD,QAApD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,SAAM,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC5D;AAD4D,oBAEHA,QAAQ,EAFL;AAAA,QAE5CC,IAF4C,aAEpDC,IAFoD,CAE5CD,IAF4C;AAAA,QAElBE,QAFkB,aAEpCC,MAFoC,CAE1BC,IAF0B,CAElBF,QAFkB;;AAI5D,QAAMG,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE;AADa,KAArB;AAIA,QAAMC,KAAK,GAAGR,QAAQ,EAAtB;AACA,QAAMS,SAAS,GAAGhB,GAAG,CAACe,KAAD,EAAQ,gCAAR,CAAH,IAAgD,EAAlE;AAEAT,IAAAA,QAAQ,CAACW,uBAAuB,EAAxB,CAAR;AACAX,IAAAA,QAAQ,CAACJ,SAAS,CAAC,kBAAD,CAAV,CAAR;AAEA,WAAOE,KAAK,CAACc,GAAN,CACJlB,GADI,CACA;AACHmB,MAAAA,KAAK,EAAEX,IAAI,CAACY,WADT;AAEHV,MAAAA,QAAQ,EAAEA,QAAQ,CAACW,YAFhB;AAGHC,MAAAA,IAAI,gCAAyBN,SAAzB;AAHD,KADA,EAMJO,IANI,CAMC,UAACC,QAAD;AAAA,aAAcpB,KAAK,CAACc,GAAN,CAAUO,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAND,EAOJD,IAPI,CAOC,UAACG,IAAD,EAAU;AACdpB,MAAAA,QAAQ,CAACqB,uBAAuB,CAACD,IAAI,CAACA,IAAN,CAAxB,CAAR;AACApB,MAAAA,QAAQ,CAACH,YAAY,CAAC,kBAAD,CAAb,CAAR;AACA,aAAOuB,IAAI,CAACA,IAAZ;AACD,KAXI,EAYJE,KAZI,CAYE,UAACC,GAAD,EAAS;AACdvB,MAAAA,QAAQ,CAACwB,uBAAuB,CAACD,GAAD,EAAMhB,YAAN,CAAxB,CAAR;AACAP,MAAAA,QAAQ,CAACH,YAAY,CAAC,kBAAD,CAAb,CAAR;AACAC,MAAAA,KAAK,CAACc,GAAN,CAAUa,kBAAV,CAA6BF,GAA7B,EAAkCvB,QAAlC,EAA4CL,UAA5C;AACA,aAAO4B,GAAP;AACD,KAjBI,CAAP;AAkBD,GAhC+B;AAAA,CAAzB;AAkCP,OAAO,IAAMZ,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACS,IAAD,EAAU;AAC/C,SAAO;AACLM,IAAAA,IAAI,EAAE,mCADD;AAELC,IAAAA,OAAO,EAAEP;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACD,IAAD,EAAU;AAC/C,SAAO;AACLM,IAAAA,IAAI,EAAE,mCADD;AAELC,IAAAA,OAAO,EAAEP;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMI,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACJ,IAAD,EAAU;AAC/C,SAAO;AACLM,IAAAA,IAAI,EAAE,mCADD;AAELC,IAAAA,OAAO,EAAEP;AAFJ,GAAP;AAID,CALM","sourcesContent":["import get from 'lodash/get';\r\nimport { authLogout, addLoader, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const getClaimantNames = () => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.getClaimantNames',\r\n  };\r\n\r\n  const state = getState();\r\n  const policyRef = get(state, 'claims.policyData.policyNumber') || '';\r\n\r\n  dispatch(getClaimantNamesRequest());\r\n  dispatch(addLoader('getClaimantNames'));\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.claimService,\r\n      path: `api/data/gui/policy/${policyRef}/claimant-names`,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((data) => {\r\n      dispatch(getClaimantNamesSuccess(data.data));\r\n      dispatch(removeLoader('getClaimantNames'));\r\n      return data.data;\r\n    })\r\n    .catch((err) => {\r\n      dispatch(getClaimantNamesFailure(err, defaultError));\r\n      dispatch(removeLoader('getClaimantNames'));\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const getClaimantNamesRequest = (data) => {\r\n  return {\r\n    type: 'CLAIMS_CLAIMANT_NAMES_GET_REQUEST',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const getClaimantNamesSuccess = (data) => {\r\n  return {\r\n    type: 'CLAIMS_CLAIMANT_NAMES_GET_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const getClaimantNamesFailure = (data) => {\r\n  return {\r\n    type: 'CLAIMS_CLAIMANT_NAMES_GET_FAILURE',\r\n    payload: data,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}