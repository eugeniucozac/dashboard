{"ast":null,"code":"import _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types'; // app\n\nimport config from 'config';\nimport * as utils from 'utils';\nuseSort.propTypes = {\n  cols: PropTypes.array.isRequired,\n  sort: PropTypes.shape({\n    by: PropTypes.string.isRequired,\n    type: PropTypes.oneOf(['date', 'numeric', 'boolean', 'lexical']).isRequired,\n    direction: PropTypes.oneOf(['asc', 'desc']).isRequired\n  }).isRequired,\n  handleSort: PropTypes.func\n};\nexport default function useSort() {\n  _s();\n\n  var cols = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var sort = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var handleSort = arguments.length > 2 ? arguments[2] : undefined;\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      stateSort = _useState2[0],\n      setStateSort = _useState2[1];\n\n  useEffect(function () {\n    setStateSort({\n      by: sort.by,\n      type: sort.type,\n      direction: sort.direction\n    });\n  }, [sort.by, sort.type, sort.direction]);\n\n  var updateSort = function updateSort(by, type, dir) {\n    return function (event) {\n      var defaultDir = dir || config.ui.sort.direction.default;\n      var toggleDir = stateSort.direction === 'asc' ? 'desc' : 'asc';\n      var currentDir = stateSort.by === by ? toggleDir : defaultDir;\n\n      if (utils.generic.isFunction(handleSort)) {\n        handleSort(by, currentDir, type);\n      }\n\n      setStateSort({\n        by: by,\n        type: type,\n        direction: currentDir\n      });\n    };\n  };\n\n  var getCols = function getCols(cols) {\n    return cols.map(function (col) {\n      if (col.sort) {\n        col.sort.by = col.id;\n        col.sort.handler = updateSort;\n      }\n\n      return col;\n    });\n  };\n\n  return {\n    cols: getCols(cols),\n    sort: stateSort\n  };\n}\n\n_s(useSort, \"HFA8AqWpROkC4d4t7W9e5qQd59c=\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/hooks/useSort/useSort.js"],"names":["useState","useEffect","PropTypes","config","utils","useSort","propTypes","cols","array","isRequired","sort","shape","by","string","type","oneOf","direction","handleSort","func","stateSort","setStateSort","updateSort","dir","event","defaultDir","ui","default","toggleDir","currentDir","generic","isFunction","getCols","map","col","id","handler"],"mappings":";;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEAC,OAAO,CAACC,SAAR,GAAoB;AAClBC,EAAAA,IAAI,EAAEL,SAAS,CAACM,KAAV,CAAgBC,UADJ;AAElBC,EAAAA,IAAI,EAAER,SAAS,CAACS,KAAV,CAAgB;AACpBC,IAAAA,EAAE,EAAEV,SAAS,CAACW,MAAV,CAAiBJ,UADD;AAEpBK,IAAAA,IAAI,EAAEZ,SAAS,CAACa,KAAV,CAAgB,CAAC,MAAD,EAAS,SAAT,EAAoB,SAApB,EAA+B,SAA/B,CAAhB,EAA2DN,UAF7C;AAGpBO,IAAAA,SAAS,EAAEd,SAAS,CAACa,KAAV,CAAgB,CAAC,KAAD,EAAQ,MAAR,CAAhB,EAAiCN;AAHxB,GAAhB,EAIHA,UANe;AAOlBQ,EAAAA,UAAU,EAAEf,SAAS,CAACgB;AAPJ,CAApB;AAUA,eAAe,SAASb,OAAT,GAAmD;AAAA;;AAAA,MAAlCE,IAAkC,uEAA3B,EAA2B;AAAA,MAAvBG,IAAuB,uEAAhB,EAAgB;AAAA,MAAZO,UAAY;;AAAA,kBAC9BjB,QAAQ,CAAC,EAAD,CADsB;AAAA;AAAA,MACzDmB,SADyD;AAAA,MAC9CC,YAD8C;;AAGhEnB,EAAAA,SAAS,CAAC,YAAM;AACdmB,IAAAA,YAAY,CAAC;AACXR,MAAAA,EAAE,EAAEF,IAAI,CAACE,EADE;AAEXE,MAAAA,IAAI,EAAEJ,IAAI,CAACI,IAFA;AAGXE,MAAAA,SAAS,EAAEN,IAAI,CAACM;AAHL,KAAD,CAAZ;AAKD,GANQ,EAMN,CAACN,IAAI,CAACE,EAAN,EAAUF,IAAI,CAACI,IAAf,EAAqBJ,IAAI,CAACM,SAA1B,CANM,CAAT;;AAQA,MAAMK,UAAU,GAAG,SAAbA,UAAa,CAACT,EAAD,EAAKE,IAAL,EAAWQ,GAAX;AAAA,WAAmB,UAACC,KAAD,EAAW;AAC/C,UAAMC,UAAU,GAAGF,GAAG,IAAInB,MAAM,CAACsB,EAAP,CAAUf,IAAV,CAAeM,SAAf,CAAyBU,OAAnD;AACA,UAAMC,SAAS,GAAGR,SAAS,CAACH,SAAV,KAAwB,KAAxB,GAAgC,MAAhC,GAAyC,KAA3D;AACA,UAAMY,UAAU,GAAGT,SAAS,CAACP,EAAV,KAAiBA,EAAjB,GAAsBe,SAAtB,GAAkCH,UAArD;;AAEA,UAAIpB,KAAK,CAACyB,OAAN,CAAcC,UAAd,CAAyBb,UAAzB,CAAJ,EAA0C;AACxCA,QAAAA,UAAU,CAACL,EAAD,EAAKgB,UAAL,EAAiBd,IAAjB,CAAV;AACD;;AAEDM,MAAAA,YAAY,CAAC;AACXR,QAAAA,EAAE,EAAFA,EADW;AAEXE,QAAAA,IAAI,EAAJA,IAFW;AAGXE,QAAAA,SAAS,EAAEY;AAHA,OAAD,CAAZ;AAKD,KAdkB;AAAA,GAAnB;;AAgBA,MAAMG,OAAO,GAAG,SAAVA,OAAU,CAACxB,IAAD,EAAU;AACxB,WAAOA,IAAI,CAACyB,GAAL,CAAS,UAACC,GAAD,EAAS;AACvB,UAAIA,GAAG,CAACvB,IAAR,EAAc;AACZuB,QAAAA,GAAG,CAACvB,IAAJ,CAASE,EAAT,GAAcqB,GAAG,CAACC,EAAlB;AACAD,QAAAA,GAAG,CAACvB,IAAJ,CAASyB,OAAT,GAAmBd,UAAnB;AACD;;AAED,aAAOY,GAAP;AACD,KAPM,CAAP;AAQD,GATD;;AAWA,SAAO;AACL1B,IAAAA,IAAI,EAAEwB,OAAO,CAACxB,IAAD,CADR;AAELG,IAAAA,IAAI,EAAES;AAFD,GAAP;AAID;;GA1CuBd,O","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// app\r\nimport config from 'config';\r\nimport * as utils from 'utils';\r\n\r\nuseSort.propTypes = {\r\n  cols: PropTypes.array.isRequired,\r\n  sort: PropTypes.shape({\r\n    by: PropTypes.string.isRequired,\r\n    type: PropTypes.oneOf(['date', 'numeric', 'boolean', 'lexical']).isRequired,\r\n    direction: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  }).isRequired,\r\n  handleSort: PropTypes.func,\r\n};\r\n\r\nexport default function useSort(cols = [], sort = {}, handleSort) {\r\n  const [stateSort, setStateSort] = useState({});\r\n\r\n  useEffect(() => {\r\n    setStateSort({\r\n      by: sort.by,\r\n      type: sort.type,\r\n      direction: sort.direction,\r\n    });\r\n  }, [sort.by, sort.type, sort.direction]);\r\n\r\n  const updateSort = (by, type, dir) => (event) => {\r\n    const defaultDir = dir || config.ui.sort.direction.default;\r\n    const toggleDir = stateSort.direction === 'asc' ? 'desc' : 'asc';\r\n    const currentDir = stateSort.by === by ? toggleDir : defaultDir;\r\n\r\n    if (utils.generic.isFunction(handleSort)) {\r\n      handleSort(by, currentDir, type);\r\n    }\r\n\r\n    setStateSort({\r\n      by,\r\n      type,\r\n      direction: currentDir,\r\n    });\r\n  };\r\n\r\n  const getCols = (cols) => {\r\n    return cols.map((col) => {\r\n      if (col.sort) {\r\n        col.sort.by = col.id;\r\n        col.sort.handler = updateSort;\r\n      }\r\n\r\n      return col;\r\n    });\r\n  };\r\n\r\n  return {\r\n    cols: getCols(cols),\r\n    sort: stateSort,\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}