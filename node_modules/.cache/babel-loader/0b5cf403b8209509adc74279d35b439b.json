{"ast":null,"code":"import _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ClaimSidebarDocument\\\\ClaimSidebarDocument.view.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router'; // app\n\nimport styles from './ClaimSidebarDocument.styles';\nimport { Link, FormFileDrop } from 'components';\nimport * as utils from 'utils';\nimport { getUploadedFiles, setDmsContext, showModal, uploadFiles } from 'stores';\nimport * as constants from 'consts';\nimport config from 'config'; // mui\n\nimport { makeStyles, Grid } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nClaimSidebarDocumentView.propTypes = {\n  claim: PropTypes.object.isRequired\n};\nexport function ClaimSidebarDocumentView(_ref) {\n  _s();\n\n  var claim = _ref.claim;\n  var classes = makeStyles(styles, {\n    name: 'ClaimSidebarDocument'\n  })();\n  var dispatch = useDispatch();\n  var history = useHistory();\n  var uploadedFiles = useSelector(getUploadedFiles); // TODO -move this to utils file\n\n  var getFileKey = function getFileKey(file) {\n    return \"\".concat(file === null || file === void 0 ? void 0 : file.name, \"-\").concat(file === null || file === void 0 ? void 0 : file.size, \"-\").concat(file === null || file === void 0 ? void 0 : file.lastModified);\n  }; // consider moving this to a global utils file\n\n\n  var getUniqueFiles = function getUniqueFiles(files) {\n    return files === null || files === void 0 ? void 0 : files.reduce(function (acc, cur) {\n      var isDuplicate = utils.generic.isValidArray(uploadedFiles, true) && (uploadedFiles === null || uploadedFiles === void 0 ? void 0 : uploadedFiles.find(function (f) {\n        return utils.generic.isValidObject(f.file, true) && utils.generic.isValidObject(cur, true) ? getFileKey(f.file) === getFileKey(cur) : false;\n      }));\n      return isDuplicate ? acc : [].concat(_toConsumableArray(acc), [cur]);\n    }, []).map(function (f) {\n      return {\n        file: f,\n        name: f.name,\n        type: null\n      };\n    });\n  };\n\n  var uploadModal = function uploadModal() {\n    return function (files) {\n      // ToDo - this is temp. To be removed along with this function when custom hook is imported\n      dispatch(setDmsContext(constants.DMS_CONTEXT_CLAIM));\n      dispatch(showModal({\n        component: 'DMS_UPLOAD',\n        props: {\n          fullWidth: true,\n          title: utils.string.t('dms.upload.modalItems.uploadDocuments'),\n          maxWidth: 'xl',\n          componentProps: {\n            confirmLabel: utils.string.t('app.ok'),\n            cancelLabel: utils.string.t('app.goBack'),\n            confirmMessage: utils.string.t('processingInstructions.documentsWillNotBeSaved'),\n            buttonColors: {\n              confirm: 'secondary',\n              cancel: 'primary'\n            },\n            documentTypeKey: constants.DMS_DOCUMENT_TYPE_SECTION_KEYS.type.claims\n          }\n        }\n      }));\n      var uniqueFiles = getUniqueFiles(files); // TODO - change action name to uploadFilesAction instead\n\n      dispatch(uploadFiles(uniqueFiles));\n    };\n  };\n\n  var viewAllDocs = function viewAllDocs() {\n    if (claim === null || claim === void 0 ? void 0 : claim.claimRef) {\n      history.push(\"\".concat(config.routes.claimsProcessing.claim, \"/\").concat(claim.claimRef, \"/claimRefDocs\"));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    \"justify-content\": \"flex-end\",\n    spacing: 2,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      \"justify-content\": \"flex-end\",\n      className: classes.viewDocs,\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        text: utils.string.t('app.viewalldocuments'),\n        color: \"secondary\",\n        handleClick: function handleClick() {\n          return viewAllDocs();\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsxDEV(FormFileDrop, {\n        name: \"file\",\n        attachedFiles: \"\",\n        showUploadPreview: false,\n        componentProps: {\n          multiple: true\n        },\n        dragLabel: utils.string.t('dms.upload.modalItems.dragDrop'),\n        onChange: uploadModal()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ClaimSidebarDocumentView, \"41iZ7k4W45mE6AzSHPY75gOYxTU=\", false, function () {\n  return [useDispatch, useHistory, useSelector];\n});\n\n_c = ClaimSidebarDocumentView;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimSidebarDocumentView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ClaimSidebarDocument/ClaimSidebarDocument.view.js"],"names":["React","PropTypes","useSelector","useDispatch","useHistory","styles","Link","FormFileDrop","utils","getUploadedFiles","setDmsContext","showModal","uploadFiles","constants","config","makeStyles","Grid","ClaimSidebarDocumentView","propTypes","claim","object","isRequired","classes","name","dispatch","history","uploadedFiles","getFileKey","file","size","lastModified","getUniqueFiles","files","reduce","acc","cur","isDuplicate","generic","isValidArray","find","f","isValidObject","map","type","uploadModal","DMS_CONTEXT_CLAIM","component","props","fullWidth","title","string","t","maxWidth","componentProps","confirmLabel","cancelLabel","confirmMessage","buttonColors","confirm","cancel","documentTypeKey","DMS_DOCUMENT_TYPE_SECTION_KEYS","claims","uniqueFiles","viewAllDocs","claimRef","push","routes","claimsProcessing","viewDocs","multiple"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\n\r\n// app\r\nimport styles from './ClaimSidebarDocument.styles';\r\nimport { Link, FormFileDrop } from 'components';\r\nimport * as utils from 'utils';\r\nimport { getUploadedFiles, setDmsContext, showModal, uploadFiles } from 'stores';\r\nimport * as constants from 'consts';\r\nimport config from 'config';\r\n\r\n// mui\r\nimport { makeStyles, Grid } from '@material-ui/core';\r\n\r\nClaimSidebarDocumentView.propTypes = {\r\n  claim: PropTypes.object.isRequired,\r\n};\r\n\r\nexport function ClaimSidebarDocumentView({ claim }) {\r\n  const classes = makeStyles(styles, { name: 'ClaimSidebarDocument' })();\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const uploadedFiles = useSelector(getUploadedFiles);\r\n\r\n  // TODO -move this to utils file\r\n  const getFileKey = (file) => {\r\n    return `${file?.name}-${file?.size}-${file?.lastModified}`;\r\n  };\r\n\r\n  // consider moving this to a global utils file\r\n  const getUniqueFiles = (files) =>\r\n    files\r\n      ?.reduce((acc, cur) => {\r\n        const isDuplicate =\r\n          utils.generic.isValidArray(uploadedFiles, true) &&\r\n          uploadedFiles?.find((f) => {\r\n            return utils.generic.isValidObject(f.file, true) && utils.generic.isValidObject(cur, true)\r\n              ? getFileKey(f.file) === getFileKey(cur)\r\n              : false;\r\n          });\r\n\r\n        return isDuplicate ? acc : [...acc, cur];\r\n      }, [])\r\n      .map((f) => ({ file: f, name: f.name, type: null }));\r\n\r\n  const uploadModal = () => (files) => {\r\n    // ToDo - this is temp. To be removed along with this function when custom hook is imported\r\n    dispatch(setDmsContext(constants.DMS_CONTEXT_CLAIM));\r\n\r\n    dispatch(\r\n      showModal({\r\n        component: 'DMS_UPLOAD',\r\n        props: {\r\n          fullWidth: true,\r\n          title: utils.string.t('dms.upload.modalItems.uploadDocuments'),\r\n          maxWidth: 'xl',\r\n          componentProps: {\r\n            confirmLabel: utils.string.t('app.ok'),\r\n            cancelLabel: utils.string.t('app.goBack'),\r\n            confirmMessage: utils.string.t('processingInstructions.documentsWillNotBeSaved'),\r\n            buttonColors: { confirm: 'secondary', cancel: 'primary' },\r\n            documentTypeKey: constants.DMS_DOCUMENT_TYPE_SECTION_KEYS.type.claims,\r\n          },\r\n        },\r\n      })\r\n    );\r\n\r\n    const uniqueFiles = getUniqueFiles(files);\r\n    // TODO - change action name to uploadFilesAction instead\r\n    dispatch(uploadFiles(uniqueFiles));\r\n  };\r\n\r\n  const viewAllDocs = () => {\r\n    if (claim?.claimRef) {\r\n      history.push(`${config.routes.claimsProcessing.claim}/${claim.claimRef}/claimRefDocs`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid container justify-content=\"flex-end\" spacing={2}>\r\n      <Grid item xs={12} justify-content=\"flex-end\" className={classes.viewDocs}>\r\n        <Link text={utils.string.t('app.viewalldocuments')} color=\"secondary\" handleClick={() => viewAllDocs()} />\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <FormFileDrop\r\n          name=\"file\"\r\n          attachedFiles=\"\"\r\n          showUploadPreview={false}\r\n          componentProps={{\r\n            multiple: true,\r\n          }}\r\n          dragLabel={utils.string.t('dms.upload.modalItems.dragDrop')}\r\n          onChange={uploadModal()}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}