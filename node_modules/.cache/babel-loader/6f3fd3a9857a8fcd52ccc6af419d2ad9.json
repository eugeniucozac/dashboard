{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { addLoader, removeLoader, enqueueNotification, authLogout } from 'stores';\nimport * as utils from 'utils';\nexport var postEditAdHocTask = function postEditAdHocTask(adHocTaskData, taskId) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint,\n        adhocTask = _getState.claims.adhocTask;\n\n    var adHocTaskDetails = _objectSpread({}, adhocTask === null || adhocTask === void 0 ? void 0 : adhocTask.data);\n\n    var defaultError = {\n      file: 'stores/claims.actions.postEditAdHocTask'\n    };\n    dispatch(postEditAdHocTaskRequest({\n      adHocTaskData: adHocTaskData,\n      taskId: taskId\n    }));\n    dispatch(addLoader('postEditAdHocTask'));\n\n    if (!adHocTaskData || !taskId) {\n      dispatch(postEditAdHocTaskFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Missing requests params'\n      })));\n      dispatch(removeLoader('postEditAdHocTask'));\n      return;\n    }\n\n    return utils.api.put({\n      token: auth.accessToken,\n      endpoint: endpoint.bpmService,\n      path: \"workflow/process/update/task/\".concat(taskId, \"/adhoc\"),\n      data: adHocTaskData\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(postEditAdHocTaskSuccess(_objectSpread(_objectSpread({}, data), {}, {\n        taskDetails: adHocTaskDetails\n      })));\n      dispatch(enqueueNotification(utils.string.t('claims.processing.notification.editAdhocSuccess'), 'success'));\n      return data;\n    }).catch(function (error) {\n      dispatch(postEditAdHocTaskFailure(error, defaultError));\n      dispatch(enqueueNotification(utils.string.t('claims.processing.notification.editAdhocFailure'), 'error'));\n      utils.api.handleUnauthorized(error, dispatch, authLogout);\n      return error;\n    }).finally(function () {\n      dispatch(removeLoader('postEditAdHocTask'));\n    });\n  };\n};\nexport var postEditAdHocTaskRequest = function postEditAdHocTaskRequest(_ref) {\n  var adHocTaskData = _ref.adHocTaskData,\n      taskId = _ref.taskId;\n  return {\n    type: 'CLAIMS_EDIT_ADHOC_TASK_POST_REQUEST',\n    payload: {\n      adHocTaskData: adHocTaskData,\n      taskId: taskId\n    }\n  };\n};\nexport var postEditAdHocTaskSuccess = function postEditAdHocTaskSuccess(data) {\n  return {\n    type: 'CLAIMS_EDIT_ADHOC_TASK_POST_SUCCESS',\n    payload: data\n  };\n};\nexport var postEditAdHocTaskFailure = function postEditAdHocTaskFailure(error) {\n  return {\n    type: 'CLAIMS_EDIT_ADHOC_TASK_POST_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.postEditAdHocTask.js"],"names":["addLoader","removeLoader","enqueueNotification","authLogout","utils","postEditAdHocTask","adHocTaskData","taskId","dispatch","getState","auth","user","endpoint","config","vars","adhocTask","claims","adHocTaskDetails","data","defaultError","file","postEditAdHocTaskRequest","postEditAdHocTaskFailure","message","api","put","token","accessToken","bpmService","path","then","response","handleResponse","json","handleNewData","postEditAdHocTaskSuccess","taskDetails","string","t","catch","error","handleUnauthorized","finally","type","payload"],"mappings":"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","sourcesContent":["import { addLoader, removeLoader, enqueueNotification, authLogout } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const postEditAdHocTask = (adHocTaskData, taskId) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } },claims :{adhocTask}} = getState();\r\n\r\n  const adHocTaskDetails = { ...adhocTask?.data };\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.postEditAdHocTask',\r\n  };\r\n\r\n  dispatch(postEditAdHocTaskRequest({ adHocTaskData, taskId }));\r\n  dispatch(addLoader('postEditAdHocTask'));\r\n\r\n  if (!adHocTaskData || !taskId) {\r\n    dispatch(postEditAdHocTaskFailure({ ...defaultError, message: 'Missing requests params' }));\r\n    dispatch(removeLoader('postEditAdHocTask'));\r\n    return;\r\n  }\r\n\r\n  return utils.api\r\n    .put({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.bpmService,\r\n      path: `workflow/process/update/task/${taskId}/adhoc`,\r\n      data: adHocTaskData,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(postEditAdHocTaskSuccess({ ...data, taskDetails: adHocTaskDetails }));\r\n      dispatch(enqueueNotification(utils.string.t('claims.processing.notification.editAdhocSuccess'), 'success'));\r\n      return data;\r\n    })\r\n    .catch((error) => {\r\n      dispatch(postEditAdHocTaskFailure(error, defaultError));\r\n      dispatch(enqueueNotification(utils.string.t('claims.processing.notification.editAdhocFailure'), 'error'));\r\n      utils.api.handleUnauthorized(error, dispatch, authLogout);\r\n      return error;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('postEditAdHocTask'));\r\n    });\r\n};\r\n\r\nexport const postEditAdHocTaskRequest = ({ adHocTaskData, taskId }) => {\r\n  return {\r\n    type: 'CLAIMS_EDIT_ADHOC_TASK_POST_REQUEST',\r\n    payload: { adHocTaskData, taskId },\r\n  };\r\n};\r\n\r\nexport const postEditAdHocTaskSuccess = (data) => {\r\n  return {\r\n    type: 'CLAIMS_EDIT_ADHOC_TASK_POST_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const postEditAdHocTaskFailure = (error) => {\r\n  return {\r\n    type: 'CLAIMS_EDIT_ADHOC_TASK_POST_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}