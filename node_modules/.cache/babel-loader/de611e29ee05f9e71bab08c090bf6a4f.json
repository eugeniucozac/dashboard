{"ast":null,"code":"import _defineProperty from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\AdministrationUserGrid\\\\AdministrationUserGrid.view.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames'; //app\n\nimport styles from './AdministrationUserGrid.styles';\nimport { Overflow, Pagination, PopoverMenu, TableCell, TableHead, Warning, Translate, Button } from 'components';\nimport * as utils from 'utils';\nimport { useMedia, useSort } from 'hooks'; // mui\n\nimport { makeStyles, Table, TableBody, TableRow, Box } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nAdministrationUserGridView.propTypes = {\n  users: PropTypes.array.isRequired,\n  pagination: PropTypes.object.isRequired,\n  sort: PropTypes.object.isRequired,\n  handleChangePage: PropTypes.func.isRequired,\n  handleChangeRowsPerPage: PropTypes.func.isRequired,\n  handleSortColumn: PropTypes.func.isRequired,\n  popoverActions: PropTypes.array.isRequired,\n  refDataXbInstances: PropTypes.arrayOf(PropTypes.shape({\n    sourceID: PropTypes.number.isRequired,\n    sourceName: PropTypes.string.isRequired\n  })).isRequired\n};\nexport default function AdministrationUserGridView(_ref) {\n  _s();\n\n  var _this = this;\n\n  var users = _ref.users,\n      pagination = _ref.pagination,\n      sortObj = _ref.sort,\n      handleChangePage = _ref.handleChangePage,\n      handleChangeRowsPerPage = _ref.handleChangeRowsPerPage,\n      handleSortColumn = _ref.handleSortColumn,\n      popoverActions = _ref.popoverActions,\n      refDataXbInstances = _ref.refDataXbInstances;\n\n  var _useMedia = useMedia(),\n      mobile = _useMedia.mobile,\n      tablet = _useMedia.tablet,\n      desktop = _useMedia.desktop,\n      wide = _useMedia.wide,\n      wideUp = _useMedia.wideUp,\n      extraWide = _useMedia.extraWide;\n\n  var classes = makeStyles(styles, {\n    name: 'AdministrationUserGrid'\n  })({\n    wide: wideUp\n  });\n  var i18nPath = 'administration.users.table.cols';\n  var columns = [{\n    id: 'fullName',\n    label: utils.string.t(i18nPath + '.fullName'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    }\n  }, {\n    id: 'email',\n    label: utils.string.t(i18nPath + '.email'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    }\n  }, {\n    id: 'team',\n    label: utils.string.t(i18nPath + '.businessProcess')\n  }, {\n    id: 'entity',\n    label: utils.string.t(i18nPath + '.xbInstance')\n  }, {\n    id: 'departments',\n    label: utils.string.t(i18nPath + '.departments')\n  }, {\n    id: 'groups',\n    label: utils.string.t(i18nPath + '.groups')\n  }, {\n    id: 'role',\n    label: utils.string.t(i18nPath + '.role'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    }\n  }];\n\n  var _useSort = useSort(columns, sortObj, handleSortColumn),\n      cols = _useSort.cols,\n      sort = _useSort.sort;\n\n  var rowsPerPage = pagination.rowsPerPage,\n      page = pagination.page;\n  var departmentStrLength = mobile ? 40 : tablet ? 60 : desktop ? 90 : wide ? 120 : extraWide ? 180 : 150;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      expanded = _useState2[0],\n      setExpanded = _useState2[1];\n\n  var handleClickExpandCollapse = function handleClickExpandCollapse(id, labelText) {\n    return function () {\n      if (labelText === 'app.seeMore') {\n        setExpanded([].concat(_toConsumableArray(expanded), [id]));\n      } else {\n        setExpanded(_toConsumableArray(expanded === null || expanded === void 0 ? void 0 : expanded.filter(function (item) {\n          return item !== id;\n        })));\n      }\n    };\n  };\n\n  var fetchXbInstance = function fetchXbInstance(xbInstanceId) {\n    var _xbInstanceId$split;\n\n    var xbInstancesIds = xbInstanceId === null || xbInstanceId === void 0 ? void 0 : (_xbInstanceId$split = xbInstanceId.split(',')) === null || _xbInstanceId$split === void 0 ? void 0 : _xbInstanceId$split.map(function (id) {\n      return id.trim();\n    });\n    return xbInstancesIds === null || xbInstancesIds === void 0 ? void 0 : xbInstancesIds.map(function (id) {\n      var _refDataXbInstances$f;\n\n      return refDataXbInstances === null || refDataXbInstances === void 0 ? void 0 : (_refDataXbInstances$f = refDataXbInstances.find(function (xbInstance) {\n        var _xbInstance$sourceID;\n\n        return (xbInstance === null || xbInstance === void 0 ? void 0 : (_xbInstance$sourceID = xbInstance.sourceID) === null || _xbInstance$sourceID === void 0 ? void 0 : _xbInstance$sourceID.toString()) === (id === null || id === void 0 ? void 0 : id.toString());\n      })) === null || _refDataXbInstances$f === void 0 ? void 0 : _refDataXbInstances$f.sourceName;\n    }).join(', ');\n  };\n\n  var toggle_button = function toggle_button(userDtls, labelText) {\n    return /*#__PURE__*/_jsxDEV(Button, {\n      size: \"xsmall\",\n      variant: \"text\",\n      text: /*#__PURE__*/_jsxDEV(Translate, {\n        label: labelText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, _this),\n      onClick: handleClickExpandCollapse(userDtls.id, labelText),\n      nestedClasses: {\n        btn: classes.toggle,\n        label: classes.label\n      },\n      \"data-testid\": \"department-msg-\".concat(userDtls.id)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }, _this);\n  };\n\n  var departmenMsgTruncated = function departmenMsgTruncated(userDtls) {\n    var _userDtls$departments;\n\n    var isCollapsed = !expanded.includes(userDtls.id);\n    var isTruncated = (userDtls === null || userDtls === void 0 ? void 0 : (_userDtls$departments = userDtls.departments) === null || _userDtls$departments === void 0 ? void 0 : _userDtls$departments.length) > departmentStrLength;\n\n    if (isTruncated && isCollapsed) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [userDtls.departments.slice(0, departmentStrLength - 20).trim(), \"...\", toggle_button(userDtls, 'app.seeMore')]\n      }, void 0, true);\n    } else {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [userDtls.departments, isTruncated && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: toggle_button(userDtls, 'app.seeLess')\n        }, void 0, false)]\n      }, void 0, true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Overflow, {\n      children: [/*#__PURE__*/_jsxDEV(Table, {\n        size: \"small\",\n        \"data-testid\": \"users-grid\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          columns: cols,\n          sorting: sort\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          \"data-testid\": \"user-grid-body\",\n          children: users && (users.length > rowsPerPage ? users.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage) : users).map(function (user) {\n            return /*#__PURE__*/_jsxDEV(TableRow, {\n              hover: true,\n              \"data-testid\": \"user-\".concat(user.id),\n              className: classnames(classes.row, _defineProperty({}, classes.rowNew, Boolean(user.__new__))),\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                compact: true,\n                nowrap: true,\n                children: user.fullName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 21\n              }, _this), /*#__PURE__*/_jsxDEV(TableCell, {\n                compact: true,\n                nowrap: true,\n                children: user.email\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 21\n              }, _this), /*#__PURE__*/_jsxDEV(TableCell, {\n                compact: true,\n                children: user.businessProcesses\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 21\n              }, _this), /*#__PURE__*/_jsxDEV(TableCell, {\n                compact: true,\n                children: fetchXbInstance(user.xbInstanceIds)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 21\n              }, _this), /*#__PURE__*/_jsxDEV(TableCell, {\n                compact: true,\n                children: [\" \", departmenMsgTruncated(user), \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 21\n              }, _this), /*#__PURE__*/_jsxDEV(TableCell, {\n                compact: true,\n                children: user.groups\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 21\n              }, _this), /*#__PURE__*/_jsxDEV(TableCell, {\n                compact: true,\n                nowrap: true,\n                children: user.role\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 21\n              }, _this), /*#__PURE__*/_jsxDEV(TableCell, {\n                menu: true,\n                children: /*#__PURE__*/_jsxDEV(PopoverMenu, {\n                  id: \"user-grid-popover\",\n                  data: {\n                    user: user\n                  },\n                  items: popoverActions\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 136,\n                  columnNumber: 23\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 21\n              }, _this)]\n            }, user.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 19\n            }, _this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), (users === null || users === void 0 ? void 0 : users.length) === 0 && /*#__PURE__*/_jsxDEV(Box, {\n        p: 5,\n        children: /*#__PURE__*/_jsxDEV(Warning, {\n          text: utils.string.t('administration.users.gridDataEmptyWarning'),\n          type: \"info\",\n          align: \"center\",\n          size: \"large\",\n          icon: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), pagination && /*#__PURE__*/_jsxDEV(Pagination, {\n      page: pagination.page,\n      count: pagination.rowsTotal,\n      rowsPerPage: pagination.rowsPerPage,\n      onChangePage: handleChangePage,\n      onChangeRowsPerPage: handleChangeRowsPerPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(AdministrationUserGridView, \"I7BT16WAP+QIePOVV5FfUbcWD40=\", false, function () {\n  return [useMedia, useSort];\n});\n\n_c = AdministrationUserGridView;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdministrationUserGridView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/AdministrationUserGrid/AdministrationUserGrid.view.js"],"names":["React","useState","PropTypes","classnames","styles","Overflow","Pagination","PopoverMenu","TableCell","TableHead","Warning","Translate","Button","utils","useMedia","useSort","makeStyles","Table","TableBody","TableRow","Box","AdministrationUserGridView","propTypes","users","array","isRequired","pagination","object","sort","handleChangePage","func","handleChangeRowsPerPage","handleSortColumn","popoverActions","refDataXbInstances","arrayOf","shape","sourceID","number","sourceName","string","sortObj","mobile","tablet","desktop","wide","wideUp","extraWide","classes","name","i18nPath","columns","id","label","t","type","direction","cols","rowsPerPage","page","departmentStrLength","expanded","setExpanded","handleClickExpandCollapse","labelText","filter","item","fetchXbInstance","xbInstanceId","xbInstancesIds","split","map","trim","find","xbInstance","toString","join","toggle_button","userDtls","btn","toggle","departmenMsgTruncated","isCollapsed","includes","isTruncated","departments","length","slice","user","row","rowNew","Boolean","__new__","fullName","email","businessProcesses","xbInstanceIds","groups","role","rowsTotal"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames';\r\n\r\n//app\r\nimport styles from './AdministrationUserGrid.styles';\r\nimport { Overflow, Pagination, PopoverMenu, TableCell, TableHead, Warning, Translate, Button } from 'components';\r\nimport * as utils from 'utils';\r\nimport { useMedia, useSort } from 'hooks';\r\n\r\n// mui\r\nimport { makeStyles, Table, TableBody, TableRow, Box } from '@material-ui/core';\r\n\r\nAdministrationUserGridView.propTypes = {\r\n  users: PropTypes.array.isRequired,\r\n  pagination: PropTypes.object.isRequired,\r\n  sort: PropTypes.object.isRequired,\r\n  handleChangePage: PropTypes.func.isRequired,\r\n  handleChangeRowsPerPage: PropTypes.func.isRequired,\r\n  handleSortColumn: PropTypes.func.isRequired,\r\n  popoverActions: PropTypes.array.isRequired,\r\n  refDataXbInstances: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      sourceID: PropTypes.number.isRequired,\r\n      sourceName: PropTypes.string.isRequired,\r\n    })\r\n  ).isRequired,\r\n};\r\n\r\nexport default function AdministrationUserGridView({\r\n  users,\r\n  pagination,\r\n  sort: sortObj,\r\n  handleChangePage,\r\n  handleChangeRowsPerPage,\r\n  handleSortColumn,\r\n  popoverActions,\r\n  refDataXbInstances,\r\n}) {\r\n  const { mobile, tablet, desktop, wide, wideUp, extraWide } = useMedia();\r\n  const classes = makeStyles(styles, { name: 'AdministrationUserGrid' })({ wide: wideUp });\r\n  const i18nPath = 'administration.users.table.cols';\r\n  const columns = [\r\n    { id: 'fullName', label: utils.string.t(i18nPath + '.fullName'), sort: { type: 'lexical', direction: 'asc' } },\r\n    { id: 'email', label: utils.string.t(i18nPath + '.email'), sort: { type: 'lexical', direction: 'asc' } },\r\n    { id: 'team', label: utils.string.t(i18nPath + '.businessProcess') },\r\n    { id: 'entity', label: utils.string.t(i18nPath + '.xbInstance') },\r\n    { id: 'departments', label: utils.string.t(i18nPath + '.departments') },\r\n    { id: 'groups', label: utils.string.t(i18nPath + '.groups') },\r\n    { id: 'role', label: utils.string.t(i18nPath + '.role'), sort: { type: 'lexical', direction: 'asc' } },\r\n  ];\r\n\r\n  const { cols, sort } = useSort(columns, sortObj, handleSortColumn);\r\n  const { rowsPerPage, page } = pagination;\r\n\r\n  const departmentStrLength = mobile ? 40 : tablet ? 60 : desktop ? 90 : wide ? 120 : extraWide ? 180 : 150;\r\n\r\n  const [expanded, setExpanded] = useState([]);\r\n  const handleClickExpandCollapse = (id, labelText) => () => {\r\n    if (labelText === 'app.seeMore') {\r\n      setExpanded([...expanded, id]);\r\n    } else {\r\n      setExpanded([...expanded?.filter((item) => item !== id)]);\r\n    }\r\n  };\r\n\r\n  const fetchXbInstance = (xbInstanceId) => {\r\n    const xbInstancesIds = xbInstanceId?.split(',')?.map((id) => id.trim());\r\n    return xbInstancesIds\r\n      ?.map((id) => refDataXbInstances?.find((xbInstance) => xbInstance?.sourceID?.toString() === id?.toString())?.sourceName)\r\n      .join(', ');\r\n  };\r\n\r\n  const toggle_button = (userDtls, labelText) => (\r\n    <Button\r\n      size=\"xsmall\"\r\n      variant=\"text\"\r\n      text={<Translate label={labelText} />}\r\n      onClick={handleClickExpandCollapse(userDtls.id, labelText)}\r\n      nestedClasses={{ btn: classes.toggle, label: classes.label }}\r\n      data-testid={`department-msg-${userDtls.id}`}\r\n    />\r\n  );\r\n  const departmenMsgTruncated = (userDtls) => {\r\n    let isCollapsed = !expanded.includes(userDtls.id);\r\n    let isTruncated = userDtls?.departments?.length > departmentStrLength;\r\n    if (isTruncated && isCollapsed) {\r\n      return (\r\n        <>\r\n          {userDtls.departments.slice(0, departmentStrLength - 20).trim()}\r\n          ...\r\n          {toggle_button(userDtls, 'app.seeMore')}\r\n        </>\r\n      );\r\n    } else {\r\n      return (\r\n        <>\r\n          {userDtls.departments}\r\n          {isTruncated && <>{toggle_button(userDtls, 'app.seeLess')}</>}\r\n        </>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Overflow>\r\n        <Table size=\"small\" data-testid=\"users-grid\">\r\n          <TableHead columns={cols} sorting={sort}></TableHead>\r\n          <TableBody data-testid=\"user-grid-body\">\r\n            {users &&\r\n              (users.length > rowsPerPage ? users.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage) : users).map((user) => {\r\n                return (\r\n                  <TableRow\r\n                    key={user.id}\r\n                    hover\r\n                    data-testid={`user-${user.id}`}\r\n                    className={classnames(classes.row, {\r\n                      [classes.rowNew]: Boolean(user.__new__),\r\n                    })}\r\n                  >\r\n                    <TableCell compact nowrap>\r\n                      {user.fullName}\r\n                    </TableCell>\r\n                    <TableCell compact nowrap>\r\n                      {user.email}\r\n                    </TableCell>\r\n                    <TableCell compact>{user.businessProcesses}</TableCell>\r\n                    <TableCell compact>{fetchXbInstance(user.xbInstanceIds)}</TableCell>\r\n                    <TableCell compact> {departmenMsgTruncated(user)} </TableCell>\r\n                    <TableCell compact>{user.groups}</TableCell>\r\n                    <TableCell compact nowrap>\r\n                      {user.role}\r\n                    </TableCell>\r\n                    <TableCell menu>\r\n                      <PopoverMenu id=\"user-grid-popover\" data={{ user }} items={popoverActions} />\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n          </TableBody>\r\n        </Table>\r\n        {users?.length === 0 && (\r\n          <Box p={5}>\r\n            <Warning text={utils.string.t('administration.users.gridDataEmptyWarning')} type=\"info\" align=\"center\" size=\"large\" icon />\r\n          </Box>\r\n        )}\r\n      </Overflow>\r\n\r\n      {pagination && (\r\n        <Pagination\r\n          page={pagination.page}\r\n          count={pagination.rowsTotal}\r\n          rowsPerPage={pagination.rowsPerPage}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}