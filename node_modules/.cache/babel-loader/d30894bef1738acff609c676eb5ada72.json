{"ast":null,"code":"var _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\DmsAttachDocumentsTable\\\\DmsAttachDocumentsTable.view.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types'; // app\n\nimport * as utils from 'utils';\nimport { Avatar, PopoverMenu, Overflow, TableHead, Warning } from 'components';\nimport config from 'config';\nimport { useMedia } from 'hooks';\nimport styles from './DmsAttachDocumentsTable.styles'; // mui\n\nimport { Box, makeStyles, Table, TableBody, TableRow, TableCell, Typography } from '@material-ui/core';\nimport InsertDriveFileIcon from '@material-ui/icons/InsertDriveFile';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nDmsAttachDocumentsTableView.propTypes = {\n  columnsArray: PropTypes.array,\n  documentList: PropTypes.array,\n  popoverActions: PropTypes.array,\n  handlers: PropTypes.shape({\n    getDocClassification: PropTypes.func\n  })\n};\nexport function DmsAttachDocumentsTableView(_ref) {\n  _s();\n\n  var _this = this;\n\n  var columnsArray = _ref.columnsArray,\n      documentList = _ref.documentList,\n      popoverActions = _ref.popoverActions,\n      handlers = _ref.handlers;\n  var media = useMedia();\n  var classes = makeStyles(styles, {\n    name: 'DmsAttachDocumentsTable'\n  })({\n    isMobile: media.mobile\n  });\n  return /*#__PURE__*/_jsxDEV(Box, {\n    mt: 2,\n    className: classes.tableContainer,\n    children: /*#__PURE__*/_jsxDEV(Overflow, {\n      children: [/*#__PURE__*/_jsxDEV(Table, {\n        size: \"small\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          columns: columnsArray\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: documentList === null || documentList === void 0 ? void 0 : documentList.map(function (doc, index) {\n            var _doc$srcApplication;\n\n            return /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                children: [doc === null || doc === void 0 ? void 0 : doc.documentName, Boolean(Number(doc === null || doc === void 0 ? void 0 : doc.isUploadedOnGxb)) && /*#__PURE__*/_jsxDEV(Box, {\n                  display: 'flex',\n                  alignItems: 'center',\n                  children: [/*#__PURE__*/_jsxDEV(Avatar, {\n                    size: 20,\n                    border: false,\n                    icon: InsertDriveFileIcon\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 40,\n                    columnNumber: 25\n                  }, _this), /*#__PURE__*/_jsxDEV(Typography, {\n                    children: utils.string.t('dms.view.gxb')\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 41,\n                    columnNumber: 25\n                  }, _this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 39,\n                  columnNumber: 23\n                }, _this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 36,\n                columnNumber: 19\n              }, _this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: doc === null || doc === void 0 ? void 0 : (_doc$srcApplication = doc.srcApplication) === null || _doc$srcApplication === void 0 ? void 0 : _doc$srcApplication.toUpperCase()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 45,\n                columnNumber: 19\n              }, _this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: doc === null || doc === void 0 ? void 0 : doc.documentTypeDescription\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 47,\n                columnNumber: 19\n              }, _this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: handlers.getDocClassification(doc === null || doc === void 0 ? void 0 : doc.docClassification)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 48,\n                columnNumber: 19\n              }, _this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: utils.string.t('format.date', {\n                  value: {\n                    date: doc === null || doc === void 0 ? void 0 : doc.updatedDate,\n                    format: config.ui.format.date.text\n                  }\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 19\n              }, _this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: doc === null || doc === void 0 ? void 0 : doc.createdByName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 19\n              }, _this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: utils.string.t('format.date', {\n                  value: {\n                    date: doc === null || doc === void 0 ? void 0 : doc.createdDate,\n                    format: config.ui.format.date.text\n                  }\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 54,\n                columnNumber: 19\n              }, _this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: /*#__PURE__*/_jsxDEV(PopoverMenu, {\n                  id: \"view-menu-list\",\n                  items: popoverActions,\n                  data: {\n                    index: index\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 59,\n                  columnNumber: 21\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 19\n              }, _this)]\n            }, doc === null || doc === void 0 ? void 0 : doc.documentName, true, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 17\n            }, _this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), utils.generic.isInvalidOrEmptyArray(documentList) && /*#__PURE__*/_jsxDEV(Box, {\n        p: 5,\n        children: /*#__PURE__*/_jsxDEV(Warning, {\n          text: utils.string.t('dms.view.gridDataEmptyWarning'),\n          type: \"info\",\n          align: \"center\",\n          size: \"large\",\n          icon: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DmsAttachDocumentsTableView, \"Inu6KbwmgyiVqUeOTSx0E+dAczw=\", false, function () {\n  return [useMedia];\n});\n\n_c = DmsAttachDocumentsTableView;\n\nvar _c;\n\n$RefreshReg$(_c, \"DmsAttachDocumentsTableView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/DmsAttachDocumentsTable/DmsAttachDocumentsTable.view.js"],"names":["PropTypes","utils","Avatar","PopoverMenu","Overflow","TableHead","Warning","config","useMedia","styles","Box","makeStyles","Table","TableBody","TableRow","TableCell","Typography","InsertDriveFileIcon","DmsAttachDocumentsTableView","propTypes","columnsArray","array","documentList","popoverActions","handlers","shape","getDocClassification","func","media","classes","name","isMobile","mobile","tableContainer","map","doc","index","documentName","Boolean","Number","isUploadedOnGxb","string","t","srcApplication","toUpperCase","documentTypeDescription","docClassification","value","date","updatedDate","format","ui","text","createdByName","createdDate","generic","isInvalidOrEmptyArray"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\n// app\r\nimport * as utils from 'utils';\r\nimport { Avatar, PopoverMenu, Overflow, TableHead, Warning } from 'components';\r\nimport config from 'config';\r\nimport { useMedia } from 'hooks';\r\nimport styles from './DmsAttachDocumentsTable.styles';\r\n\r\n// mui\r\nimport { Box, makeStyles, Table, TableBody, TableRow, TableCell, Typography } from '@material-ui/core';\r\nimport InsertDriveFileIcon from '@material-ui/icons/InsertDriveFile';\r\n\r\nDmsAttachDocumentsTableView.propTypes = {\r\n  columnsArray: PropTypes.array,\r\n  documentList: PropTypes.array,\r\n  popoverActions: PropTypes.array,\r\n  handlers: PropTypes.shape({\r\n    getDocClassification: PropTypes.func,\r\n  })\r\n};\r\n\r\nexport function DmsAttachDocumentsTableView({ columnsArray, documentList, popoverActions, handlers }) {\r\n  const media = useMedia();\r\n  const classes = makeStyles(styles, { name: 'DmsAttachDocumentsTable' })({ isMobile: media.mobile });\r\n\r\n  return (\r\n    <Box mt={2} className={classes.tableContainer}>\r\n      <Overflow>\r\n        <Table size=\"small\">\r\n          <TableHead columns={columnsArray} />\r\n          <TableBody>\r\n            {documentList?.map((doc, index) => {\r\n              return (\r\n                <TableRow key={doc?.documentName}>\r\n                  <TableCell>\r\n                    {doc?.documentName}\r\n                    {Boolean(Number(doc?.isUploadedOnGxb)) && (\r\n                      <Box display={'flex'} alignItems={'center'}>\r\n                        <Avatar size={20} border={false} icon={InsertDriveFileIcon} />\r\n                        <Typography>{utils.string.t('dms.view.gxb')}</Typography>\r\n                      </Box>\r\n                    )}\r\n                  </TableCell>\r\n                  <TableCell>{doc?.srcApplication?.toUpperCase()}</TableCell>\r\n\r\n                  <TableCell>{doc?.documentTypeDescription}</TableCell>\r\n                  <TableCell>{handlers.getDocClassification(doc?.docClassification)}</TableCell>\r\n                  <TableCell>\r\n                    {utils.string.t('format.date', { value: { date: doc?.updatedDate, format: config.ui.format.date.text } })}\r\n                  </TableCell>\r\n                  <TableCell>{doc?.createdByName}</TableCell>\r\n\r\n                  <TableCell>\r\n                    {utils.string.t('format.date', { value: { date: doc?.createdDate, format: config.ui.format.date.text } })}\r\n                  </TableCell>\r\n\r\n                  <TableCell>\r\n                    <PopoverMenu id=\"view-menu-list\" items={popoverActions} data={{ index }} />\r\n                  </TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </TableBody>\r\n        </Table>\r\n        {utils.generic.isInvalidOrEmptyArray(documentList) && (\r\n          <Box p={5}>\r\n            <Warning text={utils.string.t('dms.view.gridDataEmptyWarning')} type=\"info\" align=\"center\" size=\"large\" icon />\r\n          </Box>\r\n        )}\r\n      </Overflow>\r\n    </Box>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}