{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\pages\\\\ClaimsNewLoss\\\\ClaimsNewLoss.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useLocation } from 'react-router';\nimport { Helmet } from 'react-helmet'; // app\n\nimport { showModal, selectClaimsStepper, selectCatCodes, selectClaimsStatuses, selectPriorities, selectLossQualifiers, selectSettlementCurrency, selectReferralResponse, getCatCodes, getStatuses, getPriorityLevels, getLossQualifiers, getSettlementCurrency, getReferralResponse, submitClaimDetailsInformation, resetClaimsPolicies, resetLinkPolicies, resetClaimsDMSDocumentDetails, resetLossPolicyClaimData, resetSelectedLossItem, resetWidgetClaimsMetadata } from 'stores';\nimport { CustomizedDialog, DrawerComponent } from 'components';\nimport { ClaimsRegisterNewLoss } from 'forms';\nimport * as utils from 'utils';\nimport config from 'config';\nimport { DmsFnolWidget } from 'modules';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ClaimsNewLoss() {\n  _s();\n\n  var _location$state, _location$state$loss, _location$state2, _location$state$linkP, _location$state3;\n\n  var location = useLocation();\n  var dispatch = useDispatch();\n  var history = useHistory();\n  var rootRef = useRef(null);\n  var brand = useSelector(function (state) {\n    return state.ui.brand;\n  });\n  var catCodes = useSelector(selectCatCodes);\n  var priorities = useSelector(selectPriorities);\n  var lossQualifiers = useSelector(selectLossQualifiers);\n  var claimsStatuses = useSelector(selectClaimsStatuses);\n  var settlementCurrency = useSelector(selectSettlementCurrency);\n  var referralResponse = useSelector(selectReferralResponse);\n  var currentStep = useSelector(selectClaimsStepper);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      fnolModalOpen = _useState2[0],\n      setFnolModalOpen = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isAnyformDirty = _useState4[0],\n      checkDirtyStatus = _useState4[1];\n\n  var _useState5 = useState([{\n    id: 0,\n    form: utils.string.t('claims.modalStepperLabel.createLoss'),\n    formEditedStatus: false,\n    isSubmitted: false\n  }, {\n    id: 1,\n    form: utils.string.t('claims.modalStepperLabel.linkPolicies'),\n    formEditedStatus: false,\n    isSubmitted: false\n  }, {\n    id: 2,\n    form: utils.string.t('claims.modalStepperLabel.createClaim'),\n    formEditedStatus: false,\n    isSubmitted: false\n  }, {\n    id: 3,\n    form: utils.string.t('claims.modalStepperLabel.manageDocuments'),\n    formEditedStatus: false,\n    isSubmitted: false\n  }, {\n    id: 4,\n    form: utils.string.t('claims.modalStepperLabel.confirmation'),\n    formEditedStatus: false,\n    isSubmitted: false\n  }]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      forms = _useState6[0],\n      editFormStatus = _useState6[1];\n\n  var redirectUrl = (location === null || location === void 0 ? void 0 : (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.redirectUrl) || ''; // On click of Finish button\n\n  var launchFinishModal = function launchFinishModal() {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        title: utils.string.t('claims.modals.confirmClaimSubmission.title'),\n        fullWidth: true,\n        maxWidth: 'sm',\n        componentProps: {\n          confirmLabel: utils.string.t('app.yes'),\n          cancelLabel: utils.string.t('app.no'),\n          confirmMessage: utils.string.t('claims.modals.confirmClaimSubmission.content'),\n          submitHandler: function submitHandler() {\n            dispatch(submitClaimDetailsInformation({\n              successCallback: function successCallback(data) {\n                if (typeof data === 'string') {\n                  dispatch(resetLossPolicyClaimData());\n                  history.push(redirectUrl || config.routes.claimsFNOL.root);\n                }\n              }\n            }));\n          },\n          handleClose: function handleClose() {}\n        }\n      }\n    }));\n  };\n\n  var getAllReferentialData = function getAllReferentialData() {\n    if (utils.generic.isInvalidOrEmptyArray(catCodes)) {\n      dispatch(getCatCodes());\n    }\n\n    if (utils.generic.isInvalidOrEmptyArray(priorities)) {\n      dispatch(getPriorityLevels());\n    }\n\n    if (utils.generic.isInvalidOrEmptyArray(lossQualifiers)) {\n      dispatch(getLossQualifiers());\n    }\n\n    if (utils.generic.isInvalidOrEmptyArray(claimsStatuses)) {\n      dispatch(getStatuses());\n    }\n\n    if (utils.generic.isInvalidOrEmptyArray(settlementCurrency)) {\n      dispatch(getSettlementCurrency());\n    }\n\n    if (utils.generic.isInvalidOrEmptyArray(referralResponse)) {\n      dispatch(getReferralResponse());\n    }\n  };\n\n  useEffect(function () {\n    getAllReferentialData();\n    setFnolModalOpen(true);\n    return function () {\n      dispatch(resetLinkPolicies());\n      dispatch(resetClaimsDMSDocumentDetails());\n      dispatch(resetClaimsPolicies());\n      dispatch(resetLossPolicyClaimData());\n      dispatch(resetWidgetClaimsMetadata());\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var handleFnolModalClose = function handleFnolModalClose() {\n    if (isAnyformDirty) {\n      dispatch(showModal({\n        component: 'CONFIRM',\n        props: {\n          title: utils.string.t('status.alert'),\n          hint: utils.string.t('navigation.title'),\n          fullWidth: true,\n          maxWidth: 'xs',\n          componentProps: {\n            cancelLabel: utils.string.t('app.no'),\n            confirmLabel: utils.string.t('app.yes'),\n            submitHandler: function submitHandler() {\n              setFnolModalOpen(false);\n              dispatch(resetSelectedLossItem());\n              dispatch(resetLinkPolicies());\n              dispatch(resetClaimsPolicies());\n              history.push(redirectUrl || config.routes.claimsFNOL.root);\n            }\n          }\n        }\n      }));\n    }\n  };\n\n  var _findDirtyForm = function findDirtyForm(forms) {\n    editFormStatus(forms === null || forms === void 0 ? void 0 : forms.map(function (form) {\n      return _objectSpread({}, form);\n    }));\n    checkDirtyStatus(forms.some(function (form) {\n      return (form === null || form === void 0 ? void 0 : form.formEditedStatus) === true;\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"\".concat(utils.string.t('claims.actions.registerNewLoss'), \" - \").concat(utils.app.getAppName(brand))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CustomizedDialog, {\n      parentRef: rootRef,\n      dialogOpen: fnolModalOpen,\n      modalTitle: utils.string.t('claims.modalStepperLabel.title'),\n      redirectUrl: redirectUrl,\n      isDirty: isAnyformDirty,\n      handlers: {\n        handleDialogClose: handleFnolModalClose\n      },\n      children: /*#__PURE__*/_jsxDEV(ClaimsRegisterNewLoss, {\n        initialFormStatus: forms,\n        steps: forms.map(function (frm) {\n          return frm === null || frm === void 0 ? void 0 : frm.form;\n        }),\n        stepsForms: forms,\n        currentStep: currentStep,\n        launchFinishModal: launchFinishModal,\n        findDirtyForm: function findDirtyForm(forms) {\n          _findDirtyForm(forms);\n        },\n        lossProperties: (_location$state$loss = location === null || location === void 0 ? void 0 : (_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.loss) !== null && _location$state$loss !== void 0 ? _location$state$loss : {},\n        claimProperties: (_location$state$linkP = location === null || location === void 0 ? void 0 : (_location$state3 = location.state) === null || _location$state3 === void 0 ? void 0 : _location$state3.linkPolicy) !== null && _location$state$linkP !== void 0 ? _location$state$linkP : {}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), fnolModalOpen && /*#__PURE__*/_jsxDEV(DrawerComponent, {\n      isDrawerOpen: true,\n      children: /*#__PURE__*/_jsxDEV(DmsFnolWidget, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ClaimsNewLoss, \"sEU14lPDxGdlEuUvESq6/AQd2rE=\", false, function () {\n  return [useLocation, useDispatch, useHistory, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = ClaimsNewLoss;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimsNewLoss\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/pages/ClaimsNewLoss/ClaimsNewLoss.js"],"names":["React","useState","useEffect","useRef","useDispatch","useSelector","useHistory","useLocation","Helmet","showModal","selectClaimsStepper","selectCatCodes","selectClaimsStatuses","selectPriorities","selectLossQualifiers","selectSettlementCurrency","selectReferralResponse","getCatCodes","getStatuses","getPriorityLevels","getLossQualifiers","getSettlementCurrency","getReferralResponse","submitClaimDetailsInformation","resetClaimsPolicies","resetLinkPolicies","resetClaimsDMSDocumentDetails","resetLossPolicyClaimData","resetSelectedLossItem","resetWidgetClaimsMetadata","CustomizedDialog","DrawerComponent","ClaimsRegisterNewLoss","utils","config","DmsFnolWidget","ClaimsNewLoss","location","dispatch","history","rootRef","brand","state","ui","catCodes","priorities","lossQualifiers","claimsStatuses","settlementCurrency","referralResponse","currentStep","fnolModalOpen","setFnolModalOpen","isAnyformDirty","checkDirtyStatus","id","form","string","t","formEditedStatus","isSubmitted","forms","editFormStatus","redirectUrl","launchFinishModal","component","props","title","fullWidth","maxWidth","componentProps","confirmLabel","cancelLabel","confirmMessage","submitHandler","successCallback","data","push","routes","claimsFNOL","root","handleClose","getAllReferentialData","generic","isInvalidOrEmptyArray","handleFnolModalClose","hint","findDirtyForm","map","some","app","getAppName","handleDialogClose","frm","loss","linkPolicy"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory, useLocation } from 'react-router';\r\nimport { Helmet } from 'react-helmet';\r\n\r\n// app\r\nimport {\r\n  showModal,\r\n  selectClaimsStepper,\r\n  selectCatCodes,\r\n  selectClaimsStatuses,\r\n  selectPriorities,\r\n  selectLossQualifiers,\r\n  selectSettlementCurrency,\r\n  selectReferralResponse,\r\n  getCatCodes,\r\n  getStatuses,\r\n  getPriorityLevels,\r\n  getLossQualifiers,\r\n  getSettlementCurrency,\r\n  getReferralResponse,\r\n  submitClaimDetailsInformation,\r\n  resetClaimsPolicies,\r\n  resetLinkPolicies,\r\n  resetClaimsDMSDocumentDetails,\r\n  resetLossPolicyClaimData,\r\n  resetSelectedLossItem,\r\n  resetWidgetClaimsMetadata,\r\n} from 'stores';\r\nimport { CustomizedDialog, DrawerComponent } from 'components';\r\nimport { ClaimsRegisterNewLoss } from 'forms';\r\nimport * as utils from 'utils';\r\nimport config from 'config';\r\nimport { DmsFnolWidget } from 'modules';\r\n\r\nexport default function ClaimsNewLoss() {\r\n  const location = useLocation();\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const rootRef = useRef(null);\r\n\r\n  const brand = useSelector((state) => state.ui.brand);\r\n  const catCodes = useSelector(selectCatCodes);\r\n  const priorities = useSelector(selectPriorities);\r\n  const lossQualifiers = useSelector(selectLossQualifiers);\r\n  const claimsStatuses = useSelector(selectClaimsStatuses);\r\n  const settlementCurrency = useSelector(selectSettlementCurrency);\r\n  const referralResponse = useSelector(selectReferralResponse);\r\n  const currentStep = useSelector(selectClaimsStepper);\r\n\r\n  const [fnolModalOpen, setFnolModalOpen] = useState(false);\r\n  const [isAnyformDirty, checkDirtyStatus] = useState(false);\r\n\r\n  const [forms, editFormStatus] = useState([\r\n    { id: 0, form: utils.string.t('claims.modalStepperLabel.createLoss'), formEditedStatus: false, isSubmitted: false },\r\n    { id: 1, form: utils.string.t('claims.modalStepperLabel.linkPolicies'), formEditedStatus: false, isSubmitted: false },\r\n    { id: 2, form: utils.string.t('claims.modalStepperLabel.createClaim'), formEditedStatus: false, isSubmitted: false },\r\n    { id: 3, form: utils.string.t('claims.modalStepperLabel.manageDocuments'), formEditedStatus: false, isSubmitted: false },\r\n    { id: 4, form: utils.string.t('claims.modalStepperLabel.confirmation'), formEditedStatus: false, isSubmitted: false },\r\n  ]);\r\n\r\n  const redirectUrl = location?.state?.redirectUrl || '';\r\n\r\n  // On click of Finish button\r\n  const launchFinishModal = () => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          title: utils.string.t('claims.modals.confirmClaimSubmission.title'),\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          componentProps: {\r\n            confirmLabel: utils.string.t('app.yes'),\r\n            cancelLabel: utils.string.t('app.no'),\r\n            confirmMessage: utils.string.t('claims.modals.confirmClaimSubmission.content'),\r\n            submitHandler: () => {\r\n              dispatch(\r\n                submitClaimDetailsInformation({\r\n                  successCallback: (data) => {\r\n                    if (typeof data === 'string') {\r\n                      dispatch(resetLossPolicyClaimData());\r\n                      history.push(redirectUrl || config.routes.claimsFNOL.root);\r\n                    }\r\n                  },\r\n                })\r\n              );\r\n            },\r\n            handleClose: () => {},\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const getAllReferentialData = () => {\r\n    if (utils.generic.isInvalidOrEmptyArray(catCodes)) {\r\n      dispatch(getCatCodes());\r\n    }\r\n    if (utils.generic.isInvalidOrEmptyArray(priorities)) {\r\n      dispatch(getPriorityLevels());\r\n    }\r\n    if (utils.generic.isInvalidOrEmptyArray(lossQualifiers)) {\r\n      dispatch(getLossQualifiers());\r\n    }\r\n    if (utils.generic.isInvalidOrEmptyArray(claimsStatuses)) {\r\n      dispatch(getStatuses());\r\n    }\r\n    if (utils.generic.isInvalidOrEmptyArray(settlementCurrency)) {\r\n      dispatch(getSettlementCurrency());\r\n    }\r\n    if (utils.generic.isInvalidOrEmptyArray(referralResponse)) {\r\n      dispatch(getReferralResponse());\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getAllReferentialData();\r\n    setFnolModalOpen(true);\r\n    return () => {\r\n      dispatch(resetLinkPolicies());\r\n      dispatch(resetClaimsDMSDocumentDetails());\r\n      dispatch(resetClaimsPolicies())\r\n      dispatch(resetLossPolicyClaimData());\r\n      dispatch(resetWidgetClaimsMetadata());\r\n    };\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const handleFnolModalClose = () => {\r\n    if (isAnyformDirty) {\r\n      dispatch(\r\n        showModal({\r\n          component: 'CONFIRM',\r\n          props: {\r\n            title: utils.string.t('status.alert'),\r\n            hint: utils.string.t('navigation.title'),\r\n            fullWidth: true,\r\n            maxWidth: 'xs',\r\n            componentProps: {\r\n              cancelLabel: utils.string.t('app.no'),\r\n              confirmLabel: utils.string.t('app.yes'),\r\n              submitHandler: () => {\r\n                setFnolModalOpen(false);\r\n                dispatch(resetSelectedLossItem());\r\n                dispatch(resetLinkPolicies());\r\n                dispatch(resetClaimsPolicies());\r\n                history.push(redirectUrl || config.routes.claimsFNOL.root);\r\n              },\r\n            },\r\n          },\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const findDirtyForm = (forms) => {\r\n    editFormStatus(forms?.map((form) => ({ ...form })));\r\n    checkDirtyStatus(forms.some((form) => form?.formEditedStatus === true));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>{`${utils.string.t('claims.actions.registerNewLoss')} - ${utils.app.getAppName(brand)}`}</title>\r\n      </Helmet>\r\n      <CustomizedDialog\r\n        parentRef={rootRef}\r\n        dialogOpen={fnolModalOpen}\r\n        modalTitle={utils.string.t('claims.modalStepperLabel.title')}\r\n        redirectUrl={redirectUrl}\r\n        isDirty={isAnyformDirty}\r\n        handlers={{\r\n          handleDialogClose: handleFnolModalClose,\r\n        }}\r\n      >\r\n        <ClaimsRegisterNewLoss\r\n          initialFormStatus={forms}\r\n          steps={forms.map((frm) => frm?.form)}\r\n          stepsForms={forms}\r\n          currentStep={currentStep}\r\n          launchFinishModal={launchFinishModal}\r\n          findDirtyForm={(forms) => {\r\n            findDirtyForm(forms);\r\n          }}\r\n          lossProperties={location?.state?.loss ?? {}}\r\n          claimProperties={location?.state?.linkPolicy ?? {}}\r\n        />\r\n      </CustomizedDialog>\r\n      {fnolModalOpen && (\r\n        <DrawerComponent isDrawerOpen>\r\n          <DmsFnolWidget />\r\n        </DrawerComponent>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}