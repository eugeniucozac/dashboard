{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\components\\\\EmailManagementService\\\\EmailManagementService.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport isEmpty from 'lodash/isEmpty'; //app\n\nimport EmailManagementServiceView from './EmailManagementService.view';\nimport { getEmsInboxList, selectEmsInboxList, resetEmsInboxList, postEmail, postBureauInsurerDetails, selectUser, getEmsExistingDocuments, selectEmsExistingDocuments, viewDocumentsDownload } from 'stores';\nimport * as constants from 'consts';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nEmailManagementService.propTypes = {\n  accountDetails: PropTypes.shape({\n    sendEmailDocument: PropTypes.bool.isRequired,\n    underwriterAccountID: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    policyClientId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    documentSentType: PropTypes.string\n  }).isRequired,\n  accountLabel: PropTypes.string,\n  accountName: PropTypes.string.isRequired,\n  caseDetailsObject: PropTypes.object,\n  emailType: PropTypes.string.isRequired,\n  objectCode: PropTypes.string.isRequired,\n  objectId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  handlers: PropTypes.shape({\n    goBack: PropTypes.func\n  }).isRequired\n};\n\nfunction EmailManagementService(_ref) {\n  _s();\n\n  var accountDetails = _ref.accountDetails,\n      accountLabel = _ref.accountLabel,\n      accountName = _ref.accountName,\n      caseDetailsObject = _ref.caseDetailsObject,\n      emailType = _ref.emailType,\n      objectCode = _ref.objectCode,\n      objectId = _ref.objectId,\n      handlers = _ref.handlers;\n  var dispatch = useDispatch();\n  var user = useSelector(selectUser);\n  var emsInboxList = useSelector(selectEmsInboxList);\n  var emsExistingDocuments = useSelector(selectEmsExistingDocuments);\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedMail = _useState2[0],\n      setSelectedMail = _useState2[1];\n\n  var _useState3 = useState(!Boolean(accountDetails === null || accountDetails === void 0 ? void 0 : accountDetails.sendEmailDocument)),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isComposeEmail = _useState4[0],\n      setIsComposeEmail = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      forwardSubject = _useState6[0],\n      setForwardSubject = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      forwardMessage = _useState8[0],\n      setForwardMessage = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      forwardAttachments = _useState10[0],\n      setForwardAttachements = _useState10[1];\n\n  var policyRef = caseDetailsObject === null || caseDetailsObject === void 0 ? void 0 : caseDetailsObject.policyRef;\n  var instructionId = caseDetailsObject === null || caseDetailsObject === void 0 ? void 0 : caseDetailsObject.instructionId;\n  var isMiddleOffice = utils.generic.isValidArray(user.group, true) && user.group[0].code === constants.MIDDLE_OFFICE;\n  useEffect(function () {\n    dispatch(getEmsInboxList({\n      objectId: objectId,\n      objectCode: objectCode,\n      emailType: emailType\n    }));\n    dispatch(getEmsExistingDocuments({\n      referenceId: objectId,\n      sectionType: objectCode,\n      policyRef: policyRef,\n      instructionId: instructionId\n    })); // cleanup\n\n    return function () {\n      dispatch(resetEmsInboxList());\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    if (Boolean(accountDetails === null || accountDetails === void 0 ? void 0 : accountDetails.sendEmailDocument)) setSelectedMail(utils.generic.isValidArray(emsInboxList, true) ? emsInboxList[0] : {});\n  }, [emsInboxList]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var fields = [{\n    name: 'accountName',\n    type: 'text',\n    size: 'sm',\n    value: accountName || '',\n    muiComponentProps: {\n      disabled: true\n    }\n  }];\n\n  var sendEmail = function sendEmail(_ref2) {\n    var emailTo = _ref2.emailTo,\n        emailCc = _ref2.emailCc,\n        message = _ref2.message,\n        subject = _ref2.subject,\n        attachments = _ref2.attachments;\n    var params = {\n      emailTo: emailTo,\n      emailCc: emailCc,\n      message: message,\n      subject: subject,\n      objectId: objectId,\n      objectCode: objectCode,\n      emailType: emailType,\n      attachments: attachments\n    };\n    dispatch(postEmail(params)).then(function (data) {\n      var _data$status;\n\n      if ((data === null || data === void 0 ? void 0 : (_data$status = data.status) === null || _data$status === void 0 ? void 0 : _data$status.toLowerCase()) === constants.API_RESPONSE_OK.toLowerCase()) {\n        var _caseDetailsObject$ca;\n\n        dispatch(postBureauInsurerDetails([_objectSpread(_objectSpread(_objectSpread({\n          caseIncidentId: Number(caseDetailsObject === null || caseDetailsObject === void 0 ? void 0 : caseDetailsObject.caseId),\n          createdBy: user.id,\n          createdDate: utils.date.today(),\n          emailId: 1,\n          isActive: 1,\n          issueDocsType: emailType,\n          marketTypesId: null\n        }, emailType === constants.EMS_EMAIL_TYPE_CLIENT && {\n          policyClientId: accountDetails === null || accountDetails === void 0 ? void 0 : accountDetails.policyClientId,\n          documentSentType: accountDetails === null || accountDetails === void 0 ? void 0 : accountDetails.documentSentType,\n          emailTo: emailTo.split(';').map(function (email) {\n            return email.trim();\n          }).filter(function (v) {\n            return !isEmpty(v);\n          }),\n          emailCc: emailCc.split(';').map(function (email) {\n            return email.trim();\n          }).filter(function (v) {\n            return !isEmpty(v);\n          })\n        }), emailType === constants.EMS_EMAIL_TYPE_NON_BUREAU && {\n          policyUnderwriterId: accountDetails === null || accountDetails === void 0 ? void 0 : accountDetails.underwriterAccountID\n        }), {}, {\n          sentDate: utils.date.today(),\n          sourceId: caseDetailsObject === null || caseDetailsObject === void 0 ? void 0 : (_caseDetailsObject$ca = caseDetailsObject.caseTeamData) === null || _caseDetailsObject$ca === void 0 ? void 0 : _caseDetailsObject$ca.xbInstanceId,\n          updatedBy: user.id,\n          updatedDate: utils.date.today(),\n          workPackageRef: null\n        })])).then(function (data) {\n          var _data$status2;\n\n          if ((data === null || data === void 0 ? void 0 : (_data$status2 = data.status) === null || _data$status2 === void 0 ? void 0 : _data$status2.toLowerCase()) === constants.API_RESPONSE_OK.toLowerCase()) {\n            dispatch(getEmsInboxList({\n              objectId: objectId,\n              objectCode: objectCode,\n              emailType: emailType\n            })).then(function (data) {\n              var _data$status3;\n\n              if ((data === null || data === void 0 ? void 0 : (_data$status3 = data.status) === null || _data$status3 === void 0 ? void 0 : _data$status3.toLowerCase()) === constants.API_RESPONSE_OK.toLowerCase()) {\n                setIsComposeEmail(false);\n                setSelectedMail(utils.generic.isValidArray(data === null || data === void 0 ? void 0 : data.data, true) ? data === null || data === void 0 ? void 0 : data.data[0] : {});\n              }\n            });\n          }\n        });\n      }\n    });\n  };\n\n  var showMailBodyContent = function showMailBodyContent(id) {\n    setIsComposeEmail(false);\n    var filteredData = utils.generic.isValidArray(emsInboxList, true) && emsInboxList.filter(function (a) {\n      return a.id === id;\n    });\n    setSelectedMail(utils.generic.isValidArray(filteredData, true) ? filteredData[0] : {});\n  };\n\n  var goBack = function goBack() {\n    setIsComposeEmail(false);\n    handlers.goBack();\n  };\n\n  var forwardMail = function forwardMail(mailData) {\n    setIsComposeEmail(true);\n    setSelectedMail({});\n    setForwardSubject(\"FW: \".concat(mailData === null || mailData === void 0 ? void 0 : mailData.subject));\n    setForwardMessage(mailData === null || mailData === void 0 ? void 0 : mailData.text);\n    setForwardAttachements(mailData === null || mailData === void 0 ? void 0 : mailData.attachment);\n  };\n\n  var downloadDocument = function downloadDocument(doc) {\n    dispatch(viewDocumentsDownload(doc));\n  };\n\n  if (!(objectId && objectCode && emailType)) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(EmailManagementServiceView, {\n    accountLabel: accountLabel,\n    emsInboxList: emsInboxList,\n    emsExistingDocuments: emsExistingDocuments,\n    forwardAttachments: forwardAttachments,\n    forwardMessage: forwardMessage,\n    forwardSubject: forwardSubject,\n    fields: fields,\n    isComposeEmail: isComposeEmail,\n    isMiddleOffice: isMiddleOffice,\n    selectedMail: selectedMail,\n    handlers: {\n      forwardMail: forwardMail,\n      goBack: goBack,\n      sendEmail: sendEmail,\n      showMailBodyContent: showMailBodyContent,\n      downloadDocument: downloadDocument\n    },\n    caseDetailsObject: caseDetailsObject,\n    accountDetails: accountDetails,\n    accountName: accountName\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EmailManagementService, \"oeK+/itlKRBmVfXEuy3epc1tm+8=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = EmailManagementService;\nEmailManagementService.displayName = \"EmailManagementService\";\nEmailManagementService.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"EmailManagementService\",\n  \"props\": {\n    \"accountDetails\": {\n      \"type\": {\n        \"name\": \"shape\",\n        \"value\": {\n          \"sendEmailDocument\": {\n            \"name\": \"bool\",\n            \"required\": true\n          },\n          \"underwriterAccountID\": {\n            \"name\": \"union\",\n            \"value\": [{\n              \"name\": \"number\"\n            }, {\n              \"name\": \"string\"\n            }],\n            \"required\": false\n          },\n          \"policyClientId\": {\n            \"name\": \"union\",\n            \"value\": [{\n              \"name\": \"number\"\n            }, {\n              \"name\": \"string\"\n            }],\n            \"required\": false\n          },\n          \"documentSentType\": {\n            \"name\": \"string\",\n            \"required\": false\n          }\n        }\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"accountLabel\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"accountName\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"caseDetailsObject\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"emailType\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"objectCode\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"objectId\": {\n      \"type\": {\n        \"name\": \"union\",\n        \"value\": [{\n          \"name\": \"number\"\n        }, {\n          \"name\": \"string\"\n        }]\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"handlers\": {\n      \"type\": {\n        \"name\": \"shape\",\n        \"value\": {\n          \"goBack\": {\n            \"name\": \"func\",\n            \"required\": false\n          }\n        }\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\nexport default EmailManagementService;\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\components\\\\EmailManagementService\\\\EmailManagementService.js\"] = {\n    name: \"EmailManagementService\",\n    docgenInfo: EmailManagementService.__docgenInfo,\n    path: \"src\\\\components\\\\EmailManagementService\\\\EmailManagementService.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"EmailManagementService\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/EmailManagementService/EmailManagementService.js"],"names":["React","useState","useEffect","PropTypes","useDispatch","useSelector","isEmpty","EmailManagementServiceView","getEmsInboxList","selectEmsInboxList","resetEmsInboxList","postEmail","postBureauInsurerDetails","selectUser","getEmsExistingDocuments","selectEmsExistingDocuments","viewDocumentsDownload","constants","utils","EmailManagementService","propTypes","accountDetails","shape","sendEmailDocument","bool","isRequired","underwriterAccountID","oneOfType","number","string","policyClientId","documentSentType","accountLabel","accountName","caseDetailsObject","object","emailType","objectCode","objectId","handlers","goBack","func","dispatch","user","emsInboxList","emsExistingDocuments","selectedMail","setSelectedMail","Boolean","isComposeEmail","setIsComposeEmail","forwardSubject","setForwardSubject","forwardMessage","setForwardMessage","forwardAttachments","setForwardAttachements","policyRef","instructionId","isMiddleOffice","generic","isValidArray","group","code","MIDDLE_OFFICE","referenceId","sectionType","fields","name","type","size","value","muiComponentProps","disabled","sendEmail","emailTo","emailCc","message","subject","attachments","params","then","data","status","toLowerCase","API_RESPONSE_OK","caseIncidentId","Number","caseId","createdBy","id","createdDate","date","today","emailId","isActive","issueDocsType","marketTypesId","EMS_EMAIL_TYPE_CLIENT","split","map","email","trim","filter","v","EMS_EMAIL_TYPE_NON_BUREAU","policyUnderwriterId","sentDate","sourceId","caseTeamData","xbInstanceId","updatedBy","updatedDate","workPackageRef","showMailBodyContent","filteredData","a","forwardMail","mailData","text","attachment","downloadDocument","doc"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport isEmpty from 'lodash/isEmpty';\r\n\r\n//app\r\nimport EmailManagementServiceView from './EmailManagementService.view';\r\nimport {\r\n  getEmsInboxList,\r\n  selectEmsInboxList,\r\n  resetEmsInboxList,\r\n  postEmail,\r\n  postBureauInsurerDetails,\r\n  selectUser,\r\n  getEmsExistingDocuments,\r\n  selectEmsExistingDocuments,\r\n  viewDocumentsDownload,\r\n} from 'stores';\r\nimport * as constants from 'consts';\r\nimport * as utils from 'utils';\r\n\r\nEmailManagementService.propTypes = {\r\n  accountDetails: PropTypes.shape({\r\n    sendEmailDocument: PropTypes.bool.isRequired,\r\n    underwriterAccountID: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    policyClientId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    documentSentType: PropTypes.string,\r\n  }).isRequired,\r\n  accountLabel: PropTypes.string,\r\n  accountName: PropTypes.string.isRequired,\r\n  caseDetailsObject: PropTypes.object,\r\n  emailType: PropTypes.string.isRequired,\r\n  objectCode: PropTypes.string.isRequired,\r\n  objectId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\r\n  handlers: PropTypes.shape({\r\n    goBack: PropTypes.func,\r\n  }).isRequired,\r\n};\r\n\r\nfunction EmailManagementService({\r\n  accountDetails,\r\n  accountLabel,\r\n  accountName,\r\n  caseDetailsObject,\r\n  emailType,\r\n  objectCode,\r\n  objectId,\r\n  handlers,\r\n}) {\r\n  const dispatch = useDispatch();\r\n\r\n  const user = useSelector(selectUser);\r\n  const emsInboxList = useSelector(selectEmsInboxList);\r\n  const emsExistingDocuments = useSelector(selectEmsExistingDocuments);\r\n\r\n  const [selectedMail, setSelectedMail] = useState({});\r\n  const [isComposeEmail, setIsComposeEmail] = useState(!Boolean(accountDetails?.sendEmailDocument));\r\n  const [forwardSubject, setForwardSubject] = useState('');\r\n  const [forwardMessage, setForwardMessage] = useState('');\r\n  const [forwardAttachments, setForwardAttachements] = useState([]);\r\n\r\n  const policyRef = caseDetailsObject?.policyRef;\r\n  const instructionId = caseDetailsObject?.instructionId;\r\n\r\n  const isMiddleOffice = utils.generic.isValidArray(user.group, true) && user.group[0].code === constants.MIDDLE_OFFICE;\r\n\r\n  useEffect(() => {\r\n    dispatch(getEmsInboxList({ objectId, objectCode, emailType }));\r\n    dispatch(getEmsExistingDocuments({ referenceId: objectId, sectionType: objectCode, policyRef, instructionId }));\r\n\r\n    // cleanup\r\n    return () => {\r\n      dispatch(resetEmsInboxList());\r\n    };\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    if (Boolean(accountDetails?.sendEmailDocument)) setSelectedMail(utils.generic.isValidArray(emsInboxList, true) ? emsInboxList[0] : {});\r\n  }, [emsInboxList]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const fields = [\r\n    {\r\n      name: 'accountName',\r\n      type: 'text',\r\n      size: 'sm',\r\n      value: accountName || '',\r\n      muiComponentProps: {\r\n        disabled: true,\r\n      },\r\n    },\r\n  ];\r\n\r\n  const sendEmail = ({ emailTo, emailCc, message, subject, attachments }) => {\r\n    const params = { emailTo, emailCc, message, subject, objectId, objectCode, emailType, attachments };\r\n    dispatch(postEmail(params)).then((data) => {\r\n      if (data?.status?.toLowerCase() === constants.API_RESPONSE_OK.toLowerCase()) {\r\n        dispatch(\r\n          postBureauInsurerDetails([\r\n            {\r\n              caseIncidentId: Number(caseDetailsObject?.caseId),\r\n              createdBy: user.id,\r\n              createdDate: utils.date.today(),\r\n              emailId: 1,\r\n              isActive: 1,\r\n              issueDocsType: emailType,\r\n              marketTypesId: null,\r\n              ...(emailType === constants.EMS_EMAIL_TYPE_CLIENT && {\r\n                policyClientId: accountDetails?.policyClientId,\r\n                documentSentType: accountDetails?.documentSentType,\r\n                emailTo: emailTo\r\n                  .split(';')\r\n                  .map((email) => email.trim())\r\n                  .filter((v) => !isEmpty(v)),\r\n                emailCc: emailCc\r\n                  .split(';')\r\n                  .map((email) => email.trim())\r\n                  .filter((v) => !isEmpty(v)),\r\n              }),\r\n              ...(emailType === constants.EMS_EMAIL_TYPE_NON_BUREAU && { policyUnderwriterId: accountDetails?.underwriterAccountID }),\r\n              sentDate: utils.date.today(),\r\n              sourceId: caseDetailsObject?.caseTeamData?.xbInstanceId,\r\n              updatedBy: user.id,\r\n              updatedDate: utils.date.today(),\r\n              workPackageRef: null,\r\n            },\r\n          ])\r\n        ).then((data) => {\r\n          if (data?.status?.toLowerCase() === constants.API_RESPONSE_OK.toLowerCase()) {\r\n            dispatch(getEmsInboxList({ objectId, objectCode, emailType })).then((data) => {\r\n              if (data?.status?.toLowerCase() === constants.API_RESPONSE_OK.toLowerCase()) {\r\n                setIsComposeEmail(false);\r\n                setSelectedMail(utils.generic.isValidArray(data?.data, true) ? data?.data[0] : {});\r\n              }\r\n            });\r\n          }\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  const showMailBodyContent = (id) => {\r\n    setIsComposeEmail(false);\r\n    const filteredData = utils.generic.isValidArray(emsInboxList, true) && emsInboxList.filter((a) => a.id === id);\r\n    setSelectedMail(utils.generic.isValidArray(filteredData, true) ? filteredData[0] : {});\r\n  };\r\n\r\n  const goBack = () => {\r\n    setIsComposeEmail(false);\r\n    handlers.goBack();\r\n  };\r\n\r\n  const forwardMail = (mailData) => {\r\n    setIsComposeEmail(true);\r\n    setSelectedMail({});\r\n    setForwardSubject(`FW: ${mailData?.subject}`);\r\n    setForwardMessage(mailData?.text);\r\n    setForwardAttachements(mailData?.attachment);\r\n  };\r\n\r\n  const downloadDocument = (doc) => {\r\n    dispatch(viewDocumentsDownload(doc));\r\n  };\r\n\r\n  if (!(objectId && objectCode && emailType)) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <EmailManagementServiceView\r\n      accountLabel={accountLabel}\r\n      emsInboxList={emsInboxList}\r\n      emsExistingDocuments={emsExistingDocuments}\r\n      forwardAttachments={forwardAttachments}\r\n      forwardMessage={forwardMessage}\r\n      forwardSubject={forwardSubject}\r\n      fields={fields}\r\n      isComposeEmail={isComposeEmail}\r\n      isMiddleOffice={isMiddleOffice}\r\n      selectedMail={selectedMail}\r\n      handlers={{\r\n        forwardMail,\r\n        goBack,\r\n        sendEmail,\r\n        showMailBodyContent,\r\n        downloadDocument,\r\n      }}\r\n      caseDetailsObject={caseDetailsObject}\r\n      accountDetails={accountDetails}\r\n      accountName={accountName}\r\n    />\r\n  );\r\n}\r\n\r\nexport default EmailManagementService;\r\n"]},"metadata":{},"sourceType":"module"}