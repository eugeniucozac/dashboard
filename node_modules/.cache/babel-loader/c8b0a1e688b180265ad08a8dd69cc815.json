{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { addLoader, removeLoader, enqueueNotification, hideModal, authLogout } from 'stores';\nimport * as utils from 'utils';\nexport var returnToTeamQueueClaim = function returnToTeamQueueClaim(claim) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/claims.actions.returnToTeamQueueClaim'\n    };\n    dispatch(returnToTeamQueueClaimRequest(claim));\n    dispatch(addLoader('returnToTeamQueueClaim'));\n\n    if (!(claim === null || claim === void 0 ? void 0 : claim.processID)) {\n      dispatch(returnToTeamQueueClaimFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Missing processID param'\n      })));\n      dispatch(removeLoader('returnToTeamQueueClaim'));\n      return;\n    }\n\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.bpmService,\n      path: \"workflow/process/claim/\".concat(claim === null || claim === void 0 ? void 0 : claim.processID, \"/returnToTeam\")\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(returnToTeamQueueClaimSuccess(data.data));\n      dispatch(enqueueNotification(utils.string.t('claims.claimRef.popOverItems.claimToTeamQueueSuccessMessage'), 'success'));\n      return data;\n    }).catch(function (error) {\n      dispatch(returnToTeamQueueClaimFailure(error, defaultError));\n      dispatch(enqueueNotification(utils.string.t('claims.claimRef.popOverItems.claimToTeamQueueErrorMessage'), 'error'));\n      utils.api.handleUnauthorized(error, dispatch, authLogout);\n      return error;\n    }).finally(function () {\n      dispatch(hideModal());\n      dispatch(removeLoader('returnToTeamQueueClaim'));\n    });\n  };\n};\nexport var returnToTeamQueueClaimRequest = function returnToTeamQueueClaimRequest(claim) {\n  return {\n    type: 'CLAIM_RETURN_TO_TEAM_QUEUE_REQUEST',\n    payload: {\n      claim: claim\n    }\n  };\n};\nexport var returnToTeamQueueClaimSuccess = function returnToTeamQueueClaimSuccess(data) {\n  return {\n    type: 'CLAIM_RETURN_TO_TEAM_QUEUE_SUCCESS',\n    payload: data\n  };\n};\nexport var returnToTeamQueueClaimFailure = function returnToTeamQueueClaimFailure(error) {\n  return {\n    type: 'CLAIM_RETURN_TO_TEAM_QUEUE_ERROR',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.returnToTeamQueueClaim.js"],"names":["addLoader","removeLoader","enqueueNotification","hideModal","authLogout","utils","returnToTeamQueueClaim","claim","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","returnToTeamQueueClaimRequest","processID","returnToTeamQueueClaimFailure","message","api","post","token","accessToken","bpmService","path","then","response","handleResponse","json","handleNewData","data","returnToTeamQueueClaimSuccess","string","t","catch","error","handleUnauthorized","finally","type","payload"],"mappings":"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","sourcesContent":["import { addLoader, removeLoader, enqueueNotification, hideModal, authLogout } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const returnToTeamQueueClaim = (claim) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.returnToTeamQueueClaim',\r\n  };\r\n\r\n  dispatch(returnToTeamQueueClaimRequest(claim));\r\n  dispatch(addLoader('returnToTeamQueueClaim'));\r\n\r\n  if (!claim?.processID) {\r\n    dispatch(returnToTeamQueueClaimFailure({ ...defaultError, message: 'Missing processID param' }));\r\n    dispatch(removeLoader('returnToTeamQueueClaim'));\r\n    return;\r\n  }\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.bpmService,\r\n      path: `workflow/process/claim/${claim?.processID}/returnToTeam`,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(returnToTeamQueueClaimSuccess(data.data));\r\n      dispatch(enqueueNotification(utils.string.t('claims.claimRef.popOverItems.claimToTeamQueueSuccessMessage'), 'success'));\r\n      return data;\r\n    })\r\n    .catch((error) => {\r\n      dispatch(returnToTeamQueueClaimFailure(error, defaultError));\r\n      dispatch(enqueueNotification(utils.string.t('claims.claimRef.popOverItems.claimToTeamQueueErrorMessage'), 'error'));\r\n      utils.api.handleUnauthorized(error, dispatch, authLogout);\r\n      return error;\r\n    })\r\n    .finally(() => {\r\n      dispatch(hideModal());\r\n      dispatch(removeLoader('returnToTeamQueueClaim'));\r\n    });\r\n};\r\n\r\nexport const returnToTeamQueueClaimRequest = (claim) => {\r\n  return {\r\n    type: 'CLAIM_RETURN_TO_TEAM_QUEUE_REQUEST',\r\n    payload: { claim },\r\n  };\r\n};\r\n\r\nexport const returnToTeamQueueClaimSuccess = (data) => {\r\n  return {\r\n    type: 'CLAIM_RETURN_TO_TEAM_QUEUE_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const returnToTeamQueueClaimFailure = (error) => {\r\n  return {\r\n    type: 'CLAIM_RETURN_TO_TEAM_QUEUE_ERROR',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}