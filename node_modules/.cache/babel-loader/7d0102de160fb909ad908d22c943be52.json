{"ast":null,"code":"import \"core-js/modules/es.array.map\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport omit from 'lodash/omit';\nimport uniqBy from 'lodash/uniqBy';\nimport get from 'lodash/get'; // app\n\nimport * as utils from 'utils';\nimport { authLogout, addLoader, enqueueNotification, hideModal, removeLoader } from 'stores';\nexport var postEditPlacement = function postEditPlacement(formData) {\n  var calendarView = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var placement_id = formData.placementId;\n    var defaultError = {\n      file: 'stores/placement.actions.editPlacement',\n      message: 'Data missing for PUT request'\n    };\n    dispatch(postEditPlacementRequest(formData));\n    dispatch(addLoader('postEditPlacement'));\n\n    if (!formData || !formData.placementId) {\n      dispatch(postEditPlacementFailure(defaultError));\n      dispatch(enqueueNotification('notification.editPlacement.fail', 'error'));\n      dispatch(hideModal());\n      dispatch(removeLoader('postEditPlacement'));\n      return;\n    }\n\n    var usersAll = uniqBy([].concat(_toConsumableArray(formData.brokers), _toConsumableArray(formData.cobrokers)), 'id').map(function (broker) {\n      return omit(broker, 'label');\n    }); // get the data for PUT\n\n    var body = {\n      users: usersAll,\n      departmentId: get(formData, 'department'),\n      clients: get(formData, 'clients', []).map(function (client) {\n        return {\n          id: client.id\n        };\n      }),\n      insureds: get(formData, 'insureds', []).filter(function (insured) {\n        return !Boolean(insured.__isNew__);\n      }).map(function (insured) {\n        return {\n          id: insured.id\n        };\n      }),\n      provisionalInsureds: get(formData, 'insureds', []).filter(function (insured) {\n        return Boolean(insured.__isNew__);\n      }).map(function (insured) {\n        return {\n          name: insured.id\n        };\n      }),\n      statusId: get(formData, 'statusLabel'),\n      inceptionDate: formData.inceptionDate,\n      description: formData.description\n    };\n    return utils.api.put({\n      token: auth.accessToken,\n      endpoint: endpoint.edge,\n      path: \"api/placement/\".concat(placement_id),\n      data: body\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleData(json);\n    }).then(function (data) {\n      dispatch(postEditPlacementSuccess(data, calendarView));\n      dispatch(enqueueNotification('notification.editPlacement.success', 'success'));\n      dispatch(hideModal());\n      dispatch(removeLoader('postEditPlacement'));\n      return data;\n    })[\"catch\"](function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API fetch error (placement.postEditPlacement)'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(postEditPlacementFailure(err));\n      dispatch(enqueueNotification('notification.editPlacement.fail', 'error'));\n      dispatch(hideModal());\n      dispatch(removeLoader('postEditPlacement'));\n      return err;\n    });\n  };\n};\nexport var postEditPlacementRequest = function postEditPlacementRequest(data) {\n  return {\n    type: 'PLACEMENT_EDIT_POST_REQUEST',\n    payload: data\n  };\n};\nexport var postEditPlacementSuccess = function postEditPlacementSuccess(data, calendarView) {\n  return {\n    type: calendarView ? 'PLACEMENT_POST_CALENDAR_SUCCESS' : 'PLACEMENT_POST_SUCCESS',\n    payload: data\n  };\n};\nexport var postEditPlacementFailure = function postEditPlacementFailure(error) {\n  return {\n    type: 'PLACEMENT_EDIT_POST_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/placement/placement.actions.editPlacement.js"],"names":["omit","uniqBy","get","utils","authLogout","addLoader","enqueueNotification","hideModal","removeLoader","postEditPlacement","formData","calendarView","dispatch","getState","auth","user","endpoint","config","vars","placement_id","placementId","defaultError","file","message","postEditPlacementRequest","postEditPlacementFailure","usersAll","brokers","cobrokers","map","broker","body","users","departmentId","clients","client","id","insureds","filter","insured","Boolean","__isNew__","provisionalInsureds","name","statusId","inceptionDate","description","api","put","token","accessToken","edge","path","data","then","response","handleResponse","json","handleData","postEditPlacementSuccess","err","errorParams","handleError","handleUnauthorized","type","payload","error"],"mappings":"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","sourcesContent":["import omit from 'lodash/omit';\r\nimport uniqBy from 'lodash/uniqBy';\r\nimport get from 'lodash/get';\r\n\r\n// app\r\nimport * as utils from 'utils';\r\nimport { authLogout, addLoader, enqueueNotification, hideModal, removeLoader } from 'stores';\r\n\r\nexport const postEditPlacement =\r\n  (formData, calendarView = false) =>\r\n  (dispatch, getState) => {\r\n    // prettier-ignore\r\n    const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n    const placement_id = formData.placementId;\r\n\r\n    const defaultError = {\r\n      file: 'stores/placement.actions.editPlacement',\r\n      message: 'Data missing for PUT request',\r\n    };\r\n    dispatch(postEditPlacementRequest(formData));\r\n    dispatch(addLoader('postEditPlacement'));\r\n\r\n    if (!formData || !formData.placementId) {\r\n      dispatch(postEditPlacementFailure(defaultError));\r\n      dispatch(enqueueNotification('notification.editPlacement.fail', 'error'));\r\n      dispatch(hideModal());\r\n      dispatch(removeLoader('postEditPlacement'));\r\n      return;\r\n    }\r\n\r\n    const usersAll = uniqBy([...formData.brokers, ...formData.cobrokers], 'id').map((broker) => omit(broker, 'label'));\r\n\r\n    // get the data for PUT\r\n    const body = {\r\n      users: usersAll,\r\n      departmentId: get(formData, 'department'),\r\n      clients: get(formData, 'clients', []).map((client) => ({ id: client.id })),\r\n      insureds: get(formData, 'insureds', [])\r\n        .filter((insured) => !Boolean(insured.__isNew__))\r\n        .map((insured) => ({ id: insured.id })),\r\n      provisionalInsureds: get(formData, 'insureds', [])\r\n        .filter((insured) => Boolean(insured.__isNew__))\r\n        .map((insured) => ({ name: insured.id })),\r\n      statusId: get(formData, 'statusLabel'),\r\n      inceptionDate: formData.inceptionDate,\r\n      description: formData.description,\r\n    };\r\n\r\n    return utils.api\r\n      .put({\r\n        token: auth.accessToken,\r\n        endpoint: endpoint.edge,\r\n        path: `api/placement/${placement_id}`,\r\n        data: body,\r\n      })\r\n      .then((response) => utils.api.handleResponse(response))\r\n      .then((json) => utils.api.handleData(json))\r\n      .then((data) => {\r\n        dispatch(postEditPlacementSuccess(data, calendarView));\r\n        dispatch(enqueueNotification('notification.editPlacement.success', 'success'));\r\n        dispatch(hideModal());\r\n        dispatch(removeLoader('postEditPlacement'));\r\n        return data;\r\n      })\r\n      .catch((err) => {\r\n        const errorParams = {\r\n          ...defaultError,\r\n          message: 'API fetch error (placement.postEditPlacement)',\r\n        };\r\n\r\n        utils.api.handleError(err, errorParams);\r\n        utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n        dispatch(postEditPlacementFailure(err));\r\n        dispatch(enqueueNotification('notification.editPlacement.fail', 'error'));\r\n        dispatch(hideModal());\r\n        dispatch(removeLoader('postEditPlacement'));\r\n        return err;\r\n      });\r\n  };\r\n\r\nexport const postEditPlacementRequest = (data) => {\r\n  return {\r\n    type: 'PLACEMENT_EDIT_POST_REQUEST',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const postEditPlacementSuccess = (data, calendarView) => {\r\n  return {\r\n    type: calendarView ? 'PLACEMENT_POST_CALENDAR_SUCCESS' : 'PLACEMENT_POST_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const postEditPlacementFailure = (error) => {\r\n  return {\r\n    type: 'PLACEMENT_EDIT_POST_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}