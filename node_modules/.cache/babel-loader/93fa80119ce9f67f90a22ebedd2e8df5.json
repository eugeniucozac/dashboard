{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport get from 'lodash/get'; // app\n\nimport { authLogout, addLoader, removeLoader, enqueueNotification } from 'stores';\nimport * as utils from 'utils';\nexport var getClaimRfis = function getClaimRfis(params) {\n  return function (dispatch, getState) {\n    var _claims$rfis, _claims$rfis2, _claims$rfis2$sort;\n\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint,\n        claims = _getState.claims;\n\n    var claimID = params.claimID,\n        page = params.page,\n        size = params.size,\n        sortBy = params.sortBy,\n        direction = params.direction,\n        query = params.query,\n        _params$filters = params.filters,\n        filters = _params$filters === void 0 ? {} : _params$filters;\n    var defaultError = {\n      file: 'stores/claims.actions.getClaimRfis'\n    };\n    dispatch(getClaimRfisRequest(params));\n    dispatch(addLoader('getClaimRfis'));\n\n    if (!claimID) {\n      dispatch(getClaimRfisFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Missing claimID param'\n      })));\n      dispatch(enqueueNotification('claims.rfis.notifications.getFailure', 'error'));\n      dispatch(removeLoader('getClaimRfis'));\n      return;\n    }\n\n    var prevDirection = get(claims, 'rfis.sort.direction') || '';\n    var newDirection = params.hasOwnProperty('direction') ? direction : prevDirection;\n    var prevQuery = get(claims, 'rfis.query') || '';\n    var newQuery = params.hasOwnProperty('query') ? query : prevQuery;\n\n    var constructFilters = function constructFilters(filtersObj) {\n      var filteredArray = [];\n\n      for (var key in filtersObj) {\n        var _filtersObj$key;\n\n        if (((_filtersObj$key = filtersObj[key]) === null || _filtersObj$key === void 0 ? void 0 : _filtersObj$key.length) > 0 && typeof filtersObj[key] !== 'string') {\n          filteredArray.push({\n            column: key,\n            filterValue: filtersObj[key]\n          });\n        } else if (typeof filtersObj[key] === 'string' && filtersObj[key] !== '') {\n          filteredArray.push({\n            column: key,\n            filterValue: [{\n              id: 0,\n              name: filtersObj[key]\n            }]\n          });\n        }\n      }\n\n      return filteredArray;\n    };\n\n    var prevFilters = get(claims, 'rfis.filters') || [];\n    var newFilters = params.hasOwnProperty('filters') ? constructFilters(filters) : prevFilters;\n    var apiParams = {\n      page: page || 0,\n      pageSize: size || (claims === null || claims === void 0 ? void 0 : (_claims$rfis = claims.rfis) === null || _claims$rfis === void 0 ? void 0 : _claims$rfis.pageSize),\n      sortBy: sortBy || (claims === null || claims === void 0 ? void 0 : (_claims$rfis2 = claims.rfis) === null || _claims$rfis2 === void 0 ? void 0 : (_claims$rfis2$sort = _claims$rfis2.sort) === null || _claims$rfis2$sort === void 0 ? void 0 : _claims$rfis2$sort.by),\n      direction: newDirection,\n      search: newQuery || '',\n      filters: (newFilters === null || newFilters === void 0 ? void 0 : newFilters.length) > 0 ? newFilters : null\n    };\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.bpmService,\n      path: \"rfi/\".concat(claimID, \"/search\"),\n      data: apiParams\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (data) {\n      return utils.api.handleNewData(data);\n    }).then(function (json) {\n      dispatch(getClaimRfisSuccess(json));\n      return json;\n    })[\"catch\"](function (err) {\n      dispatch(getClaimRfisFailure(err, defaultError));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      return err;\n    })[\"finally\"](function () {\n      dispatch(removeLoader('getClaimRfis'));\n    });\n  };\n};\nexport var getClaimRfisRequest = function getClaimRfisRequest(params) {\n  return {\n    type: 'CLAIM_RFIS_GET_REQUEST',\n    payload: params\n  };\n};\nexport var getClaimRfisSuccess = function getClaimRfisSuccess(data) {\n  var _data$data, _data$data2;\n\n  return {\n    type: 'CLAIM_RFIS_GET_SUCCESS',\n    payload: {\n      items: (_data$data = data.data) === null || _data$data === void 0 ? void 0 : _data$data.searchValue,\n      filters: (_data$data2 = data.data) === null || _data$data2 === void 0 ? void 0 : _data$data2.filterValue,\n      pagination: data.pagination\n    }\n  };\n};\nexport var getClaimRfisFailure = function getClaimRfisFailure(err) {\n  return {\n    type: 'CLAIM_RFIS_GET_FAILURE',\n    payload: err\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.getClaimRfis.js"],"names":["get","authLogout","addLoader","removeLoader","enqueueNotification","utils","getClaimRfis","params","dispatch","getState","auth","user","endpoint","config","vars","claims","claimID","page","size","sortBy","direction","query","filters","defaultError","file","getClaimRfisRequest","getClaimRfisFailure","message","prevDirection","newDirection","hasOwnProperty","prevQuery","newQuery","constructFilters","filtersObj","filteredArray","key","length","push","column","filterValue","id","name","prevFilters","newFilters","apiParams","pageSize","rfis","sort","by","search","api","post","token","accessToken","bpmService","path","data","then","response","handleResponse","handleNewData","json","getClaimRfisSuccess","err","handleUnauthorized","type","payload","items","searchValue","pagination"],"mappings":"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","sourcesContent":["import get from 'lodash/get';\r\n\r\n// app\r\nimport { authLogout, addLoader, removeLoader, enqueueNotification } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const getClaimRfis = (params) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}, claims} = getState();\r\n  const { claimID, page, size, sortBy, direction, query, filters = {} } = params;\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.getClaimRfis',\r\n  };\r\n\r\n  dispatch(getClaimRfisRequest(params));\r\n  dispatch(addLoader('getClaimRfis'));\r\n\r\n  if (!claimID) {\r\n    dispatch(getClaimRfisFailure({ ...defaultError, message: 'Missing claimID param' }));\r\n    dispatch(enqueueNotification('claims.rfis.notifications.getFailure', 'error'));\r\n    dispatch(removeLoader('getClaimRfis'));\r\n    return;\r\n  }\r\n\r\n  const prevDirection = get(claims, 'rfis.sort.direction') || '';\r\n  const newDirection = params.hasOwnProperty('direction') ? direction : prevDirection;\r\n\r\n  const prevQuery = get(claims, 'rfis.query') || '';\r\n  const newQuery = params.hasOwnProperty('query') ? query : prevQuery;\r\n\r\n  const constructFilters = (filtersObj) => {\r\n    const filteredArray = [];\r\n    for (const key in filtersObj) {\r\n      if (filtersObj[key]?.length > 0 && typeof filtersObj[key] !== 'string') {\r\n        filteredArray.push({\r\n          column: key,\r\n          filterValue: filtersObj[key],\r\n        });\r\n      } else if (typeof filtersObj[key] === 'string' && filtersObj[key] !== '') {\r\n        filteredArray.push({\r\n          column: key,\r\n          filterValue: [{ id: 0, name: filtersObj[key] }],\r\n        });\r\n      }\r\n    }\r\n    return filteredArray;\r\n  };\r\n\r\n  const prevFilters = get(claims, 'rfis.filters') || [];\r\n  const newFilters = params.hasOwnProperty('filters') ? constructFilters(filters) : prevFilters;\r\n\r\n  const apiParams = {\r\n    page: page || 0,\r\n    pageSize: size || claims?.rfis?.pageSize,\r\n    sortBy: sortBy || claims?.rfis?.sort?.by,\r\n    direction: newDirection,\r\n    search: newQuery || '',\r\n    filters: newFilters?.length > 0 ? newFilters : null,\r\n  };\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.bpmService,\r\n      path: `rfi/${claimID}/search`,\r\n      data: apiParams,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((data) => utils.api.handleNewData(data))\r\n    .then((json) => {\r\n      dispatch(getClaimRfisSuccess(json));\r\n      return json;\r\n    })\r\n    .catch((err) => {\r\n      dispatch(getClaimRfisFailure(err, defaultError));\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('getClaimRfis'));\r\n    });\r\n};\r\n\r\nexport const getClaimRfisRequest = (params) => {\r\n  return {\r\n    type: 'CLAIM_RFIS_GET_REQUEST',\r\n    payload: params,\r\n  };\r\n};\r\n\r\nexport const getClaimRfisSuccess = (data) => {\r\n  return {\r\n    type: 'CLAIM_RFIS_GET_SUCCESS',\r\n    payload: {\r\n      items: data.data?.searchValue,\r\n      filters: data.data?.filterValue,\r\n      pagination: data.pagination,\r\n    },\r\n  };\r\n};\r\n\r\nexport const getClaimRfisFailure = (err) => {\r\n  return {\r\n    type: 'CLAIM_RFIS_GET_FAILURE',\r\n    payload: err,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}