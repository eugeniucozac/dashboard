{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty'; // app\n\nimport { addLoader, authLogout, deletePlacementLayers, deletePlacementLayerMarkets, enqueueNotification, hideModal, removeLoader, updateSelectedLayerMarket, updatePlacementLayerMarkets, bulkPlacementClearAll, updatePlacementLayers } from 'stores';\nimport * as utils from 'utils';\nexport var postPlacementBulkLayer = function postPlacementBulkLayer(formData, bulkType) {\n  return function (dispatch, getState) {\n    var bulkItems = bulkType === 'layer' ? get(getState(), 'placement.bulkItems.layers', []) : get(getState(), 'placement.bulkItems.layerMarkets', []);\n    var defaultError = {\n      file: 'stores/placement.actions.bulkLayer',\n      message: 'Data missing for POST request'\n    };\n\n    if (!formData || !bulkType || isEmpty(bulkItems)) {\n      dispatch(postPlacementBulkLayerUpdateFailure(defaultError));\n      dispatch(enqueueNotification('notification.bulkEdit.fail', 'error'));\n      dispatch(hideModal());\n      return;\n    }\n\n    if (bulkType === 'layer') {\n      return dispatch(postPlacementBulkLayerUpdate(formData));\n    } else {\n      return dispatch(postPlacementBulkLayerUpdateMarket(formData));\n    }\n  };\n};\nexport var postPlacementBulkLayerUpdate = function postPlacementBulkLayerUpdate(formData) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var action = formData.delete ? 'delete' : 'edit';\n    var bulkItems = get(getState(), 'placement.bulkItems.layers', []);\n    var body = bulkItems.map(function (layerId) {\n      var currentLayer = utils.layers.getById(get(getState(), 'placement.selected.layers', []), layerId);\n\n      if (action === 'delete') {\n        return layerId;\n      }\n\n      return _objectSpread(_objectSpread(_objectSpread({}, currentLayer), formData.isoCode && {\n        isoCode: formData.isoCode\n      }), formData.isoCode && {\n        isoCurrencyCode: formData.isoCode\n      });\n    });\n    dispatch(postPlacementBulkLayerUpdateRequest(formData));\n    dispatch(addLoader('postPlacementBulkLayerUpdate'));\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.edge,\n      path: \"api/placementlayer/bulk/\".concat(action),\n      data: body\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleData(json);\n    }).then(function (data) {\n      dispatch(postPlacementBulkLayerUpdateSuccess(data)); // on POST success update the UI\n\n      if (formData.delete) {\n        dispatch(deletePlacementLayers(body));\n      } else {\n        dispatch(updatePlacementLayers(body));\n      }\n\n      action === 'delete' ? dispatch(enqueueNotification('notification.bulkDelete.success', 'success')) : dispatch(enqueueNotification('notification.bulkEdit.success', 'success'));\n      dispatch(bulkPlacementClearAll());\n      dispatch(hideModal());\n      dispatch(removeLoader('postPlacementBulkLayerUpdate'));\n    }).catch(function (err) {\n      var errorParams = {\n        file: 'stores/placement.actions.bulk',\n        message: 'API post error (placement.bulk)'\n      };\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(postPlacementBulkLayerUpdateFailure(err));\n      action === 'delete' ? dispatch(enqueueNotification('notification.bulkDelete.fail', 'success')) : dispatch(enqueueNotification('notification.bulkEdit.fail', 'error'));\n      dispatch(hideModal());\n      dispatch(removeLoader('postPlacementBulkLayerUpdate'));\n      return err;\n    });\n  };\n};\nexport var postPlacementBulkLayerUpdateMarket = function postPlacementBulkLayerUpdateMarket(formData) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState2 = getState(),\n        auth = _getState2.user.auth,\n        endpoint = _getState2.config.vars.endpoint;\n\n    var action = formData.delete ? 'delete' : 'edit';\n    var bulkItems = get(getState(), 'placement.bulkItems.layerMarkets', []);\n    var body = bulkItems.map(function (marketId) {\n      var currentMarket = utils.layers.getMarketById(get(getState(), 'placement.selected.layers', []), marketId);\n\n      if (action === 'delete') {\n        return marketId;\n      }\n\n      return _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, currentMarket), formData.statusId && {\n        statusId: parseFloat(formData.statusId)\n      }), (formData.premium || formData.premium === 0) && {\n        premium: parseFloat(formData.premium)\n      }), formData.isoCode && {\n        isoCode: formData.isoCode\n      }), formData.uniqueMarketReference && {\n        uniqueMarketReference: formData.uniqueMarketReference.id\n      }), formData.section && {\n        section: formData.section.toUpperCase()\n      }), formData.written && {\n        writtenLinePercentage: formData.written\n      }), formData.quoteDate && {\n        quoteDate: formData.quoteDate\n      }), formData.validUntilDate && {\n        validUntilDate: formData.validUntilDate\n      }), formData.subjectivities && {\n        subjectivities: formData.subjectivities\n      });\n    });\n    dispatch(postPlacementBulkLayerUpdateRequest(formData));\n    dispatch(addLoader('postPlacementBulkMarket'));\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.edge,\n      path: \"api/placementlayerMarket/bulk/\".concat(action),\n      data: body\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleData(json);\n    }).then(function (data) {\n      dispatch(postPlacementBulkLayerUpdateSuccess(data)); // on POST success -> update the store\n      // in this case, we don't expect the updated data to be returned from the API\n      // so we take the data sent (body) and do an \"optimistic update\" on the UI\n\n      if (formData.delete) {\n        dispatch(deletePlacementLayerMarkets(body));\n      } else {\n        dispatch(updatePlacementLayerMarkets(body));\n      }\n\n      dispatch(updateSelectedLayerMarket());\n      action === 'delete' ? dispatch(enqueueNotification('notification.bulkDelete.success', 'success')) : dispatch(enqueueNotification('notification.bulkEdit.success', 'success'));\n      dispatch(bulkPlacementClearAll());\n      dispatch(hideModal());\n      dispatch(removeLoader('postPlacementBulkMarket'));\n    }).catch(function (err) {\n      var errorParams = {\n        file: 'stores/placement.actions.bulk',\n        message: 'API post error (placement.bulk)'\n      };\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(postPlacementBulkLayerUpdateFailure(err));\n      action === 'delete' ? dispatch(enqueueNotification('notification.bulkDelete.fail', 'success')) : dispatch(enqueueNotification('notification.bulkEdit.fail', 'error'));\n      dispatch(hideModal());\n      dispatch(removeLoader('postPlacementBulkMarket'));\n      return err;\n    });\n  };\n};\nexport var postPlacementBulkLayerUpdateRequest = function postPlacementBulkLayerUpdateRequest(data) {\n  return {\n    type: 'PLACEMENT_BULK_LAYER_POST_REQUEST',\n    payload: data\n  };\n};\nexport var postPlacementBulkLayerUpdateSuccess = function postPlacementBulkLayerUpdateSuccess(data) {\n  return {\n    type: 'PLACEMENT_BULK_LAYER_POST_SUCCESS',\n    payload: data\n  };\n};\nexport var postPlacementBulkLayerUpdateFailure = function postPlacementBulkLayerUpdateFailure(error) {\n  return {\n    type: 'PLACEMENT_BULK_LAYER_POST_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/placement/placement.actions.bulkUpdateLayer.js"],"names":["get","isEmpty","addLoader","authLogout","deletePlacementLayers","deletePlacementLayerMarkets","enqueueNotification","hideModal","removeLoader","updateSelectedLayerMarket","updatePlacementLayerMarkets","bulkPlacementClearAll","updatePlacementLayers","utils","postPlacementBulkLayer","formData","bulkType","dispatch","getState","bulkItems","defaultError","file","message","postPlacementBulkLayerUpdateFailure","postPlacementBulkLayerUpdate","postPlacementBulkLayerUpdateMarket","auth","user","endpoint","config","vars","action","delete","body","map","layerId","currentLayer","layers","getById","isoCode","isoCurrencyCode","postPlacementBulkLayerUpdateRequest","api","post","token","accessToken","edge","path","data","then","response","handleResponse","json","handleData","postPlacementBulkLayerUpdateSuccess","catch","err","errorParams","handleError","handleUnauthorized","marketId","currentMarket","getMarketById","statusId","parseFloat","premium","uniqueMarketReference","id","section","toUpperCase","written","writtenLinePercentage","quoteDate","validUntilDate","subjectivities","type","payload","error"],"mappings":"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","sourcesContent":["import get from 'lodash/get';\r\nimport isEmpty from 'lodash/isEmpty';\r\n\r\n// app\r\nimport {\r\n  addLoader,\r\n  authLogout,\r\n  deletePlacementLayers,\r\n  deletePlacementLayerMarkets,\r\n  enqueueNotification,\r\n  hideModal,\r\n  removeLoader,\r\n  updateSelectedLayerMarket,\r\n  updatePlacementLayerMarkets,\r\n  bulkPlacementClearAll,\r\n  updatePlacementLayers,\r\n} from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const postPlacementBulkLayer = (formData, bulkType) => (dispatch, getState) => {\r\n  const bulkItems =\r\n    bulkType === 'layer' ? get(getState(), 'placement.bulkItems.layers', []) : get(getState(), 'placement.bulkItems.layerMarkets', []);\r\n\r\n  const defaultError = {\r\n    file: 'stores/placement.actions.bulkLayer',\r\n    message: 'Data missing for POST request',\r\n  };\r\n\r\n  if (!formData || !bulkType || isEmpty(bulkItems)) {\r\n    dispatch(postPlacementBulkLayerUpdateFailure(defaultError));\r\n    dispatch(enqueueNotification('notification.bulkEdit.fail', 'error'));\r\n    dispatch(hideModal());\r\n    return;\r\n  }\r\n\r\n  if (bulkType === 'layer') {\r\n    return dispatch(postPlacementBulkLayerUpdate(formData));\r\n  } else {\r\n    return dispatch(postPlacementBulkLayerUpdateMarket(formData));\r\n  }\r\n};\r\n\r\nexport const postPlacementBulkLayerUpdate = (formData) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } } } = getState();\r\n\r\n  const action = formData.delete ? 'delete' : 'edit';\r\n  const bulkItems = get(getState(), 'placement.bulkItems.layers', []);\r\n\r\n  const body = bulkItems.map((layerId) => {\r\n    const currentLayer = utils.layers.getById(get(getState(), 'placement.selected.layers', []), layerId);\r\n\r\n    if (action === 'delete') {\r\n      return layerId;\r\n    }\r\n    return {\r\n      ...currentLayer,\r\n      ...(formData.isoCode && { isoCode: formData.isoCode }),\r\n      ...(formData.isoCode && { isoCurrencyCode: formData.isoCode }),\r\n    };\r\n  });\r\n\r\n  dispatch(postPlacementBulkLayerUpdateRequest(formData));\r\n  dispatch(addLoader('postPlacementBulkLayerUpdate'));\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.edge,\r\n      path: `api/placementlayer/bulk/${action}`,\r\n      data: body,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleData(json))\r\n    .then((data) => {\r\n      dispatch(postPlacementBulkLayerUpdateSuccess(data));\r\n\r\n      // on POST success update the UI\r\n      if (formData.delete) {\r\n        dispatch(deletePlacementLayers(body));\r\n      } else {\r\n        dispatch(updatePlacementLayers(body));\r\n      }\r\n\r\n      action === 'delete'\r\n        ? dispatch(enqueueNotification('notification.bulkDelete.success', 'success'))\r\n        : dispatch(enqueueNotification('notification.bulkEdit.success', 'success'));\r\n      dispatch(bulkPlacementClearAll());\r\n      dispatch(hideModal());\r\n      dispatch(removeLoader('postPlacementBulkLayerUpdate'));\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        file: 'stores/placement.actions.bulk',\r\n        message: 'API post error (placement.bulk)',\r\n      };\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(postPlacementBulkLayerUpdateFailure(err));\r\n      action === 'delete'\r\n        ? dispatch(enqueueNotification('notification.bulkDelete.fail', 'success'))\r\n        : dispatch(enqueueNotification('notification.bulkEdit.fail', 'error'));\r\n      dispatch(hideModal());\r\n      dispatch(removeLoader('postPlacementBulkLayerUpdate'));\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const postPlacementBulkLayerUpdateMarket = (formData) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } } } = getState();\r\n\r\n  const action = formData.delete ? 'delete' : 'edit';\r\n  const bulkItems = get(getState(), 'placement.bulkItems.layerMarkets', []);\r\n\r\n  const body = bulkItems.map((marketId) => {\r\n    const currentMarket = utils.layers.getMarketById(get(getState(), 'placement.selected.layers', []), marketId);\r\n\r\n    if (action === 'delete') {\r\n      return marketId;\r\n    }\r\n\r\n    return {\r\n      ...currentMarket,\r\n      ...(formData.statusId && { statusId: parseFloat(formData.statusId) }),\r\n      ...((formData.premium || formData.premium === 0) && { premium: parseFloat(formData.premium) }),\r\n      ...(formData.isoCode && { isoCode: formData.isoCode }),\r\n      ...(formData.uniqueMarketReference && { uniqueMarketReference: formData.uniqueMarketReference.id }),\r\n      ...(formData.section && { section: formData.section.toUpperCase() }),\r\n      ...(formData.written && { writtenLinePercentage: formData.written }),\r\n      ...(formData.quoteDate && { quoteDate: formData.quoteDate }),\r\n      ...(formData.validUntilDate && { validUntilDate: formData.validUntilDate }),\r\n      ...(formData.subjectivities && { subjectivities: formData.subjectivities }),\r\n    };\r\n  });\r\n\r\n  dispatch(postPlacementBulkLayerUpdateRequest(formData));\r\n  dispatch(addLoader('postPlacementBulkMarket'));\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.edge,\r\n      path: `api/placementlayerMarket/bulk/${action}`,\r\n      data: body,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleData(json))\r\n    .then((data) => {\r\n      dispatch(postPlacementBulkLayerUpdateSuccess(data));\r\n\r\n      // on POST success -> update the store\r\n      // in this case, we don't expect the updated data to be returned from the API\r\n      // so we take the data sent (body) and do an \"optimistic update\" on the UI\r\n      if (formData.delete) {\r\n        dispatch(deletePlacementLayerMarkets(body));\r\n      } else {\r\n        dispatch(updatePlacementLayerMarkets(body));\r\n      }\r\n\r\n      dispatch(updateSelectedLayerMarket());\r\n      action === 'delete'\r\n        ? dispatch(enqueueNotification('notification.bulkDelete.success', 'success'))\r\n        : dispatch(enqueueNotification('notification.bulkEdit.success', 'success'));\r\n      dispatch(bulkPlacementClearAll());\r\n      dispatch(hideModal());\r\n      dispatch(removeLoader('postPlacementBulkMarket'));\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        file: 'stores/placement.actions.bulk',\r\n        message: 'API post error (placement.bulk)',\r\n      };\r\n\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(postPlacementBulkLayerUpdateFailure(err));\r\n      action === 'delete'\r\n        ? dispatch(enqueueNotification('notification.bulkDelete.fail', 'success'))\r\n        : dispatch(enqueueNotification('notification.bulkEdit.fail', 'error'));\r\n      dispatch(hideModal());\r\n      dispatch(removeLoader('postPlacementBulkMarket'));\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const postPlacementBulkLayerUpdateRequest = (data) => {\r\n  return {\r\n    type: 'PLACEMENT_BULK_LAYER_POST_REQUEST',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const postPlacementBulkLayerUpdateSuccess = (data) => {\r\n  return {\r\n    type: 'PLACEMENT_BULK_LAYER_POST_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const postPlacementBulkLayerUpdateFailure = (error) => {\r\n  return {\r\n    type: 'PLACEMENT_BULK_LAYER_POST_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}