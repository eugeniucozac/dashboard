{"ast":null,"code":"import _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { addLoader, authLogout, enqueueNotification, hideModal, removeLoader } from 'stores';\nimport * as utils from 'utils';\nexport var postFacilityLimits = function postFacilityLimits() {\n  var formData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var facilityId = arguments.length > 1 ? arguments[1] : undefined;\n  var limitsId = arguments.length > 2 ? arguments[2] : undefined;\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var limits = formData.limits;\n    var fieldLimits = [];\n    var defaultError = {\n      file: 'stores/risk.actions.postFacilityLimits',\n      message: 'Data missing for POST request'\n    };\n    dispatch(postFacilityLimitsRequest({\n      formData: formData,\n      facilityId: facilityId\n    }));\n    dispatch(addLoader('postFacilityLimits'));\n\n    if (!facilityId || !limits) {\n      dispatch(postFacilityLimitsFailure(defaultError));\n      dispatch(enqueueNotification('notification.generic.request', 'error'));\n      dispatch(hideModal());\n      dispatch(removeLoader('postFacilityLimits'));\n      return;\n    }\n\n    limits === null || limits === void 0 ? void 0 : limits.forEach(function (obj) {\n      var index = fieldLimits.findIndex(function (item) {\n        return item.fieldName === obj['fieldName'];\n      });\n\n      if (index > -1) {\n        var _obj$limitFieldOption;\n\n        fieldLimits[index] = _objectSpread(_objectSpread({}, fieldLimits[index]), {}, {\n          valueLimits: [{\n            fieldValue: (_obj$limitFieldOption = obj['limitFieldOptions']) === null || _obj$limitFieldOption === void 0 ? void 0 : _obj$limitFieldOption.value,\n            limit: obj['limit'],\n            alertRate: obj['alert'],\n            label: obj['limitFieldOptions'].label\n          }].concat(_toConsumableArray(fieldLimits[index].valueLimits))\n        });\n      } else {\n        var _obj$limitFieldOption2;\n\n        fieldLimits.push({\n          fieldName: obj['fieldName'],\n          label: obj.label,\n          qualifier: obj.qualifier,\n          valueLimits: [{\n            fieldValue: (_obj$limitFieldOption2 = obj['limitFieldOptions']) === null || _obj$limitFieldOption2 === void 0 ? void 0 : _obj$limitFieldOption2.value,\n            limit: obj['limit'],\n            alertRate: obj['alert'],\n            label: obj['limitFieldOptions'].label\n          }]\n        });\n      }\n    });\n\n    var body = _objectSpread(_objectSpread({}, limitsId && {\n      id: limitsId\n    }), {}, {\n      facilityId: facilityId,\n      fieldLimits: fieldLimits\n    });\n\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.auth,\n      path: \"api/v1/limits?facilityId=\".concat(facilityId),\n      data: body\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleResponseJsonObject(json);\n    }).then(function (data) {\n      dispatch(postFacilityLimitsSuccess(data));\n      dispatch(enqueueNotification('notification.postFacilityLimits.success', 'success'));\n    }).catch(function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API post error (risk.postFacilityLimits)'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(postFacilityLimitsFailure(err));\n      dispatch(enqueueNotification(utils.api.getErrorMessage(err), 'error'));\n      return err;\n    }).finally(function () {\n      dispatch(hideModal());\n      dispatch(removeLoader('postFacilityLimits'));\n      return;\n    });\n  };\n};\nexport var postFacilityLimitsRequest = function postFacilityLimitsRequest(formData) {\n  return {\n    type: 'RISK_FACILITY_LIMITS_POST_REQUEST',\n    payload: formData\n  };\n};\nexport var postFacilityLimitsSuccess = function postFacilityLimitsSuccess(responseData) {\n  return {\n    type: 'RISK_FACILITY_LIMITS_POST_SUCCESS',\n    payload: responseData\n  };\n};\nexport var postFacilityLimitsFailure = function postFacilityLimitsFailure(error) {\n  return {\n    type: 'RISK_FACILITY_LIMITS_POST_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/risk/risk.actions.postFacilityLimits.js"],"names":["addLoader","authLogout","enqueueNotification","hideModal","removeLoader","utils","postFacilityLimits","formData","facilityId","limitsId","dispatch","getState","auth","user","endpoint","config","vars","limits","fieldLimits","defaultError","file","message","postFacilityLimitsRequest","postFacilityLimitsFailure","forEach","obj","index","findIndex","item","fieldName","valueLimits","fieldValue","value","limit","alertRate","label","push","qualifier","body","id","api","post","token","accessToken","path","data","then","response","handleResponse","json","handleResponseJsonObject","postFacilityLimitsSuccess","catch","err","errorParams","handleError","handleUnauthorized","getErrorMessage","finally","type","payload","responseData","error"],"mappings":"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","sourcesContent":["import { addLoader, authLogout, enqueueNotification, hideModal, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\nexport const postFacilityLimits =\r\n  (formData = {}, facilityId, limitsId) =>\r\n  (dispatch, getState) => {\r\n    // prettier-ignore\r\n    const { user: { auth }, config: { vars: { endpoint } } } = getState();\r\n    const { limits } = formData;\r\n    let fieldLimits = [];\r\n    const defaultError = {\r\n      file: 'stores/risk.actions.postFacilityLimits',\r\n      message: 'Data missing for POST request',\r\n    };\r\n    dispatch(postFacilityLimitsRequest({ formData, facilityId }));\r\n    dispatch(addLoader('postFacilityLimits'));\r\n    if (!facilityId || !limits) {\r\n      dispatch(postFacilityLimitsFailure(defaultError));\r\n      dispatch(enqueueNotification('notification.generic.request', 'error'));\r\n      dispatch(hideModal());\r\n      dispatch(removeLoader('postFacilityLimits'));\r\n      return;\r\n    }\r\n    limits?.forEach((obj) => {\r\n      const index = fieldLimits.findIndex((item) => item.fieldName === obj['fieldName']);\r\n      if (index > -1) {\r\n        fieldLimits[index] = {\r\n          ...fieldLimits[index],\r\n          valueLimits: [\r\n            {\r\n              fieldValue: obj['limitFieldOptions']?.value,\r\n              limit: obj['limit'],\r\n              alertRate: obj['alert'],\r\n              label: obj['limitFieldOptions'].label,\r\n            },\r\n            ...fieldLimits[index].valueLimits,\r\n          ],\r\n        };\r\n      } else {\r\n        fieldLimits.push({\r\n          fieldName: obj['fieldName'],\r\n          label: obj.label,\r\n          qualifier: obj.qualifier,\r\n          valueLimits: [\r\n            {\r\n              fieldValue: obj['limitFieldOptions']?.value,\r\n              limit: obj['limit'],\r\n              alertRate: obj['alert'],\r\n              label: obj['limitFieldOptions'].label,\r\n            },\r\n          ],\r\n        });\r\n      }\r\n    });\r\n    const body = {\r\n      ...(limitsId && { id: limitsId }),\r\n      facilityId,\r\n      fieldLimits,\r\n    };\r\n    return utils.api\r\n      .post({\r\n        token: auth.accessToken,\r\n        endpoint: endpoint.auth,\r\n        path: `api/v1/limits?facilityId=${facilityId}`,\r\n        data: body,\r\n      })\r\n      .then((response) => utils.api.handleResponse(response))\r\n      .then((json) => utils.api.handleResponseJsonObject(json))\r\n      .then((data) => {\r\n        dispatch(postFacilityLimitsSuccess(data));\r\n        dispatch(enqueueNotification('notification.postFacilityLimits.success', 'success'));\r\n      })\r\n      .catch((err) => {\r\n        const errorParams = {\r\n          ...defaultError,\r\n          message: 'API post error (risk.postFacilityLimits)',\r\n        };\r\n        utils.api.handleError(err, errorParams);\r\n        utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n        dispatch(postFacilityLimitsFailure(err));\r\n        dispatch(enqueueNotification(utils.api.getErrorMessage(err), 'error'));\r\n        return err;\r\n      })\r\n      .finally(() => {\r\n        dispatch(hideModal());\r\n        dispatch(removeLoader('postFacilityLimits'));\r\n        return;\r\n      });\r\n  };\r\nexport const postFacilityLimitsRequest = (formData) => {\r\n  return {\r\n    type: 'RISK_FACILITY_LIMITS_POST_REQUEST',\r\n    payload: formData,\r\n  };\r\n};\r\nexport const postFacilityLimitsSuccess = (responseData) => {\r\n  return {\r\n    type: 'RISK_FACILITY_LIMITS_POST_SUCCESS',\r\n    payload: responseData,\r\n  };\r\n};\r\nexport const postFacilityLimitsFailure = (error) => {\r\n  return {\r\n    type: 'RISK_FACILITY_LIMITS_POST_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}