{"ast":null,"code":"import \"core-js/modules/es.array.find\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { firstBy } from 'thenby';\nimport toPairs from 'lodash/toPairs';\nimport groupBy from 'lodash/groupBy';\nimport get from 'lodash/get';\nimport orderBy from 'lodash/orderBy'; // app\n\nimport * as utils from 'utils';\nvar utilsLayers = {\n  getByBusinessType: function getByBusinessType(layers) {\n    if (!utils.generic.isValidArray(layers, true)) return [];\n    return toPairs(groupBy(layers, function (layer) {\n      return layer.businessTypeId;\n    }));\n  },\n  getById: function getById(layers, id) {\n    if (!utils.generic.isValidArray(layers, true) || !id) return;\n    return layers.find(function (layer) {\n      return layer.id === id;\n    });\n  },\n  getMarketById: function getMarketById(layers, marketId) {\n    if (!utils.generic.isValidArray(layers, true) || !marketId) return;\n    var layer = layers.find(function (layer) {\n      return utils.generic.isValidArray(layer.markets, true) && layer.markets.some(function (market) {\n        return market.id === marketId;\n      });\n    });\n    var marketsArray = utils.layer.getMarkets(layer);\n    return marketsArray.find(function (marketObj) {\n      return marketObj.id === marketId;\n    });\n  },\n  orderLayers: function orderLayers(layers) {\n    if (!utils.generic.isValidArray(layers, true)) return [];\n    var primaryLayers = orderBy(layers.filter(function (layer) {\n      return utils.layer.isPrimary(layer);\n    }), ['amount'], ['desc']);\n    var excessLayers = orderBy(layers.filter(function (layer) {\n      return !utils.layer.isPrimary(layer);\n    }), ['excess', 'amount'], ['asc', 'desc']);\n    return [].concat(_toConsumableArray(primaryLayers), _toConsumableArray(excessLayers));\n  },\n  getMudmap: function getMudmap(layers, config, statusMarketQuoted) {\n    var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'written';\n    if (!utils.generic.isValidArray(layers, true)) return [];\n    var isWritten = type === 'written';\n    var isSigned = type === 'signed';\n    return layers.reduce(function (arr, layer) {\n      var marketsGroups = groupBy(get(layer, 'markets', []), function (market) {\n        return get(market, 'market.capacityTypeId');\n      });\n      Object.entries(marketsGroups).forEach(function (marketGroup) {\n        var capacityTypeId = marketGroup[0];\n        var markets = marketGroup[1];\n        var marketsQuoted = utils.markets.getByStatusIds(markets, [statusMarketQuoted]);\n        var layerId = \"\".concat(layer.id, \"-\").concat(marketsQuoted.map(function (m) {\n          return m.id;\n        }).join('-'));\n        var layerCurrency = utils.layer.getCurrency(layer);\n        var layerMultiplePrices = utils.markets.hasMultiplePremiums(marketsQuoted);\n        var layerPremiumByCurrency = utils.markets.getPremiumByCurrency(marketsQuoted, layerCurrency, false, false);\n        var layerWritten = utils.markets.getLineSize(marketsQuoted);\n        var layerSigned = utils.markets.getLineSize(marketsQuoted, true);\n        var layerConfig = config.find(function (l) {\n          return l.id === layerId;\n        }) || {}; // only keep layers with enough/valid data\n\n        if (layer.amount && (isWritten && layerWritten || isSigned && layerSigned)) {\n          arr.push({\n            id: layerId,\n            order: layerConfig && layerConfig.order ? layerConfig.order : null,\n            capacityId: parseInt(capacityTypeId),\n            currency: utils.layer.getCurrency(layer),\n            market: utils.layer.getName(layer),\n            leads: marketsQuoted.reduce(function (leads, m) {\n              var id = utils.market.getId(m);\n              var name = utils.market.getName(m);\n              var notes = utils.market.getNotes(m);\n              return name ? [].concat(_toConsumableArray(leads), [{\n                id: id,\n                name: name,\n                notes: notes\n              }]) : leads;\n            }, []),\n            amount: layer.amount,\n            xs: layer.excess || 0,\n            premium: layerMultiplePrices ? utils.string.t('app.various') : layerPremiumByCurrency[layerCurrency] || 0,\n            written: layerWritten ? layerWritten / 100 : 0,\n            signed: layerSigned ? layerSigned / 100 : 0\n          });\n        }\n      });\n      return arr;\n    }, []).sort(firstBy(utils.sort.array('numeric', 'order')).thenBy(utils.sort.array('numeric', 'amount', 'desc')).thenBy(utils.sort.array('numeric', 'excess', 'desc')));\n  }\n};\nexport default utilsLayers;","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/utils/layers/layers.js"],"names":["firstBy","toPairs","groupBy","get","orderBy","utils","utilsLayers","getByBusinessType","layers","generic","isValidArray","layer","businessTypeId","getById","id","find","getMarketById","marketId","markets","some","market","marketsArray","getMarkets","marketObj","orderLayers","primaryLayers","filter","isPrimary","excessLayers","getMudmap","config","statusMarketQuoted","type","isWritten","isSigned","reduce","arr","marketsGroups","Object","entries","forEach","marketGroup","capacityTypeId","marketsQuoted","getByStatusIds","layerId","map","m","join","layerCurrency","getCurrency","layerMultiplePrices","hasMultiplePremiums","layerPremiumByCurrency","getPremiumByCurrency","layerWritten","getLineSize","layerSigned","layerConfig","l","amount","push","order","capacityId","parseInt","currency","getName","leads","getId","name","notes","getNotes","xs","excess","premium","string","t","written","signed","sort","array","thenBy"],"mappings":"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","sourcesContent":["import { firstBy } from 'thenby';\r\nimport toPairs from 'lodash/toPairs';\r\nimport groupBy from 'lodash/groupBy';\r\nimport get from 'lodash/get';\r\nimport orderBy from 'lodash/orderBy';\r\n\r\n// app\r\nimport * as utils from 'utils';\r\n\r\nconst utilsLayers = {\r\n  getByBusinessType: (layers) => {\r\n    if (!utils.generic.isValidArray(layers, true)) return [];\r\n\r\n    return toPairs(groupBy(layers, (layer) => layer.businessTypeId));\r\n  },\r\n\r\n  getById: (layers, id) => {\r\n    if (!utils.generic.isValidArray(layers, true) || !id) return;\r\n\r\n    return layers.find((layer) => layer.id === id);\r\n  },\r\n\r\n  getMarketById: (layers, marketId) => {\r\n    if (!utils.generic.isValidArray(layers, true) || !marketId) return;\r\n\r\n    const layer = layers.find((layer) => {\r\n      return (\r\n        utils.generic.isValidArray(layer.markets, true) &&\r\n        layer.markets.some((market) => {\r\n          return market.id === marketId;\r\n        })\r\n      );\r\n    });\r\n\r\n    const marketsArray = utils.layer.getMarkets(layer);\r\n\r\n    return marketsArray.find((marketObj) => marketObj.id === marketId);\r\n  },\r\n\r\n  orderLayers: (layers) => {\r\n    if (!utils.generic.isValidArray(layers, true)) return [];\r\n\r\n    const primaryLayers = orderBy(\r\n      layers.filter((layer) => utils.layer.isPrimary(layer)),\r\n      ['amount'],\r\n      ['desc']\r\n    );\r\n    const excessLayers = orderBy(\r\n      layers.filter((layer) => !utils.layer.isPrimary(layer)),\r\n      ['excess', 'amount'],\r\n      ['asc', 'desc']\r\n    );\r\n\r\n    return [...primaryLayers, ...excessLayers];\r\n  },\r\n  getMudmap: (layers, config, statusMarketQuoted, type = 'written') => {\r\n    if (!utils.generic.isValidArray(layers, true)) return [];\r\n\r\n    const isWritten = type === 'written';\r\n    const isSigned = type === 'signed';\r\n\r\n    return layers\r\n      .reduce((arr, layer) => {\r\n        const marketsGroups = groupBy(get(layer, 'markets', []), (market) => get(market, 'market.capacityTypeId'));\r\n\r\n        Object.entries(marketsGroups).forEach((marketGroup) => {\r\n          const capacityTypeId = marketGroup[0];\r\n          const markets = marketGroup[1];\r\n          const marketsQuoted = utils.markets.getByStatusIds(markets, [statusMarketQuoted]);\r\n\r\n          const layerId = `${layer.id}-${marketsQuoted.map((m) => m.id).join('-')}`;\r\n          const layerCurrency = utils.layer.getCurrency(layer);\r\n          const layerMultiplePrices = utils.markets.hasMultiplePremiums(marketsQuoted);\r\n          const layerPremiumByCurrency = utils.markets.getPremiumByCurrency(marketsQuoted, layerCurrency, false, false);\r\n          const layerWritten = utils.markets.getLineSize(marketsQuoted);\r\n          const layerSigned = utils.markets.getLineSize(marketsQuoted, true);\r\n          const layerConfig = config.find((l) => l.id === layerId) || {};\r\n\r\n          // only keep layers with enough/valid data\r\n          if (layer.amount && ((isWritten && layerWritten) || (isSigned && layerSigned))) {\r\n            arr.push({\r\n              id: layerId,\r\n              order: layerConfig && layerConfig.order ? layerConfig.order : null,\r\n              capacityId: parseInt(capacityTypeId),\r\n              currency: utils.layer.getCurrency(layer),\r\n              market: utils.layer.getName(layer),\r\n              leads: marketsQuoted.reduce((leads, m) => {\r\n                const id = utils.market.getId(m);\r\n                const name = utils.market.getName(m);\r\n                const notes = utils.market.getNotes(m);\r\n\r\n                return name ? [...leads, { id, name, notes }] : leads;\r\n              }, []),\r\n              amount: layer.amount,\r\n              xs: layer.excess || 0,\r\n              premium: layerMultiplePrices ? utils.string.t('app.various') : layerPremiumByCurrency[layerCurrency] || 0,\r\n              written: layerWritten ? layerWritten / 100 : 0,\r\n              signed: layerSigned ? layerSigned / 100 : 0,\r\n            });\r\n          }\r\n        });\r\n\r\n        return arr;\r\n      }, [])\r\n      .sort(\r\n        firstBy(utils.sort.array('numeric', 'order'))\r\n          .thenBy(utils.sort.array('numeric', 'amount', 'desc'))\r\n          .thenBy(utils.sort.array('numeric', 'excess', 'desc'))\r\n      );\r\n  },\r\n};\r\n\r\nexport default utilsLayers;\r\n"]},"metadata":{},"sourceType":"module"}