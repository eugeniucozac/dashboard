{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ClaimsManagement\\\\ClaimsManagement.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as Yup from 'yup';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup'; // app\n\nimport styles from './ClaimsManagement.styles';\nimport { ClaimsManagementView } from './ClaimsManagement.view';\nimport { getClaimsProcessing, hideModal, resetClaimProcessingFilters, resetClaimsProcessingFilters, resetClaimsProcessingItems, resetClaimsProcessingSearch, selectUser, selectClaimsProcessing, selectClaimsProcessingItems, selectClaimProcessingFilterValues, selectClaimsProcessingFilterLoading, selectClaimsProcessingSelected, showModal, updateClaimProcessingFilters, selectClaimViewNavigation, processingClaimViewNavigation } from 'stores';\nimport { MultiSelect, FormDate } from 'components';\nimport { useFlexiColumns } from 'hooks';\nimport * as constants from 'consts';\nimport * as utils from 'utils'; // mui\n\nimport { makeStyles } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ClaimsManagement() {\n  _s();\n\n  var classes = makeStyles(styles, {\n    name: 'ClaimsManagement'\n  })();\n  var dispatch = useDispatch();\n  var user = useSelector(selectUser);\n  var userHasMyClaimsPermission = utils.app.access.feature('claimsProcessing.myClaims', ['read', 'create', 'update'], user);\n  var userHasMyTeamClaimsPermission = utils.app.access.feature('claimsProcessing.myTeamClaims', ['read', 'create', 'update'], user);\n  var userHasAllClaimsPermission = utils.app.access.feature('claimsProcessing.allClaims', ['read', 'create', 'update'], user);\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      searchTerm = _useState2[0],\n      setSearchTerm = _useState2[1];\n\n  var selectedView = useSelector(selectClaimViewNavigation);\n\n  var _useState3 = useState(selectedView || constants.CLAIM_TEAM_TYPE.myClaims),\n      _useState4 = _slicedToArray(_useState3, 2),\n      claimsType = _useState4[0],\n      setClaimsType = _useState4[1];\n\n  var _useState5 = useState(constants.CLAIMS_SEARCH_OPTION_CLAIM_REF),\n      _useState6 = _slicedToArray(_useState5, 2),\n      searchBy = _useState6[0],\n      setSearchBy = _useState6[1];\n\n  var _useState7 = useState(utils.string.t('claims.searchByClaims.options.ClaimRef')),\n      _useState8 = _slicedToArray(_useState7, 2),\n      searchByText = _useState8[0],\n      setSearchByText = _useState8[1];\n\n  var isDirtyRef = useRef(false);\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      isClosedClaimsEnabled = _useState10[0],\n      setIsClosedClaimsEnabled = _useState10[1];\n\n  var _useState11 = useState(true),\n      _useState12 = _slicedToArray(_useState11, 2),\n      myClaimsFirstTimeLoad = _useState12[0],\n      setMyClaimsFirstTimeLoad = _useState12[1];\n\n  var _useState13 = useState(true),\n      _useState14 = _slicedToArray(_useState13, 2),\n      myTeamClaimsFirstTimeLoad = _useState14[0],\n      setMyTeamClaimsFirstTimeLoad = _useState14[1];\n\n  var _useState15 = useState(true),\n      _useState16 = _slicedToArray(_useState15, 2),\n      allClaimsFirstTimeLoad = _useState16[0],\n      setAllClaimsFirstTimeLoad = _useState16[1];\n\n  var firstTimeSortColumns = 'createdDate, priority';\n  var claimsProcessing = useSelector(selectClaimsProcessing);\n  var claimsProcessingItems = useSelector(selectClaimsProcessingItems);\n  var claimProcessingFilterDropDown = useSelector(selectClaimProcessingFilterValues);\n  var claimsProcessingSelected = useSelector(selectClaimsProcessingSelected);\n  var isFetchingFilters = useSelector(selectClaimsProcessingFilterLoading);\n  var searchTypeCall = constants.CLAIM_PROCESSING_REQ_TYPES.search;\n  var filterTypeCall = constants.CLAIM_PROCESSING_REQ_TYPES.filter;\n  var selectOptions = [{\n    label: utils.string.t('claims.searchByClaims.options.ClaimRef'),\n    value: constants.CLAIMS_SEARCH_OPTION_CLAIM_REF\n  }, {\n    label: utils.string.t('claims.searchByClaims.options.PolicyRef'),\n    value: constants.CLAIMS_SEARCH_OPTION_POLICY_REF\n  }, {\n    label: utils.string.t('claims.searchByClaims.options.Insured'),\n    value: constants.CLAIMS_SEARCH_OPTION_INSURED\n  }, {\n    label: utils.string.t('claims.searchByClaims.options.AssignedTo'),\n    value: constants.CLAIMS_SEARCH_OPTION_ASSIGNED_TO\n  }, {\n    label: utils.string.t('claims.searchByClaims.options.LossRef'),\n    value: constants.CLAIMS_SEARCH_OPTION_LOSS_REF\n  }];\n  var viewFields = [{\n    name: 'views',\n    type: 'radio',\n    value: claimsType,\n    defaultValue: claimsType,\n    muiFormGroupProps: {\n      row: true,\n      nestedClasses: {\n        root: classes.adjusterRadioGroup\n      },\n      classes: {\n        root: classes.radioLabel\n      },\n      onChange: function onChange(value) {\n        setClaimsType(value);\n        dispatch(processingClaimViewNavigation(value));\n        setValue('includeClosedClaims', false);\n        setIsClosedClaimsEnabled(false);\n      }\n    },\n    options: [].concat(_toConsumableArray(userHasMyClaimsPermission ? [{\n      value: constants.CLAIM_TEAM_TYPE.myClaims,\n      label: utils.string.t('claims.processing.myClaims')\n    }] : []), _toConsumableArray(userHasMyTeamClaimsPermission ? [{\n      value: constants.CLAIM_TEAM_TYPE.myTeamClaims,\n      label: utils.string.t('claims.processing.myTeamClaims')\n    }] : []), _toConsumableArray(userHasAllClaimsPermission ? [{\n      value: constants.CLAIM_TEAM_TYPE.allClaims,\n      label: utils.string.t('claims.processing.allClaims')\n    }] : []))\n  }, {\n    name: 'searchBy',\n    type: 'autocompletemui',\n    options: selectOptions,\n    value: (selectOptions === null || selectOptions === void 0 ? void 0 : selectOptions.find(function (item) {\n      return (item === null || item === void 0 ? void 0 : item.value) === constants.CLAIMS_SEARCH_OPTION_CLAIM_REF;\n    })) || null,\n    validation: Yup.object().nullable().required(utils.string.t('validation.required')),\n    muiComponentProps: {\n      inputProps: {\n        title: searchByText || ''\n      }\n    }\n  }, {\n    name: 'createdDate',\n    type: 'datepicker',\n    value: null\n  }, {\n    name: 'includeClosedClaims',\n    type: 'switch',\n    value: false,\n    muiComponentProps: {\n      onChange: function onChange(name, checked) {\n        setIsClosedClaimsEnabled(checked);\n      }\n    }\n  }];\n  var defaultValues = utils.form.getInitialValues(viewFields);\n  var validationSchema = utils.form.getValidationSchema(viewFields);\n\n  var _useForm = useForm(_objectSpread({\n    defaultValues: defaultValues\n  }, validationSchema && {\n    resolver: yupResolver(validationSchema)\n  })),\n      control = _useForm.control,\n      setValue = _useForm.setValue;\n\n  var tableFilterFields = [{\n    id: 'createdDate',\n    type: 'datepicker',\n    label: utils.string.t('claims.columns.claimsList.dateAndTimeCreated'),\n    value: '',\n    content: /*#__PURE__*/_jsxDEV(FormDate, _objectSpread(_objectSpread({\n      control: control\n    }, utils.form.getFieldProps(defaultValues, 'createdDate')), {}, {\n      id: \"creationdatepicker\",\n      name: \"createdDate\",\n      type: \"datepicker\",\n      value: '',\n      label: '',\n      plainText: true,\n      plainTextIcon: true,\n      placeholder: utils.string.t('app.selectDate'),\n      muiComponentProps: {\n        fullWidth: false,\n        margin: 'dense'\n      },\n      muiPickerProps: {\n        clearable: false,\n        variant: 'inline',\n        format: 'DD-MM-YYYY'\n      }\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }, this)\n  }, {\n    id: 'team',\n    type: 'multiSelect',\n    label: utils.string.t('claims.columns.claimsList.team'),\n    placeholder: utils.string.t('claims.filterPlaceHolderText'),\n    value: [],\n    options: claimProcessingFilterDropDown === null || claimProcessingFilterDropDown === void 0 ? void 0 : claimProcessingFilterDropDown.team,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"team\",\n      search: true,\n      options: claimProcessingFilterDropDown === null || claimProcessingFilterDropDown === void 0 ? void 0 : claimProcessingFilterDropDown.team\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 16\n    }, this)\n  }, {\n    id: 'assignedTo',\n    type: 'multiSelect',\n    label: utils.string.t('claims.columns.claimsList.assignedTo'),\n    value: [],\n    options: claimProcessingFilterDropDown === null || claimProcessingFilterDropDown === void 0 ? void 0 : claimProcessingFilterDropDown.assignedTo,\n    nestedClasses: {\n      root: classes.fieldWidth\n    },\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"assignedTo\",\n      search: true,\n      options: claimProcessingFilterDropDown === null || claimProcessingFilterDropDown === void 0 ? void 0 : claimProcessingFilterDropDown.assignedTo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 16\n    }, this)\n  }, {\n    id: 'priority',\n    type: 'multiSelect',\n    label: utils.string.t('claims.claimInformation.priority'),\n    placeholder: utils.string.t('claims.filterPlaceHolderText'),\n    value: [],\n    options: claimProcessingFilterDropDown === null || claimProcessingFilterDropDown === void 0 ? void 0 : claimProcessingFilterDropDown.priority,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"priority\",\n      search: true,\n      options: claimProcessingFilterDropDown === null || claimProcessingFilterDropDown === void 0 ? void 0 : claimProcessingFilterDropDown.priority\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 16\n    }, this)\n  }, {\n    id: 'processState',\n    type: 'multiSelect',\n    label: utils.string.t('claims.columns.claimsManagement.status'),\n    placeholder: utils.string.t('claims.filterPlaceHolderText'),\n    value: [],\n    options: claimProcessingFilterDropDown === null || claimProcessingFilterDropDown === void 0 ? void 0 : claimProcessingFilterDropDown.processState,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"processState\",\n      search: true,\n      options: claimProcessingFilterDropDown === null || claimProcessingFilterDropDown === void 0 ? void 0 : claimProcessingFilterDropDown.processState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 16\n    }, this)\n  }, {\n    id: 'complexity',\n    type: 'multiSelect',\n    label: utils.string.t('claims.columns.claimsManagement.complexity'),\n    placeholder: utils.string.t('claims.filterPlaceHolderText'),\n    value: [],\n    options: claimProcessingFilterDropDown === null || claimProcessingFilterDropDown === void 0 ? void 0 : claimProcessingFilterDropDown.complexity,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"complexity\",\n      search: true,\n      options: claimProcessingFilterDropDown === null || claimProcessingFilterDropDown === void 0 ? void 0 : claimProcessingFilterDropDown.complexity\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 16\n    }, this)\n  }];\n  useEffect(function () {\n    if (claimsType) {\n      setValue('createdDate', null);\n\n      if (claimsType === constants.CLAIM_TEAM_TYPE.allClaims) {\n        setIsClosedClaimsEnabled(false);\n      } // defect - 14469 - Default sorting is not applying on Date &Time created and Priority columns\n      // First Time Table Grid load for MyClaims, MyTeamClaims, All Claims passing createdDate and Priority columns from UI.\n\n\n      if (myClaimsFirstTimeLoad && claimsType === constants.CLAIM_TEAM_TYPE.myClaims || myTeamClaimsFirstTimeLoad && claimsType === constants.CLAIM_TEAM_TYPE.myTeamClaims || allClaimsFirstTimeLoad && claimsType === constants.CLAIM_TEAM_TYPE.allClaims) {\n        if (claimsType === constants.CLAIM_TEAM_TYPE.myClaims) setMyClaimsFirstTimeLoad(!myClaimsFirstTimeLoad);\n        if (claimsType === constants.CLAIM_TEAM_TYPE.myTeamClaims) setMyTeamClaimsFirstTimeLoad(!myTeamClaimsFirstTimeLoad);\n        if (claimsType === constants.CLAIM_TEAM_TYPE.allClaims) setAllClaimsFirstTimeLoad(!allClaimsFirstTimeLoad);\n        dispatch(getClaimsProcessing({\n          requestType: searchTypeCall,\n          claimsType: claimsType,\n          filterTerm: [],\n          searchBy: searchBy,\n          pullClosedRecords: isClosedClaimsEnabled,\n          firstTimeSort: firstTimeSortColumns\n        }));\n        dispatch(getClaimsProcessing({\n          requestType: filterTypeCall,\n          claimsType: claimsType,\n          filterTerm: [],\n          searchBy: searchBy,\n          pullClosedRecords: isClosedClaimsEnabled,\n          firstTimeSort: firstTimeSortColumns\n        }));\n      } else {\n        // From second time onwards, table grid load from else part for single column sorting.\n        dispatch(getClaimsProcessing({\n          requestType: searchTypeCall,\n          claimsType: claimsType,\n          filterTerm: [],\n          searchBy: searchBy,\n          pullClosedRecords: isClosedClaimsEnabled\n        }));\n        dispatch(getClaimsProcessing({\n          requestType: filterTypeCall,\n          claimsType: claimsType,\n          filterTerm: [],\n          searchBy: searchBy,\n          pullClosedRecords: isClosedClaimsEnabled\n        }));\n      }\n    } // cleanup\n\n\n    return function () {\n      setSearchTerm('');\n      dispatch(resetClaimsProcessingSearch());\n      dispatch(resetClaimsProcessingFilters());\n      dispatch(resetClaimsProcessingItems());\n    };\n  }, [claimsType, isClosedClaimsEnabled]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var handleSearch = function handleSearch(queryObject) {\n    if (queryObject.search) {\n      setSearchTerm(queryObject.search);\n      dispatch(getClaimsProcessing({\n        requestType: searchTypeCall,\n        claimsType: claimsType,\n        term: queryObject.search,\n        direction: 'desc',\n        searchBy: searchBy,\n        pullClosedRecords: isClosedClaimsEnabled\n      }));\n      dispatch(getClaimsProcessing({\n        requestType: filterTypeCall,\n        claimsType: claimsType,\n        term: queryObject.search,\n        direction: 'desc',\n        searchBy: searchBy,\n        filterTerm: queryObject.filters,\n        pullClosedRecords: isClosedClaimsEnabled\n      }));\n    }\n  };\n\n  var handleChangePage = function handleChangePage(newPage) {\n    dispatch(getClaimsProcessing({\n      requestType: searchTypeCall,\n      claimsType: claimsType,\n      page: newPage,\n      term: searchTerm,\n      searchBy: searchBy,\n      pullClosedRecords: isClosedClaimsEnabled\n    }));\n  };\n\n  var handleResetFilter = function handleResetFilter() {\n    setValue('createdDate', null);\n    dispatch(resetClaimProcessingFilters());\n    dispatch(getClaimsProcessing({\n      requestType: searchTypeCall,\n      claimsType: claimsType,\n      term: searchTerm,\n      filterTerm: '',\n      direction: 'desc',\n      searchBy: searchBy,\n      pullClosedRecords: isClosedClaimsEnabled\n    }));\n    dispatch(getClaimsProcessing({\n      requestType: filterTypeCall,\n      claimsType: claimsType,\n      term: searchTerm,\n      filterTerm: '',\n      direction: 'desc',\n      searchBy: searchBy,\n      pullClosedRecords: isClosedClaimsEnabled\n    }));\n  };\n\n  var handleSearchFilter = function handleSearchFilter(data) {\n    dispatch(updateClaimProcessingFilters({\n      claimsType: claimsType,\n      search: data === null || data === void 0 ? void 0 : data.search,\n      filters: data.filters,\n      pullClosedRecords: isClosedClaimsEnabled\n    }));\n    return dispatch(getClaimsProcessing({\n      requestType: searchTypeCall,\n      claimsType: claimsType,\n      term: data.search,\n      filterTerm: data.filters,\n      searchBy: searchBy,\n      pullClosedRecords: isClosedClaimsEnabled\n    }));\n  };\n\n  var handleChangeRowsPerPage = function handleChangeRowsPerPage(rowsPerPage) {\n    dispatch(getClaimsProcessing({\n      requestType: searchTypeCall,\n      claimsType: claimsType,\n      size: rowsPerPage,\n      term: searchTerm,\n      searchBy: searchBy,\n      pullClosedRecords: isClosedClaimsEnabled\n    }));\n  };\n\n  var handleSort = function handleSort(by, dir) {\n    dispatch(getClaimsProcessing({\n      requestType: searchTypeCall,\n      claimsType: claimsType,\n      sortBy: by,\n      direction: dir.toUpperCase(),\n      term: searchTerm,\n      searchBy: searchBy,\n      pullClosedRecords: isClosedClaimsEnabled\n    }));\n  };\n\n  var handleResetSearch = function handleResetSearch() {\n    dispatch(resetClaimsProcessingSearch());\n    dispatch(getClaimsProcessing({\n      requestType: searchTypeCall,\n      claimsType: claimsType,\n      filterTerm: [],\n      searchBy: searchBy,\n      pullClosedRecords: isClosedClaimsEnabled\n    }));\n    dispatch(getClaimsProcessing({\n      requestType: filterTypeCall,\n      claimsType: claimsType,\n      filterTerm: [],\n      searchBy: searchBy,\n      pullClosedRecords: isClosedClaimsEnabled\n    }));\n  };\n\n  var onSelectSearchBy = function onSelectSearchBy(searchByValue, searchByLabel) {\n    setSearchByText(searchByLabel);\n    setSearchBy(searchByValue);\n    dispatch(getClaimsProcessing({\n      requestType: searchTypeCall,\n      claimsType: claimsType,\n      searchBy: searchByValue,\n      term: searchTerm,\n      pullClosedRecords: isClosedClaimsEnabled\n    }));\n    dispatch(getClaimsProcessing({\n      requestType: filterTypeCall,\n      claimsType: claimsType,\n      searchBy: searchByValue,\n      term: searchTerm,\n      pullClosedRecords: isClosedClaimsEnabled\n    }));\n  };\n\n  var handleCloseModal = function handleCloseModal() {\n    dispatch(hideModal('BULK_ASSIGN_CLAIMS'));\n  };\n\n  var setIsReassignFormDirty = function setIsReassignFormDirty(isDirty) {\n    isDirtyRef.current = isDirty;\n  };\n\n  var bulkAssignConfirm = function bulkAssignConfirm() {\n    if (isDirtyRef.current) {\n      dispatch(showModal({\n        component: 'CONFIRM',\n        props: {\n          title: utils.string.t('navigation.form.subtitle'),\n          hint: utils.string.t('navigation.form.title'),\n          fullWidth: true,\n          maxWidth: 'xs',\n          componentProps: {\n            cancelLabel: utils.string.t('app.no'),\n            confirmLabel: utils.string.t('app.yes'),\n            submitHandler: function submitHandler() {\n              handleCloseModal();\n            }\n          }\n        }\n      }));\n    } else {\n      handleCloseModal();\n    }\n  };\n\n  var bulkAssignClaims = function bulkAssignClaims() {\n    if (utils.generic.isValidArray(claimsProcessingSelected, true)) {\n      dispatch(showModal({\n        component: 'BULK_ASSIGN_CLAIMS',\n        props: {\n          title: 'claims.processing.bulkAssign.title',\n          fullWidth: true,\n          maxWidth: 'sm',\n          hideCompOnBlur: false,\n          componentProps: {\n            claimsProcessingSelected: claimsProcessingSelected,\n            claimsType: claimsType,\n            setIsDirty: setIsReassignFormDirty,\n            clickXHandler: function clickXHandler() {\n              bulkAssignConfirm();\n            },\n            clickOutSideHandler: function clickOutSideHandler() {\n              bulkAssignConfirm();\n            },\n            cancelHandler: function cancelHandler() {\n              bulkAssignConfirm();\n            }\n          }\n        }\n      }));\n    }\n  };\n\n  var columns = [{\n    id: 'claimRef',\n    label: utils.string.t('claims.columns.claimsManagement.ref'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    narrow: true,\n    nowrap: true,\n    visible: true,\n    mandatory: true\n  }, {\n    id: 'lossRef',\n    label: utils.string.t('claims.columns.claimsManagement.lossRef'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    narrow: true,\n    nowrap: true,\n    visible: true,\n    mandatory: true\n  }, {\n    id: 'catCodesID',\n    label: utils.string.t('claims.columns.claimsManagement.catCode'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    ellipsis: true,\n    visible: true\n  }, {\n    id: 'claimReceivedDateTime',\n    label: utils.string.t('claims.columns.claimsManagement.claimReceivedDateTime'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    narrow: true,\n    nowrap: true\n  }, {\n    id: 'createdDate',\n    label: utils.string.t('claims.columns.claimsManagement.createdDate'),\n    sort: {\n      type: 'date',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }, {\n    id: 'processState',\n    label: utils.string.t('claims.columns.claimsManagement.status'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }, {\n    id: 'closedDate',\n    label: utils.string.t('claims.columns.claimsManagement.closedDate'),\n    sort: {\n      type: 'date',\n      direction: 'asc'\n    },\n    nowrap: true\n  }, {\n    id: 'complexity',\n    label: utils.string.t('claims.columns.claimsManagement.complexity'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true\n  }, {\n    id: 'team',\n    label: utils.string.t('claims.columns.claimsManagement.team'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true,\n    mandatory: true\n  }, {\n    id: 'assignedTo',\n    label: utils.string.t('claims.columns.claimsManagement.assignedTo'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true,\n    mandatory: true,\n    nowrap: true\n  }, {\n    id: 'priority',\n    label: utils.string.t('claims.columns.claimsManagement.priority'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }, {\n    id: 'ucr',\n    label: utils.string.t('claims.columns.claimsManagement.ucr'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }, {\n    id: 'policyRef',\n    label: utils.string.t('claims.columns.claimsManagement.policyRef'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }, {\n    id: 'policyType',\n    label: utils.string.t('claims.columns.claimsManagement.policyType'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true\n  }, {\n    id: 'claimantName',\n    label: utils.string.t('claims.columns.claimsManagement.claimant'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true,\n    ellipsis: true\n  }, {\n    id: 'assured',\n    label: utils.string.t('claims.columns.claimsManagement.insured'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    ellipsis: true,\n    visible: true\n  }, {\n    id: 'reinsured',\n    label: utils.string.t('claims.columns.claimsManagement.reinsured'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true\n  }, {\n    id: 'client',\n    label: utils.string.t('claims.columns.claimsManagement.client'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    }\n  }, {\n    id: 'interest',\n    label: utils.string.t('claims.columns.claimsManagement.interest'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true\n  }, {\n    id: 'createdBy',\n    label: utils.string.t('claims.columns.claimsManagement.createdBy'),\n    sort: {\n      type: 'numeric',\n      direction: 'asc'\n    },\n    nowrap: true\n  }, {\n    id: 'company',\n    label: utils.string.t('claims.columns.claimsManagement.company'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    }\n  }, {\n    id: 'division',\n    label: utils.string.t('claims.columns.claimsManagement.division'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true\n  }, {\n    id: 'coverholder',\n    label: utils.string.t('claims.columns.claimsManagement.coverholder'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true\n  }, {\n    id: 'lossFromDate',\n    label: utils.string.t('claims.columns.claimsManagement.lossDateFrom'),\n    sort: {\n      type: 'date',\n      direction: 'asc'\n    },\n    nowrap: true\n  }, {\n    id: 'lossToDate',\n    label: utils.string.t('claims.columns.claimsManagement.lossDateTo'),\n    sort: {\n      type: 'date',\n      direction: 'asc'\n    },\n    nowrap: true\n  }, {\n    id: 'lossDateQualifier',\n    label: utils.string.t('claims.columns.claimsManagement.lossDateQualifier'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true\n  }, {\n    id: 'lossDetails',\n    label: utils.string.t('claims.columns.claimsManagement.lossDetails'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    ellipsis: true\n  }, {\n    id: 'pasClaimRef',\n    label: utils.string.t('claims.columns.claimsManagement.pasClaimRef'),\n    sort: {\n      type: 'numeric',\n      direction: 'asc'\n    },\n    nowrap: true\n  }, {\n    id: 'pasStatus',\n    label: utils.string.t('claims.columns.claimsManagement.pasStatus'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true\n  }, {\n    id: 'actions',\n    menu: true,\n    visible: true,\n    mandatory: true\n  }];\n\n  var _useFlexiColumns = useFlexiColumns(columns),\n      columnsArray = _useFlexiColumns.columns,\n      columnProps = _useFlexiColumns.columnProps,\n      toggleColumn = _useFlexiColumns.toggleColumn;\n\n  return /*#__PURE__*/_jsxDEV(ClaimsManagementView, {\n    claims: claimsProcessingItems,\n    claimsProcessing: claimsProcessing,\n    sort: _objectSpread({}, claimsProcessing.sort),\n    columnsArray: columnsArray,\n    columnProps: columnProps,\n    viewFields: viewFields,\n    claimsType: claimsType,\n    tableFilterFields: tableFilterFields,\n    isFetchingFilters: isFetchingFilters,\n    isBulkEnabled: [constants.CLAIM_TEAM_TYPE.myClaims, constants.CLAIM_TEAM_TYPE.myTeamClaims].includes(claimsType) && (claimsProcessingSelected === null || claimsProcessingSelected === void 0 ? void 0 : claimsProcessingSelected.length) >= 2 && (claimsProcessingSelected === null || claimsProcessingSelected === void 0 ? void 0 : claimsProcessingSelected.length) <= 10,\n    control: control,\n    searchTerm: searchTerm,\n    handlers: {\n      search: handleSearch,\n      searchFilter: handleSearchFilter,\n      resetFilter: handleResetFilter,\n      sort: handleSort,\n      changePage: handleChangePage,\n      changeRowsPerPage: handleChangeRowsPerPage,\n      toggleColumn: toggleColumn,\n      resetSearch: handleResetSearch,\n      bulkAssignClaims: bulkAssignClaims,\n      setClaimsType: setClaimsType,\n      onSelectSearchBy: onSelectSearchBy\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 715,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ClaimsManagement, \"BJioEiMYkB7lTB39nQsPT7+JNSY=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useForm, useFlexiColumns];\n});\n\n_c = ClaimsManagement;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimsManagement\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ClaimsManagement/ClaimsManagement.js"],"names":["React","useRef","useState","useEffect","useDispatch","useSelector","Yup","useForm","yupResolver","styles","ClaimsManagementView","getClaimsProcessing","hideModal","resetClaimProcessingFilters","resetClaimsProcessingFilters","resetClaimsProcessingItems","resetClaimsProcessingSearch","selectUser","selectClaimsProcessing","selectClaimsProcessingItems","selectClaimProcessingFilterValues","selectClaimsProcessingFilterLoading","selectClaimsProcessingSelected","showModal","updateClaimProcessingFilters","selectClaimViewNavigation","processingClaimViewNavigation","MultiSelect","FormDate","useFlexiColumns","constants","utils","makeStyles","ClaimsManagement","classes","name","dispatch","user","userHasMyClaimsPermission","app","access","feature","userHasMyTeamClaimsPermission","userHasAllClaimsPermission","searchTerm","setSearchTerm","selectedView","CLAIM_TEAM_TYPE","myClaims","claimsType","setClaimsType","CLAIMS_SEARCH_OPTION_CLAIM_REF","searchBy","setSearchBy","string","t","searchByText","setSearchByText","isDirtyRef","isClosedClaimsEnabled","setIsClosedClaimsEnabled","myClaimsFirstTimeLoad","setMyClaimsFirstTimeLoad","myTeamClaimsFirstTimeLoad","setMyTeamClaimsFirstTimeLoad","allClaimsFirstTimeLoad","setAllClaimsFirstTimeLoad","firstTimeSortColumns","claimsProcessing","claimsProcessingItems","claimProcessingFilterDropDown","claimsProcessingSelected","isFetchingFilters","searchTypeCall","CLAIM_PROCESSING_REQ_TYPES","search","filterTypeCall","filter","selectOptions","label","value","CLAIMS_SEARCH_OPTION_POLICY_REF","CLAIMS_SEARCH_OPTION_INSURED","CLAIMS_SEARCH_OPTION_ASSIGNED_TO","CLAIMS_SEARCH_OPTION_LOSS_REF","viewFields","type","defaultValue","muiFormGroupProps","row","nestedClasses","root","adjusterRadioGroup","radioLabel","onChange","setValue","options","myTeamClaims","allClaims","find","item","validation","object","nullable","required","muiComponentProps","inputProps","title","checked","defaultValues","form","getInitialValues","validationSchema","getValidationSchema","resolver","control","tableFilterFields","id","content","getFieldProps","fullWidth","margin","clearable","variant","format","placeholder","team","assignedTo","fieldWidth","priority","processState","complexity","requestType","filterTerm","pullClosedRecords","firstTimeSort","handleSearch","queryObject","term","direction","filters","handleChangePage","newPage","page","handleResetFilter","handleSearchFilter","data","handleChangeRowsPerPage","rowsPerPage","size","handleSort","by","dir","sortBy","toUpperCase","handleResetSearch","onSelectSearchBy","searchByValue","searchByLabel","handleCloseModal","setIsReassignFormDirty","isDirty","current","bulkAssignConfirm","component","props","hint","maxWidth","componentProps","cancelLabel","confirmLabel","submitHandler","bulkAssignClaims","generic","isValidArray","hideCompOnBlur","setIsDirty","clickXHandler","clickOutSideHandler","cancelHandler","columns","sort","narrow","nowrap","visible","mandatory","ellipsis","menu","columnsArray","columnProps","toggleColumn","includes","length","searchFilter","resetFilter","changePage","changeRowsPerPage","resetSearch"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport * as Yup from 'yup';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n\r\n// app\r\nimport styles from './ClaimsManagement.styles';\r\nimport { ClaimsManagementView } from './ClaimsManagement.view';\r\nimport {\r\n  getClaimsProcessing,\r\n  hideModal,\r\n  resetClaimProcessingFilters,\r\n  resetClaimsProcessingFilters,\r\n  resetClaimsProcessingItems,\r\n  resetClaimsProcessingSearch,\r\n  selectUser,\r\n  selectClaimsProcessing,\r\n  selectClaimsProcessingItems,\r\n  selectClaimProcessingFilterValues,\r\n  selectClaimsProcessingFilterLoading,\r\n  selectClaimsProcessingSelected,\r\n  showModal,\r\n  updateClaimProcessingFilters,\r\n  selectClaimViewNavigation,\r\n  processingClaimViewNavigation,\r\n} from 'stores';\r\nimport { MultiSelect, FormDate } from 'components';\r\nimport { useFlexiColumns } from 'hooks';\r\nimport * as constants from 'consts';\r\nimport * as utils from 'utils';\r\n\r\n// mui\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nexport default function ClaimsManagement() {\r\n  const classes = makeStyles(styles, { name: 'ClaimsManagement' })();\r\n  const dispatch = useDispatch();\r\n\r\n  const user = useSelector(selectUser);\r\n  const userHasMyClaimsPermission = utils.app.access.feature('claimsProcessing.myClaims', ['read', 'create', 'update'], user);\r\n  const userHasMyTeamClaimsPermission = utils.app.access.feature('claimsProcessing.myTeamClaims', ['read', 'create', 'update'], user);\r\n  const userHasAllClaimsPermission = utils.app.access.feature('claimsProcessing.allClaims', ['read', 'create', 'update'], user);\r\n\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const selectedView = useSelector(selectClaimViewNavigation);\r\n  const [claimsType, setClaimsType] = useState(selectedView || constants.CLAIM_TEAM_TYPE.myClaims);\r\n  const [searchBy, setSearchBy] = useState(constants.CLAIMS_SEARCH_OPTION_CLAIM_REF);\r\n  const [searchByText, setSearchByText] = useState(utils.string.t('claims.searchByClaims.options.ClaimRef'));\r\n  const isDirtyRef = useRef(false);\r\n  const [isClosedClaimsEnabled, setIsClosedClaimsEnabled] = useState(false);\r\n  const [myClaimsFirstTimeLoad, setMyClaimsFirstTimeLoad] = useState(true);\r\n  const [myTeamClaimsFirstTimeLoad, setMyTeamClaimsFirstTimeLoad] = useState(true);\r\n  const [allClaimsFirstTimeLoad, setAllClaimsFirstTimeLoad] = useState(true);\r\n  const firstTimeSortColumns = 'createdDate, priority';\r\n\r\n  const claimsProcessing = useSelector(selectClaimsProcessing);\r\n  const claimsProcessingItems = useSelector(selectClaimsProcessingItems);\r\n  const claimProcessingFilterDropDown = useSelector(selectClaimProcessingFilterValues);\r\n  const claimsProcessingSelected = useSelector(selectClaimsProcessingSelected);\r\n  const isFetchingFilters = useSelector(selectClaimsProcessingFilterLoading);\r\n\r\n  const searchTypeCall = constants.CLAIM_PROCESSING_REQ_TYPES.search;\r\n  const filterTypeCall = constants.CLAIM_PROCESSING_REQ_TYPES.filter;\r\n\r\n  const selectOptions = [\r\n    { label: utils.string.t('claims.searchByClaims.options.ClaimRef'), value: constants.CLAIMS_SEARCH_OPTION_CLAIM_REF },\r\n    { label: utils.string.t('claims.searchByClaims.options.PolicyRef'), value: constants.CLAIMS_SEARCH_OPTION_POLICY_REF },\r\n    { label: utils.string.t('claims.searchByClaims.options.Insured'), value: constants.CLAIMS_SEARCH_OPTION_INSURED },\r\n    { label: utils.string.t('claims.searchByClaims.options.AssignedTo'), value: constants.CLAIMS_SEARCH_OPTION_ASSIGNED_TO },\r\n    { label: utils.string.t('claims.searchByClaims.options.LossRef'), value: constants.CLAIMS_SEARCH_OPTION_LOSS_REF },\r\n  ];\r\n\r\n  const viewFields = [\r\n    {\r\n      name: 'views',\r\n      type: 'radio',\r\n      value: claimsType,\r\n      defaultValue: claimsType,\r\n      muiFormGroupProps: {\r\n        row: true,\r\n        nestedClasses: { root: classes.adjusterRadioGroup },\r\n        classes: {\r\n          root: classes.radioLabel,\r\n        },\r\n        onChange: (value) => {\r\n          setClaimsType(value);\r\n          dispatch(processingClaimViewNavigation(value));\r\n          setValue('includeClosedClaims', false);\r\n          setIsClosedClaimsEnabled(false);\r\n        },\r\n      },\r\n      options: [\r\n        ...(userHasMyClaimsPermission\r\n          ? [\r\n              {\r\n                value: constants.CLAIM_TEAM_TYPE.myClaims,\r\n                label: utils.string.t('claims.processing.myClaims'),\r\n              },\r\n            ]\r\n          : []),\r\n        ...(userHasMyTeamClaimsPermission\r\n          ? [\r\n              {\r\n                value: constants.CLAIM_TEAM_TYPE.myTeamClaims,\r\n                label: utils.string.t('claims.processing.myTeamClaims'),\r\n              },\r\n            ]\r\n          : []),\r\n        ...(userHasAllClaimsPermission\r\n          ? [\r\n              {\r\n                value: constants.CLAIM_TEAM_TYPE.allClaims,\r\n                label: utils.string.t('claims.processing.allClaims'),\r\n              },\r\n            ]\r\n          : []),\r\n      ],\r\n    },\r\n    {\r\n      name: 'searchBy',\r\n      type: 'autocompletemui',\r\n      options: selectOptions,\r\n      value: selectOptions?.find((item) => item?.value === constants.CLAIMS_SEARCH_OPTION_CLAIM_REF) || null,\r\n      validation: Yup.object().nullable().required(utils.string.t('validation.required')),\r\n      muiComponentProps: {\r\n        inputProps: {\r\n          title: searchByText || '',\r\n        },\r\n      },\r\n    },\r\n    { name: 'createdDate', type: 'datepicker', value: null },\r\n    {\r\n      name: 'includeClosedClaims',\r\n      type: 'switch',\r\n      value: false,\r\n      muiComponentProps: {\r\n        onChange: (name, checked) => {\r\n          setIsClosedClaimsEnabled(checked);\r\n        },\r\n      },\r\n    },\r\n  ];\r\n\r\n  const defaultValues = utils.form.getInitialValues(viewFields);\r\n  const validationSchema = utils.form.getValidationSchema(viewFields);\r\n\r\n  const { control, setValue } = useForm({\r\n    defaultValues,\r\n    ...(validationSchema && { resolver: yupResolver(validationSchema) }),\r\n  });\r\n\r\n  const tableFilterFields = [\r\n    {\r\n      id: 'createdDate',\r\n      type: 'datepicker',\r\n      label: utils.string.t('claims.columns.claimsList.dateAndTimeCreated'),\r\n      value: '',\r\n      content: (\r\n        <FormDate\r\n          control={control}\r\n          {...utils.form.getFieldProps(defaultValues, 'createdDate')}\r\n          id=\"creationdatepicker\"\r\n          name=\"createdDate\"\r\n          type=\"datepicker\"\r\n          value={''}\r\n          label={''}\r\n          plainText\r\n          plainTextIcon\r\n          placeholder={utils.string.t('app.selectDate')}\r\n          muiComponentProps={{\r\n            fullWidth: false,\r\n            margin: 'dense',\r\n          }}\r\n          muiPickerProps={{\r\n            clearable: false,\r\n            variant: 'inline',\r\n            format: 'DD-MM-YYYY',\r\n          }}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      id: 'team',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('claims.columns.claimsList.team'),\r\n      placeholder: utils.string.t('claims.filterPlaceHolderText'),\r\n      value: [],\r\n      options: claimProcessingFilterDropDown?.team,\r\n      content: <MultiSelect id=\"team\" search options={claimProcessingFilterDropDown?.team} />,\r\n    },\r\n    {\r\n      id: 'assignedTo',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('claims.columns.claimsList.assignedTo'),\r\n      value: [],\r\n      options: claimProcessingFilterDropDown?.assignedTo,\r\n      nestedClasses: { root: classes.fieldWidth },\r\n      content: <MultiSelect id=\"assignedTo\" search options={claimProcessingFilterDropDown?.assignedTo} />,\r\n    },\r\n    {\r\n      id: 'priority',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('claims.claimInformation.priority'),\r\n      placeholder: utils.string.t('claims.filterPlaceHolderText'),\r\n      value: [],\r\n      options: claimProcessingFilterDropDown?.priority,\r\n      content: <MultiSelect id=\"priority\" search options={claimProcessingFilterDropDown?.priority} />,\r\n    },\r\n    {\r\n      id: 'processState',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('claims.columns.claimsManagement.status'),\r\n      placeholder: utils.string.t('claims.filterPlaceHolderText'),\r\n      value: [],\r\n      options: claimProcessingFilterDropDown?.processState,\r\n      content: <MultiSelect id=\"processState\" search options={claimProcessingFilterDropDown?.processState} />,\r\n    },\r\n    {\r\n      id: 'complexity',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('claims.columns.claimsManagement.complexity'),\r\n      placeholder: utils.string.t('claims.filterPlaceHolderText'),\r\n      value: [],\r\n      options: claimProcessingFilterDropDown?.complexity,\r\n      content: <MultiSelect id=\"complexity\" search options={claimProcessingFilterDropDown?.complexity} />,\r\n    },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    if (claimsType) {\r\n      setValue('createdDate', null);\r\n\r\n      if (claimsType === constants.CLAIM_TEAM_TYPE.allClaims) {\r\n        setIsClosedClaimsEnabled(false);\r\n      }\r\n\r\n      // defect - 14469 - Default sorting is not applying on Date &Time created and Priority columns\r\n      // First Time Table Grid load for MyClaims, MyTeamClaims, All Claims passing createdDate and Priority columns from UI.\r\n      if (\r\n        (myClaimsFirstTimeLoad && claimsType === constants.CLAIM_TEAM_TYPE.myClaims) ||\r\n        (myTeamClaimsFirstTimeLoad && claimsType === constants.CLAIM_TEAM_TYPE.myTeamClaims) ||\r\n        (allClaimsFirstTimeLoad && claimsType === constants.CLAIM_TEAM_TYPE.allClaims)\r\n      ) {\r\n        if (claimsType === constants.CLAIM_TEAM_TYPE.myClaims) setMyClaimsFirstTimeLoad(!myClaimsFirstTimeLoad);\r\n        if (claimsType === constants.CLAIM_TEAM_TYPE.myTeamClaims) setMyTeamClaimsFirstTimeLoad(!myTeamClaimsFirstTimeLoad);\r\n        if (claimsType === constants.CLAIM_TEAM_TYPE.allClaims) setAllClaimsFirstTimeLoad(!allClaimsFirstTimeLoad);\r\n\r\n        dispatch(\r\n          getClaimsProcessing({\r\n            requestType: searchTypeCall,\r\n            claimsType,\r\n            filterTerm: [],\r\n            searchBy,\r\n            pullClosedRecords: isClosedClaimsEnabled,\r\n            firstTimeSort: firstTimeSortColumns,\r\n          })\r\n        );\r\n        dispatch(\r\n          getClaimsProcessing({\r\n            requestType: filterTypeCall,\r\n            claimsType,\r\n            filterTerm: [],\r\n            searchBy,\r\n            pullClosedRecords: isClosedClaimsEnabled,\r\n            firstTimeSort: firstTimeSortColumns,\r\n          })\r\n        );\r\n      } else {\r\n        // From second time onwards, table grid load from else part for single column sorting.\r\n        dispatch(\r\n          getClaimsProcessing({\r\n            requestType: searchTypeCall,\r\n            claimsType,\r\n            filterTerm: [],\r\n            searchBy,\r\n            pullClosedRecords: isClosedClaimsEnabled,\r\n          })\r\n        );\r\n        dispatch(\r\n          getClaimsProcessing({\r\n            requestType: filterTypeCall,\r\n            claimsType,\r\n            filterTerm: [],\r\n            searchBy,\r\n            pullClosedRecords: isClosedClaimsEnabled,\r\n          })\r\n        );\r\n      }\r\n    }\r\n\r\n    // cleanup\r\n    return () => {\r\n      setSearchTerm('');\r\n      dispatch(resetClaimsProcessingSearch());\r\n      dispatch(resetClaimsProcessingFilters());\r\n      dispatch(resetClaimsProcessingItems());\r\n    };\r\n  }, [claimsType, isClosedClaimsEnabled]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const handleSearch = (queryObject) => {\r\n    if (queryObject.search) {\r\n      setSearchTerm(queryObject.search);\r\n      dispatch(\r\n        getClaimsProcessing({\r\n          requestType: searchTypeCall,\r\n          claimsType,\r\n          term: queryObject.search,\r\n          direction: 'desc',\r\n          searchBy,\r\n          pullClosedRecords: isClosedClaimsEnabled,\r\n        })\r\n      );\r\n      dispatch(\r\n        getClaimsProcessing({\r\n          requestType: filterTypeCall,\r\n          claimsType,\r\n          term: queryObject.search,\r\n          direction: 'desc',\r\n          searchBy,\r\n          filterTerm: queryObject.filters,\r\n          pullClosedRecords: isClosedClaimsEnabled,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleChangePage = (newPage) => {\r\n    dispatch(\r\n      getClaimsProcessing({\r\n        requestType: searchTypeCall,\r\n        claimsType,\r\n        page: newPage,\r\n        term: searchTerm,\r\n        searchBy,\r\n        pullClosedRecords: isClosedClaimsEnabled,\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleResetFilter = () => {\r\n    setValue('createdDate', null);\r\n    dispatch(resetClaimProcessingFilters());\r\n    dispatch(\r\n      getClaimsProcessing({\r\n        requestType: searchTypeCall,\r\n        claimsType,\r\n        term: searchTerm,\r\n        filterTerm: '',\r\n        direction: 'desc',\r\n        searchBy,\r\n        pullClosedRecords: isClosedClaimsEnabled,\r\n      })\r\n    );\r\n    dispatch(\r\n      getClaimsProcessing({\r\n        requestType: filterTypeCall,\r\n        claimsType,\r\n        term: searchTerm,\r\n        filterTerm: '',\r\n        direction: 'desc',\r\n        searchBy,\r\n        pullClosedRecords: isClosedClaimsEnabled,\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleSearchFilter = (data) => {\r\n    dispatch(\r\n      updateClaimProcessingFilters({ claimsType, search: data?.search, filters: data.filters, pullClosedRecords: isClosedClaimsEnabled })\r\n    );\r\n    return dispatch(\r\n      getClaimsProcessing({\r\n        requestType: searchTypeCall,\r\n        claimsType,\r\n        term: data.search,\r\n        filterTerm: data.filters,\r\n        searchBy,\r\n        pullClosedRecords: isClosedClaimsEnabled,\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (rowsPerPage) => {\r\n    dispatch(\r\n      getClaimsProcessing({\r\n        requestType: searchTypeCall,\r\n        claimsType,\r\n        size: rowsPerPage,\r\n        term: searchTerm,\r\n        searchBy,\r\n        pullClosedRecords: isClosedClaimsEnabled,\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleSort = (by, dir) => {\r\n    dispatch(\r\n      getClaimsProcessing({\r\n        requestType: searchTypeCall,\r\n        claimsType,\r\n        sortBy: by,\r\n        direction: dir.toUpperCase(),\r\n        term: searchTerm,\r\n        searchBy,\r\n        pullClosedRecords: isClosedClaimsEnabled,\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleResetSearch = () => {\r\n    dispatch(resetClaimsProcessingSearch());\r\n    dispatch(\r\n      getClaimsProcessing({ requestType: searchTypeCall, claimsType, filterTerm: [], searchBy, pullClosedRecords: isClosedClaimsEnabled })\r\n    );\r\n    dispatch(\r\n      getClaimsProcessing({\r\n        requestType: filterTypeCall,\r\n        claimsType,\r\n        filterTerm: [],\r\n        searchBy,\r\n        pullClosedRecords: isClosedClaimsEnabled,\r\n      })\r\n    );\r\n  };\r\n\r\n  const onSelectSearchBy = (searchByValue, searchByLabel) => {\r\n    setSearchByText(searchByLabel);\r\n    setSearchBy(searchByValue);\r\n    dispatch(\r\n      getClaimsProcessing({\r\n        requestType: searchTypeCall,\r\n        claimsType,\r\n        searchBy: searchByValue,\r\n        term: searchTerm,\r\n        pullClosedRecords: isClosedClaimsEnabled,\r\n      })\r\n    );\r\n    dispatch(\r\n      getClaimsProcessing({\r\n        requestType: filterTypeCall,\r\n        claimsType,\r\n        searchBy: searchByValue,\r\n        term: searchTerm,\r\n        pullClosedRecords: isClosedClaimsEnabled,\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    dispatch(hideModal('BULK_ASSIGN_CLAIMS'));\r\n  };\r\n\r\n  const setIsReassignFormDirty = (isDirty) => {\r\n    isDirtyRef.current = isDirty;\r\n  };\r\n\r\n  const bulkAssignConfirm = () => {\r\n    if (isDirtyRef.current) {\r\n      dispatch(\r\n        showModal({\r\n          component: 'CONFIRM',\r\n          props: {\r\n            title: utils.string.t('navigation.form.subtitle'),\r\n            hint: utils.string.t('navigation.form.title'),\r\n            fullWidth: true,\r\n            maxWidth: 'xs',\r\n            componentProps: {\r\n              cancelLabel: utils.string.t('app.no'),\r\n              confirmLabel: utils.string.t('app.yes'),\r\n              submitHandler: () => {\r\n                handleCloseModal();\r\n              },\r\n            },\r\n          },\r\n        })\r\n      );\r\n    } else {\r\n      handleCloseModal();\r\n    }\r\n  };\r\n\r\n  const bulkAssignClaims = () => {\r\n    if (utils.generic.isValidArray(claimsProcessingSelected, true)) {\r\n      dispatch(\r\n        showModal({\r\n          component: 'BULK_ASSIGN_CLAIMS',\r\n          props: {\r\n            title: 'claims.processing.bulkAssign.title',\r\n            fullWidth: true,\r\n            maxWidth: 'sm',\r\n            hideCompOnBlur: false,\r\n            componentProps: {\r\n              claimsProcessingSelected,\r\n              claimsType,\r\n              setIsDirty: setIsReassignFormDirty,\r\n              clickXHandler: () => {\r\n                bulkAssignConfirm();\r\n              },\r\n              clickOutSideHandler: () => {\r\n                bulkAssignConfirm();\r\n              },\r\n              cancelHandler: () => {\r\n                bulkAssignConfirm();\r\n              },\r\n            },\r\n          },\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      id: 'claimRef',\r\n      label: utils.string.t('claims.columns.claimsManagement.ref'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      narrow: true,\r\n      nowrap: true,\r\n      visible: true,\r\n      mandatory: true,\r\n    },\r\n    {\r\n      id: 'lossRef',\r\n      label: utils.string.t('claims.columns.claimsManagement.lossRef'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      narrow: true,\r\n      nowrap: true,\r\n      visible: true,\r\n      mandatory: true,\r\n    },\r\n    {\r\n      id: 'catCodesID',\r\n      label: utils.string.t('claims.columns.claimsManagement.catCode'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      ellipsis: true,\r\n      visible: true,\r\n    },\r\n\r\n    {\r\n      id: 'claimReceivedDateTime',\r\n      label: utils.string.t('claims.columns.claimsManagement.claimReceivedDateTime'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      narrow: true,\r\n      nowrap: true,\r\n    },\r\n    {\r\n      id: 'createdDate',\r\n      label: utils.string.t('claims.columns.claimsManagement.createdDate'),\r\n      sort: { type: 'date', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n    },\r\n    {\r\n      id: 'processState',\r\n      label: utils.string.t('claims.columns.claimsManagement.status'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n    },\r\n    {\r\n      id: 'closedDate',\r\n      label: utils.string.t('claims.columns.claimsManagement.closedDate'),\r\n      sort: { type: 'date', direction: 'asc' },\r\n      nowrap: true,\r\n    },\r\n    {\r\n      id: 'complexity',\r\n      label: utils.string.t('claims.columns.claimsManagement.complexity'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: true,\r\n    },\r\n    {\r\n      id: 'team',\r\n      label: utils.string.t('claims.columns.claimsManagement.team'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: true,\r\n      mandatory: true,\r\n    },\r\n    {\r\n      id: 'assignedTo',\r\n      label: utils.string.t('claims.columns.claimsManagement.assignedTo'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: true,\r\n      mandatory: true,\r\n      nowrap: true,\r\n    },\r\n    {\r\n      id: 'priority',\r\n      label: utils.string.t('claims.columns.claimsManagement.priority'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n    },\r\n    {\r\n      id: 'ucr',\r\n      label: utils.string.t('claims.columns.claimsManagement.ucr'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n    },\r\n    {\r\n      id: 'policyRef',\r\n      label: utils.string.t('claims.columns.claimsManagement.policyRef'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n    },\r\n    {\r\n      id: 'policyType',\r\n      label: utils.string.t('claims.columns.claimsManagement.policyType'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n    },\r\n    {\r\n      id: 'claimantName',\r\n      label: utils.string.t('claims.columns.claimsManagement.claimant'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: true,\r\n      ellipsis: true,\r\n    },\r\n    {\r\n      id: 'assured',\r\n      label: utils.string.t('claims.columns.claimsManagement.insured'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      ellipsis: true,\r\n      visible: true,\r\n    },\r\n    {\r\n      id: 'reinsured',\r\n      label: utils.string.t('claims.columns.claimsManagement.reinsured'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n    },\r\n    {\r\n      id: 'client',\r\n      label: utils.string.t('claims.columns.claimsManagement.client'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n    },\r\n    {\r\n      id: 'interest',\r\n      label: utils.string.t('claims.columns.claimsManagement.interest'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n    },\r\n    {\r\n      id: 'createdBy',\r\n      label: utils.string.t('claims.columns.claimsManagement.createdBy'),\r\n      sort: { type: 'numeric', direction: 'asc' },\r\n      nowrap: true,\r\n    },\r\n    {\r\n      id: 'company',\r\n      label: utils.string.t('claims.columns.claimsManagement.company'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n    },\r\n    {\r\n      id: 'division',\r\n      label: utils.string.t('claims.columns.claimsManagement.division'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n    },\r\n    {\r\n      id: 'coverholder',\r\n      label: utils.string.t('claims.columns.claimsManagement.coverholder'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n    },\r\n\r\n    {\r\n      id: 'lossFromDate',\r\n      label: utils.string.t('claims.columns.claimsManagement.lossDateFrom'),\r\n      sort: { type: 'date', direction: 'asc' },\r\n      nowrap: true,\r\n    },\r\n    {\r\n      id: 'lossToDate',\r\n      label: utils.string.t('claims.columns.claimsManagement.lossDateTo'),\r\n      sort: { type: 'date', direction: 'asc' },\r\n      nowrap: true,\r\n    },\r\n    {\r\n      id: 'lossDateQualifier',\r\n      label: utils.string.t('claims.columns.claimsManagement.lossDateQualifier'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n    },\r\n    {\r\n      id: 'lossDetails',\r\n      label: utils.string.t('claims.columns.claimsManagement.lossDetails'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n      ellipsis: true,\r\n    },\r\n    {\r\n      id: 'pasClaimRef',\r\n      label: utils.string.t('claims.columns.claimsManagement.pasClaimRef'),\r\n      sort: { type: 'numeric', direction: 'asc' },\r\n      nowrap: true,\r\n    },\r\n\r\n    {\r\n      id: 'pasStatus',\r\n      label: utils.string.t('claims.columns.claimsManagement.pasStatus'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n    },\r\n\r\n    { id: 'actions', menu: true, visible: true, mandatory: true },\r\n  ];\r\n\r\n  const { columns: columnsArray, columnProps, toggleColumn } = useFlexiColumns(columns);\r\n\r\n  return (\r\n    <ClaimsManagementView\r\n      claims={claimsProcessingItems}\r\n      claimsProcessing={claimsProcessing}\r\n      sort={{\r\n        ...claimsProcessing.sort,\r\n      }}\r\n      columnsArray={columnsArray}\r\n      columnProps={columnProps}\r\n      viewFields={viewFields}\r\n      claimsType={claimsType}\r\n      tableFilterFields={tableFilterFields}\r\n      isFetchingFilters={isFetchingFilters}\r\n      isBulkEnabled={\r\n        [constants.CLAIM_TEAM_TYPE.myClaims, constants.CLAIM_TEAM_TYPE.myTeamClaims].includes(claimsType) &&\r\n        claimsProcessingSelected?.length >= 2 &&\r\n        claimsProcessingSelected?.length <= 10\r\n      }\r\n      control={control}\r\n      searchTerm={searchTerm}\r\n      handlers={{\r\n        search: handleSearch,\r\n        searchFilter: handleSearchFilter,\r\n        resetFilter: handleResetFilter,\r\n        sort: handleSort,\r\n        changePage: handleChangePage,\r\n        changeRowsPerPage: handleChangeRowsPerPage,\r\n        toggleColumn,\r\n        resetSearch: handleResetSearch,\r\n        bulkAssignClaims,\r\n        setClaimsType,\r\n        onSelectSearchBy,\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}