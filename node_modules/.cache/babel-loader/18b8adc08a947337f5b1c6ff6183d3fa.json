{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ClaimsComplexityInsured\\\\ClaimsComplexityInsured.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport moment from 'moment'; // app\n\nimport { ClaimsComplexityInsuredView } from './ClaimsComplexityInsured.view';\nimport { Translate } from 'components';\nimport { selectComplexityInsured, showModal, hideModal, getComplexityInsured, selectComplexityInsuredAdded, removeComplexityInsured } from 'stores';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nClaimsComplexityInsured.propTypes = {\n  setIsSelectedTabDirty: PropTypes.func.isRequired\n};\nexport default function ClaimsComplexityInsured(_ref) {\n  _s();\n\n  var setIsSelectedTabDirty = _ref.setIsSelectedTabDirty;\n  var dispatch = useDispatch();\n  var complexityInsured = useSelector(selectComplexityInsured);\n  var complexityInsuredAdded = useSelector(selectComplexityInsuredAdded);\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      searchTerm = _useState2[0],\n      setSearchTerm = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      resetKey = _useState4[0],\n      setResetKey = _useState4[1];\n\n  var addInsured = function addInsured() {\n    dispatch(showModal({\n      component: 'COMPLEXITY_MANAGEMENT_INSURED',\n      props: {\n        title: utils.string.t('claims.complexityRulesManagementDetails.complexityInsured'),\n        fullWidth: true,\n        maxWidth: 'sm',\n        disableAutoFocus: true,\n        disable: false,\n        hideCompOnBlur: false,\n        componentProps: {\n          clickOutSideHandler: function clickOutSideHandler() {\n            return _clickOutSideHandler();\n          }\n        }\n      }\n    }));\n  };\n\n  var _clickOutSideHandler = function _clickOutSideHandler() {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        title: utils.string.t('status.alert'),\n        hint: utils.string.t('navigation.title'),\n        fullWidth: true,\n        maxWidth: 'xs',\n        componentProps: {\n          cancelLabel: utils.string.t('app.no'),\n          confirmLabel: utils.string.t('app.yes'),\n          submitHandler: function submitHandler() {\n            dispatch(hideModal());\n          }\n        }\n      }\n    }));\n  };\n\n  var removeInsured = function removeInsured(insured) {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        title: utils.string.t('status.alert'),\n        subtitle: utils.string.t('claims.modals.confirmInsured.title'),\n        fullWidth: true,\n        maxWidth: 'sm',\n        componentProps: {\n          cancelLabel: utils.string.t('app.no'),\n          confirmLabel: utils.string.t('app.yes'),\n          submitHandler: function () {\n            var _submitHandler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n              return _regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      _context.next = 2;\n                      return dispatch(removeComplexityInsured(insured));\n\n                    case 2:\n                      _context.next = 4;\n                      return dispatch(getComplexityInsured({\n                        size: 5,\n                        page: 0,\n                        term: '',\n                        sortBy: '',\n                        direction: ''\n                      }));\n\n                    case 4:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, _callee);\n            }));\n\n            function submitHandler() {\n              return _submitHandler.apply(this, arguments);\n            }\n\n            return submitHandler;\n          }(),\n          cancelHandler: function cancelHandler() {\n            dispatch(hideModal());\n          }\n        }\n      }\n    }));\n  };\n\n  var columns = [{\n    id: 'actions',\n    empty: true\n  }, {\n    id: 'insured',\n    label: /*#__PURE__*/_jsxDEV(Translate, {\n      label: \"Insured\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 29\n    }, this),\n    sort: {\n      type: '',\n      direction: 'asc'\n    }\n  }];\n\n  var handleReset = function handleReset() {\n    setSearchTerm('');\n    setResetKey(moment().format());\n    dispatch(getComplexityInsured({\n      size: 5,\n      page: 0,\n      term: '',\n      sortBy: '',\n      direction: ''\n    }));\n  };\n\n  var handleSearch = function handleSearch(query) {\n    setSearchTerm(query);\n    return dispatch(getComplexityInsured({\n      term: query\n    }));\n  };\n\n  var handleChangePage = function handleChangePage(newPage) {\n    dispatch(getComplexityInsured({\n      page: newPage,\n      term: searchTerm,\n      sortBy: '',\n      direction: ''\n    }));\n  };\n\n  var handleChangeRowsPerPage = function handleChangeRowsPerPage(rowsPerPage) {\n    dispatch(getComplexityInsured({\n      size: rowsPerPage,\n      term: searchTerm,\n      sortBy: '',\n      direction: ''\n    }));\n  };\n\n  var handleSort = function handleSort(by, dir) {\n    dispatch(getComplexityInsured({\n      sortBy: by,\n      direction: dir.toUpperCase(),\n      term: searchTerm\n    }));\n  };\n\n  useEffect(function () {\n    dispatch(getComplexityInsured({\n      size: 5,\n      page: 0,\n      term: '',\n      sortBy: '',\n      direction: ''\n    }));\n  }, [complexityInsuredAdded] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  return /*#__PURE__*/_jsxDEV(ClaimsComplexityInsuredView, {\n    cols: columns,\n    rows: complexityInsured === null || complexityInsured === void 0 ? void 0 : complexityInsured.items,\n    sort: _objectSpread(_objectSpread({}, complexityInsured.sort), {}, {\n      type: 'insured'\n    }),\n    pagination: {\n      page: complexityInsured.page,\n      rowsTotal: complexityInsured.itemsTotal,\n      rowsPerPage: complexityInsured.pageSize\n    },\n    handleSort: handleSort,\n    handleSearch: handleSearch,\n    handleReset: handleReset,\n    handleChangePage: handleChangePage,\n    handleChangeRowsPerPage: handleChangeRowsPerPage,\n    addInsured: addInsured,\n    removeInsured: removeInsured,\n    setIsSelectedTabDirty: setIsSelectedTabDirty,\n    resetKey: resetKey\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ClaimsComplexityInsured, \"lqHDVwJ3aGDz7kBRkyi6GGZR3lo=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = ClaimsComplexityInsured;\nClaimsComplexityInsured.displayName = \"ClaimsComplexityInsured\";\nClaimsComplexityInsured.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"ClaimsComplexityInsured\",\n  \"props\": {\n    \"setIsSelectedTabDirty\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\modules\\\\ClaimsComplexityInsured\\\\ClaimsComplexityInsured.js\"] = {\n    name: \"ClaimsComplexityInsured\",\n    docgenInfo: ClaimsComplexityInsured.__docgenInfo,\n    path: \"src\\\\modules\\\\ClaimsComplexityInsured\\\\ClaimsComplexityInsured.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimsComplexityInsured\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ClaimsComplexityInsured/ClaimsComplexityInsured.js"],"names":["React","useState","useEffect","useDispatch","useSelector","PropTypes","moment","ClaimsComplexityInsuredView","Translate","selectComplexityInsured","showModal","hideModal","getComplexityInsured","selectComplexityInsuredAdded","removeComplexityInsured","utils","ClaimsComplexityInsured","propTypes","setIsSelectedTabDirty","func","isRequired","dispatch","complexityInsured","complexityInsuredAdded","searchTerm","setSearchTerm","resetKey","setResetKey","addInsured","component","props","title","string","t","fullWidth","maxWidth","disableAutoFocus","disable","hideCompOnBlur","componentProps","clickOutSideHandler","hint","cancelLabel","confirmLabel","submitHandler","removeInsured","insured","subtitle","size","page","term","sortBy","direction","cancelHandler","columns","id","empty","label","sort","type","handleReset","format","handleSearch","query","handleChangePage","newPage","handleChangeRowsPerPage","rowsPerPage","handleSort","by","dir","toUpperCase","items","rowsTotal","itemsTotal","pageSize"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport moment from 'moment';\r\n\r\n// app\r\nimport { ClaimsComplexityInsuredView } from './ClaimsComplexityInsured.view';\r\nimport { Translate } from 'components';\r\nimport {\r\n  selectComplexityInsured,\r\n  showModal,\r\n  hideModal,\r\n  getComplexityInsured,\r\n  selectComplexityInsuredAdded,\r\n  removeComplexityInsured,\r\n} from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nClaimsComplexityInsured.propTypes = {\r\n  setIsSelectedTabDirty: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default function ClaimsComplexityInsured({ setIsSelectedTabDirty }) {\r\n  const dispatch = useDispatch();\r\n  const complexityInsured = useSelector(selectComplexityInsured);\r\n  const complexityInsuredAdded = useSelector(selectComplexityInsuredAdded);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [resetKey, setResetKey] = useState();\r\n\r\n  const addInsured = () => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'COMPLEXITY_MANAGEMENT_INSURED',\r\n        props: {\r\n          title: utils.string.t('claims.complexityRulesManagementDetails.complexityInsured'),\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          disableAutoFocus: true,\r\n          disable: false,\r\n          hideCompOnBlur: false,\r\n\r\n          componentProps: {\r\n            clickOutSideHandler: () => clickOutSideHandler(),\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n  const clickOutSideHandler = () => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          title: utils.string.t('status.alert'),\r\n          hint: utils.string.t('navigation.title'),\r\n          fullWidth: true,\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            cancelLabel: utils.string.t('app.no'),\r\n            confirmLabel: utils.string.t('app.yes'),\r\n            submitHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const removeInsured = (insured) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          title: utils.string.t('status.alert'),\r\n          subtitle: utils.string.t('claims.modals.confirmInsured.title'),\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          componentProps: {\r\n            cancelLabel: utils.string.t('app.no'),\r\n            confirmLabel: utils.string.t('app.yes'),\r\n            submitHandler: async () => {\r\n              await dispatch(removeComplexityInsured(insured));\r\n              await dispatch(getComplexityInsured({ size: 5, page: 0, term: '', sortBy: '', direction: '' }));\r\n            },\r\n            cancelHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const columns = [\r\n    { id: 'actions', empty: true },\r\n    { id: 'insured', label: <Translate label=\"Insured\" />, sort: { type: '', direction: 'asc' } },\r\n  ];\r\n\r\n  const handleReset = () => {\r\n    setSearchTerm('');\r\n    setResetKey(moment().format());\r\n    dispatch(getComplexityInsured({ size: 5, page: 0, term: '', sortBy: '', direction: '' }));\r\n  };\r\n\r\n  const handleSearch = (query) => {\r\n    setSearchTerm(query);\r\n    return dispatch(getComplexityInsured({ term: query }));\r\n  };\r\n\r\n  const handleChangePage = (newPage) => {\r\n    dispatch(getComplexityInsured({ page: newPage, term: searchTerm, sortBy: '', direction: '' }));\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (rowsPerPage) => {\r\n    dispatch(getComplexityInsured({ size: rowsPerPage, term: searchTerm, sortBy: '', direction: '' }));\r\n  };\r\n\r\n  const handleSort = (by, dir) => {\r\n    dispatch(getComplexityInsured({ sortBy: by, direction: dir.toUpperCase(), term: searchTerm }));\r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n      dispatch(getComplexityInsured({ size: 5, page: 0, term: '', sortBy: '', direction: '' }));\r\n    },\r\n    [complexityInsuredAdded] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  return (\r\n    <ClaimsComplexityInsuredView\r\n      cols={columns}\r\n      rows={complexityInsured?.items}\r\n      sort={{\r\n        ...complexityInsured.sort,\r\n        type: 'insured',\r\n      }}\r\n      pagination={{\r\n        page: complexityInsured.page,\r\n        rowsTotal: complexityInsured.itemsTotal,\r\n        rowsPerPage: complexityInsured.pageSize,\r\n      }}\r\n      handleSort={handleSort}\r\n      handleSearch={handleSearch}\r\n      handleReset={handleReset}\r\n      handleChangePage={handleChangePage}\r\n      handleChangeRowsPerPage={handleChangeRowsPerPage}\r\n      addInsured={addInsured}\r\n      removeInsured={removeInsured}\r\n      setIsSelectedTabDirty={setIsSelectedTabDirty}\r\n      resetKey={resetKey}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}