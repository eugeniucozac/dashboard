{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as utils from 'utils';\nimport { authLogout } from 'stores';\nexport var searchInsureds = function searchInsureds(query) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/fileUpload.actions.searchInsureds'\n    };\n    dispatch(searchInsuredsRequest(query));\n\n    if (!query) {\n      dispatch(searchInsuredsFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Missing insured search query'\n      })));\n      return;\n    }\n\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.edge,\n      path: 'api/insured/search',\n      data: {\n        searchStr: query,\n        limit: 200\n      }\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleData(json);\n    }).then(function (data) {\n      var content = data.content;\n      dispatch(searchInsuredsSuccess(data));\n      return content;\n    })[\"catch\"](function (err) {\n      utils.api.handleError(err, _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API fetch error (fileUpload.searchInsureds)'\n      }));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(searchInsuredsFailure(err));\n      return err;\n    });\n  };\n};\nexport var searchInsuredsRequest = function searchInsuredsRequest(query) {\n  return {\n    type: 'FILE_UPLOAD_SEARCH_INSUREDS_REQUEST',\n    payload: query\n  };\n};\nexport var searchInsuredsSuccess = function searchInsuredsSuccess(responseData) {\n  return {\n    type: 'FILE_UPLOAD_SEARCH_INSUREDS_SUCCESS',\n    payload: responseData\n  };\n};\nexport var searchInsuredsFailure = function searchInsuredsFailure(error) {\n  return {\n    type: 'FILE_UPLOAD_SEARCH_INSUREDS_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/fileUpload/fileUpload.actions.searchInsureds.js"],"names":["utils","authLogout","searchInsureds","query","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","searchInsuredsRequest","searchInsuredsFailure","message","api","post","token","accessToken","edge","path","data","searchStr","limit","then","response","handleResponse","json","handleData","content","searchInsuredsSuccess","err","handleError","handleUnauthorized","type","payload","responseData","error"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,QAA3B;AAEA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD;AAAA,SAAW,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC/D;AAD+D,oBAENA,QAAQ,EAFF;AAAA,QAE/CC,IAF+C,aAEvDC,IAFuD,CAE/CD,IAF+C;AAAA,QAErBE,QAFqB,aAEvCC,MAFuC,CAE7BC,IAF6B,CAErBF,QAFqB;;AAI/D,QAAMG,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE;AADa,KAArB;AAIAR,IAAAA,QAAQ,CAACS,qBAAqB,CAACV,KAAD,CAAtB,CAAR;;AAEA,QAAI,CAACA,KAAL,EAAY;AACVC,MAAAA,QAAQ,CAACU,qBAAqB,iCAAMH,YAAN;AAAoBI,QAAAA,OAAO,EAAE;AAA7B,SAAtB,CAAR;AACA;AACD;;AAED,WAAOf,KAAK,CAACgB,GAAN,CACJC,IADI,CACC;AACJC,MAAAA,KAAK,EAAEZ,IAAI,CAACa,WADR;AAEJX,MAAAA,QAAQ,EAAEA,QAAQ,CAACY,IAFf;AAGJC,MAAAA,IAAI,EAAE,oBAHF;AAIJC,MAAAA,IAAI,EAAE;AACJC,QAAAA,SAAS,EAAEpB,KADP;AAEJqB,QAAAA,KAAK,EAAE;AAFH;AAJF,KADD,EAUJC,IAVI,CAUC,UAACC,QAAD;AAAA,aAAc1B,KAAK,CAACgB,GAAN,CAAUW,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAVD,EAWJD,IAXI,CAWC,UAACG,IAAD;AAAA,aAAU5B,KAAK,CAACgB,GAAN,CAAUa,UAAV,CAAqBD,IAArB,CAAV;AAAA,KAXD,EAYJH,IAZI,CAYC,UAACH,IAAD,EAAU;AAAA,UACNQ,OADM,GACMR,IADN,CACNQ,OADM;AAEd1B,MAAAA,QAAQ,CAAC2B,qBAAqB,CAACT,IAAD,CAAtB,CAAR;AACA,aAAOQ,OAAP;AACD,KAhBI,WAiBE,UAACE,GAAD,EAAS;AACdhC,MAAAA,KAAK,CAACgB,GAAN,CAAUiB,WAAV,CAAsBD,GAAtB,kCAAgCrB,YAAhC;AAA8CI,QAAAA,OAAO,EAAE;AAAvD;AACAf,MAAAA,KAAK,CAACgB,GAAN,CAAUkB,kBAAV,CAA6BF,GAA7B,EAAkC5B,QAAlC,EAA4CH,UAA5C;AACAG,MAAAA,QAAQ,CAACU,qBAAqB,CAACkB,GAAD,CAAtB,CAAR;AACA,aAAOA,GAAP;AACD,KAtBI,CAAP;AAuBD,GAtC6B;AAAA,CAAvB;AAwCP,OAAO,IAAMnB,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACV,KAAD,EAAW;AAC9C,SAAO;AACLgC,IAAAA,IAAI,EAAE,qCADD;AAELC,IAAAA,OAAO,EAAEjC;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAM4B,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACM,YAAD,EAAkB;AACrD,SAAO;AACLF,IAAAA,IAAI,EAAE,qCADD;AAELC,IAAAA,OAAO,EAAEC;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMvB,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACwB,KAAD,EAAW;AAC9C,SAAO;AACLH,IAAAA,IAAI,EAAE,qCADD;AAELC,IAAAA,OAAO,EAAEE;AAFJ,GAAP;AAID,CALM","sourcesContent":["import * as utils from 'utils';\r\nimport { authLogout } from 'stores';\r\n\r\nexport const searchInsureds = (query) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/fileUpload.actions.searchInsureds',\r\n  };\r\n\r\n  dispatch(searchInsuredsRequest(query));\r\n\r\n  if (!query) {\r\n    dispatch(searchInsuredsFailure({ ...defaultError, message: 'Missing insured search query' }));\r\n    return;\r\n  }\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.edge,\r\n      path: 'api/insured/search',\r\n      data: {\r\n        searchStr: query,\r\n        limit: 200,\r\n      },\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleData(json))\r\n    .then((data) => {\r\n      const { content } = data;\r\n      dispatch(searchInsuredsSuccess(data));\r\n      return content;\r\n    })\r\n    .catch((err) => {\r\n      utils.api.handleError(err, { ...defaultError, message: 'API fetch error (fileUpload.searchInsureds)' });\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(searchInsuredsFailure(err));\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const searchInsuredsRequest = (query) => {\r\n  return {\r\n    type: 'FILE_UPLOAD_SEARCH_INSUREDS_REQUEST',\r\n    payload: query,\r\n  };\r\n};\r\n\r\nexport const searchInsuredsSuccess = (responseData) => {\r\n  return {\r\n    type: 'FILE_UPLOAD_SEARCH_INSUREDS_SUCCESS',\r\n    payload: responseData,\r\n  };\r\n};\r\n\r\nexport const searchInsuredsFailure = (error) => {\r\n  return {\r\n    type: 'FILE_UPLOAD_SEARCH_INSUREDS_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}