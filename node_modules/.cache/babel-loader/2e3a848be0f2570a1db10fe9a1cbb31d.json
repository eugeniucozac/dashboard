{"ast":null,"code":"var _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\utils\\\\string\\\\string.js\",\n    _this = this;\n\nimport React from 'react';\nimport * as utils from 'utils';\nimport _startCase from 'lodash/startCase';\nimport compact from 'lodash/compact';\nimport isNumber from 'lodash/isNumber';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar utilsString = {\n  t: function t(label, options) {\n    return utils.i18n.t(label, options);\n  },\n  html: function html(label, options) {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      dangerouslySetInnerHTML: {\n        __html: utils.i18n.t(label, options)\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 12\n    }, _this);\n  },\n  capitalise: function capitalise(str) {\n    if (!str || typeof str !== 'string') return '';\n    return _startCase(str.toLowerCase());\n  },\n  replaceLowerCase: function replaceLowerCase(str) {\n    var pattern = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';\n    var regex = {\n      default: /[ _]/g,\n      withDash: /[ _-]/g\n    };\n    var selectedRegex = regex[pattern] ? regex[pattern] : pattern;\n    return str ? str.replace(selectedRegex, '').toLowerCase() : str;\n  },\n  startCase: function startCase(str) {\n    var keepForwardSlash = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (!str || typeof str !== 'string') return '';\n    var regex = /(\\s)*(\\/)+(\\s)*/g;\n    var isUppercase = str === str.toUpperCase();\n\n    var parse = function parse(strToParse) {\n      return _startCase(isUppercase ? strToParse.toLowerCase() : strToParse);\n    };\n\n    if (keepForwardSlash && str.includes('/')) {\n      str = str.replace(regex, '/');\n      return compact(str.split('/')).map(function (part) {\n        return parse(part);\n      }).join(' / ');\n    }\n\n    return parse(str);\n  },\n  stripNonNumeric: function stripNonNumeric(value) {\n    if (isNumber(value)) return value;\n    if (!value || typeof value !== 'string') return;\n    return value.replace(/[^\\d.-]/g, '');\n  },\n  stripNonAlphaNumeric: function stripNonAlphaNumeric(value) {\n    if (!value) return '';\n    return value.replace(/[^a-z0-9]+/gi, '');\n  },\n  isEqual: function isEqual(a, b) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    // by default it is case sensitive\n    var caseSensitive = typeof (options === null || options === void 0 ? void 0 : options.caseSensitive) === 'undefined' ? true : options.caseSensitive;\n    if (a === '' && b === '') return true;\n    if (!a || !b) return false;\n    if (typeof a !== 'string' || typeof b !== 'string') return false;\n\n    if (caseSensitive) {\n      return a === b;\n    } else {\n      return a.toLowerCase() === b.toLowerCase();\n    }\n  }\n};\nexport default utilsString;","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/utils/string/string.js"],"names":["React","utils","startCase","compact","isNumber","utilsString","t","label","options","i18n","html","__html","capitalise","str","toLowerCase","replaceLowerCase","pattern","regex","default","withDash","selectedRegex","replace","keepForwardSlash","isUppercase","toUpperCase","parse","strToParse","includes","split","map","part","join","stripNonNumeric","value","stripNonAlphaNumeric","isEqual","a","b","caseSensitive"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP,MAAsB,kBAAtB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,QAAP,MAAqB,iBAArB;;AAEA,IAAMC,WAAW,GAAG;AAClBC,EAAAA,CAAC,EAAE,WAACC,KAAD,EAAQC,OAAR,EAAoB;AACrB,WAAOP,KAAK,CAACQ,IAAN,CAAWH,CAAX,CAAaC,KAAb,EAAoBC,OAApB,CAAP;AACD,GAHiB;AAKlBE,EAAAA,IAAI,EAAE,cAACH,KAAD,EAAQC,OAAR,EAAoB;AACxB,wBAAO;AAAM,MAAA,uBAAuB,EAAE;AAAEG,QAAAA,MAAM,EAAEV,KAAK,CAACQ,IAAN,CAAWH,CAAX,CAAaC,KAAb,EAAoBC,OAApB;AAAV;AAA/B;AAAA;AAAA;AAAA;AAAA,aAAP;AACD,GAPiB;AASlBI,EAAAA,UAAU,EAAE,oBAACC,GAAD,EAAS;AACnB,QAAI,CAACA,GAAD,IAAQ,OAAOA,GAAP,KAAe,QAA3B,EAAqC,OAAO,EAAP;AAErC,WAAOX,UAAS,CAACW,GAAG,CAACC,WAAJ,EAAD,CAAhB;AACD,GAbiB;AAelBC,EAAAA,gBAAgB,EAAE,0BAACF,GAAD,EAA8B;AAAA,QAAxBG,OAAwB,uEAAd,SAAc;AAC9C,QAAMC,KAAK,GAAG;AACZC,MAAAA,OAAO,EAAE,OADG;AAEZC,MAAAA,QAAQ,EAAE;AAFE,KAAd;AAIA,QAAMC,aAAa,GAAGH,KAAK,CAACD,OAAD,CAAL,GAAiBC,KAAK,CAACD,OAAD,CAAtB,GAAkCA,OAAxD;AACA,WAAOH,GAAG,GAAGA,GAAG,CAACQ,OAAJ,CAAYD,aAAZ,EAA2B,EAA3B,EAA+BN,WAA/B,EAAH,GAAkDD,GAA5D;AACD,GAtBiB;AAwBlBX,EAAAA,SAAS,EAAE,mBAACW,GAAD,EAAkC;AAAA,QAA5BS,gBAA4B,uEAAT,IAAS;AAC3C,QAAI,CAACT,GAAD,IAAQ,OAAOA,GAAP,KAAe,QAA3B,EAAqC,OAAO,EAAP;AAErC,QAAMI,KAAK,GAAG,kBAAd;AACA,QAAMM,WAAW,GAAGV,GAAG,KAAKA,GAAG,CAACW,WAAJ,EAA5B;;AACA,QAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,UAAD;AAAA,aAAgBxB,UAAS,CAACqB,WAAW,GAAGG,UAAU,CAACZ,WAAX,EAAH,GAA8BY,UAA1C,CAAzB;AAAA,KAAd;;AAEA,QAAIJ,gBAAgB,IAAIT,GAAG,CAACc,QAAJ,CAAa,GAAb,CAAxB,EAA2C;AACzCd,MAAAA,GAAG,GAAGA,GAAG,CAACQ,OAAJ,CAAYJ,KAAZ,EAAmB,GAAnB,CAAN;AACA,aAAOd,OAAO,CAACU,GAAG,CAACe,KAAJ,CAAU,GAAV,CAAD,CAAP,CACJC,GADI,CACA,UAACC,IAAD;AAAA,eAAUL,KAAK,CAACK,IAAD,CAAf;AAAA,OADA,EAEJC,IAFI,CAEC,KAFD,CAAP;AAGD;;AAED,WAAON,KAAK,CAACZ,GAAD,CAAZ;AACD,GAvCiB;AAyClBmB,EAAAA,eAAe,EAAE,yBAACC,KAAD,EAAW;AAC1B,QAAI7B,QAAQ,CAAC6B,KAAD,CAAZ,EAAqB,OAAOA,KAAP;AACrB,QAAI,CAACA,KAAD,IAAU,OAAOA,KAAP,KAAiB,QAA/B,EAAyC;AACzC,WAAOA,KAAK,CAACZ,OAAN,CAAc,UAAd,EAA0B,EAA1B,CAAP;AACD,GA7CiB;AA+ClBa,EAAAA,oBAAoB,EAAE,8BAACD,KAAD,EAAW;AAC/B,QAAI,CAACA,KAAL,EAAY,OAAO,EAAP;AACZ,WAAOA,KAAK,CAACZ,OAAN,CAAc,cAAd,EAA8B,EAA9B,CAAP;AACD,GAlDiB;AAoDlBc,EAAAA,OAAO,EAAE,iBAACC,CAAD,EAAIC,CAAJ,EAAwB;AAAA,QAAjB7B,OAAiB,uEAAP,EAAO;AAC/B;AACA,QAAM8B,aAAa,GAAG,QAAO9B,OAAP,aAAOA,OAAP,uBAAOA,OAAO,CAAE8B,aAAhB,MAAkC,WAAlC,GAAgD,IAAhD,GAAuD9B,OAAO,CAAC8B,aAArF;AAEA,QAAIF,CAAC,KAAK,EAAN,IAAYC,CAAC,KAAK,EAAtB,EAA0B,OAAO,IAAP;AAC1B,QAAI,CAACD,CAAD,IAAM,CAACC,CAAX,EAAc,OAAO,KAAP;AACd,QAAI,OAAOD,CAAP,KAAa,QAAb,IAAyB,OAAOC,CAAP,KAAa,QAA1C,EAAoD,OAAO,KAAP;;AAEpD,QAAIC,aAAJ,EAAmB;AACjB,aAAOF,CAAC,KAAKC,CAAb;AACD,KAFD,MAEO;AACL,aAAOD,CAAC,CAACtB,WAAF,OAAoBuB,CAAC,CAACvB,WAAF,EAA3B;AACD;AACF;AAjEiB,CAApB;AAoEA,eAAeT,WAAf","sourcesContent":["import React from 'react';\r\nimport * as utils from 'utils';\r\nimport startCase from 'lodash/startCase';\r\nimport compact from 'lodash/compact';\r\nimport isNumber from 'lodash/isNumber';\r\n\r\nconst utilsString = {\r\n  t: (label, options) => {\r\n    return utils.i18n.t(label, options);\r\n  },\r\n\r\n  html: (label, options) => {\r\n    return <span dangerouslySetInnerHTML={{ __html: utils.i18n.t(label, options) }} />;\r\n  },\r\n\r\n  capitalise: (str) => {\r\n    if (!str || typeof str !== 'string') return '';\r\n\r\n    return startCase(str.toLowerCase());\r\n  },\r\n\r\n  replaceLowerCase: (str, pattern = 'default') => {\r\n    const regex = {\r\n      default: /[ _]/g,\r\n      withDash: /[ _-]/g,\r\n    };\r\n    const selectedRegex = regex[pattern] ? regex[pattern] : pattern;\r\n    return str ? str.replace(selectedRegex, '').toLowerCase() : str;\r\n  },\r\n\r\n  startCase: (str, keepForwardSlash = true) => {\r\n    if (!str || typeof str !== 'string') return '';\r\n\r\n    const regex = /(\\s)*(\\/)+(\\s)*/g;\r\n    const isUppercase = str === str.toUpperCase();\r\n    const parse = (strToParse) => startCase(isUppercase ? strToParse.toLowerCase() : strToParse);\r\n\r\n    if (keepForwardSlash && str.includes('/')) {\r\n      str = str.replace(regex, '/');\r\n      return compact(str.split('/'))\r\n        .map((part) => parse(part))\r\n        .join(' / ');\r\n    }\r\n\r\n    return parse(str);\r\n  },\r\n\r\n  stripNonNumeric: (value) => {\r\n    if (isNumber(value)) return value;\r\n    if (!value || typeof value !== 'string') return;\r\n    return value.replace(/[^\\d.-]/g, '');\r\n  },\r\n\r\n  stripNonAlphaNumeric: (value) => {\r\n    if (!value) return '';\r\n    return value.replace(/[^a-z0-9]+/gi, '');\r\n  },\r\n\r\n  isEqual: (a, b, options = {}) => {\r\n    // by default it is case sensitive\r\n    const caseSensitive = typeof options?.caseSensitive === 'undefined' ? true : options.caseSensitive;\r\n\r\n    if (a === '' && b === '') return true;\r\n    if (!a || !b) return false;\r\n    if (typeof a !== 'string' || typeof b !== 'string') return false;\r\n\r\n    if (caseSensitive) {\r\n      return a === b;\r\n    } else {\r\n      return a.toLowerCase() === b.toLowerCase();\r\n    }\r\n  },\r\n};\r\n\r\nexport default utilsString;\r\n"]},"metadata":{},"sourceType":"module"}