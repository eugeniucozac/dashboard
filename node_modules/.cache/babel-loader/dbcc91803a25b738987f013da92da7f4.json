{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\forms\\\\AddDepartmentMarket\\\\AddDepartmentMarket.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as Yup from 'yup';\nimport get from 'lodash/get'; // app\n\nimport styles from './AddDepartmentMarket.styles';\nimport { AddDepartmentMarketView } from './AddDepartmentMarket.view';\nimport { StatusIcon, Restricted, OptionDetail } from 'components';\nimport { addDepartmentMarket, resetReferenceDataMarkets, getReferenceDataByType, selectFormattedAccountStatusList, selectRefDataCapacityTypes } from 'stores';\nimport * as constants from 'consts';\nimport * as utils from 'utils'; // mui\n\nimport { makeStyles } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nAddDepartmentMarket.propTypes = {\n  deptId: PropTypes.number.isRequired,\n  markets: PropTypes.array.isRequired,\n  handleClose: PropTypes.func.isRequired\n};\nexport default function AddDepartmentMarket(_ref) {\n  _s();\n\n  var _this = this;\n\n  var deptId = _ref.deptId,\n      _ref$markets = _ref.markets,\n      markets = _ref$markets === void 0 ? [] : _ref$markets,\n      handleClose = _ref.handleClose;\n  var classes = makeStyles(styles, {\n    name: 'AddDepartmentMarket'\n  })();\n  var dispatch = useDispatch();\n  var formattedAccountStatusList = useSelector(selectFormattedAccountStatusList);\n  var refDataCapacityTypes = useSelector(selectRefDataCapacityTypes);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      underwritersVisible = _useState2[0],\n      setUnderwritersVisible = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      marketSelected = _useState4[0],\n      setMarketSelected = _useState4[1];\n\n  var marketsInUse = markets.map(function (market) {\n    return market.id;\n  });\n  useEffect(function () {\n    dispatch(resetReferenceDataMarkets());\n  }, [] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  var filterMarketsInUse = function filterMarketsInUse(marketsInUse) {\n    return function (list) {\n      return list.filter(function (item) {\n        return !marketsInUse.includes(item.id);\n      });\n    };\n  };\n\n  var getOptions = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return dispatch(getReferenceDataByType.apply(void 0, _args));\n\n            case 2:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getOptions() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var getMarketDetail = function getMarketDetail(_ref3) {\n    var gxbBeReference = _ref3.gxbBeReference,\n        address = _ref3.address;\n    var addressStr = utils.market.getAddress(address);\n    if (!gxbBeReference && !addressStr) return;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [gxbBeReference && /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [utils.string.t('placement.generic.gxbBeReference'), \": \", gxbBeReference, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, _this), addressStr && /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [utils.string.t('app.address'), \": \", addressStr]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, _this)]\n    }, void 0, true);\n  };\n\n  var renderOptions = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(type, searchTerm) {\n      var orderBy, options, optionsWithStatus;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              orderBy = formattedAccountStatusList.map(function (status) {\n                return status.id;\n              });\n              _context2.next = 3;\n              return getOptions(type, searchTerm);\n\n            case 3:\n              options = _context2.sent;\n              optionsWithStatus = options.map(function (option) {\n                var marketDetail = getMarketDetail(option);\n                return _objectSpread(_objectSpread({}, option), {}, {\n                  label: /*#__PURE__*/_jsxDEV(OptionDetail, {\n                    label: option.edgeName,\n                    detail: marketDetail,\n                    children: /*#__PURE__*/_jsxDEV(Restricted, {\n                      include: [constants.ROLE_BROKER],\n                      children: /*#__PURE__*/_jsxDEV(StatusIcon, {\n                        translationPath: \"statusMarket\",\n                        list: formattedAccountStatusList,\n                        id: option.statusId\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 93,\n                        columnNumber: 15\n                      }, _this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 92,\n                      columnNumber: 13\n                    }, _this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 91,\n                    columnNumber: 11\n                  }, _this)\n                });\n              });\n              return _context2.abrupt(\"return\", optionsWithStatus.sort(function (a, b) {\n                return orderBy.indexOf(a.statusId) - orderBy.indexOf(b.statusId);\n              }));\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function renderOptions(_x, _x2) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  var fields = [{\n    name: 'departmentId',\n    type: 'hidden',\n    value: deptId\n  }, {\n    name: 'markets',\n    type: 'autocomplete',\n    label: utils.string.t('market.fields.market'),\n    options: [],\n    optionKey: 'id',\n    optionLabel: 'label',\n    validation: Yup.array().of(Yup.mixed().required(utils.string.t('validation.required'))).required(utils.string.t('validation.required')),\n    innerComponentProps: {\n      valueLabel: 'edgeName',\n      allowEmpty: true,\n      async: {\n        handler: renderOptions,\n        type: 'market',\n        filter: filterMarketsInUse(marketsInUse)\n      }\n    },\n    muiComponentProps: {\n      autoFocus: true,\n      'data-testid': 'market'\n    },\n    callback: function callback(values, setValue) {\n      var value = values && get(values, '[0]');\n      setMarketSelected(value ? value.id : null);\n      setValue('markets', [value]);\n      setValue('capacityTypeId', value ? value.capacityTypeId || '' : '');\n    }\n  }, {\n    name: 'capacityTypeId',\n    type: 'select',\n    value: '',\n    options: refDataCapacityTypes,\n    optionKey: 'id',\n    optionLabel: 'name',\n    muiComponentProps: {\n      disabled: !marketSelected\n    },\n    label: utils.string.t('market.fields.capacityType'),\n    hint: utils.string.t('market.fields.capacityTypeHint')\n  }, {\n    name: 'underwriters',\n    label: utils.string.t('market.legends.underwriters'),\n    type: 'array',\n    arrayItemDef: [{\n      name: 'firstName',\n      type: 'text',\n      label: utils.string.t('market.fields.firstName'),\n      value: '',\n      muiComponentProps: {\n        InputProps: {\n          classes: {\n            input: classes.input\n          }\n        }\n      }\n    }, {\n      name: 'lastName',\n      type: 'text',\n      label: utils.string.t('market.fields.lastName'),\n      value: '',\n      muiComponentProps: {\n        InputProps: {\n          classes: {\n            input: classes.input\n          }\n        }\n      }\n    }, {\n      name: 'emailId',\n      type: 'text',\n      label: utils.string.t('market.fields.email'),\n      value: '',\n      muiComponentProps: {\n        InputProps: {\n          classes: {\n            input: classes.input\n          }\n        }\n      }\n    }]\n  }];\n  var actions = [{\n    name: 'cancel',\n    label: utils.string.t('app.cancel'),\n    handler: handleClose\n  }, {\n    name: 'submit',\n    label: utils.string.t('app.submit'),\n    handler: function handler() {\n      return dispatch(addDepartmentMarket.apply(void 0, arguments));\n    }\n  }];\n  return /*#__PURE__*/_jsxDEV(AddDepartmentMarketView, {\n    fields: fields,\n    actions: actions,\n    isUnderwritersVisible: underwritersVisible,\n    handlers: {\n      showUnderwriters: setUnderwritersVisible\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 217,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddDepartmentMarket, \"tMgNlF8JXh45psxoGxg5Df+nLiA=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = AddDepartmentMarket;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddDepartmentMarket\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/forms/AddDepartmentMarket/AddDepartmentMarket.js"],"names":["React","useEffect","useState","PropTypes","useDispatch","useSelector","Yup","get","styles","AddDepartmentMarketView","StatusIcon","Restricted","OptionDetail","addDepartmentMarket","resetReferenceDataMarkets","getReferenceDataByType","selectFormattedAccountStatusList","selectRefDataCapacityTypes","constants","utils","makeStyles","AddDepartmentMarket","propTypes","deptId","number","isRequired","markets","array","handleClose","func","classes","name","dispatch","formattedAccountStatusList","refDataCapacityTypes","underwritersVisible","setUnderwritersVisible","marketSelected","setMarketSelected","marketsInUse","map","market","id","filterMarketsInUse","list","filter","item","includes","getOptions","getMarketDetail","gxbBeReference","address","addressStr","getAddress","string","t","renderOptions","type","searchTerm","orderBy","status","options","optionsWithStatus","option","marketDetail","label","edgeName","ROLE_BROKER","statusId","sort","a","b","indexOf","fields","value","optionKey","optionLabel","validation","of","mixed","required","innerComponentProps","valueLabel","allowEmpty","async","handler","muiComponentProps","autoFocus","callback","values","setValue","capacityTypeId","disabled","hint","arrayItemDef","InputProps","input","actions","showUnderwriters"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport * as Yup from 'yup';\r\nimport get from 'lodash/get';\r\n\r\n// app\r\nimport styles from './AddDepartmentMarket.styles';\r\nimport { AddDepartmentMarketView } from './AddDepartmentMarket.view';\r\nimport { StatusIcon, Restricted, OptionDetail } from 'components';\r\nimport {\r\n  addDepartmentMarket,\r\n  resetReferenceDataMarkets,\r\n  getReferenceDataByType,\r\n  selectFormattedAccountStatusList,\r\n  selectRefDataCapacityTypes,\r\n} from 'stores';\r\nimport * as constants from 'consts';\r\nimport * as utils from 'utils';\r\n\r\n// mui\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nAddDepartmentMarket.propTypes = {\r\n  deptId: PropTypes.number.isRequired,\r\n  markets: PropTypes.array.isRequired,\r\n  handleClose: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default function AddDepartmentMarket({ deptId, markets = [], handleClose }) {\r\n  const classes = makeStyles(styles, { name: 'AddDepartmentMarket' })();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const formattedAccountStatusList = useSelector(selectFormattedAccountStatusList);\r\n  const refDataCapacityTypes = useSelector(selectRefDataCapacityTypes);\r\n\r\n  const [underwritersVisible, setUnderwritersVisible] = useState(false);\r\n  const [marketSelected, setMarketSelected] = useState(null);\r\n\r\n  const marketsInUse = markets.map((market) => market.id);\r\n\r\n  useEffect(\r\n    () => {\r\n      dispatch(resetReferenceDataMarkets());\r\n    },\r\n    [] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  const filterMarketsInUse = (marketsInUse) => (list) => {\r\n    return list.filter((item) => {\r\n      return !marketsInUse.includes(item.id);\r\n    });\r\n  };\r\n\r\n  const getOptions = async (...args) => {\r\n    return await dispatch(getReferenceDataByType(...args));\r\n  };\r\n\r\n  const getMarketDetail = ({ gxbBeReference, address }) => {\r\n    const addressStr = utils.market.getAddress(address);\r\n    if (!gxbBeReference && !addressStr) return;\r\n\r\n    return (\r\n      <>\r\n        {gxbBeReference && (\r\n          <span>\r\n            {utils.string.t('placement.generic.gxbBeReference')}: {gxbBeReference}\r\n            <br />\r\n          </span>\r\n        )}\r\n        {addressStr && (\r\n          <span>\r\n            {utils.string.t('app.address')}: {addressStr}\r\n          </span>\r\n        )}\r\n      </>\r\n    );\r\n  };\r\n\r\n  const renderOptions = async (type, searchTerm) => {\r\n    const orderBy = formattedAccountStatusList.map((status) => status.id);\r\n    const options = await getOptions(type, searchTerm);\r\n\r\n    const optionsWithStatus = options.map((option) => {\r\n      const marketDetail = getMarketDetail(option);\r\n\r\n      return {\r\n        ...option,\r\n        label: (\r\n          <OptionDetail label={option.edgeName} detail={marketDetail}>\r\n            <Restricted include={[constants.ROLE_BROKER]}>\r\n              <StatusIcon translationPath=\"statusMarket\" list={formattedAccountStatusList} id={option.statusId} />\r\n            </Restricted>\r\n          </OptionDetail>\r\n        ),\r\n      };\r\n    });\r\n\r\n    return optionsWithStatus.sort((a, b) => orderBy.indexOf(a.statusId) - orderBy.indexOf(b.statusId));\r\n  };\r\n\r\n  const fields = [\r\n    {\r\n      name: 'departmentId',\r\n      type: 'hidden',\r\n      value: deptId,\r\n    },\r\n    {\r\n      name: 'markets',\r\n      type: 'autocomplete',\r\n      label: utils.string.t('market.fields.market'),\r\n      options: [],\r\n      optionKey: 'id',\r\n      optionLabel: 'label',\r\n      validation: Yup.array()\r\n        .of(Yup.mixed().required(utils.string.t('validation.required')))\r\n        .required(utils.string.t('validation.required')),\r\n      innerComponentProps: {\r\n        valueLabel: 'edgeName',\r\n        allowEmpty: true,\r\n        async: {\r\n          handler: renderOptions,\r\n          type: 'market',\r\n          filter: filterMarketsInUse(marketsInUse),\r\n        },\r\n      },\r\n      muiComponentProps: {\r\n        autoFocus: true,\r\n        'data-testid': 'market',\r\n      },\r\n      callback: (values, setValue) => {\r\n        const value = values && get(values, '[0]');\r\n\r\n        setMarketSelected(value ? value.id : null);\r\n        setValue('markets', [value]);\r\n        setValue('capacityTypeId', value ? value.capacityTypeId || '' : '');\r\n      },\r\n    },\r\n    {\r\n      name: 'capacityTypeId',\r\n      type: 'select',\r\n      value: '',\r\n      options: refDataCapacityTypes,\r\n      optionKey: 'id',\r\n      optionLabel: 'name',\r\n      muiComponentProps: {\r\n        disabled: !marketSelected,\r\n      },\r\n      label: utils.string.t('market.fields.capacityType'),\r\n      hint: utils.string.t('market.fields.capacityTypeHint'),\r\n    },\r\n    {\r\n      name: 'underwriters',\r\n      label: utils.string.t('market.legends.underwriters'),\r\n      type: 'array',\r\n      arrayItemDef: [\r\n        {\r\n          name: 'firstName',\r\n          type: 'text',\r\n          label: utils.string.t('market.fields.firstName'),\r\n          value: '',\r\n          muiComponentProps: {\r\n            InputProps: {\r\n              classes: {\r\n                input: classes.input,\r\n              },\r\n            },\r\n          },\r\n        },\r\n        {\r\n          name: 'lastName',\r\n          type: 'text',\r\n          label: utils.string.t('market.fields.lastName'),\r\n          value: '',\r\n          muiComponentProps: {\r\n            InputProps: {\r\n              classes: {\r\n                input: classes.input,\r\n              },\r\n            },\r\n          },\r\n        },\r\n        {\r\n          name: 'emailId',\r\n          type: 'text',\r\n          label: utils.string.t('market.fields.email'),\r\n          value: '',\r\n          muiComponentProps: {\r\n            InputProps: {\r\n              classes: {\r\n                input: classes.input,\r\n              },\r\n            },\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  const actions = [\r\n    {\r\n      name: 'cancel',\r\n      label: utils.string.t('app.cancel'),\r\n      handler: handleClose,\r\n    },\r\n    {\r\n      name: 'submit',\r\n      label: utils.string.t('app.submit'),\r\n      handler: (...args) => {\r\n        return dispatch(addDepartmentMarket(...args));\r\n      },\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <AddDepartmentMarketView\r\n      fields={fields}\r\n      actions={actions}\r\n      isUnderwritersVisible={underwritersVisible}\r\n      handlers={{\r\n        showUnderwriters: setUnderwritersVisible,\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}