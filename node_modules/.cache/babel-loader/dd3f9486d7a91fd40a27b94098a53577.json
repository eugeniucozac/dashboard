{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as utils from 'utils';\nimport { addLoader, removeLoader, authLogout } from 'stores';\nimport config from 'config';\nimport moment from 'moment';\nexport var getFileUploadDocuments = function getFileUploadDocuments(formData, params) {\n  return function (dispatch, getState) {\n    var _formData$department, _formData$documentTyp, _formData$insuredName, _formData$riskReferen, _formData$xbInstance;\n\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth;\n\n    var defaultError = {\n      file: 'stores/fileUpload.actions.getFileUploadDocuments'\n    };\n    dispatch(getFileUploadDocumentsRequest(formData, params));\n    dispatch(addLoader('getFileUploadDocuments'));\n\n    if (!formData || !params) {\n      dispatch(getFileUploadDocumentsFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Missing parameters'\n      })));\n      dispatch(removeLoader('getFileUploadDocuments'));\n      return;\n    }\n\n    return utils.api // temporarily switching to GET to work in json-server\n    .get({\n      // .post({\n      token: auth.accessToken,\n      // endpoint: endpoint.dmsService,\n      endpoint: 'http://localhost:9000',\n      path: 'data/search/document',\n      data: {\n        department: ((_formData$department = formData.department) === null || _formData$department === void 0 ? void 0 : _formData$department.value) || '',\n        documentTypeId: ((_formData$documentTyp = formData.documentType) === null || _formData$documentTyp === void 0 ? void 0 : _formData$documentTyp.id) || 0,\n        inceptionYear: formData.inceptionYear ? moment(formData.inceptionYear).format('YYYY') : '',\n        insuredName: ((_formData$insuredName = formData.insuredName) === null || _formData$insuredName === void 0 ? void 0 : _formData$insuredName.name) || '',\n        riskReference: ((_formData$riskReferen = formData.riskReference) === null || _formData$riskReferen === void 0 ? void 0 : _formData$riskReferen.policyRef) || '',\n        instanceID: ((_formData$xbInstance = formData.xbInstance) === null || _formData$xbInstance === void 0 ? void 0 : _formData$xbInstance.id) || '',\n        page: params.page || 1,\n        pageSize: params.size || config.ui.pagination.default,\n        sortBy: '',\n        direction: ''\n      }\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      if ((json === null || json === void 0 ? void 0 : json.status) === 'OK' && (json === null || json === void 0 ? void 0 : json.data)) {\n        dispatch(getFileUploadDocumentsSuccess(json));\n        return {\n          data: json.data,\n          pagination: json.pagination\n        };\n      } else {\n        return Promise.reject(_objectSpread({\n          message: \"API error\".concat(json.status ? \" (\".concat(json.status, \")\") : '')\n        }, json && _objectSpread({}, json)));\n      }\n    }).catch(function (err) {\n      utils.api.handleError(err, _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API fetch error (fileUpload.getFileUploadDocuments)'\n      }));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(getFileUploadDocumentsFailure(err));\n      return err;\n    }).finally(function () {\n      dispatch(removeLoader('getFileUploadDocuments'));\n    });\n  };\n};\nexport var getFileUploadDocumentsRequest = function getFileUploadDocumentsRequest(formData, params) {\n  return {\n    type: 'FILE_UPLOAD_GET_DOCUMENTS_REQUEST',\n    payload: {\n      formData: formData,\n      params: params\n    }\n  };\n};\nexport var getFileUploadDocumentsSuccess = function getFileUploadDocumentsSuccess(json) {\n  return {\n    type: 'FILE_UPLOAD_GET_DOCUMENTS_SUCCESS',\n    payload: json\n  };\n};\nexport var getFileUploadDocumentsFailure = function getFileUploadDocumentsFailure(error) {\n  return {\n    type: 'FILE_UPLOAD_GET_DOCUMENTS_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/fileUpload/fileUpload.actions.getDocuments.js"],"names":["utils","addLoader","removeLoader","authLogout","config","moment","getFileUploadDocuments","formData","params","dispatch","getState","auth","user","defaultError","file","getFileUploadDocumentsRequest","getFileUploadDocumentsFailure","message","api","get","token","accessToken","endpoint","path","data","department","value","documentTypeId","documentType","id","inceptionYear","format","insuredName","name","riskReference","policyRef","instanceID","xbInstance","page","pageSize","size","ui","pagination","default","sortBy","direction","then","response","handleResponse","json","status","getFileUploadDocumentsSuccess","Promise","reject","catch","err","handleError","handleUnauthorized","finally","type","payload","error"],"mappings":"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","sourcesContent":["import * as utils from 'utils';\r\nimport { addLoader, removeLoader, authLogout } from 'stores';\r\nimport config from 'config';\r\nimport moment from 'moment';\r\n\r\nexport const getFileUploadDocuments = (formData, params) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: {auth} } = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/fileUpload.actions.getFileUploadDocuments',\r\n  };\r\n\r\n  dispatch(getFileUploadDocumentsRequest(formData, params));\r\n  dispatch(addLoader('getFileUploadDocuments'));\r\n\r\n  if (!formData || !params) {\r\n    dispatch(getFileUploadDocumentsFailure({ ...defaultError, message: 'Missing parameters' }));\r\n    dispatch(removeLoader('getFileUploadDocuments'));\r\n    return;\r\n  }\r\n\r\n  return (\r\n    utils.api\r\n      // temporarily switching to GET to work in json-server\r\n      .get({\r\n        // .post({\r\n        token: auth.accessToken,\r\n        // endpoint: endpoint.dmsService,\r\n        endpoint: 'http://localhost:9000',\r\n        path: 'data/search/document',\r\n        data: {\r\n          department: formData.department?.value || '',\r\n          documentTypeId: formData.documentType?.id || 0,\r\n          inceptionYear: formData.inceptionYear ? moment(formData.inceptionYear).format('YYYY') : '',\r\n          insuredName: formData.insuredName?.name || '',\r\n          riskReference: formData.riskReference?.policyRef || '',\r\n          instanceID: formData.xbInstance?.id || '',\r\n          page: params.page || 1,\r\n          pageSize: params.size || config.ui.pagination.default,\r\n          sortBy: '',\r\n          direction: '',\r\n        },\r\n      })\r\n      .then((response) => utils.api.handleResponse(response))\r\n      .then((json) => {\r\n        if (json?.status === 'OK' && json?.data) {\r\n          dispatch(getFileUploadDocumentsSuccess(json));\r\n          return { data: json.data, pagination: json.pagination };\r\n        } else {\r\n          return Promise.reject({\r\n            message: `API error${json.status ? ` (${json.status})` : ''}`,\r\n            ...(json && { ...json }),\r\n          });\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        utils.api.handleError(err, { ...defaultError, message: 'API fetch error (fileUpload.getFileUploadDocuments)' });\r\n        utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n        dispatch(getFileUploadDocumentsFailure(err));\r\n        return err;\r\n      })\r\n      .finally(() => {\r\n        dispatch(removeLoader('getFileUploadDocuments'));\r\n      })\r\n  );\r\n};\r\n\r\nexport const getFileUploadDocumentsRequest = (formData, params) => {\r\n  return {\r\n    type: 'FILE_UPLOAD_GET_DOCUMENTS_REQUEST',\r\n    payload: { formData, params },\r\n  };\r\n};\r\n\r\nexport const getFileUploadDocumentsSuccess = (json) => {\r\n  return {\r\n    type: 'FILE_UPLOAD_GET_DOCUMENTS_SUCCESS',\r\n    payload: json,\r\n  };\r\n};\r\n\r\nexport const getFileUploadDocumentsFailure = (error) => {\r\n  return {\r\n    type: 'FILE_UPLOAD_GET_DOCUMENTS_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}