{"ast":null,"code":"var _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\forms\\\\AddEditClaimRefNotes\\\\AddEditClaimRefNotes.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as Yup from 'yup'; //app\n\nimport { AddEditClaimRefNotesView } from './AddEditClaimRefNotes.view';\nimport { hideModal, showModal, postSaveClaimNotes, selectCaseIncidentDetails, selectLossSelected } from 'stores';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nAddEditClaimRefNotes.propTypes = {\n  claim: PropTypes.object\n};\nexport default function AddEditClaimRefNotes(_ref) {\n  _s();\n\n  var claim = _ref.claim;\n  var dispatch = useDispatch();\n  var caseIncidentDetails = useSelector(selectCaseIncidentDetails);\n  var lossSelected = useSelector(selectLossSelected);\n  var fields = [{\n    name: 'caseIncidentID',\n    type: 'hidden',\n    value: (claim === null || claim === void 0 ? void 0 : claim.caseIncidentID) || (caseIncidentDetails === null || caseIncidentDetails === void 0 ? void 0 : caseIncidentDetails.caseIncidentID)\n  }, {\n    name: 'notesDescription',\n    type: 'textarea',\n    value: '',\n    validation: Yup.string().max(1000, utils.string.t('validation.string.max')).required(utils.string.t('validation.required')),\n    muiComponentProps: {\n      multiline: true,\n      rows: 3,\n      rowsMax: 6\n    }\n  }];\n  var actions = [{\n    name: 'cancel',\n    label: utils.string.t('app.cancel'),\n    handler: function handler() {\n      dispatch(showModal({\n        component: 'CONFIRM',\n        props: {\n          title: utils.string.t('status.alert'),\n          hint: utils.string.t('claims.notes.notifications.alertPopup'),\n          fullWidth: true,\n          maxWidth: 'xs',\n          componentProps: {\n            cancelLabel: utils.string.t('app.no'),\n            confirmLabel: utils.string.t('app.yes'),\n            submitHandler: function submitHandler() {\n              dispatch(hideModal());\n            },\n            cancelHandler: function cancelHandler() {}\n          }\n        }\n      }));\n    }\n  }, {\n    name: 'submit',\n    label: utils.string.t('app.save'),\n    handler: function handler(values) {\n      return dispatch(postSaveClaimNotes(values));\n    }\n  }];\n  return /*#__PURE__*/_jsxDEV(AddEditClaimRefNotesView, {\n    actions: actions,\n    fields: fields,\n    claim: claim,\n    loss: lossSelected\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 10\n  }, this);\n}\n\n_s(AddEditClaimRefNotes, \"5F4WXUGdixFdnmRMwYZWcBRsxlU=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = AddEditClaimRefNotes;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddEditClaimRefNotes\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/forms/AddEditClaimRefNotes/AddEditClaimRefNotes.js"],"names":["React","PropTypes","useDispatch","useSelector","Yup","AddEditClaimRefNotesView","hideModal","showModal","postSaveClaimNotes","selectCaseIncidentDetails","selectLossSelected","utils","AddEditClaimRefNotes","propTypes","claim","object","dispatch","caseIncidentDetails","lossSelected","fields","name","type","value","caseIncidentID","validation","string","max","t","required","muiComponentProps","multiline","rows","rowsMax","actions","label","handler","component","props","title","hint","fullWidth","maxWidth","componentProps","cancelLabel","confirmLabel","submitHandler","cancelHandler","values"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport * as Yup from 'yup';\r\n\r\n//app\r\nimport { AddEditClaimRefNotesView } from './AddEditClaimRefNotes.view';\r\nimport { hideModal, showModal, postSaveClaimNotes, selectCaseIncidentDetails, selectLossSelected } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nAddEditClaimRefNotes.propTypes = {\r\n  claim: PropTypes.object,\r\n};\r\nexport default function AddEditClaimRefNotes({ claim }) {\r\n  const dispatch = useDispatch();\r\n  const caseIncidentDetails = useSelector(selectCaseIncidentDetails);\r\n  const lossSelected = useSelector(selectLossSelected);\r\n\r\n  const fields = [\r\n    {\r\n      name: 'caseIncidentID',\r\n      type: 'hidden',\r\n      value: claim?.caseIncidentID || caseIncidentDetails?.caseIncidentID,\r\n    },\r\n    {\r\n      name: 'notesDescription',\r\n      type: 'textarea',\r\n      value: '',\r\n      validation: Yup.string().max(1000, utils.string.t('validation.string.max')).required(utils.string.t('validation.required')),\r\n      muiComponentProps: {\r\n        multiline: true,\r\n        rows: 3,\r\n        rowsMax: 6,\r\n      },\r\n    },\r\n  ];\r\n\r\n  const actions = [\r\n    {\r\n      name: 'cancel',\r\n      label: utils.string.t('app.cancel'),\r\n      handler: () => {\r\n        dispatch(\r\n          showModal({\r\n            component: 'CONFIRM',\r\n            props: {\r\n              title: utils.string.t('status.alert'),\r\n              hint: utils.string.t('claims.notes.notifications.alertPopup'),\r\n              fullWidth: true,\r\n              maxWidth: 'xs',\r\n              componentProps: {\r\n                cancelLabel: utils.string.t('app.no'),\r\n                confirmLabel: utils.string.t('app.yes'),\r\n                submitHandler: () => {\r\n                  dispatch(hideModal());\r\n                },\r\n                cancelHandler: () => {},\r\n              },\r\n            },\r\n          })\r\n        );\r\n      },\r\n    },\r\n    {\r\n      name: 'submit',\r\n      label: utils.string.t('app.save'),\r\n      handler: (values) => dispatch(postSaveClaimNotes(values)),\r\n    },\r\n  ];\r\n\r\n  return <AddEditClaimRefNotesView actions={actions} fields={fields} claim={claim} loss={lossSelected} />;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}