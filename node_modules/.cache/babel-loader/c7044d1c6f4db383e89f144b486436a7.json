{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as utils from 'utils';\nimport { authLogout, addLoader, enqueueNotification, removeLoader } from 'stores';\nexport var postLossInformation = function postLossInformation(formData) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        user = _getState.user,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/claims.actions.postLossInformation'\n    };\n    dispatch(postLossInformationRequest(formData));\n    dispatch(addLoader('postLossInformation'));\n    var nowIsoString = utils.date.toISOString(new Date());\n    var catCodesID = formData.catCodesID; // remove unwanted form values\n\n    delete formData.file;\n    delete formData.catCodesID;\n\n    var concatDateAndTime = function concatDateAndTime(contactDate, contactTime) {\n      var partDate = utils.string.t('format.date', {\n        value: {\n          date: contactDate || new Date(),\n          format: 'D MMM YYYY'\n        }\n      });\n      return utils.date.toISOString(partDate + ' ' + (contactTime ? contactTime + ':00' : '00:00:00'));\n    };\n\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.claimService,\n      path: 'api/data/loss',\n      data: _objectSpread(_objectSpread({}, formData), {}, {\n        catCodesID: catCodesID === null || catCodesID === void 0 ? void 0 : catCodesID.id,\n        toDate: utils.date.toISOString(formData === null || formData === void 0 ? void 0 : formData.toDate),\n        fromDate: utils.date.toISOString(formData === null || formData === void 0 ? void 0 : formData.fromDate),\n        firstContactDate: concatDateAndTime(formData.firstContactDate, formData.firstContactTime),\n        isActive: 1,\n        createdBy: user.id,\n        createdDate: nowIsoString,\n        lossDetailID: null,\n        updatedBy: user.id,\n        updatedDate: nowIsoString\n      })\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (data) {\n      dispatch(postLossInformationSuccess(data.data));\n      dispatch(enqueueNotification('notification.lossInformation.success', 'success'));\n      return data.data;\n    }).catch(function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API post error'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(postLossInformationFailure(err));\n      dispatch(enqueueNotification('notification.lossInformation.fail', 'error'));\n      return err;\n    }).finally(function () {\n      dispatch(removeLoader('postLossInformation'));\n    });\n  };\n};\nexport var postLossInformationRequest = function postLossInformationRequest(data) {\n  return {\n    type: 'LOSS_INFORMATION_POST_REQUEST',\n    payload: data\n  };\n};\nexport var postLossInformationSuccess = function postLossInformationSuccess(responseData) {\n  return {\n    type: 'LOSS_INFORMATION_POST_SUCCESS',\n    payload: responseData\n  };\n};\nexport var postLossInformationFailure = function postLossInformationFailure(error) {\n  return {\n    type: 'LOSS_INFORMATION_POST_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.postLossInformation.js"],"names":["utils","authLogout","addLoader","enqueueNotification","removeLoader","postLossInformation","formData","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","postLossInformationRequest","nowIsoString","date","toISOString","Date","catCodesID","concatDateAndTime","contactDate","contactTime","partDate","string","t","value","format","api","post","token","accessToken","claimService","path","data","id","toDate","fromDate","firstContactDate","firstContactTime","isActive","createdBy","createdDate","lossDetailID","updatedBy","updatedDate","then","response","handleResponse","postLossInformationSuccess","catch","err","errorParams","message","handleError","handleUnauthorized","postLossInformationFailure","finally","type","payload","responseData","error"],"mappings":"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","sourcesContent":["import * as utils from 'utils';\r\nimport { authLogout, addLoader, enqueueNotification, removeLoader } from 'stores';\r\n\r\nexport const postLossInformation = (formData) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, user, config: { vars: { endpoint } } } = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.postLossInformation',\r\n  };\r\n\r\n  dispatch(postLossInformationRequest(formData));\r\n  dispatch(addLoader('postLossInformation'));\r\n\r\n  const nowIsoString = utils.date.toISOString(new Date());\r\n  const { catCodesID } = formData;\r\n\r\n  // remove unwanted form values\r\n  delete formData.file;\r\n  delete formData.catCodesID;\r\n\r\n  const concatDateAndTime = (contactDate, contactTime) => {\r\n    let partDate = utils.string.t('format.date', { value: { date: contactDate || new Date(), format: 'D MMM YYYY' } });\r\n    return utils.date.toISOString(partDate + ' ' + (contactTime ? contactTime + ':00' : '00:00:00'));\r\n  };\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.claimService,\r\n      path: 'api/data/loss',\r\n      data: {\r\n        ...formData,\r\n        catCodesID: catCodesID?.id,\r\n        toDate: utils.date.toISOString(formData?.toDate),\r\n        fromDate: utils.date.toISOString(formData?.fromDate),\r\n        firstContactDate: concatDateAndTime(formData.firstContactDate, formData.firstContactTime),\r\n        isActive: 1,\r\n        createdBy: user.id,\r\n        createdDate: nowIsoString,\r\n        lossDetailID: null,\r\n        updatedBy: user.id,\r\n        updatedDate: nowIsoString,\r\n      },\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((data) => {\r\n      dispatch(postLossInformationSuccess(data.data));\r\n      dispatch(enqueueNotification('notification.lossInformation.success', 'success'));\r\n      return data.data;\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        ...defaultError,\r\n        message: 'API post error',\r\n      };\r\n\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(postLossInformationFailure(err));\r\n      dispatch(enqueueNotification('notification.lossInformation.fail', 'error'));\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('postLossInformation'));\r\n    });\r\n};\r\n\r\nexport const postLossInformationRequest = (data) => {\r\n  return {\r\n    type: 'LOSS_INFORMATION_POST_REQUEST',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const postLossInformationSuccess = (responseData) => {\r\n  return {\r\n    type: 'LOSS_INFORMATION_POST_SUCCESS',\r\n    payload: responseData,\r\n  };\r\n};\r\n\r\nexport const postLossInformationFailure = (error) => {\r\n  return {\r\n    type: 'LOSS_INFORMATION_POST_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}