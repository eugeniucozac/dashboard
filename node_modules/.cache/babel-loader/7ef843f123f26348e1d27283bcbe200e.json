{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\QuoteBind\\\\CoverageComparison\\\\CoverageForm.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport { useDispatch } from 'react-redux';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { LinearProgress } from '@material-ui/core';\nimport { Button, FormActions, Empty } from 'components';\nimport RenderStep from 'forms/AddEditQuoteBind/RenderStep';\nimport { postCoverages } from 'stores';\nimport { ReactComponent as Loading } from \"@svgr/webpack?-svgo,+titleProp,+ref!assets/svg/loading.svg\";\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport var CoverageForm = function CoverageForm(_ref) {\n  _s();\n\n  var formData = _ref.formData,\n      riskId = _ref.riskId,\n      riskType = _ref.riskType,\n      coverageDefinitionFields = _ref.coverageDefinitionFields,\n      handleHideForm = _ref.handleHideForm;\n  var dispatch = useDispatch();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isSubmitting = _useState2[0],\n      setIsSubmitting = _useState2[1];\n\n  var isEdit = formData.isEdit,\n      editCoverage = formData.editCoverage,\n      coverageId = formData.coverageId;\n  var coverageFields = utils.risk.parseFields(coverageDefinitionFields, {});\n  var defaultValues = isEdit && editCoverage ? editCoverage : utils.form.getInitialValues(coverageFields);\n  var validationSchema = utils.form.getValidationSchema(coverageFields);\n\n  var handleCancel = function handleCancel() {\n    handleHideForm();\n  };\n\n  var onSubmit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n      var postData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setIsSubmitting(true);\n              postData = isEdit ? {\n                riskId: riskId,\n                riskType: riskType,\n                data: data,\n                definitions: coverageDefinitionFields,\n                isEdit: isEdit,\n                coverageId: coverageId\n              } : {\n                riskId: riskId,\n                riskType: riskType,\n                data: data,\n                definitions: coverageDefinitionFields\n              };\n              _context.next = 4;\n              return dispatch(postCoverages(postData));\n\n            case 4:\n              setIsSubmitting(false);\n              handleHideForm();\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onSubmit(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var onError = function onError(errors, e) {\n    return console.log(errors, e);\n  };\n\n  var methods = useForm(_objectSpread(_objectSpread({\n    shouldUnregister: false,\n    defaultValues: defaultValues\n  }, validationSchema && {\n    resolver: yupResolver(validationSchema)\n  }), {}, {\n    mode: 'onChange'\n  }));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(FormProvider, _objectSpread(_objectSpread({}, methods), {}, {\n      \"data-testid\": isEdit ? 'coverage-form-edit' : 'coverage-form',\n      children: isSubmitting ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(LinearProgress, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(Empty, {\n          width: 400,\n          title: utils.string.t('products.coverageSubmitInProgress'),\n          icon: /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 98\n          }, _this),\n          padding: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, _this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(RenderStep, {\n          fieldsArray: coverageFields,\n          fields: coverageFields,\n          classes: {},\n          options: {\n            gridSize: {\n              xs: 6,\n              md: 6,\n              xl: 6\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(FormActions, {\n          type: \"dialog\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            text: utils.string.t('app.cancel'),\n            variant: \"text\",\n            disabled: methods.formState.isSubmitting,\n            onClick: handleCancel\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(Button, {\n            text: utils.string.t('app.submit'),\n            type: \"submit\",\n            disabled: methods.formState.isSubmitting || isSubmitting,\n            onClick: function onClick() {\n              return methods.handleSubmit(onSubmit, onError)();\n            },\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true)\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false);\n};\n\n_s(CoverageForm, \"lZLVXxWMwC1WAkQDV/lOw5n7bNs=\", false, function () {\n  return [useDispatch, useForm];\n});\n\n_c = CoverageForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CoverageForm\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/QuoteBind/CoverageComparison/CoverageForm.js"],"names":["useState","FormProvider","useForm","useDispatch","yupResolver","LinearProgress","Button","FormActions","Empty","RenderStep","postCoverages","utils","CoverageForm","formData","riskId","riskType","coverageDefinitionFields","handleHideForm","dispatch","isSubmitting","setIsSubmitting","isEdit","editCoverage","coverageId","coverageFields","risk","parseFields","defaultValues","form","getInitialValues","validationSchema","getValidationSchema","handleCancel","onSubmit","data","postData","definitions","onError","errors","e","console","log","methods","shouldUnregister","resolver","mode","string","t","gridSize","xs","md","xl","formState","handleSubmit"],"mappings":"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","sourcesContent":["import { useState } from 'react';\r\nimport { FormProvider, useForm } from 'react-hook-form';\r\nimport { useDispatch } from 'react-redux';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n\r\nimport { LinearProgress } from '@material-ui/core';\r\n\r\nimport { Button, FormActions, Empty } from 'components';\r\nimport RenderStep from 'forms/AddEditQuoteBind/RenderStep';\r\nimport { postCoverages } from 'stores';\r\nimport { ReactComponent as Loading } from 'assets/svg/loading.svg';\r\n\r\nimport * as utils from 'utils';\r\n\r\nexport const CoverageForm = ({ formData, riskId, riskType, coverageDefinitionFields, handleHideForm }) => {\r\n  const dispatch = useDispatch();\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const { isEdit, editCoverage, coverageId } = formData;\r\n\r\n  const coverageFields = utils.risk.parseFields(coverageDefinitionFields, {});\r\n  const defaultValues = isEdit && editCoverage ? editCoverage : utils.form.getInitialValues(coverageFields);\r\n\r\n  const validationSchema = utils.form.getValidationSchema(coverageFields);\r\n\r\n  const handleCancel = () => {\r\n    handleHideForm();\r\n  };\r\n\r\n  const onSubmit = async (data) => {\r\n    setIsSubmitting(true);\r\n    const postData = isEdit\r\n      ? { riskId, riskType, data, definitions: coverageDefinitionFields, isEdit, coverageId }\r\n      : { riskId, riskType, data, definitions: coverageDefinitionFields };\r\n\r\n    await dispatch(postCoverages(postData));\r\n\r\n    setIsSubmitting(false);\r\n    handleHideForm();\r\n  };\r\n\r\n  const onError = (errors, e) => console.log(errors, e);\r\n\r\n  const methods = useForm({\r\n    shouldUnregister: false,\r\n    defaultValues,\r\n    ...(validationSchema && { resolver: yupResolver(validationSchema) }),\r\n    mode: 'onChange',\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <FormProvider {...methods} data-testid={isEdit ? 'coverage-form-edit' : 'coverage-form'}>\r\n        {isSubmitting ? (\r\n          <div>\r\n            <LinearProgress />\r\n            <Empty width={400} title={utils.string.t('products.coverageSubmitInProgress')} icon={<Loading />} padding />\r\n          </div>\r\n        ) : (\r\n          <>\r\n            <RenderStep fieldsArray={coverageFields} fields={coverageFields} classes={{}} options={{ gridSize: { xs: 6, md: 6, xl: 6 } }} />\r\n\r\n            <FormActions type=\"dialog\">\r\n              <Button text={utils.string.t('app.cancel')} variant=\"text\" disabled={methods.formState.isSubmitting} onClick={handleCancel} />\r\n\r\n              <Button\r\n                text={utils.string.t('app.submit')}\r\n                type=\"submit\"\r\n                disabled={methods.formState.isSubmitting || isSubmitting}\r\n                onClick={() => methods.handleSubmit(onSubmit, onError)()}\r\n                color=\"primary\"\r\n              />\r\n            </FormActions>\r\n          </>\r\n        )}\r\n      </FormProvider>\r\n    </>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}