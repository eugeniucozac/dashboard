{"ast":null,"code":"import _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport get from 'lodash/get'; // app\n\nimport { addLoader, authLogout, enqueueNotification, removeLoader } from 'stores';\nimport * as utils from 'utils';\nexport var removeComplexityInsured = function removeComplexityInsured(data) {\n  return function (dispatch, getState) {\n    var _complexityInsured$it;\n\n    // prettier-ignore\n    var state = getState();\n    var auth = state.user.auth,\n        endpoint = state.config.vars.endpoint;\n    var defaultError = {\n      file: 'stores/claims.actions.removeComplexityInsured'\n    };\n    var complexityInsured = get(state, 'claims.insured');\n    var checkedInsured = Object.keys(Object.fromEntries(Object.entries(data).filter(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n\n      return value;\n    })));\n    var selectedIndex = complexityInsured === null || complexityInsured === void 0 ? void 0 : (_complexityInsured$it = complexityInsured.items) === null || _complexityInsured$it === void 0 ? void 0 : _complexityInsured$it.findIndex(function (item) {\n      return item.insured.split('.').join('') === checkedInsured[0];\n    });\n    var mappedInsured = checkedInsured.map(function (item) {\n      var _complexityInsured$it2;\n\n      return {\n        attributeType: 'Insured',\n        attributeValue: complexityInsured === null || complexityInsured === void 0 ? void 0 : (_complexityInsured$it2 = complexityInsured.items[selectedIndex]) === null || _complexityInsured$it2 === void 0 ? void 0 : _complexityInsured$it2.insured,\n        complexityAttributesID: 0,\n        isActive: 0,\n        isComplex: 1,\n        sourceID: 1\n      };\n    });\n    dispatch(removeComplexityInsuredRequest(mappedInsured));\n    dispatch(addLoader('removeComplexityInsured'));\n    return utils.api.put({\n      token: auth.accessToken,\n      endpoint: endpoint.claimService,\n      path: 'api/data/claims-triage/complex/insured/update',\n      data: mappedInsured\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(removeLoader('removeComplexityInsured'));\n      dispatch(enqueueNotification('notification.policyRemove.remove.success', 'success'));\n    }).catch(function (err) {\n      dispatch(removeComplexityInsuredFailure(err, defaultError));\n      dispatch(removeLoader('removeComplexityInsured'));\n      dispatch(enqueueNotification('notification.policyRemove.remove.fail', 'error'));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      return err;\n    });\n  };\n};\nexport var removeComplexityInsuredRequest = function removeComplexityInsuredRequest(payload) {\n  return {\n    type: 'CLAIMS_COMPLEXITY_POLICY_REMOVE_REQUEST',\n    payload: payload\n  };\n};\nexport var removeComplexityInsuredSuccess = function removeComplexityInsuredSuccess(payload) {\n  return {\n    type: 'CLAIMS_COMPLEXITY_POLICY_REMOVE_SUCCESS',\n    payload: payload\n  };\n};\nexport var removeComplexityInsuredFailure = function removeComplexityInsuredFailure(error) {\n  return {\n    type: 'CLAIMS_COMPLEXITY_POLICY_REMOVE_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.removeComplexityInsured.js"],"names":["get","addLoader","authLogout","enqueueNotification","removeLoader","utils","removeComplexityInsured","data","dispatch","getState","state","auth","user","endpoint","config","vars","defaultError","file","complexityInsured","checkedInsured","Object","keys","fromEntries","entries","filter","key","value","selectedIndex","items","findIndex","item","insured","split","join","mappedInsured","map","attributeType","attributeValue","complexityAttributesID","isActive","isComplex","sourceID","removeComplexityInsuredRequest","api","put","token","accessToken","claimService","path","then","response","handleResponse","json","handleNewData","catch","err","removeComplexityInsuredFailure","handleUnauthorized","payload","type","removeComplexityInsuredSuccess","error"],"mappings":"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","sourcesContent":["import get from 'lodash/get';\r\n\r\n// app\r\nimport { addLoader, authLogout, enqueueNotification, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const removeComplexityInsured = (data) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const state = getState();\r\n  const {\r\n    user: { auth },\r\n    config: {\r\n      vars: { endpoint },\r\n    },\r\n  } = state;\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.removeComplexityInsured',\r\n  };\r\n\r\n  const complexityInsured = get(state, 'claims.insured');\r\n  const checkedInsured = Object.keys(Object.fromEntries(Object.entries(data).filter(([key, value]) => value)));\r\n\r\n  const selectedIndex = complexityInsured?.items?.findIndex((item) => item.insured.split('.').join('') === checkedInsured[0]);\r\n\r\n  const mappedInsured = checkedInsured.map((item) => ({\r\n    attributeType: 'Insured',\r\n    attributeValue: complexityInsured?.items[selectedIndex]?.insured,\r\n    complexityAttributesID: 0,\r\n    isActive: 0,\r\n    isComplex: 1,\r\n    sourceID: 1,\r\n  }));\r\n\r\n  dispatch(removeComplexityInsuredRequest(mappedInsured));\r\n  dispatch(addLoader('removeComplexityInsured'));\r\n\r\n  return utils.api\r\n    .put({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.claimService,\r\n      path: 'api/data/claims-triage/complex/insured/update',\r\n      data: mappedInsured,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(removeLoader('removeComplexityInsured'));\r\n      dispatch(enqueueNotification('notification.policyRemove.remove.success', 'success'));\r\n    })\r\n    .catch((err) => {\r\n      dispatch(removeComplexityInsuredFailure(err, defaultError));\r\n      dispatch(removeLoader('removeComplexityInsured'));\r\n      dispatch(enqueueNotification('notification.policyRemove.remove.fail', 'error'));\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const removeComplexityInsuredRequest = (payload) => {\r\n  return {\r\n    type: 'CLAIMS_COMPLEXITY_POLICY_REMOVE_REQUEST',\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const removeComplexityInsuredSuccess = (payload) => {\r\n  return {\r\n    type: 'CLAIMS_COMPLEXITY_POLICY_REMOVE_SUCCESS',\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const removeComplexityInsuredFailure = (error) => {\r\n  return {\r\n    type: 'CLAIMS_COMPLEXITY_POLICY_REMOVE_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}