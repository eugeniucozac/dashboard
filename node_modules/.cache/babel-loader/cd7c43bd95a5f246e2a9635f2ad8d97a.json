{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\TaskCheckList\\\\TaskCheckList.view.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types'; //app\n\nimport styles from './TaskCheckList.styles';\nimport { Overflow, Layout, Warning, PopoverMenu, Button, TableHead, TableCell, FormCheckbox, FormContainer } from 'components';\nimport * as utils from 'utils';\nimport { ADVICE_AND_SETTLEMENT, AWAITING_MOVEMENT } from 'consts'; //mui\n\nimport { makeStyles, Typography, Box, Grid, Card, CardHeader, CardContent, Table, TableContainer, TableBody, TableRow } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nTaskCheckListView.propTypes = {\n  isCompletedTask: PropTypes.bool.isRequired,\n  allSelectionFlag: PropTypes.bool.isRequired,\n  nextActionFlag: PropTypes.bool.isRequired,\n  isMphasisUser: PropTypes.bool.isRequired,\n  isCheckListChanged: PropTypes.bool.isRequired,\n  hasCheckList: PropTypes.bool.isRequired,\n  hasNextActions: PropTypes.bool.isRequired,\n  columns: PropTypes.array.isRequired,\n  rows: PropTypes.array.isRequired,\n  fields: PropTypes.array.isRequired,\n  formControls: PropTypes.object.isRequired,\n  popoverActions: PropTypes.array.isRequired,\n  isCurrencyChanged: PropTypes.bool.isRequired,\n  task: PropTypes.object.isRequired,\n  handlers: PropTypes.shape({\n    checkListChangeSave: PropTypes.func.isRequired,\n    checkListChangeReset: PropTypes.func.isRequired,\n    completeTask: PropTypes.func.isRequired,\n    checklistDirtyCheck: PropTypes.func.isRequired\n  }).isRequired\n};\nexport function TaskCheckListView(_ref) {\n  _s();\n\n  var _this = this;\n\n  var isCompletedTask = _ref.isCompletedTask,\n      allSelectionFlag = _ref.allSelectionFlag,\n      nextActionFlag = _ref.nextActionFlag,\n      isMphasisUser = _ref.isMphasisUser,\n      isCheckListChanged = _ref.isCheckListChanged,\n      hasCheckList = _ref.hasCheckList,\n      hasNextActions = _ref.hasNextActions,\n      columns = _ref.columns,\n      rows = _ref.rows,\n      fields = _ref.fields,\n      formControls = _ref.formControls,\n      popoverActions = _ref.popoverActions,\n      isCurrencyChanged = _ref.isCurrencyChanged,\n      task = _ref.task,\n      handlers = _ref.handlers;\n  var classes = makeStyles(styles, {\n    name: 'TaskCheckList'\n  })();\n  var control = formControls.control,\n      register = formControls.register,\n      watch = formControls.watch,\n      setValue = formControls.setValue;\n  useEffect(function () {\n    if (utils.generic.isValidArray(fields, true)) {\n      fields.forEach(function (eachField) {\n        setValue(eachField.name, allSelectionFlag);\n      });\n    }\n  }, [allSelectionFlag]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    if (rows) {\n      rows.forEach(function (eachCheck) {\n        setValue(eachCheck === null || eachCheck === void 0 ? void 0 : eachCheck.actionListID.toString(), Boolean(eachCheck === null || eachCheck === void 0 ? void 0 : eachCheck.isActioned) || false);\n      });\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [rows]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.wrapper,\n    children: /*#__PURE__*/_jsxDEV(Layout, {\n      main: true,\n      padding: true,\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        className: classes.root,\n        children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n          className: classes.cardHeader,\n          title: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            justify: \"space-between\",\n            alignItems: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                className: classes.title,\n                children: utils.string.t('claims.processing.taskDetailsCheckList.checkList')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              className: classes.nextActionBtn,\n              children: [hasNextActions && /*#__PURE__*/_jsxDEV(PopoverMenu, {\n                variant: \"outlined\",\n                id: \"task-functions\",\n                size: \"small\",\n                color: \"primary\",\n                iconPosition: \"right\",\n                disabled: isCompletedTask ? true : (task === null || task === void 0 ? void 0 : task.taskDefKey) === ADVICE_AND_SETTLEMENT ? !nextActionFlag || !isCurrencyChanged : (task === null || task === void 0 ? void 0 : task.taskDefKey) === AWAITING_MOVEMENT ? false : !nextActionFlag,\n                text: utils.string.t('claims.processing.taskDetailsCheckList.nextTask'),\n                isButton: true,\n                anchorOrigin: {\n                  vertical: 'bottom',\n                  horizontal: 'right'\n                },\n                transformOrigin: {\n                  vertical: 'top',\n                  horizontal: 'right'\n                },\n                items: popoverActions\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 21\n              }, this), !hasNextActions && /*#__PURE__*/_jsxDEV(Button, {\n                text: utils.string.t('app.complete'),\n                disabled: isMphasisUser ? hasCheckList && !nextActionFlag : isCompletedTask,\n                onClick: function onClick() {\n                  return handlers.completeTask();\n                },\n                size: \"medium\",\n                color: \"primary\",\n                variant: \"text\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), !hasCheckList ? /*#__PURE__*/_jsxDEV(CardContent, {\n          variant: \"body2\",\n          className: classes.cardContent,\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            p: 5,\n            className: classes.noCheckListWarning,\n            children: /*#__PURE__*/_jsxDEV(Warning, {\n              type: \"info\",\n              align: \"center\",\n              size: \"large\",\n              icon: true,\n              text: utils.string.t('claims.processing.taskDetailsCheckList.noCheckListFound')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(CardContent, {\n          variant: \"body2\",\n          className: classes.cardContent,\n          children: [isMphasisUser && /*#__PURE__*/_jsxDEV(Box, {\n            p: 5,\n            className: classes.mandatoryHint,\n            children: /*#__PURE__*/_jsxDEV(Warning, {\n              type: \"info\",\n              align: \"left\",\n              size: \"small\",\n              icon: true,\n              text: utils.string.t('claims.processing.taskDetailsCheckList.mandatoryTasksHint')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(FormContainer, {\n                  nestedClasses: {\n                    root: classes.formContainer\n                  },\n                  children: /*#__PURE__*/_jsxDEV(Overflow, {\n                    children: /*#__PURE__*/_jsxDEV(TableContainer, {\n                      className: classes.tableContainer,\n                      children: /*#__PURE__*/_jsxDEV(Table, {\n                        stickyHeader: true,\n                        \"aria-label\": \"task checklist\",\n                        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n                          columns: columns,\n                          nestedClasses: {\n                            tableHead: classes.tableHead\n                          }\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 174,\n                          columnNumber: 29\n                        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n                          children: rows.map(function (eachRow, ind) {\n                            var actionDescId = eachRow === null || eachRow === void 0 ? void 0 : eachRow.actionListID.toString();\n                            return /*#__PURE__*/_jsxDEV(TableRow, {\n                              hover: true,\n                              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                                compact: true,\n                                className: classes.checkBoxCell,\n                                children: /*#__PURE__*/_jsxDEV(FormCheckbox, _objectSpread(_objectSpread({\n                                  name: actionDescId\n                                }, utils.form.getFieldProps(fields, actionDescId)), {}, {\n                                  control: control,\n                                  register: register,\n                                  watch: watch\n                                }), void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 182,\n                                  columnNumber: 39\n                                }, _this)\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 181,\n                                columnNumber: 37\n                              }, _this), /*#__PURE__*/_jsxDEV(TableCell, {\n                                compact: true,\n                                className: classes.actionDescCell,\n                                children: (eachRow === null || eachRow === void 0 ? void 0 : eachRow.actionListDescription) + ((eachRow === null || eachRow === void 0 ? void 0 : eachRow.isMandatory) ? ' *' : '')\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 191,\n                                columnNumber: 37\n                              }, _this), /*#__PURE__*/_jsxDEV(TableCell, {\n                                compact: true,\n                                className: classes.tableCell,\n                                children: eachRow === null || eachRow === void 0 ? void 0 : eachRow.updatedBy\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 195,\n                                columnNumber: 37\n                              }, _this), /*#__PURE__*/_jsxDEV(TableCell, {\n                                compact: true,\n                                className: classes.tableCell,\n                                children: eachRow === null || eachRow === void 0 ? void 0 : eachRow.updatedDate\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 198,\n                                columnNumber: 37\n                              }, _this)]\n                            }, ind, true, {\n                              fileName: _jsxFileName,\n                              lineNumber: 180,\n                              columnNumber: 35\n                            }, _this);\n                          })\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 176,\n                          columnNumber: 29\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 173,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 172,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 171,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 170,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(Box, {\n                  mt: 3,\n                  pr: 2,\n                  display: \"flex\",\n                  justifyContent: \"flex-end\",\n                  children: [/*#__PURE__*/_jsxDEV(Button, {\n                    text: utils.string.t('app.cancel'),\n                    onClick: function onClick() {\n                      return handlers.checklistDirtyCheck();\n                    },\n                    size: \"medium\",\n                    nestedClasses: {\n                      btn: classes.checklistActionBtns\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 213,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    text: utils.string.t('app.reset'),\n                    disabled: isCompletedTask,\n                    onClick: function onClick() {\n                      return handlers.checkListChangeReset();\n                    },\n                    size: \"medium\",\n                    nestedClasses: {\n                      btn: classes.checklistActionBtns\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 219,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    text: utils.string.t('app.save'),\n                    disabled: isCompletedTask ? true : (task === null || task === void 0 ? void 0 : task.taskDefKey) === ADVICE_AND_SETTLEMENT ? !isCheckListChanged || !isCurrencyChanged : !isCheckListChanged,\n                    onClick: function onClick() {\n                      return handlers.checkListChangeSave();\n                    },\n                    size: \"medium\",\n                    color: \"primary\",\n                    nestedClasses: {\n                      btn: classes.checklistActionBtns\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 226,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 212,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TaskCheckListView, \"3ubReDTFssvu4DHeldAg55cW/CI=\");\n\n_c = TaskCheckListView;\nTaskCheckListView.displayName = \"TaskCheckListView\";\nTaskCheckListView.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"TaskCheckListView\",\n  \"props\": {\n    \"isCompletedTask\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"allSelectionFlag\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"nextActionFlag\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"isMphasisUser\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"isCheckListChanged\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"hasCheckList\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"hasNextActions\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"columns\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"rows\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"fields\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"formControls\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"popoverActions\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"isCurrencyChanged\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"task\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"handlers\": {\n      \"type\": {\n        \"name\": \"shape\",\n        \"value\": {\n          \"checkListChangeSave\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"checkListChangeReset\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"completeTask\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"checklistDirtyCheck\": {\n            \"name\": \"func\",\n            \"required\": true\n          }\n        }\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\modules\\\\TaskCheckList\\\\TaskCheckList.view.js\"] = {\n    name: \"TaskCheckListView\",\n    docgenInfo: TaskCheckListView.__docgenInfo,\n    path: \"src\\\\modules\\\\TaskCheckList\\\\TaskCheckList.view.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskCheckListView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/TaskCheckList/TaskCheckList.view.js"],"names":["React","useEffect","PropTypes","styles","Overflow","Layout","Warning","PopoverMenu","Button","TableHead","TableCell","FormCheckbox","FormContainer","utils","ADVICE_AND_SETTLEMENT","AWAITING_MOVEMENT","makeStyles","Typography","Box","Grid","Card","CardHeader","CardContent","Table","TableContainer","TableBody","TableRow","TaskCheckListView","propTypes","isCompletedTask","bool","isRequired","allSelectionFlag","nextActionFlag","isMphasisUser","isCheckListChanged","hasCheckList","hasNextActions","columns","array","rows","fields","formControls","object","popoverActions","isCurrencyChanged","task","handlers","shape","checkListChangeSave","func","checkListChangeReset","completeTask","checklistDirtyCheck","classes","name","control","register","watch","setValue","generic","isValidArray","forEach","eachField","eachCheck","actionListID","toString","Boolean","isActioned","wrapper","root","cardHeader","title","string","t","nextActionBtn","taskDefKey","vertical","horizontal","cardContent","noCheckListWarning","mandatoryHint","formContainer","tableContainer","tableHead","map","eachRow","ind","actionDescId","checkBoxCell","form","getFieldProps","actionDescCell","actionListDescription","isMandatory","tableCell","updatedBy","updatedDate","btn","checklistActionBtns"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n//app\r\nimport styles from './TaskCheckList.styles';\r\nimport { Overflow, Layout, Warning, PopoverMenu, Button, TableHead, TableCell, FormCheckbox, FormContainer } from 'components';\r\nimport * as utils from 'utils';\r\nimport { ADVICE_AND_SETTLEMENT, AWAITING_MOVEMENT } from 'consts';\r\n\r\n//mui\r\nimport {\r\n  makeStyles,\r\n  Typography,\r\n  Box,\r\n  Grid,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  Table,\r\n  TableContainer,\r\n  TableBody,\r\n  TableRow,\r\n} from '@material-ui/core';\r\n\r\nTaskCheckListView.propTypes = {\r\n  isCompletedTask: PropTypes.bool.isRequired,\r\n  allSelectionFlag: PropTypes.bool.isRequired,\r\n  nextActionFlag: PropTypes.bool.isRequired,\r\n  isMphasisUser: PropTypes.bool.isRequired,\r\n  isCheckListChanged: PropTypes.bool.isRequired,\r\n  hasCheckList: PropTypes.bool.isRequired,\r\n  hasNextActions: PropTypes.bool.isRequired,\r\n  columns: PropTypes.array.isRequired,\r\n  rows: PropTypes.array.isRequired,\r\n  fields: PropTypes.array.isRequired,\r\n  formControls: PropTypes.object.isRequired,\r\n  popoverActions: PropTypes.array.isRequired,\r\n  isCurrencyChanged: PropTypes.bool.isRequired,\r\n  task: PropTypes.object.isRequired,\r\n  handlers: PropTypes.shape({\r\n    checkListChangeSave: PropTypes.func.isRequired,\r\n    checkListChangeReset: PropTypes.func.isRequired,\r\n    completeTask: PropTypes.func.isRequired,\r\n    checklistDirtyCheck: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport function TaskCheckListView({\r\n  isCompletedTask,\r\n  allSelectionFlag,\r\n  nextActionFlag,\r\n  isMphasisUser,\r\n  isCheckListChanged,\r\n  hasCheckList,\r\n  hasNextActions,\r\n  columns,\r\n  rows,\r\n  fields,\r\n  formControls,\r\n  popoverActions,\r\n  isCurrencyChanged,\r\n  task,\r\n  handlers,\r\n}) {\r\n  const classes = makeStyles(styles, { name: 'TaskCheckList' })();\r\n  const { control, register, watch, setValue } = formControls;\r\n\r\n  useEffect(() => {\r\n    if (utils.generic.isValidArray(fields, true)) {\r\n      fields.forEach((eachField) => {\r\n        setValue(eachField.name, allSelectionFlag);\r\n      });\r\n    }\r\n  }, [allSelectionFlag]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    if (rows) {\r\n      rows.forEach((eachCheck) => {\r\n        setValue(eachCheck?.actionListID.toString(), Boolean(eachCheck?.isActioned) || false);\r\n      });\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [rows]);\r\n\r\n  return (\r\n    <div className={classes.wrapper}>\r\n      <Layout main padding>\r\n        <Card className={classes.root}>\r\n          <CardHeader\r\n            className={classes.cardHeader}\r\n            title={\r\n              <Grid container justify=\"space-between\" alignItems=\"center\">\r\n                <Grid item>\r\n                  <Typography variant=\"body2\" className={classes.title}>\r\n                    {utils.string.t('claims.processing.taskDetailsCheckList.checkList')}\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item className={classes.nextActionBtn}>\r\n                  {hasNextActions && (\r\n                    <PopoverMenu\r\n                      variant=\"outlined\"\r\n                      id=\"task-functions\"\r\n                      size=\"small\"\r\n                      color=\"primary\"\r\n                      iconPosition=\"right\"\r\n                      disabled={\r\n                        isCompletedTask\r\n                          ? true\r\n                          : task?.taskDefKey === ADVICE_AND_SETTLEMENT\r\n                            ? !nextActionFlag || !isCurrencyChanged\r\n                            : task?.taskDefKey === AWAITING_MOVEMENT\r\n                              ? false\r\n                              : !nextActionFlag\r\n                      }\r\n                      text={utils.string.t('claims.processing.taskDetailsCheckList.nextTask')}\r\n                      isButton\r\n                      anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'right',\r\n                      }}\r\n                      transformOrigin={{\r\n                        vertical: 'top',\r\n                        horizontal: 'right',\r\n                      }}\r\n                      items={popoverActions}\r\n                    />\r\n                  )}\r\n                  {!hasNextActions && (\r\n                    <Button\r\n                      text={utils.string.t('app.complete')}\r\n                      disabled={isMphasisUser ? hasCheckList && !nextActionFlag : isCompletedTask}\r\n                      onClick={() => handlers.completeTask()}\r\n                      size=\"medium\"\r\n                      color=\"primary\"\r\n                      variant=\"text\"\r\n                    />\r\n                  )}\r\n                </Grid>\r\n              </Grid>\r\n            }\r\n          />\r\n          {!hasCheckList ? (\r\n            <CardContent variant=\"body2\" className={classes.cardContent}>\r\n              <Box p={5} className={classes.noCheckListWarning}>\r\n                <Warning\r\n                  type=\"info\"\r\n                  align=\"center\"\r\n                  size=\"large\"\r\n                  icon\r\n                  text={utils.string.t('claims.processing.taskDetailsCheckList.noCheckListFound')}\r\n                />\r\n              </Box>\r\n            </CardContent>\r\n          ) : (\r\n            <CardContent variant=\"body2\" className={classes.cardContent}>\r\n              {isMphasisUser && (\r\n                <Box p={5} className={classes.mandatoryHint}>\r\n                  <Warning\r\n                    type=\"info\"\r\n                    align=\"left\"\r\n                    size=\"small\"\r\n                    icon\r\n                    text={utils.string.t('claims.processing.taskDetailsCheckList.mandatoryTasksHint')}\r\n                  />\r\n                </Box>\r\n              )}\r\n              <Box>\r\n                <Grid container>\r\n                  <Grid item xs={12}>\r\n                    <FormContainer nestedClasses={{ root: classes.formContainer }}>\r\n                      <Overflow>\r\n                        <TableContainer className={classes.tableContainer}>\r\n                          <Table stickyHeader aria-label=\"task checklist\">\r\n                            <TableHead columns={columns} nestedClasses={{ tableHead: classes.tableHead }} />\r\n\r\n                            <TableBody>\r\n                              {rows.map((eachRow, ind) => {\r\n                                const actionDescId = eachRow?.actionListID.toString();\r\n                                return (\r\n                                  <TableRow key={ind} hover>\r\n                                    <TableCell compact className={classes.checkBoxCell}>\r\n                                      <FormCheckbox\r\n                                        name={actionDescId}\r\n                                        {...utils.form.getFieldProps(fields, actionDescId)}\r\n                                        control={control}\r\n                                        register={register}\r\n                                        watch={watch}\r\n                                      />\r\n                                    </TableCell>\r\n\r\n                                    <TableCell compact className={classes.actionDescCell}>\r\n                                      {eachRow?.actionListDescription + (eachRow?.isMandatory ? ' *' : '')}\r\n                                    </TableCell>\r\n\r\n                                    <TableCell compact className={classes.tableCell}>\r\n                                      {eachRow?.updatedBy}\r\n                                    </TableCell>\r\n                                    <TableCell compact className={classes.tableCell}>\r\n                                      {eachRow?.updatedDate}\r\n                                    </TableCell>\r\n                                  </TableRow>\r\n                                );\r\n                              })}\r\n                            </TableBody>\r\n                          </Table>\r\n                        </TableContainer>\r\n                      </Overflow>\r\n                    </FormContainer>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12}>\r\n                    <Box mt={3} pr={2} display=\"flex\" justifyContent=\"flex-end\">\r\n                      <Button\r\n                        text={utils.string.t('app.cancel')}\r\n                        onClick={() => handlers.checklistDirtyCheck()}\r\n                        size=\"medium\"\r\n                        nestedClasses={{ btn: classes.checklistActionBtns }}\r\n                      />\r\n                      <Button\r\n                        text={utils.string.t('app.reset')}\r\n                        disabled={isCompletedTask}\r\n                        onClick={() => handlers.checkListChangeReset()}\r\n                        size=\"medium\"\r\n                        nestedClasses={{ btn: classes.checklistActionBtns }}\r\n                      />\r\n                      <Button\r\n                        text={utils.string.t('app.save')}\r\n                        disabled={\r\n                          isCompletedTask\r\n                            ? true\r\n                            : task?.taskDefKey === ADVICE_AND_SETTLEMENT\r\n                              ? !isCheckListChanged || !isCurrencyChanged\r\n                              : !isCheckListChanged\r\n                        }\r\n                        onClick={() => handlers.checkListChangeSave()}\r\n                        size=\"medium\"\r\n                        color=\"primary\"\r\n                        nestedClasses={{ btn: classes.checklistActionBtns }}\r\n                      />\r\n                    </Box>\r\n                  </Grid>\r\n                </Grid>\r\n              </Box>\r\n            </CardContent>\r\n          )}\r\n        </Card>\r\n      </Layout>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}