{"ast":null,"code":"import \"core-js/modules/es.promise.finally\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n// app\nimport * as utils from 'utils';\nimport { authLogout, addLoader, enqueueNotification, hideModal, removeLoader } from 'stores';\nexport var postSanctionsCheck = function postSanctionsCheck(formData) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/claims.actions.postSanctionsCheck'\n    };\n    dispatch(postSanctionsCheckRequest(formData));\n    dispatch(addLoader('postSanctionsCheck'));\n\n    if (!formData || !formData.taskId) {\n      dispatch(postSanctionsCheckFailure(defaultError));\n      dispatch(enqueueNotification('notification.createSanctionCheck.fail', 'error'));\n      dispatch(removeLoader('postSanctionsCheck'));\n      return;\n    }\n\n    var rootProcessId = formData.rootProcessId,\n        taskId = formData.taskId;\n    var data = {\n      rootProcessId: rootProcessId\n    };\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.bpmService,\n      path: \"workflow/task/\".concat(taskId, \"/sanctionsCheck\"),\n      data: data\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(postSanctionsCheckSuccess(data));\n      dispatch(enqueueNotification('notification.createSanctionCheck.success', 'success'));\n      return data;\n    })[\"catch\"](function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API fetch error (claims.postSanctionsCheck)'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(postSanctionsCheckFailure(err));\n      dispatch(enqueueNotification('notification.createSanctionCheck.fail', 'error'));\n      return err;\n    })[\"finally\"](function () {\n      dispatch(removeLoader('postSanctionsCheck'));\n      dispatch(hideModal());\n    });\n  };\n};\nexport var postSanctionsCheckRequest = function postSanctionsCheckRequest(params) {\n  return {\n    type: 'CLAIMS_TASK_CREATE_SANCTIONS_CHECK',\n    payload: params\n  };\n};\nexport var postSanctionsCheckSuccess = function postSanctionsCheckSuccess(data) {\n  return {\n    type: 'CLAIMS_TASK_SANCTIONS_CHECK_POST_SUCCESS',\n    payload: data\n  };\n};\nexport var postSanctionsCheckFailure = function postSanctionsCheckFailure(error) {\n  return {\n    type: 'CLAIMS_TASK_SANCTIONS_CHECK_POST_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.postSanctionsCheck.js"],"names":["utils","authLogout","addLoader","enqueueNotification","hideModal","removeLoader","postSanctionsCheck","formData","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","postSanctionsCheckRequest","taskId","postSanctionsCheckFailure","rootProcessId","data","api","post","token","accessToken","bpmService","path","then","response","handleResponse","json","handleNewData","postSanctionsCheckSuccess","err","errorParams","message","handleError","handleUnauthorized","params","type","payload","error"],"mappings":"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","sourcesContent":["// app\r\nimport * as utils from 'utils';\r\nimport { authLogout, addLoader, enqueueNotification, hideModal, removeLoader } from 'stores';\r\n\r\nexport const postSanctionsCheck = (formData) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } } } = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.postSanctionsCheck',\r\n  };\r\n\r\n  dispatch(postSanctionsCheckRequest(formData));\r\n  dispatch(addLoader('postSanctionsCheck'));\r\n\r\n  if (!formData || !formData.taskId) {\r\n    dispatch(postSanctionsCheckFailure(defaultError));\r\n    dispatch(enqueueNotification('notification.createSanctionCheck.fail', 'error'));\r\n    dispatch(removeLoader('postSanctionsCheck'));\r\n    return;\r\n  }\r\n  const { rootProcessId, taskId } = formData;\r\n\r\n  const data = {\r\n    rootProcessId: rootProcessId,\r\n  };\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.bpmService,\r\n      path: `workflow/task/${taskId}/sanctionsCheck`,\r\n      data,\r\n    })\r\n    .then((response) => {\r\n      return utils.api.handleResponse(response);\r\n    })\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(postSanctionsCheckSuccess(data));\r\n      dispatch(enqueueNotification('notification.createSanctionCheck.success', 'success'));\r\n      return data;\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        ...defaultError,\r\n        message: 'API fetch error (claims.postSanctionsCheck)',\r\n      };\r\n\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(postSanctionsCheckFailure(err));\r\n      dispatch(enqueueNotification('notification.createSanctionCheck.fail', 'error'));\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('postSanctionsCheck'));\r\n      dispatch(hideModal());\r\n    });\r\n};\r\n\r\nexport const postSanctionsCheckRequest = (params) => {\r\n  return {\r\n    type: 'CLAIMS_TASK_CREATE_SANCTIONS_CHECK',\r\n    payload: params,\r\n  };\r\n};\r\n\r\nexport const postSanctionsCheckSuccess = (data) => {\r\n  return {\r\n    type: 'CLAIMS_TASK_SANCTIONS_CHECK_POST_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const postSanctionsCheckFailure = (error) => {\r\n  return {\r\n    type: 'CLAIMS_TASK_SANCTIONS_CHECK_POST_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}