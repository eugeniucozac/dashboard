{"ast":null,"code":"import _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _defineProperty from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\BoundTable\\\\BoundTable.js\";\nimport React, { PureComponent, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport get from 'lodash/get';\nimport xor from 'lodash/xor';\nimport orderBy from 'lodash/orderBy';\nimport toNumber from 'lodash/toNumber';\nimport isEmpty from 'lodash/isEmpty'; // app\n\nimport { TableHead, TableRowGroup, Translate } from 'components';\nimport { PolicyTableRow, MarketTableRow } from 'modules';\nimport { selectPolicyMarket } from 'stores';\nimport * as constants from 'consts';\nimport * as utils from 'utils'; // mui\n\nimport { Table, TableBody } from '@material-ui/core'; // state\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    placementSelectedPolicies: state.placement.selected.policies,\n    placementSelectedDepartmentId: state.placement.selected.departmentId,\n    referenceDataDepartments: state.referenceData.departments,\n    referenceDataStatusesPolicyMarketQuote: state.referenceData.statuses.policyMarketQuote\n  };\n}; // dispatch\n\n\nvar mapDispatchToProps = {\n  selectPolicyMarket: selectPolicyMarket\n};\nexport var BoundTable = /*#__PURE__*/function (_PureComponent) {\n  _inherits(BoundTable, _PureComponent);\n\n  var _super = _createSuper(BoundTable);\n\n  function BoundTable(props) {\n    var _this;\n\n    _classCallCheck(this, BoundTable);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleToggleGroup\", function (params) {\n      return function (event) {\n        var values = get(_this.state, \"expanded.groups\", []);\n\n        if (values.includes(params.groups)) {\n          values = values.filter(function (value) {\n            return value !== params.groups;\n          });\n        } else {\n          values.push(params.groups);\n        }\n\n        _this.setState({\n          expanded: _objectSpread(_objectSpread({}, _this.state.expanded), {}, {\n            groups: _toConsumableArray(values)\n          })\n        });\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleToggleLayer\", function (params) {\n      return function (event) {\n        var values = get(_this.state, \"expanded.policies\", []);\n\n        _this.setState({\n          expanded: _objectSpread(_objectSpread({}, _this.state.expanded), {}, {\n            policies: xor(values, [params.policy])\n          })\n        });\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleToggleMarket\", function (marketId) {\n      return function (event) {\n        _this.props.selectPolicyMarket(marketId);\n\n        _this.setState({\n          expanded: _objectSpread(_objectSpread({}, _this.state.expanded), {}, {\n            markets: marketId\n          })\n        });\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isRowSelected\", function (type, id) {\n      var expanded = _this.state.expanded;\n      return get(expanded, \"\".concat(type), []).includes(id);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setExpandedRows\", function (policies) {\n      var policiesGrouped = utils.policies.getByBusinessType(policies);\n      var businessTypeId = toNumber(get(policiesGrouped, '[0][0]'));\n      var isSingleLayer = get(policiesGrouped, '[0][1]', []).length === 1; // always expand the first group on load\n\n      if (businessTypeId) {\n        _this.handleToggleGroup({\n          groups: businessTypeId\n        })();\n      } // expand layer if it's the only on in the group\n\n\n      if (isSingleLayer) {\n        _this.handleToggleLayer({\n          policy: get(policiesGrouped, '[0][1][0].id')\n        })();\n      }\n    });\n\n    _this.state = {\n      expanded: {\n        groups: [],\n        policies: [],\n        markets: null\n      }\n    };\n    return _this;\n  }\n\n  _createClass(BoundTable, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var policies = this.props.policies;\n\n      if (utils.generic.isValidArray(policies, true)) {\n        this.setExpandedRows(policies);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var prevPolicies = prevProps.policies;\n      var nextPolicies = this.props.policies;\n      var noPreviousPolicies = !prevPolicies || prevPolicies && prevPolicies.length <= 0;\n      var newPolicies = utils.generic.isValidArray(nextPolicies) && nextPolicies.length > 0; // parse for first time\n\n      if (noPreviousPolicies && newPolicies) {\n        this.setExpandedRows(nextPolicies);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          policies = _this$props.policies,\n          placementSelectedDepartmentId = _this$props.placementSelectedDepartmentId,\n          referenceDataDepartments = _this$props.referenceDataDepartments,\n          referenceDataStatusesPolicyMarketQuote = _this$props.referenceDataStatusesPolicyMarketQuote;\n      var expanded = this.state.expanded;\n      var department = utils.referenceData.departments.getById(referenceDataDepartments, placementSelectedDepartmentId);\n      var businessTypes = department && department.businessTypes;\n      var cols = [{\n        id: 'layer'\n      }, {\n        id: 'premium',\n        label: /*#__PURE__*/_jsxDEV(Translate, {\n          label: \"placement.generic.premium\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 31\n        }, this),\n        align: 'center',\n        compact: true\n      }, {\n        id: 'written',\n        label: /*#__PURE__*/_jsxDEV(Translate, {\n          label: \"placement.generic.written\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 31\n        }, this),\n        align: 'center',\n        compact: true\n      }, {\n        id: 'signed',\n        label: /*#__PURE__*/_jsxDEV(Translate, {\n          label: \"placement.generic.signed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 30\n        }, this),\n        align: 'center',\n        compact: true\n      }, {\n        id: 'actions',\n        empty: true\n      }];\n      return /*#__PURE__*/_jsxDEV(Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          children: [/*#__PURE__*/_jsxDEV(TableHead, {\n            columns: cols\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 11\n          }, this), utils.policies.getByBusinessType(policies).map(function (arr) {\n            var businessTypeId = toNumber(arr[0]);\n            var businessType = utils.referenceData.businessTypes.getById(businessTypes, businessTypeId);\n            var businessTypeName = businessType && businessType.description;\n            var policies = orderBy(arr[1], ['excess', 'amount'], ['asc', 'asc']);\n            var statusQuotedId = utils.referenceData.status.getIdByCode(referenceDataStatusesPolicyMarketQuote, constants.STATUS_MARKET_QUOTED);\n\n            var isGroupSelected = _this2.isRowSelected('groups', businessTypeId);\n\n            var isFirstParentExpanded = _this2.isRowSelected('policies', policies[0].id);\n\n            var toggleOptions = {\n              groups: businessTypeId\n            };\n            var businessTypeMarketCount = policies.reduce(function (acc, policy) {\n              if (!policy.markets || isEmpty(policy.markets)) return acc;\n              var markets = utils.markets.getByStatusIds(policy.markets, [statusQuotedId]);\n              return acc + markets.length;\n            }, 0);\n            return /*#__PURE__*/_jsxDEV(Fragment, {\n              children: /*#__PURE__*/_jsxDEV(TableBody, {\n                children: businessTypeMarketCount > 0 && /*#__PURE__*/_jsxDEV(Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(TableRowGroup, {\n                    name: businessTypeName,\n                    isExpanded: isGroupSelected,\n                    isFirstParentExpanded: isGroupSelected && isFirstParentExpanded,\n                    columns: cols,\n                    toggleOptions: toggleOptions,\n                    handleToggleGroup: _this2.handleToggleGroup\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 183,\n                    columnNumber: 23\n                  }, _this2), policies.map(function (policy, index) {\n                    var isLayerSelected = get(expanded, \"policies\", []).includes(policy.id);\n\n                    var isNextSelected = policies[index + 1] && _this2.isRowSelected('policies', policies[index + 1].id);\n\n                    var marketsAll = utils.policy.getMarkets(policy);\n                    var marketsQuoted = utils.markets.getByStatusIds(marketsAll, [statusQuotedId]);\n                    var marketsOrdered = utils.markets.order(marketsQuoted, true);\n                    var toggleOptions = {\n                      policy: policy.id\n                    };\n\n                    if (isGroupSelected && marketsOrdered.length > 0) {\n                      return /*#__PURE__*/_jsxDEV(PolicyTableRow, {\n                        policy: policy,\n                        isSelected: isLayerSelected,\n                        isNextSelected: !isLayerSelected && isNextSelected,\n                        showPremium: true,\n                        showWritten: true,\n                        showSigned: true,\n                        toggleOptions: toggleOptions,\n                        handleToggle: _this2.handleToggleLayer,\n                        children: marketsOrdered.map(function (marketObj, marketIndex) {\n                          if (isLayerSelected) {\n                            return /*#__PURE__*/_jsxDEV(MarketTableRow, {\n                              market: marketObj,\n                              isLast: marketIndex === marketsOrdered.length - 1,\n                              showPremium: true,\n                              showWritten: true,\n                              showSigned: true,\n                              showUnderwriterGroup: true,\n                              handleToggle: _this2.handleToggleMarket\n                            }, marketObj.id, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 219,\n                              columnNumber: 37\n                            }, _this2);\n                          }\n\n                          return null;\n                        })\n                      }, policy.id, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 205,\n                        columnNumber: 29\n                      }, _this2);\n                    }\n\n                    return null;\n                  })]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 182,\n                  columnNumber: 21\n                }, _this2)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 17\n              }, _this2)\n            }, businessTypeId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 15\n            }, _this2);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return BoundTable;\n}(PureComponent);\nBoundTable.displayName = \"BoundTable\";\n\n_defineProperty(BoundTable, \"propTypes\", {\n  policies: PropTypes.array.isRequired\n});\n\nBoundTable.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [{\n    \"name\": \"handleToggleGroup\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"params\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"handleToggleLayer\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"params\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"handleToggleMarket\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"marketId\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"isRowSelected\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"type\",\n      \"type\": null\n    }, {\n      \"name\": \"id\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"setExpandedRows\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"policies\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }],\n  \"displayName\": \"BoundTable\",\n  \"props\": {\n    \"policies\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\nexport default compose(connect(mapStateToProps, mapDispatchToProps))(BoundTable);\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\modules\\\\BoundTable\\\\BoundTable.js\"] = {\n    name: \"BoundTable\",\n    docgenInfo: BoundTable.__docgenInfo,\n    path: \"src\\\\modules\\\\BoundTable\\\\BoundTable.js\"\n  };\n}","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/BoundTable/BoundTable.js"],"names":["React","PureComponent","Fragment","PropTypes","connect","compose","get","xor","orderBy","toNumber","isEmpty","TableHead","TableRowGroup","Translate","PolicyTableRow","MarketTableRow","selectPolicyMarket","constants","utils","Table","TableBody","mapStateToProps","state","placementSelectedPolicies","placement","selected","policies","placementSelectedDepartmentId","departmentId","referenceDataDepartments","referenceData","departments","referenceDataStatusesPolicyMarketQuote","statuses","policyMarketQuote","mapDispatchToProps","BoundTable","props","params","event","values","includes","groups","filter","value","push","setState","expanded","policy","marketId","markets","type","id","policiesGrouped","getByBusinessType","businessTypeId","isSingleLayer","length","handleToggleGroup","handleToggleLayer","generic","isValidArray","setExpandedRows","prevProps","prevPolicies","nextPolicies","noPreviousPolicies","newPolicies","department","getById","businessTypes","cols","label","align","compact","empty","map","arr","businessType","businessTypeName","description","statusQuotedId","status","getIdByCode","STATUS_MARKET_QUOTED","isGroupSelected","isRowSelected","isFirstParentExpanded","toggleOptions","businessTypeMarketCount","reduce","acc","getByStatusIds","index","isLayerSelected","isNextSelected","marketsAll","getMarkets","marketsQuoted","marketsOrdered","order","marketObj","marketIndex","handleToggleMarket","array","isRequired"],"mappings":"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","sourcesContent":["import React, { PureComponent, Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport get from 'lodash/get';\r\nimport xor from 'lodash/xor';\r\nimport orderBy from 'lodash/orderBy';\r\nimport toNumber from 'lodash/toNumber';\r\nimport isEmpty from 'lodash/isEmpty';\r\n\r\n// app\r\nimport { TableHead, TableRowGroup, Translate } from 'components';\r\nimport { PolicyTableRow, MarketTableRow } from 'modules';\r\nimport { selectPolicyMarket } from 'stores';\r\nimport * as constants from 'consts';\r\nimport * as utils from 'utils';\r\n\r\n// mui\r\nimport { Table, TableBody } from '@material-ui/core';\r\n\r\n// state\r\nconst mapStateToProps = (state) => ({\r\n  placementSelectedPolicies: state.placement.selected.policies,\r\n  placementSelectedDepartmentId: state.placement.selected.departmentId,\r\n  referenceDataDepartments: state.referenceData.departments,\r\n  referenceDataStatusesPolicyMarketQuote: state.referenceData.statuses.policyMarketQuote,\r\n});\r\n\r\n// dispatch\r\nconst mapDispatchToProps = {\r\n  selectPolicyMarket,\r\n};\r\n\r\nexport class BoundTable extends PureComponent {\r\n  static propTypes = {\r\n    policies: PropTypes.array.isRequired,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      expanded: {\r\n        groups: [],\r\n        policies: [],\r\n        markets: null,\r\n      },\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { policies } = this.props;\r\n\r\n    if (utils.generic.isValidArray(policies, true)) {\r\n      this.setExpandedRows(policies);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const prevPolicies = prevProps.policies;\r\n    const nextPolicies = this.props.policies;\r\n\r\n    const noPreviousPolicies = !prevPolicies || (prevPolicies && prevPolicies.length <= 0);\r\n    const newPolicies = utils.generic.isValidArray(nextPolicies) && nextPolicies.length > 0;\r\n\r\n    // parse for first time\r\n    if (noPreviousPolicies && newPolicies) {\r\n      this.setExpandedRows(nextPolicies);\r\n    }\r\n  }\r\n\r\n  handleToggleGroup = (params) => (event) => {\r\n    let values = get(this.state, `expanded.groups`, []);\r\n\r\n    if (values.includes(params.groups)) {\r\n      values = values.filter((value) => {\r\n        return value !== params.groups;\r\n      });\r\n    } else {\r\n      values.push(params.groups);\r\n    }\r\n\r\n    this.setState({\r\n      expanded: {\r\n        ...this.state.expanded,\r\n        groups: [...values],\r\n      },\r\n    });\r\n  };\r\n\r\n  handleToggleLayer = (params) => (event) => {\r\n    const values = get(this.state, `expanded.policies`, []);\r\n\r\n    this.setState({\r\n      expanded: {\r\n        ...this.state.expanded,\r\n        policies: xor(values, [params.policy]),\r\n      },\r\n    });\r\n  };\r\n\r\n  handleToggleMarket = (marketId) => (event) => {\r\n    this.props.selectPolicyMarket(marketId);\r\n\r\n    this.setState({\r\n      expanded: {\r\n        ...this.state.expanded,\r\n        markets: marketId,\r\n      },\r\n    });\r\n  };\r\n\r\n  isRowSelected = (type, id) => {\r\n    const { expanded } = this.state;\r\n\r\n    return get(expanded, `${type}`, []).includes(id);\r\n  };\r\n\r\n  setExpandedRows = (policies) => {\r\n    const policiesGrouped = utils.policies.getByBusinessType(policies);\r\n    const businessTypeId = toNumber(get(policiesGrouped, '[0][0]'));\r\n    const isSingleLayer = get(policiesGrouped, '[0][1]', []).length === 1;\r\n\r\n    // always expand the first group on load\r\n    if (businessTypeId) {\r\n      this.handleToggleGroup({ groups: businessTypeId })();\r\n    }\r\n\r\n    // expand layer if it's the only on in the group\r\n    if (isSingleLayer) {\r\n      this.handleToggleLayer({ policy: get(policiesGrouped, '[0][1][0].id') })();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { policies, placementSelectedDepartmentId, referenceDataDepartments, referenceDataStatusesPolicyMarketQuote } = this.props;\r\n    const { expanded } = this.state;\r\n\r\n    const department = utils.referenceData.departments.getById(referenceDataDepartments, placementSelectedDepartmentId);\r\n    const businessTypes = department && department.businessTypes;\r\n\r\n    const cols = [\r\n      { id: 'layer' },\r\n      { id: 'premium', label: <Translate label=\"placement.generic.premium\" />, align: 'center', compact: true },\r\n      { id: 'written', label: <Translate label=\"placement.generic.written\" />, align: 'center', compact: true },\r\n      { id: 'signed', label: <Translate label=\"placement.generic.signed\" />, align: 'center', compact: true },\r\n      { id: 'actions', empty: true },\r\n    ];\r\n\r\n    return (\r\n      <Fragment>\r\n        <Table>\r\n          <TableHead columns={cols} />\r\n\r\n          {utils.policies.getByBusinessType(policies).map((arr) => {\r\n            const businessTypeId = toNumber(arr[0]);\r\n            const businessType = utils.referenceData.businessTypes.getById(businessTypes, businessTypeId);\r\n            const businessTypeName = businessType && businessType.description;\r\n            const policies = orderBy(arr[1], ['excess', 'amount'], ['asc', 'asc']);\r\n            const statusQuotedId = utils.referenceData.status.getIdByCode(\r\n              referenceDataStatusesPolicyMarketQuote,\r\n              constants.STATUS_MARKET_QUOTED\r\n            );\r\n            const isGroupSelected = this.isRowSelected('groups', businessTypeId);\r\n            const isFirstParentExpanded = this.isRowSelected('policies', policies[0].id);\r\n\r\n            const toggleOptions = {\r\n              groups: businessTypeId,\r\n            };\r\n\r\n            const businessTypeMarketCount = policies.reduce((acc, policy) => {\r\n              if (!policy.markets || isEmpty(policy.markets)) return acc;\r\n\r\n              const markets = utils.markets.getByStatusIds(policy.markets, [statusQuotedId]);\r\n              return acc + markets.length;\r\n            }, 0);\r\n\r\n            return (\r\n              <Fragment key={businessTypeId}>\r\n                <TableBody>\r\n                  {businessTypeMarketCount > 0 && (\r\n                    <Fragment>\r\n                      <TableRowGroup\r\n                        name={businessTypeName}\r\n                        isExpanded={isGroupSelected}\r\n                        isFirstParentExpanded={isGroupSelected && isFirstParentExpanded}\r\n                        columns={cols}\r\n                        toggleOptions={toggleOptions}\r\n                        handleToggleGroup={this.handleToggleGroup}\r\n                      />\r\n\r\n                      {policies.map((policy, index) => {\r\n                        const isLayerSelected = get(expanded, `policies`, []).includes(policy.id);\r\n                        const isNextSelected = policies[index + 1] && this.isRowSelected('policies', policies[index + 1].id);\r\n                        const marketsAll = utils.policy.getMarkets(policy);\r\n                        const marketsQuoted = utils.markets.getByStatusIds(marketsAll, [statusQuotedId]);\r\n                        const marketsOrdered = utils.markets.order(marketsQuoted, true);\r\n\r\n                        const toggleOptions = {\r\n                          policy: policy.id,\r\n                        };\r\n\r\n                        if (isGroupSelected && marketsOrdered.length > 0) {\r\n                          return (\r\n                            <PolicyTableRow\r\n                              key={policy.id}\r\n                              policy={policy}\r\n                              isSelected={isLayerSelected}\r\n                              isNextSelected={!isLayerSelected && isNextSelected}\r\n                              showPremium\r\n                              showWritten\r\n                              showSigned\r\n                              toggleOptions={toggleOptions}\r\n                              handleToggle={this.handleToggleLayer}\r\n                            >\r\n                              {marketsOrdered.map((marketObj, marketIndex) => {\r\n                                if (isLayerSelected) {\r\n                                  return (\r\n                                    <MarketTableRow\r\n                                      key={marketObj.id}\r\n                                      market={marketObj}\r\n                                      isLast={marketIndex === marketsOrdered.length - 1}\r\n                                      showPremium\r\n                                      showWritten\r\n                                      showSigned\r\n                                      showUnderwriterGroup\r\n                                      handleToggle={this.handleToggleMarket}\r\n                                    />\r\n                                  );\r\n                                }\r\n\r\n                                return null;\r\n                              })}\r\n                            </PolicyTableRow>\r\n                          );\r\n                        }\r\n\r\n                        return null;\r\n                      })}\r\n                    </Fragment>\r\n                  )}\r\n                </TableBody>\r\n              </Fragment>\r\n            );\r\n          })}\r\n        </Table>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default compose(connect(mapStateToProps, mapDispatchToProps))(BoundTable);\r\n"]},"metadata":{},"sourceType":"module"}