{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { addLoader, authLogout, enqueueNotification, hideModal, removeLoader, deleteDraft } from 'stores';\nimport * as utils from 'utils';\nimport isEmpty from 'lodash/isEmpty';\nexport var postRisk = function postRisk(values, productType, definitions, draftId) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/risk.actions.postRisk',\n      message: 'Data missing for POST request'\n    };\n    dispatch(postRiskRequest(values));\n    dispatch(addLoader('postRisk'));\n\n    if (!values || isEmpty(values) || !productType || !utils.generic.isValidArray(definitions)) {\n      dispatch(postRiskFailure(defaultError));\n      dispatch(enqueueNotification('notification.generic.request', 'error'));\n      dispatch(hideModal());\n      dispatch(removeLoader('postRisk'));\n      return;\n    }\n\n    var body = _objectSpread(_objectSpread({}, utils.risk.parsedValues(utils.risk.filterConditionalValues(values, definitions), definitions)), {}, {\n      riskType: productType\n    });\n\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.auth,\n      path: 'api/v1/risks',\n      data: body\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleResponseJsonObject(json);\n    }).then(function (data) {\n      if (draftId) {\n        dispatch(deleteDraft(draftId, true));\n      }\n\n      dispatch(postRiskSuccess(data));\n      dispatch(enqueueNotification('notification.saveRisk.success', 'success'));\n      return data;\n    })[\"catch\"](function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API post error (risk.postRisk)'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(postRiskFailure(err));\n      dispatch(enqueueNotification(utils.api.getErrorMessage(err), 'error'));\n      return err;\n    })[\"finally\"](function () {\n      dispatch(hideModal());\n      dispatch(removeLoader('postRisk'));\n      return;\n    });\n  };\n};\nexport var postRiskRequest = function postRiskRequest(formData) {\n  return {\n    type: 'RISK_POST_REQUEST',\n    payload: formData\n  };\n};\nexport var postRiskSuccess = function postRiskSuccess(responseData) {\n  return {\n    type: 'RISK_POST_SUCCESS',\n    payload: responseData\n  };\n};\nexport var postRiskFailure = function postRiskFailure(error) {\n  return {\n    type: 'RISK_POST_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/risk/risk.actions.postRisk.js"],"names":["addLoader","authLogout","enqueueNotification","hideModal","removeLoader","deleteDraft","utils","isEmpty","postRisk","values","productType","definitions","draftId","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","message","postRiskRequest","generic","isValidArray","postRiskFailure","body","risk","parsedValues","filterConditionalValues","riskType","api","post","token","accessToken","path","data","then","response","handleResponse","json","handleResponseJsonObject","postRiskSuccess","err","errorParams","handleError","handleUnauthorized","getErrorMessage","formData","type","payload","responseData","error"],"mappings":"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","sourcesContent":["import { addLoader, authLogout, enqueueNotification, hideModal, removeLoader, deleteDraft } from 'stores';\r\nimport * as utils from 'utils';\r\nimport isEmpty from 'lodash/isEmpty';\r\n\r\nexport const postRisk = (values, productType, definitions, draftId) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/risk.actions.postRisk',\r\n    message: 'Data missing for POST request',\r\n  };\r\n\r\n  dispatch(postRiskRequest(values));\r\n  dispatch(addLoader('postRisk'));\r\n\r\n  if (!values || isEmpty(values) || !productType || !utils.generic.isValidArray(definitions)) {\r\n    dispatch(postRiskFailure(defaultError));\r\n    dispatch(enqueueNotification('notification.generic.request', 'error'));\r\n    dispatch(hideModal());\r\n    dispatch(removeLoader('postRisk'));\r\n    return;\r\n  }\r\n\r\n  const body = {\r\n    ...utils.risk.parsedValues(utils.risk.filterConditionalValues(values, definitions), definitions),\r\n    riskType: productType,\r\n  };\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.auth,\r\n      path: 'api/v1/risks',\r\n      data: body,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleResponseJsonObject(json))\r\n    .then((data) => {\r\n      if (draftId) {\r\n        dispatch(deleteDraft(draftId, true));\r\n      }\r\n\r\n      dispatch(postRiskSuccess(data));\r\n      dispatch(enqueueNotification('notification.saveRisk.success', 'success'));\r\n\r\n      return data;\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        ...defaultError,\r\n        message: 'API post error (risk.postRisk)',\r\n      };\r\n\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(postRiskFailure(err));\r\n      dispatch(enqueueNotification(utils.api.getErrorMessage(err), 'error'));\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(hideModal());\r\n      dispatch(removeLoader('postRisk'));\r\n      return;\r\n    });\r\n};\r\n\r\nexport const postRiskRequest = (formData) => {\r\n  return {\r\n    type: 'RISK_POST_REQUEST',\r\n    payload: formData,\r\n  };\r\n};\r\n\r\nexport const postRiskSuccess = (responseData) => {\r\n  return {\r\n    type: 'RISK_POST_SUCCESS',\r\n    payload: responseData,\r\n  };\r\n};\r\n\r\nexport const postRiskFailure = (error) => {\r\n  return {\r\n    type: 'RISK_POST_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}