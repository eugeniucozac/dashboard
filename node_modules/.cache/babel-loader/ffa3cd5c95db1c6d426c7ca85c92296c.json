{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ClaimsTasksTabTableRow\\\\ClaimsTasksTabTableRow.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useHistory } from 'react-router';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux'; // app\n\nimport { ClaimsTasksTabTableRowView } from './ClaimsTasksTabTableRow.view';\nimport { selectClaimsProcessingTasksSelected, selectCaseTaskTypeView, checkIsUserClaim, setClaimsFnolPushBackRoute, showModal, hideModal } from 'stores';\nimport config from 'config';\nimport * as constants from 'consts';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nClaimsTasksTabTableRow.propTypes = {\n  task: PropTypes.object.isRequired,\n  isTaskTeam: PropTypes.bool.isRequired,\n  isSelected: PropTypes.bool,\n  columnProps: PropTypes.func.isRequired,\n  handlers: PropTypes.shape({\n    selectTask: PropTypes.func.isRequired,\n    refreshTasksGrid: PropTypes.func.isRequired\n  }).isRequired\n};\nexport default function ClaimsTasksTabTableRow(props) {\n  _s();\n\n  var dispatch = useDispatch();\n  var history = useHistory();\n  var task = props.task;\n  var caseTaskTypeView = useSelector(selectCaseTaskTypeView);\n  var user = useSelector(function (state) {\n    return state.user;\n  });\n\n  var editTask = function editTask(task) {\n    dispatch(showModal({\n      component: 'CREATE_AD_HOC_TASK',\n      props: {\n        title: utils.string.t('claims.processing.taskFunction.editTask'),\n        hideCompOnBlur: false,\n        fullWidth: true,\n        maxWidth: 'md',\n        disableAutoFocus: true,\n        componentProps: {\n          claim: task,\n          cancelHandler: function cancelHandler() {\n            dispatch(hideModal());\n          },\n          submitHandler: function submitHandler() {}\n        }\n      }\n    }));\n  };\n\n  var taskActionItems = [{\n    id: 'editTask',\n    label: utils.string.t('claims.processing.taskFunction.editTask'),\n    callback: function callback() {\n      editTask(props === null || props === void 0 ? void 0 : props.task);\n    }\n  }, {\n    id: 'changePriority',\n    label: utils.string.t('claims.processing.taskFunction.changePriority'),\n    callback: function callback() {}\n  }, {\n    id: 'createRfi',\n    label: utils.string.t('claims.processing.taskFunction.createRFI'),\n    callback: function callback() {\n      handleCreateRFITaskLevel();\n    }\n  }];\n\n  var handleCreateRFITaskLevel = function handleCreateRFITaskLevel() {\n    dispatch(showModal({\n      component: 'CREATE_RFI',\n      props: {\n        title: utils.string.t('claims.processing.taskFunction.createRFI'),\n        hideCompOnBlur: false,\n        fullWidth: true,\n        maxWidth: 'md',\n        disableAutoFocus: true,\n        componentProps: {\n          claim: task,\n          type: constants.RFI_ON_TASKS,\n          cancelHandler: function cancelHandler() {\n            dispatch(hideModal());\n          }\n        }\n      }\n    }));\n  };\n\n  var clickTask = function clickTask(taskObj) {\n    return function (event) {\n      if (taskObj === null || taskObj === void 0 ? void 0 : taskObj.taskRef) {\n        var _user$emailId, _taskObj$processOwner;\n\n        event.stopPropagation();\n        var isUserClaim = ((_user$emailId = user.emailId) === null || _user$emailId === void 0 ? void 0 : _user$emailId.toLowerCase()) === (taskObj === null || taskObj === void 0 ? void 0 : (_taskObj$processOwner = taskObj.processOwner) === null || _taskObj$processOwner === void 0 ? void 0 : _taskObj$processOwner.toLowerCase());\n        dispatch(checkIsUserClaim(isUserClaim));\n        dispatch(selectClaimsProcessingTasksSelected(taskObj));\n        dispatch(setClaimsFnolPushBackRoute(constants.CLAIMS_FNOL_PUSH_BACK_ROUTES.routes.lossAndClaims));\n\n        if (taskObj.taskType === constants.TASK_ROW_TYPE.rfi) {\n          history.push(\"\".concat(config.routes.claimsProcessing.rfi, \"/\").concat(taskObj.taskRef));\n        } else {\n          history.push(\"\".concat(config.routes.claimsProcessing.task, \"/\").concat(taskObj.taskRef));\n        }\n      }\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(ClaimsTasksTabTableRowView, _objectSpread(_objectSpread({}, props), {}, {\n    taskActionItems: taskActionItems,\n    isPremiumProcessing: props.isPremiumProcessing,\n    caseTaskTypeView: caseTaskTypeView,\n    handlers: {\n      selectTask: props.handlers.selectTask,\n      clickTask: clickTask,\n      editTask: editTask\n    }\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ClaimsTasksTabTableRow, \"rgnOMM63wPge9o2+GxBJ2ceDn0w=\", false, function () {\n  return [useDispatch, useHistory, useSelector, useSelector];\n});\n\n_c = ClaimsTasksTabTableRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimsTasksTabTableRow\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ClaimsTasksTabTableRow/ClaimsTasksTabTableRow.js"],"names":["React","useHistory","PropTypes","useSelector","useDispatch","ClaimsTasksTabTableRowView","selectClaimsProcessingTasksSelected","selectCaseTaskTypeView","checkIsUserClaim","setClaimsFnolPushBackRoute","showModal","hideModal","config","constants","utils","ClaimsTasksTabTableRow","propTypes","task","object","isRequired","isTaskTeam","bool","isSelected","columnProps","func","handlers","shape","selectTask","refreshTasksGrid","props","dispatch","history","caseTaskTypeView","user","state","editTask","component","title","string","t","hideCompOnBlur","fullWidth","maxWidth","disableAutoFocus","componentProps","claim","cancelHandler","submitHandler","taskActionItems","id","label","callback","handleCreateRFITaskLevel","type","RFI_ON_TASKS","clickTask","taskObj","event","taskRef","stopPropagation","isUserClaim","emailId","toLowerCase","processOwner","CLAIMS_FNOL_PUSH_BACK_ROUTES","routes","lossAndClaims","taskType","TASK_ROW_TYPE","rfi","push","claimsProcessing","isPremiumProcessing"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\n// app\r\nimport { ClaimsTasksTabTableRowView } from './ClaimsTasksTabTableRow.view';\r\nimport { selectClaimsProcessingTasksSelected, selectCaseTaskTypeView, checkIsUserClaim, setClaimsFnolPushBackRoute ,showModal,hideModal} from 'stores';\r\nimport config from 'config';\r\nimport * as constants from 'consts';\r\nimport * as utils from 'utils';\r\n\r\nClaimsTasksTabTableRow.propTypes = {\r\n  task: PropTypes.object.isRequired,\r\n  isTaskTeam: PropTypes.bool.isRequired,\r\n  isSelected: PropTypes.bool,\r\n  columnProps: PropTypes.func.isRequired,\r\n  handlers: PropTypes.shape({\r\n    selectTask: PropTypes.func.isRequired,\r\n    refreshTasksGrid: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default function ClaimsTasksTabTableRow(props) {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const { task } = props;\r\n\r\n  const caseTaskTypeView = useSelector(selectCaseTaskTypeView);\r\n  const user = useSelector((state) => state.user);\r\n  const editTask = (task) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CREATE_AD_HOC_TASK',\r\n        props: {\r\n          title: utils.string.t('claims.processing.taskFunction.editTask'),\r\n          hideCompOnBlur: false,\r\n          fullWidth: true,\r\n          maxWidth: 'md',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            claim: task,\r\n            cancelHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n            submitHandler: () => {\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  }\r\n  const taskActionItems = [\r\n    {\r\n      id: 'editTask',\r\n      label: utils.string.t('claims.processing.taskFunction.editTask'),\r\n      callback: () => { editTask(props?.task) },\r\n    },\r\n    {\r\n      id: 'changePriority',\r\n      label: utils.string.t('claims.processing.taskFunction.changePriority'),\r\n      callback: () => { },\r\n    },\r\n    {\r\n      id: 'createRfi',\r\n      label: utils.string.t('claims.processing.taskFunction.createRFI'),\r\n      callback: () => { handleCreateRFITaskLevel() },\r\n    },\r\n  ];\r\n\r\n  const handleCreateRFITaskLevel = () => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CREATE_RFI',\r\n        props: {\r\n          title: utils.string.t('claims.processing.taskFunction.createRFI'),\r\n          hideCompOnBlur: false,\r\n          fullWidth: true,\r\n          maxWidth: 'md',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            claim: task,\r\n            type: constants.RFI_ON_TASKS,\r\n            cancelHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n  const clickTask = (taskObj) => (event) => {\r\n    if (taskObj?.taskRef) {\r\n      event.stopPropagation();\r\n      const isUserClaim = user.emailId?.toLowerCase() === taskObj?.processOwner?.toLowerCase();\r\n      dispatch(checkIsUserClaim(isUserClaim));\r\n      dispatch(selectClaimsProcessingTasksSelected(taskObj));\r\n      dispatch(setClaimsFnolPushBackRoute(constants.CLAIMS_FNOL_PUSH_BACK_ROUTES.routes.lossAndClaims));\r\n      if (taskObj.taskType === constants.TASK_ROW_TYPE.rfi) {\r\n        history.push(`${config.routes.claimsProcessing.rfi}/${taskObj.taskRef}`);\r\n      } else {\r\n        history.push(`${config.routes.claimsProcessing.task}/${taskObj.taskRef}`);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ClaimsTasksTabTableRowView\r\n      {...props}\r\n      taskActionItems={taskActionItems}\r\n      isPremiumProcessing={props.isPremiumProcessing}\r\n      caseTaskTypeView={caseTaskTypeView}\r\n      handlers={{\r\n        selectTask: props.handlers.selectTask,\r\n        clickTask,\r\n        editTask\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}