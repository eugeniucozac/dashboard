{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\components\\\\ChartTable\\\\ChartTable.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { firstBy } from 'thenby';\nimport get from 'lodash/get'; // app\n\nimport { ChartTableView } from './ChartTable.view';\nimport { usePagination, useSort } from 'hooks';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartTable.propTypes = {\n  id: PropTypes.string,\n  rows: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n    name: PropTypes.string.isRequired,\n    label: PropTypes.string,\n    datasets: PropTypes.arrayOf(PropTypes.shape({\n      id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n      value: PropTypes.number.isRequired,\n      name: PropTypes.string\n    })).isRequired\n  })).isRequired,\n  cols: PropTypes.array.isRequired,\n  sort: PropTypes.object.isRequired,\n  pagination: PropTypes.object.isRequired,\n  hover: PropTypes.bool,\n  tooltip: PropTypes.func,\n  onClick: PropTypes.func\n};\nexport default function ChartTable(_ref) {\n  _s();\n\n  var id = _ref.id,\n      _ref$rows = _ref.rows,\n      rows = _ref$rows === void 0 ? [] : _ref$rows,\n      colsArr = _ref.cols,\n      sortObj = _ref.sort,\n      paginationObj = _ref.pagination,\n      hover = _ref.hover,\n      tooltip = _ref.tooltip,\n      onClick = _ref.onClick;\n\n  var getMaxValue = function getMaxValue(items) {\n    return items.reduce(function (acc, row) {\n      var datasets = row && row.datasets || [];\n      var rowTotal = datasets.reduce(function (acc, obj) {\n        return acc + get(obj, 'value', 0);\n      }, 0);\n      return Math.max(acc, rowTotal);\n    }, 0);\n  };\n\n  var getRowMaxCount = function getRowMaxCount(items) {\n    return items.reduce(function (acc, row) {\n      return Math.max(acc, get(row, 'datasets.length', 0));\n    }, 0);\n  };\n\n  var getRowValue = function getRowValue(row) {\n    var datasets = row && row.datasets || [];\n    return datasets.reduce(function (acc, obj) {\n      return acc + get(obj, 'value', 0);\n    }, 0);\n  };\n\n  var getRowPercentage = function getRowPercentage(max, value) {\n    return max && value ? value / max * 100 : 0;\n  };\n\n  var _useSort = useSort(colsArr, sortObj),\n      cols = _useSort.cols,\n      sort = _useSort.sort;\n\n  var pagination = usePagination(rows, paginationObj);\n  var rowsParsed = rows.map(function (row) {\n    return _objectSpread(_objectSpread({}, row), {}, {\n      value: getRowValue(row)\n    });\n  });\n  var rowsSorted = rowsParsed.sort(firstBy(utils.sort.array(sort.type, sort.by, sort.direction)));\n  var rowsPaginated = rowsSorted.slice(pagination.obj.page * pagination.obj.rowsPerPage, pagination.obj.page * pagination.obj.rowsPerPage + pagination.obj.rowsPerPage);\n  var maxValue = getMaxValue(rows);\n  var maxCount = getRowMaxCount(rows);\n  return /*#__PURE__*/_jsxDEV(ChartTableView, {\n    id: id,\n    items: rowsPaginated,\n    cols: cols,\n    sort: sort,\n    pagination: pagination,\n    stacked: maxValue > 1,\n    maxValue: maxValue,\n    maxCount: maxCount,\n    getRowValue: getRowValue,\n    getRowPercentage: getRowPercentage,\n    hover: hover,\n    tooltip: tooltip,\n    onClick: onClick\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChartTable, \"nvhtZ/t2iU843lbUoRLiSv/+Ul8=\", false, function () {\n  return [useSort, usePagination];\n});\n\n_c = ChartTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartTable\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/ChartTable/ChartTable.js"],"names":["React","PropTypes","firstBy","get","ChartTableView","usePagination","useSort","utils","ChartTable","propTypes","id","string","rows","arrayOf","shape","oneOfType","number","isRequired","name","label","datasets","value","cols","array","sort","object","pagination","hover","bool","tooltip","func","onClick","colsArr","sortObj","paginationObj","getMaxValue","items","reduce","acc","row","rowTotal","obj","Math","max","getRowMaxCount","getRowValue","getRowPercentage","rowsParsed","map","rowsSorted","type","by","direction","rowsPaginated","slice","page","rowsPerPage","maxValue","maxCount"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,OAAOC,GAAP,MAAgB,YAAhB,C,CAEA;;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,aAAT,EAAwBC,OAAxB,QAAuC,OAAvC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;AAEAC,UAAU,CAACC,SAAX,GAAuB;AACrBC,EAAAA,EAAE,EAAET,SAAS,CAACU,MADO;AAErBC,EAAAA,IAAI,EAAEX,SAAS,CAACY,OAAV,CACJZ,SAAS,CAACa,KAAV,CAAgB;AACdJ,IAAAA,EAAE,EAAET,SAAS,CAACc,SAAV,CAAoB,CAACd,SAAS,CAACe,MAAX,EAAmBf,SAAS,CAACU,MAA7B,CAApB,EAA0DM,UADhD;AAEdC,IAAAA,IAAI,EAAEjB,SAAS,CAACU,MAAV,CAAiBM,UAFT;AAGdE,IAAAA,KAAK,EAAElB,SAAS,CAACU,MAHH;AAIdS,IAAAA,QAAQ,EAAEnB,SAAS,CAACY,OAAV,CACRZ,SAAS,CAACa,KAAV,CAAgB;AACdJ,MAAAA,EAAE,EAAET,SAAS,CAACc,SAAV,CAAoB,CAACd,SAAS,CAACe,MAAX,EAAmBf,SAAS,CAACU,MAA7B,CAApB,EAA0DM,UADhD;AAEdI,MAAAA,KAAK,EAAEpB,SAAS,CAACe,MAAV,CAAiBC,UAFV;AAGdC,MAAAA,IAAI,EAAEjB,SAAS,CAACU;AAHF,KAAhB,CADQ,EAMRM;AAVY,GAAhB,CADI,EAaJA,UAfmB;AAgBrBK,EAAAA,IAAI,EAAErB,SAAS,CAACsB,KAAV,CAAgBN,UAhBD;AAiBrBO,EAAAA,IAAI,EAAEvB,SAAS,CAACwB,MAAV,CAAiBR,UAjBF;AAkBrBS,EAAAA,UAAU,EAAEzB,SAAS,CAACwB,MAAV,CAAiBR,UAlBR;AAmBrBU,EAAAA,KAAK,EAAE1B,SAAS,CAAC2B,IAnBI;AAoBrBC,EAAAA,OAAO,EAAE5B,SAAS,CAAC6B,IApBE;AAqBrBC,EAAAA,OAAO,EAAE9B,SAAS,CAAC6B;AArBE,CAAvB;AAwBA,eAAe,SAAStB,UAAT,OAAyH;AAAA;;AAAA,MAAnGE,EAAmG,QAAnGA,EAAmG;AAAA,uBAA/FE,IAA+F;AAAA,MAA/FA,IAA+F,0BAAxF,EAAwF;AAAA,MAA9EoB,OAA8E,QAApFV,IAAoF;AAAA,MAA/DW,OAA+D,QAArET,IAAqE;AAAA,MAA1CU,aAA0C,QAAtDR,UAAsD;AAAA,MAA3BC,KAA2B,QAA3BA,KAA2B;AAAA,MAApBE,OAAoB,QAApBA,OAAoB;AAAA,MAAXE,OAAW,QAAXA,OAAW;;AACtI,MAAMI,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAW;AAC7B,WAAOA,KAAK,CAACC,MAAN,CAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AAChC,UAAMnB,QAAQ,GAAImB,GAAG,IAAIA,GAAG,CAACnB,QAAZ,IAAyB,EAA1C;AACA,UAAMoB,QAAQ,GAAGpB,QAAQ,CAACiB,MAAT,CAAgB,UAACC,GAAD,EAAMG,GAAN,EAAc;AAC7C,eAAOH,GAAG,GAAGnC,GAAG,CAACsC,GAAD,EAAM,OAAN,EAAe,CAAf,CAAhB;AACD,OAFgB,EAEd,CAFc,CAAjB;AAIA,aAAOC,IAAI,CAACC,GAAL,CAASL,GAAT,EAAcE,QAAd,CAAP;AACD,KAPM,EAOJ,CAPI,CAAP;AAQD,GATD;;AAWA,MAAMI,cAAc,GAAG,SAAjBA,cAAiB,CAACR,KAAD,EAAW;AAChC,WAAOA,KAAK,CAACC,MAAN,CAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AAChC,aAAOG,IAAI,CAACC,GAAL,CAASL,GAAT,EAAcnC,GAAG,CAACoC,GAAD,EAAM,iBAAN,EAAyB,CAAzB,CAAjB,CAAP;AACD,KAFM,EAEJ,CAFI,CAAP;AAGD,GAJD;;AAMA,MAAMM,WAAW,GAAG,SAAdA,WAAc,CAACN,GAAD,EAAS;AAC3B,QAAMnB,QAAQ,GAAImB,GAAG,IAAIA,GAAG,CAACnB,QAAZ,IAAyB,EAA1C;AACA,WAAOA,QAAQ,CAACiB,MAAT,CAAgB,UAACC,GAAD,EAAMG,GAAN,EAAc;AACnC,aAAOH,GAAG,GAAGnC,GAAG,CAACsC,GAAD,EAAM,OAAN,EAAe,CAAf,CAAhB;AACD,KAFM,EAEJ,CAFI,CAAP;AAGD,GALD;;AAOA,MAAMK,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACH,GAAD,EAAMtB,KAAN,EAAgB;AACvC,WAAOsB,GAAG,IAAItB,KAAP,GAAgBA,KAAK,GAAGsB,GAAT,GAAgB,GAA/B,GAAqC,CAA5C;AACD,GAFD;;AAzBsI,iBA6B/GrC,OAAO,CAAC0B,OAAD,EAAUC,OAAV,CA7BwG;AAAA,MA6B9HX,IA7B8H,YA6B9HA,IA7B8H;AAAA,MA6BxHE,IA7BwH,YA6BxHA,IA7BwH;;AA8BtI,MAAME,UAAU,GAAGrB,aAAa,CAACO,IAAD,EAAOsB,aAAP,CAAhC;AAEA,MAAMa,UAAU,GAAGnC,IAAI,CAACoC,GAAL,CAAS,UAACT,GAAD;AAAA,2CAAeA,GAAf;AAAoBlB,MAAAA,KAAK,EAAEwB,WAAW,CAACN,GAAD;AAAtC;AAAA,GAAT,CAAnB;AACA,MAAMU,UAAU,GAAGF,UAAU,CAACvB,IAAX,CAAgBtB,OAAO,CAACK,KAAK,CAACiB,IAAN,CAAWD,KAAX,CAAiBC,IAAI,CAAC0B,IAAtB,EAA4B1B,IAAI,CAAC2B,EAAjC,EAAqC3B,IAAI,CAAC4B,SAA1C,CAAD,CAAvB,CAAnB;AACA,MAAMC,aAAa,GAAGJ,UAAU,CAACK,KAAX,CACpB5B,UAAU,CAACe,GAAX,CAAec,IAAf,GAAsB7B,UAAU,CAACe,GAAX,CAAee,WADjB,EAEpB9B,UAAU,CAACe,GAAX,CAAec,IAAf,GAAsB7B,UAAU,CAACe,GAAX,CAAee,WAArC,GAAmD9B,UAAU,CAACe,GAAX,CAAee,WAF9C,CAAtB;AAIA,MAAMC,QAAQ,GAAGtB,WAAW,CAACvB,IAAD,CAA5B;AACA,MAAM8C,QAAQ,GAAGd,cAAc,CAAChC,IAAD,CAA/B;AAEA,sBACE,QAAC,cAAD;AACE,IAAA,EAAE,EAAEF,EADN;AAEE,IAAA,KAAK,EAAE2C,aAFT;AAGE,IAAA,IAAI,EAAE/B,IAHR;AAIE,IAAA,IAAI,EAAEE,IAJR;AAKE,IAAA,UAAU,EAAEE,UALd;AAME,IAAA,OAAO,EAAE+B,QAAQ,GAAG,CANtB;AAOE,IAAA,QAAQ,EAAEA,QAPZ;AAQE,IAAA,QAAQ,EAAEC,QARZ;AASE,IAAA,WAAW,EAAEb,WATf;AAUE,IAAA,gBAAgB,EAAEC,gBAVpB;AAWE,IAAA,KAAK,EAAEnB,KAXT;AAYE,IAAA,OAAO,EAAEE,OAZX;AAaE,IAAA,OAAO,EAAEE;AAbX;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD;;GA1DuBvB,U;UA6BCF,O,EACJD,a;;;KA9BGG,U","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { firstBy } from 'thenby';\r\nimport get from 'lodash/get';\r\n\r\n// app\r\nimport { ChartTableView } from './ChartTable.view';\r\nimport { usePagination, useSort } from 'hooks';\r\nimport * as utils from 'utils';\r\n\r\nChartTable.propTypes = {\r\n  id: PropTypes.string,\r\n  rows: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      label: PropTypes.string,\r\n      datasets: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\r\n          value: PropTypes.number.isRequired,\r\n          name: PropTypes.string,\r\n        })\r\n      ).isRequired,\r\n    })\r\n  ).isRequired,\r\n  cols: PropTypes.array.isRequired,\r\n  sort: PropTypes.object.isRequired,\r\n  pagination: PropTypes.object.isRequired,\r\n  hover: PropTypes.bool,\r\n  tooltip: PropTypes.func,\r\n  onClick: PropTypes.func,\r\n};\r\n\r\nexport default function ChartTable({ id, rows = [], cols: colsArr, sort: sortObj, pagination: paginationObj, hover, tooltip, onClick }) {\r\n  const getMaxValue = (items) => {\r\n    return items.reduce((acc, row) => {\r\n      const datasets = (row && row.datasets) || [];\r\n      const rowTotal = datasets.reduce((acc, obj) => {\r\n        return acc + get(obj, 'value', 0);\r\n      }, 0);\r\n\r\n      return Math.max(acc, rowTotal);\r\n    }, 0);\r\n  };\r\n\r\n  const getRowMaxCount = (items) => {\r\n    return items.reduce((acc, row) => {\r\n      return Math.max(acc, get(row, 'datasets.length', 0));\r\n    }, 0);\r\n  };\r\n\r\n  const getRowValue = (row) => {\r\n    const datasets = (row && row.datasets) || [];\r\n    return datasets.reduce((acc, obj) => {\r\n      return acc + get(obj, 'value', 0);\r\n    }, 0);\r\n  };\r\n\r\n  const getRowPercentage = (max, value) => {\r\n    return max && value ? (value / max) * 100 : 0;\r\n  };\r\n\r\n  const { cols, sort } = useSort(colsArr, sortObj);\r\n  const pagination = usePagination(rows, paginationObj);\r\n\r\n  const rowsParsed = rows.map((row) => ({ ...row, value: getRowValue(row) }));\r\n  const rowsSorted = rowsParsed.sort(firstBy(utils.sort.array(sort.type, sort.by, sort.direction)));\r\n  const rowsPaginated = rowsSorted.slice(\r\n    pagination.obj.page * pagination.obj.rowsPerPage,\r\n    pagination.obj.page * pagination.obj.rowsPerPage + pagination.obj.rowsPerPage\r\n  );\r\n  const maxValue = getMaxValue(rows);\r\n  const maxCount = getRowMaxCount(rows);\r\n\r\n  return (\r\n    <ChartTableView\r\n      id={id}\r\n      items={rowsPaginated}\r\n      cols={cols}\r\n      sort={sort}\r\n      pagination={pagination}\r\n      stacked={maxValue > 1}\r\n      maxValue={maxValue}\r\n      maxCount={maxCount}\r\n      getRowValue={getRowValue}\r\n      getRowPercentage={getRowPercentage}\r\n      hover={hover}\r\n      tooltip={tooltip}\r\n      onClick={onClick}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}