{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport get from 'lodash/get';\nimport moment from 'moment'; // app\n\nimport config from 'config';\nimport { authLogout, addLoader, removeLoader, enqueueNotification } from 'stores';\nimport * as utils from 'utils';\nexport var getClaimTaskNotes = function getClaimTaskNotes(params) {\n  return function (dispatch, getState) {\n    var _claims$taskNotes, _claims$taskNotes2, _claims$taskNotes2$so, _claims$taskNotes3, _claims$taskNotes3$so;\n\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint,\n        claims = _getState.claims;\n\n    var taskId = params.taskId,\n        page = params.page,\n        size = params.size,\n        sortBy = params.sortBy,\n        direction = params.direction,\n        query = params.query,\n        _params$filters = params.filters,\n        filters = _params$filters === void 0 ? {} : _params$filters;\n    var defaultError = {\n      file: 'stores/claims.actions.getClaimTaskNotes'\n    };\n    dispatch(getClaimTaskNotesRequest(params));\n    dispatch(addLoader('getClaimTaskNotes'));\n\n    if (!taskId) {\n      dispatch(getClaimTaskNotesFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Missing taskId param'\n      })));\n      dispatch(enqueueNotification('claims.notes.notifications.getFailure', 'error'));\n      dispatch(removeLoader('getClaimTaskNotes'));\n      return;\n    }\n\n    var prevQuery = get(claims, 'taskNotes.query') || '';\n    var newQuery = params.hasOwnProperty('query') ? query : prevQuery;\n\n    var constructFilters = function constructFilters(filtersObj) {\n      var filteredArray = [];\n\n      for (var key in filtersObj) {\n        var _filtersObj$key;\n\n        var selectedFilterValue = key === 'createdDate' || key === 'updatedDate' ? moment(new Date(filtersObj[key])).format('DD-MM-YYYY') : filtersObj[key];\n\n        if (((_filtersObj$key = filtersObj[key]) === null || _filtersObj$key === void 0 ? void 0 : _filtersObj$key.length) > 0 && typeof filtersObj[key] !== 'string') {\n          filteredArray.push({\n            column: key,\n            filterValue: selectedFilterValue\n          });\n        } else if (typeof filtersObj[key] === 'string' && filtersObj[key] !== '') {\n          filteredArray.push({\n            column: key,\n            filterValue: [{\n              id: 0,\n              name: selectedFilterValue\n            }]\n          });\n        }\n      }\n\n      return filteredArray;\n    };\n\n    var prevFilters = get(claims, 'taskNotes.filters') || [];\n    var newFilters = params.hasOwnProperty('filters') ? constructFilters(filters) : prevFilters;\n    var apiParams = {\n      page: page || 0,\n      pageSize: size || (claims === null || claims === void 0 ? void 0 : (_claims$taskNotes = claims.taskNotes) === null || _claims$taskNotes === void 0 ? void 0 : _claims$taskNotes.pageSize) || config.ui.pagination.options[0],\n      sortBy: sortBy || (claims === null || claims === void 0 ? void 0 : (_claims$taskNotes2 = claims.taskNotes) === null || _claims$taskNotes2 === void 0 ? void 0 : (_claims$taskNotes2$so = _claims$taskNotes2.sort) === null || _claims$taskNotes2$so === void 0 ? void 0 : _claims$taskNotes2$so.by),\n      direction: (direction || (claims === null || claims === void 0 ? void 0 : (_claims$taskNotes3 = claims.taskNotes) === null || _claims$taskNotes3 === void 0 ? void 0 : (_claims$taskNotes3$so = _claims$taskNotes3.sort) === null || _claims$taskNotes3$so === void 0 ? void 0 : _claims$taskNotes3$so.direction) || '').toUpperCase(),\n      search: newQuery || '',\n      filters: (newFilters === null || newFilters === void 0 ? void 0 : newFilters.length) > 0 ? newFilters : null\n    };\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.bpmService,\n      path: \"notes/task/\".concat(taskId, \"/search\"),\n      data: apiParams\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (data) {\n      return utils.api.handleNewData(data);\n    }).then(function (json) {\n      dispatch(getClaimTaskNotesSuccess(json));\n      return json;\n    }).catch(function (err) {\n      dispatch(getClaimTaskNotesFailure(err, defaultError));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      return err;\n    }).finally(function () {\n      dispatch(removeLoader('getClaimTaskNotes'));\n    });\n  };\n};\nexport var getClaimTaskNotesRequest = function getClaimTaskNotesRequest(taskId) {\n  return {\n    type: 'CLAIM_TASK_NOTES_GET_REQUEST',\n    payload: taskId\n  };\n};\nexport var getClaimTaskNotesSuccess = function getClaimTaskNotesSuccess(json) {\n  var _json$data, _json$data2;\n\n  return {\n    type: 'CLAIM_TASK_NOTES_GET_SUCCESS',\n    payload: {\n      items: (_json$data = json.data) === null || _json$data === void 0 ? void 0 : _json$data.searchValue,\n      filters: (_json$data2 = json.data) === null || _json$data2 === void 0 ? void 0 : _json$data2.filterValue,\n      pagination: json === null || json === void 0 ? void 0 : json.pagination\n    }\n  };\n};\nexport var getClaimTaskNotesFailure = function getClaimTaskNotesFailure(err) {\n  return {\n    type: 'CLAIM_TASK_NOTES_GET_FAILURE',\n    payload: err\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.getClaimTaskNotes.js"],"names":["get","moment","config","authLogout","addLoader","removeLoader","enqueueNotification","utils","getClaimTaskNotes","params","dispatch","getState","auth","user","endpoint","vars","claims","taskId","page","size","sortBy","direction","query","filters","defaultError","file","getClaimTaskNotesRequest","getClaimTaskNotesFailure","message","prevQuery","newQuery","hasOwnProperty","constructFilters","filtersObj","filteredArray","key","selectedFilterValue","Date","format","length","push","column","filterValue","id","name","prevFilters","newFilters","apiParams","pageSize","taskNotes","ui","pagination","options","sort","by","toUpperCase","search","api","post","token","accessToken","bpmService","path","data","then","response","handleResponse","handleNewData","json","getClaimTaskNotesSuccess","catch","err","handleUnauthorized","finally","type","payload","items","searchValue"],"mappings":"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","sourcesContent":["import get from 'lodash/get';\r\nimport moment from 'moment';\r\n\r\n// app\r\nimport config from 'config';\r\nimport { authLogout, addLoader, removeLoader, enqueueNotification } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const getClaimTaskNotes = (params) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}, claims} = getState();\r\n  const { taskId, page, size, sortBy, direction, query, filters = {} } = params;\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.getClaimTaskNotes',\r\n  };\r\n\r\n  dispatch(getClaimTaskNotesRequest(params));\r\n  dispatch(addLoader('getClaimTaskNotes'));\r\n\r\n  if (!taskId) {\r\n    dispatch(getClaimTaskNotesFailure({ ...defaultError, message: 'Missing taskId param' }));\r\n    dispatch(enqueueNotification('claims.notes.notifications.getFailure', 'error'));\r\n    dispatch(removeLoader('getClaimTaskNotes'));\r\n    return;\r\n  }\r\n\r\n  const prevQuery = get(claims, 'taskNotes.query') || '';\r\n  const newQuery = params.hasOwnProperty('query') ? query : prevQuery;\r\n\r\n  const constructFilters = (filtersObj) => {\r\n    const filteredArray = [];\r\n    for (const key in filtersObj) {\r\n      const selectedFilterValue =\r\n        key === 'createdDate' || key === 'updatedDate' ? moment(new Date(filtersObj[key])).format('DD-MM-YYYY') : filtersObj[key];\r\n      if (filtersObj[key]?.length > 0 && typeof filtersObj[key] !== 'string') {\r\n        filteredArray.push({\r\n          column: key,\r\n          filterValue: selectedFilterValue,\r\n        });\r\n      } else if (typeof filtersObj[key] === 'string' && filtersObj[key] !== '') {\r\n        filteredArray.push({\r\n          column: key,\r\n          filterValue: [{ id: 0, name: selectedFilterValue }],\r\n        });\r\n      }\r\n    }\r\n    return filteredArray;\r\n  };\r\n\r\n  const prevFilters = get(claims, 'taskNotes.filters') || [];\r\n  const newFilters = params.hasOwnProperty('filters') ? constructFilters(filters) : prevFilters;\r\n\r\n  const apiParams = {\r\n    page: page || 0,\r\n    pageSize: size || claims?.taskNotes?.pageSize || config.ui.pagination.options[0],\r\n    sortBy: sortBy || claims?.taskNotes?.sort?.by,\r\n    direction: (direction || claims?.taskNotes?.sort?.direction || '').toUpperCase(),\r\n    search: newQuery || '',\r\n    filters: newFilters?.length > 0 ? newFilters : null,\r\n  };\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.bpmService,\r\n      path: `notes/task/${taskId}/search`,\r\n      data: apiParams,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((data) => utils.api.handleNewData(data))\r\n    .then((json) => {\r\n      dispatch(getClaimTaskNotesSuccess(json));\r\n      return json;\r\n    })\r\n    .catch((err) => {\r\n      dispatch(getClaimTaskNotesFailure(err, defaultError));\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('getClaimTaskNotes'));\r\n    });\r\n};\r\n\r\nexport const getClaimTaskNotesRequest = (taskId) => {\r\n  return {\r\n    type: 'CLAIM_TASK_NOTES_GET_REQUEST',\r\n    payload: taskId,\r\n  };\r\n};\r\n\r\nexport const getClaimTaskNotesSuccess = (json) => {\r\n  return {\r\n    type: 'CLAIM_TASK_NOTES_GET_SUCCESS',\r\n    payload: {\r\n      items: json.data?.searchValue,\r\n      filters: json.data?.filterValue,\r\n      pagination: json?.pagination,\r\n    },\r\n  };\r\n};\r\n\r\nexport const getClaimTaskNotesFailure = (err) => {\r\n  return {\r\n    type: 'CLAIM_TASK_NOTES_GET_FAILURE',\r\n    payload: err,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}