{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\forms\\\\EditClaimTaskNote\\\\EditClaimTaskNote.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport * as Yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup'; // app\n\nimport { EditClaimTaskNoteView } from './EditClaimTaskNote.view';\nimport { useFormActions } from 'hooks';\nimport { editTaskNote } from 'stores';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nEditClaimTaskNote.propTypes = {\n  noteObj: PropTypes.object,\n  setIsDirty: PropTypes.func.isRequired,\n  confirmHandler: PropTypes.func.isRequired\n};\nexport default function EditClaimTaskNote(_ref) {\n  _s();\n\n  var noteObj = _ref.noteObj,\n      setIsDirty = _ref.setIsDirty,\n      confirmHandler = _ref.confirmHandler;\n  var dispatch = useDispatch();\n  var fields = [{\n    name: 'details',\n    type: 'textarea',\n    value: (noteObj === null || noteObj === void 0 ? void 0 : noteObj.notesDescription) || '',\n    muiComponentProps: {\n      multiline: true,\n      rows: 3,\n      rowsMax: 6\n    },\n    validation: Yup.string().max(1000, utils.string.t('validation.string.max')).required(utils.string.t('validation.required'))\n  }];\n  var actions = [{\n    name: 'cancel',\n    label: utils.string.t('app.cancel'),\n    handler: function handler() {\n      confirmHandler();\n    }\n  }, {\n    name: 'submit',\n    label: utils.string.t('app.save'),\n    handler: function handler(formValues) {\n      return dispatch(editTaskNote(formValues, noteObj));\n    }\n  }];\n  var defaultValues = utils.form.getInitialValues(fields);\n  var validationSchema = utils.form.getValidationSchema(fields);\n  var formProps = useForm(_objectSpread({\n    defaultValues: defaultValues\n  }, validationSchema && {\n    resolver: yupResolver(validationSchema)\n  }));\n\n  var _useFormActions = useFormActions(actions),\n      cancel = _useFormActions.cancel,\n      submit = _useFormActions.submit;\n\n  var formValues = formProps.watch(['details']);\n  useEffect(function () {\n    setIsDirty(formProps.formState.isDirty);\n  }, [formValues]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/_jsxDEV(EditClaimTaskNoteView, {\n    fields: fields,\n    buttons: {\n      cancel: cancel,\n      submit: submit\n    },\n    formProps: formProps,\n    note: noteObj\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 10\n  }, this);\n}\n\n_s(EditClaimTaskNote, \"dskVvMMTibq4VFcDkX8A5+SbCPY=\", false, function () {\n  return [useDispatch, useForm, useFormActions];\n});\n\n_c = EditClaimTaskNote;\nEditClaimTaskNote.displayName = \"EditClaimTaskNote\";\nEditClaimTaskNote.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"EditClaimTaskNote\",\n  \"props\": {\n    \"noteObj\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"setIsDirty\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"confirmHandler\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\forms\\\\EditClaimTaskNote\\\\EditClaimTaskNote.js\"] = {\n    name: \"EditClaimTaskNote\",\n    docgenInfo: EditClaimTaskNote.__docgenInfo,\n    path: \"src\\\\forms\\\\EditClaimTaskNote\\\\EditClaimTaskNote.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"EditClaimTaskNote\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/forms/EditClaimTaskNote/EditClaimTaskNote.js"],"names":["React","useEffect","PropTypes","useDispatch","useForm","Yup","yupResolver","EditClaimTaskNoteView","useFormActions","editTaskNote","utils","EditClaimTaskNote","propTypes","noteObj","object","setIsDirty","func","isRequired","confirmHandler","dispatch","fields","name","type","value","notesDescription","muiComponentProps","multiline","rows","rowsMax","validation","string","max","t","required","actions","label","handler","formValues","defaultValues","form","getInitialValues","validationSchema","getValidationSchema","formProps","resolver","cancel","submit","watch","formState","isDirty"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useForm } from 'react-hook-form';\r\nimport * as Yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n\r\n// app\r\nimport { EditClaimTaskNoteView } from './EditClaimTaskNote.view';\r\nimport { useFormActions } from 'hooks';\r\nimport { editTaskNote } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nEditClaimTaskNote.propTypes = {\r\n  noteObj: PropTypes.object,\r\n  setIsDirty: PropTypes.func.isRequired,\r\n  confirmHandler: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default function EditClaimTaskNote({ noteObj, setIsDirty, confirmHandler }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const fields = [\r\n    {\r\n      name: 'details',\r\n      type: 'textarea',\r\n      value: noteObj?.notesDescription || '',\r\n      muiComponentProps: {\r\n        multiline: true,\r\n        rows: 3,\r\n        rowsMax: 6,\r\n      },\r\n      validation: Yup.string().max(1000, utils.string.t('validation.string.max')).required(utils.string.t('validation.required')),\r\n    },\r\n  ];\r\n\r\n  const actions = [\r\n    {\r\n      name: 'cancel',\r\n      label: utils.string.t('app.cancel'),\r\n      handler: () => {\r\n        confirmHandler();\r\n      },\r\n    },\r\n    {\r\n      name: 'submit',\r\n      label: utils.string.t('app.save'),\r\n      handler: (formValues) => {\r\n        return dispatch(editTaskNote(formValues, noteObj));\r\n      },\r\n    },\r\n  ];\r\n\r\n  const defaultValues = utils.form.getInitialValues(fields);\r\n  const validationSchema = utils.form.getValidationSchema(fields);\r\n\r\n  const formProps = useForm({\r\n    defaultValues,\r\n    ...(validationSchema && { resolver: yupResolver(validationSchema) }),\r\n  });\r\n\r\n  const { cancel, submit } = useFormActions(actions);\r\n\r\n  const formValues = formProps.watch(['details']);\r\n\r\n  useEffect(() => {\r\n    setIsDirty(formProps.formState.isDirty);\r\n  }, [formValues]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return <EditClaimTaskNoteView fields={fields} buttons={{ cancel, submit }} formProps={formProps} note={noteObj} />;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}