{"ast":null,"code":"import \"core-js/modules/es.array.map\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty'; // app\n\nimport { addLoader, authLogout, bulkPlacementClear, deletePlacementPolicies, deletePlacementPolicyMarkets, enqueueNotification, hideModal, removeLoader, updateSelectedPolicyMarket, updatePlacementPolicyMarkets } from 'stores';\nimport * as utils from 'utils';\nexport var postPlacementBulkPolicy = function postPlacementBulkPolicy(formData) {\n  return function (dispatch, getState) {\n    var bulkType = get(getState(), 'placement.bulk.type');\n    var bulkItems = get(getState(), 'placement.bulk.items', []);\n    var defaultError = {\n      file: 'stores/placement.actions.bulkPolicy',\n      message: 'Data missing for POST request'\n    };\n\n    if (!formData || !bulkType || isEmpty(bulkItems)) {\n      dispatch(postPlacementBulkPolicyUpdateFailure(defaultError));\n      dispatch(enqueueNotification('notification.bulkEdit.fail', 'error'));\n      dispatch(hideModal());\n      return;\n    }\n\n    if (bulkType === 'policy') {\n      return dispatch(postPlacementBulkPolicyUpdate(formData));\n    } else {\n      return dispatch(postPlacementBulkPolicyUpdateMarket(formData));\n    }\n  };\n};\nexport var postPlacementBulkPolicyUpdate = function postPlacementBulkPolicyUpdate(formData) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var action = formData[\"delete\"] ? 'delete' : 'edit';\n    var body = get(getState(), 'placement.bulk.items', []);\n    dispatch(postPlacementBulkPolicyUpdateRequest(formData));\n    dispatch(addLoader('postPlacementBulkPolicyUpdate'));\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.edge,\n      path: \"api/policy/bulk/\".concat(action),\n      data: body\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleData(json);\n    }).then(function (data) {\n      dispatch(postPlacementBulkPolicyUpdateSuccess(data)); // on POST success update the UI\n\n      if (formData[\"delete\"]) {\n        dispatch(deletePlacementPolicies(body));\n      }\n\n      dispatch(enqueueNotification('notification.bulkEdit.success', 'success'));\n      dispatch(bulkPlacementClear());\n      dispatch(hideModal());\n      dispatch(removeLoader('postPlacementBulkPolicyUpdate'));\n    })[\"catch\"](function (err) {\n      var errorParams = {\n        file: 'stores/placement.actions.bulk',\n        message: 'API post error (placement.bulk)'\n      };\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(postPlacementBulkPolicyUpdateFailure(err));\n      dispatch(enqueueNotification('notification.bulkEdit.fail', 'error'));\n      dispatch(hideModal());\n      dispatch(removeLoader('postPlacementBulkPolicyUpdate'));\n      return err;\n    });\n  };\n};\nexport var postPlacementBulkPolicyUpdateMarket = function postPlacementBulkPolicyUpdateMarket(formData) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState2 = getState(),\n        auth = _getState2.user.auth,\n        endpoint = _getState2.config.vars.endpoint;\n\n    var action = formData[\"delete\"] ? 'delete' : 'edit';\n    var bulkItems = get(getState(), 'placement.bulk.items', []);\n    var body = bulkItems.map(function (marketId) {\n      var currentMarket = utils.policies.getMarketById(get(getState(), 'placement.selected.policies', []), marketId);\n\n      if (action === 'delete') {\n        return marketId;\n      }\n\n      return _objectSpread(_objectSpread({}, currentMarket), {}, {\n        statusId: formData.status ? parseFloat(formData.status) : currentMarket.statusId,\n        premium: formData.premium ? parseFloat(formData.premium) : currentMarket.premium\n      });\n    });\n    dispatch(postPlacementBulkPolicyUpdateRequest(formData));\n    dispatch(addLoader('postPlacementBulkMarket'));\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.edge,\n      path: \"api/policy/market/bulk/\".concat(action),\n      data: body\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleData(json);\n    }).then(function (data) {\n      dispatch(postPlacementBulkPolicyUpdateSuccess(data)); // on POST success -> update the store\n      // in this case, we don't expect the updated data to be returned from the API\n      // so we take the data sent (body) and do an \"optimistic update\" on the UI\n\n      if (formData[\"delete\"]) {\n        dispatch(deletePlacementPolicyMarkets(body));\n      } else {\n        dispatch(updatePlacementPolicyMarkets(body));\n      }\n\n      dispatch(updateSelectedPolicyMarket());\n      dispatch(enqueueNotification('notification.bulkEdit.success', 'success'));\n      dispatch(bulkPlacementClear());\n      dispatch(hideModal());\n      dispatch(removeLoader('postPlacementBulkMarket'));\n    })[\"catch\"](function (err) {\n      var errorParams = {\n        file: 'stores/placement.actions.bulk',\n        message: 'API post error (placement.bulk)'\n      };\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(postPlacementBulkPolicyUpdateFailure(err));\n      dispatch(enqueueNotification('notification.bulkEdit.fail', 'error'));\n      dispatch(hideModal());\n      dispatch(removeLoader('postPlacementBulkMarket'));\n      return err;\n    });\n  };\n};\nexport var postPlacementBulkPolicyUpdateRequest = function postPlacementBulkPolicyUpdateRequest(data) {\n  return {\n    type: 'PLACEMENT_BULK_POLICY_POST_REQUEST',\n    payload: data\n  };\n};\nexport var postPlacementBulkPolicyUpdateSuccess = function postPlacementBulkPolicyUpdateSuccess(data) {\n  return {\n    type: 'PLACEMENT_BULK_POLICY_POST_SUCCESS',\n    payload: data\n  };\n};\nexport var postPlacementBulkPolicyUpdateFailure = function postPlacementBulkPolicyUpdateFailure(error) {\n  return {\n    type: 'PLACEMENT_BULK_POLICY_POST_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/placement/placement.actions.bulkUpdatePolicy.js"],"names":["get","isEmpty","addLoader","authLogout","bulkPlacementClear","deletePlacementPolicies","deletePlacementPolicyMarkets","enqueueNotification","hideModal","removeLoader","updateSelectedPolicyMarket","updatePlacementPolicyMarkets","utils","postPlacementBulkPolicy","formData","dispatch","getState","bulkType","bulkItems","defaultError","file","message","postPlacementBulkPolicyUpdateFailure","postPlacementBulkPolicyUpdate","postPlacementBulkPolicyUpdateMarket","auth","user","endpoint","config","vars","action","body","postPlacementBulkPolicyUpdateRequest","api","post","token","accessToken","edge","path","data","then","response","handleResponse","json","handleData","postPlacementBulkPolicyUpdateSuccess","err","errorParams","handleError","handleUnauthorized","map","marketId","currentMarket","policies","getMarketById","statusId","status","parseFloat","premium","type","payload","error"],"mappings":"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","sourcesContent":["import get from 'lodash/get';\r\nimport isEmpty from 'lodash/isEmpty';\r\n\r\n// app\r\nimport {\r\n  addLoader,\r\n  authLogout,\r\n  bulkPlacementClear,\r\n  deletePlacementPolicies,\r\n  deletePlacementPolicyMarkets,\r\n  enqueueNotification,\r\n  hideModal,\r\n  removeLoader,\r\n  updateSelectedPolicyMarket,\r\n  updatePlacementPolicyMarkets,\r\n} from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const postPlacementBulkPolicy = (formData) => (dispatch, getState) => {\r\n  const bulkType = get(getState(), 'placement.bulk.type');\r\n  const bulkItems = get(getState(), 'placement.bulk.items', []);\r\n\r\n  const defaultError = {\r\n    file: 'stores/placement.actions.bulkPolicy',\r\n    message: 'Data missing for POST request',\r\n  };\r\n\r\n  if (!formData || !bulkType || isEmpty(bulkItems)) {\r\n    dispatch(postPlacementBulkPolicyUpdateFailure(defaultError));\r\n    dispatch(enqueueNotification('notification.bulkEdit.fail', 'error'));\r\n    dispatch(hideModal());\r\n    return;\r\n  }\r\n\r\n  if (bulkType === 'policy') {\r\n    return dispatch(postPlacementBulkPolicyUpdate(formData));\r\n  } else {\r\n    return dispatch(postPlacementBulkPolicyUpdateMarket(formData));\r\n  }\r\n};\r\n\r\nexport const postPlacementBulkPolicyUpdate = (formData) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  const action = formData.delete ? 'delete' : 'edit';\r\n  const body = get(getState(), 'placement.bulk.items', []);\r\n\r\n  dispatch(postPlacementBulkPolicyUpdateRequest(formData));\r\n  dispatch(addLoader('postPlacementBulkPolicyUpdate'));\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.edge,\r\n      path: `api/policy/bulk/${action}`,\r\n      data: body,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleData(json))\r\n    .then((data) => {\r\n      dispatch(postPlacementBulkPolicyUpdateSuccess(data));\r\n\r\n      // on POST success update the UI\r\n      if (formData.delete) {\r\n        dispatch(deletePlacementPolicies(body));\r\n      }\r\n\r\n      dispatch(enqueueNotification('notification.bulkEdit.success', 'success'));\r\n      dispatch(bulkPlacementClear());\r\n      dispatch(hideModal());\r\n      dispatch(removeLoader('postPlacementBulkPolicyUpdate'));\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        file: 'stores/placement.actions.bulk',\r\n        message: 'API post error (placement.bulk)',\r\n      };\r\n\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(postPlacementBulkPolicyUpdateFailure(err));\r\n      dispatch(enqueueNotification('notification.bulkEdit.fail', 'error'));\r\n      dispatch(hideModal());\r\n      dispatch(removeLoader('postPlacementBulkPolicyUpdate'));\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const postPlacementBulkPolicyUpdateMarket = (formData) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  const action = formData.delete ? 'delete' : 'edit';\r\n  const bulkItems = get(getState(), 'placement.bulk.items', []);\r\n\r\n  const body = bulkItems.map((marketId) => {\r\n    const currentMarket = utils.policies.getMarketById(get(getState(), 'placement.selected.policies', []), marketId);\r\n\r\n    if (action === 'delete') {\r\n      return marketId;\r\n    }\r\n\r\n    return {\r\n      ...currentMarket,\r\n      statusId: formData.status ? parseFloat(formData.status) : currentMarket.statusId,\r\n      premium: formData.premium ? parseFloat(formData.premium) : currentMarket.premium,\r\n    };\r\n  });\r\n\r\n  dispatch(postPlacementBulkPolicyUpdateRequest(formData));\r\n  dispatch(addLoader('postPlacementBulkMarket'));\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.edge,\r\n      path: `api/policy/market/bulk/${action}`,\r\n      data: body,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleData(json))\r\n    .then((data) => {\r\n      dispatch(postPlacementBulkPolicyUpdateSuccess(data));\r\n\r\n      // on POST success -> update the store\r\n      // in this case, we don't expect the updated data to be returned from the API\r\n      // so we take the data sent (body) and do an \"optimistic update\" on the UI\r\n      if (formData.delete) {\r\n        dispatch(deletePlacementPolicyMarkets(body));\r\n      } else {\r\n        dispatch(updatePlacementPolicyMarkets(body));\r\n      }\r\n\r\n      dispatch(updateSelectedPolicyMarket());\r\n      dispatch(enqueueNotification('notification.bulkEdit.success', 'success'));\r\n      dispatch(bulkPlacementClear());\r\n      dispatch(hideModal());\r\n      dispatch(removeLoader('postPlacementBulkMarket'));\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        file: 'stores/placement.actions.bulk',\r\n        message: 'API post error (placement.bulk)',\r\n      };\r\n\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(postPlacementBulkPolicyUpdateFailure(err));\r\n      dispatch(enqueueNotification('notification.bulkEdit.fail', 'error'));\r\n      dispatch(hideModal());\r\n      dispatch(removeLoader('postPlacementBulkMarket'));\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const postPlacementBulkPolicyUpdateRequest = (data) => {\r\n  return {\r\n    type: 'PLACEMENT_BULK_POLICY_POST_REQUEST',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const postPlacementBulkPolicyUpdateSuccess = (data) => {\r\n  return {\r\n    type: 'PLACEMENT_BULK_POLICY_POST_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const postPlacementBulkPolicyUpdateFailure = (error) => {\r\n  return {\r\n    type: 'PLACEMENT_BULK_POLICY_POST_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}