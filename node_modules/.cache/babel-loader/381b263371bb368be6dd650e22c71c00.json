{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { authLogout, enqueueNotification } from 'stores';\nimport * as utils from 'utils';\nexport var deleteCoverages = function deleteCoverages(coverageId, riskId) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/risk.actions.deleteCoverages',\n      message: 'Data missing for DELETE request'\n    };\n    dispatch(deleteCoveragesRequest(coverageId));\n\n    if (!coverageId || !riskId) {\n      dispatch(deleteCoveragesFailure(defaultError));\n      dispatch(enqueueNotification('notification.deleteCoverages.fail', 'error'));\n      return;\n    }\n\n    return utils.api.delete({\n      token: auth.accessToken,\n      endpoint: endpoint.auth,\n      path: \"api/v1/risks/\".concat(riskId, \"/coverages/\").concat(coverageId)\n    }).then(function (response) {\n      return utils.api.handleEmptyResponse(response);\n    }).then(function () {\n      dispatch(deleteCoveragesSuccess(coverageId));\n      dispatch(enqueueNotification('notification.deleteCoverages.success', 'success'));\n    }).catch(function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API delete error (risk.deleteCoverages)'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(deleteCoveragesFailure(err));\n      dispatch(enqueueNotification('notification.deleteCoverages.fail', 'error'));\n      return err;\n    });\n  };\n};\nexport var deleteCoveragesRequest = function deleteCoveragesRequest(coverageId) {\n  return {\n    type: 'RISK_COVERAGE_DELETE_REQUEST',\n    payload: coverageId\n  };\n};\nexport var deleteCoveragesSuccess = function deleteCoveragesSuccess(coverageId) {\n  return {\n    type: 'RISK_COVERAGE_DELETE_SUCCESS',\n    payload: coverageId\n  };\n};\nexport var deleteCoveragesFailure = function deleteCoveragesFailure(error) {\n  return {\n    type: 'RISK_COVERAGE_DELETE_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/risk/risk.actions.deleteCoverages.js"],"names":["authLogout","enqueueNotification","utils","deleteCoverages","coverageId","riskId","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","message","deleteCoveragesRequest","deleteCoveragesFailure","api","delete","token","accessToken","path","then","response","handleEmptyResponse","deleteCoveragesSuccess","catch","err","errorParams","handleError","handleUnauthorized","type","payload","error"],"mappings":";AAAA,SAASA,UAAT,EAAqBC,mBAArB,QAAgD,QAAhD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,UAAD,EAAaC,MAAb;AAAA,SAAwB,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC7E;AAD6E,oBAElBA,QAAQ,EAFU;AAAA,QAE7DC,IAF6D,aAErEC,IAFqE,CAE7DD,IAF6D;AAAA,QAEnCE,QAFmC,aAErDC,MAFqD,CAE3CC,IAF2C,CAEnCF,QAFmC;;AAI7E,QAAMG,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE,qCADa;AAEnBC,MAAAA,OAAO,EAAE;AAFU,KAArB;AAKAT,IAAAA,QAAQ,CAACU,sBAAsB,CAACZ,UAAD,CAAvB,CAAR;;AAEA,QAAI,CAACA,UAAD,IAAe,CAACC,MAApB,EAA4B;AAC1BC,MAAAA,QAAQ,CAACW,sBAAsB,CAACJ,YAAD,CAAvB,CAAR;AACAP,MAAAA,QAAQ,CAACL,mBAAmB,CAAC,mCAAD,EAAsC,OAAtC,CAApB,CAAR;AACA;AACD;;AAED,WAAOC,KAAK,CAACgB,GAAN,CACJC,MADI,CACG;AACNC,MAAAA,KAAK,EAAEZ,IAAI,CAACa,WADN;AAENX,MAAAA,QAAQ,EAAEA,QAAQ,CAACF,IAFb;AAGNc,MAAAA,IAAI,yBAAkBjB,MAAlB,wBAAsCD,UAAtC;AAHE,KADH,EAMJmB,IANI,CAMC,UAACC,QAAD;AAAA,aAActB,KAAK,CAACgB,GAAN,CAAUO,mBAAV,CAA8BD,QAA9B,CAAd;AAAA,KAND,EAOJD,IAPI,CAOC,YAAM;AACVjB,MAAAA,QAAQ,CAACoB,sBAAsB,CAACtB,UAAD,CAAvB,CAAR;AACAE,MAAAA,QAAQ,CAACL,mBAAmB,CAAC,sCAAD,EAAyC,SAAzC,CAApB,CAAR;AACD,KAVI,EAWJ0B,KAXI,CAWE,UAACC,GAAD,EAAS;AACd,UAAMC,WAAW,mCACZhB,YADY;AAEfE,QAAAA,OAAO,EAAE;AAFM,QAAjB;;AAIAb,MAAAA,KAAK,CAACgB,GAAN,CAAUY,WAAV,CAAsBF,GAAtB,EAA2BC,WAA3B;AACA3B,MAAAA,KAAK,CAACgB,GAAN,CAAUa,kBAAV,CAA6BH,GAA7B,EAAkCtB,QAAlC,EAA4CN,UAA5C;AACAM,MAAAA,QAAQ,CAACW,sBAAsB,CAACW,GAAD,CAAvB,CAAR;AACAtB,MAAAA,QAAQ,CAACL,mBAAmB,CAAC,mCAAD,EAAsC,OAAtC,CAApB,CAAR;AAEA,aAAO2B,GAAP;AACD,KAtBI,CAAP;AAuBD,GAxC8B;AAAA,CAAxB;AA0CP,OAAO,IAAMZ,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACZ,UAAD,EAAgB;AACpD,SAAO;AACL4B,IAAAA,IAAI,EAAE,8BADD;AAELC,IAAAA,OAAO,EAAE7B;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMsB,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACtB,UAAD,EAAgB;AACpD,SAAO;AACL4B,IAAAA,IAAI,EAAE,8BADD;AAELC,IAAAA,OAAO,EAAE7B;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMa,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACiB,KAAD,EAAW;AAC/C,SAAO;AACLF,IAAAA,IAAI,EAAE,8BADD;AAELC,IAAAA,OAAO,EAAEC;AAFJ,GAAP;AAID,CALM","sourcesContent":["import { authLogout, enqueueNotification } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const deleteCoverages = (coverageId, riskId) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } } } = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/risk.actions.deleteCoverages',\r\n    message: 'Data missing for DELETE request',\r\n  };\r\n\r\n  dispatch(deleteCoveragesRequest(coverageId));\r\n\r\n  if (!coverageId || !riskId) {\r\n    dispatch(deleteCoveragesFailure(defaultError));\r\n    dispatch(enqueueNotification('notification.deleteCoverages.fail', 'error'));\r\n    return;\r\n  }\r\n\r\n  return utils.api\r\n    .delete({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.auth,\r\n      path: `api/v1/risks/${riskId}/coverages/${coverageId}`,\r\n    })\r\n    .then((response) => utils.api.handleEmptyResponse(response))\r\n    .then(() => {\r\n      dispatch(deleteCoveragesSuccess(coverageId));\r\n      dispatch(enqueueNotification('notification.deleteCoverages.success', 'success'));\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        ...defaultError,\r\n        message: 'API delete error (risk.deleteCoverages)',\r\n      };\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(deleteCoveragesFailure(err));\r\n      dispatch(enqueueNotification('notification.deleteCoverages.fail', 'error'));\r\n\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const deleteCoveragesRequest = (coverageId) => {\r\n  return {\r\n    type: 'RISK_COVERAGE_DELETE_REQUEST',\r\n    payload: coverageId,\r\n  };\r\n};\r\n\r\nexport const deleteCoveragesSuccess = (coverageId) => {\r\n  return {\r\n    type: 'RISK_COVERAGE_DELETE_SUCCESS',\r\n    payload: coverageId,\r\n  };\r\n};\r\n\r\nexport const deleteCoveragesFailure = (error) => {\r\n  return {\r\n    type: 'RISK_COVERAGE_DELETE_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}