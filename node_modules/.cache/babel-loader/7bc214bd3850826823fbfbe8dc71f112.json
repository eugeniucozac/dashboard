{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\forms\\\\DocumentUpload\\\\DocumentUpload.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as Yup from 'yup';\nimport sortBy from 'lodash/sortBy'; // app\n\nimport { DocumentUploadView } from './DocumentUpload.view';\nimport { hideModal, uploadDocument, getFolderList } from 'stores';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nDocumentUpload.propTypes = {\n  documentType: PropTypes.string,\n  placement: PropTypes.object\n};\nexport default function DocumentUpload(_ref) {\n  _s();\n\n  var documentType = _ref.documentType,\n      placement = _ref.placement,\n      documentTypeId = _ref.documentTypeId,\n      _redirectionCallback = _ref.redirectionCallback;\n  var dispatch = useDispatch();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      folders = _useState2[0],\n      setFolders = _useState2[1];\n\n  useEffect(function () {\n    var mounted = true;\n\n    var fetchFolders = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var folders;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!documentType) {\n                  _context.next = 4;\n                  break;\n                }\n\n                _context.t0 = [{\n                  id: documentType\n                }];\n                _context.next = 7;\n                break;\n\n              case 4:\n                _context.next = 6;\n                return dispatch(getFolderList());\n\n              case 6:\n                _context.t0 = _context.sent;\n\n              case 7:\n                folders = _context.t0;\n\n                if (folders && mounted) {\n                  setFolders(sortBy(folders, 'label'));\n                }\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function fetchFolders() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    fetchFolders();\n    return function () {\n      return mounted = false;\n    };\n  }, [] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  var fileField = {\n    type: 'file',\n    name: 'file',\n    label: utils.string.t('app.file'),\n    placeholder: 'Select File ...',\n    validation: Yup.mixed().nullable().required(utils.string.t('form.dragDrop.required'))\n  };\n  var autocompleteField = {\n    type: 'select',\n    name: 'folder',\n    label: utils.string.t('app.folder'),\n    value: '',\n    optionKey: 'id',\n    optionLabel: 'label',\n    validation: Yup.string().required(utils.string.t('form.folder.required'))\n  };\n  var folderField = folders.length > 1 ? _objectSpread(_objectSpread({}, autocompleteField), {}, {\n    options: folders.map(function (f) {\n      return {\n        value: f.id,\n        label: f.label,\n        id: f.id\n      };\n    })\n  }) : {\n    type: 'hidden',\n    name: 'folder',\n    value: folders[0] && folders[0].id\n  };\n  var fields = [fileField, folderField];\n  var actions = [{\n    name: 'cancel',\n    label: utils.string.t('app.cancel'),\n    handler: function handler() {\n      return dispatch(hideModal());\n    }\n  }, {\n    name: 'submit',\n    label: utils.string.t('app.submit'),\n    handler: function handler(data) {\n      return dispatch(uploadDocument(_objectSpread({\n        data: data,\n        placement: placement,\n        documentType: documentType,\n        documentTypeId: documentTypeId\n      }, utils.generic.isFunction(_redirectionCallback) && {\n        redirectionCallback: function redirectionCallback() {\n          return _redirectionCallback(placement.id);\n        }\n      })));\n    }\n  }];\n  return folders.length > 0 ? /*#__PURE__*/_jsxDEV(DocumentUploadView, {\n    fields: fields,\n    actions: actions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 31\n  }, this) : null;\n}\n\n_s(DocumentUpload, \"waWgV0KAXf3SmkRvykoquDh3HIY=\", false, function () {\n  return [useDispatch];\n});\n\n_c = DocumentUpload;\n\nvar _c;\n\n$RefreshReg$(_c, \"DocumentUpload\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/forms/DocumentUpload/DocumentUpload.js"],"names":["React","useEffect","useState","useDispatch","PropTypes","Yup","sortBy","DocumentUploadView","hideModal","uploadDocument","getFolderList","utils","DocumentUpload","propTypes","documentType","string","placement","object","documentTypeId","redirectionCallback","dispatch","folders","setFolders","mounted","fetchFolders","id","fileField","type","name","label","t","placeholder","validation","mixed","nullable","required","autocompleteField","value","optionKey","optionLabel","folderField","length","options","map","f","fields","actions","handler","data","generic","isFunction"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport * as Yup from 'yup';\r\nimport sortBy from 'lodash/sortBy';\r\n\r\n// app\r\nimport { DocumentUploadView } from './DocumentUpload.view';\r\nimport { hideModal, uploadDocument, getFolderList } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nDocumentUpload.propTypes = {\r\n  documentType: PropTypes.string,\r\n  placement: PropTypes.object,\r\n};\r\n\r\nexport default function DocumentUpload({ documentType, placement, documentTypeId, redirectionCallback }) {\r\n  const dispatch = useDispatch();\r\n  const [folders, setFolders] = useState([]);\r\n\r\n  useEffect(\r\n    () => {\r\n      let mounted = true;\r\n\r\n      const fetchFolders = async () => {\r\n        const folders = documentType ? [{ id: documentType }] : await dispatch(getFolderList());\r\n        if (folders && mounted) {\r\n          setFolders(sortBy(folders, 'label'));\r\n        }\r\n      };\r\n\r\n      fetchFolders();\r\n\r\n      return () => (mounted = false);\r\n    },\r\n    [] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  const fileField = {\r\n    type: 'file',\r\n    name: 'file',\r\n    label: utils.string.t('app.file'),\r\n    placeholder: 'Select File ...',\r\n    validation: Yup.mixed().nullable().required(utils.string.t('form.dragDrop.required')),\r\n  };\r\n\r\n  const autocompleteField = {\r\n    type: 'select',\r\n    name: 'folder',\r\n    label: utils.string.t('app.folder'),\r\n    value: '',\r\n    optionKey: 'id',\r\n    optionLabel: 'label',\r\n    validation: Yup.string().required(utils.string.t('form.folder.required')),\r\n  };\r\n\r\n  const folderField =\r\n    folders.length > 1\r\n      ? { ...autocompleteField, options: folders.map((f) => ({ value: f.id, label: f.label, id: f.id })) }\r\n      : { type: 'hidden', name: 'folder', value: folders[0] && folders[0].id };\r\n\r\n  const fields = [fileField, folderField];\r\n  const actions = [\r\n    {\r\n      name: 'cancel',\r\n      label: utils.string.t('app.cancel'),\r\n      handler: () => dispatch(hideModal()),\r\n    },\r\n    {\r\n      name: 'submit',\r\n      label: utils.string.t('app.submit'),\r\n      handler: (data) =>\r\n        dispatch(\r\n          uploadDocument({\r\n            data,\r\n            placement,\r\n            documentType,\r\n            documentTypeId,\r\n            ...(utils.generic.isFunction(redirectionCallback) && { redirectionCallback: () => redirectionCallback(placement.id) }),\r\n          })\r\n        ),\r\n    },\r\n  ];\r\n\r\n  return folders.length > 0 ? <DocumentUploadView fields={fields} actions={actions} /> : null;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}