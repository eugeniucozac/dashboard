{"ast":null,"code":"import _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\pages\\\\Claims\\\\Claims.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport { Helmet } from 'react-helmet'; // app\n\nimport { ClaimsView } from './Claims.view';\nimport { postClaimDetailsInformationSuccess, getLossInformation, getClaimsPreviewInformation, selectCatCodes, selectLossQualifiers, selectPriorities, selectSettlementCurrency, selectReferralResponse, selectClaimData, setClaimData, claimsPolicyData, getPolicyInformation, getClaimantNames, getInterest, getBEAdjuster, getLossQualifiers, getCatCodes, getPriorityLevels, getSettlementCurrency, selectClaimsPolicyData, getClaimDetailsSuccess, resetClaimData, setClaimsStepperControl, getComplexityValues, getReferralValues, getReferralResponse, showModal, hideModal } from 'stores';\nimport * as utils from 'utils';\nimport config from 'config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Claims() {\n  _s();\n\n  var dispatch = useDispatch();\n  var history = useHistory();\n  var fields = [{\n    id: 0,\n    form: utils.string.t('claims.modalStepperLabel.createLoss'),\n    formEditedStatus: false,\n    isSubmitted: false\n  }, {\n    id: 1,\n    form: utils.string.t('claims.modalStepperLabel.linkPolicies'),\n    formEditedStatus: false,\n    isSubmitted: false\n  }, {\n    id: 2,\n    form: utils.string.t('claims.modalStepperLabel.createClaim'),\n    formEditedStatus: false,\n    isSubmitted: false\n  }, {\n    id: 3,\n    form: utils.string.t('claims.modalStepperLabel.manageDocuments'),\n    formEditedStatus: false,\n    isSubmitted: false\n  }, {\n    id: 4,\n    form: utils.string.t('claims.modalStepperLabel.confirmation'),\n    formEditedStatus: false,\n    isSubmitted: false\n  }];\n  var isAnyformDirty = false;\n  var brand = useSelector(function (state) {\n    return state.ui.brand;\n  });\n  var claimData = useSelector(selectClaimData);\n  var claimCurrentPolicyData = useSelector(selectClaimsPolicyData);\n  var catCodes = useSelector(selectCatCodes);\n  var priorities = useSelector(selectPriorities);\n  var lossQualifiers = useSelector(selectLossQualifiers);\n  var settlementCurrency = useSelector(selectSettlementCurrency);\n  var referralResponse = useSelector(selectReferralResponse);\n\n  var _useState = useState(fields),\n      _useState2 = _slicedToArray(_useState, 2),\n      stepsForms = _useState2[0],\n      setFormDirtyStatus = _useState2[1];\n\n  var handleRegisterNewLoss = function handleRegisterNewLoss() {\n    history.push(config.routes.claimsFNOL.newLoss);\n    dispatch(setClaimData({}));\n    dispatch(resetClaimData());\n  };\n\n  var handleComplexityRulesManagement = function handleComplexityRulesManagement() {\n    history.push(config.routes.claimsFNOL.complexityRules);\n  };\n\n  var handleClaimsProcessing = function handleClaimsProcessing() {\n    history.push(config.routes.claimsProcessing.root);\n  };\n\n  var handleCreateClaim = function handleCreateClaim(data) {\n    dispatch(setClaimsStepperControl(1));\n    dispatch(getLossInformation(data.lossDetailID, data.sourceID));\n    history.push(config.routes.claimsFNOL.newLoss);\n  };\n\n  useEffect(function () {\n    dispatch(setClaimData({}));\n    dispatch(setClaimsStepperControl(0));\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var handleRegisterNewLossModal = function handleRegisterNewLossModal() {\n    dispatch(showModal({\n      component: 'CLAIM_REGISTER_NEW_LOSS',\n      props: {\n        title: utils.string.t('claims.modalStepperLabel.title'),\n        fullWidth: true,\n        maxWidth: 'xl',\n        disableAutoFocus: true,\n        hideCompOnBlur: false,\n        componentProps: {\n          initialFormStatus: fields,\n          steps: stepsForms.map(function (frm) {\n            return frm === null || frm === void 0 ? void 0 : frm.form;\n          }),\n          stepsForms: stepsForms,\n          clickOutSideHandler: function clickOutSideHandler() {\n            return _clickOutSideHandler();\n          },\n          findDirtyForm: function findDirtyForm(forms) {\n            return _findDirtyForm(forms);\n          }\n        }\n      }\n    }));\n  };\n\n  var _findDirtyForm = function _findDirtyForm(forms) {\n    setFormDirtyStatus(forms === null || forms === void 0 ? void 0 : forms.map(function (form) {\n      return _objectSpread({}, form);\n    }));\n    isAnyformDirty = forms.some(checkDirtyStatus);\n  };\n\n  var checkDirtyStatus = function checkDirtyStatus(form) {\n    return (form === null || form === void 0 ? void 0 : form.formEditedStatus) === true;\n  };\n\n  var _clickOutSideHandler = function _clickOutSideHandler() {\n    if (isAnyformDirty) {\n      dispatch(showModal({\n        component: 'CONFIRM',\n        props: {\n          title: utils.string.t('status.alert'),\n          hint: utils.string.t('navigation.title'),\n          fullWidth: true,\n          maxWidth: 'xs',\n          componentProps: {\n            cancelLabel: utils.string.t('app.no'),\n            confirmLabel: utils.string.t('app.yes'),\n            submitHandler: function submitHandler() {\n              dispatch(hideModal());\n            }\n          }\n        }\n      }));\n    } else {\n      dispatch(hideModal());\n    }\n  };\n\n  useEffect(function () {\n    if (claimData === null || claimData === void 0 ? void 0 : claimData.claimId) {\n      if (utils.generic.isInvalidOrEmptyArray(catCodes)) {\n        dispatch(getCatCodes());\n      }\n\n      if (utils.generic.isInvalidOrEmptyArray(priorities)) {\n        dispatch(getPriorityLevels());\n      }\n\n      if (utils.generic.isInvalidOrEmptyArray(lossQualifiers)) {\n        dispatch(getLossQualifiers());\n      }\n\n      if (utils.generic.isInvalidOrEmptyArray(settlementCurrency)) {\n        dispatch(getSettlementCurrency());\n      }\n\n      if (utils.generic.isInvalidOrEmptyArray(referralResponse)) {\n        dispatch(getReferralResponse());\n      }\n\n      dispatch(getLossInformation(claimData.lossId, claimData.sourceID));\n      dispatch(claimsPolicyData({\n        xbInstanceID: claimData.xbInstanceID,\n        xbPolicyID: claimData.xbPolicyID,\n        policyNumber: claimData.policyNumber,\n        divisionID: claimData.divisionID\n      }));\n    }\n  }, [claimData]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    if ((claimData === null || claimData === void 0 ? void 0 : claimData.claimId) && (claimCurrentPolicyData === null || claimCurrentPolicyData === void 0 ? void 0 : claimCurrentPolicyData.xbInstanceID)) {\n      var fetchData = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var claimDetails;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  dispatch(getPolicyInformation());\n                  dispatch(getInterest());\n                  dispatch(getBEAdjuster());\n                  dispatch(getClaimantNames());\n                  dispatch(postClaimDetailsInformationSuccess(claimData.claimId));\n                  _context.next = 7;\n                  return dispatch(getClaimsPreviewInformation(claimData === null || claimData === void 0 ? void 0 : claimData.claimId, claimData === null || claimData === void 0 ? void 0 : claimData.claimReference, claimData === null || claimData === void 0 ? void 0 : claimData.sourceID, claimData === null || claimData === void 0 ? void 0 : claimData.divisionID));\n\n                case 7:\n                  claimDetails = _context.sent;\n                  dispatch(getClaimDetailsSuccess(claimDetails));\n                  dispatch(getComplexityValues());\n                  dispatch(getReferralValues());\n\n                case 11:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function fetchData() {\n          return _ref.apply(this, arguments);\n        };\n      }();\n\n      fetchData();\n    }\n  }, [claimCurrentPolicyData]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"\".concat(utils.string.t('claims.title'), \" - \").concat(utils.app.getAppName(brand))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ClaimsView, {\n      handleClaimsProcessing: handleClaimsProcessing,\n      handleComplexityRulesManagement: handleComplexityRulesManagement,\n      handleCreateClaim: handleCreateClaim,\n      handleRegisterNewLoss: handleRegisterNewLoss\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Claims, \"LiF4+k5nq+1E3WfRSiDCbzkhanc=\", false, function () {\n  return [useDispatch, useHistory, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Claims;\n\nvar _c;\n\n$RefreshReg$(_c, \"Claims\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/pages/Claims/Claims.js"],"names":["React","useEffect","useState","useSelector","useDispatch","useHistory","Helmet","ClaimsView","postClaimDetailsInformationSuccess","getLossInformation","getClaimsPreviewInformation","selectCatCodes","selectLossQualifiers","selectPriorities","selectSettlementCurrency","selectReferralResponse","selectClaimData","setClaimData","claimsPolicyData","getPolicyInformation","getClaimantNames","getInterest","getBEAdjuster","getLossQualifiers","getCatCodes","getPriorityLevels","getSettlementCurrency","selectClaimsPolicyData","getClaimDetailsSuccess","resetClaimData","setClaimsStepperControl","getComplexityValues","getReferralValues","getReferralResponse","showModal","hideModal","utils","config","Claims","dispatch","history","fields","id","form","string","t","formEditedStatus","isSubmitted","isAnyformDirty","brand","state","ui","claimData","claimCurrentPolicyData","catCodes","priorities","lossQualifiers","settlementCurrency","referralResponse","stepsForms","setFormDirtyStatus","handleRegisterNewLoss","push","routes","claimsFNOL","newLoss","handleComplexityRulesManagement","complexityRules","handleClaimsProcessing","claimsProcessing","root","handleCreateClaim","data","lossDetailID","sourceID","handleRegisterNewLossModal","component","props","title","fullWidth","maxWidth","disableAutoFocus","hideCompOnBlur","componentProps","initialFormStatus","steps","map","frm","clickOutSideHandler","findDirtyForm","forms","some","checkDirtyStatus","hint","cancelLabel","confirmLabel","submitHandler","claimId","generic","isInvalidOrEmptyArray","lossId","xbInstanceID","xbPolicyID","policyNumber","divisionID","fetchData","claimReference","claimDetails","app","getAppName"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport { Helmet } from 'react-helmet';\r\n\r\n// app\r\nimport { ClaimsView } from './Claims.view';\r\nimport {\r\n  postClaimDetailsInformationSuccess,\r\n  getLossInformation,\r\n  getClaimsPreviewInformation,\r\n  selectCatCodes,\r\n  selectLossQualifiers,\r\n  selectPriorities,\r\n  selectSettlementCurrency,\r\n  selectReferralResponse,\r\n  selectClaimData,\r\n  setClaimData,\r\n  claimsPolicyData,\r\n  getPolicyInformation,\r\n  getClaimantNames,\r\n  getInterest,\r\n  getBEAdjuster,\r\n  getLossQualifiers,\r\n  getCatCodes,\r\n  getPriorityLevels,\r\n  getSettlementCurrency,\r\n  selectClaimsPolicyData,\r\n  getClaimDetailsSuccess,\r\n  resetClaimData,\r\n  setClaimsStepperControl,\r\n  getComplexityValues,\r\n  getReferralValues,\r\n  getReferralResponse,\r\n  showModal,\r\n  hideModal,\r\n} from 'stores';\r\nimport * as utils from 'utils';\r\nimport config from 'config';\r\n\r\nexport default function Claims() {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const fields = [\r\n    { id: 0, form: utils.string.t('claims.modalStepperLabel.createLoss'), formEditedStatus: false, isSubmitted: false },\r\n    { id: 1, form: utils.string.t('claims.modalStepperLabel.linkPolicies'), formEditedStatus: false, isSubmitted: false },\r\n    { id: 2, form: utils.string.t('claims.modalStepperLabel.createClaim'), formEditedStatus: false, isSubmitted: false },\r\n    { id: 3, form: utils.string.t('claims.modalStepperLabel.manageDocuments'), formEditedStatus: false, isSubmitted: false },\r\n    { id: 4, form: utils.string.t('claims.modalStepperLabel.confirmation'), formEditedStatus: false, isSubmitted: false }\r\n  ]\r\n  let isAnyformDirty = false\r\n  const brand = useSelector((state) => state.ui.brand);\r\n  const claimData = useSelector(selectClaimData);\r\n  const claimCurrentPolicyData = useSelector(selectClaimsPolicyData);\r\n  const catCodes = useSelector(selectCatCodes);\r\n  const priorities = useSelector(selectPriorities);\r\n  const lossQualifiers = useSelector(selectLossQualifiers);\r\n  const settlementCurrency = useSelector(selectSettlementCurrency);\r\n  const referralResponse = useSelector(selectReferralResponse);\r\n\r\n  const [stepsForms, setFormDirtyStatus] = useState(fields)\r\n  const handleRegisterNewLoss = () => {\r\n    history.push(config.routes.claimsFNOL.newLoss);\r\n    dispatch(setClaimData({}));\r\n    dispatch(resetClaimData());\r\n  };\r\n\r\n  const handleComplexityRulesManagement = () => {\r\n    history.push(config.routes.claimsFNOL.complexityRules);\r\n  };\r\n\r\n  const handleClaimsProcessing = () => {\r\n    history.push(config.routes.claimsProcessing.root);\r\n  };\r\n\r\n  const handleCreateClaim = (data) => {\r\n    dispatch(setClaimsStepperControl(1));\r\n    dispatch(getLossInformation(data.lossDetailID, data.sourceID));\r\n    history.push(config.routes.claimsFNOL.newLoss);\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(setClaimData({}));\r\n    dispatch(setClaimsStepperControl(0));\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n\r\n  const handleRegisterNewLossModal = () => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CLAIM_REGISTER_NEW_LOSS',\r\n        props: {\r\n          title: utils.string.t('claims.modalStepperLabel.title'),\r\n          fullWidth: true,\r\n          maxWidth: 'xl',\r\n          disableAutoFocus: true,\r\n          hideCompOnBlur: false,\r\n          componentProps: {\r\n            initialFormStatus: fields,\r\n            steps: stepsForms.map(frm => frm?.form),\r\n            stepsForms: stepsForms,\r\n            clickOutSideHandler: () => clickOutSideHandler(),\r\n            findDirtyForm: (forms) => findDirtyForm(forms),\r\n          },\r\n        },\r\n      })\r\n    )\r\n  }\r\n  const findDirtyForm = (forms) => {\r\n    setFormDirtyStatus(forms?.map((form) => ({ ...form })))\r\n    isAnyformDirty = forms.some(checkDirtyStatus)\r\n  }\r\n  const checkDirtyStatus = (form) => {\r\n    return form?.formEditedStatus === true\r\n  }\r\n  const clickOutSideHandler = () => {\r\n    if (isAnyformDirty) {\r\n      dispatch(\r\n        showModal({\r\n          component: 'CONFIRM',\r\n          props: {\r\n            title: utils.string.t('status.alert'),\r\n            hint: utils.string.t('navigation.title'),\r\n            fullWidth: true,\r\n            maxWidth: 'xs',\r\n            componentProps: {\r\n              cancelLabel: utils.string.t('app.no'),\r\n              confirmLabel: utils.string.t('app.yes'),\r\n              submitHandler: () => {\r\n                dispatch(hideModal());\r\n              },\r\n            },\r\n          },\r\n        })\r\n      )\r\n    }\r\n    else {\r\n      dispatch(hideModal())\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (claimData?.claimId) {\r\n      if (utils.generic.isInvalidOrEmptyArray(catCodes)) {\r\n        dispatch(getCatCodes());\r\n      }\r\n      if (utils.generic.isInvalidOrEmptyArray(priorities)) {\r\n        dispatch(getPriorityLevels());\r\n      }\r\n      if (utils.generic.isInvalidOrEmptyArray(lossQualifiers)) {\r\n        dispatch(getLossQualifiers());\r\n      }\r\n      if (utils.generic.isInvalidOrEmptyArray(settlementCurrency)) {\r\n        dispatch(getSettlementCurrency());\r\n      }\r\n      if (utils.generic.isInvalidOrEmptyArray(referralResponse)) {\r\n        dispatch(getReferralResponse());\r\n      }\r\n      dispatch(getLossInformation(claimData.lossId, claimData.sourceID));\r\n      dispatch(\r\n        claimsPolicyData({\r\n          xbInstanceID: claimData.xbInstanceID,\r\n          xbPolicyID: claimData.xbPolicyID,\r\n          policyNumber: claimData.policyNumber,\r\n          divisionID: claimData.divisionID,\r\n        })\r\n      );\r\n    }\r\n  }, [claimData]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    if (claimData?.claimId && claimCurrentPolicyData?.xbInstanceID) {\r\n      async function fetchData() {\r\n        dispatch(getPolicyInformation());\r\n        dispatch(getInterest());\r\n        dispatch(getBEAdjuster());\r\n        dispatch(getClaimantNames());\r\n\r\n        dispatch(postClaimDetailsInformationSuccess(claimData.claimId));\r\n        const claimDetails = await dispatch(\r\n          getClaimsPreviewInformation(claimData?.claimId, claimData?.claimReference, claimData?.sourceID, claimData?.divisionID)\r\n        );\r\n        dispatch(getClaimDetailsSuccess(claimDetails));\r\n        dispatch(getComplexityValues());\r\n        dispatch(getReferralValues());\r\n      }\r\n      fetchData();\r\n    }\r\n  }, [claimCurrentPolicyData]); // eslint-disable-line react-hooks/exhaustive-deps\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>{`${utils.string.t('claims.title')} - ${utils.app.getAppName(brand)}`}</title>\r\n      </Helmet>\r\n      <ClaimsView\r\n        handleClaimsProcessing={handleClaimsProcessing}\r\n        handleComplexityRulesManagement={handleComplexityRulesManagement}\r\n        handleCreateClaim={handleCreateClaim}\r\n        handleRegisterNewLoss={handleRegisterNewLoss}\r\n      />\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}