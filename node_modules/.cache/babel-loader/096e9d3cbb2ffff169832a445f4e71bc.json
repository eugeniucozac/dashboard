{"ast":null,"code":"import { addLoader, authLogout, removeLoader } from 'stores';\nimport * as utils from 'utils';\nexport var getReportingDcouments = function getReportingDcouments(reportGroupId) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/reporting.actions.getReportingDcouments'\n    };\n    dispatch(getReportDocsRequest(reportGroupId));\n    dispatch(addLoader('getReportingDcouments'));\n\n    if (!reportGroupId) {\n      dispatch(getReportDocsFailure(defaultError));\n      dispatch(removeLoader('getReportingDcouments'));\n      return;\n    }\n\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.document,\n      path: \"api/document/report-group/\".concat(reportGroupId)\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleData(json);\n    }).then(function (data) {\n      dispatch({\n        type: 'DOCUMENT_SET_FOLDER_STRUCTURE_REPORTING',\n        payload: data === null || data === void 0 ? void 0 : data.map(function (d) {\n          return d === null || d === void 0 ? void 0 : d.reportGroupFolder;\n        })\n      });\n      dispatch({\n        type: 'DOCUMENTS_SET_FOR_PLACEMENT',\n        payload: data\n      });\n    }).catch(function (err) {\n      utils.api.handleError(err, defaultError);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(getReportDocsFailure(err));\n      return err;\n    }).finally(function () {\n      dispatch(removeLoader('getReportingDcouments'));\n    });\n  };\n};\nexport var getReportDocsRequest = function getReportDocsRequest(payload) {\n  return {\n    type: 'REPORTING_DOCS_GET_REQUEST',\n    payload: payload\n  };\n};\nexport var getReportDocsFailure = function getReportDocsFailure(error) {\n  return {\n    type: 'REPORTING_DOCS_GET_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/reporting/reporting.actions.documents.get.js"],"names":["addLoader","authLogout","removeLoader","utils","getReportingDcouments","reportGroupId","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","getReportDocsRequest","getReportDocsFailure","api","get","token","accessToken","document","path","then","response","handleResponse","json","handleData","data","type","payload","map","d","reportGroupFolder","catch","err","handleError","handleUnauthorized","finally","error"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,UAApB,EAAgCC,YAAhC,QAAoD,QAApD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,aAAD;AAAA,SAAmB,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC9E;AAD8E,oBAEnBA,QAAQ,EAFW;AAAA,QAE9DC,IAF8D,aAEtEC,IAFsE,CAE9DD,IAF8D;AAAA,QAEpCE,QAFoC,aAEtDC,MAFsD,CAE5CC,IAF4C,CAEpCF,QAFoC;;AAI9E,QAAMG,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE;AADa,KAArB;AAIAR,IAAAA,QAAQ,CAACS,oBAAoB,CAACV,aAAD,CAArB,CAAR;AACAC,IAAAA,QAAQ,CAACN,SAAS,CAAC,uBAAD,CAAV,CAAR;;AAEA,QAAI,CAACK,aAAL,EAAoB;AAClBC,MAAAA,QAAQ,CAACU,oBAAoB,CAACH,YAAD,CAArB,CAAR;AACAP,MAAAA,QAAQ,CAACJ,YAAY,CAAC,uBAAD,CAAb,CAAR;AACA;AACD;;AACD,WAAOC,KAAK,CAACc,GAAN,CACJC,GADI,CACA;AACHC,MAAAA,KAAK,EAAEX,IAAI,CAACY,WADT;AAEHV,MAAAA,QAAQ,EAAEA,QAAQ,CAACW,QAFhB;AAGHC,MAAAA,IAAI,sCAA+BjB,aAA/B;AAHD,KADA,EAMJkB,IANI,CAMC,UAACC,QAAD;AAAA,aAAcrB,KAAK,CAACc,GAAN,CAAUQ,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAND,EAOJD,IAPI,CAOC,UAACG,IAAD;AAAA,aAAUvB,KAAK,CAACc,GAAN,CAAUU,UAAV,CAAqBD,IAArB,CAAV;AAAA,KAPD,EAQJH,IARI,CAQC,UAACK,IAAD,EAAU;AACdtB,MAAAA,QAAQ,CAAC;AAAEuB,QAAAA,IAAI,EAAE,yCAAR;AAAmDC,QAAAA,OAAO,EAAEF,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEG,GAAN,CAAU,UAACC,CAAD;AAAA,iBAAOA,CAAP,aAAOA,CAAP,uBAAOA,CAAC,CAAEC,iBAAV;AAAA,SAAV;AAA5D,OAAD,CAAR;AACA3B,MAAAA,QAAQ,CAAC;AAAEuB,QAAAA,IAAI,EAAE,6BAAR;AAAuCC,QAAAA,OAAO,EAAEF;AAAhD,OAAD,CAAR;AACD,KAXI,EAYJM,KAZI,CAYE,UAACC,GAAD,EAAS;AACdhC,MAAAA,KAAK,CAACc,GAAN,CAAUmB,WAAV,CAAsBD,GAAtB,EAA2BtB,YAA3B;AACAV,MAAAA,KAAK,CAACc,GAAN,CAAUoB,kBAAV,CAA6BF,GAA7B,EAAkC7B,QAAlC,EAA4CL,UAA5C;AACAK,MAAAA,QAAQ,CAACU,oBAAoB,CAACmB,GAAD,CAArB,CAAR;AACA,aAAOA,GAAP;AACD,KAjBI,EAkBJG,OAlBI,CAkBI,YAAM;AACbhC,MAAAA,QAAQ,CAACJ,YAAY,CAAC,uBAAD,CAAb,CAAR;AACD,KApBI,CAAP;AAqBD,GArCoC;AAAA,CAA9B;AAuCP,OAAO,IAAMa,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACe,OAAD,EAAa;AAC/C,SAAO;AACLD,IAAAA,IAAI,EAAE,4BADD;AAELC,IAAAA,OAAO,EAAPA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,IAAMd,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACuB,KAAD,EAAW;AAC7C,SAAO;AACLV,IAAAA,IAAI,EAAE,4BADD;AAELC,IAAAA,OAAO,EAAES;AAFJ,GAAP;AAID,CALM","sourcesContent":["import { addLoader, authLogout, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const getReportingDcouments = (reportGroupId) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } } } = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/reporting.actions.getReportingDcouments',\r\n  };\r\n\r\n  dispatch(getReportDocsRequest(reportGroupId));\r\n  dispatch(addLoader('getReportingDcouments'));\r\n\r\n  if (!reportGroupId) {\r\n    dispatch(getReportDocsFailure(defaultError));\r\n    dispatch(removeLoader('getReportingDcouments'));\r\n    return;\r\n  }\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.document,\r\n      path: `api/document/report-group/${reportGroupId}`,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleData(json))\r\n    .then((data) => {\r\n      dispatch({ type: 'DOCUMENT_SET_FOLDER_STRUCTURE_REPORTING', payload: data?.map((d) => d?.reportGroupFolder) });\r\n      dispatch({ type: 'DOCUMENTS_SET_FOR_PLACEMENT', payload: data });\r\n    })\r\n    .catch((err) => {\r\n      utils.api.handleError(err, defaultError);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(getReportDocsFailure(err));\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('getReportingDcouments'));\r\n    });\r\n};\r\n\r\nexport const getReportDocsRequest = (payload) => {\r\n  return {\r\n    type: 'REPORTING_DOCS_GET_REQUEST',\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const getReportDocsFailure = (error) => {\r\n  return {\r\n    type: 'REPORTING_DOCS_GET_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}