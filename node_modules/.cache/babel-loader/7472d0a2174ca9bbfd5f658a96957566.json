{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\AddLimitsRow\\\\AddLimitsRow.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport compact from 'lodash/compact';\nimport xorWith from 'lodash/xorWith';\nimport { useFieldArray, useWatch } from 'react-hook-form'; // app\n\nimport { AddLimitsRowView } from './AddLimitsRow.view';\nimport { hideModal, showModal } from 'stores';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nAddLimitsRow.propTypes = {\n  field: PropTypes.object.isRequired,\n  overflow: PropTypes.bool,\n  removeLastField: PropTypes.bool,\n  label: PropTypes.string,\n  qualifier: PropTypes.string,\n  formProps: PropTypes.object.isRequired,\n  limitFieldOptions: PropTypes.array\n};\nAddLimitsRow.defaultProps = {\n  overflow: true\n};\nvar validFields = ['text', 'number', 'datepicker', 'select', 'autocomplete', 'autocompletemui', 'radio', 'checkbox', 'toggle', 'hidden'];\nexport default function AddLimitsRow(_ref) {\n  _s();\n\n  var _fieldValues$filter, _field$arrayItemDef;\n\n  var field = _ref.field,\n      limitFieldOptions = _ref.limitFieldOptions,\n      fieldName = _ref.fieldName,\n      overflow = _ref.overflow,\n      removeLastField = _ref.removeLastField,\n      label = _ref.label,\n      qualifier = _ref.qualifier,\n      formProps = _ref.formProps;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      page = _useState2[0],\n      setPage = _useState2[1];\n\n  var _useState3 = useState(10),\n      _useState4 = _slicedToArray(_useState3, 2),\n      rowsPerPage = _useState4[0],\n      setRowsPerPage = _useState4[1];\n\n  var dispatch = useDispatch();\n  var fieldValues = useWatch({\n    control: formProps.control,\n    name: field.name,\n    defaultValue: []\n  });\n  var fieldValuesFieldOptions = fieldValues === null || fieldValues === void 0 ? void 0 : (_fieldValues$filter = fieldValues.filter(function (fieldValue) {\n    return fieldValue.fieldName === fieldName;\n  })) === null || _fieldValues$filter === void 0 ? void 0 : _fieldValues$filter.map(function (fieldValue) {\n    return fieldValue.limitFieldOptions;\n  });\n  var remainingLimitFieldOptions = xorWith(limitFieldOptions, fieldValuesFieldOptions, function (a, b) {\n    return (a === null || a === void 0 ? void 0 : a.value) === (b === null || b === void 0 ? void 0 : b.value);\n  }).filter(function (value) {\n    return value;\n  });\n\n  var _useFieldArray = useFieldArray({\n    control: formProps.control,\n    name: field.name\n  }),\n      fields = _useFieldArray.fields,\n      append = _useFieldArray.append,\n      remove = _useFieldArray.remove;\n\n  var tabFieldsCount = fields.filter(function (field) {\n    return field.fieldName === fieldName;\n  }).length || 0;\n  var cols = [].concat(_toConsumableArray(compact(field === null || field === void 0 ? void 0 : (_field$arrayItemDef = field.arrayItemDef) === null || _field$arrayItemDef === void 0 ? void 0 : _field$arrayItemDef.map(function (def) {\n    if (!validFields.includes(def.type) || def.type === 'hidden') return null;\n    return {\n      id: def.name,\n      label: def.label\n    };\n  }))), [{\n    id: 'delete'\n  }]); // abort\n\n  if (!field || !field.name || !field.arrayItemDef) return null;\n  if (!formProps.control) return null;\n\n  var launchPasteFromExcelModal = function launchPasteFromExcelModal(data) {\n    dispatch(showModal({\n      component: 'PASTE_FROM_EXCEL',\n      props: {\n        title: 'app.pasteFromExcel',\n        fullWidth: true,\n        maxWidth: 'lg',\n        componentProps: _objectSpread({}, data)\n      }\n    }));\n  };\n\n  var closePasteFromExcelModal = function closePasteFromExcelModal() {\n    dispatch(hideModal('PASTE_FROM_EXCEL'));\n  };\n\n  var handleChangePage = function handleChangePage(e, newPage) {\n    setPage(newPage);\n  };\n\n  var handleChangeRowsPerPage = function handleChangeRowsPerPage(event) {\n    setRowsPerPage(event.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AddLimitsRowView, {\n    cols: cols,\n    field: field,\n    fields: fields,\n    fieldName: fieldName,\n    limitFieldOptions: remainingLimitFieldOptions || [],\n    validFields: validFields,\n    formProps: formProps,\n    overflow: overflow,\n    removeLastField: removeLastField,\n    label: label,\n    qualifier: qualifier,\n    handlers: {\n      launchPasteFromExcelModal: launchPasteFromExcelModal,\n      closePasteFromExcelModal: closePasteFromExcelModal,\n      append: append,\n      remove: remove\n    },\n    pagination: {\n      page: page,\n      rowsPerPage: rowsPerPage,\n      count: tabFieldsCount,\n      handleChangeRowsPerPage: handleChangeRowsPerPage,\n      handleChangePage: handleChangePage\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddLimitsRow, \"KRxcSPMJ8xiAi9auaOmuZ8WE1wg=\", false, function () {\n  return [useDispatch, useWatch, useFieldArray];\n});\n\n_c = AddLimitsRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddLimitsRow\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/AddLimitsRow/AddLimitsRow.js"],"names":["React","useState","PropTypes","useDispatch","compact","xorWith","useFieldArray","useWatch","AddLimitsRowView","hideModal","showModal","AddLimitsRow","propTypes","field","object","isRequired","overflow","bool","removeLastField","label","string","qualifier","formProps","limitFieldOptions","array","defaultProps","validFields","fieldName","page","setPage","rowsPerPage","setRowsPerPage","dispatch","fieldValues","control","name","defaultValue","fieldValuesFieldOptions","filter","fieldValue","map","remainingLimitFieldOptions","a","b","value","fields","append","remove","tabFieldsCount","length","cols","arrayItemDef","def","includes","type","id","launchPasteFromExcelModal","data","component","props","title","fullWidth","maxWidth","componentProps","closePasteFromExcelModal","handleChangePage","e","newPage","handleChangeRowsPerPage","event","target","count"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch } from 'react-redux';\r\nimport compact from 'lodash/compact';\r\nimport xorWith from 'lodash/xorWith';\r\nimport { useFieldArray, useWatch } from 'react-hook-form';\r\n\r\n// app\r\nimport { AddLimitsRowView } from './AddLimitsRow.view';\r\nimport { hideModal, showModal } from 'stores';\r\n\r\nAddLimitsRow.propTypes = {\r\n  field: PropTypes.object.isRequired,\r\n  overflow: PropTypes.bool,\r\n  removeLastField: PropTypes.bool,\r\n  label: PropTypes.string,\r\n  qualifier: PropTypes.string,\r\n  formProps: PropTypes.object.isRequired,\r\n  limitFieldOptions: PropTypes.array,\r\n};\r\n\r\nAddLimitsRow.defaultProps = {\r\n  overflow: true,\r\n};\r\n\r\nconst validFields = ['text', 'number', 'datepicker', 'select', 'autocomplete', 'autocompletemui', 'radio', 'checkbox', 'toggle', 'hidden'];\r\n\r\nexport default function AddLimitsRow({ field, limitFieldOptions, fieldName, overflow, removeLastField, label, qualifier, formProps }) {\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const fieldValues = useWatch({\r\n    control: formProps.control,\r\n    name: field.name,\r\n    defaultValue: [],\r\n  });\r\n\r\n  const fieldValuesFieldOptions = fieldValues\r\n    ?.filter((fieldValue) => fieldValue.fieldName === fieldName)\r\n    ?.map((fieldValue) => fieldValue.limitFieldOptions);\r\n\r\n  const remainingLimitFieldOptions = xorWith(limitFieldOptions, fieldValuesFieldOptions, (a, b) => {\r\n    return a?.value === b?.value;\r\n  }).filter((value) => value);\r\n\r\n  const { fields, append, remove } = useFieldArray({\r\n    control: formProps.control,\r\n    name: field.name,\r\n  });\r\n\r\n  const tabFieldsCount = fields.filter((field) => field.fieldName === fieldName).length || 0;\r\n\r\n  const cols = [\r\n    ...compact(\r\n      field?.arrayItemDef?.map((def) => {\r\n        if (!validFields.includes(def.type) || def.type === 'hidden') return null;\r\n\r\n        return { id: def.name, label: def.label };\r\n      })\r\n    ),\r\n    { id: 'delete' },\r\n  ];\r\n\r\n  // abort\r\n  if (!field || !field.name || !field.arrayItemDef) return null;\r\n  if (!formProps.control) return null;\r\n\r\n  const launchPasteFromExcelModal = (data) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'PASTE_FROM_EXCEL',\r\n        props: {\r\n          title: 'app.pasteFromExcel',\r\n          fullWidth: true,\r\n          maxWidth: 'lg',\r\n          componentProps: {\r\n            ...data,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const closePasteFromExcelModal = () => {\r\n    dispatch(hideModal('PASTE_FROM_EXCEL'));\r\n  };\r\n\r\n  const handleChangePage = (e, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <AddLimitsRowView\r\n      cols={cols}\r\n      field={field}\r\n      fields={fields}\r\n      fieldName={fieldName}\r\n      limitFieldOptions={remainingLimitFieldOptions || []}\r\n      validFields={validFields}\r\n      formProps={formProps}\r\n      overflow={overflow}\r\n      removeLastField={removeLastField}\r\n      label={label}\r\n      qualifier={qualifier}\r\n      handlers={{\r\n        launchPasteFromExcelModal,\r\n        closePasteFromExcelModal,\r\n        append,\r\n        remove,\r\n      }}\r\n      pagination={{\r\n        page,\r\n        rowsPerPage,\r\n        count: tabFieldsCount,\r\n        handleChangeRowsPerPage,\r\n        handleChangePage,\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}