{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\components\\\\EmailManagementService\\\\EmailManagementServiceComposeMail.view.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup'; //app\n\nimport styles from './EmailManagementService.styles';\nimport { Avatar, Button, PopoverFilter, FormContainer, FormText, FormFileDrop, FilterChips, FormGrid } from 'components';\nimport * as utils from 'utils'; //mui\n\nimport { makeStyles, Box, Typography, Grid } from '@material-ui/core';\nimport SendOutlinedIcon from '@material-ui/icons/SendOutlined';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nEmailManagementServiceComposeMailView.propTypes = {\n  actions: PropTypes.array.isRequired,\n  attachedMailDocuments: PropTypes.array.isRequired,\n  attachmentProps: PropTypes.object.isRequired,\n  fields: PropTypes.array.isRequired,\n  mailBoxExistingAttachmentsList: PropTypes.array,\n  handlers: PropTypes.shape({\n    removeAttachedDocument: PropTypes.func.isRequired\n  }).isRequired\n};\n\nfunction EmailManagementServiceComposeMailView(_ref) {\n  _s();\n\n  var attachedMailDocuments = _ref.attachedMailDocuments,\n      actions = _ref.actions,\n      fields = _ref.fields,\n      attachmentProps = _ref.attachmentProps,\n      handlers = _ref.handlers;\n  var classes = makeStyles(styles, {\n    name: 'EmailManagementService'\n  })();\n  var defaultValues = utils.form.getInitialValues(fields);\n  var validationSchema = utils.form.getValidationSchema(fields);\n\n  var _useForm = useForm(_objectSpread({\n    defaultValues: defaultValues\n  }, validationSchema && {\n    resolver: yupResolver(validationSchema)\n  })),\n      control = _useForm.control,\n      errors = _useForm.errors,\n      handleSubmit = _useForm.handleSubmit;\n\n  var sendMail = actions && actions.find(function (action) {\n    return action.name === 'sendMail' && action.handler;\n  });\n  var hasAttachedDocuments = utils.generic.isValidArray(attachedMailDocuments, true);\n  return /*#__PURE__*/_jsxDEV(FormContainer, {\n    onSubmit: handleSubmit(sendMail.handler),\n    className: classes.composeMailForm,\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      p: 2,\n      children: /*#__PURE__*/_jsxDEV(FormGrid, {\n        container: true,\n        children: [/*#__PURE__*/_jsxDEV(FormGrid, {\n          item: true,\n          xs: 1,\n          children: sendMail && /*#__PURE__*/_jsxDEV(Button, {\n            icon: SendOutlinedIcon,\n            text: utils.string.t('app.send'),\n            tooltip: {\n              title: utils.string.t('app.send')\n            },\n            type: \"submit\",\n            nestedClasses: {\n              btn: classes.sendButton,\n              label: classes.sendLabel,\n              icon: classes.sendIcon\n            },\n            iconWide: true,\n            color: 'default',\n            variant: 'outlined',\n            size: \"large\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormGrid, {\n          item: true,\n          xs: 11,\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            pb: (errors === null || errors === void 0 ? void 0 : errors.emailTo) ? 3 : 1,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              wrap: \"nowrap\",\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Avatar, {\n                  variant: \"rounded\",\n                  text: utils.string.t('ems.emailTo'),\n                  size: 24,\n                  avatarClasses: classes.mailBodyButton\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 67,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                className: classes.fullWidth,\n                children: /*#__PURE__*/_jsxDEV(FormText, _objectSpread({}, utils.form.getFieldProps(fields, 'emailTo', control, errors)), void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 70,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            pb: (errors === null || errors === void 0 ? void 0 : errors.emailCc) ? 3 : 1,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              wrap: \"nowrap\",\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Avatar, {\n                  variant: \"rounded\",\n                  text: utils.string.t('ems.emailCc'),\n                  size: 24,\n                  avatarClasses: classes.mailBodyButton\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 77,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                className: classes.fullWidth,\n                children: /*#__PURE__*/_jsxDEV(FormText, _objectSpread({}, utils.form.getFieldProps(fields, 'emailCc', control, errors)), void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 80,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            pb: (errors === null || errors === void 0 ? void 0 : errors.subject) ? 1 : 0,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              wrap: \"nowrap\",\n              spacing: 1,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  children: utils.string.t('ems.emailSubject')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 87,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                className: classes.fullWidth,\n                children: /*#__PURE__*/_jsxDEV(FormText, _objectSpread({}, utils.form.getFieldProps(fields, 'subject', control, errors)), void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 90,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      px: 2,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        alignItems: \"center\",\n        justify: \"center\",\n        spacing: 1,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 10,\n          children: !hasAttachedDocuments ? /*#__PURE__*/_jsxDEV(FormFileDrop, _objectSpread(_objectSpread({\n            nestedClasses: {\n              dragArea: classes.mailBodyFileUploadDragArea\n            }\n          }, utils.form.getFieldProps(fields, 'filesUpload', control, errors)), {}, {\n            onChange: function onChange(files, rejectedFiles) {}\n          }), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(Box, {\n            className: classes.attachedDocumentsContainer,\n            children: /*#__PURE__*/_jsxDEV(FilterChips, {\n              items: hasAttachedDocuments ? attachedMailDocuments === null || attachedMailDocuments === void 0 ? void 0 : attachedMailDocuments.map(function (doc) {\n                return {\n                  value: doc === null || doc === void 0 ? void 0 : doc.id,\n                  label: doc === null || doc === void 0 ? void 0 : doc.name\n                };\n              }) : [],\n              handleRemoveItems: function handleRemoveItems(item) {\n                return handlers.removeAttachedDocument(item[0]);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 2,\n          children: /*#__PURE__*/_jsxDEV(PopoverFilter, _objectSpread({}, attachmentProps), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      m: 2,\n      children: /*#__PURE__*/_jsxDEV(FormText, _objectSpread({}, utils.form.getFieldProps(fields, 'message', control, errors)), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EmailManagementServiceComposeMailView, \"WvwSMpdjIzRpw3iCXvvZsWA4REc=\", false, function () {\n  return [useForm];\n});\n\n_c = EmailManagementServiceComposeMailView;\nexport default EmailManagementServiceComposeMailView;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmailManagementServiceComposeMailView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/EmailManagementService/EmailManagementServiceComposeMail.view.js"],"names":["React","PropTypes","useForm","yupResolver","styles","Avatar","Button","PopoverFilter","FormContainer","FormText","FormFileDrop","FilterChips","FormGrid","utils","makeStyles","Box","Typography","Grid","SendOutlinedIcon","EmailManagementServiceComposeMailView","propTypes","actions","array","isRequired","attachedMailDocuments","attachmentProps","object","fields","mailBoxExistingAttachmentsList","handlers","shape","removeAttachedDocument","func","classes","name","defaultValues","form","getInitialValues","validationSchema","getValidationSchema","resolver","control","errors","handleSubmit","sendMail","find","action","handler","hasAttachedDocuments","generic","isValidArray","composeMailForm","string","t","title","btn","sendButton","label","sendLabel","icon","sendIcon","emailTo","mailBodyButton","fullWidth","getFieldProps","emailCc","subject","dragArea","mailBodyFileUploadDragArea","files","rejectedFiles","attachedDocumentsContainer","map","doc","value","id","item"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n\r\n//app\r\nimport styles from './EmailManagementService.styles';\r\nimport { Avatar, Button, PopoverFilter, FormContainer, FormText, FormFileDrop, FilterChips, FormGrid } from 'components';\r\nimport * as utils from 'utils';\r\n\r\n//mui\r\nimport { makeStyles, Box, Typography, Grid } from '@material-ui/core';\r\nimport SendOutlinedIcon from '@material-ui/icons/SendOutlined';\r\n\r\nEmailManagementServiceComposeMailView.propTypes = {\r\n  actions: PropTypes.array.isRequired,\r\n  attachedMailDocuments: PropTypes.array.isRequired,\r\n  attachmentProps: PropTypes.object.isRequired,\r\n  fields: PropTypes.array.isRequired,\r\n  mailBoxExistingAttachmentsList: PropTypes.array,\r\n  handlers: PropTypes.shape({\r\n    removeAttachedDocument: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nfunction EmailManagementServiceComposeMailView({ attachedMailDocuments, actions, fields, attachmentProps, handlers }) {\r\n  const classes = makeStyles(styles, { name: 'EmailManagementService' })();\r\n\r\n  const defaultValues = utils.form.getInitialValues(fields);\r\n  const validationSchema = utils.form.getValidationSchema(fields);\r\n\r\n  const { control, errors, handleSubmit } = useForm({\r\n    defaultValues,\r\n    ...(validationSchema && { resolver: yupResolver(validationSchema) }),\r\n  });\r\n  const sendMail = actions && actions.find((action) => action.name === 'sendMail' && action.handler);\r\n\r\n  const hasAttachedDocuments = utils.generic.isValidArray(attachedMailDocuments, true);\r\n\r\n  return (\r\n    <FormContainer onSubmit={handleSubmit(sendMail.handler)} className={classes.composeMailForm}>\r\n      <Box p={2}>\r\n        <FormGrid container>\r\n          <FormGrid item xs={1}>\r\n            {sendMail && (\r\n              <Button\r\n                icon={SendOutlinedIcon}\r\n                text={utils.string.t('app.send')}\r\n                tooltip={{ title: utils.string.t('app.send') }}\r\n                type=\"submit\"\r\n                nestedClasses={{\r\n                  btn: classes.sendButton,\r\n                  label: classes.sendLabel,\r\n                  icon: classes.sendIcon,\r\n                }}\r\n                iconWide\r\n                color={'default'}\r\n                variant={'outlined'}\r\n                size=\"large\"\r\n              />\r\n            )}\r\n          </FormGrid>\r\n          <FormGrid item xs={11}>\r\n            <Box pb={errors?.emailTo ? 3 : 1}>\r\n              <Grid container wrap=\"nowrap\">\r\n                <Grid item>\r\n                  <Avatar variant=\"rounded\" text={utils.string.t('ems.emailTo')} size={24} avatarClasses={classes.mailBodyButton} />\r\n                </Grid>\r\n                <Grid item className={classes.fullWidth}>\r\n                  <FormText {...utils.form.getFieldProps(fields, 'emailTo', control, errors)} />\r\n                </Grid>\r\n              </Grid>\r\n            </Box>\r\n            <Box pb={errors?.emailCc ? 3 : 1}>\r\n              <Grid container wrap=\"nowrap\">\r\n                <Grid item>\r\n                  <Avatar variant=\"rounded\" text={utils.string.t('ems.emailCc')} size={24} avatarClasses={classes.mailBodyButton} />\r\n                </Grid>\r\n                <Grid item className={classes.fullWidth}>\r\n                  <FormText {...utils.form.getFieldProps(fields, 'emailCc', control, errors)} />\r\n                </Grid>\r\n              </Grid>\r\n            </Box>\r\n            <Box pb={errors?.subject ? 1 : 0}>\r\n              <Grid container wrap=\"nowrap\" spacing={1}>\r\n                <Grid item>\r\n                  <Typography variant=\"body2\">{utils.string.t('ems.emailSubject')}</Typography>\r\n                </Grid>\r\n                <Grid item className={classes.fullWidth}>\r\n                  <FormText {...utils.form.getFieldProps(fields, 'subject', control, errors)} />\r\n                </Grid>\r\n              </Grid>\r\n            </Box>\r\n          </FormGrid>\r\n        </FormGrid>\r\n      </Box>\r\n\r\n      <Box px={2}>\r\n        <Grid container alignItems=\"center\" justify=\"center\" spacing={1}>\r\n          <Grid item xs={10}>\r\n            {!hasAttachedDocuments ? (\r\n              <FormFileDrop\r\n                nestedClasses={{\r\n                  dragArea: classes.mailBodyFileUploadDragArea,\r\n                }}\r\n                {...utils.form.getFieldProps(fields, 'filesUpload', control, errors)}\r\n                onChange={(files, rejectedFiles) => {}}\r\n              />\r\n            ) : (\r\n              <Box className={classes.attachedDocumentsContainer}>\r\n                <FilterChips\r\n                  items={hasAttachedDocuments ? attachedMailDocuments?.map((doc) => ({ value: doc?.id, label: doc?.name })) : []}\r\n                  handleRemoveItems={(item) => handlers.removeAttachedDocument(item[0])}\r\n                />\r\n              </Box>\r\n            )}\r\n          </Grid>\r\n          <Grid item xs={2}>\r\n            <PopoverFilter {...attachmentProps} />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n\r\n      <Box m={2}>\r\n        <FormText {...utils.form.getFieldProps(fields, 'message', control, errors)} />\r\n      </Box>\r\n    </FormContainer>\r\n  );\r\n}\r\n\r\nexport default EmailManagementServiceComposeMailView;\r\n"]},"metadata":{},"sourceType":"module"}