{"ast":null,"code":"var _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\TasksProcessingTable\\\\TasksProcessingTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport get from 'lodash/get';\nimport xorBy from 'lodash/xorBy'; // app\n\nimport { TasksProcessingTableView } from './TasksProcessingTable.view';\nimport { showModal, hideModal, selectClaimsTasksProcessingPagination, selectPremiumProcessingPagination, expandSidebar, collapseSidebar, resetAdhocTaskStatus, selectClaimsTasksProcessingSelected, selectClaimsProcessingTasksSelected, getClaimsTasksProcessing, postSanctionsCheck, updateMultiSelectedRows, selectMultiSelectedCase } from 'stores';\nimport { useSort, usePagination } from 'hooks';\nimport * as utils from 'utils';\nimport { RFI_ON_TASKS, API_RESPONSE_OK, TASK_TEAM_TYPE, CLAIM_PROCESSING_REQ_TYPES } from 'consts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nTasksProcessingTable.propTypes = {\n  isTaskTeam: PropTypes.bool.isRequired,\n  tasks: PropTypes.object.isRequired,\n  cols: PropTypes.array.isRequired,\n  columnProps: PropTypes.func.isRequired,\n  handleUpdateTaskPriority: PropTypes.func.isRequired,\n  sort: PropTypes.object.isRequired,\n  handleSort: PropTypes.func.isRequired,\n  handleChangePage: PropTypes.func.isRequired,\n  handleChangeRowsPerPage: PropTypes.func.isRequired,\n  refreshTasksGrid: PropTypes.func.isRequired,\n  premiumProcessingSaveAssignee: PropTypes.func,\n  isPremiumProcessing: PropTypes.bool\n};\nexport default function TasksProcessingTable(_ref) {\n  _s();\n\n  var isTaskTeam = _ref.isTaskTeam,\n      tasks = _ref.tasks,\n      colsArr = _ref.cols,\n      columnProps = _ref.columnProps,\n      sortObj = _ref.sort,\n      handleSort = _ref.handleSort,\n      handleChangePage = _ref.handleChangePage,\n      handleChangeRowsPerPage = _ref.handleChangeRowsPerPage,\n      handleUpdateTaskPriority = _ref.handleUpdateTaskPriority,\n      refreshTasksGrid = _ref.refreshTasksGrid,\n      premiumProcessingSaveAssignee = _ref.premiumProcessingSaveAssignee,\n      isPremiumProcessing = _ref.isPremiumProcessing;\n  var dispatch = useDispatch();\n  var uiSidebarExpanded = useSelector(function (state) {\n    return get(state, 'ui.sidebar.expanded');\n  });\n  var tasksProcessingSelected = useSelector(selectClaimsTasksProcessingSelected);\n  var tasksProcessingPagination = useSelector(selectClaimsTasksProcessingPagination);\n  var premiumProcessingPagination = useSelector(selectPremiumProcessingPagination);\n\n  var _useSort = useSort(colsArr, sortObj, handleSort),\n      cols = _useSort.cols,\n      sort = _useSort.sort;\n\n  var pagination = usePagination((tasks === null || tasks === void 0 ? void 0 : tasks.items) || [], isPremiumProcessing ? premiumProcessingPagination : tasksProcessingPagination, handleChangePage, handleChangeRowsPerPage);\n  var taskItems = (tasks === null || tasks === void 0 ? void 0 : tasks.items) || [];\n  var hasTasks = utils.generic.isValidArray(taskItems, true);\n  var premiumProcessSelectedTaskList = useSelector(selectMultiSelectedCase);\n  var tasksProcessingSelectedLength = (tasksProcessingSelected === null || tasksProcessingSelected === void 0 ? void 0 : tasksProcessingSelected.length) || 0;\n  useEffect(function () {\n    if (tasksProcessingSelectedLength !== 1) {\n      dispatch(collapseSidebar());\n    }\n  }, [tasksProcessingSelectedLength]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var selectTask = function selectTask(taskObj) {\n    return function () {\n      if (isPremiumProcessing) {\n        var selectedPpTasksArray = xorBy(premiumProcessSelectedTaskList, [taskObj], (taskObj === null || taskObj === void 0 ? void 0 : taskObj.taskId) ? 'taskId' : 'processId');\n\n        if ((taskObj === null || taskObj === void 0 ? void 0 : taskObj.taskId) || (taskObj === null || taskObj === void 0 ? void 0 : taskObj.processId)) {\n          dispatch(updateMultiSelectedRows(selectedPpTasksArray));\n\n          if (!uiSidebarExpanded && (selectedPpTasksArray === null || selectedPpTasksArray === void 0 ? void 0 : selectedPpTasksArray.length) === 1) {\n            dispatch(expandSidebar());\n          }\n\n          if ((selectedPpTasksArray === null || selectedPpTasksArray === void 0 ? void 0 : selectedPpTasksArray.length) > 1) {\n            dispatch(collapseSidebar());\n          }\n        }\n      } else {\n        var selectedTasksArray = xorBy(tasksProcessingSelected, [taskObj], 'taskId');\n\n        if (taskObj === null || taskObj === void 0 ? void 0 : taskObj.taskId) {\n          dispatch(selectClaimsProcessingTasksSelected(taskObj, true));\n\n          if (!uiSidebarExpanded && (selectedTasksArray === null || selectedTasksArray === void 0 ? void 0 : selectedTasksArray.length) === 1) {\n            dispatch(expandSidebar());\n          }\n        }\n      }\n    };\n  };\n\n  var handleEditAdhoc = function handleEditAdhoc(claim) {\n    dispatch(resetAdhocTaskStatus());\n    dispatch(showModal({\n      component: 'CREATE_AD_HOC_TASK',\n      props: {\n        title: utils.string.t('claims.processing.taskFunction.editTask'),\n        hideCompOnBlur: false,\n        fullWidth: true,\n        maxWidth: 'md',\n        disableAutoFocus: true,\n        componentProps: {\n          claim: claim,\n          cancelHandler: function cancelHandler() {\n            dispatch(hideModal());\n          }\n        }\n      }\n    }));\n  };\n\n  var handleCreateRFITaskLevel = function handleCreateRFITaskLevel(claim) {\n    dispatch(showModal({\n      component: 'CREATE_RFI',\n      props: {\n        title: utils.string.t('claims.processing.taskFunction.createRFI'),\n        hideCompOnBlur: false,\n        fullWidth: true,\n        maxWidth: 'md',\n        disableAutoFocus: true,\n        componentProps: {\n          claim: claim,\n          type: RFI_ON_TASKS,\n          cancelHandler: function cancelHandler() {\n            dispatch(hideModal());\n          }\n        }\n      }\n    }));\n  };\n\n  var createSanctionsCheck = function createSanctionsCheck(selectedTask) {\n    if (selectedTask) {\n      dispatch(showModal({\n        component: 'CONFIRM',\n        props: {\n          title: utils.string.t('status.alert'),\n          hint: utils.string.t('claims.processing.sanctionsChecksNotification.conformationAlert'),\n          fullWidth: true,\n          maxWidth: 'xs',\n          componentProps: {\n            cancelLabel: utils.string.t('app.no'),\n            confirmLabel: utils.string.t('app.yes'),\n            submitHandler: function submitHandler() {\n              dispatch(postSanctionsCheck({\n                taskId: selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.taskId,\n                rootProcessId: selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.rootProcessId\n              })).then(function (response) {\n                dispatch(hideModal());\n\n                if (response.status === API_RESPONSE_OK) {\n                  dispatch(getClaimsTasksProcessing({\n                    requestType: CLAIM_PROCESSING_REQ_TYPES.search,\n                    taskType: TASK_TEAM_TYPE.myTask\n                  }));\n                }\n              });\n            },\n            cancelHandler: function cancelHandler() {}\n          }\n        }\n      }));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(TasksProcessingTableView, {\n    isTaskTeam: isTaskTeam,\n    hasTasks: hasTasks,\n    taskItems: taskItems,\n    tasksSelected: tasksProcessingSelected,\n    cols: cols,\n    columnProps: columnProps,\n    handleUpdateTaskPriority: handleUpdateTaskPriority,\n    sort: sort,\n    pagination: pagination,\n    handleSort: handleSort,\n    isPremiumProcessing: isPremiumProcessing,\n    premiumProcessSelectedTaskList: premiumProcessSelectedTaskList,\n    handlers: {\n      selectTask: selectTask,\n      handleEditAdhoc: handleEditAdhoc,\n      handleCreateRFITaskLevel: handleCreateRFITaskLevel,\n      createSanctionsCheck: createSanctionsCheck\n    },\n    refreshTasksGrid: refreshTasksGrid,\n    premiumProcessingSaveAssignee: premiumProcessingSaveAssignee,\n    isTaskGridLoading: tasks === null || tasks === void 0 ? void 0 : tasks.isTaskGridLoading,\n    isTaskGridDataFetchingError: tasks === null || tasks === void 0 ? void 0 : tasks.isTaskGridDataFetchingError\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TasksProcessingTable, \"hBKvm5LVyynFLIHHtHrO+42dzdY=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSort, usePagination, useSelector];\n});\n\n_c = TasksProcessingTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"TasksProcessingTable\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/TasksProcessingTable/TasksProcessingTable.js"],"names":["React","useEffect","PropTypes","useSelector","useDispatch","get","xorBy","TasksProcessingTableView","showModal","hideModal","selectClaimsTasksProcessingPagination","selectPremiumProcessingPagination","expandSidebar","collapseSidebar","resetAdhocTaskStatus","selectClaimsTasksProcessingSelected","selectClaimsProcessingTasksSelected","getClaimsTasksProcessing","postSanctionsCheck","updateMultiSelectedRows","selectMultiSelectedCase","useSort","usePagination","utils","RFI_ON_TASKS","API_RESPONSE_OK","TASK_TEAM_TYPE","CLAIM_PROCESSING_REQ_TYPES","TasksProcessingTable","propTypes","isTaskTeam","bool","isRequired","tasks","object","cols","array","columnProps","func","handleUpdateTaskPriority","sort","handleSort","handleChangePage","handleChangeRowsPerPage","refreshTasksGrid","premiumProcessingSaveAssignee","isPremiumProcessing","colsArr","sortObj","dispatch","uiSidebarExpanded","state","tasksProcessingSelected","tasksProcessingPagination","premiumProcessingPagination","pagination","items","taskItems","hasTasks","generic","isValidArray","premiumProcessSelectedTaskList","tasksProcessingSelectedLength","length","selectTask","taskObj","selectedPpTasksArray","taskId","processId","selectedTasksArray","handleEditAdhoc","claim","component","props","title","string","t","hideCompOnBlur","fullWidth","maxWidth","disableAutoFocus","componentProps","cancelHandler","handleCreateRFITaskLevel","type","createSanctionsCheck","selectedTask","hint","cancelLabel","confirmLabel","submitHandler","rootProcessId","then","response","status","requestType","search","taskType","myTask","isTaskGridLoading","isTaskGridDataFetchingError"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport get from 'lodash/get';\r\nimport xorBy from 'lodash/xorBy';\r\n\r\n// app\r\nimport { TasksProcessingTableView } from './TasksProcessingTable.view';\r\nimport {\r\n  showModal,\r\n  hideModal,\r\n  selectClaimsTasksProcessingPagination,\r\n  selectPremiumProcessingPagination,\r\n  expandSidebar,\r\n  collapseSidebar,\r\n  resetAdhocTaskStatus,\r\n  selectClaimsTasksProcessingSelected,\r\n  selectClaimsProcessingTasksSelected,\r\n  getClaimsTasksProcessing,\r\n  postSanctionsCheck,\r\n  updateMultiSelectedRows,\r\n  selectMultiSelectedCase,\r\n} from 'stores';\r\nimport { useSort, usePagination } from 'hooks';\r\nimport * as utils from 'utils';\r\nimport { RFI_ON_TASKS, API_RESPONSE_OK, TASK_TEAM_TYPE, CLAIM_PROCESSING_REQ_TYPES } from 'consts';\r\n\r\nTasksProcessingTable.propTypes = {\r\n  isTaskTeam: PropTypes.bool.isRequired,\r\n  tasks: PropTypes.object.isRequired,\r\n  cols: PropTypes.array.isRequired,\r\n  columnProps: PropTypes.func.isRequired,\r\n  handleUpdateTaskPriority: PropTypes.func.isRequired,\r\n  sort: PropTypes.object.isRequired,\r\n  handleSort: PropTypes.func.isRequired,\r\n  handleChangePage: PropTypes.func.isRequired,\r\n  handleChangeRowsPerPage: PropTypes.func.isRequired,\r\n  refreshTasksGrid: PropTypes.func.isRequired,\r\n  premiumProcessingSaveAssignee: PropTypes.func,\r\n  isPremiumProcessing: PropTypes.bool,\r\n};\r\n\r\nexport default function TasksProcessingTable({\r\n  isTaskTeam,\r\n  tasks,\r\n  cols: colsArr,\r\n  columnProps,\r\n  sort: sortObj,\r\n  handleSort,\r\n  handleChangePage,\r\n  handleChangeRowsPerPage,\r\n  handleUpdateTaskPriority,\r\n  refreshTasksGrid,\r\n  premiumProcessingSaveAssignee,\r\n  isPremiumProcessing,\r\n}) {\r\n  const dispatch = useDispatch();\r\n  const uiSidebarExpanded = useSelector((state) => get(state, 'ui.sidebar.expanded'));\r\n  const tasksProcessingSelected = useSelector(selectClaimsTasksProcessingSelected);\r\n  const tasksProcessingPagination = useSelector(selectClaimsTasksProcessingPagination);\r\n  const premiumProcessingPagination = useSelector(selectPremiumProcessingPagination);\r\n\r\n  const { cols, sort } = useSort(colsArr, sortObj, handleSort);\r\n  const pagination = usePagination(\r\n    tasks?.items || [],\r\n    isPremiumProcessing ? premiumProcessingPagination : tasksProcessingPagination,\r\n    handleChangePage,\r\n    handleChangeRowsPerPage\r\n  );\r\n  const taskItems = tasks?.items || [];\r\n  const hasTasks = utils.generic.isValidArray(taskItems, true);\r\n  const premiumProcessSelectedTaskList = useSelector(selectMultiSelectedCase);\r\n\r\n  const tasksProcessingSelectedLength = tasksProcessingSelected?.length || 0;\r\n\r\n  useEffect(() => {\r\n    if (tasksProcessingSelectedLength !== 1) {\r\n      dispatch(collapseSidebar());\r\n    }\r\n  }, [tasksProcessingSelectedLength]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const selectTask = (taskObj) => () => {\r\n    if (isPremiumProcessing) {\r\n      const selectedPpTasksArray = xorBy(premiumProcessSelectedTaskList, [taskObj], taskObj?.taskId ? 'taskId' : 'processId');\r\n      if (taskObj?.taskId || taskObj?.processId) {\r\n        dispatch(updateMultiSelectedRows(selectedPpTasksArray));\r\n        if (!uiSidebarExpanded && selectedPpTasksArray?.length === 1) {\r\n          dispatch(expandSidebar());\r\n        }\r\n        if (selectedPpTasksArray?.length > 1) {\r\n          dispatch(collapseSidebar());\r\n        }\r\n      }\r\n    } else {\r\n      const selectedTasksArray = xorBy(tasksProcessingSelected, [taskObj], 'taskId');\r\n\r\n      if (taskObj?.taskId) {\r\n        dispatch(selectClaimsProcessingTasksSelected(taskObj, true));\r\n        if (!uiSidebarExpanded && selectedTasksArray?.length === 1) {\r\n          dispatch(expandSidebar());\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleEditAdhoc = (claim) => {\r\n    dispatch(resetAdhocTaskStatus());\r\n    dispatch(\r\n      showModal({\r\n        component: 'CREATE_AD_HOC_TASK',\r\n        props: {\r\n          title: utils.string.t('claims.processing.taskFunction.editTask'),\r\n          hideCompOnBlur: false,\r\n          fullWidth: true,\r\n          maxWidth: 'md',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            claim,\r\n            cancelHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleCreateRFITaskLevel = (claim) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CREATE_RFI',\r\n        props: {\r\n          title: utils.string.t('claims.processing.taskFunction.createRFI'),\r\n          hideCompOnBlur: false,\r\n          fullWidth: true,\r\n          maxWidth: 'md',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            claim,\r\n            type: RFI_ON_TASKS,\r\n            cancelHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const createSanctionsCheck = (selectedTask) => {\r\n    if (selectedTask) {\r\n      dispatch(\r\n        showModal({\r\n          component: 'CONFIRM',\r\n          props: {\r\n            title: utils.string.t('status.alert'),\r\n            hint: utils.string.t('claims.processing.sanctionsChecksNotification.conformationAlert'),\r\n            fullWidth: true,\r\n            maxWidth: 'xs',\r\n            componentProps: {\r\n              cancelLabel: utils.string.t('app.no'),\r\n              confirmLabel: utils.string.t('app.yes'),\r\n              submitHandler: () => {\r\n                dispatch(postSanctionsCheck({ taskId: selectedTask?.taskId, rootProcessId: selectedTask?.rootProcessId })).then(\r\n                  (response) => {\r\n                    dispatch(hideModal());\r\n                    if (response.status === API_RESPONSE_OK) {\r\n                      dispatch(\r\n                        getClaimsTasksProcessing({ requestType: CLAIM_PROCESSING_REQ_TYPES.search, taskType: TASK_TEAM_TYPE.myTask })\r\n                      );\r\n                    }\r\n                  }\r\n                );\r\n              },\r\n              cancelHandler: () => {},\r\n            },\r\n          },\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <TasksProcessingTableView\r\n      isTaskTeam={isTaskTeam}\r\n      hasTasks={hasTasks}\r\n      taskItems={taskItems}\r\n      tasksSelected={tasksProcessingSelected}\r\n      cols={cols}\r\n      columnProps={columnProps}\r\n      handleUpdateTaskPriority={handleUpdateTaskPriority}\r\n      sort={sort}\r\n      pagination={pagination}\r\n      handleSort={handleSort}\r\n      isPremiumProcessing={isPremiumProcessing}\r\n      premiumProcessSelectedTaskList={premiumProcessSelectedTaskList}\r\n      handlers={{\r\n        selectTask,\r\n        handleEditAdhoc,\r\n        handleCreateRFITaskLevel,\r\n        createSanctionsCheck,\r\n      }}\r\n      refreshTasksGrid={refreshTasksGrid}\r\n      premiumProcessingSaveAssignee={premiumProcessingSaveAssignee}\r\n      isTaskGridLoading={tasks?.isTaskGridLoading}\r\n      isTaskGridDataFetchingError={tasks?.isTaskGridDataFetchingError}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}