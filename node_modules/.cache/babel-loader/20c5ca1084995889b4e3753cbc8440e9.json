{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar initialState = {\n  uploading: false,\n  geocoding: {\n    status: null,\n    result: null,\n    attempts: 0,\n    completed: 0,\n    total: 0\n  },\n  givenLocations: [],\n  givenLocationsHeaders: [],\n  autoMatch: false,\n  headerMap: [{\n    key: 'location',\n    value: ''\n  }, {\n    key: 'streetAddress',\n    value: ''\n  }, {\n    key: 'city',\n    value: ''\n  }, {\n    key: 'zip',\n    value: ''\n  }, {\n    key: 'county',\n    value: ''\n  }, {\n    key: 'state',\n    value: ''\n  }, {\n    key: 'country',\n    value: ''\n  }, {\n    key: 'occupancy',\n    value: ''\n  }, {\n    key: 'hasSprinklers',\n    value: ''\n  }, {\n    key: 'hasAlarm',\n    value: ''\n  }, {\n    key: 'hasBackupPower',\n    value: ''\n  }, {\n    key: 'contents',\n    value: ''\n  }, {\n    key: 'businessInterruption',\n    value: ''\n  }, {\n    key: 'propertyValues',\n    value: ''\n  }, {\n    key: 'totalInsurableValues',\n    value: ''\n  }, {\n    key: 'latitude',\n    value: ''\n  }, {\n    key: 'longitude',\n    value: ''\n  }],\n  dollarValues: ['contents', 'businessInterruption', 'propertyValues', 'totalInsurableValues'],\n  locationsUploaded: [],\n  locationGroups: []\n};\n\nvar locationReducers = function locationReducers() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'LOCATION_RESET':\n      return _objectSpread({}, initialState);\n\n    case 'LOCATION_SET_UPLOAD_WIZARD_GIVEN_LOCATIONS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        givenLocations: action.payload.locations || [],\n        givenLocationsHeaders: action.payload.headers || []\n      });\n\n    case 'LOCATION_SET_UPLOAD_WIZARD_HEADER_MAP':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        headerMap: action.payload,\n        autoMatch: true\n      });\n\n    case 'LOCATION_SET_UPLOAD_WIZARD_HEADER_MAP_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        headerMap: initialState.headerMap,\n        autoMatch: initialState.autoMatch\n      });\n\n    case 'LOCATION_SET_UPLOAD_WIZARD_LOCATIONS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        locationsUploaded: action.payload\n      });\n\n    case 'LOCATION_SET_UPLOAD_WIZARD_INVALID_LOCATIONS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        invalidLocationsUploaded: action.payload\n      });\n\n    case 'LOCATION_SET_GROUPS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        locationGroups: action.payload.groups\n      });\n\n    case 'LOCATION_GET_PLACEMENT_GROUPS_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        geocoding: _objectSpread(_objectSpread({}, state.geocoding), {}, {\n          status: initialState.geocoding.status,\n          result: initialState.geocoding.result,\n          attempts: initialState.geocoding.attempts,\n          completed: initialState.geocoding.completed,\n          total: initialState.geocoding.total\n        })\n      });\n\n    case 'LOCATION_POST_NEW_GROUP':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        uploading: true\n      });\n\n    case 'LOCATION_POST_NEW_GROUP_SUCCESS':\n    case 'LOCATION_POST_NEW_GROUP_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        uploading: false\n      });\n\n    case 'LOCATION_GEOCODING_UPDATE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        geocoding: _objectSpread(_objectSpread({}, state.geocoding), {}, {\n          status: action.payload.status,\n          result: action.payload.result,\n          attempts: action.payload.attempts,\n          completed: action.payload.completed,\n          total: action.payload.total\n        })\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default locationReducers;","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/location/location.reducers.js"],"names":["initialState","uploading","geocoding","status","result","attempts","completed","total","givenLocations","givenLocationsHeaders","autoMatch","headerMap","key","value","dollarValues","locationsUploaded","locationGroups","locationReducers","state","action","type","payload","locations","headers","invalidLocationsUploaded","groups"],"mappings":"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","sourcesContent":["const initialState = {\r\n  uploading: false,\r\n  geocoding: {\r\n    status: null,\r\n    result: null,\r\n    attempts: 0,\r\n    completed: 0,\r\n    total: 0,\r\n  },\r\n  givenLocations: [],\r\n  givenLocationsHeaders: [],\r\n  autoMatch: false,\r\n  headerMap: [\r\n    { key: 'location', value: '' },\r\n    { key: 'streetAddress', value: '' },\r\n    { key: 'city', value: '' },\r\n    { key: 'zip', value: '' },\r\n    { key: 'county', value: '' },\r\n    { key: 'state', value: '' },\r\n    { key: 'country', value: '' },\r\n    { key: 'occupancy', value: '' },\r\n    { key: 'hasSprinklers', value: '' },\r\n    { key: 'hasAlarm', value: '' },\r\n    { key: 'hasBackupPower', value: '' },\r\n    { key: 'contents', value: '' },\r\n    { key: 'businessInterruption', value: '' },\r\n    { key: 'propertyValues', value: '' },\r\n    { key: 'totalInsurableValues', value: '' },\r\n    { key: 'latitude', value: '' },\r\n    { key: 'longitude', value: '' },\r\n  ],\r\n  dollarValues: ['contents', 'businessInterruption', 'propertyValues', 'totalInsurableValues'],\r\n  locationsUploaded: [],\r\n  locationGroups: [],\r\n};\r\n\r\nconst locationReducers = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'LOCATION_RESET':\r\n      return {\r\n        ...initialState,\r\n      };\r\n\r\n    case 'LOCATION_SET_UPLOAD_WIZARD_GIVEN_LOCATIONS':\r\n      return {\r\n        ...state,\r\n        givenLocations: action.payload.locations || [],\r\n        givenLocationsHeaders: action.payload.headers || [],\r\n      };\r\n\r\n    case 'LOCATION_SET_UPLOAD_WIZARD_HEADER_MAP':\r\n      return {\r\n        ...state,\r\n        headerMap: action.payload,\r\n        autoMatch: true,\r\n      };\r\n\r\n    case 'LOCATION_SET_UPLOAD_WIZARD_HEADER_MAP_RESET':\r\n      return {\r\n        ...state,\r\n        headerMap: initialState.headerMap,\r\n        autoMatch: initialState.autoMatch,\r\n      };\r\n\r\n    case 'LOCATION_SET_UPLOAD_WIZARD_LOCATIONS':\r\n      return {\r\n        ...state,\r\n        locationsUploaded: action.payload,\r\n      };\r\n\r\n    case 'LOCATION_SET_UPLOAD_WIZARD_INVALID_LOCATIONS':\r\n      return {\r\n        ...state,\r\n        invalidLocationsUploaded: action.payload,\r\n      };\r\n\r\n    case 'LOCATION_SET_GROUPS':\r\n      return {\r\n        ...state,\r\n        locationGroups: action.payload.groups,\r\n      };\r\n\r\n    case 'LOCATION_GET_PLACEMENT_GROUPS_FAILURE':\r\n      return {\r\n        ...state,\r\n        geocoding: {\r\n          ...state.geocoding,\r\n          status: initialState.geocoding.status,\r\n          result: initialState.geocoding.result,\r\n          attempts: initialState.geocoding.attempts,\r\n          completed: initialState.geocoding.completed,\r\n          total: initialState.geocoding.total,\r\n        },\r\n      };\r\n\r\n    case 'LOCATION_POST_NEW_GROUP':\r\n      return {\r\n        ...state,\r\n        uploading: true,\r\n      };\r\n\r\n    case 'LOCATION_POST_NEW_GROUP_SUCCESS':\r\n    case 'LOCATION_POST_NEW_GROUP_FAILURE':\r\n      return {\r\n        ...state,\r\n        uploading: false,\r\n      };\r\n\r\n    case 'LOCATION_GEOCODING_UPDATE':\r\n      return {\r\n        ...state,\r\n        geocoding: {\r\n          ...state.geocoding,\r\n          status: action.payload.status,\r\n          result: action.payload.result,\r\n          attempts: action.payload.attempts,\r\n          completed: action.payload.completed,\r\n          total: action.payload.total,\r\n        },\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default locationReducers;\r\n"]},"metadata":{},"sourceType":"module"}