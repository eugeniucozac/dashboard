{"ast":null,"code":"import _defineProperty from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\pages\\\\TaskDashboard\\\\TaskDashboard.view.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport classnames from 'classnames'; // app\n\nimport { Breadcrumb, Layout, PopoverMenu, SectionHeader, Tabs, PreventNavigation } from 'components';\nimport { TaskDetails, TaskNotes, ClaimsUploadViewSearchDocs, ClaimsProcessingDmsWidget } from 'modules';\nimport * as utils from 'utils';\nimport * as constants from 'consts';\nimport { DrawerComponent } from 'components';\nimport styles from './TaskDashboard.styles';\nimport { selectDmsWidgetExpanded } from 'stores'; // mui\n\nimport { Divider } from '@material-ui/core';\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport { makeStyles } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nTaskDashboardView.propTypes = {\n  task: PropTypes.object.isRequired,\n  tabs: PropTypes.array.isRequired,\n  selectedTab: PropTypes.string.isRequired,\n  breadcrumbs: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    label: PropTypes.string.isRequired,\n    link: PropTypes.string\n  })).isRequired,\n  handleSelectTab: PropTypes.func.isRequired,\n  popoverActions: PropTypes.array.isRequired,\n  handleDirtyCheck: PropTypes.func.isRequired,\n  isDirtyRef: PropTypes.bool.isRequired,\n  setIsDirty: PropTypes.func.isRequired,\n  allowedNavigationUrls: PropTypes.array.isRequired\n};\nexport function TaskDashboardView(_ref) {\n  _s();\n\n  var task = _ref.task,\n      tabs = _ref.tabs,\n      selectedTab = _ref.selectedTab,\n      breadcrumbs = _ref.breadcrumbs,\n      handleSelectTab = _ref.handleSelectTab,\n      popoverActions = _ref.popoverActions,\n      handleDirtyCheck = _ref.handleDirtyCheck,\n      allowedNavigationUrls = _ref.allowedNavigationUrls,\n      isDirtyRef = _ref.isDirtyRef,\n      setIsDirty = _ref.setIsDirty;\n  var classes = makeStyles(styles, {\n    name: 'TaskDashboard'\n  })();\n  var isDmsWidgetExpanded = useSelector(selectDmsWidgetExpanded);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Breadcrumb, {\n      links: breadcrumbs,\n      testid: \"task-dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classnames(classes.content, _defineProperty({}, classes.contentShift, isDmsWidgetExpanded)),\n      children: /*#__PURE__*/_jsxDEV(Layout, {\n        testid: \"task-dashboard\",\n        children: /*#__PURE__*/_jsxDEV(Layout, {\n          main: true,\n          children: [/*#__PURE__*/_jsxDEV(SectionHeader, {\n            title: utils.string.t('claims.processing.task.title', {\n              id: task.taskRef\n            }),\n            icon: DescriptionIcon,\n            testid: \"task-ref-header\",\n            children: /*#__PURE__*/_jsxDEV(PopoverMenu, {\n              variant: \"outlined\",\n              id: \"task-functions\",\n              size: \"small\",\n              color: \"primary\",\n              text: utils.string.t('claims.processing.taskFunctions'),\n              isButton: true,\n              anchorOrigin: {\n                vertical: 'bottom',\n                horizontal: 'right'\n              },\n              transformOrigin: {\n                vertical: 'top',\n                horizontal: 'right'\n              },\n              items: popoverActions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n            tabs: tabs,\n            value: selectedTab,\n            onChange: function onChange(tabName) {\n              handleSelectTab(tabName);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this), selectedTab === 'taskDetails' && /*#__PURE__*/_jsxDEV(TaskDetails, {\n            taskObj: task,\n            isDirtyRef: isDirtyRef,\n            setIsDirty: setIsDirty,\n            handleDirtyCheck: handleDirtyCheck\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this), selectedTab === 'viewDocuments' && /*#__PURE__*/_jsxDEV(ClaimsUploadViewSearchDocs, {\n            refData: task,\n            refIdName: constants.DMS_CONTEXT_TASK_ID,\n            dmsContext: constants.DMS_CONTEXT_TASK,\n            documentTypeKey: constants.DMS_DOCUMENT_TYPE_SECTION_KEYS.claim,\n            viewOptions: {\n              linkToLossAndClaim: true\n            },\n            fnolViewOptions: {\n              isClaimsFNOL: true\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this), selectedTab === 'notes' && /*#__PURE__*/_jsxDEV(TaskNotes, {\n            taskObj: task\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 41\n          }, this), isDirtyRef && selectedTab === 'taskDetails' && /*#__PURE__*/_jsxDEV(PreventNavigation, {\n            dirty: true,\n            allowedUrls: allowedNavigationUrls,\n            title: 'status.alert',\n            subtitle: '',\n            hint: 'claims.notes.notifications.alertPopup',\n            maxWidth: 'xs',\n            confirmLabel: 'form.options.yesNoNa.yes',\n            cancelLabel: 'form.options.yesNoNa.no'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DrawerComponent, {\n      isDrawerOpen: true,\n      isFromDashboard: true,\n      children: /*#__PURE__*/_jsxDEV(ClaimsProcessingDmsWidget, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(TaskDashboardView, \"rRTNUhnAWzFnFjxDvtM3xc6c+g8=\", false, function () {\n  return [useSelector];\n});\n\n_c = TaskDashboardView;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskDashboardView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/pages/TaskDashboard/TaskDashboard.view.js"],"names":["React","PropTypes","useSelector","classnames","Breadcrumb","Layout","PopoverMenu","SectionHeader","Tabs","PreventNavigation","TaskDetails","TaskNotes","ClaimsUploadViewSearchDocs","ClaimsProcessingDmsWidget","utils","constants","DrawerComponent","styles","selectDmsWidgetExpanded","Divider","DescriptionIcon","makeStyles","TaskDashboardView","propTypes","task","object","isRequired","tabs","array","selectedTab","string","breadcrumbs","arrayOf","shape","name","label","link","handleSelectTab","func","popoverActions","handleDirtyCheck","isDirtyRef","bool","setIsDirty","allowedNavigationUrls","classes","isDmsWidgetExpanded","content","contentShift","t","id","taskRef","vertical","horizontal","tabName","DMS_CONTEXT_TASK_ID","DMS_CONTEXT_TASK","DMS_DOCUMENT_TYPE_SECTION_KEYS","claim","linkToLossAndClaim","isClaimsFNOL"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector } from 'react-redux';\r\nimport classnames from 'classnames';\r\n\r\n// app\r\nimport { Breadcrumb, Layout, PopoverMenu, SectionHeader, Tabs, PreventNavigation } from 'components';\r\nimport { TaskDetails, TaskNotes, ClaimsUploadViewSearchDocs, ClaimsProcessingDmsWidget } from 'modules';\r\nimport * as utils from 'utils';\r\nimport * as constants from 'consts';\r\nimport { DrawerComponent } from 'components';\r\nimport styles from './TaskDashboard.styles';\r\nimport { selectDmsWidgetExpanded } from 'stores';\r\n\r\n// mui\r\nimport { Divider } from '@material-ui/core';\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nTaskDashboardView.propTypes = {\r\n  task: PropTypes.object.isRequired,\r\n  tabs: PropTypes.array.isRequired,\r\n  selectedTab: PropTypes.string.isRequired,\r\n  breadcrumbs: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      label: PropTypes.string.isRequired,\r\n      link: PropTypes.string,\r\n    })\r\n  ).isRequired,\r\n  handleSelectTab: PropTypes.func.isRequired,\r\n  popoverActions: PropTypes.array.isRequired,\r\n  handleDirtyCheck: PropTypes.func.isRequired,\r\n  isDirtyRef: PropTypes.bool.isRequired,\r\n  setIsDirty: PropTypes.func.isRequired,\r\n  allowedNavigationUrls: PropTypes.array.isRequired,\r\n};\r\nexport function TaskDashboardView({\r\n  task,\r\n  tabs,\r\n  selectedTab,\r\n  breadcrumbs,\r\n  handleSelectTab,\r\n  popoverActions,\r\n  handleDirtyCheck,\r\n  allowedNavigationUrls,\r\n  isDirtyRef,\r\n  setIsDirty,\r\n}) {\r\n  const classes = makeStyles(styles, { name: 'TaskDashboard' })();\r\n  const isDmsWidgetExpanded = useSelector(selectDmsWidgetExpanded);\r\n  return (\r\n    <>\r\n      <Breadcrumb links={breadcrumbs} testid=\"task-dashboard\" />\r\n      <Divider />\r\n      <div\r\n        className={classnames(classes.content, {\r\n          [classes.contentShift]: isDmsWidgetExpanded,\r\n        })}\r\n      >\r\n        <Layout testid=\"task-dashboard\">\r\n          <Layout main>\r\n            <SectionHeader\r\n              title={utils.string.t('claims.processing.task.title', { id: task.taskRef })}\r\n              icon={DescriptionIcon}\r\n              testid=\"task-ref-header\"\r\n            >\r\n              <PopoverMenu\r\n                variant=\"outlined\"\r\n                id=\"task-functions\"\r\n                size=\"small\"\r\n                color=\"primary\"\r\n                text={utils.string.t('claims.processing.taskFunctions')}\r\n                isButton\r\n                anchorOrigin={{\r\n                  vertical: 'bottom',\r\n                  horizontal: 'right',\r\n                }}\r\n                transformOrigin={{\r\n                  vertical: 'top',\r\n                  horizontal: 'right',\r\n                }}\r\n                items={popoverActions}\r\n              />\r\n            </SectionHeader>\r\n            <Tabs\r\n              tabs={tabs}\r\n              value={selectedTab}\r\n              onChange={(tabName) => {\r\n                handleSelectTab(tabName);\r\n              }}\r\n            />\r\n\r\n            {/* tabs content */}\r\n            {selectedTab === 'taskDetails' && (\r\n              <TaskDetails taskObj={task} isDirtyRef={isDirtyRef} setIsDirty={setIsDirty} handleDirtyCheck={handleDirtyCheck} />\r\n            )}\r\n            {selectedTab === 'viewDocuments' && (\r\n              <ClaimsUploadViewSearchDocs\r\n                refData={task}\r\n                refIdName={constants.DMS_CONTEXT_TASK_ID}\r\n                dmsContext={constants.DMS_CONTEXT_TASK}\r\n                documentTypeKey={constants.DMS_DOCUMENT_TYPE_SECTION_KEYS.claim}\r\n                viewOptions={{ linkToLossAndClaim: true }}\r\n                fnolViewOptions={{\r\n                  isClaimsFNOL: true,\r\n                }}\r\n              />\r\n            )}\r\n            {selectedTab === 'notes' && <TaskNotes taskObj={task} />}\r\n            {isDirtyRef && selectedTab === 'taskDetails' && (\r\n              <PreventNavigation\r\n                dirty={true}\r\n                allowedUrls={allowedNavigationUrls}\r\n                title={'status.alert'}\r\n                subtitle={''}\r\n                hint={'claims.notes.notifications.alertPopup'}\r\n                maxWidth={'xs'}\r\n                confirmLabel={'form.options.yesNoNa.yes'}\r\n                cancelLabel={'form.options.yesNoNa.no'}\r\n              />\r\n            )}\r\n          </Layout>\r\n        </Layout>\r\n      </div>\r\n      <DrawerComponent isDrawerOpen isFromDashboard>\r\n        <ClaimsProcessingDmsWidget />\r\n      </DrawerComponent>\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}