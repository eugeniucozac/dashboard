{"ast":null,"code":"import _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ClaimsTab\\\\ClaimsTabTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router'; // app\n\nimport { ClaimsTabTableView } from './ClaimsTabTable.view';\nimport { selectClaimsTabPagination, selectClaimsTabItem, selectClaimsTabCheckboxItem, selectClaimsTabData, showModal, hideModal, resetClaimsTabCheckboxItem } from 'stores';\nimport { useSort, usePagination } from 'hooks';\nimport * as utils from 'utils';\nimport config from 'config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nClaimsTabTable.prototypes = {\n  claims: PropTypes.array.isRequired,\n  cols: PropTypes.array.isRequired,\n  columnProps: PropTypes.object.isRequired,\n  sort: PropTypes.object.isRequired,\n  handlers: PropTypes.shape({\n    changePage: PropTypes.object.isRequired,\n    changeRowsPerPage: PropTypes.object.isRequired,\n    sort: PropTypes.object.isRequired\n  }).isRequired,\n  viewFields: PropTypes.array.isRequired,\n  control: PropTypes.object.isRequired\n};\nexport function ClaimsTabTable(_ref) {\n  _s();\n\n  var _claimsTabData$tableD;\n\n  var claims = _ref.claims,\n      colsArr = _ref.cols,\n      columnProps = _ref.columnProps,\n      sortObj = _ref.sort,\n      _ref$handlers = _ref.handlers,\n      handlers = _ref$handlers === void 0 ? {} : _ref$handlers,\n      viewFields = _ref.viewFields,\n      control = _ref.control;\n  var dispatch = useDispatch();\n  var history = useHistory();\n  var isFormDirtyRef = useRef(false);\n  var claimsTabData = useSelector(selectClaimsTabData);\n  var claimsTabRowSelected = claimsTabData === null || claimsTabData === void 0 ? void 0 : (_claimsTabData$tableD = claimsTabData.tableDetails) === null || _claimsTabData$tableD === void 0 ? void 0 : _claimsTabData$tableD.checkboxSelected;\n  var claimsTabPagination = useSelector(selectClaimsTabPagination);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      multiSelect = _useState2[0],\n      setMultiSelect = _useState2[1];\n\n  var _useSort = useSort(colsArr, sortObj, handlers === null || handlers === void 0 ? void 0 : handlers.sort),\n      cols = _useSort.cols,\n      sort = _useSort.sort;\n\n  var pagination = usePagination(claims || [], claimsTabPagination, handlers.changePage, handlers.changeRowsPerPage);\n\n  var selectClaim = function selectClaim(claimObj) {\n    return function () {\n      if (claimObj === null || claimObj === void 0 ? void 0 : claimObj.processID) {\n        dispatch(selectClaimsTabCheckboxItem(claimObj));\n      }\n    };\n  };\n\n  var clickClaim = function clickClaim(claimObj) {\n    return function (event) {\n      event.stopPropagation();\n\n      if (claimObj === null || claimObj === void 0 ? void 0 : claimObj.claimReference) {\n        dispatch(selectClaimsTabItem(claimObj, true));\n        history.push(\"\".concat(config.routes.claimsFNOL.claim, \"/\").concat(claimObj === null || claimObj === void 0 ? void 0 : claimObj.claimReference));\n      }\n    };\n  };\n\n  var toggleMultiSelect = function toggleMultiSelect(name, value) {\n    setMultiSelect(value);\n\n    if (!value) {\n      dispatch(resetClaimsTabCheckboxItem());\n    }\n  };\n\n  var setIsFormDirty = function setIsFormDirty(isDirty) {\n    isFormDirtyRef.current = isDirty;\n  };\n\n  var confirmHideModal = function confirmHideModal(modalName) {\n    if (isFormDirtyRef.current) {\n      dispatch(showModal({\n        component: 'CONFIRM',\n        props: {\n          title: utils.string.t('navigation.form.subtitle'),\n          hint: utils.string.t('navigation.form.title'),\n          fullWidth: true,\n          maxWidth: 'xs',\n          componentProps: {\n            cancelLabel: utils.string.t('app.no'),\n            confirmLabel: utils.string.t('app.yes'),\n            submitHandler: function submitHandler() {\n              dispatch(hideModal(modalName));\n            }\n          }\n        }\n      }));\n    } else {\n      dispatch(hideModal(modalName));\n    }\n  };\n\n  var handleChangeComplexityPriorityAssignmentClaims = function handleChangeComplexityPriorityAssignmentClaims(claims) {\n    dispatch(showModal({\n      component: 'CHANGE_COMPLEXITY_PRIORITY_ASSIGNMENT',\n      props: {\n        title: 'claims.processing.summary.buttons.changeComplexityPriorityAssignment',\n        fullWidth: true,\n        maxWidth: 'sm',\n        hideCompOnBlur: false,\n        componentProps: {\n          claims: claims,\n          setIsDirty: setIsFormDirty,\n          clickXHandler: function clickXHandler() {\n            confirmHideModal('CHANGE_COMPLEXITY_PRIORITY_ASSIGNMENT');\n          },\n          cancelHandler: function cancelHandler() {\n            confirmHideModal('CHANGE_COMPLEXITY_PRIORITY_ASSIGNMENT');\n          }\n        }\n      }\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(ClaimsTabTableView, {\n    claims: claims || [],\n    claimsSelected: claimsTabRowSelected,\n    cols: cols,\n    columnProps: columnProps,\n    sort: sort,\n    pagination: pagination,\n    tabData: claimsTabData,\n    multiSelect: multiSelect,\n    viewFields: viewFields,\n    control: control,\n    handlers: {\n      clickClaim: clickClaim,\n      editClaims: handleChangeComplexityPriorityAssignmentClaims,\n      selectClaim: selectClaim,\n      sort: handlers.sort,\n      toggleMultiSelect: toggleMultiSelect\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ClaimsTabTable, \"CabvB1ovRGvEIQ1N7qKV/g2vQB0=\", false, function () {\n  return [useDispatch, useHistory, useSelector, useSelector, useSort, usePagination];\n});\n\n_c = ClaimsTabTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimsTabTable\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ClaimsTab/ClaimsTabTable.js"],"names":["React","useState","useRef","PropTypes","useDispatch","useSelector","useHistory","ClaimsTabTableView","selectClaimsTabPagination","selectClaimsTabItem","selectClaimsTabCheckboxItem","selectClaimsTabData","showModal","hideModal","resetClaimsTabCheckboxItem","useSort","usePagination","utils","config","ClaimsTabTable","prototypes","claims","array","isRequired","cols","columnProps","object","sort","handlers","shape","changePage","changeRowsPerPage","viewFields","control","colsArr","sortObj","dispatch","history","isFormDirtyRef","claimsTabData","claimsTabRowSelected","tableDetails","checkboxSelected","claimsTabPagination","multiSelect","setMultiSelect","pagination","selectClaim","claimObj","processID","clickClaim","event","stopPropagation","claimReference","push","routes","claimsFNOL","claim","toggleMultiSelect","name","value","setIsFormDirty","isDirty","current","confirmHideModal","modalName","component","props","title","string","t","hint","fullWidth","maxWidth","componentProps","cancelLabel","confirmLabel","submitHandler","handleChangeComplexityPriorityAssignmentClaims","hideCompOnBlur","setIsDirty","clickXHandler","cancelHandler","editClaims"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\n\r\n// app\r\nimport { ClaimsTabTableView } from './ClaimsTabTable.view';\r\nimport {\r\n  selectClaimsTabPagination,\r\n  selectClaimsTabItem,\r\n  selectClaimsTabCheckboxItem,\r\n  selectClaimsTabData,\r\n  showModal,\r\n  hideModal,\r\n  resetClaimsTabCheckboxItem,\r\n} from 'stores';\r\nimport { useSort, usePagination } from 'hooks';\r\nimport * as utils from 'utils';\r\nimport config from 'config';\r\n\r\nClaimsTabTable.prototypes = {\r\n  claims: PropTypes.array.isRequired,\r\n  cols: PropTypes.array.isRequired,\r\n  columnProps: PropTypes.object.isRequired,\r\n  sort: PropTypes.object.isRequired,\r\n  handlers: PropTypes.shape({\r\n    changePage: PropTypes.object.isRequired,\r\n    changeRowsPerPage: PropTypes.object.isRequired,\r\n    sort: PropTypes.object.isRequired,\r\n  }).isRequired,\r\n  viewFields: PropTypes.array.isRequired,\r\n  control: PropTypes.object.isRequired,\r\n};\r\n\r\nexport function ClaimsTabTable({ claims, cols: colsArr, columnProps, sort: sortObj, handlers = {}, viewFields, control }) {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const isFormDirtyRef = useRef(false);\r\n\r\n  const claimsTabData = useSelector(selectClaimsTabData);\r\n  const claimsTabRowSelected = claimsTabData?.tableDetails?.checkboxSelected;\r\n  const claimsTabPagination = useSelector(selectClaimsTabPagination);\r\n\r\n  const [multiSelect, setMultiSelect] = useState(false);\r\n\r\n  const { cols, sort } = useSort(colsArr, sortObj, handlers?.sort);\r\n  const pagination = usePagination(claims || [], claimsTabPagination, handlers.changePage, handlers.changeRowsPerPage);\r\n\r\n  const selectClaim = (claimObj) => () => {\r\n    if (claimObj?.processID) {\r\n      dispatch(selectClaimsTabCheckboxItem(claimObj));\r\n    }\r\n  };\r\n\r\n  const clickClaim = (claimObj) => (event) => {\r\n    event.stopPropagation();\r\n\r\n    if (claimObj?.claimReference) {\r\n      dispatch(selectClaimsTabItem(claimObj, true));\r\n      history.push(`${config.routes.claimsFNOL.claim}/${claimObj?.claimReference}`);\r\n    }\r\n  };\r\n\r\n  const toggleMultiSelect = (name, value) => {\r\n    setMultiSelect(value);\r\n\r\n    if (!value) {\r\n      dispatch(resetClaimsTabCheckboxItem());\r\n    }\r\n  };\r\n\r\n  const setIsFormDirty = (isDirty) => {\r\n    isFormDirtyRef.current = isDirty;\r\n  };\r\n\r\n  const confirmHideModal = (modalName) => {\r\n    if (isFormDirtyRef.current) {\r\n      dispatch(\r\n        showModal({\r\n          component: 'CONFIRM',\r\n          props: {\r\n            title: utils.string.t('navigation.form.subtitle'),\r\n            hint: utils.string.t('navigation.form.title'),\r\n            fullWidth: true,\r\n            maxWidth: 'xs',\r\n            componentProps: {\r\n              cancelLabel: utils.string.t('app.no'),\r\n              confirmLabel: utils.string.t('app.yes'),\r\n              submitHandler: () => {\r\n                dispatch(hideModal(modalName));\r\n              },\r\n            },\r\n          },\r\n        })\r\n      );\r\n    } else {\r\n      dispatch(hideModal(modalName));\r\n    }\r\n  };\r\n\r\n  const handleChangeComplexityPriorityAssignmentClaims = (claims) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CHANGE_COMPLEXITY_PRIORITY_ASSIGNMENT',\r\n        props: {\r\n          title: 'claims.processing.summary.buttons.changeComplexityPriorityAssignment',\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          hideCompOnBlur: false,\r\n          componentProps: {\r\n            claims: claims,\r\n            setIsDirty: setIsFormDirty,\r\n            clickXHandler: () => {\r\n              confirmHideModal('CHANGE_COMPLEXITY_PRIORITY_ASSIGNMENT');\r\n            },\r\n            cancelHandler: () => {\r\n              confirmHideModal('CHANGE_COMPLEXITY_PRIORITY_ASSIGNMENT');\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <ClaimsTabTableView\r\n      claims={claims || []}\r\n      claimsSelected={claimsTabRowSelected}\r\n      cols={cols}\r\n      columnProps={columnProps}\r\n      sort={sort}\r\n      pagination={pagination}\r\n      tabData={claimsTabData}\r\n      multiSelect={multiSelect}\r\n      viewFields={viewFields}\r\n      control={control}\r\n      handlers={{\r\n        clickClaim,\r\n        editClaims: handleChangeComplexityPriorityAssignmentClaims,\r\n        selectClaim,\r\n        sort: handlers.sort,\r\n        toggleMultiSelect,\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}