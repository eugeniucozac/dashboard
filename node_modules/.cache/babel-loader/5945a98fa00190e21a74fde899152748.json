{"ast":null,"code":"import { addLoader, removeLoader, enqueueNotification, authLogout } from 'stores';\nimport * as utils from 'utils';\nexport var postComplexityDivisionMatrix = function postComplexityDivisionMatrix(updatedMatrixData) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/claims.actions.postComplexityDivisionMatrix'\n    };\n    dispatch(postComplexityDivisionMatrixRequest(updatedMatrixData));\n    dispatch(addLoader('postComplexityDivisionMatrix'));\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.claimService,\n      path: 'api/data/claims-triage/complex/division/save',\n      data: updatedMatrixData\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json, true);\n    }).then(function (data) {\n      dispatch(enqueueNotification('notification.divisionComplexity.success', 'success'));\n      return data;\n    }).catch(function (err) {\n      dispatch(postComplexityDivisionMatrixFailure(err, defaultError));\n      dispatch(enqueueNotification('notification.divisionComplexity.fail', 'error'));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      return err;\n    }).finally(function () {\n      dispatch(removeLoader('postComplexityDivisionMatrix'));\n    });\n  };\n};\nexport var postComplexityDivisionMatrixRequest = function postComplexityDivisionMatrixRequest(updatedMatrixData) {\n  return {\n    type: 'CLAIMS_COMPLEXITY_DIVISION_SAVE_REQUEST',\n    payload: updatedMatrixData\n  };\n};\nexport var postComplexityDivisionMatrixSuccess = function postComplexityDivisionMatrixSuccess() {\n  return {\n    type: 'CLAIMS_COMPLEXITY_DIVISION_SAVE_SUCCESS'\n  };\n};\nexport var postComplexityDivisionMatrixFailure = function postComplexityDivisionMatrixFailure(err) {\n  return {\n    type: 'CLAIMS_COMPLEXITY_DIVISION_SAVE_FAILURE',\n    payload: err\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.postComplexityDivisionMatrix.js"],"names":["addLoader","removeLoader","enqueueNotification","authLogout","utils","postComplexityDivisionMatrix","updatedMatrixData","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","postComplexityDivisionMatrixRequest","api","post","token","accessToken","claimService","path","data","then","response","handleResponse","json","handleNewData","catch","err","postComplexityDivisionMatrixFailure","handleUnauthorized","finally","type","payload","postComplexityDivisionMatrixSuccess"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,YAApB,EAAkCC,mBAAlC,EAAuDC,UAAvD,QAAyE,QAAzE;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAO,IAAMC,4BAA4B,GAAG,SAA/BA,4BAA+B,CAACC,iBAAD;AAAA,SAAuB,UAACC,QAAD,EAAWC,QAAX,EAAwB;AACzF;AADyF,oBAE9BA,QAAQ,EAFsB;AAAA,QAEzEC,IAFyE,aAEjFC,IAFiF,CAEzED,IAFyE;AAAA,QAE/CE,QAF+C,aAEjEC,MAFiE,CAEvDC,IAFuD,CAE/CF,QAF+C;;AAIzF,QAAMG,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE;AADa,KAArB;AAIAR,IAAAA,QAAQ,CAACS,mCAAmC,CAACV,iBAAD,CAApC,CAAR;AACAC,IAAAA,QAAQ,CAACP,SAAS,CAAC,8BAAD,CAAV,CAAR;AAEA,WAAOI,KAAK,CAACa,GAAN,CACJC,IADI,CACC;AACJC,MAAAA,KAAK,EAAEV,IAAI,CAACW,WADR;AAEJT,MAAAA,QAAQ,EAAEA,QAAQ,CAACU,YAFf;AAGJC,MAAAA,IAAI,EAAE,8CAHF;AAIJC,MAAAA,IAAI,EAAEjB;AAJF,KADD,EAOJkB,IAPI,CAOC,UAACC,QAAD;AAAA,aAAcrB,KAAK,CAACa,GAAN,CAAUS,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAPD,EAQJD,IARI,CAQC,UAACG,IAAD;AAAA,aAAUvB,KAAK,CAACa,GAAN,CAAUW,aAAV,CAAwBD,IAAxB,EAA8B,IAA9B,CAAV;AAAA,KARD,EASJH,IATI,CASC,UAACD,IAAD,EAAU;AACdhB,MAAAA,QAAQ,CAACL,mBAAmB,CAAC,yCAAD,EAA4C,SAA5C,CAApB,CAAR;AACA,aAAOqB,IAAP;AACD,KAZI,EAaJM,KAbI,CAaE,UAACC,GAAD,EAAS;AACdvB,MAAAA,QAAQ,CAACwB,mCAAmC,CAACD,GAAD,EAAMhB,YAAN,CAApC,CAAR;AACAP,MAAAA,QAAQ,CAACL,mBAAmB,CAAC,sCAAD,EAAyC,OAAzC,CAApB,CAAR;AACAE,MAAAA,KAAK,CAACa,GAAN,CAAUe,kBAAV,CAA6BF,GAA7B,EAAkCvB,QAAlC,EAA4CJ,UAA5C;AACA,aAAO2B,GAAP;AACD,KAlBI,EAmBJG,OAnBI,CAmBI,YAAM;AACb1B,MAAAA,QAAQ,CAACN,YAAY,CAAC,8BAAD,CAAb,CAAR;AACD,KArBI,CAAP;AAsBD,GAjC2C;AAAA,CAArC;AAmCP,OAAO,IAAMe,mCAAmC,GAAG,SAAtCA,mCAAsC,CAACV,iBAAD,EAAuB;AACxE,SAAO;AACL4B,IAAAA,IAAI,EAAE,yCADD;AAELC,IAAAA,OAAO,EAAE7B;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAM8B,mCAAmC,GAAG,SAAtCA,mCAAsC,GAAM;AACvD,SAAO;AACLF,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,IAAMH,mCAAmC,GAAG,SAAtCA,mCAAsC,CAACD,GAAD,EAAS;AAC1D,SAAO;AACLI,IAAAA,IAAI,EAAE,yCADD;AAELC,IAAAA,OAAO,EAAEL;AAFJ,GAAP;AAID,CALM","sourcesContent":["import { addLoader, removeLoader, enqueueNotification, authLogout } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const postComplexityDivisionMatrix = (updatedMatrixData) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } } } = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.postComplexityDivisionMatrix',\r\n  };\r\n\r\n  dispatch(postComplexityDivisionMatrixRequest(updatedMatrixData));\r\n  dispatch(addLoader('postComplexityDivisionMatrix'));\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.claimService,\r\n      path: 'api/data/claims-triage/complex/division/save',\r\n      data: updatedMatrixData,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json, true))\r\n    .then((data) => {\r\n      dispatch(enqueueNotification('notification.divisionComplexity.success', 'success'));\r\n      return data;\r\n    })\r\n    .catch((err) => {\r\n      dispatch(postComplexityDivisionMatrixFailure(err, defaultError));\r\n      dispatch(enqueueNotification('notification.divisionComplexity.fail', 'error'));\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('postComplexityDivisionMatrix'));\r\n    });\r\n};\r\n\r\nexport const postComplexityDivisionMatrixRequest = (updatedMatrixData) => {\r\n  return {\r\n    type: 'CLAIMS_COMPLEXITY_DIVISION_SAVE_REQUEST',\r\n    payload: updatedMatrixData,\r\n  };\r\n};\r\n\r\nexport const postComplexityDivisionMatrixSuccess = () => {\r\n  return {\r\n    type: 'CLAIMS_COMPLEXITY_DIVISION_SAVE_SUCCESS',\r\n  };\r\n};\r\n\r\nexport const postComplexityDivisionMatrixFailure = (err) => {\r\n  return {\r\n    type: 'CLAIMS_COMPLEXITY_DIVISION_SAVE_FAILURE',\r\n    payload: err,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}