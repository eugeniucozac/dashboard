{"ast":null,"code":"import \"core-js/modules/es.promise.finally\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as utils from 'utils';\nimport isEmpty from 'lodash/isEmpty';\nimport { authLogout, addLoader, removeLoader, enqueueNotification } from 'stores';\nexport var getCaseRFIDetails = function getCaseRFIDetails(params) {\n  return function (dispatch, getState) {\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    if (!(params === null || params === void 0 ? void 0 : params.taskId)) {\n      return;\n    }\n\n    var defaultError = {\n      file: 'stores/premiumProcessing.actions.getCaseRFIDetails'\n    };\n    dispatch(getCaseRFIDetailsRequest(params));\n    dispatch(addLoader('getCaseRFIDetails'));\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.bpmService,\n      path: 'workflow/rfi/details',\n      params: params\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (data) {\n      var _data$data;\n\n      // check that response is valid\n      // sometimes API fails and return an empty array instead of object\n      if (data === null || data === void 0 ? void 0 : (_data$data = data.data) === null || _data$data === void 0 ? void 0 : _data$data.taskId) {\n        dispatch(getCaseRFIDetailsSuccess(data.data));\n        return data.data;\n      } else {\n        if (!isEmpty(data === null || data === void 0 ? void 0 : data.data)) {\n          return Promise.reject({\n            message: 'Invalid rfi object returned by API'\n          });\n        }\n      }\n    })[\"catch\"](function (error) {\n      utils.api.handleError(error, _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API fetch error (getCaseRFIDetails)'\n      }));\n      dispatch(getCaseRFIDetailsError(error));\n      dispatch(enqueueNotification('notification.rfi.fieldsNotPopulateErrorMessage', 'error'));\n      utils.api.handleUnauthorized(error, dispatch, authLogout);\n    })[\"finally\"](function () {\n      dispatch(removeLoader('getCaseRFIDetails'));\n    });\n  };\n};\nexport var getCaseRFIDetailsRequest = function getCaseRFIDetailsRequest(data) {\n  return {\n    type: 'PREMIUM_PROCESSING_CASE_RFI_DETAILS_REQUEST',\n    payload: data\n  };\n};\nexport var getCaseRFIDetailsSuccess = function getCaseRFIDetailsSuccess(data) {\n  return {\n    type: 'PREMIUM_PROCESSING_CASE_RFI_DETAILS_SUCCESS',\n    payload: data\n  };\n};\nexport var getCaseRFIDetailsError = function getCaseRFIDetailsError(error) {\n  return {\n    type: 'PREMIUM_PROCESSING_CASE_RFI_DETAILS_ERROR',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/premiumProcessing/premiumProcessing.actions.getCaseRFIDetails.js"],"names":["utils","isEmpty","authLogout","addLoader","removeLoader","enqueueNotification","getCaseRFIDetails","params","dispatch","getState","auth","user","endpoint","config","vars","taskId","defaultError","file","getCaseRFIDetailsRequest","api","get","token","accessToken","bpmService","path","then","response","handleResponse","data","getCaseRFIDetailsSuccess","Promise","reject","message","error","handleError","getCaseRFIDetailsError","handleUnauthorized","type","payload"],"mappings":"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","sourcesContent":["import * as utils from 'utils';\r\nimport isEmpty from 'lodash/isEmpty';\r\nimport { authLogout, addLoader, removeLoader, enqueueNotification } from 'stores';\r\n\r\nexport const getCaseRFIDetails = (params) => (dispatch, getState) => {\r\n  const {\r\n    user: { auth },\r\n    config: {\r\n      vars: { endpoint },\r\n    },\r\n  } = getState();\r\n\r\n  if (!params?.taskId) {\r\n    return;\r\n  }\r\n  const defaultError = {\r\n    file: 'stores/premiumProcessing.actions.getCaseRFIDetails',\r\n  };\r\n  dispatch(getCaseRFIDetailsRequest(params));\r\n  dispatch(addLoader('getCaseRFIDetails'));\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.bpmService,\r\n      path: 'workflow/rfi/details',\r\n      params: params,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((data) => {\r\n      // check that response is valid\r\n      // sometimes API fails and return an empty array instead of object\r\n      if (data?.data?.taskId) {\r\n        dispatch(getCaseRFIDetailsSuccess(data.data));\r\n        return data.data;\r\n      } else {\r\n        if(!isEmpty(data?.data)){\r\n          return Promise.reject({ message: 'Invalid rfi object returned by API' });\r\n        }\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      utils.api.handleError(error, { ...defaultError, message: 'API fetch error (getCaseRFIDetails)' });\r\n      dispatch(getCaseRFIDetailsError(error));\r\n      dispatch(enqueueNotification('notification.rfi.fieldsNotPopulateErrorMessage', 'error'));\r\n      utils.api.handleUnauthorized(error, dispatch, authLogout);\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('getCaseRFIDetails'));\r\n    });\r\n};\r\nexport const getCaseRFIDetailsRequest = (data) => {\r\n  return {\r\n    type: 'PREMIUM_PROCESSING_CASE_RFI_DETAILS_REQUEST',\r\n    payload: data,\r\n  };\r\n};\r\nexport const getCaseRFIDetailsSuccess = (data) => {\r\n  return {\r\n    type: 'PREMIUM_PROCESSING_CASE_RFI_DETAILS_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const getCaseRFIDetailsError = (error) => {\r\n  return {\r\n    type: 'PREMIUM_PROCESSING_CASE_RFI_DETAILS_ERROR',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}