{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\components\\\\LazyLoadingList\\\\LazyLoadingList.js\",\n    _LazyLoadingList$prop;\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types'; // app\n\nimport { LazyLoadingListView } from './LazyLoadingList.view';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nLazyLoadingList.propTypes = (_LazyLoadingList$prop = {\n  id: PropTypes.string.isRequired,\n  search: PropTypes.bool,\n  options: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n    name: PropTypes.string.isRequired\n  })).isRequired,\n  values: PropTypes.array,\n  placeholder: PropTypes.string\n}, _defineProperty(_LazyLoadingList$prop, \"values\", PropTypes.array), _defineProperty(_LazyLoadingList$prop, \"handlers\", PropTypes.shape({\n  toggleOption: PropTypes.func\n})), _defineProperty(_LazyLoadingList$prop, \"isDataLoading\", PropTypes.bool), _defineProperty(_LazyLoadingList$prop, \"isDataLoadingError\", PropTypes.bool), _LazyLoadingList$prop);\nLazyLoadingList.defaultProps = {\n  max: 0,\n  options: [],\n  values: [],\n  labels: {},\n  handlers: {},\n  nestedClasses: {}\n};\nexport default function LazyLoadingList(_ref) {\n  var id = _ref.id,\n      options = _ref.options,\n      searchQueryValue = _ref.searchQueryValue,\n      values = _ref.values,\n      placeholder = _ref.placeholder,\n      handlers = _ref.handlers,\n      props = _objectWithoutProperties(_ref, [\"id\", \"options\", \"searchQueryValue\", \"values\", \"placeholder\", \"handlers\"]);\n\n  var field = {\n    name: \"lazy-select-search-\".concat(id),\n    placeholder: placeholder || '',\n    defaultValue: '',\n    onChange: function onChange(value) {\n      handlers.onSearchQuery(value ? value.trim() : '');\n      return value;\n    },\n    muiComponentProps: {\n      autoComplete: 'off'\n    }\n  };\n\n  var onClear = function onClear(reset) {\n    return function (event) {\n      handlers.clearSearchQuery();\n      reset();\n    };\n  };\n\n  var onToggleOption = function onToggleOption(item) {\n    if (utils.generic.isFunction(handlers.toggleOption)) {\n      handlers.toggleOption(id, item);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(LazyLoadingListView, _objectSpread({\n    id: \"lazy-select-\".concat(id),\n    field: field,\n    query: searchQueryValue,\n    options: options,\n    selectedItems: values,\n    handlers: {\n      onClear: onClear,\n      onToggleOption: onToggleOption\n    }\n  }, props), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 12\n  }, this);\n}\n_c = LazyLoadingList;\n\nvar _c;\n\n$RefreshReg$(_c, \"LazyLoadingList\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/LazyLoadingList/LazyLoadingList.js"],"names":["React","useState","PropTypes","LazyLoadingListView","utils","LazyLoadingList","propTypes","id","string","isRequired","search","bool","options","arrayOf","shape","oneOfType","number","name","values","array","placeholder","toggleOption","func","defaultProps","max","labels","handlers","nestedClasses","searchQueryValue","props","field","defaultValue","onChange","value","onSearchQuery","trim","muiComponentProps","autoComplete","onClear","reset","event","clearSearchQuery","onToggleOption","item","generic","isFunction"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// app\r\nimport { LazyLoadingListView } from './LazyLoadingList.view';\r\nimport * as utils from 'utils';\r\n\r\nLazyLoadingList.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    search: PropTypes.bool,\r\n    options: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n            name: PropTypes.string.isRequired,\r\n        })\r\n    ).isRequired,\r\n    values: PropTypes.array,\r\n    placeholder: PropTypes.string,\r\n    values: PropTypes.array,\r\n    handlers: PropTypes.shape({\r\n        toggleOption: PropTypes.func,\r\n    }),\r\n    isDataLoading: PropTypes.bool,\r\n    isDataLoadingError: PropTypes.bool,\r\n}\r\n\r\n\r\nLazyLoadingList.defaultProps = {\r\n    max: 0,\r\n    options: [],\r\n    values: [],\r\n    labels: {},\r\n    handlers: {},\r\n    nestedClasses: {},\r\n}\r\n\r\nexport default function LazyLoadingList({ id, options, searchQueryValue, values, placeholder, handlers, ...props }) {\r\n\r\n    const field = {\r\n        name: `lazy-select-search-${id}`,\r\n        placeholder: placeholder || '',\r\n        defaultValue: '',\r\n        onChange: (value) => {\r\n            handlers.onSearchQuery(value ? value.trim() : '');\r\n            return value;\r\n        },\r\n        muiComponentProps: {\r\n            autoComplete: 'off',\r\n        },\r\n    };\r\n\r\n    const onClear = (reset) => (event) => {\r\n        handlers.clearSearchQuery()\r\n        reset();\r\n    };\r\n\r\n    const onToggleOption = (item) => {\r\n        if (utils.generic.isFunction(handlers.toggleOption)) {\r\n            handlers.toggleOption(id, item);\r\n        }\r\n    };\r\n\r\n    return <LazyLoadingListView\r\n        id={`lazy-select-${id}`}\r\n        field={field}\r\n        query={searchQueryValue}\r\n        options={options}\r\n        selectedItems={values}\r\n        handlers={{\r\n            onClear,\r\n            onToggleOption,\r\n        }}{...props} />\r\n}"]},"metadata":{},"sourceType":"module"}