{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport get from 'lodash/get';\nimport { addLoader, removeLoader, enqueueNotification, authLogout } from 'stores';\nimport * as utils from 'utils';\nimport * as constants from 'consts';\nexport var getComplexityBasisValue = function getComplexityBasisValue(params) {\n  var showLoader = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var type = arguments.length > 2 ? arguments[2] : undefined;\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint,\n        claims = _getState.claims;\n\n    var defaultError = {\n      file: 'stores/claims.actions.getComplexityBasisValue'\n    };\n    dispatch(getComplexityBasisValueRequest(params));\n\n    if (showLoader) {\n      dispatch(addLoader('getComplexityBasisValue'));\n    }\n\n    var prevDirection = get(claims, 'complexityBasisValues.sort.direction') || '';\n    var newDirection = (params === null || params === void 0 ? void 0 : params.hasOwnProperty('direction')) ? params.direction : prevDirection;\n    var prevQuery = get(claims, 'complexityBasisValues.query') || '';\n    var newQuery = (params === null || params === void 0 ? void 0 : params.hasOwnProperty('term')) ? params.term : prevQuery;\n    var prevSortBy = get(claims, 'complexityBasisValues.sort.by') || '';\n    var newSortBy = (params === null || params === void 0 ? void 0 : params.hasOwnProperty('sortBy')) ? params.sortBy : prevSortBy;\n    var data = {\n      direction: newDirection,\n      page: params && params.page || 0,\n      pageSize: params && params.size || claims.complexityBasisValues.pageSize,\n      search: newQuery,\n      sortBy: newSortBy\n    };\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.claimService,\n      path: 'api/data/claims-triage/complex/complexity-values/search',\n      data: data\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(getComplexityBasisValueSuccess(data, type));\n      return data;\n    }).catch(function (err) {\n      var _err$response;\n\n      utils.api.handleError(err, _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API fetch error (claims.getComplexityBasisValues)'\n      }));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(getComplexityBasisValueFailure(err));\n      dispatch((err === null || err === void 0 ? void 0 : (_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.status) === constants.API_STATUS_NOT_FOUND ? enqueueNotification('notification.getComplexityBasisValues.notFound', 'error') : enqueueNotification('notification.getComplexityBasisValues.fail', 'error'));\n      return err;\n    }).finally(function () {\n      if (showLoader) {\n        dispatch(removeLoader('getComplexityBasisValue'));\n      }\n    });\n  };\n};\nexport var getComplexityBasisValueRequest = function getComplexityBasisValueRequest(params) {\n  return {\n    type: 'CLAIMS_COMPLEXITY_BASIS_VALUE_GET_REQUEST',\n    payload: params\n  };\n};\nexport var getComplexityBasisValueSuccess = function getComplexityBasisValueSuccess(data, type) {\n  return {\n    type: 'CLAIMS_COMPLEXITY_BASIS_VALUE_GET_SUCCESS',\n    payload: _objectSpread(_objectSpread({}, data), {}, {\n      type: type\n    })\n  };\n};\nexport var getComplexityBasisValueFailure = function getComplexityBasisValueFailure(err) {\n  return {\n    type: 'CLAIMS_COMPLEXITY_BASIS_VALUE_GET_FAILURE',\n    payload: err\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.getComplexityBasisValues.js"],"names":["get","addLoader","removeLoader","enqueueNotification","authLogout","utils","constants","getComplexityBasisValue","params","showLoader","type","dispatch","getState","auth","user","endpoint","config","vars","claims","defaultError","file","getComplexityBasisValueRequest","prevDirection","newDirection","hasOwnProperty","direction","prevQuery","newQuery","term","prevSortBy","newSortBy","sortBy","data","page","pageSize","size","complexityBasisValues","search","api","post","token","accessToken","claimService","path","then","response","handleResponse","json","handleNewData","getComplexityBasisValueSuccess","catch","err","handleError","message","handleUnauthorized","getComplexityBasisValueFailure","status","API_STATUS_NOT_FOUND","finally","payload"],"mappings":"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","sourcesContent":["import get from 'lodash/get';\r\n\r\nimport { addLoader, removeLoader, enqueueNotification, authLogout } from 'stores';\r\nimport * as utils from 'utils';\r\nimport * as constants from 'consts';\r\n\r\nexport const getComplexityBasisValue =\r\n  (params, showLoader = true, type) =>\r\n  (dispatch, getState) => {\r\n    // prettier-ignore\r\n    const { user: { auth }, config: { vars: { endpoint } }, claims } = getState();\r\n\r\n    const defaultError = {\r\n      file: 'stores/claims.actions.getComplexityBasisValue',\r\n    };\r\n\r\n    dispatch(getComplexityBasisValueRequest(params));\r\n\r\n    if (showLoader) {\r\n      dispatch(addLoader('getComplexityBasisValue'));\r\n    }\r\n\r\n    const prevDirection = get(claims, 'complexityBasisValues.sort.direction') || '';\r\n    const newDirection = params?.hasOwnProperty('direction') ? params.direction : prevDirection;\r\n\r\n    const prevQuery = get(claims, 'complexityBasisValues.query') || '';\r\n    const newQuery = params?.hasOwnProperty('term') ? params.term : prevQuery;\r\n\r\n    const prevSortBy = get(claims, 'complexityBasisValues.sort.by') || '';\r\n    const newSortBy = params?.hasOwnProperty('sortBy') ? params.sortBy : prevSortBy;\r\n\r\n    const data = {\r\n      direction: newDirection,\r\n      page: (params && params.page) || 0,\r\n      pageSize: (params && params.size) || claims.complexityBasisValues.pageSize,\r\n      search: newQuery,\r\n      sortBy: newSortBy,\r\n    };\r\n\r\n    return utils.api\r\n      .post({\r\n        token: auth.accessToken,\r\n        endpoint: endpoint.claimService,\r\n        path: 'api/data/claims-triage/complex/complexity-values/search',\r\n        data,\r\n      })\r\n      .then((response) => utils.api.handleResponse(response))\r\n      .then((json) => utils.api.handleNewData(json))\r\n      .then((data) => {\r\n        dispatch(getComplexityBasisValueSuccess(data, type));\r\n        return data;\r\n      })\r\n      .catch((err) => {\r\n        utils.api.handleError(err, { ...defaultError, message: 'API fetch error (claims.getComplexityBasisValues)' });\r\n        utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n        dispatch(getComplexityBasisValueFailure(err));\r\n        dispatch(\r\n          err?.response?.status === constants.API_STATUS_NOT_FOUND\r\n            ? enqueueNotification('notification.getComplexityBasisValues.notFound', 'error')\r\n            : enqueueNotification('notification.getComplexityBasisValues.fail', 'error')\r\n        );\r\n        return err;\r\n      })\r\n      .finally(() => {\r\n        if (showLoader) {\r\n          dispatch(removeLoader('getComplexityBasisValue'));\r\n        }\r\n      });\r\n  };\r\n\r\nexport const getComplexityBasisValueRequest = (params) => {\r\n  return {\r\n    type: 'CLAIMS_COMPLEXITY_BASIS_VALUE_GET_REQUEST',\r\n    payload: params,\r\n  };\r\n};\r\n\r\nexport const getComplexityBasisValueSuccess = (data, type) => {\r\n  return {\r\n    type: 'CLAIMS_COMPLEXITY_BASIS_VALUE_GET_SUCCESS',\r\n    payload: { ...data, type },\r\n  };\r\n};\r\n\r\nexport const getComplexityBasisValueFailure = (err) => {\r\n  return {\r\n    type: 'CLAIMS_COMPLEXITY_BASIS_VALUE_GET_FAILURE',\r\n    payload: err,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}