{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\components\\\\FormDataGrid\\\\FormDataGrid.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport compact from 'lodash/compact';\nimport { useFieldArray, useWatch } from 'react-hook-form'; // app\n\nimport FormDataGridView from './FormDataGrid.view';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar FormDataGrid = function FormDataGrid(_ref) {\n  _s();\n\n  var field = _ref.field,\n      formProps = _ref.formProps,\n      overflow = _ref.overflow,\n      showCopyIconFirst = _ref.showCopyIconFirst;\n\n  var _useFieldArray = useFieldArray({\n    name: field === null || field === void 0 ? void 0 : field.name,\n    control: formProps === null || formProps === void 0 ? void 0 : formProps.control\n  }),\n      fields = _useFieldArray.fields;\n\n  var fieldsValues = useWatch({\n    control: formProps === null || formProps === void 0 ? void 0 : formProps.control,\n    name: field === null || field === void 0 ? void 0 : field.name\n  }); // abort\n\n  if (!field || !field.name || !field.arrayItemDef) return null;\n  if (!formProps || !formProps.control) return null;\n  var validFields = ['text', 'number', 'datepicker', 'select', 'autocomplete', 'autocompletemui', 'radio', 'checkbox', 'toggle', 'hidden'];\n  var customFields = ['stringDisplay', 'sumOfValues'];\n\n  var cols = _toConsumableArray(compact(field.arrayItemDef.map(function (def) {\n    if (![].concat(validFields, customFields).includes(def.type) || def.type === 'hidden') return null;\n    return _objectSpread({\n      id: def.name,\n      label: def.label\n    }, def.width && {\n      width: \"\".concat(def.width, \"px\")\n    });\n  })));\n\n  var copyRow = {\n    id: 'copy',\n    width: 40\n  };\n  showCopyIconFirst ? cols.unshift(copyRow) : cols.push(copyRow);\n  var copyFields = field.arrayItemDef.filter(function (item) {\n    return !(item === null || item === void 0 ? void 0 : item.excludeCopy);\n  }).map(function (item) {\n    return item.name;\n  });\n\n  var copyRowData = function copyRowData(index) {\n    var updateValues = fieldsValues[index - 1];\n\n    if (utils.generic.isValidObject(updateValues) && utils.generic.isFunction(formProps.setValue)) {\n      copyFields.forEach(function (name) {\n        var fieldName = \"\".concat(field.name, \"[\").concat(index, \"].\").concat(name);\n        var fieldValue = updateValues[name];\n        formProps.setValue(fieldName, fieldValue);\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(FormDataGridView, {\n    cols: cols,\n    field: field,\n    validFields: validFields,\n    customFields: customFields,\n    formProps: formProps,\n    overflow: overflow,\n    fields: fields,\n    showCopyIconFirst: showCopyIconFirst,\n    handlers: {\n      copyRowData: copyRowData\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(FormDataGrid, \"OUzZsWWAv7IHNhLfgne6dkbLFYc=\", false, function () {\n  return [useFieldArray, useWatch];\n});\n\n_c = FormDataGrid;\nFormDataGrid.propTypes = {\n  field: PropTypes.object.isRequired,\n  formProps: PropTypes.object.isRequired,\n  overflow: PropTypes.bool,\n  showCopyIconFirst: PropTypes.bool\n};\nFormDataGrid.defaultProps = {\n  overflow: true,\n  showCopyIconFirst: false\n};\nexport default FormDataGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormDataGrid\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/FormDataGrid/FormDataGrid.js"],"names":["React","PropTypes","compact","useFieldArray","useWatch","FormDataGridView","utils","FormDataGrid","field","formProps","overflow","showCopyIconFirst","name","control","fields","fieldsValues","arrayItemDef","validFields","customFields","cols","map","def","includes","type","id","label","width","copyRow","unshift","push","copyFields","filter","item","excludeCopy","copyRowData","index","updateValues","generic","isValidObject","isFunction","setValue","forEach","fieldName","fieldValue","propTypes","object","isRequired","bool","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport compact from 'lodash/compact';\r\nimport { useFieldArray, useWatch } from 'react-hook-form';\r\n\r\n// app\r\nimport FormDataGridView from './FormDataGrid.view';\r\nimport * as utils from 'utils';\r\n\r\nconst FormDataGrid = ({ field, formProps, overflow, showCopyIconFirst }) => {\r\n  const { fields } = useFieldArray({\r\n    name: field?.name,\r\n    control: formProps?.control,\r\n  });\r\n\r\n  const fieldsValues = useWatch({\r\n    control: formProps?.control,\r\n    name: field?.name,\r\n  });\r\n\r\n  // abort\r\n  if (!field || !field.name || !field.arrayItemDef) return null;\r\n  if (!formProps || !formProps.control) return null;\r\n\r\n  const validFields = [\r\n    'text',\r\n    'number',\r\n    'datepicker',\r\n    'select',\r\n    'autocomplete',\r\n    'autocompletemui',\r\n    'radio',\r\n    'checkbox',\r\n    'toggle',\r\n    'hidden',\r\n  ];\r\n\r\n  const customFields = ['stringDisplay', 'sumOfValues'];\r\n\r\n  const cols = [\r\n    ...compact(\r\n      field.arrayItemDef.map((def) => {\r\n        if (![...validFields, ...customFields].includes(def.type) || def.type === 'hidden') return null;\r\n\r\n        return { id: def.name, label: def.label, ...(def.width && { width: `${def.width}px` }) };\r\n      })\r\n    ),\r\n  ];\r\n  const copyRow = { id: 'copy', width: 40 };\r\n\r\n  showCopyIconFirst ? cols.unshift(copyRow) : cols.push(copyRow);\r\n\r\n  const copyFields = field.arrayItemDef.filter((item) => !item?.excludeCopy).map((item) => item.name);\r\n\r\n  const copyRowData = (index) => {\r\n    const updateValues = fieldsValues[index - 1];\r\n\r\n    if (utils.generic.isValidObject(updateValues) && utils.generic.isFunction(formProps.setValue)) {\r\n      copyFields.forEach((name) => {\r\n        const fieldName = `${field.name}[${index}].${name}`;\r\n        const fieldValue = updateValues[name];\r\n\r\n        formProps.setValue(fieldName, fieldValue);\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FormDataGridView\r\n      cols={cols}\r\n      field={field}\r\n      validFields={validFields}\r\n      customFields={customFields}\r\n      formProps={formProps}\r\n      overflow={overflow}\r\n      fields={fields}\r\n      showCopyIconFirst={showCopyIconFirst}\r\n      handlers={{\r\n        copyRowData: copyRowData,\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nFormDataGrid.propTypes = {\r\n  field: PropTypes.object.isRequired,\r\n  formProps: PropTypes.object.isRequired,\r\n  overflow: PropTypes.bool,\r\n  showCopyIconFirst: PropTypes.bool,\r\n};\r\n\r\nFormDataGrid.defaultProps = {\r\n  overflow: true,\r\n  showCopyIconFirst: false,\r\n};\r\n\r\nexport default FormDataGrid;\r\n"]},"metadata":{},"sourceType":"module"}