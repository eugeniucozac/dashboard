{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\TasksTabTableRow\\\\TasksTabTableRow.view.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames'; // app\n\nimport styles from './TasksTabTableRow.style';\nimport { FormCheckbox, Link, TableCell, PopoverMenu } from 'components';\nimport * as utils from 'utils';\nimport { TASK_TAB_COMPLETED_STATUS, TASK_TAB_INPROGRESS_STATUS } from 'consts';\nimport config from 'config'; // mui\n\nimport { makeStyles, Box, TableRow } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nTasksTabTableRowView.propTypes = {\n  task: PropTypes.object.isRequired,\n  isSelected: PropTypes.bool,\n  columnProps: PropTypes.func.isRequired,\n  taskActionItems: PropTypes.array.isRequired,\n  isMultiSelect: PropTypes.bool,\n  handlers: PropTypes.shape({\n    selectTask: PropTypes.func.isRequired,\n    clickTask: PropTypes.func.isRequired\n  }).isRequired\n};\nexport function TasksTabTableRowView(_ref) {\n  var _classesRow, _getStatus, _task$assigneeFullNam;\n\n  var task = _ref.task,\n      isSelected = _ref.isSelected,\n      columnProps = _ref.columnProps,\n      taskActionItems = _ref.taskActionItems,\n      isMultiSelect = _ref.isMultiSelect,\n      handlers = _ref.handlers;\n  var classes = makeStyles(styles, {\n    name: 'TasksTabTableRow'\n  })();\n  var classesRow = (_classesRow = {}, _defineProperty(_classesRow, classes.row, true), _defineProperty(_classesRow, classes.rowSelected, isSelected), _classesRow);\n\n  var getStatus = function getStatus(task) {\n    var _task$status, _task$status2, _task$status3;\n\n    var targetDate = new Date(task === null || task === void 0 ? void 0 : task.targetDueDate).getTime();\n    var createdDate = new Date(task === null || task === void 0 ? void 0 : task.createdOn).getTime();\n    var dateNow = new Date().getTime();\n    var targetDDMMYY = utils.string.t('format.date', {\n      value: {\n        date: task === null || task === void 0 ? void 0 : task.targetDueDate,\n        format: config.ui.format.date.slashNumeric\n      }\n    });\n    var dateNowDDMMYY = utils.string.t('format.date', {\n      value: {\n        date: new Date(),\n        format: config.ui.format.date.slashNumeric\n      }\n    });\n    if (targetDate > createdDate && (task === null || task === void 0 ? void 0 : (_task$status = task.status) === null || _task$status === void 0 ? void 0 : _task$status.toLowerCase()) === TASK_TAB_COMPLETED_STATUS.toLowerCase()) return {\n      type: 'success'\n    };else if (targetDate >= createdDate && targetDate > dateNow && targetDate !== dateNow && targetDDMMYY !== dateNowDDMMYY && (task === null || task === void 0 ? void 0 : (_task$status2 = task.status) === null || _task$status2 === void 0 ? void 0 : _task$status2.toLowerCase()) === TASK_TAB_INPROGRESS_STATUS.toLowerCase()) return {\n      type: 'success'\n    };else if (targetDate === dateNow || targetDDMMYY === dateNowDDMMYY) {\n      return {\n        type: 'alert'\n      };\n    } else if (targetDate <= dateNow && (task === null || task === void 0 ? void 0 : (_task$status3 = task.status) === null || _task$status3 === void 0 ? void 0 : _task$status3.toLowerCase()) === TASK_TAB_INPROGRESS_STATUS.toLowerCase()) return {\n      type: 'error',\n      dateAlert: true\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(TableRow, {\n    hover: true,\n    onClick: handlers.selectTask(task),\n    className: classnames(classesRow),\n    children: [/*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, columnProps('taskRef')), {}, {\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        alignItems: \"center\",\n        children: [isMultiSelect && /*#__PURE__*/_jsxDEV(FormCheckbox, {\n          name: \"checkbox-\".concat((task === null || task === void 0 ? void 0 : task.taskId) || (task === null || task === void 0 ? void 0 : task.processId)),\n          type: \"checkbox\",\n          value: isSelected,\n          nestedClasses: {\n            root: classes.checkbox\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          text: task === null || task === void 0 ? void 0 : task.taskRef,\n          color: \"secondary\",\n          onClick: handlers.clickTask(task)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, columnProps('createdOn')), {}, {\n      children: utils.string.t('format.date', {\n        value: {\n          date: task.createdOn,\n          format: config.ui.format.date.text\n        }\n      })\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, columnProps('taskType')), {}, {\n      children: task === null || task === void 0 ? void 0 : task.taskType\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, columnProps('description')), {}, {\n      title: task === null || task === void 0 ? void 0 : task.description,\n      nestedClasses: {\n        root: classes.description\n      },\n      children: task === null || task === void 0 ? void 0 : task.description\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, columnProps('targetDueDate')), {}, {\n      className: ((_getStatus = getStatus(task)) === null || _getStatus === void 0 ? void 0 : _getStatus.dateAlert) ? classes.dateAlert : '',\n      children: utils.string.t('format.date', {\n        value: {\n          date: task.targetDueDate,\n          format: config.ui.format.date.text\n        }\n      })\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, columnProps('assignee')), {}, {\n      children: task === null || task === void 0 ? void 0 : (_task$assigneeFullNam = task.assigneeFullName) === null || _task$assigneeFullNam === void 0 ? void 0 : _task$assigneeFullNam.trim()\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, columnProps('processRef')), {}, {\n      children: task === null || task === void 0 ? void 0 : task.processRef\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, columnProps('priority')), {}, {\n      children: task === null || task === void 0 ? void 0 : task.priority\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, columnProps('actions')), {}, {\n      children: /*#__PURE__*/_jsxDEV(PopoverMenu, {\n        id: \"search-menu-list\",\n        anchorOrigin: {\n          vertical: 'bottom',\n          horizontal: 'left'\n        },\n        transformOrigin: {\n          vertical: 'top',\n          horizontal: 'right'\n        },\n        items: taskActionItems\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_c = TasksTabTableRowView;\n\nvar _c;\n\n$RefreshReg$(_c, \"TasksTabTableRowView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/TasksTabTableRow/TasksTabTableRow.view.js"],"names":["React","PropTypes","classnames","styles","FormCheckbox","Link","TableCell","PopoverMenu","utils","TASK_TAB_COMPLETED_STATUS","TASK_TAB_INPROGRESS_STATUS","config","makeStyles","Box","TableRow","TasksTabTableRowView","propTypes","task","object","isRequired","isSelected","bool","columnProps","func","taskActionItems","array","isMultiSelect","handlers","shape","selectTask","clickTask","classes","name","classesRow","row","rowSelected","getStatus","targetDate","Date","targetDueDate","getTime","createdDate","createdOn","dateNow","targetDDMMYY","string","t","value","date","format","ui","slashNumeric","dateNowDDMMYY","status","toLowerCase","type","dateAlert","taskId","processId","root","checkbox","taskRef","text","taskType","description","assigneeFullName","trim","processRef","priority","vertical","horizontal"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames';\r\n\r\n// app\r\nimport styles from './TasksTabTableRow.style';\r\nimport { FormCheckbox, Link, TableCell, PopoverMenu } from 'components';\r\nimport * as utils from 'utils';\r\nimport { TASK_TAB_COMPLETED_STATUS, TASK_TAB_INPROGRESS_STATUS } from 'consts';\r\nimport config from 'config';\r\n\r\n// mui\r\nimport { makeStyles, Box, TableRow } from '@material-ui/core';\r\n\r\nTasksTabTableRowView.propTypes = {\r\n  task: PropTypes.object.isRequired,\r\n  isSelected: PropTypes.bool,\r\n  columnProps: PropTypes.func.isRequired,\r\n  taskActionItems: PropTypes.array.isRequired,\r\n  isMultiSelect: PropTypes.bool,\r\n  handlers: PropTypes.shape({\r\n    selectTask: PropTypes.func.isRequired,\r\n    clickTask: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport function TasksTabTableRowView({ task, isSelected, columnProps, taskActionItems, isMultiSelect, handlers }) {\r\n  const classes = makeStyles(styles, { name: 'TasksTabTableRow' })();\r\n\r\n  const classesRow = {\r\n    [classes.row]: true,\r\n    [classes.rowSelected]: isSelected,\r\n  };\r\n\r\n  const getStatus = (task) => {\r\n    const targetDate = new Date(task?.targetDueDate).getTime();\r\n    const createdDate = new Date(task?.createdOn).getTime();\r\n    const dateNow = new Date().getTime();\r\n    const targetDDMMYY = utils.string.t('format.date', {\r\n      value: { date: task?.targetDueDate, format: config.ui.format.date.slashNumeric },\r\n    });\r\n    const dateNowDDMMYY = utils.string.t('format.date', { value: { date: new Date(), format: config.ui.format.date.slashNumeric } });\r\n    if (targetDate > createdDate && task?.status?.toLowerCase() === TASK_TAB_COMPLETED_STATUS.toLowerCase()) return { type: 'success' };\r\n    else if (\r\n      targetDate >= createdDate &&\r\n      targetDate > dateNow &&\r\n      targetDate !== dateNow &&\r\n      targetDDMMYY !== dateNowDDMMYY &&\r\n      task?.status?.toLowerCase() === TASK_TAB_INPROGRESS_STATUS.toLowerCase()\r\n    )\r\n      return { type: 'success' };\r\n    else if (targetDate === dateNow || targetDDMMYY === dateNowDDMMYY) {\r\n      return { type: 'alert' };\r\n    } else if (targetDate <= dateNow && task?.status?.toLowerCase() === TASK_TAB_INPROGRESS_STATUS.toLowerCase())\r\n      return { type: 'error', dateAlert: true };\r\n  };\r\n\r\n  return (\r\n    <TableRow hover onClick={handlers.selectTask(task)} className={classnames(classesRow)}>\r\n      <TableCell {...columnProps('taskRef')}>\r\n        <Box display=\"flex\" alignItems=\"center\">\r\n          {isMultiSelect && (\r\n            <FormCheckbox\r\n              name={`checkbox-${task?.taskId || task?.processId}`}\r\n              type=\"checkbox\"\r\n              value={isSelected}\r\n              nestedClasses={{ root: classes.checkbox }}\r\n            />\r\n          )}\r\n          <Link text={task?.taskRef} color=\"secondary\" onClick={handlers.clickTask(task)} />\r\n        </Box>\r\n      </TableCell>\r\n      <TableCell {...columnProps('createdOn')}>\r\n        {utils.string.t('format.date', { value: { date: task.createdOn, format: config.ui.format.date.text } })}\r\n      </TableCell>\r\n      <TableCell {...columnProps('taskType')}>{task?.taskType}</TableCell>\r\n\r\n      <TableCell {...columnProps('description')} title={task?.description} nestedClasses={{ root: classes.description }}>\r\n        {task?.description}\r\n      </TableCell>\r\n\r\n      <TableCell {...columnProps('targetDueDate')} className={getStatus(task)?.dateAlert ? classes.dateAlert : ''}>\r\n        {utils.string.t('format.date', { value: { date: task.targetDueDate, format: config.ui.format.date.text } })}\r\n      </TableCell>\r\n      <TableCell {...columnProps('assignee')}>{task?.assigneeFullName?.trim()}</TableCell>\r\n      <TableCell {...columnProps('processRef')}>{task?.processRef}</TableCell>\r\n      <TableCell {...columnProps('priority')}>{task?.priority}</TableCell>\r\n      <TableCell {...columnProps('actions')}>\r\n        <PopoverMenu\r\n          id=\"search-menu-list\"\r\n          anchorOrigin={{\r\n            vertical: 'bottom',\r\n            horizontal: 'left',\r\n          }}\r\n          transformOrigin={{\r\n            vertical: 'top',\r\n            horizontal: 'right',\r\n          }}\r\n          items={taskActionItems}\r\n        />\r\n      </TableCell>\r\n    </TableRow>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}