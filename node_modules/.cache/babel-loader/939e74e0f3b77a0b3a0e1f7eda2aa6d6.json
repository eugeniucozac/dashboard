{"ast":null,"code":"import _classCallCheck from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport isEmpty from 'lodash/isEmpty';\nimport difference from 'lodash/difference'; // app\n\nimport * as constants from 'consts'; // state\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    userRole: state.user.role\n  };\n};\n\nvar restrictedPropsCheck = function restrictedPropsCheck(type) {\n  return function (props, propName, componentName) {\n    var otherType = type === 'include' ? 'exclude' : 'include';\n    var allowed = [constants.ROLE_BROKER, constants.ROLE_COBROKER, constants.ROLE_UNDERWRITER];\n\n    if (!props[propName] && !props[otherType]) {\n      return new Error(\"One of 'include' or 'exclude' is required by '\".concat(componentName, \"' component.\"));\n    }\n\n    if (props[propName]) {\n      var errorMsg = '';\n\n      if (props['otherType'] && props['otherType'].length > 0) {\n        return new Error(\"'\".concat(componentName, \"' only expects one of props 'include' and 'exclude'. Please provide a single prop.\"));\n      }\n\n      if (!Array.isArray(props[propName])) {\n        return new Error(\"Invalid prop '\".concat(propName, \"' of type '\").concat(typeof props[propName], \"' supplied to '\").concat(componentName, \"', expected 'array'.\"));\n      }\n\n      props[propName].forEach(function (str, index) {\n        if (!allowed.includes(str)) {\n          errorMsg = \"Invalid prop '\".concat(propName, \"[\").concat(index, \"]' of value '\").concat(str, \"' supplied to '\").concat(componentName, \"', expected one of \").concat(JSON.stringify(allowed), \".\");\n        }\n      });\n\n      if (errorMsg) {\n        return new Error(errorMsg);\n      }\n    }\n\n    return null;\n  };\n};\n\nexport var Restricted = /*#__PURE__*/function (_PureComponent) {\n  _inherits(Restricted, _PureComponent);\n\n  var _super = _createSuper(Restricted);\n\n  function Restricted() {\n    _classCallCheck(this, Restricted);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Restricted, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          include = _this$props.include,\n          exclude = _this$props.exclude;\n      var _this$props2 = this.props,\n          userRole = _this$props2.userRole,\n          children = _this$props2.children;\n      var hasInclude = !isEmpty(include);\n      var hasExclude = !isEmpty(exclude); // if we don't know the user role, we hide the\n      // restricted content for safety\n\n      if (!userRole) return null; // if there's no include/exclude prop, we display the content\n\n      if (!hasInclude && !hasExclude) return children; // if we have both include/exclude, remove the exclude from the allowed (include) list\n\n      if (hasInclude && hasExclude) {\n        include = difference(include, exclude);\n        exclude = [];\n        hasExclude = false;\n      } // check if user is included or excluded from seeing the content\n\n\n      if (hasInclude && include.includes(userRole) || hasExclude && !exclude.includes(userRole)) {\n        return children;\n      }\n\n      return null;\n    }\n  }]);\n\n  return Restricted;\n}(PureComponent);\nRestricted.propTypes = {\n  include: restrictedPropsCheck('include'),\n  exclude: restrictedPropsCheck('exclude')\n};\nexport default compose(connect(mapStateToProps, null))(Restricted);","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/Restricted/Restricted.js"],"names":["PureComponent","connect","compose","isEmpty","difference","constants","mapStateToProps","state","userRole","user","role","restrictedPropsCheck","type","props","propName","componentName","otherType","allowed","ROLE_BROKER","ROLE_COBROKER","ROLE_UNDERWRITER","Error","errorMsg","length","Array","isArray","forEach","str","index","includes","JSON","stringify","Restricted","include","exclude","children","hasInclude","hasExclude","propTypes"],"mappings":";;;;AAAA,SAASA,aAAT,QAA8B,OAA9B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,UAAP,MAAuB,mBAAvB,C,CAEA;;AACA,OAAO,KAAKC,SAAZ,MAA2B,QAA3B,C,CAEA;;AACA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SAAY;AAClCC,IAAAA,QAAQ,EAAED,KAAK,CAACE,IAAN,CAAWC;AADa,GAAZ;AAAA,CAAxB;;AAIA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,IAAD;AAAA,SAAU,UAACC,KAAD,EAAQC,QAAR,EAAkBC,aAAlB,EAAoC;AACzE,QAAMC,SAAS,GAAGJ,IAAI,KAAK,SAAT,GAAqB,SAArB,GAAiC,SAAnD;AACA,QAAMK,OAAO,GAAG,CAACZ,SAAS,CAACa,WAAX,EAAwBb,SAAS,CAACc,aAAlC,EAAiDd,SAAS,CAACe,gBAA3D,CAAhB;;AAEA,QAAI,CAACP,KAAK,CAACC,QAAD,CAAN,IAAoB,CAACD,KAAK,CAACG,SAAD,CAA9B,EAA2C;AACzC,aAAO,IAAIK,KAAJ,yDAA2DN,aAA3D,kBAAP;AACD;;AAED,QAAIF,KAAK,CAACC,QAAD,CAAT,EAAqB;AACnB,UAAIQ,QAAQ,GAAG,EAAf;;AAEA,UAAIT,KAAK,CAAC,WAAD,CAAL,IAAsBA,KAAK,CAAC,WAAD,CAAL,CAAmBU,MAAnB,GAA4B,CAAtD,EAAyD;AACvD,eAAO,IAAIF,KAAJ,YAAcN,aAAd,wFAAP;AACD;;AAED,UAAI,CAACS,KAAK,CAACC,OAAN,CAAcZ,KAAK,CAACC,QAAD,CAAnB,CAAL,EAAqC;AACnC,eAAO,IAAIO,KAAJ,yBAA2BP,QAA3B,wBAAiD,OAAOD,KAAK,CAACC,QAAD,CAA7D,4BAAyFC,aAAzF,0BAAP;AACD;;AAEDF,MAAAA,KAAK,CAACC,QAAD,CAAL,CAAgBY,OAAhB,CAAwB,UAACC,GAAD,EAAMC,KAAN,EAAgB;AACtC,YAAI,CAACX,OAAO,CAACY,QAAR,CAAiBF,GAAjB,CAAL,EAA4B;AAC1BL,UAAAA,QAAQ,2BAAoBR,QAApB,cAAgCc,KAAhC,0BAAqDD,GAArD,4BAA0EZ,aAA1E,gCAA6Ge,IAAI,CAACC,SAAL,CACnHd,OADmH,CAA7G,MAAR;AAGD;AACF,OAND;;AAQA,UAAIK,QAAJ,EAAc;AACZ,eAAO,IAAID,KAAJ,CAAUC,QAAV,CAAP;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAhC4B;AAAA,CAA7B;;AAkCA,WAAaU,UAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WAME,kBAAS;AAAA,wBACoB,KAAKnB,KADzB;AAAA,UACDoB,OADC,eACDA,OADC;AAAA,UACQC,OADR,eACQA,OADR;AAAA,yBAEwB,KAAKrB,KAF7B;AAAA,UAECL,QAFD,gBAECA,QAFD;AAAA,UAEW2B,QAFX,gBAEWA,QAFX;AAIP,UAAIC,UAAU,GAAG,CAACjC,OAAO,CAAC8B,OAAD,CAAzB;AACA,UAAII,UAAU,GAAG,CAAClC,OAAO,CAAC+B,OAAD,CAAzB,CALO,CAOP;AACA;;AACA,UAAI,CAAC1B,QAAL,EAAe,OAAO,IAAP,CATR,CAWP;;AACA,UAAI,CAAC4B,UAAD,IAAe,CAACC,UAApB,EAAgC,OAAOF,QAAP,CAZzB,CAcP;;AACA,UAAIC,UAAU,IAAIC,UAAlB,EAA8B;AAC5BJ,QAAAA,OAAO,GAAG7B,UAAU,CAAC6B,OAAD,EAAUC,OAAV,CAApB;AACAA,QAAAA,OAAO,GAAG,EAAV;AACAG,QAAAA,UAAU,GAAG,KAAb;AACD,OAnBM,CAqBP;;;AACA,UAAKD,UAAU,IAAIH,OAAO,CAACJ,QAAR,CAAiBrB,QAAjB,CAAf,IAA+C6B,UAAU,IAAI,CAACH,OAAO,CAACL,QAAR,CAAiBrB,QAAjB,CAAlE,EAA+F;AAC7F,eAAO2B,QAAP;AACD;;AAED,aAAO,IAAP;AACD;AAjCH;;AAAA;AAAA,EAAgCnC,aAAhC;AAAagC,U,CACJM,S,GAAY;AACjBL,EAAAA,OAAO,EAAEtB,oBAAoB,CAAC,SAAD,CADZ;AAEjBuB,EAAAA,OAAO,EAAEvB,oBAAoB,CAAC,SAAD;AAFZ,C;AAmCrB,eAAeT,OAAO,CAACD,OAAO,CAACK,eAAD,EAAkB,IAAlB,CAAR,CAAP,CAAwC0B,UAAxC,CAAf","sourcesContent":["import { PureComponent } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport isEmpty from 'lodash/isEmpty';\r\nimport difference from 'lodash/difference';\r\n\r\n// app\r\nimport * as constants from 'consts';\r\n\r\n// state\r\nconst mapStateToProps = (state) => ({\r\n  userRole: state.user.role,\r\n});\r\n\r\nconst restrictedPropsCheck = (type) => (props, propName, componentName) => {\r\n  const otherType = type === 'include' ? 'exclude' : 'include';\r\n  const allowed = [constants.ROLE_BROKER, constants.ROLE_COBROKER, constants.ROLE_UNDERWRITER];\r\n\r\n  if (!props[propName] && !props[otherType]) {\r\n    return new Error(`One of 'include' or 'exclude' is required by '${componentName}' component.`);\r\n  }\r\n\r\n  if (props[propName]) {\r\n    let errorMsg = '';\r\n\r\n    if (props['otherType'] && props['otherType'].length > 0) {\r\n      return new Error(`'${componentName}' only expects one of props 'include' and 'exclude'. Please provide a single prop.`);\r\n    }\r\n\r\n    if (!Array.isArray(props[propName])) {\r\n      return new Error(`Invalid prop '${propName}' of type '${typeof props[propName]}' supplied to '${componentName}', expected 'array'.`);\r\n    }\r\n\r\n    props[propName].forEach((str, index) => {\r\n      if (!allowed.includes(str)) {\r\n        errorMsg = `Invalid prop '${propName}[${index}]' of value '${str}' supplied to '${componentName}', expected one of ${JSON.stringify(\r\n          allowed\r\n        )}.`;\r\n      }\r\n    });\r\n\r\n    if (errorMsg) {\r\n      return new Error(errorMsg);\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\nexport class Restricted extends PureComponent {\r\n  static propTypes = {\r\n    include: restrictedPropsCheck('include'),\r\n    exclude: restrictedPropsCheck('exclude'),\r\n  };\r\n\r\n  render() {\r\n    let { include, exclude } = this.props;\r\n    const { userRole, children } = this.props;\r\n\r\n    let hasInclude = !isEmpty(include);\r\n    let hasExclude = !isEmpty(exclude);\r\n\r\n    // if we don't know the user role, we hide the\r\n    // restricted content for safety\r\n    if (!userRole) return null;\r\n\r\n    // if there's no include/exclude prop, we display the content\r\n    if (!hasInclude && !hasExclude) return children;\r\n\r\n    // if we have both include/exclude, remove the exclude from the allowed (include) list\r\n    if (hasInclude && hasExclude) {\r\n      include = difference(include, exclude);\r\n      exclude = [];\r\n      hasExclude = false;\r\n    }\r\n\r\n    // check if user is included or excluded from seeing the content\r\n    if ((hasInclude && include.includes(userRole)) || (hasExclude && !exclude.includes(userRole))) {\r\n      return children;\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default compose(connect(mapStateToProps, null))(Restricted);\r\n"]},"metadata":{},"sourceType":"module"}