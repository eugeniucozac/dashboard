{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { authLogout, enqueueNotification, addLoader, removeLoader } from 'stores';\nimport * as utils from 'utils';\nexport var postOpeningMemoPDF = function postOpeningMemoPDF(openingMemoId, pdfOutput) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/openingMemo.actions.postPDF'\n    };\n    dispatch(postOpeningMemoPDFRequest({\n      openingMemoId: openingMemoId,\n      pdfOutput: pdfOutput\n    }));\n    dispatch(addLoader('postOpeningMemoPDF'));\n\n    if (!openingMemoId || !pdfOutput) {\n      dispatch(postOpeningMemoPDFFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Data missing for multi-part POST request'\n      })));\n      dispatch(enqueueNotification('notification.openingMemo.postPdfFail', 'error'));\n      dispatch(removeLoader('postOpeningMemoPDF'));\n      return;\n    }\n\n    var form = new FormData();\n    var newFile = new File([pdfOutput], \"opening-memo-\".concat(openingMemoId, \"}.pdf\"), {\n      type: 'application/pdf',\n      lastModified: new Date()\n    });\n    form.append('file', newFile);\n    return utils.api.multiPartPost({\n      token: auth.accessToken,\n      endpoint: endpoint.edge,\n      path: \"api/openingMemo/\".concat(openingMemoId, \"/documents/attachFile\"),\n      data: form\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleData(json);\n    }).then(function (data) {\n      dispatch(postOpeningMemoPDFSuccess(data));\n      dispatch(enqueueNotification('notification.openingMemo.postPdfSuccess', 'success'));\n    })[\"catch\"](function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API multi-part POST error (postOpeningMemoPDF)'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(postOpeningMemoPDFFailure(err));\n      dispatch(enqueueNotification('notification.openingMemo.postPdfFail', 'error'));\n      return err;\n    })[\"finally\"](function () {\n      dispatch(removeLoader('postOpeningMemoPDF'));\n    });\n  };\n};\nexport var postOpeningMemoPDFRequest = function postOpeningMemoPDFRequest(payload) {\n  return {\n    type: 'OPENING_MEMO_PDF_POST_REQUEST',\n    payload: payload\n  };\n};\nexport var postOpeningMemoPDFSuccess = function postOpeningMemoPDFSuccess(payload) {\n  return {\n    type: 'OPENING_MEMO_PDF_POST_SUCCESS',\n    payload: payload\n  };\n};\nexport var postOpeningMemoPDFFailure = function postOpeningMemoPDFFailure(error) {\n  return {\n    type: 'OPENING_MEMO_PDF_POST_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/openingMemo/openingMemo.actions.postPDF.js"],"names":["authLogout","enqueueNotification","addLoader","removeLoader","utils","postOpeningMemoPDF","openingMemoId","pdfOutput","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","postOpeningMemoPDFRequest","postOpeningMemoPDFFailure","message","form","FormData","newFile","File","type","lastModified","Date","append","api","multiPartPost","token","accessToken","edge","path","data","then","response","handleResponse","json","handleData","postOpeningMemoPDFSuccess","err","errorParams","handleError","handleUnauthorized","payload","error"],"mappings":"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","sourcesContent":["import { authLogout, enqueueNotification, addLoader, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const postOpeningMemoPDF = (openingMemoId, pdfOutput) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/openingMemo.actions.postPDF',\r\n  };\r\n\r\n  dispatch(postOpeningMemoPDFRequest({ openingMemoId, pdfOutput }));\r\n  dispatch(addLoader('postOpeningMemoPDF'));\r\n\r\n  if (!openingMemoId || !pdfOutput) {\r\n    dispatch(postOpeningMemoPDFFailure({ ...defaultError, message: 'Data missing for multi-part POST request' }));\r\n    dispatch(enqueueNotification('notification.openingMemo.postPdfFail', 'error'));\r\n    dispatch(removeLoader('postOpeningMemoPDF'));\r\n    return;\r\n  }\r\n\r\n  const form = new FormData();\r\n  const newFile = new File([pdfOutput], `opening-memo-${openingMemoId}}.pdf`, {\r\n    type: 'application/pdf',\r\n    lastModified: new Date(),\r\n  });\r\n\r\n  form.append('file', newFile);\r\n\r\n  return utils.api\r\n    .multiPartPost({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.edge,\r\n      path: `api/openingMemo/${openingMemoId}/documents/attachFile`,\r\n      data: form,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleData(json))\r\n    .then((data) => {\r\n      dispatch(postOpeningMemoPDFSuccess(data));\r\n      dispatch(enqueueNotification('notification.openingMemo.postPdfSuccess', 'success'));\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        ...defaultError,\r\n        message: 'API multi-part POST error (postOpeningMemoPDF)',\r\n      };\r\n\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(postOpeningMemoPDFFailure(err));\r\n      dispatch(enqueueNotification('notification.openingMemo.postPdfFail', 'error'));\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('postOpeningMemoPDF'));\r\n    });\r\n};\r\n\r\nexport const postOpeningMemoPDFRequest = (payload) => {\r\n  return {\r\n    type: 'OPENING_MEMO_PDF_POST_REQUEST',\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const postOpeningMemoPDFSuccess = (payload) => {\r\n  return {\r\n    type: 'OPENING_MEMO_PDF_POST_SUCCESS',\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const postOpeningMemoPDFFailure = (error) => {\r\n  return {\r\n    type: 'OPENING_MEMO_PDF_POST_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}