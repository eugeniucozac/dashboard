{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\TasksManagement\\\\TasksManagement.view.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types'; //app\n\nimport styles from './TasksManagement.styles';\nimport * as utils from 'utils';\nimport { TableActions, TableFilters, TableToolbar, FormLabel, FormRadio, Button, FormAutocompleteMui, FilterChips } from 'components';\nimport { TasksProcessingTable } from 'modules';\nimport { useMedia } from 'hooks'; //mui\n\nimport { makeStyles, Box, Typography, Switch, Grid } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nTasksManagementView.propTypes = {\n  isTaskTeam: PropTypes.bool.isRequired,\n  hasTasks: PropTypes.bool.isRequired,\n  enableBulkAssign: PropTypes.bool.isRequired,\n  fields: PropTypes.array.isRequired,\n  control: PropTypes.object.isRequired,\n  taskTypeValue: PropTypes.string.isRequired,\n  tasks: PropTypes.object.isRequired,\n  sort: PropTypes.object.isRequired,\n  columnsArray: PropTypes.array.isRequired,\n  columnProps: PropTypes.func.isRequired,\n  tableFilterFields: PropTypes.array.isRequired,\n  isFetchingFilters: PropTypes.bool.isRequired,\n  isPremiumProcessing: PropTypes.bool,\n  notificationRefId: PropTypes.string,\n  resetKey: PropTypes.number,\n  handlers: PropTypes.shape({\n    toggleColumn: PropTypes.func.isRequired,\n    resetFilter: PropTypes.func.isRequired,\n    resetSearch: PropTypes.func.isRequired,\n    handleSearch: PropTypes.func.isRequired,\n    handleSearchFilter: PropTypes.func.isRequired,\n    handleChangePage: PropTypes.func.isRequired,\n    handleChangeRowsPerPage: PropTypes.func.isRequired,\n    handleSort: PropTypes.func.isRequired,\n    setTaskType: PropTypes.func.isRequired,\n    refreshTasksGrid: PropTypes.func.isRequired,\n    handleBulkAssign: PropTypes.func.isRequired,\n    handleUpdateTaskPriority: PropTypes.func,\n    premiumProcessingSaveAssignee: PropTypes.func,\n    resetNotificationFilters: PropTypes.func,\n    toggleCheckSigning: PropTypes.func\n  }).isRequired,\n  isCheckSigningValue: PropTypes.bool\n};\nexport function TasksManagementView(_ref) {\n  _s();\n\n  var isTaskTeam = _ref.isTaskTeam,\n      hasTasks = _ref.hasTasks,\n      enableBulkAssign = _ref.enableBulkAssign,\n      fields = _ref.fields,\n      control = _ref.control,\n      taskTypeValue = _ref.taskTypeValue,\n      tasks = _ref.tasks,\n      sort = _ref.sort,\n      columnsArray = _ref.columnsArray,\n      columnProps = _ref.columnProps,\n      tableFilterFields = _ref.tableFilterFields,\n      isFetchingFilters = _ref.isFetchingFilters,\n      isPremiumProcessing = _ref.isPremiumProcessing,\n      notificationRefId = _ref.notificationRefId,\n      resetKey = _ref.resetKey,\n      handlers = _ref.handlers,\n      isCheckSigningValue = _ref.isCheckSigningValue;\n  var media = useMedia();\n  var classes = makeStyles(styles, {\n    name: 'TasksManagement'\n  })({\n    isMobile: media.mobile\n  });\n  useEffect(function () {\n    if (taskTypeValue) {\n      handlers.setTaskType(taskTypeValue);\n    }\n  }, [taskTypeValue]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var clearNotificationLabelData = [];\n\n  if (isPremiumProcessing && notificationRefId) {\n    clearNotificationLabelData.push(\"\".concat(utils.string.t('globalNotification.filterByCaseId', {\n      id: notificationRefId\n    })));\n  }\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    mt: 3,\n    \"data-testid\": \"tasks-management\",\n    children: [isPremiumProcessing && notificationRefId && /*#__PURE__*/_jsxDEV(Box, {\n      children: /*#__PURE__*/_jsxDEV(FilterChips, {\n        items: clearNotificationLabelData.map(function (l) {\n          return {\n            value: l,\n            label: l\n          };\n        }),\n        handleRemoveItems: function handleRemoveItems(item) {\n          if (item) {\n            handlers.resetNotificationFilters();\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this), !isPremiumProcessing ? /*#__PURE__*/_jsxDEV(TableToolbar, {\n      children: [/*#__PURE__*/_jsxDEV(TableActions, {\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(FormLabel, {\n              label: \"\".concat(utils.string.t('app.view'), \": \"),\n              align: \"left\",\n              nestedClasses: {\n                root: classes.viewLabel\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(FormRadio, _objectSpread(_objectSpread({}, utils.form.getFieldProps(fields, 'taskType')), {}, {\n              control: control\n            }), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TableFilters, {\n        search: true,\n        searchBy: /*#__PURE__*/_jsxDEV(Box, {\n          className: classes.filterBox,\n          children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n            label: \"\".concat(utils.string.t('claims.searchByClaims.label'), \"*\"),\n            nestedClasses: {\n              root: classes.optionLabel\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(FormAutocompleteMui, _objectSpread(_objectSpread({}, utils.form.getFieldProps(fields, 'searchType')), {}, {\n            control: control,\n            nestedClasses: {\n              root: classes.selectAutocomplete\n            }\n          }), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 15\n        }, this),\n        searchPlaceholder: !isTaskTeam ? utils.string.t('claims.searchTasks') : utils.string.t('claims.searchTeamTasks'),\n        searchMinChars: 4,\n        nestedClasses: {\n          searchMaxWidth: classes.searchMaxWidth,\n          searchLeft: classes.searchLeft\n        },\n        columns: true,\n        filters: true,\n        isFetchingFilters: isFetchingFilters,\n        filtersArray: tableFilterFields,\n        clearFilterKey: resetKey,\n        isPremiumProcessing: isPremiumProcessing,\n        columnsArray: isPremiumProcessing ? columnsArray === null || columnsArray === void 0 ? void 0 : columnsArray.slice(1).sort(function (a, b) {\n          var _a$label;\n\n          return (_a$label = a.label) === null || _a$label === void 0 ? void 0 : _a$label.localeCompare(b.label);\n        }) : columnsArray === null || columnsArray === void 0 ? void 0 : columnsArray.slice(1),\n        handlers: {\n          onSearch: handlers.handleSearch,\n          onResetFilter: handlers.resetFilter,\n          onResetSearch: handlers.resetSearch,\n          onFilter: function onFilter(values) {\n            return handlers.handleSearchFilter(values);\n          },\n          onToggleColumn: handlers.toggleColumn\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(TableToolbar, {\n      children: [/*#__PURE__*/_jsxDEV(TableActions, {\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(FormLabel, {\n              label: \"\".concat(utils.string.t('app.view'), \": \"),\n              align: \"left\",\n              nestedClasses: {\n                root: classes.viewLabel\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(FormRadio, _objectSpread(_objectSpread({}, utils.form.getFieldProps(fields, 'taskType')), {}, {\n              control: control\n            }), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TableFilters, {\n        search: true,\n        searchBy: /*#__PURE__*/_jsxDEV(Box, {\n          className: classes.filterBox,\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              className: classes.optionLabel,\n              children: \"\".concat(utils.string.t('claims.searchByClaims.label'), \"*\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            children: /*#__PURE__*/_jsxDEV(FormAutocompleteMui, _objectSpread(_objectSpread({}, utils.form.getFieldProps(fields, 'searchType')), {}, {\n              control: control,\n              nestedClasses: {\n                root: classes.selectAutocomplete\n              }\n            }), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 15\n        }, this),\n        searchPlaceholder: utils.string.t('premiumProcessing.premiumProcessingSearchPlaceHolder'),\n        searchMinChars: 4,\n        nestedClasses: {\n          searchMaxWidth: classes.searchMaxWidth,\n          searchLeft: classes.searchLeft\n        },\n        columns: true,\n        filters: true,\n        isFetchingFilters: isFetchingFilters,\n        filtersArray: tableFilterFields,\n        clearFilterKey: resetKey,\n        isPremiumProcessing: isPremiumProcessing,\n        columnsArray: isPremiumProcessing ? columnsArray === null || columnsArray === void 0 ? void 0 : columnsArray.slice(1).sort(function (a, b) {\n          var _a$label2;\n\n          return (_a$label2 = a.label) === null || _a$label2 === void 0 ? void 0 : _a$label2.localeCompare(b.label);\n        }) : columnsArray === null || columnsArray === void 0 ? void 0 : columnsArray.slice(1),\n        handlers: {\n          onSearch: handlers.handleSearch,\n          onResetFilter: handlers.resetFilter,\n          onResetSearch: handlers.resetSearch,\n          onFilter: function onFilter(values) {\n            return handlers.handleSearchFilter(values);\n          },\n          onToggleColumn: handlers.toggleColumn\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }, this), isPremiumProcessing && /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"flexStart\",\n      alignItems: \"baseline\",\n      className: classes.multiSelectContainer,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        className: classes.multiSelectTitle,\n        children: utils.string.t('premiumProcessing.checkSigning')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Switch, {\n        className: classes.defaultSwitch,\n        checked: isCheckSigningValue,\n        onChange: function onChange(event) {\n          return handlers.toggleCheckSigning(event);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(TasksProcessingTable, {\n      isTaskTeam: isTaskTeam,\n      tasks: tasks,\n      cols: columnsArray,\n      columnProps: columnProps,\n      handleUpdateTaskPriority: handlers.handleUpdateTaskPriority,\n      sort: sort,\n      handleSort: handlers.handleSort,\n      handleChangePage: handlers.handleChangePage,\n      handleChangeRowsPerPage: handlers.handleChangeRowsPerPage,\n      refreshTasksGrid: handlers.refreshTasksGrid,\n      premiumProcessingSaveAssignee: handlers.premiumProcessingSaveAssignee,\n      isPremiumProcessing: isPremiumProcessing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), isPremiumProcessing && hasTasks && isTaskTeam && /*#__PURE__*/_jsxDEV(Button, {\n      color: \"primary\",\n      variant: \"outlined\",\n      disabled: !enableBulkAssign,\n      text: utils.string.t('claims.processing.bulkAssign.button'),\n      \"data-testid\": \"bulk-button\",\n      onClick: handlers.handleBulkAssign\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 9\n    }, this), !isPremiumProcessing && hasTasks && /*#__PURE__*/_jsxDEV(Button, {\n      color: \"primary\",\n      variant: \"outlined\",\n      disabled: !enableBulkAssign,\n      text: utils.string.t('claims.processing.bulkAssign.button'),\n      \"data-testid\": \"bulk-button\",\n      onClick: handlers.handleBulkAssign\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TasksManagementView, \"rTKsHdUmCB64sTLJxtpZgYCrA/w=\", false, function () {\n  return [useMedia];\n});\n\n_c = TasksManagementView;\n\nvar _c;\n\n$RefreshReg$(_c, \"TasksManagementView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/TasksManagement/TasksManagement.view.js"],"names":["React","useEffect","PropTypes","styles","utils","TableActions","TableFilters","TableToolbar","FormLabel","FormRadio","Button","FormAutocompleteMui","FilterChips","TasksProcessingTable","useMedia","makeStyles","Box","Typography","Switch","Grid","TasksManagementView","propTypes","isTaskTeam","bool","isRequired","hasTasks","enableBulkAssign","fields","array","control","object","taskTypeValue","string","tasks","sort","columnsArray","columnProps","func","tableFilterFields","isFetchingFilters","isPremiumProcessing","notificationRefId","resetKey","number","handlers","shape","toggleColumn","resetFilter","resetSearch","handleSearch","handleSearchFilter","handleChangePage","handleChangeRowsPerPage","handleSort","setTaskType","refreshTasksGrid","handleBulkAssign","handleUpdateTaskPriority","premiumProcessingSaveAssignee","resetNotificationFilters","toggleCheckSigning","isCheckSigningValue","media","classes","name","isMobile","mobile","clearNotificationLabelData","push","t","id","map","l","value","label","item","root","viewLabel","form","getFieldProps","filterBox","optionLabel","selectAutocomplete","searchMaxWidth","searchLeft","slice","a","b","localeCompare","onSearch","onResetFilter","onResetSearch","onFilter","values","onToggleColumn","multiSelectContainer","multiSelectTitle","defaultSwitch","event"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n//app\r\nimport styles from './TasksManagement.styles';\r\nimport * as utils from 'utils';\r\nimport { TableActions, TableFilters, TableToolbar, FormLabel, FormRadio, Button, FormAutocompleteMui, FilterChips } from 'components';\r\nimport { TasksProcessingTable } from 'modules';\r\nimport { useMedia } from 'hooks';\r\n\r\n//mui\r\nimport { makeStyles, Box, Typography, Switch, Grid } from '@material-ui/core';\r\n\r\nTasksManagementView.propTypes = {\r\n  isTaskTeam: PropTypes.bool.isRequired,\r\n  hasTasks: PropTypes.bool.isRequired,\r\n  enableBulkAssign: PropTypes.bool.isRequired,\r\n  fields: PropTypes.array.isRequired,\r\n  control: PropTypes.object.isRequired,\r\n  taskTypeValue: PropTypes.string.isRequired,\r\n  tasks: PropTypes.object.isRequired,\r\n  sort: PropTypes.object.isRequired,\r\n  columnsArray: PropTypes.array.isRequired,\r\n  columnProps: PropTypes.func.isRequired,\r\n  tableFilterFields: PropTypes.array.isRequired,\r\n  isFetchingFilters: PropTypes.bool.isRequired,\r\n  isPremiumProcessing: PropTypes.bool,\r\n  notificationRefId: PropTypes.string,\r\n  resetKey: PropTypes.number,\r\n  handlers: PropTypes.shape({\r\n    toggleColumn: PropTypes.func.isRequired,\r\n    resetFilter: PropTypes.func.isRequired,\r\n    resetSearch: PropTypes.func.isRequired,\r\n    handleSearch: PropTypes.func.isRequired,\r\n    handleSearchFilter: PropTypes.func.isRequired,\r\n    handleChangePage: PropTypes.func.isRequired,\r\n    handleChangeRowsPerPage: PropTypes.func.isRequired,\r\n    handleSort: PropTypes.func.isRequired,\r\n    setTaskType: PropTypes.func.isRequired,\r\n    refreshTasksGrid: PropTypes.func.isRequired,\r\n    handleBulkAssign: PropTypes.func.isRequired,\r\n    handleUpdateTaskPriority: PropTypes.func,\r\n    premiumProcessingSaveAssignee: PropTypes.func,\r\n    resetNotificationFilters: PropTypes.func,\r\n    toggleCheckSigning: PropTypes.func,\r\n  }).isRequired,\r\n  isCheckSigningValue: PropTypes.bool,\r\n};\r\n\r\nexport function TasksManagementView({\r\n  isTaskTeam,\r\n  hasTasks,\r\n  enableBulkAssign,\r\n  fields,\r\n  control,\r\n  taskTypeValue,\r\n  tasks,\r\n  sort,\r\n  columnsArray,\r\n  columnProps,\r\n  tableFilterFields,\r\n  isFetchingFilters,\r\n  isPremiumProcessing,\r\n  notificationRefId,\r\n  resetKey,\r\n  handlers,\r\n  isCheckSigningValue,\r\n}) {\r\n  const media = useMedia();\r\n  const classes = makeStyles(styles, { name: 'TasksManagement' })({ isMobile: media.mobile });\r\n\r\n  useEffect(() => {\r\n    if (taskTypeValue) {\r\n      handlers.setTaskType(taskTypeValue);\r\n    }\r\n  }, [taskTypeValue]); // eslint-disable-line react-hooks/exhaustive-deps\r\n  let clearNotificationLabelData = [];\r\n  if (isPremiumProcessing && notificationRefId) {\r\n    clearNotificationLabelData.push(`${utils.string.t('globalNotification.filterByCaseId', { id: notificationRefId })}`);\r\n  }\r\n  return (\r\n    <Box mt={3} data-testid=\"tasks-management\">\r\n      {isPremiumProcessing && notificationRefId && (\r\n        <Box>\r\n          <FilterChips\r\n            items={clearNotificationLabelData.map((l) => ({ value: l, label: l }))}\r\n            handleRemoveItems={(item) => {\r\n              if (item) {\r\n                handlers.resetNotificationFilters();\r\n              }\r\n            }}\r\n          />\r\n        </Box>\r\n      )}\r\n\r\n      {!isPremiumProcessing ? (\r\n        <TableToolbar>\r\n          <TableActions>\r\n            <Grid container>\r\n              <Grid item>\r\n                <FormLabel label={`${utils.string.t('app.view')}: `} align=\"left\" nestedClasses={{ root: classes.viewLabel }} />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormRadio {...utils.form.getFieldProps(fields, 'taskType')} control={control} />\r\n              </Grid>\r\n            </Grid>\r\n          </TableActions>\r\n          <TableFilters\r\n            search\r\n            searchBy={\r\n              <Box className={classes.filterBox}>\r\n                <FormLabel label={`${utils.string.t('claims.searchByClaims.label')}*`} nestedClasses={{ root: classes.optionLabel }} />\r\n                <FormAutocompleteMui\r\n                  {...utils.form.getFieldProps(fields, 'searchType')}\r\n                  control={control}\r\n                  nestedClasses={{ root: classes.selectAutocomplete }}\r\n                />\r\n              </Box>\r\n            }\r\n            searchPlaceholder={!isTaskTeam ? utils.string.t('claims.searchTasks') : utils.string.t('claims.searchTeamTasks')}\r\n            searchMinChars={4}\r\n            nestedClasses={{ searchMaxWidth: classes.searchMaxWidth, searchLeft: classes.searchLeft }}\r\n            columns\r\n            filters\r\n            isFetchingFilters={isFetchingFilters}\r\n            filtersArray={tableFilterFields}\r\n            clearFilterKey={resetKey}\r\n            isPremiumProcessing={isPremiumProcessing}\r\n            columnsArray={\r\n              isPremiumProcessing ? columnsArray?.slice(1).sort((a, b) => a.label?.localeCompare(b.label)) : columnsArray?.slice(1)\r\n            }\r\n            handlers={{\r\n              onSearch: handlers.handleSearch,\r\n              onResetFilter: handlers.resetFilter,\r\n              onResetSearch: handlers.resetSearch,\r\n              onFilter: (values) => handlers.handleSearchFilter(values),\r\n              onToggleColumn: handlers.toggleColumn,\r\n            }}\r\n          />\r\n        </TableToolbar>\r\n      ) : (\r\n        <TableToolbar>\r\n          <TableActions>\r\n            <Grid container>\r\n              <Grid item>\r\n                <FormLabel label={`${utils.string.t('app.view')}: `} align=\"left\" nestedClasses={{ root: classes.viewLabel }} />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormRadio {...utils.form.getFieldProps(fields, 'taskType')} control={control} />\r\n              </Grid>\r\n            </Grid>\r\n          </TableActions>\r\n          <TableFilters\r\n            search\r\n            searchBy={\r\n              <Box className={classes.filterBox}>\r\n                <Box>\r\n                  <Typography variant=\"body2\" className={classes.optionLabel}>\r\n                    {`${utils.string.t('claims.searchByClaims.label')}*`}\r\n                  </Typography>\r\n                </Box>\r\n                <Box>\r\n                  <FormAutocompleteMui\r\n                    {...utils.form.getFieldProps(fields, 'searchType')}\r\n                    control={control}\r\n                    nestedClasses={{ root: classes.selectAutocomplete }}\r\n                  />\r\n                </Box>\r\n              </Box>\r\n            }\r\n            searchPlaceholder={utils.string.t('premiumProcessing.premiumProcessingSearchPlaceHolder')}\r\n            searchMinChars={4}\r\n            nestedClasses={{ searchMaxWidth: classes.searchMaxWidth, searchLeft: classes.searchLeft }}\r\n            columns\r\n            filters\r\n            isFetchingFilters={isFetchingFilters}\r\n            filtersArray={tableFilterFields}\r\n            clearFilterKey={resetKey}\r\n            isPremiumProcessing={isPremiumProcessing}\r\n            columnsArray={\r\n              isPremiumProcessing ? columnsArray?.slice(1).sort((a, b) => a.label?.localeCompare(b.label)) : columnsArray?.slice(1)\r\n            }\r\n            handlers={{\r\n              onSearch: handlers.handleSearch,\r\n              onResetFilter: handlers.resetFilter,\r\n              onResetSearch: handlers.resetSearch,\r\n              onFilter: (values) => handlers.handleSearchFilter(values),\r\n              onToggleColumn: handlers.toggleColumn,\r\n            }}\r\n          />\r\n        </TableToolbar>\r\n      )}\r\n      {isPremiumProcessing && (\r\n        <Box display=\"flex\" justifyContent=\"flexStart\" alignItems=\"baseline\" className={classes.multiSelectContainer}>\r\n          <Typography variant=\"body2\" className={classes.multiSelectTitle}>\r\n            {utils.string.t('premiumProcessing.checkSigning')}\r\n          </Typography>\r\n          <Switch\r\n            className={classes.defaultSwitch}\r\n            checked={isCheckSigningValue}\r\n            onChange={(event) => handlers.toggleCheckSigning(event)}\r\n          />\r\n        </Box>\r\n      )}\r\n      <TasksProcessingTable\r\n        isTaskTeam={isTaskTeam}\r\n        tasks={tasks}\r\n        cols={columnsArray}\r\n        columnProps={columnProps}\r\n        handleUpdateTaskPriority={handlers.handleUpdateTaskPriority}\r\n        sort={sort}\r\n        handleSort={handlers.handleSort}\r\n        handleChangePage={handlers.handleChangePage}\r\n        handleChangeRowsPerPage={handlers.handleChangeRowsPerPage}\r\n        refreshTasksGrid={handlers.refreshTasksGrid}\r\n        premiumProcessingSaveAssignee={handlers.premiumProcessingSaveAssignee}\r\n        isPremiumProcessing={isPremiumProcessing}\r\n      />\r\n\r\n      {isPremiumProcessing && hasTasks && isTaskTeam && (\r\n        <Button\r\n          color=\"primary\"\r\n          variant=\"outlined\"\r\n          disabled={!enableBulkAssign}\r\n          text={utils.string.t('claims.processing.bulkAssign.button')}\r\n          data-testid=\"bulk-button\"\r\n          onClick={handlers.handleBulkAssign}\r\n        />\r\n      )}\r\n      {!isPremiumProcessing && hasTasks && (\r\n        <Button\r\n          color=\"primary\"\r\n          variant=\"outlined\"\r\n          disabled={!enableBulkAssign}\r\n          text={utils.string.t('claims.processing.bulkAssign.button')}\r\n          data-testid=\"bulk-button\"\r\n          onClick={handlers.handleBulkAssign}\r\n        />\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}