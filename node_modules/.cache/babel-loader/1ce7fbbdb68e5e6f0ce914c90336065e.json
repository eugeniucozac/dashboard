{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\TaskNotes\\\\TaskNotes.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux'; // app\n\nimport TaskNotesView from './TaskNotes.view';\nimport { MultiSelect, FormDate } from 'components';\nimport { getClaimTaskNotes, selectClaimTaskNotes, selectClaimTaskNotesPagination, selectClaimTaskNotesSort, selectClaimTaskNotesFilters, hideModal, showModal } from 'stores';\nimport { useFlexiColumns, usePagination, useSort } from 'hooks';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nTaskNotes.propTypes = {\n  taskObj: PropTypes.object.isRequired,\n  breadcrumbs: PropTypes.array.isRequired\n};\nexport default function TaskNotes(_ref) {\n  _s();\n\n  var taskObj = _ref.taskObj,\n      breadcrumbs = _ref.breadcrumbs;\n  var dispatch = useDispatch();\n  var users = useSelector(selectClaimTaskNotesFilters);\n  var claimTaskNotes = useSelector(selectClaimTaskNotes);\n  var claimTaskNotesPagination = useSelector(selectClaimTaskNotesPagination);\n  var claimTaskNotesSort = useSelector(selectClaimTaskNotesSort);\n  var isAddNoteDirtyRef = useRef(false);\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      searchText = _useState2[0],\n      setSearchText = _useState2[1];\n\n  var taskId = taskObj.taskId;\n  useEffect(function () {\n    if (taskId) {\n      dispatch(getClaimTaskNotes({\n        taskId: taskId\n      }));\n    }\n  }, [taskId]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var searchSubmit = function searchSubmit(_ref2) {\n    var search = _ref2.search,\n        filters = _ref2.filters;\n    setSearchText(search);\n    dispatch(getClaimTaskNotes({\n      taskId: taskId,\n      query: search,\n      filters: filters\n    }));\n  };\n\n  var resetSubmit = function resetSubmit() {\n    dispatch(getClaimTaskNotes({\n      taskId: taskId,\n      filters: {}\n    }));\n    reset();\n  };\n\n  var sortColumn = function sortColumn(by, dir) {\n    dispatch(getClaimTaskNotes({\n      taskId: taskId,\n      sortBy: by,\n      direction: dir,\n      query: searchText\n    }));\n  };\n\n  var changePage = function changePage(newPage) {\n    dispatch(getClaimTaskNotes({\n      taskId: taskId,\n      page: newPage,\n      query: searchText\n    }));\n  };\n\n  var changeRowsPerPage = function changeRowsPerPage(rowsPerPage) {\n    dispatch(getClaimTaskNotes({\n      taskId: taskId,\n      size: rowsPerPage,\n      query: searchText\n    }));\n  };\n\n  var setIsAddNoteFormDirty = function setIsAddNoteFormDirty(isDirty) {\n    isAddNoteDirtyRef.current = isDirty;\n  };\n\n  var cancelNoteConfirm = function cancelNoteConfirm(modalType) {\n    if (isAddNoteDirtyRef.current) {\n      dispatch(showModal({\n        component: 'CONFIRM',\n        props: {\n          title: utils.string.t('navigation.form.subtitle'),\n          hint: utils.string.t('navigation.form.title'),\n          fullWidth: true,\n          maxWidth: 'xs',\n          componentProps: {\n            cancelLabel: utils.string.t('app.no'),\n            confirmLabel: utils.string.t('app.yes'),\n            submitHandler: function submitHandler() {\n              dispatch(hideModal(modalType));\n            }\n          }\n        }\n      }));\n    } else {\n      dispatch(hideModal(modalType));\n    }\n  };\n\n  var addNote = function addNote() {\n    dispatch(showModal({\n      component: 'ADD_CLAIM_TASK_NOTE',\n      props: {\n        fullWidth: true,\n        maxWidth: 'sm',\n        title: 'claims.notes.addNote',\n        componentProps: {\n          taskObj: taskObj,\n          breadcrumbs: breadcrumbs,\n          setIsDirty: setIsAddNoteFormDirty,\n          confirmHandler: function confirmHandler() {\n            return cancelNoteConfirm('ADD_CLAIM_TASK_NOTE');\n          },\n          clickXHandler: function clickXHandler() {\n            cancelNoteConfirm();\n          },\n          clickOutSideHandler: function clickOutSideHandler() {\n            cancelNoteConfirm();\n          },\n          cancelHandler: function cancelHandler() {\n            cancelNoteConfirm();\n          }\n        }\n      }\n    }));\n  };\n\n  var editNote = function editNote(noteObj) {\n    dispatch(showModal({\n      component: 'EDIT_CLAIM_TASK_NOTE',\n      props: {\n        fullWidth: true,\n        maxWidth: 'sm',\n        title: 'claims.notes.editNote',\n        componentProps: {\n          noteObj: noteObj,\n          breadcrumbs: breadcrumbs,\n          setIsDirty: setIsAddNoteFormDirty,\n          confirmHandler: function confirmHandler() {\n            return cancelNoteConfirm('EDIT_CLAIM_TASK_NOTE');\n          },\n          clickXHandler: function clickXHandler() {\n            cancelNoteConfirm();\n          },\n          clickOutSideHandler: function clickOutSideHandler() {\n            cancelNoteConfirm();\n          },\n          cancelHandler: function cancelHandler() {\n            cancelNoteConfirm();\n          }\n        }\n      }\n    }));\n  };\n\n  var cols = [{\n    id: 'createdDate',\n    sort: {\n      type: 'date',\n      direction: 'desc'\n    },\n    visible: true,\n    label: utils.string.t('claims.notes.columns.dateCreated')\n  }, {\n    id: 'createdByName',\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true,\n    label: utils.string.t('claims.notes.columns.createdBy')\n  }, {\n    id: 'notesDescription',\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true,\n    label: utils.string.t('claims.notes.columns.detail')\n  }, {\n    id: 'updatedDate',\n    sort: {\n      type: 'date',\n      direction: 'asc'\n    },\n    visible: true,\n    label: utils.string.t('claims.notes.columns.dateUpdated')\n  }, {\n    id: 'updatedByName',\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true,\n    label: utils.string.t('claims.notes.columns.updatedBy')\n  }, {\n    id: 'menu',\n    menu: true,\n    visible: true\n  }];\n  var dateFields = [{\n    name: 'createdDate',\n    type: 'datepicker',\n    value: null\n  }, {\n    name: 'updatedDate',\n    type: 'datepicker',\n    value: null\n  }];\n  var defaultValues = utils.form.getInitialValues(dateFields);\n\n  var _useForm = useForm({\n    defaultValues: defaultValues\n  }),\n      control = _useForm.control,\n      reset = _useForm.reset;\n\n  var filtersArray = [{\n    id: 'createdDate',\n    type: 'datepicker',\n    label: utils.string.t('claims.notes.tableFilters.dateCreated'),\n    value: '',\n    content: /*#__PURE__*/_jsxDEV(FormDate, _objectSpread(_objectSpread({\n      control: control\n    }, utils.form.getFieldProps(dateFields, 'createdDate')), {}, {\n      id: \"datepicker\",\n      label: '',\n      plainText: true,\n      plainTextIcon: true,\n      placeholder: utils.string.t('app.selectDate'),\n      muiComponentProps: {\n        fullWidth: false,\n        margin: 'dense'\n      },\n      muiPickerProps: {\n        clearable: false,\n        variant: 'inline',\n        format: 'DD-MM-YYYY'\n      }\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 9\n    }, this)\n  }, {\n    id: 'createdBy',\n    type: 'multiSelect',\n    label: utils.string.t('claims.notes.columns.createdBy'),\n    value: [],\n    options: users === null || users === void 0 ? void 0 : users.createdBy,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"createdBy\",\n      search: true,\n      options: users === null || users === void 0 ? void 0 : users.createdBy\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 16\n    }, this)\n  }, {\n    id: 'updatedDate',\n    type: 'datepicker',\n    label: utils.string.t('claims.notes.tableFilters.lastUpdatedDate'),\n    value: '',\n    content: /*#__PURE__*/_jsxDEV(FormDate, _objectSpread(_objectSpread({\n      control: control\n    }, utils.form.getFieldProps(dateFields, 'updatedDate')), {}, {\n      id: \"updatedDate\",\n      label: '',\n      plainText: true,\n      plainTextIcon: true,\n      placeholder: utils.string.t('app.selectDate'),\n      muiComponentProps: {\n        fullWidth: false,\n        margin: 'dense'\n      },\n      muiPickerProps: {\n        clearable: false,\n        variant: 'inline',\n        format: 'DD-MM-YYYY'\n      }\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 9\n    }, this)\n  }, {\n    id: 'lastUpdatedBy',\n    type: 'multiSelect',\n    label: utils.string.t('claims.notes.columns.updatedBy'),\n    value: [],\n    options: users === null || users === void 0 ? void 0 : users.updatedBy,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"lastUpdatedBy\",\n      search: true,\n      options: users === null || users === void 0 ? void 0 : users.updatedBy\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 16\n    }, this)\n  }];\n\n  var _useFlexiColumns = useFlexiColumns(cols),\n      columnsArray = _useFlexiColumns.columns,\n      columnProps = _useFlexiColumns.columnProps;\n\n  var _useSort = useSort(columnsArray, claimTaskNotesSort, sortColumn),\n      colsSorted = _useSort.cols,\n      sort = _useSort.sort;\n\n  var pagination = usePagination(claimTaskNotes, claimTaskNotesPagination, changePage, changeRowsPerPage);\n  return /*#__PURE__*/_jsxDEV(TaskNotesView, {\n    notes: claimTaskNotes,\n    cols: colsSorted,\n    columnProps: columnProps,\n    filtersArray: filtersArray,\n    sort: sort,\n    pagination: pagination,\n    handlers: {\n      addNote: addNote,\n      editNote: editNote,\n      searchSubmit: searchSubmit,\n      resetSubmit: resetSubmit\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 278,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TaskNotes, \"z6kTGIsWw5jbBF1kMTDFc3ru1NU=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useForm, useFlexiColumns, useSort, usePagination];\n});\n\n_c = TaskNotes;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskNotes\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/TaskNotes/TaskNotes.js"],"names":["React","useEffect","useState","useRef","PropTypes","useForm","useDispatch","useSelector","TaskNotesView","MultiSelect","FormDate","getClaimTaskNotes","selectClaimTaskNotes","selectClaimTaskNotesPagination","selectClaimTaskNotesSort","selectClaimTaskNotesFilters","hideModal","showModal","useFlexiColumns","usePagination","useSort","utils","TaskNotes","propTypes","taskObj","object","isRequired","breadcrumbs","array","dispatch","users","claimTaskNotes","claimTaskNotesPagination","claimTaskNotesSort","isAddNoteDirtyRef","searchText","setSearchText","taskId","searchSubmit","search","filters","query","resetSubmit","reset","sortColumn","by","dir","sortBy","direction","changePage","newPage","page","changeRowsPerPage","rowsPerPage","size","setIsAddNoteFormDirty","isDirty","current","cancelNoteConfirm","modalType","component","props","title","string","t","hint","fullWidth","maxWidth","componentProps","cancelLabel","confirmLabel","submitHandler","addNote","setIsDirty","confirmHandler","clickXHandler","clickOutSideHandler","cancelHandler","editNote","noteObj","cols","id","sort","type","visible","label","menu","dateFields","name","value","defaultValues","form","getInitialValues","control","filtersArray","content","getFieldProps","margin","clearable","variant","format","options","createdBy","updatedBy","columnsArray","columns","columnProps","colsSorted","pagination"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n// app\r\nimport TaskNotesView from './TaskNotes.view';\r\nimport { MultiSelect, FormDate } from 'components';\r\nimport {\r\n  getClaimTaskNotes,\r\n  selectClaimTaskNotes,\r\n  selectClaimTaskNotesPagination,\r\n  selectClaimTaskNotesSort,\r\n  selectClaimTaskNotesFilters,\r\n  hideModal,\r\n  showModal,\r\n} from 'stores';\r\nimport { useFlexiColumns, usePagination, useSort } from 'hooks';\r\nimport * as utils from 'utils';\r\n\r\nTaskNotes.propTypes = {\r\n  taskObj: PropTypes.object.isRequired,\r\n  breadcrumbs: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default function TaskNotes({ taskObj, breadcrumbs }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const users = useSelector(selectClaimTaskNotesFilters);\r\n  const claimTaskNotes = useSelector(selectClaimTaskNotes);\r\n  const claimTaskNotesPagination = useSelector(selectClaimTaskNotesPagination);\r\n  const claimTaskNotesSort = useSelector(selectClaimTaskNotesSort);\r\n\r\n  const isAddNoteDirtyRef = useRef(false);\r\n  const [searchText, setSearchText] = useState('');\r\n\r\n  const { taskId } = taskObj;\r\n\r\n  useEffect(() => {\r\n    if (taskId) {\r\n      dispatch(getClaimTaskNotes({ taskId }));\r\n    }\r\n  }, [taskId]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const searchSubmit = ({ search, filters }) => {\r\n    setSearchText(search);\r\n    dispatch(getClaimTaskNotes({ taskId, query: search, filters }));\r\n  };\r\n\r\n  const resetSubmit = () => {\r\n    dispatch(getClaimTaskNotes({ taskId, filters: {} }));\r\n    reset();\r\n  };\r\n\r\n  const sortColumn = (by, dir) => {\r\n    dispatch(getClaimTaskNotes({ taskId, sortBy: by, direction: dir, query: searchText }));\r\n  };\r\n\r\n  const changePage = (newPage) => {\r\n    dispatch(getClaimTaskNotes({ taskId, page: newPage, query: searchText }));\r\n  };\r\n\r\n  const changeRowsPerPage = (rowsPerPage) => {\r\n    dispatch(getClaimTaskNotes({ taskId, size: rowsPerPage, query: searchText }));\r\n  };\r\n\r\n  const setIsAddNoteFormDirty = (isDirty) => {\r\n    isAddNoteDirtyRef.current = isDirty;\r\n  };\r\n\r\n  const cancelNoteConfirm = (modalType) => {\r\n    if (isAddNoteDirtyRef.current) {\r\n      dispatch(\r\n        showModal({\r\n          component: 'CONFIRM',\r\n          props: {\r\n            title: utils.string.t('navigation.form.subtitle'),\r\n            hint: utils.string.t('navigation.form.title'),\r\n            fullWidth: true,\r\n            maxWidth: 'xs',\r\n            componentProps: {\r\n              cancelLabel: utils.string.t('app.no'),\r\n              confirmLabel: utils.string.t('app.yes'),\r\n              submitHandler: () => {\r\n                dispatch(hideModal(modalType));\r\n              },\r\n            },\r\n          },\r\n        })\r\n      );\r\n    } else {\r\n      dispatch(hideModal(modalType));\r\n    }\r\n  };\r\n\r\n  const addNote = () => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'ADD_CLAIM_TASK_NOTE',\r\n        props: {\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          title: 'claims.notes.addNote',\r\n          componentProps: {\r\n            taskObj,\r\n            breadcrumbs,\r\n            setIsDirty: setIsAddNoteFormDirty,\r\n            confirmHandler: () => cancelNoteConfirm('ADD_CLAIM_TASK_NOTE'),\r\n            clickXHandler: () => {\r\n              cancelNoteConfirm();\r\n            },\r\n            clickOutSideHandler: () => {\r\n              cancelNoteConfirm();\r\n            },\r\n            cancelHandler: () => {\r\n              cancelNoteConfirm();\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const editNote = (noteObj) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'EDIT_CLAIM_TASK_NOTE',\r\n        props: {\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          title: 'claims.notes.editNote',\r\n          componentProps: {\r\n            noteObj,\r\n            breadcrumbs,\r\n            setIsDirty: setIsAddNoteFormDirty,\r\n            confirmHandler: () => cancelNoteConfirm('EDIT_CLAIM_TASK_NOTE'),\r\n            clickXHandler: () => {\r\n              cancelNoteConfirm();\r\n            },\r\n            clickOutSideHandler: () => {\r\n              cancelNoteConfirm();\r\n            },\r\n            cancelHandler: () => {\r\n              cancelNoteConfirm();\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const cols = [\r\n    {\r\n      id: 'createdDate',\r\n      sort: { type: 'date', direction: 'desc' },\r\n      visible: true,\r\n      label: utils.string.t('claims.notes.columns.dateCreated'),\r\n    },\r\n    {\r\n      id: 'createdByName',\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: true,\r\n      label: utils.string.t('claims.notes.columns.createdBy'),\r\n    },\r\n    {\r\n      id: 'notesDescription',\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: true,\r\n      label: utils.string.t('claims.notes.columns.detail'),\r\n    },\r\n    {\r\n      id: 'updatedDate',\r\n      sort: { type: 'date', direction: 'asc' },\r\n      visible: true,\r\n      label: utils.string.t('claims.notes.columns.dateUpdated'),\r\n    },\r\n    {\r\n      id: 'updatedByName',\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: true,\r\n      label: utils.string.t('claims.notes.columns.updatedBy'),\r\n    },\r\n    { id: 'menu', menu: true, visible: true },\r\n  ];\r\n\r\n  const dateFields = [\r\n    {\r\n      name: 'createdDate',\r\n      type: 'datepicker',\r\n      value: null,\r\n    },\r\n    {\r\n      name: 'updatedDate',\r\n      type: 'datepicker',\r\n      value: null,\r\n    },\r\n  ];\r\n\r\n  const defaultValues = utils.form.getInitialValues(dateFields);\r\n  const { control, reset } = useForm({ defaultValues });\r\n\r\n  const filtersArray = [\r\n    {\r\n      id: 'createdDate',\r\n      type: 'datepicker',\r\n      label: utils.string.t('claims.notes.tableFilters.dateCreated'),\r\n      value: '',\r\n      content: (\r\n        <FormDate\r\n          control={control}\r\n          {...utils.form.getFieldProps(dateFields, 'createdDate')}\r\n          id=\"datepicker\"\r\n          label={''}\r\n          plainText\r\n          plainTextIcon\r\n          placeholder={utils.string.t('app.selectDate')}\r\n          muiComponentProps={{\r\n            fullWidth: false,\r\n            margin: 'dense',\r\n          }}\r\n          muiPickerProps={{\r\n            clearable: false,\r\n            variant: 'inline',\r\n            format: 'DD-MM-YYYY',\r\n          }}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      id: 'createdBy',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('claims.notes.columns.createdBy'),\r\n      value: [],\r\n      options: users?.createdBy,\r\n      content: <MultiSelect id=\"createdBy\" search options={users?.createdBy} />,\r\n    },\r\n    {\r\n      id: 'updatedDate',\r\n      type: 'datepicker',\r\n      label: utils.string.t('claims.notes.tableFilters.lastUpdatedDate'),\r\n      value: '',\r\n      content: (\r\n        <FormDate\r\n          control={control}\r\n          {...utils.form.getFieldProps(dateFields, 'updatedDate')}\r\n          id=\"updatedDate\"\r\n          label={''}\r\n          plainText\r\n          plainTextIcon\r\n          placeholder={utils.string.t('app.selectDate')}\r\n          muiComponentProps={{\r\n            fullWidth: false,\r\n            margin: 'dense',\r\n          }}\r\n          muiPickerProps={{\r\n            clearable: false,\r\n            variant: 'inline',\r\n            format: 'DD-MM-YYYY',\r\n          }}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      id: 'lastUpdatedBy',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('claims.notes.columns.updatedBy'),\r\n      value: [],\r\n      options: users?.updatedBy,\r\n      content: <MultiSelect id=\"lastUpdatedBy\" search options={users?.updatedBy} />,\r\n    },\r\n  ];\r\n\r\n  const { columns: columnsArray, columnProps } = useFlexiColumns(cols);\r\n  const { cols: colsSorted, sort } = useSort(columnsArray, claimTaskNotesSort, sortColumn);\r\n  const pagination = usePagination(claimTaskNotes, claimTaskNotesPagination, changePage, changeRowsPerPage);\r\n\r\n  return (\r\n    <TaskNotesView\r\n      notes={claimTaskNotes}\r\n      cols={colsSorted}\r\n      columnProps={columnProps}\r\n      filtersArray={filtersArray}\r\n      sort={sort}\r\n      pagination={pagination}\r\n      handlers={{\r\n        addNote,\r\n        editNote,\r\n        searchSubmit,\r\n        resetSubmit,\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}