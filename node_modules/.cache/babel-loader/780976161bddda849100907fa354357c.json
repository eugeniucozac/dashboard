{"ast":null,"code":"import _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\TaskCheckList\\\\TaskCheckList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport * as Yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport xorBy from 'lodash/xorBy';\nimport { useHistory } from 'react-router'; //app\n\nimport { TaskCheckListView } from './TaskCheckList.view';\nimport { showModal, hideModal, getTaskChecklist, getNextTaskList, selectTaskCheckList, selectTaskNextActionList, selectUserOrganisation, resetTaskProcessingChecklistChanges, postSaveTaskCheckListActions, postSaveNextTaskAction, postCloseClaim, getCurrencyPurchasedValue, selectClaimsFnolPushBackRoute } from 'stores';\nimport { FormCheckbox } from 'components';\nimport * as utils from 'utils';\nimport { ORGANIZATIONS, TASK_CHECKLIST_WARNINGS, CLOSE_CLAIM, ADVICE_AND_SETTLEMENT, TASK_TAB_COMPLETED_STATUS, CLAIMS_FNOL_PUSH_BACK_ROUTES } from 'consts';\nimport config from 'config'; //mui\n\nimport { Box } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nTaskCheckList.propTypes = {\n  task: PropTypes.object.isRequired,\n  currencyPurchasedValue: PropTypes.string.isRequired,\n  isCurrencyChanged: PropTypes.bool.isRequired,\n  isDirtyRef: PropTypes.bool.isRequired,\n  setIsDirty: PropTypes.func.isRequired,\n  handleDirtyCheck: PropTypes.func.isRequired\n};\nexport default function TaskCheckList(_ref) {\n  _s();\n\n  var task = _ref.task,\n      currencyPurchasedValue = _ref.currencyPurchasedValue,\n      isCurrencyChanged = _ref.isCurrencyChanged,\n      isDirtyRef = _ref.isDirtyRef,\n      setIsDirty = _ref.setIsDirty,\n      handleDirtyCheck = _ref.handleDirtyCheck;\n  var dispatch = useDispatch();\n  var history = useHistory();\n  var taskCheckList = useSelector(selectTaskCheckList);\n  var taskNextActionList = useSelector(selectTaskNextActionList);\n  var userOrgDetail = useSelector(selectUserOrganisation);\n  var pushBackRoute = useSelector(selectClaimsFnolPushBackRoute);\n  var taskCode = task === null || task === void 0 ? void 0 : task.taskDefKey;\n  var taskId = task === null || task === void 0 ? void 0 : task.taskId;\n  var userOrgName = (userOrgDetail === null || userOrgDetail === void 0 ? void 0 : userOrgDetail.name.toLowerCase()) || ORGANIZATIONS.mphasis.name;\n  var isMphasisUser = userOrgName === ORGANIZATIONS.mphasis.name;\n  var saveType = {\n    checkList: 'checkList',\n    nextAction: 'nextAction',\n    completeTask: 'completeTask'\n  };\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      allSelectionFlag = _useState2[0],\n      setAllSelectionFlag = _useState2[1];\n\n  var _useState3 = useState(!isMphasisUser),\n      _useState4 = _slicedToArray(_useState3, 2),\n      nextActionFlag = _useState4[0],\n      setNextActionFlag = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      mandatoryList = _useState6[0],\n      setMandatoryList = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      nextActionVal = _useState8[0],\n      setNextActionVal = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      checkListChanges = _useState10[0],\n      setCheckListChanges = _useState10[1];\n\n  var fields = utils.generic.isValidArray(taskCheckList, true) ? taskCheckList.map(function (eachCheck) {\n    return {\n      name: eachCheck === null || eachCheck === void 0 ? void 0 : eachCheck.actionListID.toString(),\n      type: 'checkbox',\n      defaultValue: Boolean(eachCheck === null || eachCheck === void 0 ? void 0 : eachCheck.isActioned) || false,\n      validation: (eachCheck === null || eachCheck === void 0 ? void 0 : eachCheck.isMandatory) ? Yup.bool().required() : Yup.bool(),\n      muiComponentProps: {\n        onChange: function onChange(name, value) {\n          return handleCheckListChange(name, value);\n        }\n      }\n    };\n  }) : [];\n  var defaultValues = utils.form.getInitialValues(fields);\n  var validationSchema = utils.form.getValidationSchema(fields);\n  var checkListForm = useForm(_objectSpread({\n    defaultValues: defaultValues\n  }, validationSchema && {\n    resolver: yupResolver(validationSchema)\n  }));\n  var headerFields = [{\n    name: 'selectAllValues',\n    type: 'checkbox',\n    defaultValue: false,\n    muiComponentProps: {\n      onChange: function onChange(name, value) {\n        return handleAllCheckListSelected(name, value);\n      }\n    }\n  }];\n  var columns = [{\n    id: 'select',\n    label: /*#__PURE__*/_jsxDEV(Box, {\n      mb: -1.25,\n      children: utils.generic.isValidArray(taskCheckList, true) && /*#__PURE__*/_jsxDEV(FormCheckbox, _objectSpread({}, utils.form.getFieldProps(headerFields, 'selectAllValues')), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this),\n    visible: true\n  }, {\n    id: 'ChecklistItems',\n    label: utils.string.t('claims.processing.taskDetailsCheckList.columns.ChecklistItems'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true,\n    mandatory: true\n  }, {\n    id: 'lastUpdatedBy',\n    label: utils.string.t('claims.processing.taskDetailsCheckList.columns.lastUpdatedBy'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true,\n    mandatory: true\n  }, {\n    id: 'lastUpdatedOn',\n    label: utils.string.t('claims.processing.taskDetailsCheckList.columns.lastUpdatedOn'),\n    sort: {\n      type: 'date',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true,\n    mandatory: true\n  }];\n  var popoverActions = [{\n    id: 'blank',\n    label: '',\n    callback: function callback() {\n      return handleNextActionSelected('');\n    }\n  }].concat(_toConsumableArray(taskNextActionList.map(function (action) {\n    return {\n      id: action === null || action === void 0 ? void 0 : action.taskCode,\n      label: action === null || action === void 0 ? void 0 : action.taskLabel,\n      data: action,\n      callback: function callback() {\n        return handleNextActionSelected(action === null || action === void 0 ? void 0 : action.taskCode);\n      }\n    };\n  })));\n\n  var fetchDataFromBackend = function fetchDataFromBackend() {\n    dispatch(getTaskChecklist({\n      taskCode: taskCode,\n      taskId: taskId,\n      userOrgName: userOrgName,\n      viewLoader: false\n    }));\n    dispatch(getNextTaskList({\n      taskCode: taskCode,\n      viewLoader: false\n    }));\n\n    if (taskCode === ADVICE_AND_SETTLEMENT) {\n      dispatch(getCurrencyPurchasedValue(task === null || task === void 0 ? void 0 : task.processId));\n    }\n  };\n\n  var constructMandatoryList = function constructMandatoryList() {\n    var result = taskCheckList.filter(function (item) {\n      return (item === null || item === void 0 ? void 0 : item.isMandatory) && !(item === null || item === void 0 ? void 0 : item.isActioned);\n    }).map(function (item) {\n      return item === null || item === void 0 ? void 0 : item.actionListID.toString();\n    });\n    setMandatoryList(result);\n  };\n\n  var updateMandatoryList = function updateMandatoryList(name) {\n    if (isMphasisUser) {\n      var wasMandatory = !!taskCheckList.find(function (item) {\n        return (item === null || item === void 0 ? void 0 : item.actionListID.toString()) === name && (item === null || item === void 0 ? void 0 : item.isMandatory);\n      });\n\n      if (wasMandatory) {\n        var newList = xorBy(mandatoryList, [name]) || [];\n        setMandatoryList(newList);\n      }\n    } else {\n      setMandatoryList([]);\n    }\n  };\n\n  var handleCheckListChange = function handleCheckListChange(name, value) {\n    updateMandatoryList(name);\n    var findCheckItem = taskCheckList.find(function (item) {\n      var keyCheck = item === null || item === void 0 ? void 0 : item.actionListID.toString();\n      return keyCheck === name;\n    });\n\n    if (findCheckItem) {\n      var constructChangeItem = [findCheckItem].map(function (item) {\n        return {\n          actionListDetailID: item === null || item === void 0 ? void 0 : item.actionListDetailID,\n          actionListID: item === null || item === void 0 ? void 0 : item.actionListID,\n          isActioned: !value ? 0 : 1\n        };\n      });\n      var newChangeList = xorBy(checkListChanges, constructChangeItem, 'actionListID');\n      setCheckListChanges(newChangeList);\n    }\n  };\n\n  var handleAllCheckListSelected = function handleAllCheckListSelected(name, isAllSelected) {\n    setAllSelectionFlag(isAllSelected);\n\n    if (isMphasisUser) {\n      if (isAllSelected) {\n        setMandatoryList([]);\n      } else {\n        constructMandatoryList();\n      }\n\n      setNextActionFlag(isAllSelected);\n    }\n\n    var constructChangeItem = taskCheckList.map(function (item) {\n      return {\n        actionListDetailID: item === null || item === void 0 ? void 0 : item.actionListDetailID,\n        actionListID: item === null || item === void 0 ? void 0 : item.actionListID,\n        isActioned: !isAllSelected ? 0 : 1\n      };\n    });\n    setCheckListChanges(constructChangeItem);\n  };\n\n  var handleNextActionSelected = function handleNextActionSelected(nextActionCode) {\n    setNextActionVal(nextActionCode);\n\n    if (nextActionCode === CLOSE_CLAIM) {\n      handleConfirmClaimClose(nextActionCode);\n    } else {\n      handleNextTaskWarning(saveType.nextAction, nextActionCode);\n    }\n  };\n\n  var checkListChangeSave = function checkListChangeSave() {\n    if (isMphasisUser && utils.generic.isValidArray(mandatoryList, true)) {\n      handleMandatoryWarning();\n    } else {\n      saveTaskOperations(saveType.checkList);\n    }\n  };\n\n  var checkListChangeReset = function checkListChangeReset() {\n    checkListForm.reset();\n    setCheckListChanges([]);\n\n    if (utils.generic.isValidArray(taskCheckList, true) && isMphasisUser) {\n      constructMandatoryList();\n    } else {\n      setMandatoryList([]);\n    }\n  };\n\n  var completeTask = function completeTask() {\n    handleTaskCompleteWarning();\n  };\n\n  var saveTaskOperations = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(type, nextActionCode) {\n      var saveRequest;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // \"nextTaskCode\" is null for postSaveNextTaskAction to mark task as complete\n              // \"nextTaskCode\" is null for postSaveTaskCheckListActions & postSaveNextTaskAction (complete task scenario)\n              saveRequest = {\n                processID: task === null || task === void 0 ? void 0 : task.processId,\n                nextTaskCode: type !== saveType.nextAction ? null : nextActionCode || nextActionVal,\n                currencyPurchased: currencyPurchasedValue,\n                approvalStatus: task === null || task === void 0 ? void 0 : task.approvalStatus,\n                actionListDetails: checkListChanges\n              };\n\n              if (!(type === saveType.checkList)) {\n                _context.next = 7;\n                break;\n              }\n\n              _context.next = 4;\n              return dispatch(postSaveTaskCheckListActions(task === null || task === void 0 ? void 0 : task.taskId, saveRequest));\n\n            case 4:\n              fetchDataFromBackend();\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.next = 9;\n              return dispatch(postSaveNextTaskAction(task === null || task === void 0 ? void 0 : task.taskId, saveRequest));\n\n            case 9:\n              navigateToTaskGrid();\n\n            case 10:\n              checkListChangeReset();\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function saveTaskOperations(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var closeClaimTask = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(nextActionCode) {\n      var payload;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              payload = {\n                nextTaskCode: nextActionCode,\n                processID: task === null || task === void 0 ? void 0 : task.rootProcessId\n              };\n              _context2.next = 3;\n              return dispatch(postCloseClaim(task === null || task === void 0 ? void 0 : task.taskId, payload));\n\n            case 3:\n              navigateToTaskGrid();\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function closeClaimTask(_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var handleMandatoryWarning = function handleMandatoryWarning() {\n    dispatch(showModal({\n      component: 'CHECK_LIST_ALERTS',\n      props: {\n        title: utils.string.t('navigation.alert'),\n        hideCompOnBlur: false,\n        fullWidth: true,\n        maxWidth: 'sm',\n        disableAutoFocus: true,\n        componentProps: {\n          type: TASK_CHECKLIST_WARNINGS.type.mandatory,\n          handlers: {\n            submit: function submit() {\n              dispatch(hideModal());\n\n              if (nextActionVal) {\n                handleNextTaskWarning();\n              } else {\n                saveTaskOperations(saveType.checkList);\n              }\n            },\n            cancel: function cancel() {\n              dispatch(hideModal());\n            }\n          }\n        }\n      }\n    }));\n  };\n\n  var handleNextTaskWarning = function handleNextTaskWarning() {\n    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : saveType.checkList;\n    var nextActionCode = arguments.length > 1 ? arguments[1] : undefined;\n    dispatch(showModal({\n      component: 'CHECK_LIST_ALERTS',\n      props: {\n        title: utils.string.t('navigation.alert'),\n        hideCompOnBlur: false,\n        fullWidth: true,\n        maxWidth: 'sm',\n        disableAutoFocus: true,\n        componentProps: {\n          type: TASK_CHECKLIST_WARNINGS.type.nextTask,\n          handlers: {\n            submit: function submit() {\n              dispatch(hideModal());\n              saveTaskOperations(type, nextActionCode);\n            },\n            cancel: function cancel() {\n              dispatch(hideModal());\n            }\n          }\n        }\n      }\n    }));\n  };\n\n  var handleTaskCompleteWarning = function handleTaskCompleteWarning() {\n    dispatch(showModal({\n      component: 'CHECK_LIST_ALERTS',\n      props: {\n        title: utils.string.t('navigation.alert'),\n        hideCompOnBlur: false,\n        fullWidth: true,\n        maxWidth: 'sm',\n        disableAutoFocus: true,\n        componentProps: {\n          type: TASK_CHECKLIST_WARNINGS.type.completeTask,\n          handlers: {\n            submit: function submit() {\n              dispatch(hideModal());\n              saveTaskOperations(saveType.completeTask);\n            },\n            cancel: function cancel() {\n              dispatch(hideModal());\n            }\n          }\n        }\n      }\n    }));\n  };\n\n  var checklistDirtyCheck = function checklistDirtyCheck() {\n    if (isDirtyRef) {\n      handleDirtyCheck('', true);\n    } else {\n      switch (pushBackRoute) {\n        case CLAIMS_FNOL_PUSH_BACK_ROUTES.routes.lossAndClaims:\n          return history.replace(config.routes.claimsFNOL.root);\n\n        case CLAIMS_FNOL_PUSH_BACK_ROUTES.routes.lossDashboard:\n          return history.replace(\"\".concat(config.routes.claimsFNOL.loss, \"/\").concat(task === null || task === void 0 ? void 0 : task.lossRef));\n\n        case CLAIMS_FNOL_PUSH_BACK_ROUTES.routes.claimsDashboard:\n          return history.replace(\"\".concat(config.routes.claimsFNOL.claim, \"/\").concat(task === null || task === void 0 ? void 0 : task.processRef));\n\n        default:\n          return;\n      }\n    }\n  };\n\n  var handleConfirmClaimClose = function handleConfirmClaimClose(nextActionCode) {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        title: utils.string.t('status.alert'),\n        hint: utils.string.t('claims.processing.taskDetailsCheckList.closeClaims'),\n        fullWidth: true,\n        maxWidth: 'xs',\n        componentProps: {\n          cancelLabel: utils.string.t('app.no'),\n          confirmLabel: utils.string.t('app.yes'),\n          submitHandler: function submitHandler() {\n            closeClaimTask(nextActionCode);\n          }\n        }\n      }\n    }));\n  };\n\n  var navigateToTaskGrid = function navigateToTaskGrid() {\n    history.push(\"\".concat(config.routes.claimsFNOL.claim, \"/\").concat(task === null || task === void 0 ? void 0 : task.processRef));\n  };\n\n  var isCompletedTask = (task === null || task === void 0 ? void 0 : task.status) === TASK_TAB_COMPLETED_STATUS;\n  var isCheckListChanged = utils.generic.isValidArray(checkListChanges, true);\n  var hasCheckList = utils.generic.isValidArray(taskCheckList, true);\n  var hasNextActions = utils.generic.isValidArray(popoverActions, true) && popoverActions.length > 1;\n  useEffect(function () {\n    fetchDataFromBackend();\n    return function () {\n      dispatch(resetTaskProcessingChecklistChanges());\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    if (utils.generic.isValidArray(taskCheckList, true) && isMphasisUser) {\n      constructMandatoryList();\n    }\n  }, [taskCheckList]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    if (isMphasisUser) {\n      if (utils.generic.isValidArray(taskCheckList, true) && !utils.generic.isValidArray(mandatoryList, true)) {\n        setNextActionFlag(true);\n      } else {\n        setNextActionFlag(false);\n      }\n    }\n  }, [mandatoryList]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    setIsDirty(isCheckListChanged || isCurrencyChanged);\n  }, [isCheckListChanged, isCurrencyChanged]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/_jsxDEV(TaskCheckListView, {\n    isCompletedTask: isCompletedTask,\n    allSelectionFlag: allSelectionFlag,\n    nextActionFlag: nextActionFlag,\n    isMphasisUser: isMphasisUser,\n    isCheckListChanged: isCheckListChanged,\n    hasCheckList: hasCheckList,\n    hasNextActions: hasNextActions,\n    columns: columns,\n    rows: taskCheckList,\n    fields: fields,\n    formControls: checkListForm,\n    popoverActions: popoverActions,\n    isCurrencyChanged: isCurrencyChanged,\n    task: task,\n    handlers: {\n      checkListChangeSave: checkListChangeSave,\n      checkListChangeReset: checkListChangeReset,\n      completeTask: completeTask,\n      checklistDirtyCheck: checklistDirtyCheck\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 434,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TaskCheckList, \"wFTv4Sn8E5Zr47lC4cd2sqBfn0U=\", false, function () {\n  return [useDispatch, useHistory, useSelector, useSelector, useSelector, useSelector, useForm];\n});\n\n_c = TaskCheckList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskCheckList\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/TaskCheckList/TaskCheckList.js"],"names":["React","useEffect","useState","PropTypes","useSelector","useDispatch","useForm","Yup","yupResolver","xorBy","useHistory","TaskCheckListView","showModal","hideModal","getTaskChecklist","getNextTaskList","selectTaskCheckList","selectTaskNextActionList","selectUserOrganisation","resetTaskProcessingChecklistChanges","postSaveTaskCheckListActions","postSaveNextTaskAction","postCloseClaim","getCurrencyPurchasedValue","selectClaimsFnolPushBackRoute","FormCheckbox","utils","ORGANIZATIONS","TASK_CHECKLIST_WARNINGS","CLOSE_CLAIM","ADVICE_AND_SETTLEMENT","TASK_TAB_COMPLETED_STATUS","CLAIMS_FNOL_PUSH_BACK_ROUTES","config","Box","TaskCheckList","propTypes","task","object","isRequired","currencyPurchasedValue","string","isCurrencyChanged","bool","isDirtyRef","setIsDirty","func","handleDirtyCheck","dispatch","history","taskCheckList","taskNextActionList","userOrgDetail","pushBackRoute","taskCode","taskDefKey","taskId","userOrgName","name","toLowerCase","mphasis","isMphasisUser","saveType","checkList","nextAction","completeTask","allSelectionFlag","setAllSelectionFlag","nextActionFlag","setNextActionFlag","mandatoryList","setMandatoryList","nextActionVal","setNextActionVal","checkListChanges","setCheckListChanges","fields","generic","isValidArray","map","eachCheck","actionListID","toString","type","defaultValue","Boolean","isActioned","validation","isMandatory","required","muiComponentProps","onChange","value","handleCheckListChange","defaultValues","form","getInitialValues","validationSchema","getValidationSchema","checkListForm","resolver","headerFields","handleAllCheckListSelected","columns","id","label","getFieldProps","visible","t","sort","direction","nowrap","mandatory","popoverActions","callback","handleNextActionSelected","action","taskLabel","data","fetchDataFromBackend","viewLoader","processId","constructMandatoryList","result","filter","item","updateMandatoryList","wasMandatory","find","newList","findCheckItem","keyCheck","constructChangeItem","actionListDetailID","newChangeList","isAllSelected","nextActionCode","handleConfirmClaimClose","handleNextTaskWarning","checkListChangeSave","handleMandatoryWarning","saveTaskOperations","checkListChangeReset","reset","handleTaskCompleteWarning","saveRequest","processID","nextTaskCode","currencyPurchased","approvalStatus","actionListDetails","navigateToTaskGrid","closeClaimTask","payload","rootProcessId","component","props","title","hideCompOnBlur","fullWidth","maxWidth","disableAutoFocus","componentProps","handlers","submit","cancel","nextTask","checklistDirtyCheck","routes","lossAndClaims","replace","claimsFNOL","root","lossDashboard","loss","lossRef","claimsDashboard","claim","processRef","hint","cancelLabel","confirmLabel","submitHandler","push","isCompletedTask","status","isCheckListChanged","hasCheckList","hasNextActions","length"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,SAASC,UAAT,QAA2B,cAA3B,C,CAEA;;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,SACEC,SADF,EAEEC,SAFF,EAGEC,gBAHF,EAIEC,eAJF,EAKEC,mBALF,EAMEC,wBANF,EAOEC,sBAPF,EAQEC,mCARF,EASEC,4BATF,EAUEC,sBAVF,EAWEC,cAXF,EAYEC,yBAZF,EAaEC,6BAbF,QAcO,QAdP;AAeA,SAASC,YAAT,QAA6B,YAA7B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,EAAwBC,uBAAxB,EAAiDC,WAAjD,EAA8DC,qBAA9D,EAAqFC,yBAArF,EAAgHC,4BAAhH,QAAoJ,QAApJ;AACA,OAAOC,MAAP,MAAmB,QAAnB,C,CAEA;;AACA,SAASC,GAAT,QAAoB,mBAApB;;AAEAC,aAAa,CAACC,SAAd,GAA0B;AACxBC,EAAAA,IAAI,EAAElC,SAAS,CAACmC,MAAV,CAAiBC,UADC;AAExBC,EAAAA,sBAAsB,EAAErC,SAAS,CAACsC,MAAV,CAAiBF,UAFjB;AAGxBG,EAAAA,iBAAiB,EAAEvC,SAAS,CAACwC,IAAV,CAAeJ,UAHV;AAIxBK,EAAAA,UAAU,EAAEzC,SAAS,CAACwC,IAAV,CAAeJ,UAJH;AAKxBM,EAAAA,UAAU,EAAE1C,SAAS,CAAC2C,IAAV,CAAeP,UALH;AAMxBQ,EAAAA,gBAAgB,EAAE5C,SAAS,CAAC2C,IAAV,CAAeP;AANT,CAA1B;AAQA,eAAe,SAASJ,aAAT,OAAsH;AAAA;;AAAA,MAA7FE,IAA6F,QAA7FA,IAA6F;AAAA,MAAvFG,sBAAuF,QAAvFA,sBAAuF;AAAA,MAA/DE,iBAA+D,QAA/DA,iBAA+D;AAAA,MAA5CE,UAA4C,QAA5CA,UAA4C;AAAA,MAAhCC,UAAgC,QAAhCA,UAAgC;AAAA,MAApBE,gBAAoB,QAApBA,gBAAoB;AACnI,MAAMC,QAAQ,GAAG3C,WAAW,EAA5B;AACA,MAAM4C,OAAO,GAAGvC,UAAU,EAA1B;AAEA,MAAMwC,aAAa,GAAG9C,WAAW,CAACY,mBAAD,CAAjC;AACA,MAAMmC,kBAAkB,GAAG/C,WAAW,CAACa,wBAAD,CAAtC;AACA,MAAMmC,aAAa,GAAGhD,WAAW,CAACc,sBAAD,CAAjC;AACA,MAAMmC,aAAa,GAAGjD,WAAW,CAACoB,6BAAD,CAAjC;AAEA,MAAM8B,QAAQ,GAAGjB,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEkB,UAAvB;AACA,MAAMC,MAAM,GAAGnB,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEmB,MAArB;AACA,MAAMC,WAAW,GAAG,CAAAL,aAAa,SAAb,IAAAA,aAAa,WAAb,YAAAA,aAAa,CAAEM,IAAf,CAAoBC,WAApB,OAAqChC,aAAa,CAACiC,OAAd,CAAsBF,IAA/E;AACA,MAAMG,aAAa,GAAGJ,WAAW,KAAK9B,aAAa,CAACiC,OAAd,CAAsBF,IAA5D;AACA,MAAMI,QAAQ,GAAG;AAAEC,IAAAA,SAAS,EAAE,WAAb;AAA0BC,IAAAA,UAAU,EAAE,YAAtC;AAAoDC,IAAAA,YAAY,EAAE;AAAlE,GAAjB;;AAbmI,kBAenF/D,QAAQ,CAAC,KAAD,CAf2E;AAAA;AAAA,MAe5HgE,gBAf4H;AAAA,MAe1GC,mBAf0G;;AAAA,mBAgBvFjE,QAAQ,CAAC,CAAC2D,aAAF,CAhB+E;AAAA;AAAA,MAgB5HO,cAhB4H;AAAA,MAgB5GC,iBAhB4G;;AAAA,mBAiBzFnE,QAAQ,CAAC,EAAD,CAjBiF;AAAA;AAAA,MAiB5HoE,aAjB4H;AAAA,MAiB7GC,gBAjB6G;;AAAA,mBAkBzFrE,QAAQ,CAAC,EAAD,CAlBiF;AAAA;AAAA,MAkB5HsE,aAlB4H;AAAA,MAkB7GC,gBAlB6G;;AAAA,mBAmBnFvE,QAAQ,CAAC,EAAD,CAnB2E;AAAA;AAAA,MAmB5HwE,gBAnB4H;AAAA,MAmB1GC,mBAnB0G;;AAqBnI,MAAIC,MAAM,GAAGlD,KAAK,CAACmD,OAAN,CAAcC,YAAd,CAA2B5B,aAA3B,EAA0C,IAA1C,IACTA,aAAa,CAAC6B,GAAd,CAAkB,UAACC,SAAD;AAAA,WAAgB;AAClCtB,MAAAA,IAAI,EAAEsB,SAAF,aAAEA,SAAF,uBAAEA,SAAS,CAAEC,YAAX,CAAwBC,QAAxB,EAD4B;AAElCC,MAAAA,IAAI,EAAE,UAF4B;AAGlCC,MAAAA,YAAY,EAAEC,OAAO,CAACL,SAAD,aAACA,SAAD,uBAACA,SAAS,CAAEM,UAAZ,CAAP,IAAkC,KAHd;AAIlCC,MAAAA,UAAU,EAAE,CAAAP,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEQ,WAAX,IAAyBjF,GAAG,CAACoC,IAAJ,GAAW8C,QAAX,EAAzB,GAAiDlF,GAAG,CAACoC,IAAJ,EAJ3B;AAKlC+C,MAAAA,iBAAiB,EAAE;AACjBC,QAAAA,QAAQ,EAAE,kBAACjC,IAAD,EAAOkC,KAAP;AAAA,iBAAiBC,qBAAqB,CAACnC,IAAD,EAAOkC,KAAP,CAAtC;AAAA;AADO;AALe,KAAhB;AAAA,GAAlB,CADS,GAUT,EAVJ;AAYA,MAAME,aAAa,GAAGpE,KAAK,CAACqE,IAAN,CAAWC,gBAAX,CAA4BpB,MAA5B,CAAtB;AACA,MAAMqB,gBAAgB,GAAGvE,KAAK,CAACqE,IAAN,CAAWG,mBAAX,CAA+BtB,MAA/B,CAAzB;AAEA,MAAMuB,aAAa,GAAG7F,OAAO;AAC3BwF,IAAAA,aAAa,EAAbA;AAD2B,KAEvBG,gBAAgB,IAAI;AAAEG,IAAAA,QAAQ,EAAE5F,WAAW,CAACyF,gBAAD;AAAvB,GAFG,EAA7B;AAKA,MAAMI,YAAY,GAAG,CACnB;AACE3C,IAAAA,IAAI,EAAE,iBADR;AAEEyB,IAAAA,IAAI,EAAE,UAFR;AAGEC,IAAAA,YAAY,EAAE,KAHhB;AAIEM,IAAAA,iBAAiB,EAAE;AACjBC,MAAAA,QAAQ,EAAE,kBAACjC,IAAD,EAAOkC,KAAP;AAAA,eAAiBU,0BAA0B,CAAC5C,IAAD,EAAOkC,KAAP,CAA3C;AAAA;AADO;AAJrB,GADmB,CAArB;AAWA,MAAMW,OAAO,GAAG,CACd;AACEC,IAAAA,EAAE,EAAE,QADN;AAEEC,IAAAA,KAAK,eACH,QAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAC,IAAV;AAAA,gBACG/E,KAAK,CAACmD,OAAN,CAAcC,YAAd,CAA2B5B,aAA3B,EAA0C,IAA1C,kBACC,QAAC,YAAD,oBAAkBxB,KAAK,CAACqE,IAAN,CAAWW,aAAX,CAAyBL,YAAzB,EAAuC,iBAAvC,CAAlB;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YAHJ;AASEM,IAAAA,OAAO,EAAE;AATX,GADc,EAYd;AACEH,IAAAA,EAAE,EAAE,gBADN;AAEEC,IAAAA,KAAK,EAAE/E,KAAK,CAACe,MAAN,CAAamE,CAAb,CAAe,+DAAf,CAFT;AAGEC,IAAAA,IAAI,EAAE;AAAE1B,MAAAA,IAAI,EAAE,SAAR;AAAmB2B,MAAAA,SAAS,EAAE;AAA9B,KAHR;AAIEC,IAAAA,MAAM,EAAE,IAJV;AAKEJ,IAAAA,OAAO,EAAE,IALX;AAMEK,IAAAA,SAAS,EAAE;AANb,GAZc,EAoBd;AACER,IAAAA,EAAE,EAAE,eADN;AAEEC,IAAAA,KAAK,EAAE/E,KAAK,CAACe,MAAN,CAAamE,CAAb,CAAe,8DAAf,CAFT;AAGEC,IAAAA,IAAI,EAAE;AAAE1B,MAAAA,IAAI,EAAE,SAAR;AAAmB2B,MAAAA,SAAS,EAAE;AAA9B,KAHR;AAIEC,IAAAA,MAAM,EAAE,IAJV;AAKEJ,IAAAA,OAAO,EAAE,IALX;AAMEK,IAAAA,SAAS,EAAE;AANb,GApBc,EA4Bd;AACER,IAAAA,EAAE,EAAE,eADN;AAEEC,IAAAA,KAAK,EAAE/E,KAAK,CAACe,MAAN,CAAamE,CAAb,CAAe,8DAAf,CAFT;AAGEC,IAAAA,IAAI,EAAE;AAAE1B,MAAAA,IAAI,EAAE,MAAR;AAAgB2B,MAAAA,SAAS,EAAE;AAA3B,KAHR;AAIEC,IAAAA,MAAM,EAAE,IAJV;AAKEJ,IAAAA,OAAO,EAAE,IALX;AAMEK,IAAAA,SAAS,EAAE;AANb,GA5Bc,CAAhB;AAsCA,MAAMC,cAAc,IAClB;AAAET,IAAAA,EAAE,EAAE,OAAN;AAAeC,IAAAA,KAAK,EAAE,EAAtB;AAA0BS,IAAAA,QAAQ,EAAE;AAAA,aAAMC,wBAAwB,CAAC,EAAD,CAA9B;AAAA;AAApC,GADkB,4BAEfhE,kBAAkB,CAAC4B,GAAnB,CAAuB,UAACqC,MAAD;AAAA,WAAa;AACrCZ,MAAAA,EAAE,EAAEY,MAAF,aAAEA,MAAF,uBAAEA,MAAM,CAAE9D,QADyB;AAErCmD,MAAAA,KAAK,EAAEW,MAAF,aAAEA,MAAF,uBAAEA,MAAM,CAAEC,SAFsB;AAGrCC,MAAAA,IAAI,EAAEF,MAH+B;AAIrCF,MAAAA,QAAQ,EAAE;AAAA,eAAMC,wBAAwB,CAACC,MAAD,aAACA,MAAD,uBAACA,MAAM,CAAE9D,QAAT,CAA9B;AAAA;AAJ2B,KAAb;AAAA,GAAvB,CAFe,EAApB;;AAUA,MAAMiE,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAM;AACjCvE,IAAAA,QAAQ,CAAClC,gBAAgB,CAAC;AAAEwC,MAAAA,QAAQ,EAARA,QAAF;AAAYE,MAAAA,MAAM,EAANA,MAAZ;AAAoBC,MAAAA,WAAW,EAAXA,WAApB;AAAiC+D,MAAAA,UAAU,EAAE;AAA7C,KAAD,CAAjB,CAAR;AACAxE,IAAAA,QAAQ,CAACjC,eAAe,CAAC;AAAEuC,MAAAA,QAAQ,EAARA,QAAF;AAAYkE,MAAAA,UAAU,EAAE;AAAxB,KAAD,CAAhB,CAAR;;AACA,QAAIlE,QAAQ,KAAKxB,qBAAjB,EAAwC;AACtCkB,MAAAA,QAAQ,CAACzB,yBAAyB,CAACc,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEoF,SAAP,CAA1B,CAAR;AACD;AACF,GAND;;AAQA,MAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,GAAM;AACnC,QAAMC,MAAM,GAAGzE,aAAa,CACzB0E,MADY,CACL,UAACC,IAAD;AAAA,aAAU,CAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAErC,WAAN,KAAqB,EAACqC,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEvC,UAAP,CAA/B;AAAA,KADK,EAEZP,GAFY,CAER,UAAC8C,IAAD,EAAU;AACb,aAAOA,IAAP,aAAOA,IAAP,uBAAOA,IAAI,CAAE5C,YAAN,CAAmBC,QAAnB,EAAP;AACD,KAJY,CAAf;AAKAX,IAAAA,gBAAgB,CAACoD,MAAD,CAAhB;AACD,GAPD;;AASA,MAAMG,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACpE,IAAD,EAAU;AACpC,QAAIG,aAAJ,EAAmB;AACjB,UAAMkE,YAAY,GAAG,CAAC,CAAC7E,aAAa,CAAC8E,IAAd,CAAmB,UAACH,IAAD,EAAU;AAClD,eAAO,CAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAE5C,YAAN,CAAmBC,QAAnB,QAAkCxB,IAAlC,KAA0CmE,IAA1C,aAA0CA,IAA1C,uBAA0CA,IAAI,CAAErC,WAAhD,CAAP;AACD,OAFsB,CAAvB;;AAGA,UAAIuC,YAAJ,EAAkB;AAChB,YAAME,OAAO,GAAGxH,KAAK,CAAC6D,aAAD,EAAgB,CAACZ,IAAD,CAAhB,CAAL,IAAgC,EAAhD;AACAa,QAAAA,gBAAgB,CAAC0D,OAAD,CAAhB;AACD;AACF,KARD,MAQO;AACL1D,MAAAA,gBAAgB,CAAC,EAAD,CAAhB;AACD;AACF,GAZD;;AAcA,MAAMsB,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACnC,IAAD,EAAOkC,KAAP,EAAiB;AAC7CkC,IAAAA,mBAAmB,CAACpE,IAAD,CAAnB;AACA,QAAMwE,aAAa,GAAGhF,aAAa,CAAC8E,IAAd,CAAmB,UAACH,IAAD,EAAU;AACjD,UAAMM,QAAQ,GAAGN,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAE5C,YAAN,CAAmBC,QAAnB,EAAjB;AACA,aAAOiD,QAAQ,KAAKzE,IAApB;AACD,KAHqB,CAAtB;;AAIA,QAAIwE,aAAJ,EAAmB;AACjB,UAAME,mBAAmB,GAAG,CAACF,aAAD,EAAgBnD,GAAhB,CAAoB,UAAC8C,IAAD,EAAU;AACxD,eAAO;AACLQ,UAAAA,kBAAkB,EAAER,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEQ,kBADrB;AAELpD,UAAAA,YAAY,EAAE4C,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAE5C,YAFf;AAGLK,UAAAA,UAAU,EAAE,CAACM,KAAD,GAAS,CAAT,GAAa;AAHpB,SAAP;AAKD,OAN2B,CAA5B;AAOA,UAAM0C,aAAa,GAAG7H,KAAK,CAACiE,gBAAD,EAAmB0D,mBAAnB,EAAwC,cAAxC,CAA3B;AACAzD,MAAAA,mBAAmB,CAAC2D,aAAD,CAAnB;AACD;AACF,GAjBD;;AAmBA,MAAMhC,0BAA0B,GAAG,SAA7BA,0BAA6B,CAAC5C,IAAD,EAAO6E,aAAP,EAAyB;AAC1DpE,IAAAA,mBAAmB,CAACoE,aAAD,CAAnB;;AACA,QAAI1E,aAAJ,EAAmB;AACjB,UAAI0E,aAAJ,EAAmB;AACjBhE,QAAAA,gBAAgB,CAAC,EAAD,CAAhB;AACD,OAFD,MAEO;AACLmD,QAAAA,sBAAsB;AACvB;;AACDrD,MAAAA,iBAAiB,CAACkE,aAAD,CAAjB;AACD;;AACD,QAAMH,mBAAmB,GAAGlF,aAAa,CAAC6B,GAAd,CAAkB,UAAC8C,IAAD,EAAU;AACtD,aAAO;AACLQ,QAAAA,kBAAkB,EAAER,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEQ,kBADrB;AAELpD,QAAAA,YAAY,EAAE4C,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAE5C,YAFf;AAGLK,QAAAA,UAAU,EAAE,CAACiD,aAAD,GAAiB,CAAjB,GAAqB;AAH5B,OAAP;AAKD,KAN2B,CAA5B;AAOA5D,IAAAA,mBAAmB,CAACyD,mBAAD,CAAnB;AACD,GAlBD;;AAoBA,MAAMjB,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACqB,cAAD,EAAoB;AACnD/D,IAAAA,gBAAgB,CAAC+D,cAAD,CAAhB;;AACA,QAAIA,cAAc,KAAK3G,WAAvB,EAAoC;AAClC4G,MAAAA,uBAAuB,CAACD,cAAD,CAAvB;AACD,KAFD,MAEO;AACLE,MAAAA,qBAAqB,CAAC5E,QAAQ,CAACE,UAAV,EAAsBwE,cAAtB,CAArB;AACD;AACF,GAPD;;AASA,MAAMG,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAChC,QAAI9E,aAAa,IAAInC,KAAK,CAACmD,OAAN,CAAcC,YAAd,CAA2BR,aAA3B,EAA0C,IAA1C,CAArB,EAAsE;AACpEsE,MAAAA,sBAAsB;AACvB,KAFD,MAEO;AACLC,MAAAA,kBAAkB,CAAC/E,QAAQ,CAACC,SAAV,CAAlB;AACD;AACF,GAND;;AAQA,MAAM+E,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAM;AACjC3C,IAAAA,aAAa,CAAC4C,KAAd;AACApE,IAAAA,mBAAmB,CAAC,EAAD,CAAnB;;AACA,QAAIjD,KAAK,CAACmD,OAAN,CAAcC,YAAd,CAA2B5B,aAA3B,EAA0C,IAA1C,KAAmDW,aAAvD,EAAsE;AACpE6D,MAAAA,sBAAsB;AACvB,KAFD,MAEO;AACLnD,MAAAA,gBAAgB,CAAC,EAAD,CAAhB;AACD;AACF,GARD;;AAUA,MAAMN,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB+E,IAAAA,yBAAyB;AAC1B,GAFD;;AAIA,MAAMH,kBAAkB;AAAA,yEAAG,iBAAO1D,IAAP,EAAaqD,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AACzB;AACA;AAEMS,cAAAA,WAJmB,GAIL;AAClBC,gBAAAA,SAAS,EAAE7G,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEoF,SADC;AAElB0B,gBAAAA,YAAY,EAAEhE,IAAI,KAAKrB,QAAQ,CAACE,UAAlB,GAA+B,IAA/B,GAAsCwE,cAAc,IAAIhE,aAFpD;AAGlB4E,gBAAAA,iBAAiB,EAAE5G,sBAHD;AAIlB6G,gBAAAA,cAAc,EAAEhH,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEgH,cAJJ;AAKlBC,gBAAAA,iBAAiB,EAAE5E;AALD,eAJK;;AAAA,oBAYrBS,IAAI,KAAKrB,QAAQ,CAACC,SAZG;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAajBf,QAAQ,CAAC5B,4BAA4B,CAACiB,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEmB,MAAP,EAAeyF,WAAf,CAA7B,CAbS;;AAAA;AAcvB1B,cAAAA,oBAAoB;AAdG;AAAA;;AAAA;AAAA;AAAA,qBAgBjBvE,QAAQ,CAAC3B,sBAAsB,CAACgB,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEmB,MAAP,EAAeyF,WAAf,CAAvB,CAhBS;;AAAA;AAiBvBM,cAAAA,kBAAkB;;AAjBK;AAmBzBT,cAAAA,oBAAoB;;AAnBK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAlBD,kBAAkB;AAAA;AAAA;AAAA,KAAxB;;AAsBA,MAAMW,cAAc;AAAA,yEAAG,kBAAOhB,cAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACfiB,cAAAA,OADe,GACL;AACdN,gBAAAA,YAAY,EAAEX,cADA;AAEdU,gBAAAA,SAAS,EAAE7G,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEqH;AAFH,eADK;AAAA;AAAA,qBAKf1G,QAAQ,CAAC1B,cAAc,CAACe,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEmB,MAAP,EAAeiG,OAAf,CAAf,CALO;;AAAA;AAMrBF,cAAAA,kBAAkB;;AANG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAdC,cAAc;AAAA;AAAA;AAAA,KAApB;;AASA,MAAMZ,sBAAsB,GAAG,SAAzBA,sBAAyB,GAAM;AACnC5F,IAAAA,QAAQ,CACNpC,SAAS,CAAC;AACR+I,MAAAA,SAAS,EAAE,mBADH;AAERC,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAEnI,KAAK,CAACe,MAAN,CAAamE,CAAb,CAAe,kBAAf,CADF;AAELkD,QAAAA,cAAc,EAAE,KAFX;AAGLC,QAAAA,SAAS,EAAE,IAHN;AAILC,QAAAA,QAAQ,EAAE,IAJL;AAKLC,QAAAA,gBAAgB,EAAE,IALb;AAMLC,QAAAA,cAAc,EAAE;AACd/E,UAAAA,IAAI,EAAEvD,uBAAuB,CAACuD,IAAxB,CAA6B6B,SADrB;AAEdmD,UAAAA,QAAQ,EAAE;AACRC,YAAAA,MAAM,EAAE,kBAAM;AACZpH,cAAAA,QAAQ,CAACnC,SAAS,EAAV,CAAR;;AACA,kBAAI2D,aAAJ,EAAmB;AACjBkE,gBAAAA,qBAAqB;AACtB,eAFD,MAEO;AACLG,gBAAAA,kBAAkB,CAAC/E,QAAQ,CAACC,SAAV,CAAlB;AACD;AACF,aARO;AASRsG,YAAAA,MAAM,EAAE,kBAAM;AACZrH,cAAAA,QAAQ,CAACnC,SAAS,EAAV,CAAR;AACD;AAXO;AAFI;AANX;AAFC,KAAD,CADH,CAAR;AA4BD,GA7BD;;AA+BA,MAAM6H,qBAAqB,GAAG,SAAxBA,qBAAwB,GAA+C;AAAA,QAA9CvD,IAA8C,uEAAvCrB,QAAQ,CAACC,SAA8B;AAAA,QAAnByE,cAAmB;AAC3ExF,IAAAA,QAAQ,CACNpC,SAAS,CAAC;AACR+I,MAAAA,SAAS,EAAE,mBADH;AAERC,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAEnI,KAAK,CAACe,MAAN,CAAamE,CAAb,CAAe,kBAAf,CADF;AAELkD,QAAAA,cAAc,EAAE,KAFX;AAGLC,QAAAA,SAAS,EAAE,IAHN;AAILC,QAAAA,QAAQ,EAAE,IAJL;AAKLC,QAAAA,gBAAgB,EAAE,IALb;AAMLC,QAAAA,cAAc,EAAE;AACd/E,UAAAA,IAAI,EAAEvD,uBAAuB,CAACuD,IAAxB,CAA6BmF,QADrB;AAEdH,UAAAA,QAAQ,EAAE;AACRC,YAAAA,MAAM,EAAE,kBAAM;AACZpH,cAAAA,QAAQ,CAACnC,SAAS,EAAV,CAAR;AACAgI,cAAAA,kBAAkB,CAAC1D,IAAD,EAAOqD,cAAP,CAAlB;AACD,aAJO;AAKR6B,YAAAA,MAAM,EAAE,kBAAM;AACZrH,cAAAA,QAAQ,CAACnC,SAAS,EAAV,CAAR;AACD;AAPO;AAFI;AANX;AAFC,KAAD,CADH,CAAR;AAwBD,GAzBD;;AA2BA,MAAMmI,yBAAyB,GAAG,SAA5BA,yBAA4B,GAAM;AACtChG,IAAAA,QAAQ,CACNpC,SAAS,CAAC;AACR+I,MAAAA,SAAS,EAAE,mBADH;AAERC,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAEnI,KAAK,CAACe,MAAN,CAAamE,CAAb,CAAe,kBAAf,CADF;AAELkD,QAAAA,cAAc,EAAE,KAFX;AAGLC,QAAAA,SAAS,EAAE,IAHN;AAILC,QAAAA,QAAQ,EAAE,IAJL;AAKLC,QAAAA,gBAAgB,EAAE,IALb;AAMLC,QAAAA,cAAc,EAAE;AACd/E,UAAAA,IAAI,EAAEvD,uBAAuB,CAACuD,IAAxB,CAA6BlB,YADrB;AAEdkG,UAAAA,QAAQ,EAAE;AACRC,YAAAA,MAAM,EAAE,kBAAM;AACZpH,cAAAA,QAAQ,CAACnC,SAAS,EAAV,CAAR;AACAgI,cAAAA,kBAAkB,CAAC/E,QAAQ,CAACG,YAAV,CAAlB;AACD,aAJO;AAKRoG,YAAAA,MAAM,EAAE,kBAAM;AACZrH,cAAAA,QAAQ,CAACnC,SAAS,EAAV,CAAR;AACD;AAPO;AAFI;AANX;AAFC,KAAD,CADH,CAAR;AAwBD,GAzBD;;AA2BA,MAAM0J,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAChC,QAAI3H,UAAJ,EAAgB;AACdG,MAAAA,gBAAgB,CAAC,EAAD,EAAK,IAAL,CAAhB;AACD,KAFD,MAEO;AACL,cAAQM,aAAR;AACE,aAAKrB,4BAA4B,CAACwI,MAA7B,CAAoCC,aAAzC;AACE,iBAAOxH,OAAO,CAACyH,OAAR,CAAgBzI,MAAM,CAACuI,MAAP,CAAcG,UAAd,CAAyBC,IAAzC,CAAP;;AACF,aAAK5I,4BAA4B,CAACwI,MAA7B,CAAoCK,aAAzC;AACE,iBAAO5H,OAAO,CAACyH,OAAR,WAAmBzI,MAAM,CAACuI,MAAP,CAAcG,UAAd,CAAyBG,IAA5C,cAAoDzI,IAApD,aAAoDA,IAApD,uBAAoDA,IAAI,CAAE0I,OAA1D,EAAP;;AACF,aAAK/I,4BAA4B,CAACwI,MAA7B,CAAoCQ,eAAzC;AACE,iBAAO/H,OAAO,CAACyH,OAAR,WAAmBzI,MAAM,CAACuI,MAAP,CAAcG,UAAd,CAAyBM,KAA5C,cAAqD5I,IAArD,aAAqDA,IAArD,uBAAqDA,IAAI,CAAE6I,UAA3D,EAAP;;AACF;AAAS;AAPX;AASD;AACF,GAdD;;AAgBA,MAAMzC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACD,cAAD,EAAoB;AAClDxF,IAAAA,QAAQ,CACNpC,SAAS,CAAC;AACR+I,MAAAA,SAAS,EAAE,SADH;AAERC,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAEnI,KAAK,CAACe,MAAN,CAAamE,CAAb,CAAe,cAAf,CADF;AAELuE,QAAAA,IAAI,EAAEzJ,KAAK,CAACe,MAAN,CAAamE,CAAb,CAAe,oDAAf,CAFD;AAGLmD,QAAAA,SAAS,EAAE,IAHN;AAILC,QAAAA,QAAQ,EAAE,IAJL;AAKLE,QAAAA,cAAc,EAAE;AACdkB,UAAAA,WAAW,EAAE1J,KAAK,CAACe,MAAN,CAAamE,CAAb,CAAe,QAAf,CADC;AAEdyE,UAAAA,YAAY,EAAE3J,KAAK,CAACe,MAAN,CAAamE,CAAb,CAAe,SAAf,CAFA;AAGd0E,UAAAA,aAAa,EAAE,yBAAM;AACnB9B,YAAAA,cAAc,CAAChB,cAAD,CAAd;AACD;AALa;AALX;AAFC,KAAD,CADH,CAAR;AAkBD,GAnBD;;AAqBA,MAAMe,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAC/BtG,IAAAA,OAAO,CAACsI,IAAR,WAAgBtJ,MAAM,CAACuI,MAAP,CAAcG,UAAd,CAAyBM,KAAzC,cAAkD5I,IAAlD,aAAkDA,IAAlD,uBAAkDA,IAAI,CAAE6I,UAAxD;AACD,GAFD;;AAIA,MAAMM,eAAe,GAAG,CAAAnJ,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEoJ,MAAN,MAAiB1J,yBAAzC;AACA,MAAM2J,kBAAkB,GAAGhK,KAAK,CAACmD,OAAN,CAAcC,YAAd,CAA2BJ,gBAA3B,EAA6C,IAA7C,CAA3B;AACA,MAAMiH,YAAY,GAAGjK,KAAK,CAACmD,OAAN,CAAcC,YAAd,CAA2B5B,aAA3B,EAA0C,IAA1C,CAArB;AACA,MAAM0I,cAAc,GAAGlK,KAAK,CAACmD,OAAN,CAAcC,YAAd,CAA2BmC,cAA3B,EAA2C,IAA3C,KAAoDA,cAAc,CAAC4E,MAAf,GAAwB,CAAnG;AAEA5L,EAAAA,SAAS,CAAC,YAAM;AACdsH,IAAAA,oBAAoB;AACpB,WAAO,YAAM;AACXvE,MAAAA,QAAQ,CAAC7B,mCAAmC,EAApC,CAAR;AACD,KAFD;AAGD,GALQ,EAKN,EALM,CAAT,CA3WmI,CAgX3H;;AAERlB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIyB,KAAK,CAACmD,OAAN,CAAcC,YAAd,CAA2B5B,aAA3B,EAA0C,IAA1C,KAAmDW,aAAvD,EAAsE;AACpE6D,MAAAA,sBAAsB;AACvB;AACF,GAJQ,EAIN,CAACxE,aAAD,CAJM,CAAT,CAlXmI,CAsX9G;;AAErBjD,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI4D,aAAJ,EAAmB;AACjB,UAAInC,KAAK,CAACmD,OAAN,CAAcC,YAAd,CAA2B5B,aAA3B,EAA0C,IAA1C,KAAmD,CAACxB,KAAK,CAACmD,OAAN,CAAcC,YAAd,CAA2BR,aAA3B,EAA0C,IAA1C,CAAxD,EAAyG;AACvGD,QAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACD,OAFD,MAEO;AACLA,QAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACD;AACF;AACF,GARQ,EAQN,CAACC,aAAD,CARM,CAAT,CAxXmI,CAgY9G;;AAErBrE,EAAAA,SAAS,CAAC,YAAM;AACd4C,IAAAA,UAAU,CAAC6I,kBAAkB,IAAIhJ,iBAAvB,CAAV;AACD,GAFQ,EAEN,CAACgJ,kBAAD,EAAqBhJ,iBAArB,CAFM,CAAT,CAlYmI,CAoYtF;;AAE7C,sBACE,QAAC,iBAAD;AACE,IAAA,eAAe,EAAE8I,eADnB;AAEE,IAAA,gBAAgB,EAAEtH,gBAFpB;AAGE,IAAA,cAAc,EAAEE,cAHlB;AAIE,IAAA,aAAa,EAAEP,aAJjB;AAKE,IAAA,kBAAkB,EAAE6H,kBALtB;AAME,IAAA,YAAY,EAAEC,YANhB;AAOE,IAAA,cAAc,EAAEC,cAPlB;AAQE,IAAA,OAAO,EAAErF,OARX;AASE,IAAA,IAAI,EAAErD,aATR;AAUE,IAAA,MAAM,EAAE0B,MAVV;AAWE,IAAA,YAAY,EAAEuB,aAXhB;AAYE,IAAA,cAAc,EAAEc,cAZlB;AAaE,IAAA,iBAAiB,EAAEvE,iBAbrB;AAcE,IAAA,IAAI,EAAEL,IAdR;AAeE,IAAA,QAAQ,EAAE;AACRsG,MAAAA,mBAAmB,EAAnBA,mBADQ;AAERG,MAAAA,oBAAoB,EAApBA,oBAFQ;AAGR7E,MAAAA,YAAY,EAAZA,YAHQ;AAIRsG,MAAAA,mBAAmB,EAAnBA;AAJQ;AAfZ;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD;;GA9ZuBpI,a;UACL9B,W,EACDK,U,EAEMN,W,EACKA,W,EACLA,W,EACAA,W,EA6BAE,O;;;KApCA6B,a","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useForm } from 'react-hook-form';\r\nimport * as Yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport xorBy from 'lodash/xorBy';\r\nimport { useHistory } from 'react-router';\r\n\r\n//app\r\nimport { TaskCheckListView } from './TaskCheckList.view';\r\nimport {\r\n  showModal,\r\n  hideModal,\r\n  getTaskChecklist,\r\n  getNextTaskList,\r\n  selectTaskCheckList,\r\n  selectTaskNextActionList,\r\n  selectUserOrganisation,\r\n  resetTaskProcessingChecklistChanges,\r\n  postSaveTaskCheckListActions,\r\n  postSaveNextTaskAction,\r\n  postCloseClaim,\r\n  getCurrencyPurchasedValue,\r\n  selectClaimsFnolPushBackRoute,\r\n} from 'stores';\r\nimport { FormCheckbox } from 'components';\r\nimport * as utils from 'utils';\r\nimport { ORGANIZATIONS, TASK_CHECKLIST_WARNINGS, CLOSE_CLAIM, ADVICE_AND_SETTLEMENT, TASK_TAB_COMPLETED_STATUS, CLAIMS_FNOL_PUSH_BACK_ROUTES } from 'consts';\r\nimport config from 'config';\r\n\r\n//mui\r\nimport { Box } from '@material-ui/core';\r\n\r\nTaskCheckList.propTypes = {\r\n  task: PropTypes.object.isRequired,\r\n  currencyPurchasedValue: PropTypes.string.isRequired,\r\n  isCurrencyChanged: PropTypes.bool.isRequired,\r\n  isDirtyRef: PropTypes.bool.isRequired,\r\n  setIsDirty: PropTypes.func.isRequired,\r\n  handleDirtyCheck: PropTypes.func.isRequired,\r\n};\r\nexport default function TaskCheckList({ task, currencyPurchasedValue, isCurrencyChanged, isDirtyRef, setIsDirty, handleDirtyCheck }) {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const taskCheckList = useSelector(selectTaskCheckList);\r\n  const taskNextActionList = useSelector(selectTaskNextActionList);\r\n  const userOrgDetail = useSelector(selectUserOrganisation);\r\n  const pushBackRoute = useSelector(selectClaimsFnolPushBackRoute);\r\n\r\n  const taskCode = task?.taskDefKey;\r\n  const taskId = task?.taskId;\r\n  const userOrgName = userOrgDetail?.name.toLowerCase() || ORGANIZATIONS.mphasis.name;\r\n  const isMphasisUser = userOrgName === ORGANIZATIONS.mphasis.name;\r\n  const saveType = { checkList: 'checkList', nextAction: 'nextAction', completeTask: 'completeTask' };\r\n\r\n  const [allSelectionFlag, setAllSelectionFlag] = useState(false);\r\n  const [nextActionFlag, setNextActionFlag] = useState(!isMphasisUser);\r\n  const [mandatoryList, setMandatoryList] = useState([]);\r\n  const [nextActionVal, setNextActionVal] = useState('');\r\n  const [checkListChanges, setCheckListChanges] = useState([]);\r\n\r\n  let fields = utils.generic.isValidArray(taskCheckList, true)\r\n    ? taskCheckList.map((eachCheck) => ({\r\n      name: eachCheck?.actionListID.toString(),\r\n      type: 'checkbox',\r\n      defaultValue: Boolean(eachCheck?.isActioned) || false,\r\n      validation: eachCheck?.isMandatory ? Yup.bool().required() : Yup.bool(),\r\n      muiComponentProps: {\r\n        onChange: (name, value) => handleCheckListChange(name, value),\r\n      },\r\n    }))\r\n    : [];\r\n\r\n  const defaultValues = utils.form.getInitialValues(fields);\r\n  const validationSchema = utils.form.getValidationSchema(fields);\r\n\r\n  const checkListForm = useForm({\r\n    defaultValues,\r\n    ...(validationSchema && { resolver: yupResolver(validationSchema) }),\r\n  });\r\n  \r\n  const headerFields = [\r\n    {\r\n      name: 'selectAllValues',\r\n      type: 'checkbox',\r\n      defaultValue: false,\r\n      muiComponentProps: {\r\n        onChange: (name, value) => handleAllCheckListSelected(name, value),\r\n      },\r\n    },\r\n  ];\r\n\r\n  const columns = [\r\n    {\r\n      id: 'select',\r\n      label: (\r\n        <Box mb={-1.25}>\r\n          {utils.generic.isValidArray(taskCheckList, true) && (\r\n            <FormCheckbox {...utils.form.getFieldProps(headerFields, 'selectAllValues')} />\r\n          )}\r\n        </Box>\r\n      ),\r\n      visible: true,\r\n    },\r\n    {\r\n      id: 'ChecklistItems',\r\n      label: utils.string.t('claims.processing.taskDetailsCheckList.columns.ChecklistItems'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n      mandatory: true,\r\n    },\r\n    {\r\n      id: 'lastUpdatedBy',\r\n      label: utils.string.t('claims.processing.taskDetailsCheckList.columns.lastUpdatedBy'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n      mandatory: true,\r\n    },\r\n    {\r\n      id: 'lastUpdatedOn',\r\n      label: utils.string.t('claims.processing.taskDetailsCheckList.columns.lastUpdatedOn'),\r\n      sort: { type: 'date', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n      mandatory: true,\r\n    },\r\n  ];\r\n\r\n  const popoverActions = [\r\n    { id: 'blank', label: '', callback: () => handleNextActionSelected('') },\r\n    ...taskNextActionList.map((action) => ({\r\n      id: action?.taskCode,\r\n      label: action?.taskLabel,\r\n      data: action,\r\n      callback: () => handleNextActionSelected(action?.taskCode),\r\n    })),\r\n  ];\r\n\r\n  const fetchDataFromBackend = () => {\r\n    dispatch(getTaskChecklist({ taskCode, taskId, userOrgName, viewLoader: false }));\r\n    dispatch(getNextTaskList({ taskCode, viewLoader: false }));\r\n    if (taskCode === ADVICE_AND_SETTLEMENT) {\r\n      dispatch(getCurrencyPurchasedValue(task?.processId));\r\n    }\r\n  };\r\n\r\n  const constructMandatoryList = () => {\r\n    const result = taskCheckList\r\n      .filter((item) => item?.isMandatory && !item?.isActioned)\r\n      .map((item) => {\r\n        return item?.actionListID.toString();\r\n      });\r\n    setMandatoryList(result);\r\n  };\r\n\r\n  const updateMandatoryList = (name) => {\r\n    if (isMphasisUser) {\r\n      const wasMandatory = !!taskCheckList.find((item) => {\r\n        return item?.actionListID.toString() === name && item?.isMandatory;\r\n      });\r\n      if (wasMandatory) {\r\n        const newList = xorBy(mandatoryList, [name]) || [];\r\n        setMandatoryList(newList);\r\n      }\r\n    } else {\r\n      setMandatoryList([]);\r\n    }\r\n  };\r\n\r\n  const handleCheckListChange = (name, value) => {\r\n    updateMandatoryList(name);\r\n    const findCheckItem = taskCheckList.find((item) => {\r\n      const keyCheck = item?.actionListID.toString();\r\n      return keyCheck === name;\r\n    });\r\n    if (findCheckItem) {\r\n      const constructChangeItem = [findCheckItem].map((item) => {\r\n        return {\r\n          actionListDetailID: item?.actionListDetailID,\r\n          actionListID: item?.actionListID,\r\n          isActioned: !value ? 0 : 1,\r\n        };\r\n      });\r\n      const newChangeList = xorBy(checkListChanges, constructChangeItem, 'actionListID');\r\n      setCheckListChanges(newChangeList);\r\n    }\r\n  };\r\n\r\n  const handleAllCheckListSelected = (name, isAllSelected) => {\r\n    setAllSelectionFlag(isAllSelected);\r\n    if (isMphasisUser) {\r\n      if (isAllSelected) {\r\n        setMandatoryList([]);\r\n      } else {\r\n        constructMandatoryList();\r\n      }\r\n      setNextActionFlag(isAllSelected);\r\n    }\r\n    const constructChangeItem = taskCheckList.map((item) => {\r\n      return {\r\n        actionListDetailID: item?.actionListDetailID,\r\n        actionListID: item?.actionListID,\r\n        isActioned: !isAllSelected ? 0 : 1,\r\n      };\r\n    });\r\n    setCheckListChanges(constructChangeItem);\r\n  };\r\n\r\n  const handleNextActionSelected = (nextActionCode) => {\r\n    setNextActionVal(nextActionCode);\r\n    if (nextActionCode === CLOSE_CLAIM) {\r\n      handleConfirmClaimClose(nextActionCode);\r\n    } else {\r\n      handleNextTaskWarning(saveType.nextAction, nextActionCode);\r\n    }\r\n  };\r\n\r\n  const checkListChangeSave = () => {\r\n    if (isMphasisUser && utils.generic.isValidArray(mandatoryList, true)) {\r\n      handleMandatoryWarning();\r\n    } else {\r\n      saveTaskOperations(saveType.checkList);\r\n    }\r\n  };\r\n\r\n  const checkListChangeReset = () => {\r\n    checkListForm.reset();\r\n    setCheckListChanges([]);\r\n    if (utils.generic.isValidArray(taskCheckList, true) && isMphasisUser) {\r\n      constructMandatoryList();\r\n    } else {\r\n      setMandatoryList([]);\r\n    }\r\n  };\r\n\r\n  const completeTask = () => {\r\n    handleTaskCompleteWarning();\r\n  };\r\n\r\n  const saveTaskOperations = async (type, nextActionCode) => {\r\n    // \"nextTaskCode\" is null for postSaveNextTaskAction to mark task as complete\r\n    // \"nextTaskCode\" is null for postSaveTaskCheckListActions & postSaveNextTaskAction (complete task scenario)\r\n\r\n    const saveRequest = {\r\n      processID: task?.processId,\r\n      nextTaskCode: type !== saveType.nextAction ? null : nextActionCode || nextActionVal,\r\n      currencyPurchased: currencyPurchasedValue,\r\n      approvalStatus: task?.approvalStatus,\r\n      actionListDetails: checkListChanges,\r\n    };\r\n\r\n    if (type === saveType.checkList) {\r\n      await dispatch(postSaveTaskCheckListActions(task?.taskId, saveRequest));\r\n      fetchDataFromBackend();\r\n    } else {\r\n      await dispatch(postSaveNextTaskAction(task?.taskId, saveRequest));\r\n      navigateToTaskGrid();\r\n    }\r\n    checkListChangeReset();\r\n  };\r\n\r\n  const closeClaimTask = async (nextActionCode) => {\r\n    const payload = {\r\n      nextTaskCode: nextActionCode,\r\n      processID: task?.rootProcessId,\r\n    };\r\n    await dispatch(postCloseClaim(task?.taskId, payload));\r\n    navigateToTaskGrid();\r\n  };\r\n\r\n  const handleMandatoryWarning = () => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CHECK_LIST_ALERTS',\r\n        props: {\r\n          title: utils.string.t('navigation.alert'),\r\n          hideCompOnBlur: false,\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            type: TASK_CHECKLIST_WARNINGS.type.mandatory,\r\n            handlers: {\r\n              submit: () => {\r\n                dispatch(hideModal());\r\n                if (nextActionVal) {\r\n                  handleNextTaskWarning();\r\n                } else {\r\n                  saveTaskOperations(saveType.checkList);\r\n                }\r\n              },\r\n              cancel: () => {\r\n                dispatch(hideModal());\r\n              },\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleNextTaskWarning = (type = saveType.checkList, nextActionCode) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CHECK_LIST_ALERTS',\r\n        props: {\r\n          title: utils.string.t('navigation.alert'),\r\n          hideCompOnBlur: false,\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            type: TASK_CHECKLIST_WARNINGS.type.nextTask,\r\n            handlers: {\r\n              submit: () => {\r\n                dispatch(hideModal());\r\n                saveTaskOperations(type, nextActionCode);\r\n              },\r\n              cancel: () => {\r\n                dispatch(hideModal());\r\n              },\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleTaskCompleteWarning = () => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CHECK_LIST_ALERTS',\r\n        props: {\r\n          title: utils.string.t('navigation.alert'),\r\n          hideCompOnBlur: false,\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            type: TASK_CHECKLIST_WARNINGS.type.completeTask,\r\n            handlers: {\r\n              submit: () => {\r\n                dispatch(hideModal());\r\n                saveTaskOperations(saveType.completeTask);\r\n              },\r\n              cancel: () => {\r\n                dispatch(hideModal());\r\n              },\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const checklistDirtyCheck = () => {\r\n    if (isDirtyRef) {\r\n      handleDirtyCheck('', true);\r\n    } else {\r\n      switch (pushBackRoute) {\r\n        case CLAIMS_FNOL_PUSH_BACK_ROUTES.routes.lossAndClaims:\r\n          return history.replace(config.routes.claimsFNOL.root);\r\n        case CLAIMS_FNOL_PUSH_BACK_ROUTES.routes.lossDashboard:\r\n          return history.replace(`${config.routes.claimsFNOL.loss}/${task?.lossRef}`);\r\n        case CLAIMS_FNOL_PUSH_BACK_ROUTES.routes.claimsDashboard:\r\n          return history.replace(`${config.routes.claimsFNOL.claim}/${task?.processRef}`)\r\n        default: return\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleConfirmClaimClose = (nextActionCode) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          title: utils.string.t('status.alert'),\r\n          hint: utils.string.t('claims.processing.taskDetailsCheckList.closeClaims'),\r\n          fullWidth: true,\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            cancelLabel: utils.string.t('app.no'),\r\n            confirmLabel: utils.string.t('app.yes'),\r\n            submitHandler: () => {\r\n              closeClaimTask(nextActionCode);\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const navigateToTaskGrid = () => {\r\n    history.push(`${config.routes.claimsFNOL.claim}/${task?.processRef}`);\r\n  };\r\n\r\n  const isCompletedTask = task?.status === TASK_TAB_COMPLETED_STATUS;\r\n  const isCheckListChanged = utils.generic.isValidArray(checkListChanges, true);\r\n  const hasCheckList = utils.generic.isValidArray(taskCheckList, true);\r\n  const hasNextActions = utils.generic.isValidArray(popoverActions, true) && popoverActions.length > 1;\r\n\r\n  useEffect(() => {\r\n    fetchDataFromBackend();\r\n    return () => {\r\n      dispatch(resetTaskProcessingChecklistChanges());\r\n    };\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    if (utils.generic.isValidArray(taskCheckList, true) && isMphasisUser) {\r\n      constructMandatoryList();\r\n    }\r\n  }, [taskCheckList]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    if (isMphasisUser) {\r\n      if (utils.generic.isValidArray(taskCheckList, true) && !utils.generic.isValidArray(mandatoryList, true)) {\r\n        setNextActionFlag(true);\r\n      } else {\r\n        setNextActionFlag(false);\r\n      }\r\n    }\r\n  }, [mandatoryList]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    setIsDirty(isCheckListChanged || isCurrencyChanged);\r\n  }, [isCheckListChanged, isCurrencyChanged]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <TaskCheckListView\r\n      isCompletedTask={isCompletedTask}\r\n      allSelectionFlag={allSelectionFlag}\r\n      nextActionFlag={nextActionFlag}\r\n      isMphasisUser={isMphasisUser}\r\n      isCheckListChanged={isCheckListChanged}\r\n      hasCheckList={hasCheckList}\r\n      hasNextActions={hasNextActions}\r\n      columns={columns}\r\n      rows={taskCheckList}\r\n      fields={fields}\r\n      formControls={checkListForm}\r\n      popoverActions={popoverActions}\r\n      isCurrencyChanged={isCurrencyChanged}\r\n      task={task}\r\n      handlers={{\r\n        checkListChangeSave,\r\n        checkListChangeReset,\r\n        completeTask,\r\n        checklistDirtyCheck,\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}