{"ast":null,"code":"import \"core-js/modules/es.promise.finally\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n// app\nimport * as utils from 'utils';\nimport { authLogout, addLoader, removeLoader, storeProcessingInstruction, storeProcessingInstructionDocuments, updatePiFinancialCheckList } from 'stores';\nexport var getProcessingInstruction = function getProcessingInstruction(id) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/processingInstructions.actions.getProcessingInstruction'\n    };\n    dispatch(getProcessingInstructionRequest(id));\n    dispatch(addLoader('getProcessingInstruction'));\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.ppService,\n      path: \"instruction/\".concat(id)\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      var _processingInstructio, _processingInstructio2, _processingInstructio3;\n\n      var processingInstruction = data.data;\n      dispatch(getProcessingInstructionSuccess(processingInstruction));\n      dispatch(storeProcessingInstruction(processingInstruction));\n      dispatch(updatePiFinancialCheckList(processingInstruction === null || processingInstruction === void 0 ? void 0 : (_processingInstructio = processingInstruction.financialChecklistDetails) === null || _processingInstructio === void 0 ? void 0 : _processingInstructio.map(function (element, index) {\n        return _objectSpread(_objectSpread({}, element), {}, {\n          convertedBrokerage: null,\n          ppwOrPpcName: null,\n          retainedBrokerageAmount: null,\n          retainedBrokerageCurrencyCodeName: null,\n          settlementCurrencyName: null,\n          paymentBasisName: null,\n          total: null,\n          id: index\n        });\n      }))); // add all documents data to documents redux store to handle upload and download\n\n      var documents = {\n        riskReferences: (processingInstruction === null || processingInstruction === void 0 ? void 0 : processingInstruction.riskReferences) || [],\n        premiumTaxDocument: (processingInstruction === null || processingInstruction === void 0 ? void 0 : (_processingInstructio2 = processingInstruction.details) === null || _processingInstructio2 === void 0 ? void 0 : _processingInstructio2.premiumTaxDocument) || null,\n        signedLinesDocument: (processingInstruction === null || processingInstruction === void 0 ? void 0 : (_processingInstructio3 = processingInstruction.details) === null || _processingInstructio3 === void 0 ? void 0 : _processingInstructio3.signedLinesDocument) || null\n      };\n      dispatch(storeProcessingInstructionDocuments(documents));\n      return processingInstruction;\n    })[\"catch\"](function (err) {\n      utils.api.handleError(err, _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API fetch error (processingInstructions.getProcessingInstructionId)'\n      }));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(getProcessingInstructionFailure(err));\n      return err;\n    })[\"finally\"](function () {\n      dispatch(removeLoader('getProcessingInstruction'));\n    });\n  };\n};\nexport var getProcessingInstructionRequest = function getProcessingInstructionRequest(id) {\n  return {\n    type: 'PROCESSING_INSTRUCTIONS_GET_INSTRUCTION_REQUEST',\n    payload: id\n  };\n};\nexport var getProcessingInstructionSuccess = function getProcessingInstructionSuccess(data) {\n  return {\n    type: 'PROCESSING_INSTRUCTIONS_GET_INSTRUCTION_SUCCESS',\n    payload: data,\n    id: data.id\n  };\n};\nexport var getProcessingInstructionFailure = function getProcessingInstructionFailure(error) {\n  return {\n    type: 'PROCESSING_INSTRUCTIONS_GET_INSTRUCTION_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/processingInstructions/processingInstructions.actions.getProcessingInstruction.js"],"names":["utils","authLogout","addLoader","removeLoader","storeProcessingInstruction","storeProcessingInstructionDocuments","updatePiFinancialCheckList","getProcessingInstruction","id","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","getProcessingInstructionRequest","api","get","token","accessToken","ppService","path","then","response","handleResponse","json","handleNewData","data","processingInstruction","getProcessingInstructionSuccess","financialChecklistDetails","map","element","index","convertedBrokerage","ppwOrPpcName","retainedBrokerageAmount","retainedBrokerageCurrencyCodeName","settlementCurrencyName","paymentBasisName","total","documents","riskReferences","premiumTaxDocument","details","signedLinesDocument","err","handleError","message","handleUnauthorized","getProcessingInstructionFailure","type","payload","error"],"mappings":"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","sourcesContent":["// app\r\nimport * as utils from 'utils';\r\nimport {\r\n  authLogout,\r\n  addLoader,\r\n  removeLoader,\r\n  storeProcessingInstruction,\r\n  storeProcessingInstructionDocuments,\r\n  updatePiFinancialCheckList,\r\n} from 'stores';\r\n\r\nexport const getProcessingInstruction = (id) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  const defaultError = { file: 'stores/processingInstructions.actions.getProcessingInstruction' };\r\n\r\n  dispatch(getProcessingInstructionRequest(id));\r\n  dispatch(addLoader('getProcessingInstruction'));\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.ppService,\r\n      path: `instruction/${id}`,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      const processingInstruction = data.data;\r\n      dispatch(getProcessingInstructionSuccess(processingInstruction));\r\n      dispatch(storeProcessingInstruction(processingInstruction));\r\n\r\n      dispatch(\r\n        updatePiFinancialCheckList(\r\n          processingInstruction?.financialChecklistDetails?.map((element, index) => {\r\n            return {\r\n              ...element,\r\n              convertedBrokerage: null,\r\n              ppwOrPpcName: null,\r\n              retainedBrokerageAmount: null,\r\n              retainedBrokerageCurrencyCodeName: null,\r\n              settlementCurrencyName: null,\r\n              paymentBasisName: null,\r\n              total: null,\r\n              id: index,\r\n            };\r\n          })\r\n        )\r\n      );\r\n\r\n      // add all documents data to documents redux store to handle upload and download\r\n      const documents = {\r\n        riskReferences: processingInstruction?.riskReferences || [],\r\n        premiumTaxDocument: processingInstruction?.details?.premiumTaxDocument || null,\r\n        signedLinesDocument: processingInstruction?.details?.signedLinesDocument || null,\r\n      };\r\n\r\n      dispatch(storeProcessingInstructionDocuments(documents));\r\n      return processingInstruction;\r\n    })\r\n    .catch((err) => {\r\n      utils.api.handleError(err, { ...defaultError, message: 'API fetch error (processingInstructions.getProcessingInstructionId)' });\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(getProcessingInstructionFailure(err));\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('getProcessingInstruction'));\r\n    });\r\n};\r\n\r\nexport const getProcessingInstructionRequest = (id) => {\r\n  return {\r\n    type: 'PROCESSING_INSTRUCTIONS_GET_INSTRUCTION_REQUEST',\r\n    payload: id,\r\n  };\r\n};\r\n\r\nexport const getProcessingInstructionSuccess = (data) => {\r\n  return {\r\n    type: 'PROCESSING_INSTRUCTIONS_GET_INSTRUCTION_SUCCESS',\r\n    payload: data,\r\n    id: data.id,\r\n  };\r\n};\r\n\r\nexport const getProcessingInstructionFailure = (error) => {\r\n  return {\r\n    type: 'PROCESSING_INSTRUCTIONS_GET_INSTRUCTION_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}