{"ast":null,"code":"import { authLogout, addLoader, removeLoader } from 'stores';\nimport * as utils from 'utils';\nimport get from 'lodash/get';\nexport var getClaimsPreviewInformation = function getClaimsPreviewInformation(_ref) {\n  var claimId = _ref.claimId,\n      claimRefParams = _ref.claimRefParams,\n      sourceIdParams = _ref.sourceIdParams,\n      divisionIDParams = _ref.divisionIDParams,\n      _ref$viewLoader = _ref.viewLoader,\n      viewLoader = _ref$viewLoader === void 0 ? true : _ref$viewLoader;\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/claims.actions.getClaimsPreviewInformation'\n    };\n    var state = getState();\n    var claimSubmissionId = claimId ? claimId : get(state, 'claims.claimsInformation.claimID') || '';\n    var sourceId = sourceIdParams ? sourceIdParams : get(state, 'claims.claimsInformation.sourceID');\n    var claimRef = claimRefParams ? claimRefParams : get(state, 'claims.claimsInformation.claimReference');\n    var divisionId = divisionIDParams ? divisionIDParams : get(state, 'claims.claimsInformation.departmentID');\n    dispatch(getClaimsInformationRequest(claimSubmissionId));\n    viewLoader && dispatch(addLoader('getClaimsInformation'));\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.claimService,\n      path: \"api/data/claims/\".concat(claimSubmissionId, \"/detail\"),\n      params: {\n        sourceId: sourceId,\n        claimRef: claimRef,\n        divisionId: divisionId\n      }\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (data) {\n      dispatch(getClaimsInformationSuccess(data.data));\n      return data.data;\n    }).catch(function (err) {\n      dispatch(getClaimsInformationFailure(err, defaultError));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      return err;\n    }).finally(function () {\n      viewLoader && dispatch(removeLoader('getClaimsInformation'));\n    });\n  };\n};\nexport var getClaimsInformationRequest = function getClaimsInformationRequest(data) {\n  return {\n    type: 'CLAIMS_PREVIEW_INFORMATION_GET_REQUEST',\n    payload: {\n      data: data\n    }\n  };\n};\nexport var getClaimsInformationSuccess = function getClaimsInformationSuccess(data) {\n  return {\n    type: 'CLAIMS_PREVIEW_INFORMATION_GET_SUCCESS',\n    payload: data\n  };\n};\nexport var getClaimsInformationFailure = function getClaimsInformationFailure(data) {\n  return {\n    type: 'CLAIMS_PREVIEW_INFORMATION_GET_FAILURE',\n    payload: data\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.getClaimsPreviewInformation.js"],"names":["authLogout","addLoader","removeLoader","utils","get","getClaimsPreviewInformation","claimId","claimRefParams","sourceIdParams","divisionIDParams","viewLoader","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","state","claimSubmissionId","sourceId","claimRef","divisionId","getClaimsInformationRequest","api","token","accessToken","claimService","path","params","then","response","handleResponse","data","getClaimsInformationSuccess","catch","err","getClaimsInformationFailure","handleUnauthorized","finally","type","payload"],"mappings":"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","sourcesContent":["import { authLogout, addLoader, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nimport get from 'lodash/get';\r\n\r\nexport const getClaimsPreviewInformation = ({ claimId, claimRefParams, sourceIdParams, divisionIDParams, viewLoader = true }) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } } } = getState();\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.getClaimsPreviewInformation',\r\n  };\r\n\r\n  const state = getState();\r\n  const claimSubmissionId = claimId ? claimId : get(state, 'claims.claimsInformation.claimID') || '';\r\n  const sourceId = sourceIdParams ? sourceIdParams : get(state, 'claims.claimsInformation.sourceID');\r\n  const claimRef = claimRefParams ? claimRefParams : get(state, 'claims.claimsInformation.claimReference');\r\n  const divisionId = divisionIDParams ? divisionIDParams : get(state, 'claims.claimsInformation.departmentID');\r\n\r\n  dispatch(getClaimsInformationRequest(claimSubmissionId));\r\n  viewLoader && dispatch(addLoader('getClaimsInformation'));\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.claimService,\r\n      path: `api/data/claims/${claimSubmissionId}/detail`,\r\n      params: {\r\n        sourceId,\r\n        claimRef,\r\n        divisionId,\r\n      },\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((data) => {\r\n      dispatch(getClaimsInformationSuccess(data.data));\r\n      return data.data;\r\n    })\r\n    .catch((err) => {\r\n      dispatch(getClaimsInformationFailure(err, defaultError));\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      viewLoader && dispatch(removeLoader('getClaimsInformation'));\r\n    });\r\n};\r\n\r\nexport const getClaimsInformationRequest = (data) => {\r\n  return {\r\n    type: 'CLAIMS_PREVIEW_INFORMATION_GET_REQUEST',\r\n    payload: { data },\r\n  };\r\n};\r\n\r\nexport const getClaimsInformationSuccess = (data) => {\r\n  return {\r\n    type: 'CLAIMS_PREVIEW_INFORMATION_GET_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const getClaimsInformationFailure = (data) => {\r\n  return {\r\n    type: 'CLAIMS_PREVIEW_INFORMATION_GET_FAILURE',\r\n    payload: data,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}