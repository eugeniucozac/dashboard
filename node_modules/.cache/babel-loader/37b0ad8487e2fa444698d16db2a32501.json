{"ast":null,"code":"import \"core-js/modules/es.array.find\";\nimport _objectWithoutProperties from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n// app\nimport { addLoader, authLogout, enqueueNotification, hideModal, removeLoader, storeProcessingInstructionDocuments } from 'stores';\nimport * as utils from 'utils';\nimport * as constants from 'consts';\nexport var uploadDocumentList = function uploadDocumentList(formData) {\n  return function (dispatch, getState) {\n    var _businessProcesses$fi;\n\n    var state = getState(); // prettier-ignore\n\n    var _state$user = state.user,\n        auth = _state$user.auth,\n        id = _state$user.id,\n        endpoint = state.config.vars.endpoint,\n        businessProcesses = state.referenceData.businessProcesses;\n    var instruction = formData.instruction,\n        documents = formData.documents,\n        riskRef = formData.riskRef,\n        files = formData.files,\n        objectType = formData.objectType;\n    var defaultError = {\n      file: 'stores/processingInstructions.actions.uploadDocumentList'\n    };\n    dispatch(uploadDocumentListPostRequest(formData));\n    dispatch(addLoader({\n      key: 'uploadDocumentList',\n      message: utils.string.t('fileUpload.uploading')\n    }));\n    var businessProcess = businessProcesses === null || businessProcesses === void 0 ? void 0 : (_businessProcesses$fi = businessProcesses.find(function (bp) {\n      return bp.businessProcessID === (instruction === null || instruction === void 0 ? void 0 : instruction.businessProcessId);\n    })) === null || _businessProcesses$fi === void 0 ? void 0 : _businessProcesses$fi.businessProcessName;\n    var validFormData = (instruction === null || instruction === void 0 ? void 0 : instruction.id) && businessProcess && (riskRef === null || riskRef === void 0 ? void 0 : riskRef.departmentCode) && (riskRef === null || riskRef === void 0 ? void 0 : riskRef.policyUID) && (riskRef === null || riskRef === void 0 ? void 0 : riskRef.riskRefId) && (riskRef === null || riskRef === void 0 ? void 0 : riskRef.xbPolicyId) && (riskRef === null || riskRef === void 0 ? void 0 : riskRef.xbInstanceId) && objectType && utils.generic.isValidArray(files, true);\n\n    if (!formData || !validFormData) {\n      dispatch(uploadDocumentListPostFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: utils.string.t('processingInstructions.missingUploadFileDataParameters')\n      })));\n      if (!(riskRef === null || riskRef === void 0 ? void 0 : riskRef.departmentCode)) dispatch(enqueueNotification('notification.fileUpload.upload.departmentCodeMissing', 'error'));else dispatch(enqueueNotification('notification.fileUpload.upload.fail', 'error'));\n      dispatch(removeLoader('uploadDocumentList'));\n      return;\n    }\n\n    var form = new FormData();\n    files.forEach(function (fileObj) {\n      if (fileObj.file) {\n        form.append('uploadFiles', fileObj.file);\n      }\n    });\n    var isEndorsement = utils.processingInstructions.isEndorsement(instruction === null || instruction === void 0 ? void 0 : instruction.processTypeId);\n    var isBordereau = utils.processingInstructions.isBordereau(instruction === null || instruction === void 0 ? void 0 : instruction.processTypeId);\n    var isFeeAndAmendment = utils.processingInstructions.isFeeAndAmendment(instruction === null || instruction === void 0 ? void 0 : instruction.processTypeId);\n    var faBorderProcessType = isBordereau || isFeeAndAmendment;\n    var processDocumentDTOJson = {\n      endorsementId: isEndorsement ? riskRef.endorsementId : 0,\n      endorsementUid: isEndorsement ? riskRef.bulkEndorsementUid : null,\n      instructionId: instruction.id,\n      businessProcess: businessProcess,\n      departmentCode: riskRef.departmentCode,\n      policyUid: riskRef.policyUID,\n      policyRef: riskRef.riskRefId,\n      documentTypeId: null,\n      policyId: riskRef.xbPolicyId,\n      documentTypeDescription: isEndorsement ? constants.PI_ENDORSEMENT_TYPE_DOCUMENT.documentTypeDescription : faBorderProcessType ? constants.PI_FABORDER_TYPE_DOCUMENT.documentTypeDescription : constants.PI_CLOSING_FDO_TYPE_DOCUMENT.documentTypeDescription,\n      sourceId: riskRef.xbInstanceId,\n      objectType: objectType,\n      documentSource: 'GXB',\n      // In future documentSource will be dynamic value and coming from riskreference object\n      createdBy: id //After RBAC implementation in the api side remove this createdBy\n\n    };\n    form.append('processDocumentDTOJson', JSON.stringify(processDocumentDTOJson));\n    return utils.api.multiPartPost({\n      token: auth.accessToken,\n      endpoint: endpoint.dmsService,\n      path: 'gxbUploadDocument',\n      data: form\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (json) {\n      var newFiles = json.data;\n      if (!utils.generic.isValidArray(newFiles)) return;\n      var newGxbDocs = [];\n      newFiles.forEach(function (file) {\n        var newFile = {};\n        newFile.departmentCode = file === null || file === void 0 ? void 0 : file.departmentCode;\n        newFile.folderUuid = file === null || file === void 0 ? void 0 : file.folderUid;\n        newFile.name = file === null || file === void 0 ? void 0 : file.documentName;\n        newFile.path = file === null || file === void 0 ? void 0 : file.documentPath;\n        newFile.policyId = file === null || file === void 0 ? void 0 : file.policyId;\n        newFile.sectionType = file === null || file === void 0 ? void 0 : file.sectionType;\n        newFile.source = file === null || file === void 0 ? void 0 : file.documentSource;\n        newFile.typeId = file === null || file === void 0 ? void 0 : file.documentTypeId;\n        newFile.uuid = file === null || file === void 0 ? void 0 : file.documentUid;\n        newFile.version = file === null || file === void 0 ? void 0 : file.version;\n        newGxbDocs.push(newFile);\n      });\n\n      var updatedRiskRef = _objectSpread(_objectSpread({}, riskRef), {}, {\n        gxbDocuments: [].concat(newGxbDocs, _toConsumableArray(riskRef.gxbDocuments))\n      });\n\n      var updatedDocuments = _objectSpread(_objectSpread({}, documents), {}, {\n        riskReferences: Object.values([].concat(_toConsumableArray(documents === null || documents === void 0 ? void 0 : documents.riskReferences), [updatedRiskRef]).reduce(function (result, _ref) {\n          var riskRefId = _ref.riskRefId,\n              rest = _objectWithoutProperties(_ref, [\"riskRefId\"]);\n\n          result[riskRefId] = _objectSpread(_objectSpread({}, result[riskRefId] || {}), {}, {\n            riskRefId: riskRefId\n          }, rest);\n          return result;\n        }, {}))\n      });\n\n      dispatch(storeProcessingInstructionDocuments(updatedDocuments));\n      dispatch(uploadDocumentListPostSuccess(json.data));\n      dispatch(enqueueNotification(json.message, 'success'));\n      return json.data;\n    })[\"catch\"](function (err) {\n      var errorParams = {\n        file: 'stores/processingInstructions.actions.uploadDocumentList',\n        message: utils.string.t('processingInstructions.apiMultipartPostError')\n      };\n      dispatch(uploadDocumentListPostFailure(err));\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n\n      if (err.response.status === constants.API_STATUS_NOT_FOUND) {\n        dispatch(enqueueNotification(err.json.message, 'error'));\n      } else {\n        dispatch(enqueueNotification('notification.fileUpload.upload.fail', 'error'));\n      }\n    })[\"finally\"](function () {\n      dispatch(removeLoader('uploadDocumentList'));\n      dispatch(hideModal());\n      return;\n    });\n  };\n};\nexport var uploadDocumentListPostRequest = function uploadDocumentListPostRequest(payload) {\n  return {\n    type: 'UPLOAD_DOCUMENT_List_POST_REQUEST',\n    payload: payload\n  };\n};\nexport var uploadDocumentListPostSuccess = function uploadDocumentListPostSuccess(data) {\n  return {\n    type: 'UPLOAD_DOCUMENT_List_POST_SUCCESS',\n    payload: {\n      data: data\n    }\n  };\n};\nexport var uploadDocumentListPostFailure = function uploadDocumentListPostFailure(error) {\n  return {\n    type: 'UPLOAD_DOCUMENT_List_POST_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/processingInstructions/processingInstructions.actions.uploadDocumentList.js"],"names":["addLoader","authLogout","enqueueNotification","hideModal","removeLoader","storeProcessingInstructionDocuments","utils","constants","uploadDocumentList","formData","dispatch","getState","state","user","auth","id","endpoint","config","vars","businessProcesses","referenceData","instruction","documents","riskRef","files","objectType","defaultError","file","uploadDocumentListPostRequest","key","message","string","t","businessProcess","find","bp","businessProcessID","businessProcessId","businessProcessName","validFormData","departmentCode","policyUID","riskRefId","xbPolicyId","xbInstanceId","generic","isValidArray","uploadDocumentListPostFailure","form","FormData","forEach","fileObj","append","isEndorsement","processingInstructions","processTypeId","isBordereau","isFeeAndAmendment","faBorderProcessType","processDocumentDTOJson","endorsementId","endorsementUid","bulkEndorsementUid","instructionId","policyUid","policyRef","documentTypeId","policyId","documentTypeDescription","PI_ENDORSEMENT_TYPE_DOCUMENT","PI_FABORDER_TYPE_DOCUMENT","PI_CLOSING_FDO_TYPE_DOCUMENT","sourceId","documentSource","createdBy","JSON","stringify","api","multiPartPost","token","accessToken","dmsService","path","data","then","response","handleResponse","json","handleNewData","newFiles","newGxbDocs","newFile","folderUuid","folderUid","name","documentName","documentPath","sectionType","source","typeId","uuid","documentUid","version","push","updatedRiskRef","gxbDocuments","updatedDocuments","riskReferences","Object","values","reduce","result","rest","uploadDocumentListPostSuccess","err","errorParams","handleError","handleUnauthorized","status","API_STATUS_NOT_FOUND","payload","type","error"],"mappings":"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","sourcesContent":["// app\r\nimport { addLoader, authLogout, enqueueNotification, hideModal, removeLoader, storeProcessingInstructionDocuments } from 'stores';\r\nimport * as utils from 'utils';\r\nimport * as constants from 'consts';\r\n\r\nexport const uploadDocumentList = (formData) => (dispatch, getState) => {\r\n  const state = getState();\r\n\r\n  // prettier-ignore\r\n  const { user:{ auth, id}, config: { vars: { endpoint } }, referenceData: {businessProcesses} } = state;\r\n\r\n  const { instruction, documents, riskRef, files, objectType } = formData;\r\n\r\n  const defaultError = {\r\n    file: 'stores/processingInstructions.actions.uploadDocumentList',\r\n  };\r\n\r\n  dispatch(uploadDocumentListPostRequest(formData));\r\n  dispatch(addLoader({ key: 'uploadDocumentList', message: utils.string.t('fileUpload.uploading') }));\r\n\r\n  const businessProcess = businessProcesses?.find((bp) => bp.businessProcessID === instruction?.businessProcessId)?.businessProcessName;\r\n  const validFormData =\r\n    instruction?.id &&\r\n    businessProcess &&\r\n    riskRef?.departmentCode &&\r\n    riskRef?.policyUID &&\r\n    riskRef?.riskRefId &&\r\n    riskRef?.xbPolicyId &&\r\n    riskRef?.xbInstanceId &&\r\n    objectType &&\r\n    utils.generic.isValidArray(files, true);\r\n\r\n  if (!formData || !validFormData) {\r\n    dispatch(\r\n      uploadDocumentListPostFailure({ ...defaultError, message: utils.string.t('processingInstructions.missingUploadFileDataParameters') })\r\n    );\r\n\r\n    if (!riskRef?.departmentCode) dispatch(enqueueNotification('notification.fileUpload.upload.departmentCodeMissing', 'error'));\r\n    else dispatch(enqueueNotification('notification.fileUpload.upload.fail', 'error'));\r\n\r\n    dispatch(removeLoader('uploadDocumentList'));\r\n    return;\r\n  }\r\n\r\n  let form = new FormData();\r\n\r\n  files.forEach((fileObj) => {\r\n    if (fileObj.file) {\r\n      form.append('uploadFiles', fileObj.file);\r\n    }\r\n  });\r\n\r\n  const isEndorsement = utils.processingInstructions.isEndorsement(instruction?.processTypeId);\r\n  const isBordereau = utils.processingInstructions.isBordereau(instruction?.processTypeId);\r\n  const isFeeAndAmendment = utils.processingInstructions.isFeeAndAmendment(instruction?.processTypeId);\r\n\r\n  const faBorderProcessType = isBordereau || isFeeAndAmendment;\r\n\r\n  const processDocumentDTOJson = {\r\n    endorsementId: isEndorsement ? riskRef.endorsementId : 0,\r\n    endorsementUid: isEndorsement ? riskRef.bulkEndorsementUid : null,\r\n    instructionId: instruction.id,\r\n    businessProcess: businessProcess,\r\n    departmentCode: riskRef.departmentCode,\r\n    policyUid: riskRef.policyUID,\r\n    policyRef: riskRef.riskRefId,\r\n    documentTypeId: null,\r\n    policyId: riskRef.xbPolicyId,\r\n    documentTypeDescription: isEndorsement\r\n      ? constants.PI_ENDORSEMENT_TYPE_DOCUMENT.documentTypeDescription\r\n      : faBorderProcessType\r\n      ? constants.PI_FABORDER_TYPE_DOCUMENT.documentTypeDescription\r\n      : constants.PI_CLOSING_FDO_TYPE_DOCUMENT.documentTypeDescription,\r\n    sourceId: riskRef.xbInstanceId,\r\n    objectType: objectType,\r\n    documentSource: 'GXB', // In future documentSource will be dynamic value and coming from riskreference object\r\n    createdBy: id, //After RBAC implementation in the api side remove this createdBy\r\n  };\r\n\r\n  form.append('processDocumentDTOJson', JSON.stringify(processDocumentDTOJson));\r\n\r\n  return utils.api\r\n    .multiPartPost({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.dmsService,\r\n      path: 'gxbUploadDocument',\r\n      data: form,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((json) => {\r\n      const newFiles = json.data;\r\n      if (!utils.generic.isValidArray(newFiles)) return;\r\n      const newGxbDocs = [];\r\n      newFiles.forEach((file) => {\r\n        let newFile = {};\r\n        newFile.departmentCode = file?.departmentCode;\r\n        newFile.folderUuid = file?.folderUid;\r\n        newFile.name = file?.documentName;\r\n        newFile.path = file?.documentPath;\r\n        newFile.policyId = file?.policyId;\r\n        newFile.sectionType = file?.sectionType;\r\n        newFile.source = file?.documentSource;\r\n        newFile.typeId = file?.documentTypeId;\r\n        newFile.uuid = file?.documentUid;\r\n        newFile.version = file?.version;\r\n        newGxbDocs.push(newFile);\r\n      });\r\n      const updatedRiskRef = { ...riskRef, gxbDocuments: [...newGxbDocs, ...riskRef.gxbDocuments] };\r\n      const updatedDocuments = {\r\n        ...documents,\r\n        riskReferences: Object.values(\r\n          [...documents?.riskReferences, ...[updatedRiskRef]].reduce((result, { riskRefId, ...rest }) => {\r\n            result[riskRefId] = {\r\n              ...(result[riskRefId] || {}),\r\n              riskRefId,\r\n              ...rest,\r\n            };\r\n            return result;\r\n          }, {})\r\n        ),\r\n      };\r\n      dispatch(storeProcessingInstructionDocuments(updatedDocuments));\r\n      dispatch(uploadDocumentListPostSuccess(json.data));\r\n      dispatch(enqueueNotification(json.message, 'success'));\r\n      return json.data;\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        file: 'stores/processingInstructions.actions.uploadDocumentList',\r\n        message: utils.string.t('processingInstructions.apiMultipartPostError'),\r\n      };\r\n\r\n      dispatch(uploadDocumentListPostFailure(err));\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      if (err.response.status === constants.API_STATUS_NOT_FOUND) {\r\n        dispatch(enqueueNotification(err.json.message, 'error'));\r\n      } else {\r\n        dispatch(enqueueNotification('notification.fileUpload.upload.fail', 'error'));\r\n      }\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('uploadDocumentList'));\r\n      dispatch(hideModal());\r\n      return;\r\n    });\r\n};\r\n\r\nexport const uploadDocumentListPostRequest = (payload) => {\r\n  return {\r\n    type: 'UPLOAD_DOCUMENT_List_POST_REQUEST',\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const uploadDocumentListPostSuccess = (data) => {\r\n  return {\r\n    type: 'UPLOAD_DOCUMENT_List_POST_SUCCESS',\r\n    payload: {\r\n      data,\r\n    },\r\n  };\r\n};\r\n\r\nexport const uploadDocumentListPostFailure = (error) => {\r\n  return {\r\n    type: 'UPLOAD_DOCUMENT_List_POST_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}