{"ast":null,"code":"import _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\PremiumProcessingCaseRhsAccordions\\\\PremiumProcessingCaseRhsAccordions.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router';\nimport isEmpty from 'lodash/isEmpty';\nimport * as Yup from 'yup'; //app\n\nimport PremiumProcessingCaseRhsAccordionsView from './PremiumProcessingCaseRhsAccordions.view';\nimport { enqueueNotification, showModal, selectCasesListType, postNewWorkflowStage, getPremiumProcessingTasksDetails, selectCaseDetails, premiumProcessingCheckSigningCompleteCase, premiumProcessingCheckSigningCancelCase, selectCaseTaskTypeView, getEmailSendStatus, selectUserGroup } from 'stores';\nimport * as constants from 'consts';\nimport * as utils from 'utils';\nimport config from 'config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nPremiumProcessingCaseRhsAccordions.propTypes = {\n  currentUser: PropTypes.array.isRequired,\n  selectedCases: PropTypes.array,\n  caseRfiDetails: PropTypes.object.isRequired,\n  isAllCases: PropTypes.bool.isRequired,\n  isCheckSigningCase: PropTypes.bool.isRequired,\n  isIssueDocumentStage: PropTypes.bool.isRequired,\n  isTransactionCommited: PropTypes.bool.isRequired,\n  isUnassignedStage: PropTypes.bool.isRequired,\n  isWorkBasket: PropTypes.bool.isRequired,\n  handlers: PropTypes.shape({\n    caseTeamHandler: PropTypes.func.isRequired,\n    caseRfiHandler: PropTypes.func.isRequired,\n    openUpdatingPopup: PropTypes.func.isRequired\n  }).isRequired\n};\nexport default function PremiumProcessingCaseRhsAccordions(_ref) {\n  _s();\n\n  var _selectedCases$;\n\n  var currentUser = _ref.currentUser,\n      selectedCases = _ref.selectedCases,\n      caseRfiDetails = _ref.caseRfiDetails,\n      isAllCases = _ref.isAllCases,\n      isCheckSigningCase = _ref.isCheckSigningCase,\n      isIssueDocumentStage = _ref.isIssueDocumentStage,\n      isTransactionCommited = _ref.isTransactionCommited,\n      isUnassignedStage = _ref.isUnassignedStage,\n      isWorkBasket = _ref.isWorkBasket,\n      handlers = _ref.handlers;\n  var caseType = useSelector(selectCasesListType);\n  var history = useHistory();\n  var dispatch = useDispatch();\n  var caseDetails = useSelector(selectCaseDetails);\n  var caseTaskTypeView = useSelector(selectCaseTaskTypeView);\n  var userGroup = useSelector(selectUserGroup);\n  var caseStages = caseDetails === null || caseDetails === void 0 ? void 0 : caseDetails.caseStageDetails;\n  var selectedCaseDetails = caseDetails === null || caseDetails === void 0 ? void 0 : caseDetails.caseTeamData;\n  var policyRef = selectedCases === null || selectedCases === void 0 ? void 0 : (_selectedCases$ = selectedCases[0]) === null || _selectedCases$ === void 0 ? void 0 : _selectedCases$.policyRef;\n  var caseId = caseDetails.caseId,\n      taskId = caseDetails.taskId,\n      processId = caseDetails.processId,\n      policyId = caseDetails.policyId,\n      openRfi = caseDetails.openRfi;\n  var sourceId = selectedCaseDetails === null || selectedCaseDetails === void 0 ? void 0 : selectedCaseDetails.xbInstanceId;\n  var isBackOffice = utils.generic.isValidArray(userGroup, true) && userGroup[0].code === constants.BACK_OFFICE;\n  var isJuniorTechnician = utils.generic.isValidArray(currentUser, true) && currentUser.some(function (item) {\n    return [constants.JUNIOR_TECHNICIAN].includes(item.name);\n  });\n  var isFdo = utils.generic.isValidObject(selectedCaseDetails, 'processName') && (selectedCaseDetails === null || selectedCaseDetails === void 0 ? void 0 : selectedCaseDetails.processName) === constants.FDO;\n  var isEndorsementNonPremium = utils.generic.isValidObject(selectedCaseDetails, 'processName') && (selectedCaseDetails === null || selectedCaseDetails === void 0 ? void 0 : selectedCaseDetails.processName) === constants.ENDORSEMENT_NON_PREMIUM;\n  var isPppOrPbpStage = caseStages === null || caseStages === void 0 ? void 0 : caseStages.some(function (cs) {\n    return [constants.BPM_STAGE_PREPARE_PREMIUM_PROCESSING, constants.BPM_STAGE_PREPARE_BORDEREAU_PROCESSING].includes(cs.bpmStageCode) && cs.active;\n  });\n  var isQueriedStage = caseStages === null || caseStages === void 0 ? void 0 : caseStages.some(function (cs) {\n    return [constants.BPM_STAGE_QUERIED].includes(cs.bpmStageCode) && cs.active;\n  });\n  var isRejectPendingActionStage = caseStages === null || caseStages === void 0 ? void 0 : caseStages.some(function (cs) {\n    return [constants.BPM_STAGE_REJECTED_PENDING_ACTION].includes(cs.bpmStageCode) && cs.active;\n  });\n  var qcTypes = [{\n    id: 1,\n    name: 'yes',\n    value: 'yes',\n    label: utils.string.t('premiumProcessing.qualityControl.pass')\n  }, {\n    id: 2,\n    name: 'no',\n    value: 'no',\n    label: utils.string.t('premiumProcessing.qualityControl.fail')\n  }];\n\n  var viewMoreNotesHandler = function viewMoreNotesHandler() {\n    if (taskId) {\n      history.push(\"\".concat(config.routes.premiumProcessing[\"case\"], \"/\").concat(taskId, \"/\").concat(constants.PREMIUM_PROCESSING_TAB_NOTES));\n    } else if (processId) {\n      history.push(\"\".concat(config.routes.premiumProcessing[\"case\"], \"/\").concat(processId, \"/\").concat(constants.PREMIUM_PROCESSING_TAB_NOTES));\n    }\n  };\n\n  var fields = [{\n    name: 'qcComplete',\n    type: 'checkbox',\n    value: false,\n    label: 'QC complete'\n  }, {\n    name: 'notesField',\n    type: 'textarea',\n    value: '',\n    validation: Yup.string().required(),\n    muiComponentProps: {\n      multiline: true,\n      minRows: 3,\n      maxRows: 6,\n      disabled: isWorkBasket || isAllCases || isUnassignedStage,\n      inputProps: {\n        maxLength: 2000\n      }\n    }\n  }, {\n    name: 'qualityControl',\n    type: 'radio',\n    title: 'Quality Control',\n    value: '',\n    options: qcTypes,\n    muiFormGroupProps: {\n      row: true\n    },\n    muiComponentProps: {\n      disabled: false\n    }\n  }].concat(_toConsumableArray(isTransactionCommited ? [{\n    name: 'transactionCommited',\n    type: 'checkbox',\n    value: false,\n    label: utils.string.t('premiumProcessing.caseDetailsSection.transactionCommit.label')\n  }] : []));\n\n  var showQcModal = function showQcModal(qcValue) {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        fullWidth: true,\n        title: utils.string.t('premiumProcessing.qualityControlLabel'),\n        maxWidth: 'xs',\n        componentProps: {\n          confirmLabel: utils.string.t('app.submit'),\n          cancelLabel: utils.string.t('app.close'),\n          confirmMessage: (qcValue === null || qcValue === void 0 ? void 0 : qcValue.qualityControl) === 'yes' ? utils.string.t('premiumProcessing.qualityControl.qualityControlMoveToNextConfimMessagePass') : utils.string.t('premiumProcessing.qualityControl.qualityControlMoveToNextConfimMessageFail'),\n          buttonColors: {\n            confirm: 'secondary',\n            cancel: 'primary'\n          },\n          submitHandler: function submitHandler() {\n            var isQcApproved = qcValue === null || qcValue === void 0 ? void 0 : qcValue.qualityControl;\n            var notes = qcValue === null || qcValue === void 0 ? void 0 : qcValue.notesField;\n            dispatch(postNewWorkflowStage({\n              taskId: taskId,\n              notes: notes,\n              isQcApproved: isQcApproved,\n              policyRef: policyRef\n            })).then(function (response) {\n              if ((response === null || response === void 0 ? void 0 : response.message) !== null) {\n                if ((response === null || response === void 0 ? void 0 : response.message.toUpperCase()) === constants.API_RESPONSE_SUCCESS) {\n                  dispatch(getPremiumProcessingTasksDetails({\n                    requestType: 'search',\n                    taskType: caseTaskTypeView,\n                    filterTerm: []\n                  }));\n                  dispatch(getPremiumProcessingTasksDetails({\n                    requestType: 'filter',\n                    taskType: caseTaskTypeView,\n                    filterTerm: []\n                  }));\n                }\n              } else {\n                dispatch(enqueueNotification(utils.string.t('premiumProcessing.caseDetailsSection.workflowStageUpdateError'), 'error'));\n              }\n            });\n          },\n          cancelHandler: function cancelHandler() {},\n          handleClose: function handleClose() {}\n        }\n      }\n    }));\n  };\n\n  var handleQcSubmit = function handleQcSubmit(qcValue) {\n    if (!isEmpty(qcValue === null || qcValue === void 0 ? void 0 : qcValue.qualityControl)) {\n      if ((qcValue === null || qcValue === void 0 ? void 0 : qcValue.qualityControl) === 'yes') {} else {\n        if (isEmpty(qcValue === null || qcValue === void 0 ? void 0 : qcValue.notesField)) {\n          dispatch(enqueueNotification('premiumProcessing.qualityControl.qualityControlFailNotesMandatory', 'warning'));\n          return;\n        }\n      }\n\n      showQcModal(qcValue);\n    } else {\n      dispatch(enqueueNotification('premiumProcessing.qualityControl.qualityControlNotSelected', 'warning'));\n    }\n  };\n\n  var notesTextFieldProps = {\n    fullWidth: true,\n    id: 'premium-processing-case-notes',\n    margin: 'normal',\n    placeholder: '',\n    variant: 'outlined'\n  };\n\n  var confirmMoveToNextStageModal = function confirmMoveToNextStageModal() {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        fullWidth: true,\n        title: utils.string.t('premiumProcessing.qualityControlLabel'),\n        maxWidth: 'xs',\n        componentProps: {\n          confirmLabel: utils.string.t('app.submit'),\n          cancelLabel: utils.string.t('app.close'),\n          confirmMessage: utils.string.t('premiumProcessing.qualityControlMoveToNextConfimMessage'),\n          buttonColors: {\n            confirm: 'secondary',\n            cancel: 'primary'\n          },\n          submitHandler: function submitHandler() {\n            dispatch(postNewWorkflowStage({\n              taskId: taskId,\n              policyRef: policyRef\n            })).then(function (response) {\n              var _response$message;\n\n              if ((response === null || response === void 0 ? void 0 : (_response$message = response.message) === null || _response$message === void 0 ? void 0 : _response$message.toUpperCase()) === constants.API_RESPONSE_SUCCESS) {\n                dispatch(getPremiumProcessingTasksDetails({\n                  requestType: 'search',\n                  taskType: caseTaskTypeView,\n                  filterTerm: []\n                }));\n                dispatch(getPremiumProcessingTasksDetails({\n                  requestType: 'filter',\n                  taskType: caseTaskTypeView,\n                  filterTerm: []\n                }));\n              } else {\n                dispatch(enqueueNotification(utils.string.t('premiumProcessing.caseDetailsSection.workflowStageUpdateError'), 'error'));\n              }\n            });\n          },\n          cancelHandler: function cancelHandler() {},\n          handleClose: function handleClose() {}\n        }\n      }\n    }));\n  };\n\n  var moveToNextStageApiCall = function moveToNextStageApiCall() {\n    dispatch(postNewWorkflowStage({\n      taskId: taskId,\n      policyRef: policyRef\n    })).then(function (response) {\n      if ((response === null || response === void 0 ? void 0 : response.message) && (response === null || response === void 0 ? void 0 : response.message.toUpperCase()) === constants.API_RESPONSE_SUCCESS) {\n        dispatch(getPremiumProcessingTasksDetails({\n          requestType: 'search',\n          taskType: caseTaskTypeView,\n          filterTerm: []\n        }));\n        dispatch(getPremiumProcessingTasksDetails({\n          requestType: 'filter',\n          taskType: caseTaskTypeView,\n          filterTerm: []\n        }));\n      }\n    });\n  };\n\n  var confirmMoveToCompletedModal = function confirmMoveToCompletedModal() {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        fullWidth: true,\n        title: utils.string.t('premiumProcessing.warning.title'),\n        maxWidth: 'xs',\n        componentProps: {\n          confirmLabel: utils.string.t('premiumProcessing.skipAndProceedButton'),\n          cancelLabel: utils.string.t('premiumProcessing.issueDocuments.cancel'),\n          confirmMessage: utils.string.t('premiumProcessing.issueDocuments.issueDocumentMoveToNextConfimMessage'),\n          buttonColors: {\n            confirm: 'secondary',\n            cancel: 'primary'\n          },\n          submitHandler: moveToNextStageApiCall,\n          cancelHandler: function cancelHandler() {},\n          handleClose: function handleClose() {}\n        }\n      }\n    }));\n  };\n\n  var caseCompletionRfiModal = function caseCompletionRfiModal() {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        fullWidth: true,\n        title: utils.string.t('premiumProcessing.caseCompletionRfi.caseCompletionRfiLabel'),\n        maxWidth: 'xs',\n        componentProps: {\n          confirmLabel: utils.string.t('premiumProcessing.caseCompletionRfi.caseCompletionRfiButton'),\n          cancelLabel: utils.string.t('premiumProcessing.caseCompletionRfi.cancel'),\n          confirmMessage: utils.string.t('premiumProcessing.caseCompletionRfi.errorMessage'),\n          buttonColors: {\n            confirm: 'secondary',\n            cancel: 'primary'\n          },\n          submitHandler: checkIssueDocumentCompleteModal,\n          cancelHandler: function cancelHandler() {},\n          handleClose: function handleClose() {}\n        }\n      }\n    }));\n  };\n\n  var checkIssueDocumentCompleteModal = function checkIssueDocumentCompleteModal() {\n    dispatch(getEmailSendStatus({\n      caseId: caseId,\n      policyId: policyId,\n      sourceId: sourceId\n    })).then(function (response) {\n      if (response.status === constants.API_RESPONSE_OK) {\n        var _response$data;\n\n        if (response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.emailSentStatus) {\n          confirmMoveToCompletedModal();\n        } else {\n          moveToNextStageApiCall();\n        }\n      }\n    });\n  };\n\n  var handleMoveToNextStage = function handleMoveToNextStage() {\n    if (!(isEndorsementNonPremium || isFdo) && isJuniorTechnician && isPppOrPbpStage) {\n      confirmMoveToNextStageModal();\n    } else if (isIssueDocumentStage) {\n      openRfi && isBackOffice ? caseCompletionRfiModal() : checkIssueDocumentCompleteModal();\n    } else {\n      if (utils.generic.isValidArray(selectedCases, true)) {\n        moveToNextStageApiCall();\n      }\n    }\n  };\n\n  var checkSigningComplete = function checkSigningComplete(fieldsValue) {\n    if (isQueriedStage && openRfi) {\n      if (isEmpty(fieldsValue === null || fieldsValue === void 0 ? void 0 : fieldsValue.notesField)) {\n        dispatch(enqueueNotification('premiumProcessing.checkSigningCase.notesMandatoryComplete', 'warning'));\n        return;\n      }\n\n      caseRfiCompleteBureauModal(fieldsValue === null || fieldsValue === void 0 ? void 0 : fieldsValue.notesField);\n    } else {\n      checkSigningCompleteModal(fieldsValue === null || fieldsValue === void 0 ? void 0 : fieldsValue.notesField);\n    }\n  };\n\n  var checkSigningCancel = function checkSigningCancel(fieldsValue) {\n    if (isQueriedStage && openRfi) {\n      if (isEmpty(fieldsValue === null || fieldsValue === void 0 ? void 0 : fieldsValue.notesField)) {\n        dispatch(enqueueNotification('premiumProcessing.checkSigningCase.notesMandatoryCancel', 'warning'));\n        return;\n      }\n\n      caseRfiCancelBureauModal(fieldsValue === null || fieldsValue === void 0 ? void 0 : fieldsValue.notesField);\n    } else {\n      checkSigningCancelModal(fieldsValue === null || fieldsValue === void 0 ? void 0 : fieldsValue.notesField);\n    }\n  };\n\n  var checkSigningReject = function checkSigningReject(fieldsValue) {\n    if (isQueriedStage && openRfi) {\n      if (isEmpty(fieldsValue === null || fieldsValue === void 0 ? void 0 : fieldsValue.notesField)) {\n        dispatch(enqueueNotification('premiumProcessing.checkSigningCase.notesMandatoryReject', 'warning'));\n        return;\n      }\n\n      caseRfiRejectBureauModal(fieldsValue === null || fieldsValue === void 0 ? void 0 : fieldsValue.notesField);\n    } else {\n      checkSigningRejectModal(fieldsValue === null || fieldsValue === void 0 ? void 0 : fieldsValue.notesField);\n    }\n  };\n\n  var checkSigningCompleteModal = function checkSigningCompleteModal(notesField) {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        fullWidth: true,\n        title: utils.string.t('premiumProcessing.checkSigningComplete.popLabel'),\n        maxWidth: 'xs',\n        componentProps: {\n          confirmLabel: utils.string.t('premiumProcessing.checkSigningCase.complete'),\n          cancelLabel: utils.string.t('premiumProcessing.checkSigningCase.cancel'),\n          confirmMessage: utils.string.t('premiumProcessing.checkSigningComplete.popMessage'),\n          buttonColors: {\n            confirm: 'secondary',\n            cancel: 'primary'\n          },\n          submitHandler: function submitHandler() {\n            dispatch(premiumProcessingCheckSigningCompleteCase({\n              caseId: caseId,\n              notesField: notesField\n            })).then(function (response) {\n              var _response$message2;\n\n              if ((response === null || response === void 0 ? void 0 : (_response$message2 = response.message) === null || _response$message2 === void 0 ? void 0 : _response$message2.toUpperCase()) === constants.API_RESPONSE_SUCCESS) {\n                dispatch(getPremiumProcessingTasksDetails({\n                  requestType: 'search',\n                  taskType: caseTaskTypeView,\n                  filterTerm: []\n                }));\n                dispatch(getPremiumProcessingTasksDetails({\n                  requestType: 'filter',\n                  taskType: caseTaskTypeView,\n                  filterTerm: []\n                }));\n              } else {\n                dispatch(enqueueNotification(utils.string.t('premiumProcessing.caseDetailsSection.workflowStageUpdateError'), 'error'));\n              }\n            });\n          },\n          cancelHandler: function cancelHandler() {},\n          handleClose: function handleClose() {}\n        }\n      }\n    }));\n  };\n\n  var caseRfiCompleteBureauModal = function caseRfiCompleteBureauModal(notesField) {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        fullWidth: true,\n        title: utils.string.t('premiumProcessing.caseCompletionRfi.caseCompletionRfiLabel'),\n        maxWidth: 'xs',\n        componentProps: {\n          confirmLabel: utils.string.t('premiumProcessing.caseCompletionRfi.caseCompletionRfiButton'),\n          cancelLabel: utils.string.t('premiumProcessing.caseCompletionRfi.cancel'),\n          confirmMessage: utils.string.t('premiumProcessing.caseCompletionRfi.errorMessage'),\n          buttonColors: {\n            confirm: 'secondary',\n            cancel: 'primary'\n          },\n          submitHandler: function submitHandler() {\n            dispatch(premiumProcessingCheckSigningCompleteCase({\n              caseId: caseId,\n              notesField: notesField\n            })).then(function (response) {\n              var _response$message3;\n\n              if ((response === null || response === void 0 ? void 0 : (_response$message3 = response.message) === null || _response$message3 === void 0 ? void 0 : _response$message3.toUpperCase()) === constants.API_RESPONSE_SUCCESS) {\n                dispatch(getPremiumProcessingTasksDetails({\n                  requestType: 'search',\n                  taskType: caseTaskTypeView,\n                  filterTerm: []\n                }));\n                dispatch(getPremiumProcessingTasksDetails({\n                  requestType: 'filter',\n                  taskType: caseTaskTypeView,\n                  filterTerm: []\n                }));\n              } else {\n                dispatch(enqueueNotification(utils.string.t('premiumProcessing.caseDetailsSection.workflowStageUpdateError'), 'error'));\n              }\n            });\n          },\n          cancelHandler: function cancelHandler() {},\n          handleClose: function handleClose() {}\n        }\n      }\n    }));\n  };\n\n  var checkSigningCancelModal = function checkSigningCancelModal(notesField) {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        fullWidth: true,\n        title: utils.string.t('premiumProcessing.checkSigningCancel.popLabel'),\n        maxWidth: 'xs',\n        componentProps: {\n          confirmLabel: utils.string.t('premiumProcessing.checkSigningCancel.continue'),\n          cancelLabel: utils.string.t('premiumProcessing.checkSigningCancel.cancel'),\n          confirmMessage: utils.string.t('premiumProcessing.checkSigningCancel.popMessage'),\n          buttonColors: {\n            confirm: 'secondary',\n            cancel: 'primary'\n          },\n          submitHandler: function submitHandler() {\n            dispatch(premiumProcessingCheckSigningCancelCase({\n              caseId: caseId,\n              notesField: notesField\n            })).then(function (response) {\n              var _response$status;\n\n              if ((response === null || response === void 0 ? void 0 : (_response$status = response.status) === null || _response$status === void 0 ? void 0 : _response$status.toLowerCase()) === constants.API_RESPONSE_OK.toLowerCase()) {\n                dispatch(getPremiumProcessingTasksDetails({\n                  requestType: 'search',\n                  taskType: caseTaskTypeView,\n                  filterTerm: []\n                }));\n                dispatch(getPremiumProcessingTasksDetails({\n                  requestType: 'filter',\n                  taskType: caseTaskTypeView,\n                  filterTerm: []\n                }));\n              } else {\n                dispatch(enqueueNotification(utils.string.t('premiumProcessing.caseDetailsSection.workflowStageUpdateError'), 'error'));\n              }\n            });\n          },\n          cancelHandler: function cancelHandler() {},\n          handleClose: function handleClose() {}\n        }\n      }\n    }));\n  };\n\n  var caseRfiCancelBureauModal = function caseRfiCancelBureauModal(notesField) {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        fullWidth: true,\n        title: utils.string.t('premiumProcessing.caseCompletionRfi.caseCompletionRfiLabel'),\n        maxWidth: 'xs',\n        componentProps: {\n          confirmLabel: utils.string.t('premiumProcessing.caseCompletionRfi.caseCompletionRfiButton'),\n          cancelLabel: utils.string.t('premiumProcessing.caseCompletionRfi.cancel'),\n          confirmMessage: utils.string.t('premiumProcessing.caseCompletionRfi.errorMessage'),\n          buttonColors: {\n            confirm: 'secondary',\n            cancel: 'primary'\n          },\n          submitHandler: function submitHandler() {\n            dispatch(premiumProcessingCheckSigningCancelCase({\n              caseId: caseId,\n              notesField: notesField\n            })).then(function (response) {\n              var _response$status2;\n\n              if ((response === null || response === void 0 ? void 0 : (_response$status2 = response.status) === null || _response$status2 === void 0 ? void 0 : _response$status2.toLowerCase()) === constants.API_RESPONSE_OK.toLowerCase()) {\n                dispatch(getPremiumProcessingTasksDetails({\n                  requestType: 'search',\n                  taskType: caseTaskTypeView,\n                  filterTerm: []\n                }));\n                dispatch(getPremiumProcessingTasksDetails({\n                  requestType: 'filter',\n                  taskType: caseTaskTypeView,\n                  filterTerm: []\n                }));\n              } else {\n                dispatch(enqueueNotification(utils.string.t('premiumProcessing.caseDetailsSection.workflowStageUpdateError'), 'error'));\n              }\n            });\n          },\n          cancelHandler: function cancelHandler() {},\n          handleClose: function handleClose() {}\n        }\n      }\n    }));\n  };\n\n  var checkSigningRejectModal = function checkSigningRejectModal(fieldsValue) {\n    var notesFieldValue = fieldsValue;\n    dispatch(showModal({\n      component: 'PREMIUM_PROCESSING_CHECK_SIGNING_REJECT',\n      props: {\n        title: utils.string.t('premiumProcessing.checkSigningReject.popLabel'),\n        fullWidth: true,\n        maxWidth: 'md',\n        componentProps: {\n          selectedCases: selectedCases,\n          notesFieldValue: notesFieldValue\n        }\n      }\n    }));\n  };\n\n  var caseRfiRejectBureauModal = function caseRfiRejectBureauModal(notesField) {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        fullWidth: true,\n        title: utils.string.t('premiumProcessing.caseCompletionRfi.caseCompletionRfiLabel'),\n        maxWidth: 'xs',\n        componentProps: {\n          confirmLabel: utils.string.t('premiumProcessing.caseCompletionRfi.caseCompletionRfiButton'),\n          cancelLabel: utils.string.t('premiumProcessing.caseCompletionRfi.cancel'),\n          confirmMessage: utils.string.t('premiumProcessing.caseCompletionRfi.errorMessage'),\n          buttonColors: {\n            confirm: 'secondary',\n            cancel: 'primary'\n          },\n          submitHandler: function submitHandler() {\n            checkSigningRejectModal(notesField);\n          },\n          cancelHandler: function cancelHandler() {},\n          handleClose: function handleClose() {}\n        }\n      }\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(PremiumProcessingCaseRhsAccordionsView, {\n    isCheckSigningCase: isCheckSigningCase,\n    selectedCases: selectedCases,\n    currentUser: currentUser,\n    caseType: caseType,\n    taskId: taskId,\n    fields: fields,\n    isWorkBasket: isWorkBasket,\n    isAllCases: isAllCases,\n    isTransactionCommited: isTransactionCommited,\n    isUnassignedStage: isUnassignedStage,\n    isIssueDocumentStage: isIssueDocumentStage,\n    notesTextFieldProps: notesTextFieldProps,\n    caseRfiDetails: caseRfiDetails,\n    caseTaskTypeView: caseTaskTypeView,\n    isRejectPendingActionStage: isRejectPendingActionStage,\n    handlers: {\n      handleMoveToNextStage: handleMoveToNextStage,\n      viewMoreNotesHandler: viewMoreNotesHandler,\n      qcSubmit: handleQcSubmit,\n      checkSigningComplete: checkSigningComplete,\n      checkSigningCancel: checkSigningCancel,\n      checkSigningReject: checkSigningReject,\n      caseTeamHandler: handlers.caseTeamHandler,\n      caseRfiHandler: handlers.caseRfiHandler,\n      openUpdatingPopup: handlers.openUpdatingPopup\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 519,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PremiumProcessingCaseRhsAccordions, \"4VDyBvdbaNqh034nQnF4q/i8ryo=\", false, function () {\n  return [useSelector, useHistory, useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = PremiumProcessingCaseRhsAccordions;\nPremiumProcessingCaseRhsAccordions.displayName = \"PremiumProcessingCaseRhsAccordions\";\nPremiumProcessingCaseRhsAccordions.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"PremiumProcessingCaseRhsAccordions\",\n  \"props\": {\n    \"currentUser\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"selectedCases\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"caseRfiDetails\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"isAllCases\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"isCheckSigningCase\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"isIssueDocumentStage\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"isTransactionCommited\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"isUnassignedStage\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"isWorkBasket\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"handlers\": {\n      \"type\": {\n        \"name\": \"shape\",\n        \"value\": {\n          \"caseTeamHandler\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"caseRfiHandler\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"openUpdatingPopup\": {\n            \"name\": \"func\",\n            \"required\": true\n          }\n        }\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\modules\\\\PremiumProcessingCaseRhsAccordions\\\\PremiumProcessingCaseRhsAccordions.js\"] = {\n    name: \"PremiumProcessingCaseRhsAccordions\",\n    docgenInfo: PremiumProcessingCaseRhsAccordions.__docgenInfo,\n    path: \"src\\\\modules\\\\PremiumProcessingCaseRhsAccordions\\\\PremiumProcessingCaseRhsAccordions.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"PremiumProcessingCaseRhsAccordions\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/PremiumProcessingCaseRhsAccordions/PremiumProcessingCaseRhsAccordions.js"],"names":["React","useSelector","useDispatch","PropTypes","useHistory","isEmpty","Yup","PremiumProcessingCaseRhsAccordionsView","enqueueNotification","showModal","selectCasesListType","postNewWorkflowStage","getPremiumProcessingTasksDetails","selectCaseDetails","premiumProcessingCheckSigningCompleteCase","premiumProcessingCheckSigningCancelCase","selectCaseTaskTypeView","getEmailSendStatus","selectUserGroup","constants","utils","config","PremiumProcessingCaseRhsAccordions","propTypes","currentUser","array","isRequired","selectedCases","caseRfiDetails","object","isAllCases","bool","isCheckSigningCase","isIssueDocumentStage","isTransactionCommited","isUnassignedStage","isWorkBasket","handlers","shape","caseTeamHandler","func","caseRfiHandler","openUpdatingPopup","caseType","history","dispatch","caseDetails","caseTaskTypeView","userGroup","caseStages","caseStageDetails","selectedCaseDetails","caseTeamData","policyRef","caseId","taskId","processId","policyId","openRfi","sourceId","xbInstanceId","isBackOffice","generic","isValidArray","code","BACK_OFFICE","isJuniorTechnician","some","item","JUNIOR_TECHNICIAN","includes","name","isFdo","isValidObject","processName","FDO","isEndorsementNonPremium","ENDORSEMENT_NON_PREMIUM","isPppOrPbpStage","cs","BPM_STAGE_PREPARE_PREMIUM_PROCESSING","BPM_STAGE_PREPARE_BORDEREAU_PROCESSING","bpmStageCode","active","isQueriedStage","BPM_STAGE_QUERIED","isRejectPendingActionStage","BPM_STAGE_REJECTED_PENDING_ACTION","qcTypes","id","value","label","string","t","viewMoreNotesHandler","push","routes","premiumProcessing","PREMIUM_PROCESSING_TAB_NOTES","fields","type","validation","required","muiComponentProps","multiline","minRows","maxRows","disabled","inputProps","maxLength","title","options","muiFormGroupProps","row","showQcModal","qcValue","component","props","fullWidth","maxWidth","componentProps","confirmLabel","cancelLabel","confirmMessage","qualityControl","buttonColors","confirm","cancel","submitHandler","isQcApproved","notes","notesField","then","response","message","toUpperCase","API_RESPONSE_SUCCESS","requestType","taskType","filterTerm","cancelHandler","handleClose","handleQcSubmit","notesTextFieldProps","margin","placeholder","variant","confirmMoveToNextStageModal","moveToNextStageApiCall","confirmMoveToCompletedModal","caseCompletionRfiModal","checkIssueDocumentCompleteModal","status","API_RESPONSE_OK","data","emailSentStatus","handleMoveToNextStage","checkSigningComplete","fieldsValue","caseRfiCompleteBureauModal","checkSigningCompleteModal","checkSigningCancel","caseRfiCancelBureauModal","checkSigningCancelModal","checkSigningReject","caseRfiRejectBureauModal","checkSigningRejectModal","toLowerCase","notesFieldValue","qcSubmit"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useDispatch } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { useHistory } from 'react-router';\r\nimport isEmpty from 'lodash/isEmpty';\r\nimport * as Yup from 'yup';\r\n\r\n//app\r\nimport PremiumProcessingCaseRhsAccordionsView from './PremiumProcessingCaseRhsAccordions.view';\r\nimport {\r\n  enqueueNotification,\r\n  showModal,\r\n  selectCasesListType,\r\n  postNewWorkflowStage,\r\n  getPremiumProcessingTasksDetails,\r\n  selectCaseDetails,\r\n  premiumProcessingCheckSigningCompleteCase,\r\n  premiumProcessingCheckSigningCancelCase,\r\n  selectCaseTaskTypeView,\r\n  getEmailSendStatus,\r\n  selectUserGroup,\r\n} from 'stores';\r\nimport * as constants from 'consts';\r\nimport * as utils from 'utils';\r\nimport config from 'config';\r\n\r\nPremiumProcessingCaseRhsAccordions.propTypes = {\r\n  currentUser: PropTypes.array.isRequired,\r\n  selectedCases: PropTypes.array,\r\n  caseRfiDetails: PropTypes.object.isRequired,\r\n  isAllCases: PropTypes.bool.isRequired,\r\n  isCheckSigningCase: PropTypes.bool.isRequired,\r\n  isIssueDocumentStage: PropTypes.bool.isRequired,\r\n  isTransactionCommited: PropTypes.bool.isRequired,\r\n  isUnassignedStage: PropTypes.bool.isRequired,\r\n  isWorkBasket: PropTypes.bool.isRequired,\r\n  handlers: PropTypes.shape({\r\n    caseTeamHandler: PropTypes.func.isRequired,\r\n    caseRfiHandler: PropTypes.func.isRequired,\r\n    openUpdatingPopup: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default function PremiumProcessingCaseRhsAccordions({\r\n  currentUser,\r\n  selectedCases,\r\n  caseRfiDetails,\r\n  isAllCases,\r\n  isCheckSigningCase,\r\n  isIssueDocumentStage,\r\n  isTransactionCommited,\r\n  isUnassignedStage,\r\n  isWorkBasket,\r\n  handlers,\r\n}) {\r\n  const caseType = useSelector(selectCasesListType);\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  const caseDetails = useSelector(selectCaseDetails);\r\n  const caseTaskTypeView = useSelector(selectCaseTaskTypeView);\r\n  const userGroup = useSelector(selectUserGroup);\r\n  const caseStages = caseDetails?.caseStageDetails;\r\n  const selectedCaseDetails = caseDetails?.caseTeamData;\r\n  const policyRef = selectedCases?.[0]?.policyRef;\r\n  const { caseId, taskId, processId, policyId, openRfi } = caseDetails;\r\n  const sourceId = selectedCaseDetails?.xbInstanceId;\r\n  const isBackOffice = utils.generic.isValidArray(userGroup, true) && userGroup[0].code === constants.BACK_OFFICE;\r\n  const isJuniorTechnician =\r\n    utils.generic.isValidArray(currentUser, true) && currentUser.some((item) => [constants.JUNIOR_TECHNICIAN].includes(item.name));\r\n  const isFdo = utils.generic.isValidObject(selectedCaseDetails, 'processName') && selectedCaseDetails?.processName === constants.FDO;\r\n  const isEndorsementNonPremium =\r\n    utils.generic.isValidObject(selectedCaseDetails, 'processName') &&\r\n    selectedCaseDetails?.processName === constants.ENDORSEMENT_NON_PREMIUM;\r\n  const isPppOrPbpStage = caseStages?.some(\r\n    (cs) =>\r\n      [constants.BPM_STAGE_PREPARE_PREMIUM_PROCESSING, constants.BPM_STAGE_PREPARE_BORDEREAU_PROCESSING].includes(cs.bpmStageCode) &&\r\n      cs.active\r\n  );\r\n  const isQueriedStage = caseStages?.some((cs) => [constants.BPM_STAGE_QUERIED].includes(cs.bpmStageCode) && cs.active);\r\n  const isRejectPendingActionStage = caseStages?.some(\r\n    (cs) => [constants.BPM_STAGE_REJECTED_PENDING_ACTION].includes(cs.bpmStageCode) && cs.active\r\n  );\r\n  const qcTypes = [\r\n    {\r\n      id: 1,\r\n      name: 'yes',\r\n      value: 'yes',\r\n      label: utils.string.t('premiumProcessing.qualityControl.pass'),\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'no',\r\n      value: 'no',\r\n      label: utils.string.t('premiumProcessing.qualityControl.fail'),\r\n    },\r\n  ];\r\n  const viewMoreNotesHandler = () => {\r\n    if (taskId) {\r\n      history.push(`${config.routes.premiumProcessing.case}/${taskId}/${constants.PREMIUM_PROCESSING_TAB_NOTES}`);\r\n    } else if (processId) {\r\n      history.push(`${config.routes.premiumProcessing.case}/${processId}/${constants.PREMIUM_PROCESSING_TAB_NOTES}`);\r\n    }\r\n  };\r\n\r\n  let fields = [\r\n    {\r\n      name: 'qcComplete',\r\n      type: 'checkbox',\r\n      value: false,\r\n      label: 'QC complete',\r\n    },\r\n    {\r\n      name: 'notesField',\r\n      type: 'textarea',\r\n      value: '',\r\n      validation: Yup.string().required(),\r\n      muiComponentProps: {\r\n        multiline: true,\r\n        minRows: 3,\r\n        maxRows: 6,\r\n        disabled: isWorkBasket || isAllCases || isUnassignedStage,\r\n        inputProps: {\r\n          maxLength: 2000,\r\n        },\r\n      },\r\n    },\r\n    {\r\n      name: 'qualityControl',\r\n      type: 'radio',\r\n      title: 'Quality Control',\r\n      value: '',\r\n      options: qcTypes,\r\n      muiFormGroupProps: {\r\n        row: true,\r\n      },\r\n      muiComponentProps: {\r\n        disabled: false,\r\n      },\r\n    },\r\n    ...(isTransactionCommited\r\n      ? [\r\n          {\r\n            name: 'transactionCommited',\r\n            type: 'checkbox',\r\n            value: false,\r\n            label: utils.string.t('premiumProcessing.caseDetailsSection.transactionCommit.label'),\r\n          },\r\n        ]\r\n      : []),\r\n  ];\r\n\r\n  const showQcModal = (qcValue) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          fullWidth: true,\r\n          title: utils.string.t('premiumProcessing.qualityControlLabel'),\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            confirmLabel: utils.string.t('app.submit'),\r\n            cancelLabel: utils.string.t('app.close'),\r\n            confirmMessage:\r\n              qcValue?.qualityControl === 'yes'\r\n                ? utils.string.t('premiumProcessing.qualityControl.qualityControlMoveToNextConfimMessagePass')\r\n                : utils.string.t('premiumProcessing.qualityControl.qualityControlMoveToNextConfimMessageFail'),\r\n            buttonColors: { confirm: 'secondary', cancel: 'primary' },\r\n            submitHandler: () => {\r\n              const isQcApproved = qcValue?.qualityControl;\r\n              const notes = qcValue?.notesField;\r\n              dispatch(postNewWorkflowStage({ taskId, notes, isQcApproved, policyRef })).then((response) => {\r\n                if (response?.message !== null) {\r\n                  if (response?.message.toUpperCase() === constants.API_RESPONSE_SUCCESS) {\r\n                    dispatch(getPremiumProcessingTasksDetails({ requestType: 'search', taskType: caseTaskTypeView, filterTerm: [] }));\r\n                    dispatch(getPremiumProcessingTasksDetails({ requestType: 'filter', taskType: caseTaskTypeView, filterTerm: [] }));\r\n                  }\r\n                } else {\r\n                  dispatch(enqueueNotification(utils.string.t('premiumProcessing.caseDetailsSection.workflowStageUpdateError'), 'error'));\r\n                }\r\n              });\r\n            },\r\n            cancelHandler: () => {},\r\n            handleClose: () => {},\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n  const handleQcSubmit = (qcValue) => {\r\n    if (!isEmpty(qcValue?.qualityControl)) {\r\n      if (qcValue?.qualityControl === 'yes') {\r\n      } else {\r\n        if (isEmpty(qcValue?.notesField)) {\r\n          dispatch(enqueueNotification('premiumProcessing.qualityControl.qualityControlFailNotesMandatory', 'warning'));\r\n          return;\r\n        }\r\n      }\r\n      showQcModal(qcValue);\r\n    } else {\r\n      dispatch(enqueueNotification('premiumProcessing.qualityControl.qualityControlNotSelected', 'warning'));\r\n    }\r\n  };\r\n  const notesTextFieldProps = {\r\n    fullWidth: true,\r\n    id: 'premium-processing-case-notes',\r\n    margin: 'normal',\r\n    placeholder: '',\r\n    variant: 'outlined',\r\n  };\r\n  const confirmMoveToNextStageModal = () => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          fullWidth: true,\r\n          title: utils.string.t('premiumProcessing.qualityControlLabel'),\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            confirmLabel: utils.string.t('app.submit'),\r\n            cancelLabel: utils.string.t('app.close'),\r\n            confirmMessage: utils.string.t('premiumProcessing.qualityControlMoveToNextConfimMessage'),\r\n            buttonColors: { confirm: 'secondary', cancel: 'primary' },\r\n            submitHandler: () => {\r\n              dispatch(postNewWorkflowStage({ taskId, policyRef })).then((response) => {\r\n                if (response?.message?.toUpperCase() === constants.API_RESPONSE_SUCCESS) {\r\n                  dispatch(getPremiumProcessingTasksDetails({ requestType: 'search', taskType: caseTaskTypeView, filterTerm: [] }));\r\n                  dispatch(getPremiumProcessingTasksDetails({ requestType: 'filter', taskType: caseTaskTypeView, filterTerm: [] }));\r\n                } else {\r\n                  dispatch(enqueueNotification(utils.string.t('premiumProcessing.caseDetailsSection.workflowStageUpdateError'), 'error'));\r\n                }\r\n              });\r\n            },\r\n            cancelHandler: () => {},\r\n            handleClose: () => {},\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const moveToNextStageApiCall = () => {\r\n    dispatch(postNewWorkflowStage({ taskId, policyRef })).then((response) => {\r\n      if (response?.message && response?.message.toUpperCase() === constants.API_RESPONSE_SUCCESS) {\r\n        dispatch(getPremiumProcessingTasksDetails({ requestType: 'search', taskType: caseTaskTypeView, filterTerm: [] }));\r\n        dispatch(getPremiumProcessingTasksDetails({ requestType: 'filter', taskType: caseTaskTypeView, filterTerm: [] }));\r\n      }\r\n    });\r\n  };\r\n\r\n  const confirmMoveToCompletedModal = () => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          fullWidth: true,\r\n          title: utils.string.t('premiumProcessing.warning.title'),\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            confirmLabel: utils.string.t('premiumProcessing.skipAndProceedButton'),\r\n            cancelLabel: utils.string.t('premiumProcessing.issueDocuments.cancel'),\r\n            confirmMessage: utils.string.t('premiumProcessing.issueDocuments.issueDocumentMoveToNextConfimMessage'),\r\n            buttonColors: { confirm: 'secondary', cancel: 'primary' },\r\n            submitHandler: moveToNextStageApiCall,\r\n            cancelHandler: () => {},\r\n            handleClose: () => {},\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n  const caseCompletionRfiModal = () => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          fullWidth: true,\r\n          title: utils.string.t('premiumProcessing.caseCompletionRfi.caseCompletionRfiLabel'),\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            confirmLabel: utils.string.t('premiumProcessing.caseCompletionRfi.caseCompletionRfiButton'),\r\n            cancelLabel: utils.string.t('premiumProcessing.caseCompletionRfi.cancel'),\r\n            confirmMessage: utils.string.t('premiumProcessing.caseCompletionRfi.errorMessage'),\r\n            buttonColors: { confirm: 'secondary', cancel: 'primary' },\r\n            submitHandler: checkIssueDocumentCompleteModal,\r\n            cancelHandler: () => {},\r\n            handleClose: () => {},\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n  const checkIssueDocumentCompleteModal = () => {\r\n    dispatch(getEmailSendStatus({ caseId, policyId, sourceId })).then((response) => {\r\n      if (response.status === constants.API_RESPONSE_OK) {\r\n        if (response?.data?.emailSentStatus) {\r\n          confirmMoveToCompletedModal();\r\n        } else {\r\n          moveToNextStageApiCall();\r\n        }\r\n      }\r\n    });\r\n  };\r\n  const handleMoveToNextStage = () => {\r\n    if (!(isEndorsementNonPremium || isFdo) && isJuniorTechnician && isPppOrPbpStage) {\r\n      confirmMoveToNextStageModal();\r\n    } else if (isIssueDocumentStage) {\r\n      openRfi && isBackOffice ? caseCompletionRfiModal() : checkIssueDocumentCompleteModal();\r\n    } else {\r\n      if (utils.generic.isValidArray(selectedCases, true)) {\r\n        moveToNextStageApiCall();\r\n      }\r\n    }\r\n  };\r\n\r\n  const checkSigningComplete = (fieldsValue) => {\r\n    if (isQueriedStage && openRfi) {\r\n      if (isEmpty(fieldsValue?.notesField)) {\r\n        dispatch(enqueueNotification('premiumProcessing.checkSigningCase.notesMandatoryComplete', 'warning'));\r\n        return;\r\n      }\r\n      caseRfiCompleteBureauModal(fieldsValue?.notesField);\r\n    } else {\r\n      checkSigningCompleteModal(fieldsValue?.notesField);\r\n    }\r\n  };\r\n\r\n  const checkSigningCancel = (fieldsValue) => {\r\n    if (isQueriedStage && openRfi) {\r\n      if (isEmpty(fieldsValue?.notesField)) {\r\n        dispatch(enqueueNotification('premiumProcessing.checkSigningCase.notesMandatoryCancel', 'warning'));\r\n        return;\r\n      }\r\n      caseRfiCancelBureauModal(fieldsValue?.notesField);\r\n    } else {\r\n      checkSigningCancelModal(fieldsValue?.notesField);\r\n    }\r\n  };\r\n\r\n  const checkSigningReject = (fieldsValue) => {\r\n    if (isQueriedStage && openRfi) {\r\n      if (isEmpty(fieldsValue?.notesField)) {\r\n        dispatch(enqueueNotification('premiumProcessing.checkSigningCase.notesMandatoryReject', 'warning'));\r\n        return;\r\n      }\r\n      caseRfiRejectBureauModal(fieldsValue?.notesField);\r\n    } else {\r\n      checkSigningRejectModal(fieldsValue?.notesField);\r\n    }\r\n  };\r\n\r\n  const checkSigningCompleteModal = (notesField) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          fullWidth: true,\r\n          title: utils.string.t('premiumProcessing.checkSigningComplete.popLabel'),\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            confirmLabel: utils.string.t('premiumProcessing.checkSigningCase.complete'),\r\n            cancelLabel: utils.string.t('premiumProcessing.checkSigningCase.cancel'),\r\n            confirmMessage: utils.string.t('premiumProcessing.checkSigningComplete.popMessage'),\r\n            buttonColors: { confirm: 'secondary', cancel: 'primary' },\r\n            submitHandler: () => {\r\n              dispatch(premiumProcessingCheckSigningCompleteCase({ caseId, notesField })).then((response) => {\r\n                if (response?.message?.toUpperCase() === constants.API_RESPONSE_SUCCESS) {\r\n                  dispatch(getPremiumProcessingTasksDetails({ requestType: 'search', taskType: caseTaskTypeView, filterTerm: [] }));\r\n                  dispatch(getPremiumProcessingTasksDetails({ requestType: 'filter', taskType: caseTaskTypeView, filterTerm: [] }));\r\n                } else {\r\n                  dispatch(enqueueNotification(utils.string.t('premiumProcessing.caseDetailsSection.workflowStageUpdateError'), 'error'));\r\n                }\r\n              });\r\n            },\r\n            cancelHandler: () => {},\r\n            handleClose: () => {},\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const caseRfiCompleteBureauModal = (notesField) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          fullWidth: true,\r\n          title: utils.string.t('premiumProcessing.caseCompletionRfi.caseCompletionRfiLabel'),\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            confirmLabel: utils.string.t('premiumProcessing.caseCompletionRfi.caseCompletionRfiButton'),\r\n            cancelLabel: utils.string.t('premiumProcessing.caseCompletionRfi.cancel'),\r\n            confirmMessage: utils.string.t('premiumProcessing.caseCompletionRfi.errorMessage'),\r\n            buttonColors: { confirm: 'secondary', cancel: 'primary' },\r\n            submitHandler: () => {\r\n              dispatch(premiumProcessingCheckSigningCompleteCase({ caseId, notesField })).then((response) => {\r\n                if (response?.message?.toUpperCase() === constants.API_RESPONSE_SUCCESS) {\r\n                  dispatch(getPremiumProcessingTasksDetails({ requestType: 'search', taskType: caseTaskTypeView, filterTerm: [] }));\r\n                  dispatch(getPremiumProcessingTasksDetails({ requestType: 'filter', taskType: caseTaskTypeView, filterTerm: [] }));\r\n                } else {\r\n                  dispatch(enqueueNotification(utils.string.t('premiumProcessing.caseDetailsSection.workflowStageUpdateError'), 'error'));\r\n                }\r\n              });\r\n            },\r\n            cancelHandler: () => {},\r\n            handleClose: () => {},\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const checkSigningCancelModal = (notesField) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          fullWidth: true,\r\n          title: utils.string.t('premiumProcessing.checkSigningCancel.popLabel'),\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            confirmLabel: utils.string.t('premiumProcessing.checkSigningCancel.continue'),\r\n            cancelLabel: utils.string.t('premiumProcessing.checkSigningCancel.cancel'),\r\n            confirmMessage: utils.string.t('premiumProcessing.checkSigningCancel.popMessage'),\r\n            buttonColors: { confirm: 'secondary', cancel: 'primary' },\r\n            submitHandler: () => {\r\n              dispatch(premiumProcessingCheckSigningCancelCase({ caseId, notesField })).then((response) => {\r\n                if (response?.status?.toLowerCase() === constants.API_RESPONSE_OK.toLowerCase()) {\r\n                  dispatch(getPremiumProcessingTasksDetails({ requestType: 'search', taskType: caseTaskTypeView, filterTerm: [] }));\r\n                  dispatch(getPremiumProcessingTasksDetails({ requestType: 'filter', taskType: caseTaskTypeView, filterTerm: [] }));\r\n                } else {\r\n                  dispatch(enqueueNotification(utils.string.t('premiumProcessing.caseDetailsSection.workflowStageUpdateError'), 'error'));\r\n                }\r\n              });\r\n            },\r\n            cancelHandler: () => {},\r\n            handleClose: () => {},\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const caseRfiCancelBureauModal = (notesField) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          fullWidth: true,\r\n          title: utils.string.t('premiumProcessing.caseCompletionRfi.caseCompletionRfiLabel'),\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            confirmLabel: utils.string.t('premiumProcessing.caseCompletionRfi.caseCompletionRfiButton'),\r\n            cancelLabel: utils.string.t('premiumProcessing.caseCompletionRfi.cancel'),\r\n            confirmMessage: utils.string.t('premiumProcessing.caseCompletionRfi.errorMessage'),\r\n            buttonColors: { confirm: 'secondary', cancel: 'primary' },\r\n            submitHandler: () => {\r\n              dispatch(premiumProcessingCheckSigningCancelCase({ caseId, notesField })).then((response) => {\r\n                if (response?.status?.toLowerCase() === constants.API_RESPONSE_OK.toLowerCase()) {\r\n                  dispatch(getPremiumProcessingTasksDetails({ requestType: 'search', taskType: caseTaskTypeView, filterTerm: [] }));\r\n                  dispatch(getPremiumProcessingTasksDetails({ requestType: 'filter', taskType: caseTaskTypeView, filterTerm: [] }));\r\n                } else {\r\n                  dispatch(enqueueNotification(utils.string.t('premiumProcessing.caseDetailsSection.workflowStageUpdateError'), 'error'));\r\n                }\r\n              });\r\n            },\r\n            cancelHandler: () => {},\r\n            handleClose: () => {},\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const checkSigningRejectModal = (fieldsValue) => {\r\n    const notesFieldValue = fieldsValue;\r\n    dispatch(\r\n      showModal({\r\n        component: 'PREMIUM_PROCESSING_CHECK_SIGNING_REJECT',\r\n        props: {\r\n          title: utils.string.t('premiumProcessing.checkSigningReject.popLabel'),\r\n          fullWidth: true,\r\n          maxWidth: 'md',\r\n          componentProps: {\r\n            selectedCases,\r\n            notesFieldValue,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const caseRfiRejectBureauModal = (notesField) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          fullWidth: true,\r\n          title: utils.string.t('premiumProcessing.caseCompletionRfi.caseCompletionRfiLabel'),\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            confirmLabel: utils.string.t('premiumProcessing.caseCompletionRfi.caseCompletionRfiButton'),\r\n            cancelLabel: utils.string.t('premiumProcessing.caseCompletionRfi.cancel'),\r\n            confirmMessage: utils.string.t('premiumProcessing.caseCompletionRfi.errorMessage'),\r\n            buttonColors: { confirm: 'secondary', cancel: 'primary' },\r\n            submitHandler: () => {\r\n              checkSigningRejectModal(notesField);\r\n            },\r\n            cancelHandler: () => {},\r\n            handleClose: () => {},\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <PremiumProcessingCaseRhsAccordionsView\r\n      isCheckSigningCase={isCheckSigningCase}\r\n      selectedCases={selectedCases}\r\n      currentUser={currentUser}\r\n      caseType={caseType}\r\n      taskId={taskId}\r\n      fields={fields}\r\n      isWorkBasket={isWorkBasket}\r\n      isAllCases={isAllCases}\r\n      isTransactionCommited={isTransactionCommited}\r\n      isUnassignedStage={isUnassignedStage}\r\n      isIssueDocumentStage={isIssueDocumentStage}\r\n      notesTextFieldProps={notesTextFieldProps}\r\n      caseRfiDetails={caseRfiDetails}\r\n      caseTaskTypeView={caseTaskTypeView}\r\n      isRejectPendingActionStage={isRejectPendingActionStage}\r\n      handlers={{\r\n        handleMoveToNextStage: handleMoveToNextStage,\r\n        viewMoreNotesHandler: viewMoreNotesHandler,\r\n        qcSubmit: handleQcSubmit,\r\n        checkSigningComplete: checkSigningComplete,\r\n        checkSigningCancel: checkSigningCancel,\r\n        checkSigningReject: checkSigningReject,\r\n        caseTeamHandler: handlers.caseTeamHandler,\r\n        caseRfiHandler: handlers.caseRfiHandler,\r\n        openUpdatingPopup: handlers.openUpdatingPopup,\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}