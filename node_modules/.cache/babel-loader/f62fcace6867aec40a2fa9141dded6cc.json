{"ast":null,"code":"import _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as utils from 'utils';\nimport * as constants from 'consts';\nvar utilsDms = {\n  getFilesForm: function getFilesForm(files) {\n    return files.map(function (file, ind) {\n      return {\n        formFileName: (file === null || file === void 0 ? void 0 : file.name) || \"file-\".concat(ind),\n        formDocType: {\n          id: 0,\n          label: ''\n        },\n        formDocClassificationType: {\n          id: 3\n        },\n        paymentFields: {\n          paymentDate: '',\n          paymentReference: '',\n          lossPayee: '',\n          amount: \"\",\n          currency: \"\"\n        },\n        isDuplicateFileName: false,\n        // Duplicate means the file which was already uploaded to sharepoint before\n        isInvalidFileName: false // Invalid means the file which contains blacklisted special characters\n\n      };\n    });\n  },\n  getFileKey: function getFileKey(file) {\n    return \"\".concat(file === null || file === void 0 ? void 0 : file.name, \"-\").concat(file === null || file === void 0 ? void 0 : file.lastModified);\n  },\n  checkIfInvalidFileName: function checkIfInvalidFileName(fileName) {\n    return constants.DMS_UPLOAD_FORBIDDEN_CHAR.test(fileName);\n  },\n  getDuplicateFileIndexes: function getDuplicateFileIndexes(currentFiles, previousUploadedFiles) {\n    if (Boolean(previousUploadedFiles.length)) {\n      var duplicateIndexes = [];\n      previousUploadedFiles.forEach(function (prevItem, index) {\n        currentFiles.forEach(function (currentItem, index) {\n          if ((currentItem === null || currentItem === void 0 ? void 0 : currentItem.name) === (prevItem === null || prevItem === void 0 ? void 0 : prevItem.documentName)) {\n            duplicateIndexes.push(index);\n          }\n        });\n      });\n      return duplicateIndexes;\n    } else {\n      return [];\n    }\n  },\n  getFolderTypes: function getFolderTypes(documentTypes) {\n    return _toConsumableArray(new Set(utils.generic.isValidArray(documentTypes) ? documentTypes.filter(function (type) {\n      return (type === null || type === void 0 ? void 0 : type.folderName) !== null;\n    }).map(function (type) {\n      return type === null || type === void 0 ? void 0 : type.folderName;\n    }) : [])).sort().map(function (name) {\n      return {\n        id: name,\n        label: name\n      };\n    });\n  },\n  refinedDocTypeByFolderName: function refinedDocTypeByFolderName(folderNameFilter, documentTypes) {\n    var folderNameFilterKey = (folderNameFilter === null || folderNameFilter === void 0 ? void 0 : folderNameFilter.label) || '';\n    return folderNameFilterKey ? documentTypes.filter(function (docType) {\n      return docType.folderName === folderNameFilterKey;\n    }) : documentTypes;\n  },\n  getOnlyFileProperties: function getOnlyFileProperties(files) {\n    return files.map(function (file) {\n      return {\n        name: file.name,\n        path: file.path,\n        lastModified: file.lastModifiedDate,\n        size: file.size,\n        type: file.lastModifiedDate\n      };\n    });\n  },\n  trimFileProperties: function trimFileProperties(files) {\n    return files.map(function (file) {\n      return {\n        name: file.name,\n        path: file.path,\n        lastModifiedDate: file.lastModifiedDate\n      };\n    });\n  },\n  getFullFileProperties: function getFullFileProperties(files, liteFiles) {\n    return files.filter(function (file, ind) {\n      return file.path === liteFiles[ind].path;\n    });\n  },\n  constructUploadDocsRequest: function constructUploadDocsRequest(context, files, filesFormData, documentMetaData) {\n    var fetchDocsDto = utilsDms.constructUploadDocsDto(files, filesFormData); // TODO documentMetaData to come as props rather than from metaData API\n\n    var fileUploadRequestPayload = {\n      // Loss\n      lossId: documentMetaData === null || documentMetaData === void 0 ? void 0 : documentMetaData.lossId,\n      lossName: documentMetaData === null || documentMetaData === void 0 ? void 0 : documentMetaData.lossName,\n      catCodesID: documentMetaData === null || documentMetaData === void 0 ? void 0 : documentMetaData.catCodesID,\n      lossCreatedDate: context === constants.DMS_CONTEXT_LOSS ? documentMetaData.createdDate : null,\n      // Policy\n      policyId: documentMetaData === null || documentMetaData === void 0 ? void 0 : documentMetaData.policyId,\n      policyRef: documentMetaData === null || documentMetaData === void 0 ? void 0 : documentMetaData.policyRef,\n      year: documentMetaData === null || documentMetaData === void 0 ? void 0 : documentMetaData.year,\n      xbInstanceId: documentMetaData === null || documentMetaData === void 0 ? void 0 : documentMetaData.xbInstanceId,\n      departmentId: documentMetaData === null || documentMetaData === void 0 ? void 0 : documentMetaData.departmentId,\n      subDepartmentId: documentMetaData === null || documentMetaData === void 0 ? void 0 : documentMetaData.subDepartmentId,\n      departmentName: documentMetaData === null || documentMetaData === void 0 ? void 0 : documentMetaData.departmentName,\n      insuredName: documentMetaData === null || documentMetaData === void 0 ? void 0 : documentMetaData.insuredName,\n      // Claims\n      claimId: documentMetaData === null || documentMetaData === void 0 ? void 0 : documentMetaData.claimId,\n      uniqueMarketRef: (documentMetaData === null || documentMetaData === void 0 ? void 0 : documentMetaData.uniqueMarketRef) || null,\n      ucr: (documentMetaData === null || documentMetaData === void 0 ? void 0 : documentMetaData.ucr) || null,\n      // documentDto\n      documentDto: fetchDocsDto\n    };\n    return fileUploadRequestPayload;\n  },\n  constructUploadDocsDto: function constructUploadDocsDto(files, filesFormData) {\n    var result = [];\n    filesFormData === null || filesFormData === void 0 ? void 0 : filesFormData.forEach(function (fileForm, ind) {\n      var _fileForm$formDocType, _fileForm$formDocType2, _files$ind, _fileForm$formDocClas;\n\n      result.push({\n        documentName: fileForm === null || fileForm === void 0 ? void 0 : fileForm.formFileName,\n        documentTypeId: fileForm === null || fileForm === void 0 ? void 0 : (_fileForm$formDocType = fileForm.formDocType) === null || _fileForm$formDocType === void 0 ? void 0 : _fileForm$formDocType.id,\n        documentTypeDescription: fileForm === null || fileForm === void 0 ? void 0 : (_fileForm$formDocType2 = fileForm.formDocType) === null || _fileForm$formDocType2 === void 0 ? void 0 : _fileForm$formDocType2.label,\n        fileLastModifiedDate: (_files$ind = files[ind]) === null || _files$ind === void 0 ? void 0 : _files$ind.lastModifiedDate.toISOString(),\n        docClassification: fileForm === null || fileForm === void 0 ? void 0 : (_fileForm$formDocClas = fileForm.formDocClassificationType) === null || _fileForm$formDocClas === void 0 ? void 0 : _fileForm$formDocClas.id,\n        tags: [],\n        metadataFields: utilsDms.constructUploadDocsPaymentsData(fileForm)\n      });\n    });\n    return result;\n  },\n  constructUploadDocsPaymentsData: function constructUploadDocsPaymentsData(fileForm) {\n    var _fileForm$paymentFiel, _fileForm$paymentFiel2, _fileForm$paymentFiel3, _fileForm$paymentFiel4;\n\n    var paymentFields = constants.DMS_DOCUMENT_TYPE_PAYMENT_PROPS;\n    return [{\n      prop: paymentFields.paymentReference,\n      value: fileForm === null || fileForm === void 0 ? void 0 : (_fileForm$paymentFiel = fileForm.paymentFields) === null || _fileForm$paymentFiel === void 0 ? void 0 : _fileForm$paymentFiel.paymentReference\n    }, {\n      prop: paymentFields.lossPayee,\n      value: fileForm === null || fileForm === void 0 ? void 0 : (_fileForm$paymentFiel2 = fileForm.paymentFields) === null || _fileForm$paymentFiel2 === void 0 ? void 0 : _fileForm$paymentFiel2.lossPayee\n    }, {\n      prop: paymentFields.amount,\n      value: fileForm === null || fileForm === void 0 ? void 0 : (_fileForm$paymentFiel3 = fileForm.paymentFields) === null || _fileForm$paymentFiel3 === void 0 ? void 0 : _fileForm$paymentFiel3.amount\n    }, {\n      prop: paymentFields.currency,\n      value: fileForm === null || fileForm === void 0 ? void 0 : (_fileForm$paymentFiel4 = fileForm.paymentFields) === null || _fileForm$paymentFiel4 === void 0 ? void 0 : _fileForm$paymentFiel4.currency\n    }, {\n      prop: paymentFields.paymentDate,\n      value: new Date().toISOString()\n    }];\n  },\n  getDocMetaDataAfterUpload: function getDocMetaDataAfterUpload(filesMetaData) {\n    return filesMetaData === null || filesMetaData === void 0 ? void 0 : filesMetaData.map(function (_ref) {\n      var createdDate = _ref.createdDate,\n          documentVersion = _ref.documentVersion,\n          createdByName = _ref.createdByName,\n          fileLastModifiedDate = _ref.fileLastModifiedDate,\n          documentUploaded = _ref.documentUploaded;\n      return {\n        createdDate: createdDate,\n        documentVersion: documentVersion,\n        createdByName: createdByName,\n        fileLastModifiedDate: fileLastModifiedDate,\n        documentUploaded: documentUploaded\n      };\n    });\n  },\n  checkIfAllUploaded: function checkIfAllUploaded(filesMetaData) {\n    return filesMetaData === null || filesMetaData === void 0 ? void 0 : filesMetaData.every(function (_ref2) {\n      var documentUploaded = _ref2.documentUploaded;\n      return documentUploaded;\n    });\n  }\n};\nexport default utilsDms;","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/utils/dms/dms.js"],"names":["utils","constants","utilsDms","getFilesForm","files","map","file","ind","formFileName","name","formDocType","id","label","formDocClassificationType","paymentFields","paymentDate","paymentReference","lossPayee","amount","currency","isDuplicateFileName","isInvalidFileName","getFileKey","lastModified","checkIfInvalidFileName","fileName","DMS_UPLOAD_FORBIDDEN_CHAR","test","getDuplicateFileIndexes","currentFiles","previousUploadedFiles","Boolean","length","duplicateIndexes","forEach","prevItem","index","currentItem","documentName","push","getFolderTypes","documentTypes","Set","generic","isValidArray","filter","type","folderName","sort","refinedDocTypeByFolderName","folderNameFilter","folderNameFilterKey","docType","getOnlyFileProperties","path","lastModifiedDate","size","trimFileProperties","getFullFileProperties","liteFiles","constructUploadDocsRequest","context","filesFormData","documentMetaData","fetchDocsDto","constructUploadDocsDto","fileUploadRequestPayload","lossId","lossName","catCodesID","lossCreatedDate","DMS_CONTEXT_LOSS","createdDate","policyId","policyRef","year","xbInstanceId","departmentId","subDepartmentId","departmentName","insuredName","claimId","uniqueMarketRef","ucr","documentDto","result","fileForm","documentTypeId","documentTypeDescription","fileLastModifiedDate","toISOString","docClassification","tags","metadataFields","constructUploadDocsPaymentsData","DMS_DOCUMENT_TYPE_PAYMENT_PROPS","prop","value","Date","getDocMetaDataAfterUpload","filesMetaData","documentVersion","createdByName","documentUploaded","checkIfAllUploaded","every"],"mappings":"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","sourcesContent":["import * as utils from 'utils';\r\nimport * as constants from 'consts';\r\n\r\nconst utilsDms = {\r\n\r\n    getFilesForm: (files) => {\r\n        return files.map((file, ind) => {\r\n            return {\r\n                formFileName: file?.name || `file-${ind}`,\r\n                formDocType: { id: 0, label: '' },\r\n                formDocClassificationType: { id: 3 },\r\n                paymentFields: { paymentDate: '', paymentReference: '', lossPayee: '', amount: \"\", currency: \"\" },\r\n                isDuplicateFileName: false, // Duplicate means the file which was already uploaded to sharepoint before\r\n                isInvalidFileName: false, // Invalid means the file which contains blacklisted special characters\r\n            }\r\n        })\r\n    },\r\n\r\n    getFileKey: (file) => {\r\n        return `${file?.name}-${file?.lastModified}`;\r\n    },\r\n\r\n    checkIfInvalidFileName: (fileName) => {\r\n        return constants.DMS_UPLOAD_FORBIDDEN_CHAR.test(fileName);\r\n    },\r\n\r\n    getDuplicateFileIndexes: (currentFiles, previousUploadedFiles) => {\r\n        if (Boolean(previousUploadedFiles.length)) {\r\n            const duplicateIndexes = [];\r\n            previousUploadedFiles.forEach((prevItem, index) => {\r\n                currentFiles.forEach((currentItem, index) => {\r\n                    if (currentItem?.name === prevItem?.documentName) {\r\n                        duplicateIndexes.push(index);\r\n                    }\r\n                });\r\n            });\r\n            return duplicateIndexes;\r\n        } else {\r\n            return [];\r\n        }\r\n    },\r\n\r\n    getFolderTypes: (documentTypes) => {\r\n        return [...new Set(utils.generic.isValidArray(documentTypes) ?\r\n            documentTypes.filter((type) => type?.folderName !== null).map((type) => type?.folderName)\r\n            : [])]\r\n            .sort()\r\n            .map((name) => ({ id: name, label: name }));\r\n    },\r\n\r\n    refinedDocTypeByFolderName: (folderNameFilter, documentTypes) => {\r\n        const folderNameFilterKey = folderNameFilter?.label || '';\r\n        return folderNameFilterKey ? documentTypes.filter((docType) => docType.folderName === folderNameFilterKey) : documentTypes;\r\n    },\r\n\r\n    getOnlyFileProperties: (files) => {\r\n        return files.map((file) => ({\r\n            name: file.name,\r\n            path: file.path,\r\n            lastModified: file.lastModifiedDate,\r\n            size: file.size,\r\n            type: file.lastModifiedDate,\r\n        }));\r\n    },\r\n\r\n    trimFileProperties: (files) => {\r\n        return files.map((file) => ({ name: file.name, path: file.path, lastModifiedDate: file.lastModifiedDate }));\r\n    },\r\n\r\n    getFullFileProperties: (files, liteFiles) => {\r\n        return files.filter((file, ind) => (file.path === liteFiles[ind].path));\r\n    },\r\n\r\n    constructUploadDocsRequest: (context, files, filesFormData, documentMetaData) => {\r\n        const fetchDocsDto = utilsDms.constructUploadDocsDto(files, filesFormData);\r\n        // TODO documentMetaData to come as props rather than from metaData API\r\n        const fileUploadRequestPayload = {\r\n            // Loss\r\n            lossId: documentMetaData?.lossId,\r\n            lossName: documentMetaData?.lossName,\r\n            catCodesID: documentMetaData?.catCodesID,\r\n            lossCreatedDate: context === constants.DMS_CONTEXT_LOSS ? documentMetaData.createdDate : null,\r\n            // Policy\r\n            policyId: documentMetaData?.policyId,\r\n            policyRef: documentMetaData?.policyRef,\r\n            year: documentMetaData?.year,\r\n            xbInstanceId: documentMetaData?.xbInstanceId,\r\n            departmentId: documentMetaData?.departmentId,\r\n            subDepartmentId: documentMetaData?.subDepartmentId,\r\n            departmentName: documentMetaData?.departmentName,\r\n            insuredName: documentMetaData?.insuredName,\r\n            // Claims\r\n            claimId: documentMetaData?.claimId,\r\n            uniqueMarketRef: documentMetaData?.uniqueMarketRef || null,\r\n            ucr: documentMetaData?.ucr || null,\r\n            // documentDto\r\n            documentDto: fetchDocsDto\r\n        };\r\n        return fileUploadRequestPayload;\r\n\r\n    },\r\n\r\n    constructUploadDocsDto: (files, filesFormData) => {\r\n        let result = []\r\n        filesFormData?.forEach((fileForm, ind) => {\r\n            result.push({\r\n                documentName: fileForm?.formFileName,\r\n                documentTypeId: fileForm?.formDocType?.id,\r\n                documentTypeDescription: fileForm?.formDocType?.label,\r\n                fileLastModifiedDate: files[ind]?.lastModifiedDate.toISOString(),\r\n                docClassification: fileForm?.formDocClassificationType?.id,\r\n                tags: [],\r\n                metadataFields: utilsDms.constructUploadDocsPaymentsData(fileForm)\r\n            })\r\n        })\r\n        return result;\r\n    },\r\n\r\n    constructUploadDocsPaymentsData: (fileForm) => {\r\n        const paymentFields = constants.DMS_DOCUMENT_TYPE_PAYMENT_PROPS;\r\n        return [\r\n            { prop: paymentFields.paymentReference, value: fileForm?.paymentFields?.paymentReference },\r\n            { prop: paymentFields.lossPayee, value: fileForm?.paymentFields?.lossPayee },\r\n            { prop: paymentFields.amount, value: fileForm?.paymentFields?.amount },\r\n            { prop: paymentFields.currency, value: fileForm?.paymentFields?.currency },\r\n            { prop: paymentFields.paymentDate, value: new Date().toISOString() }\r\n        ];\r\n    },\r\n\r\n    getDocMetaDataAfterUpload: (filesMetaData) => {\r\n        return filesMetaData?.map(({ createdDate, documentVersion, createdByName, fileLastModifiedDate, documentUploaded }) =>\r\n            ({ createdDate, documentVersion, createdByName, fileLastModifiedDate, documentUploaded }));\r\n    },\r\n\r\n    checkIfAllUploaded: (filesMetaData) => {\r\n        return filesMetaData?.every(({ documentUploaded }) => documentUploaded);\r\n    }\r\n\r\n};\r\n\r\nexport default utilsDms;\r\n"]},"metadata":{},"sourceType":"module"}