{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\TasksTab\\\\TasksTab.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { useParams } from 'react-router';\nimport get from 'lodash/get'; //app\n\nimport { selectClaimsTasksProcessingFilterLoading, selectClaimsTasksProcessingFilterValues, selectClaimsTasksProcessing, selectedClaimsProcessingTaskType, selectEditAdhocTaskStatus, getClaimsTasksProcessing, resetClaimsProcessingTasksItems, resetClaimsProcessingTasksFilters, resetClaimsProcessingTaskSearch, getPremiumProcessingTasksDetails, collapseNav, udpateIsCheckSigningToggle } from 'stores';\nimport TasksTabView from './TasksTab.view';\nimport styles from './TasksTab.style';\nimport { MultiSelect, FormDate } from 'components';\nimport * as utils from 'utils';\nimport { useFlexiColumns } from 'hooks';\nimport { TASK_TEAM_TYPE, TASKS_SEARCH_OPTION_PROCESS_REF, TASKS_SEARCH_OPTION_DESCRIPTION, TASKS_SEARCH_OPTION_TASKI_REF, CLAIM_PROCESSING_REQ_TYPES, TASKS_SEARCH_OPTION_TASKS_NAME, TASKS_SEARCH_OPTION_ASSIGNED, TASKS_SEARCH_OPTION_PRIORITY } from 'consts'; //mui\n\nimport { makeStyles } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TasksTab() {\n  _s();\n\n  var classes = makeStyles(styles, {\n    name: 'TasksTab'\n  })();\n  var dispatch = useDispatch();\n  var params = useParams();\n  var claimsTasksProcessing = useSelector(selectClaimsTasksProcessing);\n  var claimsTasksProcessingFilters = useSelector(selectClaimsTasksProcessingFilterValues);\n  var editAdhocStatus = useSelector(selectEditAdhocTaskStatus);\n  var uiNavExpanded = useSelector(function (state) {\n    return get(state, 'ui.nav.expanded');\n  });\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isCheckSigningValue = _useState2[0],\n      setIsCheckSigningValue = _useState2[1];\n\n  var isFetchingFilters = useSelector(selectClaimsTasksProcessingFilterLoading);\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      newPage = _useState4[0],\n      setNewPage = _useState4[1];\n\n  var _useState5 = useState(utils.string.t('claims.searchByTasks.options.TaskRef')),\n      _useState6 = _slicedToArray(_useState5, 2),\n      searchByText = _useState6[0],\n      setSearchByText = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      resetKey = _useState8[0],\n      setResetKey = _useState8[1];\n\n  var _useState9 = useState(claimsTasksProcessing.taskType || TASK_TEAM_TYPE.myTask),\n      _useState10 = _slicedToArray(_useState9, 2),\n      taskType = _useState10[0],\n      setTaskType = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      isTaskTeam = _useState12[0],\n      setIsTaskTeam = _useState12[1];\n\n  var _useState13 = useState(''),\n      _useState14 = _slicedToArray(_useState13, 2),\n      searchTerm = _useState14[0],\n      setSearchTerm = _useState14[1];\n\n  var searchTypeCall = CLAIM_PROCESSING_REQ_TYPES.search;\n  var filterTypeCall = CLAIM_PROCESSING_REQ_TYPES.filter;\n  var refId = params.refId;\n  var selectOptions = [{\n    label: utils.string.t('claims.searchByTasks.options.TaskName'),\n    value: TASKS_SEARCH_OPTION_TASKS_NAME\n  }, {\n    label: utils.string.t('claims.searchByTasks.options.TaskRef'),\n    value: TASKS_SEARCH_OPTION_TASKI_REF\n  }, {\n    label: utils.string.t('claims.searchByTasks.options.Description'),\n    value: TASKS_SEARCH_OPTION_DESCRIPTION\n  }, {\n    label: utils.string.t('claims.searchByTasks.options.AssignedTo'),\n    value: TASKS_SEARCH_OPTION_ASSIGNED\n  }, {\n    label: utils.string.t('claims.searchByTasks.options.ClaimRef'),\n    value: TASKS_SEARCH_OPTION_PROCESS_REF\n  }, {\n    label: utils.string.t('claims.searchByTasks.options.Priority'),\n    value: TASKS_SEARCH_OPTION_PRIORITY\n  }];\n  var taskTypeOptions = [{\n    value: 'myTask',\n    label: utils.string.t('claims.processing.myTasks')\n  }, {\n    value: 'myTeam',\n    label: utils.string.t('claims.processing.myTeamTasks')\n  }];\n  var fields = [{\n    name: 'taskType',\n    type: 'radio',\n    value: taskType,\n    defaultValue: taskType,\n    muiFormGroupProps: {\n      row: true,\n      classes: {\n        root: classes.radioLabel\n      }\n    },\n    options: taskTypeOptions\n  }, {\n    name: 'createdOn',\n    type: 'datepicker',\n    value: null\n  }, {\n    name: 'targetDueDate',\n    type: 'datepicker',\n    value: null\n  }, {\n    name: 'inceptionDate',\n    type: 'datepicker',\n    value: null\n  }, {\n    name: 'searchType',\n    type: 'autocompletemui',\n    options: selectOptions,\n    value: (selectOptions === null || selectOptions === void 0 ? void 0 : selectOptions.find(function (item) {\n      return (item === null || item === void 0 ? void 0 : item.value) === TASKS_SEARCH_OPTION_TASKS_NAME;\n    })) || null,\n    muiComponentProps: {\n      inputProps: {\n        title: searchByText || ''\n      }\n    },\n    validation: Yup.object().nullable().required(utils.string.t('validation.required')),\n    callback: function callback(event, data) {\n      setSearchByText(data === null || data === void 0 ? void 0 : data.label);\n    }\n  }];\n  var defaultValues = utils.form.getInitialValues(fields);\n  var validationSchema = utils.form.getValidationSchema(fields);\n\n  var _useForm = useForm(_objectSpread({\n    defaultValues: defaultValues\n  }, validationSchema && {\n    resolver: yupResolver(validationSchema)\n  })),\n      control = _useForm.control,\n      watch = _useForm.watch,\n      setValue = _useForm.setValue;\n\n  var taskTypeValue = watch('taskType');\n  var watchSearchType = watch('searchType');\n  var tableFilterFields = [{\n    id: 'createdOn',\n    type: 'datepicker',\n    label: utils.string.t('claims.processing.tasksGridColumns.created'),\n    value: '',\n    content: /*#__PURE__*/_jsxDEV(FormDate, _objectSpread(_objectSpread({\n      control: control\n    }, utils.form.getFieldProps(defaultValues, 'createdOn')), {}, {\n      id: \"creationdatepicker\",\n      name: \"createdOn\",\n      type: \"datepicker\",\n      value: '',\n      label: '',\n      plainText: true,\n      plainTextIcon: true,\n      placeholder: utils.string.t('app.selectDate'),\n      muiComponentProps: {\n        fullWidth: false,\n        margin: 'dense'\n      },\n      muiPickerProps: {\n        clearable: false,\n        variant: 'inline',\n        format: 'DD-MM-YYYY'\n      }\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 17\n    }, this)\n  }, {\n    id: 'targetDueDate',\n    type: 'datepicker',\n    label: utils.string.t('claims.processing.tasksGridColumns.dueDate'),\n    value: '',\n    content: /*#__PURE__*/_jsxDEV(FormDate, _objectSpread(_objectSpread({\n      control: control\n    }, utils.form.getFieldProps(defaultValues, 'targetDueDate')), {}, {\n      id: \"duedatepicker\",\n      name: \"targetDueDate\",\n      type: \"datepicker\",\n      value: '',\n      label: '',\n      plainText: true,\n      plainTextIcon: true,\n      placeholder: utils.string.t('app.selectDate'),\n      muiComponentProps: {\n        fullWidth: false,\n        margin: 'dense'\n      },\n      muiPickerProps: {\n        clearable: false,\n        variant: 'inline',\n        format: 'DD-MM-YYYY'\n      }\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 17\n    }, this)\n  }, {\n    id: 'taskType',\n    type: 'multiSelect',\n    label: utils.string.t('claims.processing.tasksGridColumns.taskName'),\n    value: [],\n    options: claimsTasksProcessingFilters === null || claimsTasksProcessingFilters === void 0 ? void 0 : claimsTasksProcessingFilters.taskType,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"taskType\",\n      search: true,\n      options: claimsTasksProcessingFilters === null || claimsTasksProcessingFilters === void 0 ? void 0 : claimsTasksProcessingFilters.taskType\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 17\n    }, this)\n  }, {\n    id: 'priority',\n    type: 'multiSelect',\n    label: utils.string.t('claims.processing.tasksGridColumns.priority'),\n    value: [],\n    options: claimsTasksProcessingFilters === null || claimsTasksProcessingFilters === void 0 ? void 0 : claimsTasksProcessingFilters.priority,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"priority\",\n      search: true,\n      options: claimsTasksProcessingFilters === null || claimsTasksProcessingFilters === void 0 ? void 0 : claimsTasksProcessingFilters.priority\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 17\n    }, this)\n  }, {\n    id: 'description',\n    type: 'multiSelect',\n    label: utils.string.t('claims.processing.tasksGridColumns.description'),\n    value: [],\n    options: claimsTasksProcessingFilters === null || claimsTasksProcessingFilters === void 0 ? void 0 : claimsTasksProcessingFilters.description,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"status\",\n      search: true,\n      options: claimsTasksProcessingFilters === null || claimsTasksProcessingFilters === void 0 ? void 0 : claimsTasksProcessingFilters.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 17\n    }, this)\n  }, {\n    id: 'assignee',\n    type: 'multiSelect',\n    label: utils.string.t('claims.processing.tasksGridColumns.assignedTo'),\n    value: [],\n    options: claimsTasksProcessingFilters === null || claimsTasksProcessingFilters === void 0 ? void 0 : claimsTasksProcessingFilters.assignee,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"assignee\",\n      search: true,\n      options: claimsTasksProcessingFilters === null || claimsTasksProcessingFilters === void 0 ? void 0 : claimsTasksProcessingFilters.assignee\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 17\n    }, this)\n  }];\n  var columns = [{\n    id: 'id',\n    empty: true,\n    visible: true\n  }, {\n    id: 'taskRef',\n    label: utils.string.t('claims.processing.tasksGridColumns.taskRef'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true,\n    mandatory: true\n  }, {\n    id: 'createdOn',\n    label: utils.string.t('claims.processing.tasksGridColumns.created'),\n    sort: {\n      type: 'date',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true,\n    mandatory: true\n  }, {\n    id: 'taskType',\n    label: utils.string.t('claims.processing.tasksGridColumns.taskName'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }, {\n    id: 'description',\n    label: utils.string.t('claims.processing.tasksGridColumns.description'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true,\n    ellipsis: true\n  }, {\n    id: 'targetDueDate',\n    label: utils.string.t('claims.processing.tasksGridColumns.dueDate'),\n    sort: {\n      type: 'date',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }, {\n    id: 'assignee',\n    label: utils.string.t('claims.processing.tasksGridColumns.assignedTo'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }, {\n    id: 'processRef',\n    label: utils.string.t('claims.processing.tasksGridColumns.claimRef'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }, {\n    id: 'priority',\n    label: utils.string.t('claims.processing.tasksGridColumns.priority'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }];\n\n  var _useFlexiColumns = useFlexiColumns(columns),\n      columnsArray = _useFlexiColumns.columns,\n      columnProps = _useFlexiColumns.columnProps,\n      toggleColumn = _useFlexiColumns.toggleColumn;\n\n  var resetFilter = function resetFilter() {\n    setValue('createdOn', null);\n    setValue('targetDueDate', null);\n    dispatch(resetClaimsProcessingTasksFilters());\n    setResetKey(new Date().getTime());\n    dispatch(getClaimsTasksProcessing({\n      requestType: searchTypeCall,\n      taskType: taskType,\n      query: searchTerm,\n      filterTerm: {}\n    }));\n    dispatch(getClaimsTasksProcessing({\n      requestType: filterTypeCall,\n      taskType: taskType,\n      query: searchTerm,\n      filterTerm: {}\n    }));\n  };\n\n  var resetSearch = function resetSearch() {\n    setValue('createdOn', null);\n    setValue('targetDueDate', null);\n    dispatch(resetClaimsProcessingTaskSearch());\n    setResetKey(new Date().getTime());\n    dispatch(getClaimsTasksProcessing({\n      requestType: searchTypeCall,\n      taskType: taskType,\n      filterTerm: []\n    }));\n    dispatch(getClaimsTasksProcessing({\n      requestType: filterTypeCall,\n      taskType: taskType,\n      filterTerm: []\n    }));\n  };\n\n  var handleSearch = function handleSearch(_ref) {\n    var search = _ref.search,\n        filters = _ref.filters;\n    setValue('createdOn', null);\n    setValue('targetDueDate', null);\n    var searchType = (watchSearchType === null || watchSearchType === void 0 ? void 0 : watchSearchType.value) || '';\n    setSearchTerm(search);\n    setResetKey(new Date().getTime());\n    dispatch(getClaimsTasksProcessing({\n      requestType: searchTypeCall,\n      taskType: taskType,\n      query: search,\n      direction: 'asc',\n      searchType: searchType,\n      navigation: false\n    }));\n    dispatch(getClaimsTasksProcessing({\n      requestType: filterTypeCall,\n      taskType: taskType,\n      query: search,\n      direction: 'asc',\n      searchType: searchType,\n      navigation: false\n    }));\n  };\n\n  var handleSearchFilter = function handleSearchFilter(_ref2) {\n    var search = _ref2.search,\n        filters = _ref2.filters;\n    dispatch(getClaimsTasksProcessing({\n      requestType: searchTypeCall,\n      taskType: taskType,\n      query: search,\n      filterTerm: filters,\n      navigation: false\n    }));\n  };\n\n  var handleChangePage = function handleChangePage(newPage) {\n    setNewPage(newPage);\n    dispatch(getClaimsTasksProcessing({\n      requestType: searchTypeCall,\n      taskType: taskType,\n      page: newPage,\n      query: searchTerm,\n      navigation: true\n    }));\n  };\n\n  var handleChangeRowsPerPage = function handleChangeRowsPerPage(rowsPerPage) {\n    dispatch(getClaimsTasksProcessing({\n      requestType: searchTypeCall,\n      taskType: taskType,\n      size: rowsPerPage,\n      query: searchTerm,\n      navigation: true\n    }));\n  };\n\n  var handleSort = function handleSort(by, dir) {\n    dispatch(getClaimsTasksProcessing({\n      requestType: searchTypeCall,\n      taskType: taskType,\n      sortBy: by,\n      direction: dir,\n      query: searchTerm,\n      navigation: false\n    }));\n  };\n\n  var refreshTasksGrid = function refreshTasksGrid() {\n    dispatch(getClaimsTasksProcessing({\n      requestType: searchTypeCall,\n      taskType: taskType\n    }));\n    dispatch(getClaimsTasksProcessing({\n      requestType: filterTypeCall,\n      taskType: taskType\n    }));\n  };\n\n  var hasTasks = utils.generic.isValidArray(claimsTasksProcessing === null || claimsTasksProcessing === void 0 ? void 0 : claimsTasksProcessing.items, true);\n\n  var resetNotificationFilters = function resetNotificationFilters() {\n    setIsCheckSigningValue(false);\n  };\n\n  useEffect(function () {\n    var searchType = (watchSearchType === null || watchSearchType === void 0 ? void 0 : watchSearchType.value) || '';\n\n    if (refId) {\n      dispatch(getClaimsTasksProcessing({\n        requestType: searchTypeCall,\n        taskType: taskType,\n        searchType: searchType,\n        page: newPage,\n        query: refId\n      }));\n      dispatch(getClaimsTasksProcessing({\n        requestType: filterTypeCall,\n        taskType: taskType,\n        searchType: searchType,\n        page: newPage,\n        query: refId\n      }));\n    }\n  }, [refId]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    if (taskType && !refId) {\n      setValue('taskType', taskType);\n      setIsTaskTeam(taskType === TASK_TEAM_TYPE.myTeam);\n      setResetKey(tableFilterFields);\n      setValue('createdOn', null);\n      setValue('targetDueDate', null);\n      setResetKey(new Date().getTime());\n      dispatch(getClaimsTasksProcessing({\n        requestType: searchTypeCall,\n        taskType: taskType,\n        filterTerm: []\n      }));\n      dispatch(getClaimsTasksProcessing({\n        requestType: filterTypeCall,\n        taskType: taskType\n      }));\n    }\n\n    return function () {\n      dispatch(resetClaimsProcessingTasksItems());\n      dispatch(resetClaimsProcessingTasksFilters());\n      dispatch(resetClaimsProcessingTaskSearch());\n    };\n  }, [taskType]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var toggleCheckSigning = function toggleCheckSigning(event) {\n    var _event$target, _event$target2;\n\n    setResetKey(tableFilterFields);\n    var searchType = (watchSearchType === null || watchSearchType === void 0 ? void 0 : watchSearchType.value) || '';\n    setIsCheckSigningValue(event === null || event === void 0 ? void 0 : (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.checked);\n    var checkedValue = event === null || event === void 0 ? void 0 : (_event$target2 = event.target) === null || _event$target2 === void 0 ? void 0 : _event$target2.checked;\n    dispatch(udpateIsCheckSigningToggle(checkedValue));\n    dispatch(getPremiumProcessingTasksDetails({\n      requestType: searchTypeCall,\n      searchType: searchType,\n      query: searchTerm,\n      isCheckSigning: checkedValue,\n      taskType: taskType,\n      filterTerm: []\n    }));\n    dispatch(getPremiumProcessingTasksDetails({\n      requestType: filterTypeCall,\n      searchType: searchType,\n      query: searchTerm,\n      isCheckSigning: checkedValue,\n      taskType: taskType,\n      filterTerm: []\n    }));\n  };\n\n  useEffect(function () {\n    dispatch(selectedClaimsProcessingTaskType(taskType));\n  }, [taskType]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    var searchType = (watchSearchType === null || watchSearchType === void 0 ? void 0 : watchSearchType.value) || '';\n\n    if (editAdhocStatus) {\n      dispatch(getClaimsTasksProcessing({\n        requestType: searchTypeCall,\n        taskType: taskType,\n        searchType: searchType,\n        page: newPage,\n        query: searchTerm\n      }));\n      dispatch(getClaimsTasksProcessing({\n        requestType: filterTypeCall,\n        taskType: taskType,\n        searchType: searchType,\n        page: newPage,\n        query: searchTerm\n      }));\n    }\n  }, [editAdhocStatus]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var toggleFlexiColumns = function toggleFlexiColumns(columns) {\n    if (uiNavExpanded) {\n      dispatch(collapseNav());\n    }\n\n    toggleColumn(columns);\n  };\n\n  return /*#__PURE__*/_jsxDEV(TasksTabView, {\n    isTaskTeam: isTaskTeam,\n    setValue: setValue,\n    hasTasks: hasTasks,\n    fields: fields,\n    notificationRefId: refId,\n    control: control,\n    taskTypeValue: taskTypeValue,\n    tasks: claimsTasksProcessing,\n    sort: _objectSpread(_objectSpread({}, claimsTasksProcessing.sort), {}, {\n      direction: claimsTasksProcessing.sort.direction.toLowerCase(),\n      type: 'numeric'\n    }),\n    columnsArray: columnsArray,\n    columnProps: columnProps,\n    tableFilterFields: tableFilterFields,\n    isFetchingFilters: isFetchingFilters,\n    isCheckSigningValue: isCheckSigningValue,\n    resetKey: resetKey,\n    handlers: {\n      toggleColumn: toggleFlexiColumns,\n      resetFilter: resetFilter,\n      resetSearch: resetSearch,\n      handleSearch: handleSearch,\n      handleSearchFilter: handleSearchFilter,\n      handleChangePage: handleChangePage,\n      handleChangeRowsPerPage: handleChangeRowsPerPage,\n      handleSort: handleSort,\n      setTaskType: setTaskType,\n      refreshTasksGrid: refreshTasksGrid,\n      resetNotificationFilters: resetNotificationFilters,\n      toggleCheckSigning: toggleCheckSigning\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 501,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TasksTab, \"GXkzYBM1cL8TsoPmly3GtL+CrLA=\", false, function () {\n  return [useDispatch, useParams, useSelector, useSelector, useSelector, useSelector, useSelector, useForm, useFlexiColumns];\n});\n\n_c = TasksTab;\nTasksTab.displayName = \"TasksTab\";\n;\nTasksTab.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"TasksTab\"\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\modules\\\\TasksTab\\\\TasksTab.js\"] = {\n    name: \"TasksTab\",\n    docgenInfo: TasksTab.__docgenInfo,\n    path: \"src\\\\modules\\\\TasksTab\\\\TasksTab.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"TasksTab\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/TasksTab/TasksTab.js"],"names":["React","useEffect","useState","useSelector","useDispatch","useForm","yupResolver","Yup","PropTypes","useParams","get","selectClaimsTasksProcessingFilterLoading","selectClaimsTasksProcessingFilterValues","selectClaimsTasksProcessing","selectedClaimsProcessingTaskType","selectEditAdhocTaskStatus","getClaimsTasksProcessing","resetClaimsProcessingTasksItems","resetClaimsProcessingTasksFilters","resetClaimsProcessingTaskSearch","getPremiumProcessingTasksDetails","collapseNav","udpateIsCheckSigningToggle","TasksTabView","styles","MultiSelect","FormDate","utils","useFlexiColumns","TASK_TEAM_TYPE","TASKS_SEARCH_OPTION_PROCESS_REF","TASKS_SEARCH_OPTION_DESCRIPTION","TASKS_SEARCH_OPTION_TASKI_REF","CLAIM_PROCESSING_REQ_TYPES","TASKS_SEARCH_OPTION_TASKS_NAME","TASKS_SEARCH_OPTION_ASSIGNED","TASKS_SEARCH_OPTION_PRIORITY","makeStyles","TasksTab","classes","name","dispatch","params","claimsTasksProcessing","claimsTasksProcessingFilters","editAdhocStatus","uiNavExpanded","state","isCheckSigningValue","setIsCheckSigningValue","isFetchingFilters","newPage","setNewPage","string","t","searchByText","setSearchByText","resetKey","setResetKey","taskType","myTask","setTaskType","isTaskTeam","setIsTaskTeam","searchTerm","setSearchTerm","searchTypeCall","search","filterTypeCall","filter","refId","selectOptions","label","value","taskTypeOptions","fields","type","defaultValue","muiFormGroupProps","row","root","radioLabel","options","find","item","muiComponentProps","inputProps","title","validation","object","nullable","required","callback","event","data","defaultValues","form","getInitialValues","validationSchema","getValidationSchema","resolver","control","watch","setValue","taskTypeValue","watchSearchType","tableFilterFields","id","content","getFieldProps","fullWidth","margin","clearable","variant","format","priority","description","assignee","columns","empty","visible","sort","direction","nowrap","mandatory","ellipsis","columnsArray","columnProps","toggleColumn","resetFilter","Date","getTime","requestType","query","filterTerm","resetSearch","handleSearch","filters","searchType","navigation","handleSearchFilter","handleChangePage","page","handleChangeRowsPerPage","rowsPerPage","size","handleSort","by","dir","sortBy","refreshTasksGrid","hasTasks","generic","isValidArray","items","resetNotificationFilters","myTeam","toggleCheckSigning","target","checked","checkedValue","isCheckSigning","toggleFlexiColumns","toLowerCase"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as Yup from 'yup';\r\nimport PropTypes from 'prop-types';\r\nimport { useParams } from 'react-router';\r\nimport get from 'lodash/get';\r\n\r\n//app\r\nimport {\r\n    selectClaimsTasksProcessingFilterLoading,\r\n    selectClaimsTasksProcessingFilterValues,\r\n    selectClaimsTasksProcessing,\r\n    selectedClaimsProcessingTaskType,\r\n    selectEditAdhocTaskStatus,\r\n    getClaimsTasksProcessing,\r\n    resetClaimsProcessingTasksItems,\r\n    resetClaimsProcessingTasksFilters,\r\n    resetClaimsProcessingTaskSearch,\r\n    getPremiumProcessingTasksDetails,\r\n    collapseNav,\r\n    udpateIsCheckSigningToggle,\r\n} from 'stores';\r\nimport TasksTabView from './TasksTab.view';\r\nimport styles from './TasksTab.style';\r\nimport { MultiSelect, FormDate } from 'components';\r\nimport * as utils from 'utils';\r\nimport { useFlexiColumns } from 'hooks';\r\nimport {\r\n    TASK_TEAM_TYPE,\r\n    TASKS_SEARCH_OPTION_PROCESS_REF,\r\n    TASKS_SEARCH_OPTION_DESCRIPTION,\r\n    TASKS_SEARCH_OPTION_TASKI_REF,\r\n    CLAIM_PROCESSING_REQ_TYPES,\r\n    TASKS_SEARCH_OPTION_TASKS_NAME,\r\n    TASKS_SEARCH_OPTION_ASSIGNED,\r\n    TASKS_SEARCH_OPTION_PRIORITY\r\n} from 'consts';\r\n\r\n//mui\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nexport default function TasksTab() {\r\n    const classes = makeStyles(styles, { name: 'TasksTab' })();\r\n    const dispatch = useDispatch();\r\n    const params = useParams();\r\n    const claimsTasksProcessing = useSelector(selectClaimsTasksProcessing);\r\n    const claimsTasksProcessingFilters = useSelector(selectClaimsTasksProcessingFilterValues);\r\n    const editAdhocStatus = useSelector(selectEditAdhocTaskStatus);\r\n    const uiNavExpanded = useSelector((state) => get(state, 'ui.nav.expanded'));\r\n\r\n    const [isCheckSigningValue, setIsCheckSigningValue] = useState(false);\r\n    const isFetchingFilters = useSelector(selectClaimsTasksProcessingFilterLoading);\r\n\r\n    const [newPage, setNewPage] = useState(0);\r\n    const [searchByText, setSearchByText] = useState(utils.string.t('claims.searchByTasks.options.TaskRef'));\r\n    const [resetKey, setResetKey] = useState();\r\n\r\n    const [taskType, setTaskType] = useState(claimsTasksProcessing.taskType || TASK_TEAM_TYPE.myTask);\r\n    const [isTaskTeam, setIsTaskTeam] = useState(false);\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n\r\n    const searchTypeCall = CLAIM_PROCESSING_REQ_TYPES.search;\r\n    const filterTypeCall = CLAIM_PROCESSING_REQ_TYPES.filter;\r\n\r\n    const { refId } = params;\r\n\r\n    const selectOptions = [\r\n        { label: utils.string.t('claims.searchByTasks.options.TaskName'), value: TASKS_SEARCH_OPTION_TASKS_NAME },\r\n        { label: utils.string.t('claims.searchByTasks.options.TaskRef'), value: TASKS_SEARCH_OPTION_TASKI_REF },\r\n        { label: utils.string.t('claims.searchByTasks.options.Description'), value: TASKS_SEARCH_OPTION_DESCRIPTION },\r\n        { label: utils.string.t('claims.searchByTasks.options.AssignedTo'), value: TASKS_SEARCH_OPTION_ASSIGNED },\r\n        { label: utils.string.t('claims.searchByTasks.options.ClaimRef'), value: TASKS_SEARCH_OPTION_PROCESS_REF, },\r\n        { label: utils.string.t('claims.searchByTasks.options.Priority'), value: TASKS_SEARCH_OPTION_PRIORITY },\r\n    ];\r\n\r\n    let taskTypeOptions = [\r\n        { value: 'myTask', label: utils.string.t('claims.processing.myTasks') },\r\n        { value: 'myTeam', label: utils.string.t('claims.processing.myTeamTasks') }\r\n    ];\r\n    const fields = [\r\n        {\r\n            name: 'taskType',\r\n            type: 'radio',\r\n            value: taskType,\r\n            defaultValue: taskType,\r\n            muiFormGroupProps: {\r\n                row: true,\r\n                classes: {\r\n                    root: classes.radioLabel,\r\n                },\r\n            },\r\n            options: taskTypeOptions,\r\n        },\r\n        { name: 'createdOn', type: 'datepicker', value: null },\r\n        { name: 'targetDueDate', type: 'datepicker', value: null },\r\n        { name: 'inceptionDate', type: 'datepicker', value: null },\r\n        {\r\n            name: 'searchType',\r\n            type: 'autocompletemui',\r\n            options: selectOptions,\r\n            value:\r\n                selectOptions?.find((item) =>\r\n                    item?.value === TASKS_SEARCH_OPTION_TASKS_NAME\r\n                ) || null,\r\n            muiComponentProps: {\r\n                inputProps: {\r\n                    title: searchByText || '',\r\n                },\r\n            },\r\n            validation: Yup.object().nullable().required(utils.string.t('validation.required')),\r\n            callback: (event, data) => {\r\n                setSearchByText(data?.label);\r\n            },\r\n        },\r\n    ];\r\n\r\n    const defaultValues = utils.form.getInitialValues(fields);\r\n    const validationSchema = utils.form.getValidationSchema(fields);\r\n\r\n    const { control, watch, setValue } = useForm({\r\n        defaultValues,\r\n        ...(validationSchema && { resolver: yupResolver(validationSchema) }),\r\n    });\r\n    const taskTypeValue = watch('taskType');\r\n    const watchSearchType = watch('searchType');\r\n\r\n    const tableFilterFields = [\r\n        {\r\n            id: 'createdOn',\r\n            type: 'datepicker',\r\n            label: utils.string.t('claims.processing.tasksGridColumns.created'),\r\n            value: '',\r\n            content: (\r\n                <FormDate\r\n                    control={control}\r\n                    {...utils.form.getFieldProps(defaultValues, 'createdOn')}\r\n                    id=\"creationdatepicker\"\r\n                    name='createdOn'\r\n                    type=\"datepicker\"\r\n                    value={''}\r\n                    label={''}\r\n                    plainText\r\n                    plainTextIcon\r\n                    placeholder={utils.string.t('app.selectDate')}\r\n                    muiComponentProps={{\r\n                        fullWidth: false,\r\n                        margin: 'dense',\r\n                    }}\r\n                    muiPickerProps={{\r\n                        clearable: false,\r\n                        variant: 'inline',\r\n                        format: 'DD-MM-YYYY',\r\n                    }}\r\n                />\r\n            ),\r\n        },\r\n        {\r\n            id: 'targetDueDate',\r\n            type: 'datepicker',\r\n            label: utils.string.t('claims.processing.tasksGridColumns.dueDate'),\r\n            value: '',\r\n            content: (\r\n                <FormDate\r\n                    control={control}\r\n                    {...utils.form.getFieldProps(defaultValues, 'targetDueDate')}\r\n                    id=\"duedatepicker\"\r\n                    name=\"targetDueDate\"\r\n                    type=\"datepicker\"\r\n                    value={''}\r\n                    label={''}\r\n                    plainText\r\n                    plainTextIcon\r\n                    placeholder={utils.string.t('app.selectDate')}\r\n                    muiComponentProps={{\r\n                        fullWidth: false,\r\n                        margin: 'dense',\r\n                    }}\r\n                    muiPickerProps={{\r\n                        clearable: false,\r\n                        variant: 'inline',\r\n                        format: 'DD-MM-YYYY',\r\n                    }}\r\n                />\r\n            ),\r\n        },\r\n\r\n        {\r\n            id: 'taskType',\r\n            type: 'multiSelect',\r\n            label: utils.string.t('claims.processing.tasksGridColumns.taskName'),\r\n            value: [],\r\n            options: claimsTasksProcessingFilters?.taskType,\r\n            content: (\r\n                <MultiSelect\r\n                    id=\"taskType\"\r\n                    search\r\n                    options={claimsTasksProcessingFilters?.taskType}\r\n                />\r\n            ),\r\n        },\r\n        {\r\n            id: 'priority',\r\n            type: 'multiSelect',\r\n            label: utils.string.t('claims.processing.tasksGridColumns.priority'),\r\n            value: [],\r\n            options: claimsTasksProcessingFilters?.priority,\r\n            content: (\r\n                <MultiSelect\r\n                    id=\"priority\"\r\n                    search\r\n                    options={claimsTasksProcessingFilters?.priority}\r\n                />\r\n            ),\r\n        },\r\n        {\r\n            id: 'description',\r\n            type: 'multiSelect',\r\n            label: utils.string.t('claims.processing.tasksGridColumns.description'),\r\n            value: [],\r\n            options: claimsTasksProcessingFilters?.description,\r\n            content: (\r\n                <MultiSelect\r\n                    id=\"status\"\r\n                    search\r\n                    options={claimsTasksProcessingFilters?.description}\r\n                />\r\n            ),\r\n        },\r\n        {\r\n            id: 'assignee',\r\n            type: 'multiSelect',\r\n            label: utils.string.t('claims.processing.tasksGridColumns.assignedTo'),\r\n            value: [],\r\n            options: claimsTasksProcessingFilters?.assignee,\r\n            content: (\r\n                <MultiSelect\r\n                    id=\"assignee\"\r\n                    search\r\n                    options={claimsTasksProcessingFilters?.assignee}\r\n                />\r\n            ),\r\n        }\r\n    ];\r\n\r\n    const columns = [\r\n        { id: 'id', empty: true, visible: true },\r\n        {\r\n            id: 'taskRef',\r\n            label: utils.string.t('claims.processing.tasksGridColumns.taskRef'),\r\n            sort: { type: 'lexical', direction: 'asc' },\r\n            nowrap: true,\r\n            visible: true,\r\n            mandatory: true,\r\n        },\r\n        {\r\n            id: 'createdOn',\r\n            label: utils.string.t('claims.processing.tasksGridColumns.created'),\r\n            sort: { type: 'date', direction: 'asc' },\r\n            nowrap: true,\r\n            visible: true,\r\n            mandatory: true,\r\n        },\r\n        {\r\n            id: 'taskType',\r\n            label: utils.string.t('claims.processing.tasksGridColumns.taskName'),\r\n            sort: { type: 'lexical', direction: 'asc' },\r\n            nowrap: true,\r\n            visible: true,\r\n        },\r\n        {\r\n            id: 'description',\r\n            label: utils.string.t('claims.processing.tasksGridColumns.description'),\r\n            sort: { type: 'lexical', direction: 'asc' },\r\n            nowrap: true,\r\n            visible: true,\r\n            ellipsis: true,\r\n        },\r\n        {\r\n            id: 'targetDueDate',\r\n            label: utils.string.t('claims.processing.tasksGridColumns.dueDate'),\r\n            sort: { type: 'date', direction: 'asc' },\r\n            nowrap: true,\r\n            visible: true,\r\n        },\r\n        {\r\n            id: 'assignee',\r\n            label: utils.string.t('claims.processing.tasksGridColumns.assignedTo'),\r\n            sort: { type: 'lexical', direction: 'asc' },\r\n            nowrap: true,\r\n            visible: true,\r\n        },\r\n        {\r\n            id: 'processRef',\r\n            label: utils.string.t('claims.processing.tasksGridColumns.claimRef'),\r\n            sort: { type: 'lexical', direction: 'asc' },\r\n            nowrap: true,\r\n            visible: true,\r\n        },\r\n        {\r\n            id: 'priority',\r\n            label: utils.string.t('claims.processing.tasksGridColumns.priority'),\r\n            sort: { type: 'lexical', direction: 'asc' },\r\n            nowrap: true,\r\n            visible: true,\r\n        },\r\n    ];\r\n\r\n    const { columns: columnsArray, columnProps, toggleColumn } = useFlexiColumns(columns);\r\n\r\n    const resetFilter = () => {\r\n        setValue('createdOn', null);\r\n        setValue('targetDueDate', null);\r\n        dispatch(resetClaimsProcessingTasksFilters());\r\n        setResetKey(new Date().getTime());\r\n        dispatch(getClaimsTasksProcessing({ requestType: searchTypeCall, taskType, query: searchTerm, filterTerm: {} }));\r\n        dispatch(getClaimsTasksProcessing({ requestType: filterTypeCall, taskType, query: searchTerm, filterTerm: {} }));\r\n    };\r\n\r\n    const resetSearch = () => {\r\n        setValue('createdOn', null);\r\n        setValue('targetDueDate', null);\r\n        dispatch(resetClaimsProcessingTaskSearch());\r\n        setResetKey(new Date().getTime());\r\n        dispatch(getClaimsTasksProcessing({ requestType: searchTypeCall, taskType, filterTerm: [] }));\r\n        dispatch(getClaimsTasksProcessing({ requestType: filterTypeCall, taskType, filterTerm: [] }));\r\n\r\n    };\r\n\r\n    const handleSearch = ({ search, filters }) => {\r\n        setValue('createdOn', null);\r\n        setValue('targetDueDate', null);\r\n        const searchType = watchSearchType?.value || '';\r\n        setSearchTerm(search);\r\n        setResetKey(new Date().getTime());\r\n        dispatch(\r\n            getClaimsTasksProcessing({\r\n                requestType: searchTypeCall,\r\n                taskType,\r\n                query: search,\r\n                direction: 'asc',\r\n                searchType: searchType,\r\n                navigation: false,\r\n            })\r\n        );\r\n        dispatch(\r\n            getClaimsTasksProcessing({\r\n                requestType: filterTypeCall,\r\n                taskType,\r\n                query: search,\r\n                direction: 'asc',\r\n                searchType: searchType,\r\n                navigation: false,\r\n            })\r\n        );\r\n    };\r\n\r\n    const handleSearchFilter = ({ search, filters }) => {\r\n        dispatch(getClaimsTasksProcessing({ requestType: searchTypeCall, taskType, query: search, filterTerm: filters, navigation: false }));\r\n    };\r\n\r\n    const handleChangePage = (newPage) => {\r\n        setNewPage(newPage);\r\n        dispatch(getClaimsTasksProcessing({ requestType: searchTypeCall, taskType, page: newPage, query: searchTerm, navigation: true }));\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (rowsPerPage) => {\r\n        dispatch(getClaimsTasksProcessing({ requestType: searchTypeCall, taskType, size: rowsPerPage, query: searchTerm, navigation: true }));\r\n    };\r\n\r\n    const handleSort = (by, dir) => {\r\n        dispatch(\r\n            getClaimsTasksProcessing({\r\n                requestType: searchTypeCall,\r\n                taskType,\r\n                sortBy: by,\r\n                direction: dir,\r\n                query: searchTerm,\r\n                navigation: false,\r\n            })\r\n        );\r\n    };\r\n\r\n    const refreshTasksGrid = () => {\r\n        dispatch(getClaimsTasksProcessing({ requestType: searchTypeCall, taskType }));\r\n        dispatch(getClaimsTasksProcessing({ requestType: filterTypeCall, taskType }));\r\n    };\r\n\r\n    const hasTasks = utils.generic.isValidArray(claimsTasksProcessing?.items, true);\r\n\r\n    const resetNotificationFilters = () => {\r\n        setIsCheckSigningValue(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const searchType = watchSearchType?.value || '';\r\n        if (refId) {\r\n            dispatch(\r\n                getClaimsTasksProcessing({\r\n                    requestType: searchTypeCall,\r\n                    taskType,\r\n                    searchType: searchType,\r\n                    page: newPage,\r\n                    query: refId,\r\n                })\r\n            );\r\n            dispatch(\r\n                getClaimsTasksProcessing({\r\n                    requestType: filterTypeCall,\r\n                    taskType,\r\n                    searchType: searchType,\r\n                    page: newPage,\r\n                    query: refId,\r\n                })\r\n            );\r\n        }\r\n    }, [refId]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    useEffect(() => {\r\n        if (taskType && !refId) {\r\n            setValue('taskType', taskType);\r\n            setIsTaskTeam(taskType === TASK_TEAM_TYPE.myTeam);\r\n            setResetKey(tableFilterFields);\r\n            setValue('createdOn', null);\r\n            setValue('targetDueDate', null);\r\n            setResetKey(new Date().getTime());\r\n            dispatch(getClaimsTasksProcessing({ requestType: searchTypeCall, taskType, filterTerm: [] }));\r\n            dispatch(getClaimsTasksProcessing({ requestType: filterTypeCall, taskType }));\r\n        }\r\n        return () => {\r\n            dispatch(resetClaimsProcessingTasksItems());\r\n            dispatch(resetClaimsProcessingTasksFilters());\r\n            dispatch(resetClaimsProcessingTaskSearch());\r\n        };\r\n    }, [taskType]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n\r\n    const toggleCheckSigning = (event) => {\r\n        setResetKey(tableFilterFields);\r\n        const searchType = watchSearchType?.value || '';\r\n        setIsCheckSigningValue(event?.target?.checked);\r\n        const checkedValue = event?.target?.checked;\r\n        dispatch(udpateIsCheckSigningToggle(checkedValue));\r\n        dispatch(\r\n            getPremiumProcessingTasksDetails({\r\n                requestType: searchTypeCall,\r\n                searchType: searchType,\r\n                query: searchTerm,\r\n                isCheckSigning: checkedValue,\r\n                taskType,\r\n                filterTerm: [],\r\n            })\r\n        );\r\n        dispatch(\r\n            getPremiumProcessingTasksDetails({\r\n                requestType: filterTypeCall,\r\n                searchType: searchType,\r\n                query: searchTerm,\r\n                isCheckSigning: checkedValue,\r\n                taskType,\r\n                filterTerm: [],\r\n            })\r\n        );\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(selectedClaimsProcessingTaskType(taskType));\r\n    }, [taskType]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    useEffect(() => {\r\n        const searchType = watchSearchType?.value || '';\r\n        if (editAdhocStatus) {\r\n            dispatch(\r\n                getClaimsTasksProcessing({\r\n                    requestType: searchTypeCall,\r\n                    taskType,\r\n                    searchType: searchType,\r\n                    page: newPage,\r\n                    query: searchTerm,\r\n                })\r\n            );\r\n            dispatch(\r\n                getClaimsTasksProcessing({\r\n                    requestType: filterTypeCall,\r\n                    taskType,\r\n                    searchType: searchType,\r\n                    page: newPage,\r\n                    query: searchTerm,\r\n                })\r\n            );\r\n        }\r\n    }, [editAdhocStatus]); // eslint-disable-line react-hooks/exhaustive-deps\r\n    const toggleFlexiColumns = (columns) => {\r\n        if (uiNavExpanded) {\r\n            dispatch(collapseNav());\r\n        }\r\n        toggleColumn(columns);\r\n    };\r\n    return (\r\n        <TasksTabView\r\n            isTaskTeam={isTaskTeam}\r\n            setValue={setValue}\r\n            hasTasks={hasTasks}\r\n            fields={fields}\r\n            notificationRefId={refId}\r\n            control={control}\r\n            taskTypeValue={taskTypeValue}\r\n            tasks={claimsTasksProcessing}\r\n            sort={{\r\n                ...(claimsTasksProcessing.sort),\r\n                direction:\r\n                    claimsTasksProcessing.sort.direction.toLowerCase(),\r\n                type: 'numeric',\r\n            }}\r\n            columnsArray={columnsArray}\r\n            columnProps={columnProps}\r\n            tableFilterFields={tableFilterFields}\r\n            isFetchingFilters={isFetchingFilters}\r\n            isCheckSigningValue={isCheckSigningValue}\r\n            resetKey={resetKey}\r\n            handlers={{\r\n                toggleColumn: toggleFlexiColumns,\r\n                resetFilter,\r\n                resetSearch,\r\n                handleSearch,\r\n                handleSearchFilter,\r\n                handleChangePage,\r\n                handleChangeRowsPerPage,\r\n                handleSort,\r\n                setTaskType,\r\n                refreshTasksGrid,\r\n                resetNotificationFilters,\r\n                toggleCheckSigning,\r\n            }}\r\n        />\r\n    );\r\n};"]},"metadata":{},"sourceType":"module"}