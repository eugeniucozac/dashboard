{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\forms\\\\ChangeComplexityPriorityAssignment\\\\ChangeComplexityPriorityAssignment.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as Yup from 'yup';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup'; // app\n\nimport { ChangeComplexityPriorityAssignmentView } from './ChangeComplexityPriorityAssignment.view';\nimport { Loader } from 'components';\nimport { getClaimsPreviewInformation, getComplexityTypes, getComplexityValues, getPriorityLevels, getUsersByOrg, resetComplexityBasisValues, selectClaimsAssignedToUsers, selectComplexityTypes, selectComplexityTypesLoaded, selectComplexityValues, selectComplexityValuesLoaded, selectPriorities, selectPrioritiesLoaded, selectUserOrganisation, showModal // getClaimsProcessing,\n// singleAssignClaim,\n// resetClaimsAssignedToUsers,\n// selectClaimsProcessingPagination,\n// selectComplexityBasisValues,\n} from 'stores';\nimport { useFormActions } from 'hooks';\nimport * as constants from 'consts';\nimport * as utils from 'utils'; // mui\n\nimport { Box } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChangeComplexityPriorityAssignment.propTypes = {\n  claimsProcessingSelected: PropTypes.array.isRequired,\n  claimsType: PropTypes.string,\n  fetchClaimDetails: PropTypes.bool,\n  setIsDirty: PropTypes.func,\n  handleClose: PropTypes.func.isRequired\n};\nexport default function ChangeComplexityPriorityAssignment(_ref) {\n  _s();\n\n  var _formValues$team2;\n\n  var claims = _ref.claimsProcessingSelected,\n      claimsType = _ref.claimsType,\n      fetchClaimDetails = _ref.fetchClaimDetails,\n      setIsDirty = _ref.setIsDirty,\n      handleClose = _ref.handleClose;\n  var dispatch = useDispatch();\n  var userOrganisation = useSelector(selectUserOrganisation);\n  var complexitiesBasisValues = useSelector(selectComplexityValues) || [];\n  var complexitiesBasisValuesLoaded = useSelector(selectComplexityValuesLoaded);\n  var complexityTypes = useSelector(selectComplexityTypes) || [];\n  var complexityTypesLoaded = useSelector(selectComplexityTypesLoaded); // const complexitiesValuesType = useSelector(selectComplexityBasisValues)?.type;\n  // const claimsPagination = useSelector(selectClaimsProcessingPagination);\n\n  var assignToUsersObj = useSelector(selectClaimsAssignedToUsers);\n  var priorities = useSelector(selectPriorities);\n  var prioritiesLoaded = useSelector(selectPrioritiesLoaded);\n  var baseClaim = claims === null || claims === void 0 ? void 0 : claims[0]; // const assignToUsersType = assignToUsersObj?.type;\n\n  var assignToUsersItems = (assignToUsersObj === null || assignToUsersObj === void 0 ? void 0 : assignToUsersObj.items) || [];\n  var assignToUsersLoaded = assignToUsersObj === null || assignToUsersObj === void 0 ? void 0 : assignToUsersObj.loaded;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isCrossTeamAssignTo = _useState2[0],\n      setCrossTeamAssignTo = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isComplexityAvailable = _useState4[0],\n      setIsComplexityAvailable = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isLoading = _useState6[0],\n      setIsLoading = _useState6[1];\n\n  var getClaimAssignedUser = function getClaimAssignedUser() {\n    return assignToUsersItems.find(function (user) {\n      return user.fullName === (baseClaim === null || baseClaim === void 0 ? void 0 : baseClaim.assignedTo);\n    }) || null;\n  };\n\n  var getClaimComplexity = function getClaimComplexity() {\n    return complexityTypes.find(function (type) {\n      return type.complextityType === (baseClaim === null || baseClaim === void 0 ? void 0 : baseClaim.complexity);\n    }) || null;\n  };\n\n  var getClaimComplexityBasis = function getClaimComplexityBasis() {\n    return (complexitiesBasisValues === null || complexitiesBasisValues === void 0 ? void 0 : complexitiesBasisValues.find(function (item) {\n      return (item === null || item === void 0 ? void 0 : item.complexityRulesID) === (baseClaim === null || baseClaim === void 0 ? void 0 : baseClaim.complexityValueID);\n    })) || null;\n  };\n\n  var getClaimPriority = function getClaimPriority() {\n    return (priorities === null || priorities === void 0 ? void 0 : priorities.find(function (priority) {\n      return (priority === null || priority === void 0 ? void 0 : priority.description) === (baseClaim === null || baseClaim === void 0 ? void 0 : baseClaim.priority);\n    })) || null;\n  };\n\n  var getTeamByLabel = function getTeamByLabel(label) {\n    var options = Object.values(constants.ORGANIZATIONS) || [];\n    var team = options === null || options === void 0 ? void 0 : options.find(function (o) {\n      return o.label === label;\n    });\n    return team || null;\n  };\n\n  var fields = [{\n    name: 'complexity',\n    type: 'autocompletemui',\n    label: \"\".concat(utils.string.t('claims.processing.bulkAssign.fields.complexityType.label'), \" *\"),\n    value: getClaimComplexity(),\n    options: (baseClaim === null || baseClaim === void 0 ? void 0 : baseClaim.complexity) !== 'Unsure' ? complexityTypes.filter(function (item) {\n      return item.complextityType !== 'Unsure';\n    }) : complexityTypes,\n    optionKey: 'complextityType',\n    optionLabel: 'complextityType',\n    validation: Yup.object().nullable().required(utils.string.t('validation.required')),\n    callback: function callback(event, value) {\n      setValue('team', getTeamByLabel(value === null || value === void 0 ? void 0 : value.organizationName));\n      setValue('assignTo', null);\n      setIsComplexityAvailable((value === null || value === void 0 ? void 0 : value.complextityType) === constants.ORGANIZATIONS.ardonagh.complexity);\n      setCrossTeamAssignTo((value === null || value === void 0 ? void 0 : value.organizationName) !== (userOrganisation === null || userOrganisation === void 0 ? void 0 : userOrganisation.name));\n    }\n  }, {\n    name: 'complexityBasis',\n    type: 'autocompletemui',\n    label: \"\".concat(utils.string.t('claims.processing.bulkAssign.fields.complexity.label'), \" *\"),\n    value: getClaimComplexityBasis(),\n    options: complexitiesBasisValues,\n    optionKey: 'complexityRulesID',\n    optionLabel: 'complexityRulesValue',\n    validation: isComplexityAvailable && Yup.object().nullable().required(utils.string.t('validation.required'))\n  }, {\n    name: 'priority',\n    type: 'autocompletemui',\n    label: \"\".concat(utils.string.t('claims.processing.bulkAssign.fields.priority.label'), \" *\"),\n    value: getClaimPriority(),\n    options: priorities,\n    optionKey: 'id',\n    optionLabel: 'description',\n    validation: Yup.object().nullable().required(utils.string.t('validation.required'))\n  }, {\n    name: 'team',\n    type: 'autocompletemui',\n    label: \"\".concat(utils.string.t('claims.processing.bulkAssign.fields.team.label'), \" *\"),\n    value: getTeamByLabel(baseClaim === null || baseClaim === void 0 ? void 0 : baseClaim.team),\n    options: [_objectSpread({}, constants.ORGANIZATIONS.mphasis), _objectSpread({}, constants.ORGANIZATIONS.ardonagh)],\n    optionKey: 'id',\n    optionLabel: 'label',\n    validation: Yup.object().nullable().required(utils.string.t('validation.required')),\n    callback: function callback(event, value) {\n      setCrossTeamAssignTo((value === null || value === void 0 ? void 0 : value.label) !== (userOrganisation === null || userOrganisation === void 0 ? void 0 : userOrganisation.name));\n    }\n  }, {\n    name: 'assignTo',\n    type: 'autocompletemui',\n    label: \"\".concat(utils.string.t('claims.processing.bulkAssign.fields.assignTo.label'), \" *\"),\n    value: getClaimAssignedUser(),\n    options: assignToUsersItems,\n    optionKey: 'id',\n    optionLabel: 'fullName',\n    validation: !isCrossTeamAssignTo && Yup.object().nullable().required(utils.string.t('claims.processing.bulkAssign.validation.chooseAssignee'))\n  }, {\n    name: 'notes',\n    type: 'textarea',\n    label: \"\".concat(utils.string.t('claims.processing.bulkAssign.fields.notes.label'), \" *\"),\n    value: '',\n    muiComponentProps: {\n      multiline: true,\n      minRows: 3,\n      maxRows: 6\n    },\n    validation: !isCrossTeamAssignTo && Yup.string().min(1, utils.string.t('validation.required')).max(1000, utils.string.t('validation.string.max')).required(utils.string.t('validation.required'))\n  }];\n  var defaultValues = utils.form.getInitialValues(fields);\n  var validationSchema = utils.form.getValidationSchema(fields);\n\n  var _useForm = useForm(_objectSpread({\n    defaultValues: defaultValues\n  }, validationSchema && {\n    resolver: yupResolver(validationSchema)\n  })),\n      control = _useForm.control,\n      watch = _useForm.watch,\n      errors = _useForm.errors,\n      setValue = _useForm.setValue,\n      handleSubmit = _useForm.handleSubmit,\n      formState = _useForm.formState;\n\n  var formValues = watch();\n  var formIsDirty = formState.isDirty;\n  var actions = [{\n    name: 'cancel',\n    label: utils.string.t('app.cancel'),\n    handler: function handler() {\n      if (formIsDirty) {\n        dispatch(showModal({\n          component: 'CONFIRM',\n          props: {\n            title: utils.string.t('navigation.form.subtitle'),\n            hint: utils.string.t('navigation.form.title'),\n            fullWidth: true,\n            maxWidth: 'xs',\n            componentProps: {\n              cancelLabel: utils.string.t('app.no'),\n              confirmLabel: utils.string.t('app.yes'),\n              submitHandler: function submitHandler() {\n                handleClose();\n              }\n            }\n          }\n        }));\n      } else {\n        handleClose();\n      }\n    }\n  }, {\n    name: 'submit',\n    label: utils.string.t('app.assign'),\n    handler: function handler(values) {\n      onSubmit(values);\n    }\n  }];\n\n  var _useFormActions = useFormActions(actions),\n      cancel = _useFormActions.cancel,\n      submit = _useFormActions.submit;\n\n  var isDataReady = function isDataReady() {\n    return prioritiesLoaded && utils.generic.isValidArray(priorities, true) && assignToUsersLoaded && utils.generic.isValidArray(assignToUsersItems, true) && complexityTypesLoaded && utils.generic.isValidArray(complexityTypes, true) && complexitiesBasisValuesLoaded && utils.generic.isValidArray(complexitiesBasisValues, true);\n  };\n\n  var onSubmit = function onSubmit(values) {\n    // TODO - in progress\n    // use new/updated API call to submit this data\n    console.log('[submit]', values); // dispatch(singleAssignClaim(claims, values)).then(() => {\n    //   // fetch the claims list again to remove the re-assigned claims\n    //   dispatch(getClaimsProcessing({ requestType: constants.CLAIM_PROCESSING_REQ_TYPES.search, claimsType, page: claimsPagination?.page }));\n    // });\n  }; // first render\n\n\n  useEffect(function () {\n    if (fetchClaimDetails) {\n      dispatch(getClaimsPreviewInformation(baseClaim === null || baseClaim === void 0 ? void 0 : baseClaim.claimID, baseClaim === null || baseClaim === void 0 ? void 0 : baseClaim.claimReference, 1, 1));\n    }\n\n    dispatch(getPriorityLevels());\n    dispatch(getComplexityTypes());\n    dispatch(resetComplexityBasisValues());\n    dispatch(getComplexityValues(baseClaim === null || baseClaim === void 0 ? void 0 : baseClaim.divisionID, baseClaim === null || baseClaim === void 0 ? void 0 : baseClaim.sourceId, false));\n    setIsComplexityAvailable((baseClaim === null || baseClaim === void 0 ? void 0 : baseClaim.complexity) === constants.ORGANIZATIONS.ardonagh.complexity);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n  // fetch list of users when team is changed\n\n  useEffect(function () {\n    var _formValues$team;\n\n    var teamName = formValues === null || formValues === void 0 ? void 0 : (_formValues$team = formValues.team) === null || _formValues$team === void 0 ? void 0 : _formValues$team.name;\n\n    if (teamName) {\n      setIsLoading(true);\n      setValue('assignTo', null);\n      dispatch(getUsersByOrg(teamName, claims, 'bulkAssignClaims', false)).then(function () {\n        setIsLoading(false);\n      });\n    }\n  }, [formValues === null || formValues === void 0 ? void 0 : (_formValues$team2 = formValues.team) === null || _formValues$team2 === void 0 ? void 0 : _formValues$team2.name]); // eslint-disable-line react-hooks/exhaustive-deps\n  // make the form dirty if any values are changed\n\n  useEffect(function () {\n    setIsDirty(formIsDirty);\n  }, [formValues]); // eslint-disable-line react-hooks/exhaustive-deps\n  // populate form values when all data is ready\n\n  useEffect(function () {\n    if (isDataReady()) {\n      setValue('assignTo', getClaimAssignedUser());\n      setValue('complexity', getClaimComplexity());\n      setValue('complexityBasis', getClaimComplexityBasis());\n      setValue('priority', getClaimPriority());\n    }\n  }, [isDataReady()]); // eslint-disable-line react-hooks/exhaustive-deps\n  // data is still loading...\n\n  if (!isDataReady()) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      height: \"300px\",\n      children: /*#__PURE__*/_jsxDEV(Loader, {\n        visible: true,\n        absolute: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this);\n  } // data is ready\n\n\n  return /*#__PURE__*/_jsxDEV(ChangeComplexityPriorityAssignmentView, {\n    fields: fields,\n    buttons: {\n      cancel: cancel,\n      submit: submit\n    },\n    formProps: {\n      control: control,\n      errors: errors,\n      handleSubmit: handleSubmit,\n      formState: formState\n    },\n    isComplexityAvailable: isComplexityAvailable,\n    isLoading: isLoading\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 310,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChangeComplexityPriorityAssignment, \"8rqMbOl2BGEEt0gW4DX/R0oRt8U=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useForm, useFormActions];\n});\n\n_c = ChangeComplexityPriorityAssignment;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChangeComplexityPriorityAssignment\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/forms/ChangeComplexityPriorityAssignment/ChangeComplexityPriorityAssignment.js"],"names":["React","useEffect","useState","useDispatch","useSelector","PropTypes","Yup","useForm","yupResolver","ChangeComplexityPriorityAssignmentView","Loader","getClaimsPreviewInformation","getComplexityTypes","getComplexityValues","getPriorityLevels","getUsersByOrg","resetComplexityBasisValues","selectClaimsAssignedToUsers","selectComplexityTypes","selectComplexityTypesLoaded","selectComplexityValues","selectComplexityValuesLoaded","selectPriorities","selectPrioritiesLoaded","selectUserOrganisation","showModal","useFormActions","constants","utils","Box","ChangeComplexityPriorityAssignment","propTypes","claimsProcessingSelected","array","isRequired","claimsType","string","fetchClaimDetails","bool","setIsDirty","func","handleClose","claims","dispatch","userOrganisation","complexitiesBasisValues","complexitiesBasisValuesLoaded","complexityTypes","complexityTypesLoaded","assignToUsersObj","priorities","prioritiesLoaded","baseClaim","assignToUsersItems","items","assignToUsersLoaded","loaded","isCrossTeamAssignTo","setCrossTeamAssignTo","isComplexityAvailable","setIsComplexityAvailable","isLoading","setIsLoading","getClaimAssignedUser","find","user","fullName","assignedTo","getClaimComplexity","type","complextityType","complexity","getClaimComplexityBasis","item","complexityRulesID","complexityValueID","getClaimPriority","priority","description","getTeamByLabel","label","options","Object","values","ORGANIZATIONS","team","o","fields","name","t","value","filter","optionKey","optionLabel","validation","object","nullable","required","callback","event","setValue","organizationName","ardonagh","mphasis","muiComponentProps","multiline","minRows","maxRows","min","max","defaultValues","form","getInitialValues","validationSchema","getValidationSchema","resolver","control","watch","errors","handleSubmit","formState","formValues","formIsDirty","isDirty","actions","handler","component","props","title","hint","fullWidth","maxWidth","componentProps","cancelLabel","confirmLabel","submitHandler","onSubmit","cancel","submit","isDataReady","generic","isValidArray","console","log","claimID","claimReference","divisionID","sourceId","teamName","then"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport * as Yup from 'yup';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n\r\n// app\r\nimport { ChangeComplexityPriorityAssignmentView } from './ChangeComplexityPriorityAssignment.view';\r\nimport { Loader } from 'components';\r\nimport {\r\n  getClaimsPreviewInformation,\r\n  getComplexityTypes,\r\n  getComplexityValues,\r\n  getPriorityLevels,\r\n  getUsersByOrg,\r\n  resetComplexityBasisValues,\r\n  selectClaimsAssignedToUsers,\r\n  selectComplexityTypes,\r\n  selectComplexityTypesLoaded,\r\n  selectComplexityValues,\r\n  selectComplexityValuesLoaded,\r\n  selectPriorities,\r\n  selectPrioritiesLoaded,\r\n  selectUserOrganisation,\r\n  showModal,\r\n  // getClaimsProcessing,\r\n  // singleAssignClaim,\r\n  // resetClaimsAssignedToUsers,\r\n  // selectClaimsProcessingPagination,\r\n  // selectComplexityBasisValues,\r\n} from 'stores';\r\nimport { useFormActions } from 'hooks';\r\nimport * as constants from 'consts';\r\nimport * as utils from 'utils';\r\n\r\n// mui\r\nimport { Box } from '@material-ui/core';\r\n\r\nChangeComplexityPriorityAssignment.propTypes = {\r\n  claimsProcessingSelected: PropTypes.array.isRequired,\r\n  claimsType: PropTypes.string,\r\n  fetchClaimDetails: PropTypes.bool,\r\n  setIsDirty: PropTypes.func,\r\n  handleClose: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default function ChangeComplexityPriorityAssignment({\r\n  claimsProcessingSelected: claims,\r\n  claimsType,\r\n  fetchClaimDetails,\r\n  setIsDirty,\r\n  handleClose,\r\n}) {\r\n  const dispatch = useDispatch();\r\n\r\n  const userOrganisation = useSelector(selectUserOrganisation);\r\n  const complexitiesBasisValues = useSelector(selectComplexityValues) || [];\r\n  const complexitiesBasisValuesLoaded = useSelector(selectComplexityValuesLoaded);\r\n  const complexityTypes = useSelector(selectComplexityTypes) || [];\r\n  const complexityTypesLoaded = useSelector(selectComplexityTypesLoaded);\r\n  // const complexitiesValuesType = useSelector(selectComplexityBasisValues)?.type;\r\n  // const claimsPagination = useSelector(selectClaimsProcessingPagination);\r\n  const assignToUsersObj = useSelector(selectClaimsAssignedToUsers);\r\n  const priorities = useSelector(selectPriorities);\r\n  const prioritiesLoaded = useSelector(selectPrioritiesLoaded);\r\n\r\n  const baseClaim = claims?.[0];\r\n  // const assignToUsersType = assignToUsersObj?.type;\r\n  const assignToUsersItems = assignToUsersObj?.items || [];\r\n  const assignToUsersLoaded = assignToUsersObj?.loaded;\r\n\r\n  const [isCrossTeamAssignTo, setCrossTeamAssignTo] = useState(false);\r\n  const [isComplexityAvailable, setIsComplexityAvailable] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const getClaimAssignedUser = () => {\r\n    return assignToUsersItems.find((user) => user.fullName === baseClaim?.assignedTo) || null;\r\n  };\r\n\r\n  const getClaimComplexity = () => {\r\n    return complexityTypes.find((type) => type.complextityType === baseClaim?.complexity) || null;\r\n  };\r\n\r\n  const getClaimComplexityBasis = () => {\r\n    return complexitiesBasisValues?.find((item) => item?.complexityRulesID === baseClaim?.complexityValueID) || null;\r\n  };\r\n\r\n  const getClaimPriority = () => {\r\n    return priorities?.find((priority) => priority?.description === baseClaim?.priority) || null;\r\n  };\r\n\r\n  const getTeamByLabel = (label) => {\r\n    const options = Object.values(constants.ORGANIZATIONS) || [];\r\n    const team = options?.find((o) => o.label === label);\r\n\r\n    return team || null;\r\n  };\r\n\r\n  const fields = [\r\n    {\r\n      name: 'complexity',\r\n      type: 'autocompletemui',\r\n      label: `${utils.string.t('claims.processing.bulkAssign.fields.complexityType.label')} *`,\r\n      value: getClaimComplexity(),\r\n      options: baseClaim?.complexity !== 'Unsure' ? complexityTypes.filter((item) => item.complextityType !== 'Unsure') : complexityTypes,\r\n      optionKey: 'complextityType',\r\n      optionLabel: 'complextityType',\r\n      validation: Yup.object().nullable().required(utils.string.t('validation.required')),\r\n      callback: (event, value) => {\r\n        setValue('team', getTeamByLabel(value?.organizationName));\r\n        setValue('assignTo', null);\r\n        setIsComplexityAvailable(value?.complextityType === constants.ORGANIZATIONS.ardonagh.complexity);\r\n        setCrossTeamAssignTo(value?.organizationName !== userOrganisation?.name);\r\n      },\r\n    },\r\n    {\r\n      name: 'complexityBasis',\r\n      type: 'autocompletemui',\r\n      label: `${utils.string.t('claims.processing.bulkAssign.fields.complexity.label')} *`,\r\n      value: getClaimComplexityBasis(),\r\n      options: complexitiesBasisValues,\r\n      optionKey: 'complexityRulesID',\r\n      optionLabel: 'complexityRulesValue',\r\n      validation: isComplexityAvailable && Yup.object().nullable().required(utils.string.t('validation.required')),\r\n    },\r\n    {\r\n      name: 'priority',\r\n      type: 'autocompletemui',\r\n      label: `${utils.string.t('claims.processing.bulkAssign.fields.priority.label')} *`,\r\n      value: getClaimPriority(),\r\n      options: priorities,\r\n      optionKey: 'id',\r\n      optionLabel: 'description',\r\n      validation: Yup.object().nullable().required(utils.string.t('validation.required')),\r\n    },\r\n    {\r\n      name: 'team',\r\n      type: 'autocompletemui',\r\n      label: `${utils.string.t('claims.processing.bulkAssign.fields.team.label')} *`,\r\n      value: getTeamByLabel(baseClaim?.team),\r\n      options: [{ ...constants.ORGANIZATIONS.mphasis }, { ...constants.ORGANIZATIONS.ardonagh }],\r\n      optionKey: 'id',\r\n      optionLabel: 'label',\r\n      validation: Yup.object().nullable().required(utils.string.t('validation.required')),\r\n      callback: (event, value) => {\r\n        setCrossTeamAssignTo(value?.label !== userOrganisation?.name);\r\n      },\r\n    },\r\n    {\r\n      name: 'assignTo',\r\n      type: 'autocompletemui',\r\n      label: `${utils.string.t('claims.processing.bulkAssign.fields.assignTo.label')} *`,\r\n      value: getClaimAssignedUser(),\r\n      options: assignToUsersItems,\r\n      optionKey: 'id',\r\n      optionLabel: 'fullName',\r\n      validation:\r\n        !isCrossTeamAssignTo && Yup.object().nullable().required(utils.string.t('claims.processing.bulkAssign.validation.chooseAssignee')),\r\n    },\r\n    {\r\n      name: 'notes',\r\n      type: 'textarea',\r\n      label: `${utils.string.t('claims.processing.bulkAssign.fields.notes.label')} *`,\r\n      value: '',\r\n      muiComponentProps: {\r\n        multiline: true,\r\n        minRows: 3,\r\n        maxRows: 6,\r\n      },\r\n      validation:\r\n        !isCrossTeamAssignTo &&\r\n        Yup.string()\r\n          .min(1, utils.string.t('validation.required'))\r\n          .max(1000, utils.string.t('validation.string.max'))\r\n          .required(utils.string.t('validation.required')),\r\n    },\r\n  ];\r\n\r\n  const defaultValues = utils.form.getInitialValues(fields);\r\n  const validationSchema = utils.form.getValidationSchema(fields);\r\n\r\n  const { control, watch, errors, setValue, handleSubmit, formState } = useForm({\r\n    defaultValues,\r\n    ...(validationSchema && { resolver: yupResolver(validationSchema) }),\r\n  });\r\n\r\n  const formValues = watch();\r\n  const formIsDirty = formState.isDirty;\r\n\r\n  const actions = [\r\n    {\r\n      name: 'cancel',\r\n      label: utils.string.t('app.cancel'),\r\n      handler: () => {\r\n        if (formIsDirty) {\r\n          dispatch(\r\n            showModal({\r\n              component: 'CONFIRM',\r\n              props: {\r\n                title: utils.string.t('navigation.form.subtitle'),\r\n                hint: utils.string.t('navigation.form.title'),\r\n                fullWidth: true,\r\n                maxWidth: 'xs',\r\n                componentProps: {\r\n                  cancelLabel: utils.string.t('app.no'),\r\n                  confirmLabel: utils.string.t('app.yes'),\r\n                  submitHandler: () => {\r\n                    handleClose();\r\n                  },\r\n                },\r\n              },\r\n            })\r\n          );\r\n        } else {\r\n          handleClose();\r\n        }\r\n      },\r\n    },\r\n    {\r\n      name: 'submit',\r\n      label: utils.string.t('app.assign'),\r\n      handler: (values) => {\r\n        onSubmit(values);\r\n      },\r\n    },\r\n  ];\r\n\r\n  const { cancel, submit } = useFormActions(actions);\r\n\r\n  const isDataReady = () => {\r\n    return (\r\n      prioritiesLoaded &&\r\n      utils.generic.isValidArray(priorities, true) &&\r\n      assignToUsersLoaded &&\r\n      utils.generic.isValidArray(assignToUsersItems, true) &&\r\n      complexityTypesLoaded &&\r\n      utils.generic.isValidArray(complexityTypes, true) &&\r\n      complexitiesBasisValuesLoaded &&\r\n      utils.generic.isValidArray(complexitiesBasisValues, true)\r\n    );\r\n  };\r\n\r\n  const onSubmit = (values) => {\r\n    // TODO - in progress\r\n    // use new/updated API call to submit this data\r\n    console.log('[submit]', values);\r\n\r\n    // dispatch(singleAssignClaim(claims, values)).then(() => {\r\n    //   // fetch the claims list again to remove the re-assigned claims\r\n    //   dispatch(getClaimsProcessing({ requestType: constants.CLAIM_PROCESSING_REQ_TYPES.search, claimsType, page: claimsPagination?.page }));\r\n    // });\r\n  };\r\n\r\n  // first render\r\n  useEffect(() => {\r\n    if (fetchClaimDetails) {\r\n      dispatch(getClaimsPreviewInformation(baseClaim?.claimID, baseClaim?.claimReference, 1, 1));\r\n    }\r\n\r\n    dispatch(getPriorityLevels());\r\n    dispatch(getComplexityTypes());\r\n\r\n    dispatch(resetComplexityBasisValues());\r\n    dispatch(getComplexityValues(baseClaim?.divisionID, baseClaim?.sourceId, false));\r\n\r\n    setIsComplexityAvailable(baseClaim?.complexity === constants.ORGANIZATIONS.ardonagh.complexity);\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  // fetch list of users when team is changed\r\n  useEffect(() => {\r\n    const teamName = formValues?.team?.name;\r\n\r\n    if (teamName) {\r\n      setIsLoading(true);\r\n      setValue('assignTo', null);\r\n\r\n      dispatch(getUsersByOrg(teamName, claims, 'bulkAssignClaims', false)).then(() => {\r\n        setIsLoading(false);\r\n      });\r\n    }\r\n  }, [formValues?.team?.name]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  // make the form dirty if any values are changed\r\n  useEffect(() => {\r\n    setIsDirty(formIsDirty);\r\n  }, [formValues]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  // populate form values when all data is ready\r\n  useEffect(() => {\r\n    if (isDataReady()) {\r\n      setValue('assignTo', getClaimAssignedUser());\r\n      setValue('complexity', getClaimComplexity());\r\n      setValue('complexityBasis', getClaimComplexityBasis());\r\n      setValue('priority', getClaimPriority());\r\n    }\r\n  }, [isDataReady()]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  // data is still loading...\r\n  if (!isDataReady()) {\r\n    return (\r\n      <Box height=\"300px\">\r\n        <Loader visible absolute />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  // data is ready\r\n  return (\r\n    <ChangeComplexityPriorityAssignmentView\r\n      fields={fields}\r\n      buttons={{ cancel, submit }}\r\n      formProps={{ control, errors, handleSubmit, formState }}\r\n      isComplexityAvailable={isComplexityAvailable}\r\n      isLoading={isLoading}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}