{"ast":null,"code":"import \"core-js/modules/es.string.search\";\nimport _defineProperty from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\components\\\\SingleSelect\\\\SingleSelect.view.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport isEqual from 'lodash/isEqual'; // app\n\nimport styles from './SingleSelect.styles';\nimport { Button, FormContainer, FormText } from 'components';\nimport * as utils from 'utils'; // mui\n\nimport { Box, InputAdornment, List, ListItem, ListItemText, makeStyles } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nSingleSelectView.propTypes = {\n  id: PropTypes.string.isRequired,\n  field: PropTypes.object.isRequired,\n  query: PropTypes.string,\n  selectedValue: PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    name: PropTypes.string\n  }),\n  options: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n    name: PropTypes.string.isRequired,\n    toolTipTitle: PropTypes.string\n  })).isRequired,\n  search: PropTypes.bool,\n  handlers: PropTypes.shape({\n    onClear: PropTypes.func.isRequired,\n    onToggleOption: PropTypes.func.isRequired\n  })\n};\nexport function SingleSelectView(_ref) {\n  _s();\n\n  var _this = this;\n\n  var id = _ref.id,\n      field = _ref.field,\n      query = _ref.query,\n      options = _ref.options,\n      selectedValue = _ref.selectedValue,\n      search = _ref.search,\n      handlers = _ref.handlers;\n  var classes = makeStyles(styles, {\n    name: 'SingleSelect'\n  })();\n  var validationSchema = utils.form.getValidationSchema([field]);\n\n  var _useState = useState(selectedValue ? selectedValue : null),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedListItem = _useState2[0],\n      setSelectedListItem = _useState2[1];\n\n  var _useForm = useForm(_objectSpread({}, validationSchema && {\n    resolver: yupResolver(validationSchema)\n  })),\n      control = _useForm.control,\n      reset = _useForm.reset,\n      handleSubmit = _useForm.handleSubmit;\n\n  var ClearBtn = /*#__PURE__*/_jsxDEV(Button, {\n    size: \"small\",\n    variant: \"text\",\n    icon: CloseIcon,\n    onClick: handlers.onClear(reset),\n    nestedClasses: {\n      btn: classes.clearBtn\n    },\n    \"data-testid\": \"single-select-clear-\".concat(id)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n  /** Get the selected Item from the List on click */\n\n\n  var handleListItemClick = function handleListItemClick(event, option) {\n    if (isEqual(option, selectedListItem)) {\n      handlers.onToggleOption(null);\n      setSelectedListItem(null);\n    } else {\n      handlers.onToggleOption(option);\n      setSelectedListItem(option);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: classes.root,\n    children: [search && /*#__PURE__*/_jsxDEV(FormContainer, {\n      onSubmit: handleSubmit(handlers.onSearch),\n      nestedClasses: {\n        root: classes.form\n      },\n      \"data-testid\": \"form-search\",\n      children: /*#__PURE__*/_jsxDEV(FormText, _objectSpread(_objectSpread({}, field), {}, {\n        control: control,\n        muiComponentProps: _objectSpread(_objectSpread({}, field.muiComponentProps), {}, {\n          fullWidth: true,\n          classes: {\n            root: classnames(_defineProperty({}, classes.input, true))\n          },\n          InputProps: {\n            startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n              position: \"start\",\n              classes: {\n                root: classes.adornmentStart\n              },\n              children: /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 19\n            }, this),\n            endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n              position: \"end\",\n              classes: {\n                root: classes.adornmentEnd\n              },\n              children: query ? ClearBtn : /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 19\n            }, this)\n          }\n        })\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      dense: true,\n      className: classes.list,\n      children: options.map(function (option) {\n        return /*#__PURE__*/_jsxDEV(ListItem, {\n          button: true,\n          title: option.toolTipTitle || option.name,\n          selected: (selectedListItem === null || selectedListItem === void 0 ? void 0 : selectedListItem.id) === option.id,\n          onClick: function onClick(event) {\n            return handleListItemClick(event, option);\n          },\n          children: /*#__PURE__*/_jsxDEV(ListItemText, {\n            primary: option.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, _this)\n        }, option.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SingleSelectView, \"9OiX24ocjbcGY+9X9BfRNhbNN2Y=\", false, function () {\n  return [useForm];\n});\n\n_c = SingleSelectView;\nSingleSelectView.displayName = \"SingleSelectView\";\nSingleSelectView.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"SingleSelectView\",\n  \"props\": {\n    \"id\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"field\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"query\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"selectedValue\": {\n      \"type\": {\n        \"name\": \"shape\",\n        \"value\": {\n          \"id\": {\n            \"name\": \"union\",\n            \"value\": [{\n              \"name\": \"string\"\n            }, {\n              \"name\": \"number\"\n            }],\n            \"required\": false\n          },\n          \"name\": {\n            \"name\": \"string\",\n            \"required\": false\n          }\n        }\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"options\": {\n      \"type\": {\n        \"name\": \"arrayOf\",\n        \"value\": {\n          \"name\": \"shape\",\n          \"value\": {\n            \"id\": {\n              \"name\": \"union\",\n              \"value\": [{\n                \"name\": \"string\"\n              }, {\n                \"name\": \"number\"\n              }],\n              \"required\": true\n            },\n            \"name\": {\n              \"name\": \"string\",\n              \"required\": true\n            },\n            \"toolTipTitle\": {\n              \"name\": \"string\",\n              \"required\": false\n            }\n          }\n        }\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"search\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"handlers\": {\n      \"type\": {\n        \"name\": \"shape\",\n        \"value\": {\n          \"onClear\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"onToggleOption\": {\n            \"name\": \"func\",\n            \"required\": true\n          }\n        }\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\components\\\\SingleSelect\\\\SingleSelect.view.js\"] = {\n    name: \"SingleSelectView\",\n    docgenInfo: SingleSelectView.__docgenInfo,\n    path: \"src\\\\components\\\\SingleSelect\\\\SingleSelect.view.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"SingleSelectView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/SingleSelect/SingleSelect.view.js"],"names":["React","useState","PropTypes","classnames","useForm","yupResolver","isEqual","styles","Button","FormContainer","FormText","utils","Box","InputAdornment","List","ListItem","ListItemText","makeStyles","CloseIcon","SearchIcon","SingleSelectView","propTypes","id","string","isRequired","field","object","query","selectedValue","shape","oneOfType","number","name","options","arrayOf","toolTipTitle","search","bool","handlers","onClear","func","onToggleOption","classes","validationSchema","form","getValidationSchema","selectedListItem","setSelectedListItem","resolver","control","reset","handleSubmit","ClearBtn","btn","clearBtn","handleListItemClick","event","option","root","onSearch","muiComponentProps","fullWidth","input","InputProps","startAdornment","adornmentStart","endAdornment","adornmentEnd","list","map"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport isEqual from 'lodash/isEqual';\r\n\r\n// app\r\nimport styles from './SingleSelect.styles';\r\nimport { Button, FormContainer, FormText } from 'components';\r\nimport * as utils from 'utils';\r\n\r\n// mui\r\nimport { Box, InputAdornment, List, ListItem, ListItemText, makeStyles } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nSingleSelectView.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  field: PropTypes.object.isRequired,\r\n  query: PropTypes.string,\r\n  selectedValue: PropTypes.shape({\r\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    name: PropTypes.string,\r\n  }),\r\n  options: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      toolTipTitle: PropTypes.string,\r\n    })\r\n  ).isRequired,\r\n  search: PropTypes.bool,\r\n  handlers: PropTypes.shape({\r\n    onClear: PropTypes.func.isRequired,\r\n    onToggleOption: PropTypes.func.isRequired,\r\n  }),\r\n};\r\n\r\nexport function SingleSelectView({ id, field, query, options, selectedValue, search, handlers }) {\r\n  const classes = makeStyles(styles, { name: 'SingleSelect' })();\r\n  const validationSchema = utils.form.getValidationSchema([field]);\r\n\r\n  const [selectedListItem, setSelectedListItem] = useState(selectedValue ? selectedValue : null);\r\n\r\n  const { control, reset, handleSubmit } = useForm({\r\n    ...(validationSchema && { resolver: yupResolver(validationSchema) }),\r\n  });\r\n\r\n  const ClearBtn = (\r\n    <Button\r\n      size=\"small\"\r\n      variant=\"text\"\r\n      icon={CloseIcon}\r\n      onClick={handlers.onClear(reset)}\r\n      nestedClasses={{ btn: classes.clearBtn }}\r\n      data-testid={`single-select-clear-${id}`}\r\n    />\r\n  );\r\n\r\n  /** Get the selected Item from the List on click */\r\n  const handleListItemClick = (event, option) => {\r\n    if (isEqual(option, selectedListItem)) {\r\n      handlers.onToggleOption(null);\r\n      setSelectedListItem(null);\r\n    } else {\r\n      handlers.onToggleOption(option);\r\n      setSelectedListItem(option);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box className={classes.root}>\r\n      {search && (\r\n        <FormContainer onSubmit={handleSubmit(handlers.onSearch)} nestedClasses={{ root: classes.form }} data-testid=\"form-search\">\r\n          <FormText\r\n            {...field}\r\n            control={control}\r\n            muiComponentProps={{\r\n              ...field.muiComponentProps,\r\n              fullWidth: true,\r\n              classes: {\r\n                root: classnames({\r\n                  [classes.input]: true,\r\n                }),\r\n              },\r\n              InputProps: {\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\" classes={{ root: classes.adornmentStart }}>\r\n                    <SearchIcon />\r\n                  </InputAdornment>\r\n                ),\r\n                endAdornment: (\r\n                  <InputAdornment position=\"end\" classes={{ root: classes.adornmentEnd }}>\r\n                    {query ? ClearBtn : <span />}\r\n                  </InputAdornment>\r\n                ),\r\n              },\r\n            }}\r\n          />\r\n        </FormContainer>\r\n      )}\r\n\r\n      <List dense className={classes.list}>\r\n        {options.map((option) => {\r\n          return (\r\n            <ListItem\r\n              key={option.id}\r\n              button\r\n              title={option.toolTipTitle || option.name}\r\n              selected={selectedListItem?.id === option.id}\r\n              onClick={(event) => handleListItemClick(event, option)}\r\n            >\r\n              <ListItemText primary={option.name} />\r\n            </ListItem>\r\n          );\r\n        })}\r\n      </List>\r\n    </Box>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}