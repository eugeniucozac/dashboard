{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as utils from 'utils';\nimport { authLogout } from 'stores';\nexport var searchRiskIds = function searchRiskIds(query) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    // const { config: { vars: { endpoint }}} = getState();\n    var defaultError = {\n      file: 'stores/fileUpload.actions.searchRiskIds'\n    };\n    dispatch(searchRiskIdsRequest(query));\n\n    if (!query) {\n      dispatch(searchRiskIdsFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Missing risk reference search query'\n      })));\n      return;\n    }\n\n    return utils.api.get({\n      // endpoint: endpoint.dmsService,\n      endpoint: 'http://localhost:9000',\n      path: \"data/risk/reference/\".concat(query)\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      if (json && json.status === 'OK' && json.data) {\n        // success\n        dispatch(searchRiskIdsSuccess(json.data));\n        return json.data;\n      } else {\n        // fail\n        return Promise.reject(_objectSpread({\n          message: \"API data format error\".concat(json.status ? \" (\".concat(json.status, \")\") : '')\n        }, json && _objectSpread({}, json)));\n      }\n    }).catch(function (err) {\n      utils.api.handleError(err, _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API fetch error (fileUpload.searchRiskIds)'\n      }));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(searchRiskIdsFailure(err));\n      return err;\n    });\n  };\n};\nexport var searchRiskIdsRequest = function searchRiskIdsRequest(query) {\n  return {\n    type: 'FILE_UPLOAD_SEARCH_RISK_IDS_REQUEST',\n    payload: query\n  };\n};\nexport var searchRiskIdsSuccess = function searchRiskIdsSuccess(responseData) {\n  return {\n    type: 'FILE_UPLOAD_SEARCH_RISK_IDS_SUCCESS',\n    payload: responseData\n  };\n};\nexport var searchRiskIdsFailure = function searchRiskIdsFailure(error) {\n  return {\n    type: 'FILE_UPLOAD_SEARCH_RISK_IDS_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/fileUpload/fileUpload.actions.searchRiskIds.js"],"names":["utils","authLogout","searchRiskIds","query","dispatch","getState","defaultError","file","searchRiskIdsRequest","searchRiskIdsFailure","message","api","get","endpoint","path","then","response","handleResponse","json","status","data","searchRiskIdsSuccess","Promise","reject","catch","err","handleError","handleUnauthorized","type","payload","responseData","error"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,QAA3B;AAEA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD;AAAA,SAAW,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC9D;AACA;AAEA,QAAMC,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE;AADa,KAArB;AAIAH,IAAAA,QAAQ,CAACI,oBAAoB,CAACL,KAAD,CAArB,CAAR;;AAEA,QAAI,CAACA,KAAL,EAAY;AACVC,MAAAA,QAAQ,CAACK,oBAAoB,iCAAMH,YAAN;AAAoBI,QAAAA,OAAO,EAAE;AAA7B,SAArB,CAAR;AACA;AACD;;AAED,WAAOV,KAAK,CAACW,GAAN,CACJC,GADI,CACA;AACH;AACAC,MAAAA,QAAQ,EAAE,uBAFP;AAGHC,MAAAA,IAAI,gCAAyBX,KAAzB;AAHD,KADA,EAMJY,IANI,CAMC,UAACC,QAAD;AAAA,aAAchB,KAAK,CAACW,GAAN,CAAUM,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAND,EAOJD,IAPI,CAOC,UAACG,IAAD,EAAU;AACd,UAAIA,IAAI,IAAIA,IAAI,CAACC,MAAL,KAAgB,IAAxB,IAAgCD,IAAI,CAACE,IAAzC,EAA+C;AAC7C;AACAhB,QAAAA,QAAQ,CAACiB,oBAAoB,CAACH,IAAI,CAACE,IAAN,CAArB,CAAR;AACA,eAAOF,IAAI,CAACE,IAAZ;AACD,OAJD,MAIO;AACL;AACA,eAAOE,OAAO,CAACC,MAAR;AACLb,UAAAA,OAAO,iCAA0BQ,IAAI,CAACC,MAAL,eAAmBD,IAAI,CAACC,MAAxB,SAAoC,EAA9D;AADF,WAEDD,IAAI,sBAASA,IAAT,CAFH,EAAP;AAID;AACF,KAnBI,EAoBJM,KApBI,CAoBE,UAACC,GAAD,EAAS;AACdzB,MAAAA,KAAK,CAACW,GAAN,CAAUe,WAAV,CAAsBD,GAAtB,kCAAgCnB,YAAhC;AAA8CI,QAAAA,OAAO,EAAE;AAAvD;AACAV,MAAAA,KAAK,CAACW,GAAN,CAAUgB,kBAAV,CAA6BF,GAA7B,EAAkCrB,QAAlC,EAA4CH,UAA5C;AACAG,MAAAA,QAAQ,CAACK,oBAAoB,CAACgB,GAAD,CAArB,CAAR;AACA,aAAOA,GAAP;AACD,KAzBI,CAAP;AA0BD,GAzC4B;AAAA,CAAtB;AA2CP,OAAO,IAAMjB,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACL,KAAD,EAAW;AAC7C,SAAO;AACLyB,IAAAA,IAAI,EAAE,qCADD;AAELC,IAAAA,OAAO,EAAE1B;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMkB,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACS,YAAD,EAAkB;AACpD,SAAO;AACLF,IAAAA,IAAI,EAAE,qCADD;AAELC,IAAAA,OAAO,EAAEC;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMrB,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACsB,KAAD,EAAW;AAC7C,SAAO;AACLH,IAAAA,IAAI,EAAE,qCADD;AAELC,IAAAA,OAAO,EAAEE;AAFJ,GAAP;AAID,CALM","sourcesContent":["import * as utils from 'utils';\r\nimport { authLogout } from 'stores';\r\n\r\nexport const searchRiskIds = (query) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  // const { config: { vars: { endpoint }}} = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/fileUpload.actions.searchRiskIds',\r\n  };\r\n\r\n  dispatch(searchRiskIdsRequest(query));\r\n\r\n  if (!query) {\r\n    dispatch(searchRiskIdsFailure({ ...defaultError, message: 'Missing risk reference search query' }));\r\n    return;\r\n  }\r\n\r\n  return utils.api\r\n    .get({\r\n      // endpoint: endpoint.dmsService,\r\n      endpoint: 'http://localhost:9000',\r\n      path: `data/risk/reference/${query}`,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => {\r\n      if (json && json.status === 'OK' && json.data) {\r\n        // success\r\n        dispatch(searchRiskIdsSuccess(json.data));\r\n        return json.data;\r\n      } else {\r\n        // fail\r\n        return Promise.reject({\r\n          message: `API data format error${json.status ? ` (${json.status})` : ''}`,\r\n          ...(json && { ...json }),\r\n        });\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      utils.api.handleError(err, { ...defaultError, message: 'API fetch error (fileUpload.searchRiskIds)' });\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(searchRiskIdsFailure(err));\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const searchRiskIdsRequest = (query) => {\r\n  return {\r\n    type: 'FILE_UPLOAD_SEARCH_RISK_IDS_REQUEST',\r\n    payload: query,\r\n  };\r\n};\r\n\r\nexport const searchRiskIdsSuccess = (responseData) => {\r\n  return {\r\n    type: 'FILE_UPLOAD_SEARCH_RISK_IDS_SUCCESS',\r\n    payload: responseData,\r\n  };\r\n};\r\n\r\nexport const searchRiskIdsFailure = (error) => {\r\n  return {\r\n    type: 'FILE_UPLOAD_SEARCH_RISK_IDS_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}