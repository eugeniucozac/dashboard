{"ast":null,"code":"import _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\pages\\\\TaskDashboard\\\\TaskDashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { useHistory, useParams } from 'react-router'; // app\n\nimport { TaskDashboardView } from './TaskDashboard.view';\nimport { showModal, hideModal, selectTasksTabGridListSelected, selectTaskDashboardTaskDetails, selectIsTaskDashboardTaskDetailsLoading, resetTaskProcessingTaskDetails, getClaimsTasksProcessing, getClaimsTaskDashboardDetail, postSanctionsCheck, getClaimsPreviewInformation, selectClaimsProcessingItem, selectedClaimsProcessingTaskType, getPolicyInformation, resetPolicyInformation, getLossInformation, getPolicySections, getCatCodes, selectClaimsFnolPushBackRoute, selectFnolSelectedTab, setClaimsTabSelectedItem } from 'stores';\nimport { Breadcrumb } from 'components';\nimport * as utils from 'utils';\nimport config from 'config';\nimport { REASSIGN_ENABLED_TASK_STATUSES, TASK_TYPES_NATIVE, RFI_ON_TASKS, TASK_TAB_COMPLETED_STATUS, API_RESPONSE_OK, TASK_TEAM_TYPE, CLAIM_PROCESSING_REQ_TYPES, CLAIMS_FNOL_PUSH_BACK_ROUTES } from 'consts'; // mui\n\nimport { Typography } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function TaskDashboard() {\n  _s();\n\n  var _user$emailId,\n      _selectedTask$assigne,\n      _user$organisation,\n      _this = this;\n\n  var dispatch = useDispatch();\n  var history = useHistory();\n  var params = useParams();\n  var brand = useSelector(function (state) {\n    return state.ui.brand;\n  });\n  var fnolSelectedTab = useSelector(selectFnolSelectedTab);\n  var pathname = history.location.pathname; // Redux management\n\n  var taskSelectedFromTasksTab = useSelector(selectTasksTabGridListSelected);\n  var isTaskDetailsLoading = useSelector(selectIsTaskDashboardTaskDetailsLoading);\n\n  var _taskSelectedFromTask = _slicedToArray(taskSelectedFromTasksTab, 1),\n      _taskSelectedFromTask2 = _taskSelectedFromTask[0],\n      taskSelected = _taskSelectedFromTask2 === void 0 ? {} : _taskSelectedFromTask2;\n\n  var processRef = taskSelected.processRef,\n      taskId = taskSelected.taskId,\n      sourceID = taskSelected.sourceID,\n      businessProcessID = taskSelected.businessProcessID,\n      processId = taskSelected.processId,\n      caseIncidentID = taskSelected.caseIncidentID,\n      departmentID = taskSelected.departmentID;\n  var claimData = {\n    claimReference: processRef,\n    taskID: taskId,\n    sourceID: sourceID,\n    claimID: businessProcessID,\n    departmentID: departmentID\n  };\n  var taskDashboardTaskDetails = useSelector(selectTaskDashboardTaskDetails);\n  var pushBackRoute = useSelector(selectClaimsFnolPushBackRoute); // State management\n\n  var _useState = useState((params === null || params === void 0 ? void 0 : params.tab) || 'taskDetails'),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedTab = _useState2[0],\n      setSelectedTab = _useState2[1];\n\n  var hasValidTaskDashboardDetails = utils.generic.isValidObject(taskDashboardTaskDetails, 'taskRef');\n  var selectedTask = hasValidTaskDashboardDetails ? taskDashboardTaskDetails : taskSelectedFromTasksTab[0];\n  var isTaskClosed = (selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.status) === TASK_TAB_COMPLETED_STATUS;\n  var user = useSelector(function (state) {\n    return state.user;\n  });\n  var userHasAllTasksPermission = utils.app.access.feature('claimsFNOL.myTeamTasks', ['read', 'create', 'update'], user);\n  var isUsersTasks = ((_user$emailId = user.emailId) === null || _user$emailId === void 0 ? void 0 : _user$emailId.toLowerCase()) === (selectedTask === null || selectedTask === void 0 ? void 0 : (_selectedTask$assigne = selectedTask.assignee) === null || _selectedTask$assigne === void 0 ? void 0 : _selectedTask$assigne.toLowerCase());\n  var isTeamClaim = (user === null || user === void 0 ? void 0 : (_user$organisation = user.organisation) === null || _user$organisation === void 0 ? void 0 : _user$organisation.name) === (selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.team);\n  var taskType = isUsersTasks ? TASK_TEAM_TYPE.myTask : TASK_TEAM_TYPE.myTeam;\n  var allowedNavigationUrls = [];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isDirtyCheck = _useState4[0],\n      setIsDirtyCheck = _useState4[1]; // on load\n\n\n  useEffect(function () {\n    var currentTaskRef = selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.taskRef;\n\n    if (hasValidTaskDashboardDetails && currentTaskRef && !isTaskClosed) {\n      dispatch(selectedClaimsProcessingTaskType(taskType));\n      dispatch(getClaimsTaskDashboardDetail({\n        query: currentTaskRef,\n        claimID: businessProcessID,\n        viewLoader: false\n      }));\n    }\n\n    function storeClaimDetails() {\n      return _storeClaimDetails.apply(this, arguments);\n    }\n\n    function _storeClaimDetails() {\n      _storeClaimDetails = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var claimInfo, claimReference, lossDetailID, _sourceID, policyID, claimDetails;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return dispatch(getClaimsPreviewInformation({\n                  claimId: claimData === null || claimData === void 0 ? void 0 : claimData.claimID,\n                  claimRefParams: claimData === null || claimData === void 0 ? void 0 : claimData.claimReference,\n                  sourceIdParams: claimData === null || claimData === void 0 ? void 0 : claimData.sourceID,\n                  divisionIDParams: claimData === null || claimData === void 0 ? void 0 : claimData.departmentID,\n                  viewLoader: false\n                }));\n\n              case 2:\n                claimInfo = _context.sent;\n\n                if (!utils.generic.isValidObject(claimInfo)) {\n                  _context.next = 13;\n                  break;\n                }\n\n                claimReference = claimInfo.claimReference, lossDetailID = claimInfo.lossDetailID, _sourceID = claimInfo.sourceID, policyID = claimInfo.policyID;\n                claimDetails = _objectSpread(_objectSpread({}, claimInfo), {}, {\n                  claimRef: claimReference,\n                  lossRef: lossDetailID,\n                  sourceId: _sourceID,\n                  policyId: policyID,\n                  processID: processId,\n                  caseIncidentID: caseIncidentID\n                });\n                _context.next = 8;\n                return dispatch(selectClaimsProcessingItem(claimDetails, true));\n\n              case 8:\n                dispatch(getPolicyInformation({\n                  viewLoader: false\n                }));\n                dispatch(getLossInformation({\n                  lossDetailsId: taskSelected === null || taskSelected === void 0 ? void 0 : taskSelected.lossDetailID,\n                  sourceIdParams: taskSelected === null || taskSelected === void 0 ? void 0 : taskSelected.sourceID,\n                  divisionIdParam: taskSelected === null || taskSelected === void 0 ? void 0 : taskSelected.departmentID,\n                  claimRefParam: taskSelected === null || taskSelected === void 0 ? void 0 : taskSelected.processRef,\n                  viewLoader: false\n                }));\n                dispatch(setClaimsTabSelectedItem(claimDetails, true));\n                dispatch(getPolicySections({\n                  xbPolicyID: claimInfo === null || claimInfo === void 0 ? void 0 : claimInfo.policyID,\n                  xbInstanceID: claimInfo === null || claimInfo === void 0 ? void 0 : claimInfo.sourceID,\n                  viewLoader: false\n                }));\n                dispatch(getCatCodes(false));\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _storeClaimDetails.apply(this, arguments);\n    }\n\n    storeClaimDetails(); // cleanup\n\n    return function () {\n      dispatch(resetTaskProcessingTaskDetails());\n      dispatch(resetPolicyInformation());\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    if (!hasValidTaskDashboardDetails && !isTaskDetailsLoading) {\n      dispatch(getClaimsTaskDashboardDetail({\n        query: params === null || params === void 0 ? void 0 : params.id\n      })).then(function (res) {\n        var _res$data, _res$data$searchValue;\n\n        if (!(res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : (_res$data$searchValue = _res$data.searchValue) === null || _res$data$searchValue === void 0 ? void 0 : _res$data$searchValue.length)) {\n          history.replace(config.routes.claimsFNOL.root);\n        }\n      });\n    }\n  }, [hasValidTaskDashboardDetails]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var handleSelectTab = function handleSelectTab(tabName) {\n    if (isDirtyCheck && selectedTab === 'taskDetails') {\n      handleDirtyCheck(tabName, false);\n    } else {\n      setSelectedTab(tabName);\n    }\n  };\n\n  var handleUpdateTaskPriority = function handleUpdateTaskPriority(task) {\n    dispatch(showModal({\n      component: 'SET_PRIORITY',\n      props: {\n        title: utils.string.t('claims.modals.taskFunction.setTaskPriorityTitle'),\n        fullWidth: true,\n        maxWidth: 'sm',\n        disableAutoFocus: true,\n        componentProps: {\n          task: task,\n          handlers: {\n            cancel: function cancel() {\n              return dispatch(hideModal());\n            },\n            submit: function submit() {\n              return dispatch(hideModal());\n            }\n          }\n        }\n      }\n    }));\n  };\n\n  var handleCreateRFITaskLevel = function handleCreateRFITaskLevel(task) {\n    var breadcrumbs = [{\n      name: 'lossRef',\n      label: utils.string.t('claims.loss.text', {\n        lossRef: task === null || task === void 0 ? void 0 : task.lossRef\n      }),\n      link: pathname,\n      active: true\n    }, (task === null || task === void 0 ? void 0 : task.claimRef) && {\n      name: 'claimRef',\n      label: \"\".concat(utils.string.t('claims.rfiDashboard.breadCrumbs.claimRef', {\n        claimRef: task === null || task === void 0 ? void 0 : task.claimRef\n      })),\n      link: pathname,\n      active: true\n    }, (task === null || task === void 0 ? void 0 : task.taskRef) && {\n      name: 'taskRef',\n      label: \"\".concat(utils.string.t('claims.rfiDashboard.breadCrumbs.taskRef', {\n        taskRef: task === null || task === void 0 ? void 0 : task.taskRef\n      })),\n      link: pathname,\n      active: true,\n      largeFont: true\n    }];\n\n    var TitleWBreadCrumb = function TitleWBreadCrumb() {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Breadcrumb, {\n          links: breadcrumbs\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h2\",\n          style: {\n            paddingLeft: '1.2rem'\n          },\n          children: utils.string.t('claims.processing.taskFunction.createRFI')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true);\n    };\n\n    dispatch(showModal({\n      component: 'CLAIMS_CREATE_RFI_STEPPER',\n      props: {\n        titleChildren: /*#__PURE__*/_jsxDEV(TitleWBreadCrumb, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 26\n        }, _this),\n        hideCompOnBlur: false,\n        fullWidth: true,\n        maxWidth: 'lg',\n        disableAutoFocus: true,\n        componentProps: {\n          claim: task,\n          type: RFI_ON_TASKS,\n          cancelHandler: function cancelHandler() {\n            dispatch(hideModal());\n          }\n        }\n      }\n    }));\n  };\n\n  var handleEditTask = function handleEditTask(task) {\n    dispatch(showModal({\n      component: 'CREATE_AD_HOC_TASK',\n      props: {\n        title: utils.string.t('claims.processing.taskFunction.editTask'),\n        hideCompOnBlur: false,\n        fullWidth: true,\n        maxWidth: 'md',\n        disableAutoFocus: true,\n        componentProps: {\n          claim: task,\n          cancelHandler: function cancelHandler() {\n            dispatch(hideModal());\n          },\n          submitHandler: function submitHandler() {\n            refreshTasksData();\n            dispatch(hideModal());\n          }\n        }\n      }\n    }));\n  };\n\n  var tabs = [{\n    value: 'taskDetails',\n    label: utils.string.t('claims.processing.taskFunctionalityTabs.taskDetails')\n  }, {\n    value: 'viewDocuments',\n    label: utils.string.t('claims.processing.taskFunctionalityTabs.viewDocuments')\n  }, {\n    value: 'notes',\n    label: utils.string.t('claims.processing.taskFunctionalityTabs.notes')\n  }];\n\n  var createSanctionsCheck = function createSanctionsCheck() {\n    if (selectedTask) {\n      dispatch(showModal({\n        component: 'CONFIRM',\n        props: {\n          title: utils.string.t('status.alert'),\n          hint: utils.string.t('claims.processing.sanctionsChecksNotification.conformationAlert'),\n          fullWidth: true,\n          maxWidth: 'xs',\n          componentProps: {\n            cancelLabel: utils.string.t('app.no'),\n            confirmLabel: utils.string.t('app.yes'),\n            submitHandler: function submitHandler() {\n              dispatch(postSanctionsCheck({\n                taskId: selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.taskId,\n                rootProcessId: selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.rootProcessId\n              })).then(function (response) {\n                dispatch(hideModal());\n\n                if (response.status === API_RESPONSE_OK) {\n                  dispatch(getClaimsTasksProcessing({\n                    requestType: CLAIM_PROCESSING_REQ_TYPES.search,\n                    taskType: TASK_TEAM_TYPE.myTask\n                  }));\n                }\n              });\n            },\n            cancelHandler: function cancelHandler() {}\n          }\n        }\n      }));\n    }\n  };\n\n  var isDisabled = isTaskClosed || !isUsersTasks;\n  var taskActions = [{\n    id: 'reAssignTask',\n    label: utils.string.t('claims.processing.taskFunction.reAssignTask'),\n    disabled: REASSIGN_ENABLED_TASK_STATUSES.indexOf(selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.status) === -1 || !(userHasAllTasksPermission && isTeamClaim) || isTaskClosed,\n    callback: function callback() {\n      if (utils.generic.isValidObject(selectedTask)) {\n        reAssignTask(selectedTask);\n      }\n    }\n  }, {\n    id: 'editTask',\n    label: utils.string.t('claims.processing.taskFunction.editTask'),\n    disabled: isDisabled,\n    callback: function callback() {\n      utils.generic.isValidObject(selectedTask) && handleEditTask(selectedTask);\n    }\n  }, {\n    id: 'changePriority',\n    label: utils.string.t('claims.processing.taskFunction.changePriority'),\n    callback: function callback() {\n      return changePriority();\n    }\n  }, {\n    id: 'setTaskPriority',\n    label: utils.string.t('claims.processing.taskFunction.setTaskPriority'),\n    disabled: isDisabled,\n    callback: function callback() {\n      handleUpdateTaskPriority(selectedTask);\n    }\n  }, {\n    id: 'createRFI',\n    label: utils.string.t('claims.processing.taskFunction.createRFI'),\n    callback: function callback() {\n      utils.generic.isValidObject(selectedTask) && handleCreateRFITaskLevel(selectedTask);\n    }\n  }].concat(_toConsumableArray((selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.taskCategory) === TASK_TYPES_NATIVE ? [{\n    id: 'createSanctionsCheck',\n    label: utils.string.t('claims.processing.summary.buttons.createSanctionsChecks'),\n    disabled: isDisabled,\n    callback: function callback() {\n      createSanctionsCheck(selectedTask);\n    }\n  }] : []));\n  var breadcrumbs = [{\n    name: 'claimsProcessing',\n    label: utils.string.t('claims.loss.title'),\n    link: \"\".concat(config.routes.claimsFNOL.root).concat(fnolSelectedTab ? \"/tab/\".concat(fnolSelectedTab) : '')\n  }, {\n    name: 'lossRef',\n    label: \"\".concat(utils.string.t('claims.loss.text', {\n      lossRef: selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.lossRef\n    })),\n    link: \"\".concat(config.routes.claimsFNOL.loss, \"/\").concat(selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.lossRef)\n  }, {\n    name: 'claimRef',\n    label: \"\".concat(utils.string.t('claims.claimRef.text', {\n      claimRef: selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.processRef\n    })),\n    link: \"\".concat(config.routes.claimsFNOL.claim, \"/\").concat(selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.processRef)\n  }, {\n    name: 'taskRef',\n    label: \"\".concat(utils.string.t('claims.processing.task.title', {\n      id: selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.taskRef\n    })),\n    link: \"\".concat(config.routes.claimsFNOL.task, \"/\").concat(selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.taskRef),\n    active: true\n  }];\n\n  var reAssignTask = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(currentTaskDetails) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return dispatch(showModal({\n                component: 'ADD_ASSIGNEE',\n                props: {\n                  title: utils.string.t('app.assign'),\n                  hideCompOnBlur: false,\n                  fullWidth: true,\n                  maxWidth: 'sm',\n                  disableAutoFocus: true,\n                  componentProps: {\n                    taskDetails: [currentTaskDetails],\n                    submitHandler: function submitHandler() {\n                      refreshTasksData();\n                    }\n                  }\n                }\n              }));\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function reAssignTask(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var refreshTasksData = function refreshTasksData() {\n    dispatch(getClaimsTaskDashboardDetail({\n      query: selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.taskRef,\n      claimID: businessProcessID\n    }));\n  };\n\n  var handleDirtyCheck = function handleDirtyCheck(tabName, isNavigationAllowed) {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        title: utils.string.t('status.alert'),\n        hint: utils.string.t('claims.notes.notifications.alertPopup'),\n        fullWidth: true,\n        maxWidth: 'xs',\n        componentProps: {\n          cancelLabel: utils.string.t('app.no'),\n          confirmLabel: utils.string.t('app.yes'),\n          submitHandler: function submitHandler() {\n            tabName !== '' && setSelectedTab(tabName);\n\n            if (isNavigationAllowed) {\n              switch (pushBackRoute) {\n                case CLAIMS_FNOL_PUSH_BACK_ROUTES.routes.lossAndClaims:\n                  return history.replace(\"\".concat(config.routes.claimsFNOL.root).concat(fnolSelectedTab ? \"/tab/\".concat(fnolSelectedTab) : ''));\n\n                case CLAIMS_FNOL_PUSH_BACK_ROUTES.routes.lossDashboard:\n                  return history.replace(\"\".concat(config.routes.claimsFNOL.loss, \"/\").concat(selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.lossRef));\n\n                case CLAIMS_FNOL_PUSH_BACK_ROUTES.routes.claimsDashboard:\n                  return history.replace(\"\".concat(config.routes.claimsFNOL.claim, \"/\").concat(selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.processRef));\n\n                default:\n                  return;\n              }\n            }\n          }\n        }\n      }\n    }));\n  };\n\n  var changePriority = function changePriority() {\n    dispatch(showModal({\n      component: 'CHANGE_PRIORITY',\n      props: {\n        title: utils.string.t('claims.processing.taskFunction.changePriority'),\n        hideCompOnBlur: false,\n        fullWidth: true,\n        maxWidth: 'sm',\n        disableAutoFocus: true,\n        componentProps: {\n          task: [selectedTask],\n          handlers: {\n            cancelHandler: function cancelHandler() {\n              dispatch(hideModal());\n            }\n          }\n        }\n      }\n    }));\n  }; // abort\n\n\n  if (!selectedTask) return null;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"\".concat(utils.string.t('claims.processing.title'), \" - \").concat(utils.app.getAppName(brand))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskDashboardView, {\n      task: selectedTask,\n      tabs: tabs,\n      selectedTab: selectedTab,\n      breadcrumbs: breadcrumbs,\n      handleSelectTab: handleSelectTab,\n      reAssignTask: reAssignTask,\n      popoverActions: taskActions,\n      handleDirtyCheck: handleDirtyCheck,\n      isDirtyRef: isDirtyCheck,\n      setIsDirty: setIsDirtyCheck,\n      allowedNavigationUrls: allowedNavigationUrls\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(TaskDashboard, \"65Ee+e9Mg5ip/ArdJ/HHXs2gAdI=\", false, function () {\n  return [useDispatch, useHistory, useParams, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = TaskDashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskDashboard\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/pages/TaskDashboard/TaskDashboard.js"],"names":["React","useState","useEffect","useDispatch","useSelector","Helmet","useHistory","useParams","TaskDashboardView","showModal","hideModal","selectTasksTabGridListSelected","selectTaskDashboardTaskDetails","selectIsTaskDashboardTaskDetailsLoading","resetTaskProcessingTaskDetails","getClaimsTasksProcessing","getClaimsTaskDashboardDetail","postSanctionsCheck","getClaimsPreviewInformation","selectClaimsProcessingItem","selectedClaimsProcessingTaskType","getPolicyInformation","resetPolicyInformation","getLossInformation","getPolicySections","getCatCodes","selectClaimsFnolPushBackRoute","selectFnolSelectedTab","setClaimsTabSelectedItem","Breadcrumb","utils","config","REASSIGN_ENABLED_TASK_STATUSES","TASK_TYPES_NATIVE","RFI_ON_TASKS","TASK_TAB_COMPLETED_STATUS","API_RESPONSE_OK","TASK_TEAM_TYPE","CLAIM_PROCESSING_REQ_TYPES","CLAIMS_FNOL_PUSH_BACK_ROUTES","Typography","TaskDashboard","dispatch","history","params","brand","state","ui","fnolSelectedTab","pathname","location","taskSelectedFromTasksTab","isTaskDetailsLoading","taskSelected","processRef","taskId","sourceID","businessProcessID","processId","caseIncidentID","departmentID","claimData","claimReference","taskID","claimID","taskDashboardTaskDetails","pushBackRoute","tab","selectedTab","setSelectedTab","hasValidTaskDashboardDetails","generic","isValidObject","selectedTask","isTaskClosed","status","user","userHasAllTasksPermission","app","access","feature","isUsersTasks","emailId","toLowerCase","assignee","isTeamClaim","organisation","name","team","taskType","myTask","myTeam","allowedNavigationUrls","isDirtyCheck","setIsDirtyCheck","currentTaskRef","taskRef","query","viewLoader","storeClaimDetails","claimId","claimRefParams","sourceIdParams","divisionIDParams","claimInfo","lossDetailID","policyID","claimDetails","claimRef","lossRef","sourceId","policyId","processID","lossDetailsId","divisionIdParam","claimRefParam","xbPolicyID","xbInstanceID","id","then","res","data","searchValue","length","replace","routes","claimsFNOL","root","handleSelectTab","tabName","handleDirtyCheck","handleUpdateTaskPriority","task","component","props","title","string","t","fullWidth","maxWidth","disableAutoFocus","componentProps","handlers","cancel","submit","handleCreateRFITaskLevel","breadcrumbs","label","link","active","largeFont","TitleWBreadCrumb","paddingLeft","titleChildren","hideCompOnBlur","claim","type","cancelHandler","handleEditTask","submitHandler","refreshTasksData","tabs","value","createSanctionsCheck","hint","cancelLabel","confirmLabel","rootProcessId","response","requestType","search","isDisabled","taskActions","disabled","indexOf","callback","reAssignTask","changePriority","taskCategory","loss","currentTaskDetails","taskDetails","isNavigationAllowed","lossAndClaims","lossDashboard","claimsDashboard","getAppName"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Helmet } from 'react-helmet';\r\nimport { useHistory, useParams } from 'react-router';\r\n\r\n// app\r\nimport { TaskDashboardView } from './TaskDashboard.view';\r\nimport {\r\n  showModal,\r\n  hideModal,\r\n  selectTasksTabGridListSelected,\r\n  selectTaskDashboardTaskDetails,\r\n  selectIsTaskDashboardTaskDetailsLoading,\r\n  resetTaskProcessingTaskDetails,\r\n  getClaimsTasksProcessing,\r\n  getClaimsTaskDashboardDetail,\r\n  postSanctionsCheck,\r\n  getClaimsPreviewInformation,\r\n  selectClaimsProcessingItem,\r\n  selectedClaimsProcessingTaskType,\r\n  getPolicyInformation,\r\n  resetPolicyInformation,\r\n  getLossInformation,\r\n  getPolicySections,\r\n  getCatCodes,\r\n  selectClaimsFnolPushBackRoute,\r\n  selectFnolSelectedTab,\r\n  setClaimsTabSelectedItem,\r\n} from 'stores';\r\nimport { Breadcrumb } from 'components';\r\nimport * as utils from 'utils';\r\nimport config from 'config';\r\nimport {\r\n  REASSIGN_ENABLED_TASK_STATUSES,\r\n  TASK_TYPES_NATIVE,\r\n  RFI_ON_TASKS,\r\n  TASK_TAB_COMPLETED_STATUS,\r\n  API_RESPONSE_OK,\r\n  TASK_TEAM_TYPE,\r\n  CLAIM_PROCESSING_REQ_TYPES,\r\n  CLAIMS_FNOL_PUSH_BACK_ROUTES,\r\n} from 'consts';\r\n// mui\r\nimport { Typography } from '@material-ui/core';\r\n\r\nexport default function TaskDashboard() {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const params = useParams();\r\n\r\n  const brand = useSelector((state) => state.ui.brand);\r\n  const fnolSelectedTab = useSelector(selectFnolSelectedTab);\r\n  const { pathname } = history.location;\r\n\r\n  // Redux management\r\n  const taskSelectedFromTasksTab = useSelector(selectTasksTabGridListSelected);\r\n  const isTaskDetailsLoading = useSelector(selectIsTaskDashboardTaskDetailsLoading);\r\n\r\n  const [taskSelected = {}] = taskSelectedFromTasksTab;\r\n  const { processRef, taskId, sourceID, businessProcessID, processId, caseIncidentID, departmentID } = taskSelected;\r\n  const claimData = {\r\n    claimReference: processRef,\r\n    taskID: taskId,\r\n    sourceID,\r\n    claimID: businessProcessID,\r\n    departmentID,\r\n  };\r\n  const taskDashboardTaskDetails = useSelector(selectTaskDashboardTaskDetails);\r\n  const pushBackRoute = useSelector(selectClaimsFnolPushBackRoute);\r\n\r\n  // State management\r\n  const [selectedTab, setSelectedTab] = useState(params?.tab || 'taskDetails');\r\n\r\n  const hasValidTaskDashboardDetails = utils.generic.isValidObject(taskDashboardTaskDetails, 'taskRef');\r\n  const selectedTask = hasValidTaskDashboardDetails ? taskDashboardTaskDetails : taskSelectedFromTasksTab[0];\r\n  const isTaskClosed = selectedTask?.status === TASK_TAB_COMPLETED_STATUS;\r\n\r\n  const user = useSelector((state) => state.user);\r\n  const userHasAllTasksPermission = utils.app.access.feature('claimsFNOL.myTeamTasks', ['read', 'create', 'update'], user);\r\n  const isUsersTasks = user.emailId?.toLowerCase() === selectedTask?.assignee?.toLowerCase();\r\n  const isTeamClaim = user?.organisation?.name === selectedTask?.team;\r\n  const taskType = isUsersTasks ? TASK_TEAM_TYPE.myTask : TASK_TEAM_TYPE.myTeam;\r\n  const allowedNavigationUrls = [];\r\n  const [isDirtyCheck, setIsDirtyCheck] = useState(false);\r\n\r\n  // on load\r\n  useEffect(() => {\r\n    const currentTaskRef = selectedTask?.taskRef;\r\n    if (hasValidTaskDashboardDetails && currentTaskRef && !isTaskClosed) {\r\n      dispatch(selectedClaimsProcessingTaskType(taskType));\r\n      dispatch(getClaimsTaskDashboardDetail({ query: currentTaskRef, claimID: businessProcessID, viewLoader: false }));\r\n    }\r\n\r\n    async function storeClaimDetails() {\r\n      const claimInfo = await dispatch(\r\n        getClaimsPreviewInformation({\r\n          claimId: claimData?.claimID,\r\n          claimRefParams: claimData?.claimReference,\r\n          sourceIdParams: claimData?.sourceID,\r\n          divisionIDParams: claimData?.departmentID,\r\n          viewLoader: false,\r\n        })\r\n      );\r\n      if (utils.generic.isValidObject(claimInfo)) {\r\n        const { claimReference, lossDetailID, sourceID, policyID } = claimInfo;\r\n        const claimDetails = {\r\n          ...claimInfo,\r\n          claimRef: claimReference,\r\n          lossRef: lossDetailID,\r\n          sourceId: sourceID,\r\n          policyId: policyID,\r\n          processID: processId,\r\n          caseIncidentID,\r\n        };\r\n        await dispatch(selectClaimsProcessingItem(claimDetails, true));\r\n        dispatch(getPolicyInformation({ viewLoader: false }));\r\n        dispatch(\r\n          getLossInformation({\r\n            lossDetailsId: taskSelected?.lossDetailID,\r\n            sourceIdParams: taskSelected?.sourceID,\r\n            divisionIdParam: taskSelected?.departmentID,\r\n            claimRefParam: taskSelected?.processRef,\r\n            viewLoader: false,\r\n          })\r\n        );\r\n        dispatch(setClaimsTabSelectedItem(claimDetails, true));\r\n        dispatch(getPolicySections({ xbPolicyID: claimInfo?.policyID, xbInstanceID: claimInfo?.sourceID, viewLoader: false }));\r\n        dispatch(getCatCodes(false));\r\n      }\r\n    }\r\n    storeClaimDetails();\r\n    // cleanup\r\n    return () => {\r\n      dispatch(resetTaskProcessingTaskDetails());\r\n      dispatch(resetPolicyInformation());\r\n    };\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    if (!hasValidTaskDashboardDetails && !isTaskDetailsLoading) {\r\n      dispatch(getClaimsTaskDashboardDetail({ query: params?.id })).then((res) => {\r\n        if (!res?.data?.searchValue?.length) {\r\n          history.replace(config.routes.claimsFNOL.root);\r\n        }\r\n      });\r\n    }\r\n  }, [hasValidTaskDashboardDetails]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const handleSelectTab = (tabName) => {\r\n    if (isDirtyCheck && selectedTab === 'taskDetails') {\r\n      handleDirtyCheck(tabName, false);\r\n    } else {\r\n      setSelectedTab(tabName);\r\n    }\r\n  };\r\n\r\n  const handleUpdateTaskPriority = (task) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'SET_PRIORITY',\r\n        props: {\r\n          title: utils.string.t('claims.modals.taskFunction.setTaskPriorityTitle'),\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            task,\r\n            handlers: {\r\n              cancel: () => dispatch(hideModal()),\r\n              submit: () => dispatch(hideModal()),\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleCreateRFITaskLevel = (task) => {\r\n    const breadcrumbs = [\r\n      {\r\n        name: 'lossRef',\r\n        label: utils.string.t('claims.loss.text', { lossRef: task?.lossRef }),\r\n        link: pathname,\r\n        active: true,\r\n      },\r\n      task?.claimRef && {\r\n        name: 'claimRef',\r\n        label: `${utils.string.t('claims.rfiDashboard.breadCrumbs.claimRef', { claimRef: task?.claimRef })}`,\r\n        link: pathname,\r\n        active: true,\r\n      },\r\n      task?.taskRef && {\r\n        name: 'taskRef',\r\n        label: `${utils.string.t('claims.rfiDashboard.breadCrumbs.taskRef', { taskRef: task?.taskRef })}`,\r\n        link: pathname,\r\n        active: true,\r\n        largeFont: true,\r\n      },\r\n    ];\r\n\r\n    const TitleWBreadCrumb = () => {\r\n      return (\r\n        <>\r\n          <Breadcrumb links={breadcrumbs} />\r\n          <Typography variant=\"h2\" style={{ paddingLeft: '1.2rem' }}>\r\n            {utils.string.t('claims.processing.taskFunction.createRFI')}\r\n          </Typography>\r\n        </>\r\n      );\r\n    };\r\n    dispatch(\r\n      showModal({\r\n        component: 'CLAIMS_CREATE_RFI_STEPPER',\r\n        props: {\r\n          titleChildren: <TitleWBreadCrumb />,\r\n          hideCompOnBlur: false,\r\n          fullWidth: true,\r\n          maxWidth: 'lg',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            claim: task,\r\n            type: RFI_ON_TASKS,\r\n            cancelHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleEditTask = (task) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CREATE_AD_HOC_TASK',\r\n        props: {\r\n          title: utils.string.t('claims.processing.taskFunction.editTask'),\r\n          hideCompOnBlur: false,\r\n          fullWidth: true,\r\n          maxWidth: 'md',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            claim: task,\r\n            cancelHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n            submitHandler: () => {\r\n              refreshTasksData();\r\n              dispatch(hideModal());\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n  const tabs = [\r\n    { value: 'taskDetails', label: utils.string.t('claims.processing.taskFunctionalityTabs.taskDetails') },\r\n    { value: 'viewDocuments', label: utils.string.t('claims.processing.taskFunctionalityTabs.viewDocuments') },\r\n    { value: 'notes', label: utils.string.t('claims.processing.taskFunctionalityTabs.notes') },\r\n  ];\r\n\r\n  const createSanctionsCheck = () => {\r\n    if (selectedTask) {\r\n      dispatch(\r\n        showModal({\r\n          component: 'CONFIRM',\r\n          props: {\r\n            title: utils.string.t('status.alert'),\r\n            hint: utils.string.t('claims.processing.sanctionsChecksNotification.conformationAlert'),\r\n            fullWidth: true,\r\n            maxWidth: 'xs',\r\n            componentProps: {\r\n              cancelLabel: utils.string.t('app.no'),\r\n              confirmLabel: utils.string.t('app.yes'),\r\n              submitHandler: () => {\r\n                dispatch(postSanctionsCheck({ taskId: selectedTask?.taskId, rootProcessId: selectedTask?.rootProcessId })).then(\r\n                  (response) => {\r\n                    dispatch(hideModal());\r\n                    if (response.status === API_RESPONSE_OK) {\r\n                      dispatch(\r\n                        getClaimsTasksProcessing({ requestType: CLAIM_PROCESSING_REQ_TYPES.search, taskType: TASK_TEAM_TYPE.myTask })\r\n                      );\r\n                    }\r\n                  }\r\n                );\r\n              },\r\n              cancelHandler: () => {},\r\n            },\r\n          },\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const isDisabled = isTaskClosed || !isUsersTasks;\r\n\r\n  let taskActions = [\r\n    {\r\n      id: 'reAssignTask',\r\n      label: utils.string.t('claims.processing.taskFunction.reAssignTask'),\r\n      disabled:\r\n        REASSIGN_ENABLED_TASK_STATUSES.indexOf(selectedTask?.status) === -1 || !(userHasAllTasksPermission && isTeamClaim) || isTaskClosed,\r\n      callback: () => {\r\n        if (utils.generic.isValidObject(selectedTask)) {\r\n          reAssignTask(selectedTask);\r\n        }\r\n      },\r\n    },\r\n    {\r\n      id: 'editTask',\r\n      label: utils.string.t('claims.processing.taskFunction.editTask'),\r\n      disabled: isDisabled,\r\n      callback: () => {\r\n        utils.generic.isValidObject(selectedTask) && handleEditTask(selectedTask);\r\n      },\r\n    },\r\n    {\r\n      id: 'changePriority',\r\n      label: utils.string.t('claims.processing.taskFunction.changePriority'),\r\n      callback: () => changePriority(),\r\n    },\r\n    {\r\n      id: 'setTaskPriority',\r\n      label: utils.string.t('claims.processing.taskFunction.setTaskPriority'),\r\n      disabled: isDisabled,\r\n      callback: () => {\r\n        handleUpdateTaskPriority(selectedTask);\r\n      },\r\n    },\r\n    {\r\n      id: 'createRFI',\r\n      label: utils.string.t('claims.processing.taskFunction.createRFI'),\r\n      callback: () => {\r\n        utils.generic.isValidObject(selectedTask) && handleCreateRFITaskLevel(selectedTask);\r\n      },\r\n    },\r\n    ...(selectedTask?.taskCategory === TASK_TYPES_NATIVE\r\n      ? [\r\n          {\r\n            id: 'createSanctionsCheck',\r\n            label: utils.string.t('claims.processing.summary.buttons.createSanctionsChecks'),\r\n            disabled: isDisabled,\r\n            callback: () => {\r\n              createSanctionsCheck(selectedTask);\r\n            },\r\n          },\r\n        ]\r\n      : []),\r\n  ];\r\n  const breadcrumbs = [\r\n    {\r\n      name: 'claimsProcessing',\r\n      label: utils.string.t('claims.loss.title'),\r\n      link: `${config.routes.claimsFNOL.root}${fnolSelectedTab ? `/tab/${fnolSelectedTab}` : ''}`,\r\n    },\r\n    {\r\n      name: 'lossRef',\r\n      label: `${utils.string.t('claims.loss.text', { lossRef: selectedTask?.lossRef })}`,\r\n      link: `${config.routes.claimsFNOL.loss}/${selectedTask?.lossRef}`,\r\n    },\r\n    {\r\n      name: 'claimRef',\r\n      label: `${utils.string.t('claims.claimRef.text', { claimRef: selectedTask?.processRef })}`,\r\n      link: `${config.routes.claimsFNOL.claim}/${selectedTask?.processRef}`,\r\n    },\r\n    {\r\n      name: 'taskRef',\r\n      label: `${utils.string.t('claims.processing.task.title', { id: selectedTask?.taskRef })}`,\r\n      link: `${config.routes.claimsFNOL.task}/${selectedTask?.taskRef}`,\r\n      active: true,\r\n    },\r\n  ];\r\n\r\n  const reAssignTask = async (currentTaskDetails) => {\r\n    await dispatch(\r\n      showModal({\r\n        component: 'ADD_ASSIGNEE',\r\n        props: {\r\n          title: utils.string.t('app.assign'),\r\n          hideCompOnBlur: false,\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            taskDetails: [currentTaskDetails],\r\n            submitHandler: () => {\r\n              refreshTasksData();\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const refreshTasksData = () => {\r\n    dispatch(getClaimsTaskDashboardDetail({ query: selectedTask?.taskRef, claimID: businessProcessID }));\r\n  };\r\n\r\n  const handleDirtyCheck = (tabName, isNavigationAllowed) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          title: utils.string.t('status.alert'),\r\n          hint: utils.string.t('claims.notes.notifications.alertPopup'),\r\n          fullWidth: true,\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            cancelLabel: utils.string.t('app.no'),\r\n            confirmLabel: utils.string.t('app.yes'),\r\n            submitHandler: () => {\r\n              tabName !== '' && setSelectedTab(tabName);\r\n              if (isNavigationAllowed) {\r\n                switch (pushBackRoute) {\r\n                  case CLAIMS_FNOL_PUSH_BACK_ROUTES.routes.lossAndClaims:\r\n                    return history.replace(`${config.routes.claimsFNOL.root}${fnolSelectedTab ? `/tab/${fnolSelectedTab}` : ''}`);\r\n                  case CLAIMS_FNOL_PUSH_BACK_ROUTES.routes.lossDashboard:\r\n                    return history.replace(`${config.routes.claimsFNOL.loss}/${selectedTask?.lossRef}`);\r\n                  case CLAIMS_FNOL_PUSH_BACK_ROUTES.routes.claimsDashboard:\r\n                    return history.replace(`${config.routes.claimsFNOL.claim}/${selectedTask?.processRef}`);\r\n                  default:\r\n                    return;\r\n                }\r\n              }\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const changePriority = () => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CHANGE_PRIORITY',\r\n        props: {\r\n          title: utils.string.t('claims.processing.taskFunction.changePriority'),\r\n          hideCompOnBlur: false,\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            task: [selectedTask],\r\n            handlers: {\r\n              cancelHandler: () => {\r\n                dispatch(hideModal());\r\n              },\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  // abort\r\n  if (!selectedTask) return null;\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>{`${utils.string.t('claims.processing.title')} - ${utils.app.getAppName(brand)}`}</title>\r\n      </Helmet>\r\n      <TaskDashboardView\r\n        task={selectedTask}\r\n        tabs={tabs}\r\n        selectedTab={selectedTab}\r\n        breadcrumbs={breadcrumbs}\r\n        handleSelectTab={handleSelectTab}\r\n        reAssignTask={reAssignTask}\r\n        popoverActions={taskActions}\r\n        handleDirtyCheck={handleDirtyCheck}\r\n        isDirtyRef={isDirtyCheck}\r\n        setIsDirty={setIsDirtyCheck}\r\n        allowedNavigationUrls={allowedNavigationUrls}\r\n      />\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}