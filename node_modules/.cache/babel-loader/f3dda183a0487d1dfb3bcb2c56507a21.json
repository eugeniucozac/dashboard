{"ast":null,"code":"import moment from 'moment';\nimport isEmpty from 'lodash/isEmpty'; // app\n\nimport config from 'config';\nimport * as utils from 'utils';\nvar restrictedInputs = ['0', '0%', 'n/a', 'na', '-'];\nvar utilsOpeningMemo = {\n  getRetainedBrokerageValue: function getRetainedBrokerageValue(grossPremium, slipOrder, totalRetainedBrokerage) {\n    var total = Number(utils.string.stripNonNumeric(grossPremium || 0)) * Number(utils.string.stripNonNumeric(slipOrder || 0) / 100) * Number(utils.string.stripNonNumeric(totalRetainedBrokerage || 0) / 100);\n    return parseInt(total * 100) / 100;\n  },\n  getRetainedBrokerageCurrencies: function getRetainedBrokerageCurrencies() {\n    var currentYear = utils.date.today('YYYY');\n    var originalBrokerage = config.openingMemo.originalBrokerage[currentYear]; // try to get previous year if current year is not yet available\n\n    if (!originalBrokerage) {\n      var previousYear = moment(currentYear, 'YYYY').subtract(1, 'year').format('YYYY');\n      originalBrokerage = config.openingMemo.originalBrokerage[previousYear];\n    }\n\n    if (!originalBrokerage || !originalBrokerage.length) return [];\n    return originalBrokerage;\n  },\n  getRetainedBrokerageConvertedValue: function getRetainedBrokerageConvertedValue(currencyCode) {\n    var total = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    if (!currencyCode) return;\n    var currencies = utilsOpeningMemo.getRetainedBrokerageCurrencies();\n    var currencyObj = currencies.find(function (item) {\n      return item.currency === currencyCode;\n    });\n    if (isEmpty(currencyObj)) return;\n    return {\n      value: parseInt(total / currencyObj.rate * 100) / 100,\n      rate: currencyObj.rate\n    };\n  },\n  isApproved: function isApproved(openingMemo) {\n    if (!openingMemo || !utils.generic.isValidObject(openingMemo)) return false;\n    return openingMemo.isAccountHandlerApproved && openingMemo.isAuthorisedSignatoryApproved;\n  },\n  displaySubRow: function displaySubRow(value) {\n    return value.length > 0 && !restrictedInputs.includes(value.toLowerCase());\n  }\n};\nexport default utilsOpeningMemo;","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/utils/openingMemo/openingMemo.js"],"names":["moment","isEmpty","config","utils","restrictedInputs","utilsOpeningMemo","getRetainedBrokerageValue","grossPremium","slipOrder","totalRetainedBrokerage","total","Number","string","stripNonNumeric","parseInt","getRetainedBrokerageCurrencies","currentYear","date","today","originalBrokerage","openingMemo","previousYear","subtract","format","length","getRetainedBrokerageConvertedValue","currencyCode","currencies","currencyObj","find","item","currency","value","rate","isApproved","generic","isValidObject","isAccountHandlerApproved","isAuthorisedSignatoryApproved","displaySubRow","includes","toLowerCase"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,OAAP,MAAoB,gBAApB,C,CAEA;;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,IAAMC,gBAAgB,GAAG,CAAC,GAAD,EAAM,IAAN,EAAY,KAAZ,EAAmB,IAAnB,EAAyB,GAAzB,CAAzB;AACA,IAAMC,gBAAgB,GAAG;AACvBC,EAAAA,yBAAyB,EAAE,mCAACC,YAAD,EAAeC,SAAf,EAA0BC,sBAA1B,EAAqD;AAC9E,QAAMC,KAAK,GACTC,MAAM,CAACR,KAAK,CAACS,MAAN,CAAaC,eAAb,CAA6BN,YAAY,IAAI,CAA7C,CAAD,CAAN,GACAI,MAAM,CAACR,KAAK,CAACS,MAAN,CAAaC,eAAb,CAA6BL,SAAS,IAAI,CAA1C,IAA+C,GAAhD,CADN,GAEAG,MAAM,CAACR,KAAK,CAACS,MAAN,CAAaC,eAAb,CAA6BJ,sBAAsB,IAAI,CAAvD,IAA4D,GAA7D,CAHR;AAKA,WAAOK,QAAQ,CAACJ,KAAK,GAAG,GAAT,CAAR,GAAwB,GAA/B;AACD,GARsB;AAUvBK,EAAAA,8BAA8B,EAAE,0CAAM;AACpC,QAAMC,WAAW,GAAGb,KAAK,CAACc,IAAN,CAAWC,KAAX,CAAiB,MAAjB,CAApB;AACA,QAAIC,iBAAiB,GAAGjB,MAAM,CAACkB,WAAP,CAAmBD,iBAAnB,CAAqCH,WAArC,CAAxB,CAFoC,CAIpC;;AACA,QAAI,CAACG,iBAAL,EAAwB;AACtB,UAAME,YAAY,GAAGrB,MAAM,CAACgB,WAAD,EAAc,MAAd,CAAN,CAA4BM,QAA5B,CAAqC,CAArC,EAAwC,MAAxC,EAAgDC,MAAhD,CAAuD,MAAvD,CAArB;AACAJ,MAAAA,iBAAiB,GAAGjB,MAAM,CAACkB,WAAP,CAAmBD,iBAAnB,CAAqCE,YAArC,CAApB;AACD;;AAED,QAAI,CAACF,iBAAD,IAAsB,CAACA,iBAAiB,CAACK,MAA7C,EAAqD,OAAO,EAAP;AAErD,WAAOL,iBAAP;AACD,GAvBsB;AAyBvBM,EAAAA,kCAAkC,EAAE,4CAACC,YAAD,EAA6B;AAAA,QAAdhB,KAAc,uEAAN,CAAM;AAC/D,QAAI,CAACgB,YAAL,EAAmB;AACnB,QAAMC,UAAU,GAAGtB,gBAAgB,CAACU,8BAAjB,EAAnB;AAEA,QAAMa,WAAW,GAAGD,UAAU,CAACE,IAAX,CAAgB,UAACC,IAAD;AAAA,aAAUA,IAAI,CAACC,QAAL,KAAkBL,YAA5B;AAAA,KAAhB,CAApB;AACA,QAAIzB,OAAO,CAAC2B,WAAD,CAAX,EAA0B;AAE1B,WAAO;AACLI,MAAAA,KAAK,EAAElB,QAAQ,CAAEJ,KAAK,GAAGkB,WAAW,CAACK,IAArB,GAA6B,GAA9B,CAAR,GAA6C,GAD/C;AAELA,MAAAA,IAAI,EAAEL,WAAW,CAACK;AAFb,KAAP;AAID,GApCsB;AAsCvBC,EAAAA,UAAU,EAAE,oBAACd,WAAD,EAAiB;AAC3B,QAAI,CAACA,WAAD,IAAgB,CAACjB,KAAK,CAACgC,OAAN,CAAcC,aAAd,CAA4BhB,WAA5B,CAArB,EAA+D,OAAO,KAAP;AAE/D,WAAOA,WAAW,CAACiB,wBAAZ,IAAwCjB,WAAW,CAACkB,6BAA3D;AACD,GA1CsB;AA4CvBC,EAAAA,aAAa,EAAE,uBAACP,KAAD;AAAA,WAAWA,KAAK,CAACR,MAAN,GAAe,CAAf,IAAoB,CAACpB,gBAAgB,CAACoC,QAAjB,CAA0BR,KAAK,CAACS,WAAN,EAA1B,CAAhC;AAAA;AA5CQ,CAAzB;AA+CA,eAAepC,gBAAf","sourcesContent":["import moment from 'moment';\r\nimport isEmpty from 'lodash/isEmpty';\r\n\r\n// app\r\nimport config from 'config';\r\nimport * as utils from 'utils';\r\n\r\nconst restrictedInputs = ['0', '0%', 'n/a', 'na', '-'];\r\nconst utilsOpeningMemo = {\r\n  getRetainedBrokerageValue: (grossPremium, slipOrder, totalRetainedBrokerage) => {\r\n    const total =\r\n      Number(utils.string.stripNonNumeric(grossPremium || 0)) *\r\n      Number(utils.string.stripNonNumeric(slipOrder || 0) / 100) *\r\n      Number(utils.string.stripNonNumeric(totalRetainedBrokerage || 0) / 100);\r\n\r\n    return parseInt(total * 100) / 100;\r\n  },\r\n\r\n  getRetainedBrokerageCurrencies: () => {\r\n    const currentYear = utils.date.today('YYYY');\r\n    let originalBrokerage = config.openingMemo.originalBrokerage[currentYear];\r\n\r\n    // try to get previous year if current year is not yet available\r\n    if (!originalBrokerage) {\r\n      const previousYear = moment(currentYear, 'YYYY').subtract(1, 'year').format('YYYY');\r\n      originalBrokerage = config.openingMemo.originalBrokerage[previousYear];\r\n    }\r\n\r\n    if (!originalBrokerage || !originalBrokerage.length) return [];\r\n\r\n    return originalBrokerage;\r\n  },\r\n\r\n  getRetainedBrokerageConvertedValue: (currencyCode, total = 0) => {\r\n    if (!currencyCode) return;\r\n    const currencies = utilsOpeningMemo.getRetainedBrokerageCurrencies();\r\n\r\n    const currencyObj = currencies.find((item) => item.currency === currencyCode);\r\n    if (isEmpty(currencyObj)) return;\r\n\r\n    return {\r\n      value: parseInt((total / currencyObj.rate) * 100) / 100,\r\n      rate: currencyObj.rate,\r\n    };\r\n  },\r\n\r\n  isApproved: (openingMemo) => {\r\n    if (!openingMemo || !utils.generic.isValidObject(openingMemo)) return false;\r\n\r\n    return openingMemo.isAccountHandlerApproved && openingMemo.isAuthorisedSignatoryApproved;\r\n  },\r\n\r\n  displaySubRow: (value) => value.length > 0 && !restrictedInputs.includes(value.toLowerCase()),\r\n};\r\n\r\nexport default utilsOpeningMemo;\r\n"]},"metadata":{},"sourceType":"module"}