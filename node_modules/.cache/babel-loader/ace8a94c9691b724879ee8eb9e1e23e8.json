{"ast":null,"code":"import * as utils from 'utils';\nimport { authLogout, addLoader, removeLoader } from 'stores';\nexport var getReferenceDataNew = function getReferenceDataNew() {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    dispatch(getReferenceDataNewRequest());\n    dispatch(addLoader('getReferenceDataNew'));\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.odsService,\n      path: 'referenceData/all'\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      if (json && json.status === 'OK' && json.data) {\n        dispatch(getReferenceDataNewSuccess(json.data));\n      }\n    }).catch(function (err) {\n      var errorParams = {\n        file: 'stores/referenceData.actions.get',\n        message: 'API fetch error (referenceDataAll.get)'\n      };\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(getReferenceDataNewFailure(err));\n      return err;\n    }).finally(function () {\n      dispatch(removeLoader('getReferenceDataNew'));\n    });\n  };\n};\nexport var getReferenceDataNewRequest = function getReferenceDataNewRequest() {\n  return {\n    type: 'REFERENCE_DATA_GET_NEW_REQUEST'\n  };\n};\nexport var getReferenceDataNewSuccess = function getReferenceDataNewSuccess(data) {\n  return {\n    type: 'REFERENCE_DATA_GET_NEW_SUCCESS',\n    payload: data\n  };\n};\nexport var getReferenceDataNewFailure = function getReferenceDataNewFailure(error) {\n  return {\n    type: 'REFERENCE_DATA_GET_NEW_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/referenceData/referenceDataNew.actions.get.js"],"names":["utils","authLogout","addLoader","removeLoader","getReferenceDataNew","dispatch","getState","auth","user","endpoint","config","vars","getReferenceDataNewRequest","api","get","token","accessToken","odsService","path","then","response","handleResponse","json","status","data","getReferenceDataNewSuccess","catch","err","errorParams","file","message","handleError","handleUnauthorized","getReferenceDataNewFailure","finally","type","payload","error"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,YAAhC,QAAoD,QAApD;AAEA,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB;AAAA,SAAM,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC/D;AAD+D,oBAENA,QAAQ,EAFF;AAAA,QAE/CC,IAF+C,aAEvDC,IAFuD,CAE/CD,IAF+C;AAAA,QAErBE,QAFqB,aAEvCC,MAFuC,CAE7BC,IAF6B,CAErBF,QAFqB;;AAI/DJ,IAAAA,QAAQ,CAACO,0BAA0B,EAA3B,CAAR;AACAP,IAAAA,QAAQ,CAACH,SAAS,CAAC,qBAAD,CAAV,CAAR;AAEA,WAAOF,KAAK,CAACa,GAAN,CACJC,GADI,CACA;AACHC,MAAAA,KAAK,EAAER,IAAI,CAACS,WADT;AAEHP,MAAAA,QAAQ,EAAEA,QAAQ,CAACQ,UAFhB;AAGHC,MAAAA,IAAI,EAAE;AAHH,KADA,EAMJC,IANI,CAMC,UAACC,QAAD;AAAA,aAAcpB,KAAK,CAACa,GAAN,CAAUQ,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAND,EAOJD,IAPI,CAOC,UAACG,IAAD,EAAU;AACd,UAAIA,IAAI,IAAIA,IAAI,CAACC,MAAL,KAAgB,IAAxB,IAAgCD,IAAI,CAACE,IAAzC,EAA+C;AAC7CnB,QAAAA,QAAQ,CAACoB,0BAA0B,CAACH,IAAI,CAACE,IAAN,CAA3B,CAAR;AACD;AACF,KAXI,EAYJE,KAZI,CAYE,UAACC,GAAD,EAAS;AACd,UAAMC,WAAW,GAAG;AAClBC,QAAAA,IAAI,EAAE,kCADY;AAElBC,QAAAA,OAAO,EAAE;AAFS,OAApB;AAKA9B,MAAAA,KAAK,CAACa,GAAN,CAAUkB,WAAV,CAAsBJ,GAAtB,EAA2BC,WAA3B;AACA5B,MAAAA,KAAK,CAACa,GAAN,CAAUmB,kBAAV,CAA6BL,GAA7B,EAAkCtB,QAAlC,EAA4CJ,UAA5C;AACAI,MAAAA,QAAQ,CAAC4B,0BAA0B,CAACN,GAAD,CAA3B,CAAR;AACA,aAAOA,GAAP;AACD,KAtBI,EAuBJO,OAvBI,CAuBI,YAAM;AACb7B,MAAAA,QAAQ,CAACF,YAAY,CAAC,qBAAD,CAAb,CAAR;AACD,KAzBI,CAAP;AA0BD,GAjCkC;AAAA,CAA5B;AAmCP,OAAO,IAAMS,0BAA0B,GAAG,SAA7BA,0BAA6B,GAAM;AAC9C,SAAO;AACLuB,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,IAAMV,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACD,IAAD,EAAU;AAClD,SAAO;AACLW,IAAAA,IAAI,EAAE,gCADD;AAELC,IAAAA,OAAO,EAAEZ;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMS,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACI,KAAD,EAAW;AACnD,SAAO;AACLF,IAAAA,IAAI,EAAE,gCADD;AAELC,IAAAA,OAAO,EAAEC;AAFJ,GAAP;AAID,CALM","sourcesContent":["import * as utils from 'utils';\r\nimport { authLogout, addLoader, removeLoader } from 'stores';\r\n\r\nexport const getReferenceDataNew = () => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  dispatch(getReferenceDataNewRequest());\r\n  dispatch(addLoader('getReferenceDataNew'));\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.odsService,\r\n      path: 'referenceData/all',\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => {\r\n      if (json && json.status === 'OK' && json.data) {\r\n        dispatch(getReferenceDataNewSuccess(json.data));\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        file: 'stores/referenceData.actions.get',\r\n        message: 'API fetch error (referenceDataAll.get)',\r\n      };\r\n\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(getReferenceDataNewFailure(err));\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('getReferenceDataNew'));\r\n    });\r\n};\r\n\r\nexport const getReferenceDataNewRequest = () => {\r\n  return {\r\n    type: 'REFERENCE_DATA_GET_NEW_REQUEST',\r\n  };\r\n};\r\n\r\nexport const getReferenceDataNewSuccess = (data) => {\r\n  return {\r\n    type: 'REFERENCE_DATA_GET_NEW_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const getReferenceDataNewFailure = (error) => {\r\n  return {\r\n    type: 'REFERENCE_DATA_GET_NEW_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}