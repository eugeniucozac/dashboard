{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as utils from 'utils';\nexport var sendEmailNotification = function sendEmailNotification(formData) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var instruction = formData.instruction,\n        frontEndContactEmail = formData.frontEndContactEmail,\n        frontEndContactName = formData.frontEndContactName;\n    var defaultError = {\n      file: 'stores/processingInstructions.actions.sendEmailNotification'\n    };\n    dispatch(sendEmailNotificationRequest(formData));\n\n    if (!instruction || !frontEndContactEmail || !frontEndContactName) {\n      dispatch(sendEmailNotificationFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Missing form data'\n      })));\n      return;\n    }\n\n    var emailBody = {\n      recipient: [frontEndContactEmail],\n      subject: utils.string.t('processingInstructions.emailNotification.subject', {\n        instructionId: instruction === null || instruction === void 0 ? void 0 : instruction.id\n      }),\n      body: utils.string.t('processingInstructions.emailNotification.body', {\n        fecName: frontEndContactName,\n        instructionId: instruction === null || instruction === void 0 ? void 0 : instruction.id\n      })\n    };\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.emailNotification,\n      data: emailBody,\n      path: 'api/sendEmail'\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(sendEmailNotificationSuccess(data.data));\n      return data.data;\n    }).catch(function (err) {\n      utils.api.handleError(err, _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API fetch error (sendEmailNotification)'\n      }));\n      dispatch(sendEmailNotificationFailure(err));\n      return err;\n    });\n  };\n};\nexport var sendEmailNotificationRequest = function sendEmailNotificationRequest(values, instruction) {\n  return {\n    type: 'PROCESSING_INSTRUCTION_SEND_EMAIL_NOTIFICATION_REQUEST',\n    payload: {\n      values: values,\n      instruction: instruction\n    }\n  };\n};\nexport var sendEmailNotificationSuccess = function sendEmailNotificationSuccess(json) {\n  return {\n    type: 'PROCESSING_INSTRUCTION_SEND_EMAIL_NOTIFICATION_SUCCESS',\n    payload: json\n  };\n};\nexport var sendEmailNotificationFailure = function sendEmailNotificationFailure(error) {\n  return {\n    type: 'PROCESSING_INSTRUCTION_SEND_EMAIL_NOTIFICATION_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/processingInstructions/processingInstructions.actions.sendEmailNotification.js"],"names":["utils","sendEmailNotification","formData","dispatch","getState","auth","user","endpoint","config","vars","instruction","frontEndContactEmail","frontEndContactName","defaultError","file","sendEmailNotificationRequest","sendEmailNotificationFailure","message","emailBody","recipient","subject","string","t","instructionId","id","body","fecName","api","post","token","accessToken","emailNotification","data","path","then","response","handleResponse","json","handleNewData","sendEmailNotificationSuccess","catch","err","handleError","values","type","payload","error"],"mappings":"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","sourcesContent":["import * as utils from 'utils';\r\n\r\nexport const sendEmailNotification = (formData) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n  const { instruction, frontEndContactEmail, frontEndContactName } = formData;\r\n\r\n  const defaultError = {\r\n    file: 'stores/processingInstructions.actions.sendEmailNotification',\r\n  };\r\n\r\n  dispatch(sendEmailNotificationRequest(formData));\r\n\r\n  if (!instruction || !frontEndContactEmail || !frontEndContactName) {\r\n    dispatch(sendEmailNotificationFailure({ ...defaultError, message: 'Missing form data' }));\r\n    return;\r\n  }\r\n\r\n  const emailBody = {\r\n    recipient: [frontEndContactEmail],\r\n    subject: utils.string.t('processingInstructions.emailNotification.subject', {\r\n      instructionId: instruction?.id,\r\n    }),\r\n    body: utils.string.t('processingInstructions.emailNotification.body', {\r\n      fecName: frontEndContactName,\r\n      instructionId: instruction?.id,\r\n    }),\r\n  };\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.emailNotification,\r\n      data: emailBody,\r\n      path: 'api/sendEmail',\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(sendEmailNotificationSuccess(data.data));\r\n      return data.data;\r\n    })\r\n    .catch((err) => {\r\n      utils.api.handleError(err, { ...defaultError, message: 'API fetch error (sendEmailNotification)' });\r\n      dispatch(sendEmailNotificationFailure(err));\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const sendEmailNotificationRequest = (values, instruction) => {\r\n  return {\r\n    type: 'PROCESSING_INSTRUCTION_SEND_EMAIL_NOTIFICATION_REQUEST',\r\n    payload: { values, instruction },\r\n  };\r\n};\r\n\r\nexport const sendEmailNotificationSuccess = (json) => {\r\n  return {\r\n    type: 'PROCESSING_INSTRUCTION_SEND_EMAIL_NOTIFICATION_SUCCESS',\r\n    payload: json,\r\n  };\r\n};\r\n\r\nexport const sendEmailNotificationFailure = (error) => {\r\n  return {\r\n    type: 'PROCESSING_INSTRUCTION_SEND_EMAIL_NOTIFICATION_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}