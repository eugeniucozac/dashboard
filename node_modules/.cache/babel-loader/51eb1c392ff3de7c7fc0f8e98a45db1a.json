{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { authLogout, enqueueNotification } from 'stores';\nimport * as utils from 'utils';\nimport isEmpty from 'lodash/isEmpty';\nexport var postCoverages = function postCoverages(_ref) {\n  var riskId = _ref.riskId,\n      riskType = _ref.riskType,\n      data = _ref.data,\n      definitions = _ref.definitions,\n      coverageId = _ref.coverageId,\n      _ref$isEdit = _ref.isEdit,\n      isEdit = _ref$isEdit === void 0 ? false : _ref$isEdit;\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/risk.actions.postCoverages',\n      message: 'Data missing for POST request'\n    };\n\n    if (!data || isEmpty(data) || !riskId || !riskType) {\n      dispatch(postCoverageFailure(defaultError));\n      dispatch(enqueueNotification('notification.generic.request', 'error'));\n      return;\n    }\n\n    var body = _objectSpread(_objectSpread({}, utils.risk.parsedValues(utils.risk.filterConditionalValues(data, definitions), definitions)), {}, {\n      riskType: riskType\n    });\n\n    var path = isEdit && coverageId ? \"api/v1/risks/\".concat(riskId, \"/coverages/\").concat(coverageId) : \"api/v1/risks/\".concat(riskId, \"/coverages\");\n    dispatch(postCoverageRequest(data));\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.auth,\n      path: path,\n      data: body\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (data) {\n      isEdit && coverageId ? dispatch(postCoverageEditSuccess(data, coverageId)) : dispatch(postCoverageSuccess(data));\n      dispatch(enqueueNotification('notification.coverage.postSuccess', 'success'));\n      return data;\n    }).catch(function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API post error (risk.Coverage)'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(postCoverageFailure(err));\n      dispatch(enqueueNotification(utils.api.getErrorMessage(err), 'error'));\n      return err;\n    });\n  };\n};\nexport var postCoverageRequest = function postCoverageRequest(formData) {\n  return {\n    type: 'RISK_COVERAGE_POST_REQUEST',\n    payload: formData\n  };\n};\nexport var postCoverageSuccess = function postCoverageSuccess(responseData) {\n  return {\n    type: 'RISK_COVERAGE_POST_SUCCESS',\n    payload: responseData\n  };\n};\nexport var postCoverageEditSuccess = function postCoverageEditSuccess(responseData, coverageId) {\n  return {\n    type: 'RISK_COVERAGE_POST_EDIT_SUCCESS',\n    payload: {\n      responseData: responseData,\n      coverageId: coverageId\n    }\n  };\n};\nexport var postCoverageFailure = function postCoverageFailure(error) {\n  return {\n    type: 'RISK_COVERAGE_POST_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/risk/risk.actions.postCoverages.js"],"names":["authLogout","enqueueNotification","utils","isEmpty","postCoverages","riskId","riskType","data","definitions","coverageId","isEdit","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","message","postCoverageFailure","body","risk","parsedValues","filterConditionalValues","path","postCoverageRequest","api","post","token","accessToken","then","response","handleResponse","postCoverageEditSuccess","postCoverageSuccess","catch","err","errorParams","handleError","handleUnauthorized","getErrorMessage","formData","type","payload","responseData","error"],"mappings":"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","sourcesContent":["import { authLogout, enqueueNotification } from 'stores';\r\nimport * as utils from 'utils';\r\nimport isEmpty from 'lodash/isEmpty';\r\n\r\nexport const postCoverages =\r\n  ({ riskId, riskType, data, definitions, coverageId, isEdit = false }) =>\r\n  (dispatch, getState) => {\r\n    // prettier-ignore\r\n    const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n    const defaultError = {\r\n      file: 'stores/risk.actions.postCoverages',\r\n      message: 'Data missing for POST request',\r\n    };\r\n\r\n    if (!data || isEmpty(data) || !riskId || !riskType) {\r\n      dispatch(postCoverageFailure(defaultError));\r\n      dispatch(enqueueNotification('notification.generic.request', 'error'));\r\n      return;\r\n    }\r\n\r\n    const body = {\r\n      ...utils.risk.parsedValues(utils.risk.filterConditionalValues(data, definitions), definitions),\r\n      riskType,\r\n    };\r\n    const path = isEdit && coverageId ? `api/v1/risks/${riskId}/coverages/${coverageId}` : `api/v1/risks/${riskId}/coverages`;\r\n\r\n    dispatch(postCoverageRequest(data));\r\n\r\n    return utils.api\r\n      .post({\r\n        token: auth.accessToken,\r\n        endpoint: endpoint.auth,\r\n        path,\r\n        data: body,\r\n      })\r\n      .then((response) => utils.api.handleResponse(response))\r\n      .then((data) => {\r\n        isEdit && coverageId ? dispatch(postCoverageEditSuccess(data, coverageId)) : dispatch(postCoverageSuccess(data));\r\n        dispatch(enqueueNotification('notification.coverage.postSuccess', 'success'));\r\n        return data;\r\n      })\r\n      .catch((err) => {\r\n        const errorParams = {\r\n          ...defaultError,\r\n          message: 'API post error (risk.Coverage)',\r\n        };\r\n\r\n        utils.api.handleError(err, errorParams);\r\n        utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n        dispatch(postCoverageFailure(err));\r\n        dispatch(enqueueNotification(utils.api.getErrorMessage(err), 'error'));\r\n        return err;\r\n      });\r\n  };\r\n\r\nexport const postCoverageRequest = (formData) => {\r\n  return {\r\n    type: 'RISK_COVERAGE_POST_REQUEST',\r\n    payload: formData,\r\n  };\r\n};\r\n\r\nexport const postCoverageSuccess = (responseData) => {\r\n  return {\r\n    type: 'RISK_COVERAGE_POST_SUCCESS',\r\n    payload: responseData,\r\n  };\r\n};\r\n\r\nexport const postCoverageEditSuccess = (responseData, coverageId) => {\r\n  return {\r\n    type: 'RISK_COVERAGE_POST_EDIT_SUCCESS',\r\n    payload: {\r\n      responseData,\r\n      coverageId,\r\n    },\r\n  };\r\n};\r\n\r\nexport const postCoverageFailure = (error) => {\r\n  return {\r\n    type: 'RISK_COVERAGE_POST_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}