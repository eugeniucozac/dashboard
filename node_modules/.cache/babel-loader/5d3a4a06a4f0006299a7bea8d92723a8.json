{"ast":null,"code":"import _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\forms\\\\ComplexManagementInsured\\\\ComplexManagementInsured.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport moment from 'moment'; //app\n\nimport * as utils from 'utils';\nimport { postSearchInsured, selectComplexitySearchClaimsInsured, resetPopupClaimsInsured, checkedInsuredDetails, selectedCheckedComplexInsured, postSaveComplexityAddInsured, hideModal } from 'stores';\nimport { ComplexManagementInsuredView } from './ComplexManagementInsured.view';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ComplexManagementInsured() {\n  _s();\n\n  var dispatch = useDispatch();\n  var claimsPopupInsured = useSelector(selectComplexitySearchClaimsInsured);\n  var claimsSelectedInsured = useSelector(selectedCheckedComplexInsured);\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      searchTerm = _useState2[0],\n      setSearchTerm = _useState2[1];\n\n  var _useForm = useForm(),\n      control = _useForm.control,\n      register = _useForm.register,\n      watch = _useForm.watch;\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      resetKey = _useState4[0],\n      setResetKey = _useState4[1];\n\n  var handleReset = function handleReset() {\n    setSearchTerm('');\n    setResetKey(moment().format());\n  };\n\n  var handleSearch = function handleSearch(query) {\n    setSearchTerm(query);\n    return dispatch(postSearchInsured({\n      term: query\n    }));\n  };\n\n  var handleChangePage = function handleChangePage(newPage) {\n    dispatch(postSearchInsured({\n      page: newPage,\n      term: searchTerm\n    }));\n  };\n\n  var handleChangeRowsPerPage = function handleChangeRowsPerPage(rowsPerPage) {\n    dispatch(postSearchInsured({\n      size: rowsPerPage,\n      term: searchTerm\n    }));\n  };\n\n  var handleSort = function handleSort(by, dir) {\n    dispatch(postSearchInsured({\n      sortBy: by,\n      direction: dir.toUpperCase(),\n      term: searchTerm\n    }));\n  };\n\n  var selectedInsuredItemsHandler = function selectedInsuredItemsHandler(id, checkedType, insured) {\n    dispatch(checkedInsuredDetails({\n      id: id,\n      checkedType: checkedType,\n      insured: insured\n    }));\n  };\n\n  var enableDisableFlag = function enableDisableFlag(field) {\n    return claimsSelectedInsured === null || claimsSelectedInsured === void 0 ? void 0 : claimsSelectedInsured.some(function (item) {\n      return item.id === field && item.checkedType;\n    });\n  };\n\n  var postSaveComplexInsuredHandler = function postSaveComplexInsuredHandler() {\n    dispatch(postSaveComplexityAddInsured());\n    dispatch(hideModal());\n  };\n\n  var columns = [{\n    id: 'id',\n    empty: true\n  }, {\n    id: 'insured',\n    label: utils.string.t('claims.columns.complexInsuredList.insured'),\n    sort: {\n      type: '',\n      direction: 'asc'\n    }\n  }];\n  useEffect(function () {\n    // cleanup\n    return function () {\n      dispatch(resetPopupClaimsInsured());\n    };\n  }, [] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  return /*#__PURE__*/_jsxDEV(ComplexManagementInsuredView, {\n    columns: columns,\n    rows: claimsPopupInsured,\n    control: control,\n    register: register,\n    watch: watch,\n    selectedInsuredItemsHandler: selectedInsuredItemsHandler,\n    handleReset: handleReset,\n    handleSearch: handleSearch,\n    handleChangePage: handleChangePage,\n    handleChangeRowsPerPage: handleChangeRowsPerPage,\n    handleSort: handleSort,\n    enableDisableFlag: enableDisableFlag,\n    claimsSelectedInsured: claimsSelectedInsured,\n    postSaveComplexInsuredHandler: postSaveComplexInsuredHandler,\n    resetKey: resetKey\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ComplexManagementInsured, \"AKE7FD5AirdAkN+4D3uOO5OxbYo=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useForm];\n});\n\n_c = ComplexManagementInsured;\nComplexManagementInsured.displayName = \"ComplexManagementInsured\";\nComplexManagementInsured.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"ComplexManagementInsured\"\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\forms\\\\ComplexManagementInsured\\\\ComplexManagementInsured.js\"] = {\n    name: \"ComplexManagementInsured\",\n    docgenInfo: ComplexManagementInsured.__docgenInfo,\n    path: \"src\\\\forms\\\\ComplexManagementInsured\\\\ComplexManagementInsured.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ComplexManagementInsured\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/forms/ComplexManagementInsured/ComplexManagementInsured.js"],"names":["React","useState","useEffect","useDispatch","useSelector","useForm","moment","utils","postSearchInsured","selectComplexitySearchClaimsInsured","resetPopupClaimsInsured","checkedInsuredDetails","selectedCheckedComplexInsured","postSaveComplexityAddInsured","hideModal","ComplexManagementInsuredView","ComplexManagementInsured","dispatch","claimsPopupInsured","claimsSelectedInsured","searchTerm","setSearchTerm","control","register","watch","resetKey","setResetKey","handleReset","format","handleSearch","query","term","handleChangePage","newPage","page","handleChangeRowsPerPage","rowsPerPage","size","handleSort","by","dir","sortBy","direction","toUpperCase","selectedInsuredItemsHandler","id","checkedType","insured","enableDisableFlag","field","some","item","postSaveComplexInsuredHandler","columns","empty","label","string","t","sort","type"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useForm } from 'react-hook-form';\r\nimport moment from 'moment';\r\n\r\n//app\r\nimport * as utils from 'utils';\r\n\r\nimport {\r\n  postSearchInsured,\r\n  selectComplexitySearchClaimsInsured,\r\n  resetPopupClaimsInsured,\r\n  checkedInsuredDetails,\r\n  selectedCheckedComplexInsured,\r\n  postSaveComplexityAddInsured,\r\n  hideModal,\r\n} from 'stores';\r\n\r\nimport { ComplexManagementInsuredView } from './ComplexManagementInsured.view';\r\n\r\nexport default function ComplexManagementInsured() {\r\n  const dispatch = useDispatch();\r\n  const claimsPopupInsured = useSelector(selectComplexitySearchClaimsInsured);\r\n  const claimsSelectedInsured = useSelector(selectedCheckedComplexInsured);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const { control, register, watch } = useForm();\r\n  const [resetKey, setResetKey] = useState();\r\n\r\n  const handleReset = () => {\r\n    setSearchTerm('');\r\n    setResetKey(moment().format());\r\n  };\r\n\r\n  const handleSearch = (query) => {\r\n    setSearchTerm(query);\r\n    return dispatch(postSearchInsured({ term: query }));\r\n  };\r\n\r\n  const handleChangePage = (newPage) => {\r\n    dispatch(postSearchInsured({ page: newPage, term: searchTerm }));\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (rowsPerPage) => {\r\n    dispatch(postSearchInsured({ size: rowsPerPage, term: searchTerm }));\r\n  };\r\n\r\n  const handleSort = (by, dir) => {\r\n    dispatch(postSearchInsured({ sortBy: by, direction: dir.toUpperCase(), term: searchTerm }));\r\n  };\r\n\r\n  const selectedInsuredItemsHandler = (id, checkedType, insured) => {\r\n    dispatch(checkedInsuredDetails({ id: id, checkedType: checkedType, insured: insured }));\r\n  };\r\n\r\n  const enableDisableFlag = (field) => {\r\n    return claimsSelectedInsured?.some((item) => item.id === field && item.checkedType);\r\n  };\r\n\r\n  const postSaveComplexInsuredHandler = () => {\r\n    dispatch(postSaveComplexityAddInsured());\r\n    dispatch(hideModal());\r\n  };\r\n\r\n  const columns = [\r\n    { id: 'id', empty: true },\r\n    { id: 'insured', label: utils.string.t('claims.columns.complexInsuredList.insured'), sort: { type: '', direction: 'asc' } },\r\n  ];\r\n\r\n  useEffect(\r\n    () => {\r\n      // cleanup\r\n      return () => {\r\n        dispatch(resetPopupClaimsInsured());\r\n      };\r\n    },\r\n    [] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  return (\r\n    <ComplexManagementInsuredView\r\n      columns={columns}\r\n      rows={claimsPopupInsured}\r\n      control={control}\r\n      register={register}\r\n      watch={watch}\r\n      selectedInsuredItemsHandler={selectedInsuredItemsHandler}\r\n      handleReset={handleReset}\r\n      handleSearch={handleSearch}\r\n      handleChangePage={handleChangePage}\r\n      handleChangeRowsPerPage={handleChangeRowsPerPage}\r\n      handleSort={handleSort}\r\n      enableDisableFlag={enableDisableFlag}\r\n      claimsSelectedInsured={claimsSelectedInsured}\r\n      postSaveComplexInsuredHandler={postSaveComplexInsuredHandler}\r\n      resetKey={resetKey}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}