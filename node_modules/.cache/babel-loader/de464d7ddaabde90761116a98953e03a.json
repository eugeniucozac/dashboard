{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport moment from 'moment';\nimport get from 'lodash/get'; // app\n\nimport { authLogout, addLoader, removeLoader, enqueueNotification } from 'stores';\nimport * as utils from 'utils';\nexport var getClaimAudits = function getClaimAudits(params) {\n  return function (dispatch, getState) {\n    var _claims$audits, _claims$audits2, _claims$audits2$sort, _claims$audits3, _claims$audits3$sort;\n\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint,\n        claims = _getState.claims;\n\n    var claimID = params.claimID,\n        filterTerm = params.filterTerm,\n        page = params.page,\n        size = params.size,\n        sortBy = params.sortBy,\n        direction = params.direction,\n        query = params.query;\n    var defaultError = {\n      file: 'stores/claims.actions.getClaimAudits'\n    };\n    dispatch(getClaimAuditsRequest(params));\n    dispatch(addLoader('getClaimAudits'));\n\n    if (!claimID) {\n      dispatch(getClaimAuditsFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Missing claimID param'\n      })));\n      dispatch(enqueueNotification('claims.audits.notifications.getFailure', 'error'));\n      dispatch(removeLoader('getClaimAudits'));\n      return;\n    }\n\n    var prevQuery = get(claims, 'audits.query') || '';\n    var newQuery = params.hasOwnProperty('query') ? query : prevQuery;\n\n    var constructFilters = function constructFilters(filtersObj) {\n      var filteredArray = [];\n\n      for (var key in filtersObj) {\n        if (typeof filtersObj[key] === 'string' && filtersObj[key] !== '') {\n          filteredArray.push({\n            column: key,\n            filterValue: [{\n              id: 0,\n              name: key,\n              value: moment(new Date(filtersObj[key])).format('DD-MM-YYYY')\n            }]\n          });\n        }\n      }\n\n      return filteredArray;\n    };\n\n    var prevFilters = get(claims, 'audits.filters') || [];\n    var newFilters = params.hasOwnProperty('filterTerm') ? constructFilters(filterTerm) : prevFilters;\n    var apiParams = {\n      page: page || 0,\n      pageSize: size || ((_claims$audits = claims.audits) === null || _claims$audits === void 0 ? void 0 : _claims$audits.pageSize),\n      sortBy: sortBy || ((_claims$audits2 = claims.audits) === null || _claims$audits2 === void 0 ? void 0 : (_claims$audits2$sort = _claims$audits2.sort) === null || _claims$audits2$sort === void 0 ? void 0 : _claims$audits2$sort.by),\n      direction: direction || ((_claims$audits3 = claims.audits) === null || _claims$audits3 === void 0 ? void 0 : (_claims$audits3$sort = _claims$audits3.sort) === null || _claims$audits3$sort === void 0 ? void 0 : _claims$audits3$sort.direction) || '',\n      search: newQuery || '',\n      searchBy: null,\n      filterLossClaimsCriteria: null,\n      filterSearch: newFilters\n    };\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.claimService,\n      path: \"api/data/claims/audit/\".concat(claimID, \"/search\"),\n      data: apiParams\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (data) {\n      return utils.api.handleNewData(data);\n    }).then(function (json) {\n      dispatch(getClaimAuditsSuccess(json));\n      return json;\n    }).catch(function (err) {\n      dispatch(getClaimAuditsFailure(err, defaultError));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      return err;\n    }).finally(function () {\n      dispatch(removeLoader('getClaimAudits'));\n    });\n  };\n};\nexport var getClaimAuditsRequest = function getClaimAuditsRequest(claimID) {\n  return {\n    type: 'CLAIM_AUDIT_TRAIL_GET_REQUEST',\n    payload: claimID\n  };\n};\nexport var getClaimAuditsSuccess = function getClaimAuditsSuccess(json) {\n  var _json$data;\n\n  return {\n    type: 'CLAIM_AUDIT_TRAIL_GET_SUCCESS',\n    payload: {\n      items: (_json$data = json.data) === null || _json$data === void 0 ? void 0 : _json$data.searchValue,\n      pagination: json.pagination\n    }\n  };\n};\nexport var getClaimAuditsFailure = function getClaimAuditsFailure(err) {\n  return {\n    type: 'CLAIM_AUDIT_TRAIL_GET_FAILURE',\n    payload: err\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.getClaimAuditTrail.js"],"names":["moment","get","authLogout","addLoader","removeLoader","enqueueNotification","utils","getClaimAudits","params","dispatch","getState","auth","user","endpoint","config","vars","claims","claimID","filterTerm","page","size","sortBy","direction","query","defaultError","file","getClaimAuditsRequest","getClaimAuditsFailure","message","prevQuery","newQuery","hasOwnProperty","constructFilters","filtersObj","filteredArray","key","push","column","filterValue","id","name","value","Date","format","prevFilters","newFilters","apiParams","pageSize","audits","sort","by","search","searchBy","filterLossClaimsCriteria","filterSearch","api","post","token","accessToken","claimService","path","data","then","response","handleResponse","handleNewData","json","getClaimAuditsSuccess","catch","err","handleUnauthorized","finally","type","payload","items","searchValue","pagination"],"mappings":"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","sourcesContent":["import moment from 'moment';\r\nimport get from 'lodash/get';\r\n\r\n// app\r\nimport { authLogout, addLoader, removeLoader, enqueueNotification } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const getClaimAudits = (params) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}, claims} = getState();\r\n  const { claimID, filterTerm, page, size, sortBy, direction, query } = params;\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.getClaimAudits',\r\n  };\r\n\r\n  dispatch(getClaimAuditsRequest(params));\r\n  dispatch(addLoader('getClaimAudits'));\r\n\r\n  if (!claimID) {\r\n    dispatch(getClaimAuditsFailure({ ...defaultError, message: 'Missing claimID param' }));\r\n    dispatch(enqueueNotification('claims.audits.notifications.getFailure', 'error'));\r\n    dispatch(removeLoader('getClaimAudits'));\r\n    return;\r\n  }\r\n\r\n  const prevQuery = get(claims, 'audits.query') || '';\r\n  const newQuery = params.hasOwnProperty('query') ? query : prevQuery;\r\n\r\n  const constructFilters = (filtersObj) => {\r\n    const filteredArray = [];\r\n    for (const key in filtersObj) {\r\n      if (typeof filtersObj[key] === 'string' && filtersObj[key] !== '') {\r\n        filteredArray.push({\r\n          column: key,\r\n          filterValue: [{ id: 0, name: key, value: moment(new Date(filtersObj[key])).format('DD-MM-YYYY') }],\r\n        });\r\n      }\r\n    }\r\n    return filteredArray;\r\n  };\r\n\r\n  const prevFilters = get(claims, 'audits.filters') || [];\r\n  const newFilters = params.hasOwnProperty('filterTerm') ? constructFilters(filterTerm) : prevFilters;\r\n\r\n  const apiParams = {\r\n    page: page || 0,\r\n    pageSize: size || claims.audits?.pageSize,\r\n    sortBy: sortBy || claims.audits?.sort?.by,\r\n    direction: direction || claims.audits?.sort?.direction || '',\r\n    search: newQuery || '',\r\n    searchBy: null,\r\n    filterLossClaimsCriteria: null,\r\n    filterSearch: newFilters,\r\n  };\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.claimService,\r\n      path: `api/data/claims/audit/${claimID}/search`,\r\n      data: apiParams,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((data) => utils.api.handleNewData(data))\r\n    .then((json) => {\r\n      dispatch(getClaimAuditsSuccess(json));\r\n      return json;\r\n    })\r\n    .catch((err) => {\r\n      dispatch(getClaimAuditsFailure(err, defaultError));\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('getClaimAudits'));\r\n    });\r\n};\r\n\r\nexport const getClaimAuditsRequest = (claimID) => {\r\n  return {\r\n    type: 'CLAIM_AUDIT_TRAIL_GET_REQUEST',\r\n    payload: claimID,\r\n  };\r\n};\r\n\r\nexport const getClaimAuditsSuccess = (json) => {\r\n  return {\r\n    type: 'CLAIM_AUDIT_TRAIL_GET_SUCCESS',\r\n    payload: {\r\n      items: json.data?.searchValue,\r\n      pagination: json.pagination,\r\n    },\r\n  };\r\n};\r\n\r\nexport const getClaimAuditsFailure = (err) => {\r\n  return {\r\n    type: 'CLAIM_AUDIT_TRAIL_GET_FAILURE',\r\n    payload: err,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}