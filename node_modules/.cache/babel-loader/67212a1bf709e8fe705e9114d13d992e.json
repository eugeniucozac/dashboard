{"ast":null,"code":"import _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\pages\\\\Claims\\\\Claims.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport { Helmet } from 'react-helmet'; // app\n\nimport { ClaimsView } from './Claims.view';\nimport { postClaimDetailsInformationSuccess, getLossInformation, getClaimsPreviewInformation, selectCatCodes, selectLossQualifiers, selectPriorities, selectSettlementCurrency, selectReferralResponse, selectClaimData, setClaimData, claimsPolicyData, getPolicyInformation, getClaimantNames, getInterest, getBEAdjuster, getLossQualifiers, getCatCodes, getPriorityLevels, getSettlementCurrency, selectClaimsPolicyData, getClaimDetailsSuccess, setClaimsStepperControl, getComplexityValues, getReferralValues, getReferralResponse, getQueryCodeList, resetLossSubmission, resetLossPolicyClaimData } from 'stores';\nimport * as utils from 'utils';\nimport config from 'config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Claims() {\n  _s();\n\n  var dispatch = useDispatch();\n  var history = useHistory();\n  var brand = useSelector(function (state) {\n    return state.ui.brand;\n  });\n  var claimData = useSelector(selectClaimData);\n  var claimCurrentPolicyData = useSelector(selectClaimsPolicyData);\n  var catCodes = useSelector(selectCatCodes);\n  var priorities = useSelector(selectPriorities);\n  var lossQualifiers = useSelector(selectLossQualifiers);\n  var settlementCurrency = useSelector(selectSettlementCurrency);\n  var referralResponse = useSelector(selectReferralResponse);\n\n  var handleRegisterNewLoss = function handleRegisterNewLoss() {\n    dispatch(resetLossSubmission());\n    dispatch(resetLossPolicyClaimData());\n    history.push({\n      pathname: config.routes.claimsFNOL.newLoss,\n      state: {\n        isNewLoss: true\n      }\n    });\n    dispatch(setClaimData({}));\n  };\n\n  var handleComplexityRulesManagement = function handleComplexityRulesManagement() {\n    history.push(config.routes.claimsFNOL.complexityRules);\n  };\n\n  useEffect(function () {\n    if (utils.generic.isInvalidOrEmptyArray(catCodes)) {\n      dispatch(getCatCodes());\n    }\n\n    if (utils.generic.isInvalidOrEmptyArray(priorities)) {\n      dispatch(getPriorityLevels());\n    }\n\n    if (utils.generic.isInvalidOrEmptyArray(lossQualifiers)) {\n      dispatch(getLossQualifiers());\n    }\n\n    if (utils.generic.isInvalidOrEmptyArray(settlementCurrency)) {\n      dispatch(getSettlementCurrency());\n    }\n\n    if (utils.generic.isInvalidOrEmptyArray(referralResponse)) {\n      dispatch(getReferralResponse());\n    }\n\n    dispatch(setClaimData({}));\n    dispatch(getQueryCodeList());\n    dispatch(setClaimsStepperControl(0));\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    if (claimData === null || claimData === void 0 ? void 0 : claimData.claimId) {\n      dispatch(getLossInformation({\n        lossDetailsId: claimData.lossId,\n        sourceIdParams: claimData.sourceID\n      }));\n      dispatch(claimsPolicyData({\n        xbInstanceID: claimData.xbInstanceID,\n        xbPolicyID: claimData.xbPolicyID,\n        policyNumber: claimData.policyNumber,\n        divisionID: claimData.divisionID\n      }));\n    }\n  }, [claimData]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    if ((claimData === null || claimData === void 0 ? void 0 : claimData.claimId) && (claimCurrentPolicyData === null || claimCurrentPolicyData === void 0 ? void 0 : claimCurrentPolicyData.xbInstanceID)) {\n      var fetchData = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var claimDetails;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  dispatch(getPolicyInformation());\n                  dispatch(getInterest());\n                  dispatch(getBEAdjuster());\n                  dispatch(getClaimantNames());\n                  dispatch(postClaimDetailsInformationSuccess(claimData.claimId));\n                  _context.next = 7;\n                  return dispatch(getClaimsPreviewInformation({\n                    claimId: claimData === null || claimData === void 0 ? void 0 : claimData.claimId,\n                    claimRefParams: claimData === null || claimData === void 0 ? void 0 : claimData.claimReference,\n                    sourceIdParams: claimData === null || claimData === void 0 ? void 0 : claimData.sourceID,\n                    divisionIDParams: claimData === null || claimData === void 0 ? void 0 : claimData.divisionID\n                  }));\n\n                case 7:\n                  claimDetails = _context.sent;\n                  dispatch(getClaimDetailsSuccess(claimDetails));\n                  dispatch(getComplexityValues());\n                  dispatch(getReferralValues());\n\n                case 11:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function fetchData() {\n          return _ref.apply(this, arguments);\n        };\n      }();\n\n      fetchData();\n    }\n  }, [claimCurrentPolicyData]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"\".concat(utils.string.t('claims.title'), \" - \").concat(utils.app.getAppName(brand))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ClaimsView, {\n      handleComplexityRulesManagement: handleComplexityRulesManagement,\n      handleRegisterNewLoss: handleRegisterNewLoss\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Claims, \"Sb4R5Yxqj0Uk/gxJujDlD4OTQT4=\", false, function () {\n  return [useDispatch, useHistory, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Claims;\n\nvar _c;\n\n$RefreshReg$(_c, \"Claims\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/pages/Claims/Claims.js"],"names":["React","useEffect","useSelector","useDispatch","useHistory","Helmet","ClaimsView","postClaimDetailsInformationSuccess","getLossInformation","getClaimsPreviewInformation","selectCatCodes","selectLossQualifiers","selectPriorities","selectSettlementCurrency","selectReferralResponse","selectClaimData","setClaimData","claimsPolicyData","getPolicyInformation","getClaimantNames","getInterest","getBEAdjuster","getLossQualifiers","getCatCodes","getPriorityLevels","getSettlementCurrency","selectClaimsPolicyData","getClaimDetailsSuccess","setClaimsStepperControl","getComplexityValues","getReferralValues","getReferralResponse","getQueryCodeList","resetLossSubmission","resetLossPolicyClaimData","utils","config","Claims","dispatch","history","brand","state","ui","claimData","claimCurrentPolicyData","catCodes","priorities","lossQualifiers","settlementCurrency","referralResponse","handleRegisterNewLoss","push","pathname","routes","claimsFNOL","newLoss","isNewLoss","handleComplexityRulesManagement","complexityRules","generic","isInvalidOrEmptyArray","claimId","lossDetailsId","lossId","sourceIdParams","sourceID","xbInstanceID","xbPolicyID","policyNumber","divisionID","fetchData","claimRefParams","claimReference","divisionIDParams","claimDetails","string","t","app","getAppName"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,MAAT,QAAuB,cAAvB,C,CAEA;;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SACEC,kCADF,EAEEC,kBAFF,EAGEC,2BAHF,EAIEC,cAJF,EAKEC,oBALF,EAMEC,gBANF,EAOEC,wBAPF,EAQEC,sBARF,EASEC,eATF,EAUEC,YAVF,EAWEC,gBAXF,EAYEC,oBAZF,EAaEC,gBAbF,EAcEC,WAdF,EAeEC,aAfF,EAgBEC,iBAhBF,EAiBEC,WAjBF,EAkBEC,iBAlBF,EAmBEC,qBAnBF,EAoBEC,sBApBF,EAqBEC,sBArBF,EAsBEC,uBAtBF,EAuBEC,mBAvBF,EAwBEC,iBAxBF,EAyBEC,mBAzBF,EA0BEC,gBA1BF,EA2BEC,mBA3BF,EA4BEC,wBA5BF,QA6BO,QA7BP;AA8BA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,QAAnB;;;AAEA,eAAe,SAASC,MAAT,GAAkB;AAAA;;AAC/B,MAAMC,QAAQ,GAAGnC,WAAW,EAA5B;AACA,MAAMoC,OAAO,GAAGnC,UAAU,EAA1B;AACA,MAAMoC,KAAK,GAAGtC,WAAW,CAAC,UAACuC,KAAD;AAAA,WAAWA,KAAK,CAACC,EAAN,CAASF,KAApB;AAAA,GAAD,CAAzB;AACA,MAAMG,SAAS,GAAGzC,WAAW,CAACa,eAAD,CAA7B;AACA,MAAM6B,sBAAsB,GAAG1C,WAAW,CAACwB,sBAAD,CAA1C;AACA,MAAMmB,QAAQ,GAAG3C,WAAW,CAACQ,cAAD,CAA5B;AACA,MAAMoC,UAAU,GAAG5C,WAAW,CAACU,gBAAD,CAA9B;AACA,MAAMmC,cAAc,GAAG7C,WAAW,CAACS,oBAAD,CAAlC;AACA,MAAMqC,kBAAkB,GAAG9C,WAAW,CAACW,wBAAD,CAAtC;AACA,MAAMoC,gBAAgB,GAAG/C,WAAW,CAACY,sBAAD,CAApC;;AAEA,MAAMoC,qBAAqB,GAAG,SAAxBA,qBAAwB,GAAM;AAClCZ,IAAAA,QAAQ,CAACL,mBAAmB,EAApB,CAAR;AACAK,IAAAA,QAAQ,CAACJ,wBAAwB,EAAzB,CAAR;AACAK,IAAAA,OAAO,CAACY,IAAR,CAAa;AACXC,MAAAA,QAAQ,EAAEhB,MAAM,CAACiB,MAAP,CAAcC,UAAd,CAAyBC,OADxB;AAEXd,MAAAA,KAAK,EAAE;AACLe,QAAAA,SAAS,EAAE;AADN;AAFI,KAAb;AAMAlB,IAAAA,QAAQ,CAACtB,YAAY,CAAC,EAAD,CAAb,CAAR;AACD,GAVD;;AAYA,MAAMyC,+BAA+B,GAAG,SAAlCA,+BAAkC,GAAM;AAC5ClB,IAAAA,OAAO,CAACY,IAAR,CAAaf,MAAM,CAACiB,MAAP,CAAcC,UAAd,CAAyBI,eAAtC;AACD,GAFD;;AAIAzD,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIkC,KAAK,CAACwB,OAAN,CAAcC,qBAAd,CAAoCf,QAApC,CAAJ,EAAmD;AACjDP,MAAAA,QAAQ,CAACf,WAAW,EAAZ,CAAR;AACD;;AACD,QAAIY,KAAK,CAACwB,OAAN,CAAcC,qBAAd,CAAoCd,UAApC,CAAJ,EAAqD;AACnDR,MAAAA,QAAQ,CAACd,iBAAiB,EAAlB,CAAR;AACD;;AACD,QAAIW,KAAK,CAACwB,OAAN,CAAcC,qBAAd,CAAoCb,cAApC,CAAJ,EAAyD;AACvDT,MAAAA,QAAQ,CAAChB,iBAAiB,EAAlB,CAAR;AACD;;AACD,QAAIa,KAAK,CAACwB,OAAN,CAAcC,qBAAd,CAAoCZ,kBAApC,CAAJ,EAA6D;AAC3DV,MAAAA,QAAQ,CAACb,qBAAqB,EAAtB,CAAR;AACD;;AACD,QAAIU,KAAK,CAACwB,OAAN,CAAcC,qBAAd,CAAoCX,gBAApC,CAAJ,EAA2D;AACzDX,MAAAA,QAAQ,CAACP,mBAAmB,EAApB,CAAR;AACD;;AACDO,IAAAA,QAAQ,CAACtB,YAAY,CAAC,EAAD,CAAb,CAAR;AACAsB,IAAAA,QAAQ,CAACN,gBAAgB,EAAjB,CAAR;AACAM,IAAAA,QAAQ,CAACV,uBAAuB,CAAC,CAAD,CAAxB,CAAR;AACD,GAnBQ,EAmBN,EAnBM,CAAT,CA5B+B,CA+CvB;;AAER3B,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI0C,SAAJ,aAAIA,SAAJ,uBAAIA,SAAS,CAAEkB,OAAf,EAAwB;AACtBvB,MAAAA,QAAQ,CAAC9B,kBAAkB,CAAC;AAAEsD,QAAAA,aAAa,EAAEnB,SAAS,CAACoB,MAA3B;AAAmCC,QAAAA,cAAc,EAAErB,SAAS,CAACsB;AAA7D,OAAD,CAAnB,CAAR;AACA3B,MAAAA,QAAQ,CACNrB,gBAAgB,CAAC;AACfiD,QAAAA,YAAY,EAAEvB,SAAS,CAACuB,YADT;AAEfC,QAAAA,UAAU,EAAExB,SAAS,CAACwB,UAFP;AAGfC,QAAAA,YAAY,EAAEzB,SAAS,CAACyB,YAHT;AAIfC,QAAAA,UAAU,EAAE1B,SAAS,CAAC0B;AAJP,OAAD,CADV,CAAR;AAQD;AACF,GAZQ,EAYN,CAAC1B,SAAD,CAZM,CAAT,CAjD+B,CA6Dd;;AAEjB1C,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAAA0C,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEkB,OAAX,MAAsBjB,sBAAtB,aAAsBA,sBAAtB,uBAAsBA,sBAAsB,CAAEsB,YAA9C,CAAJ,EAAgE;AAAA,UAC/CI,SAD+C;AAAA,4EAC9D;AAAA;AAAA;AAAA;AAAA;AAAA;AACEhC,kBAAAA,QAAQ,CAACpB,oBAAoB,EAArB,CAAR;AACAoB,kBAAAA,QAAQ,CAAClB,WAAW,EAAZ,CAAR;AACAkB,kBAAAA,QAAQ,CAACjB,aAAa,EAAd,CAAR;AACAiB,kBAAAA,QAAQ,CAACnB,gBAAgB,EAAjB,CAAR;AAEAmB,kBAAAA,QAAQ,CAAC/B,kCAAkC,CAACoC,SAAS,CAACkB,OAAX,CAAnC,CAAR;AANF;AAAA,yBAO6BvB,QAAQ,CACjC7B,2BAA2B,CAAC;AAC1BoD,oBAAAA,OAAO,EAAElB,SAAF,aAAEA,SAAF,uBAAEA,SAAS,CAAEkB,OADM;AAE1BU,oBAAAA,cAAc,EAAE5B,SAAF,aAAEA,SAAF,uBAAEA,SAAS,CAAE6B,cAFD;AAG1BR,oBAAAA,cAAc,EAAErB,SAAF,aAAEA,SAAF,uBAAEA,SAAS,CAAEsB,QAHD;AAI1BQ,oBAAAA,gBAAgB,EAAE9B,SAAF,aAAEA,SAAF,uBAAEA,SAAS,CAAE0B;AAJH,mBAAD,CADM,CAPrC;;AAAA;AAOQK,kBAAAA,YAPR;AAeEpC,kBAAAA,QAAQ,CAACX,sBAAsB,CAAC+C,YAAD,CAAvB,CAAR;AACApC,kBAAAA,QAAQ,CAACT,mBAAmB,EAApB,CAAR;AACAS,kBAAAA,QAAQ,CAACR,iBAAiB,EAAlB,CAAR;;AAjBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAD8D;;AAAA,wBAC/CwC,SAD+C;AAAA;AAAA;AAAA;;AAoB9DA,MAAAA,SAAS;AACV;AACF,GAvBQ,EAuBN,CAAC1B,sBAAD,CAvBM,CAAT,CA/D+B,CAsFD;;AAE9B,sBACE;AAAA,4BACE,QAAC,MAAD;AAAA,6BACE;AAAA,4BAAWT,KAAK,CAACwC,MAAN,CAAaC,CAAb,CAAe,cAAf,CAAX,gBAA+CzC,KAAK,CAAC0C,GAAN,CAAUC,UAAV,CAAqBtC,KAArB,CAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE,QAAC,UAAD;AAAY,MAAA,+BAA+B,EAAEiB,+BAA7C;AAA8E,MAAA,qBAAqB,EAAEP;AAArG;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA,kBADF;AAQD;;GAhGuBb,M;UACLlC,W,EACDC,U,EACFF,W,EACIA,W,EACaA,W,EACdA,W,EACEA,W,EACIA,W,EACIA,W,EACFA,W;;;KAVHmC,M","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport { Helmet } from 'react-helmet';\r\n\r\n// app\r\nimport { ClaimsView } from './Claims.view';\r\nimport {\r\n  postClaimDetailsInformationSuccess,\r\n  getLossInformation,\r\n  getClaimsPreviewInformation,\r\n  selectCatCodes,\r\n  selectLossQualifiers,\r\n  selectPriorities,\r\n  selectSettlementCurrency,\r\n  selectReferralResponse,\r\n  selectClaimData,\r\n  setClaimData,\r\n  claimsPolicyData,\r\n  getPolicyInformation,\r\n  getClaimantNames,\r\n  getInterest,\r\n  getBEAdjuster,\r\n  getLossQualifiers,\r\n  getCatCodes,\r\n  getPriorityLevels,\r\n  getSettlementCurrency,\r\n  selectClaimsPolicyData,\r\n  getClaimDetailsSuccess,\r\n  setClaimsStepperControl,\r\n  getComplexityValues,\r\n  getReferralValues,\r\n  getReferralResponse,\r\n  getQueryCodeList,\r\n  resetLossSubmission,\r\n  resetLossPolicyClaimData,\r\n} from 'stores';\r\nimport * as utils from 'utils';\r\nimport config from 'config';\r\n\r\nexport default function Claims() {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const brand = useSelector((state) => state.ui.brand);\r\n  const claimData = useSelector(selectClaimData);\r\n  const claimCurrentPolicyData = useSelector(selectClaimsPolicyData);\r\n  const catCodes = useSelector(selectCatCodes);\r\n  const priorities = useSelector(selectPriorities);\r\n  const lossQualifiers = useSelector(selectLossQualifiers);\r\n  const settlementCurrency = useSelector(selectSettlementCurrency);\r\n  const referralResponse = useSelector(selectReferralResponse);\r\n\r\n  const handleRegisterNewLoss = () => {\r\n    dispatch(resetLossSubmission());\r\n    dispatch(resetLossPolicyClaimData());\r\n    history.push({\r\n      pathname: config.routes.claimsFNOL.newLoss,\r\n      state: {\r\n        isNewLoss: true,\r\n      },\r\n    });\r\n    dispatch(setClaimData({}));\r\n  };\r\n\r\n  const handleComplexityRulesManagement = () => {\r\n    history.push(config.routes.claimsFNOL.complexityRules);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (utils.generic.isInvalidOrEmptyArray(catCodes)) {\r\n      dispatch(getCatCodes());\r\n    }\r\n    if (utils.generic.isInvalidOrEmptyArray(priorities)) {\r\n      dispatch(getPriorityLevels());\r\n    }\r\n    if (utils.generic.isInvalidOrEmptyArray(lossQualifiers)) {\r\n      dispatch(getLossQualifiers());\r\n    }\r\n    if (utils.generic.isInvalidOrEmptyArray(settlementCurrency)) {\r\n      dispatch(getSettlementCurrency());\r\n    }\r\n    if (utils.generic.isInvalidOrEmptyArray(referralResponse)) {\r\n      dispatch(getReferralResponse());\r\n    }\r\n    dispatch(setClaimData({}));\r\n    dispatch(getQueryCodeList());\r\n    dispatch(setClaimsStepperControl(0));\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    if (claimData?.claimId) {\r\n      dispatch(getLossInformation({ lossDetailsId: claimData.lossId, sourceIdParams: claimData.sourceID }));\r\n      dispatch(\r\n        claimsPolicyData({\r\n          xbInstanceID: claimData.xbInstanceID,\r\n          xbPolicyID: claimData.xbPolicyID,\r\n          policyNumber: claimData.policyNumber,\r\n          divisionID: claimData.divisionID,\r\n        })\r\n      );\r\n    }\r\n  }, [claimData]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    if (claimData?.claimId && claimCurrentPolicyData?.xbInstanceID) {\r\n      async function fetchData() {\r\n        dispatch(getPolicyInformation());\r\n        dispatch(getInterest());\r\n        dispatch(getBEAdjuster());\r\n        dispatch(getClaimantNames());\r\n\r\n        dispatch(postClaimDetailsInformationSuccess(claimData.claimId));\r\n        const claimDetails = await dispatch(\r\n          getClaimsPreviewInformation({\r\n            claimId: claimData?.claimId,\r\n            claimRefParams: claimData?.claimReference,\r\n            sourceIdParams: claimData?.sourceID,\r\n            divisionIDParams: claimData?.divisionID,\r\n          })\r\n        );\r\n        dispatch(getClaimDetailsSuccess(claimDetails));\r\n        dispatch(getComplexityValues());\r\n        dispatch(getReferralValues());\r\n      }\r\n      fetchData();\r\n    }\r\n  }, [claimCurrentPolicyData]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>{`${utils.string.t('claims.title')} - ${utils.app.getAppName(brand)}`}</title>\r\n      </Helmet>\r\n      <ClaimsView handleComplexityRulesManagement={handleComplexityRulesManagement} handleRegisterNewLoss={handleRegisterNewLoss} />\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}