{"ast":null,"code":"import _defineProperty from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport config from 'config';\nimport xorBy from 'lodash/xorBy';\nimport has from 'lodash/has';\nimport get from 'lodash/get';\nimport omit from 'lodash/omit';\nimport * as utils from 'utils';\nimport { firstBy } from 'thenby';\nvar initialState = {\n  addresses: [],\n  leads: [],\n  leadsLoading: false,\n  leadsEmpty: false,\n  list: {\n    items: [],\n    itemsTotal: 0,\n    page: 1,\n    pageSize: config.ui.pagination.default,\n    pageTotal: 0,\n    query: '',\n    sortBy: 'id',\n    sortType: 'numeric',\n    sortDirection: 'desc'\n  },\n  selected: {\n    title: '',\n    visits: [],\n    addresses: [],\n    loading: false,\n    editing: false\n  },\n  editingInProgress: {}\n};\n\nvar parsedTrip = function parsedTrip(trip) {\n  return _objectSpread(_objectSpread({}, omit(trip, ['visit'])), {}, {\n    visits: sortedVisits(trip.visit).map(function (visit) {\n      // adding a \"location\" property to the visits by matching the client ID of addresses and visits\n      var location = trip.addresses.find(function (address) {\n        var addressClientId = get(address, 'client.id');\n        var visitClientId = get(visit, 'client.id');\n        return addressClientId && visitClientId && addressClientId === visitClientId;\n      });\n      return _objectSpread(_objectSpread({}, visit), {}, {\n        location: location\n      });\n    })\n  });\n};\n\nvar sortedVisits = function sortedVisits(visits) {\n  // abort\n  if (!utils.generic.isValidArray(visits)) {\n    return [];\n  }\n\n  return visits.sort(firstBy(utils.sort.array('date', 'visitingDate')).thenBy('id'));\n};\n\nvar tripReducers = function tripReducers() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'TRIP_ADDRESSES_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addresses: [action.payload]\n      });\n\n    case 'TRIP_ADDRESSES_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addresses: []\n      });\n\n    case 'TRIP_LEADS_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        leadsLoading: true,\n        leadsEmpty: false\n      });\n\n    case 'TRIP_LEADS_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        leads: action.payload,\n        leadsLoading: false,\n        leadsEmpty: action.payload ? action.payload.length <= 0 : false\n      });\n\n    case 'TRIP_LEADS_GET_FAILURE':\n    case 'TRIP_LEADS_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        leads: [],\n        leadsLoading: false,\n        leadsEmpty: false\n      });\n\n    case 'TRIP_SELECTED_TOGGLE_EDITING':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selected: _objectSpread(_objectSpread({}, state.selected), {}, {\n          editing: action.payload\n        }),\n        editingInProgress: _objectSpread(_objectSpread({}, state.editingInProgress), {}, {\n          title: action.payload ? state.selected.title : '',\n          visits: action.payload ? state.selected.visits : []\n        })\n      });\n\n    case 'TRIP_SELECTED_TOGGLE_VISIT':\n      var toggleVisitKey = state.selected.editing ? 'editingInProgress' : 'selected';\n      var toggleVisitArray = state.selected.editing ? state.editingInProgress.visits : state.selected.visits;\n      return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, toggleVisitKey, _objectSpread(_objectSpread({}, state[toggleVisitKey]), {}, {\n        visits: sortedVisits(xorBy(toggleVisitArray, [action.payload], 'id'))\n      })));\n\n    case 'TRIP_SELECTED_EDIT_VISIT':\n      var editVisitKey = state.selected.editing ? 'editingInProgress' : 'selected';\n      var editVisitArray = state.selected.editing ? state.editingInProgress.visits : state.selected.visits;\n      return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, editVisitKey, _objectSpread(_objectSpread({}, state[editVisitKey]), {}, {\n        visits: sortedVisits(editVisitArray.map(function (visit) {\n          if (visit.id === action.payload.id) {\n            visit = _objectSpread(_objectSpread(_objectSpread({}, visit), has(action.payload, 'visitingDate') && {\n              visitingDate: action.payload.visitingDate\n            }), has(action.payload, 'users') && {\n              users: action.payload.users\n            });\n          }\n\n          return visit;\n        }))\n      })));\n\n    case 'TRIP_SELECTED_EDIT_DETAILS':\n      var editDetailsKey = state.selected.editing ? 'editingInProgress' : 'selected';\n      return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, editDetailsKey, _objectSpread(_objectSpread(_objectSpread({}, state[editDetailsKey]), action.payload), action.payload.title && {\n        title: action.payload.title.trim()\n      })));\n\n    case 'TRIP_SELECTED_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selected: _objectSpread({}, initialState.selected)\n      });\n\n    case 'TRIP_EDITING_IN_PROGRESS_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        editingInProgress: {}\n      });\n\n    case 'TRIP_BY_ID_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selected: _objectSpread(_objectSpread({}, state.selected), {}, {\n          loading: true\n        })\n      });\n\n    case 'TRIP_BY_ID_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selected: _objectSpread(_objectSpread(_objectSpread({}, state.selected), parsedTrip(action.payload)), {}, {\n          loading: false\n        })\n      });\n\n    case 'TRIP_BY_ID_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selected: _objectSpread(_objectSpread({}, state.selected), {}, {\n          loading: false\n        })\n      });\n\n    case 'TRIP_PUT_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        list: _objectSpread(_objectSpread({}, state.list), {}, {\n          items: state.list.items.map(function (item) {\n            return action.payload.id === item.id ? parsedTrip(action.payload) : item;\n          })\n        }),\n        selected: _objectSpread(_objectSpread(_objectSpread({}, state.selected), parsedTrip(action.payload)), {}, {\n          loading: false\n        })\n      });\n\n    case 'TRIP_POST_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selected: _objectSpread(_objectSpread(_objectSpread({}, state.selected), parsedTrip(action.payload)), {}, {\n          loading: false\n        })\n      });\n\n    case 'TRIP_LIST_GET_SUCCESS':\n      var listTrips = utils.generic.isValidArray(action.payload.items) ? action.payload.items : []; // below, we're renaming \"trip.visit\" to be \"trip.visits\"\n      // the API returns the key as \"visit\" because the DB table is named that way\n      // it is an array of multiple visits, so we're keeping the F/E pattern of naming arrays using plural\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        list: _objectSpread(_objectSpread({}, state.list), {}, {\n          items: listTrips.map(function (trip) {\n            return parsedTrip(trip);\n          })\n        }, utils.api.pagination(action.payload))\n      });\n\n    case 'TRIP_DELETE_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        list: _objectSpread(_objectSpread({}, state.list), {}, {\n          itemsTotal: state.list.itemsTotal - 1,\n          items: state.list.items.filter(function (item) {\n            return item.id !== action.payload;\n          })\n        }),\n        selected: state.selected && state.selected.id === action.payload ? _objectSpread({}, initialState.selected) : state.selected\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default tripReducers;","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/trip/trip.reducers.js"],"names":["config","xorBy","has","get","omit","utils","firstBy","initialState","addresses","leads","leadsLoading","leadsEmpty","list","items","itemsTotal","page","pageSize","ui","pagination","default","pageTotal","query","sortBy","sortType","sortDirection","selected","title","visits","loading","editing","editingInProgress","parsedTrip","trip","sortedVisits","visit","map","location","find","address","addressClientId","visitClientId","generic","isValidArray","sort","array","thenBy","tripReducers","state","action","type","payload","length","toggleVisitKey","toggleVisitArray","editVisitKey","editVisitArray","id","visitingDate","users","editDetailsKey","trim","item","listTrips","api","filter"],"mappings":"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","sourcesContent":["import config from 'config';\r\nimport xorBy from 'lodash/xorBy';\r\nimport has from 'lodash/has';\r\nimport get from 'lodash/get';\r\nimport omit from 'lodash/omit';\r\nimport * as utils from 'utils';\r\nimport { firstBy } from 'thenby';\r\n\r\nconst initialState = {\r\n  addresses: [],\r\n  leads: [],\r\n  leadsLoading: false,\r\n  leadsEmpty: false,\r\n  list: {\r\n    items: [],\r\n    itemsTotal: 0,\r\n    page: 1,\r\n    pageSize: config.ui.pagination.default,\r\n    pageTotal: 0,\r\n    query: '',\r\n    sortBy: 'id',\r\n    sortType: 'numeric',\r\n    sortDirection: 'desc',\r\n  },\r\n  selected: {\r\n    title: '',\r\n    visits: [],\r\n    addresses: [],\r\n    loading: false,\r\n    editing: false,\r\n  },\r\n  editingInProgress: {},\r\n};\r\n\r\nconst parsedTrip = (trip) => {\r\n  return {\r\n    ...omit(trip, ['visit']),\r\n    visits: sortedVisits(trip.visit).map((visit) => {\r\n      // adding a \"location\" property to the visits by matching the client ID of addresses and visits\r\n      const location = trip.addresses.find((address) => {\r\n        const addressClientId = get(address, 'client.id');\r\n        const visitClientId = get(visit, 'client.id');\r\n\r\n        return addressClientId && visitClientId && addressClientId === visitClientId;\r\n      });\r\n\r\n      return {\r\n        ...visit,\r\n        location,\r\n      };\r\n    }),\r\n  };\r\n};\r\n\r\nconst sortedVisits = (visits) => {\r\n  // abort\r\n  if (!utils.generic.isValidArray(visits)) {\r\n    return [];\r\n  }\r\n\r\n  return visits.sort(firstBy(utils.sort.array('date', 'visitingDate')).thenBy('id'));\r\n};\r\n\r\nconst tripReducers = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'TRIP_ADDRESSES_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        addresses: [action.payload],\r\n      };\r\n\r\n    case 'TRIP_ADDRESSES_GET_FAILURE':\r\n      return {\r\n        ...state,\r\n        addresses: [],\r\n      };\r\n\r\n    case 'TRIP_LEADS_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        leadsLoading: true,\r\n        leadsEmpty: false,\r\n      };\r\n\r\n    case 'TRIP_LEADS_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        leads: action.payload,\r\n        leadsLoading: false,\r\n        leadsEmpty: action.payload ? action.payload.length <= 0 : false,\r\n      };\r\n\r\n    case 'TRIP_LEADS_GET_FAILURE':\r\n    case 'TRIP_LEADS_RESET':\r\n      return {\r\n        ...state,\r\n        leads: [],\r\n        leadsLoading: false,\r\n        leadsEmpty: false,\r\n      };\r\n\r\n    case 'TRIP_SELECTED_TOGGLE_EDITING':\r\n      return {\r\n        ...state,\r\n        selected: {\r\n          ...state.selected,\r\n          editing: action.payload,\r\n        },\r\n        editingInProgress: {\r\n          ...state.editingInProgress,\r\n          title: action.payload ? state.selected.title : '',\r\n          visits: action.payload ? state.selected.visits : [],\r\n        },\r\n      };\r\n\r\n    case 'TRIP_SELECTED_TOGGLE_VISIT':\r\n      const toggleVisitKey = state.selected.editing ? 'editingInProgress' : 'selected';\r\n      const toggleVisitArray = state.selected.editing ? state.editingInProgress.visits : state.selected.visits;\r\n\r\n      return {\r\n        ...state,\r\n        [toggleVisitKey]: {\r\n          ...state[toggleVisitKey],\r\n          visits: sortedVisits(xorBy(toggleVisitArray, [action.payload], 'id')),\r\n        },\r\n      };\r\n\r\n    case 'TRIP_SELECTED_EDIT_VISIT':\r\n      const editVisitKey = state.selected.editing ? 'editingInProgress' : 'selected';\r\n      const editVisitArray = state.selected.editing ? state.editingInProgress.visits : state.selected.visits;\r\n\r\n      return {\r\n        ...state,\r\n        [editVisitKey]: {\r\n          ...state[editVisitKey],\r\n          visits: sortedVisits(\r\n            editVisitArray.map((visit) => {\r\n              if (visit.id === action.payload.id) {\r\n                visit = {\r\n                  ...visit,\r\n                  ...(has(action.payload, 'visitingDate') && { visitingDate: action.payload.visitingDate }),\r\n                  ...(has(action.payload, 'users') && { users: action.payload.users }),\r\n                };\r\n              }\r\n\r\n              return visit;\r\n            })\r\n          ),\r\n        },\r\n      };\r\n\r\n    case 'TRIP_SELECTED_EDIT_DETAILS':\r\n      const editDetailsKey = state.selected.editing ? 'editingInProgress' : 'selected';\r\n\r\n      return {\r\n        ...state,\r\n        [editDetailsKey]: {\r\n          ...state[editDetailsKey],\r\n          ...action.payload,\r\n          ...(action.payload.title && { title: action.payload.title.trim() }),\r\n        },\r\n      };\r\n\r\n    case 'TRIP_SELECTED_RESET':\r\n      return {\r\n        ...state,\r\n        selected: {\r\n          ...initialState.selected,\r\n        },\r\n      };\r\n\r\n    case 'TRIP_EDITING_IN_PROGRESS_RESET':\r\n      return {\r\n        ...state,\r\n        editingInProgress: {},\r\n      };\r\n\r\n    case 'TRIP_BY_ID_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        selected: {\r\n          ...state.selected,\r\n          loading: true,\r\n        },\r\n      };\r\n\r\n    case 'TRIP_BY_ID_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        selected: {\r\n          ...state.selected,\r\n          ...parsedTrip(action.payload),\r\n          loading: false,\r\n        },\r\n      };\r\n\r\n    case 'TRIP_BY_ID_GET_FAILURE':\r\n      return {\r\n        ...state,\r\n        selected: {\r\n          ...state.selected,\r\n          loading: false,\r\n        },\r\n      };\r\n\r\n    case 'TRIP_PUT_SUCCESS':\r\n      return {\r\n        ...state,\r\n        list: {\r\n          ...state.list,\r\n          items: state.list.items.map((item) => {\r\n            return action.payload.id === item.id ? parsedTrip(action.payload) : item;\r\n          }),\r\n        },\r\n        selected: {\r\n          ...state.selected,\r\n          ...parsedTrip(action.payload),\r\n          loading: false,\r\n        },\r\n      };\r\n\r\n    case 'TRIP_POST_SUCCESS':\r\n      return {\r\n        ...state,\r\n        selected: {\r\n          ...state.selected,\r\n          ...parsedTrip(action.payload),\r\n          loading: false,\r\n        },\r\n      };\r\n\r\n    case 'TRIP_LIST_GET_SUCCESS':\r\n      const listTrips = utils.generic.isValidArray(action.payload.items) ? action.payload.items : [];\r\n\r\n      // below, we're renaming \"trip.visit\" to be \"trip.visits\"\r\n      // the API returns the key as \"visit\" because the DB table is named that way\r\n      // it is an array of multiple visits, so we're keeping the F/E pattern of naming arrays using plural\r\n      return {\r\n        ...state,\r\n        list: {\r\n          ...state.list,\r\n          items: listTrips.map((trip) => parsedTrip(trip)),\r\n          ...utils.api.pagination(action.payload),\r\n        },\r\n      };\r\n\r\n    case 'TRIP_DELETE_SUCCESS':\r\n      return {\r\n        ...state,\r\n        list: {\r\n          ...state.list,\r\n          itemsTotal: state.list.itemsTotal - 1,\r\n          items: state.list.items.filter((item) => {\r\n            return item.id !== action.payload;\r\n          }),\r\n        },\r\n        selected: state.selected && state.selected.id === action.payload ? { ...initialState.selected } : state.selected,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default tripReducers;\r\n"]},"metadata":{},"sourceType":"module"}