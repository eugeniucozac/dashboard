{"ast":null,"code":"import \"core-js/modules/es.array.concat\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ClaimsTasksTabTableRow\\\\ClaimsTasksTabTableRow.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router';\nimport { useSelector, useDispatch } from 'react-redux'; // app\n\nimport { ClaimsTasksTabTableRowView } from './ClaimsTasksTabTableRow.view';\nimport { selectClaimsProcessingTasksSelected, getCurrencyPurchasedValue, getSancCheckAssociatedTask, selectCaseTaskTypeView, checkIsUserClaim } from 'stores';\nimport config from 'config';\nimport * as constants from 'consts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ClaimsTasksTabTableRow(props) {\n  _s();\n\n  var dispatch = useDispatch();\n  var history = useHistory();\n  var caseTaskTypeView = useSelector(selectCaseTaskTypeView);\n  var user = useSelector(function (state) {\n    return state.user;\n  });\n  var taskActionItems = [];\n\n  var clickTask = function clickTask(taskObj) {\n    return function (event) {\n      if (taskObj === null || taskObj === void 0 ? void 0 : taskObj.taskRef) {\n        var _user$emailId, _taskObj$processOwner;\n\n        event.stopPropagation();\n\n        if ((taskObj === null || taskObj === void 0 ? void 0 : taskObj.taskDefKey) === constants.SANCTIONS_CHECK_KEY) {\n          dispatch(getSancCheckAssociatedTask(taskObj === null || taskObj === void 0 ? void 0 : taskObj.parentTaskId));\n        }\n\n        var isUserClaim = ((_user$emailId = user.emailId) === null || _user$emailId === void 0 ? void 0 : _user$emailId.toLowerCase()) === (taskObj === null || taskObj === void 0 ? void 0 : (_taskObj$processOwner = taskObj.processOwner) === null || _taskObj$processOwner === void 0 ? void 0 : _taskObj$processOwner.toLowerCase());\n        dispatch(checkIsUserClaim(isUserClaim));\n        dispatch(selectClaimsProcessingTasksSelected(taskObj));\n\n        if ((taskObj === null || taskObj === void 0 ? void 0 : taskObj.taskDefKey) === constants.ADVICE_AND_SETTLEMENT) {\n          dispatch(getCurrencyPurchasedValue(taskObj === null || taskObj === void 0 ? void 0 : taskObj.processId));\n        }\n\n        if (taskObj.taskType === constants.TASK_ROW_TYPE.rfi) {\n          history.push(\"\".concat(config.routes.claimsProcessing.rfi, \"/\").concat(taskObj.taskRef));\n        } else {\n          history.push(\"\".concat(config.routes.claimsProcessing.task, \"/\").concat(taskObj.taskRef));\n        }\n      }\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(ClaimsTasksTabTableRowView, _objectSpread(_objectSpread({}, props), {}, {\n    taskActionItems: taskActionItems,\n    isPremiumProcessing: props.isPremiumProcessing,\n    caseTaskTypeView: caseTaskTypeView,\n    handlers: {\n      selectTask: props.handlers.selectTask,\n      clickTask: clickTask\n    }\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ClaimsTasksTabTableRow, \"rgnOMM63wPge9o2+GxBJ2ceDn0w=\", false, function () {\n  return [useDispatch, useHistory, useSelector, useSelector];\n});\n\n_c = ClaimsTasksTabTableRow;\nClaimsTasksTabTableRow.displayName = \"ClaimsTasksTabTableRow\";\nClaimsTasksTabTableRow.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"ClaimsTasksTabTableRow\"\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\modules\\\\ClaimsTasksTabTableRow\\\\ClaimsTasksTabTableRow.js\"] = {\n    name: \"ClaimsTasksTabTableRow\",\n    docgenInfo: ClaimsTasksTabTableRow.__docgenInfo,\n    path: \"src\\\\modules\\\\ClaimsTasksTabTableRow\\\\ClaimsTasksTabTableRow.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimsTasksTabTableRow\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ClaimsTasksTabTableRow/ClaimsTasksTabTableRow.js"],"names":["React","PropTypes","useHistory","useSelector","useDispatch","ClaimsTasksTabTableRowView","selectClaimsProcessingTasksSelected","getCurrencyPurchasedValue","getSancCheckAssociatedTask","selectCaseTaskTypeView","checkIsUserClaim","config","constants","ClaimsTasksTabTableRow","props","dispatch","history","caseTaskTypeView","user","state","taskActionItems","clickTask","taskObj","event","taskRef","stopPropagation","taskDefKey","SANCTIONS_CHECK_KEY","parentTaskId","isUserClaim","emailId","toLowerCase","processOwner","ADVICE_AND_SETTLEMENT","processId","taskType","TASK_ROW_TYPE","rfi","push","routes","claimsProcessing","task","isPremiumProcessing","selectTask","handlers"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useHistory } from 'react-router';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\n// app\r\nimport { ClaimsTasksTabTableRowView } from './ClaimsTasksTabTableRow.view';\r\nimport {\r\n  selectClaimsProcessingTasksSelected,\r\n  getCurrencyPurchasedValue,\r\n  getSancCheckAssociatedTask,\r\n  selectCaseTaskTypeView,\r\n  checkIsUserClaim,\r\n} from 'stores';\r\nimport config from 'config';\r\nimport * as constants from 'consts';\r\n\r\n\r\nexport default function ClaimsTasksTabTableRow(props) {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const caseTaskTypeView = useSelector(selectCaseTaskTypeView);\r\n  const user = useSelector((state) => state.user);\r\n\r\n  let taskActionItems = [\r\n    \r\n  ];\r\n\r\n  const clickTask = (taskObj) => (event) => {\r\n      if (taskObj?.taskRef) {\r\n        event.stopPropagation();\r\n        if (taskObj?.taskDefKey === constants.SANCTIONS_CHECK_KEY) {\r\n          dispatch(getSancCheckAssociatedTask(taskObj?.parentTaskId));\r\n        }\r\n        const isUserClaim = user.emailId?.toLowerCase() === taskObj?.processOwner?.toLowerCase();\r\n        dispatch(checkIsUserClaim(isUserClaim));\r\n        dispatch(selectClaimsProcessingTasksSelected(taskObj));\r\n        if (taskObj?.taskDefKey === constants.ADVICE_AND_SETTLEMENT) {\r\n          dispatch(getCurrencyPurchasedValue(taskObj?.processId));\r\n        }\r\n        if (taskObj.taskType === constants.TASK_ROW_TYPE.rfi) {\r\n          history.push(`${config.routes.claimsProcessing.rfi}/${taskObj.taskRef}`);\r\n        } else {\r\n          history.push(`${config.routes.claimsProcessing.task}/${taskObj.taskRef}`);\r\n        }\r\n      }\r\n  };\r\n\r\n  return (\r\n    <ClaimsTasksTabTableRowView\r\n      {...props}\r\n      taskActionItems={taskActionItems}\r\n      isPremiumProcessing={props.isPremiumProcessing}\r\n      caseTaskTypeView={caseTaskTypeView}\r\n      handlers={{\r\n        selectTask: props.handlers.selectTask,\r\n        clickTask\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}