{"ast":null,"code":"import _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _defineProperty from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\MarketSheetTable\\\\MarketSheetTable.js\";\nimport React, { PureComponent, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport get from 'lodash/get';\nimport has from 'lodash/has';\nimport xor from 'lodash/xor';\nimport orderBy from 'lodash/orderBy';\nimport toNumber from 'lodash/toNumber';\nimport isEmpty from 'lodash/isEmpty';\nimport isNumber from 'lodash/isNumber'; // app\n\nimport styles from './MarketSheetTable.styles.js';\nimport { TableHead, Translate } from 'components';\nimport { MarketTableRow, PolicyTableRow } from 'modules';\nimport { bulkPlacementToggle, deletePlacementPolicy, putPlacementEditPolicy, postPlacementEditQuote, selectPolicyMarket, showModal } from 'stores';\nimport * as utils from 'utils'; // mui\n\nimport { Table, TableBody, TableCell, withStyles, TableRow } from '@material-ui/core'; // state\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    configVars: state.config.vars,\n    placementBulkType: get(state, 'placement.bulk.type', ''),\n    placementBulkItems: get(state, 'placement.bulk.items', [])\n  };\n}; // dispatch\n\n\nvar mapDispatchToProps = {\n  selectPolicyMarket: selectPolicyMarket,\n  bulkPlacementToggle: bulkPlacementToggle,\n  deletePlacementPolicy: deletePlacementPolicy,\n  putPlacementEditPolicy: putPlacementEditPolicy,\n  postPlacementEditQuote: postPlacementEditQuote,\n  showModal: showModal\n};\nexport var MarketSheetTable = /*#__PURE__*/function (_PureComponent) {\n  _inherits(MarketSheetTable, _PureComponent);\n\n  var _super = _createSuper(MarketSheetTable);\n\n  function MarketSheetTable(props) {\n    var _this;\n\n    _classCallCheck(this, MarketSheetTable);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleEditPolicyClick\", function (popoverData) {\n      _this.props.showModal({\n        component: 'EDIT_POLICY',\n        props: {\n          title: 'placement.sheet.editPolicy',\n          subtitle: popoverData.title,\n          fullWidth: true,\n          maxWidth: 'sm',\n          componentProps: {\n            policy: popoverData.policy\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDeleteClick\", function (popoverData) {\n      _this.props.showModal({\n        component: 'CONFIRM_DELETE',\n        props: {\n          title: 'placement.sheet.deletePolicy',\n          subtitle: popoverData.title,\n          fullWidth: true,\n          maxWidth: 'xs',\n          disableAutoFocus: true,\n          componentProps: {\n            submitHandler: function submitHandler() {\n              return _this.props.deletePlacementPolicy(get(popoverData, 'policy.id'));\n            }\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleAddMarketClick\", function (popoverData) {\n      _this.props.showModal({\n        component: 'ADD_MARKET',\n        props: {\n          title: 'placement.sheet.addMarket',\n          subtitle: popoverData.title,\n          fullWidth: true,\n          maxWidth: 'sm',\n          disableAutoFocus: true,\n          componentProps: {\n            policy: popoverData.policy\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleCreateWhitespaceClick\", function (popoverData) {\n      _this.props.showModal({\n        component: 'CREATE_IN_WHITESPACE',\n        props: {\n          title: 'placement.sheet.createInWhitespace',\n          fullWidth: true,\n          maxWidth: 'sm',\n          disableAutoFocus: true,\n          componentProps: {\n            policy: popoverData.policy\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleEditQuoteClick\", function (popoverData) {\n      _this.props.showModal({\n        component: 'EDIT_QUOTE',\n        props: {\n          title: 'placement.sheet.editQuote',\n          subtitle: popoverData.title,\n          fullWidth: true,\n          maxWidth: 'sm',\n          disableAutoFocus: true,\n          componentProps: {\n            policy: popoverData.policy,\n            policyMarket: popoverData.policyMarket\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleInlineEditClick\", function (field, id) {\n      return function () {\n        _this.setState({\n          editing: _defineProperty({}, field, id)\n        });\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleInlineEditClickAway\", function (values, errors, submitForm) {\n      return function (field, object) {\n        return function (event) {\n          var isDiff = object[field] !== values[field];\n          var isTruthy = Boolean(values[field]) || values[field] === 0;\n          var isFalsy = !Boolean(values[field]);\n          var wasTruthy = Boolean(object[field]) || object[field] === 0;\n          var isValuesChanged = isDiff && isTruthy || isDiff && wasTruthy && isFalsy; // if values have changed -> submit form\n\n          if (isValuesChanged) {\n            submitForm();\n          } // if errors, prevent changing editing fields\n\n\n          if (isEmpty(errors)) {\n            _this.setState({\n              editing: {}\n            });\n          }\n        };\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleToggleGroup\", function (params) {\n      return function (event) {\n        var values = get(_this.state, \"expanded.groups.\".concat(params.year, \".\").concat(params.option), []);\n\n        if (values.includes(params.key)) {\n          values = values.filter(function (value) {\n            return value !== params.key;\n          });\n        } else {\n          values.push(params.key);\n        }\n\n        _this.setState(function (currentState) {\n          return _objectSpread(_objectSpread({}, currentState), {}, {\n            expanded: _objectSpread(_objectSpread({}, currentState.expanded), {}, {\n              groups: _defineProperty({}, params.year, _defineProperty({}, params.option, _toConsumableArray(values)))\n            })\n          });\n        });\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleToggleLayer\", function (markets) {\n      return function (params) {\n        return function (event) {\n          if (!markets || markets.length <= 0) return;\n          var values = get(_this.state, \"expanded.policies.\".concat(params.year, \".\").concat(params.option), []);\n\n          _this.setState(function (currentState) {\n            return _objectSpread(_objectSpread({}, currentState), {}, {\n              expanded: _objectSpread(_objectSpread({}, currentState.expanded), {}, {\n                policies: _defineProperty({}, params.year, _defineProperty({}, params.option, xor(values, [params.policy])))\n              })\n            });\n          });\n        };\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSelectLayer\", function (policyId) {\n      return function (event) {\n        event.stopPropagation();\n\n        _this.props.bulkPlacementToggle('policy', policyId);\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleToggleMarket\", function (marketId) {\n      return function (event) {\n        _this.props.selectPolicyMarket(marketId);\n\n        _this.setState({\n          expanded: _objectSpread(_objectSpread({}, _this.state.expanded), {}, {\n            markets: marketId\n          })\n        });\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSelectMarket\", function (marketId) {\n      return function (event) {\n        event.stopPropagation();\n\n        _this.props.bulkPlacementToggle('policyMarket', marketId);\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getSelectedBulkMarketsByPolicy\", function (policy) {\n      var bulkItems = get(_this.props, 'placementBulkItems', []);\n      var markets = get(policy, 'markets') || [];\n      return markets.filter(function (marketObj) {\n        return has(marketObj, 'id') && bulkItems.includes(marketObj.id);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setExpandedRows\", function (policies) {\n      var _this$props = _this.props,\n          year = _this$props.year,\n          option = _this$props.option;\n      var policiesGrouped = utils.policies.getByBusinessType(policies);\n      var businessTypeId = toNumber(get(policiesGrouped, '[0][0]'));\n      var isSingleLayer = get(policiesGrouped, '[0][1]', []).length === 1; // always expand the first group on load\n\n      if (businessTypeId) {\n        _this.handleToggleGroup({\n          year: year,\n          option: option,\n          key: businessTypeId\n        })();\n      } // expand layer if it's the only on in the group\n\n\n      if (isSingleLayer) {\n        var markets = get(policiesGrouped, '[0][1][0].markets');\n\n        _this.handleToggleLayer(markets)({\n          year: year,\n          option: option,\n          policy: get(policiesGrouped, '[0][1][0].id')\n        })();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isRowSelected\", function (type, id) {\n      var expanded = _this.state.expanded;\n      var _this$props2 = _this.props,\n          year = _this$props2.year,\n          option = _this$props2.option;\n      return get(expanded, \"\".concat(type, \".\").concat(year, \".\").concat(option), []).includes(id);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isRowEditing\", function (entries, id) {\n      return Object.entries(entries).filter(function (e) {\n        return e[1] === id;\n      }).map(function (e) {\n        return e[0];\n      });\n    });\n\n    _this.state = {\n      expanded: {\n        groups: [],\n        policies: [],\n        markets: null\n      },\n      editing: {}\n    };\n    return _this;\n  }\n\n  _createClass(MarketSheetTable, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var policies = this.props.policies;\n\n      if (utils.generic.isValidArray(policies, true)) {\n        this.setExpandedRows(policies);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var prevPolicies = prevProps.policies;\n      var nextPolicies = this.props.policies;\n      var noPreviousPolicies = !prevPolicies || prevPolicies && prevPolicies.length <= 0;\n      var newPolicies = utils.generic.isValidArray(nextPolicies) && nextPolicies.length > 0; // parse for first time\n\n      if (noPreviousPolicies && newPolicies) {\n        this.setExpandedRows(nextPolicies);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props3 = this.props,\n          year = _this$props3.year,\n          option = _this$props3.option,\n          policies = _this$props3.policies,\n          capacities = _this$props3.capacities,\n          configVars = _this$props3.configVars,\n          placementBulkType = _this$props3.placementBulkType,\n          placementBulkItems = _this$props3.placementBulkItems,\n          putPlacementEditPolicy = _this$props3.putPlacementEditPolicy,\n          postPlacementEditQuote = _this$props3.postPlacementEditQuote,\n          printView = _this$props3.printView,\n          rowLimit = _this$props3.rowLimit,\n          classes = _this$props3.classes;\n      var _this$state = this.state,\n          expanded = _this$state.expanded,\n          editing = _this$state.editing;\n      var cols = [{\n        id: 'layer'\n      }, {\n        id: 'premium',\n        label: /*#__PURE__*/_jsxDEV(Translate, {\n          label: \"placement.generic.premium\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 31\n        }, this),\n        align: 'center',\n        compact: true\n      }, {\n        id: 'written',\n        label: /*#__PURE__*/_jsxDEV(Translate, {\n          label: \"placement.generic.written\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 31\n        }, this),\n        align: 'center',\n        compact: true\n      }, {\n        id: 'status',\n        label: /*#__PURE__*/_jsxDEV(Translate, {\n          label: \"placement.generic.status\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 30\n        }, this),\n        align: 'center',\n        compact: true\n      }, {\n        id: 'actions',\n        empty: true\n      }];\n      return /*#__PURE__*/_jsxDEV(Table, {\n        \"data-testid\": \"market-sheet-table\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          columns: cols\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 9\n        }, this), utils.policies.getByBusinessType(policies).map(function (arr) {\n          var businessTypeId = toNumber(arr[0]);\n          var policies = orderBy(arr[1], ['excess', 'amount'], ['asc', 'asc']);\n          var bulkType = placementBulkType;\n          var isBulkPolicy = placementBulkType === 'policy';\n          var isBulkMarket = placementBulkType === 'policyMarket';\n          return /*#__PURE__*/_jsxDEV(TableBody, {\n            children: policies.map(function (policy, index) {\n              var isLayerSelected = _this2.isRowSelected('policies', policy.id);\n\n              var isNextSelected = policies[index + 1] && _this2.isRowSelected('policies', policies[index + 1].id);\n\n              var isLayerChecked = isBulkPolicy && placementBulkItems.includes(policy.id);\n              var isLayerDisabled = Boolean(bulkType && !isBulkPolicy);\n              var isLayerIndeterminate = isLayerDisabled && _this2.getSelectedBulkMarketsByPolicy(policy).length > 0;\n\n              var isLayerEditing = _this2.isRowEditing(editing, policy.id);\n\n              var markets = get(policy, 'markets') || [];\n              var marketsOrdered = utils.markets.order(markets);\n              var toggleOptions = {\n                year: year,\n                option: option,\n                policy: policy.id\n              };\n              var limitedRows = rowLimit && isNumber(rowLimit) ? utils.placementPDF.getAccumulatedRowCount(marketsOrdered, rowLimit) : marketsOrdered;\n              var layerFormFields = [{\n                name: 'id',\n                type: 'hidden',\n                value: policy.id\n              }, {\n                name: 'departmentId',\n                type: 'hidden',\n                value: policy.departmentId\n              }, {\n                name: 'businessTypeId',\n                type: 'hidden',\n                value: policy.businessTypeId\n              }, {\n                name: 'notes',\n                type: 'textarea',\n                value: policy.notes || '',\n                validation: Yup.string().max(280),\n                muiComponentProps: {\n                  multiline: true,\n                  minRows: 1,\n                  maxRows: 3\n                }\n              }];\n              return /*#__PURE__*/_jsxDEV(Formik, {\n                enableReinitialize: true,\n                initialValues: utils.form.getInitialValues(layerFormFields),\n                validationSchema: utils.form.getValidationSchema(layerFormFields),\n                onSubmit: function onSubmit(values, _ref) {\n                  var setSubmitting = _ref.setSubmitting;\n                  putPlacementEditPolicy(values);\n                  setSubmitting(false);\n                },\n                children: function children(_ref2) {\n                  var values = _ref2.values,\n                      errors = _ref2.errors,\n                      touched = _ref2.touched,\n                      submitForm = _ref2.submitForm;\n                  return /*#__PURE__*/_jsxDEV(PolicyTableRow, {\n                    printView: printView,\n                    showHeaderRow: policy.showHeaderRow,\n                    policy: policy,\n                    markets: markets,\n                    isSelected: isLayerSelected,\n                    isNextSelected: !isLayerSelected && isNextSelected,\n                    isChecked: isLayerChecked,\n                    isDisabled: isLayerDisabled,\n                    isIndeterminate: isLayerIndeterminate,\n                    isEditing: isLayerEditing,\n                    showPremium: true,\n                    showWritten: true,\n                    showStatus: true,\n                    toggleOptions: toggleOptions,\n                    inlineEditValues: values,\n                    inlineEditOnClick: _this2.handleInlineEditClick,\n                    inlineEditOnClickAway: _this2.handleInlineEditClickAway(values, errors, submitForm),\n                    handleToggle: _this2.handleToggleLayer(markets),\n                    handleSelect: _this2.handleSelectLayer,\n                    popoverItems: [{\n                      id: 'editPolicy',\n                      label: 'placement.sheet.editPolicy',\n                      callback: _this2.handleEditPolicyClick\n                    }, {\n                      id: 'deletePolicy',\n                      label: 'placement.sheet.deletePolicy',\n                      callback: _this2.handleDeleteClick\n                    }, {\n                      id: 'addMarket',\n                      label: 'placement.sheet.addMarket',\n                      callback: _this2.handleAddMarketClick\n                    }].concat(_toConsumableArray(utils.app.isDevelopment(configVars) ? [{\n                      id: 'createWhitespace',\n                      label: 'placement.sheet.createInWhitespace',\n                      callback: _this2.handleCreateWhitespaceClick\n                    }] : [])),\n                    \"data-testid\": policy.id,\n                    children: limitedRows.map(function (marketObj, index) {\n                      var isMarketChecked = isBulkMarket && placementBulkItems.includes(marketObj.id);\n                      var isMarketDisabled = Boolean(bulkType && bulkType !== 'policyMarket');\n                      var isMarketSelected = marketObj.id === expanded.market;\n\n                      var isMarketEditing = _this2.isRowEditing(editing, marketObj.id);\n\n                      var marketFormFields = [{\n                        name: 'policyMarketId',\n                        type: 'hidden',\n                        value: marketObj.id\n                      }, {\n                        name: 'premium',\n                        type: 'number',\n                        value: marketObj.premium === 0 ? 0 : marketObj.premium || '',\n                        validation: Yup.number().currency()\n                      }, {\n                        name: 'writtenLinePercentage',\n                        type: 'number',\n                        value: marketObj.writtenLinePercentage === 0 ? 0 : marketObj.writtenLinePercentage || '',\n                        validation: Yup.number().min(0).max(100).percent()\n                      }];\n\n                      if (isLayerSelected || printView) {\n                        return /*#__PURE__*/_jsxDEV(Fragment, {\n                          children: [/*#__PURE__*/_jsxDEV(Formik, {\n                            enableReinitialize: true,\n                            initialValues: utils.form.getInitialValues(marketFormFields),\n                            validationSchema: utils.form.getValidationSchema(marketFormFields),\n                            onSubmit: function onSubmit(values, _ref3) {\n                              var setSubmitting = _ref3.setSubmitting;\n                              postPlacementEditQuote(values);\n                              setSubmitting(false);\n                            },\n                            children: function children(_ref4) {\n                              var values = _ref4.values,\n                                  errors = _ref4.errors,\n                                  touched = _ref4.touched,\n                                  submitForm = _ref4.submitForm;\n                              return /*#__PURE__*/_jsxDEV(MarketTableRow, {\n                                printView: printView,\n                                policy: policy,\n                                market: marketObj,\n                                capacities: capacities,\n                                isLast: index === limitedRows.length - 1,\n                                isChecked: isMarketChecked,\n                                isDisabled: isMarketDisabled,\n                                isSelected: isMarketSelected,\n                                isEditing: isMarketEditing,\n                                showPremium: true,\n                                showWritten: true,\n                                showStatus: true,\n                                inlineEditValues: values,\n                                inlineEditOnClick: _this2.handleInlineEditClick,\n                                inlineEditOnClickAway: _this2.handleInlineEditClickAway(values, errors, submitForm),\n                                handleToggle: _this2.handleToggleMarket,\n                                handleSelect: _this2.handleSelectMarket,\n                                popoverItems: [{\n                                  id: 'editQuote',\n                                  label: 'placement.sheet.editQuote',\n                                  callback: _this2.handleEditQuoteClick\n                                }]\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 499,\n                                columnNumber: 41\n                              }, _this2);\n                            }\n                          }, marketObj.id, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 487,\n                            columnNumber: 35\n                          }, _this2), printView && marketObj.seeNoteMessage ? /*#__PURE__*/_jsxDEV(TableRow, {\n                            className: classes.seeNotesRow,\n                            children: /*#__PURE__*/_jsxDEV(TableCell, {\n                              colSpan: 4,\n                              children: utils.string.t('placement.firmOrder.seeNotes', {\n                                label: marketObj.seeNoteMessage\n                              })\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 530,\n                              columnNumber: 39\n                            }, _this2)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 529,\n                            columnNumber: 37\n                          }, _this2) : null]\n                        }, marketObj.id, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 486,\n                          columnNumber: 33\n                        }, _this2);\n                      }\n\n                      return null;\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 410,\n                    columnNumber: 25\n                  }, _this2);\n                }\n              }, policy.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 398,\n                columnNumber: 19\n              }, _this2);\n            })\n          }, businessTypeId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 13\n          }, _this2);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return MarketSheetTable;\n}(PureComponent);\nMarketSheetTable.displayName = \"MarketSheetTable\";\n\n_defineProperty(MarketSheetTable, \"propTypes\", {\n  year: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  option: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  policies: PropTypes.array.isRequired,\n  capacities: PropTypes.array,\n  printView: PropTypes.bool,\n  rowLimit: PropTypes.number\n});\n\n_defineProperty(MarketSheetTable, \"defaultProps\", {\n  printView: false,\n  showHeaderRow: true\n});\n\nMarketSheetTable.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [{\n    \"name\": \"handleEditPolicyClick\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"popoverData\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"handleDeleteClick\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"popoverData\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"handleAddMarketClick\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"popoverData\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"handleCreateWhitespaceClick\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"popoverData\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"handleEditQuoteClick\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"popoverData\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"handleInlineEditClick\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"field\",\n      \"type\": null\n    }, {\n      \"name\": \"id\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"handleInlineEditClickAway\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"values\",\n      \"type\": null\n    }, {\n      \"name\": \"errors\",\n      \"type\": null\n    }, {\n      \"name\": \"submitForm\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"handleToggleGroup\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"params\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"handleToggleLayer\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"markets\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"handleSelectLayer\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"policyId\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"handleToggleMarket\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"marketId\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"handleSelectMarket\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"marketId\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"getSelectedBulkMarketsByPolicy\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"policy\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"setExpandedRows\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"policies\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"isRowSelected\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"type\",\n      \"type\": null\n    }, {\n      \"name\": \"id\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"isRowEditing\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"entries\",\n      \"type\": null\n    }, {\n      \"name\": \"id\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }],\n  \"displayName\": \"MarketSheetTable\",\n  \"props\": {\n    \"printView\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"showHeaderRow\": {\n      \"defaultValue\": {\n        \"value\": \"true\",\n        \"computed\": false\n      },\n      \"required\": false\n    },\n    \"year\": {\n      \"type\": {\n        \"name\": \"union\",\n        \"value\": [{\n          \"name\": \"string\"\n        }, {\n          \"name\": \"number\"\n        }]\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"option\": {\n      \"type\": {\n        \"name\": \"union\",\n        \"value\": [{\n          \"name\": \"string\"\n        }, {\n          \"name\": \"number\"\n        }]\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"policies\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"capacities\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"rowLimit\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};\nexport default compose(connect(mapStateToProps, mapDispatchToProps), withStyles(styles))(MarketSheetTable);\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\modules\\\\MarketSheetTable\\\\MarketSheetTable.js\"] = {\n    name: \"MarketSheetTable\",\n    docgenInfo: MarketSheetTable.__docgenInfo,\n    path: \"src\\\\modules\\\\MarketSheetTable\\\\MarketSheetTable.js\"\n  };\n}","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/MarketSheetTable/MarketSheetTable.js"],"names":["React","PureComponent","Fragment","PropTypes","connect","compose","Formik","Yup","get","has","xor","orderBy","toNumber","isEmpty","isNumber","styles","TableHead","Translate","MarketTableRow","PolicyTableRow","bulkPlacementToggle","deletePlacementPolicy","putPlacementEditPolicy","postPlacementEditQuote","selectPolicyMarket","showModal","utils","Table","TableBody","TableCell","withStyles","TableRow","mapStateToProps","state","configVars","config","vars","placementBulkType","placementBulkItems","mapDispatchToProps","MarketSheetTable","props","popoverData","component","title","subtitle","fullWidth","maxWidth","componentProps","policy","disableAutoFocus","submitHandler","policyMarket","field","id","setState","editing","values","errors","submitForm","object","event","isDiff","isTruthy","Boolean","isFalsy","wasTruthy","isValuesChanged","params","year","option","includes","key","filter","value","push","currentState","expanded","groups","markets","length","policies","policyId","stopPropagation","marketId","bulkItems","marketObj","policiesGrouped","getByBusinessType","businessTypeId","isSingleLayer","handleToggleGroup","handleToggleLayer","type","entries","Object","e","map","generic","isValidArray","setExpandedRows","prevProps","prevPolicies","nextPolicies","noPreviousPolicies","newPolicies","capacities","printView","rowLimit","classes","cols","label","align","compact","empty","arr","bulkType","isBulkPolicy","isBulkMarket","index","isLayerSelected","isRowSelected","isNextSelected","isLayerChecked","isLayerDisabled","isLayerIndeterminate","getSelectedBulkMarketsByPolicy","isLayerEditing","isRowEditing","marketsOrdered","order","toggleOptions","limitedRows","placementPDF","getAccumulatedRowCount","layerFormFields","name","departmentId","notes","validation","string","max","muiComponentProps","multiline","minRows","maxRows","form","getInitialValues","getValidationSchema","setSubmitting","touched","showHeaderRow","handleInlineEditClick","handleInlineEditClickAway","handleSelectLayer","callback","handleEditPolicyClick","handleDeleteClick","handleAddMarketClick","app","isDevelopment","handleCreateWhitespaceClick","isMarketChecked","isMarketDisabled","isMarketSelected","market","isMarketEditing","marketFormFields","premium","number","currency","writtenLinePercentage","min","percent","handleToggleMarket","handleSelectMarket","handleEditQuoteClick","seeNoteMessage","seeNotesRow","t","oneOfType","isRequired","array","bool"],"mappings":"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","sourcesContent":["import React, { PureComponent, Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport get from 'lodash/get';\r\nimport has from 'lodash/has';\r\nimport xor from 'lodash/xor';\r\nimport orderBy from 'lodash/orderBy';\r\nimport toNumber from 'lodash/toNumber';\r\nimport isEmpty from 'lodash/isEmpty';\r\nimport isNumber from 'lodash/isNumber';\r\n\r\n// app\r\nimport styles from './MarketSheetTable.styles.js';\r\nimport { TableHead, Translate } from 'components';\r\nimport { MarketTableRow, PolicyTableRow } from 'modules';\r\nimport {\r\n  bulkPlacementToggle,\r\n  deletePlacementPolicy,\r\n  putPlacementEditPolicy,\r\n  postPlacementEditQuote,\r\n  selectPolicyMarket,\r\n  showModal,\r\n} from 'stores';\r\nimport * as utils from 'utils';\r\n\r\n// mui\r\nimport { Table, TableBody, TableCell, withStyles, TableRow } from '@material-ui/core';\r\n\r\n// state\r\nconst mapStateToProps = (state) => ({\r\n  configVars: state.config.vars,\r\n  placementBulkType: get(state, 'placement.bulk.type', ''),\r\n  placementBulkItems: get(state, 'placement.bulk.items', []),\r\n});\r\n\r\n// dispatch\r\nconst mapDispatchToProps = {\r\n  selectPolicyMarket,\r\n  bulkPlacementToggle,\r\n  deletePlacementPolicy,\r\n  putPlacementEditPolicy,\r\n  postPlacementEditQuote,\r\n  showModal,\r\n};\r\n\r\nexport class MarketSheetTable extends PureComponent {\r\n  static propTypes = {\r\n    year: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n    option: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n    policies: PropTypes.array.isRequired,\r\n    capacities: PropTypes.array,\r\n    printView: PropTypes.bool,\r\n    rowLimit: PropTypes.number,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      expanded: {\r\n        groups: [],\r\n        policies: [],\r\n        markets: null,\r\n      },\r\n      editing: {},\r\n    };\r\n  }\r\n\r\n  static defaultProps = {\r\n    printView: false,\r\n    showHeaderRow: true,\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { policies } = this.props;\r\n\r\n    if (utils.generic.isValidArray(policies, true)) {\r\n      this.setExpandedRows(policies);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const prevPolicies = prevProps.policies;\r\n    const nextPolicies = this.props.policies;\r\n\r\n    const noPreviousPolicies = !prevPolicies || (prevPolicies && prevPolicies.length <= 0);\r\n    const newPolicies = utils.generic.isValidArray(nextPolicies) && nextPolicies.length > 0;\r\n\r\n    // parse for first time\r\n    if (noPreviousPolicies && newPolicies) {\r\n      this.setExpandedRows(nextPolicies);\r\n    }\r\n  }\r\n\r\n  handleEditPolicyClick = (popoverData) => {\r\n    this.props.showModal({\r\n      component: 'EDIT_POLICY',\r\n      props: {\r\n        title: 'placement.sheet.editPolicy',\r\n        subtitle: popoverData.title,\r\n        fullWidth: true,\r\n        maxWidth: 'sm',\r\n        componentProps: {\r\n          policy: popoverData.policy,\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  handleDeleteClick = (popoverData) => {\r\n    this.props.showModal({\r\n      component: 'CONFIRM_DELETE',\r\n      props: {\r\n        title: 'placement.sheet.deletePolicy',\r\n        subtitle: popoverData.title,\r\n        fullWidth: true,\r\n        maxWidth: 'xs',\r\n        disableAutoFocus: true,\r\n        componentProps: {\r\n          submitHandler: () => this.props.deletePlacementPolicy(get(popoverData, 'policy.id')),\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  handleAddMarketClick = (popoverData) => {\r\n    this.props.showModal({\r\n      component: 'ADD_MARKET',\r\n      props: {\r\n        title: 'placement.sheet.addMarket',\r\n        subtitle: popoverData.title,\r\n        fullWidth: true,\r\n        maxWidth: 'sm',\r\n        disableAutoFocus: true,\r\n        componentProps: {\r\n          policy: popoverData.policy,\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  handleCreateWhitespaceClick = (popoverData) => {\r\n    this.props.showModal({\r\n      component: 'CREATE_IN_WHITESPACE',\r\n      props: {\r\n        title: 'placement.sheet.createInWhitespace',\r\n        fullWidth: true,\r\n        maxWidth: 'sm',\r\n        disableAutoFocus: true,\r\n        componentProps: {\r\n          policy: popoverData.policy,\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  handleEditQuoteClick = (popoverData) => {\r\n    this.props.showModal({\r\n      component: 'EDIT_QUOTE',\r\n      props: {\r\n        title: 'placement.sheet.editQuote',\r\n        subtitle: popoverData.title,\r\n        fullWidth: true,\r\n        maxWidth: 'sm',\r\n        disableAutoFocus: true,\r\n        componentProps: {\r\n          policy: popoverData.policy,\r\n          policyMarket: popoverData.policyMarket,\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  handleInlineEditClick = (field, id) => () => {\r\n    this.setState({\r\n      editing: {\r\n        [field]: id,\r\n      },\r\n    });\r\n  };\r\n\r\n  handleInlineEditClickAway = (values, errors, submitForm) => (field, object) => (event) => {\r\n    const isDiff = object[field] !== values[field];\r\n    const isTruthy = Boolean(values[field]) || values[field] === 0;\r\n    const isFalsy = !Boolean(values[field]);\r\n    const wasTruthy = Boolean(object[field]) || object[field] === 0;\r\n    const isValuesChanged = (isDiff && isTruthy) || (isDiff && wasTruthy && isFalsy);\r\n\r\n    // if values have changed -> submit form\r\n    if (isValuesChanged) {\r\n      submitForm();\r\n    }\r\n\r\n    // if errors, prevent changing editing fields\r\n    if (isEmpty(errors)) {\r\n      this.setState({\r\n        editing: {},\r\n      });\r\n    }\r\n  };\r\n\r\n  handleToggleGroup = (params) => (event) => {\r\n    let values = get(this.state, `expanded.groups.${params.year}.${params.option}`, []);\r\n\r\n    if (values.includes(params.key)) {\r\n      values = values.filter((value) => {\r\n        return value !== params.key;\r\n      });\r\n    } else {\r\n      values.push(params.key);\r\n    }\r\n\r\n    this.setState((currentState) => {\r\n      return {\r\n        ...currentState,\r\n        expanded: {\r\n          ...currentState.expanded,\r\n          groups: {\r\n            [params.year]: {\r\n              [params.option]: [...values],\r\n            },\r\n          },\r\n        },\r\n      };\r\n    });\r\n  };\r\n\r\n  handleToggleLayer = (markets) => (params) => (event) => {\r\n    if (!markets || markets.length <= 0) return;\r\n\r\n    const values = get(this.state, `expanded.policies.${params.year}.${params.option}`, []);\r\n\r\n    this.setState((currentState) => {\r\n      return {\r\n        ...currentState,\r\n        expanded: {\r\n          ...currentState.expanded,\r\n          policies: {\r\n            [params.year]: {\r\n              [params.option]: xor(values, [params.policy]),\r\n            },\r\n          },\r\n        },\r\n      };\r\n    });\r\n  };\r\n\r\n  handleSelectLayer = (policyId) => (event) => {\r\n    event.stopPropagation();\r\n    this.props.bulkPlacementToggle('policy', policyId);\r\n  };\r\n\r\n  handleToggleMarket = (marketId) => (event) => {\r\n    this.props.selectPolicyMarket(marketId);\r\n\r\n    this.setState({\r\n      expanded: {\r\n        ...this.state.expanded,\r\n        markets: marketId,\r\n      },\r\n    });\r\n  };\r\n\r\n  handleSelectMarket = (marketId) => (event) => {\r\n    event.stopPropagation();\r\n    this.props.bulkPlacementToggle('policyMarket', marketId);\r\n  };\r\n\r\n  getSelectedBulkMarketsByPolicy = (policy) => {\r\n    const bulkItems = get(this.props, 'placementBulkItems', []);\r\n    const markets = get(policy, 'markets') || [];\r\n\r\n    return markets.filter((marketObj) => {\r\n      return has(marketObj, 'id') && bulkItems.includes(marketObj.id);\r\n    });\r\n  };\r\n\r\n  setExpandedRows = (policies) => {\r\n    const { year, option } = this.props;\r\n    const policiesGrouped = utils.policies.getByBusinessType(policies);\r\n    const businessTypeId = toNumber(get(policiesGrouped, '[0][0]'));\r\n    const isSingleLayer = get(policiesGrouped, '[0][1]', []).length === 1;\r\n\r\n    // always expand the first group on load\r\n    if (businessTypeId) {\r\n      this.handleToggleGroup({ year, option, key: businessTypeId })();\r\n    }\r\n\r\n    // expand layer if it's the only on in the group\r\n    if (isSingleLayer) {\r\n      const markets = get(policiesGrouped, '[0][1][0].markets');\r\n      this.handleToggleLayer(markets)({ year, option, policy: get(policiesGrouped, '[0][1][0].id') })();\r\n    }\r\n  };\r\n\r\n  isRowSelected = (type, id) => {\r\n    const { expanded } = this.state;\r\n    const { year, option } = this.props;\r\n\r\n    return get(expanded, `${type}.${year}.${option}`, []).includes(id);\r\n  };\r\n\r\n  isRowEditing = (entries, id) => {\r\n    return Object.entries(entries)\r\n      .filter((e) => e[1] === id)\r\n      .map((e) => e[0]);\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      year,\r\n      option,\r\n      policies,\r\n      capacities,\r\n      configVars,\r\n      placementBulkType,\r\n      placementBulkItems,\r\n      putPlacementEditPolicy,\r\n      postPlacementEditQuote,\r\n      printView,\r\n      rowLimit,\r\n      classes,\r\n    } = this.props;\r\n    const { expanded, editing } = this.state;\r\n\r\n    const cols = [\r\n      { id: 'layer' },\r\n      { id: 'premium', label: <Translate label=\"placement.generic.premium\" />, align: 'center', compact: true },\r\n      { id: 'written', label: <Translate label=\"placement.generic.written\" />, align: 'center', compact: true },\r\n      { id: 'status', label: <Translate label=\"placement.generic.status\" />, align: 'center', compact: true },\r\n      { id: 'actions', empty: true },\r\n    ];\r\n\r\n    return (\r\n      <Table data-testid=\"market-sheet-table\">\r\n        <TableHead columns={cols} />\r\n\r\n        {utils.policies.getByBusinessType(policies).map((arr) => {\r\n          const businessTypeId = toNumber(arr[0]);\r\n          const policies = orderBy(arr[1], ['excess', 'amount'], ['asc', 'asc']);\r\n          const bulkType = placementBulkType;\r\n          const isBulkPolicy = placementBulkType === 'policy';\r\n          const isBulkMarket = placementBulkType === 'policyMarket';\r\n\r\n          return (\r\n            <TableBody key={businessTypeId}>\r\n              {policies.map((policy, index) => {\r\n                const isLayerSelected = this.isRowSelected('policies', policy.id);\r\n                const isNextSelected = policies[index + 1] && this.isRowSelected('policies', policies[index + 1].id);\r\n                const isLayerChecked = isBulkPolicy && placementBulkItems.includes(policy.id);\r\n                const isLayerDisabled = Boolean(bulkType && !isBulkPolicy);\r\n                const isLayerIndeterminate = isLayerDisabled && this.getSelectedBulkMarketsByPolicy(policy).length > 0;\r\n                const isLayerEditing = this.isRowEditing(editing, policy.id);\r\n                const markets = get(policy, 'markets') || [];\r\n                const marketsOrdered = utils.markets.order(markets);\r\n\r\n                const toggleOptions = {\r\n                  year: year,\r\n                  option: option,\r\n                  policy: policy.id,\r\n                };\r\n\r\n                const limitedRows =\r\n                  rowLimit && isNumber(rowLimit) ? utils.placementPDF.getAccumulatedRowCount(marketsOrdered, rowLimit) : marketsOrdered;\r\n\r\n                const layerFormFields = [\r\n                  {\r\n                    name: 'id',\r\n                    type: 'hidden',\r\n                    value: policy.id,\r\n                  },\r\n                  {\r\n                    name: 'departmentId',\r\n                    type: 'hidden',\r\n                    value: policy.departmentId,\r\n                  },\r\n                  {\r\n                    name: 'businessTypeId',\r\n                    type: 'hidden',\r\n                    value: policy.businessTypeId,\r\n                  },\r\n                  {\r\n                    name: 'notes',\r\n                    type: 'textarea',\r\n                    value: policy.notes || '',\r\n                    validation: Yup.string().max(280),\r\n                    muiComponentProps: {\r\n                      multiline: true,\r\n                      minRows: 1,\r\n                      maxRows: 3,\r\n                    },\r\n                  },\r\n                ];\r\n                return (\r\n                  <Formik\r\n                    key={policy.id}\r\n                    enableReinitialize={true}\r\n                    initialValues={utils.form.getInitialValues(layerFormFields)}\r\n                    validationSchema={utils.form.getValidationSchema(layerFormFields)}\r\n                    onSubmit={(values, { setSubmitting }) => {\r\n                      putPlacementEditPolicy(values);\r\n                      setSubmitting(false);\r\n                    }}\r\n                  >\r\n                    {({ values, errors, touched, submitForm }) => {\r\n                      return (\r\n                        <PolicyTableRow\r\n                          printView={printView}\r\n                          showHeaderRow={policy.showHeaderRow}\r\n                          policy={policy}\r\n                          markets={markets}\r\n                          isSelected={isLayerSelected}\r\n                          isNextSelected={!isLayerSelected && isNextSelected}\r\n                          isChecked={isLayerChecked}\r\n                          isDisabled={isLayerDisabled}\r\n                          isIndeterminate={isLayerIndeterminate}\r\n                          isEditing={isLayerEditing}\r\n                          showPremium\r\n                          showWritten\r\n                          showStatus\r\n                          toggleOptions={toggleOptions}\r\n                          inlineEditValues={values}\r\n                          inlineEditOnClick={this.handleInlineEditClick}\r\n                          inlineEditOnClickAway={this.handleInlineEditClickAway(values, errors, submitForm)}\r\n                          handleToggle={this.handleToggleLayer(markets)}\r\n                          handleSelect={this.handleSelectLayer}\r\n                          popoverItems={[\r\n                            {\r\n                              id: 'editPolicy',\r\n                              label: 'placement.sheet.editPolicy',\r\n                              callback: this.handleEditPolicyClick,\r\n                            },\r\n                            {\r\n                              id: 'deletePolicy',\r\n                              label: 'placement.sheet.deletePolicy',\r\n                              callback: this.handleDeleteClick,\r\n                            },\r\n                            {\r\n                              id: 'addMarket',\r\n                              label: 'placement.sheet.addMarket',\r\n                              callback: this.handleAddMarketClick,\r\n                            },\r\n                            ...(utils.app.isDevelopment(configVars)\r\n                              ? [\r\n                                  {\r\n                                    id: 'createWhitespace',\r\n                                    label: 'placement.sheet.createInWhitespace',\r\n                                    callback: this.handleCreateWhitespaceClick,\r\n                                  },\r\n                                ]\r\n                              : []),\r\n                          ]}\r\n                          data-testid={policy.id}\r\n                        >\r\n                          {limitedRows.map((marketObj, index) => {\r\n                            const isMarketChecked = isBulkMarket && placementBulkItems.includes(marketObj.id);\r\n                            const isMarketDisabled = Boolean(bulkType && bulkType !== 'policyMarket');\r\n                            const isMarketSelected = marketObj.id === expanded.market;\r\n                            const isMarketEditing = this.isRowEditing(editing, marketObj.id);\r\n\r\n                            const marketFormFields = [\r\n                              {\r\n                                name: 'policyMarketId',\r\n                                type: 'hidden',\r\n                                value: marketObj.id,\r\n                              },\r\n                              {\r\n                                name: 'premium',\r\n                                type: 'number',\r\n                                value: marketObj.premium === 0 ? 0 : marketObj.premium || '',\r\n                                validation: Yup.number().currency(),\r\n                              },\r\n                              {\r\n                                name: 'writtenLinePercentage',\r\n                                type: 'number',\r\n                                value: marketObj.writtenLinePercentage === 0 ? 0 : marketObj.writtenLinePercentage || '',\r\n                                validation: Yup.number().min(0).max(100).percent(),\r\n                              },\r\n                            ];\r\n\r\n                            if (isLayerSelected || printView) {\r\n                              return (\r\n                                <Fragment key={marketObj.id}>\r\n                                  <Formik\r\n                                    key={marketObj.id}\r\n                                    enableReinitialize={true}\r\n                                    initialValues={utils.form.getInitialValues(marketFormFields)}\r\n                                    validationSchema={utils.form.getValidationSchema(marketFormFields)}\r\n                                    onSubmit={(values, { setSubmitting }) => {\r\n                                      postPlacementEditQuote(values);\r\n                                      setSubmitting(false);\r\n                                    }}\r\n                                  >\r\n                                    {({ values, errors, touched, submitForm }) => {\r\n                                      return (\r\n                                        <MarketTableRow\r\n                                          printView={printView}\r\n                                          policy={policy}\r\n                                          market={marketObj}\r\n                                          capacities={capacities}\r\n                                          isLast={index === limitedRows.length - 1}\r\n                                          isChecked={isMarketChecked}\r\n                                          isDisabled={isMarketDisabled}\r\n                                          isSelected={isMarketSelected}\r\n                                          isEditing={isMarketEditing}\r\n                                          showPremium\r\n                                          showWritten\r\n                                          showStatus\r\n                                          inlineEditValues={values}\r\n                                          inlineEditOnClick={this.handleInlineEditClick}\r\n                                          inlineEditOnClickAway={this.handleInlineEditClickAway(values, errors, submitForm)}\r\n                                          handleToggle={this.handleToggleMarket}\r\n                                          handleSelect={this.handleSelectMarket}\r\n                                          popoverItems={[\r\n                                            {\r\n                                              id: 'editQuote',\r\n                                              label: 'placement.sheet.editQuote',\r\n                                              callback: this.handleEditQuoteClick,\r\n                                            },\r\n                                          ]}\r\n                                        />\r\n                                      );\r\n                                    }}\r\n                                  </Formik>\r\n                                  {printView && marketObj.seeNoteMessage ? (\r\n                                    <TableRow className={classes.seeNotesRow}>\r\n                                      <TableCell colSpan={4}>\r\n                                        {utils.string.t('placement.firmOrder.seeNotes', { label: marketObj.seeNoteMessage })}\r\n                                      </TableCell>\r\n                                    </TableRow>\r\n                                  ) : null}\r\n                                </Fragment>\r\n                              );\r\n                            }\r\n                            return null;\r\n                          })}\r\n                        </PolicyTableRow>\r\n                      );\r\n                    }}\r\n                  </Formik>\r\n                );\r\n              })}\r\n            </TableBody>\r\n          );\r\n        })}\r\n      </Table>\r\n    );\r\n  }\r\n}\r\n\r\nexport default compose(connect(mapStateToProps, mapDispatchToProps), withStyles(styles))(MarketSheetTable);\r\n"]},"metadata":{},"sourceType":"module"}