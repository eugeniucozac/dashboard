{"ast":null,"code":"import \"core-js/modules/es.object.from-entries\";\nimport { authLogout, addLoader, removeLoader } from 'stores';\nimport * as utils from 'utils';\nimport get from 'lodash/get';\nimport { isEmpty } from 'lodash';\nexport var getClaims = function getClaims() {\n  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint,\n        claims = _getState.claims;\n\n    var defaultError = {\n      file: 'stores/claims.actions.getClaims'\n    };\n    var prevDirection = get(claims, 'claims.sort.direction') || '';\n    var newDirection = params.hasOwnProperty('direction') ? params.direction : prevDirection;\n    var prevQuery = get(claims, 'claims.query') || '';\n    var newQuery = params.hasOwnProperty('term') ? params.term : prevQuery;\n    var prevFilterQuery = get(claims, 'claimLossSearchFilters.filters') || {};\n    var newFilterQuery = params.hasOwnProperty('filterTerm') && params.filterTerm !== '' ? params.filterTerm : prevFilterQuery;\n    var prevSortBy = get(claims, 'claims.sort.by') || '';\n    var newSortBy = params.hasOwnProperty('sortBy') ? params.sortBy : prevSortBy;\n    var prevSearchBy = get(claims, 'claims.searchBy') || '';\n    var newSearchBy = params.hasOwnProperty('searchBy') ? params.searchBy : prevSearchBy;\n    var filterSearchValues = Object.fromEntries(Object.entries(newFilterQuery).filter(function (item) {\n      return !isEmpty(item[1]);\n    }));\n    var postBody = {\n      page: params && params.page || 0,\n      pageSize: params && params.size || claims.claims.pageSize,\n      search: newQuery,\n      sortBy: newSortBy,\n      searchBy: newSearchBy,\n      direction: newDirection === null || newDirection === void 0 ? void 0 : newDirection.toUpperCase(),\n      filterSearch: null,\n      filterLossClaimsCriteria: !isEmpty(filterSearchValues) ? filterSearchValues : null\n    };\n    dispatch(getClaimsRequest(params));\n    dispatch(addLoader('getClaims'));\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.claimService,\n      path: 'api/data/claims/search',\n      data: postBody\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (data) {\n      dispatch(getClaimsSuccess(data));\n      dispatch(removeLoader('getClaims'));\n      return data;\n    })[\"catch\"](function (err) {\n      dispatch(getClaimsFailure(err, defaultError));\n      dispatch(removeLoader('getClaims'));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      return err;\n    });\n  };\n};\nexport var getClaimsRequest = function getClaimsRequest(params) {\n  return {\n    type: 'CLAIMS_GET_REQUEST',\n    payload: params\n  };\n};\nexport var getClaimsSuccess = function getClaimsSuccess(data) {\n  return {\n    type: 'CLAIMS_GET_SUCCESS',\n    payload: {\n      items: data.data,\n      pagination: data.pagination\n    }\n  };\n};\nexport var getClaimsFailure = function getClaimsFailure(error) {\n  return {\n    type: 'CLAIMS_GET_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.getClaims.js"],"names":["authLogout","addLoader","removeLoader","utils","get","isEmpty","getClaims","params","dispatch","getState","auth","user","endpoint","config","vars","claims","defaultError","file","prevDirection","newDirection","hasOwnProperty","direction","prevQuery","newQuery","term","prevFilterQuery","newFilterQuery","filterTerm","prevSortBy","newSortBy","sortBy","prevSearchBy","newSearchBy","searchBy","filterSearchValues","Object","fromEntries","entries","filter","item","postBody","page","pageSize","size","search","toUpperCase","filterSearch","filterLossClaimsCriteria","getClaimsRequest","api","post","token","accessToken","claimService","path","data","then","response","handleResponse","getClaimsSuccess","err","getClaimsFailure","handleUnauthorized","type","payload","items","pagination","error"],"mappings":";AAAA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,YAAhC,QAAoD,QAApD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,SAASC,OAAT,QAAwB,QAAxB;AAEA,OAAO,IAAMC,SAAS,GACpB,SADWA,SACX;AAAA,MAACC,MAAD,uEAAU,EAAV;AAAA,SACA,UAACC,QAAD,EAAWC,QAAX,EAAwB;AACtB;AADsB,oBAE2CA,QAAQ,EAFnD;AAAA,QAENC,IAFM,aAEdC,IAFc,CAEND,IAFM;AAAA,QAEoBE,QAFpB,aAEEC,MAFF,CAEYC,IAFZ,CAEoBF,QAFpB;AAAA,QAEiCG,MAFjC,aAEiCA,MAFjC;;AAItB,QAAMC,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE;AADa,KAArB;AAIA,QAAMC,aAAa,GAAGd,GAAG,CAACW,MAAD,EAAS,uBAAT,CAAH,IAAwC,EAA9D;AACA,QAAMI,YAAY,GAAGZ,MAAM,CAACa,cAAP,CAAsB,WAAtB,IAAqCb,MAAM,CAACc,SAA5C,GAAwDH,aAA7E;AAEA,QAAMI,SAAS,GAAGlB,GAAG,CAACW,MAAD,EAAS,cAAT,CAAH,IAA+B,EAAjD;AACA,QAAMQ,QAAQ,GAAGhB,MAAM,CAACa,cAAP,CAAsB,MAAtB,IAAgCb,MAAM,CAACiB,IAAvC,GAA8CF,SAA/D;AAEA,QAAMG,eAAe,GAAGrB,GAAG,CAACW,MAAD,EAAS,gCAAT,CAAH,IAAiD,EAAzE;AACA,QAAMW,cAAc,GAAGnB,MAAM,CAACa,cAAP,CAAsB,YAAtB,KAAuCb,MAAM,CAACoB,UAAP,KAAsB,EAA7D,GAAkEpB,MAAM,CAACoB,UAAzE,GAAsFF,eAA7G;AAEA,QAAMG,UAAU,GAAGxB,GAAG,CAACW,MAAD,EAAS,gBAAT,CAAH,IAAiC,EAApD;AACA,QAAMc,SAAS,GAAGtB,MAAM,CAACa,cAAP,CAAsB,QAAtB,IAAkCb,MAAM,CAACuB,MAAzC,GAAkDF,UAApE;AAEA,QAAMG,YAAY,GAAG3B,GAAG,CAACW,MAAD,EAAS,iBAAT,CAAH,IAAkC,EAAvD;AACA,QAAMiB,WAAW,GAAGzB,MAAM,CAACa,cAAP,CAAsB,UAAtB,IAAoCb,MAAM,CAAC0B,QAA3C,GAAsDF,YAA1E;AAEA,QAAMG,kBAAkB,GAAGC,MAAM,CAACC,WAAP,CAAmBD,MAAM,CAACE,OAAP,CAAeX,cAAf,EAA+BY,MAA/B,CAAsC,UAACC,IAAD;AAAA,aAAU,CAAClC,OAAO,CAACkC,IAAI,CAAC,CAAD,CAAL,CAAlB;AAAA,KAAtC,CAAnB,CAA3B;AAEA,QAAMC,QAAQ,GAAG;AACfC,MAAAA,IAAI,EAAGlC,MAAM,IAAIA,MAAM,CAACkC,IAAlB,IAA2B,CADlB;AAEfC,MAAAA,QAAQ,EAAGnC,MAAM,IAAIA,MAAM,CAACoC,IAAlB,IAA2B5B,MAAM,CAACA,MAAP,CAAc2B,QAFpC;AAGfE,MAAAA,MAAM,EAAErB,QAHO;AAIfO,MAAAA,MAAM,EAAED,SAJO;AAKfI,MAAAA,QAAQ,EAAED,WALK;AAMfX,MAAAA,SAAS,EAAEF,YAAF,aAAEA,YAAF,uBAAEA,YAAY,CAAE0B,WAAd,EANI;AAOfC,MAAAA,YAAY,EAAE,IAPC;AAQfC,MAAAA,wBAAwB,EAAE,CAAC1C,OAAO,CAAC6B,kBAAD,CAAR,GAA+BA,kBAA/B,GAAoD;AAR/D,KAAjB;AAWA1B,IAAAA,QAAQ,CAACwC,gBAAgB,CAACzC,MAAD,CAAjB,CAAR;AACAC,IAAAA,QAAQ,CAACP,SAAS,CAAC,WAAD,CAAV,CAAR;AAEA,WAAOE,KAAK,CAAC8C,GAAN,CACJC,IADI,CACC;AACJC,MAAAA,KAAK,EAAEzC,IAAI,CAAC0C,WADR;AAEJxC,MAAAA,QAAQ,EAAEA,QAAQ,CAACyC,YAFf;AAGJC,MAAAA,IAAI,EAAE,wBAHF;AAIJC,MAAAA,IAAI,EAAEf;AAJF,KADD,EAOJgB,IAPI,CAOC,UAACC,QAAD;AAAA,aAActD,KAAK,CAAC8C,GAAN,CAAUS,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAPD,EAQJD,IARI,CAQC,UAACD,IAAD,EAAU;AACd/C,MAAAA,QAAQ,CAACmD,gBAAgB,CAACJ,IAAD,CAAjB,CAAR;AACA/C,MAAAA,QAAQ,CAACN,YAAY,CAAC,WAAD,CAAb,CAAR;AACA,aAAOqD,IAAP;AACD,KAZI,WAaE,UAACK,GAAD,EAAS;AACdpD,MAAAA,QAAQ,CAACqD,gBAAgB,CAACD,GAAD,EAAM5C,YAAN,CAAjB,CAAR;AACAR,MAAAA,QAAQ,CAACN,YAAY,CAAC,WAAD,CAAb,CAAR;AACAC,MAAAA,KAAK,CAAC8C,GAAN,CAAUa,kBAAV,CAA6BF,GAA7B,EAAkCpD,QAAlC,EAA4CR,UAA5C;AACA,aAAO4D,GAAP;AACD,KAlBI,CAAP;AAmBD,GA3DD;AAAA,CADK;AA8DP,OAAO,IAAMZ,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACzC,MAAD,EAAY;AAC1C,SAAO;AACLwD,IAAAA,IAAI,EAAE,oBADD;AAELC,IAAAA,OAAO,EAAEzD;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMoD,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACJ,IAAD,EAAU;AACxC,SAAO;AACLQ,IAAAA,IAAI,EAAE,oBADD;AAELC,IAAAA,OAAO,EAAE;AACPC,MAAAA,KAAK,EAAEV,IAAI,CAACA,IADL;AAEPW,MAAAA,UAAU,EAAEX,IAAI,CAACW;AAFV;AAFJ,GAAP;AAOD,CARM;AAUP,OAAO,IAAML,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACM,KAAD,EAAW;AACzC,SAAO;AACLJ,IAAAA,IAAI,EAAE,oBADD;AAELC,IAAAA,OAAO,EAAEG;AAFJ,GAAP;AAID,CALM","sourcesContent":["import { authLogout, addLoader, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\nimport get from 'lodash/get';\r\nimport { isEmpty } from 'lodash';\r\n\r\nexport const getClaims =\r\n  (params = {}) =>\r\n  (dispatch, getState) => {\r\n    // prettier-ignore\r\n    const { user: { auth }, config: { vars: { endpoint }}, claims} = getState();\r\n\r\n    const defaultError = {\r\n      file: 'stores/claims.actions.getClaims',\r\n    };\r\n\r\n    const prevDirection = get(claims, 'claims.sort.direction') || '';\r\n    const newDirection = params.hasOwnProperty('direction') ? params.direction : prevDirection;\r\n\r\n    const prevQuery = get(claims, 'claims.query') || '';\r\n    const newQuery = params.hasOwnProperty('term') ? params.term : prevQuery;\r\n\r\n    const prevFilterQuery = get(claims, 'claimLossSearchFilters.filters') || {};\r\n    const newFilterQuery = params.hasOwnProperty('filterTerm') && params.filterTerm !== '' ? params.filterTerm : prevFilterQuery;\r\n\r\n    const prevSortBy = get(claims, 'claims.sort.by') || '';\r\n    const newSortBy = params.hasOwnProperty('sortBy') ? params.sortBy : prevSortBy;\r\n\r\n    const prevSearchBy = get(claims, 'claims.searchBy') || '';\r\n    const newSearchBy = params.hasOwnProperty('searchBy') ? params.searchBy : prevSearchBy;\r\n\r\n    const filterSearchValues = Object.fromEntries(Object.entries(newFilterQuery).filter((item) => !isEmpty(item[1])));\r\n\r\n    const postBody = {\r\n      page: (params && params.page) || 0,\r\n      pageSize: (params && params.size) || claims.claims.pageSize,\r\n      search: newQuery,\r\n      sortBy: newSortBy,\r\n      searchBy: newSearchBy,\r\n      direction: newDirection?.toUpperCase(),\r\n      filterSearch: null,\r\n      filterLossClaimsCriteria: !isEmpty(filterSearchValues) ? filterSearchValues : null,\r\n    };\r\n\r\n    dispatch(getClaimsRequest(params));\r\n    dispatch(addLoader('getClaims'));\r\n\r\n    return utils.api\r\n      .post({\r\n        token: auth.accessToken,\r\n        endpoint: endpoint.claimService,\r\n        path: 'api/data/claims/search',\r\n        data: postBody,\r\n      })\r\n      .then((response) => utils.api.handleResponse(response))\r\n      .then((data) => {\r\n        dispatch(getClaimsSuccess(data));\r\n        dispatch(removeLoader('getClaims'));\r\n        return data;\r\n      })\r\n      .catch((err) => {\r\n        dispatch(getClaimsFailure(err, defaultError));\r\n        dispatch(removeLoader('getClaims'));\r\n        utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n        return err;\r\n      });\r\n  };\r\n\r\nexport const getClaimsRequest = (params) => {\r\n  return {\r\n    type: 'CLAIMS_GET_REQUEST',\r\n    payload: params,\r\n  };\r\n};\r\n\r\nexport const getClaimsSuccess = (data) => {\r\n  return {\r\n    type: 'CLAIMS_GET_SUCCESS',\r\n    payload: {\r\n      items: data.data,\r\n      pagination: data.pagination,\r\n    },\r\n  };\r\n};\r\n\r\nexport const getClaimsFailure = (error) => {\r\n  return {\r\n    type: 'CLAIMS_GET_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}