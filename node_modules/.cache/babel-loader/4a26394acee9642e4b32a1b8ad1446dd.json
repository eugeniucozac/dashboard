{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _typeof from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/typeof\";\n// app\nimport { authLogout, enqueueNotification, addLoader, removeLoader, hideModal } from 'stores';\nimport * as utils from 'utils';\nexport var createReport = function createReport(payload) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/reporting.actions.group.post',\n      message: 'Data missing for POST request'\n    };\n    dispatch(postReportRequest(payload));\n    dispatch(addLoader('createReport'));\n\n    if (!payload || _typeof(payload) !== 'object') {\n      dispatch(postReportFailure(defaultError));\n      dispatch(enqueueNotification('notification.reporting.postReportGroup.postFail', 'error'));\n      dispatch(hideModal());\n      dispatch(removeLoader('createReport'));\n      return;\n    }\n\n    var data = {\n      title: payload.report,\n      description: payload.description,\n      powerbiReportId: payload.reportId,\n      reportgroupId: payload.reportgroupId\n    };\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.edge,\n      path: 'api/report',\n      data: data\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleData(json);\n    }).then(function (data) {\n      dispatch(postReportSuccess(data));\n      dispatch(hideModal());\n      dispatch(enqueueNotification('notification.reporting.postReportGroup.postSuccess', 'success'));\n    })[\"catch\"](function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API post error (report)'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(postReportFailure(err));\n      dispatch(enqueueNotification('notification.reporting.postReportGroup.postFail', 'error'));\n      return err;\n    })[\"finally\"](function () {\n      dispatch(removeLoader('createReport'));\n    });\n  };\n};\nexport var postReportRequest = function postReportRequest(payload) {\n  return {\n    type: 'REPORT_POST_REQUEST',\n    payload: payload\n  };\n};\nexport var postReportSuccess = function postReportSuccess(payload) {\n  return {\n    type: 'REPORT_POST_SUCCESS',\n    payload: payload\n  };\n};\nexport var postReportFailure = function postReportFailure(error) {\n  return {\n    type: 'REPORT_POST_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/reporting/reporting.actions.report.post.js"],"names":["authLogout","enqueueNotification","addLoader","removeLoader","hideModal","utils","createReport","payload","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","message","postReportRequest","postReportFailure","data","title","report","description","powerbiReportId","reportId","reportgroupId","api","post","token","accessToken","edge","path","then","response","handleResponse","json","handleData","postReportSuccess","err","errorParams","handleError","handleUnauthorized","type","error"],"mappings":"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","sourcesContent":["// app\r\nimport { authLogout, enqueueNotification, addLoader, removeLoader, hideModal } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const createReport = (payload) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } } } = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/reporting.actions.group.post',\r\n    message: 'Data missing for POST request',\r\n  };\r\n\r\n  dispatch(postReportRequest(payload));\r\n  dispatch(addLoader('createReport'));\r\n\r\n  if (!payload || typeof payload !== 'object') {\r\n    dispatch(postReportFailure(defaultError));\r\n    dispatch(enqueueNotification('notification.reporting.postReportGroup.postFail', 'error'));\r\n    dispatch(hideModal());\r\n    dispatch(removeLoader('createReport'));\r\n    return;\r\n  }\r\n  const data = {\r\n    title: payload.report,\r\n    description: payload.description,\r\n    powerbiReportId: payload.reportId,\r\n    reportgroupId: payload.reportgroupId,\r\n  };\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.edge,\r\n      path: 'api/report',\r\n      data,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleData(json))\r\n    .then((data) => {\r\n      dispatch(postReportSuccess(data));\r\n      dispatch(hideModal());\r\n      dispatch(enqueueNotification('notification.reporting.postReportGroup.postSuccess', 'success'));\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        ...defaultError,\r\n        message: 'API post error (report)',\r\n      };\r\n\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(postReportFailure(err));\r\n      dispatch(enqueueNotification('notification.reporting.postReportGroup.postFail', 'error'));\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('createReport'));\r\n    });\r\n};\r\n\r\nexport const postReportRequest = (payload) => {\r\n  return {\r\n    type: 'REPORT_POST_REQUEST',\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const postReportSuccess = (payload) => {\r\n  return {\r\n    type: 'REPORT_POST_SUCCESS',\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const postReportFailure = (error) => {\r\n  return {\r\n    type: 'REPORT_POST_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}