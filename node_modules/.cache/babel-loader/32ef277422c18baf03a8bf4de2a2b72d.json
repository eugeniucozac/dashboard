{"ast":null,"code":"import _defineProperty from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport config from 'config';\nimport * as utils from 'utils';\nimport get from 'lodash/get';\nimport sortBy from 'lodash/sortBy';\nvar list = {\n  items: [],\n  itemsTotal: 0,\n  loading: false,\n  page: 1,\n  pageSize: config.ui.pagination[\"default\"],\n  pageTotal: 0,\n  query: '',\n  sortBy: 'id',\n  sortType: 'numeric',\n  sortDirection: 'desc'\n};\nvar draftList = {\n  items: [],\n  itemsTotal: 0,\n  loading: false,\n  page: 1,\n  pageSize: config.ui.pagination[\"default\"],\n  pageTotal: 0,\n  query: '',\n  sortBy: 'id',\n  sortType: 'numeric',\n  sortDirection: 'desc'\n};\nvar initialState = {\n  list: _objectSpread({}, list),\n  draftList: _objectSpread({}, draftList),\n  products: {\n    items: [],\n    selected: '',\n    loading: false\n  },\n  productsWithReports: {\n    items: [],\n    loading: false\n  },\n  definitions: {\n    loading: false\n  },\n  preBindDefinitions: {\n    fields: {},\n    loading: false\n  },\n  coverages: {\n    loading: false\n  },\n  coverageDefinitions: {\n    loading: false\n  },\n  facilities: {\n    list: _objectSpread(_objectSpread({}, list), {}, {\n      sortBy: 'name',\n      sortType: 'lexical',\n      sortDirection: 'asc'\n    }),\n    selected: {},\n    loading: false,\n    ratesLoaded: {},\n    limitsLoaded: {}\n  },\n  limits: {\n    items: [],\n    aggregateLimits: [],\n    loading: false\n  },\n  countries: {\n    items: [],\n    loading: false\n  },\n  quotes: {\n    items: [],\n    loading: false\n  },\n  selected: {\n    loading: false\n  },\n  download: {\n    started: false,\n    finished: true,\n    status: null\n  }\n};\n\nvar updateFacilityRates = function updateFacilityRates(items, payload) {\n  return items.map(function (item) {\n    if (item.id === payload.facilityId) {\n      return _objectSpread(_objectSpread({}, item), {}, {\n        rates: payload\n      });\n    }\n\n    return item;\n  });\n};\n\nvar updateFacilityLimits = function updateFacilityLimits(items, payload) {\n  return items.map(function (item) {\n    if (item.id === payload.facilityId) {\n      return _objectSpread(_objectSpread({}, item), {}, {\n        limits: payload\n      });\n    }\n\n    return item;\n  });\n};\n\nvar updateFacilityDetails = function updateFacilityDetails(items, payload) {\n  return items.map(function (item) {\n    if (item.id === payload.id) {\n      return _objectSpread(_objectSpread({}, item), {}, {\n        permissionToBindGroups: payload.permissionToBindGroups,\n        notifiedUsers: payload.notifiedUsers,\n        preBind: payload.preBind,\n        permissionToDismissIssuesGroups: payload.permissionToDismissIssuesGroups\n      });\n    }\n\n    return item;\n  });\n};\n\nvar riskReducers = function riskReducers() {\n  var _action$payload, _objectSpread2;\n\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    // risk\n    case 'RISK_POST_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        list: _objectSpread(_objectSpread({}, state.list), {}, {\n          items: [_objectSpread({}, action.payload)].concat(_toConsumableArray(state.list.items)),\n          itemsTotal: state.list.itemsTotal + 1\n        }),\n        selected: _objectSpread(_objectSpread({}, action.payload), {}, {\n          loading: false\n        })\n      });\n\n    case 'RISK_PATCH_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selected: _objectSpread(_objectSpread({}, state.selected), {}, {\n          augmentVersion: (_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.augmentVersion,\n          loading: false,\n          risk: _objectSpread({}, action.payload)\n        })\n      });\n\n    case 'RISK_SELECTED_SET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selected: _objectSpread(_objectSpread({}, action.payload), {}, {\n          loading: false\n        })\n      });\n\n    case 'RISK_SELECTED_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selected: {}\n      });\n    // list\n\n    case 'RISK_LIST_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        list: _objectSpread(_objectSpread({}, state.list), {}, {\n          loading: true\n        })\n      });\n\n    case 'RISK_LIST_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        list: _objectSpread(_objectSpread({}, state.list), {}, {\n          loading: false,\n          items: action.payload.content\n        }, utils.api.pagination(action.payload))\n      });\n\n    case 'RISK_LIST_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        list: _objectSpread(_objectSpread({}, initialState.list), {}, {\n          loading: false\n        })\n      });\n\n    case 'RISK_LIST_UPDATE_ITEM_RISK_STATUS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        list: _objectSpread(_objectSpread({}, state.list), {}, {\n          items: _toConsumableArray(state.list.items.map(function (item) {\n            if (item.id === action.payload.riskId) {\n              item.riskStatus = action.payload.riskStatus;\n            }\n\n            return item;\n          }))\n        })\n      });\n    // drafts\n\n    case 'DRAFT_LIST_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        draftList: _objectSpread(_objectSpread({}, state.draftList), {}, {\n          loading: true\n        })\n      });\n\n    case 'DRAFT_LIST_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        draftList: _objectSpread(_objectSpread({}, state.draftList), {}, {\n          loading: false,\n          items: action.payload.content\n        }, utils.api.pagination(action.payload))\n      });\n\n    case 'DRAFT_LIST_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        draftList: _objectSpread(_objectSpread({}, state.draftList), {}, {\n          loading: false\n        })\n      });\n\n    case 'DRAFT_RISK_UPDATE_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        draftList: _objectSpread(_objectSpread({}, state.draftList), {}, {\n          items: state.draftList.items.map(function (draft) {\n            if (draft.id === action.payload.id) {\n              return _objectSpread({}, action.payload);\n            }\n\n            return draft;\n          })\n        })\n      });\n\n    case 'DRAFT_DELETE_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        draftList: _objectSpread(_objectSpread({}, state.draftList), {}, {\n          items: state.draftList.items.filter(function (draft) {\n            return !utils.generic.isSameId(draft.id, action.payload);\n          })\n        })\n      });\n\n    case 'DRAFT_RISK_POST_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        draftList: _objectSpread(_objectSpread({}, state.draftList), {}, {\n          items: [_objectSpread(_objectSpread({}, action.payload), {}, {\n            __new__: true\n          })].concat(_toConsumableArray(state.draftList.items)),\n          itemsTotal: state.draftList.itemsTotal + 1\n        })\n      });\n    // details\n\n    case 'RISK_DETAILS_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selected: _objectSpread(_objectSpread({}, state.selected), {}, {\n          loading: true\n        })\n      });\n\n    case 'RISK_DETAILS_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selected: _objectSpread(_objectSpread({}, action.payload), {}, {\n          loading: false\n        })\n      });\n\n    case 'RISK_DETAILS_REFRESH_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selected: _objectSpread(_objectSpread({}, action.payload), {}, {\n          loading: false,\n          risk: _objectSpread({}, state.selected.risk)\n        })\n      });\n\n    case 'RISK_DETAILS_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selected: {\n          loading: false\n        }\n      });\n    // products\n\n    case 'RISK_PRODUCTS_REPORTS_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        productsWithReports: _objectSpread(_objectSpread({}, state.productsWithReports), {}, {\n          loading: true\n        })\n      });\n\n    case 'RISK_PRODUCTS_REPORTS_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        productsWithReports: {\n          items: utils.generic.isValidArray(action.payload) ? action.payload.sort() : action.payload,\n          loading: false\n        }\n      });\n\n    case 'RISK_PRODUCTS_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        products: _objectSpread(_objectSpread({}, state.products), {}, {\n          loading: true\n        })\n      });\n\n    case 'RISK_PRODUCTS_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        products: _objectSpread(_objectSpread({}, state.products), {}, {\n          items: utils.generic.isValidArray(action.payload) ? action.payload.sort() : action.payload,\n          loading: false\n        })\n      });\n\n    case 'RISK_PRODUCTS_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        products: initialState.products\n      });\n\n    case 'RISK_PRODUCTS_SELECT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        products: _objectSpread(_objectSpread({}, state.products), {}, {\n          selected: action.payload\n        })\n      });\n\n    case 'RISK_PRODUCTS_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        products: _objectSpread(_objectSpread({}, state.products), {}, {\n          selected: initialState.products.selected\n        })\n      });\n    // definitions\n\n    case 'RISK_DEFINITIONS_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        definitions: _objectSpread(_objectSpread({}, state.definitions), {}, {\n          loading: true\n        })\n      });\n\n    case 'RISK_DEFINITIONS_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        definitions: _objectSpread(_objectSpread({}, state.definitions), {}, (_objectSpread2 = {}, _defineProperty(_objectSpread2, action.payload.type, {\n          fields: get(action.payload, 'data.product', []),\n          fieldOptions: get(action.payload, 'data.fieldOptions') || []\n        }), _defineProperty(_objectSpread2, \"loading\", false), _objectSpread2))\n      });\n\n    case 'RISK_DEFINITIONS_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        definitions: initialState.definitions\n      });\n    // facilities\n\n    case 'RISK_FACILITIES_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        facilities: _objectSpread(_objectSpread({}, state.facilities), {}, {\n          loading: true,\n          ratesLoaded: {}\n        })\n      });\n\n    case 'RISK_FACILITIES_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        facilities: _objectSpread(_objectSpread({}, state.facilities), {}, {\n          list: _objectSpread(_objectSpread({}, state.facilities.list), {}, {\n            items: action.payload.content\n          }, utils.api.pagination(action.payload)),\n          loading: false,\n          ratesLoaded: {}\n        })\n      });\n\n    case 'RISK_FACILITIES_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        facilities: initialState.facilities\n      });\n\n    case 'RISK_FACILITIES_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        facilities: initialState.facilities\n      });\n\n    case 'RISK_FACILITIES_POST_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        facilities: _objectSpread(_objectSpread({}, state.facilities), {}, {\n          list: _objectSpread(_objectSpread({}, state.facilities.list), {}, {\n            items: [_objectSpread(_objectSpread({}, action.payload), {}, {\n              __new__: true\n            })].concat(_toConsumableArray(state.facilities.list.items)),\n            itemsTotal: state.facilities.list.itemsTotal + 1\n          })\n        })\n      });\n    // all facilities\n\n    case 'RISK_ALL_FACILITIES_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        facilities: _objectSpread(_objectSpread({}, state.facilities), {}, {\n          loading: true\n        })\n      });\n\n    case 'RISK_ALL_FACILITIES_GET_SUCCESS':\n      var sortedContent = sortBy(action.payload.content, 'name');\n      return _objectSpread(_objectSpread({}, state), {}, {\n        facilities: _objectSpread(_objectSpread({}, state.facilities), {}, {\n          list: _objectSpread(_objectSpread({}, state.facilities.list), {}, {\n            items: sortedContent\n          }),\n          loading: false\n        })\n      });\n    // facility rates\n\n    case 'RISK_FACILITY_RATES_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        facilities: _objectSpread(_objectSpread({}, state.facilities), {}, {\n          ratesLoaded: action.payload ? _defineProperty({}, action.payload, false) : {}\n        })\n      });\n\n    case 'RISK_FACILITY_RATES_GET_SUCCESS':\n      var isFacilityLoaded = action.payload.facilityId && state.facilities.list.items.find(function (i) {\n        return i.id === action.payload.facilityId;\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        facilities: _objectSpread(_objectSpread({}, state.facilities), {}, {\n          list: _objectSpread(_objectSpread({}, state.facilities.list), {}, {\n            items: isFacilityLoaded ? updateFacilityRates(state.facilities.list.items, action.payload) : state.facilities.list.items\n          }),\n          ratesLoaded: action.payload.facilityId ? _defineProperty({}, action.payload.facilityId, true) : {}\n        })\n      });\n\n    case 'RISK_FACILITY_RATES_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        facilities: _objectSpread(_objectSpread({}, state.facilities), {}, {\n          list: _objectSpread(_objectSpread({}, state.facilities.list), {}, {\n            items: state.facilities.list.items.map(function (item) {\n              delete item.rates;\n              return item;\n            })\n          }),\n          ratesLoaded: action.payload.facilityId ? _defineProperty({}, action.payload.facilityId, true) : {}\n        })\n      });\n    // countries\n\n    case 'RISK_COUNTRIES_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        countries: _objectSpread(_objectSpread({}, state.countries), {}, {\n          loading: true\n        })\n      });\n\n    case 'RISK_COUNTRIES_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        countries: _objectSpread(_objectSpread({}, state.countries), {}, {\n          items: action.payload,\n          loading: false\n        })\n      });\n\n    case 'RISK_COUNTRIES_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        countries: _objectSpread(_objectSpread({}, state.countries), {}, {\n          items: [],\n          loading: false\n        })\n      });\n\n    case 'RISK_FACILITY_RATES_POST_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        facilities: _objectSpread(_objectSpread({}, state.facilities), {}, {\n          list: _objectSpread(_objectSpread({}, state.facilities.list), {}, {\n            items: updateFacilityRates(state.facilities.list.items, action.payload)\n          }),\n          ratesLoaded: action.payload.facilityId ? _defineProperty({}, action.payload.facilityId, true) : {}\n        })\n      });\n\n    case 'RISK_FACILITY_DETAILS_PUT_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        facilities: _objectSpread(_objectSpread({}, state.facilities), {}, {\n          list: _objectSpread(_objectSpread({}, state.facilities.list), {}, {\n            items: updateFacilityDetails(state.facilities.list.items, action.payload)\n          })\n        })\n      });\n    // quotes\n\n    case 'RISK_QUOTES_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        quotes: _objectSpread(_objectSpread({}, state.quotes), {}, {\n          loading: true\n        })\n      });\n\n    case 'RISK_QUOTES_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        quotes: _objectSpread(_objectSpread({}, state.quotes), {}, {\n          items: action.payload.items,\n          loading: false\n        })\n      });\n\n    case 'RISK_QUOTES_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        quotes: initialState.quotes\n      });\n\n    case 'RISK_POST_QUOTE_SUCCESS':\n      var postQuoteItems = [_objectSpread(_objectSpread({}, action.payload), {}, {\n        __new__: true\n      })].concat(_toConsumableArray(state.quotes.items.map(function (i) {\n        delete i.__new__;\n        return i;\n      })));\n      return _objectSpread(_objectSpread({}, state), {}, {\n        quotes: _objectSpread(_objectSpread({}, state.quotes), {}, {\n          items: postQuoteItems\n        })\n      });\n    // quote response\n\n    case 'RISK_POST_QUOTE_RESPONSE_SUCCESS':\n      // temporarily commenting until B/E also updates the risk dates after a bind\n      // const postResponseEffectiveFrom = get(action.payload, 'response.effectiveFrom');\n      // const postResponseEffectiveTo = get(action.payload, 'response.effectiveTo');\n      var postQuoteResponseQuotes = state.quotes.items.map(function (quote) {\n        if (quote.id === action.payload.id) {\n          return action.payload;\n        }\n\n        return quote;\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        quotes: _objectSpread(_objectSpread({}, state.quotes), {}, {\n          items: postQuoteResponseQuotes\n        }) // selected: {\n        //   ...updateRiskSelectedStatus(state, action, postQuoteResponseQuotes),\n        // temporarily commenting until B/E also updates the risk dates after a bind\n        // inceptionDate: postResponseEffectiveFrom,\n        // expiryDate: postResponseEffectiveTo,\n        // },\n        // list: {\n        //   ...state.list,\n        // items: updateRiskListItemsStatus(state, action, postQuoteResponseQuotes).map((item) => {\n        // temporarily commenting until B/E also updates the risk dates after a bind\n        // if (item.id === action.payload.riskId) {\n        //   item.inceptionDate = postResponseEffectiveFrom;\n        //   item.expiryDate = postResponseEffectiveTo;\n        // }\n        // return item;\n        // }),\n        // },\n\n      });\n\n    case 'DOWNLOAD_RISK_BORDEREAUX_REQUEST':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          download: _objectSpread(_objectSpread({}, state.download), {}, {\n            started: true\n          })\n        });\n      }\n\n    case 'DOWNLOAD_RISK_BORDEREAUX_SUCCESS':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          download: {\n            started: false,\n            status: 'success'\n          }\n        });\n      }\n\n    case 'DOWNLOAD_RISK_BORDEREAUX_FAILURE':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          download: {\n            started: false,\n            status: 'error'\n          }\n        });\n      }\n\n    case 'PRE_BIND_DEFINITIONS_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        preBindDefinitions: _objectSpread(_objectSpread({}, state.preBindDefinitions), {}, {\n          loading: true\n        })\n      });\n\n    case 'PRE_BIND_DEFINITIONS_GET_SUCCESS':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          preBindDefinitions: {\n            fields: action.payload || [],\n            loading: false\n          }\n        });\n      }\n\n    case 'PRE_BIND_DEFINITIONS_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        preBindDefinitions: initialState.preBindDefinitions\n      });\n\n    case 'RISK_PREBIND_POST_SUCCESS':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          selected: _objectSpread(_objectSpread({}, state.selected), {}, {\n            risk: _objectSpread(_objectSpread({}, state.selected.risk), action.payload.risk)\n          })\n        });\n      }\n    // Coverage Comparison\n\n    case 'COVERAGE_DEFINITIONS_GET_REQUEST':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          coverageDefinitions: _objectSpread(_objectSpread({}, state.coverageDefinitions), {}, {\n            loading: true\n          })\n        });\n      }\n\n    case 'COVERAGE_DEFINITIONS_GET_SUCCESS':\n      {\n        var _objectSpread3;\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          coverageDefinitions: _objectSpread(_objectSpread({}, state.coverageDefinitions), {}, (_objectSpread3 = {}, _defineProperty(_objectSpread3, action.payload.product, action.payload.definition), _defineProperty(_objectSpread3, \"loading\", false), _objectSpread3))\n        });\n      }\n\n    case 'COVERAGE_DEFINITIONS_GET_FAILURE':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          coverageDefinitions: initialState.coverageDefinitions\n        });\n      }\n\n    case 'RISK_COVERAGE_GET_SUCCESS':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          coverages: _objectSpread(_objectSpread({}, state.coverages), {}, {\n            selected: action.payload,\n            loading: false\n          })\n        });\n      }\n\n    case 'RISK_COVERAGE_POST_SUCCESS':\n      {\n        var isCoveragePresent = state.coverages.selected.find(function (coverage) {\n          return coverage.id === action.payload.id;\n        });\n        return _objectSpread(_objectSpread({}, state), {}, {\n          coverages: _objectSpread(_objectSpread({}, state.coverages), {}, {\n            selected: isCoveragePresent ? _toConsumableArray(state.coverages.selected) : [].concat(_toConsumableArray(state.coverages.selected), [action.payload]),\n            loading: false\n          })\n        });\n      }\n\n    case 'RISK_COVERAGE_POST_EDIT_SUCCESS':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          coverages: _objectSpread(_objectSpread({}, state.coverages), {}, {\n            selected: _toConsumableArray(state.coverages.selected.map(function (coverage) {\n              if (coverage.id === action.payload.coverageId) {\n                return action.payload.responseData;\n              }\n\n              return coverage;\n            })),\n            loading: false\n          })\n        });\n      }\n\n    case 'RISK_COVERAGE_DELETE_SUCCESS':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          coverages: _objectSpread(_objectSpread({}, state.coverages), {}, {\n            selected: _toConsumableArray(state.coverages.selected.filter(function (c) {\n              return c.id !== action.payload;\n            })),\n            loading: false\n          })\n        });\n      }\n\n    case 'RISK_COVERAGE_PUT_ACTIVATE_SUCCESS':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          selected: _objectSpread(_objectSpread({}, action.payload), {}, {\n            loading: false\n          })\n        });\n      }\n    // Facility Limits Definition GET request\n\n    case 'RISK_FACILITY_LIMITS_DEF_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        limits: _objectSpread(_objectSpread({}, state.limits), {}, {\n          loading: true\n        })\n      });\n\n    case 'RISK_FACILITY_LIMITS_DEF_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        limits: _objectSpread(_objectSpread({}, state.limits), {}, {\n          items: action.payload,\n          loading: false\n        })\n      });\n\n    case 'RISK_FACILITY_LIMITS_DEF_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        limits: _objectSpread(_objectSpread({}, state.limits), {}, {\n          items: [],\n          loading: false\n        })\n      });\n    // Facility Limits\n\n    case 'RISK_FACILITY_LIMIT_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        facilities: _objectSpread(_objectSpread({}, state.facilities), {}, {\n          limitsLoaded: action.payload ? _defineProperty({}, action.payload, false) : {},\n          loading: true\n        })\n      });\n\n    case 'RISK_FACILITY_LIMIT_GET_SUCCESS':\n      var isFacLoaded = action.payload.facilityId && state.facilities.list.items.find(function (i) {\n        return i.id === action.payload.facilityId;\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        facilities: _objectSpread(_objectSpread({}, state.facilities), {}, {\n          list: _objectSpread(_objectSpread({}, state.facilities.list), {}, {\n            items: isFacLoaded ? updateFacilityLimits(state.facilities.list.items, action.payload) : state.facilities.list.items\n          }),\n          limitsLoaded: action.payload.facilityId ? _defineProperty({}, action.payload.facilityId, true) : {},\n          loading: false\n        })\n      });\n\n    case 'RISK_FACILITY_LIMIT_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        facilities: _objectSpread(_objectSpread({}, state.facilities), {}, {\n          list: _objectSpread(_objectSpread({}, state.facilities.list), {}, {\n            items: state.facilities.list.items.map(function (item) {\n              delete item.limits;\n              return item;\n            })\n          }),\n          limitsLoaded: action.payload.facilityId ? _defineProperty({}, action.payload.facilityId, true) : {},\n          loading: false\n        })\n      });\n\n    case 'RISK_FACILITY_LIMITS_POST_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        facilities: _objectSpread(_objectSpread({}, state.facilities), {}, {\n          list: _objectSpread(_objectSpread({}, state.facilities.list), {}, {\n            items: updateFacilityLimits(state.facilities.list.items, action.payload)\n          }),\n          ratesLoaded: action.payload.facilityId ? _defineProperty({}, action.payload.facilityId, true) : {}\n        })\n      });\n    // Facility Limits Definition GET request\n\n    case 'RISK_FACILITY_AGGREGATE_LIMITS_GRAPH_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        limits: _objectSpread(_objectSpread({}, state.limits), {}, {\n          loading: true\n        })\n      });\n\n    case 'RISK_FACILITY_AGGREGATE_LIMITS_GRAPH_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        limits: _objectSpread(_objectSpread({}, state.limits), {}, {\n          aggregateLimits: action.payload,\n          loading: false\n        })\n      });\n\n    case 'RISK_FACILITY_AGGREGATE_LIMITS_GRAPH_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        limits: _objectSpread(_objectSpread({}, state.limits), {}, {\n          aggregateLimits: [],\n          loading: false\n        })\n      });\n\n    case 'UPDATE_ISSUE_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        quotes: _objectSpread(_objectSpread({}, state.quotes), {}, {\n          items: state.quotes.items.map(function (quote) {\n            if (quote.id === action.quoteId) {\n              return _objectSpread(_objectSpread({}, quote), {}, {\n                issues: quote.issues.map(function (issue) {\n                  if (issue.id === action.payload.id) {\n                    return action.payload;\n                  }\n\n                  return issue;\n                })\n              });\n            }\n\n            return quote;\n          })\n        })\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default riskReducers;","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/risk/risk.reducers.js"],"names":["config","utils","get","sortBy","list","items","itemsTotal","loading","page","pageSize","ui","pagination","pageTotal","query","sortType","sortDirection","draftList","initialState","products","selected","productsWithReports","definitions","preBindDefinitions","fields","coverages","coverageDefinitions","facilities","ratesLoaded","limitsLoaded","limits","aggregateLimits","countries","quotes","download","started","finished","status","updateFacilityRates","payload","map","item","id","facilityId","rates","updateFacilityLimits","updateFacilityDetails","permissionToBindGroups","notifiedUsers","preBind","permissionToDismissIssuesGroups","riskReducers","state","action","type","augmentVersion","risk","content","api","riskId","riskStatus","draft","filter","generic","isSameId","__new__","isValidArray","sort","fieldOptions","sortedContent","isFacilityLoaded","find","i","postQuoteItems","postQuoteResponseQuotes","quote","product","definition","isCoveragePresent","coverage","coverageId","responseData","c","isFacLoaded","quoteId","issues","issue"],"mappings":"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","sourcesContent":["import config from 'config';\r\nimport * as utils from 'utils';\r\nimport get from 'lodash/get';\r\nimport sortBy from 'lodash/sortBy';\r\n\r\nconst list = {\r\n  items: [],\r\n  itemsTotal: 0,\r\n  loading: false,\r\n  page: 1,\r\n  pageSize: config.ui.pagination.default,\r\n  pageTotal: 0,\r\n  query: '',\r\n  sortBy: 'id',\r\n  sortType: 'numeric',\r\n  sortDirection: 'desc',\r\n};\r\n\r\nconst draftList = {\r\n  items: [],\r\n  itemsTotal: 0,\r\n  loading: false,\r\n  page: 1,\r\n  pageSize: config.ui.pagination.default,\r\n  pageTotal: 0,\r\n  query: '',\r\n  sortBy: 'id',\r\n  sortType: 'numeric',\r\n  sortDirection: 'desc',\r\n};\r\n\r\nconst initialState = {\r\n  list: { ...list },\r\n  draftList: { ...draftList },\r\n  products: {\r\n    items: [],\r\n    selected: '',\r\n    loading: false,\r\n  },\r\n  productsWithReports: {\r\n    items: [],\r\n    loading: false,\r\n  },\r\n  definitions: {\r\n    loading: false,\r\n  },\r\n  preBindDefinitions: {\r\n    fields: {},\r\n    loading: false,\r\n  },\r\n  coverages: {\r\n    loading: false,\r\n  },\r\n  coverageDefinitions: {\r\n    loading: false,\r\n  },\r\n  facilities: {\r\n    list: {\r\n      ...list,\r\n      sortBy: 'name',\r\n      sortType: 'lexical',\r\n      sortDirection: 'asc',\r\n    },\r\n    selected: {},\r\n    loading: false,\r\n    ratesLoaded: {},\r\n    limitsLoaded: {},\r\n  },\r\n  limits: {\r\n    items: [],\r\n    aggregateLimits: [],\r\n    loading: false,\r\n  },\r\n  countries: {\r\n    items: [],\r\n    loading: false,\r\n  },\r\n  quotes: {\r\n    items: [],\r\n    loading: false,\r\n  },\r\n  selected: {\r\n    loading: false,\r\n  },\r\n  download: {\r\n    started: false,\r\n    finished: true,\r\n    status: null,\r\n  },\r\n};\r\n\r\nconst updateFacilityRates = (items, payload) => {\r\n  return items.map((item) => {\r\n    if (item.id === payload.facilityId) {\r\n      return {\r\n        ...item,\r\n        rates: payload,\r\n      };\r\n    }\r\n\r\n    return item;\r\n  });\r\n};\r\n\r\nconst updateFacilityLimits = (items, payload) => {\r\n  return items.map((item) => {\r\n    if (item.id === payload.facilityId) {\r\n      return {\r\n        ...item,\r\n        limits: payload,\r\n      };\r\n    }\r\n\r\n    return item;\r\n  });\r\n};\r\n\r\nconst updateFacilityDetails = (items, payload) => {\r\n  return items.map((item) => {\r\n    if (item.id === payload.id) {\r\n      return {\r\n        ...item,\r\n        permissionToBindGroups: payload.permissionToBindGroups,\r\n        notifiedUsers: payload.notifiedUsers,\r\n        preBind: payload.preBind,\r\n        permissionToDismissIssuesGroups: payload.permissionToDismissIssuesGroups,\r\n      };\r\n    }\r\n\r\n    return item;\r\n  });\r\n};\r\n\r\nconst riskReducers = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    // risk\r\n    case 'RISK_POST_SUCCESS':\r\n      return {\r\n        ...state,\r\n        list: {\r\n          ...state.list,\r\n          items: [{ ...action.payload }, ...state.list.items],\r\n          itemsTotal: state.list.itemsTotal + 1,\r\n        },\r\n        selected: {\r\n          ...action.payload,\r\n          loading: false,\r\n        },\r\n      };\r\n    case 'RISK_PATCH_SUCCESS':\r\n      return {\r\n        ...state,\r\n        selected: {\r\n          ...state.selected,\r\n          augmentVersion: action.payload?.augmentVersion,\r\n          loading: false,\r\n          risk: {\r\n            ...action.payload,\r\n          },\r\n        },\r\n      };\r\n    case 'RISK_SELECTED_SET':\r\n      return {\r\n        ...state,\r\n        selected: {\r\n          ...action.payload,\r\n          loading: false,\r\n        },\r\n      };\r\n\r\n    case 'RISK_SELECTED_RESET':\r\n      return {\r\n        ...state,\r\n        selected: {},\r\n      };\r\n\r\n    // list\r\n\r\n    case 'RISK_LIST_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        list: {\r\n          ...state.list,\r\n          loading: true,\r\n        },\r\n      };\r\n    case 'RISK_LIST_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        list: {\r\n          ...state.list,\r\n          loading: false,\r\n          items: action.payload.content,\r\n          ...utils.api.pagination(action.payload),\r\n        },\r\n      };\r\n\r\n    case 'RISK_LIST_GET_FAILURE':\r\n      return {\r\n        ...state,\r\n        list: {\r\n          ...initialState.list,\r\n          loading: false,\r\n        },\r\n      };\r\n\r\n    case 'RISK_LIST_UPDATE_ITEM_RISK_STATUS':\r\n      return {\r\n        ...state,\r\n        list: {\r\n          ...state.list,\r\n          items: [\r\n            ...state.list.items.map((item) => {\r\n              if (item.id === action.payload.riskId) {\r\n                item.riskStatus = action.payload.riskStatus;\r\n              }\r\n              return item;\r\n            }),\r\n          ],\r\n        },\r\n      };\r\n\r\n    // drafts\r\n\r\n    case 'DRAFT_LIST_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        draftList: {\r\n          ...state.draftList,\r\n          loading: true,\r\n        },\r\n      };\r\n    case 'DRAFT_LIST_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        draftList: {\r\n          ...state.draftList,\r\n          loading: false,\r\n          items: action.payload.content,\r\n          ...utils.api.pagination(action.payload),\r\n        },\r\n      };\r\n\r\n    case 'DRAFT_LIST_GET_FAILURE':\r\n      return {\r\n        ...state,\r\n        draftList: {\r\n          ...state.draftList,\r\n          loading: false,\r\n        },\r\n      };\r\n\r\n    case 'DRAFT_RISK_UPDATE_SUCCESS':\r\n      return {\r\n        ...state,\r\n        draftList: {\r\n          ...state.draftList,\r\n          items: state.draftList.items.map((draft) => {\r\n            if (draft.id === action.payload.id) {\r\n              return { ...action.payload };\r\n            }\r\n\r\n            return draft;\r\n          }),\r\n        },\r\n      };\r\n    case 'DRAFT_DELETE_SUCCESS':\r\n      return {\r\n        ...state,\r\n        draftList: {\r\n          ...state.draftList,\r\n          items: state.draftList.items.filter((draft) => {\r\n            return !utils.generic.isSameId(draft.id, action.payload);\r\n          }),\r\n        },\r\n      };\r\n\r\n    case 'DRAFT_RISK_POST_SUCCESS':\r\n      return {\r\n        ...state,\r\n        draftList: {\r\n          ...state.draftList,\r\n          items: [{ ...action.payload, __new__: true }, ...state.draftList.items],\r\n          itemsTotal: state.draftList.itemsTotal + 1,\r\n        },\r\n      };\r\n\r\n    // details\r\n    case 'RISK_DETAILS_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        selected: {\r\n          ...state.selected,\r\n          loading: true,\r\n        },\r\n      };\r\n\r\n    case 'RISK_DETAILS_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        selected: {\r\n          ...action.payload,\r\n          loading: false,\r\n        },\r\n      };\r\n    case 'RISK_DETAILS_REFRESH_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        selected: {\r\n          ...action.payload,\r\n          loading: false,\r\n          risk: {\r\n            ...state.selected.risk,\r\n          },\r\n        },\r\n      };\r\n    case 'RISK_DETAILS_GET_FAILURE':\r\n      return {\r\n        ...state,\r\n        selected: {\r\n          loading: false,\r\n        },\r\n      };\r\n\r\n    // products\r\n\r\n    case 'RISK_PRODUCTS_REPORTS_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        productsWithReports: {\r\n          ...state.productsWithReports,\r\n          loading: true,\r\n        },\r\n      };\r\n\r\n    case 'RISK_PRODUCTS_REPORTS_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        productsWithReports: {\r\n          items: utils.generic.isValidArray(action.payload) ? action.payload.sort() : action.payload,\r\n          loading: false,\r\n        },\r\n      };\r\n\r\n    case 'RISK_PRODUCTS_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        products: {\r\n          ...state.products,\r\n          loading: true,\r\n        },\r\n      };\r\n\r\n    case 'RISK_PRODUCTS_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        products: {\r\n          ...state.products,\r\n          items: utils.generic.isValidArray(action.payload) ? action.payload.sort() : action.payload,\r\n          loading: false,\r\n        },\r\n      };\r\n\r\n    case 'RISK_PRODUCTS_GET_FAILURE':\r\n      return {\r\n        ...state,\r\n        products: initialState.products,\r\n      };\r\n\r\n    case 'RISK_PRODUCTS_SELECT':\r\n      return {\r\n        ...state,\r\n        products: {\r\n          ...state.products,\r\n          selected: action.payload,\r\n        },\r\n      };\r\n\r\n    case 'RISK_PRODUCTS_RESET':\r\n      return {\r\n        ...state,\r\n        products: {\r\n          ...state.products,\r\n          selected: initialState.products.selected,\r\n        },\r\n      };\r\n\r\n    // definitions\r\n    case 'RISK_DEFINITIONS_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        definitions: {\r\n          ...state.definitions,\r\n          loading: true,\r\n        },\r\n      };\r\n\r\n    case 'RISK_DEFINITIONS_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        definitions: {\r\n          ...state.definitions,\r\n          [action.payload.type]: {\r\n            fields: get(action.payload, 'data.product', []),\r\n            fieldOptions: get(action.payload, 'data.fieldOptions') || [],\r\n          },\r\n          loading: false,\r\n        },\r\n      };\r\n\r\n    case 'RISK_DEFINITIONS_GET_FAILURE':\r\n      return {\r\n        ...state,\r\n        definitions: initialState.definitions,\r\n      };\r\n\r\n    // facilities\r\n    case 'RISK_FACILITIES_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        facilities: {\r\n          ...state.facilities,\r\n          loading: true,\r\n          ratesLoaded: {},\r\n        },\r\n      };\r\n\r\n    case 'RISK_FACILITIES_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        facilities: {\r\n          ...state.facilities,\r\n          list: {\r\n            ...state.facilities.list,\r\n            items: action.payload.content,\r\n            ...utils.api.pagination(action.payload),\r\n          },\r\n          loading: false,\r\n          ratesLoaded: {},\r\n        },\r\n      };\r\n\r\n    case 'RISK_FACILITIES_GET_FAILURE':\r\n      return {\r\n        ...state,\r\n        facilities: initialState.facilities,\r\n      };\r\n\r\n    case 'RISK_FACILITIES_RESET':\r\n      return {\r\n        ...state,\r\n        facilities: initialState.facilities,\r\n      };\r\n\r\n    case 'RISK_FACILITIES_POST_SUCCESS':\r\n      return {\r\n        ...state,\r\n        facilities: {\r\n          ...state.facilities,\r\n          list: {\r\n            ...state.facilities.list,\r\n            items: [{ ...action.payload, __new__: true }, ...state.facilities.list.items],\r\n            itemsTotal: state.facilities.list.itemsTotal + 1,\r\n          },\r\n        },\r\n      };\r\n    // all facilities\r\n    case 'RISK_ALL_FACILITIES_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        facilities: {\r\n          ...state.facilities,\r\n          loading: true,\r\n        },\r\n      };\r\n\r\n    case 'RISK_ALL_FACILITIES_GET_SUCCESS':\r\n      const sortedContent = sortBy(action.payload.content, 'name');\r\n      return {\r\n        ...state,\r\n        facilities: {\r\n          ...state.facilities,\r\n          list: {\r\n            ...state.facilities.list,\r\n            items: sortedContent,\r\n          },\r\n          loading: false,\r\n        },\r\n      };\r\n\r\n    // facility rates\r\n    case 'RISK_FACILITY_RATES_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        facilities: {\r\n          ...state.facilities,\r\n          ratesLoaded: action.payload ? { [action.payload]: false } : {},\r\n        },\r\n      };\r\n\r\n    case 'RISK_FACILITY_RATES_GET_SUCCESS':\r\n      const isFacilityLoaded = action.payload.facilityId && state.facilities.list.items.find((i) => i.id === action.payload.facilityId);\r\n\r\n      return {\r\n        ...state,\r\n        facilities: {\r\n          ...state.facilities,\r\n          list: {\r\n            ...state.facilities.list,\r\n            items: isFacilityLoaded ? updateFacilityRates(state.facilities.list.items, action.payload) : state.facilities.list.items,\r\n          },\r\n          ratesLoaded: action.payload.facilityId ? { [action.payload.facilityId]: true } : {},\r\n        },\r\n      };\r\n\r\n    case 'RISK_FACILITY_RATES_GET_FAILURE':\r\n      return {\r\n        ...state,\r\n        facilities: {\r\n          ...state.facilities,\r\n          list: {\r\n            ...state.facilities.list,\r\n            items: state.facilities.list.items.map((item) => {\r\n              delete item.rates;\r\n              return item;\r\n            }),\r\n          },\r\n          ratesLoaded: action.payload.facilityId ? { [action.payload.facilityId]: true } : {},\r\n        },\r\n      };\r\n\r\n    // countries\r\n    case 'RISK_COUNTRIES_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        countries: {\r\n          ...state.countries,\r\n          loading: true,\r\n        },\r\n      };\r\n\r\n    case 'RISK_COUNTRIES_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        countries: {\r\n          ...state.countries,\r\n          items: action.payload,\r\n          loading: false,\r\n        },\r\n      };\r\n\r\n    case 'RISK_COUNTRIES_GET_FAILURE':\r\n      return {\r\n        ...state,\r\n        countries: {\r\n          ...state.countries,\r\n          items: [],\r\n          loading: false,\r\n        },\r\n      };\r\n\r\n    case 'RISK_FACILITY_RATES_POST_SUCCESS':\r\n      return {\r\n        ...state,\r\n        facilities: {\r\n          ...state.facilities,\r\n          list: {\r\n            ...state.facilities.list,\r\n            items: updateFacilityRates(state.facilities.list.items, action.payload),\r\n          },\r\n          ratesLoaded: action.payload.facilityId ? { [action.payload.facilityId]: true } : {},\r\n        },\r\n      };\r\n    case 'RISK_FACILITY_DETAILS_PUT_SUCCESS':\r\n      return {\r\n        ...state,\r\n        facilities: {\r\n          ...state.facilities,\r\n          list: {\r\n            ...state.facilities.list,\r\n            items: updateFacilityDetails(state.facilities.list.items, action.payload),\r\n          },\r\n        },\r\n      };\r\n\r\n    // quotes\r\n    case 'RISK_QUOTES_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        quotes: {\r\n          ...state.quotes,\r\n          loading: true,\r\n        },\r\n      };\r\n\r\n    case 'RISK_QUOTES_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        quotes: {\r\n          ...state.quotes,\r\n          items: action.payload.items,\r\n          loading: false,\r\n        },\r\n      };\r\n\r\n    case 'RISK_QUOTES_GET_FAILURE':\r\n      return {\r\n        ...state,\r\n        quotes: initialState.quotes,\r\n      };\r\n\r\n    case 'RISK_POST_QUOTE_SUCCESS':\r\n      const postQuoteItems = [\r\n        { ...action.payload, __new__: true },\r\n        ...state.quotes.items.map((i) => {\r\n          delete i.__new__;\r\n          return i;\r\n        }),\r\n      ];\r\n\r\n      return {\r\n        ...state,\r\n        quotes: {\r\n          ...state.quotes,\r\n          items: postQuoteItems,\r\n        },\r\n      };\r\n\r\n    // quote response\r\n    case 'RISK_POST_QUOTE_RESPONSE_SUCCESS':\r\n      // temporarily commenting until B/E also updates the risk dates after a bind\r\n      // const postResponseEffectiveFrom = get(action.payload, 'response.effectiveFrom');\r\n      // const postResponseEffectiveTo = get(action.payload, 'response.effectiveTo');\r\n      const postQuoteResponseQuotes = state.quotes.items.map((quote) => {\r\n        if (quote.id === action.payload.id) {\r\n          return action.payload;\r\n        }\r\n\r\n        return quote;\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        quotes: {\r\n          ...state.quotes,\r\n          items: postQuoteResponseQuotes,\r\n        },\r\n        // selected: {\r\n        //   ...updateRiskSelectedStatus(state, action, postQuoteResponseQuotes),\r\n        // temporarily commenting until B/E also updates the risk dates after a bind\r\n        // inceptionDate: postResponseEffectiveFrom,\r\n        // expiryDate: postResponseEffectiveTo,\r\n        // },\r\n        // list: {\r\n        //   ...state.list,\r\n        // items: updateRiskListItemsStatus(state, action, postQuoteResponseQuotes).map((item) => {\r\n        // temporarily commenting until B/E also updates the risk dates after a bind\r\n        // if (item.id === action.payload.riskId) {\r\n        //   item.inceptionDate = postResponseEffectiveFrom;\r\n        //   item.expiryDate = postResponseEffectiveTo;\r\n        // }\r\n        // return item;\r\n        // }),\r\n        // },\r\n      };\r\n\r\n    case 'DOWNLOAD_RISK_BORDEREAUX_REQUEST': {\r\n      return {\r\n        ...state,\r\n        download: {\r\n          ...state.download,\r\n          started: true,\r\n        },\r\n      };\r\n    }\r\n    case 'DOWNLOAD_RISK_BORDEREAUX_SUCCESS': {\r\n      return {\r\n        ...state,\r\n        download: {\r\n          started: false,\r\n          status: 'success',\r\n        },\r\n      };\r\n    }\r\n\r\n    case 'DOWNLOAD_RISK_BORDEREAUX_FAILURE': {\r\n      return {\r\n        ...state,\r\n        download: {\r\n          started: false,\r\n          status: 'error',\r\n        },\r\n      };\r\n    }\r\n    case 'PRE_BIND_DEFINITIONS_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        preBindDefinitions: {\r\n          ...state.preBindDefinitions,\r\n          loading: true,\r\n        },\r\n      };\r\n    case 'PRE_BIND_DEFINITIONS_GET_SUCCESS': {\r\n      return {\r\n        ...state,\r\n        preBindDefinitions: {\r\n          fields: action.payload || [],\r\n          loading: false,\r\n        },\r\n      };\r\n    }\r\n\r\n    case 'PRE_BIND_DEFINITIONS_GET_FAILURE':\r\n      return {\r\n        ...state,\r\n        preBindDefinitions: initialState.preBindDefinitions,\r\n      };\r\n\r\n    case 'RISK_PREBIND_POST_SUCCESS': {\r\n      return {\r\n        ...state,\r\n        selected: {\r\n          ...state.selected,\r\n          risk: { ...state.selected.risk, ...action.payload.risk },\r\n        },\r\n      };\r\n    }\r\n\r\n    // Coverage Comparison\r\n    case 'COVERAGE_DEFINITIONS_GET_REQUEST': {\r\n      return {\r\n        ...state,\r\n        coverageDefinitions: {\r\n          ...state.coverageDefinitions,\r\n          loading: true,\r\n        },\r\n      };\r\n    }\r\n\r\n    case 'COVERAGE_DEFINITIONS_GET_SUCCESS': {\r\n      return {\r\n        ...state,\r\n        coverageDefinitions: {\r\n          ...state.coverageDefinitions,\r\n          [action.payload.product]: action.payload.definition,\r\n          loading: false,\r\n        },\r\n      };\r\n    }\r\n\r\n    case 'COVERAGE_DEFINITIONS_GET_FAILURE': {\r\n      return {\r\n        ...state,\r\n        coverageDefinitions: initialState.coverageDefinitions,\r\n      };\r\n    }\r\n\r\n    case 'RISK_COVERAGE_GET_SUCCESS': {\r\n      return {\r\n        ...state,\r\n        coverages: {\r\n          ...state.coverages,\r\n          selected: action.payload,\r\n          loading: false,\r\n        },\r\n      };\r\n    }\r\n\r\n    case 'RISK_COVERAGE_POST_SUCCESS': {\r\n      const isCoveragePresent = state.coverages.selected.find((coverage) => coverage.id === action.payload.id);\r\n      return {\r\n        ...state,\r\n        coverages: {\r\n          ...state.coverages,\r\n          selected: isCoveragePresent ? [...state.coverages.selected] : [...state.coverages.selected, action.payload],\r\n          loading: false,\r\n        },\r\n      };\r\n    }\r\n\r\n    case 'RISK_COVERAGE_POST_EDIT_SUCCESS': {\r\n      return {\r\n        ...state,\r\n        coverages: {\r\n          ...state.coverages,\r\n          selected: [\r\n            ...state.coverages.selected.map((coverage) => {\r\n              if (coverage.id === action.payload.coverageId) {\r\n                return action.payload.responseData;\r\n              }\r\n              return coverage;\r\n            }),\r\n          ],\r\n          loading: false,\r\n        },\r\n      };\r\n    }\r\n\r\n    case 'RISK_COVERAGE_DELETE_SUCCESS': {\r\n      return {\r\n        ...state,\r\n        coverages: {\r\n          ...state.coverages,\r\n          selected: [...state.coverages.selected.filter((c) => c.id !== action.payload)],\r\n          loading: false,\r\n        },\r\n      };\r\n    }\r\n\r\n    case 'RISK_COVERAGE_PUT_ACTIVATE_SUCCESS': {\r\n      return {\r\n        ...state,\r\n        selected: {\r\n          ...action.payload,\r\n          loading: false,\r\n        },\r\n      };\r\n    }\r\n\r\n    // Facility Limits Definition GET request\r\n    case 'RISK_FACILITY_LIMITS_DEF_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        limits: {\r\n          ...state.limits,\r\n          loading: true,\r\n        },\r\n      };\r\n\r\n    case 'RISK_FACILITY_LIMITS_DEF_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        limits: {\r\n          ...state.limits,\r\n          items: action.payload,\r\n          loading: false,\r\n        },\r\n      };\r\n\r\n    case 'RISK_FACILITY_LIMITS_DEF_GET_FAILURE':\r\n      return {\r\n        ...state,\r\n        limits: {\r\n          ...state.limits,\r\n          items: [],\r\n          loading: false,\r\n        },\r\n      };\r\n\r\n    // Facility Limits\r\n    case 'RISK_FACILITY_LIMIT_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        facilities: {\r\n          ...state.facilities,\r\n          limitsLoaded: action.payload ? { [action.payload]: false } : {},\r\n          loading: true,\r\n        },\r\n      };\r\n\r\n    case 'RISK_FACILITY_LIMIT_GET_SUCCESS':\r\n      const isFacLoaded = action.payload.facilityId && state.facilities.list.items.find((i) => i.id === action.payload.facilityId);\r\n      return {\r\n        ...state,\r\n        facilities: {\r\n          ...state.facilities,\r\n          list: {\r\n            ...state.facilities.list,\r\n            items: isFacLoaded ? updateFacilityLimits(state.facilities.list.items, action.payload) : state.facilities.list.items,\r\n          },\r\n          limitsLoaded: action.payload.facilityId ? { [action.payload.facilityId]: true } : {},\r\n          loading: false,\r\n        },\r\n      };\r\n\r\n    case 'RISK_FACILITY_LIMIT_GET_FAILURE':\r\n      return {\r\n        ...state,\r\n        facilities: {\r\n          ...state.facilities,\r\n          list: {\r\n            ...state.facilities.list,\r\n            items: state.facilities.list.items.map((item) => {\r\n              delete item.limits;\r\n              return item;\r\n            }),\r\n          },\r\n          limitsLoaded: action.payload.facilityId ? { [action.payload.facilityId]: true } : {},\r\n          loading: false,\r\n        },\r\n      };\r\n\r\n    case 'RISK_FACILITY_LIMITS_POST_SUCCESS':\r\n      return {\r\n        ...state,\r\n        facilities: {\r\n          ...state.facilities,\r\n          list: {\r\n            ...state.facilities.list,\r\n            items: updateFacilityLimits(state.facilities.list.items, action.payload),\r\n          },\r\n          ratesLoaded: action.payload.facilityId ? { [action.payload.facilityId]: true } : {},\r\n        },\r\n      };\r\n    // Facility Limits Definition GET request\r\n    case 'RISK_FACILITY_AGGREGATE_LIMITS_GRAPH_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        limits: {\r\n          ...state.limits,\r\n          loading: true,\r\n        },\r\n      };\r\n\r\n    case 'RISK_FACILITY_AGGREGATE_LIMITS_GRAPH_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        limits: {\r\n          ...state.limits,\r\n          aggregateLimits: action.payload,\r\n          loading: false,\r\n        },\r\n      };\r\n\r\n    case 'RISK_FACILITY_AGGREGATE_LIMITS_GRAPH_GET_FAILURE':\r\n      return {\r\n        ...state,\r\n        limits: {\r\n          ...state.limits,\r\n          aggregateLimits: [],\r\n          loading: false,\r\n        },\r\n      };\r\n    case 'UPDATE_ISSUE_SUCCESS':\r\n      return {\r\n        ...state,\r\n        quotes: {\r\n          ...state.quotes,\r\n          items: state.quotes.items.map((quote) => {\r\n            if (quote.id === action.quoteId) {\r\n              return {\r\n                ...quote,\r\n                issues: quote.issues.map((issue) => {\r\n                  if (issue.id === action.payload.id) {\r\n                    return action.payload;\r\n                  }\r\n                  return issue;\r\n                }),\r\n              };\r\n            }\r\n            return quote;\r\n          }),\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default riskReducers;\r\n"]},"metadata":{},"sourceType":"module"}