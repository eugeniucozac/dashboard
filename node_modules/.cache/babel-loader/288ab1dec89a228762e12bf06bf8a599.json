{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\StructuringTable\\\\StructuringTable.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport get from 'lodash/get';\nimport has from 'lodash/has';\nimport useMediaQuery from '@material-ui/core/useMediaQuery'; // app\n\nimport { StructuringTableView } from './StructuringTable.view';\nimport { Translate } from 'components';\nimport { bulkPlacementLayerToggle, bulkPlacementMarketToggle, deletePlacementLayer, deletePlacementLayerMarket, selectLayerMarket, showModal, selectPlacementBulkType, selectPlacementMarkets, selectMarketSelectedId, selectRefDataCapacityTypes, selectRefDataStatusIdByCode, selectRefDataStatusKeyByCode, selectBulkToggleSelect, selectPlacementBulkItemsLayers, selectPlacementBulkItemsMarkets, selectRefDataStatusesMarketQuote } from 'stores';\nimport { STATUS_POLICY_NTU } from 'consts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nStructuringTable.propTypes = {\n  layers: PropTypes.array.isRequired,\n  commentIDs: PropTypes.array,\n  rowLimit: PropTypes.number,\n  printView: PropTypes.bool,\n  showHeaderRow: PropTypes.bool\n};\nStructuringTable.defaultProps = {\n  printView: false,\n  showHeaderRow: true\n};\nexport default function StructuringTable(_ref) {\n  _s();\n\n  var layers = _ref.layers,\n      commentIDs = _ref.commentIDs,\n      rowLimit = _ref.rowLimit,\n      printView = _ref.printView,\n      showHeaderRow = _ref.showHeaderRow;\n  var dispatch = useDispatch();\n  var placementBulkType = useSelector(selectPlacementBulkType);\n  var placementMarkets = useSelector(selectPlacementMarkets);\n  var marketSelectedId = useSelector(selectMarketSelectedId);\n  var refDataCapacityTypes = useSelector(selectRefDataCapacityTypes);\n  var statusPolicyNtuId = useSelector(selectRefDataStatusIdByCode('policy', STATUS_POLICY_NTU));\n  var statusPolicyNtuLabel = useSelector(selectRefDataStatusKeyByCode('policy', STATUS_POLICY_NTU));\n  var showBulkSelect = useSelector(selectBulkToggleSelect);\n  var placementBulkItemsLayers = useSelector(selectPlacementBulkItemsLayers);\n  var placementBulkItemsLayerMarkets = useSelector(selectPlacementBulkItemsMarkets);\n  var policyMarketQuoteStatuses = useSelector(selectRefDataStatusesMarketQuote);\n\n  var handleEditLayer = function handleEditLayer(popoverData) {\n    dispatch(showModal({\n      component: 'EDIT_PLACEMENT_LAYER',\n      props: {\n        title: 'placement.marketing.editLayer',\n        subtitle: popoverData.title,\n        fullWidth: true,\n        maxWidth: 'sm',\n        componentProps: {\n          layer: popoverData.layer\n        }\n      }\n    }));\n  };\n\n  var handleDeleteLayer = function handleDeleteLayer(popoverData) {\n    dispatch(showModal({\n      component: 'CONFIRM_DELETE',\n      props: {\n        title: 'placement.marketing.deleteLayer',\n        subtitle: popoverData.title,\n        fullWidth: true,\n        maxWidth: 'xs',\n        disableAutoFocus: true,\n        componentProps: {\n          submitHandler: function submitHandler() {\n            dispatch(deletePlacementLayer(get(popoverData, 'layer.id')));\n          }\n        }\n      }\n    }));\n  };\n\n  var handleAddLayerMarket = function handleAddLayerMarket(popoverData) {\n    dispatch(showModal({\n      component: 'ADD_PLACEMENT_LAYER_MARKET',\n      props: {\n        title: 'placement.marketing.addMarket',\n        subtitle: popoverData.title,\n        fullWidth: true,\n        maxWidth: 'sm',\n        disableAutoFocus: true,\n        componentProps: {\n          layer: popoverData.layer,\n          placementMarkets: placementMarkets\n        }\n      }\n    }));\n  };\n\n  var handleDuplicateLayerMarket = function handleDuplicateLayerMarket(popoverData) {\n    dispatch(showModal({\n      component: 'ADD_PLACEMENT_LAYER_MARKET',\n      props: {\n        title: 'placement.marketing.duplicateLayerMarket',\n        subtitle: popoverData.title,\n        fullWidth: true,\n        maxWidth: 'sm',\n        disableAutoFocus: true,\n        componentProps: {\n          isDuplicateMarket: true,\n          layer: popoverData === null || popoverData === void 0 ? void 0 : popoverData.layer,\n          placementMarkets: placementMarkets,\n          line: popoverData === null || popoverData === void 0 ? void 0 : popoverData.layerMarket\n        }\n      }\n    }));\n  };\n\n  var handleDeleteLayerMarket = function handleDeleteLayerMarket(popoverData) {\n    dispatch(showModal({\n      component: 'CONFIRM_DELETE',\n      props: {\n        title: 'placement.marketing.deleteLayerMarket',\n        subtitle: popoverData.title,\n        fullWidth: true,\n        maxWidth: 'xs',\n        disableAutoFocus: true,\n        componentProps: {\n          submitHandler: function submitHandler() {\n            dispatch(deletePlacementLayerMarket(get(popoverData, 'layerMarket.id')));\n          }\n        }\n      }\n    }));\n  };\n\n  var handleEditLayerMarket = function handleEditLayerMarket(popoverData) {\n    var _popoverData$layerMar, _popoverData$layerMar2;\n\n    var marketId = (_popoverData$layerMar = popoverData.layerMarket) === null || _popoverData$layerMar === void 0 ? void 0 : (_popoverData$layerMar2 = _popoverData$layerMar.market) === null || _popoverData$layerMar2 === void 0 ? void 0 : _popoverData$layerMar2.id;\n    dispatch(showModal({\n      component: 'EDIT_PLACEMENT_MARKETS_LAYERS',\n      props: {\n        fullWidth: false,\n        maxWidth: 'lg',\n        title: 'placement.marketing.manageMarket',\n        componentProps: {\n          placementLayer: popoverData.layer,\n          placementMarket: placementMarkets.find(function (m) {\n            var _m$market;\n\n            return ((_m$market = m.market) === null || _m$market === void 0 ? void 0 : _m$market.id) === marketId;\n          })\n        }\n      }\n    }));\n  };\n\n  var handleToggleMarket = function handleToggleMarket(marketId) {\n    return function (event) {\n      dispatch(selectLayerMarket(marketId));\n    };\n  };\n\n  var handleBulkSelectLayer = function handleBulkSelectLayer(selected, layerId, marketList) {\n    return function (event) {\n      event.stopPropagation();\n      dispatch(bulkPlacementLayerToggle(selected, layerId, marketList));\n    };\n  };\n\n  var handleBulkSelectMarket = function handleBulkSelectMarket(layerId, marketId) {\n    return function (event) {\n      event.stopPropagation();\n      dispatch(bulkPlacementMarketToggle(layerId, marketId));\n    };\n  };\n\n  var getSelectedBulkMarketsByLayer = function getSelectedBulkMarketsByLayer(layer) {\n    var markets = get(layer, 'markets') || [];\n    return markets.filter(function (marketObj) {\n      return has(marketObj, 'id') && placementBulkItemsLayerMarkets.includes(marketObj.id);\n    });\n  };\n\n  var layerTitleWidth = useMediaQuery('(max-width:1400px)');\n  var cols = [_objectSpread({\n    id: 'layer',\n    title: true\n  }, layerTitleWidth && {\n    width: 250\n  }), {\n    id: 'umr',\n    label: /*#__PURE__*/_jsxDEV(Translate, {\n      label: \"placement.generic.umr\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 25\n    }, this),\n    align: 'center',\n    width: 120\n  }, {\n    id: 'section',\n    label: /*#__PURE__*/_jsxDEV(Translate, {\n      label: \"placement.generic.section\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 29\n    }, this),\n    align: 'center',\n    compact: true,\n    width: 80\n  }, {\n    id: 'premium',\n    label: /*#__PURE__*/_jsxDEV(Translate, {\n      label: \"placement.generic.premium\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 29\n    }, this),\n    align: 'center',\n    compact: true,\n    width: 100\n  }, {\n    id: 'written',\n    label: /*#__PURE__*/_jsxDEV(Translate, {\n      label: \"placement.generic.written\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 29\n    }, this),\n    align: 'center',\n    compact: true,\n    width: 80\n  }, {\n    id: 'status',\n    label: /*#__PURE__*/_jsxDEV(Translate, {\n      label: \"placement.generic.status\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 28\n    }, this),\n    align: 'center',\n    compact: true,\n    width: 80\n  }, {\n    id: 'comments',\n    align: 'center',\n    compact: true,\n    width: 24\n  }, {\n    id: 'actions',\n    menu: true,\n    width: 24,\n    style: {\n      paddingLeft: 0,\n      paddingRight: 0\n    }\n  }];\n  return /*#__PURE__*/_jsxDEV(StructuringTableView, {\n    layers: layers,\n    commentIDs: commentIDs,\n    marketSelectedId: marketSelectedId,\n    cols: cols,\n    capacityTypes: refDataCapacityTypes,\n    rowLimit: rowLimit,\n    printView: printView,\n    showHeaderRow: showHeaderRow,\n    showBulkSelect: showBulkSelect,\n    statuses: {\n      policyNtu: {\n        id: statusPolicyNtuId,\n        key: statusPolicyNtuLabel\n      },\n      policyMarketQuoteStatuses: policyMarketQuoteStatuses\n    },\n    bulk: {\n      type: placementBulkType,\n      items: placementBulkItemsLayers,\n      itemsMarkets: placementBulkItemsLayerMarkets\n    },\n    handlers: {\n      bulkSelectLayer: handleBulkSelectLayer,\n      bulkSelectMarket: handleBulkSelectMarket,\n      editLayer: handleEditLayer,\n      deleteLayer: handleDeleteLayer,\n      addLayerMarket: handleAddLayerMarket,\n      editLayerMarket: handleEditLayerMarket,\n      deleteLayerMarket: handleDeleteLayerMarket,\n      getSelectedBulkMarketsByLayer: getSelectedBulkMarketsByLayer,\n      toggleMarket: handleToggleMarket,\n      duplicateLayerMarket: handleDuplicateLayerMarket\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 5\n  }, this);\n}\n\n_s(StructuringTable, \"njGoKDgFGps4LWziOqQfKGfNn2Y=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useMediaQuery];\n});\n\n_c = StructuringTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"StructuringTable\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/StructuringTable/StructuringTable.js"],"names":["React","PropTypes","useDispatch","useSelector","get","has","useMediaQuery","StructuringTableView","Translate","bulkPlacementLayerToggle","bulkPlacementMarketToggle","deletePlacementLayer","deletePlacementLayerMarket","selectLayerMarket","showModal","selectPlacementBulkType","selectPlacementMarkets","selectMarketSelectedId","selectRefDataCapacityTypes","selectRefDataStatusIdByCode","selectRefDataStatusKeyByCode","selectBulkToggleSelect","selectPlacementBulkItemsLayers","selectPlacementBulkItemsMarkets","selectRefDataStatusesMarketQuote","STATUS_POLICY_NTU","StructuringTable","propTypes","layers","array","isRequired","commentIDs","rowLimit","number","printView","bool","showHeaderRow","defaultProps","dispatch","placementBulkType","placementMarkets","marketSelectedId","refDataCapacityTypes","statusPolicyNtuId","statusPolicyNtuLabel","showBulkSelect","placementBulkItemsLayers","placementBulkItemsLayerMarkets","policyMarketQuoteStatuses","handleEditLayer","popoverData","component","props","title","subtitle","fullWidth","maxWidth","componentProps","layer","handleDeleteLayer","disableAutoFocus","submitHandler","handleAddLayerMarket","handleDuplicateLayerMarket","isDuplicateMarket","line","layerMarket","handleDeleteLayerMarket","handleEditLayerMarket","marketId","market","id","placementLayer","placementMarket","find","m","handleToggleMarket","event","handleBulkSelectLayer","selected","layerId","marketList","stopPropagation","handleBulkSelectMarket","getSelectedBulkMarketsByLayer","markets","filter","marketObj","includes","layerTitleWidth","cols","width","label","align","compact","menu","style","paddingLeft","paddingRight","policyNtu","key","type","items","itemsMarkets","bulkSelectLayer","bulkSelectMarket","editLayer","deleteLayer","addLayerMarket","editLayerMarket","deleteLayerMarket","toggleMarket","duplicateLayerMarket"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport get from 'lodash/get';\r\nimport has from 'lodash/has';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\n\r\n// app\r\nimport { StructuringTableView } from './StructuringTable.view';\r\nimport { Translate } from 'components';\r\nimport {\r\n  bulkPlacementLayerToggle,\r\n  bulkPlacementMarketToggle,\r\n  deletePlacementLayer,\r\n  deletePlacementLayerMarket,\r\n  selectLayerMarket,\r\n  showModal,\r\n  selectPlacementBulkType,\r\n  selectPlacementMarkets,\r\n  selectMarketSelectedId,\r\n  selectRefDataCapacityTypes,\r\n  selectRefDataStatusIdByCode,\r\n  selectRefDataStatusKeyByCode,\r\n  selectBulkToggleSelect,\r\n  selectPlacementBulkItemsLayers,\r\n  selectPlacementBulkItemsMarkets,\r\n  selectRefDataStatusesMarketQuote,\r\n} from 'stores';\r\nimport { STATUS_POLICY_NTU } from 'consts';\r\n\r\nStructuringTable.propTypes = {\r\n  layers: PropTypes.array.isRequired,\r\n  commentIDs: PropTypes.array,\r\n  rowLimit: PropTypes.number,\r\n  printView: PropTypes.bool,\r\n  showHeaderRow: PropTypes.bool,\r\n};\r\n\r\nStructuringTable.defaultProps = {\r\n  printView: false,\r\n  showHeaderRow: true,\r\n};\r\n\r\nexport default function StructuringTable({ layers, commentIDs, rowLimit, printView, showHeaderRow }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const placementBulkType = useSelector(selectPlacementBulkType);\r\n  const placementMarkets = useSelector(selectPlacementMarkets);\r\n  const marketSelectedId = useSelector(selectMarketSelectedId);\r\n  const refDataCapacityTypes = useSelector(selectRefDataCapacityTypes);\r\n  const statusPolicyNtuId = useSelector(selectRefDataStatusIdByCode('policy', STATUS_POLICY_NTU));\r\n  const statusPolicyNtuLabel = useSelector(selectRefDataStatusKeyByCode('policy', STATUS_POLICY_NTU));\r\n  const showBulkSelect = useSelector(selectBulkToggleSelect);\r\n  const placementBulkItemsLayers = useSelector(selectPlacementBulkItemsLayers);\r\n  const placementBulkItemsLayerMarkets = useSelector(selectPlacementBulkItemsMarkets);\r\n  const policyMarketQuoteStatuses = useSelector(selectRefDataStatusesMarketQuote);\r\n\r\n  const handleEditLayer = (popoverData) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'EDIT_PLACEMENT_LAYER',\r\n        props: {\r\n          title: 'placement.marketing.editLayer',\r\n          subtitle: popoverData.title,\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          componentProps: {\r\n            layer: popoverData.layer,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleDeleteLayer = (popoverData) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM_DELETE',\r\n        props: {\r\n          title: 'placement.marketing.deleteLayer',\r\n          subtitle: popoverData.title,\r\n          fullWidth: true,\r\n          maxWidth: 'xs',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            submitHandler: () => {\r\n              dispatch(deletePlacementLayer(get(popoverData, 'layer.id')));\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleAddLayerMarket = (popoverData) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'ADD_PLACEMENT_LAYER_MARKET',\r\n        props: {\r\n          title: 'placement.marketing.addMarket',\r\n          subtitle: popoverData.title,\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            layer: popoverData.layer,\r\n            placementMarkets,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleDuplicateLayerMarket = (popoverData) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'ADD_PLACEMENT_LAYER_MARKET',\r\n        props: {\r\n          title: 'placement.marketing.duplicateLayerMarket',\r\n          subtitle: popoverData.title,\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            isDuplicateMarket: true,\r\n            layer: popoverData?.layer,\r\n            placementMarkets,\r\n            line: popoverData?.layerMarket,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleDeleteLayerMarket = (popoverData) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM_DELETE',\r\n        props: {\r\n          title: 'placement.marketing.deleteLayerMarket',\r\n          subtitle: popoverData.title,\r\n          fullWidth: true,\r\n          maxWidth: 'xs',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            submitHandler: () => {\r\n              dispatch(deletePlacementLayerMarket(get(popoverData, 'layerMarket.id')));\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleEditLayerMarket = (popoverData) => {\r\n    const marketId = popoverData.layerMarket?.market?.id;\r\n\r\n    dispatch(\r\n      showModal({\r\n        component: 'EDIT_PLACEMENT_MARKETS_LAYERS',\r\n        props: {\r\n          fullWidth: false,\r\n          maxWidth: 'lg',\r\n          title: 'placement.marketing.manageMarket',\r\n          componentProps: {\r\n            placementLayer: popoverData.layer,\r\n            placementMarket: placementMarkets.find((m) => m.market?.id === marketId),\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleToggleMarket = (marketId) => (event) => {\r\n    dispatch(selectLayerMarket(marketId));\r\n  };\r\n\r\n  const handleBulkSelectLayer = (selected, layerId, marketList) => (event) => {\r\n    event.stopPropagation();\r\n    dispatch(bulkPlacementLayerToggle(selected, layerId, marketList));\r\n  };\r\n\r\n  const handleBulkSelectMarket = (layerId, marketId) => (event) => {\r\n    event.stopPropagation();\r\n    dispatch(bulkPlacementMarketToggle(layerId, marketId));\r\n  };\r\n\r\n  const getSelectedBulkMarketsByLayer = (layer) => {\r\n    const markets = get(layer, 'markets') || [];\r\n    return markets.filter((marketObj) => {\r\n      return has(marketObj, 'id') && placementBulkItemsLayerMarkets.includes(marketObj.id);\r\n    });\r\n  };\r\n\r\n  const layerTitleWidth = useMediaQuery('(max-width:1400px)');\r\n\r\n  const cols = [\r\n    { id: 'layer', title: true, ...(layerTitleWidth && { width: 250 }) },\r\n    { id: 'umr', label: <Translate label=\"placement.generic.umr\" />, align: 'center', width: 120 },\r\n    { id: 'section', label: <Translate label=\"placement.generic.section\" />, align: 'center', compact: true, width: 80 },\r\n    { id: 'premium', label: <Translate label=\"placement.generic.premium\" />, align: 'center', compact: true, width: 100 },\r\n    { id: 'written', label: <Translate label=\"placement.generic.written\" />, align: 'center', compact: true, width: 80 },\r\n    { id: 'status', label: <Translate label=\"placement.generic.status\" />, align: 'center', compact: true, width: 80 },\r\n    { id: 'comments', align: 'center', compact: true, width: 24 },\r\n    { id: 'actions', menu: true, width: 24, style: { paddingLeft: 0, paddingRight: 0 } },\r\n  ];\r\n\r\n  return (\r\n    <StructuringTableView\r\n      layers={layers}\r\n      commentIDs={commentIDs}\r\n      marketSelectedId={marketSelectedId}\r\n      cols={cols}\r\n      capacityTypes={refDataCapacityTypes}\r\n      rowLimit={rowLimit}\r\n      printView={printView}\r\n      showHeaderRow={showHeaderRow}\r\n      showBulkSelect={showBulkSelect}\r\n      statuses={{\r\n        policyNtu: {\r\n          id: statusPolicyNtuId,\r\n          key: statusPolicyNtuLabel,\r\n        },\r\n        policyMarketQuoteStatuses,\r\n      }}\r\n      bulk={{\r\n        type: placementBulkType,\r\n        items: placementBulkItemsLayers,\r\n        itemsMarkets: placementBulkItemsLayerMarkets,\r\n      }}\r\n      handlers={{\r\n        bulkSelectLayer: handleBulkSelectLayer,\r\n        bulkSelectMarket: handleBulkSelectMarket,\r\n        editLayer: handleEditLayer,\r\n        deleteLayer: handleDeleteLayer,\r\n        addLayerMarket: handleAddLayerMarket,\r\n        editLayerMarket: handleEditLayerMarket,\r\n        deleteLayerMarket: handleDeleteLayerMarket,\r\n        getSelectedBulkMarketsByLayer,\r\n        toggleMarket: handleToggleMarket,\r\n        duplicateLayerMarket: handleDuplicateLayerMarket,\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}