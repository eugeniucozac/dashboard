{"ast":null,"code":"import _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport get from 'lodash/get';\nimport * as utils from 'utils';\nimport { firstBy } from 'thenby';\nvar initialState = {\n  businessTypes: [],\n  capacityTypes: [],\n  clients: [],\n  countries: [],\n  currencies: [],\n  departments: [],\n  insureds: [],\n  markets: [],\n  offices: [],\n  statuses: {\n    account: [],\n    placement: [],\n    policy: [],\n    policyMarketQuote: []\n  },\n  underwriters: [],\n  loaded: false,\n  // new reference data properties - extended edge\n  documentTypes: [],\n  documentTypeLookUp: [],\n  businessProcesses: [],\n  processTypes: [],\n  rfiTypes: [],\n  currencyCodes: [],\n  xbInstances: [],\n  bpmFlags: [],\n  bpmStages: [],\n  marketTypes: [],\n  queryCodes: [],\n  resolutionCode: [],\n  countriesList: [],\n  catCodes: [],\n  warrantyList: [{\n    sourceSystemID: 5,\n    warrantyTypeID: 5,\n    description: 'N/A',\n    code: 'na'\n  }, {\n    sourceSystemID: 2,\n    warrantyTypeID: 2,\n    description: 'PPW',\n    code: 'PPW'\n  }, {\n    sourceSystemID: 3,\n    warrantyTypeID: 3,\n    description: 'PPC',\n    code: 'PPC'\n  }, {\n    sourceSystemID: 4,\n    warrantyTypeID: 4,\n    description: 'LSW',\n    code: 'LSW'\n  }, {\n    sourceSystemID: 1,\n    warrantyTypeID: 1,\n    description: 'SDD/TOT',\n    code: 'TOT'\n  }],\n  thirdParty: [],\n  settlementCurrency: []\n};\n\nvar referenceDataReducers = function referenceDataReducers() {\n  var _action$payload;\n\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'REFERENCE_DATA_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        businessTypes: [],\n        capacityTypes: action.payload.capacityTypes || [],\n        currencies: action.payload.currencies,\n        countries: utils.generic.isValidArray(action.payload.countries) ? action.payload.countries.filter(function (c) {\n          return c.codeAlpha2 && c.codeAlpha3 && c.name;\n        }) : [],\n        departments: action.payload.departments,\n        statuses: {\n          placement: action.payload.placementStatuses,\n          policy: action.payload.policyStatuses,\n          policyMarketQuote: action.payload.policyMarketQuoteStatuses,\n          account: action.payload.accountStatuses\n        },\n        newRenewalBusinesses: action.payload.newRenewalBusinesses,\n        rationales: action.payload.placementMarketRationales,\n        declinatures: action.payload.placementMarketDeclinatures,\n        loaded: true\n      });\n\n    case 'REFERENCE_DATA_FILTER_BUSINESSTYPES_BY_DEPTID':\n      var parsedBusinessTypes = [];\n      var departments = get(state, \"departments\", {});\n      var currentDepartment = departments.find(function (dept) {\n        return dept.id === action.payload;\n      });\n\n      if (currentDepartment && get(currentDepartment, 'businessTypes', []).length > 0) {\n        parsedBusinessTypes = currentDepartment.businessTypes.sort(firstBy(utils.sort.array('numeric', 'sequenceNumber')).thenBy(utils.sort.array('lexical', 'description')));\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        businessTypes: parsedBusinessTypes\n      });\n\n    case 'REFERENCE_DATA_GET_BY_TYPE_MARKETS_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        markets: action.payload,\n        underwriters: []\n      });\n\n    case 'REFERENCE_DATA_GET_BY_TYPE_OFFICES_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        offices: utils.office.withFullName(action.payload)\n      });\n\n    case 'REFERENCE_DATA_GET_BY_TYPE_CLIENTS_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        clients: action.payload\n      });\n\n    case 'REFERENCE_DATA_GET_BY_TYPE_INSUREDS_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        insureds: action.payload\n      });\n\n    case 'REFERENCE_DATA_FILTER_UNDERWRITERS_BY_MARKET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        underwriters: _toConsumableArray(get(action, 'payload.underwriters', []))\n      });\n\n    case 'REFERENCE_DATA_RESET_BUSINESS_TYPES':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        businessTypes: []\n      });\n\n    case 'REFERENCE_DATA_RESET_MARKETS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        markets: []\n      });\n\n    case 'REFERENCE_DATA_RESET_UNDERWRITERS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        underwriters: []\n      });\n\n    case 'REFERENCE_DATA_RESET_INSUREDS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        insureds: []\n      });\n\n    case 'REFERENCE_DATA_GET_XB_INSTANCES_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        xbInstances: action.payload\n      });\n\n    case 'REFERENCE_DATA_GET_XB_INSTANCES_DEPARTMENTS_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        xbInstances: state.xbInstances.map(function (xbi) {\n          if (action.payload.id === xbi.id) {\n            return _objectSpread(_objectSpread({}, xbi), {}, {\n              departments: action.payload.departments\n            });\n          } else {\n            return xbi;\n          }\n        })\n      });\n\n    case 'REFERENCE_DATA_GET_NEW_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        documentTypes: action.payload.documentType,\n        documentTypeLookUp: ((_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.documentTypeLookUp) || [],\n        businessProcesses: action.payload.businessProcess,\n        processTypes: action.payload.processType,\n        rfiTypes: action.payload.rfiType,\n        currencyCodes: action.payload.currencyCode,\n        xbInstances: action.payload.source,\n        marketTypes: action.payload.marketTypes,\n        bordereauType: action.payload.bordereauType,\n        facilityType: action.payload.facilityType,\n        bordereauPolicyType: action.payload.bordereauPolicyType,\n        queryCodes: action.payload.queryCodes,\n        countriesList: action.payload.countries,\n        catCodes: action.payload.catCodes,\n        warrantyList: action.payload.warrantyList || initialState.warrantyList,\n        thirdParty: action.payload.thirdParty,\n        settlementCurrency: action.payload.settlementCurrency\n      });\n\n    case 'REFERENCE_DATA_GET_NEW_BPM_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        bpmFlags: action.payload.bpmFlag,\n        bpmStages: action.payload.bpmStage\n      });\n\n    case 'REFERENCE_DATA_TYPE_NEW_ODS_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        querycode: action.payload.querycode,\n        resolutionCode: action.payload.resolutionCode\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default referenceDataReducers;","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/referenceData/referenceData.reducers.js"],"names":["get","utils","firstBy","initialState","businessTypes","capacityTypes","clients","countries","currencies","departments","insureds","markets","offices","statuses","account","placement","policy","policyMarketQuote","underwriters","loaded","documentTypes","documentTypeLookUp","businessProcesses","processTypes","rfiTypes","currencyCodes","xbInstances","bpmFlags","bpmStages","marketTypes","queryCodes","resolutionCode","countriesList","catCodes","warrantyList","sourceSystemID","warrantyTypeID","description","code","thirdParty","settlementCurrency","referenceDataReducers","state","action","type","payload","generic","isValidArray","filter","c","codeAlpha2","codeAlpha3","name","placementStatuses","policyStatuses","policyMarketQuoteStatuses","accountStatuses","newRenewalBusinesses","rationales","placementMarketRationales","declinatures","placementMarketDeclinatures","parsedBusinessTypes","currentDepartment","find","dept","id","length","sort","array","thenBy","office","withFullName","map","xbi","documentType","businessProcess","processType","rfiType","currencyCode","source","bordereauType","facilityType","bordereauPolicyType","bpmFlag","bpmStage","querycode"],"mappings":"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","sourcesContent":["import get from 'lodash/get';\r\nimport * as utils from 'utils';\r\nimport { firstBy } from 'thenby';\r\n\r\nconst initialState = {\r\n  businessTypes: [],\r\n  capacityTypes: [],\r\n  clients: [],\r\n  countries: [],\r\n  currencies: [],\r\n  departments: [],\r\n  insureds: [],\r\n  markets: [],\r\n  offices: [],\r\n  statuses: {\r\n    account: [],\r\n    placement: [],\r\n    policy: [],\r\n    policyMarketQuote: [],\r\n  },\r\n  underwriters: [],\r\n  loaded: false,\r\n\r\n  // new reference data properties - extended edge\r\n  documentTypes: [],\r\n  documentTypeLookUp: [],\r\n  businessProcesses: [],\r\n  processTypes: [],\r\n  rfiTypes: [],\r\n  currencyCodes: [],\r\n  xbInstances: [],\r\n  bpmFlags: [],\r\n  bpmStages: [],\r\n  marketTypes: [],\r\n  queryCodes: [],\r\n  resolutionCode: [],\r\n  countriesList: [],\r\n  catCodes: [],\r\n  warrantyList: [\r\n    { sourceSystemID: 5, warrantyTypeID: 5, description: 'N/A', code: 'na' },\r\n    { sourceSystemID: 2, warrantyTypeID: 2, description: 'PPW', code: 'PPW' },\r\n    { sourceSystemID: 3, warrantyTypeID: 3, description: 'PPC', code: 'PPC' },\r\n    { sourceSystemID: 4, warrantyTypeID: 4, description: 'LSW', code: 'LSW' },\r\n    { sourceSystemID: 1, warrantyTypeID: 1, description: 'SDD/TOT', code: 'TOT' },\r\n  ],\r\n  thirdParty: [],\r\n  settlementCurrency: [],\r\n};\r\n\r\nconst referenceDataReducers = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'REFERENCE_DATA_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        businessTypes: [],\r\n        capacityTypes: action.payload.capacityTypes || [],\r\n        currencies: action.payload.currencies,\r\n        countries: utils.generic.isValidArray(action.payload.countries)\r\n          ? action.payload.countries.filter((c) => c.codeAlpha2 && c.codeAlpha3 && c.name)\r\n          : [],\r\n        departments: action.payload.departments,\r\n        statuses: {\r\n          placement: action.payload.placementStatuses,\r\n          policy: action.payload.policyStatuses,\r\n          policyMarketQuote: action.payload.policyMarketQuoteStatuses,\r\n          account: action.payload.accountStatuses,\r\n        },\r\n        newRenewalBusinesses: action.payload.newRenewalBusinesses,\r\n        rationales: action.payload.placementMarketRationales,\r\n        declinatures: action.payload.placementMarketDeclinatures,\r\n        loaded: true,\r\n      };\r\n\r\n    case 'REFERENCE_DATA_FILTER_BUSINESSTYPES_BY_DEPTID':\r\n      let parsedBusinessTypes = [];\r\n      const departments = get(state, `departments`, {});\r\n\r\n      const currentDepartment = departments.find((dept) => {\r\n        return dept.id === action.payload;\r\n      });\r\n\r\n      if (currentDepartment && get(currentDepartment, 'businessTypes', []).length > 0) {\r\n        parsedBusinessTypes = currentDepartment.businessTypes.sort(\r\n          firstBy(utils.sort.array('numeric', 'sequenceNumber')).thenBy(utils.sort.array('lexical', 'description'))\r\n        );\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        businessTypes: parsedBusinessTypes,\r\n      };\r\n\r\n    case 'REFERENCE_DATA_GET_BY_TYPE_MARKETS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        markets: action.payload,\r\n        underwriters: [],\r\n      };\r\n\r\n    case 'REFERENCE_DATA_GET_BY_TYPE_OFFICES_SUCCESS':\r\n      return {\r\n        ...state,\r\n        offices: utils.office.withFullName(action.payload),\r\n      };\r\n\r\n    case 'REFERENCE_DATA_GET_BY_TYPE_CLIENTS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        clients: action.payload,\r\n      };\r\n\r\n    case 'REFERENCE_DATA_GET_BY_TYPE_INSUREDS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        insureds: action.payload,\r\n      };\r\n\r\n    case 'REFERENCE_DATA_FILTER_UNDERWRITERS_BY_MARKET':\r\n      return {\r\n        ...state,\r\n        underwriters: [...get(action, 'payload.underwriters', [])],\r\n      };\r\n\r\n    case 'REFERENCE_DATA_RESET_BUSINESS_TYPES':\r\n      return {\r\n        ...state,\r\n        businessTypes: [],\r\n      };\r\n\r\n    case 'REFERENCE_DATA_RESET_MARKETS':\r\n      return {\r\n        ...state,\r\n        markets: [],\r\n      };\r\n\r\n    case 'REFERENCE_DATA_RESET_UNDERWRITERS':\r\n      return {\r\n        ...state,\r\n        underwriters: [],\r\n      };\r\n\r\n    case 'REFERENCE_DATA_RESET_INSUREDS':\r\n      return {\r\n        ...state,\r\n        insureds: [],\r\n      };\r\n\r\n    case 'REFERENCE_DATA_GET_XB_INSTANCES_SUCCESS':\r\n      return {\r\n        ...state,\r\n        xbInstances: action.payload,\r\n      };\r\n\r\n    case 'REFERENCE_DATA_GET_XB_INSTANCES_DEPARTMENTS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        xbInstances: state.xbInstances.map((xbi) => {\r\n          if (action.payload.id === xbi.id) {\r\n            return { ...xbi, departments: action.payload.departments };\r\n          } else {\r\n            return xbi;\r\n          }\r\n        }),\r\n      };\r\n\r\n    case 'REFERENCE_DATA_GET_NEW_SUCCESS':\r\n      return {\r\n        ...state,\r\n        documentTypes: action.payload.documentType,\r\n        documentTypeLookUp: action.payload?.documentTypeLookUp || [],\r\n        businessProcesses: action.payload.businessProcess,\r\n        processTypes: action.payload.processType,\r\n        rfiTypes: action.payload.rfiType,\r\n        currencyCodes: action.payload.currencyCode,\r\n        xbInstances: action.payload.source,\r\n        marketTypes: action.payload.marketTypes,\r\n        bordereauType: action.payload.bordereauType,\r\n        facilityType: action.payload.facilityType,\r\n        bordereauPolicyType: action.payload.bordereauPolicyType,\r\n        queryCodes: action.payload.queryCodes,\r\n        countriesList: action.payload.countries,\r\n        catCodes: action.payload.catCodes,\r\n        warrantyList: action.payload.warrantyList || initialState.warrantyList,\r\n        thirdParty: action.payload.thirdParty,\r\n        settlementCurrency: action.payload.settlementCurrency,\r\n      };\r\n    case 'REFERENCE_DATA_GET_NEW_BPM_SUCCESS':\r\n      return {\r\n        ...state,\r\n        bpmFlags: action.payload.bpmFlag,\r\n        bpmStages: action.payload.bpmStage,\r\n      };\r\n\r\n    case 'REFERENCE_DATA_TYPE_NEW_ODS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        querycode: action.payload.querycode,\r\n        resolutionCode: action.payload.resolutionCode,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default referenceDataReducers;\r\n"]},"metadata":{},"sourceType":"module"}