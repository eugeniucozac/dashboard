{"ast":null,"code":"import \"core-js/modules/es.array.sort\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ClaimsTasksTabProcessingTable\\\\ClaimsTasksTabProcessingTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport get from 'lodash/get';\nimport xorBy from 'lodash/xorBy'; // app\n\nimport { ClaimsTasksTabProcessingView } from './ClaimsTasksTabProcessingTable.view';\nimport { selectClaimsTasksProcessingPagination, expandSidebar, collapseSidebar, selectClaimsTasksProcessingSelected, selectClaimsProcessingTasksSelected } from 'stores';\nimport { useSort, usePagination } from 'hooks';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ClaimsTasksTabProcessingTable(_ref) {\n  _s();\n\n  var isTaskTeam = _ref.isTaskTeam,\n      tasks = _ref.tasks,\n      colsArr = _ref.cols,\n      columnProps = _ref.columnProps,\n      sortObj = _ref.sort,\n      handleSort = _ref.handleSort,\n      handleChangePage = _ref.handleChangePage,\n      handleChangeRowsPerPage = _ref.handleChangeRowsPerPage,\n      handleUpdateTaskPriority = _ref.handleUpdateTaskPriority,\n      refreshTasksGrid = _ref.refreshTasksGrid;\n  var dispatch = useDispatch();\n  var uiSidebarExpanded = useSelector(function (state) {\n    return get(state, 'ui.sidebar.expanded');\n  });\n  var tasksProcessingSelected = useSelector(selectClaimsTasksProcessingSelected);\n  var tasksProcessingPagination = useSelector(selectClaimsTasksProcessingPagination);\n\n  var _useSort = useSort(colsArr, sortObj, handleSort),\n      cols = _useSort.cols,\n      sort = _useSort.sort;\n\n  var pagination = usePagination((tasks === null || tasks === void 0 ? void 0 : tasks.items) || [], tasksProcessingPagination, handleChangePage, handleChangeRowsPerPage);\n  var taskItems = (tasks === null || tasks === void 0 ? void 0 : tasks.items) || [];\n  var hasTasks = utils.generic.isValidArray(taskItems, true);\n  var tasksProcessingSelectedLength = (tasksProcessingSelected === null || tasksProcessingSelected === void 0 ? void 0 : tasksProcessingSelected.length) || 0;\n  useEffect(function () {\n    if (tasksProcessingSelectedLength !== 1) {\n      dispatch(collapseSidebar());\n    }\n  }, [tasksProcessingSelectedLength]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var selectTask = function selectTask(taskObj) {\n    return function () {\n      var selectedTasksArray = xorBy(tasksProcessingSelected, [taskObj], 'taskId');\n\n      if (taskObj === null || taskObj === void 0 ? void 0 : taskObj.taskId) {\n        dispatch(selectClaimsProcessingTasksSelected(taskObj, true));\n\n        if (!uiSidebarExpanded && (selectedTasksArray === null || selectedTasksArray === void 0 ? void 0 : selectedTasksArray.length) === 1) {\n          dispatch(expandSidebar());\n        }\n      }\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(ClaimsTasksTabProcessingView, {\n    isTaskTeam: isTaskTeam,\n    hasTasks: hasTasks,\n    taskItems: taskItems,\n    tasksSelected: tasksProcessingSelected,\n    cols: cols,\n    columnProps: columnProps,\n    handleUpdateTaskPriority: handleUpdateTaskPriority,\n    sort: sort,\n    pagination: pagination,\n    handleSort: handleSort,\n    handlers: {\n      selectTask: selectTask\n    },\n    refreshTasksGrid: refreshTasksGrid\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ClaimsTasksTabProcessingTable, \"+NcW8n6QdhimhtsYRyq3DL+TnPw=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSort, usePagination];\n});\n\n_c = ClaimsTasksTabProcessingTable;\nClaimsTasksTabProcessingTable.displayName = \"ClaimsTasksTabProcessingTable\";\nClaimsTasksTabProcessingTable.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"ClaimsTasksTabProcessingTable\"\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\modules\\\\ClaimsTasksTabProcessingTable\\\\ClaimsTasksTabProcessingTable.js\"] = {\n    name: \"ClaimsTasksTabProcessingTable\",\n    docgenInfo: ClaimsTasksTabProcessingTable.__docgenInfo,\n    path: \"src\\\\modules\\\\ClaimsTasksTabProcessingTable\\\\ClaimsTasksTabProcessingTable.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimsTasksTabProcessingTable\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ClaimsTasksTabProcessingTable/ClaimsTasksTabProcessingTable.js"],"names":["React","useEffect","PropTypes","useSelector","useDispatch","get","xorBy","ClaimsTasksTabProcessingView","selectClaimsTasksProcessingPagination","expandSidebar","collapseSidebar","selectClaimsTasksProcessingSelected","selectClaimsProcessingTasksSelected","useSort","usePagination","utils","ClaimsTasksTabProcessingTable","isTaskTeam","tasks","colsArr","cols","columnProps","sortObj","sort","handleSort","handleChangePage","handleChangeRowsPerPage","handleUpdateTaskPriority","refreshTasksGrid","dispatch","uiSidebarExpanded","state","tasksProcessingSelected","tasksProcessingPagination","pagination","items","taskItems","hasTasks","generic","isValidArray","tasksProcessingSelectedLength","length","selectTask","taskObj","selectedTasksArray","taskId"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport get from 'lodash/get';\r\nimport xorBy from 'lodash/xorBy';\r\n\r\n// app\r\nimport { ClaimsTasksTabProcessingView } from './ClaimsTasksTabProcessingTable.view';\r\nimport {\r\n  selectClaimsTasksProcessingPagination,\r\n  expandSidebar,\r\n  collapseSidebar,\r\n  selectClaimsTasksProcessingSelected,\r\n  selectClaimsProcessingTasksSelected,\r\n} from 'stores';\r\nimport { useSort, usePagination } from 'hooks';\r\nimport * as utils from 'utils';\r\n\r\nexport default function ClaimsTasksTabProcessingTable({\r\n  isTaskTeam,\r\n  tasks,\r\n  cols: colsArr,\r\n  columnProps,\r\n  sort: sortObj,\r\n  handleSort,\r\n  handleChangePage,\r\n  handleChangeRowsPerPage,\r\n  handleUpdateTaskPriority,\r\n  refreshTasksGrid,\r\n}) {\r\n  const dispatch = useDispatch();\r\n  const uiSidebarExpanded = useSelector((state) => get(state, 'ui.sidebar.expanded'));\r\n  const tasksProcessingSelected = useSelector(selectClaimsTasksProcessingSelected);\r\n  const tasksProcessingPagination = useSelector(selectClaimsTasksProcessingPagination);\r\n  const { cols, sort } = useSort(colsArr, sortObj, handleSort);\r\n  const pagination = usePagination(\r\n    tasks?.items || [],\r\n    tasksProcessingPagination,\r\n    handleChangePage,\r\n    handleChangeRowsPerPage\r\n  );\r\n  const taskItems = tasks?.items || [];\r\n  const hasTasks = utils.generic.isValidArray(taskItems, true);\r\n\r\n  const tasksProcessingSelectedLength = tasksProcessingSelected?.length || 0;\r\n\r\n  useEffect(() => {\r\n    if (tasksProcessingSelectedLength !== 1) {\r\n      dispatch(collapseSidebar());\r\n    }\r\n  }, [tasksProcessingSelectedLength]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const selectTask = (taskObj) => () => {\r\n      const selectedTasksArray = xorBy(tasksProcessingSelected, [taskObj], 'taskId');\r\n\r\n    if (taskObj?.taskId) {\r\n        dispatch(selectClaimsProcessingTasksSelected(taskObj, true));\r\n        if (!uiSidebarExpanded && selectedTasksArray?.length === 1) {\r\n          dispatch(expandSidebar());\r\n        }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ClaimsTasksTabProcessingView\r\n      isTaskTeam={isTaskTeam}\r\n      hasTasks={hasTasks}\r\n      taskItems={taskItems}\r\n      tasksSelected={tasksProcessingSelected}\r\n      cols={cols}\r\n      columnProps={columnProps}\r\n      handleUpdateTaskPriority={handleUpdateTaskPriority}\r\n      sort={sort}\r\n      pagination={pagination}\r\n      handleSort={handleSort}\r\n      handlers={{\r\n        selectTask\r\n      }}\r\n      refreshTasksGrid={refreshTasksGrid}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}