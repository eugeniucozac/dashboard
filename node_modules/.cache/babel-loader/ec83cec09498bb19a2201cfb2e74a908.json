{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n// app\nimport * as utils from 'utils';\nimport get from 'lodash/get';\nimport { authLogout, addLoader, enqueueNotification, hideModal, removeLoader } from 'stores';\nexport var postEditLossInformation = function postEditLossInformation(formData) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var state = getState();\n    var lossInformation = get(state, 'claims.lossInformation', {});\n    var lossDetailID = lossInformation.lossDetailID || formData.lossDetailID;\n    var catCodesID = formData.catCodesID;\n    var defaultError = {\n      file: 'stores/claims.actions.postEditLossInformation'\n    };\n    dispatch(postEditLossInformationRequest(formData));\n    dispatch(addLoader('postEditLossInformation'));\n\n    if (!formData || !lossDetailID) {\n      dispatch(postEditLossInformationFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Data missing for PUT request'\n      })));\n      dispatch(enqueueNotification('notification.lossInformation.fail', 'error'));\n      dispatch(hideModal());\n      dispatch(removeLoader('postEditLossInformation'));\n      return;\n    }\n\n    var addDateAndTime = function addDateAndTime(contactDate, contactTime) {\n      if (!contactDate) return contactDate;\n      var actualDate = new Date(utils.string.t('format.date', {\n        value: {\n          date: contactDate,\n          format: 'D MMM YYYY'\n        }\n      }) + ' ' + (contactTime ? contactTime + ':00' : '00:00:00'));\n      return actualDate || contactDate;\n    }; // remove unwanted form values\n\n\n    delete formData.catCodesID;\n\n    var body = _objectSpread(_objectSpread({}, formData), {}, {\n      catCodesID: catCodesID === null || catCodesID === void 0 ? void 0 : catCodesID.id,\n      firstContactDate: addDateAndTime(formData === null || formData === void 0 ? void 0 : formData.firstContactDate, formData === null || formData === void 0 ? void 0 : formData.firstContactTime),\n      isActive: 1,\n      lossDetailID: lossDetailID\n    });\n\n    return utils.api.put({\n      token: auth.accessToken,\n      endpoint: endpoint.claimService,\n      path: \"api/data/loss/\".concat(lossDetailID),\n      data: body\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (data) {\n      dispatch(postEditLossInformationSuccess(data.data));\n      dispatch(enqueueNotification('notification.lossInformation.updatedSuccess', 'success'));\n      dispatch(removeLoader('postEditLossInformation'));\n      return data;\n    }).catch(function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API fetch error'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(postEditLossInformationFailure(err));\n      dispatch(enqueueNotification('notification.lossInformation.fail', 'error'));\n      dispatch(hideModal());\n      dispatch(removeLoader('postEditLossInformation'));\n      return err;\n    });\n  };\n};\nexport var postEditLossInformationRequest = function postEditLossInformationRequest(data) {\n  return {\n    type: 'LOSS_INFORMATION_EDIT_REQUEST',\n    payload: data\n  };\n};\nexport var postEditLossInformationSuccess = function postEditLossInformationSuccess(data) {\n  return {\n    type: 'LOSS_INFORMATION_EDIT_SUCCESS',\n    payload: data\n  };\n};\nexport var postEditLossInformationFailure = function postEditLossInformationFailure(error) {\n  return {\n    type: 'LOSS_INFORMATION_EDIT_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.postEditLossInformation.js"],"names":["utils","get","authLogout","addLoader","enqueueNotification","hideModal","removeLoader","postEditLossInformation","formData","dispatch","getState","auth","user","endpoint","config","vars","state","lossInformation","lossDetailID","catCodesID","defaultError","file","postEditLossInformationRequest","postEditLossInformationFailure","message","addDateAndTime","contactDate","contactTime","actualDate","Date","string","t","value","date","format","body","id","firstContactDate","firstContactTime","isActive","api","put","token","accessToken","claimService","path","data","then","response","handleResponse","postEditLossInformationSuccess","catch","err","errorParams","handleError","handleUnauthorized","type","payload","error"],"mappings":"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","sourcesContent":["// app\r\nimport * as utils from 'utils';\r\nimport get from 'lodash/get';\r\nimport { authLogout, addLoader, enqueueNotification, hideModal, removeLoader } from 'stores';\r\n\r\nexport const postEditLossInformation = (formData) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } } } = getState();\r\n\r\n  const state = getState();\r\n  const lossInformation = get(state, 'claims.lossInformation', {});\r\n  const lossDetailID = lossInformation.lossDetailID || formData.lossDetailID;\r\n  const { catCodesID } = formData;\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.postEditLossInformation',\r\n  };\r\n\r\n  dispatch(postEditLossInformationRequest(formData));\r\n  dispatch(addLoader('postEditLossInformation'));\r\n\r\n  if (!formData || !lossDetailID) {\r\n    dispatch(postEditLossInformationFailure({ ...defaultError, message: 'Data missing for PUT request' }));\r\n    dispatch(enqueueNotification('notification.lossInformation.fail', 'error'));\r\n    dispatch(hideModal());\r\n    dispatch(removeLoader('postEditLossInformation'));\r\n    return;\r\n  }\r\n\r\n  const addDateAndTime = (contactDate, contactTime) => {\r\n    if (!contactDate) return contactDate;\r\n    let actualDate = new Date(\r\n      utils.string.t('format.date', { value: { date: contactDate, format: 'D MMM YYYY' } }) +\r\n        ' ' +\r\n        (contactTime ? contactTime + ':00' : '00:00:00')\r\n    );\r\n    return actualDate || contactDate;\r\n  };\r\n\r\n  // remove unwanted form values\r\n  delete formData.catCodesID;\r\n\r\n  const body = {\r\n    ...formData,\r\n    catCodesID: catCodesID?.id,\r\n    firstContactDate: addDateAndTime(formData?.firstContactDate, formData?.firstContactTime),\r\n    isActive: 1,\r\n    lossDetailID,\r\n  };\r\n\r\n  return utils.api\r\n    .put({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.claimService,\r\n      path: `api/data/loss/${lossDetailID}`,\r\n      data: body,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((data) => {\r\n      dispatch(postEditLossInformationSuccess(data.data));\r\n      dispatch(enqueueNotification('notification.lossInformation.updatedSuccess', 'success'));\r\n      dispatch(removeLoader('postEditLossInformation'));\r\n      return data;\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        ...defaultError,\r\n        message: 'API fetch error',\r\n      };\r\n\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(postEditLossInformationFailure(err));\r\n      dispatch(enqueueNotification('notification.lossInformation.fail', 'error'));\r\n      dispatch(hideModal());\r\n      dispatch(removeLoader('postEditLossInformation'));\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const postEditLossInformationRequest = (data) => {\r\n  return {\r\n    type: 'LOSS_INFORMATION_EDIT_REQUEST',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const postEditLossInformationSuccess = (data) => {\r\n  return {\r\n    type: 'LOSS_INFORMATION_EDIT_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const postEditLossInformationFailure = (error) => {\r\n  return {\r\n    type: 'LOSS_INFORMATION_EDIT_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}