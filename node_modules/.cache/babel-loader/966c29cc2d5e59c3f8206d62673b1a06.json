{"ast":null,"code":"import { authLogout } from 'stores';\nimport * as utils from 'utils';\nexport var getAggregateLimitsGraph = function getAggregateLimitsGraph(facilityId) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/risk.actions.getAggregateLimitsGraph'\n    };\n    dispatch(getAggLimitsGraphRequest(facilityId));\n\n    if (!facilityId) {\n      dispatch(getAggLimitsGraphFailure(defaultError));\n      return;\n    }\n\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.auth,\n      path: \"api/v1/facilities/\".concat(facilityId, \"/aggregate-limits\")\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      dispatch(getAggLimitsGraphSuccess(json.aggregateFieldLimits));\n    }).catch(function (err) {\n      utils.api.handleError(err, defaultError);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(getAggLimitsGraphFailure(err, facilityId));\n      return err;\n    });\n  };\n};\nexport var getAggLimitsGraphRequest = function getAggLimitsGraphRequest(facilityId) {\n  return {\n    type: 'RISK_FACILITY_AGGREGATE_LIMITS_GRAPH_GET_REQUEST',\n    payload: facilityId\n  };\n};\nexport var getAggLimitsGraphSuccess = function getAggLimitsGraphSuccess(data) {\n  return {\n    type: 'RISK_FACILITY_AGGREGATE_LIMITS_GRAPH_GET_SUCCESS',\n    payload: data\n  };\n};\nexport var getAggLimitsGraphFailure = function getAggLimitsGraphFailure(error, facilityId) {\n  return {\n    type: 'RISK_FACILITY_AGGREGATE_LIMITS_GRAPH_GET_FAILURE',\n    payload: {\n      error: error,\n      facilityId: facilityId\n    }\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/risk/risk.actions.getLimitsGraph.js"],"names":["authLogout","utils","getAggregateLimitsGraph","facilityId","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","getAggLimitsGraphRequest","getAggLimitsGraphFailure","api","get","token","accessToken","path","then","response","handleResponse","json","getAggLimitsGraphSuccess","aggregateFieldLimits","catch","err","handleError","handleUnauthorized","type","payload","data","error"],"mappings":"AAAA,SAASA,UAAT,QAA2B,QAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAO,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,UAAD;AAAA,SAAgB,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC7E;AAD6E,oBAElBA,QAAQ,EAFU;AAAA,QAE7DC,IAF6D,aAErEC,IAFqE,CAE7DD,IAF6D;AAAA,QAEnCE,QAFmC,aAErDC,MAFqD,CAE3CC,IAF2C,CAEnCF,QAFmC;;AAI7E,QAAMG,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE;AADa,KAArB;AAIAR,IAAAA,QAAQ,CAACS,wBAAwB,CAACV,UAAD,CAAzB,CAAR;;AAEA,QAAI,CAACA,UAAL,EAAiB;AACfC,MAAAA,QAAQ,CAACU,wBAAwB,CAACH,YAAD,CAAzB,CAAR;AACA;AACD;;AAED,WAAOV,KAAK,CAACc,GAAN,CACJC,GADI,CACA;AACHC,MAAAA,KAAK,EAAEX,IAAI,CAACY,WADT;AAEHV,MAAAA,QAAQ,EAAEA,QAAQ,CAACF,IAFhB;AAGHa,MAAAA,IAAI,8BAAuBhB,UAAvB;AAHD,KADA,EAMJiB,IANI,CAMC,UAACC,QAAD;AAAA,aAAcpB,KAAK,CAACc,GAAN,CAAUO,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAND,EAOJD,IAPI,CAOC,UAACG,IAAD,EAAU;AACdnB,MAAAA,QAAQ,CAACoB,wBAAwB,CAACD,IAAI,CAACE,oBAAN,CAAzB,CAAR;AACD,KATI,EAUJC,KAVI,CAUE,UAACC,GAAD,EAAS;AACd1B,MAAAA,KAAK,CAACc,GAAN,CAAUa,WAAV,CAAsBD,GAAtB,EAA2BhB,YAA3B;AACAV,MAAAA,KAAK,CAACc,GAAN,CAAUc,kBAAV,CAA6BF,GAA7B,EAAkCvB,QAAlC,EAA4CJ,UAA5C;AACAI,MAAAA,QAAQ,CAACU,wBAAwB,CAACa,GAAD,EAAMxB,UAAN,CAAzB,CAAR;AACA,aAAOwB,GAAP;AACD,KAfI,CAAP;AAgBD,GA/BsC;AAAA,CAAhC;AAiCP,OAAO,IAAMd,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACV,UAAD,EAAgB;AACtD,SAAO;AACL2B,IAAAA,IAAI,EAAE,kDADD;AAELC,IAAAA,OAAO,EAAE5B;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMqB,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACQ,IAAD,EAAU;AAChD,SAAO;AACLF,IAAAA,IAAI,EAAE,kDADD;AAELC,IAAAA,OAAO,EAAEC;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMlB,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACmB,KAAD,EAAQ9B,UAAR,EAAuB;AAC7D,SAAO;AACL2B,IAAAA,IAAI,EAAE,kDADD;AAELC,IAAAA,OAAO,EAAE;AAAEE,MAAAA,KAAK,EAALA,KAAF;AAAS9B,MAAAA,UAAU,EAAVA;AAAT;AAFJ,GAAP;AAID,CALM","sourcesContent":["import { authLogout } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const getAggregateLimitsGraph = (facilityId) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } } } = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/risk.actions.getAggregateLimitsGraph',\r\n  };\r\n\r\n  dispatch(getAggLimitsGraphRequest(facilityId));\r\n\r\n  if (!facilityId) {\r\n    dispatch(getAggLimitsGraphFailure(defaultError));\r\n    return;\r\n  }\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.auth,\r\n      path: `api/v1/facilities/${facilityId}/aggregate-limits`,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => {\r\n      dispatch(getAggLimitsGraphSuccess(json.aggregateFieldLimits));\r\n    })\r\n    .catch((err) => {\r\n      utils.api.handleError(err, defaultError);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(getAggLimitsGraphFailure(err, facilityId));\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const getAggLimitsGraphRequest = (facilityId) => {\r\n  return {\r\n    type: 'RISK_FACILITY_AGGREGATE_LIMITS_GRAPH_GET_REQUEST',\r\n    payload: facilityId,\r\n  };\r\n};\r\n\r\nexport const getAggLimitsGraphSuccess = (data) => {\r\n  return {\r\n    type: 'RISK_FACILITY_AGGREGATE_LIMITS_GRAPH_GET_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const getAggLimitsGraphFailure = (error, facilityId) => {\r\n  return {\r\n    type: 'RISK_FACILITY_AGGREGATE_LIMITS_GRAPH_GET_FAILURE',\r\n    payload: { error, facilityId },\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}