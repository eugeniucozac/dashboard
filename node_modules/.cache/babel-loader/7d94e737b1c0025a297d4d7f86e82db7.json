{"ast":null,"code":"import \"core-js/modules/es.array.sort\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\components\\\\ChartTable\\\\ChartTable.view.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport get from 'lodash/get'; // app\n\nimport styles from './ChartTable.styles';\nimport { Overflow, Pagination, TableCell, TableHead, Tooltip } from 'components';\nimport * as utils from 'utils'; // mui\n\nimport { makeStyles, Box, Table, TableRow, TableBody } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartTableView.propTypes = {\n  id: PropTypes.string,\n  items: PropTypes.array.isRequired,\n  cols: PropTypes.array.isRequired,\n  sort: PropTypes.object.isRequired,\n  pagination: PropTypes.object.isRequired,\n  stacked: PropTypes.bool,\n  hover: PropTypes.bool,\n  tooltip: PropTypes.func,\n  onClick: PropTypes.func,\n  getRowValue: PropTypes.func.isRequired,\n  getRowPercentage: PropTypes.func.isRequired\n};\nexport function ChartTableView(_ref) {\n  var _this = this;\n\n  var id = _ref.id,\n      items = _ref.items,\n      cols = _ref.cols,\n      sort = _ref.sort,\n      pagination = _ref.pagination,\n      stacked = _ref.stacked,\n      maxValue = _ref.maxValue,\n      maxCount = _ref.maxCount,\n      getRowValue = _ref.getRowValue,\n      getRowPercentage = _ref.getRowPercentage,\n      hover = _ref.hover,\n      tooltip = _ref.tooltip,\n      onClick = _ref.onClick;\n  var classes = makeStyles(styles, {\n    name: 'ChartTable'\n  })();\n  var page = get(pagination, 'obj.page');\n  var count = get(pagination, 'obj.rowsTotal');\n  var rowsPerPage = get(pagination, 'obj.rowsPerPage'); // colors\n\n  var colorsCount = stacked ? maxCount : count;\n  var colors = utils.color.scale(colorsCount);\n  var colorsByDirection = stacked ? colors : sort.direction === 'desc' ? colors.reverse() : colors;\n  return /*#__PURE__*/_jsxDEV(Box, {\n    width: \"100%\",\n    children: [/*#__PURE__*/_jsxDEV(Overflow, {\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        size: \"small\",\n        className: classes.table,\n        \"data-testid\": \"chart-table\".concat(id ? \"-\".concat(id) : ''),\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          columns: cols,\n          sorting: {\n            by: sort.by,\n            direction: sort.direction\n          },\n          nestedClasses: {\n            tableHead: classes.tableHead\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          \"data-testid\": \"chart-table-list\",\n          children: items.map(function (row, index) {\n            var datasets = row && row.datasets || [];\n            var rowValueTotal = getRowValue(row);\n            var rowPercentage = getRowPercentage(maxValue, rowValueTotal);\n            var rowLabel = row.label || row.value;\n            return /*#__PURE__*/_jsxDEV(TableRow, {\n              hover: hover,\n              selected: false,\n              \"data-testid\": \"chart-table-row-\".concat(row.id),\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                compact: true,\n                ellipsis: true,\n                title: row.name,\n                nestedClasses: {\n                  root: classes.cellName\n                },\n                children: row.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 19\n              }, _this), cols.find(function (col) {\n                return col.id === 'department';\n              }) && /*#__PURE__*/_jsxDEV(TableCell, {\n                compact: true,\n                ellipsis: true,\n                title: row.department,\n                nestedClasses: {\n                  root: classes.cellDept\n                },\n                children: row.department\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 21\n              }, _this), cols.find(function (col) {\n                return col.id === 'offices';\n              }) && /*#__PURE__*/_jsxDEV(TableCell, {\n                compact: true,\n                ellipsis: true,\n                title: row.offices,\n                nestedClasses: {\n                  root: classes.cellOffice\n                },\n                children: row.offices\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 21\n              }, _this), /*#__PURE__*/_jsxDEV(TableCell, {\n                nowrap: true,\n                nestedClasses: {\n                  root: classes.cellValue\n                },\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: classes.bar,\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: classes.barBg,\n                    children: rowLabel\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 87,\n                    columnNumber: 23\n                  }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: classnames([classes.barBg, classes.barValueContainer]),\n                    style: {\n                      width: rowPercentage + '%'\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: classes.barLabel,\n                      children: rowLabel\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 90,\n                      columnNumber: 25\n                    }, _this), datasets.map(function (dataset, datasetIndex) {\n                      var tooltipText = utils.generic.isFunction(tooltip) && tooltip(row, dataset);\n                      var colorIndex = stacked ? datasetIndex : index + rowsPerPage * page;\n                      var stylesBarInner = {\n                        width: getRowPercentage(rowValueTotal, dataset.value) + '%',\n                        backgroundColor: colorsByDirection[colorIndex]\n                      };\n                      return /*#__PURE__*/_jsxDEV(Tooltip, {\n                        block: true,\n                        title: tooltipText,\n                        style: stylesBarInner,\n                        className: classes.barTooltip,\n                        children: /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: classnames([classes.barBg, classes.barValue]),\n                          style: _objectSpread(_objectSpread({}, stylesBarInner), {}, {\n                            width: '100%'\n                          }),\n                          onClick: utils.generic.isFunction(onClick) && onClick(row, dataset)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 109,\n                          columnNumber: 31\n                        }, _this)\n                      }, \"\".concat(datasetIndex, \"-\").concat(dataset.id), false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 102,\n                        columnNumber: 29\n                      }, _this);\n                    })]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 89,\n                    columnNumber: 23\n                  }, _this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 86,\n                  columnNumber: 21\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 19\n              }, _this)]\n            }, \"\".concat(index, \"-\").concat(row.id), true, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 17\n            }, _this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      page: page,\n      count: count,\n      rowsPerPage: rowsPerPage,\n      onChangePage: get(pagination, 'handlers.handleChangePage'),\n      onChangeRowsPerPage: get(pagination, 'handlers.handleChangeRowsPerPage')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_c = ChartTableView;\nChartTableView.displayName = \"ChartTableView\";\nChartTableView.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"ChartTableView\",\n  \"props\": {\n    \"id\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"items\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"cols\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"sort\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"pagination\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"stacked\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"hover\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"tooltip\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"onClick\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"getRowValue\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"getRowPercentage\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\components\\\\ChartTable\\\\ChartTable.view.js\"] = {\n    name: \"ChartTableView\",\n    docgenInfo: ChartTableView.__docgenInfo,\n    path: \"src\\\\components\\\\ChartTable\\\\ChartTable.view.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartTableView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/ChartTable/ChartTable.view.js"],"names":["React","PropTypes","classnames","get","styles","Overflow","Pagination","TableCell","TableHead","Tooltip","utils","makeStyles","Box","Table","TableRow","TableBody","ChartTableView","propTypes","id","string","items","array","isRequired","cols","sort","object","pagination","stacked","bool","hover","tooltip","func","onClick","getRowValue","getRowPercentage","maxValue","maxCount","classes","name","page","count","rowsPerPage","colorsCount","colors","color","scale","colorsByDirection","direction","reverse","table","by","tableHead","map","row","index","datasets","rowValueTotal","rowPercentage","rowLabel","label","value","root","cellName","find","col","department","cellDept","offices","cellOffice","cellValue","bar","barBg","barValueContainer","width","barLabel","dataset","datasetIndex","tooltipText","generic","isFunction","colorIndex","stylesBarInner","backgroundColor","barTooltip","barValue"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames';\r\nimport get from 'lodash/get';\r\n\r\n// app\r\nimport styles from './ChartTable.styles';\r\nimport { Overflow, Pagination, TableCell, TableHead, Tooltip } from 'components';\r\nimport * as utils from 'utils';\r\n\r\n// mui\r\nimport { makeStyles, Box, Table, TableRow, TableBody } from '@material-ui/core';\r\n\r\nChartTableView.propTypes = {\r\n  id: PropTypes.string,\r\n  items: PropTypes.array.isRequired,\r\n  cols: PropTypes.array.isRequired,\r\n  sort: PropTypes.object.isRequired,\r\n  pagination: PropTypes.object.isRequired,\r\n  stacked: PropTypes.bool,\r\n  hover: PropTypes.bool,\r\n  tooltip: PropTypes.func,\r\n  onClick: PropTypes.func,\r\n  getRowValue: PropTypes.func.isRequired,\r\n  getRowPercentage: PropTypes.func.isRequired,\r\n};\r\n\r\nexport function ChartTableView({\r\n  id,\r\n  items,\r\n  cols,\r\n  sort,\r\n  pagination,\r\n  stacked,\r\n  maxValue,\r\n  maxCount,\r\n  getRowValue,\r\n  getRowPercentage,\r\n  hover,\r\n  tooltip,\r\n  onClick,\r\n}) {\r\n  const classes = makeStyles(styles, { name: 'ChartTable' })();\r\n\r\n  const page = get(pagination, 'obj.page');\r\n  const count = get(pagination, 'obj.rowsTotal');\r\n  const rowsPerPage = get(pagination, 'obj.rowsPerPage');\r\n\r\n  // colors\r\n  const colorsCount = stacked ? maxCount : count;\r\n  const colors = utils.color.scale(colorsCount);\r\n  const colorsByDirection = stacked ? colors : sort.direction === 'desc' ? colors.reverse() : colors;\r\n\r\n  return (\r\n    <Box width=\"100%\">\r\n      <Overflow>\r\n        <Table size=\"small\" className={classes.table} data-testid={`chart-table${id ? `-${id}` : ''}`}>\r\n          <TableHead columns={cols} sorting={{ by: sort.by, direction: sort.direction }} nestedClasses={{ tableHead: classes.tableHead }} />\r\n\r\n          <TableBody data-testid=\"chart-table-list\">\r\n            {items.map((row, index) => {\r\n              const datasets = (row && row.datasets) || [];\r\n              const rowValueTotal = getRowValue(row);\r\n              const rowPercentage = getRowPercentage(maxValue, rowValueTotal);\r\n              const rowLabel = row.label || row.value;\r\n\r\n              return (\r\n                <TableRow key={`${index}-${row.id}`} hover={hover} selected={false} data-testid={`chart-table-row-${row.id}`}>\r\n                  <TableCell compact ellipsis title={row.name} nestedClasses={{ root: classes.cellName }}>\r\n                    {row.name}\r\n                  </TableCell>\r\n\r\n                  {cols.find((col) => col.id === 'department') && (\r\n                    <TableCell compact ellipsis title={row.department} nestedClasses={{ root: classes.cellDept }}>\r\n                      {row.department}\r\n                    </TableCell>\r\n                  )}\r\n\r\n                  {cols.find((col) => col.id === 'offices') && (\r\n                    <TableCell compact ellipsis title={row.offices} nestedClasses={{ root: classes.cellOffice }}>\r\n                      {row.offices}\r\n                    </TableCell>\r\n                  )}\r\n\r\n                  <TableCell nowrap nestedClasses={{ root: classes.cellValue }}>\r\n                    <div className={classes.bar}>\r\n                      <div className={classes.barBg}>{rowLabel}</div>\r\n\r\n                      <div className={classnames([classes.barBg, classes.barValueContainer])} style={{ width: rowPercentage + '%' }}>\r\n                        <div className={classes.barLabel}>{rowLabel}</div>\r\n\r\n                        {datasets.map((dataset, datasetIndex) => {\r\n                          const tooltipText = utils.generic.isFunction(tooltip) && tooltip(row, dataset);\r\n                          const colorIndex = stacked ? datasetIndex : index + rowsPerPage * page;\r\n\r\n                          const stylesBarInner = {\r\n                            width: getRowPercentage(rowValueTotal, dataset.value) + '%',\r\n                            backgroundColor: colorsByDirection[colorIndex],\r\n                          };\r\n\r\n                          return (\r\n                            <Tooltip\r\n                              block\r\n                              title={tooltipText}\r\n                              style={stylesBarInner}\r\n                              className={classes.barTooltip}\r\n                              key={`${datasetIndex}-${dataset.id}`}\r\n                            >\r\n                              <div\r\n                                className={classnames([classes.barBg, classes.barValue])}\r\n                                style={{ ...stylesBarInner, width: '100%' }}\r\n                                onClick={utils.generic.isFunction(onClick) && onClick(row, dataset)}\r\n                              />\r\n                            </Tooltip>\r\n                          );\r\n                        })}\r\n                      </div>\r\n                    </div>\r\n                  </TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </TableBody>\r\n        </Table>\r\n      </Overflow>\r\n\r\n      <Pagination\r\n        page={page}\r\n        count={count}\r\n        rowsPerPage={rowsPerPage}\r\n        onChangePage={get(pagination, 'handlers.handleChangePage')}\r\n        onChangeRowsPerPage={get(pagination, 'handlers.handleChangeRowsPerPage')}\r\n      />\r\n    </Box>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}