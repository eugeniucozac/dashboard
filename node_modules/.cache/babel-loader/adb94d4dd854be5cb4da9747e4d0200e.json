{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport toNumber from 'lodash/toNumber'; // app\n\nimport { authLogout, enqueueNotification, addLoader, removeLoader, hideModal } from 'stores';\nimport * as utils from 'utils';\nexport var updateModellingTask = function updateModellingTask(payload) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var modellingId = payload.id;\n    var defaultError = {\n      file: 'stores/modelling.actions.put',\n      message: 'Data missing for PUT request'\n    };\n    dispatch(putModellingRequest(payload));\n    dispatch(addLoader('createModelling'));\n\n    if (!payload || typeof payload !== 'object' || !modellingId) {\n      dispatch(putModellingFailure(defaultError));\n      dispatch(enqueueNotification('notification.modelling.putFail', 'error'));\n      dispatch(hideModal());\n      dispatch(removeLoader('createModelling'));\n      return;\n    }\n\n    var insured = Array.isArray(payload.insured) ? payload.insured[0] : payload.insured;\n    var provisionalInsured = (insured === null || insured === void 0 ? void 0 : insured.__isNew__) ? {\n      name: insured === null || insured === void 0 ? void 0 : insured.id\n    } : null;\n    var transformedPayload = {\n      dueDate: payload.dueDate || '',\n      notes: payload.notes || '',\n      status: payload.status || '',\n      insured: (insured === null || insured === void 0 ? void 0 : insured.__isNew__) ? null : {\n        id: typeof insured === 'object' ? insured === null || insured === void 0 ? void 0 : insured.id : toNumber(insured)\n      },\n      provisionalInsured: provisionalInsured,\n      type: payload.modellingType || '',\n      modellingAttachmentTypes: payload.modellingAttachmentTypes || []\n    };\n    return utils.api.put({\n      token: auth.accessToken,\n      endpoint: endpoint.edge,\n      path: \"api/modelling/\".concat(modellingId),\n      data: transformedPayload\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleData(json);\n    }).then(function (data) {\n      dispatch(putModellingSuccess(data));\n      dispatch(enqueueNotification('notification.modelling.putSuccess', 'success'));\n    }).catch(function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API put error (modelling)'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(putModellingFailure(err));\n      dispatch(enqueueNotification('notification.modelling.putFail', 'error'));\n      return err;\n    }).finally(function () {\n      dispatch(hideModal());\n      dispatch(removeLoader('createModelling'));\n    });\n  };\n};\nexport var putModellingRequest = function putModellingRequest(payload) {\n  return {\n    type: 'MODELLING_PUT_REQUEST',\n    payload: payload\n  };\n};\nexport var putModellingSuccess = function putModellingSuccess(payload) {\n  return {\n    type: 'MODELLING_PUT_SUCCESS',\n    payload: payload\n  };\n};\nexport var putModellingFailure = function putModellingFailure(error) {\n  return {\n    type: 'MODELLING_PUT_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/modelling/modelling.actions.put.js"],"names":["toNumber","authLogout","enqueueNotification","addLoader","removeLoader","hideModal","utils","updateModellingTask","payload","dispatch","getState","auth","user","endpoint","config","vars","modellingId","id","defaultError","file","message","putModellingRequest","putModellingFailure","insured","Array","isArray","provisionalInsured","__isNew__","name","transformedPayload","dueDate","notes","status","type","modellingType","modellingAttachmentTypes","api","put","token","accessToken","edge","path","data","then","response","handleResponse","json","handleData","putModellingSuccess","catch","err","errorParams","handleError","handleUnauthorized","finally","error"],"mappings":"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","sourcesContent":["import toNumber from 'lodash/toNumber';\r\n\r\n// app\r\nimport { authLogout, enqueueNotification, addLoader, removeLoader, hideModal } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const updateModellingTask = (payload) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  const modellingId = payload.id;\r\n\r\n  const defaultError = {\r\n    file: 'stores/modelling.actions.put',\r\n    message: 'Data missing for PUT request',\r\n  };\r\n\r\n  dispatch(putModellingRequest(payload));\r\n  dispatch(addLoader('createModelling'));\r\n\r\n  if (!payload || typeof payload !== 'object' || !modellingId) {\r\n    dispatch(putModellingFailure(defaultError));\r\n    dispatch(enqueueNotification('notification.modelling.putFail', 'error'));\r\n    dispatch(hideModal());\r\n    dispatch(removeLoader('createModelling'));\r\n    return;\r\n  }\r\n  const insured = Array.isArray(payload.insured) ? payload.insured[0] : payload.insured;\r\n  const provisionalInsured = insured?.__isNew__ ? { name: insured?.id } : null;\r\n  const transformedPayload = {\r\n    dueDate: payload.dueDate || '',\r\n    notes: payload.notes || '',\r\n    status: payload.status || '',\r\n    insured: insured?.__isNew__\r\n      ? null\r\n      : {\r\n          id: typeof insured === 'object' ? insured?.id : toNumber(insured),\r\n        },\r\n    provisionalInsured: provisionalInsured,\r\n    type: payload.modellingType || '',\r\n    modellingAttachmentTypes: payload.modellingAttachmentTypes || [],\r\n  };\r\n\r\n  return utils.api\r\n    .put({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.edge,\r\n      path: `api/modelling/${modellingId}`,\r\n      data: transformedPayload,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleData(json))\r\n    .then((data) => {\r\n      dispatch(putModellingSuccess(data));\r\n      dispatch(enqueueNotification('notification.modelling.putSuccess', 'success'));\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        ...defaultError,\r\n        message: 'API put error (modelling)',\r\n      };\r\n\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(putModellingFailure(err));\r\n      dispatch(enqueueNotification('notification.modelling.putFail', 'error'));\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(hideModal());\r\n      dispatch(removeLoader('createModelling'));\r\n    });\r\n};\r\n\r\nexport const putModellingRequest = (payload) => {\r\n  return {\r\n    type: 'MODELLING_PUT_REQUEST',\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const putModellingSuccess = (payload) => {\r\n  return {\r\n    type: 'MODELLING_PUT_SUCCESS',\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const putModellingFailure = (error) => {\r\n  return {\r\n    type: 'MODELLING_PUT_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}