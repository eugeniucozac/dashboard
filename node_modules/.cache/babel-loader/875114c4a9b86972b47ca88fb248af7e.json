{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\components\\\\FormToggle\\\\FormToggle.view.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Controller } from 'react-hook-form';\nimport isString from 'lodash/isString'; // app\n\nimport styles from './FormToggle.styles';\nimport { ErrorMessage } from 'components';\nimport * as utils from 'utils'; // mui\n\nimport { ToggleButtonGroup, ToggleButton } from '@material-ui/lab';\nimport { makeStyles, FormLabel } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nFormToggleView.propTypes = {\n  control: PropTypes.object,\n  name: PropTypes.string.isRequired,\n  options: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool]).isRequired\n  })).isRequired,\n  label: PropTypes.string,\n  hint: PropTypes.string,\n  error: PropTypes.object,\n  valueIfUnchecked: PropTypes.any,\n  buttonGroupProps: PropTypes.object,\n  enforceValueSet: PropTypes.bool\n};\nFormToggleView.defaultProps = {\n  buttonGroupProps: {},\n  enforceValueSet: false\n};\nexport function FormToggleView(_ref) {\n  var _this = this;\n\n  var control = _ref.control,\n      name = _ref.name,\n      options = _ref.options,\n      label = _ref.label,\n      hint = _ref.hint,\n      error = _ref.error,\n      buttonGroupProps = _ref.buttonGroupProps,\n      type = _ref.type,\n      enforceValueSet = _ref.enforceValueSet,\n      valueIfUnchecked = _ref.valueIfUnchecked;\n  var classes = makeStyles(styles, {\n    name: 'FormToggle'\n  })({\n    hasError: Boolean(error),\n    type: type\n  });\n\n  if (control) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.root,\n      children: [label && /*#__PURE__*/_jsxDEV(FormLabel, {\n        component: \"legend\",\n        className: classes.title,\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Controller, {\n        control: control,\n        id: name,\n        name: name,\n        render: function render(_ref2) {\n          var _onChange = _ref2.onChange,\n              name = _ref2.name,\n              value = _ref2.value;\n          return /*#__PURE__*/_jsxDEV(ToggleButtonGroup, _objectSpread(_objectSpread({\n            id: name,\n            name: name,\n            value: isString(value) || utils.generic.isBoolean(value) ? value === null || value === void 0 ? void 0 : value.toString() : value,\n            onChange: function onChange(e, value) {\n              // if the user has un-selected an option, by default the value will be null\n              // but it's possible that the original default value was an empty string ''\n              // this could leave the form in a \"dirty\" state\n              // this newValue allows to reset the value to whatever original default value we want\n              var newValue = valueIfUnchecked !== undefined && value === null ? valueIfUnchecked : value;\n\n              if (enforceValueSet) {\n                if (newValue !== null) {\n                  _onChange(newValue);\n                }\n              } else {\n                _onChange(newValue);\n              }\n            }\n          }, buttonGroupProps), {}, {\n            \"aria-label\": name,\n            \"data-testid\": \"toggle-button-group\",\n            children: options.map(function (option, index) {\n              return /*#__PURE__*/_jsxDEV(ToggleButton, {\n                value: option.value,\n                className: classes.toggleButton,\n                disabled: buttonGroupProps.disabled,\n                children: option.label\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 19\n              }, _this);\n            })\n          }), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, _this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n        error: error,\n        hint: hint\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: [label && /*#__PURE__*/_jsxDEV(FormLabel, {\n      component: \"legend\",\n      className: classes.title,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ToggleButtonGroup, _objectSpread(_objectSpread({}, buttonGroupProps), {}, {\n      \"aria-label\": name,\n      \"data-testid\": \"toggle-button-group\",\n      children: options.map(function (option, index) {\n        return /*#__PURE__*/_jsxDEV(ToggleButton, {\n          value: option.value,\n          className: classes.toggleButton,\n          children: option.label\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, _this);\n      })\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      error: error,\n      hint: hint\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n_c = FormToggleView;\nFormToggleView.displayName = \"FormToggleView\";\nFormToggleView.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"FormToggleView\",\n  \"props\": {\n    \"buttonGroupProps\": {\n      \"defaultValue\": {\n        \"value\": \"{}\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"enforceValueSet\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"control\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"options\": {\n      \"type\": {\n        \"name\": \"arrayOf\",\n        \"value\": {\n          \"name\": \"shape\",\n          \"value\": {\n            \"label\": {\n              \"name\": \"string\",\n              \"required\": true\n            },\n            \"value\": {\n              \"name\": \"union\",\n              \"value\": [{\n                \"name\": \"string\"\n              }, {\n                \"name\": \"number\"\n              }, {\n                \"name\": \"bool\"\n              }],\n              \"required\": true\n            }\n          }\n        }\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"hint\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"valueIfUnchecked\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\components\\\\FormToggle\\\\FormToggle.view.js\"] = {\n    name: \"FormToggleView\",\n    docgenInfo: FormToggleView.__docgenInfo,\n    path: \"src\\\\components\\\\FormToggle\\\\FormToggle.view.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"FormToggleView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/FormToggle/FormToggle.view.js"],"names":["React","PropTypes","Controller","isString","styles","ErrorMessage","utils","ToggleButtonGroup","ToggleButton","makeStyles","FormLabel","FormToggleView","propTypes","control","object","name","string","isRequired","options","arrayOf","shape","label","value","oneOfType","number","bool","hint","error","valueIfUnchecked","any","buttonGroupProps","enforceValueSet","defaultProps","type","classes","hasError","Boolean","root","title","onChange","generic","isBoolean","toString","e","newValue","undefined","map","option","index","toggleButton","disabled"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Controller } from 'react-hook-form';\r\nimport isString from 'lodash/isString';\r\n\r\n// app\r\nimport styles from './FormToggle.styles';\r\nimport { ErrorMessage } from 'components';\r\nimport * as utils from 'utils';\r\n\r\n// mui\r\nimport { ToggleButtonGroup, ToggleButton } from '@material-ui/lab';\r\nimport { makeStyles, FormLabel } from '@material-ui/core';\r\n\r\nFormToggleView.propTypes = {\r\n  control: PropTypes.object,\r\n  name: PropTypes.string.isRequired,\r\n  options: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      label: PropTypes.string.isRequired,\r\n      value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool]).isRequired,\r\n    })\r\n  ).isRequired,\r\n  label: PropTypes.string,\r\n  hint: PropTypes.string,\r\n  error: PropTypes.object,\r\n  valueIfUnchecked: PropTypes.any,\r\n  buttonGroupProps: PropTypes.object,\r\n  enforceValueSet: PropTypes.bool,\r\n};\r\n\r\nFormToggleView.defaultProps = {\r\n  buttonGroupProps: {},\r\n  enforceValueSet: false,\r\n};\r\n\r\nexport function FormToggleView({ control, name, options, label, hint, error, buttonGroupProps, type, enforceValueSet, valueIfUnchecked }) {\r\n  const classes = makeStyles(styles, { name: 'FormToggle' })({\r\n    hasError: Boolean(error),\r\n    type,\r\n  });\r\n\r\n  if (control) {\r\n    return (\r\n      <div className={classes.root}>\r\n        {label && (\r\n          <FormLabel component=\"legend\" className={classes.title}>\r\n            {label}\r\n          </FormLabel>\r\n        )}\r\n        <Controller\r\n          control={control}\r\n          id={name}\r\n          name={name}\r\n          render={({ onChange, name, value }) => {\r\n            return (\r\n              <ToggleButtonGroup\r\n                id={name}\r\n                name={name}\r\n                value={isString(value) || utils.generic.isBoolean(value) ? value?.toString() : value}\r\n                onChange={(e, value) => {\r\n                  // if the user has un-selected an option, by default the value will be null\r\n                  // but it's possible that the original default value was an empty string ''\r\n                  // this could leave the form in a \"dirty\" state\r\n                  // this newValue allows to reset the value to whatever original default value we want\r\n                  const newValue = valueIfUnchecked !== undefined && value === null ? valueIfUnchecked : value;\r\n\r\n                  if (enforceValueSet) {\r\n                    if (newValue !== null) {\r\n                      onChange(newValue);\r\n                    }\r\n                  } else {\r\n                    onChange(newValue);\r\n                  }\r\n                }}\r\n                {...buttonGroupProps}\r\n                aria-label={name}\r\n                data-testid=\"toggle-button-group\"\r\n              >\r\n                {options.map((option, index) => (\r\n                  <ToggleButton key={index} value={option.value} className={classes.toggleButton} disabled={buttonGroupProps.disabled}>\r\n                    {option.label}\r\n                  </ToggleButton>\r\n                ))}\r\n              </ToggleButtonGroup>\r\n            );\r\n          }}\r\n        />\r\n        <ErrorMessage error={error} hint={hint} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {label && (\r\n        <FormLabel component=\"legend\" className={classes.title}>\r\n          {label}\r\n        </FormLabel>\r\n      )}\r\n      <ToggleButtonGroup {...buttonGroupProps} aria-label={name} data-testid=\"toggle-button-group\">\r\n        {options.map((option, index) => (\r\n          <ToggleButton key={index} value={option.value} className={classes.toggleButton}>\r\n            {option.label}\r\n          </ToggleButton>\r\n        ))}\r\n      </ToggleButtonGroup>\r\n      <ErrorMessage error={error} hint={hint} />\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}