{"ast":null,"code":"import { addLoader, removeLoader, enqueueNotification, authLogout } from 'stores';\nimport * as utils from 'utils';\nimport get from 'lodash/get';\nexport var postSaveComplexityAddPolicy = function postSaveComplexityAddPolicy() {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint,\n        claims = _getState.claims;\n\n    var defaultError = {\n      file: 'stores/claims.actions.postSaveComplexityAddPolicy'\n    };\n    dispatch(postSaveComplexityAddPolicyRequest());\n    dispatch(addLoader('postSaveComplexityAddPolicy'));\n    var policiesData = [];\n    var getPoliciesData = get(claims, 'complexityPolicies.selectedComplexityPolicies') || [];\n    getPoliciesData.forEach(function (item) {\n      if (item.checkedType) {\n        policiesData.push({\n          attributeType: 'Policy',\n          attributeValue: item.policy.attributeValue,\n          complexityAttributesID: 0,\n          isActive: 1,\n          isComplex: 1,\n          sourceID: item.policy.xbInstanceID\n        });\n      }\n    });\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.claimService,\n      path: 'api/data/claims-triage/complex/policy/save',\n      data: policiesData\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (data) {\n      dispatch(postSaveComplexityAddPolicySuccess(data.data));\n      dispatch(enqueueNotification('notification.complexityPolicyInformation.success', 'success'));\n      return data;\n    }).catch(function (err) {\n      dispatch(postSaveComplexityAddPolicyFailure(err, defaultError));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      return err;\n    }).finally(function () {\n      dispatch(removeLoader('postSaveComplexityAddPolicy'));\n    });\n  };\n};\nexport var postSaveComplexityAddPolicyRequest = function postSaveComplexityAddPolicyRequest(data) {\n  return {\n    type: 'CLAIMS_SAVE_COMPLEXITY_POLICY_POST_REQUEST',\n    payload: data\n  };\n};\nexport var postSaveComplexityAddPolicySuccess = function postSaveComplexityAddPolicySuccess(data) {\n  return {\n    type: 'CLAIMS_SAVE_COMPLEXITY_POLICY_POST_SUCCESS',\n    payload: data\n  };\n};\nexport var postSaveComplexityAddPolicyFailure = function postSaveComplexityAddPolicyFailure(data) {\n  return {\n    type: 'CLAIMS_SAVE_COMPLEXITY_POLICY_POST_ERROR',\n    payload: data\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.postSaveComplexityAddPolicy.js"],"names":["addLoader","removeLoader","enqueueNotification","authLogout","utils","get","postSaveComplexityAddPolicy","dispatch","getState","auth","user","endpoint","config","vars","claims","defaultError","file","postSaveComplexityAddPolicyRequest","policiesData","getPoliciesData","forEach","item","checkedType","push","attributeType","attributeValue","policy","complexityAttributesID","isActive","isComplex","sourceID","xbInstanceID","api","post","token","accessToken","claimService","path","data","then","response","handleResponse","postSaveComplexityAddPolicySuccess","catch","err","postSaveComplexityAddPolicyFailure","handleUnauthorized","finally","type","payload"],"mappings":"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","sourcesContent":["import { addLoader, removeLoader, enqueueNotification, authLogout } from 'stores';\r\nimport * as utils from 'utils';\r\nimport get from 'lodash/get';\r\n\r\nexport const postSaveComplexityAddPolicy = () => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}, claims} = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.postSaveComplexityAddPolicy',\r\n  };\r\n\r\n  dispatch(postSaveComplexityAddPolicyRequest());\r\n  dispatch(addLoader('postSaveComplexityAddPolicy'));\r\n\r\n  const policiesData = [];\r\n  const getPoliciesData = get(claims, 'complexityPolicies.selectedComplexityPolicies') || [];\r\n\r\n  getPoliciesData.forEach((item) => {\r\n    if (item.checkedType) {\r\n      policiesData.push({\r\n        attributeType: 'Policy',\r\n        attributeValue: item.policy.attributeValue,\r\n        complexityAttributesID: 0,\r\n        isActive: 1,\r\n        isComplex: 1,\r\n        sourceID: item.policy.xbInstanceID,\r\n      });\r\n    }\r\n  });\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.claimService,\r\n      path: 'api/data/claims-triage/complex/policy/save',\r\n      data: policiesData,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((data) => {\r\n      dispatch(postSaveComplexityAddPolicySuccess(data.data));\r\n      dispatch(enqueueNotification('notification.complexityPolicyInformation.success', 'success'));\r\n      return data;\r\n    })\r\n    .catch((err) => {\r\n      dispatch(postSaveComplexityAddPolicyFailure(err, defaultError));\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('postSaveComplexityAddPolicy'));\r\n    });\r\n};\r\n\r\nexport const postSaveComplexityAddPolicyRequest = (data) => {\r\n  return {\r\n    type: 'CLAIMS_SAVE_COMPLEXITY_POLICY_POST_REQUEST',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const postSaveComplexityAddPolicySuccess = (data) => {\r\n  return {\r\n    type: 'CLAIMS_SAVE_COMPLEXITY_POLICY_POST_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const postSaveComplexityAddPolicyFailure = (data) => {\r\n  return {\r\n    type: 'CLAIMS_SAVE_COMPLEXITY_POLICY_POST_ERROR',\r\n    payload: data,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}