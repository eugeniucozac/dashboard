{"ast":null,"code":"var _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\components\\\\Comments\\\\Comments.stories.js\",\n    _this = this;\n\nimport React from 'react';\nimport { Comments } from 'components';\nimport { withKnobs, text, boolean as _boolean, number } from '@storybook/addon-knobs';\nimport { applyMiddleware, createStore, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport reducer from 'stores';\nimport merge from 'lodash/merge';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default {\n  title: 'Comments',\n  component: Comments,\n  decorators: [withKnobs]\n};\n\nvar getStore = function getStore(obj) {\n  var enhancer = compose(applyMiddleware(thunk));\n  var defaultStore = createStore(reducer, {}, enhancer);\n  var preloadedState = merge(defaultStore.getState(), obj); // return default store if no custom JSON is passed\n\n  if (!obj) {\n    return defaultStore;\n  } // otherwise, return new deeply-merged store with data from JSON obj\n\n\n  return createStore(reducer, preloadedState, enhancer);\n};\n\nexport var Default = function Default() {\n  var commentUser = {\n    1: [{\n      date: '2021-05-10T14:22:31.663+00:00',\n      id: 1,\n      message: 'Hello?',\n      type: 'risk',\n      typeId: '1',\n      user: {\n        id: 1000,\n        firstName: 'John',\n        lastName: 'Smith',\n        'fullName:': 'John Smith',\n        emailId: 'j.smith@aa.com'\n      }\n    }, {\n      date: '2021-05-10T22:22:31.663+00:00',\n      id: 2,\n      message: \"Hi. Who's there?\",\n      type: 'risk',\n      typeId: '1',\n      user: {\n        id: 1001,\n        firstName: 'Susan',\n        lastName: 'Richards',\n        'fullName:': 'Susan Richards',\n        emailId: 's.richards@aa.com'\n      }\n    }, {\n      date: '2021-05-11T14:22:31.663+00:00',\n      id: 3,\n      message: \"It's me.\",\n      type: 'risk',\n      typeId: '1',\n      user: {\n        id: 1000,\n        firstName: 'John',\n        lastName: 'Smith',\n        'fullName:': 'John Smith',\n        emailId: 'j.smith@aa.com'\n      }\n    }, {\n      date: '2021-05-25T14:22:31.663+00:00',\n      id: 4,\n      message: 'Oh hi!',\n      type: 'risk',\n      typeId: '1',\n      user: {\n        id: 1001,\n        firstName: 'Susan',\n        lastName: 'Richards',\n        'fullName:': 'Susan Richards',\n        emailId: 's.richards@aa.com'\n      }\n    }, {\n      date: '2021-06-10T14:22:31.663+00:00',\n      id: 5,\n      message: 'Great.',\n      type: 'risk',\n      typeId: '1',\n      user: {\n        id: 1000,\n        firstName: 'John',\n        lastName: 'Smith',\n        'fullName:': 'John Smith',\n        emailId: 'j.smith@aa.com'\n      }\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(Provider, {\n    store: getStore({\n      config: {\n        vars: {\n          endpoint: {}\n        }\n      },\n      comment: {\n        items: commentUser\n      }\n    }),\n    children: /*#__PURE__*/_jsxDEV(Comments, {\n      id: \"1\",\n      divider: _boolean('Divider', true),\n      title: text('Title', ''),\n      placeholder: text('Placeholder', ''),\n      truncate: number('truncate', 50)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, _this);\n};\nDefault.displayName = \"Default\";\n_c = Default;\nDefault.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"Default\"\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\components\\\\Comments\\\\Comments.stories.js\"] = {\n    name: \"Default\",\n    docgenInfo: Default.__docgenInfo,\n    path: \"src\\\\components\\\\Comments\\\\Comments.stories.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Default\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/Comments/Comments.stories.js"],"names":["React","Comments","withKnobs","text","boolean","number","applyMiddleware","createStore","compose","Provider","thunk","reducer","merge","title","component","decorators","getStore","obj","enhancer","defaultStore","preloadedState","getState","Default","commentUser","date","id","message","type","typeId","user","firstName","lastName","emailId","config","vars","endpoint","comment","items"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Comments } from 'components';\r\nimport { withKnobs, text, boolean, number } from '@storybook/addon-knobs';\r\nimport { applyMiddleware, createStore, compose } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducer from 'stores';\r\nimport merge from 'lodash/merge';\r\n\r\nexport default {\r\n  title: 'Comments',\r\n  component: Comments,\r\n  decorators: [withKnobs],\r\n};\r\n\r\nconst getStore = (obj) => {\r\n  const enhancer = compose(applyMiddleware(thunk));\r\n  const defaultStore = createStore(reducer, {}, enhancer);\r\n  const preloadedState = merge(defaultStore.getState(), obj);\r\n\r\n  // return default store if no custom JSON is passed\r\n  if (!obj) {\r\n    return defaultStore;\r\n  }\r\n\r\n  // otherwise, return new deeply-merged store with data from JSON obj\r\n  return createStore(reducer, preloadedState, enhancer);\r\n};\r\n\r\nexport const Default = () => {\r\n  const commentUser = {\r\n    1: [\r\n      {\r\n        date: '2021-05-10T14:22:31.663+00:00',\r\n        id: 1,\r\n        message: 'Hello?',\r\n        type: 'risk',\r\n        typeId: '1',\r\n        user: {\r\n          id: 1000,\r\n          firstName: 'John',\r\n          lastName: 'Smith',\r\n          'fullName:': 'John Smith',\r\n          emailId: 'j.smith@aa.com',\r\n        },\r\n      },\r\n      {\r\n        date: '2021-05-10T22:22:31.663+00:00',\r\n        id: 2,\r\n        message: \"Hi. Who's there?\",\r\n        type: 'risk',\r\n        typeId: '1',\r\n        user: {\r\n          id: 1001,\r\n          firstName: 'Susan',\r\n          lastName: 'Richards',\r\n          'fullName:': 'Susan Richards',\r\n          emailId: 's.richards@aa.com',\r\n        },\r\n      },\r\n      {\r\n        date: '2021-05-11T14:22:31.663+00:00',\r\n        id: 3,\r\n        message: \"It's me.\",\r\n        type: 'risk',\r\n        typeId: '1',\r\n        user: {\r\n          id: 1000,\r\n          firstName: 'John',\r\n          lastName: 'Smith',\r\n          'fullName:': 'John Smith',\r\n          emailId: 'j.smith@aa.com',\r\n        },\r\n      },\r\n      {\r\n        date: '2021-05-25T14:22:31.663+00:00',\r\n        id: 4,\r\n        message: 'Oh hi!',\r\n        type: 'risk',\r\n        typeId: '1',\r\n        user: {\r\n          id: 1001,\r\n          firstName: 'Susan',\r\n          lastName: 'Richards',\r\n          'fullName:': 'Susan Richards',\r\n          emailId: 's.richards@aa.com',\r\n        },\r\n      },\r\n      {\r\n        date: '2021-06-10T14:22:31.663+00:00',\r\n        id: 5,\r\n        message: 'Great.',\r\n        type: 'risk',\r\n        typeId: '1',\r\n        user: {\r\n          id: 1000,\r\n          firstName: 'John',\r\n          lastName: 'Smith',\r\n          'fullName:': 'John Smith',\r\n          emailId: 'j.smith@aa.com',\r\n        },\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <Provider store={getStore({ config: { vars: { endpoint: {} } }, comment: { items: commentUser } })}>\r\n      <Comments\r\n        id=\"1\"\r\n        divider={boolean('Divider', true)}\r\n        title={text('Title', '')}\r\n        placeholder={text('Placeholder', '')}\r\n        truncate={number('truncate', 50)}\r\n      />\r\n    </Provider>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}