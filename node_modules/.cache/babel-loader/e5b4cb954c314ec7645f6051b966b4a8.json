{"ast":null,"code":"import \"core-js/modules/es.promise.finally\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n// app\nimport * as utils from 'utils';\nimport { authLogout, addLoader, enqueueNotification, hideModal, removeLoader } from 'stores';\nexport var getEditClaimRefNotes = function getEditClaimRefNotes(formData) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/claims.actions.getEditClaimRefNotes'\n    };\n    dispatch(getEditClaimRefNotesRequest(formData));\n    dispatch(addLoader('getEditClaimRefNotes'));\n\n    if (!formData || !formData.caseIncidentNotesID && !formData.notesDescription) {\n      dispatch(getEditClaimRefNotesFailure(defaultError));\n      dispatch(enqueueNotification('notification.setPriority.fail', 'error'));\n      dispatch(removeLoader('getEditClaimRefNotes'));\n      return;\n    }\n\n    var caseIncidentNotesID = formData.caseIncidentNotesID,\n        notesDescription = formData.notesDescription;\n    return utils.api.put({\n      token: auth.accessToken,\n      endpoint: endpoint.bpmService,\n      path: 'notes/update',\n      data: {\n        caseIncidentNotesID: caseIncidentNotesID,\n        notesDescription: notesDescription\n      }\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      dispatch(getEditClaimRefNotesSuccess(json));\n      dispatch(enqueueNotification('notification.claimRefNotes.success', 'success'));\n      dispatch(hideModal());\n      return json.data;\n    })[\"catch\"](function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API fetch error (claims.actions.getEditClaimRefNotes)'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(getEditClaimRefNotesFailure(err));\n      dispatch(enqueueNotification('notification.claimRefNotes.fail', 'error'));\n      return err;\n    })[\"finally\"](function () {\n      dispatch(removeLoader('getEditClaimRefNotes'));\n    });\n  };\n};\nexport var getEditClaimRefNotesRequest = function getEditClaimRefNotesRequest(params) {\n  return {\n    type: 'CLAIMREF_EDIT_NOTES_REQUEST',\n    payload: params\n  };\n};\nexport var getEditClaimRefNotesSuccess = function getEditClaimRefNotesSuccess(json) {\n  return {\n    type: 'CLAIMREF_EDIT_NOTES_SUCCESS',\n    payload: json === null || json === void 0 ? void 0 : json.data\n  };\n};\nexport var getEditClaimRefNotesFailure = function getEditClaimRefNotesFailure(error) {\n  return {\n    type: 'CLAIMREF_EDIT_NOTES_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.getEditClaimRefNotes.js"],"names":["utils","authLogout","addLoader","enqueueNotification","hideModal","removeLoader","getEditClaimRefNotes","formData","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","getEditClaimRefNotesRequest","caseIncidentNotesID","notesDescription","getEditClaimRefNotesFailure","api","put","token","accessToken","bpmService","path","data","then","response","handleResponse","json","getEditClaimRefNotesSuccess","err","errorParams","message","handleError","handleUnauthorized","params","type","payload","error"],"mappings":"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","sourcesContent":["// app\r\nimport * as utils from 'utils';\r\nimport { authLogout, addLoader, enqueueNotification, hideModal, removeLoader } from 'stores';\r\nexport const getEditClaimRefNotes = (formData) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } } } = getState();\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.getEditClaimRefNotes',\r\n  };\r\n  dispatch(getEditClaimRefNotesRequest(formData));\r\n  dispatch(addLoader('getEditClaimRefNotes'));\r\n  if (!formData || (!formData.caseIncidentNotesID && !formData.notesDescription)) {\r\n    dispatch(getEditClaimRefNotesFailure(defaultError));\r\n    dispatch(enqueueNotification('notification.setPriority.fail', 'error'));\r\n    dispatch(removeLoader('getEditClaimRefNotes'));\r\n    return;\r\n  }\r\n\r\n  const { caseIncidentNotesID, notesDescription } = formData;\r\n\r\n  return utils.api\r\n    .put({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.bpmService,\r\n      path: 'notes/update',\r\n      data: { caseIncidentNotesID, notesDescription },\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => {\r\n      dispatch(getEditClaimRefNotesSuccess(json));\r\n      dispatch(enqueueNotification('notification.claimRefNotes.success', 'success'));\r\n      dispatch(hideModal());\r\n      return json.data;\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        ...defaultError,\r\n        message: 'API fetch error (claims.actions.getEditClaimRefNotes)',\r\n      };\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(getEditClaimRefNotesFailure(err));\r\n      dispatch(enqueueNotification('notification.claimRefNotes.fail', 'error'));\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('getEditClaimRefNotes'));\r\n    });\r\n};\r\nexport const getEditClaimRefNotesRequest = (params) => {\r\n  return {\r\n    type: 'CLAIMREF_EDIT_NOTES_REQUEST',\r\n    payload: params,\r\n  };\r\n};\r\nexport const getEditClaimRefNotesSuccess = (json) => {\r\n  return {\r\n    type: 'CLAIMREF_EDIT_NOTES_SUCCESS',\r\n    payload: json?.data,\r\n  };\r\n};\r\nexport const getEditClaimRefNotesFailure = (error) => {\r\n  return {\r\n    type: 'CLAIMREF_EDIT_NOTES_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}