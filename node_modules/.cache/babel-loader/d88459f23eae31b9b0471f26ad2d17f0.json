{"ast":null,"code":"// app\nimport { authLogout, addLoader, removeLoader } from 'stores';\nimport * as utils from 'utils';\nexport var deleteAllNotifications = function deleteAllNotifications(userId) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/notification.actions.deleteAllNotifications'\n    };\n    dispatch(deleteAllNotificationsRequest(userId));\n    dispatch(addLoader('deleteAllNotifications'));\n\n    if (!userId) {\n      dispatch(deleteAllNotificationsFailure(defaultError));\n      dispatch(removeLoader('deleteAllNotifications'));\n    }\n\n    return utils.api.delete({\n      token: auth.accessToken,\n      endpoint: endpoint.notificationService,\n      path: \"user/deleteAllNotifications?userId=\".concat(userId)\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(deleteAllNotificationsSuccess(data));\n      return data;\n    }).catch(function (err) {\n      utils.api.handleError(err, defaultError);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(deleteAllNotificationsFailure(err));\n      return err;\n    }).finally(function () {\n      dispatch(removeLoader('deleteAllNotifications'));\n    });\n  };\n};\nexport var deleteAllNotificationsRequest = function deleteAllNotificationsRequest(userId) {\n  return {\n    type: 'NOTIFICATION_DELETE_ALL_NOTIFICATIONS_REQUEST',\n    userId: userId\n  };\n};\nexport var deleteAllNotificationsSuccess = function deleteAllNotificationsSuccess(data) {\n  return {\n    type: 'NOTIFICATION_DELETE_ALL_NOTIFICATIONS_SUCCESS',\n    data: data\n  };\n};\nexport var deleteAllNotificationsFailure = function deleteAllNotificationsFailure(error) {\n  return {\n    type: 'NOTIFICATION_DELETE_ALL_NOTIFICATIONS_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/notification/notification.actions.deleteAllNotifications.js"],"names":["authLogout","addLoader","removeLoader","utils","deleteAllNotifications","userId","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","deleteAllNotificationsRequest","deleteAllNotificationsFailure","api","delete","token","accessToken","notificationService","path","then","response","handleResponse","json","handleNewData","data","deleteAllNotificationsSuccess","catch","err","handleError","handleUnauthorized","finally","type","error","payload"],"mappings":"AAAA;AACA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,YAAhC,QAAoD,QAApD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAO,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,MAAD;AAAA,SAAY,UAACC,QAAD,EAAWC,QAAX,EAAwB;AACxE;AADwE,oBAEfA,QAAQ,EAFO;AAAA,QAExDC,IAFwD,aAEhEC,IAFgE,CAExDD,IAFwD;AAAA,QAE9BE,QAF8B,aAEhDC,MAFgD,CAEtCC,IAFsC,CAE9BF,QAF8B;;AAIxE,QAAMG,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE;AADa,KAArB;AAIAR,IAAAA,QAAQ,CAACS,6BAA6B,CAACV,MAAD,CAA9B,CAAR;AACAC,IAAAA,QAAQ,CAACL,SAAS,CAAC,wBAAD,CAAV,CAAR;;AAEA,QAAI,CAACI,MAAL,EAAa;AACXC,MAAAA,QAAQ,CAACU,6BAA6B,CAACH,YAAD,CAA9B,CAAR;AACAP,MAAAA,QAAQ,CAACJ,YAAY,CAAC,wBAAD,CAAb,CAAR;AACD;;AAED,WAAOC,KAAK,CAACc,GAAN,CACJC,MADI,CACG;AACNC,MAAAA,KAAK,EAAEX,IAAI,CAACY,WADN;AAENV,MAAAA,QAAQ,EAAEA,QAAQ,CAACW,mBAFb;AAGNC,MAAAA,IAAI,+CAAwCjB,MAAxC;AAHE,KADH,EAMJkB,IANI,CAMC,UAACC,QAAD;AAAA,aAAcrB,KAAK,CAACc,GAAN,CAAUQ,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAND,EAOJD,IAPI,CAOC,UAACG,IAAD;AAAA,aAAUvB,KAAK,CAACc,GAAN,CAAUU,aAAV,CAAwBD,IAAxB,CAAV;AAAA,KAPD,EAQJH,IARI,CAQC,UAACK,IAAD,EAAU;AACdtB,MAAAA,QAAQ,CAACuB,6BAA6B,CAACD,IAAD,CAA9B,CAAR;AACA,aAAOA,IAAP;AACD,KAXI,EAYJE,KAZI,CAYE,UAACC,GAAD,EAAS;AACd5B,MAAAA,KAAK,CAACc,GAAN,CAAUe,WAAV,CAAsBD,GAAtB,EAA2BlB,YAA3B;AACAV,MAAAA,KAAK,CAACc,GAAN,CAAUgB,kBAAV,CAA6BF,GAA7B,EAAkCzB,QAAlC,EAA4CN,UAA5C;AACAM,MAAAA,QAAQ,CAACU,6BAA6B,CAACe,GAAD,CAA9B,CAAR;AACA,aAAOA,GAAP;AACD,KAjBI,EAkBJG,OAlBI,CAkBI,YAAM;AACb5B,MAAAA,QAAQ,CAACJ,YAAY,CAAC,wBAAD,CAAb,CAAR;AACD,KApBI,CAAP;AAqBD,GArCqC;AAAA,CAA/B;AAuCP,OAAO,IAAMa,6BAA6B,GAAG,SAAhCA,6BAAgC,CAACV,MAAD,EAAY;AACvD,SAAO;AACL8B,IAAAA,IAAI,EAAE,+CADD;AAEL9B,IAAAA,MAAM,EAANA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,IAAMwB,6BAA6B,GAAG,SAAhCA,6BAAgC,CAACD,IAAD,EAAU;AACrD,SAAO;AACLO,IAAAA,IAAI,EAAE,+CADD;AAELP,IAAAA,IAAI,EAAJA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,IAAMZ,6BAA6B,GAAG,SAAhCA,6BAAgC,CAACoB,KAAD,EAAW;AACtD,SAAO;AACLD,IAAAA,IAAI,EAAE,+CADD;AAELE,IAAAA,OAAO,EAAED;AAFJ,GAAP;AAID,CALM","sourcesContent":["// app\r\nimport { authLogout, addLoader, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const deleteAllNotifications = (userId) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/notification.actions.deleteAllNotifications',\r\n  };\r\n\r\n  dispatch(deleteAllNotificationsRequest(userId));\r\n  dispatch(addLoader('deleteAllNotifications'));\r\n\r\n  if (!userId) {\r\n    dispatch(deleteAllNotificationsFailure(defaultError));\r\n    dispatch(removeLoader('deleteAllNotifications'));\r\n  }\r\n\r\n  return utils.api\r\n    .delete({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.notificationService,\r\n      path: `user/deleteAllNotifications?userId=${userId}`,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(deleteAllNotificationsSuccess(data));\r\n      return data;\r\n    })\r\n    .catch((err) => {\r\n      utils.api.handleError(err, defaultError);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(deleteAllNotificationsFailure(err));\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('deleteAllNotifications'));\r\n    });\r\n};\r\n\r\nexport const deleteAllNotificationsRequest = (userId) => {\r\n  return {\r\n    type: 'NOTIFICATION_DELETE_ALL_NOTIFICATIONS_REQUEST',\r\n    userId,\r\n  };\r\n};\r\n\r\nexport const deleteAllNotificationsSuccess = (data) => {\r\n  return {\r\n    type: 'NOTIFICATION_DELETE_ALL_NOTIFICATIONS_SUCCESS',\r\n    data,\r\n  };\r\n};\r\n\r\nexport const deleteAllNotificationsFailure = (error) => {\r\n  return {\r\n    type: 'NOTIFICATION_DELETE_ALL_NOTIFICATIONS_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}