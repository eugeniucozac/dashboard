{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ClaimsComplexityValues\\\\ClaimsComplexityValues.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types'; // app\n\nimport { ClaimsComplexityValuesView } from './ClaimsComplexityValues.view';\nimport { showModal, hideModal, selectComplexityBasisValues, getComplexityBasisValue, getComplexityDivisionMatrixByComplexId, postComplexityDivisionMatrixByComplexId, selectComplexityBasisDivisionMatrix, selectComplexityBasisDivisionMatrixChanges, saveComplexityDivisionMatrixByComplexIdChange, setComplexityBasisValueId } from 'stores';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nClaimsComplexityValues.propTypes = {\n  setIsSelectedTabDirty: PropTypes.func.isRequired\n};\nexport default function ClaimsComplexityValues(_ref) {\n  _s();\n\n  var setIsSelectedTabDirty = _ref.setIsSelectedTabDirty;\n  var dispatch = useDispatch();\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentComplexityRulesValue = _useState2[0],\n      setCurrentComplexityRulesValue = _useState2[1];\n\n  var complexityBasisValueData = useSelector(selectComplexityBasisValues);\n  var initComplexityMatrixData = useSelector(selectComplexityBasisDivisionMatrix);\n  var matrixDataDiff = useSelector(selectComplexityBasisDivisionMatrixChanges);\n  useEffect(function () {\n    var isComplexityVaulesUpdated = matrixDataDiff && Object.keys(matrixDataDiff).length !== 0;\n    if (isComplexityVaulesUpdated) setIsSelectedTabDirty(true);else setIsSelectedTabDirty(false);\n  }, [matrixDataDiff]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var handleAddComplexityValues = function handleAddComplexityValues() {\n    dispatch(showModal({\n      component: 'ADD_COMPLEXITY',\n      props: {\n        title: \"\".concat(utils.string.t('claims.modals.addComplexity.title')),\n        fullWidth: true,\n        maxWidth: 'sm',\n        disableAutoFocus: true,\n        hideCompOnBlur: false,\n        componentProps: {\n          clickOutSideHandler: function clickOutSideHandler() {\n            return _clickOutSideHandler();\n          }\n        }\n      }\n    }));\n  };\n\n  var _clickOutSideHandler = function _clickOutSideHandler() {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        title: utils.string.t('status.alert'),\n        hint: utils.string.t('navigation.title'),\n        fullWidth: true,\n        maxWidth: 'xs',\n        componentProps: {\n          cancelLabel: utils.string.t('app.no'),\n          confirmLabel: utils.string.t('app.yes'),\n          submitHandler: function submitHandler() {\n            dispatch(hideModal());\n          }\n        }\n      }\n    }));\n  };\n\n  var handleRemoveComplexityValues = function handleRemoveComplexityValues() {\n    setCurrentComplexityRulesValue({});\n    dispatch(showModal({\n      component: 'COMPLEXITY_MANAGEMENT_REMOVE_RULE_VALUE',\n      props: {\n        title: utils.string.t('status.alert'),\n        fullWidth: true,\n        maxWidth: 'sm',\n        disableAutoFocus: true\n      }\n    }));\n  };\n\n  var handleEditComplexityRule = function handleEditComplexityRule(complexityRuleValue) {\n    setCurrentComplexityRulesValue(_objectSpread({}, complexityRuleValue));\n    dispatch(setComplexityBasisValueId(complexityRuleValue));\n  };\n\n  var handleUpdateComplexityRuleValue = function handleUpdateComplexityRuleValue(complexityRuleValue) {\n    var newValue = _objectSpread(_objectSpread({}, currentComplexityRulesValue), complexityRuleValue);\n\n    dispatch(setComplexityBasisValueId(newValue));\n  };\n\n  var resetMatrix = function resetMatrix() {\n    dispatch(showModal({\n      component: 'COMPLEXITY_MANAGEMENT_DIVISION_RESET',\n      props: {\n        title: utils.string.t('status.alert'),\n        fullWidth: true,\n        maxWidth: 'xs',\n        disableAutoFocus: true\n      }\n    }));\n  };\n\n  var saveMatrix = function saveMatrix(saveMatrixData) {\n    dispatch(postComplexityDivisionMatrixByComplexId(saveMatrixData));\n  };\n\n  var saveEachMatrixChange = function saveEachMatrixChange(value) {\n    dispatch(saveComplexityDivisionMatrixByComplexIdChange(value));\n  };\n\n  var constructMatrixProps = {\n    initComplexityMatrixData: initComplexityMatrixData,\n    matrixDataDiff: matrixDataDiff,\n    resetMatrix: resetMatrix,\n    saveMatrix: saveMatrix,\n    saveEachMatrixChange: saveEachMatrixChange\n  };\n  var canLoadTable = (complexityBasisValueData === null || complexityBasisValueData === void 0 ? void 0 : complexityBasisValueData.itemsTotal) > 0;\n  var canLoadEditMatrix = (initComplexityMatrixData === null || initComplexityMatrixData === void 0 ? void 0 : initComplexityMatrixData.length) > 0;\n  var canDeleteRule = !(currentComplexityRulesValue === null || currentComplexityRulesValue === void 0 ? void 0 : currentComplexityRulesValue.complexityRulesID);\n  useEffect(function () {\n    if (!complexityBasisValueData.itemsTotal) {\n      dispatch(getComplexityBasisValue());\n    }\n\n    if ((currentComplexityRulesValue === null || currentComplexityRulesValue === void 0 ? void 0 : currentComplexityRulesValue.complexityRulesID) > -1) {\n      dispatch(getComplexityDivisionMatrixByComplexId(currentComplexityRulesValue.complexityRulesID));\n    }\n  }, [complexityBasisValueData, currentComplexityRulesValue]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/_jsxDEV(ClaimsComplexityValuesView, {\n    canLoadTable: canLoadTable,\n    canLoadEditMatrix: canLoadEditMatrix,\n    canDeleteRule: canDeleteRule,\n    constructMatrixProps: constructMatrixProps,\n    complexityBasisValueData: complexityBasisValueData,\n    handleAddComplexityValues: handleAddComplexityValues,\n    handleRemoveComplexityValues: handleRemoveComplexityValues,\n    handleEditComplexityRule: handleEditComplexityRule,\n    handleUpdateComplexityRuleValue: handleUpdateComplexityRuleValue\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ClaimsComplexityValues, \"ylyAsc+R2w55zqrBe7k5iyTAWlA=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = ClaimsComplexityValues;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimsComplexityValues\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ClaimsComplexityValues/ClaimsComplexityValues.js"],"names":["React","useEffect","useState","useDispatch","useSelector","PropTypes","ClaimsComplexityValuesView","showModal","hideModal","selectComplexityBasisValues","getComplexityBasisValue","getComplexityDivisionMatrixByComplexId","postComplexityDivisionMatrixByComplexId","selectComplexityBasisDivisionMatrix","selectComplexityBasisDivisionMatrixChanges","saveComplexityDivisionMatrixByComplexIdChange","setComplexityBasisValueId","utils","ClaimsComplexityValues","propTypes","setIsSelectedTabDirty","func","isRequired","dispatch","currentComplexityRulesValue","setCurrentComplexityRulesValue","complexityBasisValueData","initComplexityMatrixData","matrixDataDiff","isComplexityVaulesUpdated","Object","keys","length","handleAddComplexityValues","component","props","title","string","t","fullWidth","maxWidth","disableAutoFocus","hideCompOnBlur","componentProps","clickOutSideHandler","hint","cancelLabel","confirmLabel","submitHandler","handleRemoveComplexityValues","handleEditComplexityRule","complexityRuleValue","handleUpdateComplexityRuleValue","newValue","resetMatrix","saveMatrix","saveMatrixData","saveEachMatrixChange","value","constructMatrixProps","canLoadTable","itemsTotal","canLoadEditMatrix","canDeleteRule","complexityRulesID"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\n// app\r\nimport { ClaimsComplexityValuesView } from './ClaimsComplexityValues.view';\r\nimport {\r\n  showModal,\r\n  hideModal,\r\n  selectComplexityBasisValues,\r\n  getComplexityBasisValue,\r\n  getComplexityDivisionMatrixByComplexId,\r\n  postComplexityDivisionMatrixByComplexId,\r\n  selectComplexityBasisDivisionMatrix,\r\n  selectComplexityBasisDivisionMatrixChanges,\r\n  saveComplexityDivisionMatrixByComplexIdChange,\r\n  setComplexityBasisValueId,\r\n} from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nClaimsComplexityValues.propTypes = {\r\n  setIsSelectedTabDirty: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default function ClaimsComplexityValues({ setIsSelectedTabDirty }) {\r\n  const dispatch = useDispatch();\r\n  const [currentComplexityRulesValue, setCurrentComplexityRulesValue] = useState({});\r\n\r\n  const complexityBasisValueData = useSelector(selectComplexityBasisValues);\r\n\r\n  const initComplexityMatrixData = useSelector(selectComplexityBasisDivisionMatrix);\r\n  const matrixDataDiff = useSelector(selectComplexityBasisDivisionMatrixChanges);\r\n\r\n  useEffect(() => {\r\n    const isComplexityVaulesUpdated = matrixDataDiff && Object.keys(matrixDataDiff).length !== 0;\r\n    if (isComplexityVaulesUpdated) setIsSelectedTabDirty(true);\r\n    else setIsSelectedTabDirty(false);\r\n  }, [matrixDataDiff]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const handleAddComplexityValues = () => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'ADD_COMPLEXITY',\r\n        props: {\r\n          title: `${utils.string.t('claims.modals.addComplexity.title')}`,\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          disableAutoFocus: true,\r\n          hideCompOnBlur: false,\r\n          componentProps: {\r\n            clickOutSideHandler: () => clickOutSideHandler(),\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n  const clickOutSideHandler = () => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          title: utils.string.t('status.alert'),\r\n          hint: utils.string.t('navigation.title'),\r\n          fullWidth: true,\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            cancelLabel: utils.string.t('app.no'),\r\n            confirmLabel: utils.string.t('app.yes'),\r\n            submitHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleRemoveComplexityValues = () => {\r\n    setCurrentComplexityRulesValue({});\r\n    dispatch(\r\n      showModal({\r\n        component: 'COMPLEXITY_MANAGEMENT_REMOVE_RULE_VALUE',\r\n        props: {\r\n          title: utils.string.t('status.alert'),\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          disableAutoFocus: true,\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleEditComplexityRule = (complexityRuleValue) => {\r\n    setCurrentComplexityRulesValue({ ...complexityRuleValue });\r\n    dispatch(setComplexityBasisValueId(complexityRuleValue));\r\n  };\r\n\r\n  const handleUpdateComplexityRuleValue = (complexityRuleValue) => {\r\n    const newValue = { ...currentComplexityRulesValue, ...complexityRuleValue };\r\n    dispatch(setComplexityBasisValueId(newValue));\r\n  };\r\n\r\n  const resetMatrix = () => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'COMPLEXITY_MANAGEMENT_DIVISION_RESET',\r\n        props: {\r\n          title: utils.string.t('status.alert'),\r\n          fullWidth: true,\r\n          maxWidth: 'xs',\r\n          disableAutoFocus: true,\r\n        },\r\n      })\r\n    );\r\n  };\r\n  const saveMatrix = (saveMatrixData) => {\r\n    dispatch(postComplexityDivisionMatrixByComplexId(saveMatrixData));\r\n  };\r\n  const saveEachMatrixChange = (value) => {\r\n    dispatch(saveComplexityDivisionMatrixByComplexIdChange(value));\r\n  };\r\n\r\n  const constructMatrixProps = {\r\n    initComplexityMatrixData,\r\n    matrixDataDiff,\r\n    resetMatrix,\r\n    saveMatrix,\r\n    saveEachMatrixChange,\r\n  };\r\n  const canLoadTable = complexityBasisValueData?.itemsTotal > 0;\r\n  const canLoadEditMatrix = initComplexityMatrixData?.length > 0;\r\n  const canDeleteRule = !currentComplexityRulesValue?.complexityRulesID;\r\n\r\n  useEffect(() => {\r\n    if (!complexityBasisValueData.itemsTotal) {\r\n      dispatch(getComplexityBasisValue());\r\n    }\r\n    if (currentComplexityRulesValue?.complexityRulesID > -1) {\r\n      dispatch(getComplexityDivisionMatrixByComplexId(currentComplexityRulesValue.complexityRulesID));\r\n    }\r\n  }, [complexityBasisValueData, currentComplexityRulesValue]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <ClaimsComplexityValuesView\r\n      canLoadTable={canLoadTable}\r\n      canLoadEditMatrix={canLoadEditMatrix}\r\n      canDeleteRule={canDeleteRule}\r\n      constructMatrixProps={constructMatrixProps}\r\n      complexityBasisValueData={complexityBasisValueData}\r\n      handleAddComplexityValues={handleAddComplexityValues}\r\n      handleRemoveComplexityValues={handleRemoveComplexityValues}\r\n      handleEditComplexityRule={handleEditComplexityRule}\r\n      handleUpdateComplexityRuleValue={handleUpdateComplexityRuleValue}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}