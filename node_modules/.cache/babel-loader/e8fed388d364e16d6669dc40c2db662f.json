{"ast":null,"code":"import _defineProperty from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\forms\\\\AddProductsInsured\\\\AddProductsInsured.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux'; // app\n\nimport { AddProductsInsuredView } from './AddProductsInsured.view';\nimport { postInsured, getRiskCountries, getClients, selectRiskCountries, selectPartyClientsSorted } from 'stores';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nAddProductsInsured.propTypes = {\n  fields: PropTypes.array.isRequired,\n  handleClose: PropTypes.func.isRequired,\n  reInsured: PropTypes.bool.isRequired\n};\nAddProductsInsured.defaultProps = {\n  handleClose: function handleClose() {},\n  reInsured: false\n};\nexport default function AddProductsInsured(_ref) {\n  _s();\n\n  var fields = _ref.fields,\n      handleClose = _ref.handleClose,\n      reInsured = _ref.reInsured;\n  var dispatch = useDispatch();\n  var insuredsLoading = useSelector(function (state) {\n    return state.party.insureds.loading;\n  });\n  var countries = useSelector(selectRiskCountries);\n  var clients = useSelector(selectPartyClientsSorted);\n  var optionsRef = useRef({\n    countries: countries,\n    clients: clients\n  });\n\n  var _useState = useState({\n    countries: countries,\n    clients: clients\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      options = _useState2[0],\n      setOptions = _useState2[1];\n\n  var submitLabel = reInsured ? 'products.admin.reInsureds.create' : 'products.admin.insureds.create';\n  useEffect(function () {\n    if (!utils.generic.isValidArray(options.countries, true)) {\n      dispatch(getRiskCountries());\n    }\n  }, [] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  useEffect(function () {\n    dispatch(getClients({\n      size: 1000\n    }));\n  }, [] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  useEffect(function () {\n    if (!clients) return;\n    updateOptions('clients', clients);\n  }, [clients]);\n  useEffect(function () {\n    if (!countries) return;\n    updateOptions('countries', countries);\n  }, [countries]);\n\n  var updateOptions = function updateOptions(key, obj) {\n    optionsRef.current = _objectSpread(_objectSpread({}, optionsRef.current), {}, _defineProperty({}, key, obj));\n    setOptions(_objectSpread(_objectSpread({}, optionsRef.current), {}, _defineProperty({}, key, obj)));\n  };\n\n  var hydrateOptions = function hydrateOptions(fields) {\n    if (!fields) return [];\n    return fields.map(function (field) {\n      return _objectSpread(_objectSpread({}, field), field.optionsDynamicKey && {\n        options: utils.form.getSelectOptions(field.optionsDynamicKey, _defineProperty({}, field.optionsDynamicKey, options[field.optionsDynamicKey]))\n      });\n    });\n  };\n\n  var handleSubmit = function handleSubmit(values) {\n    return dispatch(postInsured(values, false, reInsured));\n  };\n\n  var handleCancel = function handleCancel() {\n    if (utils.generic.isFunction(handleClose)) {\n      handleClose();\n    }\n  };\n\n  var actions = [{\n    name: 'submit',\n    label: utils.string.t(submitLabel),\n    handler: handleSubmit\n  }, {\n    name: 'cancel',\n    label: utils.string.t('app.cancel'),\n    handler: handleCancel\n  }];\n  var hasFields = utils.generic.isValidArray(fields, true);\n  var hydratedFields = [hydrateOptions(fields)]; // abort\n\n  if (!hasFields || utils.generic.isInvalidOrEmptyArray(options === null || options === void 0 ? void 0 : options.clients) || utils.generic.isInvalidOrEmptyArray(options === null || options === void 0 ? void 0 : options.countries)) return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-testid\": \"empty-placeholder\",\n    style: {\n      minHeight: 400\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 12\n  }, this);\n  return /*#__PURE__*/_jsxDEV(AddProductsInsuredView, {\n    fields: hydratedFields,\n    actions: actions,\n    loading: insuredsLoading,\n    defaultValues: utils.form.getInitialValues(hydratedFields),\n    validationSchema: utils.form.getValidationSchema(hydratedFields)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddProductsInsured, \"cvUvvs5DzUaQNiQ1wgDZO/VYUfE=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = AddProductsInsured;\nAddProductsInsured.displayName = \"AddProductsInsured\";\nAddProductsInsured.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"AddProductsInsured\",\n  \"props\": {\n    \"handleClose\": {\n      \"defaultValue\": {\n        \"value\": \"() => {}\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"reInsured\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"fields\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\forms\\\\AddProductsInsured\\\\AddProductsInsured.js\"] = {\n    name: \"AddProductsInsured\",\n    docgenInfo: AddProductsInsured.__docgenInfo,\n    path: \"src\\\\forms\\\\AddProductsInsured\\\\AddProductsInsured.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"AddProductsInsured\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/forms/AddProductsInsured/AddProductsInsured.js"],"names":["React","useEffect","useState","useRef","PropTypes","useDispatch","useSelector","AddProductsInsuredView","postInsured","getRiskCountries","getClients","selectRiskCountries","selectPartyClientsSorted","utils","AddProductsInsured","propTypes","fields","array","isRequired","handleClose","func","reInsured","bool","defaultProps","dispatch","insuredsLoading","state","party","insureds","loading","countries","clients","optionsRef","options","setOptions","submitLabel","generic","isValidArray","size","updateOptions","key","obj","current","hydrateOptions","map","field","optionsDynamicKey","form","getSelectOptions","handleSubmit","values","handleCancel","isFunction","actions","name","label","string","t","handler","hasFields","hydratedFields","isInvalidOrEmptyArray","minHeight","getInitialValues","getValidationSchema"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n// app\r\nimport { AddProductsInsuredView } from './AddProductsInsured.view';\r\nimport { postInsured, getRiskCountries, getClients, selectRiskCountries, selectPartyClientsSorted } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nAddProductsInsured.propTypes = {\r\n  fields: PropTypes.array.isRequired,\r\n  handleClose: PropTypes.func.isRequired,\r\n  reInsured: PropTypes.bool.isRequired,\r\n};\r\n\r\nAddProductsInsured.defaultProps = {\r\n  handleClose: () => {},\r\n  reInsured: false,\r\n};\r\n\r\nexport default function AddProductsInsured({ fields, handleClose, reInsured }) {\r\n  const dispatch = useDispatch();\r\n  const insuredsLoading = useSelector((state) => state.party.insureds.loading);\r\n  const countries = useSelector(selectRiskCountries);\r\n  const clients = useSelector(selectPartyClientsSorted);\r\n\r\n  const optionsRef = useRef({ countries, clients });\r\n  const [options, setOptions] = useState({ countries, clients });\r\n\r\n  const submitLabel = reInsured ? 'products.admin.reInsureds.create' : 'products.admin.insureds.create';\r\n\r\n  useEffect(\r\n    () => {\r\n      if (!utils.generic.isValidArray(options.countries, true)) {\r\n        dispatch(getRiskCountries());\r\n      }\r\n    },\r\n    [] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  useEffect(\r\n    () => {\r\n      dispatch(getClients({ size: 1000 }));\r\n    },\r\n    [] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!clients) return;\r\n    updateOptions('clients', clients);\r\n  }, [clients]);\r\n\r\n  useEffect(() => {\r\n    if (!countries) return;\r\n    updateOptions('countries', countries);\r\n  }, [countries]);\r\n\r\n  const updateOptions = (key, obj) => {\r\n    optionsRef.current = { ...optionsRef.current, [key]: obj };\r\n    setOptions({ ...optionsRef.current, [key]: obj });\r\n  };\r\n\r\n  const hydrateOptions = (fields) => {\r\n    if (!fields) return [];\r\n\r\n    return fields.map((field) => ({\r\n      ...field,\r\n      ...(field.optionsDynamicKey && {\r\n        options: utils.form.getSelectOptions(field.optionsDynamicKey, {\r\n          [field.optionsDynamicKey]: options[field.optionsDynamicKey],\r\n        }),\r\n      }),\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = (values) => {\r\n    return dispatch(postInsured(values, false, reInsured));\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    if (utils.generic.isFunction(handleClose)) {\r\n      handleClose();\r\n    }\r\n  };\r\n\r\n  const actions = [\r\n    {\r\n      name: 'submit',\r\n      label: utils.string.t(submitLabel),\r\n      handler: handleSubmit,\r\n    },\r\n    {\r\n      name: 'cancel',\r\n      label: utils.string.t('app.cancel'),\r\n      handler: handleCancel,\r\n    },\r\n  ];\r\n\r\n  const hasFields = utils.generic.isValidArray(fields, true);\r\n  const hydratedFields = [hydrateOptions(fields)];\r\n\r\n  // abort\r\n  if (!hasFields || utils.generic.isInvalidOrEmptyArray(options?.clients) || utils.generic.isInvalidOrEmptyArray(options?.countries))\r\n    return <div data-testid=\"empty-placeholder\" style={{ minHeight: 400 }}></div>;\r\n\r\n  return (\r\n    <AddProductsInsuredView\r\n      fields={hydratedFields}\r\n      actions={actions}\r\n      loading={insuredsLoading}\r\n      defaultValues={utils.form.getInitialValues(hydratedFields)}\r\n      validationSchema={utils.form.getValidationSchema(hydratedFields)}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}