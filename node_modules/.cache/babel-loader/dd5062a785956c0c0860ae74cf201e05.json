{"ast":null,"code":"import _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\pages\\\\RfiDashboard\\\\RfiDashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { useHistory, useParams } from 'react-router'; // app\n\nimport { RfiDashboardView } from './RfiDashboard.view';\nimport { selectClaimsTasksProcessingSelected, showModal, selectQueryCodes, getRfiHistory, selectRfiHistoryList, getClaimsPreviewInformation, selectClaimsInformation, selectClaimsProcessingItem } from 'stores';\nimport * as utils from 'utils';\nimport config from 'config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function RfiDashboard() {\n  _s();\n\n  var dispatch = useDispatch();\n  var history = useHistory();\n  var params = useParams();\n  var brand = useSelector(function (state) {\n    return state.ui.brand;\n  });\n  var queryCodeList = useSelector(selectQueryCodes);\n  var claimObj = useSelector(selectClaimsInformation); // Redux management\n\n  var tasksProcessingSelected = useSelector(selectClaimsTasksProcessingSelected);\n\n  var _tasksProcessingSelec = _slicedToArray(tasksProcessingSelected, 1),\n      _tasksProcessingSelec2 = _tasksProcessingSelec[0],\n      taskSelected = _tasksProcessingSelec2 === void 0 ? {} : _tasksProcessingSelec2;\n\n  var processRef = taskSelected.processRef,\n      taskId = taskSelected.taskId,\n      sourceID = taskSelected.sourceID,\n      businessProcessID = taskSelected.businessProcessID,\n      processId = taskSelected.processId,\n      caseIncidentID = taskSelected.caseIncidentID,\n      departmentID = taskSelected.departmentID;\n  var claimData = {\n    claimReference: processRef,\n    taskID: taskId,\n    sourceID: sourceID,\n    claimID: businessProcessID,\n    departmentID: departmentID\n  }; // State management\n\n  var _useState = useState((params === null || params === void 0 ? void 0 : params.tab) || 'rfiDetails'),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedTab = _useState2[0],\n      setSelectedTab = _useState2[1];\n\n  var _useState3 = useState(tasksProcessingSelected[0]),\n      _useState4 = _slicedToArray(_useState3, 1),\n      selectedTask = _useState4[0];\n\n  var _useState5 = useState(claimObj),\n      _useState6 = _slicedToArray(_useState5, 2),\n      selectedClaim = _useState6[0],\n      setSelectedClaim = _useState6[1]; // on load\n\n\n  useEffect(function () {\n    function storeClaimDetails() {\n      return _storeClaimDetails.apply(this, arguments);\n    }\n\n    function _storeClaimDetails() {\n      _storeClaimDetails = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var claimInfo, claimReference, lossDetailID, _sourceID, policyID, claimDetails;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return dispatch(getClaimsPreviewInformation(claimData === null || claimData === void 0 ? void 0 : claimData.claimID, claimData === null || claimData === void 0 ? void 0 : claimData.claimReference, claimData === null || claimData === void 0 ? void 0 : claimData.sourceID, claimData === null || claimData === void 0 ? void 0 : claimData.departmentID));\n\n              case 2:\n                claimInfo = _context.sent;\n\n                if (!utils.generic.isValidObject(claimInfo)) {\n                  _context.next = 8;\n                  break;\n                }\n\n                claimReference = claimInfo.claimReference, lossDetailID = claimInfo.lossDetailID, _sourceID = claimInfo.sourceID, policyID = claimInfo.policyID;\n                claimDetails = _objectSpread(_objectSpread({}, claimInfo), {}, {\n                  claimRef: claimReference,\n                  lossRef: lossDetailID,\n                  sourceId: _sourceID,\n                  policyId: policyID,\n                  processID: processId,\n                  caseIncidentID: caseIncidentID\n                });\n                _context.next = 8;\n                return dispatch(selectClaimsProcessingItem(claimDetails, true));\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _storeClaimDetails.apply(this, arguments);\n    }\n\n    storeClaimDetails();\n    dispatch(getRfiHistory(claimData === null || claimData === void 0 ? void 0 : claimData.taskID));\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    var _tasksProcessingSelec3;\n\n    if ((tasksProcessingSelected === null || tasksProcessingSelected === void 0 ? void 0 : tasksProcessingSelected.length) !== 1 || !(tasksProcessingSelected === null || tasksProcessingSelected === void 0 ? void 0 : (_tasksProcessingSelec3 = tasksProcessingSelected[0]) === null || _tasksProcessingSelec3 === void 0 ? void 0 : _tasksProcessingSelec3.taskRef)) {\n      history.replace(config.routes.claimsProcessing.root);\n    }\n  }, [history, tasksProcessingSelected]);\n  useEffect(function () {\n    if (claimObj) {\n      setSelectedClaim(_objectSpread(_objectSpread({}, claimObj), {}, {\n        xbInstanceID: claimObj.sourceID,\n        xbPolicyID: claimObj.policyID\n      }));\n    }\n  }, [claimObj]);\n  var rfiHistory = useSelector(selectRfiHistoryList);\n\n  var handleSelectTab = function handleSelectTab(tabName) {\n    setSelectedTab(tabName);\n  };\n\n  var tabs = [{\n    value: 'rfiDetails',\n    label: utils.string.t('claims.processing.taskFunction.RfiDetails')\n  }, {\n    value: 'documents',\n    label: utils.string.t('claims.processing.taskFunctionalityTabs.documents')\n  }];\n  var breadcrumbs = [{\n    name: 'claimsProcessing',\n    label: utils.string.t('claims.processing.title'),\n    link: config.routes.claimsProcessing.root\n  }, {\n    name: 'claimRef',\n    label: \"\".concat(utils.string.t('claims.claimRef.text', {\n      claimRef: selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.processRef\n    })),\n    link: \"\".concat(config.routes.claimsProcessing.claim, \"/\").concat(selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.processRef)\n  }, {\n    name: 'taskRef',\n    label: \"\".concat(utils.string.t('claims.processing.rfi.title', {\n      id: selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.taskRef\n    })),\n    link: \"\".concat(config.routes.claimsProcessing.rfi, \"/\").concat(selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.taskRef),\n    active: true\n  }];\n\n  var handleViewClaimClick = function handleViewClaimClick() {\n    dispatch(showModal({\n      component: 'VIEW_CLAIM_INFORMATION',\n      props: {\n        title: \"\".concat(utils.string.t('claims.modals.viewClaimDetails.title'), \" - \").concat(claimObj === null || claimObj === void 0 ? void 0 : claimObj.claimReference),\n        fullWidth: true,\n        hideCompOnBlur: false,\n        maxWidth: 'xl',\n        disableAutoFocus: true,\n        componentProps: {\n          claimData: selectedClaim,\n          isAssignedToHidden: false,\n          isWorkflowStatusHidden: false\n        }\n      }\n    }));\n  }; // abort\n\n\n  if (!selectedTask) return '';\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"\".concat(utils.string.t('claims.processing.title'), \" - \").concat(utils.app.getAppName(brand))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RfiDashboardView, {\n      task: selectedTask,\n      queryCodeList: queryCodeList,\n      tabs: tabs,\n      rfiHistory: rfiHistory,\n      selectedTab: selectedTab,\n      breadcrumbs: breadcrumbs,\n      handleSelectTab: handleSelectTab,\n      handleViewClaimClick: handleViewClaimClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(RfiDashboard, \"DQt9q09uhUWgy1jvsTGCULGfXYU=\", false, function () {\n  return [useDispatch, useHistory, useParams, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = RfiDashboard;\nRfiDashboard.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"RfiDashboard\"\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\pages\\\\RfiDashboard\\\\RfiDashboard.js\"] = {\n    name: \"RfiDashboard\",\n    docgenInfo: RfiDashboard.__docgenInfo,\n    path: \"src\\\\pages\\\\RfiDashboard\\\\RfiDashboard.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"RfiDashboard\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/pages/RfiDashboard/RfiDashboard.js"],"names":["React","useState","useEffect","useDispatch","useSelector","Helmet","useHistory","useParams","RfiDashboardView","selectClaimsTasksProcessingSelected","showModal","selectQueryCodes","getRfiHistory","selectRfiHistoryList","getClaimsPreviewInformation","selectClaimsInformation","selectClaimsProcessingItem","utils","config","RfiDashboard","dispatch","history","params","brand","state","ui","queryCodeList","claimObj","tasksProcessingSelected","taskSelected","processRef","taskId","sourceID","businessProcessID","processId","caseIncidentID","departmentID","claimData","claimReference","taskID","claimID","tab","selectedTab","setSelectedTab","selectedTask","selectedClaim","setSelectedClaim","storeClaimDetails","claimInfo","generic","isValidObject","lossDetailID","policyID","claimDetails","claimRef","lossRef","sourceId","policyId","processID","length","taskRef","replace","routes","claimsProcessing","root","xbInstanceID","xbPolicyID","rfiHistory","handleSelectTab","tabName","tabs","value","label","string","t","breadcrumbs","name","link","claim","id","rfi","active","handleViewClaimClick","component","props","title","fullWidth","hideCompOnBlur","maxWidth","disableAutoFocus","componentProps","isAssignedToHidden","isWorkflowStatusHidden","app","getAppName"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Helmet } from 'react-helmet';\r\nimport { useHistory, useParams } from 'react-router';\r\n\r\n// app\r\nimport { RfiDashboardView } from './RfiDashboard.view';\r\nimport {\r\n  selectClaimsTasksProcessingSelected,\r\n  showModal,\r\n  selectQueryCodes,\r\n  getRfiHistory,\r\n  selectRfiHistoryList,\r\n  getClaimsPreviewInformation,\r\n  selectClaimsInformation,\r\n  selectClaimsProcessingItem,\r\n} from 'stores';\r\nimport * as utils from 'utils';\r\nimport config from 'config';\r\n\r\nexport default function RfiDashboard() {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const params = useParams();\r\n  const brand = useSelector((state) => state.ui.brand);\r\n  const queryCodeList = useSelector(selectQueryCodes);\r\n  const claimObj = useSelector(selectClaimsInformation);\r\n\r\n  // Redux management\r\n  const tasksProcessingSelected = useSelector(selectClaimsTasksProcessingSelected);\r\n  const [taskSelected = {}] = tasksProcessingSelected;\r\n  const { processRef, taskId, sourceID, businessProcessID, processId, caseIncidentID, departmentID } = taskSelected;\r\n\r\n  const claimData = {\r\n    claimReference: processRef,\r\n    taskID: taskId,\r\n    sourceID,\r\n    claimID: businessProcessID,\r\n    departmentID,\r\n  };\r\n\r\n  // State management\r\n  const [selectedTab, setSelectedTab] = useState(params?.tab || 'rfiDetails');\r\n  const [selectedTask] = useState(tasksProcessingSelected[0]);\r\n  const [selectedClaim, setSelectedClaim] = useState(claimObj);\r\n\r\n  // on load\r\n  useEffect(() => {\r\n    async function storeClaimDetails() {\r\n      const claimInfo = await dispatch(\r\n        getClaimsPreviewInformation(claimData?.claimID, claimData?.claimReference, claimData?.sourceID, claimData?.departmentID)\r\n      );\r\n      if (utils.generic.isValidObject(claimInfo)) {\r\n        const { claimReference, lossDetailID, sourceID, policyID } = claimInfo;\r\n        const claimDetails = {\r\n          ...claimInfo,\r\n          claimRef: claimReference,\r\n          lossRef: lossDetailID,\r\n          sourceId: sourceID,\r\n          policyId: policyID,\r\n          processID: processId,\r\n          caseIncidentID,\r\n        };\r\n        await dispatch(selectClaimsProcessingItem(claimDetails, true));\r\n      }\r\n    }\r\n    storeClaimDetails();\r\n\r\n    dispatch(getRfiHistory(claimData?.taskID));\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    if (tasksProcessingSelected?.length !== 1 || !tasksProcessingSelected?.[0]?.taskRef) {\r\n      history.replace(config.routes.claimsProcessing.root);\r\n    }\r\n  }, [history, tasksProcessingSelected]);\r\n\r\n  useEffect(() => {\r\n    if (claimObj) {\r\n      setSelectedClaim({ ...claimObj, xbInstanceID: claimObj.sourceID, xbPolicyID: claimObj.policyID });\r\n    }\r\n  }, [claimObj]);\r\n\r\n  const rfiHistory = useSelector(selectRfiHistoryList);\r\n  const handleSelectTab = (tabName) => {\r\n    setSelectedTab(tabName);\r\n  };\r\n\r\n  const tabs = [\r\n    { value: 'rfiDetails', label: utils.string.t('claims.processing.taskFunction.RfiDetails') },\r\n    { value: 'documents', label: utils.string.t('claims.processing.taskFunctionalityTabs.documents') },\r\n  ];\r\n\r\n  const breadcrumbs = [\r\n    {\r\n      name: 'claimsProcessing',\r\n      label: utils.string.t('claims.processing.title'),\r\n      link: config.routes.claimsProcessing.root,\r\n    },\r\n    {\r\n      name: 'claimRef',\r\n      label: `${utils.string.t('claims.claimRef.text', { claimRef: selectedTask?.processRef })}`,\r\n      link: `${config.routes.claimsProcessing.claim}/${selectedTask?.processRef}`,\r\n    },\r\n    {\r\n      name: 'taskRef',\r\n      label: `${utils.string.t('claims.processing.rfi.title', { id: selectedTask?.taskRef })}`,\r\n      link: `${config.routes.claimsProcessing.rfi}/${selectedTask?.taskRef}`,\r\n      active: true,\r\n    },\r\n  ];\r\n\r\n  const handleViewClaimClick = () => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'VIEW_CLAIM_INFORMATION',\r\n        props: {\r\n          title: `${utils.string.t('claims.modals.viewClaimDetails.title')} - ${claimObj?.claimReference}`,\r\n          fullWidth: true,\r\n          hideCompOnBlur: false,\r\n          maxWidth: 'xl',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            claimData: selectedClaim,\r\n            isAssignedToHidden: false,\r\n            isWorkflowStatusHidden: false,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  // abort\r\n  if (!selectedTask) return '';\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>{`${utils.string.t('claims.processing.title')} - ${utils.app.getAppName(brand)}`}</title>\r\n      </Helmet>\r\n      <RfiDashboardView\r\n        task={selectedTask}\r\n        queryCodeList={queryCodeList}\r\n        tabs={tabs}\r\n        rfiHistory={rfiHistory}\r\n        selectedTab={selectedTab}\r\n        breadcrumbs={breadcrumbs}\r\n        handleSelectTab={handleSelectTab}\r\n        handleViewClaimClick={handleViewClaimClick}\r\n      />\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}