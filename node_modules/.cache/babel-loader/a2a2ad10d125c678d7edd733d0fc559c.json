{"ast":null,"code":"import _defineProperty from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\pages\\\\ClaimsNewLoss\\\\ClaimsNewLoss.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport { Helmet } from 'react-helmet';\nimport get from 'lodash/get';\nimport classnames from 'classnames'; // app\n\nimport { ClaimsNewLossView } from './ClaimsNewLoss.view';\nimport { showModal, selectLossId, selectClaimIdUnderProgress, selectClaimsStepper, selectCatCodes, selectClaimsStatuses, selectPriorities, selectLossQualifiers, selectSettlementCurrency, selectReferralResponse, getCatCodes, getStatuses, getPriorityLevels, getLossQualifiers, getSettlementCurrency, getReferralResponse, postLossInformation, postLossInformationSuccess, postClaimDetailsInformation, postEditClaimDetailsInformation, postClaimDetailsInformationSuccess, postEditLossInformation, resetClaimsPoliciesTemp, resetClaimData, selectClaimIdFromGrid } from 'stores';\nimport * as utils from 'utils';\nimport config from 'config';\nimport { CustomizedDialog } from 'components';\nimport styles from './ClaimsNewLoss.styles'; // mui\n\nimport { Typography, makeStyles } from '@material-ui/core';\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Divider from \"@material-ui/core/Divider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ClaimsNewLoss() {\n  _s();\n\n  var _this = this,\n      _drawerClasses,\n      _contentClasses;\n\n  var classes = makeStyles(styles, {\n    name: 'ClaimsNewLoss'\n  })();\n  var rootRef = useRef(null);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isNavigationAllowed = _useState2[0],\n      setIsNavigationAllowed = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      validation = _useState4[0],\n      setValidation = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      drawerOpen = _useState6[0],\n      setDrawerOpen = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      fnolModalOpen = _useState8[0],\n      setFnolModalOpen = _useState8[1];\n\n  var _useState9 = useState(''),\n      _useState10 = _slicedToArray(_useState9, 2),\n      modalTitle = _useState10[0],\n      setModalTitle = _useState10[1];\n\n  var dispatch = useDispatch();\n  var history = useHistory();\n  var brand = useSelector(function (state) {\n    return state.ui.brand;\n  });\n  var lossInformation = useSelector(selectLossId);\n  var claimData = useSelector(selectClaimIdUnderProgress);\n  var catCodes = useSelector(selectCatCodes);\n  var priorities = useSelector(selectPriorities);\n  var lossQualifiers = useSelector(selectLossQualifiers);\n  var claimsStatuses = useSelector(selectClaimsStatuses);\n  var settlementCurrency = useSelector(selectSettlementCurrency);\n  var referralResponse = useSelector(selectReferralResponse);\n  var submitClaimID = get(claimData, 'claimID') || '';\n  var currentStep = useSelector(selectClaimsStepper);\n  var claimsInformation = useSelector(selectClaimIdFromGrid);\n  var editClaimId = get(claimsInformation, 'claimID') || '';\n  var steps = [{\n    slug: 'enterLossInformation',\n    label: 'Enter Loss Information'\n  }, {\n    slug: 'searchPolicy',\n    label: 'Search Policy'\n  }, {\n    slug: 'enterClaimInformation',\n    label: 'Enter Claim Information'\n  }, {\n    slug: 'previewInformation',\n    label: 'Preview Information'\n  }, {\n    slug: 'acknowledgement',\n    label: 'Acknowledgement'\n  }]; // Get this info from api\n\n  var claim = {\n    claimRef: 'CL55690',\n    firstAdvicePac: '13/05/2021',\n    firstAdviceDtu: '13/05/2021'\n  };\n\n  var handleSaveNewClaim = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (submitClaimID) {\n                _context.next = 10;\n                break;\n              }\n\n              if (!editClaimId) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 4;\n              return dispatch(postEditClaimDetailsInformation(values));\n\n            case 4:\n              _context.next = 8;\n              break;\n\n            case 6:\n              _context.next = 8;\n              return dispatch(postClaimDetailsInformation(values));\n\n            case 8:\n              _context.next = 12;\n              break;\n\n            case 10:\n              _context.next = 12;\n              return dispatch(postEditClaimDetailsInformation(values));\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSaveNewClaim(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleSaveNewLoss = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(values) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(lossInformation === null || lossInformation === void 0 ? void 0 : lossInformation.lossDetailID)) {\n                _context2.next = 5;\n                break;\n              }\n\n              _context2.next = 3;\n              return dispatch(postEditLossInformation(values));\n\n            case 3:\n              _context2.next = 7;\n              break;\n\n            case 5:\n              _context2.next = 7;\n              return dispatch(postLossInformation(values));\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleSaveNewLoss(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // On click of cancel button\n\n\n  var launchConfirmModal = function launchConfirmModal() {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        title: utils.string.t('navigation.alert'),\n        fullWidth: true,\n        maxWidth: 'sm',\n        componentProps: {\n          confirmLabel: utils.string.t('app.yes'),\n          cancelLabel: utils.string.t('app.no'),\n          confirmMessage: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            color: \"secondary\",\n            children: utils.string.t('claims.modals.confirm.subtitle')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 15\n          }, _this),\n          submitHandler: function submitHandler() {\n            setIsNavigationAllowed(true);\n            dispatch(postLossInformationSuccess({}));\n            dispatch(postClaimDetailsInformationSuccess(null));\n            dispatch(resetClaimsPoliciesTemp());\n            history.push(config.routes.claimsFNOL.root);\n          },\n          handleClose: function handleClose() {}\n        }\n      }\n    }));\n  }; // On click of Finish button\n\n\n  var launchFinishModal = function launchFinishModal() {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        title: utils.string.t('claims.modals.finishRegisterLoss.title'),\n        fullWidth: true,\n        maxWidth: 'sm',\n        componentProps: {\n          confirmLabel: utils.string.t('app.yes'),\n          cancelLabel: utils.string.t('app.no'),\n          confirmMessage: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            color: \"secondary\",\n            children: utils.string.t('claims.modals.finishRegisterLoss.content')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 15\n          }, _this),\n          submitHandler: function submitHandler() {\n            setIsNavigationAllowed(true);\n            dispatch(resetClaimData());\n            history.push(config.routes.claimsFNOL.root);\n          },\n          handleClose: function handleClose() {}\n        }\n      }\n    }));\n  };\n\n  var handleCancelRegisterNewLoss = function handleCancelRegisterNewLoss() {\n    launchConfirmModal();\n  };\n\n  var getAllReferentialData = function getAllReferentialData() {\n    if (utils.generic.isInvalidOrEmptyArray(catCodes)) {\n      dispatch(getCatCodes());\n    }\n\n    if (utils.generic.isInvalidOrEmptyArray(priorities)) {\n      dispatch(getPriorityLevels());\n    }\n\n    if (utils.generic.isInvalidOrEmptyArray(lossQualifiers)) {\n      dispatch(getLossQualifiers());\n    }\n\n    if (utils.generic.isInvalidOrEmptyArray(claimsStatuses)) {\n      dispatch(getStatuses());\n    }\n\n    if (utils.generic.isInvalidOrEmptyArray(settlementCurrency)) {\n      dispatch(getSettlementCurrency());\n    }\n\n    if (utils.generic.isInvalidOrEmptyArray(referralResponse)) {\n      dispatch(getReferralResponse());\n    }\n  };\n\n  useEffect(function () {\n    getAllReferentialData();\n    setFnolModalOpen(true);\n    return function () {\n      dispatch(resetClaimData());\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var handleDrawerOpen = function handleDrawerOpen() {\n    setDrawerOpen(!drawerOpen);\n  };\n\n  var handleDrawerClose = function handleDrawerClose() {\n    setDrawerOpen(false);\n  };\n\n  var handleFnolModalClose = function handleFnolModalClose() {\n    history.push(config.routes.claimsFNOL.root);\n  };\n\n  var drawerClasses = (_drawerClasses = {}, _defineProperty(_drawerClasses, classes.drawerOpen, drawerOpen), _defineProperty(_drawerClasses, classes.drawer, classes.drawer), _drawerClasses);\n  var contentClasses = (_contentClasses = {}, _defineProperty(_contentClasses, classes.contentShift, drawerOpen), _defineProperty(_contentClasses, classes.content, classes.content), _contentClasses);\n\n  var getModalTitle = function getModalTitle(activeStepperLabel) {\n    setModalTitle(activeStepperLabel);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"main\", {\n      ref: rootRef,\n      className: classnames(contentClasses),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.drawerHeader\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CustomizedDialog, {\n        parentRef: rootRef,\n        drawerOpen: drawerOpen,\n        dialogOpen: fnolModalOpen,\n        modalTitle: modalTitle,\n        handlers: {\n          handleDrawerOpen: handleDrawerOpen,\n          handleDrawerClose: handleDrawerClose,\n          handleDialogClose: handleFnolModalClose\n        },\n        children: [/*#__PURE__*/_jsxDEV(Helmet, {\n          children: /*#__PURE__*/_jsxDEV(\"title\", {\n            children: \"\".concat(utils.string.t('claims.actions.registerNewLoss'), \" - \").concat(utils.app.getAppName(brand))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ClaimsNewLossView, {\n          claim: claim,\n          steps: steps,\n          currentStep: currentStep,\n          isNavigationAllowed: isNavigationAllowed,\n          handleCancel: handleCancelRegisterNewLoss,\n          handleFinishNewLoss: launchFinishModal,\n          handleSaveNewLoss: handleSaveNewLoss,\n          handleSaveNewClaim: handleSaveNewClaim,\n          validation: validation,\n          setValidation: setValidation,\n          getModalTitle: getModalTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Drawer, {\n      variant: \"persistent\",\n      anchor: \"right\",\n      open: drawerOpen,\n      nestedClasses: {\n        paper: classes.drawerPaper\n      },\n      className: classnames(drawerClasses),\n      children: /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ClaimsNewLoss, \"N+GE+uewCUyISj7lMy62MYtCGfA=\", false, function () {\n  return [useDispatch, useHistory, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = ClaimsNewLoss;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimsNewLoss\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/pages/ClaimsNewLoss/ClaimsNewLoss.js"],"names":["React","useState","useEffect","useRef","useDispatch","useSelector","useHistory","Helmet","get","classnames","ClaimsNewLossView","showModal","selectLossId","selectClaimIdUnderProgress","selectClaimsStepper","selectCatCodes","selectClaimsStatuses","selectPriorities","selectLossQualifiers","selectSettlementCurrency","selectReferralResponse","getCatCodes","getStatuses","getPriorityLevels","getLossQualifiers","getSettlementCurrency","getReferralResponse","postLossInformation","postLossInformationSuccess","postClaimDetailsInformation","postEditClaimDetailsInformation","postClaimDetailsInformationSuccess","postEditLossInformation","resetClaimsPoliciesTemp","resetClaimData","selectClaimIdFromGrid","utils","config","CustomizedDialog","styles","Typography","makeStyles","Drawer","Divider","ClaimsNewLoss","classes","name","rootRef","isNavigationAllowed","setIsNavigationAllowed","validation","setValidation","drawerOpen","setDrawerOpen","fnolModalOpen","setFnolModalOpen","modalTitle","setModalTitle","dispatch","history","brand","state","ui","lossInformation","claimData","catCodes","priorities","lossQualifiers","claimsStatuses","settlementCurrency","referralResponse","submitClaimID","currentStep","claimsInformation","editClaimId","steps","slug","label","claim","claimRef","firstAdvicePac","firstAdviceDtu","handleSaveNewClaim","values","handleSaveNewLoss","lossDetailID","launchConfirmModal","component","props","title","string","t","fullWidth","maxWidth","componentProps","confirmLabel","cancelLabel","confirmMessage","submitHandler","push","routes","claimsFNOL","root","handleClose","launchFinishModal","handleCancelRegisterNewLoss","getAllReferentialData","generic","isInvalidOrEmptyArray","handleDrawerOpen","handleDrawerClose","handleFnolModalClose","drawerClasses","drawer","contentClasses","contentShift","content","getModalTitle","activeStepperLabel","drawerHeader","handleDialogClose","app","getAppName","paper","drawerPaper"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport { Helmet } from 'react-helmet';\r\nimport get from 'lodash/get';\r\nimport classnames from 'classnames';\r\n\r\n// app\r\nimport { ClaimsNewLossView } from './ClaimsNewLoss.view';\r\nimport {\r\n  showModal,\r\n  selectLossId,\r\n  selectClaimIdUnderProgress,\r\n  selectClaimsStepper,\r\n  selectCatCodes,\r\n  selectClaimsStatuses,\r\n  selectPriorities,\r\n  selectLossQualifiers,\r\n  selectSettlementCurrency,\r\n  selectReferralResponse,\r\n  getCatCodes,\r\n  getStatuses,\r\n  getPriorityLevels,\r\n  getLossQualifiers,\r\n  getSettlementCurrency,\r\n  getReferralResponse,\r\n  postLossInformation,\r\n  postLossInformationSuccess,\r\n  postClaimDetailsInformation,\r\n  postEditClaimDetailsInformation,\r\n  postClaimDetailsInformationSuccess,\r\n  postEditLossInformation,\r\n  resetClaimsPoliciesTemp,\r\n  resetClaimData,\r\n  selectClaimIdFromGrid,\r\n} from 'stores';\r\nimport * as utils from 'utils';\r\nimport config from 'config';\r\nimport { CustomizedDialog } from 'components';\r\nimport styles from './ClaimsNewLoss.styles';\r\n\r\n// mui\r\nimport { Typography, makeStyles } from '@material-ui/core';\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\nexport default function ClaimsNewLoss() {\r\n  const classes = makeStyles(styles, { name: 'ClaimsNewLoss' })();\r\n  const rootRef = useRef(null);\r\n  const [isNavigationAllowed, setIsNavigationAllowed] = useState(false);\r\n  const [validation, setValidation] = useState(false);\r\n  const [drawerOpen, setDrawerOpen] = useState(false);\r\n  const [fnolModalOpen, setFnolModalOpen] = useState(false);\r\n  const [modalTitle, setModalTitle] = useState('');\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const brand = useSelector((state) => state.ui.brand);\r\n  const lossInformation = useSelector(selectLossId);\r\n  const claimData = useSelector(selectClaimIdUnderProgress);\r\n\r\n  const catCodes = useSelector(selectCatCodes);\r\n  const priorities = useSelector(selectPriorities);\r\n  const lossQualifiers = useSelector(selectLossQualifiers);\r\n  const claimsStatuses = useSelector(selectClaimsStatuses);\r\n  const settlementCurrency = useSelector(selectSettlementCurrency);\r\n  const referralResponse = useSelector(selectReferralResponse);\r\n\r\n  const submitClaimID = get(claimData, 'claimID') || '';\r\n  const currentStep = useSelector(selectClaimsStepper);\r\n\r\n  const claimsInformation = useSelector(selectClaimIdFromGrid);\r\n  const editClaimId = get(claimsInformation, 'claimID') || '';\r\n\r\n  const steps = [\r\n    { slug: 'enterLossInformation', label: 'Enter Loss Information' },\r\n    { slug: 'searchPolicy', label: 'Search Policy' },\r\n    { slug: 'enterClaimInformation', label: 'Enter Claim Information' },\r\n    { slug: 'previewInformation', label: 'Preview Information' },\r\n    { slug: 'acknowledgement', label: 'Acknowledgement' },\r\n  ];\r\n\r\n  // Get this info from api\r\n  const claim = {\r\n    claimRef: 'CL55690',\r\n    firstAdvicePac: '13/05/2021',\r\n    firstAdviceDtu: '13/05/2021',\r\n  };\r\n\r\n  const handleSaveNewClaim = async (values) => {\r\n    if (!submitClaimID) {\r\n      if (editClaimId) {\r\n        await dispatch(postEditClaimDetailsInformation(values));\r\n      } else {\r\n        await dispatch(postClaimDetailsInformation(values));\r\n      }\r\n    } else {\r\n      await dispatch(postEditClaimDetailsInformation(values));\r\n    }\r\n  };\r\n\r\n  const handleSaveNewLoss = async (values) => {\r\n    if (lossInformation?.lossDetailID) {\r\n      await dispatch(postEditLossInformation(values));\r\n    } else {\r\n      await dispatch(postLossInformation(values));\r\n    }\r\n  };\r\n\r\n  // On click of cancel button\r\n  const launchConfirmModal = () => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          title: utils.string.t('navigation.alert'),\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          componentProps: {\r\n            confirmLabel: utils.string.t('app.yes'),\r\n            cancelLabel: utils.string.t('app.no'),\r\n            confirmMessage: (\r\n              <Typography variant=\"h5\" color=\"secondary\">\r\n                {utils.string.t('claims.modals.confirm.subtitle')}\r\n              </Typography>\r\n            ),\r\n            submitHandler: () => {\r\n              setIsNavigationAllowed(true);\r\n              dispatch(postLossInformationSuccess({}));\r\n              dispatch(postClaimDetailsInformationSuccess(null));\r\n              dispatch(resetClaimsPoliciesTemp());\r\n              history.push(config.routes.claimsFNOL.root);\r\n            },\r\n            handleClose: () => { },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  // On click of Finish button\r\n  const launchFinishModal = () => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          title: utils.string.t('claims.modals.finishRegisterLoss.title'),\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          componentProps: {\r\n            confirmLabel: utils.string.t('app.yes'),\r\n            cancelLabel: utils.string.t('app.no'),\r\n            confirmMessage: (\r\n              <Typography variant=\"h5\" color=\"secondary\">\r\n                {utils.string.t('claims.modals.finishRegisterLoss.content')}\r\n              </Typography>\r\n            ),\r\n            submitHandler: () => {\r\n              setIsNavigationAllowed(true);\r\n              dispatch(resetClaimData());\r\n              history.push(config.routes.claimsFNOL.root);\r\n            },\r\n            handleClose: () => { },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleCancelRegisterNewLoss = () => {\r\n    launchConfirmModal();\r\n  };\r\n\r\n  const getAllReferentialData = () => {\r\n    if (utils.generic.isInvalidOrEmptyArray(catCodes)) {\r\n      dispatch(getCatCodes());\r\n    }\r\n    if (utils.generic.isInvalidOrEmptyArray(priorities)) {\r\n      dispatch(getPriorityLevels());\r\n    }\r\n    if (utils.generic.isInvalidOrEmptyArray(lossQualifiers)) {\r\n      dispatch(getLossQualifiers());\r\n    }\r\n    if (utils.generic.isInvalidOrEmptyArray(claimsStatuses)) {\r\n      dispatch(getStatuses());\r\n    }\r\n    if (utils.generic.isInvalidOrEmptyArray(settlementCurrency)) {\r\n      dispatch(getSettlementCurrency());\r\n    }\r\n    if (utils.generic.isInvalidOrEmptyArray(referralResponse)) {\r\n      dispatch(getReferralResponse());\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getAllReferentialData();\r\n    setFnolModalOpen(true);\r\n    return () => {\r\n      dispatch(resetClaimData());\r\n    };\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const handleDrawerOpen = () => {\r\n    setDrawerOpen(!drawerOpen);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setDrawerOpen(false);\r\n  };\r\n\r\n  const handleFnolModalClose = () => {\r\n    history.push(config.routes.claimsFNOL.root);\r\n  }\r\n\r\n  const drawerClasses = {\r\n    [classes.drawerOpen]: drawerOpen,\r\n    [classes.drawer]: classes.drawer\r\n  }\r\n\r\n  const contentClasses = {\r\n    [classes.contentShift]: drawerOpen,\r\n    [classes.content]: classes.content\r\n  }\r\n\r\n  const getModalTitle = (activeStepperLabel) => {\r\n    setModalTitle(activeStepperLabel)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <main\r\n        ref={rootRef}\r\n        className={classnames(contentClasses)}\r\n      >\r\n        <div className={classes.drawerHeader} />\r\n        <CustomizedDialog\r\n          parentRef={rootRef}\r\n          drawerOpen={drawerOpen}\r\n          dialogOpen={fnolModalOpen}\r\n          modalTitle={modalTitle}\r\n          handlers={{\r\n            handleDrawerOpen,\r\n            handleDrawerClose,\r\n            handleDialogClose: handleFnolModalClose\r\n          }}\r\n        >\r\n          <Helmet>\r\n            <title>{`${utils.string.t('claims.actions.registerNewLoss')} - ${utils.app.getAppName(brand)}`}</title>\r\n          </Helmet>\r\n          <ClaimsNewLossView\r\n            claim={claim}\r\n            steps={steps}\r\n            currentStep={currentStep}\r\n            isNavigationAllowed={isNavigationAllowed}\r\n            handleCancel={handleCancelRegisterNewLoss}\r\n            handleFinishNewLoss={launchFinishModal}\r\n            handleSaveNewLoss={handleSaveNewLoss}\r\n            handleSaveNewClaim={handleSaveNewClaim}\r\n            validation={validation}\r\n            setValidation={setValidation}\r\n            getModalTitle={getModalTitle}\r\n          />\r\n        </CustomizedDialog>\r\n      </main>\r\n      <Drawer\r\n        variant=\"persistent\"\r\n        anchor=\"right\"\r\n        open={drawerOpen}\r\n        nestedClasses={{\r\n          paper: classes.drawerPaper\r\n        }}\r\n        className={classnames(drawerClasses)}\r\n      >\r\n        <Divider />\r\n        \r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}