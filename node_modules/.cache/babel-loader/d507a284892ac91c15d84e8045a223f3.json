{"ast":null,"code":"import { addLoader, authLogout, removeLoader } from 'stores';\nimport * as utils from 'utils';\nimport get from 'lodash/get';\nexport var postSearchInsured = function postSearchInsured(params) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint,\n        claims = _getState.claims;\n\n    var defaultError = {\n      file: 'stores/claims.actions.postSearchInsured'\n    };\n    dispatch(postSearchInsuredRequest());\n    dispatch(addLoader('postSearchInsured'));\n    var prevDirection = get(claims, 'complexInsured.sort.direction') || '';\n    var newDirection = params.hasOwnProperty('direction') ? params.direction : prevDirection;\n    var prevQuery = get(claims, 'complexInsured.query') || '';\n    var newQuery = params.hasOwnProperty('term') ? params.term : prevQuery;\n    var prevSortBy = get(claims, 'complexInsured.sort.by') || '';\n    var newSortBy = params.hasOwnProperty('sortBy') ? params.sortBy : prevSortBy;\n    var data = {\n      direction: newDirection,\n      page: params && params.page || 0,\n      pageSize: params && params.size || claims.complexInsured.pageSize,\n      search: newQuery,\n      sortBy: newSortBy,\n      filterLossClaimsCriteriaDTO: null\n    };\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.claimService,\n      path: 'api/data/claims-triage/complex/add-insured/search',\n      data: data\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (data) {\n      dispatch(postSearchInsuredSuccess(data));\n      dispatch(removeLoader('postSearchInsured'));\n      return data;\n    })[\"catch\"](function (err) {\n      dispatch(postSearchInsuredFailure(err, defaultError));\n      dispatch(removeLoader('postSearchInsured'));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      return err;\n    });\n  };\n};\nexport var postSearchInsuredRequest = function postSearchInsuredRequest(data) {\n  return {\n    type: 'CLAIMS_COMPLEXITY_SEARCH_POST_REQUEST',\n    payload: data\n  };\n};\nexport var postSearchInsuredSuccess = function postSearchInsuredSuccess(data) {\n  return {\n    type: 'CLAIMS_COMPLEXITY_SEARCH_POST_SUCCESS',\n    payload: data\n  };\n};\nexport var postSearchInsuredFailure = function postSearchInsuredFailure(data) {\n  return {\n    type: 'CLAIMS_COMPLEXITY_SEARCH_POST_FAILURE',\n    payload: data\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.postSearchInsured.js"],"names":["addLoader","authLogout","removeLoader","utils","get","postSearchInsured","params","dispatch","getState","auth","user","endpoint","config","vars","claims","defaultError","file","postSearchInsuredRequest","prevDirection","newDirection","hasOwnProperty","direction","prevQuery","newQuery","term","prevSortBy","newSortBy","sortBy","data","page","pageSize","size","complexInsured","search","filterLossClaimsCriteriaDTO","api","post","token","accessToken","claimService","path","then","response","handleResponse","postSearchInsuredSuccess","err","postSearchInsuredFailure","handleUnauthorized","type","payload"],"mappings":"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","sourcesContent":["import { addLoader, authLogout, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\nimport get from 'lodash/get';\r\n\r\nexport const postSearchInsured = (params) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}, claims} = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.postSearchInsured',\r\n  };\r\n\r\n  dispatch(postSearchInsuredRequest());\r\n  dispatch(addLoader('postSearchInsured'));\r\n\r\n  const prevDirection = get(claims, 'complexInsured.sort.direction') || '';\r\n  const newDirection = params.hasOwnProperty('direction') ? params.direction : prevDirection;\r\n\r\n  const prevQuery = get(claims, 'complexInsured.query') || '';\r\n  const newQuery = params.hasOwnProperty('term') ? params.term : prevQuery;\r\n\r\n  const prevSortBy = get(claims, 'complexInsured.sort.by') || '';\r\n  const newSortBy = params.hasOwnProperty('sortBy') ? params.sortBy : prevSortBy;\r\n\r\n  const data = {\r\n    direction: newDirection,\r\n    page: (params && params.page) || 0,\r\n    pageSize: (params && params.size) || claims.complexInsured.pageSize,\r\n    search: newQuery,\r\n    sortBy: newSortBy,\r\n    filterLossClaimsCriteriaDTO: null,\r\n  };\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.claimService,\r\n      path: 'api/data/claims-triage/complex/add-insured/search',\r\n      data,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((data) => {\r\n      dispatch(postSearchInsuredSuccess(data));\r\n      dispatch(removeLoader('postSearchInsured'));\r\n      return data;\r\n    })\r\n    .catch((err) => {\r\n      dispatch(postSearchInsuredFailure(err, defaultError));\r\n      dispatch(removeLoader('postSearchInsured'));\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const postSearchInsuredRequest = (data) => {\r\n  return {\r\n    type: 'CLAIMS_COMPLEXITY_SEARCH_POST_REQUEST',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const postSearchInsuredSuccess = (data) => {\r\n  return {\r\n    type: 'CLAIMS_COMPLEXITY_SEARCH_POST_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const postSearchInsuredFailure = (data) => {\r\n  return {\r\n    type: 'CLAIMS_COMPLEXITY_SEARCH_POST_FAILURE',\r\n    payload: data,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}