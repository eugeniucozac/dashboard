{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\components\\\\EditableTable\\\\EditableTable.view.js\";\nimport React, { Fragment } from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport moment from 'moment'; //app\n\nimport styles from './EditableTable.styles';\nimport { TableHead, TableCell, Button, Overflow, Translate } from 'components';\nimport * as utils from 'utils';\nimport * as constants from 'consts';\nimport NumberFormat from 'react-number-format'; //mui\n\nimport { makeStyles, Box, Typography, Table, TableBody, MenuItem, TableRow, Select, Checkbox, TextField, TableContainer } from '@material-ui/core';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport { KeyboardDatePicker } from '@material-ui/pickers';\nimport TodayIcon from '@material-ui/icons/Today';\nimport EventIcon from '@material-ui/icons/Event';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { createElement as _createElement } from \"react\";\nEditableTableView.propTypes = {\n  fields: PropTypes.shape({\n    arrayItemDef: PropTypes.array,\n    fieldData: PropTypes.array\n  }),\n  tableRows: PropTypes.array,\n  isTableEditable: PropTypes.bool,\n  handlers: PropTypes.shape({\n    handleTableTextboxChange: PropTypes.func,\n    handleTableRowClick: PropTypes.func,\n    handleTableDatePickerChange: PropTypes.func,\n    handleTableCopyRowData: PropTypes.func,\n    handleTableSelectChange: PropTypes.func\n  })\n};\nexport function EditableTableView(_ref) {\n  var _this = this,\n      _fields$arrayItemDef;\n\n  var fields = _ref.fields,\n      tableRows = _ref.tableRows,\n      isTableEditable = _ref.isTableEditable,\n      handlers = _ref.handlers;\n  var classes = makeStyles(styles, {\n    name: 'EditableTable'\n  })();\n\n  var copyIcon = function copyIcon(index) {\n    return /*#__PURE__*/_jsxDEV(Button, {\n      icon: FileCopyIcon,\n      onClick: function onClick() {\n        return isTableEditable && handlers.handleTableCopyRowData(index);\n      },\n      size: \"medium\",\n      variant: \"text\",\n      color: \"default\",\n      tooltip: {\n        title: utils.string.t('app.copyButtonToolTip')\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, _this);\n  };\n\n  var retainBrokerAmountDetails = function retainBrokerAmountDetails(row) {\n    var _row$retainedBrokerag;\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Translate, {\n        label: \"format.currency\",\n        options: {\n          value: {\n            number: row === null || row === void 0 ? void 0 : row.retainedBrokerageAmount,\n            currency: ((_row$retainedBrokerag = row.retainedBrokerageDetails) === null || _row$retainedBrokerag === void 0 ? void 0 : _row$retainedBrokerag.value) || constants.CURRENCY_USD\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, _this), (row === null || row === void 0 ? void 0 : row.convertedBrokerage) && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(Translate, {\n          label: \"format.currency\",\n          options: {\n            value: {\n              number: row === null || row === void 0 ? void 0 : row.convertedBrokerage.value,\n              currency: 'GBP'\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, _this), \" @\", /*#__PURE__*/_jsxDEV(Translate, {\n          label: \"format.number\",\n          options: {\n            value: {\n              number: row === null || row === void 0 ? void 0 : row.convertedBrokerage.rate,\n              format: {\n                trimMantissa: false\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true)]\n    }, void 0, true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    display: \"inline-block\",\n    width: \"100%\",\n    children: /*#__PURE__*/_jsxDEV(Overflow, {\n      children: /*#__PURE__*/_jsxDEV(TableContainer, {\n        style: {\n          maxHeight: 440\n        },\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          className: classes.dataTable,\n          size: \"small\",\n          children: [/*#__PURE__*/_jsxDEV(TableHead, {\n            nestedClasses: {\n              tableHead: classes.tableHead\n            },\n            columns: fields === null || fields === void 0 ? void 0 : fields.arrayItemDef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            className: classes.tableBody,\n            children: utils.generic.isValidArray(tableRows, true) ? tableRows === null || tableRows === void 0 ? void 0 : tableRows.map(function (row) {\n              var _classnames;\n\n              return /*#__PURE__*/_jsxDEV(Fragment, {\n                children: /*#__PURE__*/_jsxDEV(TableRow, {\n                  className: classnames((_classnames = {}, _defineProperty(_classnames, classes.tableRowNonClickable, !isTableEditable), _defineProperty(_classnames, classes.tableRow, isTableEditable), _defineProperty(_classnames, classes.selectedRow, row.isRowSelected), _classnames)),\n                  children: fields.arrayItemDef.map(function (column, defIndex) {\n                    var _row$column$id;\n\n                    var ppwOrPpcDateValue = column.type === 'datepicker' ? row.ppwOrPpcDate ? moment(row.ppwOrPpcDate).format(column.format) : '-' : '';\n                    return column.visible && (row.isRowSelected ? /*#__PURE__*/_createElement(TableCell, _objectSpread(_objectSpread({\n                      onClick: function onClick(e) {\n                        return isTableEditable && (column === null || column === void 0 ? void 0 : column.type) !== 'copyIcon' && handlers.handleTableRowClick(e, row);\n                      }\n                    }, row[column]), {}, {\n                      key: defIndex,\n                      width: row[column === null || column === void 0 ? void 0 : column.width],\n                      __self: _this,\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 113,\n                        columnNumber: 31\n                      }\n                    }), column.type === 'numericText' && /*#__PURE__*/_jsxDEV(NumberFormat, {\n                      value: row[column === null || column === void 0 ? void 0 : column.id],\n                      customInput: TextField,\n                      variant: 'outlined',\n                      fullWidth: true,\n                      isNumericString: true,\n                      thousandSeparator: false,\n                      onValueChange: function onValueChange(v) {\n                        handlers.handleTableTextboxChange(v, column, row);\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 120,\n                      columnNumber: 35\n                    }, _this), column.type === 'text' && /*#__PURE__*/_jsxDEV(TextField, {\n                      width: row[column === null || column === void 0 ? void 0 : column.width],\n                      name: \"fieldText\",\n                      type: \"numeric\",\n                      fullWidth: true,\n                      error: row[column === null || column === void 0 ? void 0 : column.error],\n                      disabled: column === null || column === void 0 ? void 0 : column.disabled,\n                      size: \"small\",\n                      inputProps: {\n                        inputMode: 'numeric',\n                        pattern: '[0-9]*'\n                      },\n                      value: row[column === null || column === void 0 ? void 0 : column.id],\n                      variant: \"outlined\",\n                      onChange: function onChange(e) {\n                        return handlers.handleTableTextboxChange(e, column, row);\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 133,\n                      columnNumber: 35\n                    }, _this), column.type === 'datepicker' && /*#__PURE__*/_jsxDEV(KeyboardDatePicker, {\n                      value: row[column === null || column === void 0 ? void 0 : column.id],\n                      inputVariant: \"outlined\",\n                      name: column === null || column === void 0 ? void 0 : column.id,\n                      format: column.format,\n                      renderInput: function renderInput(params) {\n                        return /*#__PURE__*/_jsxDEV(TextField, _objectSpread({}, params), void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 153,\n                          columnNumber: 62\n                        }, _this);\n                      },\n                      placeholder: utils.string.t('app.selectDate'),\n                      onChange: function onChange(newValue) {\n                        if (utils.generic.isFunction(handlers.handleTableDatePickerChange)) {\n                          handlers.handleTableDatePickerChange(column === null || column === void 0 ? void 0 : column.id, newValue === null || newValue === void 0 ? void 0 : newValue.toISOString(), row);\n                        }\n                      },\n                      keyboardIcon: false ? /*#__PURE__*/_jsxDEV(TodayIcon, {\n                        className: classes.dateIcon\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 161,\n                        columnNumber: 47\n                      }, _this) : /*#__PURE__*/_jsxDEV(EventIcon, {\n                        className: classes.dateIcon\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 161,\n                        columnNumber: 92\n                      }, _this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 148,\n                      columnNumber: 35\n                    }, _this), (column === null || column === void 0 ? void 0 : column.type) === 'select' && /*#__PURE__*/_jsxDEV(Select, {\n                      fullWidth: true,\n                      variant: \"outlined\",\n                      onChange: function onChange(e, data) {\n                        handlers.handleSelectChange(e, {\n                          name: data === null || data === void 0 ? void 0 : data.props.name,\n                          value: data === null || data === void 0 ? void 0 : data.props.value\n                        }, column, row);\n                      },\n                      value: row[column === null || column === void 0 ? void 0 : column.id],\n                      children: utils.generic.isValidArray(column === null || column === void 0 ? void 0 : column.options, true) && column.options.map(function (option) {\n                        return /*#__PURE__*/_jsxDEV(MenuItem, {\n                          disabled: option.disabled,\n                          name: option[column === null || column === void 0 ? void 0 : column.optionLabel],\n                          value: option[column === null || column === void 0 ? void 0 : column.optionKey],\n                          children: option[column === null || column === void 0 ? void 0 : column.optionLabel]\n                        }, \"\".concat(option[column === null || column === void 0 ? void 0 : column.optionLabel], \"-\").concat(option[column === null || column === void 0 ? void 0 : column.optionKey]), false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 185,\n                          columnNumber: 43\n                        }, _this);\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 166,\n                      columnNumber: 35\n                    }, _this), (column === null || column === void 0 ? void 0 : column.type) === 'checkbox' && /*#__PURE__*/_jsxDEV(Checkbox, {\n                      checked: row[column === null || column === void 0 ? void 0 : column.id],\n                      size: \"small\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 197,\n                      columnNumber: 65\n                    }, _this), (column === null || column === void 0 ? void 0 : column.type) === 'label' && /*#__PURE__*/_jsxDEV(Box, {\n                      children: row[column === null || column === void 0 ? void 0 : column.id]\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 198,\n                      columnNumber: 62\n                    }, _this), (column === null || column === void 0 ? void 0 : column.type) === 'retainedBrokeragelabel' && /*#__PURE__*/_jsxDEV(Box, {\n                      pl: 1,\n                      className: classes.brokerageLabel,\n                      children: retainBrokerAmountDetails(row)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 200,\n                      columnNumber: 35\n                    }, _this), (column === null || column === void 0 ? void 0 : column.type) === 'copyIcon' && row.id > 0 && /*#__PURE__*/_jsxDEV(Box, {\n                      pl: 1,\n                      children: copyIcon(row.id)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 204,\n                      columnNumber: 79\n                    }, _this)) : /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({\n                      title: isTableEditable && (column === null || column === void 0 ? void 0 : column.type) !== 'copyIcon' && utils.string.t('app.editRowTooltip'),\n                      onClick: function onClick(e) {\n                        return isTableEditable && (column === null || column === void 0 ? void 0 : column.type) !== 'copyIcon' && handlers.handleTableRowClick(e, row);\n                      }\n                    }, row[column]), {}, {\n                      width: row[column === null || column === void 0 ? void 0 : column.width],\n                      children: /*#__PURE__*/_jsxDEV(Box, {\n                        pl: 1,\n                        children: [(column === null || column === void 0 ? void 0 : column.type) === 'checkbox' && /*#__PURE__*/_jsxDEV(Checkbox, {\n                          checked: row[column === null || column === void 0 ? void 0 : column.id],\n                          size: \"small\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 215,\n                          columnNumber: 67\n                        }, _this), (column === null || column === void 0 ? void 0 : column.type) !== 'checkbox' && (column === null || column === void 0 ? void 0 : column.type) !== 'copyIcon' && (column === null || column === void 0 ? void 0 : column.type) !== 'datepicker' && (column === null || column === void 0 ? void 0 : column.type) !== 'select' && (column === null || column === void 0 ? void 0 : column.type) !== 'retainedBrokeragelabel' && /*#__PURE__*/_jsxDEV(Typography, {\n                          className: classes.tableCellLabel,\n                          children: row[column === null || column === void 0 ? void 0 : column.id] || '-'\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 221,\n                          columnNumber: 39\n                        }, _this), (column === null || column === void 0 ? void 0 : column.type) === 'retainedBrokeragelabel' && /*#__PURE__*/_jsxDEV(Box, {\n                          className: classes.brokerageLabel,\n                          children: retainBrokerAmountDetails(row)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 224,\n                          columnNumber: 37\n                        }, _this), (column === null || column === void 0 ? void 0 : column.type) === 'select' && /*#__PURE__*/_jsxDEV(Typography, {\n                          className: classes.tableCellLabel,\n                          children: ((_row$column$id = row[column === null || column === void 0 ? void 0 : column.id]) === null || _row$column$id === void 0 ? void 0 : _row$column$id.value) || row[column === null || column === void 0 ? void 0 : column.displayName] || '-'\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 227,\n                          columnNumber: 37\n                        }, _this), (column === null || column === void 0 ? void 0 : column.type) === 'datepicker' && /*#__PURE__*/_jsxDEV(_Fragment, {\n                          children: column.id === 'ppwOrPpcDate' ? /*#__PURE__*/_jsxDEV(Typography, {\n                            className: classes.tableCellLabel,\n                            children: ppwOrPpcDateValue || '-'\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 234,\n                            columnNumber: 41\n                          }, _this) : /*#__PURE__*/_jsxDEV(Typography, {\n                            className: classes.tableCellLabel,\n                            children: row[column === null || column === void 0 ? void 0 : column.id] || '-'\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 236,\n                            columnNumber: 41\n                          }, _this)\n                        }, void 0, false), (column === null || column === void 0 ? void 0 : column.type) === 'copyIcon' && row.id > 0 && copyIcon(row.id)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 214,\n                        columnNumber: 33\n                      }, _this)\n                    }), defIndex, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 207,\n                      columnNumber: 31\n                    }, _this));\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 100,\n                  columnNumber: 23\n                }, _this)\n              }, row.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 21\n              }, _this);\n            }) : /*#__PURE__*/_jsxDEV(TableRow, {\n              hover: true,\n              children: /*#__PURE__*/_jsxDEV(TableCell, {\n                colSpan: (fields === null || fields === void 0 ? void 0 : (_fields$arrayItemDef = fields.arrayItemDef) === null || _fields$arrayItemDef === void 0 ? void 0 : _fields$arrayItemDef.length) || 5,\n                children: /*#__PURE__*/_jsxDEV(Box, {\n                  display: 'flex',\n                  justifyContent: 'center',\n                  children: /*#__PURE__*/_jsxDEV(Typography, {\n                    className: classes.tableCellLabel,\n                    children: utils.string.t('app.editableTableNoData')\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 255,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 254,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 253,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n_c = EditableTableView;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditableTableView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/EditableTable/EditableTable.view.js"],"names":["React","Fragment","classnames","PropTypes","moment","styles","TableHead","TableCell","Button","Overflow","Translate","utils","constants","NumberFormat","makeStyles","Box","Typography","Table","TableBody","MenuItem","TableRow","Select","Checkbox","TextField","TableContainer","FileCopyIcon","KeyboardDatePicker","TodayIcon","EventIcon","EditableTableView","propTypes","fields","shape","arrayItemDef","array","fieldData","tableRows","isTableEditable","bool","handlers","handleTableTextboxChange","func","handleTableRowClick","handleTableDatePickerChange","handleTableCopyRowData","handleTableSelectChange","classes","name","copyIcon","index","title","string","t","retainBrokerAmountDetails","row","value","number","retainedBrokerageAmount","currency","retainedBrokerageDetails","CURRENCY_USD","convertedBrokerage","rate","format","trimMantissa","maxHeight","dataTable","tableHead","tableBody","generic","isValidArray","map","tableRowNonClickable","tableRow","selectedRow","isRowSelected","column","defIndex","ppwOrPpcDateValue","type","ppwOrPpcDate","visible","e","width","id","v","error","disabled","inputMode","pattern","params","newValue","isFunction","toISOString","dateIcon","data","handleSelectChange","props","options","option","optionLabel","optionKey","brokerageLabel","tableCellLabel","displayName","length"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\r\nimport classnames from 'classnames';\r\nimport PropTypes from 'prop-types';\r\nimport moment from 'moment';\r\n\r\n//app\r\nimport styles from './EditableTable.styles';\r\nimport { TableHead, TableCell, Button, Overflow, Translate } from 'components';\r\nimport * as utils from 'utils';\r\nimport * as constants from 'consts';\r\nimport NumberFormat from 'react-number-format';\r\n\r\n//mui\r\nimport {\r\n  makeStyles,\r\n  Box,\r\n  Typography,\r\n  Table,\r\n  TableBody,\r\n  MenuItem,\r\n  TableRow,\r\n  Select,\r\n  Checkbox,\r\n  TextField,\r\n  TableContainer,\r\n} from '@material-ui/core';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport { KeyboardDatePicker } from '@material-ui/pickers';\r\nimport TodayIcon from '@material-ui/icons/Today';\r\nimport EventIcon from '@material-ui/icons/Event';\r\n\r\nEditableTableView.propTypes = {\r\n  fields: PropTypes.shape({\r\n    arrayItemDef: PropTypes.array,\r\n    fieldData: PropTypes.array,\r\n  }),\r\n  tableRows: PropTypes.array,\r\n  isTableEditable: PropTypes.bool,\r\n  handlers: PropTypes.shape({\r\n    handleTableTextboxChange: PropTypes.func,\r\n    handleTableRowClick: PropTypes.func,\r\n    handleTableDatePickerChange: PropTypes.func,\r\n    handleTableCopyRowData: PropTypes.func,\r\n    handleTableSelectChange: PropTypes.func,\r\n  }),\r\n};\r\n\r\nexport function EditableTableView({ fields, tableRows, isTableEditable, handlers }) {\r\n  const classes = makeStyles(styles, { name: 'EditableTable' })();\r\n  const copyIcon = (index) => {\r\n    return (\r\n      <Button\r\n        icon={FileCopyIcon}\r\n        onClick={() => isTableEditable && handlers.handleTableCopyRowData(index)}\r\n        size=\"medium\"\r\n        variant=\"text\"\r\n        color=\"default\"\r\n        tooltip={{ title: utils.string.t('app.copyButtonToolTip') }}\r\n      />\r\n    );\r\n  };\r\n  const retainBrokerAmountDetails = (row) => {\r\n    return (\r\n      <>\r\n        <Translate\r\n          label=\"format.currency\"\r\n          options={{\r\n            value: {\r\n              number: row?.retainedBrokerageAmount,\r\n              currency: row.retainedBrokerageDetails?.value || constants.CURRENCY_USD,\r\n            },\r\n          }}\r\n        />\r\n        {row?.convertedBrokerage && (\r\n          <>\r\n            <br />\r\n            <Translate label=\"format.currency\" options={{ value: { number: row?.convertedBrokerage.value, currency: 'GBP' } }} /> @\r\n            <Translate\r\n              label=\"format.number\"\r\n              options={{\r\n                value: { number: row?.convertedBrokerage.rate, format: { trimMantissa: false } },\r\n              }}\r\n            />\r\n          </>\r\n        )}\r\n      </>\r\n    );\r\n  };\r\n  return (\r\n    <Box display=\"inline-block\" width=\"100%\">\r\n      <Overflow>\r\n        <TableContainer style={{ maxHeight: 440 }}>\r\n          <Table className={classes.dataTable} size=\"small\">\r\n            <TableHead nestedClasses={{ tableHead: classes.tableHead }} columns={fields?.arrayItemDef} />\r\n            <TableBody className={classes.tableBody}>\r\n              {utils.generic.isValidArray(tableRows, true) ? (\r\n                tableRows?.map((row) => {\r\n                  return (\r\n                    <Fragment key={row.id}>\r\n                      <TableRow\r\n                        className={classnames({\r\n                          [classes.tableRowNonClickable]: !isTableEditable,\r\n                          [classes.tableRow]: isTableEditable,\r\n                          [classes.selectedRow]: row.isRowSelected,\r\n                        })}\r\n                      >\r\n                        {fields.arrayItemDef.map((column, defIndex) => {\r\n                          const ppwOrPpcDateValue =\r\n                            column.type === 'datepicker' ? (row.ppwOrPpcDate ? moment(row.ppwOrPpcDate).format(column.format) : '-') : '';\r\n                          return (\r\n                            column.visible &&\r\n                            (row.isRowSelected ? (\r\n                              <TableCell\r\n                                onClick={(e) => isTableEditable && column?.type !== 'copyIcon' && handlers.handleTableRowClick(e, row)}\r\n                                {...row[column]}\r\n                                key={defIndex}\r\n                                width={row[column?.width]}\r\n                              >\r\n                                {column.type === 'numericText' && (\r\n                                  <NumberFormat\r\n                                    value={row[column?.id]}\r\n                                    customInput={TextField}\r\n                                    variant={'outlined'}\r\n                                    fullWidth={true}\r\n                                    isNumericString\r\n                                    thousandSeparator={false}\r\n                                    onValueChange={(v) => {\r\n                                      handlers.handleTableTextboxChange(v, column, row);\r\n                                    }}\r\n                                  />\r\n                                )}\r\n                                {column.type === 'text' && (\r\n                                  <TextField\r\n                                    width={row[column?.width]}\r\n                                    name=\"fieldText\"\r\n                                    type=\"numeric\"\r\n                                    fullWidth\r\n                                    error={row[column?.error]}\r\n                                    disabled={column?.disabled}\r\n                                    size=\"small\"\r\n                                    inputProps={{ inputMode: 'numeric', pattern: '[0-9]*' }}\r\n                                    value={row[column?.id]}\r\n                                    variant=\"outlined\"\r\n                                    onChange={(e) => handlers.handleTableTextboxChange(e, column, row)}\r\n                                  />\r\n                                )}\r\n                                {column.type === 'datepicker' && (\r\n                                  <KeyboardDatePicker\r\n                                    value={row[column?.id]}\r\n                                    inputVariant=\"outlined\"\r\n                                    name={column?.id}\r\n                                    format={column.format}\r\n                                    renderInput={(params) => <TextField {...params} />}\r\n                                    placeholder={utils.string.t('app.selectDate')}\r\n                                    onChange={(newValue) => {\r\n                                      if (utils.generic.isFunction(handlers.handleTableDatePickerChange)) {\r\n                                        handlers.handleTableDatePickerChange(column?.id, newValue?.toISOString(), row);\r\n                                      }\r\n                                    }}\r\n                                    keyboardIcon={\r\n                                      false ? <TodayIcon className={classes.dateIcon} /> : <EventIcon className={classes.dateIcon} />\r\n                                    }\r\n                                  />\r\n                                )}\r\n                                {column?.type === 'select' && (\r\n                                  <Select\r\n                                    fullWidth\r\n                                    variant=\"outlined\"\r\n                                    onChange={(e, data) => {\r\n                                      handlers.handleSelectChange(\r\n                                        e,\r\n                                        {\r\n                                          name: data?.props.name,\r\n                                          value: data?.props.value,\r\n                                        },\r\n                                        column,\r\n                                        row\r\n                                      );\r\n                                    }}\r\n                                    value={row[column?.id]}\r\n                                  >\r\n                                    {utils.generic.isValidArray(column?.options, true) &&\r\n                                      column.options.map((option) => {\r\n                                        return (\r\n                                          <MenuItem\r\n                                            key={`${option[column?.optionLabel]}-${option[column?.optionKey]}`}\r\n                                            disabled={option.disabled}\r\n                                            name={option[column?.optionLabel]}\r\n                                            value={option[column?.optionKey]}\r\n                                          >\r\n                                            {option[column?.optionLabel]}\r\n                                          </MenuItem>\r\n                                        );\r\n                                      })}\r\n                                  </Select>\r\n                                )}\r\n                                {column?.type === 'checkbox' && <Checkbox checked={row[column?.id]} size=\"small\" />}\r\n                                {column?.type === 'label' && <Box>{row[column?.id]}</Box>}\r\n                                {column?.type === 'retainedBrokeragelabel' && (\r\n                                  <Box pl={1} className={classes.brokerageLabel}>\r\n                                    {retainBrokerAmountDetails(row)}\r\n                                  </Box>\r\n                                )}\r\n                                {column?.type === 'copyIcon' && row.id > 0 && <Box pl={1}>{copyIcon(row.id)}</Box>}\r\n                              </TableCell>\r\n                            ) : (\r\n                              <TableCell\r\n                                title={isTableEditable && column?.type !== 'copyIcon' && utils.string.t('app.editRowTooltip')}\r\n                                onClick={(e) => isTableEditable && column?.type !== 'copyIcon' && handlers.handleTableRowClick(e, row)}\r\n                                key={defIndex}\r\n                                {...row[column]}\r\n                                width={row[column?.width]}\r\n                              >\r\n                                <Box pl={1}>\r\n                                  {column?.type === 'checkbox' && <Checkbox checked={row[column?.id]} size=\"small\" />}\r\n                                  {column?.type !== 'checkbox' &&\r\n                                    column?.type !== 'copyIcon' &&\r\n                                    column?.type !== 'datepicker' &&\r\n                                    column?.type !== 'select' &&\r\n                                    column?.type !== 'retainedBrokeragelabel' && (\r\n                                      <Typography className={classes.tableCellLabel}>{row[column?.id] || '-'}</Typography>\r\n                                    )}\r\n                                  {column?.type === 'retainedBrokeragelabel' && (\r\n                                    <Box className={classes.brokerageLabel}>{retainBrokerAmountDetails(row)}</Box>\r\n                                  )}\r\n                                  {column?.type === 'select' && (\r\n                                    <Typography className={classes.tableCellLabel}>\r\n                                      {row[column?.id]?.value || row[column?.displayName] || '-'}\r\n                                    </Typography>\r\n                                  )}\r\n                                  {column?.type === 'datepicker' && (\r\n                                    <>\r\n                                      {column.id === 'ppwOrPpcDate' ? (\r\n                                        <Typography className={classes.tableCellLabel}>{ppwOrPpcDateValue || '-'}</Typography>\r\n                                      ) : (\r\n                                        <Typography className={classes.tableCellLabel}>{row[column?.id] || '-'}</Typography>\r\n                                      )}\r\n                                    </>\r\n                                  )}\r\n\r\n                                  {column?.type === 'copyIcon' && row.id > 0 && copyIcon(row.id)}\r\n                                </Box>\r\n                              </TableCell>\r\n                            ))\r\n                          );\r\n                        })}\r\n                      </TableRow>\r\n                    </Fragment>\r\n                  );\r\n                })\r\n              ) : (\r\n                <TableRow hover>\r\n                  <TableCell colSpan={fields?.arrayItemDef?.length || 5}>\r\n                    <Box display={'flex'} justifyContent={'center'}>\r\n                      <Typography className={classes.tableCellLabel}>{utils.string.t('app.editableTableNoData')}</Typography>\r\n                    </Box>\r\n                  </TableCell>\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Overflow>\r\n    </Box>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}