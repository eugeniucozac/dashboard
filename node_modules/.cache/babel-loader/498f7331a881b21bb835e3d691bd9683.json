{"ast":null,"code":"import \"core-js/modules/es.array.concat\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { authLogout, enqueueNotification } from 'stores';\nimport * as utils from 'utils';\nexport var updateIssue = function updateIssue(issueId, status, quoteId) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/risk.actions.issues',\n      message: 'Data missing for PUT request'\n    };\n    dispatch(updateIssueRequest(status));\n\n    if (!status || !issueId || !quoteId) {\n      dispatch(updateIssueFailure(defaultError));\n      dispatch(enqueueNotification('notification.generic.request', 'error'));\n      return;\n    }\n\n    var path = \"api/v1/issues/\".concat(issueId, \"/\").concat(status);\n    return utils.api.put({\n      token: auth.accessToken,\n      endpoint: endpoint.auth,\n      path: path\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleResponseJsonObject(json);\n    }).then(function (data) {\n      dispatch(enqueueNotification('notification.updateIssue.success', 'success'));\n      dispatch(updateIssueSuccess(data, quoteId));\n      return data;\n    })[\"catch\"](function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API post error (risk.updateIssue)'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(updateIssueFailure(err));\n      dispatch(enqueueNotification(utils.api.getErrorMessage(err), 'error'));\n      return err;\n    });\n  };\n};\nexport var updateIssueRequest = function updateIssueRequest(formData) {\n  return {\n    type: 'UPDATE_ISSUE_REQUEST',\n    payload: formData\n  };\n};\nexport var updateIssueSuccess = function updateIssueSuccess(responseData, quoteId) {\n  return {\n    type: 'UPDATE_ISSUE_SUCCESS',\n    payload: responseData,\n    quoteId: quoteId\n  };\n};\nexport var updateIssueFailure = function updateIssueFailure(error) {\n  return {\n    type: 'UPDATE_ISSUE_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/risk/risk.actions.issues.js"],"names":["authLogout","enqueueNotification","utils","updateIssue","issueId","status","quoteId","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","message","updateIssueRequest","updateIssueFailure","path","api","put","token","accessToken","then","response","handleResponse","json","handleResponseJsonObject","data","updateIssueSuccess","err","errorParams","handleError","handleUnauthorized","getErrorMessage","formData","type","payload","responseData","error"],"mappings":"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","sourcesContent":["import { authLogout, enqueueNotification } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const updateIssue = (issueId, status, quoteId) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } } } = getState();\r\n  const defaultError = {\r\n    file: 'stores/risk.actions.issues',\r\n    message: 'Data missing for PUT request',\r\n  };\r\n\r\n  dispatch(updateIssueRequest(status));\r\n\r\n  if (!status || !issueId || !quoteId) {\r\n    dispatch(updateIssueFailure(defaultError));\r\n    dispatch(enqueueNotification('notification.generic.request', 'error'));\r\n    return;\r\n  }\r\n\r\n  const path = `api/v1/issues/${issueId}/${status}`;\r\n\r\n  return utils.api\r\n    .put({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.auth,\r\n      path,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleResponseJsonObject(json))\r\n    .then((data) => {\r\n      dispatch(enqueueNotification('notification.updateIssue.success', 'success'));\r\n      dispatch(updateIssueSuccess(data, quoteId));\r\n      return data;\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        ...defaultError,\r\n        message: 'API post error (risk.updateIssue)',\r\n      };\r\n\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(updateIssueFailure(err));\r\n      dispatch(enqueueNotification(utils.api.getErrorMessage(err), 'error'));\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const updateIssueRequest = (formData) => {\r\n  return {\r\n    type: 'UPDATE_ISSUE_REQUEST',\r\n    payload: formData,\r\n  };\r\n};\r\n\r\nexport const updateIssueSuccess = (responseData, quoteId) => {\r\n  return {\r\n    type: 'UPDATE_ISSUE_SUCCESS',\r\n    payload: responseData,\r\n    quoteId,\r\n  };\r\n};\r\n\r\nexport const updateIssueFailure = (error) => {\r\n  return {\r\n    type: 'UPDATE_ISSUE_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}