{"ast":null,"code":"import \"core-js/modules/es.array.sort\";\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\TasksProcessingTable\\\\TasksProcessingTable.view.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get'; // app\n\nimport styles from './TasksProcessingTable.styles';\nimport { Empty, Overflow, TableHead, Pagination } from 'components';\nimport { TasksProcessingTableRow } from 'modules';\nimport { ReactComponent as IconSearchFile } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/svg/line-icon-search-file.svg\";\nimport * as utils from 'utils'; // mui\n\nimport { makeStyles, Table, TableBody, Box } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nTasksProcessingTableView.propTypes = {\n  isTaskTeam: PropTypes.bool.isRequired,\n  hasTasks: PropTypes.bool.isRequired,\n  taskItems: PropTypes.array.isRequired,\n  cols: PropTypes.array.isRequired,\n  columnProps: PropTypes.func.isRequired,\n  handleUpdateTaskPriority: PropTypes.func.isRequired,\n  sort: PropTypes.object.isRequired,\n  pagination: PropTypes.shape({\n    obj: PropTypes.object.isRequired,\n    handlers: PropTypes.shape({\n      handleChangePage: PropTypes.func.isRequired,\n      handleChangeRowsPerPage: PropTypes.func.isRequired\n    }).isRequired\n  }).isRequired,\n  refreshTasksGrid: PropTypes.func.isRequired,\n  premiumProcessingSaveAssignee: PropTypes.func,\n  isPremiumProcessing: PropTypes.bool,\n  handlers: PropTypes.shape({\n    selectTask: PropTypes.func.isRequired,\n    handleEditAdhoc: PropTypes.func.isRequired,\n    handleCreateRFITaskLevel: PropTypes.func.isRequired,\n    createSanctionsCheck: PropTypes.func.isRequired\n  }).isRequired,\n  tasksSelected: PropTypes.array.isRequired,\n  premiumProcessSelectedTaskList: PropTypes.array\n};\nexport function TasksProcessingTableView(_ref) {\n  var _this = this;\n\n  var handleUpdateTaskPriority = _ref.handleUpdateTaskPriority,\n      isTaskTeam = _ref.isTaskTeam,\n      hasTasks = _ref.hasTasks,\n      taskItems = _ref.taskItems,\n      cols = _ref.cols,\n      columnProps = _ref.columnProps,\n      sort = _ref.sort,\n      pagination = _ref.pagination,\n      handlers = _ref.handlers,\n      refreshTasksGrid = _ref.refreshTasksGrid,\n      premiumProcessingSaveAssignee = _ref.premiumProcessingSaveAssignee,\n      tasksSelected = _ref.tasksSelected,\n      isPremiumProcessing = _ref.isPremiumProcessing,\n      premiumProcessSelectedTaskList = _ref.premiumProcessSelectedTaskList;\n  var classes = makeStyles(styles, {\n    name: 'TasksProcessingTable'\n  })();\n  return /*#__PURE__*/_jsxDEV(Box, {\n    \"data-testid\": \"tasks-processing-search-table\",\n    children: [/*#__PURE__*/_jsxDEV(Overflow, {\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        size: \"small\",\n        \"data-testid\": \"tasks-processing-table\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          columns: cols,\n          sorting: sort,\n          nestedClasses: {\n            tableHead: classes.tableHead\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          \"data-testid\": \"tasks-list-body\",\n          children: hasTasks && taskItems.map(function (task) {\n            return /*#__PURE__*/_jsxDEV(TasksProcessingTableRow, {\n              handleUpdateTaskPriority: handleUpdateTaskPriority,\n              isSelected: isPremiumProcessing ? utils.generic.isValidArray(premiumProcessSelectedTaskList, true) && premiumProcessSelectedTaskList.map(function (c) {\n                return c.processId;\n              }).includes(task.processId) : utils.generic.isValidArray(tasksSelected, true) && tasksSelected.map(function (c) {\n                return c.processId;\n              }).includes(task.processId),\n              isTaskTeam: isTaskTeam,\n              task: task,\n              columnProps: columnProps,\n              isPremiumProcessing: isPremiumProcessing,\n              handlers: {\n                selectTask: handlers.selectTask,\n                refreshTasksGrid: refreshTasksGrid,\n                premiumProcessingSaveAssignee: premiumProcessingSaveAssignee,\n                handleEditAdhoc: handlers.handleEditAdhoc,\n                handleCreateRFITaskLevel: handlers.handleCreateRFITaskLevel,\n                createSanctionsCheck: handlers.createSanctionsCheck\n              }\n            }, task.taskId || task.processId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 17\n            }, _this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), !hasTasks && /*#__PURE__*/_jsxDEV(Empty, {\n      title: utils.string.t('claims.noMatchFound'),\n      icon: /*#__PURE__*/_jsxDEV(IconSearchFile, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 80\n      }, this),\n      padding: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 21\n    }, this), hasTasks && /*#__PURE__*/_jsxDEV(Pagination, {\n      page: get(pagination, 'obj.page'),\n      count: get(pagination, 'obj.rowsTotal'),\n      rowsPerPage: get(pagination, 'obj.rowsPerPage'),\n      onChangePage: get(pagination, 'handlers.handleChangePage'),\n      onChangeRowsPerPage: get(pagination, 'handlers.handleChangeRowsPerPage')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_c = TasksProcessingTableView;\nTasksProcessingTableView.displayName = \"TasksProcessingTableView\";\nTasksProcessingTableView.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"TasksProcessingTableView\",\n  \"props\": {\n    \"isTaskTeam\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"hasTasks\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"taskItems\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"cols\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"columnProps\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"handleUpdateTaskPriority\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"sort\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"pagination\": {\n      \"type\": {\n        \"name\": \"shape\",\n        \"value\": {\n          \"obj\": {\n            \"name\": \"object\",\n            \"required\": true\n          },\n          \"handlers\": {\n            \"name\": \"shape\",\n            \"value\": {\n              \"handleChangePage\": {\n                \"name\": \"func\",\n                \"required\": true\n              },\n              \"handleChangeRowsPerPage\": {\n                \"name\": \"func\",\n                \"required\": true\n              }\n            },\n            \"required\": true\n          }\n        }\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"refreshTasksGrid\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"premiumProcessingSaveAssignee\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"isPremiumProcessing\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"handlers\": {\n      \"type\": {\n        \"name\": \"shape\",\n        \"value\": {\n          \"selectTask\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"handleEditAdhoc\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"handleCreateRFITaskLevel\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"createSanctionsCheck\": {\n            \"name\": \"func\",\n            \"required\": true\n          }\n        }\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"tasksSelected\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"premiumProcessSelectedTaskList\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\modules\\\\TasksProcessingTable\\\\TasksProcessingTable.view.js\"] = {\n    name: \"TasksProcessingTableView\",\n    docgenInfo: TasksProcessingTableView.__docgenInfo,\n    path: \"src\\\\modules\\\\TasksProcessingTable\\\\TasksProcessingTable.view.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"TasksProcessingTableView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/TasksProcessingTable/TasksProcessingTable.view.js"],"names":["React","PropTypes","get","styles","Empty","Overflow","TableHead","Pagination","TasksProcessingTableRow","utils","makeStyles","Table","TableBody","Box","TasksProcessingTableView","propTypes","isTaskTeam","bool","isRequired","hasTasks","taskItems","array","cols","columnProps","func","handleUpdateTaskPriority","sort","object","pagination","shape","obj","handlers","handleChangePage","handleChangeRowsPerPage","refreshTasksGrid","premiumProcessingSaveAssignee","isPremiumProcessing","selectTask","handleEditAdhoc","handleCreateRFITaskLevel","createSanctionsCheck","tasksSelected","premiumProcessSelectedTaskList","classes","name","tableHead","map","task","generic","isValidArray","c","processId","includes","taskId","string","t"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport get from 'lodash/get';\r\n\r\n// app\r\nimport styles from './TasksProcessingTable.styles';\r\nimport { Empty, Overflow, TableHead, Pagination } from 'components';\r\nimport { TasksProcessingTableRow } from 'modules';\r\nimport { ReactComponent as IconSearchFile } from '../../assets/svg/line-icon-search-file.svg';\r\nimport * as utils from 'utils';\r\n\r\n// mui\r\nimport { makeStyles, Table, TableBody, Box } from '@material-ui/core';\r\n\r\nTasksProcessingTableView.propTypes = {\r\n  isTaskTeam: PropTypes.bool.isRequired,\r\n  hasTasks: PropTypes.bool.isRequired,\r\n  taskItems: PropTypes.array.isRequired,\r\n  cols: PropTypes.array.isRequired,\r\n  columnProps: PropTypes.func.isRequired,\r\n  handleUpdateTaskPriority: PropTypes.func.isRequired,\r\n  sort: PropTypes.object.isRequired,\r\n  pagination: PropTypes.shape({\r\n    obj: PropTypes.object.isRequired,\r\n    handlers: PropTypes.shape({\r\n      handleChangePage: PropTypes.func.isRequired,\r\n      handleChangeRowsPerPage: PropTypes.func.isRequired,\r\n    }).isRequired,\r\n  }).isRequired,\r\n  refreshTasksGrid: PropTypes.func.isRequired,\r\n  premiumProcessingSaveAssignee: PropTypes.func,\r\n  isPremiumProcessing: PropTypes.bool,\r\n  handlers: PropTypes.shape({\r\n    selectTask: PropTypes.func.isRequired,\r\n    handleEditAdhoc: PropTypes.func.isRequired,\r\n    handleCreateRFITaskLevel: PropTypes.func.isRequired,\r\n    createSanctionsCheck: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  tasksSelected: PropTypes.array.isRequired,\r\n  premiumProcessSelectedTaskList: PropTypes.array,\r\n};\r\n\r\nexport function TasksProcessingTableView({\r\n  handleUpdateTaskPriority,\r\n  isTaskTeam,\r\n  hasTasks,\r\n  taskItems,\r\n  cols,\r\n  columnProps,\r\n  sort,\r\n  pagination,\r\n  handlers,\r\n  refreshTasksGrid,\r\n  premiumProcessingSaveAssignee,\r\n  tasksSelected,\r\n  isPremiumProcessing,\r\n  premiumProcessSelectedTaskList,\r\n}) {\r\n  const classes = makeStyles(styles, { name: 'TasksProcessingTable' })();\r\n\r\n  return (\r\n    <Box data-testid=\"tasks-processing-search-table\">\r\n      <Overflow>\r\n        <Table size=\"small\" data-testid=\"tasks-processing-table\">\r\n          <TableHead columns={cols} sorting={sort} nestedClasses={{ tableHead: classes.tableHead }} />\r\n          <TableBody data-testid=\"tasks-list-body\">\r\n            {hasTasks &&\r\n              taskItems.map((task) => (\r\n                <TasksProcessingTableRow\r\n                  handleUpdateTaskPriority={handleUpdateTaskPriority}\r\n                  isSelected={\r\n                    isPremiumProcessing\r\n                      ? utils.generic.isValidArray(premiumProcessSelectedTaskList, true) &&\r\n                      premiumProcessSelectedTaskList.map((c) => c.processId).includes(task.processId)\r\n                      : utils.generic.isValidArray(tasksSelected, true) && tasksSelected.map((c) => c.processId).includes(task.processId)\r\n                  }\r\n                  isTaskTeam={isTaskTeam}\r\n                  key={task.taskId || task.processId}\r\n                  task={task}\r\n                  columnProps={columnProps}\r\n                  isPremiumProcessing={isPremiumProcessing}\r\n                  handlers={{\r\n                    selectTask: handlers.selectTask,\r\n                    refreshTasksGrid: refreshTasksGrid,\r\n                    premiumProcessingSaveAssignee: premiumProcessingSaveAssignee,\r\n                    handleEditAdhoc: handlers.handleEditAdhoc,\r\n                    handleCreateRFITaskLevel: handlers.handleCreateRFITaskLevel,\r\n                    createSanctionsCheck: handlers.createSanctionsCheck,\r\n                  }}\r\n                />\r\n              ))}\r\n          </TableBody>\r\n        </Table>\r\n      </Overflow>\r\n      {!hasTasks && <Empty title={utils.string.t('claims.noMatchFound')} icon={<IconSearchFile />} padding />}\r\n      {hasTasks && (\r\n        <Pagination\r\n          page={get(pagination, 'obj.page')}\r\n          count={get(pagination, 'obj.rowsTotal')}\r\n          rowsPerPage={get(pagination, 'obj.rowsPerPage')}\r\n          onChangePage={get(pagination, 'handlers.handleChangePage')}\r\n          onChangeRowsPerPage={get(pagination, 'handlers.handleChangeRowsPerPage')}\r\n        />\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}