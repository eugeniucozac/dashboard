{"ast":null,"code":"import \"core-js/modules/es.promise.finally\";\nimport { addLoader, authLogout, removeLoader } from 'stores';\nimport * as utils from 'utils';\nimport { SOURCE_ID_CLAIMS } from 'consts';\nexport var getQueryCodeList = function getQueryCodeList() {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/claims.actions.getQueryCodeList'\n    };\n    var businessProcessCode = SOURCE_ID_CLAIMS;\n    dispatch(getQueryCodeListRequest({\n      businessProcessCode: businessProcessCode\n    }));\n    dispatch(addLoader('getQueryCodeList'));\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.odsService,\n      path: \"referenceData/business/\".concat(businessProcessCode)\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(getQueryCodeListSuccess(data.data));\n      return data;\n    })[\"catch\"](function (err) {\n      utils.api.handleError(err, defaultError);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(getQueryCodeListFailure(err));\n      return err;\n    })[\"finally\"](function () {\n      dispatch(removeLoader('getQueryCodeList'));\n    });\n  };\n};\nexport var getQueryCodeListRequest = function getQueryCodeListRequest(params) {\n  return {\n    type: 'CLAIMS_QUERY_CODE_LIST_GET_REQUEST',\n    payload: params\n  };\n};\nexport var getQueryCodeListSuccess = function getQueryCodeListSuccess(data) {\n  return {\n    type: 'CLAIMS_QUERY_CODE_LIST_GET_SUCCESS',\n    payload: data\n  };\n};\nexport var getQueryCodeListFailure = function getQueryCodeListFailure(error) {\n  return {\n    type: 'CLAIMS_QUERY_CODE_LIST_GET_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.getQueryCodeList.js"],"names":["addLoader","authLogout","removeLoader","utils","SOURCE_ID_CLAIMS","getQueryCodeList","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","businessProcessCode","getQueryCodeListRequest","api","get","token","accessToken","odsService","path","then","response","handleResponse","json","handleNewData","data","getQueryCodeListSuccess","err","handleError","handleUnauthorized","getQueryCodeListFailure","params","type","payload","error"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,UAApB,EAAgCC,YAAhC,QAAoD,QAApD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,gBAAT,QAAiC,QAAjC;AAEA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,SAAM,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC5D;AAD4D,oBAGDA,QAAQ,EAHP;AAAA,QAG5CC,IAH4C,aAGpDC,IAHoD,CAG5CD,IAH4C;AAAA,QAGlBE,QAHkB,aAGpCC,MAHoC,CAG1BC,IAH0B,CAGlBF,QAHkB;;AAK5D,QAAMG,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE;AADa,KAArB;AAIA,QAAMC,mBAAmB,GAAGX,gBAA5B;AAEAE,IAAAA,QAAQ,CAACU,uBAAuB,CAAC;AAAED,MAAAA,mBAAmB,EAAnBA;AAAF,KAAD,CAAxB,CAAR;AACAT,IAAAA,QAAQ,CAACN,SAAS,CAAC,kBAAD,CAAV,CAAR;AAEA,WAAOG,KAAK,CAACc,GAAN,CACJC,GADI,CACA;AACHC,MAAAA,KAAK,EAAEX,IAAI,CAACY,WADT;AAEHV,MAAAA,QAAQ,EAAEA,QAAQ,CAACW,UAFhB;AAGHC,MAAAA,IAAI,mCAA4BP,mBAA5B;AAHD,KADA,EAMJQ,IANI,CAMC,UAACC,QAAD;AAAA,aAAcrB,KAAK,CAACc,GAAN,CAAUQ,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAND,EAOJD,IAPI,CAOC,UAACG,IAAD;AAAA,aAAUvB,KAAK,CAACc,GAAN,CAAUU,aAAV,CAAwBD,IAAxB,CAAV;AAAA,KAPD,EAQJH,IARI,CAQC,UAACK,IAAD,EAAU;AACdtB,MAAAA,QAAQ,CAACuB,uBAAuB,CAACD,IAAI,CAACA,IAAN,CAAxB,CAAR;AACA,aAAOA,IAAP;AACD,KAXI,WAYE,UAACE,GAAD,EAAS;AACd3B,MAAAA,KAAK,CAACc,GAAN,CAAUc,WAAV,CAAsBD,GAAtB,EAA2BjB,YAA3B;AACAV,MAAAA,KAAK,CAACc,GAAN,CAAUe,kBAAV,CAA6BF,GAA7B,EAAkCxB,QAAlC,EAA4CL,UAA5C;AACAK,MAAAA,QAAQ,CAAC2B,uBAAuB,CAACH,GAAD,CAAxB,CAAR;AACA,aAAOA,GAAP;AACD,KAjBI,aAkBI,YAAM;AACbxB,MAAAA,QAAQ,CAACJ,YAAY,CAAC,kBAAD,CAAb,CAAR;AACD,KApBI,CAAP;AAqBD,GAnC+B;AAAA,CAAzB;AAqCP,OAAO,IAAMc,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACkB,MAAD,EAAY;AACjD,SAAO;AACLC,IAAAA,IAAI,EAAE,oCADD;AAELC,IAAAA,OAAO,EAAEF;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAML,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACD,IAAD,EAAU;AAC/C,SAAO;AACLO,IAAAA,IAAI,EAAE,oCADD;AAELC,IAAAA,OAAO,EAAER;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMK,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACI,KAAD,EAAW;AAChD,SAAO;AACLF,IAAAA,IAAI,EAAE,oCADD;AAELC,IAAAA,OAAO,EAAEC;AAFJ,GAAP;AAID,CALM","sourcesContent":["import { addLoader, authLogout, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\nimport { SOURCE_ID_CLAIMS } from 'consts';\r\n\r\nexport const getQueryCodeList = () => (dispatch, getState) => {\r\n  // prettier-ignore\r\n\r\n  const { user: { auth }, config: { vars: { endpoint } } } = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.getQueryCodeList',\r\n  };\r\n\r\n  const businessProcessCode = SOURCE_ID_CLAIMS;\r\n\r\n  dispatch(getQueryCodeListRequest({ businessProcessCode }));\r\n  dispatch(addLoader('getQueryCodeList'));\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.odsService,\r\n      path: `referenceData/business/${businessProcessCode}`,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(getQueryCodeListSuccess(data.data));\r\n      return data;\r\n    })\r\n    .catch((err) => {\r\n      utils.api.handleError(err, defaultError);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(getQueryCodeListFailure(err));\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('getQueryCodeList'));\r\n    });\r\n};\r\n\r\nexport const getQueryCodeListRequest = (params) => {\r\n  return {\r\n    type: 'CLAIMS_QUERY_CODE_LIST_GET_REQUEST',\r\n    payload: params,\r\n  };\r\n};\r\n\r\nexport const getQueryCodeListSuccess = (data) => {\r\n  return {\r\n    type: 'CLAIMS_QUERY_CODE_LIST_GET_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const getQueryCodeListFailure = (error) => {\r\n  return {\r\n    type: 'CLAIMS_QUERY_CODE_LIST_GET_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}