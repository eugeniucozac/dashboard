{"ast":null,"code":"import _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\forms\\\\ModellingTask\\\\ModellingTask.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as Yup from 'yup';\nimport isEmpty from 'lodash/isEmpty'; // app\n\nimport { ModellingTaskView } from './ModellingTask.view';\nimport { createModellingTask, updateModellingTask, getReferenceDataByType, resetCreateModellingFlag, selectModellingCreateFlag, selectModellingTask } from 'stores';\nimport * as utils from 'utils';\nimport * as constants from 'consts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ModellingTask(_ref) {\n  _s();\n\n  var _modellingTask$insure;\n\n  var handleClose = _ref.handleClose,\n      _ref$insureds = _ref.insureds,\n      insureds = _ref$insureds === void 0 ? [] : _ref$insureds,\n      _ref$modellingTask = _ref.modellingTask,\n      modellingTask = _ref$modellingTask === void 0 ? {} : _ref$modellingTask,\n      _ref$displayAutocompl = _ref.displayAutocomplete,\n      displayAutocomplete = _ref$displayAutocompl === void 0 ? false : _ref$displayAutocompl;\n  var isNew = isEmpty(modellingTask);\n\n  var _useState = useState((modellingTask === null || modellingTask === void 0 ? void 0 : modellingTask.type) || ''),\n      _useState2 = _slicedToArray(_useState, 2),\n      modellingTypeValue = _useState2[0],\n      setModellingTypeValue = _useState2[1];\n\n  var createdModellingTask = useSelector(selectModellingTask);\n  var createdModellingTaskFlag = useSelector(selectModellingCreateFlag);\n  var dispatch = useDispatch();\n  var selectedTypes = !isNew && (modellingTask === null || modellingTask === void 0 ? void 0 : modellingTask.modellingAttachmentTypes);\n  useEffect(function () {\n    return function () {\n      return dispatch(resetCreateModellingFlag());\n    };\n  }, [createdModellingTaskFlag] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  var validateFileType = function validateFileType(modellingTypeValue, fileTypeValue) {\n    if (!isEmpty(modellingTypeValue)) {\n      if (!isNew && selectedTypes && selectedTypes.length !== 2) {\n        if (fileTypeValue && utils.placement.checkAllTruthyValues(fileTypeValue)) {\n          return false;\n        }\n\n        return true;\n      }\n\n      if (!isNew && fileTypeValue && !utils.placement.checkAllTruthyValues(fileTypeValue)) {\n        return true;\n      }\n\n      if (isNew && (!fileTypeValue || !utils.placement.checkAllTruthyValues(fileTypeValue))) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  var handleCancel = function handleCancel() {\n    if (utils.generic.isFunction(handleClose)) {\n      handleClose();\n    }\n  };\n\n  var handleRadioChange = function handleRadioChange(event) {\n    setModellingTypeValue(event.target.value);\n  };\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(changes) {\n      var modellingTypes, key, task;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              modellingTypes = [];\n\n              for (key in changes === null || changes === void 0 ? void 0 : changes.fileType) {\n                if ((changes === null || changes === void 0 ? void 0 : changes.fileType[key]) === true) {\n                  modellingTypes.push({\n                    modellingAttachmentTypeKey: key\n                  });\n                }\n              }\n\n              task = _objectSpread(_objectSpread(_objectSpread({}, modellingTask), changes), {}, {\n                modellingAttachmentTypes: modellingTypes\n              });\n\n              if (!task.id) {\n                _context.next = 7;\n                break;\n              }\n\n              return _context.abrupt(\"return\", dispatch(updateModellingTask(task)));\n\n            case 7:\n              return _context.abrupt(\"return\", dispatch(createModellingTask(task)));\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var autoComplete = {\n    value: modellingTask && modellingTask.insured ? [modellingTask.insured] : [],\n    type: 'autocomplete',\n    options: [],\n    innerComponentProps: {\n      allowEmpty: true,\n      isClearable: true,\n      maxMenuHeight: 200,\n      isCreatable: true,\n      async: {\n        handler: function handler(type, term) {\n          return dispatch(getReferenceDataByType(type, term));\n        },\n        type: 'insured'\n      }\n    },\n    validation: Yup.array().required(utils.string.t('form.insured.required'))\n  };\n  var fields = [].concat(_toConsumableArray(isNew ? [{\n    gridSize: {\n      xs: 6\n    },\n    type: 'hidden',\n    name: 'status',\n    value: 'PENDING'\n  }] : [{\n    gridSize: {\n      xs: 6\n    },\n    type: 'select',\n    name: 'status',\n    value: modellingTask.status || '',\n    options: [{\n      id: 'PENDING',\n      label: utils.string.t('status.pending')\n    }, {\n      id: 'IN PROGRESS',\n      label: utils.string.t('status.inprogress')\n    }, {\n      id: 'DONE',\n      label: utils.string.t('status.done')\n    }],\n    label: utils.string.t('app.status'),\n    optionKey: 'id',\n    optionLabel: 'label',\n    muiComponentProps: {\n      fullWidth: true\n    },\n    validation: Yup.string().required(utils.string.t('form.status.required'))\n  }]), [_objectSpread({\n    type: 'autocomplete',\n    name: 'insured',\n    value: insureds.length > 0 && [modellingTask === null || modellingTask === void 0 ? void 0 : modellingTask.insured] || (modellingTask === null || modellingTask === void 0 ? void 0 : (_modellingTask$insure = modellingTask.insured) === null || _modellingTask$insure === void 0 ? void 0 : _modellingTask$insure.id) || '',\n    options: insureds,\n    label: utils.string.t('placement.modelling.insured'),\n    optionKey: 'id',\n    optionLabel: 'name',\n    muiComponentProps: {\n      fullWidth: true\n    },\n    validation: Yup.string().required(utils.string.t('form.insured.required'))\n  }, displayAutocomplete && autoComplete), {\n    name: 'modellingType',\n    type: 'radio',\n    title: utils.string.t('placement.modelling.modellingType.title'),\n    value: modellingTask.type || '',\n    validation: Yup.string().nullable().required(utils.string.t('validation.required')),\n    options: [{\n      label: utils.string.t('placement.modelling.modellingType.typeQuoting'),\n      value: constants.MODELLING_QUOTING\n    }, {\n      label: utils.string.t('placement.modelling.modellingType.typeBound'),\n      value: constants.MODELLING_BOUND\n    }],\n    muiComponentProps: {\n      size: 'small',\n      onChange: handleRadioChange\n    }\n  }, {\n    type: 'datepicker',\n    name: 'dueDate',\n    label: utils.string.t('placement.modelling.dueDate'),\n    value: modellingTask.dueDate || null,\n    muiComponentProps: {\n      fullWidth: true\n    },\n    validation: Yup.string().nullable().required(utils.string.t('form.date.required'))\n  }, {\n    name: 'fileType',\n    type: 'checkbox',\n    value: modellingTask.fileType || false,\n    options: utils.placement.renderFileTypeOptions(modellingTypeValue, isNew, isNew ? [] : modellingTask === null || modellingTask === void 0 ? void 0 : modellingTask.modellingAttachmentTypes)\n  }, {\n    type: 'textarea',\n    name: 'notes',\n    label: utils.string.t('placement.modelling.notes'),\n    value: modellingTask.notes || '',\n    muiComponentProps: {\n      multiline: true,\n      minRows: 3,\n      maxRows: 6\n    }\n  }]);\n  var actions = [{\n    name: 'submit',\n    label: modellingTask.id ? utils.string.t('app.save') : utils.string.t('app.create'),\n    handler: handleSubmit\n  }, {\n    name: 'cancel',\n    label: utils.string.t('app.cancel'),\n    handler: handleCancel\n  }];\n  return /*#__PURE__*/_jsxDEV(ModellingTaskView, {\n    createdModellingTask: createdModellingTask,\n    actions: actions,\n    fields: fields,\n    isNew: isNew,\n    validateFileType: validateFileType\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ModellingTask, \"IrSGjyrHdxx1JTnV1jxjP6PSbTM=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = ModellingTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModellingTask\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/forms/ModellingTask/ModellingTask.js"],"names":["React","useState","useEffect","useDispatch","useSelector","Yup","isEmpty","ModellingTaskView","createModellingTask","updateModellingTask","getReferenceDataByType","resetCreateModellingFlag","selectModellingCreateFlag","selectModellingTask","utils","constants","ModellingTask","handleClose","insureds","modellingTask","displayAutocomplete","isNew","type","modellingTypeValue","setModellingTypeValue","createdModellingTask","createdModellingTaskFlag","dispatch","selectedTypes","modellingAttachmentTypes","validateFileType","fileTypeValue","length","placement","checkAllTruthyValues","handleCancel","generic","isFunction","handleRadioChange","event","target","value","handleSubmit","changes","modellingTypes","key","fileType","push","modellingAttachmentTypeKey","task","id","autoComplete","insured","options","innerComponentProps","allowEmpty","isClearable","maxMenuHeight","isCreatable","async","handler","term","validation","array","required","string","t","fields","gridSize","xs","name","status","label","optionKey","optionLabel","muiComponentProps","fullWidth","title","nullable","MODELLING_QUOTING","MODELLING_BOUND","size","onChange","dueDate","renderFileTypeOptions","notes","multiline","minRows","maxRows","actions"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,OAAP,MAAoB,gBAApB,C,CAEA;;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,SACEC,mBADF,EAEEC,mBAFF,EAGEC,sBAHF,EAIEC,wBAJF,EAKEC,yBALF,EAMEC,mBANF,QAOO,QAPP;AAQA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,SAAZ,MAA2B,QAA3B;;AAEA,eAAe,SAASC,aAAT,OAAwG;AAAA;;AAAA;;AAAA,MAA/EC,WAA+E,QAA/EA,WAA+E;AAAA,2BAAlEC,QAAkE;AAAA,MAAlEA,QAAkE,8BAAvD,EAAuD;AAAA,gCAAnDC,aAAmD;AAAA,MAAnDA,aAAmD,mCAAnC,EAAmC;AAAA,mCAA/BC,mBAA+B;AAAA,MAA/BA,mBAA+B,sCAAT,KAAS;AACrH,MAAMC,KAAK,GAAGf,OAAO,CAACa,aAAD,CAArB;;AADqH,kBAEjElB,QAAQ,CAAC,CAAAkB,aAAa,SAAb,IAAAA,aAAa,WAAb,YAAAA,aAAa,CAAEG,IAAf,KAAuB,EAAxB,CAFyD;AAAA;AAAA,MAE9GC,kBAF8G;AAAA,MAE1FC,qBAF0F;;AAGrH,MAAMC,oBAAoB,GAAGrB,WAAW,CAACS,mBAAD,CAAxC;AACA,MAAMa,wBAAwB,GAAGtB,WAAW,CAACQ,yBAAD,CAA5C;AACA,MAAMe,QAAQ,GAAGxB,WAAW,EAA5B;AACA,MAAMyB,aAAa,GAAG,CAACP,KAAD,KAAUF,aAAV,aAAUA,aAAV,uBAAUA,aAAa,CAAEU,wBAAzB,CAAtB;AAEA3B,EAAAA,SAAS,CACP,YAAM;AACJ,WAAO;AAAA,aAAMyB,QAAQ,CAAChB,wBAAwB,EAAzB,CAAd;AAAA,KAAP;AACD,GAHM,EAIP,CAACe,wBAAD,CAJO,CAIoB;AAJpB,GAAT;;AAOA,MAAMI,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACP,kBAAD,EAAqBQ,aAArB,EAAuC;AAC9D,QAAI,CAACzB,OAAO,CAACiB,kBAAD,CAAZ,EAAkC;AAChC,UAAI,CAACF,KAAD,IAAUO,aAAV,IAA2BA,aAAa,CAACI,MAAd,KAAyB,CAAxD,EAA2D;AACzD,YAAID,aAAa,IAAIjB,KAAK,CAACmB,SAAN,CAAgBC,oBAAhB,CAAqCH,aAArC,CAArB,EAA0E;AACxE,iBAAO,KAAP;AACD;;AACD,eAAO,IAAP;AACD;;AACD,UAAI,CAACV,KAAD,IAAUU,aAAV,IAA2B,CAACjB,KAAK,CAACmB,SAAN,CAAgBC,oBAAhB,CAAqCH,aAArC,CAAhC,EAAqF;AACnF,eAAO,IAAP;AACD;;AACD,UAAIV,KAAK,KAAK,CAACU,aAAD,IAAkB,CAACjB,KAAK,CAACmB,SAAN,CAAgBC,oBAAhB,CAAqCH,aAArC,CAAxB,CAAT,EAAuF;AACrF,eAAO,IAAP;AACD;AACF;;AACD,WAAO,KAAP;AACD,GAhBD;;AAkBA,MAAMI,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,QAAIrB,KAAK,CAACsB,OAAN,CAAcC,UAAd,CAAyBpB,WAAzB,CAAJ,EAA2C;AACzCA,MAAAA,WAAW;AACZ;AACF,GAJD;;AAKA,MAAMqB,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,KAAD,EAAW;AACnCf,IAAAA,qBAAqB,CAACe,KAAK,CAACC,MAAN,CAAaC,KAAd,CAArB;AACD,GAFD;;AAIA,MAAMC,YAAY;AAAA,yEAAG,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACbC,cAAAA,cADa,GACI,EADJ;;AAEnB,mBAAWC,GAAX,IAAkBF,OAAlB,aAAkBA,OAAlB,uBAAkBA,OAAO,CAAEG,QAA3B,EAAqC;AACnC,oBAAI,CAAAH,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEG,QAAT,CAAkBD,GAAlB,OAA2B,IAA/B,EAAqC;AACnCD,kBAAAA,cAAc,CAACG,IAAf,CAAoB;AAClBC,oBAAAA,0BAA0B,EAAEH;AADV,mBAApB;AAGD;AACF;;AACKI,cAAAA,IATa,iDASD9B,aATC,GASiBwB,OATjB;AAS0Bd,gBAAAA,wBAAwB,EAAEe;AATpD;;AAAA,mBAWfK,IAAI,CAACC,EAXU;AAAA;AAAA;AAAA;;AAAA,+CAYVvB,QAAQ,CAAClB,mBAAmB,CAACwC,IAAD,CAApB,CAZE;;AAAA;AAAA,+CAcVtB,QAAQ,CAACnB,mBAAmB,CAACyC,IAAD,CAApB,CAdE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAZP,YAAY;AAAA;AAAA;AAAA,KAAlB;;AAkBA,MAAMS,YAAY,GAAG;AACnBV,IAAAA,KAAK,EAAEtB,aAAa,IAAIA,aAAa,CAACiC,OAA/B,GAAyC,CAACjC,aAAa,CAACiC,OAAf,CAAzC,GAAmE,EADvD;AAEnB9B,IAAAA,IAAI,EAAE,cAFa;AAGnB+B,IAAAA,OAAO,EAAE,EAHU;AAInBC,IAAAA,mBAAmB,EAAE;AACnBC,MAAAA,UAAU,EAAE,IADO;AAEnBC,MAAAA,WAAW,EAAE,IAFM;AAGnBC,MAAAA,aAAa,EAAE,GAHI;AAInBC,MAAAA,WAAW,EAAE,IAJM;AAKnBC,MAAAA,KAAK,EAAE;AACLC,QAAAA,OAAO,EAAE,iBAACtC,IAAD,EAAOuC,IAAP;AAAA,iBAAgBlC,QAAQ,CAACjB,sBAAsB,CAACY,IAAD,EAAOuC,IAAP,CAAvB,CAAxB;AAAA,SADJ;AAELvC,QAAAA,IAAI,EAAE;AAFD;AALY,KAJF;AAcnBwC,IAAAA,UAAU,EAAEzD,GAAG,CAAC0D,KAAJ,GAAYC,QAAZ,CAAqBlD,KAAK,CAACmD,MAAN,CAAaC,CAAb,CAAe,uBAAf,CAArB;AAdO,GAArB;AAiBA,MAAMC,MAAM,gCACN9C,KAAK,GACL,CACE;AACE+C,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,EAAE,EAAE;AAAN,KADZ;AAEE/C,IAAAA,IAAI,EAAE,QAFR;AAGEgD,IAAAA,IAAI,EAAE,QAHR;AAIE7B,IAAAA,KAAK,EAAE;AAJT,GADF,CADK,GASL,CACE;AACE2B,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,EAAE,EAAE;AAAN,KADZ;AAEE/C,IAAAA,IAAI,EAAE,QAFR;AAGEgD,IAAAA,IAAI,EAAE,QAHR;AAIE7B,IAAAA,KAAK,EAAEtB,aAAa,CAACoD,MAAd,IAAwB,EAJjC;AAKElB,IAAAA,OAAO,EAAE,CACP;AAAEH,MAAAA,EAAE,EAAE,SAAN;AAAiBsB,MAAAA,KAAK,EAAE1D,KAAK,CAACmD,MAAN,CAAaC,CAAb,CAAe,gBAAf;AAAxB,KADO,EAEP;AAAEhB,MAAAA,EAAE,EAAE,aAAN;AAAqBsB,MAAAA,KAAK,EAAE1D,KAAK,CAACmD,MAAN,CAAaC,CAAb,CAAe,mBAAf;AAA5B,KAFO,EAGP;AAAEhB,MAAAA,EAAE,EAAE,MAAN;AAAcsB,MAAAA,KAAK,EAAE1D,KAAK,CAACmD,MAAN,CAAaC,CAAb,CAAe,aAAf;AAArB,KAHO,CALX;AAUEM,IAAAA,KAAK,EAAE1D,KAAK,CAACmD,MAAN,CAAaC,CAAb,CAAe,YAAf,CAVT;AAWEO,IAAAA,SAAS,EAAE,IAXb;AAYEC,IAAAA,WAAW,EAAE,OAZf;AAaEC,IAAAA,iBAAiB,EAAE;AACjBC,MAAAA,SAAS,EAAE;AADM,KAbrB;AAgBEd,IAAAA,UAAU,EAAEzD,GAAG,CAAC4D,MAAJ,GAAaD,QAAb,CAAsBlD,KAAK,CAACmD,MAAN,CAAaC,CAAb,CAAe,sBAAf,CAAtB;AAhBd,GADF,CAVM;AA+BR5C,IAAAA,IAAI,EAAE,cA/BE;AAgCRgD,IAAAA,IAAI,EAAE,SAhCE;AAiCR7B,IAAAA,KAAK,EAAGvB,QAAQ,CAACc,MAAT,GAAkB,CAAlB,IAAuB,CAACb,aAAD,aAACA,aAAD,uBAACA,aAAa,CAAEiC,OAAhB,CAAxB,KAAqDjC,aAArD,aAAqDA,aAArD,gDAAqDA,aAAa,CAAEiC,OAApE,0DAAqD,sBAAwBF,EAA7E,KAAmF,EAjClF;AAkCRG,IAAAA,OAAO,EAAEnC,QAlCD;AAmCRsD,IAAAA,KAAK,EAAE1D,KAAK,CAACmD,MAAN,CAAaC,CAAb,CAAe,6BAAf,CAnCC;AAoCRO,IAAAA,SAAS,EAAE,IApCH;AAqCRC,IAAAA,WAAW,EAAE,MArCL;AAsCRC,IAAAA,iBAAiB,EAAE;AACjBC,MAAAA,SAAS,EAAE;AADM,KAtCX;AAyCRd,IAAAA,UAAU,EAAEzD,GAAG,CAAC4D,MAAJ,GAAaD,QAAb,CAAsBlD,KAAK,CAACmD,MAAN,CAAaC,CAAb,CAAe,uBAAf,CAAtB;AAzCJ,KA0CJ9C,mBAAmB,IAAI+B,YA1CnB,GA6CV;AACEmB,IAAAA,IAAI,EAAE,eADR;AAEEhD,IAAAA,IAAI,EAAE,OAFR;AAGEuD,IAAAA,KAAK,EAAE/D,KAAK,CAACmD,MAAN,CAAaC,CAAb,CAAe,yCAAf,CAHT;AAIEzB,IAAAA,KAAK,EAAEtB,aAAa,CAACG,IAAd,IAAsB,EAJ/B;AAKEwC,IAAAA,UAAU,EAAEzD,GAAG,CAAC4D,MAAJ,GAAaa,QAAb,GAAwBd,QAAxB,CAAiClD,KAAK,CAACmD,MAAN,CAAaC,CAAb,CAAe,qBAAf,CAAjC,CALd;AAMEb,IAAAA,OAAO,EAAE,CACP;AACEmB,MAAAA,KAAK,EAAE1D,KAAK,CAACmD,MAAN,CAAaC,CAAb,CAAe,+CAAf,CADT;AAEEzB,MAAAA,KAAK,EAAE1B,SAAS,CAACgE;AAFnB,KADO,EAKP;AACEP,MAAAA,KAAK,EAAE1D,KAAK,CAACmD,MAAN,CAAaC,CAAb,CAAe,6CAAf,CADT;AAEEzB,MAAAA,KAAK,EAAE1B,SAAS,CAACiE;AAFnB,KALO,CANX;AAgBEL,IAAAA,iBAAiB,EAAE;AACjBM,MAAAA,IAAI,EAAE,OADW;AAEjBC,MAAAA,QAAQ,EAAE5C;AAFO;AAhBrB,GA7CU,EAkEV;AACEhB,IAAAA,IAAI,EAAE,YADR;AAEEgD,IAAAA,IAAI,EAAE,SAFR;AAGEE,IAAAA,KAAK,EAAE1D,KAAK,CAACmD,MAAN,CAAaC,CAAb,CAAe,6BAAf,CAHT;AAIEzB,IAAAA,KAAK,EAAEtB,aAAa,CAACgE,OAAd,IAAyB,IAJlC;AAKER,IAAAA,iBAAiB,EAAE;AACjBC,MAAAA,SAAS,EAAE;AADM,KALrB;AAQEd,IAAAA,UAAU,EAAEzD,GAAG,CAAC4D,MAAJ,GAAaa,QAAb,GAAwBd,QAAxB,CAAiClD,KAAK,CAACmD,MAAN,CAAaC,CAAb,CAAe,oBAAf,CAAjC;AARd,GAlEU,EA4EV;AACEI,IAAAA,IAAI,EAAE,UADR;AAEEhD,IAAAA,IAAI,EAAE,UAFR;AAGEmB,IAAAA,KAAK,EAAEtB,aAAa,CAAC2B,QAAd,IAA0B,KAHnC;AAIEO,IAAAA,OAAO,EAAEvC,KAAK,CAACmB,SAAN,CAAgBmD,qBAAhB,CAAsC7D,kBAAtC,EAA0DF,KAA1D,EAAiEA,KAAK,GAAG,EAAH,GAAQF,aAAR,aAAQA,aAAR,uBAAQA,aAAa,CAAEU,wBAA7F;AAJX,GA5EU,EAmFV;AACEP,IAAAA,IAAI,EAAE,UADR;AAEEgD,IAAAA,IAAI,EAAE,OAFR;AAGEE,IAAAA,KAAK,EAAE1D,KAAK,CAACmD,MAAN,CAAaC,CAAb,CAAe,2BAAf,CAHT;AAIEzB,IAAAA,KAAK,EAAEtB,aAAa,CAACkE,KAAd,IAAuB,EAJhC;AAKEV,IAAAA,iBAAiB,EAAE;AACjBW,MAAAA,SAAS,EAAE,IADM;AAEjBC,MAAAA,OAAO,EAAE,CAFQ;AAGjBC,MAAAA,OAAO,EAAE;AAHQ;AALrB,GAnFU,EAAZ;AAgGA,MAAMC,OAAO,GAAG,CACd;AACEnB,IAAAA,IAAI,EAAE,QADR;AAEEE,IAAAA,KAAK,EAAErD,aAAa,CAAC+B,EAAd,GAAmBpC,KAAK,CAACmD,MAAN,CAAaC,CAAb,CAAe,UAAf,CAAnB,GAAgDpD,KAAK,CAACmD,MAAN,CAAaC,CAAb,CAAe,YAAf,CAFzD;AAGEN,IAAAA,OAAO,EAAElB;AAHX,GADc,EAMd;AACE4B,IAAAA,IAAI,EAAE,QADR;AAEEE,IAAAA,KAAK,EAAE1D,KAAK,CAACmD,MAAN,CAAaC,CAAb,CAAe,YAAf,CAFT;AAGEN,IAAAA,OAAO,EAAEzB;AAHX,GANc,CAAhB;AAaA,sBACE,QAAC,iBAAD;AACE,IAAA,oBAAoB,EAAEV,oBADxB;AAEE,IAAA,OAAO,EAAEgE,OAFX;AAGE,IAAA,MAAM,EAAEtB,MAHV;AAIE,IAAA,KAAK,EAAE9C,KAJT;AAKE,IAAA,gBAAgB,EAAES;AALpB;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GAnMuBd,a;UAGOZ,W,EACIA,W,EAChBD,W;;;KALKa,a","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport * as Yup from 'yup';\r\nimport isEmpty from 'lodash/isEmpty';\r\n\r\n// app\r\nimport { ModellingTaskView } from './ModellingTask.view';\r\nimport {\r\n  createModellingTask,\r\n  updateModellingTask,\r\n  getReferenceDataByType,\r\n  resetCreateModellingFlag,\r\n  selectModellingCreateFlag,\r\n  selectModellingTask,\r\n} from 'stores';\r\nimport * as utils from 'utils';\r\nimport * as constants from 'consts';\r\n\r\nexport default function ModellingTask({ handleClose, insureds = [], modellingTask = {}, displayAutocomplete = false }) {\r\n  const isNew = isEmpty(modellingTask);\r\n  const [modellingTypeValue, setModellingTypeValue] = useState(modellingTask?.type || '');\r\n  const createdModellingTask = useSelector(selectModellingTask);\r\n  const createdModellingTaskFlag = useSelector(selectModellingCreateFlag);\r\n  const dispatch = useDispatch();\r\n  const selectedTypes = !isNew && modellingTask?.modellingAttachmentTypes;\r\n\r\n  useEffect(\r\n    () => {\r\n      return () => dispatch(resetCreateModellingFlag());\r\n    },\r\n    [createdModellingTaskFlag] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  const validateFileType = (modellingTypeValue, fileTypeValue) => {\r\n    if (!isEmpty(modellingTypeValue)) {\r\n      if (!isNew && selectedTypes && selectedTypes.length !== 2) {\r\n        if (fileTypeValue && utils.placement.checkAllTruthyValues(fileTypeValue)) {\r\n          return false;\r\n        }\r\n        return true;\r\n      }\r\n      if (!isNew && fileTypeValue && !utils.placement.checkAllTruthyValues(fileTypeValue)) {\r\n        return true;\r\n      }\r\n      if (isNew && (!fileTypeValue || !utils.placement.checkAllTruthyValues(fileTypeValue))) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    if (utils.generic.isFunction(handleClose)) {\r\n      handleClose();\r\n    }\r\n  };\r\n  const handleRadioChange = (event) => {\r\n    setModellingTypeValue(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = async (changes) => {\r\n    const modellingTypes = [];\r\n    for (const key in changes?.fileType) {\r\n      if (changes?.fileType[key] === true) {\r\n        modellingTypes.push({\r\n          modellingAttachmentTypeKey: key,\r\n        });\r\n      }\r\n    }\r\n    const task = { ...modellingTask, ...changes, modellingAttachmentTypes: modellingTypes };\r\n\r\n    if (task.id) {\r\n      return dispatch(updateModellingTask(task));\r\n    } else {\r\n      return dispatch(createModellingTask(task));\r\n    }\r\n  };\r\n\r\n  const autoComplete = {\r\n    value: modellingTask && modellingTask.insured ? [modellingTask.insured] : [],\r\n    type: 'autocomplete',\r\n    options: [],\r\n    innerComponentProps: {\r\n      allowEmpty: true,\r\n      isClearable: true,\r\n      maxMenuHeight: 200,\r\n      isCreatable: true,\r\n      async: {\r\n        handler: (type, term) => dispatch(getReferenceDataByType(type, term)),\r\n        type: 'insured',\r\n      },\r\n    },\r\n    validation: Yup.array().required(utils.string.t('form.insured.required')),\r\n  };\r\n\r\n  const fields = [\r\n    ...(isNew\r\n      ? [\r\n          {\r\n            gridSize: { xs: 6 },\r\n            type: 'hidden',\r\n            name: 'status',\r\n            value: 'PENDING',\r\n          },\r\n        ]\r\n      : [\r\n          {\r\n            gridSize: { xs: 6 },\r\n            type: 'select',\r\n            name: 'status',\r\n            value: modellingTask.status || '',\r\n            options: [\r\n              { id: 'PENDING', label: utils.string.t('status.pending') },\r\n              { id: 'IN PROGRESS', label: utils.string.t('status.inprogress') },\r\n              { id: 'DONE', label: utils.string.t('status.done') },\r\n            ],\r\n            label: utils.string.t('app.status'),\r\n            optionKey: 'id',\r\n            optionLabel: 'label',\r\n            muiComponentProps: {\r\n              fullWidth: true,\r\n            },\r\n            validation: Yup.string().required(utils.string.t('form.status.required')),\r\n          },\r\n        ]),\r\n    {\r\n      type: 'autocomplete',\r\n      name: 'insured',\r\n      value: (insureds.length > 0 && [modellingTask?.insured]) || modellingTask?.insured?.id || '',\r\n      options: insureds,\r\n      label: utils.string.t('placement.modelling.insured'),\r\n      optionKey: 'id',\r\n      optionLabel: 'name',\r\n      muiComponentProps: {\r\n        fullWidth: true,\r\n      },\r\n      validation: Yup.string().required(utils.string.t('form.insured.required')),\r\n      ...(displayAutocomplete && autoComplete),\r\n    },\r\n\r\n    {\r\n      name: 'modellingType',\r\n      type: 'radio',\r\n      title: utils.string.t('placement.modelling.modellingType.title'),\r\n      value: modellingTask.type || '',\r\n      validation: Yup.string().nullable().required(utils.string.t('validation.required')),\r\n      options: [\r\n        {\r\n          label: utils.string.t('placement.modelling.modellingType.typeQuoting'),\r\n          value: constants.MODELLING_QUOTING,\r\n        },\r\n        {\r\n          label: utils.string.t('placement.modelling.modellingType.typeBound'),\r\n          value: constants.MODELLING_BOUND,\r\n        },\r\n      ],\r\n      muiComponentProps: {\r\n        size: 'small',\r\n        onChange: handleRadioChange,\r\n      },\r\n    },\r\n    {\r\n      type: 'datepicker',\r\n      name: 'dueDate',\r\n      label: utils.string.t('placement.modelling.dueDate'),\r\n      value: modellingTask.dueDate || null,\r\n      muiComponentProps: {\r\n        fullWidth: true,\r\n      },\r\n      validation: Yup.string().nullable().required(utils.string.t('form.date.required')),\r\n    },\r\n    {\r\n      name: 'fileType',\r\n      type: 'checkbox',\r\n      value: modellingTask.fileType || false,\r\n      options: utils.placement.renderFileTypeOptions(modellingTypeValue, isNew, isNew ? [] : modellingTask?.modellingAttachmentTypes),\r\n    },\r\n\r\n    {\r\n      type: 'textarea',\r\n      name: 'notes',\r\n      label: utils.string.t('placement.modelling.notes'),\r\n      value: modellingTask.notes || '',\r\n      muiComponentProps: {\r\n        multiline: true,\r\n        minRows: 3,\r\n        maxRows: 6,\r\n      },\r\n    },\r\n  ];\r\n\r\n  const actions = [\r\n    {\r\n      name: 'submit',\r\n      label: modellingTask.id ? utils.string.t('app.save') : utils.string.t('app.create'),\r\n      handler: handleSubmit,\r\n    },\r\n    {\r\n      name: 'cancel',\r\n      label: utils.string.t('app.cancel'),\r\n      handler: handleCancel,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <ModellingTaskView\r\n      createdModellingTask={createdModellingTask}\r\n      actions={actions}\r\n      fields={fields}\r\n      isNew={isNew}\r\n      validateFileType={validateFileType}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}