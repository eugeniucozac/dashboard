{"ast":null,"code":"import _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\pages\\\\Reporting\\\\Reporting.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport { Helmet } from 'react-helmet';\nimport { ReportingView } from './Reporting.view';\nimport * as utils from 'utils';\nimport config from 'config';\nimport { showModal, getReportGroupList, selectReportGroupList, deleteReportGroup, selectIsReportAdmin, deleteReportGroupDoc } from 'stores';\nimport { usePagination } from 'hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ReportingGroup() {\n  _s();\n\n  var reportingGroupList = useSelector(selectReportGroupList) || {};\n  var history = useHistory();\n  var dispatch = useDispatch();\n  var isReportAdmin = useSelector(selectIsReportAdmin);\n  var brand = useSelector(function (state) {\n    return state.ui.brand;\n  });\n  var paginationObj = {\n    page: reportingGroupList.page - 1,\n    rowsTotal: reportingGroupList.itemsTotal,\n    rowsPerPage: reportingGroupList.pageSize\n  };\n  useEffect(function () {\n    dispatch(getReportGroupList());\n  }, [] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  var handleChangePage = function handleChangePage(newPage) {\n    dispatch(getReportGroupList({\n      page: newPage + 1\n    }));\n  };\n\n  var handleChangeRowsPerPage = function handleChangeRowsPerPage(rowsPerPage) {\n    dispatch(getReportGroupList({\n      size: rowsPerPage\n    }));\n  };\n\n  var pagination = usePagination(reportingGroupList.items, paginationObj, handleChangePage, handleChangeRowsPerPage);\n\n  var handleClickRow = function handleClickRow(group) {\n    return function (event) {\n      var route = config.routes.reporting.root;\n      var id = group.id;\n      history.push(\"\".concat(route, \"/\").concat(id));\n    };\n  };\n\n  var handleEdit = function handleEdit(editReportGroup, popoverData) {\n    dispatch(showModal({\n      component: 'EDIT_REPORT',\n      props: {\n        fullWidth: false,\n        maxWidth: 'lg',\n        title: editReportGroup ? utils.string.t('reporting.editReportGroup') : utils.string.t('reporting.addReportGroup'),\n        componentProps: _objectSpread(_objectSpread({}, popoverData), {}, {\n          report: popoverData,\n          isEditReportGroup: editReportGroup\n        })\n      }\n    }));\n  };\n\n  var handleDelete = function handleDelete(popoverData) {\n    var submitHandler = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return dispatch(deleteReportGroup(popoverData === null || popoverData === void 0 ? void 0 : popoverData.id));\n\n              case 2:\n                res = _context.sent;\n\n                if (res) {\n                  dispatch(deleteReportGroupDoc(popoverData === null || popoverData === void 0 ? void 0 : popoverData.id));\n                }\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function submitHandler() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    dispatch(showModal({\n      component: 'CONFIRM_DELETE',\n      props: {\n        title: \"\".concat(utils.string.t('reporting.deleteReportGroup'), \" \").concat(popoverData.name),\n        fullWidth: true,\n        maxWidth: 'xs',\n        disableAutoFocus: true,\n        componentProps: {\n          submitHandler: submitHandler\n        }\n      }\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"\".concat(utils.string.t('reporting.title'), \" - \").concat(utils.app.getAppName(brand))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReportingView, {\n      isReportAdmin: isReportAdmin,\n      pagination: pagination.obj,\n      list: reportingGroupList.items ? reportingGroupList.items : [],\n      handleClickRow: handleClickRow,\n      handleEdit: handleEdit,\n      handleDelete: handleDelete,\n      handleChangePage: pagination.handlers.handleChangePage,\n      handleChangeRowsPerPage: pagination.handlers.handleChangeRowsPerPage,\n      sort: {\n        by: reportingGroupList.sortBy,\n        direction: reportingGroupList.sortDirection\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ReportingGroup, \"GFD0gCTCtfOrdEA8tZeEF4SbNfY=\", false, function () {\n  return [useSelector, useHistory, useDispatch, useSelector, useSelector, usePagination];\n});\n\n_c = ReportingGroup;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReportingGroup\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/pages/Reporting/Reporting.js"],"names":["React","useEffect","useSelector","useDispatch","useHistory","Helmet","ReportingView","utils","config","showModal","getReportGroupList","selectReportGroupList","deleteReportGroup","selectIsReportAdmin","deleteReportGroupDoc","usePagination","ReportingGroup","reportingGroupList","history","dispatch","isReportAdmin","brand","state","ui","paginationObj","page","rowsTotal","itemsTotal","rowsPerPage","pageSize","handleChangePage","newPage","handleChangeRowsPerPage","size","pagination","items","handleClickRow","group","event","route","routes","reporting","root","id","push","handleEdit","editReportGroup","popoverData","component","props","fullWidth","maxWidth","title","string","t","componentProps","report","isEditReportGroup","handleDelete","submitHandler","res","name","disableAutoFocus","app","getAppName","obj","handlers","by","sortBy","direction","sortDirection"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport { ReportingView } from './Reporting.view';\r\nimport * as utils from 'utils';\r\nimport config from 'config';\r\nimport { showModal, getReportGroupList, selectReportGroupList, deleteReportGroup, selectIsReportAdmin, deleteReportGroupDoc } from 'stores';\r\nimport { usePagination } from 'hooks';\r\n\r\nexport default function ReportingGroup() {\r\n  const reportingGroupList = useSelector(selectReportGroupList) || {};\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  const isReportAdmin = useSelector(selectIsReportAdmin);\r\n  const brand = useSelector((state) => state.ui.brand);\r\n\r\n  const paginationObj = {\r\n    page: reportingGroupList.page - 1,\r\n    rowsTotal: reportingGroupList.itemsTotal,\r\n    rowsPerPage: reportingGroupList.pageSize,\r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n      dispatch(getReportGroupList());\r\n    },\r\n    [] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  const handleChangePage = (newPage) => {\r\n    dispatch(getReportGroupList({ page: newPage + 1 }));\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (rowsPerPage) => {\r\n    dispatch(getReportGroupList({ size: rowsPerPage }));\r\n  };\r\n\r\n  const pagination = usePagination(reportingGroupList.items, paginationObj, handleChangePage, handleChangeRowsPerPage);\r\n\r\n  const handleClickRow = (group) => (event) => {\r\n    const route = config.routes.reporting.root;\r\n    const id = group.id;\r\n    history.push(`${route}/${id}`);\r\n  };\r\n\r\n  const handleEdit = (editReportGroup, popoverData) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'EDIT_REPORT',\r\n        props: {\r\n          fullWidth: false,\r\n          maxWidth: 'lg',\r\n          title: editReportGroup ? utils.string.t('reporting.editReportGroup') : utils.string.t('reporting.addReportGroup'),\r\n          componentProps: {\r\n            ...popoverData,\r\n            report: popoverData,\r\n            isEditReportGroup: editReportGroup,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n  const handleDelete = (popoverData) => {\r\n    let submitHandler = async () => {\r\n      const res = await dispatch(deleteReportGroup(popoverData?.id));\r\n      if (res) {\r\n        dispatch(deleteReportGroupDoc(popoverData?.id));\r\n      }\r\n    };\r\n\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM_DELETE',\r\n        props: {\r\n          title: `${utils.string.t('reporting.deleteReportGroup')} ${popoverData.name}`,\r\n          fullWidth: true,\r\n          maxWidth: 'xs',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            submitHandler,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>{`${utils.string.t('reporting.title')} - ${utils.app.getAppName(brand)}`}</title>\r\n      </Helmet>\r\n      <ReportingView\r\n        isReportAdmin={isReportAdmin}\r\n        pagination={pagination.obj}\r\n        list={reportingGroupList.items ? reportingGroupList.items : []}\r\n        handleClickRow={handleClickRow}\r\n        handleEdit={handleEdit}\r\n        handleDelete={handleDelete}\r\n        handleChangePage={pagination.handlers.handleChangePage}\r\n        handleChangeRowsPerPage={pagination.handlers.handleChangeRowsPerPage}\r\n        sort={{\r\n          by: reportingGroupList.sortBy,\r\n          direction: reportingGroupList.sortDirection,\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}