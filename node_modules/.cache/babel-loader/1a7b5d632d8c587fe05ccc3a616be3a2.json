{"ast":null,"code":"import _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\pages\\\\ReportGroupExtended\\\\ReportGroupExtended.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport { Helmet } from 'react-helmet'; // app\n\nimport { ReportGroupExtendedView } from './ReportGroupExtended.view';\nimport * as utils from 'utils';\nimport config from 'config';\nimport * as constants from 'consts';\nimport { usePagination } from 'hooks';\nimport { getReportGroupListExtended, showModal, resetReportGroupListExtended, selectReportExtendedGroupList, selectReportExtendedGroupListPagination, selectReportExtendedGroupListSort, deleteReportGroupExtended, selectUserBusinessProcess, selectUser } from 'stores';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ReportGroupExtended() {\n  _s();\n\n  var history = useHistory();\n  var dispatch = useDispatch();\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedTab = _useState2[0],\n      setSelectedTab = _useState2[1];\n\n  var brand = useSelector(function (state) {\n    return state.ui.brand;\n  });\n  var businessProcess = useSelector(selectUserBusinessProcess);\n  var reportGroupList = useSelector(selectReportExtendedGroupList);\n  var reportGroupListPagination = useSelector(selectReportExtendedGroupListPagination);\n  var reportGroupListSorting = useSelector(selectReportExtendedGroupListSort);\n  var user = useSelector(selectUser);\n  var hasCreateReportGroupPermission = utils.app.access.feature('reporting.addGroup', ['read', 'create', 'update', 'delete'], user);\n  var hasEditReportGroupPermission = utils.app.access.feature('reporting.editGroup', ['update'], user);\n  var hasDeleteReportGroupPermission = utils.app.access.feature('reporting.deleteGroup', ['delete'], user);\n\n  var getTabValue = function getTabValue(id) {\n    var tabValue;\n\n    switch (id) {\n      case constants.BUSINESS_PROCESS_PREMIUM_PROCESSING_ID:\n        tabValue = constants.REPORTING_EXTENDED_GROUP_TAB_PREMIUM_PROCESSING;\n        break;\n\n      case constants.BUSINESS_PROCESS_CLAIMS_ID:\n        tabValue = constants.REPORTING_EXTENDED_GROUP_TAB_CLAIMS;\n        break;\n\n      case constants.BUSINESS_PROCESS_INSURANCE_BROKER_ACCOUNTING_ID:\n        tabValue = constants.REPORTING_EXTENDED_GROUP_TAB_INSURANCE_BROKER_ACCOUNTING;\n        break;\n\n      case constants.BUSINESS_PROCESS_BUSINESS_ENTITIES_ID:\n        tabValue = constants.REPORTING_EXTENDED_GROUP_TAB_BUSINESS_ENTITIES;\n        break;\n\n      case constants.BUSINESS_PROCESS_FACILITIES_ID:\n        tabValue = constants.REPORTING_EXTENDED_GROUP_TAB_FACILITIES;\n        break;\n\n      case constants.BUSINESS_PROCESS_OPEN_MARKET_ID:\n        tabValue = constants.REPORTING_EXTENDED_GROUP_TAB_OPEN_MARKET;\n        break;\n\n      default:\n        return tabValue;\n    }\n\n    return tabValue;\n  };\n\n  var getTabLabel = function getTabLabel(id, name) {\n    var tabLabel = '';\n\n    switch (id) {\n      case constants.BUSINESS_PROCESS_PREMIUM_PROCESSING_ID:\n        tabLabel = name;\n        break;\n\n      case constants.BUSINESS_PROCESS_CLAIMS_ID:\n        tabLabel = name;\n        break;\n\n      case constants.BUSINESS_PROCESS_INSURANCE_BROKER_ACCOUNTING_ID:\n        tabLabel = constants.REPORTING_EXTENDED_GROUP_ABBREVATION_INSURANCE_BROKER_ACCOUNTING;\n        break;\n\n      case constants.BUSINESS_PROCESS_BUSINESS_ENTITIES_ID:\n        tabLabel = constants.REPORTING_EXTENDED_GROUP_ABBREVATION_BUSINESS_ENTITIES;\n        break;\n\n      case constants.BUSINESS_PROCESS_FACILITIES_ID:\n        tabLabel = name;\n        break;\n\n      case constants.BUSINESS_PROCESS_OPEN_MARKET_ID:\n        tabLabel = name;\n        break;\n\n      default:\n        return tabLabel;\n    }\n\n    return tabLabel;\n  };\n\n  var getTabs = function getTabs() {\n    var tabs = businessProcess === null || businessProcess === void 0 ? void 0 : businessProcess.map(function (bp) {\n      return {\n        value: getTabValue(bp.id),\n        label: getTabLabel(bp.id, bp.name).toUpperCase(),\n        disabled: // Disabling everything else as EPIC - 12 is only for PP reporting groups\n        bp.id === constants.BUSINESS_PROCESS_PREMIUM_PROCESSING_ID ? false : true\n      };\n    });\n    return tabs;\n  };\n\n  useEffect(function () {\n    var _getTabs, _getTabs$;\n\n    var tabValue = (_getTabs = getTabs()) === null || _getTabs === void 0 ? void 0 : (_getTabs$ = _getTabs[0]) === null || _getTabs$ === void 0 ? void 0 : _getTabs$.value;\n    setSelectedTab(tabValue);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    dispatch(getReportGroupListExtended());\n    return function () {\n      dispatch(resetReportGroupListExtended());\n    };\n  }, [] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  var cols = [{\n    id: 'myReportGroup',\n    label: utils.string.t('reportingExtended.reportingGroup.columns.myReportGroup'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    }\n  }, {\n    id: 'description',\n    label: utils.string.t('reportingExtended.reportingGroup.columns.description'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    }\n  }, {\n    id: 'createdBy',\n    label: utils.string.t('reportingExtended.reportingGroup.columns.createdBy'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    }\n  }, {\n    id: 'createdDate',\n    label: utils.string.t('reportingExtended.reportingGroup.columns.createdDate'),\n    sort: {\n      type: 'date',\n      direction: 'asc'\n    }\n  }, {\n    id: 'count',\n    label: utils.string.t('reportingExtended.reportingGroup.columns.count'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    }\n  }].concat(_toConsumableArray(hasEditReportGroupPermission || hasDeleteReportGroupPermission ? [{\n    id: 'actions',\n    menu: true,\n    visible: true\n  }] : []));\n\n  var handleClickRow = function handleClickRow(group) {\n    return function (event) {\n      var id = group.id,\n          name = group.name;\n      history.push(\"\".concat(config.routes.reportingExtended.root).concat(id ? \"/\".concat(id) : ''), {\n        reportGroupTitle: name,\n        reportGroupId: id\n      });\n    };\n  };\n\n  var handleChangePage = function handleChangePage(newPage) {\n    dispatch(getReportGroupListExtended({\n      page: newPage + 1\n    }));\n  };\n\n  var handleChangeRowsPerPage = function handleChangeRowsPerPage(rowsPerPage) {\n    dispatch(getReportGroupListExtended({\n      size: rowsPerPage\n    }));\n  };\n\n  var searchSubmit = function searchSubmit(_ref) {\n    var search = _ref.search,\n        filters = _ref.filters;\n    dispatch(getReportGroupListExtended({\n      searchBy: search,\n      filters: filters\n    }));\n  };\n\n  var onSortColumn = function onSortColumn(by, dir, type) {\n    dispatch(getReportGroupListExtended({\n      sortBy: by,\n      direction: dir,\n      sortType: type\n    }));\n  };\n\n  var onSuccessfulCreateOrEditOrDeleteReportGroup = function onSuccessfulCreateOrEditOrDeleteReportGroup() {\n    dispatch(getReportGroupListExtended());\n  };\n\n  var handleCreateEditReportGroup = function handleCreateEditReportGroup(isEditReportGroup, reportGrp) {\n    dispatch(showModal({\n      component: 'REPORT_GROUP_EXTENDED_ADD_EDIT',\n      props: {\n        fullWidth: false,\n        maxWidth: 'lg',\n        title: isEditReportGroup ? utils.string.t('reportingExtended.reportingGroup.editReportGroup') : utils.string.t('reportingExtended.reportingGroup.createReportGroup'),\n        componentProps: {\n          reportGrp: reportGrp,\n          isEditReportGroup: isEditReportGroup,\n          handlers: {\n            onSuccessfulCreateOrEditOrDeleteReportGroup: onSuccessfulCreateOrEditOrDeleteReportGroup\n          }\n        }\n      }\n    }));\n  };\n\n  var handleDeleteReportGroup = function handleDeleteReportGroup(reportGrp) {\n    var id = reportGrp.id;\n\n    var submitHandler = function submitHandler() {\n      dispatch(deleteReportGroupExtended(id)).then(function (response) {\n        if ((response === null || response === void 0 ? void 0 : response.status) === constants.API_RESPONSE_NO_CONTENT_STATUS) {\n          onSuccessfulCreateOrEditOrDeleteReportGroup();\n        }\n      });\n    };\n\n    dispatch(showModal({\n      component: 'CONFIRM_DELETE',\n      props: {\n        title: \"\".concat(utils.string.t('reportingExtended.reportingGroup.deleteReportGroup')),\n        fullWidth: true,\n        maxWidth: 'xs',\n        disableAutoFocus: true,\n        componentProps: {\n          submitHandler: submitHandler\n        }\n      }\n    }));\n  };\n\n  var popoverActions = [].concat(_toConsumableArray(hasEditReportGroupPermission ? [{\n    id: 'edit',\n    label: utils.string.t('reportingExtended.reportingGroup.popOverMenuItems.edit'),\n    callback: function callback(_ref2) {\n      var reportGrp = _ref2.reportGrp;\n      return handleCreateEditReportGroup(true, reportGrp);\n    }\n  }] : []), _toConsumableArray(hasDeleteReportGroupPermission ? [{\n    id: 'delete',\n    label: utils.string.t('reportingExtended.reportingGroup.popOverMenuItems.delete'),\n    callback: function callback(_ref3) {\n      var reportGrp = _ref3.reportGrp;\n      return handleDeleteReportGroup(reportGrp);\n    }\n  }] : []));\n  var pagination = usePagination(reportGroupList, reportGroupListPagination, handleChangePage, handleChangeRowsPerPage);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"\".concat(utils.string.t('reportingExtended.title'), \" - \").concat(utils.app.getAppName(brand))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReportGroupExtendedView, {\n      columns: cols,\n      reportGroupList: reportGroupList,\n      popoverActions: popoverActions,\n      tabs: getTabs(),\n      selectedTab: selectedTab,\n      pagination: pagination.obj,\n      sort: reportGroupListSorting,\n      hasCreateReportGroupPermission: hasCreateReportGroupPermission,\n      handlers: {\n        handleClickRow: handleClickRow,\n        handleSelectTab: setSelectedTab,\n        handleCreateEditReportGroup: handleCreateEditReportGroup,\n        handleChangePage: pagination.handlers.handleChangePage,\n        handleChangeRowsPerPage: pagination.handlers.handleChangeRowsPerPage,\n        searchSubmit: searchSubmit,\n        onSortColumn: onSortColumn\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ReportGroupExtended, \"m0IkPogvsaZxucmbQTistpGtUZI=\", false, function () {\n  return [useHistory, useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, usePagination];\n});\n\n_c = ReportGroupExtended;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReportGroupExtended\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/pages/ReportGroupExtended/ReportGroupExtended.js"],"names":["React","useState","useEffect","useSelector","useDispatch","useHistory","Helmet","ReportGroupExtendedView","utils","config","constants","usePagination","getReportGroupListExtended","showModal","resetReportGroupListExtended","selectReportExtendedGroupList","selectReportExtendedGroupListPagination","selectReportExtendedGroupListSort","deleteReportGroupExtended","selectUserBusinessProcess","selectUser","ReportGroupExtended","history","dispatch","selectedTab","setSelectedTab","brand","state","ui","businessProcess","reportGroupList","reportGroupListPagination","reportGroupListSorting","user","hasCreateReportGroupPermission","app","access","feature","hasEditReportGroupPermission","hasDeleteReportGroupPermission","getTabValue","id","tabValue","BUSINESS_PROCESS_PREMIUM_PROCESSING_ID","REPORTING_EXTENDED_GROUP_TAB_PREMIUM_PROCESSING","BUSINESS_PROCESS_CLAIMS_ID","REPORTING_EXTENDED_GROUP_TAB_CLAIMS","BUSINESS_PROCESS_INSURANCE_BROKER_ACCOUNTING_ID","REPORTING_EXTENDED_GROUP_TAB_INSURANCE_BROKER_ACCOUNTING","BUSINESS_PROCESS_BUSINESS_ENTITIES_ID","REPORTING_EXTENDED_GROUP_TAB_BUSINESS_ENTITIES","BUSINESS_PROCESS_FACILITIES_ID","REPORTING_EXTENDED_GROUP_TAB_FACILITIES","BUSINESS_PROCESS_OPEN_MARKET_ID","REPORTING_EXTENDED_GROUP_TAB_OPEN_MARKET","getTabLabel","name","tabLabel","REPORTING_EXTENDED_GROUP_ABBREVATION_INSURANCE_BROKER_ACCOUNTING","REPORTING_EXTENDED_GROUP_ABBREVATION_BUSINESS_ENTITIES","getTabs","tabs","map","bp","value","label","toUpperCase","disabled","cols","string","t","sort","type","direction","menu","visible","handleClickRow","group","event","push","routes","reportingExtended","root","reportGroupTitle","reportGroupId","handleChangePage","newPage","page","handleChangeRowsPerPage","rowsPerPage","size","searchSubmit","search","filters","searchBy","onSortColumn","by","dir","sortBy","sortType","onSuccessfulCreateOrEditOrDeleteReportGroup","handleCreateEditReportGroup","isEditReportGroup","reportGrp","component","props","fullWidth","maxWidth","title","componentProps","handlers","handleDeleteReportGroup","submitHandler","then","response","status","API_RESPONSE_NO_CONTENT_STATUS","disableAutoFocus","popoverActions","callback","pagination","getAppName","obj","handleSelectTab"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport { Helmet } from 'react-helmet';\r\n\r\n// app\r\nimport { ReportGroupExtendedView } from './ReportGroupExtended.view';\r\nimport * as utils from 'utils';\r\nimport config from 'config';\r\nimport * as constants from 'consts';\r\nimport { usePagination } from 'hooks';\r\nimport {\r\n  getReportGroupListExtended,\r\n  showModal,\r\n  resetReportGroupListExtended,\r\n  selectReportExtendedGroupList,\r\n  selectReportExtendedGroupListPagination,\r\n  selectReportExtendedGroupListSort,\r\n  deleteReportGroupExtended,\r\n  selectUserBusinessProcess,\r\n  selectUser,\r\n} from 'stores';\r\n\r\nexport default function ReportGroupExtended() {\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n\r\n  const [selectedTab, setSelectedTab] = useState('');\r\n\r\n  const brand = useSelector((state) => state.ui.brand);\r\n  const businessProcess = useSelector(selectUserBusinessProcess);\r\n  const reportGroupList = useSelector(selectReportExtendedGroupList);\r\n  const reportGroupListPagination = useSelector(selectReportExtendedGroupListPagination);\r\n  const reportGroupListSorting = useSelector(selectReportExtendedGroupListSort);\r\n  const user = useSelector(selectUser);\r\n\r\n  const hasCreateReportGroupPermission = utils.app.access.feature('reporting.addGroup', ['read', 'create', 'update', 'delete'], user);\r\n  const hasEditReportGroupPermission = utils.app.access.feature('reporting.editGroup', ['update'], user);\r\n  const hasDeleteReportGroupPermission = utils.app.access.feature('reporting.deleteGroup', ['delete'], user);\r\n\r\n  const getTabValue = (id) => {\r\n    let tabValue;\r\n    switch (id) {\r\n      case constants.BUSINESS_PROCESS_PREMIUM_PROCESSING_ID:\r\n        tabValue = constants.REPORTING_EXTENDED_GROUP_TAB_PREMIUM_PROCESSING;\r\n        break;\r\n      case constants.BUSINESS_PROCESS_CLAIMS_ID:\r\n        tabValue = constants.REPORTING_EXTENDED_GROUP_TAB_CLAIMS;\r\n        break;\r\n      case constants.BUSINESS_PROCESS_INSURANCE_BROKER_ACCOUNTING_ID:\r\n        tabValue = constants.REPORTING_EXTENDED_GROUP_TAB_INSURANCE_BROKER_ACCOUNTING;\r\n        break;\r\n      case constants.BUSINESS_PROCESS_BUSINESS_ENTITIES_ID:\r\n        tabValue = constants.REPORTING_EXTENDED_GROUP_TAB_BUSINESS_ENTITIES;\r\n        break;\r\n      case constants.BUSINESS_PROCESS_FACILITIES_ID:\r\n        tabValue = constants.REPORTING_EXTENDED_GROUP_TAB_FACILITIES;\r\n        break;\r\n      case constants.BUSINESS_PROCESS_OPEN_MARKET_ID:\r\n        tabValue = constants.REPORTING_EXTENDED_GROUP_TAB_OPEN_MARKET;\r\n        break;\r\n      default:\r\n        return tabValue;\r\n    }\r\n    return tabValue;\r\n  };\r\n\r\n  const getTabLabel = (id, name) => {\r\n    let tabLabel = '';\r\n    switch (id) {\r\n      case constants.BUSINESS_PROCESS_PREMIUM_PROCESSING_ID:\r\n        tabLabel = name;\r\n        break;\r\n      case constants.BUSINESS_PROCESS_CLAIMS_ID:\r\n        tabLabel = name;\r\n        break;\r\n      case constants.BUSINESS_PROCESS_INSURANCE_BROKER_ACCOUNTING_ID:\r\n        tabLabel = constants.REPORTING_EXTENDED_GROUP_ABBREVATION_INSURANCE_BROKER_ACCOUNTING;\r\n        break;\r\n      case constants.BUSINESS_PROCESS_BUSINESS_ENTITIES_ID:\r\n        tabLabel = constants.REPORTING_EXTENDED_GROUP_ABBREVATION_BUSINESS_ENTITIES;\r\n        break;\r\n      case constants.BUSINESS_PROCESS_FACILITIES_ID:\r\n        tabLabel = name;\r\n        break;\r\n      case constants.BUSINESS_PROCESS_OPEN_MARKET_ID:\r\n        tabLabel = name;\r\n        break;\r\n      default:\r\n        return tabLabel;\r\n    }\r\n    return tabLabel;\r\n  };\r\n\r\n  const getTabs = () => {\r\n    const tabs = businessProcess?.map((bp) => {\r\n      return {\r\n        value: getTabValue(bp.id),\r\n        label: getTabLabel(bp.id, bp.name).toUpperCase(),\r\n        disabled:\r\n          // Disabling everything else as EPIC - 12 is only for PP reporting groups\r\n          bp.id === constants.BUSINESS_PROCESS_PREMIUM_PROCESSING_ID ? false : true,\r\n      };\r\n    });\r\n    return tabs;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const tabValue = getTabs()?.[0]?.value;\r\n    setSelectedTab(tabValue);\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(\r\n    () => {\r\n      dispatch(getReportGroupListExtended());\r\n\r\n      return () => {\r\n        dispatch(resetReportGroupListExtended());\r\n      };\r\n    },\r\n    [] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  const cols = [\r\n    {\r\n      id: 'myReportGroup',\r\n      label: utils.string.t('reportingExtended.reportingGroup.columns.myReportGroup'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n    },\r\n    {\r\n      id: 'description',\r\n      label: utils.string.t('reportingExtended.reportingGroup.columns.description'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n    },\r\n    {\r\n      id: 'createdBy',\r\n      label: utils.string.t('reportingExtended.reportingGroup.columns.createdBy'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n    },\r\n    {\r\n      id: 'createdDate',\r\n      label: utils.string.t('reportingExtended.reportingGroup.columns.createdDate'),\r\n      sort: { type: 'date', direction: 'asc' },\r\n    },\r\n    { id: 'count', label: utils.string.t('reportingExtended.reportingGroup.columns.count'), sort: { type: 'lexical', direction: 'asc' } },\r\n    ...(hasEditReportGroupPermission || hasDeleteReportGroupPermission ? [{ id: 'actions', menu: true, visible: true }] : []),\r\n  ];\r\n\r\n  const handleClickRow = (group) => (event) => {\r\n    const { id, name } = group;\r\n    history.push(`${config.routes.reportingExtended.root}${id ? `/${id}` : ''}`, { reportGroupTitle: name, reportGroupId: id });\r\n  };\r\n\r\n  const handleChangePage = (newPage) => {\r\n    dispatch(getReportGroupListExtended({ page: newPage + 1 }));\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (rowsPerPage) => {\r\n    dispatch(getReportGroupListExtended({ size: rowsPerPage }));\r\n  };\r\n\r\n  const searchSubmit = ({ search, filters }) => {\r\n    dispatch(getReportGroupListExtended({ searchBy: search, filters }));\r\n  };\r\n\r\n  const onSortColumn = (by, dir, type) => {\r\n    dispatch(getReportGroupListExtended({ sortBy: by, direction: dir, sortType: type }));\r\n  };\r\n\r\n  const onSuccessfulCreateOrEditOrDeleteReportGroup = () => {\r\n    dispatch(getReportGroupListExtended());\r\n  };\r\n\r\n  const handleCreateEditReportGroup = (isEditReportGroup, reportGrp) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'REPORT_GROUP_EXTENDED_ADD_EDIT',\r\n        props: {\r\n          fullWidth: false,\r\n          maxWidth: 'lg',\r\n          title: isEditReportGroup\r\n            ? utils.string.t('reportingExtended.reportingGroup.editReportGroup')\r\n            : utils.string.t('reportingExtended.reportingGroup.createReportGroup'),\r\n          componentProps: {\r\n            reportGrp,\r\n            isEditReportGroup,\r\n            handlers: {\r\n              onSuccessfulCreateOrEditOrDeleteReportGroup,\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleDeleteReportGroup = (reportGrp) => {\r\n    const { id } = reportGrp;\r\n    const submitHandler = () => {\r\n      dispatch(deleteReportGroupExtended(id)).then((response) => {\r\n        if (response?.status === constants.API_RESPONSE_NO_CONTENT_STATUS) {\r\n          onSuccessfulCreateOrEditOrDeleteReportGroup();\r\n        }\r\n      });\r\n    };\r\n\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM_DELETE',\r\n        props: {\r\n          title: `${utils.string.t('reportingExtended.reportingGroup.deleteReportGroup')}`,\r\n          fullWidth: true,\r\n          maxWidth: 'xs',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            submitHandler,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const popoverActions = [\r\n    ...(hasEditReportGroupPermission\r\n      ? [\r\n          {\r\n            id: 'edit',\r\n            label: utils.string.t('reportingExtended.reportingGroup.popOverMenuItems.edit'),\r\n            callback: ({ reportGrp }) => handleCreateEditReportGroup(true, reportGrp),\r\n          },\r\n        ]\r\n      : []),\r\n    ...(hasDeleteReportGroupPermission\r\n      ? [\r\n          {\r\n            id: 'delete',\r\n            label: utils.string.t('reportingExtended.reportingGroup.popOverMenuItems.delete'),\r\n            callback: ({ reportGrp }) => handleDeleteReportGroup(reportGrp),\r\n          },\r\n        ]\r\n      : []),\r\n  ];\r\n\r\n  const pagination = usePagination(reportGroupList, reportGroupListPagination, handleChangePage, handleChangeRowsPerPage);\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>{`${utils.string.t('reportingExtended.title')} - ${utils.app.getAppName(brand)}`}</title>\r\n      </Helmet>\r\n      <ReportGroupExtendedView\r\n        columns={cols}\r\n        reportGroupList={reportGroupList}\r\n        popoverActions={popoverActions}\r\n        tabs={getTabs()}\r\n        selectedTab={selectedTab}\r\n        pagination={pagination.obj}\r\n        sort={reportGroupListSorting}\r\n        hasCreateReportGroupPermission={hasCreateReportGroupPermission}\r\n        handlers={{\r\n          handleClickRow: handleClickRow,\r\n          handleSelectTab: setSelectedTab,\r\n          handleCreateEditReportGroup: handleCreateEditReportGroup,\r\n          handleChangePage: pagination.handlers.handleChangePage,\r\n          handleChangeRowsPerPage: pagination.handlers.handleChangeRowsPerPage,\r\n          searchSubmit,\r\n          onSortColumn,\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}