{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n//app\nimport { authLogout, addLoader, removeLoader, enqueueNotification } from 'stores';\nimport * as utils from 'utils';\nimport { CLAIM_PROCESSING_REQ_TYPES } from 'consts';\nexport var getClaimsTaskDashboardDetail = function getClaimsTaskDashboardDetail() {\n  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint,\n        claims = _getState.claims;\n\n    var defaultError = {\n      file: 'stores/claims.actions.getClaimsTaskDashboardDetail'\n    };\n    var newRequestType = CLAIM_PROCESSING_REQ_TYPES.search;\n    var newQuery = params === null || params === void 0 ? void 0 : params.query;\n    var taskType = params === null || params === void 0 ? void 0 : params.claimID;\n    dispatch(getClaimsTaskDashboardDetailRequest(params));\n    dispatch(addLoader('getClaimsTaskDashboardDetail'));\n\n    if (!newQuery) {\n      dispatch(getClaimsTaskDashboardDetailFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Missing query param'\n      })));\n      dispatch(enqueueNotification('claims.processing.notification.getTaskDetailsFailure', 'error'));\n      dispatch(removeLoader('getClaimsTaskDashboardDetail'));\n      return;\n    }\n\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.claimService,\n      path: \"api/workflow/claims/task/claims/search/\".concat(taskType),\n      data: {\n        requestType: newRequestType,\n        direction: 'asc',\n        page: 0,\n        pageSize: claims.tasksProcessing.pageSize,\n        sortBy: claims.tasksProcessing.sort.by,\n        search: newQuery,\n        searchBy: claims.tasksProcessing.searchBy,\n        filterSearch: []\n      }\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (data) {\n      return utils.api.handleNewData(data);\n    }).then(function (json) {\n      dispatch(getClaimsTaskDashboardDetailSuccess(json, params.taskType, newQuery));\n      dispatch(enqueueNotification('claims.processing.notification.getTaskDetailsSuccess', 'success'));\n      return json;\n    }).catch(function (err) {\n      dispatch(getClaimsTaskDashboardDetailFailure(err, defaultError));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      return err;\n    }).finally(function () {\n      dispatch(removeLoader('getClaimsTaskDashboardDetail'));\n    });\n  };\n};\nexport var getClaimsTaskDashboardDetailRequest = function getClaimsTaskDashboardDetailRequest(params) {\n  return {\n    type: 'CLAIMS_TASK_DASHBOARD_DETAIL_GET_REQUEST',\n    payload: params\n  };\n};\nexport var getClaimsTaskDashboardDetailSuccess = function getClaimsTaskDashboardDetailSuccess(json, taskType, newQuery) {\n  return {\n    type: 'CLAIMS_TASK_DASHBOARD_DETAIL_GET_SUCCESS',\n    payload: {\n      taskType: taskType,\n      items: json.data.searchValue,\n      query: newQuery\n    }\n  };\n};\nexport var getClaimsTaskDashboardDetailFailure = function getClaimsTaskDashboardDetailFailure(error) {\n  return {\n    type: 'CLAIMS_TASK_DASHBOARD_DETAIL_GET_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.getClaimsTaskDashboardDetail.js"],"names":["authLogout","addLoader","removeLoader","enqueueNotification","utils","CLAIM_PROCESSING_REQ_TYPES","getClaimsTaskDashboardDetail","params","dispatch","getState","auth","user","endpoint","config","vars","claims","defaultError","file","newRequestType","search","newQuery","query","taskType","claimID","getClaimsTaskDashboardDetailRequest","getClaimsTaskDashboardDetailFailure","message","api","post","token","accessToken","claimService","path","data","requestType","direction","page","pageSize","tasksProcessing","sortBy","sort","by","searchBy","filterSearch","then","response","handleResponse","handleNewData","json","getClaimsTaskDashboardDetailSuccess","catch","err","handleUnauthorized","finally","type","payload","items","searchValue","error"],"mappings":"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","sourcesContent":["//app\r\nimport { authLogout, addLoader, removeLoader, enqueueNotification } from 'stores';\r\nimport * as utils from 'utils';\r\nimport { CLAIM_PROCESSING_REQ_TYPES } from 'consts';\r\n\r\nexport const getClaimsTaskDashboardDetail =\r\n  (params = {}) =>\r\n  (dispatch, getState) => {\r\n    // prettier-ignore\r\n    const { user: { auth }, config: { vars: { endpoint } }, claims } = getState();\r\n\r\n    const defaultError = {\r\n      file: 'stores/claims.actions.getClaimsTaskDashboardDetail',\r\n    };\r\n\r\n    const newRequestType = CLAIM_PROCESSING_REQ_TYPES.search;\r\n    const newQuery = params?.query;\r\n    const taskType = params?.claimID;\r\n\r\n    dispatch(getClaimsTaskDashboardDetailRequest(params));\r\n    dispatch(addLoader('getClaimsTaskDashboardDetail'));\r\n\r\n    if (!newQuery) {\r\n      dispatch(getClaimsTaskDashboardDetailFailure({ ...defaultError, message: 'Missing query param' }));\r\n      dispatch(enqueueNotification('claims.processing.notification.getTaskDetailsFailure', 'error'));\r\n      dispatch(removeLoader('getClaimsTaskDashboardDetail'));\r\n      return;\r\n    }\r\n\r\n    return utils.api\r\n      .post({\r\n        token: auth.accessToken,\r\n        endpoint: endpoint.claimService,\r\n        path: `api/workflow/claims/task/claims/search/${taskType}`,\r\n        data: {\r\n          requestType: newRequestType,\r\n          direction: 'asc',\r\n          page: 0,\r\n          pageSize: claims.tasksProcessing.pageSize,\r\n          sortBy: claims.tasksProcessing.sort.by,\r\n          search: newQuery,\r\n          searchBy: claims.tasksProcessing.searchBy,\r\n          filterSearch: [],\r\n        },\r\n      })\r\n      .then((response) => utils.api.handleResponse(response))\r\n      .then((data) => utils.api.handleNewData(data))\r\n      .then((json) => {\r\n        dispatch(getClaimsTaskDashboardDetailSuccess(json, params.taskType, newQuery));\r\n        dispatch(enqueueNotification('claims.processing.notification.getTaskDetailsSuccess', 'success'));\r\n        return json;\r\n      })\r\n      .catch((err) => {\r\n        dispatch(getClaimsTaskDashboardDetailFailure(err, defaultError));\r\n        utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n        return err;\r\n      })\r\n      .finally(() => {\r\n        dispatch(removeLoader('getClaimsTaskDashboardDetail'));\r\n      });\r\n  };\r\n\r\nexport const getClaimsTaskDashboardDetailRequest = (params) => {\r\n  return {\r\n    type: 'CLAIMS_TASK_DASHBOARD_DETAIL_GET_REQUEST',\r\n    payload: params,\r\n  };\r\n};\r\n\r\nexport const getClaimsTaskDashboardDetailSuccess = (json, taskType, newQuery) => {\r\n  return {\r\n    type: 'CLAIMS_TASK_DASHBOARD_DETAIL_GET_SUCCESS',\r\n    payload: {\r\n      taskType,\r\n      items: json.data.searchValue,\r\n      query: newQuery,\r\n    },\r\n  };\r\n};\r\n\r\nexport const getClaimsTaskDashboardDetailFailure = (error) => {\r\n  return {\r\n    type: 'CLAIMS_TASK_DASHBOARD_DETAIL_GET_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}