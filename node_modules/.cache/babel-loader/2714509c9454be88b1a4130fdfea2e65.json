{"ast":null,"code":"import _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\TaskSummaryActions\\\\TaskSummaryActions.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux'; //app\n\nimport { TaskSummaryActionsView } from './TaskSummaryActions.view';\nimport { showModal, hideModal, selectClaimsTasksProcessingSelected, selectClaimsTasksProcessing, getClaimsTasksProcessing, postSanctionsCheck, resetAdhocTaskStatus } from 'stores';\nimport * as utils from 'utils';\nimport { REASSIGN_ENABLED_TASK_STATUSES, TASK_TYPES_NATIVE, RFI_ON_TASKS, API_RESPONSE_OK, TASK_TEAM_TYPE, CLAIM_PROCESSING_REQ_TYPES } from 'consts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TaskSummaryActions() {\n  _s();\n\n  var dispatch = useDispatch(); // Redux management\n\n  var tasksProcessingSelected = useSelector(selectClaimsTasksProcessingSelected);\n  var claimsTasksProcessing = useSelector(selectClaimsTasksProcessing);\n  var selectedTask = tasksProcessingSelected[0];\n  var isReAssignEnabled = !REASSIGN_ENABLED_TASK_STATUSES.includes(selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.status);\n  var taskType = claimsTasksProcessing === null || claimsTasksProcessing === void 0 ? void 0 : claimsTasksProcessing.taskType;\n  var isRFIEnabled = (selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.taskCategory) === TASK_TYPES_NATIVE;\n\n  var reAssign = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!selectedTask) {\n                _context.next = 3;\n                break;\n              }\n\n              _context.next = 3;\n              return dispatch(showModal({\n                component: 'ADD_ASSIGNEE',\n                props: {\n                  title: utils.string.t('app.assign'),\n                  hideCompOnBlur: false,\n                  fullWidth: true,\n                  maxWidth: 'sm',\n                  disableAutoFocus: true,\n                  componentProps: {\n                    taskDetails: [selectedTask],\n                    submitHandler: function submitHandler() {\n                      refreshTasksData();\n                    }\n                  }\n                }\n              }));\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function reAssign() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var updateTaskPriority = function updateTaskPriority() {\n    if (selectedTask) {\n      dispatch(showModal({\n        component: 'SET_PRIORITY',\n        props: {\n          title: utils.string.t('claims.modals.taskFunction.setTaskPriorityTitle'),\n          fullWidth: true,\n          maxWidth: 'sm',\n          disableAutoFocus: true,\n          componentProps: {\n            task: selectedTask,\n            handlers: {\n              cancel: function cancel() {\n                dispatch(hideModal());\n              },\n              submit: function submit() {\n                refreshTasksData();\n                dispatch(hideModal());\n              }\n            }\n          }\n        }\n      }));\n    }\n  };\n\n  var createSanctionsCheck = function createSanctionsCheck() {\n    if (selectedTask) {\n      dispatch(showModal({\n        component: 'CONFIRM',\n        props: {\n          title: utils.string.t('status.alert'),\n          hint: utils.string.t('claims.processing.sanctionsChecksNotification.conformationAlert'),\n          fullWidth: true,\n          maxWidth: 'xs',\n          componentProps: {\n            cancelLabel: utils.string.t('app.no'),\n            confirmLabel: utils.string.t('app.yes'),\n            submitHandler: function submitHandler() {\n              dispatch(postSanctionsCheck({\n                taskId: selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.taskId,\n                rootProcessId: selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.rootProcessId\n              })).then(function (response) {\n                dispatch(hideModal());\n\n                if (response.status === API_RESPONSE_OK) {\n                  dispatch(getClaimsTasksProcessing({\n                    requestType: CLAIM_PROCESSING_REQ_TYPES.search,\n                    taskType: TASK_TEAM_TYPE.myTask\n                  }));\n                }\n              });\n            },\n            cancelHandler: function cancelHandler() {}\n          }\n        }\n      }));\n    }\n  };\n\n  var handleCreateRFITaskLevel = function handleCreateRFITaskLevel() {\n    if (selectedTask) {\n      dispatch(showModal({\n        component: 'CREATE_RFI',\n        props: {\n          title: utils.string.t('claims.processing.taskFunction.createRFI'),\n          hideCompOnBlur: false,\n          fullWidth: true,\n          maxWidth: 'md',\n          disableAutoFocus: true,\n          componentProps: {\n            claim: selectedTask,\n            type: RFI_ON_TASKS,\n            cancelHandler: function cancelHandler() {\n              dispatch(hideModal());\n            }\n          }\n        }\n      }));\n    }\n  };\n\n  var handleEditAdhoc = function handleEditAdhoc() {\n    dispatch(resetAdhocTaskStatus());\n    dispatch(showModal({\n      component: 'CREATE_AD_HOC_TASK',\n      props: {\n        title: utils.string.t('claims.processing.taskFunction.editTask'),\n        hideCompOnBlur: false,\n        fullWidth: true,\n        maxWidth: 'md',\n        disableAutoFocus: true,\n        componentProps: {\n          claim: selectedTask,\n          cancelHandler: function cancelHandler() {\n            dispatch(hideModal());\n          }\n        }\n      }\n    }));\n  };\n\n  var refreshTasksData = function refreshTasksData() {\n    dispatch(getClaimsTasksProcessing({\n      requestType: CLAIM_PROCESSING_REQ_TYPES.search,\n      taskType: taskType\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(TaskSummaryActionsView, {\n    isReAssignEnabled: isReAssignEnabled,\n    selectedTask: selectedTask,\n    isRFIEnabled: isRFIEnabled,\n    handlers: {\n      reAssign: reAssign,\n      updateTaskPriority: updateTaskPriority,\n      createSanctionsCheck: createSanctionsCheck,\n      handleCreateRFITaskLevel: handleCreateRFITaskLevel,\n      handleEditAdhoc: handleEditAdhoc\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TaskSummaryActions, \"c+fdFYDNE+GRhsPyH8i6HyNrhM0=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = TaskSummaryActions;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskSummaryActions\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/TaskSummaryActions/TaskSummaryActions.js"],"names":["React","useSelector","useDispatch","TaskSummaryActionsView","showModal","hideModal","selectClaimsTasksProcessingSelected","selectClaimsTasksProcessing","getClaimsTasksProcessing","postSanctionsCheck","resetAdhocTaskStatus","utils","REASSIGN_ENABLED_TASK_STATUSES","TASK_TYPES_NATIVE","RFI_ON_TASKS","API_RESPONSE_OK","TASK_TEAM_TYPE","CLAIM_PROCESSING_REQ_TYPES","TaskSummaryActions","dispatch","tasksProcessingSelected","claimsTasksProcessing","selectedTask","isReAssignEnabled","includes","status","taskType","isRFIEnabled","taskCategory","reAssign","component","props","title","string","t","hideCompOnBlur","fullWidth","maxWidth","disableAutoFocus","componentProps","taskDetails","submitHandler","refreshTasksData","updateTaskPriority","task","handlers","cancel","submit","createSanctionsCheck","hint","cancelLabel","confirmLabel","taskId","rootProcessId","then","response","requestType","search","myTask","cancelHandler","handleCreateRFITaskLevel","claim","type","handleEditAdhoc"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC,C,CAEA;;AACA,SAASC,sBAAT,QAAuC,2BAAvC;AACA,SACEC,SADF,EAEEC,SAFF,EAGEC,mCAHF,EAIEC,2BAJF,EAKEC,wBALF,EAMEC,kBANF,EAOEC,oBAPF,QAQO,QARP;AASA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SACEC,8BADF,EAEEC,iBAFF,EAGEC,YAHF,EAIEC,eAJF,EAKEC,cALF,EAMEC,0BANF,QAOO,QAPP;;AASA,eAAe,SAASC,kBAAT,GAA8B;AAAA;;AAC3C,MAAMC,QAAQ,GAAGjB,WAAW,EAA5B,CAD2C,CAG3C;;AACA,MAAMkB,uBAAuB,GAAGnB,WAAW,CAACK,mCAAD,CAA3C;AACA,MAAMe,qBAAqB,GAAGpB,WAAW,CAACM,2BAAD,CAAzC;AACA,MAAMe,YAAY,GAAGF,uBAAuB,CAAC,CAAD,CAA5C;AACA,MAAMG,iBAAiB,GAAG,CAACX,8BAA8B,CAACY,QAA/B,CAAwCF,YAAxC,aAAwCA,YAAxC,uBAAwCA,YAAY,CAAEG,MAAtD,CAA3B;AACA,MAAMC,QAAQ,GAAGL,qBAAH,aAAGA,qBAAH,uBAAGA,qBAAqB,CAAEK,QAAxC;AACA,MAAMC,YAAY,GAAG,CAAAL,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAEM,YAAd,MAA+Bf,iBAApD;;AAEA,MAAMgB,QAAQ;AAAA,wEAAG;AAAA;AAAA;AAAA;AAAA;AAAA,mBACXP,YADW;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAEPH,QAAQ,CACZf,SAAS,CAAC;AACR0B,gBAAAA,SAAS,EAAE,cADH;AAERC,gBAAAA,KAAK,EAAE;AACLC,kBAAAA,KAAK,EAAErB,KAAK,CAACsB,MAAN,CAAaC,CAAb,CAAe,YAAf,CADF;AAELC,kBAAAA,cAAc,EAAE,KAFX;AAGLC,kBAAAA,SAAS,EAAE,IAHN;AAILC,kBAAAA,QAAQ,EAAE,IAJL;AAKLC,kBAAAA,gBAAgB,EAAE,IALb;AAMLC,kBAAAA,cAAc,EAAE;AACdC,oBAAAA,WAAW,EAAE,CAAClB,YAAD,CADC;AAEdmB,oBAAAA,aAAa,EAAE,yBAAM;AACnBC,sBAAAA,gBAAgB;AACjB;AAJa;AANX;AAFC,eAAD,CADG,CAFD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAARb,QAAQ;AAAA;AAAA;AAAA,KAAd;;AAuBA,MAAMc,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAC/B,QAAIrB,YAAJ,EAAkB;AAChBH,MAAAA,QAAQ,CACNf,SAAS,CAAC;AACR0B,QAAAA,SAAS,EAAE,cADH;AAERC,QAAAA,KAAK,EAAE;AACLC,UAAAA,KAAK,EAAErB,KAAK,CAACsB,MAAN,CAAaC,CAAb,CAAe,iDAAf,CADF;AAELE,UAAAA,SAAS,EAAE,IAFN;AAGLC,UAAAA,QAAQ,EAAE,IAHL;AAILC,UAAAA,gBAAgB,EAAE,IAJb;AAKLC,UAAAA,cAAc,EAAE;AACdK,YAAAA,IAAI,EAAEtB,YADQ;AAEduB,YAAAA,QAAQ,EAAE;AACRC,cAAAA,MAAM,EAAE,kBAAM;AACZ3B,gBAAAA,QAAQ,CAACd,SAAS,EAAV,CAAR;AACD,eAHO;AAIR0C,cAAAA,MAAM,EAAE,kBAAM;AACZL,gBAAAA,gBAAgB;AAChBvB,gBAAAA,QAAQ,CAACd,SAAS,EAAV,CAAR;AACD;AAPO;AAFI;AALX;AAFC,OAAD,CADH,CAAR;AAuBD;AACF,GA1BD;;AA2BA,MAAM2C,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAM;AACjC,QAAI1B,YAAJ,EAAkB;AAChBH,MAAAA,QAAQ,CACNf,SAAS,CAAC;AACR0B,QAAAA,SAAS,EAAE,SADH;AAERC,QAAAA,KAAK,EAAE;AACLC,UAAAA,KAAK,EAAErB,KAAK,CAACsB,MAAN,CAAaC,CAAb,CAAe,cAAf,CADF;AAELe,UAAAA,IAAI,EAAEtC,KAAK,CAACsB,MAAN,CAAaC,CAAb,CAAe,iEAAf,CAFD;AAGLE,UAAAA,SAAS,EAAE,IAHN;AAILC,UAAAA,QAAQ,EAAE,IAJL;AAKLE,UAAAA,cAAc,EAAE;AACdW,YAAAA,WAAW,EAAEvC,KAAK,CAACsB,MAAN,CAAaC,CAAb,CAAe,QAAf,CADC;AAEdiB,YAAAA,YAAY,EAAExC,KAAK,CAACsB,MAAN,CAAaC,CAAb,CAAe,SAAf,CAFA;AAGdO,YAAAA,aAAa,EAAE,yBAAM;AACnBtB,cAAAA,QAAQ,CAACV,kBAAkB,CAAC;AAAE2C,gBAAAA,MAAM,EAAE9B,YAAF,aAAEA,YAAF,uBAAEA,YAAY,CAAE8B,MAAxB;AAAgCC,gBAAAA,aAAa,EAAE/B,YAAF,aAAEA,YAAF,uBAAEA,YAAY,CAAE+B;AAA7D,eAAD,CAAnB,CAAR,CAA2GC,IAA3G,CACE,UAACC,QAAD,EAAc;AACZpC,gBAAAA,QAAQ,CAACd,SAAS,EAAV,CAAR;;AACA,oBAAIkD,QAAQ,CAAC9B,MAAT,KAAoBV,eAAxB,EAAyC;AACvCI,kBAAAA,QAAQ,CACNX,wBAAwB,CAAC;AAAEgD,oBAAAA,WAAW,EAAEvC,0BAA0B,CAACwC,MAA1C;AAAkD/B,oBAAAA,QAAQ,EAAEV,cAAc,CAAC0C;AAA3E,mBAAD,CADlB,CAAR;AAGD;AACF,eARH;AAUD,aAda;AAedC,YAAAA,aAAa,EAAE,yBAAM,CAAE;AAfT;AALX;AAFC,OAAD,CADH,CAAR;AA4BD;AACF,GA/BD;;AAiCA,MAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,GAAM;AACrC,QAAItC,YAAJ,EAAkB;AAChBH,MAAAA,QAAQ,CACNf,SAAS,CAAC;AACR0B,QAAAA,SAAS,EAAE,YADH;AAERC,QAAAA,KAAK,EAAE;AACLC,UAAAA,KAAK,EAAErB,KAAK,CAACsB,MAAN,CAAaC,CAAb,CAAe,0CAAf,CADF;AAELC,UAAAA,cAAc,EAAE,KAFX;AAGLC,UAAAA,SAAS,EAAE,IAHN;AAILC,UAAAA,QAAQ,EAAE,IAJL;AAKLC,UAAAA,gBAAgB,EAAE,IALb;AAMLC,UAAAA,cAAc,EAAE;AACdsB,YAAAA,KAAK,EAAEvC,YADO;AAEdwC,YAAAA,IAAI,EAAEhD,YAFQ;AAGd6C,YAAAA,aAAa,EAAE,yBAAM;AACnBxC,cAAAA,QAAQ,CAACd,SAAS,EAAV,CAAR;AACD;AALa;AANX;AAFC,OAAD,CADH,CAAR;AAmBD;AACF,GAtBD;;AAwBA,MAAM0D,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5B5C,IAAAA,QAAQ,CAACT,oBAAoB,EAArB,CAAR;AACAS,IAAAA,QAAQ,CACNf,SAAS,CAAC;AACR0B,MAAAA,SAAS,EAAE,oBADH;AAERC,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAErB,KAAK,CAACsB,MAAN,CAAaC,CAAb,CAAe,yCAAf,CADF;AAELC,QAAAA,cAAc,EAAE,KAFX;AAGLC,QAAAA,SAAS,EAAE,IAHN;AAILC,QAAAA,QAAQ,EAAE,IAJL;AAKLC,QAAAA,gBAAgB,EAAE,IALb;AAMLC,QAAAA,cAAc,EAAE;AACdsB,UAAAA,KAAK,EAAEvC,YADO;AAEdqC,UAAAA,aAAa,EAAE,yBAAM;AACnBxC,YAAAA,QAAQ,CAACd,SAAS,EAAV,CAAR;AACD;AAJa;AANX;AAFC,KAAD,CADH,CAAR;AAkBD,GApBD;;AAsBA,MAAMqC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC7BvB,IAAAA,QAAQ,CAACX,wBAAwB,CAAC;AAAEgD,MAAAA,WAAW,EAAEvC,0BAA0B,CAACwC,MAA1C;AAAkD/B,MAAAA,QAAQ,EAAEA;AAA5D,KAAD,CAAzB,CAAR;AACD,GAFD;;AAIA,sBACE,QAAC,sBAAD;AACE,IAAA,iBAAiB,EAAEH,iBADrB;AAEE,IAAA,YAAY,EAAED,YAFhB;AAGE,IAAA,YAAY,EAAEK,YAHhB;AAIE,IAAA,QAAQ,EAAE;AACRE,MAAAA,QAAQ,EAARA,QADQ;AAERc,MAAAA,kBAAkB,EAAlBA,kBAFQ;AAGRK,MAAAA,oBAAoB,EAApBA,oBAHQ;AAIRY,MAAAA,wBAAwB,EAAxBA,wBAJQ;AAKRG,MAAAA,eAAe,EAAfA;AALQ;AAJZ;AAAA;AAAA;AAAA;AAAA,UADF;AAcD;;GA9JuB7C,kB;UACLhB,W,EAGeD,W,EACFA,W;;;KALRiB,kB","sourcesContent":["import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\n//app\r\nimport { TaskSummaryActionsView } from './TaskSummaryActions.view';\r\nimport {\r\n  showModal,\r\n  hideModal,\r\n  selectClaimsTasksProcessingSelected,\r\n  selectClaimsTasksProcessing,\r\n  getClaimsTasksProcessing,\r\n  postSanctionsCheck,\r\n  resetAdhocTaskStatus,\r\n} from 'stores';\r\nimport * as utils from 'utils';\r\nimport {\r\n  REASSIGN_ENABLED_TASK_STATUSES,\r\n  TASK_TYPES_NATIVE,\r\n  RFI_ON_TASKS,\r\n  API_RESPONSE_OK,\r\n  TASK_TEAM_TYPE,\r\n  CLAIM_PROCESSING_REQ_TYPES,\r\n} from 'consts';\r\n\r\nexport default function TaskSummaryActions() {\r\n  const dispatch = useDispatch();\r\n\r\n  // Redux management\r\n  const tasksProcessingSelected = useSelector(selectClaimsTasksProcessingSelected);\r\n  const claimsTasksProcessing = useSelector(selectClaimsTasksProcessing);\r\n  const selectedTask = tasksProcessingSelected[0];\r\n  const isReAssignEnabled = !REASSIGN_ENABLED_TASK_STATUSES.includes(selectedTask?.status);\r\n  const taskType = claimsTasksProcessing?.taskType;\r\n  const isRFIEnabled = selectedTask?.taskCategory === TASK_TYPES_NATIVE;\r\n\r\n  const reAssign = async () => {\r\n    if (selectedTask) {\r\n      await dispatch(\r\n        showModal({\r\n          component: 'ADD_ASSIGNEE',\r\n          props: {\r\n            title: utils.string.t('app.assign'),\r\n            hideCompOnBlur: false,\r\n            fullWidth: true,\r\n            maxWidth: 'sm',\r\n            disableAutoFocus: true,\r\n            componentProps: {\r\n              taskDetails: [selectedTask],\r\n              submitHandler: () => {\r\n                refreshTasksData();\r\n              },\r\n            },\r\n          },\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const updateTaskPriority = () => {\r\n    if (selectedTask) {\r\n      dispatch(\r\n        showModal({\r\n          component: 'SET_PRIORITY',\r\n          props: {\r\n            title: utils.string.t('claims.modals.taskFunction.setTaskPriorityTitle'),\r\n            fullWidth: true,\r\n            maxWidth: 'sm',\r\n            disableAutoFocus: true,\r\n            componentProps: {\r\n              task: selectedTask,\r\n              handlers: {\r\n                cancel: () => {\r\n                  dispatch(hideModal());\r\n                },\r\n                submit: () => {\r\n                  refreshTasksData();\r\n                  dispatch(hideModal());\r\n                },\r\n              },\r\n            },\r\n          },\r\n        })\r\n      );\r\n    }\r\n  };\r\n  const createSanctionsCheck = () => {\r\n    if (selectedTask) {\r\n      dispatch(\r\n        showModal({\r\n          component: 'CONFIRM',\r\n          props: {\r\n            title: utils.string.t('status.alert'),\r\n            hint: utils.string.t('claims.processing.sanctionsChecksNotification.conformationAlert'),\r\n            fullWidth: true,\r\n            maxWidth: 'xs',\r\n            componentProps: {\r\n              cancelLabel: utils.string.t('app.no'),\r\n              confirmLabel: utils.string.t('app.yes'),\r\n              submitHandler: () => {\r\n                dispatch(postSanctionsCheck({ taskId: selectedTask?.taskId, rootProcessId: selectedTask?.rootProcessId })).then(\r\n                  (response) => {\r\n                    dispatch(hideModal());\r\n                    if (response.status === API_RESPONSE_OK) {\r\n                      dispatch(\r\n                        getClaimsTasksProcessing({ requestType: CLAIM_PROCESSING_REQ_TYPES.search, taskType: TASK_TEAM_TYPE.myTask })\r\n                      );\r\n                    }\r\n                  }\r\n                );\r\n              },\r\n              cancelHandler: () => {},\r\n            },\r\n          },\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleCreateRFITaskLevel = () => {\r\n    if (selectedTask) {\r\n      dispatch(\r\n        showModal({\r\n          component: 'CREATE_RFI',\r\n          props: {\r\n            title: utils.string.t('claims.processing.taskFunction.createRFI'),\r\n            hideCompOnBlur: false,\r\n            fullWidth: true,\r\n            maxWidth: 'md',\r\n            disableAutoFocus: true,\r\n            componentProps: {\r\n              claim: selectedTask,\r\n              type: RFI_ON_TASKS,\r\n              cancelHandler: () => {\r\n                dispatch(hideModal());\r\n              },\r\n            },\r\n          },\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleEditAdhoc = () => {\r\n    dispatch(resetAdhocTaskStatus());\r\n    dispatch(\r\n      showModal({\r\n        component: 'CREATE_AD_HOC_TASK',\r\n        props: {\r\n          title: utils.string.t('claims.processing.taskFunction.editTask'),\r\n          hideCompOnBlur: false,\r\n          fullWidth: true,\r\n          maxWidth: 'md',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            claim: selectedTask,\r\n            cancelHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const refreshTasksData = () => {\r\n    dispatch(getClaimsTasksProcessing({ requestType: CLAIM_PROCESSING_REQ_TYPES.search, taskType: taskType }));\r\n  };\r\n\r\n  return (\r\n    <TaskSummaryActionsView\r\n      isReAssignEnabled={isReAssignEnabled}\r\n      selectedTask={selectedTask}\r\n      isRFIEnabled={isRFIEnabled}\r\n      handlers={{\r\n        reAssign,\r\n        updateTaskPriority,\r\n        createSanctionsCheck,\r\n        handleCreateRFITaskLevel,\r\n        handleEditAdhoc,\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}