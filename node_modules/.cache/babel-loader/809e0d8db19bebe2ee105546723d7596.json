{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n// app\nimport { addLoader, authLogout, removeLoader } from 'stores';\nimport * as utils from 'utils';\nexport var getSlipDownloadForProcessingInstruction = function getSlipDownloadForProcessingInstruction(params, riskRef, isEndorsement) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var name = params.name,\n        folderUuid = params.folderUuid,\n        uuid = params.uuid,\n        path = params.path;\n    var policyUID = riskRef.policyUID,\n        departmentCode = riskRef.departmentCode,\n        xbInstance = riskRef.xbInstance;\n    var defaultError = {\n      file: 'stores/processingInstructions.actions.getSlipDownloadForProcessingInstruction'\n    };\n    dispatch(addLoader('getSlipDownloadForProcessingInstruction'));\n    dispatch(getSlipDownloadForProcessingInstructionRequest(params));\n\n    if (!departmentCode || !uuid || !policyUID || !folderUuid || !path || !xbInstance) {\n      dispatch(removeLoader('getSlipDownloadForProcessingInstruction'));\n      dispatch(getSlipDownloadForProcessingInstructionFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: utils.string.t('processingInstructions.missingFileParameters')\n      })));\n      return;\n    }\n\n    var extension = path.split('.').pop();\n    var documentName = name + '.' + extension;\n    utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.dmsService,\n      path: 'gxb/document/download',\n      params: _objectSpread({\n        department: departmentCode,\n        policyUUID: policyUID,\n        folderUUID: folderUuid,\n        documentUUID: uuid,\n        xbInstance: xbInstance\n      }, isEndorsement && {\n        endorsementUUID: riskRef === null || riskRef === void 0 ? void 0 : riskRef.bulkEndorsementUid\n      })\n    }).then(function (response) {\n      return response.blob();\n    }).then(function (blob) {\n      return utils.file.download(blob, documentName);\n    })[\"catch\"](function (err) {\n      var errorParams = {\n        file: 'stores/processingInstructions.actions.getSlipDownloadForProcessingInstruction',\n        message: utils.string.t('processingInstructions.apiFetchError')\n      };\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n    })[\"finally\"](function () {\n      dispatch(removeLoader('getSlipDownloadForProcessingInstruction'));\n    });\n  };\n};\nexport var getSlipDownloadForProcessingInstructionRequest = function getSlipDownloadForProcessingInstructionRequest(params) {\n  return {\n    type: 'PROCESSING_INSTRUCTIONS_GET_SLIP_DOWNLOAD_REQUEST',\n    payload: params\n  };\n};\nexport var getSlipDownloadForProcessingInstructionSuccess = function getSlipDownloadForProcessingInstructionSuccess(responseData) {\n  return {\n    type: 'PROCESSING_INSTRUCTIONS_GET_SLIP_DOWNLOAD_SUCCESS',\n    payload: responseData\n  };\n};\nexport var getSlipDownloadForProcessingInstructionFailure = function getSlipDownloadForProcessingInstructionFailure(error) {\n  return {\n    type: 'PROCESSING_INSTRUCTIONS_GET_SLIP_DOWNLOAD_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/processingInstructions/processingInstructions.actions.getSlipDownloadForProcessingInstruction.js"],"names":["addLoader","authLogout","removeLoader","utils","getSlipDownloadForProcessingInstruction","params","riskRef","isEndorsement","dispatch","getState","auth","user","endpoint","config","vars","name","folderUuid","uuid","path","policyUID","departmentCode","xbInstance","defaultError","file","getSlipDownloadForProcessingInstructionRequest","getSlipDownloadForProcessingInstructionFailure","message","string","t","extension","split","pop","documentName","api","post","token","accessToken","dmsService","department","policyUUID","folderUUID","documentUUID","endorsementUUID","bulkEndorsementUid","then","response","blob","download","err","errorParams","handleError","handleUnauthorized","type","payload","getSlipDownloadForProcessingInstructionSuccess","responseData","error"],"mappings":"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","sourcesContent":["// app\r\nimport { addLoader, authLogout, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const getSlipDownloadForProcessingInstruction = (params, riskRef, isEndorsement) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n  const { name, folderUuid, uuid, path } = params;\r\n  const { policyUID, departmentCode, xbInstance } = riskRef;\r\n\r\n  const defaultError = {\r\n    file: 'stores/processingInstructions.actions.getSlipDownloadForProcessingInstruction',\r\n  };\r\n  dispatch(addLoader('getSlipDownloadForProcessingInstruction'));\r\n  dispatch(getSlipDownloadForProcessingInstructionRequest(params));\r\n\r\n  if (!departmentCode || !uuid || !policyUID || !folderUuid || !path || !xbInstance) {\r\n    dispatch(removeLoader('getSlipDownloadForProcessingInstruction'));\r\n    dispatch(\r\n      getSlipDownloadForProcessingInstructionFailure({\r\n        ...defaultError,\r\n        message: utils.string.t('processingInstructions.missingFileParameters'),\r\n      })\r\n    );\r\n    return;\r\n  }\r\n\r\n  const extension = path.split('.').pop();\r\n  const documentName = name + '.' + extension;\r\n\r\n  utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.dmsService,\r\n      path: 'gxb/document/download',\r\n      params: {\r\n        department: departmentCode,\r\n        policyUUID: policyUID,\r\n        folderUUID: folderUuid,\r\n        documentUUID: uuid,\r\n        xbInstance: xbInstance,\r\n        ...(isEndorsement && { endorsementUUID: riskRef?.bulkEndorsementUid }),\r\n      },\r\n    })\r\n    .then((response) => response.blob())\r\n    .then((blob) => utils.file.download(blob, documentName))\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        file: 'stores/processingInstructions.actions.getSlipDownloadForProcessingInstruction',\r\n        message: utils.string.t('processingInstructions.apiFetchError'),\r\n      };\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('getSlipDownloadForProcessingInstruction'));\r\n    });\r\n};\r\n\r\nexport const getSlipDownloadForProcessingInstructionRequest = (params) => {\r\n  return {\r\n    type: 'PROCESSING_INSTRUCTIONS_GET_SLIP_DOWNLOAD_REQUEST',\r\n    payload: params,\r\n  };\r\n};\r\n\r\nexport const getSlipDownloadForProcessingInstructionSuccess = (responseData) => {\r\n  return {\r\n    type: 'PROCESSING_INSTRUCTIONS_GET_SLIP_DOWNLOAD_SUCCESS',\r\n    payload: responseData,\r\n  };\r\n};\r\n\r\nexport const getSlipDownloadForProcessingInstructionFailure = (error) => {\r\n  return {\r\n    type: 'PROCESSING_INSTRUCTIONS_GET_SLIP_DOWNLOAD_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}