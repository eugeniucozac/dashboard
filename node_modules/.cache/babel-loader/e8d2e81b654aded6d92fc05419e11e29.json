{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\forms\\\\CreateRFI\\\\CreateRFI.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as Yup from 'yup';\nimport moment from 'moment';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup'; //app\n\nimport { CreateRFIView } from './CreateRFI.view';\nimport { REMINDER_DEFAULT, REMINDER_VALUES, REMINDER_NOT_REQUIRED, PRIORITIES_ID, RFI, ORGANIZATIONS, DMS_TASK_CONTEXT_TYPE_RFI } from 'consts';\nimport { selectPriorities, selectClaimsAssignedToUsers, selectRefDataQueryCodes, postSaveRFI, postUpdateRFI, selectUserEmail, selectUserOrg, selectUser, selectRefDataNewProcessType, selectCreateRfiInfo, setDmsTaskContextType } from 'stores';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nCreateRFI.propTypes = {\n  claim: PropTypes.object,\n  cancelHandler: PropTypes.func,\n  type: PropTypes.string\n};\nexport default function CreateRFI(props) {\n  _s();\n\n  var _useSelector, _selectAssignees$item, _rfiProcessTypes$find, _priorities$find, _priorities$find2, _teamList$find;\n\n  var dispatch = useDispatch();\n  var claim = props.claim,\n      rfiType = props.rfiType,\n      handleFormStatus = props.handleFormStatus; // Redux\n\n  var priorities = useSelector(selectPriorities);\n  var queryCodes = useSelector(selectRefDataQueryCodes);\n  var selectAssignees = useSelector(selectClaimsAssignedToUsers);\n  var createRfiInfo = useSelector(selectCreateRfiInfo);\n  var userEmail = useSelector(selectUserEmail);\n  var userOrg = useSelector(selectUserOrg);\n  var userId = (_useSelector = useSelector(selectUser)) === null || _useSelector === void 0 ? void 0 : _useSelector.id;\n  var rfiProcessTypes = useSelector(selectRefDataNewProcessType);\n  var assignedToUsers = selectAssignees === null || selectAssignees === void 0 ? void 0 : (_selectAssignees$item = selectAssignees.items) === null || _selectAssignees$item === void 0 ? void 0 : _selectAssignees$item.filter(function (user) {\n    return user.email !== userEmail;\n  });\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      sendToUsers = _useState2[0],\n      setSendToUSers = _useState2[1];\n\n  var claimId = (claim === null || claim === void 0 ? void 0 : claim.businessProcessID) || (claim === null || claim === void 0 ? void 0 : claim.claimId) || null;\n  var claimReference = (claim === null || claim === void 0 ? void 0 : claim.claimReference) || (claim === null || claim === void 0 ? void 0 : claim.claimRef) || null;\n  var rfiProcessId = rfiProcessTypes === null || rfiProcessTypes === void 0 ? void 0 : (_rfiProcessTypes$find = rfiProcessTypes.find(function (type) {\n    return (type === null || type === void 0 ? void 0 : type.processTypeDetails) === RFI;\n  })) === null || _rfiProcessTypes$find === void 0 ? void 0 : _rfiProcessTypes$find.processTypeID;\n  var claimRef = (claim === null || claim === void 0 ? void 0 : claim.claimReference) || (claim === null || claim === void 0 ? void 0 : claim.taskRef) || (claim === null || claim === void 0 ? void 0 : claim.lossRef) || '';\n  var teamList = [ORGANIZATIONS.mphasis, ORGANIZATIONS.ardonagh];\n  var maxDescLimit = 1000;\n  var fields = [{\n    name: 'queryCode',\n    type: 'autocompletemui',\n    options: queryCodes || [],\n    label: utils.string.t('claims.columns.createRFIColumns.queryCode'),\n    optionKey: 'queryCodeDetails',\n    optionLabel: 'queryCodeDescription',\n    validation: Yup.object().nullable().required(utils.string.t('validation.required')),\n    value: queryCodes === null || queryCodes === void 0 ? void 0 : queryCodes.find(function (code) {\n      return code.queryCodeDetails === (createRfiInfo === null || createRfiInfo === void 0 ? void 0 : createRfiInfo.queryCode);\n    })\n  }, {\n    name: 'priority',\n    type: 'select',\n    options: priorities || [],\n    label: utils.string.t('claims.columns.createRFIColumns.priority'),\n    optionKey: 'id',\n    optionLabel: 'description',\n    value: priorities === null || priorities === void 0 ? void 0 : (_priorities$find = priorities.find(function (_ref) {\n      var id = _ref.id;\n      return id.toString() === (createRfiInfo === null || createRfiInfo === void 0 ? void 0 : createRfiInfo.priority);\n    })) === null || _priorities$find === void 0 ? void 0 : _priorities$find.id,\n    validation: Yup.string().required(utils.string.t('validation.required')),\n    defaultValue: priorities === null || priorities === void 0 ? void 0 : (_priorities$find2 = priorities.find(function (_ref2) {\n      var id = _ref2.id;\n      return id === PRIORITIES_ID[1];\n    })) === null || _priorities$find2 === void 0 ? void 0 : _priorities$find2.id\n  }, {\n    name: 'teams',\n    type: 'select',\n    options: teamList || [],\n    label: utils.string.t('claims.columns.createRFIColumns.team'),\n    optionKey: 'label',\n    optionLabel: 'label',\n    value: (_teamList$find = teamList.find(function (_ref3) {\n      var label = _ref3.label;\n      return label === (createRfiInfo === null || createRfiInfo === void 0 ? void 0 : createRfiInfo.sendToTeam);\n    })) === null || _teamList$find === void 0 ? void 0 : _teamList$find.label,\n    validation: Yup.string().required(utils.string.t('validation.required'))\n  }, {\n    name: 'sendTo',\n    type: 'autocompletemui',\n    options: sendToUsers || [],\n    label: utils.string.t('claims.columns.createRFIColumns.sendTo'),\n    optionKey: 'email',\n    optionLabel: 'fullName',\n    value: assignedToUsers === null || assignedToUsers === void 0 ? void 0 : assignedToUsers.find(function (_ref4) {\n      var email = _ref4.email;\n      return email === (createRfiInfo === null || createRfiInfo === void 0 ? void 0 : createRfiInfo.sendToUser);\n    }),\n    validation: Yup.object().nullable().required(utils.string.t('validation.required'))\n  }, {\n    name: 'reminder',\n    type: 'autocompletemui',\n    label: utils.string.t('claims.processing.taskDetailsLabels.reminder'),\n    options: REMINDER_VALUES || [],\n    optionKey: 'id',\n    optionLabel: 'name',\n    value: (REMINDER_VALUES === null || REMINDER_VALUES === void 0 ? void 0 : REMINDER_VALUES.find(function (item) {\n      return item.id === (createRfiInfo === null || createRfiInfo === void 0 ? void 0 : createRfiInfo.reminderDate);\n    })) || (REMINDER_VALUES === null || REMINDER_VALUES === void 0 ? void 0 : REMINDER_VALUES.find(function (item) {\n      return item.id === REMINDER_DEFAULT;\n    }))\n  }, {\n    type: 'datepicker',\n    name: 'targetDueDate',\n    icon: 'TodayIcon',\n    label: utils.string.t('claims.processing.taskDetailsLabels.targetDueDate'),\n    muiComponentProps: {\n      fullWidth: true\n    },\n    validation: Yup.date().nullable().test('targetDueDate', utils.string.t('claims.processing.validation.targetLessThanCreatedDate'), function (value) {\n      var createdDate = new moment();\n      return value && createdDate ? moment(value).isSameOrAfter(createdDate, 'day') : true;\n    }),\n    outputFormat: 'iso',\n    value: moment(createRfiInfo === null || createRfiInfo === void 0 ? void 0 : createRfiInfo.targetDueDate) || new moment()\n  }, {\n    name: 'description',\n    type: 'textarea',\n    label: utils.string.t('claims.processing.taskDetailsLabels.description'),\n    muiComponentProps: {\n      inputProps: {\n        maxLength: 1000\n      },\n      multiline: true,\n      minRows: 3,\n      maxRows: 5\n    },\n    value: createRfiInfo === null || createRfiInfo === void 0 ? void 0 : createRfiInfo.description,\n    validation: Yup.string().required(utils.string.t('validation.required'))\n  }];\n  var defaultValues = utils.form.getInitialValues(fields);\n  var validationSchema = utils.form.getValidationSchema(fields);\n\n  var _useForm = useForm(_objectSpread({\n    defaultValues: defaultValues\n  }, validationSchema && {\n    resolver: yupResolver(validationSchema)\n  })),\n      control = _useForm.control,\n      errors = _useForm.errors,\n      handleSubmit = _useForm.handleSubmit,\n      watch = _useForm.watch,\n      isDirty = _useForm.formState.isDirty;\n\n  var qcWatcher = watch('queryCode');\n  var targetDateWatcher = watch('targetDueDate');\n  var selectedTeam = watch('teams');\n  useEffect(function () {\n    // It was an important condition for earlier build of RFI. so currently commenting as it is not mentioned in current US.\n    // const queryObj = queryCodes.find((query) => qcWatcher?.queryCodeDetails === query.queryCodeDetails);\n    // if (qcWatcher && !createRfiInfo?.targetDueDate) {\n    //   const slaTargetDate = getTargetBusinessDays(new Date(), queryObj?.sla);\n    //   setValue('targetDueDate', slaTargetDate);\n    // }\n    if (selectedTeam) {\n      var userList = assignedToUsers.filter(function (user) {\n        return user.organisationName === selectedTeam;\n      });\n      setSendToUSers(userList);\n    }\n  }, [qcWatcher, selectedTeam]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    if (isDirty) {\n      handleFormStatus();\n    }\n  }, [isDirty, errors]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    if (targetDateWatcher) {\n      var reminderDays = utils.date.diffDays(new moment(), new moment(targetDateWatcher));\n      var remObj = [];\n      REMINDER_VALUES.forEach(function (reminder) {\n        if (reminder.days <= reminderDays) {\n          remObj.push(REMINDER_VALUES.find(function (list) {\n            return reminder.id === list.id;\n          }));\n        }\n      });\n      remObj.push(REMINDER_VALUES.find(function (list) {\n        return list.id === REMINDER_NOT_REQUIRED;\n      }));\n    }\n  }, [targetDateWatcher]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var handleCreateRFI = function handleCreateRFI(values, nextHandler) {\n    var _claim$lossDetailID, _claim$lossDetailId, _claim$rootProcessId, _claim$processID, _values$queryCode, _values$queryCode2, _values$reminder;\n\n    var sendToObj = assignedToUsers.find(function (user) {\n      var _values$sendTo;\n\n      return user.email === (values === null || values === void 0 ? void 0 : (_values$sendTo = values.sendTo) === null || _values$sendTo === void 0 ? void 0 : _values$sendTo.email);\n    });\n    var rfiDetails = {\n      caseIncidentRefType: rfiType,\n      caseInstanceId: claim === null || claim === void 0 ? void 0 : claim.caseIncidentID,\n      claimId: (claimId === null || claimId === void 0 ? void 0 : claimId.toString()) || null,\n      claimRef: claimReference,\n      description: values.description,\n      lossId: (claim === null || claim === void 0 ? void 0 : (_claim$lossDetailID = claim.lossDetailID) === null || _claim$lossDetailID === void 0 ? void 0 : _claim$lossDetailID.toString()) || (claim === null || claim === void 0 ? void 0 : (_claim$lossDetailId = claim.lossDetailId) === null || _claim$lossDetailId === void 0 ? void 0 : _claim$lossDetailId.toString()) || null,\n      lossRef: (claim === null || claim === void 0 ? void 0 : claim.lossRef) || null,\n      priority: (values === null || values === void 0 ? void 0 : values.priority) || null,\n      processInstanceId: (claim === null || claim === void 0 ? void 0 : (_claim$rootProcessId = claim.rootProcessId) === null || _claim$rootProcessId === void 0 ? void 0 : _claim$rootProcessId.toString()) || (claim === null || claim === void 0 ? void 0 : (_claim$processID = claim.processID) === null || _claim$processID === void 0 ? void 0 : _claim$processID.toString()) || null,\n      processTypeId: rfiProcessId,\n      queryCode: values === null || values === void 0 ? void 0 : (_values$queryCode = values.queryCode) === null || _values$queryCode === void 0 ? void 0 : _values$queryCode.queryCodeDetails,\n      queryCodeDescription: values === null || values === void 0 ? void 0 : (_values$queryCode2 = values.queryCode) === null || _values$queryCode2 === void 0 ? void 0 : _values$queryCode2.queryCodeDescription,\n      reminderDate: (values === null || values === void 0 ? void 0 : (_values$reminder = values.reminder) === null || _values$reminder === void 0 ? void 0 : _values$reminder.id) || null,\n      requestedByTeam: userOrg,\n      requestedByUser: userEmail,\n      sendToTeam: values === null || values === void 0 ? void 0 : values.teams,\n      sendToUser: sendToObj === null || sendToObj === void 0 ? void 0 : sendToObj.email,\n      targetDueDate: values.targetDueDate,\n      taskId: (createRfiInfo === null || createRfiInfo === void 0 ? void 0 : createRfiInfo.taskId) || null,\n      taskRef: (createRfiInfo === null || createRfiInfo === void 0 ? void 0 : createRfiInfo.taskRef) || null,\n      userId: userId\n    };\n\n    if (utils.generic.isValidObject(createRfiInfo, 'processId')) {\n      var _claim$rootProcessId2, _claim$processID2;\n\n      rfiDetails = _objectSpread(_objectSpread({}, rfiDetails), {}, {\n        processId: (createRfiInfo === null || createRfiInfo === void 0 ? void 0 : createRfiInfo.processId) || '',\n        processInstanceId: (createRfiInfo === null || createRfiInfo === void 0 ? void 0 : createRfiInfo.processId) || (claim === null || claim === void 0 ? void 0 : (_claim$rootProcessId2 = claim.rootProcessId) === null || _claim$rootProcessId2 === void 0 ? void 0 : _claim$rootProcessId2.toString()) || (claim === null || claim === void 0 ? void 0 : (_claim$processID2 = claim.processID) === null || _claim$processID2 === void 0 ? void 0 : _claim$processID2.toString()) || null\n      });\n    }\n\n    dispatch(utils.generic.isValidObject(createRfiInfo, 'processId') ? postUpdateRFI(rfiDetails) : postSaveRFI(rfiDetails)).then(function (response) {\n      if (response) {\n        var _response$data;\n\n        dispatch(setDmsTaskContextType({\n          type: DMS_TASK_CONTEXT_TYPE_RFI,\n          refId: response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.taskId\n        }));\n        nextHandler();\n      }\n    });\n  };\n\n  var submitForm = function submitForm(values) {\n    handleCreateRFI(values, props.handleNextSubmit);\n  };\n\n  var skipSubmit = function skipSubmit(values) {\n    handleCreateRFI(values, function () {\n      return props.handleSkip(2);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(CreateRFIView, _objectSpread(_objectSpread({}, props), {}, {\n    claimRef: claimRef,\n    fields: fields,\n    formProps: {\n      control: control,\n      errors: errors,\n      isDirty: isDirty,\n      watch: watch,\n      handleSubmit: handleSubmit\n    },\n    maxDescLimit: maxDescLimit,\n    handlers: {\n      submitForm: submitForm,\n      skipSubmit: skipSubmit\n    }\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 253,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CreateRFI, \"9gUKXQYRPM3Yw5D4RgH6IH8Fu1Y=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useForm];\n});\n\n_c = CreateRFI;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateRFI\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/forms/CreateRFI/CreateRFI.js"],"names":["React","useEffect","useState","PropTypes","useDispatch","useSelector","Yup","moment","useForm","yupResolver","CreateRFIView","REMINDER_DEFAULT","REMINDER_VALUES","REMINDER_NOT_REQUIRED","PRIORITIES_ID","RFI","ORGANIZATIONS","DMS_TASK_CONTEXT_TYPE_RFI","selectPriorities","selectClaimsAssignedToUsers","selectRefDataQueryCodes","postSaveRFI","postUpdateRFI","selectUserEmail","selectUserOrg","selectUser","selectRefDataNewProcessType","selectCreateRfiInfo","setDmsTaskContextType","utils","CreateRFI","propTypes","claim","object","cancelHandler","func","type","string","props","dispatch","rfiType","handleFormStatus","priorities","queryCodes","selectAssignees","createRfiInfo","userEmail","userOrg","userId","id","rfiProcessTypes","assignedToUsers","items","filter","user","email","sendToUsers","setSendToUSers","claimId","businessProcessID","claimReference","claimRef","rfiProcessId","find","processTypeDetails","processTypeID","taskRef","lossRef","teamList","mphasis","ardonagh","maxDescLimit","fields","name","options","label","t","optionKey","optionLabel","validation","nullable","required","value","code","queryCodeDetails","queryCode","toString","priority","defaultValue","sendToTeam","sendToUser","item","reminderDate","icon","muiComponentProps","fullWidth","date","test","createdDate","isSameOrAfter","outputFormat","targetDueDate","inputProps","maxLength","multiline","minRows","maxRows","description","defaultValues","form","getInitialValues","validationSchema","getValidationSchema","resolver","control","errors","handleSubmit","watch","isDirty","formState","qcWatcher","targetDateWatcher","selectedTeam","userList","organisationName","reminderDays","diffDays","remObj","forEach","reminder","days","push","list","handleCreateRFI","values","nextHandler","sendToObj","sendTo","rfiDetails","caseIncidentRefType","caseInstanceId","caseIncidentID","lossId","lossDetailID","lossDetailId","processInstanceId","rootProcessId","processID","processTypeId","queryCodeDescription","requestedByTeam","requestedByUser","teams","taskId","generic","isValidObject","processId","then","response","refId","data","submitForm","handleNextSubmit","skipSubmit","handleSkip"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport * as Yup from 'yup';\r\nimport moment from 'moment';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n\r\n//app\r\nimport { CreateRFIView } from './CreateRFI.view';\r\nimport {\r\n  REMINDER_DEFAULT,\r\n  REMINDER_VALUES,\r\n  REMINDER_NOT_REQUIRED,\r\n  PRIORITIES_ID,\r\n  RFI,\r\n  ORGANIZATIONS,\r\n  DMS_TASK_CONTEXT_TYPE_RFI,\r\n} from 'consts';\r\nimport {\r\n  selectPriorities,\r\n  selectClaimsAssignedToUsers,\r\n  selectRefDataQueryCodes,\r\n  postSaveRFI,\r\n  postUpdateRFI,\r\n  selectUserEmail,\r\n  selectUserOrg,\r\n  selectUser,\r\n  selectRefDataNewProcessType,\r\n  selectCreateRfiInfo,\r\n  setDmsTaskContextType,\r\n} from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nCreateRFI.propTypes = {\r\n  claim: PropTypes.object,\r\n  cancelHandler: PropTypes.func,\r\n  type: PropTypes.string,\r\n};\r\n\r\nexport default function CreateRFI(props) {\r\n  const dispatch = useDispatch();\r\n\r\n  const { claim, rfiType, handleFormStatus } = props;\r\n\r\n  // Redux\r\n  const priorities = useSelector(selectPriorities);\r\n  const queryCodes = useSelector(selectRefDataQueryCodes);\r\n  const selectAssignees = useSelector(selectClaimsAssignedToUsers);\r\n  const createRfiInfo = useSelector(selectCreateRfiInfo);\r\n  const userEmail = useSelector(selectUserEmail);\r\n  const userOrg = useSelector(selectUserOrg);\r\n  const userId = useSelector(selectUser)?.id;\r\n  const rfiProcessTypes = useSelector(selectRefDataNewProcessType);\r\n\r\n  const assignedToUsers = selectAssignees?.items?.filter((user) => user.email !== userEmail);\r\n\r\n  const [sendToUsers, setSendToUSers] = useState();\r\n\r\n  const claimId = claim?.businessProcessID || claim?.claimId || null;\r\n  const claimReference = claim?.claimReference || claim?.claimRef || null;\r\n  const rfiProcessId = rfiProcessTypes?.find((type) => type?.processTypeDetails === RFI)?.processTypeID;\r\n  const claimRef = claim?.claimReference || claim?.taskRef || claim?.lossRef || '';\r\n  const teamList = [ORGANIZATIONS.mphasis, ORGANIZATIONS.ardonagh];\r\n  const maxDescLimit = 1000;\r\n\r\n  const fields = [\r\n    {\r\n      name: 'queryCode',\r\n      type: 'autocompletemui',\r\n      options: queryCodes || [],\r\n      label: utils.string.t('claims.columns.createRFIColumns.queryCode'),\r\n      optionKey: 'queryCodeDetails',\r\n      optionLabel: 'queryCodeDescription',\r\n      validation: Yup.object().nullable().required(utils.string.t('validation.required')),\r\n      value: queryCodes?.find((code) => code.queryCodeDetails === createRfiInfo?.queryCode),\r\n    },\r\n    {\r\n      name: 'priority',\r\n      type: 'select',\r\n      options: priorities || [],\r\n      label: utils.string.t('claims.columns.createRFIColumns.priority'),\r\n      optionKey: 'id',\r\n      optionLabel: 'description',\r\n      value: priorities?.find(({ id }) => id.toString() === createRfiInfo?.priority)?.id,\r\n      validation: Yup.string().required(utils.string.t('validation.required')),\r\n      defaultValue: priorities?.find(({ id }) => id === PRIORITIES_ID[1])?.id,\r\n    },\r\n    {\r\n      name: 'teams',\r\n      type: 'select',\r\n      options: teamList || [],\r\n      label: utils.string.t('claims.columns.createRFIColumns.team'),\r\n      optionKey: 'label',\r\n      optionLabel: 'label',\r\n      value: teamList.find(({ label }) => label === createRfiInfo?.sendToTeam)?.label,\r\n      validation: Yup.string().required(utils.string.t('validation.required')),\r\n    },\r\n    {\r\n      name: 'sendTo',\r\n      type: 'autocompletemui',\r\n      options: sendToUsers || [],\r\n      label: utils.string.t('claims.columns.createRFIColumns.sendTo'),\r\n      optionKey: 'email',\r\n      optionLabel: 'fullName',\r\n      value: assignedToUsers?.find(({ email }) => email === createRfiInfo?.sendToUser),\r\n      validation: Yup.object().nullable().required(utils.string.t('validation.required')),\r\n    },\r\n    {\r\n      name: 'reminder',\r\n      type: 'autocompletemui',\r\n      label: utils.string.t('claims.processing.taskDetailsLabels.reminder'),\r\n      options: REMINDER_VALUES || [],\r\n      optionKey: 'id',\r\n      optionLabel: 'name',\r\n      value:\r\n        REMINDER_VALUES?.find((item) => item.id === createRfiInfo?.reminderDate) ||\r\n        REMINDER_VALUES?.find((item) => item.id === REMINDER_DEFAULT),\r\n    },\r\n    {\r\n      type: 'datepicker',\r\n      name: 'targetDueDate',\r\n      icon: 'TodayIcon',\r\n      label: utils.string.t('claims.processing.taskDetailsLabels.targetDueDate'),\r\n      muiComponentProps: {\r\n        fullWidth: true,\r\n      },\r\n      validation: Yup.date()\r\n        .nullable()\r\n        .test('targetDueDate', utils.string.t('claims.processing.validation.targetLessThanCreatedDate'), function (value) {\r\n          const createdDate = new moment();\r\n          return value && createdDate ? moment(value).isSameOrAfter(createdDate, 'day') : true;\r\n        }),\r\n      outputFormat: 'iso',\r\n      value: moment(createRfiInfo?.targetDueDate) || new moment(),\r\n    },\r\n    {\r\n      name: 'description',\r\n      type: 'textarea',\r\n      label: utils.string.t('claims.processing.taskDetailsLabels.description'),\r\n      muiComponentProps: {\r\n        inputProps: { maxLength: 1000 },\r\n        multiline: true,\r\n        minRows: 3,\r\n        maxRows: 5,\r\n      },\r\n      value: createRfiInfo?.description,\r\n      validation: Yup.string().required(utils.string.t('validation.required')),\r\n    },\r\n  ];\r\n\r\n  const defaultValues = utils.form.getInitialValues(fields);\r\n  const validationSchema = utils.form.getValidationSchema(fields);\r\n\r\n  const {\r\n    control,\r\n    errors,\r\n    handleSubmit,\r\n    watch,\r\n    formState: { isDirty },\r\n  } = useForm({\r\n    defaultValues,\r\n    ...(validationSchema && { resolver: yupResolver(validationSchema) }),\r\n  });\r\n  const qcWatcher = watch('queryCode');\r\n  const targetDateWatcher = watch('targetDueDate');\r\n  const selectedTeam = watch('teams');\r\n\r\n  useEffect(() => {\r\n    // It was an important condition for earlier build of RFI. so currently commenting as it is not mentioned in current US.\r\n    // const queryObj = queryCodes.find((query) => qcWatcher?.queryCodeDetails === query.queryCodeDetails);\r\n    // if (qcWatcher && !createRfiInfo?.targetDueDate) {\r\n    //   const slaTargetDate = getTargetBusinessDays(new Date(), queryObj?.sla);\r\n    //   setValue('targetDueDate', slaTargetDate);\r\n    // }\r\n    if (selectedTeam) {\r\n      const userList = assignedToUsers.filter((user) => user.organisationName === selectedTeam);\r\n      setSendToUSers(userList);\r\n    }\r\n  }, [qcWatcher, selectedTeam]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    if (isDirty) {\r\n      handleFormStatus();\r\n    }\r\n  }, [isDirty, errors]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    if (targetDateWatcher) {\r\n      const reminderDays = utils.date.diffDays(new moment(), new moment(targetDateWatcher));\r\n      const remObj = [];\r\n      REMINDER_VALUES.forEach((reminder) => {\r\n        if (reminder.days <= reminderDays) {\r\n          remObj.push(REMINDER_VALUES.find((list) => reminder.id === list.id));\r\n        }\r\n      });\r\n\r\n      remObj.push(REMINDER_VALUES.find((list) => list.id === REMINDER_NOT_REQUIRED));\r\n    }\r\n  }, [targetDateWatcher]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const handleCreateRFI = (values, nextHandler) => {\r\n    const sendToObj = assignedToUsers.find((user) => user.email === values?.sendTo?.email);\r\n    let rfiDetails = {\r\n      caseIncidentRefType: rfiType,\r\n      caseInstanceId: claim?.caseIncidentID,\r\n      claimId: claimId?.toString() || null,\r\n      claimRef: claimReference,\r\n      description: values.description,\r\n      lossId: claim?.lossDetailID?.toString() || claim?.lossDetailId?.toString() || null,\r\n      lossRef: claim?.lossRef || null,\r\n      priority: values?.priority || null,\r\n      processInstanceId: claim?.rootProcessId?.toString() || claim?.processID?.toString() || null,\r\n      processTypeId: rfiProcessId,\r\n      queryCode: values?.queryCode?.queryCodeDetails,\r\n      queryCodeDescription: values?.queryCode?.queryCodeDescription,\r\n      reminderDate: values?.reminder?.id || null,\r\n      requestedByTeam: userOrg,\r\n      requestedByUser: userEmail,\r\n      sendToTeam: values?.teams,\r\n      sendToUser: sendToObj?.email,\r\n      targetDueDate: values.targetDueDate,\r\n      taskId: createRfiInfo?.taskId || null,\r\n      taskRef: createRfiInfo?.taskRef || null,\r\n      userId,\r\n    };\r\n\r\n    if (utils.generic.isValidObject(createRfiInfo, 'processId')) {\r\n      rfiDetails = {\r\n        ...rfiDetails,\r\n        processId: createRfiInfo?.processId || '',\r\n        processInstanceId: createRfiInfo?.processId || claim?.rootProcessId?.toString() || claim?.processID?.toString() || null,\r\n      };\r\n    }\r\n    dispatch(utils.generic.isValidObject(createRfiInfo, 'processId') ? postUpdateRFI(rfiDetails) : postSaveRFI(rfiDetails)).then(\r\n      (response) => {\r\n        if (response) {\r\n          dispatch(setDmsTaskContextType({ type: DMS_TASK_CONTEXT_TYPE_RFI, refId: response?.data?.taskId }));\r\n          nextHandler();\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  const submitForm = (values) => {\r\n    handleCreateRFI(values, props.handleNextSubmit);\r\n  };\r\n  const skipSubmit = (values) => {\r\n    handleCreateRFI(values, () => props.handleSkip(2));\r\n  };\r\n\r\n  return (\r\n    <CreateRFIView\r\n      {...props}\r\n      claimRef={claimRef}\r\n      fields={fields}\r\n      formProps={{\r\n        control,\r\n        errors,\r\n        isDirty,\r\n        watch,\r\n        handleSubmit,\r\n      }}\r\n      maxDescLimit={maxDescLimit}\r\n      handlers={{\r\n        submitForm,\r\n        skipSubmit,\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}