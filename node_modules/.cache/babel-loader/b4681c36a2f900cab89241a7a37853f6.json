{"ast":null,"code":"import _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport get from 'lodash/get';\nimport xor from 'lodash/xor';\nimport omit from 'lodash/omit';\nimport uniq from 'lodash/uniq';\nimport union from 'lodash/union';\nimport difference from 'lodash/difference'; // app\n\nimport config from 'config';\nimport * as utils from 'utils';\nimport * as constants from 'consts';\nvar initialState = {\n  list: {\n    items: [],\n    itemsTotal: 0,\n    page: 1,\n    pageSize: config.ui.pagination[\"default\"],\n    pageTotal: 0,\n    query: ''\n  },\n  sort: {\n    by: 'inceptionDate',\n    type: 'date',\n    direction: 'asc'\n  },\n  selected: null,\n  calendarViewEdit: null,\n  selectedMarkets: [],\n  bulk: {\n    type: '',\n    items: []\n  },\n  bulkItems: {\n    layers: [],\n    layerMarkets: []\n  },\n  bulkItemsMarketingMarkets: {\n    marketingMarkets: []\n  },\n  loadingSelected: false,\n  showBulkSelect: false,\n  showBulkSelectMarketingMarkets: false\n};\n\nvar placementReducers = function placementReducers() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'PLACEMENT_DESELECT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selected: null,\n        selectedMarkets: []\n      });\n\n    case 'PLACEMENT_NTU_SUCCESS':\n      {\n        var placementNtuIsSameId = get(state, 'selected.id') && utils.generic.isSameId(get(state, 'selected.id'), get(action.payload, 'id'));\n        return _objectSpread(_objectSpread({}, state), {}, {\n          list: _objectSpread(_objectSpread({}, state.list), {}, {\n            items: state.list.items.map(function (placement) {\n              if (placement.id === action.payload.id) {\n                placement.statusId = action.payload.statusId;\n              }\n\n              return placement;\n            })\n          }),\n          selected: placementNtuIsSameId ? _objectSpread(_objectSpread({}, state.selected), {}, {\n            statusId: action.payload.statusId\n          }) : state.selected\n        });\n      }\n\n    case 'PLACEMENT_NTU_CALENDAR_SUCCESS':\n      {\n        var _placementNtuIsSameId = get(state, 'selected.id') && utils.generic.isSameId(get(state, 'selected.id'), get(action.payload, 'id'));\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          calendarViewEdit: utils.placement.parsePlacements([action.payload])[0],\n          selected: _placementNtuIsSameId ? _objectSpread(_objectSpread({}, state.selected), {}, {\n            statusId: action.payload.statusId\n          }) : state.selected\n        });\n      }\n\n    case 'PLACEMENT_POST_SUCCESS':\n      var isEditPlacementSelected = state.selected && state.selected.id === action.payload.id;\n      var editPostSuccessPlacement = utils.placement.parsePlacements([action.payload])[0];\n      return _objectSpread(_objectSpread({}, state), {}, {\n        list: _objectSpread(_objectSpread({}, state.list), {}, {\n          items: state.list.items.map(function (item) {\n            if (action.payload.id === item.id) {\n              return editPostSuccessPlacement;\n            }\n\n            return item;\n          })\n        })\n      }, isEditPlacementSelected && {\n        selected: editPostSuccessPlacement\n      });\n\n    case 'PLACEMENT_POST_CALENDAR_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        calendarViewEdit: utils.placement.parsePlacements([action.payload])[0]\n      });\n\n    case 'PLACEMENT_REMOVE_PATCH_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        list: _objectSpread(_objectSpread({}, state.list), {}, {\n          items: state.list.items.filter(function (item) {\n            return action.payload.id !== item.id;\n          })\n        }),\n        selected: null\n      });\n\n    case 'PLACEMENT_REMOVE_PATCH_CALENDAR_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        calendarViewEdit: utils.placement.parsePlacements([action.payload])[0],\n        selected: null\n      });\n\n    case 'PLACEMENT_BULK_TOGGLE':\n      var isBulkEmpty = !state.bulk.type;\n      var isBulkSameType = isBulkEmpty || state.bulk.type === action.payload.type;\n      var newBulkItems = isBulkSameType ? xor(state.bulk.items, [action.payload.id]) : state.bulk.items;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        bulk: {\n          type: newBulkItems.length === 0 ? '' : state.bulk.type || action.payload.type,\n          items: newBulkItems\n        }\n      });\n\n    case 'PLACEMENT_BULK_TOGGLE_LAYER':\n      var newBulkLayers = action.payload.selected === constants.SELECTALL && union(state.bulkItems.layers, [action.payload.layerId]) || xor(state.bulkItems.layers, [action.payload.layerId]);\n      var newBulkMarket = action.payload.selected === constants.SELECTED && union([].concat(_toConsumableArray(state.bulkItems.layerMarkets), _toConsumableArray(action.payload.marketIdList))) || action.payload.selected === constants.DESELECTED && difference(_toConsumableArray(state.bulkItems.layerMarkets), _toConsumableArray(action.payload.marketIdList)) || action.payload.selected === constants.SELECTALL && uniq([].concat(_toConsumableArray(state.bulkItems.layerMarkets), _toConsumableArray(action.payload.marketIdList)));\n      return _objectSpread(_objectSpread({}, state), {}, {\n        bulkItems: {\n          layers: newBulkLayers,\n          layerMarkets: newBulkMarket\n        }\n      });\n\n    case 'PLACEMENT_BULK_TOGGLE_MARKET':\n      var newBulkLayer = state.bulkItems.layers.filter(function (layer) {\n        return layer !== action.payload.layerId;\n      });\n      var newBulkMarkets = xor(state.bulkItems.layerMarkets, [action.payload.marketId]);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        bulkItems: _objectSpread(_objectSpread({}, state.bulkItems), {}, {\n          layers: newBulkLayer,\n          layerMarkets: newBulkMarkets\n        })\n      });\n\n    case 'PLACEMENT_BULK_CLEAR_ALL':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        bulkItems: {\n          layers: [],\n          layerMarkets: []\n        }\n      });\n\n    case 'PLACEMENT_BULK_CLEAR':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        bulk: {\n          type: '',\n          items: []\n        }\n      });\n\n    case 'PLACEMENT_NEW_ENQUIRY_POST_SUCCESS':\n      var newEnquiryItem = utils.placement.parsePlacements(action.payload)[0];\n      var newEnquiryItemsList = [].concat(_toConsumableArray(state.list.items), [_objectSpread(_objectSpread({}, newEnquiryItem), {}, {\n        __new__: true\n      })]);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        list: _objectSpread(_objectSpread({}, state.list), {}, {\n          items: newEnquiryItemsList,\n          itemsTotal: get(state, 'list.itemsTotal', 0) + 1\n        }),\n        selected: _objectSpread(_objectSpread({}, newEnquiryItem), {}, {\n          __new__: true\n        })\n      });\n\n    case 'LOCATION_SET_MAP_LOCATIONS':\n      var isSelected = get(state, 'selected.id') === action.payload.id;\n      var hasLocations = get(action, 'payload.locations', []).length > 0;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        list: _objectSpread(_objectSpread({}, state.list), {}, {\n          items: state.list.items.map(function (placement) {\n            if (placement.id === action.payload.id) {\n              placement.locations = _toConsumableArray(action.payload.locations);\n            }\n\n            return placement;\n          })\n        }),\n        selected: _objectSpread(_objectSpread({}, state.selected), isSelected && hasLocations && {\n          locations: _toConsumableArray(action.payload.locations)\n        })\n      });\n\n    case 'PLACEMENT_LOCATIONS_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selected: state.selected ? _objectSpread({}, omit(state.selected, ['locations'])) : null\n      });\n\n    case 'PLACEMENT_EDIT_CONFIG_SUCCESS':\n      var configEdited = null;\n\n      if (action.payload.config) {\n        try {\n          configEdited = JSON.parse(action.payload.config);\n        } catch (_unused) {\n          configEdited = null;\n        }\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selected: _objectSpread(_objectSpread({}, state.selected), state.selected.id === action.payload.id && {\n          config: configEdited\n        })\n      });\n\n    case 'PLACEMENT_LIST_GET_SUCCESS':\n      var listPagination = action.payload.pagination || {};\n      return _objectSpread(_objectSpread({}, state), {}, {\n        list: _objectSpread(_objectSpread({}, state.list), {}, {\n          items: utils.placement.parsePlacements(action.payload.items || []),\n          itemsTotal: get(listPagination, 'totalElements', 0),\n          page: get(listPagination, 'page', 1),\n          pageSize: get(listPagination, 'size', initialState.list.pageSize),\n          pageTotal: get(listPagination, 'totalPages', 0),\n          query: get(listPagination, 'query') || ''\n        }),\n        sort: _objectSpread(_objectSpread({}, listPagination.direction && {\n          direction: listPagination.direction.toLowerCase()\n        }), listPagination.orderBy && {\n          by: listPagination.orderBy\n        })\n      });\n\n    case 'PLACEMENT_DETAILS_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loadingSelected: true\n      });\n\n    case 'PLACEMENT_DETAILS_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selected: utils.placement.parsePlacements(action.payload ? [action.payload] : [])[0],\n        loadingSelected: false\n      });\n\n    case 'PLACEMENT_DETAILS_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selected: null,\n        selectedMarkets: [],\n        loadingSelected: false\n      });\n\n    case 'PLACEMENT_POLICIES_SIGN_DOWN_POST_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selected: _objectSpread(_objectSpread({}, state.selected), {}, {\n          policies: state.selected.policies.map(function (statePolicy) {\n            action.payload.forEach(function (market) {\n              // check if policy matches one to be updated\n              if (statePolicy.id === market.parentPolicyId) {\n                var stateMarkets = get(statePolicy, 'markets', []) || [];\n                statePolicy.markets = stateMarkets.map(function (stateMarketsObj) {\n                  // check if market matches one to be updated\n                  if (stateMarketsObj.id === market.id) {\n                    return market;\n                  }\n\n                  return stateMarketsObj;\n                });\n              }\n            });\n            return statePolicy;\n          })\n        })\n      });\n\n    case 'PLACEMENT_POLICIES_DELETE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selected: state.selected ? _objectSpread(_objectSpread({}, state.selected), {}, {\n          policies: get(state, 'selected.policies', []).filter(function (policy) {\n            return !action.payload.includes(policy.id);\n          })\n        }) : state.selected\n      });\n\n    case 'PLACEMENT_POLICY_POST_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selected: _objectSpread(_objectSpread({}, state.selected), {}, {\n          policies: [].concat(_toConsumableArray(get(state, 'selected.policies', [])), [action.payload])\n        })\n      });\n\n    case 'PLACEMENT_POLICY_PUT_SUCCESS':\n    case 'PLACEMENT_POLICY_PATCH_SUCCESS':\n      var policiesEdited = get(state, 'selected.policies', []).map(function (policy) {\n        if (policy.id === action.payload.id) {\n          return _objectSpread({}, action.payload);\n        }\n\n        return policy;\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selected: _objectSpread(_objectSpread({}, state.selected), {}, {\n          policies: policiesEdited\n        })\n      });\n\n    case 'PLACEMENT_POLICY_MARKETS_DELETE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selected: _objectSpread(_objectSpread({}, state.selected), {}, {\n          policies: state.selected.policies.map(function (statePolicy) {\n            var stateMarkets = get(statePolicy, 'markets') || [];\n            statePolicy.markets = stateMarkets.filter(function (stateMarketsObj) {\n              return !action.payload.includes(stateMarketsObj.id);\n            });\n            return statePolicy;\n          })\n        })\n      });\n\n    case 'PLACEMENT_POLICY_MARKETS_UPDATE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selected: _objectSpread(_objectSpread({}, state.selected), {}, {\n          policies: state.selected.policies.map(function (statePolicy) {\n            action.payload.forEach(function (market) {\n              // check if policy matches one to be updated\n              if (statePolicy.id === market.parentPolicyId) {\n                var stateMarkets = get(statePolicy, 'markets', []) || [];\n                statePolicy.markets = stateMarkets.map(function (stateMarketsObj) {\n                  // check if market matches one to be updated\n                  if (stateMarketsObj.id === market.id) {\n                    return market;\n                  }\n\n                  return stateMarketsObj;\n                });\n              }\n            });\n            return statePolicy;\n          })\n        })\n      });\n\n    case 'PLACEMENT_POLICY_MARKET_ADD_POST_SUCCESS':\n      var addMarketPolicyId = get(action, 'payload.parentPolicyId');\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selected: _objectSpread(_objectSpread({}, state.selected), {}, {\n          policies: get(state, 'selected.policies', []).map(function (policy) {\n            if (policy.id === addMarketPolicyId) {\n              var newMarket = _objectSpread({}, action.payload);\n\n              if (Array.isArray(policy.markets)) {\n                policy.markets.push(newMarket);\n              } else {\n                policy.markets = [newMarket];\n              }\n            }\n\n            return policy;\n          })\n        })\n      });\n\n    case 'PLACEMENT_POLICY_MARKET_EDIT_POST_SUCCESS':\n      var editQuotePolicyMarket = get(action, 'payload', {});\n      var editQuotePolicyId = get(action, 'payload.parentPolicyId');\n      var editQuoteMarketId = get(action, 'payload.id');\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selected: _objectSpread(_objectSpread({}, state.selected), {}, {\n          policies: get(state, 'selected.policies', []).map(function (policy) {\n            if (policy.id === editQuotePolicyId) {\n              if (policy.markets.length > 0) {\n                policy.markets = policy.markets.map(function (marketObj) {\n                  if (marketObj.id === editQuoteMarketId) {\n                    return editQuotePolicyMarket;\n                  }\n\n                  return marketObj;\n                });\n              }\n            }\n\n            return policy;\n          })\n        })\n      });\n\n    case 'PLACEMENT_LAYERS_DELETE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selected: state.selected ? _objectSpread(_objectSpread({}, state.selected), {}, {\n          layers: get(state, 'selected.layers', []).filter(function (layer) {\n            return !action.payload.includes(layer.id);\n          })\n        }) : state.selected\n      });\n\n    case 'PLACEMENT_LAYER_POST_SUCCESS':\n      var addLayerIsSameId = utils.generic.isSameId(get(state, 'selected.id'), get(action.payload, 'placementId'));\n      return _objectSpread(_objectSpread({}, state), {}, {\n        list: _objectSpread(_objectSpread({}, state.list), {}, {\n          items: state.list.items.map(function (placement) {\n            if (utils.generic.isSameId(placement.id, get(action.payload, 'placementId'))) {\n              placement.layers = [].concat(_toConsumableArray(placement.layers), [action.payload]);\n            }\n\n            return placement;\n          })\n        }),\n        selected: addLayerIsSameId ? _objectSpread(_objectSpread({}, state.selected), {}, {\n          layers: [].concat(_toConsumableArray(get(state, 'selected.layers', [])), [action.payload])\n        }) : state.selected\n      });\n\n    case 'PLACEMENT_LAYER_PATCH_SUCCESS':\n      var editLayerIsSamePlacementId = utils.generic.isSameId(get(state, 'selected.id'), get(action.payload, 'placementId'));\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selected: editLayerIsSamePlacementId ? _objectSpread(_objectSpread({}, state.selected), {}, {\n          layers: get(state, 'selected.layers', []).map(function (layer) {\n            if (utils.generic.isSameId(layer.id, get(action.payload, 'id'))) {\n              return _objectSpread({}, action.payload);\n            }\n\n            return layer;\n          })\n        }) : state.selected\n      });\n\n    case 'PLACEMENT_LAYER_MARKET_POST_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selected: _objectSpread(_objectSpread({}, state.selected), {}, {\n          layers: state.selected.layers.map(function (stateLayer) {\n            var isSameLayer = utils.generic.isSameId(stateLayer.id, action.payload.placementlayerId);\n            var stateLayerMarkets = get(stateLayer, 'markets', []);\n\n            if (isSameLayer) {\n              stateLayer.markets = [].concat(_toConsumableArray(stateLayerMarkets), [action.payload]);\n            }\n\n            return stateLayer;\n          })\n        })\n      });\n\n    case 'PLACEMENT_LAYER_MARKET_EDIT_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selected: _objectSpread(_objectSpread({}, state.selected), {}, {\n          layers: state.selected.layers.map(function (stateLayer) {\n            var isSameLayer = utils.generic.isSameId(stateLayer.id, action.payload.placementlayerId);\n            var stateLayerMarkets = get(stateLayer, 'markets') || [];\n\n            if (isSameLayer) {\n              stateLayer.markets = stateLayerMarkets.map(function (mkt) {\n                var isSameLayerMarket = utils.generic.isSameId(mkt.id, action.payload.id);\n\n                if (isSameLayerMarket) {\n                  mkt = _objectSpread({}, action.payload);\n                }\n\n                return mkt;\n              });\n            }\n\n            return stateLayer;\n          })\n        })\n      });\n\n    case 'PLACEMENT_LAYER_MARKETS_DELETE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selected: _objectSpread(_objectSpread({}, state.selected), {}, {\n          layers: get(state, 'selected.layers', []).map(function (stateLayer) {\n            var stateLayerMarkets = get(stateLayer, 'markets', []);\n            stateLayer.markets = stateLayerMarkets.filter(function (market) {\n              return !action.payload.includes(market.id);\n            });\n            return stateLayer;\n          })\n        })\n      });\n\n    case 'PLACEMENT_LAYER_MARKETS_UPDATE':\n      // in this particular case, the payload is the body that was sent to the endpoint\n      // this is because the endpoint doesn't return the updated layers\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selected: _objectSpread(_objectSpread({}, state.selected), {}, {\n          layers: get(state, 'selected.layers', []).map(function (stateLayer) {\n            action.payload.forEach(function (market) {\n              // check if layer matches one to be updated\n              if (utils.generic.isSameId(stateLayer.id, market.placementlayerId)) {\n                var stateLayerMarkets = get(stateLayer, 'markets', []) || [];\n                stateLayer.markets = stateLayerMarkets.map(function (stateMarketsObj) {\n                  // check if market matches one to be updated\n                  if (utils.generic.isSameId(stateMarketsObj.id, market.id)) {\n                    return market;\n                  }\n\n                  return stateMarketsObj;\n                });\n              }\n            });\n            return stateLayer;\n          })\n        })\n      });\n\n    case 'PLACEMENT_LAYERS_UPDATE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selected: _objectSpread(_objectSpread({}, state.selected), {}, {\n          layers: get(state, 'selected.layers', []).map(function (stateLayer) {\n            var layer = action.payload.find(function (layer) {\n              return layer.id === stateLayer.id;\n            });\n\n            if (layer) {\n              return layer;\n            } else {\n              return stateLayer;\n            }\n          })\n        })\n      });\n\n    case 'PLACEMENT_MARKETS_LIST_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selected: state.selected ? _objectSpread({}, state.selected) : null,\n        selectedMarkets: utils.generic.isSameId(get(state, 'selected.id'), action.payload.placementId) ? action.payload.placementMarkets : []\n      });\n\n    case 'PLACEMENT_MARKET_ADD_POST_SUCCESS':\n      var addPostMarketAlreadyExists = utils.generic.isValidArray(state.selectedMarkets.find(function (m) {\n        return get(m, 'market.id');\n      }), true);\n      var addPostMarkets = state.selectedMarkets.map(function (m) {\n        delete m.__new__;\n        return m;\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selectedMarkets: addPostMarketAlreadyExists ? addPostMarkets : [].concat(_toConsumableArray(addPostMarkets), [_objectSpread(_objectSpread({}, action.payload), {}, {\n          __new__: true\n        })])\n      });\n\n    case 'PLACEMENT_MARKET_EDIT_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selectedMarkets: utils.generic.isSameId(get(state, 'selected.id'), get(action.payload, 'placement.id')) ? state.selectedMarkets.map(function (market) {\n          delete market.__new__;\n\n          if (utils.generic.isSameId(market.id, action.payload.id)) {\n            return action.payload;\n          }\n\n          return market;\n        }) : state.selectedMarkets\n      });\n\n    case 'PLACEMENT_MARKET_DELETE_SUCCESS':\n      var layerMarketId;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selectedMarkets: state.selectedMarkets.filter(function (market) {\n          if (action.payload === market.id) {\n            var _market$market;\n\n            layerMarketId = market === null || market === void 0 ? void 0 : (_market$market = market.market) === null || _market$market === void 0 ? void 0 : _market$market.id;\n          }\n\n          return !utils.generic.isSameId(market.id, action.payload);\n        }),\n        selected: _objectSpread(_objectSpread({}, state.selected), {}, {\n          layers: get(state, 'selected.layers', []).map(function (stateLayer) {\n            var stateLayerMarkets = get(stateLayer, 'markets', []);\n            stateLayer.markets = stateLayerMarkets.filter(function (market) {\n              var _market$market2;\n\n              return !utils.generic.isSameId(market === null || market === void 0 ? void 0 : (_market$market2 = market.market) === null || _market$market2 === void 0 ? void 0 : _market$market2.id, layerMarketId);\n            });\n            return stateLayer;\n          })\n        })\n      });\n\n    case 'PLACEMENT_MARKET_CHANGE_PUT_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selected: utils.placement.parsePlacements(action.payload.placement ? [action.payload.placement] : [])[0],\n        selectedMarkets: [action.payload].concat(_toConsumableArray(state.selectedMarkets.filter(function (market) {\n          return market.id !== action.payload.id;\n        })))\n      });\n\n    case 'BULK_SELECT_TOGGLE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        showBulkSelect: !state.showBulkSelect\n      });\n\n    case 'BULK_SELECT_TOGGLE_DISABLE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        showBulkSelect: false\n      });\n\n    case 'BULK_SELECT_TOGGLE_MARKETING_MARKETS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        showBulkSelectMarketingMarkets: !state.showBulkSelectMarketingMarkets\n      });\n\n    case 'PLACEMENT_BULK_TOGGLE_MARKETING_MARKETS':\n      var newBulkMarketingMarkets = action.payload.selected === constants.SELECTALL && uniq([].concat(_toConsumableArray(state.bulkItemsMarketingMarkets.marketingMarkets), _toConsumableArray(action.payload.marketIdList))) || action.payload.selected === constants.SELECTED && xor(state.bulkItemsMarketingMarkets.marketingMarkets, [action.payload.marketIdList]);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        bulkItemsMarketingMarkets: _objectSpread(_objectSpread({}, state.bulkItemsMarketingMarkets), {}, {\n          marketingMarkets: newBulkMarketingMarkets\n        })\n      });\n\n    case 'PLACEMENT_BULK_CLEAR_ALL_MARKETING_MARKETS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        bulkItemsMarketingMarkets: {\n          marketingMarkets: []\n        }\n      });\n\n    case 'BULK_SELECT_TOGGLE_DISABLE_MARKETING_MARKETS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        showBulkSelectMarketingMarkets: false\n      });\n\n    case 'PLACEMENT_MARKET_BULK_DELETE_SUCCESS':\n      var layerMarketIds = [];\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selectedMarkets: state.selectedMarkets.filter(function (market) {\n          if (action.payload.includes(market.id)) {\n            var _market$market3;\n\n            layerMarketIds.push(market === null || market === void 0 ? void 0 : (_market$market3 = market.market) === null || _market$market3 === void 0 ? void 0 : _market$market3.id);\n          }\n\n          return !action.payload.includes(market.id);\n        }),\n        selected: _objectSpread(_objectSpread({}, state.selected), {}, {\n          layers: get(state, 'selected.layers', []).map(function (stateLayer) {\n            var stateLayerMarkets = get(stateLayer, 'markets', []);\n            stateLayer.markets = stateLayerMarkets.filter(function (market) {\n              var _market$market4;\n\n              return !layerMarketIds.includes(market === null || market === void 0 ? void 0 : (_market$market4 = market.market) === null || _market$market4 === void 0 ? void 0 : _market$market4.id);\n            });\n            return stateLayer;\n          })\n        })\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default placementReducers;","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/placement/placement.reducers.js"],"names":["get","xor","omit","uniq","union","difference","config","utils","constants","initialState","list","items","itemsTotal","page","pageSize","ui","pagination","pageTotal","query","sort","by","type","direction","selected","calendarViewEdit","selectedMarkets","bulk","bulkItems","layers","layerMarkets","bulkItemsMarketingMarkets","marketingMarkets","loadingSelected","showBulkSelect","showBulkSelectMarketingMarkets","placementReducers","state","action","placementNtuIsSameId","generic","isSameId","payload","map","placement","id","statusId","parsePlacements","isEditPlacementSelected","editPostSuccessPlacement","item","filter","isBulkEmpty","isBulkSameType","newBulkItems","length","newBulkLayers","SELECTALL","layerId","newBulkMarket","SELECTED","marketIdList","DESELECTED","newBulkLayer","layer","newBulkMarkets","marketId","newEnquiryItem","newEnquiryItemsList","__new__","isSelected","hasLocations","locations","configEdited","JSON","parse","listPagination","toLowerCase","orderBy","policies","statePolicy","forEach","market","parentPolicyId","stateMarkets","markets","stateMarketsObj","policy","includes","policiesEdited","addMarketPolicyId","newMarket","Array","isArray","push","editQuotePolicyMarket","editQuotePolicyId","editQuoteMarketId","marketObj","addLayerIsSameId","editLayerIsSamePlacementId","stateLayer","isSameLayer","placementlayerId","stateLayerMarkets","mkt","isSameLayerMarket","find","placementId","placementMarkets","addPostMarketAlreadyExists","isValidArray","m","addPostMarkets","layerMarketId","newBulkMarketingMarkets","layerMarketIds"],"mappings":"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","sourcesContent":["import get from 'lodash/get';\r\nimport xor from 'lodash/xor';\r\nimport omit from 'lodash/omit';\r\nimport uniq from 'lodash/uniq';\r\nimport union from 'lodash/union';\r\nimport difference from 'lodash/difference';\r\n\r\n// app\r\nimport config from 'config';\r\nimport * as utils from 'utils';\r\nimport * as constants from 'consts';\r\n\r\nconst initialState = {\r\n  list: {\r\n    items: [],\r\n    itemsTotal: 0,\r\n    page: 1,\r\n    pageSize: config.ui.pagination.default,\r\n    pageTotal: 0,\r\n    query: '',\r\n  },\r\n  sort: {\r\n    by: 'inceptionDate',\r\n    type: 'date',\r\n    direction: 'asc',\r\n  },\r\n  selected: null,\r\n  calendarViewEdit: null,\r\n  selectedMarkets: [],\r\n  bulk: {\r\n    type: '',\r\n    items: [],\r\n  },\r\n  bulkItems: {\r\n    layers: [],\r\n    layerMarkets: [],\r\n  },\r\n  bulkItemsMarketingMarkets: {\r\n    marketingMarkets: [],\r\n  },\r\n  loadingSelected: false,\r\n  showBulkSelect: false,\r\n  showBulkSelectMarketingMarkets: false,\r\n};\r\n\r\nconst placementReducers = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'PLACEMENT_DESELECT':\r\n      return {\r\n        ...state,\r\n        selected: null,\r\n        selectedMarkets: [],\r\n      };\r\n\r\n    case 'PLACEMENT_NTU_SUCCESS': {\r\n      const placementNtuIsSameId =\r\n        get(state, 'selected.id') && utils.generic.isSameId(get(state, 'selected.id'), get(action.payload, 'id'));\r\n\r\n      return {\r\n        ...state,\r\n        list: {\r\n          ...state.list,\r\n          items: state.list.items.map((placement) => {\r\n            if (placement.id === action.payload.id) {\r\n              placement.statusId = action.payload.statusId;\r\n            }\r\n\r\n            return placement;\r\n          }),\r\n        },\r\n        selected: placementNtuIsSameId\r\n          ? {\r\n              ...state.selected,\r\n              statusId: action.payload.statusId,\r\n            }\r\n          : state.selected,\r\n      };\r\n    }\r\n    case 'PLACEMENT_NTU_CALENDAR_SUCCESS': {\r\n      const placementNtuIsSameId =\r\n        get(state, 'selected.id') && utils.generic.isSameId(get(state, 'selected.id'), get(action.payload, 'id'));\r\n\r\n      return {\r\n        ...state,\r\n        calendarViewEdit: utils.placement.parsePlacements([action.payload])[0],\r\n        selected: placementNtuIsSameId\r\n          ? {\r\n              ...state.selected,\r\n              statusId: action.payload.statusId,\r\n            }\r\n          : state.selected,\r\n      };\r\n    }\r\n    case 'PLACEMENT_POST_SUCCESS':\r\n      const isEditPlacementSelected = state.selected && state.selected.id === action.payload.id;\r\n      const editPostSuccessPlacement = utils.placement.parsePlacements([action.payload])[0];\r\n\r\n      return {\r\n        ...state,\r\n        list: {\r\n          ...state.list,\r\n          items: state.list.items.map((item) => {\r\n            if (action.payload.id === item.id) {\r\n              return editPostSuccessPlacement;\r\n            }\r\n\r\n            return item;\r\n          }),\r\n        },\r\n        ...(isEditPlacementSelected && { selected: editPostSuccessPlacement }),\r\n      };\r\n\r\n    case 'PLACEMENT_POST_CALENDAR_SUCCESS':\r\n      return {\r\n        ...state,\r\n        calendarViewEdit: utils.placement.parsePlacements([action.payload])[0],\r\n      };\r\n\r\n    case 'PLACEMENT_REMOVE_PATCH_SUCCESS':\r\n      return {\r\n        ...state,\r\n        list: {\r\n          ...state.list,\r\n          items: state.list.items.filter((item) => action.payload.id !== item.id),\r\n        },\r\n        selected: null,\r\n      };\r\n    case 'PLACEMENT_REMOVE_PATCH_CALENDAR_SUCCESS':\r\n      return {\r\n        ...state,\r\n        calendarViewEdit: utils.placement.parsePlacements([action.payload])[0],\r\n        selected: null,\r\n      };\r\n\r\n    case 'PLACEMENT_BULK_TOGGLE':\r\n      const isBulkEmpty = !state.bulk.type;\r\n      const isBulkSameType = isBulkEmpty || state.bulk.type === action.payload.type;\r\n      const newBulkItems = isBulkSameType ? xor(state.bulk.items, [action.payload.id]) : state.bulk.items;\r\n\r\n      return {\r\n        ...state,\r\n        bulk: {\r\n          type: newBulkItems.length === 0 ? '' : state.bulk.type || action.payload.type,\r\n          items: newBulkItems,\r\n        },\r\n      };\r\n    case 'PLACEMENT_BULK_TOGGLE_LAYER':\r\n      const newBulkLayers =\r\n        (action.payload.selected === constants.SELECTALL && union(state.bulkItems.layers, [action.payload.layerId])) ||\r\n        xor(state.bulkItems.layers, [action.payload.layerId]);\r\n      const newBulkMarket =\r\n        (action.payload.selected === constants.SELECTED && union([...state.bulkItems.layerMarkets, ...action.payload.marketIdList])) ||\r\n        (action.payload.selected === constants.DESELECTED &&\r\n          difference([...state.bulkItems.layerMarkets], [...action.payload.marketIdList])) ||\r\n        (action.payload.selected === constants.SELECTALL && uniq([...state.bulkItems.layerMarkets, ...action.payload.marketIdList]));\r\n\r\n      return {\r\n        ...state,\r\n        bulkItems: {\r\n          layers: newBulkLayers,\r\n          layerMarkets: newBulkMarket,\r\n        },\r\n      };\r\n    case 'PLACEMENT_BULK_TOGGLE_MARKET':\r\n      const newBulkLayer = state.bulkItems.layers.filter((layer) => layer !== action.payload.layerId);\r\n      const newBulkMarkets = xor(state.bulkItems.layerMarkets, [action.payload.marketId]);\r\n\r\n      return {\r\n        ...state,\r\n        bulkItems: {\r\n          ...state.bulkItems,\r\n          layers: newBulkLayer,\r\n          layerMarkets: newBulkMarkets,\r\n        },\r\n      };\r\n    case 'PLACEMENT_BULK_CLEAR_ALL':\r\n      return {\r\n        ...state,\r\n        bulkItems: {\r\n          layers: [],\r\n          layerMarkets: [],\r\n        },\r\n      };\r\n\r\n    case 'PLACEMENT_BULK_CLEAR':\r\n      return {\r\n        ...state,\r\n        bulk: {\r\n          type: '',\r\n          items: [],\r\n        },\r\n      };\r\n\r\n    case 'PLACEMENT_NEW_ENQUIRY_POST_SUCCESS':\r\n      const newEnquiryItem = utils.placement.parsePlacements(action.payload)[0];\r\n      const newEnquiryItemsList = [...state.list.items, { ...newEnquiryItem, __new__: true }];\r\n\r\n      return {\r\n        ...state,\r\n        list: {\r\n          ...state.list,\r\n          items: newEnquiryItemsList,\r\n          itemsTotal: get(state, 'list.itemsTotal', 0) + 1,\r\n        },\r\n        selected: { ...newEnquiryItem, __new__: true },\r\n      };\r\n\r\n    case 'LOCATION_SET_MAP_LOCATIONS':\r\n      const isSelected = get(state, 'selected.id') === action.payload.id;\r\n      const hasLocations = get(action, 'payload.locations', []).length > 0;\r\n\r\n      return {\r\n        ...state,\r\n        list: {\r\n          ...state.list,\r\n          items: state.list.items.map((placement) => {\r\n            if (placement.id === action.payload.id) {\r\n              placement.locations = [...action.payload.locations];\r\n            }\r\n\r\n            return placement;\r\n          }),\r\n        },\r\n        selected: {\r\n          ...state.selected,\r\n          ...(isSelected && hasLocations && { locations: [...action.payload.locations] }),\r\n        },\r\n      };\r\n\r\n    case 'PLACEMENT_LOCATIONS_RESET':\r\n      return {\r\n        ...state,\r\n        selected: state.selected ? { ...omit(state.selected, ['locations']) } : null,\r\n      };\r\n\r\n    case 'PLACEMENT_EDIT_CONFIG_SUCCESS':\r\n      let configEdited = null;\r\n\r\n      if (action.payload.config) {\r\n        try {\r\n          configEdited = JSON.parse(action.payload.config);\r\n        } catch {\r\n          configEdited = null;\r\n        }\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        selected: {\r\n          ...state.selected,\r\n          ...(state.selected.id === action.payload.id && {\r\n            config: configEdited,\r\n          }),\r\n        },\r\n      };\r\n\r\n    case 'PLACEMENT_LIST_GET_SUCCESS':\r\n      const listPagination = action.payload.pagination || {};\r\n\r\n      return {\r\n        ...state,\r\n        list: {\r\n          ...state.list,\r\n          items: utils.placement.parsePlacements(action.payload.items || []),\r\n          itemsTotal: get(listPagination, 'totalElements', 0),\r\n          page: get(listPagination, 'page', 1),\r\n          pageSize: get(listPagination, 'size', initialState.list.pageSize),\r\n          pageTotal: get(listPagination, 'totalPages', 0),\r\n          query: get(listPagination, 'query') || '',\r\n        },\r\n        sort: {\r\n          ...(listPagination.direction && { direction: listPagination.direction.toLowerCase() }),\r\n          ...(listPagination.orderBy && { by: listPagination.orderBy }),\r\n        },\r\n      };\r\n\r\n    case 'PLACEMENT_DETAILS_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        loadingSelected: true,\r\n      };\r\n\r\n    case 'PLACEMENT_DETAILS_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        selected: utils.placement.parsePlacements(action.payload ? [action.payload] : [])[0],\r\n        loadingSelected: false,\r\n      };\r\n\r\n    case 'PLACEMENT_DETAILS_GET_FAILURE':\r\n      return {\r\n        ...state,\r\n        selected: null,\r\n        selectedMarkets: [],\r\n        loadingSelected: false,\r\n      };\r\n\r\n    case 'PLACEMENT_POLICIES_SIGN_DOWN_POST_SUCCESS':\r\n      return {\r\n        ...state,\r\n        selected: {\r\n          ...state.selected,\r\n          policies: state.selected.policies.map((statePolicy) => {\r\n            action.payload.forEach((market) => {\r\n              // check if policy matches one to be updated\r\n              if (statePolicy.id === market.parentPolicyId) {\r\n                let stateMarkets = get(statePolicy, 'markets', []) || [];\r\n\r\n                statePolicy.markets = stateMarkets.map((stateMarketsObj) => {\r\n                  // check if market matches one to be updated\r\n                  if (stateMarketsObj.id === market.id) {\r\n                    return market;\r\n                  }\r\n\r\n                  return stateMarketsObj;\r\n                });\r\n              }\r\n            });\r\n\r\n            return statePolicy;\r\n          }),\r\n        },\r\n      };\r\n\r\n    case 'PLACEMENT_POLICIES_DELETE':\r\n      return {\r\n        ...state,\r\n        selected: state.selected\r\n          ? {\r\n              ...state.selected,\r\n              policies: get(state, 'selected.policies', []).filter((policy) => {\r\n                return !action.payload.includes(policy.id);\r\n              }),\r\n            }\r\n          : state.selected,\r\n      };\r\n\r\n    case 'PLACEMENT_POLICY_POST_SUCCESS':\r\n      return {\r\n        ...state,\r\n        selected: {\r\n          ...state.selected,\r\n          policies: [...get(state, 'selected.policies', []), action.payload],\r\n        },\r\n      };\r\n\r\n    case 'PLACEMENT_POLICY_PUT_SUCCESS':\r\n    case 'PLACEMENT_POLICY_PATCH_SUCCESS':\r\n      const policiesEdited = get(state, 'selected.policies', []).map((policy) => {\r\n        if (policy.id === action.payload.id) {\r\n          return { ...action.payload };\r\n        }\r\n\r\n        return policy;\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        selected: {\r\n          ...state.selected,\r\n          policies: policiesEdited,\r\n        },\r\n      };\r\n\r\n    case 'PLACEMENT_POLICY_MARKETS_DELETE':\r\n      return {\r\n        ...state,\r\n        selected: {\r\n          ...state.selected,\r\n          policies: state.selected.policies.map((statePolicy) => {\r\n            const stateMarkets = get(statePolicy, 'markets') || [];\r\n\r\n            statePolicy.markets = stateMarkets.filter((stateMarketsObj) => {\r\n              return !action.payload.includes(stateMarketsObj.id);\r\n            });\r\n\r\n            return statePolicy;\r\n          }),\r\n        },\r\n      };\r\n\r\n    case 'PLACEMENT_POLICY_MARKETS_UPDATE':\r\n      return {\r\n        ...state,\r\n        selected: {\r\n          ...state.selected,\r\n          policies: state.selected.policies.map((statePolicy) => {\r\n            action.payload.forEach((market) => {\r\n              // check if policy matches one to be updated\r\n              if (statePolicy.id === market.parentPolicyId) {\r\n                let stateMarkets = get(statePolicy, 'markets', []) || [];\r\n\r\n                statePolicy.markets = stateMarkets.map((stateMarketsObj) => {\r\n                  // check if market matches one to be updated\r\n                  if (stateMarketsObj.id === market.id) {\r\n                    return market;\r\n                  }\r\n\r\n                  return stateMarketsObj;\r\n                });\r\n              }\r\n            });\r\n\r\n            return statePolicy;\r\n          }),\r\n        },\r\n      };\r\n\r\n    case 'PLACEMENT_POLICY_MARKET_ADD_POST_SUCCESS':\r\n      const addMarketPolicyId = get(action, 'payload.parentPolicyId');\r\n\r\n      return {\r\n        ...state,\r\n        selected: {\r\n          ...state.selected,\r\n          policies: get(state, 'selected.policies', []).map((policy) => {\r\n            if (policy.id === addMarketPolicyId) {\r\n              const newMarket = {\r\n                ...action.payload,\r\n              };\r\n\r\n              if (Array.isArray(policy.markets)) {\r\n                policy.markets.push(newMarket);\r\n              } else {\r\n                policy.markets = [newMarket];\r\n              }\r\n            }\r\n\r\n            return policy;\r\n          }),\r\n        },\r\n      };\r\n\r\n    case 'PLACEMENT_POLICY_MARKET_EDIT_POST_SUCCESS':\r\n      const editQuotePolicyMarket = get(action, 'payload', {});\r\n      const editQuotePolicyId = get(action, 'payload.parentPolicyId');\r\n      const editQuoteMarketId = get(action, 'payload.id');\r\n\r\n      return {\r\n        ...state,\r\n        selected: {\r\n          ...state.selected,\r\n          policies: get(state, 'selected.policies', []).map((policy) => {\r\n            if (policy.id === editQuotePolicyId) {\r\n              if (policy.markets.length > 0) {\r\n                policy.markets = policy.markets.map((marketObj) => {\r\n                  if (marketObj.id === editQuoteMarketId) {\r\n                    return editQuotePolicyMarket;\r\n                  }\r\n\r\n                  return marketObj;\r\n                });\r\n              }\r\n            }\r\n\r\n            return policy;\r\n          }),\r\n        },\r\n      };\r\n\r\n    case 'PLACEMENT_LAYERS_DELETE':\r\n      return {\r\n        ...state,\r\n        selected: state.selected\r\n          ? {\r\n              ...state.selected,\r\n              layers: get(state, 'selected.layers', []).filter((layer) => {\r\n                return !action.payload.includes(layer.id);\r\n              }),\r\n            }\r\n          : state.selected,\r\n      };\r\n\r\n    case 'PLACEMENT_LAYER_POST_SUCCESS':\r\n      const addLayerIsSameId = utils.generic.isSameId(get(state, 'selected.id'), get(action.payload, 'placementId'));\r\n\r\n      return {\r\n        ...state,\r\n        list: {\r\n          ...state.list,\r\n          items: state.list.items.map((placement) => {\r\n            if (utils.generic.isSameId(placement.id, get(action.payload, 'placementId'))) {\r\n              placement.layers = [...placement.layers, action.payload];\r\n            }\r\n\r\n            return placement;\r\n          }),\r\n        },\r\n        selected: addLayerIsSameId\r\n          ? {\r\n              ...state.selected,\r\n              layers: [...get(state, 'selected.layers', []), action.payload],\r\n            }\r\n          : state.selected,\r\n      };\r\n\r\n    case 'PLACEMENT_LAYER_PATCH_SUCCESS':\r\n      const editLayerIsSamePlacementId = utils.generic.isSameId(get(state, 'selected.id'), get(action.payload, 'placementId'));\r\n\r\n      return {\r\n        ...state,\r\n        selected: editLayerIsSamePlacementId\r\n          ? {\r\n              ...state.selected,\r\n              layers: get(state, 'selected.layers', []).map((layer) => {\r\n                if (utils.generic.isSameId(layer.id, get(action.payload, 'id'))) {\r\n                  return { ...action.payload };\r\n                }\r\n\r\n                return layer;\r\n              }),\r\n            }\r\n          : state.selected,\r\n      };\r\n\r\n    case 'PLACEMENT_LAYER_MARKET_POST_SUCCESS':\r\n      return {\r\n        ...state,\r\n        selected: {\r\n          ...state.selected,\r\n          layers: state.selected.layers.map((stateLayer) => {\r\n            const isSameLayer = utils.generic.isSameId(stateLayer.id, action.payload.placementlayerId);\r\n            const stateLayerMarkets = get(stateLayer, 'markets', []);\r\n\r\n            if (isSameLayer) {\r\n              stateLayer.markets = [...stateLayerMarkets, action.payload];\r\n            }\r\n\r\n            return stateLayer;\r\n          }),\r\n        },\r\n      };\r\n\r\n    case 'PLACEMENT_LAYER_MARKET_EDIT_SUCCESS':\r\n      return {\r\n        ...state,\r\n        selected: {\r\n          ...state.selected,\r\n          layers: state.selected.layers.map((stateLayer) => {\r\n            const isSameLayer = utils.generic.isSameId(stateLayer.id, action.payload.placementlayerId);\r\n            const stateLayerMarkets = get(stateLayer, 'markets') || [];\r\n\r\n            if (isSameLayer) {\r\n              stateLayer.markets = stateLayerMarkets.map((mkt) => {\r\n                const isSameLayerMarket = utils.generic.isSameId(mkt.id, action.payload.id);\r\n\r\n                if (isSameLayerMarket) {\r\n                  mkt = { ...action.payload };\r\n                }\r\n\r\n                return mkt;\r\n              });\r\n            }\r\n\r\n            return stateLayer;\r\n          }),\r\n        },\r\n      };\r\n\r\n    case 'PLACEMENT_LAYER_MARKETS_DELETE':\r\n      return {\r\n        ...state,\r\n        selected: {\r\n          ...state.selected,\r\n          layers: get(state, 'selected.layers', []).map((stateLayer) => {\r\n            const stateLayerMarkets = get(stateLayer, 'markets', []);\r\n\r\n            stateLayer.markets = stateLayerMarkets.filter((market) => {\r\n              return !action.payload.includes(market.id);\r\n            });\r\n\r\n            return stateLayer;\r\n          }),\r\n        },\r\n      };\r\n\r\n    case 'PLACEMENT_LAYER_MARKETS_UPDATE':\r\n      // in this particular case, the payload is the body that was sent to the endpoint\r\n      // this is because the endpoint doesn't return the updated layers\r\n      return {\r\n        ...state,\r\n        selected: {\r\n          ...state.selected,\r\n          layers: get(state, 'selected.layers', []).map((stateLayer) => {\r\n            action.payload.forEach((market) => {\r\n              // check if layer matches one to be updated\r\n              if (utils.generic.isSameId(stateLayer.id, market.placementlayerId)) {\r\n                let stateLayerMarkets = get(stateLayer, 'markets', []) || [];\r\n\r\n                stateLayer.markets = stateLayerMarkets.map((stateMarketsObj) => {\r\n                  // check if market matches one to be updated\r\n                  if (utils.generic.isSameId(stateMarketsObj.id, market.id)) {\r\n                    return market;\r\n                  }\r\n\r\n                  return stateMarketsObj;\r\n                });\r\n              }\r\n            });\r\n\r\n            return stateLayer;\r\n          }),\r\n        },\r\n      };\r\n    case 'PLACEMENT_LAYERS_UPDATE':\r\n      return {\r\n        ...state,\r\n        selected: {\r\n          ...state.selected,\r\n          layers: get(state, 'selected.layers', []).map((stateLayer) => {\r\n            const layer = action.payload.find((layer) => layer.id === stateLayer.id);\r\n            if (layer) {\r\n              return layer;\r\n            } else {\r\n              return stateLayer;\r\n            }\r\n          }),\r\n        },\r\n      };\r\n    case 'PLACEMENT_MARKETS_LIST_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        selected: state.selected ? { ...state.selected } : null,\r\n        selectedMarkets: utils.generic.isSameId(get(state, 'selected.id'), action.payload.placementId)\r\n          ? action.payload.placementMarkets\r\n          : [],\r\n      };\r\n\r\n    case 'PLACEMENT_MARKET_ADD_POST_SUCCESS':\r\n      const addPostMarketAlreadyExists = utils.generic.isValidArray(\r\n        state.selectedMarkets.find((m) => get(m, 'market.id')),\r\n        true\r\n      );\r\n\r\n      const addPostMarkets = state.selectedMarkets.map((m) => {\r\n        delete m.__new__;\r\n        return m;\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        selectedMarkets: addPostMarketAlreadyExists ? addPostMarkets : [...addPostMarkets, { ...action.payload, __new__: true }],\r\n      };\r\n\r\n    case 'PLACEMENT_MARKET_EDIT_SUCCESS':\r\n      return {\r\n        ...state,\r\n        selectedMarkets: utils.generic.isSameId(get(state, 'selected.id'), get(action.payload, 'placement.id'))\r\n          ? state.selectedMarkets.map((market) => {\r\n              delete market.__new__;\r\n\r\n              if (utils.generic.isSameId(market.id, action.payload.id)) {\r\n                return action.payload;\r\n              }\r\n\r\n              return market;\r\n            })\r\n          : state.selectedMarkets,\r\n      };\r\n\r\n    case 'PLACEMENT_MARKET_DELETE_SUCCESS':\r\n      let layerMarketId;\r\n      return {\r\n        ...state,\r\n        selectedMarkets: state.selectedMarkets.filter((market) => {\r\n          if (action.payload === market.id) {\r\n            layerMarketId = market?.market?.id;\r\n          }\r\n          return !utils.generic.isSameId(market.id, action.payload);\r\n        }),\r\n        selected: {\r\n          ...state.selected,\r\n          layers: get(state, 'selected.layers', []).map((stateLayer) => {\r\n            const stateLayerMarkets = get(stateLayer, 'markets', []);\r\n            stateLayer.markets = stateLayerMarkets.filter((market) => {\r\n              return !utils.generic.isSameId(market?.market?.id, layerMarketId);\r\n            });\r\n            return stateLayer;\r\n          }),\r\n        },\r\n      };\r\n    case 'PLACEMENT_MARKET_CHANGE_PUT_SUCCESS':\r\n      return {\r\n        ...state,\r\n        selected: utils.placement.parsePlacements(action.payload.placement ? [action.payload.placement] : [])[0],\r\n        selectedMarkets: [\r\n          action.payload,\r\n          ...state.selectedMarkets.filter((market) => {\r\n            return market.id !== action.payload.id;\r\n          }),\r\n        ],\r\n      };\r\n\r\n    case 'BULK_SELECT_TOGGLE':\r\n      return {\r\n        ...state,\r\n        showBulkSelect: !state.showBulkSelect,\r\n      };\r\n    case 'BULK_SELECT_TOGGLE_DISABLE':\r\n      return {\r\n        ...state,\r\n        showBulkSelect: false,\r\n      };\r\n\r\n    case 'BULK_SELECT_TOGGLE_MARKETING_MARKETS':\r\n      return {\r\n        ...state,\r\n        showBulkSelectMarketingMarkets: !state.showBulkSelectMarketingMarkets,\r\n      };\r\n    case 'PLACEMENT_BULK_TOGGLE_MARKETING_MARKETS':\r\n      const newBulkMarketingMarkets =\r\n        (action.payload.selected === constants.SELECTALL &&\r\n          uniq([...state.bulkItemsMarketingMarkets.marketingMarkets, ...action.payload.marketIdList])) ||\r\n        (action.payload.selected === constants.SELECTED &&\r\n          xor(state.bulkItemsMarketingMarkets.marketingMarkets, [action.payload.marketIdList]));\r\n\r\n      return {\r\n        ...state,\r\n        bulkItemsMarketingMarkets: {\r\n          ...state.bulkItemsMarketingMarkets,\r\n          marketingMarkets: newBulkMarketingMarkets,\r\n        },\r\n      };\r\n    case 'PLACEMENT_BULK_CLEAR_ALL_MARKETING_MARKETS':\r\n      return {\r\n        ...state,\r\n        bulkItemsMarketingMarkets: {\r\n          marketingMarkets: [],\r\n        },\r\n      };\r\n    case 'BULK_SELECT_TOGGLE_DISABLE_MARKETING_MARKETS':\r\n      return {\r\n        ...state,\r\n        showBulkSelectMarketingMarkets: false,\r\n      };\r\n    case 'PLACEMENT_MARKET_BULK_DELETE_SUCCESS':\r\n      const layerMarketIds = [];\r\n      return {\r\n        ...state,\r\n        selectedMarkets: state.selectedMarkets.filter((market) => {\r\n          if (action.payload.includes(market.id)) {\r\n            layerMarketIds.push(market?.market?.id);\r\n          }\r\n          return !action.payload.includes(market.id);\r\n        }),\r\n        selected: {\r\n          ...state.selected,\r\n          layers: get(state, 'selected.layers', []).map((stateLayer) => {\r\n            const stateLayerMarkets = get(stateLayer, 'markets', []);\r\n            stateLayer.markets = stateLayerMarkets.filter((market) => {\r\n              return !layerMarketIds.includes(market?.market?.id);\r\n            });\r\n            return stateLayer;\r\n          }),\r\n        },\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default placementReducers;\r\n"]},"metadata":{},"sourceType":"module"}