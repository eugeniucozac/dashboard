{"ast":null,"code":"import \"core-js/modules/es.array.map\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\StructuringTable\\\\StructuringTable.view.js\";\nimport React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport isNumber from 'lodash/isNumber';\nimport groupBy from 'lodash/groupBy'; // app\n\nimport styles from './StructuringTable.styles.js';\nimport { PopoverMenu, Restricted, Status, TableCheckbox, TableHead, Translate } from 'components';\nimport { LayerTableRow, LayerMarketTableRow, LayerMarketTableInfoRow } from 'modules';\nimport * as constants from 'consts';\nimport * as utils from 'utils'; // mui\n\nimport { makeStyles, Box, Table, TableBody, TableCell, TableRow } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nStructuringTableView.propTypes = {\n  layers: PropTypes.array.isRequired,\n  commentIDs: PropTypes.array,\n  cols: PropTypes.array.isRequired,\n  capacityTypes: PropTypes.array.isRequired,\n  marketSelectedId: PropTypes.number,\n  rowLimit: PropTypes.number,\n  printView: PropTypes.bool,\n  statuses: PropTypes.shape({\n    policyNtu: PropTypes.object,\n    policyMarketQuoteStatuses: PropTypes.array\n  }).isRequired,\n  bulk: PropTypes.shape({\n    type: PropTypes.string,\n    items: PropTypes.array,\n    itemsMarkets: PropTypes.array\n  }).isRequired,\n  handlers: PropTypes.shape({\n    bulkSelectLayer: PropTypes.func,\n    bulkSelectMarket: PropTypes.func,\n    editLayer: PropTypes.func,\n    deleteLayer: PropTypes.func,\n    addLayerMarket: PropTypes.func,\n    editLayerMarket: PropTypes.func,\n    deleteLayerMarket: PropTypes.func,\n    getSelectedBulkMarketsByLayer: PropTypes.func,\n    toggleMarket: PropTypes.func,\n    bulkSelectToggle: PropTypes.func\n  }).isRequired\n};\nexport function StructuringTableView(_ref) {\n  var _this = this;\n\n  var layersArray = _ref.layers,\n      commentIDs = _ref.commentIDs,\n      marketSelectedId = _ref.marketSelectedId,\n      cols = _ref.cols,\n      capacityTypes = _ref.capacityTypes,\n      rowLimit = _ref.rowLimit,\n      printView = _ref.printView,\n      showBulkSelect = _ref.showBulkSelect,\n      statuses = _ref.statuses,\n      bulk = _ref.bulk,\n      handlers = _ref.handlers;\n  var classes = makeStyles(styles, {\n    name: 'StructuringTable'\n  })();\n  var layers = utils.layers.orderLayers(layersArray);\n  var statusQuotedId = utils.referenceData.status.getIdByCode(statuses.policyMarketQuoteStatuses, constants.STATUS_MARKET_QUOTED);\n  var statusPendingID = utils.referenceData.status.getIdByCode(statuses.policyMarketQuoteStatuses, constants.STATUS_MARKET_PENDING);\n  var statusDeclinedID = utils.referenceData.status.getIdByCode(statuses.policyMarketQuoteStatuses, constants.STATUS_MARKET_DECLINED); // abort\n\n  if (utils.generic.isInvalidOrEmptyArray(layers)) return null;\n  return /*#__PURE__*/_jsxDEV(Box, {\n    display: \"inline-block\",\n    minWidth: \"100%\",\n    children: layers.map(function (layer, index) {\n      var layerName = utils.layer.getName(layer);\n      var isNtu = layer.statusId === statuses.policyNtu.id;\n      var markets = get(layer, 'markets') || [];\n      var marketsOrdered = utils.markets.order(markets);\n      var currency = utils.markets.getCurrency(markets);\n      var limitedRows = rowLimit && isNumber(rowLimit) ? utils.placementPDF.getAccumulatedRowCount(marketsOrdered, rowLimit) : marketsOrdered;\n      var isLayerChecked = bulk.items.includes(layer.id);\n      var rowGroups = groupBy(limitedRows, function (row) {\n        return row.statusId;\n      });\n      var quotedMarkets = [];\n      var pendingMarkets = [];\n      var declinedMarkets = [];\n      var marketsWithNoStatus = [];\n\n      if (rowGroups[statusQuotedId]) {\n        var marketObject = groupBy(rowGroups[statusQuotedId], function (row) {\n          return row.premium;\n        });\n        Object.keys(marketObject).map(function (group) {\n          quotedMarkets === null || quotedMarkets === void 0 ? void 0 : quotedMarkets.push(marketObject[group]);\n          return true;\n        });\n      }\n\n      if (rowGroups[statusPendingID]) {\n        var _marketObject = groupBy(rowGroups[statusPendingID], function (row) {\n          return row.statusId;\n        });\n\n        Object.keys(_marketObject).map(function (group) {\n          pendingMarkets === null || pendingMarkets === void 0 ? void 0 : pendingMarkets.push(_marketObject[group]);\n          return true;\n        });\n      }\n\n      if (rowGroups[statusDeclinedID]) {\n        var _marketObject2 = groupBy(rowGroups[statusDeclinedID], function (row) {\n          return row.statusId;\n        });\n\n        Object.keys(_marketObject2).map(function (group) {\n          declinedMarkets === null || declinedMarkets === void 0 ? void 0 : declinedMarkets.push(_marketObject2[group]);\n          return true;\n        });\n      }\n\n      if (rowGroups['null']) {\n        var _marketObject3 = groupBy(rowGroups['null'], function (row) {\n          return row.statusId;\n        });\n\n        Object.keys(_marketObject3).map(function (group) {\n          marketsWithNoStatus === null || marketsWithNoStatus === void 0 ? void 0 : marketsWithNoStatus.push(_marketObject3[group]);\n          return true;\n        });\n      }\n\n      var allMarkets = [].concat(quotedMarkets, pendingMarkets, declinedMarkets, marketsWithNoStatus);\n      return /*#__PURE__*/_jsxDEV(Table, {\n        \"data-testid\": \"layer-table-\".concat(layer.id),\n        className: classes.table,\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          nestedClasses: {\n            tableCell: classes.tableHeadCell\n          },\n          columns: cols.map(function (col) {\n            if (col.title) {\n              col.label = /*#__PURE__*/_jsxDEV(Box, {\n                display: \"flex\",\n                alignItems: \"center\",\n                flexWrap: \"wrap\",\n                className: classes.layer,\n                children: [!printView && /*#__PURE__*/_jsxDEV(Restricted, {\n                  include: [constants.ROLE_BROKER],\n                  children: showBulkSelect && /*#__PURE__*/_jsxDEV(TableCheckbox, {\n                    checked: isLayerChecked,\n                    handleClick: isLayerChecked ? handlers.bulkSelectLayer(constants.DESELECTED, layer.id, markets) : handlers.bulkSelectLayer(constants.SELECTED, layer.id, markets),\n                    nestedClasses: {\n                      root: classes.checkbox\n                    },\n                    \"data-testid\": \"layer-row-checkbox\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 136,\n                    columnNumber: 29\n                  }, _this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 134,\n                  columnNumber: 25\n                }, _this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: classes.layerName,\n                  children: layerName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 149,\n                  columnNumber: 23\n                }, _this), isNtu && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: classes.layerStatus,\n                  children: /*#__PURE__*/_jsxDEV(Status, {\n                    size: \"xs\",\n                    text: /*#__PURE__*/_jsxDEV(Translate, {\n                      label: \"status.ntu\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 154,\n                      columnNumber: 35\n                    }, _this),\n                    status: statuses.policyNtu.key,\n                    \"data-testid\": \"layer-status-\".concat(layer.id),\n                    nestedClasses: {\n                      root: classes.status\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 152,\n                    columnNumber: 27\n                  }, _this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 151,\n                  columnNumber: 25\n                }, _this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: classes.layerNotes,\n                  children: layer.notes\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 161,\n                  columnNumber: 23\n                }, _this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 21\n              }, _this);\n            }\n\n            if (col.menu) {\n              col.label = /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: !printView && /*#__PURE__*/_jsxDEV(Restricted, {\n                  include: [constants.ROLE_BROKER],\n                  children: /*#__PURE__*/_jsxDEV(PopoverMenu, {\n                    id: \"layer-table-row\",\n                    data: {\n                      title: layerName,\n                      layer: layer\n                    },\n                    items: [{\n                      id: 'editLayer',\n                      label: 'app.edit',\n                      callback: handlers.editLayer\n                    }, {\n                      id: 'deleteLayer',\n                      label: 'app.delete',\n                      callback: handlers.deleteLayer\n                    }, {\n                      id: 'addLayerMarket',\n                      label: 'placement.marketing.addLayerMarket',\n                      callback: handlers.addLayerMarket\n                    }]\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 171,\n                    columnNumber: 27\n                  }, _this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 170,\n                  columnNumber: 25\n                }, _this)\n              }, void 0, false);\n            }\n\n            return _objectSpread({}, col);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: /*#__PURE__*/_jsxDEV(LayerTableRow, {\n            showHeaderRow: layer.showHeaderRow,\n            layer: layer,\n            markets: markets,\n            currency: currency,\n            showPremium: true,\n            showWritten: true,\n            showStatus: true,\n            \"data-testid\": layer.id,\n            children: allMarkets.map(function (market, index) {\n              return /*#__PURE__*/_jsxDEV(Fragment, {\n                children: [market.map(function (marketObj, index) {\n                  var isMarketChecked = bulk.itemsMarkets.includes(marketObj.id);\n                  var isMarketSelected = marketObj.id === marketSelectedId;\n                  var hasComments = commentIDs.map(function (comment) {\n                    return comment.id;\n                  }).includes(marketObj.id);\n                  var newComments = hasComments ? commentIDs.filter(function (comment) {\n                    return comment.nrDays < 3 && comment.id === marketObj.id;\n                  }).length > 0 ? true : false : false;\n                  return /*#__PURE__*/_jsxDEV(Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(LayerMarketTableRow, {\n                      printView: printView,\n                      layer: layer,\n                      market: marketObj,\n                      capacities: capacityTypes,\n                      isLast: index === limitedRows.length - 1,\n                      isChecked: isMarketChecked,\n                      isSelected: isMarketSelected,\n                      comments: {\n                        hasComments: hasComments,\n                        newComments: newComments\n                      },\n                      showPremium: true,\n                      showWritten: true,\n                      showStatus: true,\n                      showBulkSelect: showBulkSelect,\n                      handlers: {\n                        toggleMarket: handlers.toggleMarket,\n                        bulkSelectMarket: handlers.bulkSelectMarket,\n                        editLayerMarket: handlers.editLayerMarket\n                      },\n                      popoverItems: [{\n                        id: 'edit-layer-market',\n                        label: 'app.edit',\n                        callback: handlers.editLayerMarket\n                      }, {\n                        id: 'delete-layer-market',\n                        label: 'app.delete',\n                        callback: handlers.deleteLayerMarket\n                      }, {\n                        id: 'duplicateLayerMarket',\n                        label: 'placement.marketing.duplicateLayerMarket',\n                        callback: handlers.duplicateLayerMarket\n                      }]\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 230,\n                      columnNumber: 29\n                    }, _this), printView && marketObj.seeNoteMessage ? /*#__PURE__*/_jsxDEV(TableRow, {\n                      className: classes.seeNotesRow,\n                      children: /*#__PURE__*/_jsxDEV(TableCell, {\n                        colSpan: 4,\n                        children: utils.string.t('placement.firmOrder.seeNotes', {\n                          label: marketObj.seeNoteMessage\n                        })\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 269,\n                        columnNumber: 33\n                      }, _this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 268,\n                      columnNumber: 31\n                    }, _this) : null]\n                  }, marketObj.id, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 229,\n                    columnNumber: 27\n                  }, _this);\n                }), /*#__PURE__*/_jsxDEV(LayerMarketTableInfoRow, {\n                  marketGroup: market\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 277,\n                  columnNumber: 23\n                }, _this)]\n              }, \"key-\".concat(index), true, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 21\n              }, _this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 15\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 13\n        }, _this)]\n      }, layer.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, _this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n_c = StructuringTableView;\nStructuringTableView.displayName = \"StructuringTableView\";\nStructuringTableView.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"StructuringTableView\",\n  \"props\": {\n    \"layers\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"commentIDs\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"cols\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"capacityTypes\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"marketSelectedId\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"rowLimit\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"printView\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"statuses\": {\n      \"type\": {\n        \"name\": \"shape\",\n        \"value\": {\n          \"policyNtu\": {\n            \"name\": \"object\",\n            \"required\": false\n          },\n          \"policyMarketQuoteStatuses\": {\n            \"name\": \"array\",\n            \"required\": false\n          }\n        }\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"bulk\": {\n      \"type\": {\n        \"name\": \"shape\",\n        \"value\": {\n          \"type\": {\n            \"name\": \"string\",\n            \"required\": false\n          },\n          \"items\": {\n            \"name\": \"array\",\n            \"required\": false\n          },\n          \"itemsMarkets\": {\n            \"name\": \"array\",\n            \"required\": false\n          }\n        }\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"handlers\": {\n      \"type\": {\n        \"name\": \"shape\",\n        \"value\": {\n          \"bulkSelectLayer\": {\n            \"name\": \"func\",\n            \"required\": false\n          },\n          \"bulkSelectMarket\": {\n            \"name\": \"func\",\n            \"required\": false\n          },\n          \"editLayer\": {\n            \"name\": \"func\",\n            \"required\": false\n          },\n          \"deleteLayer\": {\n            \"name\": \"func\",\n            \"required\": false\n          },\n          \"addLayerMarket\": {\n            \"name\": \"func\",\n            \"required\": false\n          },\n          \"editLayerMarket\": {\n            \"name\": \"func\",\n            \"required\": false\n          },\n          \"deleteLayerMarket\": {\n            \"name\": \"func\",\n            \"required\": false\n          },\n          \"getSelectedBulkMarketsByLayer\": {\n            \"name\": \"func\",\n            \"required\": false\n          },\n          \"toggleMarket\": {\n            \"name\": \"func\",\n            \"required\": false\n          },\n          \"bulkSelectToggle\": {\n            \"name\": \"func\",\n            \"required\": false\n          }\n        }\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\modules\\\\StructuringTable\\\\StructuringTable.view.js\"] = {\n    name: \"StructuringTableView\",\n    docgenInfo: StructuringTableView.__docgenInfo,\n    path: \"src\\\\modules\\\\StructuringTable\\\\StructuringTable.view.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"StructuringTableView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/StructuringTable/StructuringTable.view.js"],"names":["React","Fragment","PropTypes","get","isNumber","groupBy","styles","PopoverMenu","Restricted","Status","TableCheckbox","TableHead","Translate","LayerTableRow","LayerMarketTableRow","LayerMarketTableInfoRow","constants","utils","makeStyles","Box","Table","TableBody","TableCell","TableRow","StructuringTableView","propTypes","layers","array","isRequired","commentIDs","cols","capacityTypes","marketSelectedId","number","rowLimit","printView","bool","statuses","shape","policyNtu","object","policyMarketQuoteStatuses","bulk","type","string","items","itemsMarkets","handlers","bulkSelectLayer","func","bulkSelectMarket","editLayer","deleteLayer","addLayerMarket","editLayerMarket","deleteLayerMarket","getSelectedBulkMarketsByLayer","toggleMarket","bulkSelectToggle","layersArray","showBulkSelect","classes","name","orderLayers","statusQuotedId","referenceData","status","getIdByCode","STATUS_MARKET_QUOTED","statusPendingID","STATUS_MARKET_PENDING","statusDeclinedID","STATUS_MARKET_DECLINED","generic","isInvalidOrEmptyArray","map","layer","index","layerName","getName","isNtu","statusId","id","markets","marketsOrdered","order","currency","getCurrency","limitedRows","placementPDF","getAccumulatedRowCount","isLayerChecked","includes","rowGroups","row","quotedMarkets","pendingMarkets","declinedMarkets","marketsWithNoStatus","marketObject","premium","Object","keys","group","push","allMarkets","table","tableCell","tableHeadCell","col","title","label","ROLE_BROKER","DESELECTED","SELECTED","root","checkbox","layerStatus","key","layerNotes","notes","menu","callback","showHeaderRow","market","marketObj","isMarketChecked","isMarketSelected","hasComments","comment","newComments","filter","nrDays","length","duplicateLayerMarket","seeNoteMessage","seeNotesRow","t"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport get from 'lodash/get';\r\nimport isNumber from 'lodash/isNumber';\r\nimport groupBy from 'lodash/groupBy';\r\n\r\n// app\r\nimport styles from './StructuringTable.styles.js';\r\nimport { PopoverMenu, Restricted, Status, TableCheckbox, TableHead, Translate } from 'components';\r\nimport { LayerTableRow, LayerMarketTableRow, LayerMarketTableInfoRow } from 'modules';\r\nimport * as constants from 'consts';\r\nimport * as utils from 'utils';\r\n\r\n// mui\r\nimport { makeStyles, Box, Table, TableBody, TableCell, TableRow } from '@material-ui/core';\r\n\r\nStructuringTableView.propTypes = {\r\n  layers: PropTypes.array.isRequired,\r\n  commentIDs: PropTypes.array,\r\n  cols: PropTypes.array.isRequired,\r\n  capacityTypes: PropTypes.array.isRequired,\r\n  marketSelectedId: PropTypes.number,\r\n  rowLimit: PropTypes.number,\r\n  printView: PropTypes.bool,\r\n  statuses: PropTypes.shape({\r\n    policyNtu: PropTypes.object,\r\n    policyMarketQuoteStatuses: PropTypes.array,\r\n  }).isRequired,\r\n  bulk: PropTypes.shape({\r\n    type: PropTypes.string,\r\n    items: PropTypes.array,\r\n    itemsMarkets: PropTypes.array,\r\n  }).isRequired,\r\n  handlers: PropTypes.shape({\r\n    bulkSelectLayer: PropTypes.func,\r\n    bulkSelectMarket: PropTypes.func,\r\n    editLayer: PropTypes.func,\r\n    deleteLayer: PropTypes.func,\r\n    addLayerMarket: PropTypes.func,\r\n    editLayerMarket: PropTypes.func,\r\n    deleteLayerMarket: PropTypes.func,\r\n    getSelectedBulkMarketsByLayer: PropTypes.func,\r\n    toggleMarket: PropTypes.func,\r\n    bulkSelectToggle: PropTypes.func,\r\n  }).isRequired,\r\n};\r\n\r\nexport function StructuringTableView({\r\n  layers: layersArray,\r\n  commentIDs,\r\n  marketSelectedId,\r\n  cols,\r\n  capacityTypes,\r\n  rowLimit,\r\n  printView,\r\n  showBulkSelect,\r\n  statuses,\r\n  bulk,\r\n  handlers,\r\n}) {\r\n  const classes = makeStyles(styles, { name: 'StructuringTable' })();\r\n\r\n  const layers = utils.layers.orderLayers(layersArray);\r\n\r\n  const statusQuotedId = utils.referenceData.status.getIdByCode(statuses.policyMarketQuoteStatuses, constants.STATUS_MARKET_QUOTED);\r\n  const statusPendingID = utils.referenceData.status.getIdByCode(statuses.policyMarketQuoteStatuses, constants.STATUS_MARKET_PENDING);\r\n  const statusDeclinedID = utils.referenceData.status.getIdByCode(statuses.policyMarketQuoteStatuses, constants.STATUS_MARKET_DECLINED);\r\n\r\n  // abort\r\n  if (utils.generic.isInvalidOrEmptyArray(layers)) return null;\r\n\r\n  return (\r\n    <Box display=\"inline-block\" minWidth=\"100%\">\r\n      {layers.map((layer, index) => {\r\n        const layerName = utils.layer.getName(layer);\r\n        const isNtu = layer.statusId === statuses.policyNtu.id;\r\n        const markets = get(layer, 'markets') || [];\r\n        const marketsOrdered = utils.markets.order(markets);\r\n        const currency = utils.markets.getCurrency(markets);\r\n        const limitedRows =\r\n          rowLimit && isNumber(rowLimit) ? utils.placementPDF.getAccumulatedRowCount(marketsOrdered, rowLimit) : marketsOrdered;\r\n        const isLayerChecked = bulk.items.includes(layer.id);\r\n\r\n        const rowGroups = groupBy(limitedRows, (row) => row.statusId);\r\n\r\n        let quotedMarkets = [];\r\n        let pendingMarkets = [];\r\n        let declinedMarkets = [];\r\n        let marketsWithNoStatus = [];\r\n\r\n        if (rowGroups[statusQuotedId]) {\r\n          const marketObject = groupBy(rowGroups[statusQuotedId], (row) => row.premium);\r\n          Object.keys(marketObject).map((group) => {\r\n            quotedMarkets?.push(marketObject[group]);\r\n            return true;\r\n          });\r\n        }\r\n\r\n        if (rowGroups[statusPendingID]) {\r\n          const marketObject = groupBy(rowGroups[statusPendingID], (row) => row.statusId);\r\n          Object.keys(marketObject).map((group) => {\r\n            pendingMarkets?.push(marketObject[group]);\r\n            return true;\r\n          });\r\n        }\r\n        if (rowGroups[statusDeclinedID]) {\r\n          const marketObject = groupBy(rowGroups[statusDeclinedID], (row) => row.statusId);\r\n          Object.keys(marketObject).map((group) => {\r\n            declinedMarkets?.push(marketObject[group]);\r\n            return true;\r\n          });\r\n        }\r\n        if (rowGroups['null']) {\r\n          const marketObject = groupBy(rowGroups['null'], (row) => row.statusId);\r\n          Object.keys(marketObject).map((group) => {\r\n            marketsWithNoStatus?.push(marketObject[group]);\r\n            return true;\r\n          });\r\n        }\r\n\r\n        const allMarkets = [...quotedMarkets, ...pendingMarkets, ...declinedMarkets, ...marketsWithNoStatus];\r\n\r\n        return (\r\n          <Table key={layer.id} data-testid={`layer-table-${layer.id}`} className={classes.table}>\r\n            <TableHead\r\n              nestedClasses={{\r\n                tableCell: classes.tableHeadCell,\r\n              }}\r\n              columns={cols.map((col) => {\r\n                if (col.title) {\r\n                  col.label = (\r\n                    <Box display=\"flex\" alignItems=\"center\" flexWrap=\"wrap\" className={classes.layer}>\r\n                      {!printView && (\r\n                        <Restricted include={[constants.ROLE_BROKER]}>\r\n                          {showBulkSelect && (\r\n                            <TableCheckbox\r\n                              checked={isLayerChecked}\r\n                              handleClick={\r\n                                isLayerChecked\r\n                                  ? handlers.bulkSelectLayer(constants.DESELECTED, layer.id, markets)\r\n                                  : handlers.bulkSelectLayer(constants.SELECTED, layer.id, markets)\r\n                              }\r\n                              nestedClasses={{ root: classes.checkbox }}\r\n                              data-testid=\"layer-row-checkbox\"\r\n                            />\r\n                          )}\r\n                        </Restricted>\r\n                      )}\r\n                      <span className={classes.layerName}>{layerName}</span>\r\n                      {isNtu && (\r\n                        <span className={classes.layerStatus}>\r\n                          <Status\r\n                            size=\"xs\"\r\n                            text={<Translate label=\"status.ntu\" />}\r\n                            status={statuses.policyNtu.key}\r\n                            data-testid={`layer-status-${layer.id}`}\r\n                            nestedClasses={{ root: classes.status }}\r\n                          />\r\n                        </span>\r\n                      )}\r\n                      <span className={classes.layerNotes}>{layer.notes}</span>\r\n                    </Box>\r\n                  );\r\n                }\r\n\r\n                if (col.menu) {\r\n                  col.label = (\r\n                    <>\r\n                      {!printView && (\r\n                        <Restricted include={[constants.ROLE_BROKER]}>\r\n                          <PopoverMenu\r\n                            id=\"layer-table-row\"\r\n                            data={{\r\n                              title: layerName,\r\n                              layer: layer,\r\n                            }}\r\n                            items={[\r\n                              {\r\n                                id: 'editLayer',\r\n                                label: 'app.edit',\r\n                                callback: handlers.editLayer,\r\n                              },\r\n                              {\r\n                                id: 'deleteLayer',\r\n                                label: 'app.delete',\r\n                                callback: handlers.deleteLayer,\r\n                              },\r\n                              {\r\n                                id: 'addLayerMarket',\r\n                                label: 'placement.marketing.addLayerMarket',\r\n                                callback: handlers.addLayerMarket,\r\n                              },\r\n                            ]}\r\n                          />\r\n                        </Restricted>\r\n                      )}\r\n                    </>\r\n                  );\r\n                }\r\n\r\n                return { ...col };\r\n              })}\r\n            />\r\n            <TableBody>\r\n              <LayerTableRow\r\n                showHeaderRow={layer.showHeaderRow}\r\n                layer={layer}\r\n                markets={markets}\r\n                currency={currency}\r\n                showPremium\r\n                showWritten\r\n                showStatus\r\n                data-testid={layer.id}\r\n              >\r\n                {allMarkets.map((market, index) => {\r\n                  return (\r\n                    <Fragment key={`key-${index}`}>\r\n                      {market.map((marketObj, index) => {\r\n                        const isMarketChecked = bulk.itemsMarkets.includes(marketObj.id);\r\n                        const isMarketSelected = marketObj.id === marketSelectedId;\r\n                        const hasComments = commentIDs.map((comment) => comment.id).includes(marketObj.id);\r\n                        const newComments = hasComments\r\n                          ? commentIDs.filter((comment) => comment.nrDays < 3 && comment.id === marketObj.id).length > 0\r\n                            ? true\r\n                            : false\r\n                          : false;\r\n\r\n                        return (\r\n                          <Fragment key={marketObj.id}>\r\n                            <LayerMarketTableRow\r\n                              printView={printView}\r\n                              layer={layer}\r\n                              market={marketObj}\r\n                              capacities={capacityTypes}\r\n                              isLast={index === limitedRows.length - 1}\r\n                              isChecked={isMarketChecked}\r\n                              isSelected={isMarketSelected}\r\n                              comments={{ hasComments: hasComments, newComments: newComments }}\r\n                              showPremium\r\n                              showWritten\r\n                              showStatus\r\n                              showBulkSelect={showBulkSelect}\r\n                              handlers={{\r\n                                toggleMarket: handlers.toggleMarket,\r\n                                bulkSelectMarket: handlers.bulkSelectMarket,\r\n                                editLayerMarket: handlers.editLayerMarket,\r\n                              }}\r\n                              popoverItems={[\r\n                                {\r\n                                  id: 'edit-layer-market',\r\n                                  label: 'app.edit',\r\n                                  callback: handlers.editLayerMarket,\r\n                                },\r\n                                {\r\n                                  id: 'delete-layer-market',\r\n                                  label: 'app.delete',\r\n                                  callback: handlers.deleteLayerMarket,\r\n                                },\r\n                                {\r\n                                  id: 'duplicateLayerMarket',\r\n                                  label: 'placement.marketing.duplicateLayerMarket',\r\n                                  callback: handlers.duplicateLayerMarket,\r\n                                },\r\n                              ]}\r\n                            />\r\n\r\n                            {printView && marketObj.seeNoteMessage ? (\r\n                              <TableRow className={classes.seeNotesRow}>\r\n                                <TableCell colSpan={4}>\r\n                                  {utils.string.t('placement.firmOrder.seeNotes', { label: marketObj.seeNoteMessage })}\r\n                                </TableCell>\r\n                              </TableRow>\r\n                            ) : null}\r\n                          </Fragment>\r\n                        );\r\n                      })}\r\n                      <LayerMarketTableInfoRow marketGroup={market} />\r\n                    </Fragment>\r\n                  );\r\n                })}\r\n              </LayerTableRow>\r\n            </TableBody>\r\n          </Table>\r\n        );\r\n      })}\r\n    </Box>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}