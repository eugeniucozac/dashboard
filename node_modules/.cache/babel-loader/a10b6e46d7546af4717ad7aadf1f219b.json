{"ast":null,"code":"import \"core-js/modules/es.array.map\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n// app\nimport { string, generic } from 'utils';\nimport { tabTableSchema, articleSchema } from './schemas.yup';\nexport var validateSchema = function validateSchema(_ref) {\n  var schema = _ref.schema;\n  return tabTableSchema.isValidSync(schema);\n};\n\nvar createColumns = function createColumns(columnHeaders, i18nPath) {\n  return columnHeaders.map(function (column) {\n    return _objectSpread(_objectSpread({}, column), {}, {\n      label: string.t(\"\".concat(i18nPath, \".columnNames.\").concat(column.id))\n    });\n  });\n};\n\nvar getCompletedCount = function getCompletedCount(rows, columnToCount) {\n  return rows.filter(function (row) {\n    var cell = row.cells.find(function (cells) {\n      return cells.columnName === columnToCount;\n    });\n    return cell && cell.value;\n  }).filter(function (i) {\n    return !!i;\n  }).length;\n};\n\nvar createContent = function createContent(tabNames, data, columnToCount, i18nPath, content) {\n  var rows = [];\n  var tabs = tabNames.map(function (tabKey) {\n    var sectionRows = content[tabKey].map(function (row) {\n      return createRow(data, row, \"\".concat(i18nPath, \".\").concat(tabKey, \".rows\"), tabKey);\n    });\n    var rowCount = getCompletedCount(rows, columnToCount);\n    rows = [].concat(_toConsumableArray(rows), _toConsumableArray(sectionRows));\n    return _objectSpread({\n      label: \"\".concat(i18nPath, \".\").concat(tabKey, \".label\"),\n      value: tabKey\n    }, columnToCount && {\n      total: rows.length,\n      complete: rowCount\n    });\n  });\n  return {\n    rows: rows,\n    tabs: tabs\n  };\n};\n\nvar createPiChecklistContent = function createPiChecklistContent(tabNames, data, columnToCount, i18nPath, content) {\n  var rows = [];\n  var tabs = tabNames.map(function (tabKey) {\n    var sectionRows = content[tabKey].map(function (row) {\n      return createPiCheckListRow(data, row, \"\".concat(i18nPath, \".\").concat(tabKey, \".rows\"), tabKey);\n    });\n    var rowCount = getCompletedCount(rows, columnToCount);\n    rows = [].concat(_toConsumableArray(rows), _toConsumableArray(sectionRows));\n    return _objectSpread({\n      label: \"\".concat(i18nPath, \".\").concat(tabKey, \".label\"),\n      value: tabKey\n    }, columnToCount && {\n      total: rows.length,\n      complete: rowCount\n    });\n  });\n  return {\n    rows: rows,\n    tabs: tabs\n  };\n};\n\nvar createPiCheckListRow = function createPiCheckListRow(data, _ref2, labelPath, tabKey) {\n  var rowKey = _ref2.rowKey,\n      _ref2$rowStyles = _ref2.rowStyles,\n      rowStyles = _ref2$rowStyles === void 0 ? {} : _ref2$rowStyles,\n      _ref2$cells = _ref2.cells,\n      cells = _ref2$cells === void 0 ? [] : _ref2$cells;\n  return {\n    rowKey: rowKey,\n    rowStyles: rowStyles,\n    tabKey: tabKey,\n    cells: cells.map(function (cell) {\n      var _cell$component = cell.component,\n          component = _cell$component === void 0 ? {} : _cell$component,\n          _cell$cellProps = cell.cellProps,\n          cellProps = _cell$cellProps === void 0 ? {} : _cell$cellProps;\n      var item = data.checklist && data.checklist.find(function (item) {\n        return item.checkListDetails === rowKey;\n      });\n      return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, cell.label ? {\n        label: \"\".concat(labelPath, \".\").concat(rowKey, \".label\")\n      } : {}), {}, {\n        columnName: cell.name,\n        name: \"checklist.\".concat(rowKey, \".\").concat(cell.name)\n      }, component && _objectSpread({}, component)), cellProps && {\n        cellProps: cellProps\n      }), {}, {\n        value: item ? component.type === 'datepicker' ? item[cell.name] || null : item[cell.name] : component.type === 'checkbox' ? '' : null\n      });\n    })\n  };\n};\n\nvar createRow = function createRow(data, _ref3, labelPath, tabKey) {\n  var rowKey = _ref3.rowKey,\n      _ref3$rowStyles = _ref3.rowStyles,\n      rowStyles = _ref3$rowStyles === void 0 ? {} : _ref3$rowStyles,\n      _ref3$cells = _ref3.cells,\n      cells = _ref3$cells === void 0 ? [] : _ref3$cells;\n  return {\n    rowKey: rowKey,\n    rowStyles: rowStyles,\n    tabKey: tabKey,\n    cells: cells.map(function (cell) {\n      var _cell$component2 = cell.component,\n          component = _cell$component2 === void 0 ? {} : _cell$component2,\n          _cell$cellProps2 = cell.cellProps,\n          cellProps = _cell$cellProps2 === void 0 ? {} : _cell$cellProps2;\n      var item = data.lineItems && data.lineItems.find(function (item) {\n        return item.itemKey === rowKey;\n      });\n      return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, cell.label ? {\n        label: \"\".concat(labelPath, \".\").concat(rowKey, \".label\")\n      } : {}), {}, {\n        columnName: cell.name,\n        name: \"lineItems.\".concat(rowKey, \".\").concat(cell.name)\n      }, component && _objectSpread({}, component)), cellProps && {\n        cellProps: cellProps\n      }), {}, {\n        value: item ? item[cell.name] : component.defaultValue\n      });\n    })\n  };\n};\n\nvar formatArticle = function formatArticle(article) {\n  var id = article.id,\n      heading = article.heading,\n      organisation_logo_url = article.organisation_logo_url,\n      excerpt = article.excerpt,\n      featured_image_url = article.featured_image_url,\n      external_url = article.external_url,\n      date = article.date,\n      topics = article.topics;\n  return {\n    id: id,\n    heading: heading,\n    organisation_logo_url: organisation_logo_url,\n    excerpt: excerpt,\n    featured_image_url: featured_image_url,\n    external_url: external_url,\n    date: date,\n    topics: topics\n  };\n};\n\nvar utilsSchemas = {\n  parseArticles: function parseArticles(articles) {\n    return articles.filter(function (article) {\n      return articleSchema.isValidSync(article);\n    }).map(function (article) {\n      return formatArticle(article);\n    });\n  },\n  parseOpeningMemo: function parseOpeningMemo(schema, data) {\n    if (!validateSchema({\n      schema: schema\n    })) return;\n    var tabNames = schema.tabNames,\n        defaultTab = schema.defaultTab,\n        columnHeaders = schema.columnHeaders,\n        columnToCount = schema.columnToCount,\n        i18nPath = schema.i18nPath,\n        content = schema.content;\n    var hydratedColumns = createColumns(columnHeaders, i18nPath);\n\n    var _createContent = createContent(tabNames, data, columnToCount, i18nPath, content),\n        tabs = _createContent.tabs,\n        rows = _createContent.rows;\n\n    return {\n      tabs: tabs,\n      defaultTab: defaultTab,\n      columnHeaders: hydratedColumns,\n      rows: rows\n    };\n  },\n  parsePiChecklist: function parsePiChecklist(schema, data) {\n    if (!validateSchema({\n      schema: schema\n    })) return;\n    var tabNames = schema.tabNames,\n        defaultTab = schema.defaultTab,\n        columnToCount = schema.columnToCount,\n        i18nPath = schema.i18nPath,\n        content = schema.content;\n\n    var _createPiChecklistCon = createPiChecklistContent(tabNames, data, columnToCount, i18nPath, content),\n        tabs = _createPiChecklistCon.tabs,\n        rows = _createPiChecklistCon.rows;\n\n    return {\n      tabs: tabs,\n      defaultTab: defaultTab,\n      rows: rows\n    };\n  },\n  removeIcons: function removeIcons(fields) {\n    if (generic.isInvalidOrEmptyArray(fields)) return [];\n    return fields.map(function (field) {\n      var fieldCopy = _objectSpread({}, field);\n\n      delete fieldCopy.icon;\n      return fieldCopy;\n    });\n  }\n};\nexport default utilsSchemas;","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/utils/schemas/schemas.js"],"names":["string","generic","tabTableSchema","articleSchema","validateSchema","schema","isValidSync","createColumns","columnHeaders","i18nPath","map","column","label","t","id","getCompletedCount","rows","columnToCount","filter","row","cell","cells","find","columnName","value","i","length","createContent","tabNames","data","content","tabs","tabKey","sectionRows","createRow","rowCount","total","complete","createPiChecklistContent","createPiCheckListRow","labelPath","rowKey","rowStyles","component","cellProps","item","checklist","checkListDetails","name","type","lineItems","itemKey","defaultValue","formatArticle","article","heading","organisation_logo_url","excerpt","featured_image_url","external_url","date","topics","utilsSchemas","parseArticles","articles","parseOpeningMemo","defaultTab","hydratedColumns","parsePiChecklist","removeIcons","fields","isInvalidOrEmptyArray","field","fieldCopy","icon"],"mappings":"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","sourcesContent":["// app\r\nimport { string, generic } from 'utils';\r\nimport { tabTableSchema, articleSchema } from './schemas.yup';\r\n\r\nexport const validateSchema = ({ schema }) => {\r\n  return tabTableSchema.isValidSync(schema);\r\n};\r\n\r\nconst createColumns = (columnHeaders, i18nPath) => {\r\n  return columnHeaders.map((column) => ({\r\n    ...column,\r\n    label: string.t(`${i18nPath}.columnNames.${column.id}`),\r\n  }));\r\n};\r\n\r\nconst getCompletedCount = (rows, columnToCount) => {\r\n  return rows\r\n    .filter((row) => {\r\n      const cell = row.cells.find((cells) => cells.columnName === columnToCount);\r\n      return cell && cell.value;\r\n    })\r\n    .filter((i) => !!i).length;\r\n};\r\n\r\nconst createContent = (tabNames, data, columnToCount, i18nPath, content) => {\r\n  let rows = [];\r\n  const tabs = tabNames.map((tabKey) => {\r\n    const sectionRows = content[tabKey].map((row) => createRow(data, row, `${i18nPath}.${tabKey}.rows`, tabKey));\r\n    const rowCount = getCompletedCount(rows, columnToCount);\r\n    rows = [...rows, ...sectionRows];\r\n    return {\r\n      label: `${i18nPath}.${tabKey}.label`,\r\n      value: tabKey,\r\n      ...(columnToCount && { total: rows.length, complete: rowCount }),\r\n    };\r\n  });\r\n  return { rows, tabs };\r\n};\r\n\r\nconst createPiChecklistContent = (tabNames, data, columnToCount, i18nPath, content) => {\r\n  let rows = [];\r\n  const tabs = tabNames.map((tabKey) => {\r\n    const sectionRows = content[tabKey].map((row) => createPiCheckListRow(data, row, `${i18nPath}.${tabKey}.rows`, tabKey));\r\n    const rowCount = getCompletedCount(rows, columnToCount);\r\n    rows = [...rows, ...sectionRows];\r\n    return {\r\n      label: `${i18nPath}.${tabKey}.label`,\r\n      value: tabKey,\r\n      ...(columnToCount && { total: rows.length, complete: rowCount }),\r\n    };\r\n  });\r\n  return { rows, tabs };\r\n};\r\n\r\nconst createPiCheckListRow = (data, { rowKey, rowStyles = {}, cells = [] }, labelPath, tabKey) => {\r\n  return {\r\n    rowKey,\r\n    rowStyles,\r\n    tabKey: tabKey,\r\n    cells: cells.map((cell) => {\r\n      const { component = {}, cellProps = {} } = cell;\r\n      const item = data.checklist && data.checklist.find((item) => item.checkListDetails === rowKey);\r\n\r\n      return {\r\n        ...(cell.label ? { label: `${labelPath}.${rowKey}.label` } : {}),\r\n        columnName: cell.name,\r\n        name: `checklist.${rowKey}.${cell.name}`,\r\n        ...(component && { ...component }),\r\n        ...(cellProps && { cellProps }),\r\n        value: item\r\n          ? component.type === 'datepicker'\r\n            ? item[cell.name] || null\r\n            : item[cell.name]\r\n          : component.type === 'checkbox'\r\n          ? ''\r\n          : null,\r\n      };\r\n    }),\r\n  };\r\n};\r\n\r\nconst createRow = (data, { rowKey, rowStyles = {}, cells = [] }, labelPath, tabKey) => {\r\n  return {\r\n    rowKey,\r\n    rowStyles,\r\n    tabKey: tabKey,\r\n    cells: cells.map((cell) => {\r\n      const { component = {}, cellProps = {} } = cell;\r\n      const item = data.lineItems && data.lineItems.find((item) => item.itemKey === rowKey);\r\n      return {\r\n        ...(cell.label ? { label: `${labelPath}.${rowKey}.label` } : {}),\r\n        columnName: cell.name,\r\n        name: `lineItems.${rowKey}.${cell.name}`,\r\n        ...(component && { ...component }),\r\n        ...(cellProps && { cellProps }),\r\n        value: item ? item[cell.name] : component.defaultValue,\r\n      };\r\n    }),\r\n  };\r\n};\r\n\r\nconst formatArticle = (article) => {\r\n  const { id, heading, organisation_logo_url, excerpt, featured_image_url, external_url, date, topics } = article;\r\n  return { id, heading, organisation_logo_url, excerpt, featured_image_url, external_url, date, topics };\r\n};\r\n\r\nconst utilsSchemas = {\r\n  parseArticles: (articles) => {\r\n    return articles.filter((article) => articleSchema.isValidSync(article)).map((article) => formatArticle(article));\r\n  },\r\n\r\n  parseOpeningMemo: (schema, data) => {\r\n    if (!validateSchema({ schema })) return;\r\n    const { tabNames, defaultTab, columnHeaders, columnToCount, i18nPath, content } = schema;\r\n    const hydratedColumns = createColumns(columnHeaders, i18nPath);\r\n    const { tabs, rows } = createContent(tabNames, data, columnToCount, i18nPath, content);\r\n    return { tabs, defaultTab, columnHeaders: hydratedColumns, rows };\r\n  },\r\n\r\n  parsePiChecklist: (schema, data) => {\r\n    if (!validateSchema({ schema })) return;\r\n\r\n    const { tabNames, defaultTab, columnToCount, i18nPath, content } = schema;\r\n    const { tabs, rows } = createPiChecklistContent(tabNames, data, columnToCount, i18nPath, content);\r\n\r\n    return { tabs, defaultTab, rows };\r\n  },\r\n\r\n  removeIcons: (fields) => {\r\n    if (generic.isInvalidOrEmptyArray(fields)) return [];\r\n\r\n    return fields.map((field) => {\r\n      const fieldCopy = { ...field };\r\n      delete fieldCopy.icon;\r\n\r\n      return fieldCopy;\r\n    });\r\n  },\r\n};\r\n\r\nexport default utilsSchemas;\r\n"]},"metadata":{},"sourceType":"module"}