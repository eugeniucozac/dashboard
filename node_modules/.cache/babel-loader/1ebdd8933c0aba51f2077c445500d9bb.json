{"ast":null,"code":"import _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport flatten from 'lodash/flatten';\nimport get from 'lodash/get'; // app\n\nimport * as utils from 'utils';\nimport config from 'config';\nimport { PLACEMENT_DECLARATION } from 'consts';\nimport { openingMemoSchema } from 'schemas';\nimport { transformOpeningMemoInPUT } from 'stores';\nexport var getData = function getData(_ref) {\n  var _ref$openingMemo = _ref.openingMemo,\n      openingMemo = _ref$openingMemo === void 0 ? {} : _ref$openingMemo,\n      departmentName = _ref.departmentName,\n      _ref$referenceData = _ref.referenceData,\n      referenceData = _ref$referenceData === void 0 ? {} : _ref$referenceData;\n  var transformedOpeningMemo = transformOpeningMemoInPUT(openingMemo);\n  var labels = helpers.getLabels();\n  if (!transformedOpeningMemo) return;\n  return {\n    labels: labels,\n    tableHeader: helpers.createHeader(),\n    summaryBody: helpers.createSummaryBody(transformedOpeningMemo, departmentName, referenceData.newRenewalBusinesses, labels),\n    checklistBody: flatten(['prePlacing', 'mrc', 'other'].map(function (sectionKey) {\n      return helpers.createChecklistBody(transformedOpeningMemo, sectionKey, false, referenceData);\n    })),\n    instructionBody: helpers.createChecklistBody(transformedOpeningMemo, 'instructions', true, referenceData),\n    specialBody: helpers.createSpecialBody(transformedOpeningMemo),\n    approvalBody: helpers.createApprovalBody(transformedOpeningMemo, labels.approved)\n  };\n};\nvar helpers = {\n  createHeader: function createHeader() {\n    return [['detail', 'accountHandler', 'isAuthorised'].map(function (headerKey) {\n      return helpers.getHeaderLabel(headerKey);\n    })];\n  },\n  createChecklistBody: function createChecklistBody(openingMemo, sectionKey, subHeader, referenceData) {\n    if (!openingMemo) return [];\n    var rows = get(openingMemoSchema, \"content.\".concat(sectionKey));\n    if (!rows || !Array.isArray(rows)) return [];\n    var data = rows.map(function (row) {\n      var item = openingMemo.lineItems.find(function (item) {\n        return item.itemKey === row.rowKey;\n      }) || {};\n      var labelColumn = \"\".concat(helpers.getRowLabel(sectionKey, row.rowKey));\n      return [item.itemDate ? \"\".concat(labelColumn, \" (\").concat(utils.string.t('format.date', {\n        value: {\n          date: item.itemDate,\n          format: config.ui.format.date.text\n        }\n      }), \")\") : labelColumn, helpers.renderAccountHandler(item.accountHandler, row, referenceData, openingMemo.lineItems), item.isAuthorised ? utils.string.t('app.authorised') : '-'];\n    });\n    return [[{\n      colSpan: 3,\n      content: subHeader ? helpers.getSectionSubHeader(sectionKey) : helpers.getSectionLabel(sectionKey)\n    }]].concat(_toConsumableArray(data));\n  },\n  calculateTotal: function calculateTotal(lineItems) {\n    var sourceRowIds = ['totalClientDiscount', 'totalThirdParty', 'totalPfInternal', 'totalRetainedBrokerage'];\n    var values = lineItems.filter(function (item) {\n      return sourceRowIds.includes(item.itemKey);\n    }).map(function (item) {\n      return item.accountHandler;\n    });\n    return utils.generic.getSumOfArray(values, config.ui.format.percent.decimal);\n  },\n  calculateRetainedBrokerageAmount: function calculateRetainedBrokerageAmount(lineItems) {\n    var premiumCurrency = (lineItems.find(function (item) {\n      return item.itemKey === 'retainedBrokerageAmount';\n    }) || {}).premiumCurrency || '';\n    var grossPremium = lineItems.find(function (item) {\n      return item.itemKey === 'grossPremium';\n    });\n    var slipOrder = lineItems.find(function (item) {\n      return item.itemKey === 'slipOrder';\n    });\n    var totalRetainedBrokerage = lineItems.find(function (item) {\n      return item.itemKey === 'totalRetainedBrokerage';\n    });\n    if (!utils.generic.isValidObject(grossPremium) || !utils.generic.isValidObject(slipOrder) || !utils.generic.isValidObject(totalRetainedBrokerage)) return;\n    var brokerageAmount = utils.openingMemo.getRetainedBrokerageValue(grossPremium.accountHandler, slipOrder.accountHandler, totalRetainedBrokerage.accountHandler);\n    var convertedBrokerage = utils.openingMemo.getRetainedBrokerageConvertedValue(premiumCurrency, brokerageAmount);\n    var convertedBrokerageString = convertedBrokerage ? \" / GBP \".concat(convertedBrokerage.value, \" @ \").concat(utils.string.t('format.number', {\n      value: {\n        number: convertedBrokerage.rate,\n        format: {\n          trimMantissa: false\n        }\n      }\n    })) : '';\n    return \"\".concat(premiumCurrency, \" \").concat(brokerageAmount).concat(convertedBrokerageString);\n  },\n  renderAccountHandler: function renderAccountHandler(accountHandler, row, referenceData, lineItems) {\n    var cell = row.cells.find(function (cell) {\n      return cell.name === 'accountHandler';\n    });\n    if (!cell) return;\n    if (row.rowKey === 'total') return helpers.calculateTotal(lineItems);\n    if (row.rowKey === 'retainedBrokerageAmount') return helpers.calculateRetainedBrokerageAmount(lineItems);\n    if (!cell.component || !cell.component.optionsKey) return accountHandler;\n    return utils.form.getSelectOption(cell.component.optionsKey, referenceData, accountHandler);\n  },\n  createSummaryBody: function createSummaryBody(openingMemo, departmentName, newRenewalBusinesses, labels) {\n    var _openingMemo$placemen;\n\n    var originator = get(openingMemo, 'originator.fullName');\n    var placingBroker = get(openingMemo, 'placingBroker.fullName');\n    return [[utils.string.t('placement.openingMemo.riskReference'), openingMemo.uniqueMarketReference || '-'], [helpers.getRowLabel('summary', 'placementType'), helpers.getOptionLabel('placementType', ((_openingMemo$placemen = openingMemo.placementType) === null || _openingMemo$placemen === void 0 ? void 0 : _openingMemo$placemen.toLowerCase()) || '-')]].concat(_toConsumableArray(openingMemo.placementType === PLACEMENT_DECLARATION ? [[helpers.getRowLabel('summary', 'attachedTo'), openingMemo.attachedTo || '-']] : []), [['', ''], [helpers.getRowLabel('summary', 'newRenewalBusinessId'), openingMemo.newRenewalBusinessId ? utils.referenceData.newRenewalBusinesses.getLabelById(newRenewalBusinesses, openingMemo.newRenewalBusinessId) : '-'], [helpers.getRowLabel('summary', 'department'), departmentName || '-'], [helpers.getRowLabel('summary', 'reInsured'), openingMemo.reInsured || '-'], [helpers.getRowLabel('summary', 'period'), \"\".concat(helpers.formatDate(openingMemo.inceptionDate), \" - \").concat(helpers.formatDate(openingMemo.expiryDate)).trim() || '-'], ['', ''], [helpers.getRowLabel('summary', 'invoicingClient'), openingMemo.invoicingClient || '-'], [helpers.getRowLabel('summary', 'clientContactName'), openingMemo.clientContactName || '-'], [helpers.getRowLabel('summary', 'clientEmail'), openingMemo.clientEmail || '-'], [helpers.getRowLabel('summary', 'eocInvoiceContactName'), openingMemo.eocInvoiceContactName || '-'], [helpers.getRowLabel('summary', 'eocInvoiceEmail'), openingMemo.eocInvoiceEmail || '-'], ['', ''], [labels.producingBrokerLabel, get(openingMemo, 'producingBroker.fullName') || '-'], [labels.accountExecutiveLabel, get(openingMemo, 'accountExecutive.fullName') || '-']], _toConsumableArray(placingBroker ? [[labels.placingBrokerLabel, placingBroker]] : []), _toConsumableArray(originator ? [[labels.originatorLabel, originator]] : []));\n  },\n  createApprovalBody: function createApprovalBody(openingMemo, approvedLabel) {\n    return [[get(openingMemo, 'accountHandler.fullName'), get(openingMemo, 'authorisedSignatory.fullName')], [openingMemo.isAccountHandlerApproved ? \"\".concat(approvedLabel, \": \").concat(helpers.formatDate(openingMemo.accountHandlerApprovalDate)) : '-', openingMemo.isAuthorisedSignatoryApproved ? \"\".concat(approvedLabel, \": \").concat(helpers.formatDate(openingMemo.authorisedSignatoryApprovalDate)) : '-']];\n  },\n  createSpecialBody: function createSpecialBody(openingMemo) {\n    return [[{\n      colSpan: 2,\n      content: openingMemo.notes || '-'\n    }], [{\n      colSpan: 2,\n      content: openingMemo.listOfRisks || '-'\n    }]];\n  },\n  formatDate: function formatDate(date) {\n    return utils.string.t('format.date', {\n      value: {\n        date: date,\n        format: config.ui.format.date.text\n      }\n    });\n  },\n  getLabels: function getLabels() {\n    return {\n      na: utils.string.t('form.options.yesNoNa.na'),\n      approved: utils.string.t('app.approved'),\n      pdfHeader: utils.string.t('placement.openingMemo.pdf.header'),\n      instructionToProcessing: utils.string.t('placement.openingMemo.instructionToProcessing'),\n      specialInstructionsHeader: utils.string.t('placement.openingMemo.specialInstructions.header'),\n      accountHandler: utils.string.t('placement.openingMemo.approvers.accountHandler'),\n      authorisedSignatory: utils.string.t('placement.openingMemo.approvers.authorisedSignatory'),\n      placingBrokerLabel: utils.string.t('placement.openingMemo.specialInstructions.placingBroker.label'),\n      originatorLabel: utils.string.t('placement.openingMemo.specialInstructions.originator.label'),\n      accountExecutiveLabel: utils.string.t('placement.openingMemo.specialInstructions.accountExecutive.label'),\n      producingBrokerLabel: utils.string.t('placement.openingMemo.specialInstructions.producingBroker.label')\n    };\n  },\n  getRowLabel: function getRowLabel(sectionKey, rowKey) {\n    return utils.string.t(\"placement.openingMemo.\".concat(sectionKey, \".rows.\").concat(rowKey, \".label\"));\n  },\n  getYesNoNaLabel: function getYesNoNaLabel(accountHandler) {\n    return utils.string.t(\"form.options.yesNoNa.\".concat(utils.string.replaceLowerCase(accountHandler)));\n  },\n  getSectionLabel: function getSectionLabel(sectionKey) {\n    return utils.string.t(\"placement.openingMemo.\".concat(sectionKey, \".label\"));\n  },\n  getSectionSubHeader: function getSectionSubHeader(sectionKey) {\n    return utils.string.t(\"placement.openingMemo.\".concat(sectionKey, \".subHeader\"));\n  },\n  getHeaderLabel: function getHeaderLabel(headerKey) {\n    return utils.string.t(\"placement.openingMemo.columnNames.\".concat(headerKey));\n  },\n  getOptionLabel: function getOptionLabel(rowKey, value) {\n    return utils.string.t(\"form.options.\".concat(rowKey, \".\").concat(value));\n  }\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/OpeningMemo/OpeningMemo.pdf.helpers.js"],"names":["flatten","get","utils","config","PLACEMENT_DECLARATION","openingMemoSchema","transformOpeningMemoInPUT","getData","openingMemo","departmentName","referenceData","transformedOpeningMemo","labels","helpers","getLabels","tableHeader","createHeader","summaryBody","createSummaryBody","newRenewalBusinesses","checklistBody","map","sectionKey","createChecklistBody","instructionBody","specialBody","createSpecialBody","approvalBody","createApprovalBody","approved","headerKey","getHeaderLabel","subHeader","rows","Array","isArray","data","row","item","lineItems","find","itemKey","rowKey","labelColumn","getRowLabel","itemDate","string","t","value","date","format","ui","text","renderAccountHandler","accountHandler","isAuthorised","colSpan","content","getSectionSubHeader","getSectionLabel","calculateTotal","sourceRowIds","values","filter","includes","generic","getSumOfArray","percent","decimal","calculateRetainedBrokerageAmount","premiumCurrency","grossPremium","slipOrder","totalRetainedBrokerage","isValidObject","brokerageAmount","getRetainedBrokerageValue","convertedBrokerage","getRetainedBrokerageConvertedValue","convertedBrokerageString","number","rate","trimMantissa","cell","cells","name","component","optionsKey","form","getSelectOption","originator","placingBroker","uniqueMarketReference","getOptionLabel","placementType","toLowerCase","attachedTo","newRenewalBusinessId","getLabelById","reInsured","formatDate","inceptionDate","expiryDate","trim","invoicingClient","clientContactName","clientEmail","eocInvoiceContactName","eocInvoiceEmail","producingBrokerLabel","accountExecutiveLabel","placingBrokerLabel","originatorLabel","approvedLabel","isAccountHandlerApproved","accountHandlerApprovalDate","isAuthorisedSignatoryApproved","authorisedSignatoryApprovalDate","notes","listOfRisks","na","pdfHeader","instructionToProcessing","specialInstructionsHeader","authorisedSignatory","getYesNoNaLabel","replaceLowerCase"],"mappings":"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","sourcesContent":["import flatten from 'lodash/flatten';\r\nimport get from 'lodash/get';\r\n\r\n// app\r\nimport * as utils from 'utils';\r\nimport config from 'config';\r\nimport { PLACEMENT_DECLARATION } from 'consts';\r\nimport { openingMemoSchema } from 'schemas';\r\nimport { transformOpeningMemoInPUT } from 'stores';\r\n\r\nexport const getData = ({ openingMemo = {}, departmentName, referenceData = {} }) => {\r\n  const transformedOpeningMemo = transformOpeningMemoInPUT(openingMemo);\r\n  const labels = helpers.getLabels();\r\n\r\n  if (!transformedOpeningMemo) return;\r\n\r\n  return {\r\n    labels,\r\n    tableHeader: helpers.createHeader(),\r\n    summaryBody: helpers.createSummaryBody(transformedOpeningMemo, departmentName, referenceData.newRenewalBusinesses, labels),\r\n    checklistBody: flatten(\r\n      ['prePlacing', 'mrc', 'other'].map((sectionKey) =>\r\n        helpers.createChecklistBody(transformedOpeningMemo, sectionKey, false, referenceData)\r\n      )\r\n    ),\r\n    instructionBody: helpers.createChecklistBody(transformedOpeningMemo, 'instructions', true, referenceData),\r\n    specialBody: helpers.createSpecialBody(transformedOpeningMemo),\r\n    approvalBody: helpers.createApprovalBody(transformedOpeningMemo, labels.approved),\r\n  };\r\n};\r\n\r\nconst helpers = {\r\n  createHeader: () => {\r\n    return [['detail', 'accountHandler', 'isAuthorised'].map((headerKey) => helpers.getHeaderLabel(headerKey))];\r\n  },\r\n  createChecklistBody: (openingMemo, sectionKey, subHeader, referenceData) => {\r\n    if (!openingMemo) return [];\r\n    const rows = get(openingMemoSchema, `content.${sectionKey}`);\r\n    if (!rows || !Array.isArray(rows)) return [];\r\n    const data = rows.map((row) => {\r\n      const item = openingMemo.lineItems.find((item) => item.itemKey === row.rowKey) || {};\r\n      const labelColumn = `${helpers.getRowLabel(sectionKey, row.rowKey)}`;\r\n      return [\r\n        item.itemDate\r\n          ? `${labelColumn} (${utils.string.t('format.date', { value: { date: item.itemDate, format: config.ui.format.date.text } })})`\r\n          : labelColumn,\r\n        helpers.renderAccountHandler(item.accountHandler, row, referenceData, openingMemo.lineItems),\r\n        item.isAuthorised ? utils.string.t('app.authorised') : '-',\r\n      ];\r\n    });\r\n    return [[{ colSpan: 3, content: subHeader ? helpers.getSectionSubHeader(sectionKey) : helpers.getSectionLabel(sectionKey) }], ...data];\r\n  },\r\n  calculateTotal: (lineItems) => {\r\n    const sourceRowIds = ['totalClientDiscount', 'totalThirdParty', 'totalPfInternal', 'totalRetainedBrokerage'];\r\n    const values = lineItems.filter((item) => sourceRowIds.includes(item.itemKey)).map((item) => item.accountHandler);\r\n    return utils.generic.getSumOfArray(values, config.ui.format.percent.decimal);\r\n  },\r\n  calculateRetainedBrokerageAmount: (lineItems) => {\r\n    const premiumCurrency = (lineItems.find((item) => item.itemKey === 'retainedBrokerageAmount') || {}).premiumCurrency || '';\r\n    const grossPremium = lineItems.find((item) => item.itemKey === 'grossPremium');\r\n    const slipOrder = lineItems.find((item) => item.itemKey === 'slipOrder');\r\n    const totalRetainedBrokerage = lineItems.find((item) => item.itemKey === 'totalRetainedBrokerage');\r\n\r\n    if (\r\n      !utils.generic.isValidObject(grossPremium) ||\r\n      !utils.generic.isValidObject(slipOrder) ||\r\n      !utils.generic.isValidObject(totalRetainedBrokerage)\r\n    )\r\n      return;\r\n\r\n    const brokerageAmount = utils.openingMemo.getRetainedBrokerageValue(\r\n      grossPremium.accountHandler,\r\n      slipOrder.accountHandler,\r\n      totalRetainedBrokerage.accountHandler\r\n    );\r\n    const convertedBrokerage = utils.openingMemo.getRetainedBrokerageConvertedValue(premiumCurrency, brokerageAmount);\r\n    const convertedBrokerageString = convertedBrokerage\r\n      ? ` / GBP ${convertedBrokerage.value} @ ${utils.string.t('format.number', {\r\n          value: { number: convertedBrokerage.rate, format: { trimMantissa: false } },\r\n        })}`\r\n      : '';\r\n\r\n    return `${premiumCurrency} ${brokerageAmount}${convertedBrokerageString}`;\r\n  },\r\n  renderAccountHandler: (accountHandler, row, referenceData, lineItems) => {\r\n    const cell = row.cells.find((cell) => cell.name === 'accountHandler');\r\n    if (!cell) return;\r\n    if (row.rowKey === 'total') return helpers.calculateTotal(lineItems);\r\n    if (row.rowKey === 'retainedBrokerageAmount') return helpers.calculateRetainedBrokerageAmount(lineItems);\r\n    if (!cell.component || !cell.component.optionsKey) return accountHandler;\r\n    return utils.form.getSelectOption(cell.component.optionsKey, referenceData, accountHandler);\r\n  },\r\n  createSummaryBody: (openingMemo, departmentName, newRenewalBusinesses, labels) => {\r\n    const originator = get(openingMemo, 'originator.fullName');\r\n    const placingBroker = get(openingMemo, 'placingBroker.fullName');\r\n\r\n    return [\r\n      [utils.string.t('placement.openingMemo.riskReference'), openingMemo.uniqueMarketReference || '-'],\r\n      [\r\n        helpers.getRowLabel('summary', 'placementType'),\r\n        helpers.getOptionLabel('placementType', openingMemo.placementType?.toLowerCase() || '-'),\r\n      ],\r\n      ...(openingMemo.placementType === PLACEMENT_DECLARATION\r\n        ? [[helpers.getRowLabel('summary', 'attachedTo'), openingMemo.attachedTo || '-']]\r\n        : []),\r\n      ['', ''],\r\n      [\r\n        helpers.getRowLabel('summary', 'newRenewalBusinessId'),\r\n        openingMemo.newRenewalBusinessId\r\n          ? utils.referenceData.newRenewalBusinesses.getLabelById(newRenewalBusinesses, openingMemo.newRenewalBusinessId)\r\n          : '-',\r\n      ],\r\n      [helpers.getRowLabel('summary', 'department'), departmentName || '-'],\r\n      [helpers.getRowLabel('summary', 'reInsured'), openingMemo.reInsured || '-'],\r\n      [\r\n        helpers.getRowLabel('summary', 'period'),\r\n        `${helpers.formatDate(openingMemo.inceptionDate)} - ${helpers.formatDate(openingMemo.expiryDate)}`.trim() || '-',\r\n      ],\r\n      ['', ''],\r\n      [helpers.getRowLabel('summary', 'invoicingClient'), openingMemo.invoicingClient || '-'],\r\n      [helpers.getRowLabel('summary', 'clientContactName'), openingMemo.clientContactName || '-'],\r\n      [helpers.getRowLabel('summary', 'clientEmail'), openingMemo.clientEmail || '-'],\r\n      [helpers.getRowLabel('summary', 'eocInvoiceContactName'), openingMemo.eocInvoiceContactName || '-'],\r\n      [helpers.getRowLabel('summary', 'eocInvoiceEmail'), openingMemo.eocInvoiceEmail || '-'],\r\n      ['', ''],\r\n      [labels.producingBrokerLabel, get(openingMemo, 'producingBroker.fullName') || '-'],\r\n      [labels.accountExecutiveLabel, get(openingMemo, 'accountExecutive.fullName') || '-'],\r\n      ...(placingBroker ? [[labels.placingBrokerLabel, placingBroker]] : []),\r\n      ...(originator ? [[labels.originatorLabel, originator]] : []),\r\n    ];\r\n  },\r\n  createApprovalBody: (openingMemo, approvedLabel) => {\r\n    return [\r\n      [get(openingMemo, 'accountHandler.fullName'), get(openingMemo, 'authorisedSignatory.fullName')],\r\n      [\r\n        openingMemo.isAccountHandlerApproved ? `${approvedLabel}: ${helpers.formatDate(openingMemo.accountHandlerApprovalDate)}` : '-',\r\n        openingMemo.isAuthorisedSignatoryApproved\r\n          ? `${approvedLabel}: ${helpers.formatDate(openingMemo.authorisedSignatoryApprovalDate)}`\r\n          : '-',\r\n      ],\r\n    ];\r\n  },\r\n  createSpecialBody: (openingMemo) => {\r\n    return [[{ colSpan: 2, content: openingMemo.notes || '-' }], [{ colSpan: 2, content: openingMemo.listOfRisks || '-' }]];\r\n  },\r\n  formatDate: (date) => {\r\n    return utils.string.t('format.date', { value: { date, format: config.ui.format.date.text } });\r\n  },\r\n  getLabels: () => ({\r\n    na: utils.string.t('form.options.yesNoNa.na'),\r\n    approved: utils.string.t('app.approved'),\r\n    pdfHeader: utils.string.t('placement.openingMemo.pdf.header'),\r\n    instructionToProcessing: utils.string.t('placement.openingMemo.instructionToProcessing'),\r\n    specialInstructionsHeader: utils.string.t('placement.openingMemo.specialInstructions.header'),\r\n    accountHandler: utils.string.t('placement.openingMemo.approvers.accountHandler'),\r\n    authorisedSignatory: utils.string.t('placement.openingMemo.approvers.authorisedSignatory'),\r\n    placingBrokerLabel: utils.string.t('placement.openingMemo.specialInstructions.placingBroker.label'),\r\n    originatorLabel: utils.string.t('placement.openingMemo.specialInstructions.originator.label'),\r\n    accountExecutiveLabel: utils.string.t('placement.openingMemo.specialInstructions.accountExecutive.label'),\r\n    producingBrokerLabel: utils.string.t('placement.openingMemo.specialInstructions.producingBroker.label'),\r\n  }),\r\n  getRowLabel: (sectionKey, rowKey) => utils.string.t(`placement.openingMemo.${sectionKey}.rows.${rowKey}.label`),\r\n  getYesNoNaLabel: (accountHandler) => utils.string.t(`form.options.yesNoNa.${utils.string.replaceLowerCase(accountHandler)}`),\r\n  getSectionLabel: (sectionKey) => utils.string.t(`placement.openingMemo.${sectionKey}.label`),\r\n  getSectionSubHeader: (sectionKey) => utils.string.t(`placement.openingMemo.${sectionKey}.subHeader`),\r\n  getHeaderLabel: (headerKey) => utils.string.t(`placement.openingMemo.columnNames.${headerKey}`),\r\n  getOptionLabel: (rowKey, value) => utils.string.t(`form.options.${rowKey}.${value}`),\r\n};\r\n"]},"metadata":{},"sourceType":"module"}