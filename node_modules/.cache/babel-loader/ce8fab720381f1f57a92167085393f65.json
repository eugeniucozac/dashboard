{"ast":null,"code":"import \"core-js/modules/es.string.search\";\nimport _defineProperty from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\components\\\\MultiSelect\\\\MultiSelect.view.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup'; // app\n\nimport styles from './MultiSelect.styles';\nimport { Button, FormContainer, FormText, Warning } from 'components';\nimport * as utils from 'utils'; // mui\n\nimport { Box, Checkbox, Collapse, Fade, InputAdornment, List, ListItem, ListItemIcon, ListItemText, makeStyles } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nMultiSelectView.propTypes = {\n  id: PropTypes.string.isRequired,\n  field: PropTypes.object.isRequired,\n  query: PropTypes.string,\n  options: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n    name: PropTypes.string.isRequired\n  })).isRequired,\n  selectedItems: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n    name: PropTypes.string.isRequired\n  })).isRequired,\n  search: PropTypes.bool,\n  placeholder: PropTypes.string,\n  max: PropTypes.number,\n  labels: PropTypes.shape({\n    maxReached: PropTypes.string\n  }),\n  handlers: PropTypes.shape({\n    onClear: PropTypes.func.isRequired,\n    onToggleOption: PropTypes.func.isRequired\n  })\n};\nexport function MultiSelectView(_ref) {\n  _s();\n\n  var _this = this;\n\n  var id = _ref.id,\n      field = _ref.field,\n      query = _ref.query,\n      options = _ref.options,\n      selectedItems = _ref.selectedItems,\n      search = _ref.search,\n      max = _ref.max,\n      labels = _ref.labels,\n      handlers = _ref.handlers;\n  var classes = makeStyles(styles, {\n    name: 'MultiSelect'\n  })();\n  var validationSchema = utils.form.getValidationSchema([field]);\n\n  var _useForm = useForm(_objectSpread({}, validationSchema && {\n    resolver: yupResolver(validationSchema)\n  })),\n      control = _useForm.control,\n      reset = _useForm.reset,\n      handleSubmit = _useForm.handleSubmit;\n\n  var valuesIds = selectedItems.map(function (v) {\n    return v.id;\n  });\n  var isMaxReached = Boolean(max && (selectedItems === null || selectedItems === void 0 ? void 0 : selectedItems.length) >= max);\n\n  var ClearBtn = /*#__PURE__*/_jsxDEV(Button, {\n    size: \"small\",\n    variant: \"text\",\n    icon: CloseIcon,\n    onClick: handlers.onClear(reset),\n    nestedClasses: {\n      btn: classes.clearBtn\n    },\n    \"data-testid\": \"multi-select-clear-\".concat(id)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: classes.root,\n    children: [search && /*#__PURE__*/_jsxDEV(FormContainer, {\n      onSubmit: handleSubmit(handlers.onSearch),\n      nestedClasses: {\n        root: classes.form\n      },\n      \"data-testid\": \"form-multi-select-search\",\n      children: /*#__PURE__*/_jsxDEV(FormText, _objectSpread(_objectSpread({}, field), {}, {\n        control: control,\n        muiComponentProps: _objectSpread(_objectSpread({}, field.muiComponentProps), {}, {\n          fullWidth: true,\n          classes: {\n            root: classnames(_defineProperty({}, classes.input, true))\n          },\n          InputProps: {\n            startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n              position: \"start\",\n              classes: {\n                root: classes.adornmentStart\n              },\n              children: /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 19\n            }, this),\n            endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n              position: \"end\",\n              classes: {\n                root: classes.adornmentEnd\n              },\n              children: query ? ClearBtn : /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 19\n            }, this)\n          }\n        })\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this), Boolean(max) && /*#__PURE__*/_jsxDEV(Collapse, {\n      \"in\": isMaxReached,\n      children: /*#__PURE__*/_jsxDEV(Fade, {\n        \"in\": isMaxReached,\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          mt: 1,\n          mb: 1,\n          children: /*#__PURE__*/_jsxDEV(Warning, {\n            type: \"info\",\n            icon: true,\n            text: labels.maxReached || utils.string.t('filters.multiSelect.maxReached', {\n              max: max\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      dense: true,\n      className: classes.list,\n      children: options.map(function (option) {\n        var labelId = \"multi-select-checkbox-list-label-\".concat(option.id);\n        var isSelected = valuesIds.includes(option.id);\n        return /*#__PURE__*/_jsxDEV(ListItem, {\n          button: true,\n          onClick: function onClick() {\n            handlers.onToggleOption(option);\n          },\n          disabled: isMaxReached && !isSelected,\n          classes: {\n            root: classes.listItem\n          },\n          children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n            classes: {\n              root: classes.listItemIcon\n            },\n            children: /*#__PURE__*/_jsxDEV(Checkbox, {\n              checked: isSelected,\n              color: \"primary\",\n              tabIndex: -1,\n              disableRipple: true,\n              disabled: isMaxReached && !isSelected,\n              inputProps: {\n                'aria-labelledby': labelId\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 17\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(ListItemText, {\n            id: labelId,\n            primary: option.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 15\n          }, _this)]\n        }, option.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MultiSelectView, \"+CUrQEjn3dm1598y2Y/Mnk6iMhI=\", false, function () {\n  return [useForm];\n});\n\n_c = MultiSelectView;\nMultiSelectView.displayName = \"MultiSelectView\";\nMultiSelectView.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"MultiSelectView\",\n  \"props\": {\n    \"id\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"field\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"query\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"options\": {\n      \"type\": {\n        \"name\": \"arrayOf\",\n        \"value\": {\n          \"name\": \"shape\",\n          \"value\": {\n            \"id\": {\n              \"name\": \"union\",\n              \"value\": [{\n                \"name\": \"string\"\n              }, {\n                \"name\": \"number\"\n              }],\n              \"required\": true\n            },\n            \"name\": {\n              \"name\": \"string\",\n              \"required\": true\n            }\n          }\n        }\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"selectedItems\": {\n      \"type\": {\n        \"name\": \"arrayOf\",\n        \"value\": {\n          \"name\": \"shape\",\n          \"value\": {\n            \"id\": {\n              \"name\": \"union\",\n              \"value\": [{\n                \"name\": \"string\"\n              }, {\n                \"name\": \"number\"\n              }],\n              \"required\": true\n            },\n            \"name\": {\n              \"name\": \"string\",\n              \"required\": true\n            }\n          }\n        }\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"search\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"max\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"labels\": {\n      \"type\": {\n        \"name\": \"shape\",\n        \"value\": {\n          \"maxReached\": {\n            \"name\": \"string\",\n            \"required\": false\n          }\n        }\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"handlers\": {\n      \"type\": {\n        \"name\": \"shape\",\n        \"value\": {\n          \"onClear\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"onToggleOption\": {\n            \"name\": \"func\",\n            \"required\": true\n          }\n        }\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\components\\\\MultiSelect\\\\MultiSelect.view.js\"] = {\n    name: \"MultiSelectView\",\n    docgenInfo: MultiSelectView.__docgenInfo,\n    path: \"src\\\\components\\\\MultiSelect\\\\MultiSelect.view.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiSelectView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/MultiSelect/MultiSelect.view.js"],"names":["React","PropTypes","classnames","useForm","yupResolver","styles","Button","FormContainer","FormText","Warning","utils","Box","Checkbox","Collapse","Fade","InputAdornment","List","ListItem","ListItemIcon","ListItemText","makeStyles","CloseIcon","SearchIcon","MultiSelectView","propTypes","id","string","isRequired","field","object","query","options","arrayOf","shape","oneOfType","number","name","selectedItems","search","bool","placeholder","max","labels","maxReached","handlers","onClear","func","onToggleOption","classes","validationSchema","form","getValidationSchema","resolver","control","reset","handleSubmit","valuesIds","map","v","isMaxReached","Boolean","length","ClearBtn","btn","clearBtn","root","onSearch","muiComponentProps","fullWidth","input","InputProps","startAdornment","adornmentStart","endAdornment","adornmentEnd","t","list","option","labelId","isSelected","includes","listItem","listItemIcon"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n\r\n// app\r\nimport styles from './MultiSelect.styles';\r\nimport { Button, FormContainer, FormText, Warning } from 'components';\r\nimport * as utils from 'utils';\r\n\r\n// mui\r\nimport { Box, Checkbox, Collapse, Fade, InputAdornment, List, ListItem, ListItemIcon, ListItemText, makeStyles } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nMultiSelectView.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  field: PropTypes.object.isRequired,\r\n  query: PropTypes.string,\r\n  options: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n      name: PropTypes.string.isRequired,\r\n    })\r\n  ).isRequired,\r\n  selectedItems: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n      name: PropTypes.string.isRequired,\r\n    })\r\n  ).isRequired,\r\n  search: PropTypes.bool,\r\n  placeholder: PropTypes.string,\r\n  max: PropTypes.number,\r\n  labels: PropTypes.shape({\r\n    maxReached: PropTypes.string,\r\n  }),\r\n  handlers: PropTypes.shape({\r\n    onClear: PropTypes.func.isRequired,\r\n    onToggleOption: PropTypes.func.isRequired,\r\n  }),\r\n};\r\n\r\nexport function MultiSelectView({ id, field, query, options, selectedItems, search, max, labels, handlers }) {\r\n  const classes = makeStyles(styles, { name: 'MultiSelect' })();\r\n\r\n  const validationSchema = utils.form.getValidationSchema([field]);\r\n\r\n  const { control, reset, handleSubmit } = useForm({\r\n    ...(validationSchema && { resolver: yupResolver(validationSchema) }),\r\n  });\r\n\r\n  const valuesIds = selectedItems.map((v) => v.id);\r\n  const isMaxReached = Boolean(max && selectedItems?.length >= max);\r\n\r\n  const ClearBtn = (\r\n    <Button\r\n      size=\"small\"\r\n      variant=\"text\"\r\n      icon={CloseIcon}\r\n      onClick={handlers.onClear(reset)}\r\n      nestedClasses={{ btn: classes.clearBtn }}\r\n      data-testid={`multi-select-clear-${id}`}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <Box className={classes.root}>\r\n      {search && (\r\n        <FormContainer\r\n          onSubmit={handleSubmit(handlers.onSearch)}\r\n          nestedClasses={{ root: classes.form }}\r\n          data-testid=\"form-multi-select-search\"\r\n        >\r\n          <FormText\r\n            {...field}\r\n            control={control}\r\n            muiComponentProps={{\r\n              ...field.muiComponentProps,\r\n              fullWidth: true,\r\n              classes: {\r\n                root: classnames({\r\n                  [classes.input]: true,\r\n                }),\r\n              },\r\n              InputProps: {\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\" classes={{ root: classes.adornmentStart }}>\r\n                    <SearchIcon />\r\n                  </InputAdornment>\r\n                ),\r\n                endAdornment: (\r\n                  <InputAdornment position=\"end\" classes={{ root: classes.adornmentEnd }}>\r\n                    {query ? ClearBtn : <span />}\r\n                  </InputAdornment>\r\n                ),\r\n              },\r\n            }}\r\n          />\r\n        </FormContainer>\r\n      )}\r\n\r\n      {Boolean(max) && (\r\n        <Collapse in={isMaxReached}>\r\n          <Fade in={isMaxReached}>\r\n            <Box mt={1} mb={1}>\r\n              <Warning type=\"info\" icon text={labels.maxReached || utils.string.t('filters.multiSelect.maxReached', { max })} />\r\n            </Box>\r\n          </Fade>\r\n        </Collapse>\r\n      )}\r\n\r\n      <List dense className={classes.list}>\r\n        {options.map((option) => {\r\n          const labelId = `multi-select-checkbox-list-label-${option.id}`;\r\n          const isSelected = valuesIds.includes(option.id);\r\n\r\n          return (\r\n            <ListItem\r\n              key={option.id}\r\n              button\r\n              onClick={() => {\r\n                handlers.onToggleOption(option);\r\n              }}\r\n              disabled={isMaxReached && !isSelected}\r\n              classes={{ root: classes.listItem }}\r\n            >\r\n              <ListItemIcon classes={{ root: classes.listItemIcon }}>\r\n                <Checkbox\r\n                  checked={isSelected}\r\n                  color=\"primary\"\r\n                  tabIndex={-1}\r\n                  disableRipple\r\n                  disabled={isMaxReached && !isSelected}\r\n                  inputProps={{ 'aria-labelledby': labelId }}\r\n                />\r\n              </ListItemIcon>\r\n              <ListItemText id={labelId} primary={option.name} />\r\n            </ListItem>\r\n          );\r\n        })}\r\n      </List>\r\n    </Box>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}