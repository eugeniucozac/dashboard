{"ast":null,"code":"import _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\components\\\\DocumentAutoUpload\\\\DocumentAutoUpload.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport sortBy from 'lodash/sortBy'; // app\n\nimport * as constants from 'consts';\nimport { DocumentAutoUploadView } from './DocumentAutoUpload.view';\nimport { getFolderList, uploadDocument } from 'stores';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nDocumentAutoUpload.propTypes = {\n  placement: PropTypes.object,\n  link: PropTypes.string,\n  divider: PropTypes.bool\n};\nexport function DocumentAutoUpload(_ref) {\n  _s();\n\n  var placement = _ref.placement,\n      link = _ref.link,\n      divider = _ref.divider;\n  var dispatch = useDispatch();\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      folderValue = _useState2[0],\n      setFolderValue = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      folders = _useState4[0],\n      setFolders = _useState4[1];\n\n  var handleSubmit = function handleSubmit(data) {\n    dispatch(uploadDocument({\n      data: data,\n      placement: placement\n    }));\n  };\n\n  useEffect(function () {\n    var mounted = true;\n\n    var fetchFolders = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var folders;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return dispatch(getFolderList());\n\n              case 2:\n                folders = _context.sent;\n\n                if (folders && mounted) {\n                  setFolders(sortBy(folders, 'label'));\n                }\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function fetchFolders() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    fetchFolders();\n    return function () {\n      return mounted = false;\n    };\n  }, [] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  var handleUpdateFolderValue = function handleUpdateFolderValue(value) {\n    setFolderValue(value);\n  };\n\n  useEffect(function () {\n    if (!folders.length) return;\n    var value = folders.map(function (folder) {\n      return folder.id;\n    }).includes(constants.FOLDER_CORRESPONDENCE) ? constants.FOLDER_CORRESPONDENCE : folders[0] && folders[0].id;\n    setFolderValue(value);\n  }, [folders] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  return folderValue ? /*#__PURE__*/_jsxDEV(DocumentAutoUploadView, {\n    onUpdateFolderValue: handleUpdateFolderValue,\n    folderValue: folderValue,\n    link: link,\n    divider: divider,\n    onSubmit: handleSubmit,\n    folders: folders\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this) : null;\n}\n\n_s(DocumentAutoUpload, \"IavXklYzanRaBhdfV5pdSrg4qDg=\", false, function () {\n  return [useDispatch];\n});\n\n_c = DocumentAutoUpload;\nDocumentAutoUpload.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"DocumentAutoUpload\",\n  \"props\": {\n    \"placement\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"link\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"divider\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};\nexport default DocumentAutoUpload;\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\components\\\\DocumentAutoUpload\\\\DocumentAutoUpload.js\"] = {\n    name: \"DocumentAutoUpload\",\n    docgenInfo: DocumentAutoUpload.__docgenInfo,\n    path: \"src\\\\components\\\\DocumentAutoUpload\\\\DocumentAutoUpload.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"DocumentAutoUpload\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/DocumentAutoUpload/DocumentAutoUpload.js"],"names":["React","useEffect","useState","useDispatch","PropTypes","sortBy","constants","DocumentAutoUploadView","getFolderList","uploadDocument","DocumentAutoUpload","propTypes","placement","object","link","string","divider","bool","dispatch","folderValue","setFolderValue","folders","setFolders","handleSubmit","data","mounted","fetchFolders","handleUpdateFolderValue","value","length","map","folder","id","includes","FOLDER_CORRESPONDENCE"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport sortBy from 'lodash/sortBy';\r\n\r\n// app\r\nimport * as constants from 'consts';\r\nimport { DocumentAutoUploadView } from './DocumentAutoUpload.view';\r\nimport { getFolderList, uploadDocument } from 'stores';\r\n\r\nDocumentAutoUpload.propTypes = {\r\n  placement: PropTypes.object,\r\n  link: PropTypes.string,\r\n  divider: PropTypes.bool,\r\n};\r\n\r\nexport function DocumentAutoUpload({ placement, link, divider }) {\r\n  const dispatch = useDispatch();\r\n  const [folderValue, setFolderValue] = useState();\r\n  const [folders, setFolders] = useState([]);\r\n\r\n  const handleSubmit = (data) => {\r\n    dispatch(uploadDocument({ data, placement }));\r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n      let mounted = true;\r\n      const fetchFolders = async () => {\r\n        const folders = await dispatch(getFolderList());\r\n        if (folders && mounted) {\r\n          setFolders(sortBy(folders, 'label'));\r\n        }\r\n      };\r\n      fetchFolders();\r\n      return () => (mounted = false);\r\n    },\r\n    [] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  const handleUpdateFolderValue = (value) => {\r\n    setFolderValue(value);\r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n      if (!folders.length) return;\r\n      const value = folders.map((folder) => folder.id).includes(constants.FOLDER_CORRESPONDENCE)\r\n        ? constants.FOLDER_CORRESPONDENCE\r\n        : folders[0] && folders[0].id;\r\n      setFolderValue(value);\r\n    },\r\n    [folders] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  return folderValue ? (\r\n    <DocumentAutoUploadView\r\n      onUpdateFolderValue={handleUpdateFolderValue}\r\n      folderValue={folderValue}\r\n      link={link}\r\n      divider={divider}\r\n      onSubmit={handleSubmit}\r\n      folders={folders}\r\n    />\r\n  ) : null;\r\n}\r\n\r\nexport default DocumentAutoUpload;\r\n"]},"metadata":{},"sourceType":"module"}