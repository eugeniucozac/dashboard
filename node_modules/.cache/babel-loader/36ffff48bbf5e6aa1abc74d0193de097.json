{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ClaimRefNotes\\\\ClaimRefNotes.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux'; // app\n\nimport ClaimRefNotesView from './ClaimRefNotes.view';\nimport { MultiSelect, FormDate } from 'components';\nimport { getClaimNotes, resetClaimNotes, selectClaimNotes, selectClaimNotesFilters, selectClaimNotesQuery, selectClaimNotesPagination, selectClaimNotesSort, showModal } from 'stores';\nimport { useFlexiColumns, usePagination, useSort } from 'hooks';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nClaimRefNotes.propTypes = {\n  claim: PropTypes.object.isRequired\n};\nexport default function ClaimRefNotes(_ref) {\n  _s();\n\n  var claim = _ref.claim;\n  var dispatch = useDispatch();\n  var claimID = claim.claimID,\n      processState = claim.processState;\n  var claimNotes = useSelector(selectClaimNotes);\n  var users = useSelector(selectClaimNotesFilters);\n  var claimNotesQuery = useSelector(selectClaimNotesQuery);\n  var claimNotesPagination = useSelector(selectClaimNotesPagination);\n  var claimNotesSort = useSelector(selectClaimNotesSort);\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      searchText = _useState2[0],\n      setSearchText = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      resetKey = _useState4[0],\n      setResetKey = _useState4[1];\n\n  useEffect(function () {\n    if (claimID) {\n      dispatch(getClaimNotes({\n        claimID: claimID\n      }));\n    } // cleanup\n\n\n    return function () {\n      dispatch(resetClaimNotes());\n    };\n  }, [claimID]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var addNote = function addNote() {\n    dispatch(showModal({\n      component: 'ADD_EDIT_CLAIM_REF_NOTES',\n      props: {\n        title: utils.string.t('claims.notes.addNote'),\n        fullWidth: true,\n        maxWidth: 'sm',\n        disableAutoFocus: true,\n        componentProps: {\n          claim: claim\n        }\n      }\n    }));\n  };\n\n  var editNote = function editNote(note) {\n    dispatch(showModal({\n      component: 'EDIT_CLAIMREF_NOTES_ROW',\n      props: {\n        title: utils.string.t('claims.notes.editNote'),\n        fullWidth: true,\n        hideCompOnBlur: false,\n        maxWidth: 'sm',\n        disableAutoFocus: true,\n        componentProps: {\n          note: note\n        }\n      }\n    }));\n  };\n\n  var searchSubmit = function searchSubmit(_ref2) {\n    var search = _ref2.search;\n    setResetKey(new Date().getTime());\n    reset();\n    setSearchText(search);\n    dispatch(getClaimNotes({\n      claimID: claimID,\n      query: search\n    }));\n  };\n\n  var handleSearchFilter = function handleSearchFilter(_ref3) {\n    var filters = _ref3.filters;\n    dispatch(getClaimNotes({\n      claimID: claimID,\n      query: searchText,\n      filters: filters\n    }));\n  };\n\n  var resetSubmit = function resetSubmit() {\n    dispatch(getClaimNotes({\n      claimID: claimID,\n      filters: {}\n    }));\n    reset();\n  };\n\n  var sortColumn = function sortColumn(by, dir) {\n    dispatch(getClaimNotes({\n      claimID: claimID,\n      sortBy: by,\n      direction: dir,\n      query: searchText\n    }));\n  };\n\n  var changePage = function changePage(newPage) {\n    dispatch(getClaimNotes({\n      claimID: claimID,\n      page: newPage,\n      query: searchText\n    }));\n  };\n\n  var changeRowsPerPage = function changeRowsPerPage(rowsPerPage) {\n    dispatch(getClaimNotes({\n      claimID: claimID,\n      size: rowsPerPage,\n      query: searchText\n    }));\n  };\n\n  var cols = [{\n    id: 'createdDate',\n    sort: {\n      type: 'date',\n      direction: 'desc'\n    },\n    visible: true,\n    label: utils.string.t('claims.notes.columns.dateCreated')\n  }, {\n    id: 'createdBy',\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true,\n    label: utils.string.t('claims.notes.columns.createdBy')\n  }, {\n    id: 'notesDescription',\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true,\n    label: utils.string.t('claims.notes.columns.detail')\n  }, {\n    id: 'updatedDate',\n    sort: {\n      type: 'date',\n      direction: 'asc'\n    },\n    visible: true,\n    label: utils.string.t('claims.notes.columns.dateUpdated')\n  }, {\n    id: 'updatedBy',\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true,\n    label: utils.string.t('claims.notes.columns.updatedBy')\n  }, {\n    id: 'menu',\n    menu: true,\n    visible: true\n  }];\n  var dateFields = [{\n    name: 'createdDate',\n    type: 'datepicker',\n    value: null\n  }, {\n    name: 'updatedDate',\n    type: 'datepicker',\n    value: null\n  }];\n  var defaultValues = utils.form.getInitialValues(dateFields);\n\n  var _useForm = useForm({\n    defaultValues: defaultValues\n  }),\n      control = _useForm.control,\n      reset = _useForm.reset;\n\n  var filtersArray = [{\n    id: 'createdDate',\n    type: 'datepicker',\n    label: utils.string.t('claims.notes.tableFilters.dateCreated'),\n    value: '',\n    content: /*#__PURE__*/_jsxDEV(FormDate, _objectSpread(_objectSpread({\n      control: control\n    }, utils.form.getFieldProps(dateFields, 'createdDate')), {}, {\n      id: \"datepicker\",\n      label: '',\n      plainText: true,\n      plainTextIcon: true,\n      placeholder: utils.string.t('app.selectDate'),\n      muiComponentProps: {\n        fullWidth: false,\n        margin: 'dense'\n      },\n      muiPickerProps: {\n        clearable: false,\n        variant: 'inline',\n        format: 'DD-MM-YYYY'\n      }\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }, this)\n  }, {\n    id: 'createdBy',\n    type: 'multiSelect',\n    label: utils.string.t('claims.notes.columns.createdBy'),\n    value: [],\n    options: users === null || users === void 0 ? void 0 : users.createdBy,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"createdBy\",\n      search: true,\n      options: users === null || users === void 0 ? void 0 : users.createdBy\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 16\n    }, this)\n  }, {\n    id: 'updatedDate',\n    type: 'datepicker',\n    label: utils.string.t('claims.notes.tableFilters.lastUpdatedDate'),\n    value: '',\n    content: /*#__PURE__*/_jsxDEV(FormDate, _objectSpread(_objectSpread({\n      control: control\n    }, utils.form.getFieldProps(dateFields, 'updatedDate')), {}, {\n      id: \"datepicker\",\n      label: '',\n      plainText: true,\n      plainTextIcon: true,\n      placeholder: utils.string.t('app.selectDate'),\n      muiComponentProps: {\n        fullWidth: false,\n        margin: 'dense'\n      },\n      muiPickerProps: {\n        clearable: false,\n        variant: 'inline',\n        format: 'DD-MM-YYYY'\n      }\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 9\n    }, this)\n  }, {\n    id: 'updatedBy',\n    type: 'multiSelect',\n    label: utils.string.t('claims.notes.columns.updatedBy'),\n    value: [],\n    options: users === null || users === void 0 ? void 0 : users.updatedBy,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"updatedBy\",\n      search: true,\n      options: users === null || users === void 0 ? void 0 : users.updatedBy\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 16\n    }, this)\n  }];\n\n  var _useFlexiColumns = useFlexiColumns(cols),\n      columnsArray = _useFlexiColumns.columns,\n      columnProps = _useFlexiColumns.columnProps;\n\n  var _useSort = useSort(columnsArray, claimNotesSort, sortColumn),\n      colsSorted = _useSort.cols,\n      sort = _useSort.sort;\n\n  var pagination = usePagination(claimNotes, claimNotesPagination, changePage, changeRowsPerPage);\n  return /*#__PURE__*/_jsxDEV(ClaimRefNotesView, {\n    notes: claimNotes,\n    cols: colsSorted,\n    columnProps: columnProps,\n    filtersArray: filtersArray,\n    sort: sort,\n    pagination: pagination,\n    query: claimNotesQuery,\n    claimStatus: processState,\n    resetKey: resetKey,\n    handlers: {\n      addNote: addNote,\n      editNote: editNote,\n      searchSubmit: searchSubmit,\n      resetSubmit: resetSubmit,\n      handleSearchFilter: handleSearchFilter\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 234,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ClaimRefNotes, \"EZBkBWAnwapZsFKwgieBh0sjO6g=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useForm, useFlexiColumns, useSort, usePagination];\n});\n\n_c = ClaimRefNotes;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimRefNotes\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ClaimRefNotes/ClaimRefNotes.js"],"names":["React","useEffect","useState","useForm","PropTypes","useDispatch","useSelector","ClaimRefNotesView","MultiSelect","FormDate","getClaimNotes","resetClaimNotes","selectClaimNotes","selectClaimNotesFilters","selectClaimNotesQuery","selectClaimNotesPagination","selectClaimNotesSort","showModal","useFlexiColumns","usePagination","useSort","utils","ClaimRefNotes","propTypes","claim","object","isRequired","dispatch","claimID","processState","claimNotes","users","claimNotesQuery","claimNotesPagination","claimNotesSort","searchText","setSearchText","resetKey","setResetKey","addNote","component","props","title","string","t","fullWidth","maxWidth","disableAutoFocus","componentProps","editNote","note","hideCompOnBlur","searchSubmit","search","Date","getTime","reset","query","handleSearchFilter","filters","resetSubmit","sortColumn","by","dir","sortBy","direction","changePage","newPage","page","changeRowsPerPage","rowsPerPage","size","cols","id","sort","type","visible","label","menu","dateFields","name","value","defaultValues","form","getInitialValues","control","filtersArray","content","getFieldProps","margin","clearable","variant","format","options","createdBy","updatedBy","columnsArray","columns","columnProps","colsSorted","pagination"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n// app\r\nimport ClaimRefNotesView from './ClaimRefNotes.view';\r\nimport { MultiSelect, FormDate } from 'components';\r\nimport {\r\n  getClaimNotes,\r\n  resetClaimNotes,\r\n  selectClaimNotes,\r\n  selectClaimNotesFilters,\r\n  selectClaimNotesQuery,\r\n  selectClaimNotesPagination,\r\n  selectClaimNotesSort,\r\n  showModal,\r\n} from 'stores';\r\nimport { useFlexiColumns, usePagination, useSort } from 'hooks';\r\nimport * as utils from 'utils';\r\n\r\nClaimRefNotes.propTypes = {\r\n  claim: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default function ClaimRefNotes({ claim }) {\r\n  const dispatch = useDispatch();\r\n  const { claimID, processState } = claim;\r\n  const claimNotes = useSelector(selectClaimNotes);\r\n  const users = useSelector(selectClaimNotesFilters);\r\n  const claimNotesQuery = useSelector(selectClaimNotesQuery);\r\n  const claimNotesPagination = useSelector(selectClaimNotesPagination);\r\n  const claimNotesSort = useSelector(selectClaimNotesSort);\r\n\r\n  const [searchText, setSearchText] = useState('');\r\n  const [resetKey, setResetKey] = useState();\r\n  useEffect(() => {\r\n    if (claimID) {\r\n      dispatch(getClaimNotes({ claimID }));\r\n    }\r\n\r\n    // cleanup\r\n    return () => {\r\n      dispatch(resetClaimNotes());\r\n    };\r\n  }, [claimID]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const addNote = () => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'ADD_EDIT_CLAIM_REF_NOTES',\r\n        props: {\r\n          title: utils.string.t('claims.notes.addNote'),\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          disableAutoFocus: true,\r\n          componentProps: { claim },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const editNote = (note) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'EDIT_CLAIMREF_NOTES_ROW',\r\n        props: {\r\n          title: utils.string.t('claims.notes.editNote'),\r\n          fullWidth: true,\r\n          hideCompOnBlur: false,\r\n          maxWidth: 'sm',\r\n          disableAutoFocus: true,\r\n          componentProps: { note },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const searchSubmit = ({ search }) => {\r\n    setResetKey(new Date().getTime());\r\n    reset()\r\n    setSearchText(search);\r\n    dispatch(getClaimNotes({ claimID, query: search }));\r\n  };\r\n\r\n  const handleSearchFilter = ({ filters }) => {\r\n    dispatch(getClaimNotes({ claimID, query: searchText, filters }));\r\n  };\r\n\r\n  const resetSubmit = () => {\r\n    dispatch(getClaimNotes({ claimID, filters: {} }));\r\n    reset();\r\n  };\r\n\r\n  \r\n  const sortColumn = (by, dir) => {\r\n    dispatch(getClaimNotes({ claimID, sortBy: by, direction: dir, query: searchText }));\r\n  };\r\n\r\n  const changePage = (newPage) => {\r\n    dispatch(getClaimNotes({ claimID, page: newPage, query: searchText }));\r\n  };\r\n\r\n  const changeRowsPerPage = (rowsPerPage) => {\r\n    dispatch(getClaimNotes({ claimID, size: rowsPerPage, query: searchText }));\r\n  };\r\n\r\n  const cols = [\r\n    {\r\n      id: 'createdDate',\r\n      sort: { type: 'date', direction: 'desc' },\r\n      visible: true,\r\n      label: utils.string.t('claims.notes.columns.dateCreated'),\r\n    },\r\n    {\r\n      id: 'createdBy',\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: true,\r\n      label: utils.string.t('claims.notes.columns.createdBy'),\r\n    },\r\n    {\r\n      id: 'notesDescription',\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: true,\r\n      label: utils.string.t('claims.notes.columns.detail'),\r\n    },\r\n    {\r\n      id: 'updatedDate',\r\n      sort: { type: 'date', direction: 'asc' },\r\n      visible: true,\r\n      label: utils.string.t('claims.notes.columns.dateUpdated'),\r\n    },\r\n    {\r\n      id: 'updatedBy',\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: true,\r\n      label: utils.string.t('claims.notes.columns.updatedBy'),\r\n    },\r\n    { id: 'menu', menu: true, visible: true },\r\n  ];\r\n\r\n  const dateFields = [\r\n    {\r\n      name: 'createdDate',\r\n      type: 'datepicker',\r\n      value: null,\r\n    },\r\n    {\r\n      name: 'updatedDate',\r\n      type: 'datepicker',\r\n      value: null,\r\n    },\r\n  ];\r\n\r\n  const defaultValues = utils.form.getInitialValues(dateFields);\r\n  const { control, reset } = useForm({ defaultValues });\r\n\r\n  const filtersArray = [\r\n    {\r\n      id: 'createdDate',\r\n      type: 'datepicker',\r\n      label: utils.string.t('claims.notes.tableFilters.dateCreated'),\r\n      value: '',\r\n      content: (\r\n        <FormDate\r\n          control={control}\r\n          {...utils.form.getFieldProps(dateFields, 'createdDate')}\r\n          id=\"datepicker\"\r\n          label={''}\r\n          plainText\r\n          plainTextIcon\r\n          placeholder={utils.string.t('app.selectDate')}\r\n          muiComponentProps={{\r\n            fullWidth: false,\r\n            margin: 'dense',\r\n          }}\r\n          muiPickerProps={{\r\n            clearable: false,\r\n            variant: 'inline',\r\n            format: 'DD-MM-YYYY',\r\n          }}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      id: 'createdBy',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('claims.notes.columns.createdBy'),\r\n      value: [],\r\n      options: users?.createdBy,\r\n      content: <MultiSelect id=\"createdBy\" search options={users?.createdBy} />,\r\n    },\r\n    {\r\n      id: 'updatedDate',\r\n      type: 'datepicker',\r\n      label: utils.string.t('claims.notes.tableFilters.lastUpdatedDate'),\r\n      value: '',\r\n      content: (\r\n        <FormDate\r\n          control={control}\r\n          {...utils.form.getFieldProps(dateFields, 'updatedDate')}\r\n          id=\"datepicker\"\r\n          label={''}\r\n          plainText\r\n          plainTextIcon\r\n          placeholder={utils.string.t('app.selectDate')}\r\n          muiComponentProps={{\r\n            fullWidth: false,\r\n            margin: 'dense',\r\n          }}\r\n          muiPickerProps={{\r\n            clearable: false,\r\n            variant: 'inline',\r\n            format: 'DD-MM-YYYY',\r\n          }}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      id: 'updatedBy',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('claims.notes.columns.updatedBy'),\r\n      value: [],\r\n      options: users?.updatedBy,\r\n      content: <MultiSelect id=\"updatedBy\" search options={users?.updatedBy} />,\r\n    },\r\n  ];\r\n\r\n  const { columns: columnsArray, columnProps } = useFlexiColumns(cols);\r\n  const { cols: colsSorted, sort } = useSort(columnsArray, claimNotesSort, sortColumn);\r\n  const pagination = usePagination(claimNotes, claimNotesPagination, changePage, changeRowsPerPage);\r\n\r\n  return (\r\n    <ClaimRefNotesView\r\n      notes={claimNotes}\r\n      cols={colsSorted}\r\n      columnProps={columnProps}\r\n      filtersArray={filtersArray}\r\n      sort={sort}\r\n      pagination={pagination}\r\n      query={claimNotesQuery}\r\n      claimStatus={processState}\r\n      resetKey={resetKey}\r\n      handlers={{\r\n        addNote,\r\n        editNote,\r\n        searchSubmit,\r\n        resetSubmit,\r\n        handleSearchFilter\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}