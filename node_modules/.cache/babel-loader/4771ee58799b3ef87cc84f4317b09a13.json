{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\TasksTabTableRow\\\\TasksTabTableRow.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useHistory } from 'react-router';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux'; // app\n\nimport { TasksTabTableRowView } from './TasksTabTableRow.view';\nimport { selectClaimsProcessingTasksSelected, selectCaseTaskTypeView, checkIsUserClaim, setClaimsFnolPushBackRoute, showModal, hideModal, getSancCheckAssociatedTask, selectClaimsTasksProcessingListSelected, setClaimsProcessingTasksListSelected, selectClaimsTasksProcessingList, getClaimsTasksProcessingList } from 'stores';\nimport config from 'config';\nimport * as constants from 'consts';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nTasksTabTableRow.propTypes = {\n  task: PropTypes.object.isRequired,\n  isTaskTeam: PropTypes.bool.isRequired,\n  isSelected: PropTypes.bool,\n  columnProps: PropTypes.func.isRequired,\n  handlers: PropTypes.shape({\n    selectTask: PropTypes.func.isRequired,\n    refreshTasksGrid: PropTypes.func.isRequired\n  }).isRequired\n};\nexport default function TasksTabTableRow(props) {\n  _s();\n\n  var _props$handlers;\n\n  var dispatch = useDispatch();\n  var history = useHistory();\n  var task = props.task;\n  var tasksSelected = useSelector(selectClaimsTasksProcessingListSelected);\n  var caseTaskTypeView = useSelector(selectCaseTaskTypeView);\n  var claimsTasksProcessing = useSelector(selectClaimsTasksProcessingList);\n  var user = useSelector(function (state) {\n    return state.user;\n  });\n  var searchTypeCall = constants.CLAIM_PROCESSING_REQ_TYPES.search;\n  var taskType = claimsTasksProcessing === null || claimsTasksProcessing === void 0 ? void 0 : claimsTasksProcessing.taskType;\n  var appliedFilters = claimsTasksProcessing === null || claimsTasksProcessing === void 0 ? void 0 : claimsTasksProcessing.appliedFilters;\n\n  var editTask = function editTask(task) {\n    dispatch(showModal({\n      component: 'CREATE_AD_HOC_TASK',\n      props: {\n        title: utils.string.t('claims.processing.taskFunction.editTask'),\n        hideCompOnBlur: false,\n        fullWidth: true,\n        maxWidth: 'md',\n        disableAutoFocus: true,\n        componentProps: {\n          claim: task,\n          cancelHandler: function cancelHandler() {\n            dispatch(hideModal());\n          },\n          submitHandler: function submitHandler() {}\n        }\n      }\n    }));\n  };\n\n  var taskActionItems = [{\n    id: 'editTask',\n    label: utils.string.t('claims.processing.taskFunction.editTask'),\n    callback: function callback() {\n      editTask(props === null || props === void 0 ? void 0 : props.task);\n    }\n  }, {\n    id: 'changePriority',\n    label: utils.string.t('claims.processing.taskFunction.changePriority'),\n    callback: function callback() {\n      return changePriority();\n    }\n  }, {\n    id: 'createRfi',\n    label: utils.string.t('claims.processing.taskFunction.createRFI'),\n    callback: function callback() {\n      handleCreateRFITaskLevel();\n    }\n  }];\n\n  var handleCreateRFITaskLevel = function handleCreateRFITaskLevel() {\n    dispatch(showModal({\n      component: 'CREATE_RFI',\n      props: {\n        title: utils.string.t('claims.processing.taskFunction.createRFI'),\n        hideCompOnBlur: false,\n        fullWidth: true,\n        maxWidth: 'md',\n        disableAutoFocus: true,\n        componentProps: {\n          claim: task,\n          type: constants.RFI_ON_TASKS,\n          cancelHandler: function cancelHandler() {\n            dispatch(hideModal());\n          }\n        }\n      }\n    }));\n  };\n\n  var clickTask = function clickTask(taskObj) {\n    return function (event) {\n      if (taskObj === null || taskObj === void 0 ? void 0 : taskObj.taskRef) {\n        var _user$emailId, _taskObj$processOwner;\n\n        event.stopPropagation();\n        (taskObj === null || taskObj === void 0 ? void 0 : taskObj.taskDefKey) === constants.SANCTIONS_CHECK_KEY && dispatch(getSancCheckAssociatedTask(taskObj === null || taskObj === void 0 ? void 0 : taskObj.parentTaskId));\n        var isUserClaim = ((_user$emailId = user.emailId) === null || _user$emailId === void 0 ? void 0 : _user$emailId.toLowerCase()) === (taskObj === null || taskObj === void 0 ? void 0 : (_taskObj$processOwner = taskObj.processOwner) === null || _taskObj$processOwner === void 0 ? void 0 : _taskObj$processOwner.toLowerCase());\n        dispatch(checkIsUserClaim(isUserClaim));\n        dispatch(selectClaimsProcessingTasksSelected(taskObj)); // TODO redundant remove it later\n\n        dispatch(setClaimsProcessingTasksListSelected(taskObj));\n        dispatch(setClaimsFnolPushBackRoute(constants.CLAIMS_FNOL_PUSH_BACK_ROUTES.routes.lossAndClaims));\n\n        if (taskObj.taskType === constants.TASK_ROW_TYPE.rfi) {\n          history.push(\"\".concat(config.routes.claimsFNOL.rfi, \"/\").concat(taskObj.taskRef));\n        } else {\n          history.push(\"\".concat(config.routes.claimsFNOL.task, \"/\").concat(taskObj === null || taskObj === void 0 ? void 0 : taskObj.taskRef));\n        }\n      }\n    };\n  };\n\n  var changePriority = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var tasksData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              tasksData = (tasksSelected === null || tasksSelected === void 0 ? void 0 : tasksSelected.length) ? tasksSelected : [task];\n              dispatch(showModal({\n                component: 'CHANGE_PRIORITY',\n                props: {\n                  title: utils.string.t('claims.processing.taskFunction.changePriority'),\n                  hideCompOnBlur: false,\n                  fullWidth: true,\n                  maxWidth: 'sm',\n                  disableAutoFocus: true,\n                  componentProps: {\n                    task: tasksData,\n                    handlers: {\n                      submitHandler: function submitHandler() {\n                        refreshTasksData();\n                      },\n                      cancelHandler: function cancelHandler() {\n                        dispatch(hideModal());\n                      }\n                    }\n                  }\n                }\n              }));\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function changePriority() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var refreshTasksData = function refreshTasksData() {\n    dispatch(getClaimsTasksProcessingList({\n      requestType: searchTypeCall,\n      taskType: taskType,\n      filterTerm: appliedFilters || null,\n      navigation: true\n    }));\n  };\n\n  var isTaskLinkDisabled = function isTaskLinkDisabled() {\n    var task = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var automatedTasks = constants === null || constants === void 0 ? void 0 : constants.AUTOMATED_TASK_DEF_KEYS;\n    return automatedTasks === null || automatedTasks === void 0 ? void 0 : automatedTasks.includes(task === null || task === void 0 ? void 0 : task.taskDefKey);\n  }; // automated BPM task does not need task dashboard Link and tasks handlers\n\n\n  return /*#__PURE__*/_jsxDEV(TasksTabTableRowView, _objectSpread(_objectSpread({}, props), {}, {\n    taskActionItems: isTaskLinkDisabled(task) ? [] : taskActionItems,\n    isPremiumProcessing: props === null || props === void 0 ? void 0 : props.isPremiumProcessing,\n    caseTaskTypeView: caseTaskTypeView,\n    handlers: {\n      selectTask: props === null || props === void 0 ? void 0 : (_props$handlers = props.handlers) === null || _props$handlers === void 0 ? void 0 : _props$handlers.selectTask,\n      clickTask: clickTask,\n      editTask: editTask\n    },\n    isTaskLinkDisabled: isTaskLinkDisabled(task)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TasksTabTableRow, \"cizsVChTkarybweUcvhobR7Miu8=\", false, function () {\n  return [useDispatch, useHistory, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = TasksTabTableRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"TasksTabTableRow\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/TasksTabTableRow/TasksTabTableRow.js"],"names":["React","useHistory","PropTypes","useSelector","useDispatch","TasksTabTableRowView","selectClaimsProcessingTasksSelected","selectCaseTaskTypeView","checkIsUserClaim","setClaimsFnolPushBackRoute","showModal","hideModal","getSancCheckAssociatedTask","selectClaimsTasksProcessingListSelected","setClaimsProcessingTasksListSelected","selectClaimsTasksProcessingList","getClaimsTasksProcessingList","config","constants","utils","TasksTabTableRow","propTypes","task","object","isRequired","isTaskTeam","bool","isSelected","columnProps","func","handlers","shape","selectTask","refreshTasksGrid","props","dispatch","history","tasksSelected","caseTaskTypeView","claimsTasksProcessing","user","state","searchTypeCall","CLAIM_PROCESSING_REQ_TYPES","search","taskType","appliedFilters","editTask","component","title","string","t","hideCompOnBlur","fullWidth","maxWidth","disableAutoFocus","componentProps","claim","cancelHandler","submitHandler","taskActionItems","id","label","callback","changePriority","handleCreateRFITaskLevel","type","RFI_ON_TASKS","clickTask","taskObj","event","taskRef","stopPropagation","taskDefKey","SANCTIONS_CHECK_KEY","parentTaskId","isUserClaim","emailId","toLowerCase","processOwner","CLAIMS_FNOL_PUSH_BACK_ROUTES","routes","lossAndClaims","TASK_ROW_TYPE","rfi","push","claimsFNOL","tasksData","length","refreshTasksData","requestType","filterTerm","navigation","isTaskLinkDisabled","automatedTasks","AUTOMATED_TASK_DEF_KEYS","includes","isPremiumProcessing"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\n// app\r\nimport { TasksTabTableRowView } from './TasksTabTableRow.view';\r\nimport {\r\n  selectClaimsProcessingTasksSelected,\r\n  selectCaseTaskTypeView,\r\n  checkIsUserClaim,\r\n  setClaimsFnolPushBackRoute,\r\n  showModal,\r\n  hideModal,\r\n  getSancCheckAssociatedTask,\r\n  selectClaimsTasksProcessingListSelected,\r\n  setClaimsProcessingTasksListSelected,\r\n  selectClaimsTasksProcessingList,\r\n  getClaimsTasksProcessingList,\r\n} from 'stores';\r\nimport config from 'config';\r\nimport * as constants from 'consts';\r\nimport * as utils from 'utils';\r\n\r\nTasksTabTableRow.propTypes = {\r\n  task: PropTypes.object.isRequired,\r\n  isTaskTeam: PropTypes.bool.isRequired,\r\n  isSelected: PropTypes.bool,\r\n  columnProps: PropTypes.func.isRequired,\r\n  handlers: PropTypes.shape({\r\n    selectTask: PropTypes.func.isRequired,\r\n    refreshTasksGrid: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default function TasksTabTableRow(props) {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const { task } = props;\r\n  const tasksSelected = useSelector(selectClaimsTasksProcessingListSelected);\r\n  const caseTaskTypeView = useSelector(selectCaseTaskTypeView);\r\n  const claimsTasksProcessing = useSelector(selectClaimsTasksProcessingList);\r\n  const user = useSelector((state) => state.user);\r\n  const searchTypeCall = constants.CLAIM_PROCESSING_REQ_TYPES.search;\r\n  const taskType = claimsTasksProcessing?.taskType;\r\n  const appliedFilters = claimsTasksProcessing?.appliedFilters;\r\n\r\n  const editTask = (task) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CREATE_AD_HOC_TASK',\r\n        props: {\r\n          title: utils.string.t('claims.processing.taskFunction.editTask'),\r\n          hideCompOnBlur: false,\r\n          fullWidth: true,\r\n          maxWidth: 'md',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            claim: task,\r\n            cancelHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n            submitHandler: () => {},\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n  const taskActionItems = [\r\n    {\r\n      id: 'editTask',\r\n      label: utils.string.t('claims.processing.taskFunction.editTask'),\r\n      callback: () => {\r\n        editTask(props?.task);\r\n      },\r\n    },\r\n    {\r\n      id: 'changePriority',\r\n      label: utils.string.t('claims.processing.taskFunction.changePriority'),\r\n      callback: () => changePriority(),\r\n    },\r\n    {\r\n      id: 'createRfi',\r\n      label: utils.string.t('claims.processing.taskFunction.createRFI'),\r\n      callback: () => {\r\n        handleCreateRFITaskLevel();\r\n      },\r\n    },\r\n  ];\r\n\r\n  const handleCreateRFITaskLevel = () => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CREATE_RFI',\r\n        props: {\r\n          title: utils.string.t('claims.processing.taskFunction.createRFI'),\r\n          hideCompOnBlur: false,\r\n          fullWidth: true,\r\n          maxWidth: 'md',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            claim: task,\r\n            type: constants.RFI_ON_TASKS,\r\n            cancelHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n  const clickTask = (taskObj) => (event) => {\r\n    if (taskObj?.taskRef) {\r\n      event.stopPropagation();\r\n      taskObj?.taskDefKey === constants.SANCTIONS_CHECK_KEY && dispatch(getSancCheckAssociatedTask(taskObj?.parentTaskId));\r\n      const isUserClaim = user.emailId?.toLowerCase() === taskObj?.processOwner?.toLowerCase();\r\n      dispatch(checkIsUserClaim(isUserClaim));\r\n      dispatch(selectClaimsProcessingTasksSelected(taskObj)); // TODO redundant remove it later\r\n      dispatch(setClaimsProcessingTasksListSelected(taskObj));\r\n      dispatch(setClaimsFnolPushBackRoute(constants.CLAIMS_FNOL_PUSH_BACK_ROUTES.routes.lossAndClaims));\r\n      if (taskObj.taskType === constants.TASK_ROW_TYPE.rfi) {\r\n        history.push(`${config.routes.claimsFNOL.rfi}/${taskObj.taskRef}`);\r\n      } else {\r\n        history.push(`${config.routes.claimsFNOL.task}/${taskObj?.taskRef}`);\r\n      }\r\n    }\r\n  };\r\n\r\n  const changePriority = async () => {\r\n    const tasksData = tasksSelected?.length ? tasksSelected : [task];\r\n    dispatch(\r\n      showModal({\r\n        component: 'CHANGE_PRIORITY',\r\n        props: {\r\n          title: utils.string.t('claims.processing.taskFunction.changePriority'),\r\n          hideCompOnBlur: false,\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            task: tasksData,\r\n            handlers: {\r\n              submitHandler: () => {\r\n                refreshTasksData();\r\n              },\r\n              cancelHandler: () => {\r\n                dispatch(hideModal());\r\n              },\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const refreshTasksData = () => {\r\n    dispatch(getClaimsTasksProcessingList({ requestType: searchTypeCall, taskType, filterTerm: appliedFilters || null, navigation: true }));\r\n  };\r\n\r\n  const isTaskLinkDisabled = (task = {}) => {\r\n    const automatedTasks = constants?.AUTOMATED_TASK_DEF_KEYS;\r\n    return automatedTasks?.includes(task?.taskDefKey);\r\n  }; // automated BPM task does not need task dashboard Link and tasks handlers\r\n\r\n  return (\r\n    <TasksTabTableRowView\r\n      {...props}\r\n      taskActionItems={isTaskLinkDisabled(task) ? [] : taskActionItems}\r\n      isPremiumProcessing={props?.isPremiumProcessing}\r\n      caseTaskTypeView={caseTaskTypeView}\r\n      handlers={{\r\n        selectTask: props?.handlers?.selectTask,\r\n        clickTask,\r\n        editTask,\r\n      }}\r\n      isTaskLinkDisabled={isTaskLinkDisabled(task)}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}