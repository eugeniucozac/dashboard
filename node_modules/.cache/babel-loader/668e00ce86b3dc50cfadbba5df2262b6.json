{"ast":null,"code":"import \"core-js/modules/es.promise.finally\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as utils from 'utils';\nimport { authLogout, addLoader, enqueueNotification, removeLoader } from 'stores';\nexport var closeSanctionsCheck = function closeSanctionsCheck(_ref, successCallback) {\n  var approvalStatus = _ref.approvalStatus,\n      taskId = _ref.taskId;\n  return function (dispatch, getState) {\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/claims.actions.closeSanctionsCheck'\n    };\n    dispatch(closeSanctionsCheckRequest({\n      approvalStatus: approvalStatus,\n      taskId: taskId\n    }));\n    dispatch(addLoader('closeSanctionsCheck'));\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.bpmService,\n      path: \"workflow/task/\".concat(taskId, \"/next\"),\n      data: {\n        approvalStatus: approvalStatus\n      }\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json, true);\n    }).then(function (data) {\n      dispatch(closeSanctionsCheckSuccess(data));\n      successCallback();\n      dispatch(enqueueNotification('notification.closeSanctionsCheck.success', 'success'));\n    })[\"catch\"](function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API post error'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(closeSanctionsCheckFailure(err));\n      dispatch(enqueueNotification('notification.closeSanctionsCheck.fail', 'error'));\n    })[\"finally\"](function () {\n      dispatch(removeLoader('closeSanctionsCheck'));\n    });\n  };\n};\nexport var closeSanctionsCheckRequest = function closeSanctionsCheckRequest(params) {\n  return {\n    type: 'CLOSE_SANCTIONS_CHECK_SUCCESS',\n    payload: params\n  };\n};\nexport var closeSanctionsCheckSuccess = function closeSanctionsCheckSuccess(data) {\n  return {\n    type: 'CLOSE_SANCTIONS_CHECK_SUCCESS',\n    payload: data\n  };\n};\nexport var closeSanctionsCheckFailure = function closeSanctionsCheckFailure(err) {\n  return {\n    type: 'CLOSE_SANCTIONS_CHECK_SUCCESS',\n    payload: err\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.closeSanctionsCheck.js"],"names":["utils","authLogout","addLoader","enqueueNotification","removeLoader","closeSanctionsCheck","successCallback","approvalStatus","taskId","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","closeSanctionsCheckRequest","api","post","token","accessToken","bpmService","path","data","then","response","handleResponse","json","handleNewData","closeSanctionsCheckSuccess","err","errorParams","message","handleError","handleUnauthorized","closeSanctionsCheckFailure","params","type","payload"],"mappings":"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","sourcesContent":["import * as utils from 'utils';\r\nimport { authLogout, addLoader, enqueueNotification, removeLoader } from 'stores';\r\n\r\nexport const closeSanctionsCheck =\r\n  ({ approvalStatus, taskId }, successCallback) =>\r\n  (dispatch, getState) => {\r\n    const {\r\n      user: { auth },\r\n      config: {\r\n        vars: { endpoint },\r\n      },\r\n    } = getState();\r\n    const defaultError = {\r\n      file: 'stores/claims.actions.closeSanctionsCheck',\r\n    };\r\n\r\n    dispatch(closeSanctionsCheckRequest({ approvalStatus, taskId }));\r\n    dispatch(addLoader('closeSanctionsCheck'));\r\n\r\n    return utils.api\r\n      .post({\r\n        token: auth.accessToken,\r\n        endpoint: endpoint.bpmService,\r\n        path: `workflow/task/${taskId}/next`,\r\n        data: { approvalStatus },\r\n      })\r\n      .then((response) => utils.api.handleResponse(response))\r\n      .then((json) => utils.api.handleNewData(json, true))\r\n      .then((data) => {\r\n        dispatch(closeSanctionsCheckSuccess(data));\r\n        successCallback();\r\n        dispatch(enqueueNotification('notification.closeSanctionsCheck.success', 'success'));\r\n      })\r\n      .catch((err) => {\r\n        const errorParams = {\r\n          ...defaultError,\r\n          message: 'API post error',\r\n        };\r\n\r\n        utils.api.handleError(err, errorParams);\r\n        utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n        dispatch(closeSanctionsCheckFailure(err));\r\n        dispatch(enqueueNotification('notification.closeSanctionsCheck.fail', 'error'));\r\n      })\r\n      .finally(() => {\r\n        dispatch(removeLoader('closeSanctionsCheck'));\r\n      });\r\n  };\r\n\r\nexport const closeSanctionsCheckRequest = (params) => {\r\n  return {\r\n    type: 'CLOSE_SANCTIONS_CHECK_SUCCESS',\r\n    payload: params,\r\n  };\r\n};\r\n\r\nexport const closeSanctionsCheckSuccess = (data) => {\r\n  return {\r\n    type: 'CLOSE_SANCTIONS_CHECK_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const closeSanctionsCheckFailure = (err) => {\r\n  return {\r\n    type: 'CLOSE_SANCTIONS_CHECK_SUCCESS',\r\n    payload: err,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}