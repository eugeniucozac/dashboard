{"ast":null,"code":"import \"core-js/modules/es.object.keys\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as utils from 'utils';\nimport { enqueueNotification } from 'stores';\nimport get from 'lodash/get';\nexport var postClaimAndLossDocumentsToGxb = function postClaimAndLossDocumentsToGxb(params) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint,\n        dms = _getState.dms; // prettier-ignore\n\n\n    var referenceId = params.referenceId,\n        sectionType = params.sectionType,\n        documents = params.documents;\n    var ViewDocuments = get(dms, 'view.files') || [];\n    var checkedDocuments = Object.keys(Object.fromEntries(Object.entries(documents).filter(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n\n      return value;\n    })));\n    var gxbDocuments = [];\n    ViewDocuments === null || ViewDocuments === void 0 ? void 0 : ViewDocuments.forEach(function (item) {\n      gxbDocuments.push({\n        documentId: item.documentId,\n        isSentToGxb: checkedDocuments.includes(item.documentId.toString()) ? 1 : 0,\n        referenceId: referenceId,\n        sectionType: sectionType\n      });\n    });\n    dispatch(postClaimsAndLossDocumentsToGxbRequest(gxbDocuments));\n    return utils.api.put({\n      token: auth.accessToken,\n      endpoint: endpoint.dmsService,\n      path: 'dms/document/gxbContext',\n      data: gxbDocuments\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(enqueueNotification(data === null || data === void 0 ? void 0 : data.message, 'success'));\n      dispatch(postClaimsAndLossDocumentsToGxSuccess(data === null || data === void 0 ? void 0 : data.data));\n      return data;\n    })[\"catch\"](function (err) {\n      var defaultError = {\n        file: 'stores/dms.actions.postDmsDocuments'\n      };\n      dispatch(enqueueNotification('notification.uploadDmsFile.fail', 'error'));\n      utils.api.handleError(err, defaultError);\n      return dispatch(postClaimsAndLossDocumentsToGxFailure(err));\n    });\n  };\n};\nexport var postClaimsAndLossDocumentsToGxbRequest = function postClaimsAndLossDocumentsToGxbRequest(params) {\n  return {\n    type: 'DMS_POST_CLAIM_AND_LOSS_DOCUMENTS_REQUEST',\n    payload: params\n  };\n};\nexport var postClaimsAndLossDocumentsToGxSuccess = function postClaimsAndLossDocumentsToGxSuccess(data) {\n  return {\n    type: 'DMS_POST_CLAIM_AND_LOSS_DOCUMENTS_SUCCESS',\n    payload: data\n  };\n};\nexport var postClaimsAndLossDocumentsToGxFailure = function postClaimsAndLossDocumentsToGxFailure(err) {\n  return {\n    type: 'DMS_POST_CLAIM_AND_LOSS_DOCUMENTS_ERROR',\n    payload: err\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/dms/dms.actions.postClaimAndLossDocumentsToGxb.js"],"names":["utils","enqueueNotification","get","postClaimAndLossDocumentsToGxb","params","dispatch","getState","auth","user","endpoint","config","vars","dms","referenceId","sectionType","documents","ViewDocuments","checkedDocuments","Object","keys","fromEntries","entries","filter","key","value","gxbDocuments","forEach","item","push","documentId","isSentToGxb","includes","toString","postClaimsAndLossDocumentsToGxbRequest","api","put","token","accessToken","dmsService","path","data","then","response","handleResponse","json","handleNewData","message","postClaimsAndLossDocumentsToGxSuccess","err","defaultError","file","handleError","postClaimsAndLossDocumentsToGxFailure","type","payload"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,mBAAT,QAAoC,QAApC;AACA,OAAOC,GAAP,MAAgB,YAAhB;AAEA,OAAO,IAAMC,8BAA8B,GAAG,SAAjCA,8BAAiC,CAACC,MAAD;AAAA,SAAY,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAChF;AADgF,oBAEhBA,QAAQ,EAFQ;AAAA,QAEhEC,IAFgE,aAExEC,IAFwE,CAEhED,IAFgE;AAAA,QAEtCE,QAFsC,aAExDC,MAFwD,CAE9CC,IAF8C,CAEtCF,QAFsC;AAAA,QAExBG,GAFwB,aAExBA,GAFwB,EAGhF;;;AAHgF,QAIxEC,WAJwE,GAIhCT,MAJgC,CAIxES,WAJwE;AAAA,QAI3DC,WAJ2D,GAIhCV,MAJgC,CAI3DU,WAJ2D;AAAA,QAI9CC,SAJ8C,GAIhCX,MAJgC,CAI9CW,SAJ8C;AAMhF,QAAMC,aAAa,GAAGd,GAAG,CAACU,GAAD,EAAM,YAAN,CAAH,IAA0B,EAAhD;AAEA,QAAMK,gBAAgB,GAAGC,MAAM,CAACC,IAAP,CAAYD,MAAM,CAACE,WAAP,CAAmBF,MAAM,CAACG,OAAP,CAAeN,SAAf,EAA0BO,MAA1B,CAAiC;AAAA;AAAA,UAAEC,GAAF;AAAA,UAAOC,KAAP;;AAAA,aAAkBA,KAAlB;AAAA,KAAjC,CAAnB,CAAZ,CAAzB;AAEA,QAAIC,YAAY,GAAG,EAAnB;AAEAT,IAAAA,aAAa,SAAb,IAAAA,aAAa,WAAb,YAAAA,aAAa,CAAEU,OAAf,CAAuB,UAACC,IAAD,EAAU;AAC/BF,MAAAA,YAAY,CAACG,IAAb,CAAkB;AAChBC,QAAAA,UAAU,EAAEF,IAAI,CAACE,UADD;AAEhBC,QAAAA,WAAW,EAAEb,gBAAgB,CAACc,QAAjB,CAA0BJ,IAAI,CAACE,UAAL,CAAgBG,QAAhB,EAA1B,IAAwD,CAAxD,GAA4D,CAFzD;AAGhBnB,QAAAA,WAAW,EAAEA,WAHG;AAIhBC,QAAAA,WAAW,EAAEA;AAJG,OAAlB;AAMD,KAPD;AASAT,IAAAA,QAAQ,CAAC4B,sCAAsC,CAACR,YAAD,CAAvC,CAAR;AAEA,WAAOzB,KAAK,CAACkC,GAAN,CACJC,GADI,CACA;AACHC,MAAAA,KAAK,EAAE7B,IAAI,CAAC8B,WADT;AAEH5B,MAAAA,QAAQ,EAAEA,QAAQ,CAAC6B,UAFhB;AAGHC,MAAAA,IAAI,EAAE,yBAHH;AAIHC,MAAAA,IAAI,EAAEf;AAJH,KADA,EAOJgB,IAPI,CAOC,UAACC,QAAD;AAAA,aAAc1C,KAAK,CAACkC,GAAN,CAAUS,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAPD,EAQJD,IARI,CAQC,UAACG,IAAD;AAAA,aAAU5C,KAAK,CAACkC,GAAN,CAAUW,aAAV,CAAwBD,IAAxB,CAAV;AAAA,KARD,EASJH,IATI,CASC,UAACD,IAAD,EAAU;AACdnC,MAAAA,QAAQ,CAACJ,mBAAmB,CAACuC,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEM,OAAP,EAAgB,SAAhB,CAApB,CAAR;AACAzC,MAAAA,QAAQ,CAAC0C,qCAAqC,CAACP,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEA,IAAP,CAAtC,CAAR;AACA,aAAOA,IAAP;AACD,KAbI,WAeE,UAACQ,GAAD,EAAS;AACd,UAAMC,YAAY,GAAG;AACnBC,QAAAA,IAAI,EAAE;AADa,OAArB;AAGA7C,MAAAA,QAAQ,CAACJ,mBAAmB,CAAC,iCAAD,EAAoC,OAApC,CAApB,CAAR;AACAD,MAAAA,KAAK,CAACkC,GAAN,CAAUiB,WAAV,CAAsBH,GAAtB,EAA2BC,YAA3B;AACA,aAAO5C,QAAQ,CAAC+C,qCAAqC,CAACJ,GAAD,CAAtC,CAAf;AACD,KAtBI,CAAP;AAuBD,GA9C6C;AAAA,CAAvC;AAgDP,OAAO,IAAMf,sCAAsC,GAAG,SAAzCA,sCAAyC,CAAC7B,MAAD,EAAY;AAChE,SAAO;AACLiD,IAAAA,IAAI,EAAE,2CADD;AAELC,IAAAA,OAAO,EAAElD;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAM2C,qCAAqC,GAAG,SAAxCA,qCAAwC,CAACP,IAAD,EAAU;AAC7D,SAAO;AACLa,IAAAA,IAAI,EAAE,2CADD;AAELC,IAAAA,OAAO,EAAEd;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMY,qCAAqC,GAAG,SAAxCA,qCAAwC,CAACJ,GAAD,EAAS;AAC5D,SAAO;AACLK,IAAAA,IAAI,EAAE,yCADD;AAELC,IAAAA,OAAO,EAAEN;AAFJ,GAAP;AAID,CALM","sourcesContent":["import * as utils from 'utils';\r\nimport { enqueueNotification } from 'stores';\r\nimport get from 'lodash/get';\r\n\r\nexport const postClaimAndLossDocumentsToGxb = (params) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } }, dms } = getState();\r\n  // prettier-ignore\r\n  const { referenceId, sectionType, documents } = params;\r\n\r\n  const ViewDocuments = get(dms, 'view.files') || [];\r\n\r\n  const checkedDocuments = Object.keys(Object.fromEntries(Object.entries(documents).filter(([key, value]) => value)));\r\n\r\n  let gxbDocuments = [];\r\n\r\n  ViewDocuments?.forEach((item) => {\r\n    gxbDocuments.push({\r\n      documentId: item.documentId,\r\n      isSentToGxb: checkedDocuments.includes(item.documentId.toString()) ? 1 : 0,\r\n      referenceId: referenceId,\r\n      sectionType: sectionType,\r\n    });\r\n  });\r\n\r\n  dispatch(postClaimsAndLossDocumentsToGxbRequest(gxbDocuments));\r\n\r\n  return utils.api\r\n    .put({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.dmsService,\r\n      path: 'dms/document/gxbContext',\r\n      data: gxbDocuments,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(enqueueNotification(data?.message, 'success'));\r\n      dispatch(postClaimsAndLossDocumentsToGxSuccess(data?.data));\r\n      return data;\r\n    })\r\n\r\n    .catch((err) => {\r\n      const defaultError = {\r\n        file: 'stores/dms.actions.postDmsDocuments',\r\n      };\r\n      dispatch(enqueueNotification('notification.uploadDmsFile.fail', 'error'));\r\n      utils.api.handleError(err, defaultError);\r\n      return dispatch(postClaimsAndLossDocumentsToGxFailure(err));\r\n    });\r\n};\r\n\r\nexport const postClaimsAndLossDocumentsToGxbRequest = (params) => {\r\n  return {\r\n    type: 'DMS_POST_CLAIM_AND_LOSS_DOCUMENTS_REQUEST',\r\n    payload: params,\r\n  };\r\n};\r\n\r\nexport const postClaimsAndLossDocumentsToGxSuccess = (data) => {\r\n  return {\r\n    type: 'DMS_POST_CLAIM_AND_LOSS_DOCUMENTS_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const postClaimsAndLossDocumentsToGxFailure = (err) => {\r\n  return {\r\n    type: 'DMS_POST_CLAIM_AND_LOSS_DOCUMENTS_ERROR',\r\n    payload: err,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}