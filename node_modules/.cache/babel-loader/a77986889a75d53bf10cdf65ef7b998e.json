{"ast":null,"code":"var _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\forms\\\\CheckListAlerts\\\\CheckListAlerts.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PropTypes from 'prop-types'; // app\n\nimport { CheckListAlertsView } from './CheckListAlerts.view';\nimport * as utils from 'utils';\nimport { useFormActions } from 'hooks';\nimport { TASK_CHECKLIST_WARNINGS } from 'consts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nCheckListAlerts.propTypes = {\n  type: PropTypes.oneOf(TASK_CHECKLIST_WARNINGS.all),\n  handlers: PropTypes.shape({\n    submit: PropTypes.func.isRequired,\n    cancel: PropTypes.func.isRequired\n  }).isRequired\n};\nexport default function CheckListAlerts(_ref) {\n  _s();\n\n  var type = _ref.type,\n      handlers = _ref.handlers;\n  var actions = [{\n    name: 'cancel',\n    label: utils.string.t('app.cancel'),\n    handler: function handler() {\n      return handlers.cancel();\n    }\n  }, {\n    name: 'submit',\n    label: utils.string.t('app.confirm'),\n    handler: function handler() {\n      return handlers.submit();\n    }\n  }];\n\n  var _useFormActions = useFormActions(actions),\n      cancel = _useFormActions.cancel,\n      submit = _useFormActions.submit;\n\n  return /*#__PURE__*/_jsxDEV(CheckListAlertsView, {\n    type: type,\n    actions: {\n      submit: submit,\n      cancel: cancel\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CheckListAlerts, \"EtcujcTYxWGzUPKaAWaUp/08gJU=\", false, function () {\n  return [useFormActions];\n});\n\n_c = CheckListAlerts;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckListAlerts\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/forms/CheckListAlerts/CheckListAlerts.js"],"names":["React","PropTypes","CheckListAlertsView","utils","useFormActions","TASK_CHECKLIST_WARNINGS","CheckListAlerts","propTypes","type","oneOf","all","handlers","shape","submit","func","isRequired","cancel","actions","name","label","string","t","handler"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;;AACA,SAASC,mBAAT,QAAoC,wBAApC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,cAAT,QAA+B,OAA/B;AACA,SAASC,uBAAT,QAAwC,QAAxC;;AAEAC,eAAe,CAACC,SAAhB,GAA4B;AAC1BC,EAAAA,IAAI,EAAEP,SAAS,CAACQ,KAAV,CAAgBJ,uBAAuB,CAACK,GAAxC,CADoB;AAE1BC,EAAAA,QAAQ,EAAEV,SAAS,CAACW,KAAV,CAAgB;AACxBC,IAAAA,MAAM,EAAEZ,SAAS,CAACa,IAAV,CAAeC,UADC;AAExBC,IAAAA,MAAM,EAAEf,SAAS,CAACa,IAAV,CAAeC;AAFC,GAAhB,EAGPA;AALuB,CAA5B;AAQA,eAAe,SAAST,eAAT,OAA6C;AAAA;;AAAA,MAAlBE,IAAkB,QAAlBA,IAAkB;AAAA,MAAZG,QAAY,QAAZA,QAAY;AAC1D,MAAMM,OAAO,GAAG,CACd;AACEC,IAAAA,IAAI,EAAE,QADR;AAEEC,IAAAA,KAAK,EAAEhB,KAAK,CAACiB,MAAN,CAAaC,CAAb,CAAe,YAAf,CAFT;AAGEC,IAAAA,OAAO,EAAE;AAAA,aAAMX,QAAQ,CAACK,MAAT,EAAN;AAAA;AAHX,GADc,EAMd;AACEE,IAAAA,IAAI,EAAE,QADR;AAEEC,IAAAA,KAAK,EAAEhB,KAAK,CAACiB,MAAN,CAAaC,CAAb,CAAe,aAAf,CAFT;AAGEC,IAAAA,OAAO,EAAE;AAAA,aAAMX,QAAQ,CAACE,MAAT,EAAN;AAAA;AAHX,GANc,CAAhB;;AAD0D,wBAc/BT,cAAc,CAACa,OAAD,CAdiB;AAAA,MAclDD,MAdkD,mBAclDA,MAdkD;AAAA,MAc1CH,MAd0C,mBAc1CA,MAd0C;;AAgB1D,sBACE,QAAC,mBAAD;AACE,IAAA,IAAI,EAAEL,IADR;AAEE,IAAA,OAAO,EAAE;AACPK,MAAAA,MAAM,EAANA,MADO;AAEPG,MAAAA,MAAM,EAANA;AAFO;AAFX;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GAzBuBV,e;UAcKF,c;;;KAdLE,e","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// app\r\nimport { CheckListAlertsView } from './CheckListAlerts.view';\r\nimport * as utils from 'utils';\r\nimport { useFormActions } from 'hooks';\r\nimport { TASK_CHECKLIST_WARNINGS } from 'consts';\r\n\r\nCheckListAlerts.propTypes = {\r\n  type: PropTypes.oneOf(TASK_CHECKLIST_WARNINGS.all),\r\n  handlers: PropTypes.shape({\r\n    submit: PropTypes.func.isRequired,\r\n    cancel: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default function CheckListAlerts({ type, handlers }) {\r\n  const actions = [\r\n    {\r\n      name: 'cancel',\r\n      label: utils.string.t('app.cancel'),\r\n      handler: () => handlers.cancel(),\r\n    },\r\n    {\r\n      name: 'submit',\r\n      label: utils.string.t('app.confirm'),\r\n      handler: () => handlers.submit(),\r\n    },\r\n  ];\r\n\r\n  const { cancel, submit } = useFormActions(actions);\r\n\r\n  return (\r\n    <CheckListAlertsView\r\n      type={type}\r\n      actions={{\r\n        submit,\r\n        cancel,\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}