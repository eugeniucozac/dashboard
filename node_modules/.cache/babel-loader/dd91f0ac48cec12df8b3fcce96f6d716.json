{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ClaimsUploadViewSearchDocs\\\\ClaimsUploadViewSearchDocs.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport merge from 'lodash/merge'; // app\n\nimport ClaimsUploadViewSearchDocsView from './ClaimsUploadViewSearchDocs.view';\nimport * as constants from 'consts';\nimport * as utils from 'utils';\nimport { getViewTableDocuments, selectorDmsViewFiles, selectContextSubType, showModal, getMultipleContextDocuments } from 'stores';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nClaimsUploadViewSearchDocs.propTypes = {\n  viewOptions: PropTypes.shape({\n    disabled: PropTypes.bool,\n    canUpload: PropTypes.bool,\n    canSearch: PropTypes.bool,\n    canUnlink: PropTypes.bool,\n    canDelete: PropTypes.bool,\n    canEditMetaData: PropTypes.bool,\n    canMultiSelect: PropTypes.bool,\n    link: PropTypes.bool,\n    linkToParentContext: PropTypes.bool\n  }).isRequired,\n  searchOptions: PropTypes.shape({\n    disabled: PropTypes.bool\n  }).isRequired,\n  defaultTab: PropTypes.string,\n  isTabView: PropTypes.bool,\n  fnolViewOptions: PropTypes.shape({\n    isClaimsFNOL: PropTypes.bool,\n    isClaimsUploadDisabled: PropTypes.bool,\n    isDmsDocumentMenuDisabled: PropTypes.bool,\n    claimsUploadWarningMsg: PropTypes.string,\n    claimsSearchDocumentsTxt: PropTypes.string,\n    uploadDocumentsTitle: PropTypes.string\n  }),\n  refData: PropTypes.object.isRequired,\n  refIdName: PropTypes.string.isRequired,\n  dmsContext: PropTypes.string.isRequired,\n  documentTypeKey: PropTypes.oneOf(Object.values(constants.DMS_DOCUMENT_TYPE_SECTION_KEYS)),\n  sourceId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  parentLossRef: PropTypes.string,\n  docList: PropTypes.array,\n  dmsDocListParams: PropTypes.array,\n  parentContext: PropTypes.string,\n  parentContextId: PropTypes.string,\n  handlers: PropTypes.shape({\n    onClosingUploadModal: PropTypes.func\n  })\n};\nClaimsUploadViewSearchDocs.defaultProps = {\n  viewOptions: {},\n  searchOptions: {},\n  isTabView: true,\n  defaultTab: constants.DMS_VIEW_TAB_VIEW,\n  fnolViewOptions: {\n    isClaimsFNOL: false,\n    isClaimsUploadDisabled: false,\n    isDmsDocumentMenuDisabled: false,\n    claimsSearchDocumentsTxt: utils.string.t('dms.view.searchDocuments')\n  },\n  docList: [],\n  dmsDocListParams: [],\n  handlers: {\n    onClosingUploadModal: function onClosingUploadModal() {}\n  }\n};\nexport default function ClaimsUploadViewSearchDocs(_ref) {\n  _s();\n\n  var viewOptions = _ref.viewOptions,\n      searchOptions = _ref.searchOptions,\n      isTabView = _ref.isTabView,\n      defaultTab = _ref.defaultTab,\n      fnolViewOptions = _ref.fnolViewOptions,\n      refData = _ref.refData,\n      refIdName = _ref.refIdName,\n      dmsContext = _ref.dmsContext,\n      documentTypeKey = _ref.documentTypeKey,\n      sourceId = _ref.sourceId,\n      parentLossRef = _ref.parentLossRef,\n      docList = _ref.docList,\n      dmsDocListParams = _ref.dmsDocListParams,\n      handlers = _ref.handlers,\n      parentContext = _ref.parentContext,\n      parentContextId = _ref.parentContextId,\n      parentRefs = _ref.parentRefs;\n  var dispatch = useDispatch();\n  var viewOptionsMerged = merge({\n    disabled: false,\n    upload: true,\n    search: true,\n    unlink: true,\n    delete: true,\n    editMetaData: true,\n    multiSelect: true\n  }, viewOptions);\n  var searchOptionsMerged = merge({\n    disabled: false\n  }, searchOptions);\n\n  var _useState = useState(defaultTab),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedTab = _useState2[0],\n      setSelectedTab = _useState2[1];\n\n  var viewDocumentList = useSelector(selectorDmsViewFiles);\n  var contextSubType = useSelector(selectContextSubType); // pp details\n\n  var policyRef = refData === null || refData === void 0 ? void 0 : refData.policyRef;\n  var instructionId = refData === null || refData === void 0 ? void 0 : refData.instructionId;\n  var referenceId = refData === null || refData === void 0 ? void 0 : refData[refIdName];\n  var sectionType = dmsContext;\n  var isAutoSearchScreen = defaultTab === constants.DMS_VIEW_TAB_SEARCH;\n  var hasPreFetchDocs = utils.generic.isValidArray(docList, true);\n  var hasPreFetchDocsParams = utils.generic.isValidArray(dmsDocListParams, true);\n  useEffect(function () {\n    // Cleanup\n    return function () {\n      utils.dms.resetDmsFiles(dispatch);\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    if (checkisSubContext()) {\n      getViewTableDocsForSubContext();\n    } else if (referenceId && sectionType && !hasPreFetchDocs && !hasPreFetchDocsParams) {\n      dispatch(getViewTableDocuments(_objectSpread({\n        referenceId: referenceId,\n        sectionType: sectionType,\n        documentTypeKey: documentTypeKey,\n        parentLossRef: parentLossRef\n      }, policyRef && instructionId && {\n        policyRef: policyRef,\n        instructionId: instructionId\n      })));\n    }\n  }, [referenceId, sectionType, contextSubType === null || contextSubType === void 0 ? void 0 : contextSubType.caseIncidentNotesID]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var onUnlinkorDeleteSuccess = function onUnlinkorDeleteSuccess() {\n    if (!hasPreFetchDocs) {\n      dispatch(getViewTableDocuments(_objectSpread({\n        referenceId: referenceId,\n        sectionType: sectionType,\n        documentTypeKey: documentTypeKey,\n        parentLossRef: parentLossRef\n      }, policyRef && instructionId && {\n        policyRef: policyRef,\n        instructionId: instructionId\n      })));\n    } else if (hasPreFetchDocsParams) {\n      dispatch(getMultipleContextDocuments(dmsDocListParams));\n    }\n  };\n\n  var tabs = [{\n    value: constants.DMS_VIEW_TAB_VIEW,\n    label: utils.string.t('dms.wrapper.tabs.viewDocuments'),\n    disabled: viewOptionsMerged.disabled\n  }, {\n    value: constants.DMS_VIEW_TAB_SEARCH,\n    label: utils.string.t('dms.wrapper.tabs.search'),\n    disabled: searchOptionsMerged.disabled\n  }];\n\n  var selectTab = function selectTab(tabName) {\n    setSelectedTab(tabName);\n\n    if (tabName === constants.DMS_VIEW_TAB_VIEW) {\n      if (referenceId && sectionType && !hasPreFetchDocs) {\n        dispatch(getViewTableDocuments(_objectSpread({\n          referenceId: referenceId,\n          sectionType: sectionType,\n          documentTypeKey: documentTypeKey\n        }, policyRef && instructionId && {\n          policyRef: policyRef,\n          instructionId: instructionId\n        })));\n      } else if (hasPreFetchDocs && hasPreFetchDocsParams) {\n        dispatch(getMultipleContextDocuments(dmsDocListParams));\n      }\n    }\n  };\n\n  var checkisSubContext = function checkisSubContext() {\n    var type = contextSubType.type;\n    return type && constants.DMS_TASK_CONTEXT_ALL_TYPES.includes(type);\n  };\n\n  var getViewTableDocsForSubContext = function getViewTableDocsForSubContext() {\n    var caseIncidentNotesID = contextSubType.caseIncidentNotesID,\n        refId = contextSubType.refId;\n\n    if (caseIncidentNotesID && !hasPreFetchDocsParams) {\n      var refIdForSubContext = refId + '-' + caseIncidentNotesID;\n      dispatch(getViewTableDocuments(_objectSpread({\n        referenceId: refIdForSubContext,\n        sectionType: sectionType,\n        documentTypeKey: documentTypeKey\n      }, policyRef && instructionId && {\n        policyRef: policyRef,\n        instructionId: instructionId\n      })));\n    } else if (!hasPreFetchDocs && !hasPreFetchDocsParams) {\n      dispatch(getViewTableDocuments(_objectSpread({\n        referenceId: refId,\n        sectionType: sectionType,\n        documentTypeKey: documentTypeKey\n      }, policyRef && instructionId && {\n        policyRef: policyRef,\n        instructionId: instructionId\n      })));\n    }\n  };\n\n  var onLink = function onLink() {\n    var docData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var resetToDefaultValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\n    dispatch(showModal({\n      component: 'DMS_LINK_TO_LOSS_AND_CLAIM',\n      props: {\n        fullWidth: true,\n        title: utils.string.t('dms.view.linkToLossAndClaim.title'),\n        maxWidth: 'xs',\n        componentProps: {\n          docData: docData,\n          resetToDefaultValues: resetToDefaultValues,\n          canLinkToTask: viewOptions === null || viewOptions === void 0 ? void 0 : viewOptions.linkToTask,\n          parentRefs: parentRefs\n        }\n      }\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(ClaimsUploadViewSearchDocsView, {\n    isTabView: isTabView,\n    tabs: tabs,\n    selectedTab: selectedTab,\n    isAutoSearchScreen: isAutoSearchScreen,\n    viewOptions: viewOptionsMerged,\n    fnolViewOptions: fnolViewOptions,\n    context: dmsContext,\n    documentTypeKey: documentTypeKey,\n    referenceId: referenceId,\n    sourceId: sourceId,\n    parentLossRef: parentLossRef,\n    viewDocumentList: hasPreFetchDocs ? docList : viewDocumentList,\n    parentContext: parentContext,\n    parentContextId: parentContextId,\n    handlers: {\n      selectTab: selectTab,\n      onUnlinkorDeleteSuccess: onUnlinkorDeleteSuccess,\n      onClosingUploadModal: handlers.onClosingUploadModal,\n      onLink: onLink\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 244,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ClaimsUploadViewSearchDocs, \"iTAkqbLt37Du+IV5IAWqxvPe+ZE=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = ClaimsUploadViewSearchDocs;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimsUploadViewSearchDocs\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ClaimsUploadViewSearchDocs/ClaimsUploadViewSearchDocs.js"],"names":["React","useState","useEffect","PropTypes","useDispatch","useSelector","merge","ClaimsUploadViewSearchDocsView","constants","utils","getViewTableDocuments","selectorDmsViewFiles","selectContextSubType","showModal","getMultipleContextDocuments","ClaimsUploadViewSearchDocs","propTypes","viewOptions","shape","disabled","bool","canUpload","canSearch","canUnlink","canDelete","canEditMetaData","canMultiSelect","link","linkToParentContext","isRequired","searchOptions","defaultTab","string","isTabView","fnolViewOptions","isClaimsFNOL","isClaimsUploadDisabled","isDmsDocumentMenuDisabled","claimsUploadWarningMsg","claimsSearchDocumentsTxt","uploadDocumentsTitle","refData","object","refIdName","dmsContext","documentTypeKey","oneOf","Object","values","DMS_DOCUMENT_TYPE_SECTION_KEYS","sourceId","oneOfType","number","parentLossRef","docList","array","dmsDocListParams","parentContext","parentContextId","handlers","onClosingUploadModal","func","defaultProps","DMS_VIEW_TAB_VIEW","t","parentRefs","dispatch","viewOptionsMerged","upload","search","unlink","delete","editMetaData","multiSelect","searchOptionsMerged","selectedTab","setSelectedTab","viewDocumentList","contextSubType","policyRef","instructionId","referenceId","sectionType","isAutoSearchScreen","DMS_VIEW_TAB_SEARCH","hasPreFetchDocs","generic","isValidArray","hasPreFetchDocsParams","dms","resetDmsFiles","checkisSubContext","getViewTableDocsForSubContext","caseIncidentNotesID","onUnlinkorDeleteSuccess","tabs","value","label","selectTab","tabName","type","DMS_TASK_CONTEXT_ALL_TYPES","includes","refId","refIdForSubContext","onLink","docData","resetToDefaultValues","component","props","fullWidth","title","maxWidth","componentProps","canLinkToTask","linkToTask"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport merge from 'lodash/merge';\r\n\r\n// app\r\nimport ClaimsUploadViewSearchDocsView from './ClaimsUploadViewSearchDocs.view';\r\nimport * as constants from 'consts';\r\nimport * as utils from 'utils';\r\nimport { getViewTableDocuments, selectorDmsViewFiles, selectContextSubType, showModal, getMultipleContextDocuments } from 'stores';\r\n\r\nClaimsUploadViewSearchDocs.propTypes = {\r\n  viewOptions: PropTypes.shape({\r\n    disabled: PropTypes.bool,\r\n    canUpload: PropTypes.bool,\r\n    canSearch: PropTypes.bool,\r\n    canUnlink: PropTypes.bool,\r\n    canDelete: PropTypes.bool,\r\n    canEditMetaData: PropTypes.bool,\r\n    canMultiSelect: PropTypes.bool,\r\n    link: PropTypes.bool,\r\n    linkToParentContext: PropTypes.bool,\r\n  }).isRequired,\r\n  searchOptions: PropTypes.shape({\r\n    disabled: PropTypes.bool,\r\n  }).isRequired,\r\n  defaultTab: PropTypes.string,\r\n  isTabView: PropTypes.bool,\r\n  fnolViewOptions: PropTypes.shape({\r\n    isClaimsFNOL: PropTypes.bool,\r\n    isClaimsUploadDisabled: PropTypes.bool,\r\n    isDmsDocumentMenuDisabled: PropTypes.bool,\r\n    claimsUploadWarningMsg: PropTypes.string,\r\n    claimsSearchDocumentsTxt: PropTypes.string,\r\n    uploadDocumentsTitle: PropTypes.string,\r\n  }),\r\n  refData: PropTypes.object.isRequired,\r\n  refIdName: PropTypes.string.isRequired,\r\n  dmsContext: PropTypes.string.isRequired,\r\n  documentTypeKey: PropTypes.oneOf(Object.values(constants.DMS_DOCUMENT_TYPE_SECTION_KEYS)),\r\n  sourceId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n  parentLossRef: PropTypes.string,\r\n  docList: PropTypes.array,\r\n  dmsDocListParams: PropTypes.array,\r\n  parentContext: PropTypes.string,\r\n  parentContextId: PropTypes.string,\r\n  handlers: PropTypes.shape({\r\n    onClosingUploadModal: PropTypes.func,\r\n  }),\r\n};\r\n\r\nClaimsUploadViewSearchDocs.defaultProps = {\r\n  viewOptions: {},\r\n  searchOptions: {},\r\n  isTabView: true,\r\n  defaultTab: constants.DMS_VIEW_TAB_VIEW,\r\n  fnolViewOptions: {\r\n    isClaimsFNOL: false,\r\n    isClaimsUploadDisabled: false,\r\n    isDmsDocumentMenuDisabled: false,\r\n    claimsSearchDocumentsTxt: utils.string.t('dms.view.searchDocuments'),\r\n  },\r\n  docList: [],\r\n  dmsDocListParams: [],\r\n  handlers: {\r\n    onClosingUploadModal: () => {},\r\n  },\r\n};\r\n\r\nexport default function ClaimsUploadViewSearchDocs({\r\n  viewOptions,\r\n  searchOptions,\r\n  isTabView,\r\n  defaultTab,\r\n  fnolViewOptions,\r\n  refData,\r\n  refIdName,\r\n  dmsContext,\r\n  documentTypeKey,\r\n  sourceId,\r\n  parentLossRef,\r\n  docList,\r\n  dmsDocListParams,\r\n  handlers,\r\n  parentContext,\r\n  parentContextId,\r\n  parentRefs,\r\n}) {\r\n  const dispatch = useDispatch();\r\n\r\n  const viewOptionsMerged = merge(\r\n    {\r\n      disabled: false,\r\n      upload: true,\r\n      search: true,\r\n      unlink: true,\r\n      delete: true,\r\n      editMetaData: true,\r\n      multiSelect: true,\r\n    },\r\n    viewOptions\r\n  );\r\n\r\n  const searchOptionsMerged = merge(\r\n    {\r\n      disabled: false,\r\n    },\r\n    searchOptions\r\n  );\r\n\r\n  const [selectedTab, setSelectedTab] = useState(defaultTab);\r\n\r\n  const viewDocumentList = useSelector(selectorDmsViewFiles);\r\n  const contextSubType = useSelector(selectContextSubType);\r\n\r\n  // pp details\r\n  const policyRef = refData?.policyRef;\r\n  const instructionId = refData?.instructionId;\r\n\r\n  const referenceId = refData?.[refIdName];\r\n  const sectionType = dmsContext;\r\n  const isAutoSearchScreen = defaultTab === constants.DMS_VIEW_TAB_SEARCH;\r\n  const hasPreFetchDocs = utils.generic.isValidArray(docList, true);\r\n  const hasPreFetchDocsParams = utils.generic.isValidArray(dmsDocListParams, true);\r\n\r\n  useEffect(() => {\r\n    // Cleanup\r\n    return () => {\r\n      utils.dms.resetDmsFiles(dispatch);\r\n    };\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    if (checkisSubContext()) {\r\n      getViewTableDocsForSubContext();\r\n    } else if (referenceId && sectionType && !hasPreFetchDocs && !hasPreFetchDocsParams) {\r\n      dispatch(\r\n        getViewTableDocuments({\r\n          referenceId,\r\n          sectionType,\r\n          documentTypeKey,\r\n          parentLossRef,\r\n          ...(policyRef && instructionId && { policyRef, instructionId }),\r\n        })\r\n      );\r\n    }\r\n  }, [referenceId, sectionType, contextSubType?.caseIncidentNotesID]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const onUnlinkorDeleteSuccess = () => {\r\n    if (!hasPreFetchDocs) {\r\n      dispatch(\r\n        getViewTableDocuments({\r\n          referenceId,\r\n          sectionType,\r\n          documentTypeKey,\r\n          parentLossRef,\r\n          ...(policyRef && instructionId && { policyRef, instructionId }),\r\n        })\r\n      );\r\n    } else if (hasPreFetchDocsParams) {\r\n      dispatch(getMultipleContextDocuments(dmsDocListParams));\r\n    }\r\n  };\r\n\r\n  const tabs = [\r\n    {\r\n      value: constants.DMS_VIEW_TAB_VIEW,\r\n      label: utils.string.t('dms.wrapper.tabs.viewDocuments'),\r\n      disabled: viewOptionsMerged.disabled,\r\n    },\r\n    {\r\n      value: constants.DMS_VIEW_TAB_SEARCH,\r\n      label: utils.string.t('dms.wrapper.tabs.search'),\r\n      disabled: searchOptionsMerged.disabled,\r\n    },\r\n  ];\r\n\r\n  const selectTab = (tabName) => {\r\n    setSelectedTab(tabName);\r\n\r\n    if (tabName === constants.DMS_VIEW_TAB_VIEW) {\r\n      if (referenceId && sectionType && !hasPreFetchDocs) {\r\n        dispatch(\r\n          getViewTableDocuments({\r\n            referenceId,\r\n            sectionType,\r\n            documentTypeKey,\r\n            ...(policyRef && instructionId && { policyRef, instructionId }),\r\n          })\r\n        );\r\n      } else if (hasPreFetchDocs && hasPreFetchDocsParams) {\r\n        dispatch(getMultipleContextDocuments(dmsDocListParams));\r\n      }\r\n    }\r\n  };\r\n\r\n  const checkisSubContext = () => {\r\n    const { type } = contextSubType;\r\n    return type && constants.DMS_TASK_CONTEXT_ALL_TYPES.includes(type);\r\n  };\r\n\r\n  const getViewTableDocsForSubContext = () => {\r\n    const { caseIncidentNotesID, refId } = contextSubType;\r\n    if (caseIncidentNotesID && !hasPreFetchDocsParams) {\r\n      const refIdForSubContext = refId + '-' + caseIncidentNotesID;\r\n      dispatch(\r\n        getViewTableDocuments({\r\n          referenceId: refIdForSubContext,\r\n          sectionType,\r\n          documentTypeKey,\r\n          ...(policyRef && instructionId && { policyRef, instructionId }),\r\n        })\r\n      );\r\n    } else if (!hasPreFetchDocs && !hasPreFetchDocsParams) {\r\n      dispatch(\r\n        getViewTableDocuments({\r\n          referenceId: refId,\r\n          sectionType,\r\n          documentTypeKey,\r\n          ...(policyRef && instructionId && { policyRef, instructionId }),\r\n        })\r\n      );\r\n    }\r\n  };\r\n  const onLink = (docData = [], resetToDefaultValues = () => {}) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'DMS_LINK_TO_LOSS_AND_CLAIM',\r\n        props: {\r\n          fullWidth: true,\r\n          title: utils.string.t('dms.view.linkToLossAndClaim.title'),\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            docData,\r\n            resetToDefaultValues,\r\n            canLinkToTask: viewOptions?.linkToTask,\r\n            parentRefs\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n  return (\r\n    <ClaimsUploadViewSearchDocsView\r\n      isTabView={isTabView}\r\n      tabs={tabs}\r\n      selectedTab={selectedTab}\r\n      isAutoSearchScreen={isAutoSearchScreen}\r\n      viewOptions={viewOptionsMerged}\r\n      fnolViewOptions={fnolViewOptions}\r\n      context={dmsContext}\r\n      documentTypeKey={documentTypeKey}\r\n      referenceId={referenceId}\r\n      sourceId={sourceId}\r\n      parentLossRef={parentLossRef}\r\n      viewDocumentList={hasPreFetchDocs ? docList : viewDocumentList}\r\n      parentContext={parentContext}\r\n      parentContextId={parentContextId}\r\n      handlers={{ selectTab, onUnlinkorDeleteSuccess, onClosingUploadModal: handlers.onClosingUploadModal, onLink }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}