{"ast":null,"code":"import _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\LinkClaimPolicy\\\\LinkClaimPolicy.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as Yup from 'yup';\nimport moment from 'moment';\nimport get from 'lodash/get'; //app\n\nimport { LinkClaimPolicyView } from './LinkClaimPolicy.view';\nimport styles from './LinkClaimPolicy.styles';\nimport { FormGrid } from 'components';\nimport { getInterest, getClaimDetails, getPolicyInsures, getPolicyClients, getPolicySections, selectClaimsPolicySections, selectClaimsInterestItems, selectClaimPolicyInsures, selectSectionEnabledUG, selectClaimsUnderwritingGroups, selectClaimPolicyClients, selectAllClaimDetails, postClaimDetailsInformation, postEditClaimDetailsInformation, selectLinkPoliciesData, getLinkPoliciesData, selectRefDataNewCountriesList, selectClaimsInterest, selectIsClaimPolicyClientsLoading, selectPolicySectionIsLoading, selectisClaimPolicyInsuresLoading, selectClaimsPolicyInformation, selectClaimsPolicyData } from 'stores';\nimport * as utils from 'utils';\nimport { CLAIM_SECTION_ENABLED_UG, CLAIM_POLICY_SECTION_DEFAULT } from 'consts'; //mui\n\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport { makeStyles } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SelectedClaimPolicy(_ref) {\n  _s();\n\n  var _interest,\n      _origCurrencies,\n      _settlementCurriencie,\n      _useSelector,\n      _countriesList,\n      _linkPoliciesData$dat,\n      _isFormsEdited$index2,\n      _linkPoliciesData$dat2,\n      _isFormsEdited$index3,\n      _linkPoliciesData$dat3,\n      _countriesList2,\n      _isFormsEdited$index4,\n      _linkPoliciesData$dat4,\n      _origCurrencies2,\n      _isFormsEdited$index5,\n      _linkPoliciesData$dat5,\n      _settlementCurriencie2,\n      _settlementCurriencie3,\n      _isFormsEdited$index6,\n      _linkPoliciesData$dat6,\n      _interest2,\n      _interest3,\n      _linkPoliciesData$dat7,\n      _isFormsEdited$index7,\n      _linkPoliciesData$dat8,\n      _this = this;\n\n  var policyData = _ref.policyData,\n      selectedPolicyRender = _ref.selectedPolicyRender,\n      setSelectedPolicyRender = _ref.setSelectedPolicyRender,\n      validation = _ref.validation,\n      setValidation = _ref.setValidation,\n      setActiveStep = _ref.setActiveStep,\n      index = _ref.index,\n      isFormsEdited = _ref.isFormsEdited,\n      setFormEditedStatus = _ref.setFormEditedStatus,\n      saveStatus = _ref.saveStatus,\n      sectionEnabledValidationFlag = _ref.sectionEnabledValidationFlag,\n      claimInfo = _ref.claimInfo,\n      handleFormStatus = _ref.handleFormStatus,\n      selectNextPolicy = _ref.selectNextPolicy,\n      setSelectNextPolicy = _ref.setSelectNextPolicy;\n  var classes = makeStyles(styles, {\n    name: 'LinkClaimPolicy'\n  })();\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      uwResetKey = _useState2[0],\n      setUWResetKey = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      stepper = _useState4[0],\n      setStepper = _useState4[1];\n\n  var dispatch = useDispatch();\n  var interest = useSelector(selectClaimsInterestItems);\n  interest = utils.generic.isValidArray(interest) ? (_interest = interest) === null || _interest === void 0 ? void 0 : _interest.map(function (intrst) {\n    return _objectSpread(_objectSpread({}, intrst), {}, {\n      description: \"\".concat(intrst.code, \" - \").concat(intrst.description)\n    });\n  }) : null;\n  var origCurrencies = useSelector(function (state) {\n    return get(state, 'referenceData.currencyCodes');\n  });\n  var allSettlementCurriencies = useSelector(function (state) {\n    return get(state, 'referenceData.settlementCurrency');\n  });\n  var settlementCurriencies = utils.referenceData.settlementCurrencyTypes.getAllById(allSettlementCurriencies, policyData === null || policyData === void 0 ? void 0 : policyData.xbInstanceID);\n  origCurrencies = utils.generic.isValidArray(origCurrencies) ? (_origCurrencies = origCurrencies) === null || _origCurrencies === void 0 ? void 0 : _origCurrencies.map(function (currency) {\n    return _objectSpread(_objectSpread({}, currency), {}, {\n      currencyName: \"\".concat(currency.currencyCd, \" - \").concat(currency.currencyName)\n    });\n  }) : null;\n  settlementCurriencies = utils.generic.isValidArray(settlementCurriencies) ? (_settlementCurriencie = settlementCurriencies) === null || _settlementCurriencie === void 0 ? void 0 : _settlementCurriencie.map(function (currency) {\n    return _objectSpread(_objectSpread({}, currency), {}, {\n      currencyName: \"\".concat(currency.currencyCd, \" - \").concat(currency.currencyName)\n    });\n  }) : null;\n  var allClaimDetails = useSelector(selectAllClaimDetails);\n  var underWritingGroups = useSelector(selectClaimsUnderwritingGroups);\n  var policySections = useSelector(selectClaimsPolicySections);\n  var claimPolicyInsures = useSelector(selectClaimPolicyInsures);\n  var isSectionEnabled = useSelector(selectSectionEnabledUG);\n  var claimPolicyClients = useSelector(selectClaimPolicyClients);\n  var isInterestLoading = (_useSelector = useSelector(selectClaimsInterest)) === null || _useSelector === void 0 ? void 0 : _useSelector.isLoading;\n  var isPoliciesClientsLoading = useSelector(selectIsClaimPolicyClientsLoading);\n  var isPolicySectionLoading = useSelector(selectPolicySectionIsLoading);\n  var isInsuredLoading = useSelector(selectisClaimPolicyInsuresLoading);\n  var policyInformation = useSelector(selectClaimsPolicyData);\n  var countriesList = useSelector(selectRefDataNewCountriesList);\n  countriesList = utils.generic.isValidArray(countriesList) ? (_countriesList = countriesList) === null || _countriesList === void 0 ? void 0 : _countriesList.map(function (country) {\n    return _objectSpread(_objectSpread({}, country), {}, {\n      countryName: \"\".concat(country.countryCode, \" - \").concat(country.countryName)\n    });\n  }) : null;\n  var linkPoliciesData = useSelector(selectLinkPoliciesData);\n  var isBordereauFlag = (allClaimDetails === null || allClaimDetails === void 0 ? void 0 : allClaimDetails.isBordereau) === 1;\n  useEffect(function () {\n    if (selectedPolicyRender !== '') {\n      dispatch(getInterest({\n        viewLoader: false\n      }));\n      dispatch(getPolicyInsures({\n        viewLoader: false\n      }));\n      isSectionEnabled && dispatch(getPolicySections({\n        viewLoader: false\n      }));\n      dispatch(getPolicyClients({\n        viewLoader: false\n      })).then(function (response) {\n        if (utils.generic.isValidArray(response)) {\n          dispatch(getLinkPoliciesData({\n            loader: true,\n            fieldLoader: false\n          }));\n          setUWResetKey(new Date().getTime());\n          console.log('currentData', setUWResetKey(new Date().getTime()));\n        }\n      });\n      dispatch(getClaimDetails());\n    }\n  }, [selectedPolicyRender]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var sectionAllOption = (policyData === null || policyData === void 0 ? void 0 : policyData.policyType) === CLAIM_SECTION_ENABLED_UG[0] ? [] : [{\n    id: CLAIM_POLICY_SECTION_DEFAULT,\n    name: utils.string.t('app.all'),\n    description: null\n  }];\n  var policyInfo = [].concat(sectionAllOption, _toConsumableArray(utils.generic.isValidArray(policySections, true) ? policySections : []));\n\n  var postSaveHandler = function postSaveHandler(postData) {\n    if (!(claimInfo === null || claimInfo === void 0 ? void 0 : claimInfo.claimID)) {\n      dispatch(postClaimDetailsInformation(postData)).then(function (response) {\n        if (response) {\n          dispatch(getLinkPoliciesData({\n            data: postData\n          }));\n          var formState = isFormsEdited === null || isFormsEdited === void 0 ? void 0 : isFormsEdited.map(function (form) {\n            return _objectSpread({}, form);\n          });\n          formState[index]['formEditedStatus'] = false;\n          formState[index]['isSubmitted'] = false;\n          setFormEditedStatus(formState);\n          setValidation(false);\n        }\n      });\n    } else {\n      dispatch(postEditClaimDetailsInformation(postData)).then(function (response) {\n        if (response) {\n          dispatch(getLinkPoliciesData({\n            data: postData\n          }));\n          var formState = isFormsEdited === null || isFormsEdited === void 0 ? void 0 : isFormsEdited.map(function (form) {\n            return _objectSpread({}, form);\n          });\n          formState[index]['formEditedStatus'] = false;\n          formState[index]['isSubmitted'] = false;\n          setFormEditedStatus(formState);\n          setValidation(false);\n        }\n      });\n    }\n  };\n\n  var postEditSaveHandler = function postEditSaveHandler(postData) {\n    utils.dms.resetDmsFiles(dispatch);\n\n    if (claimInfo === null || claimInfo === void 0 ? void 0 : claimInfo.claimID) {\n      dispatch(postEditClaimDetailsInformation(postData)).then(function (response) {\n        if (response) {\n          dispatch(getLinkPoliciesData({\n            data: postData\n          }));\n          var formState = isFormsEdited === null || isFormsEdited === void 0 ? void 0 : isFormsEdited.map(function (form) {\n            return _objectSpread({}, form);\n          });\n          formState[index]['formEditedStatus'] = false;\n          formState[index]['isSubmitted'] = true;\n          setFormEditedStatus(formState);\n          setActiveStep(index + 1);\n          setValidation(true);\n          setSelectedPolicyRender('');\n        }\n      });\n    } else {\n      dispatch(postClaimDetailsInformation(postData)).then(function (response) {\n        if (response) {\n          dispatch(getLinkPoliciesData({\n            data: postData\n          }));\n          var formState = isFormsEdited === null || isFormsEdited === void 0 ? void 0 : isFormsEdited.map(function (form) {\n            return _objectSpread({}, form);\n          });\n          formState[index]['formEditedStatus'] = false;\n          formState[index]['isSubmitted'] = true;\n          setFormEditedStatus(formState);\n          setActiveStep(index + 1);\n          setValidation(true);\n          setSelectedPolicyRender('');\n        }\n      });\n    }\n  };\n\n  var postSaveNextHanlder = function postSaveNextHanlder(postData) {\n    if (claimInfo === null || claimInfo === void 0 ? void 0 : claimInfo.claimID) {\n      var policyUpdated = true;\n      dispatch(postEditClaimDetailsInformation(postData, policyUpdated)).then(function (response) {\n        if (response) {\n          var _isFormsEdited$index;\n\n          dispatch(getLinkPoliciesData({\n            data: postData\n          }));\n          var formState = isFormsEdited === null || isFormsEdited === void 0 ? void 0 : isFormsEdited.map(function (form) {\n            return _objectSpread({}, form);\n          });\n\n          if ((_isFormsEdited$index = isFormsEdited[index]) === null || _isFormsEdited$index === void 0 ? void 0 : _isFormsEdited$index.formEditedStatus) {\n            formState[index]['formEditedStatus'] = false;\n            formState[index]['isSubmitted'] = false;\n            setFormEditedStatus(formState);\n            setActiveStep(index + 1);\n            setValidation(true);\n            setSelectNextPolicy(false);\n          } else {\n            formState[index]['formEditedStatus'] = false;\n            formState[index]['isSubmitted'] = true;\n            setFormEditedStatus(formState);\n            setValidation(true);\n            setSelectedPolicyRender('');\n            setSelectNextPolicy(false);\n          }\n        }\n      });\n    }\n  }; //console.log('policyInformation ', policyInformation);\n\n\n  console.log('policyInformation.expiryDate', policyInformation.expiryDate);\n  console.log('policyInformation.inceptionDate', policyInformation.inceptionDate); //\n  //  console.log('allClaimDetails?.certificateInceptionDate ', allClaimDetails?.certificateInceptionDate);\n  //  console.log('allClaimDetails?.certificateExpiryDate ', allClaimDetails?.certificateExpiryDate);\n\n  var fields = [{\n    name: 'insured',\n    type: 'autocompletemui',\n    options: claimPolicyInsures || [],\n    optionKey: 'id',\n    optionLabel: 'name',\n    label: utils.string.t('claims.claimInformation.insured'),\n    value: (linkPoliciesData === null || linkPoliciesData === void 0 ? void 0 : (_linkPoliciesData$dat = linkPoliciesData.data) === null || _linkPoliciesData$dat === void 0 ? void 0 : _linkPoliciesData$dat.insured) && !(linkPoliciesData === null || linkPoliciesData === void 0 ? void 0 : linkPoliciesData.fieldLoader) ? claimPolicyInsures === null || claimPolicyInsures === void 0 ? void 0 : claimPolicyInsures.find(function (clmPolicy) {\n      return clmPolicy.id === linkPoliciesData.data.insured.id;\n    }) : (claimPolicyInsures === null || claimPolicyInsures === void 0 ? void 0 : claimPolicyInsures.length) === 1 ? claimPolicyInsures[0] : null,\n    validation: (isFormsEdited === null || isFormsEdited === void 0 ? void 0 : (_isFormsEdited$index2 = isFormsEdited[index]) === null || _isFormsEdited$index2 === void 0 ? void 0 : _isFormsEdited$index2.formEditedStatus) ? Yup.object().nullable().required(utils.string.t('validation.required')).when('$validation', function (validation, schema) {\n      return validation ? schema : Yup.object().nullable();\n    }) : false\n  }, {\n    name: 'client',\n    type: 'autocompletemui',\n    options: claimPolicyClients || [],\n    optionKey: 'id',\n    optionLabel: 'name',\n    label: utils.string.t('claims.claimInformation.client'),\n    value: (linkPoliciesData === null || linkPoliciesData === void 0 ? void 0 : (_linkPoliciesData$dat2 = linkPoliciesData.data) === null || _linkPoliciesData$dat2 === void 0 ? void 0 : _linkPoliciesData$dat2.client) && !(linkPoliciesData === null || linkPoliciesData === void 0 ? void 0 : linkPoliciesData.fieldLoader) ? claimPolicyClients === null || claimPolicyClients === void 0 ? void 0 : claimPolicyClients.find(function (clmPolicyclnt) {\n      return clmPolicyclnt.id === linkPoliciesData.data.client.id;\n    }) : (claimPolicyClients === null || claimPolicyClients === void 0 ? void 0 : claimPolicyClients.length) === 1 ? claimPolicyClients[0] : null,\n    validation: (isFormsEdited === null || isFormsEdited === void 0 ? void 0 : (_isFormsEdited$index3 = isFormsEdited[index]) === null || _isFormsEdited$index3 === void 0 ? void 0 : _isFormsEdited$index3.formEditedStatus) ? Yup.object().nullable().required(utils.string.t('validation.required')).when('$validation', function (validation, schema) {\n      return validation ? schema : Yup.object().nullable();\n    }) : false\n  }, {\n    name: 'countryCode',\n    type: 'autocompletemui',\n    options: countriesList || [],\n    optionKey: 'countryCode',\n    optionLabel: 'countryName',\n    label: utils.string.t('claims.claimInformation.country'),\n    value: (linkPoliciesData === null || linkPoliciesData === void 0 ? void 0 : (_linkPoliciesData$dat3 = linkPoliciesData.data) === null || _linkPoliciesData$dat3 === void 0 ? void 0 : _linkPoliciesData$dat3.countryCode) && !(linkPoliciesData === null || linkPoliciesData === void 0 ? void 0 : linkPoliciesData.fieldLoader) ? (_countriesList2 = countriesList) === null || _countriesList2 === void 0 ? void 0 : _countriesList2.find(function (country) {\n      return country.countryCode === linkPoliciesData.data.countryCode.countryCode;\n    }) : null,\n    validation: (isFormsEdited === null || isFormsEdited === void 0 ? void 0 : (_isFormsEdited$index4 = isFormsEdited[index]) === null || _isFormsEdited$index4 === void 0 ? void 0 : _isFormsEdited$index4.formEditedStatus) ? Yup.object().nullable().required(utils.string.t('validation.required')) : false\n  }, {\n    name: 'originalCurrencyCode',\n    type: 'autocompletemui',\n    options: origCurrencies || [],\n    optionKey: 'currencyCd',\n    optionLabel: 'currencyName',\n    label: utils.string.t('claims.claimInformation.originalCurrency'),\n    value: (linkPoliciesData === null || linkPoliciesData === void 0 ? void 0 : (_linkPoliciesData$dat4 = linkPoliciesData.data) === null || _linkPoliciesData$dat4 === void 0 ? void 0 : _linkPoliciesData$dat4.originalCurrencyCode) && !(linkPoliciesData === null || linkPoliciesData === void 0 ? void 0 : linkPoliciesData.fieldLoader) ? (_origCurrencies2 = origCurrencies) === null || _origCurrencies2 === void 0 ? void 0 : _origCurrencies2.find(function (currency) {\n      return currency.currencyCd === linkPoliciesData.data.originalCurrencyCode.currencyCd;\n    }) : null,\n    validation: (isFormsEdited === null || isFormsEdited === void 0 ? void 0 : (_isFormsEdited$index5 = isFormsEdited[index]) === null || _isFormsEdited$index5 === void 0 ? void 0 : _isFormsEdited$index5.formEditedStatus) ? Yup.object().nullable().required(utils.string.t('validation.required')) : false\n  }, {\n    name: 'settlementCurrencyCode',\n    type: 'autocompletemui',\n    options: settlementCurriencies || [],\n    optionKey: 'currencyCd',\n    optionLabel: 'currencyName',\n    label: utils.string.t('claims.claimInformation.settlementCurrency'),\n    value: (linkPoliciesData === null || linkPoliciesData === void 0 ? void 0 : (_linkPoliciesData$dat5 = linkPoliciesData.data) === null || _linkPoliciesData$dat5 === void 0 ? void 0 : _linkPoliciesData$dat5.originalCurrencyCode) && !(linkPoliciesData === null || linkPoliciesData === void 0 ? void 0 : linkPoliciesData.fieldLoader) ? (_settlementCurriencie2 = settlementCurriencies) === null || _settlementCurriencie2 === void 0 ? void 0 : _settlementCurriencie2.find(function (currency) {\n      return currency.currencyCd === linkPoliciesData.data.settlementCurrencyCode.currencyCd;\n    }) : (allClaimDetails === null || allClaimDetails === void 0 ? void 0 : allClaimDetails.settlementCurrencyCode) ? (_settlementCurriencie3 = settlementCurriencies) === null || _settlementCurriencie3 === void 0 ? void 0 : _settlementCurriencie3.find(function (currency) {\n      return currency.currencyCd === (allClaimDetails === null || allClaimDetails === void 0 ? void 0 : allClaimDetails.settlementCurrencyCode);\n    }) : null,\n    validation: (isFormsEdited === null || isFormsEdited === void 0 ? void 0 : (_isFormsEdited$index6 = isFormsEdited[index]) === null || _isFormsEdited$index6 === void 0 ? void 0 : _isFormsEdited$index6.formEditedStatus) ? Yup.object().nullable().required(utils.string.t('validation.required')) : false\n  }, {\n    name: 'interest',\n    type: 'autocompletemui',\n    options: interest,\n    label: utils.string.t('claims.claimInformation.interest'),\n    value: (linkPoliciesData === null || linkPoliciesData === void 0 ? void 0 : (_linkPoliciesData$dat6 = linkPoliciesData.data) === null || _linkPoliciesData$dat6 === void 0 ? void 0 : _linkPoliciesData$dat6.interest) && !(linkPoliciesData === null || linkPoliciesData === void 0 ? void 0 : linkPoliciesData.fieldLoader) ? (_interest2 = interest) === null || _interest2 === void 0 ? void 0 : _interest2.find(function (intrst) {\n      return intrst.xbPolicyID === linkPoliciesData.data.interest.xbPolicyID;\n    }) : ((_interest3 = interest) === null || _interest3 === void 0 ? void 0 : _interest3.length) === 1 ? interest[0] : null,\n    optionKey: 'xbPolicyID',\n    optionLabel: 'description' //validation: Yup.object().nullable(),\n\n  }, {\n    name: 'movementType',\n    type: 'toggle',\n    label: '',\n    value: 'Advice',\n    options: [{\n      label: utils.string.t('claims.typeOfSettlement.advice'),\n      value: 'Advice'\n    }, {\n      label: utils.string.t('claims.typeOfSettlement.settlement'),\n      value: 'Settlement'\n    }]\n  }, {\n    name: 'order',\n    type: 'radio',\n    defaultValue: '100',\n    muiFormGroupProps: {\n      row: true,\n      classes: {\n        root: classes.radioLabel\n      }\n    },\n    options: [{\n      label: utils.string.t('claims.typeOfSettlement.oneHundredPercent'),\n      value: '100'\n    }, {\n      label: utils.string.t('claims.typeOfSettlement.ourShare'),\n      value: '0'\n    }]\n  }, {\n    name: 'orderPercentage',\n    type: 'number',\n    defaultValue: underWritingGroups.percentageOfSelected || '0',\n    value: underWritingGroups.percentageOfSelected || '0',\n    muiComponentProps: {\n      disabled: true\n    },\n    validation: Yup.number().min(0, utils.string.t('claims.typeOfSettlement.errorMin')).max(100, utils.string.t('claims.typeOfSettlement.error'))\n  }].concat(_toConsumableArray(isBordereauFlag ? [{\n    name: 'certificateNumber',\n    type: 'text',\n    value: (allClaimDetails === null || allClaimDetails === void 0 ? void 0 : allClaimDetails.certificateNumber) || (linkPoliciesData === null || linkPoliciesData === void 0 ? void 0 : (_linkPoliciesData$dat7 = linkPoliciesData.data) === null || _linkPoliciesData$dat7 === void 0 ? void 0 : _linkPoliciesData$dat7.certificateNumber) || '',\n    muiComponentProps: {\n      classes: {\n        root: classes.formInput\n      }\n    },\n    validation: (isFormsEdited === null || isFormsEdited === void 0 ? void 0 : (_isFormsEdited$index7 = isFormsEdited[index]) === null || _isFormsEdited$index7 === void 0 ? void 0 : _isFormsEdited$index7.formEditedStatus) ? Yup.string().nullable().required(utils.string.t('validation.required')).max(17, utils.string.t('claims.claimInformation.validation.maxCerficateNumber')).when('$validation', function (validation, schema) {\n      return validation ? schema : Yup.string();\n    }) : false\n  }, {\n    type: 'datepicker',\n    name: 'certificateInceptionDate',\n    value: policyInformation.inceptionDate,\n    //allClaimDetails?.certificateInceptionDate || linkPoliciesData?.data?.certificateInceptionDate || null,\n    muiComponentProps: {\n      fullWidth: true,\n      classes: {\n        root: classes.datepicker\n      }\n    },\n    validation: Yup.date().nullable().required(utils.string.t('validation.required')).test('from', utils.string.t('claims.claimInformation.validation.greaterThenExpDate'), function (value) {\n      return value && this.options.parent.certificateExpiryDate ? moment(value).isSameOrBefore(this.options.parent.certificateExpiryDate) : true;\n    }).when('$validation', function (validation, schema) {\n      return validation ? schema : Yup.date().nullable();\n    }),\n    outputFormat: 'iso'\n  }, {\n    type: 'datepicker',\n    name: 'certificateExpiryDate',\n    value: policyInformation.expiryDate,\n    //allClaimDetails?.certificateExpiryDate || linkPoliciesData?.data?.certificateExpiryDate || null,\n    muiComponentProps: {\n      fullWidth: true,\n      classes: {\n        root: classes.datepicker\n      }\n    },\n    validation: Yup.date().nullable().required(utils.string.t('validation.required')).test('from', utils.string.t('claims.claimInformation.validation.lesserThenIncDate'), function (value) {\n      return value && this.options.parent.certificateInceptionDate ? moment(value).isSameOrAfter(this.options.parent.certificateInceptionDate) : true;\n    }).when('$validation', function (validation, schema) {\n      return validation ? schema : Yup.date().nullable();\n    }),\n    outputFormat: 'iso'\n  }] : []), _toConsumableArray(isSectionEnabled ? [{\n    name: 'ugSections',\n    type: 'autocompletemui',\n    value: (linkPoliciesData === null || linkPoliciesData === void 0 ? void 0 : (_linkPoliciesData$dat8 = linkPoliciesData.data) === null || _linkPoliciesData$dat8 === void 0 ? void 0 : _linkPoliciesData$dat8.ugSections) || null,\n    options: policyInfo,\n    optionKey: 'id',\n    optionLabel: 'name',\n    validation: sectionEnabledValidationFlag ? Yup.object().nullable().required(utils.string.t('validation.required')).when('$validation', function (validation, schema) {\n      return validation ? schema : Yup.object().nullable();\n    }) : false\n  }] : []));\n\n  if (isPoliciesClientsLoading || isInterestLoading || isPolicySectionLoading || isInsuredLoading) {\n    return /*#__PURE__*/_jsxDEV(FormGrid, {\n      container: true,\n      spacing: 4,\n      children: _toConsumableArray(new Array(2)).map(function (item, index) {\n        return /*#__PURE__*/_jsxDEV(Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(FormGrid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Skeleton, {\n              height: 30,\n              width: 100\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 449,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(FormGrid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(FormGrid, {\n              container: true,\n              spacing: 4,\n              children: [/*#__PURE__*/_jsxDEV(FormGrid, {\n                item: true,\n                xs: 12,\n                md: 4,\n                children: [/*#__PURE__*/_jsxDEV(Skeleton, {\n                  height: 16\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 454,\n                  columnNumber: 19\n                }, _this), /*#__PURE__*/_jsxDEV(Skeleton, {\n                  height: 30,\n                  variant: \"rect\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 455,\n                  columnNumber: 19\n                }, _this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 453,\n                columnNumber: 17\n              }, _this), /*#__PURE__*/_jsxDEV(FormGrid, {\n                item: true,\n                xs: 12,\n                md: 4,\n                children: [/*#__PURE__*/_jsxDEV(Skeleton, {\n                  height: 16\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 458,\n                  columnNumber: 19\n                }, _this), /*#__PURE__*/_jsxDEV(Skeleton, {\n                  height: 30,\n                  variant: \"rect\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 459,\n                  columnNumber: 19\n                }, _this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 457,\n                columnNumber: 17\n              }, _this), /*#__PURE__*/_jsxDEV(FormGrid, {\n                item: true,\n                xs: 12,\n                md: 4,\n                children: [/*#__PURE__*/_jsxDEV(Skeleton, {\n                  height: 16\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 462,\n                  columnNumber: 19\n                }, _this), /*#__PURE__*/_jsxDEV(Skeleton, {\n                  height: 30,\n                  variant: \"rect\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 463,\n                  columnNumber: 19\n                }, _this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 461,\n                columnNumber: 17\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 452,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 13\n          }, _this)]\n        }, \"skeleton-\".concat(index), true, {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 11\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 7\n    }, this);\n  }\n\n  return (linkPoliciesData === null || linkPoliciesData === void 0 ? void 0 : linkPoliciesData.searchBy) !== '' && (linkPoliciesData === null || linkPoliciesData === void 0 ? void 0 : linkPoliciesData.searchTerm) !== '' && (linkPoliciesData === null || linkPoliciesData === void 0 ? void 0 : linkPoliciesData.loader) && /*#__PURE__*/_jsxDEV(LinkClaimPolicyView, {\n    fields: fields,\n    policyData: policyData,\n    claimPolicyInsures: claimPolicyInsures,\n    interest: interest,\n    uwResetKey: uwResetKey,\n    hasClaimRef: false,\n    underWritingGroups: underWritingGroups,\n    claimPolicyClients: claimPolicyClients,\n    isBordereauFlag: isBordereauFlag,\n    validation: validation,\n    setValidation: setValidation,\n    index: index,\n    setActiveStep: setActiveStep,\n    isFormsEdited: isFormsEdited,\n    setFormEditedStatus: setFormEditedStatus,\n    postSaveHandler: postSaveHandler,\n    postEditSaveHandler: postEditSaveHandler,\n    saveStatus: saveStatus,\n    selectedPolicyRender: selectedPolicyRender,\n    handleFormStatus: handleFormStatus,\n    stepper: stepper,\n    setStepper: setStepper,\n    selectNextPolicy: selectNextPolicy,\n    postSaveNextHanlder: postSaveNextHanlder,\n    fieldsLoader: {\n      isPoliciesClientsLoading: isPoliciesClientsLoading,\n      isInterestLoading: isInterestLoading,\n      isPolicySectionLoading: isPolicySectionLoading,\n      isInsuredLoading: isInsuredLoading\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 477,\n    columnNumber: 7\n  }, this);\n}\n\n_s(SelectedClaimPolicy, \"vP+gajy78SZFSY9TnX8fIcVHfy8=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = SelectedClaimPolicy;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectedClaimPolicy\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/LinkClaimPolicy/LinkClaimPolicy.js"],"names":["React","Fragment","useState","useEffect","useDispatch","useSelector","Yup","moment","get","LinkClaimPolicyView","styles","FormGrid","getInterest","getClaimDetails","getPolicyInsures","getPolicyClients","getPolicySections","selectClaimsPolicySections","selectClaimsInterestItems","selectClaimPolicyInsures","selectSectionEnabledUG","selectClaimsUnderwritingGroups","selectClaimPolicyClients","selectAllClaimDetails","postClaimDetailsInformation","postEditClaimDetailsInformation","selectLinkPoliciesData","getLinkPoliciesData","selectRefDataNewCountriesList","selectClaimsInterest","selectIsClaimPolicyClientsLoading","selectPolicySectionIsLoading","selectisClaimPolicyInsuresLoading","selectClaimsPolicyInformation","selectClaimsPolicyData","utils","CLAIM_SECTION_ENABLED_UG","CLAIM_POLICY_SECTION_DEFAULT","Skeleton","makeStyles","SelectedClaimPolicy","policyData","selectedPolicyRender","setSelectedPolicyRender","validation","setValidation","setActiveStep","index","isFormsEdited","setFormEditedStatus","saveStatus","sectionEnabledValidationFlag","claimInfo","handleFormStatus","selectNextPolicy","setSelectNextPolicy","classes","name","uwResetKey","setUWResetKey","stepper","setStepper","dispatch","interest","generic","isValidArray","map","intrst","description","code","origCurrencies","state","allSettlementCurriencies","settlementCurriencies","referenceData","settlementCurrencyTypes","getAllById","xbInstanceID","currency","currencyName","currencyCd","allClaimDetails","underWritingGroups","policySections","claimPolicyInsures","isSectionEnabled","claimPolicyClients","isInterestLoading","isLoading","isPoliciesClientsLoading","isPolicySectionLoading","isInsuredLoading","policyInformation","countriesList","country","countryName","countryCode","linkPoliciesData","isBordereauFlag","isBordereau","viewLoader","then","response","loader","fieldLoader","Date","getTime","console","log","sectionAllOption","policyType","id","string","t","policyInfo","postSaveHandler","postData","claimID","data","formState","form","postEditSaveHandler","dms","resetDmsFiles","postSaveNextHanlder","policyUpdated","formEditedStatus","expiryDate","inceptionDate","fields","type","options","optionKey","optionLabel","label","value","insured","find","clmPolicy","length","object","nullable","required","when","schema","client","clmPolicyclnt","originalCurrencyCode","settlementCurrencyCode","xbPolicyID","defaultValue","muiFormGroupProps","row","root","radioLabel","percentageOfSelected","muiComponentProps","disabled","number","min","max","certificateNumber","formInput","fullWidth","datepicker","date","test","parent","certificateExpiryDate","isSameOrBefore","outputFormat","certificateInceptionDate","isSameOrAfter","ugSections","Array","item","searchBy","searchTerm"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport * as Yup from 'yup';\r\nimport moment from 'moment';\r\nimport get from 'lodash/get';\r\n\r\n//app\r\nimport { LinkClaimPolicyView } from './LinkClaimPolicy.view';\r\nimport styles from './LinkClaimPolicy.styles';\r\nimport { FormGrid } from 'components';\r\nimport {\r\n  getInterest,\r\n  getClaimDetails,\r\n  getPolicyInsures,\r\n  getPolicyClients,\r\n  getPolicySections,\r\n  selectClaimsPolicySections,\r\n  selectClaimsInterestItems,\r\n  selectClaimPolicyInsures,\r\n  selectSectionEnabledUG,\r\n  selectClaimsUnderwritingGroups,\r\n  selectClaimPolicyClients,\r\n  selectAllClaimDetails,\r\n  postClaimDetailsInformation,\r\n  postEditClaimDetailsInformation,\r\n  selectLinkPoliciesData,\r\n  getLinkPoliciesData,\r\n  selectRefDataNewCountriesList,\r\n  selectClaimsInterest,\r\n  selectIsClaimPolicyClientsLoading,\r\n  selectPolicySectionIsLoading,\r\n  selectisClaimPolicyInsuresLoading,\r\n  selectClaimsPolicyInformation,\r\n  selectClaimsPolicyData,\r\n} from 'stores';\r\nimport * as utils from 'utils';\r\nimport { CLAIM_SECTION_ENABLED_UG, CLAIM_POLICY_SECTION_DEFAULT } from 'consts';\r\n\r\n//mui\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nexport default function SelectedClaimPolicy({\r\n  policyData,\r\n  selectedPolicyRender,\r\n  setSelectedPolicyRender,\r\n  validation,\r\n  setValidation,\r\n  setActiveStep,\r\n  index,\r\n  isFormsEdited,\r\n  setFormEditedStatus,\r\n  saveStatus,\r\n  sectionEnabledValidationFlag,\r\n  claimInfo,\r\n  handleFormStatus,\r\n  selectNextPolicy,\r\n  setSelectNextPolicy,\r\n}) {\r\n  const classes = makeStyles(styles, { name: 'LinkClaimPolicy' })();\r\n  const [uwResetKey, setUWResetKey] = useState();\r\n  const [stepper, setStepper] = useState(false);\r\n  const dispatch = useDispatch();\r\n  let interest = useSelector(selectClaimsInterestItems);\r\n  interest = utils.generic.isValidArray(interest)\r\n    ? interest?.map((intrst) => ({ ...intrst, description: `${intrst.code} - ${intrst.description}` }))\r\n    : null;\r\n  let origCurrencies = useSelector((state) => get(state, 'referenceData.currencyCodes'));\r\n  let allSettlementCurriencies = useSelector((state) => get(state, 'referenceData.settlementCurrency'));\r\n  let settlementCurriencies = utils.referenceData.settlementCurrencyTypes.getAllById(allSettlementCurriencies, policyData?.xbInstanceID);\r\n  origCurrencies = utils.generic.isValidArray(origCurrencies)\r\n    ? origCurrencies?.map((currency) => ({ ...currency, currencyName: `${currency.currencyCd} - ${currency.currencyName}` }))\r\n    : null;\r\n  settlementCurriencies = utils.generic.isValidArray(settlementCurriencies)\r\n    ? settlementCurriencies?.map((currency) => ({ ...currency, currencyName: `${currency.currencyCd} - ${currency.currencyName}` }))\r\n    : null;\r\n  const allClaimDetails = useSelector(selectAllClaimDetails);\r\n  const underWritingGroups = useSelector(selectClaimsUnderwritingGroups);\r\n  const policySections = useSelector(selectClaimsPolicySections);\r\n  const claimPolicyInsures = useSelector(selectClaimPolicyInsures);\r\n  const isSectionEnabled = useSelector(selectSectionEnabledUG);\r\n  const claimPolicyClients = useSelector(selectClaimPolicyClients);\r\n  const isInterestLoading = useSelector(selectClaimsInterest)?.isLoading;\r\n  const isPoliciesClientsLoading = useSelector(selectIsClaimPolicyClientsLoading);\r\n  const isPolicySectionLoading = useSelector(selectPolicySectionIsLoading);\r\n  const isInsuredLoading = useSelector(selectisClaimPolicyInsuresLoading);\r\n  const policyInformation = useSelector(selectClaimsPolicyData);\r\n  let countriesList = useSelector(selectRefDataNewCountriesList);\r\n  countriesList = utils.generic.isValidArray(countriesList)\r\n    ? countriesList?.map((country) => ({ ...country, countryName: `${country.countryCode} - ${country.countryName}` }))\r\n    : null;\r\n  const linkPoliciesData = useSelector(selectLinkPoliciesData);\r\n  const isBordereauFlag = allClaimDetails?.isBordereau === 1;\r\n\r\n  useEffect(() => {\r\n    if (selectedPolicyRender !== '') {\r\n      dispatch(getInterest({ viewLoader: false }));\r\n      dispatch(getPolicyInsures({ viewLoader: false }));\r\n      isSectionEnabled && dispatch(getPolicySections({ viewLoader: false }));\r\n      dispatch(getPolicyClients({ viewLoader: false })).then((response) => {\r\n        if (utils.generic.isValidArray(response)) {\r\n          dispatch(getLinkPoliciesData({ loader: true, fieldLoader: false }));\r\n          setUWResetKey(new Date().getTime());\r\n          console.log('currentData', setUWResetKey(new Date().getTime()));\r\n        }\r\n      });\r\n      dispatch(getClaimDetails());\r\n    }\r\n  }, [selectedPolicyRender]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const sectionAllOption =\r\n    policyData?.policyType === CLAIM_SECTION_ENABLED_UG[0]\r\n      ? []\r\n      : [{ id: CLAIM_POLICY_SECTION_DEFAULT, name: utils.string.t('app.all'), description: null }];\r\n\r\n  const policyInfo = [...sectionAllOption, ...(utils.generic.isValidArray(policySections, true) ? policySections : [])];\r\n\r\n  const postSaveHandler = (postData) => {\r\n    if (!claimInfo?.claimID) {\r\n      dispatch(postClaimDetailsInformation(postData)).then((response) => {\r\n        if (response) {\r\n          dispatch(getLinkPoliciesData({ data: postData }));\r\n          const formState = isFormsEdited?.map((form) => ({ ...form }));\r\n          formState[index]['formEditedStatus'] = false;\r\n          formState[index]['isSubmitted'] = false;\r\n          setFormEditedStatus(formState);\r\n          setValidation(false);\r\n        }\r\n      });\r\n    } else {\r\n      dispatch(postEditClaimDetailsInformation(postData)).then((response) => {\r\n        if (response) {\r\n          dispatch(getLinkPoliciesData({ data: postData }));\r\n          const formState = isFormsEdited?.map((form) => ({ ...form }));\r\n          formState[index]['formEditedStatus'] = false;\r\n          formState[index]['isSubmitted'] = false;\r\n          setFormEditedStatus(formState);\r\n          setValidation(false);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const postEditSaveHandler = (postData) => {\r\n    utils.dms.resetDmsFiles(dispatch);\r\n    if (claimInfo?.claimID) {\r\n      dispatch(postEditClaimDetailsInformation(postData)).then((response) => {\r\n        if (response) {\r\n          dispatch(getLinkPoliciesData({ data: postData }));\r\n          const formState = isFormsEdited?.map((form) => ({ ...form }));\r\n          formState[index]['formEditedStatus'] = false;\r\n          formState[index]['isSubmitted'] = true;\r\n          setFormEditedStatus(formState);\r\n          setActiveStep(index + 1);\r\n          setValidation(true);\r\n          setSelectedPolicyRender('');\r\n        }\r\n      });\r\n    } else {\r\n      dispatch(postClaimDetailsInformation(postData)).then((response) => {\r\n        if (response) {\r\n          dispatch(getLinkPoliciesData({ data: postData }));\r\n          const formState = isFormsEdited?.map((form) => ({ ...form }));\r\n          formState[index]['formEditedStatus'] = false;\r\n          formState[index]['isSubmitted'] = true;\r\n          setFormEditedStatus(formState);\r\n          setActiveStep(index + 1);\r\n          setValidation(true);\r\n          setSelectedPolicyRender('');\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const postSaveNextHanlder = (postData) => {\r\n    if (claimInfo?.claimID) {\r\n      const policyUpdated = true;\r\n      dispatch(postEditClaimDetailsInformation(postData, policyUpdated)).then((response) => {\r\n        if (response) {\r\n          dispatch(getLinkPoliciesData({ data: postData }));\r\n          const formState = isFormsEdited?.map((form) => ({ ...form }));\r\n          if (isFormsEdited[index]?.formEditedStatus) {\r\n            formState[index]['formEditedStatus'] = false;\r\n            formState[index]['isSubmitted'] = false;\r\n            setFormEditedStatus(formState);\r\n            setActiveStep(index + 1);\r\n            setValidation(true);\r\n            setSelectNextPolicy(false);\r\n          } else {\r\n            formState[index]['formEditedStatus'] = false;\r\n            formState[index]['isSubmitted'] = true;\r\n            setFormEditedStatus(formState);\r\n            setValidation(true);\r\n            setSelectedPolicyRender('');\r\n            setSelectNextPolicy(false);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  //console.log('policyInformation ', policyInformation);\r\n  console.log('policyInformation.expiryDate', policyInformation.expiryDate);\r\n  console.log('policyInformation.inceptionDate', policyInformation.inceptionDate);\r\n  //\r\n  //  console.log('allClaimDetails?.certificateInceptionDate ', allClaimDetails?.certificateInceptionDate);\r\n  //  console.log('allClaimDetails?.certificateExpiryDate ', allClaimDetails?.certificateExpiryDate);\r\n\r\n  const fields = [\r\n    {\r\n      name: 'insured',\r\n      type: 'autocompletemui',\r\n      options: claimPolicyInsures || [],\r\n      optionKey: 'id',\r\n      optionLabel: 'name',\r\n      label: utils.string.t('claims.claimInformation.insured'),\r\n      value:\r\n        linkPoliciesData?.data?.insured && !linkPoliciesData?.fieldLoader\r\n          ? claimPolicyInsures?.find((clmPolicy) => clmPolicy.id === linkPoliciesData.data.insured.id)\r\n          : claimPolicyInsures?.length === 1\r\n          ? claimPolicyInsures[0]\r\n          : null,\r\n      validation: isFormsEdited?.[index]?.formEditedStatus\r\n        ? Yup.object()\r\n            .nullable()\r\n            .required(utils.string.t('validation.required'))\r\n            .when('$validation', (validation, schema) => (validation ? schema : Yup.object().nullable()))\r\n        : false,\r\n    },\r\n    {\r\n      name: 'client',\r\n      type: 'autocompletemui',\r\n      options: claimPolicyClients || [],\r\n      optionKey: 'id',\r\n      optionLabel: 'name',\r\n      label: utils.string.t('claims.claimInformation.client'),\r\n      value:\r\n        linkPoliciesData?.data?.client && !linkPoliciesData?.fieldLoader\r\n          ? claimPolicyClients?.find((clmPolicyclnt) => clmPolicyclnt.id === linkPoliciesData.data.client.id)\r\n          : claimPolicyClients?.length === 1\r\n          ? claimPolicyClients[0]\r\n          : null,\r\n      validation: isFormsEdited?.[index]?.formEditedStatus\r\n        ? Yup.object()\r\n            .nullable()\r\n            .required(utils.string.t('validation.required'))\r\n            .when('$validation', (validation, schema) => (validation ? schema : Yup.object().nullable()))\r\n        : false,\r\n    },\r\n    {\r\n      name: 'countryCode',\r\n      type: 'autocompletemui',\r\n      options: countriesList || [],\r\n      optionKey: 'countryCode',\r\n      optionLabel: 'countryName',\r\n      label: utils.string.t('claims.claimInformation.country'),\r\n      value:\r\n        linkPoliciesData?.data?.countryCode && !linkPoliciesData?.fieldLoader\r\n          ? countriesList?.find((country) => country.countryCode === linkPoliciesData.data.countryCode.countryCode)\r\n          : null,\r\n      validation: isFormsEdited?.[index]?.formEditedStatus\r\n        ? Yup.object().nullable().required(utils.string.t('validation.required'))\r\n        : false,\r\n    },\r\n    {\r\n      name: 'originalCurrencyCode',\r\n      type: 'autocompletemui',\r\n      options: origCurrencies || [],\r\n      optionKey: 'currencyCd',\r\n      optionLabel: 'currencyName',\r\n      label: utils.string.t('claims.claimInformation.originalCurrency'),\r\n      value:\r\n        linkPoliciesData?.data?.originalCurrencyCode && !linkPoliciesData?.fieldLoader\r\n          ? origCurrencies?.find((currency) => currency.currencyCd === linkPoliciesData.data.originalCurrencyCode.currencyCd)\r\n          : null,\r\n      validation: isFormsEdited?.[index]?.formEditedStatus\r\n        ? Yup.object().nullable().required(utils.string.t('validation.required'))\r\n        : false,\r\n    },\r\n    {\r\n      name: 'settlementCurrencyCode',\r\n      type: 'autocompletemui',\r\n      options: settlementCurriencies || [],\r\n      optionKey: 'currencyCd',\r\n      optionLabel: 'currencyName',\r\n      label: utils.string.t('claims.claimInformation.settlementCurrency'),\r\n      value:\r\n        linkPoliciesData?.data?.originalCurrencyCode && !linkPoliciesData?.fieldLoader\r\n          ? settlementCurriencies?.find((currency) => currency.currencyCd === linkPoliciesData.data.settlementCurrencyCode.currencyCd)\r\n          : allClaimDetails?.settlementCurrencyCode\r\n          ? settlementCurriencies?.find((currency) => currency.currencyCd === allClaimDetails?.settlementCurrencyCode)\r\n          : null,\r\n      validation: isFormsEdited?.[index]?.formEditedStatus\r\n        ? Yup.object().nullable().required(utils.string.t('validation.required'))\r\n        : false,\r\n    },\r\n    {\r\n      name: 'interest',\r\n      type: 'autocompletemui',\r\n      options: interest,\r\n      label: utils.string.t('claims.claimInformation.interest'),\r\n      value:\r\n        linkPoliciesData?.data?.interest && !linkPoliciesData?.fieldLoader\r\n          ? interest?.find((intrst) => intrst.xbPolicyID === linkPoliciesData.data.interest.xbPolicyID)\r\n          : interest?.length === 1\r\n          ? interest[0]\r\n          : null,\r\n      optionKey: 'xbPolicyID',\r\n      optionLabel: 'description',\r\n      //validation: Yup.object().nullable(),\r\n    },\r\n    {\r\n      name: 'movementType',\r\n      type: 'toggle',\r\n      label: '',\r\n      value: 'Advice',\r\n      options: [\r\n        {\r\n          label: utils.string.t('claims.typeOfSettlement.advice'),\r\n          value: 'Advice',\r\n        },\r\n        {\r\n          label: utils.string.t('claims.typeOfSettlement.settlement'),\r\n          value: 'Settlement',\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      name: 'order',\r\n      type: 'radio',\r\n      defaultValue: '100',\r\n      muiFormGroupProps: {\r\n        row: true,\r\n        classes: {\r\n          root: classes.radioLabel,\r\n        },\r\n      },\r\n      options: [\r\n        {\r\n          label: utils.string.t('claims.typeOfSettlement.oneHundredPercent'),\r\n          value: '100',\r\n        },\r\n        {\r\n          label: utils.string.t('claims.typeOfSettlement.ourShare'),\r\n          value: '0',\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      name: 'orderPercentage',\r\n      type: 'number',\r\n      defaultValue: underWritingGroups.percentageOfSelected || '0',\r\n      value: underWritingGroups.percentageOfSelected || '0',\r\n      muiComponentProps: {\r\n        disabled: true,\r\n      },\r\n      validation: Yup.number()\r\n        .min(0, utils.string.t('claims.typeOfSettlement.errorMin'))\r\n        .max(100, utils.string.t('claims.typeOfSettlement.error')),\r\n    },\r\n    ...(isBordereauFlag\r\n      ? [\r\n          {\r\n            name: 'certificateNumber',\r\n            type: 'text',\r\n            value: allClaimDetails?.certificateNumber || linkPoliciesData?.data?.certificateNumber || '',\r\n            muiComponentProps: {\r\n              classes: {\r\n                root: classes.formInput,\r\n              },\r\n            },\r\n            validation: isFormsEdited?.[index]?.formEditedStatus\r\n              ? Yup.string()\r\n                  .nullable()\r\n                  .required(utils.string.t('validation.required'))\r\n                  .max(17, utils.string.t('claims.claimInformation.validation.maxCerficateNumber'))\r\n                  .when('$validation', (validation, schema) => (validation ? schema : Yup.string()))\r\n              : false,\r\n          },\r\n          {\r\n            type: 'datepicker',\r\n            name: 'certificateInceptionDate',\r\n            value: policyInformation.inceptionDate, //allClaimDetails?.certificateInceptionDate || linkPoliciesData?.data?.certificateInceptionDate || null,\r\n            muiComponentProps: {\r\n              fullWidth: true,\r\n              classes: {\r\n                root: classes.datepicker,\r\n              },\r\n            },\r\n            validation: Yup.date()\r\n              .nullable()\r\n              .required(utils.string.t('validation.required'))\r\n              .test('from', utils.string.t('claims.claimInformation.validation.greaterThenExpDate'), function (value) {\r\n                return value && this.options.parent.certificateExpiryDate\r\n                  ? moment(value).isSameOrBefore(this.options.parent.certificateExpiryDate)\r\n                  : true;\r\n              })\r\n              .when('$validation', (validation, schema) => (validation ? schema : Yup.date().nullable())),\r\n            outputFormat: 'iso',\r\n          },\r\n          {\r\n            type: 'datepicker',\r\n            name: 'certificateExpiryDate',\r\n            value: policyInformation.expiryDate, //allClaimDetails?.certificateExpiryDate || linkPoliciesData?.data?.certificateExpiryDate || null,\r\n            muiComponentProps: {\r\n              fullWidth: true,\r\n              classes: {\r\n                root: classes.datepicker,\r\n              },\r\n            },\r\n            validation: Yup.date()\r\n              .nullable()\r\n              .required(utils.string.t('validation.required'))\r\n              .test('from', utils.string.t('claims.claimInformation.validation.lesserThenIncDate'), function (value) {\r\n                return value && this.options.parent.certificateInceptionDate\r\n                  ? moment(value).isSameOrAfter(this.options.parent.certificateInceptionDate)\r\n                  : true;\r\n              })\r\n              .when('$validation', (validation, schema) => (validation ? schema : Yup.date().nullable())),\r\n            outputFormat: 'iso',\r\n          },\r\n        ]\r\n      : []),\r\n    ...(isSectionEnabled\r\n      ? [\r\n          {\r\n            name: 'ugSections',\r\n            type: 'autocompletemui',\r\n            value: linkPoliciesData?.data?.ugSections || null,\r\n            options: policyInfo,\r\n            optionKey: 'id',\r\n            optionLabel: 'name',\r\n            validation: sectionEnabledValidationFlag\r\n              ? Yup.object()\r\n                  .nullable()\r\n                  .required(utils.string.t('validation.required'))\r\n                  .when('$validation', (validation, schema) => (validation ? schema : Yup.object().nullable()))\r\n              : false,\r\n          },\r\n        ]\r\n      : []),\r\n  ];\r\n  if (isPoliciesClientsLoading || isInterestLoading || isPolicySectionLoading || isInsuredLoading) {\r\n    return (\r\n      <FormGrid container spacing={4}>\r\n        {[...new Array(2)].map((item, index) => (\r\n          <Fragment key={`skeleton-${index}`}>\r\n            <FormGrid item xs={12}>\r\n              <Skeleton height={30} width={100} />\r\n            </FormGrid>\r\n            <FormGrid item xs={12}>\r\n              <FormGrid container spacing={4}>\r\n                <FormGrid item xs={12} md={4}>\r\n                  <Skeleton height={16} />\r\n                  <Skeleton height={30} variant=\"rect\" />\r\n                </FormGrid>\r\n                <FormGrid item xs={12} md={4}>\r\n                  <Skeleton height={16} />\r\n                  <Skeleton height={30} variant=\"rect\" />\r\n                </FormGrid>\r\n                <FormGrid item xs={12} md={4}>\r\n                  <Skeleton height={16} />\r\n                  <Skeleton height={30} variant=\"rect\" />\r\n                </FormGrid>\r\n              </FormGrid>\r\n            </FormGrid>\r\n          </Fragment>\r\n        ))}\r\n      </FormGrid>\r\n    );\r\n  }\r\n\r\n  return (\r\n    linkPoliciesData?.searchBy !== '' &&\r\n    linkPoliciesData?.searchTerm !== '' &&\r\n    linkPoliciesData?.loader && (\r\n      <LinkClaimPolicyView\r\n        fields={fields}\r\n        policyData={policyData}\r\n        claimPolicyInsures={claimPolicyInsures}\r\n        interest={interest}\r\n        uwResetKey={uwResetKey}\r\n        hasClaimRef={false}\r\n        underWritingGroups={underWritingGroups}\r\n        claimPolicyClients={claimPolicyClients}\r\n        isBordereauFlag={isBordereauFlag}\r\n        validation={validation}\r\n        setValidation={setValidation}\r\n        index={index}\r\n        setActiveStep={setActiveStep}\r\n        isFormsEdited={isFormsEdited}\r\n        setFormEditedStatus={setFormEditedStatus}\r\n        postSaveHandler={postSaveHandler}\r\n        postEditSaveHandler={postEditSaveHandler}\r\n        saveStatus={saveStatus}\r\n        selectedPolicyRender={selectedPolicyRender}\r\n        handleFormStatus={handleFormStatus}\r\n        stepper={stepper}\r\n        setStepper={setStepper}\r\n        selectNextPolicy={selectNextPolicy}\r\n        postSaveNextHanlder={postSaveNextHanlder}\r\n        fieldsLoader={{\r\n          isPoliciesClientsLoading: isPoliciesClientsLoading,\r\n          isInterestLoading: isInterestLoading,\r\n          isPolicySectionLoading: isPolicySectionLoading,\r\n          isInsuredLoading: isInsuredLoading,\r\n        }}\r\n      />\r\n    )\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}