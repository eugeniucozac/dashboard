{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\components\\\\LazyLoadingList\\\\LazyLoadingList.view.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup'; // app\n\nimport styles from './LazyLoadingList.styles';\nimport * as utils from 'utils';\nimport { Button, FormContainer, FormText, Warning } from 'components'; // mui\n\nimport { Box, Checkbox, Collapse, Fade, InputAdornment, List, ListItem, ListItemIcon, ListItemText, makeStyles } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport SearchIcon from '@material-ui/icons/Search';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nLazyLoadingListView.propTypes = {\n  field: PropTypes.object.isRequired,\n  query: PropTypes.string,\n  isSearch: PropTypes.bool,\n  options: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n    name: PropTypes.string.isRequired\n  })).isRequired,\n  height: PropTypes.number,\n  selectedItems: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n    name: PropTypes.string.isRequired\n  })).isRequired,\n  max: PropTypes.number,\n  labels: PropTypes.shape({\n    maxReached: PropTypes.string\n  }),\n  isDataLoading: PropTypes.bool,\n  isDataLoadingError: PropTypes.bool,\n  handlers: PropTypes.shape({\n    onClear: PropTypes.func.isRequired,\n    onToggleOption: PropTypes.func.isRequired\n  })\n};\nexport function LazyLoadingListView(_ref) {\n  _s();\n\n  var _this = this;\n\n  var id = _ref.id,\n      field = _ref.field,\n      query = _ref.query,\n      options = _ref.options,\n      selectedItems = _ref.selectedItems,\n      max = _ref.max,\n      labels = _ref.labels,\n      lastElementReference = _ref.lastElementReference,\n      isSearch = _ref.isSearch,\n      isDataLoading = _ref.isDataLoading,\n      isDataLoadingError = _ref.isDataLoadingError,\n      handlers = _ref.handlers;\n  var classes = makeStyles(styles, {\n    name: 'LazyLoadingList'\n  })();\n  var validationSchema = utils.form.getValidationSchema([field]);\n\n  var _useForm = useForm(_objectSpread({}, validationSchema && {\n    resolver: yupResolver(validationSchema)\n  })),\n      control = _useForm.control,\n      reset = _useForm.reset,\n      handleSubmit = _useForm.handleSubmit;\n\n  var ClearBtn = /*#__PURE__*/_jsxDEV(Button, {\n    size: \"small\",\n    variant: \"text\",\n    icon: CloseIcon,\n    onClick: handlers.onClear(reset),\n    nestedClasses: {\n      btn: classes.clearBtn\n    },\n    \"data-testid\": \"lazy-select-clear-\".concat(id)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n\n  var valuesIds = utils.generic.isValidArray(selectedItems, true) && selectedItems.map(function (v) {\n    return v.id;\n  }) || [];\n  var isMaxReached = Boolean(max && (selectedItems === null || selectedItems === void 0 ? void 0 : selectedItems.length) >= max);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: classes.root,\n    width: '100%',\n    children: [!utils.generic.isValidArray(options) && /*#__PURE__*/_jsxDEV(Box, {\n      className: classes.linearProgressSection,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        className: classes.loadingListItem,\n        children: utils.string.t('app.noDataDisplay')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }, this), isSearch && /*#__PURE__*/_jsxDEV(FormContainer, {\n      onSubmit: handleSubmit(handlers.onSearch),\n      nestedClasses: {\n        root: classes.form\n      },\n      children: /*#__PURE__*/_jsxDEV(FormText, _objectSpread(_objectSpread({}, field), {}, {\n        control: control,\n        muiComponentProps: _objectSpread(_objectSpread({}, field.muiComponentProps), {}, {\n          classes: {\n            root: classes.input\n          },\n          InputProps: {\n            startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n              position: \"start\",\n              classes: {\n                root: classes.adornmentStart\n              },\n              children: /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 37\n            }, this),\n            endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n              position: \"end\",\n              classes: {\n                root: classes.adornmentEnd\n              },\n              children: query ? ClearBtn : /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 61\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 37\n            }, this)\n          }\n        })\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }, this), Boolean(max) && /*#__PURE__*/_jsxDEV(Collapse, {\n      in: isMaxReached,\n      children: /*#__PURE__*/_jsxDEV(Fade, {\n        in: isMaxReached,\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          mt: 1,\n          mb: 1,\n          children: /*#__PURE__*/_jsxDEV(Warning, {\n            type: \"info\",\n            icon: true,\n            text: labels.maxReached || utils.string.t('filters.multiSelect.maxReached', {\n              max: max\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      dense: true,\n      className: classes.list,\n      children: [utils.generic.isValidArray(options, true) && (options === null || options === void 0 ? void 0 : options.map(function (option, index) {\n        var labelId = \"multi-select-checkbox-list-label-\".concat(option.id);\n        var isSelected = valuesIds.includes(option.id);\n\n        if (options.length === index + 1) {\n          return /*#__PURE__*/_jsxDEV(ListItem, {\n            button: true,\n            onClick: function onClick() {\n              handlers.onToggleOption(option);\n            },\n            disabled: isMaxReached && !isSelected,\n            classes: {\n              root: classes.listItem\n            },\n            ref: lastElementReference,\n            children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n              classes: {\n                root: classes.listItemIcon\n              },\n              children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                checked: isSelected,\n                color: \"primary\",\n                tabIndex: -1,\n                disableRipple: true,\n                disabled: isMaxReached && !isSelected,\n                inputProps: {\n                  'aria-labelledby': labelId\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 37\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 33\n            }, _this), /*#__PURE__*/_jsxDEV(ListItemText, {\n              id: labelId,\n              primary: option.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 33\n            }, _this)]\n          }, option.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 29\n          }, _this);\n        } else {\n          return /*#__PURE__*/_jsxDEV(ListItem, {\n            button: true,\n            onClick: function onClick() {\n              handlers.onToggleOption(option);\n            },\n            disabled: isMaxReached && !isSelected,\n            classes: {\n              root: classes.listItem\n            },\n            children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n              classes: {\n                root: classes.listItemIcon\n              },\n              children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                checked: isSelected,\n                color: \"primary\",\n                tabIndex: -1,\n                disableRipple: true,\n                disabled: isMaxReached && !isSelected,\n                inputProps: {\n                  'aria-labelledby': labelId\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 33\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 29\n            }, _this), /*#__PURE__*/_jsxDEV(ListItemText, {\n              id: labelId,\n              primary: option.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 29\n            }, _this)]\n          }, option.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 33\n          }, _this);\n        }\n      })), isDataLoading && /*#__PURE__*/_jsxDEV(Box, {\n        className: classes.linearProgressSection,\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          className: classes.loadingListItem,\n          children: utils.string.t('app.loading')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(LinearProgress, {\n          color: \"secondary\",\n          className: classes.linearProgress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 21\n      }, this), isDataLoadingError && /*#__PURE__*/_jsxDEV(ListItem, {\n        classes: {\n          root: classes.listItem\n        },\n        button: true,\n        children: /*#__PURE__*/_jsxDEV(ListItemText, {\n          button: true,\n          id: 'error',\n          primary: 'Error'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n}\n\n_s(LazyLoadingListView, \"+CUrQEjn3dm1598y2Y/Mnk6iMhI=\", false, function () {\n  return [useForm];\n});\n\n_c = LazyLoadingListView;\n\nvar _c;\n\n$RefreshReg$(_c, \"LazyLoadingListView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/LazyLoadingList/LazyLoadingList.view.js"],"names":["React","PropTypes","classnames","useForm","yupResolver","styles","utils","Button","FormContainer","FormText","Warning","Box","Checkbox","Collapse","Fade","InputAdornment","List","ListItem","ListItemIcon","ListItemText","makeStyles","CloseIcon","SearchIcon","LinearProgress","LazyLoadingListView","propTypes","field","object","isRequired","query","string","isSearch","bool","options","arrayOf","shape","id","oneOfType","number","name","height","selectedItems","max","labels","maxReached","isDataLoading","isDataLoadingError","handlers","onClear","func","onToggleOption","lastElementReference","classes","validationSchema","form","getValidationSchema","resolver","control","reset","handleSubmit","ClearBtn","btn","clearBtn","valuesIds","generic","isValidArray","map","v","isMaxReached","Boolean","length","root","linearProgressSection","loadingListItem","t","onSearch","muiComponentProps","input","InputProps","startAdornment","adornmentStart","endAdornment","adornmentEnd","list","option","index","labelId","isSelected","includes","listItem","listItemIcon","linearProgress"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n\r\n// app\r\nimport styles from './LazyLoadingList.styles';\r\nimport * as utils from 'utils';\r\nimport { Button, FormContainer, FormText, Warning } from 'components';\r\n\r\n// mui\r\nimport { Box, Checkbox, Collapse, Fade, InputAdornment, List, ListItem, ListItemIcon, ListItemText, makeStyles } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\nLazyLoadingListView.propTypes = {\r\n    field: PropTypes.object.isRequired,\r\n    query: PropTypes.string,\r\n    isSearch: PropTypes.bool,\r\n    options: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n            name: PropTypes.string.isRequired,\r\n        })\r\n    ).isRequired,\r\n    height: PropTypes.number,\r\n    selectedItems: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n            name: PropTypes.string.isRequired,\r\n        })\r\n    ).isRequired,\r\n    max: PropTypes.number,\r\n    labels: PropTypes.shape({\r\n        maxReached: PropTypes.string,\r\n    }),\r\n    isDataLoading: PropTypes.bool,\r\n    isDataLoadingError: PropTypes.bool,\r\n    handlers: PropTypes.shape({\r\n        onClear: PropTypes.func.isRequired,\r\n        onToggleOption: PropTypes.func.isRequired,\r\n    }),\r\n\r\n};\r\n\r\nexport function LazyLoadingListView({ id, field, query, options, selectedItems, max, labels, lastElementReference, isSearch, isDataLoading, isDataLoadingError, handlers }) {\r\n    const classes = makeStyles(styles, { name: 'LazyLoadingList' })();\r\n\r\n    const validationSchema = utils.form.getValidationSchema([field]);\r\n    const { control, reset, handleSubmit } = useForm({\r\n        ...(validationSchema && { resolver: yupResolver(validationSchema) }),\r\n    });\r\n\r\n    const ClearBtn = (\r\n        <Button\r\n            size=\"small\"\r\n            variant=\"text\"\r\n            icon={CloseIcon}\r\n            onClick={handlers.onClear(reset)}\r\n            nestedClasses={{ btn: classes.clearBtn }}\r\n            data-testid={`lazy-select-clear-${id}`}\r\n        />\r\n    );\r\n    const valuesIds = utils.generic.isValidArray(selectedItems, true) && selectedItems.map((v) => v.id) || [];\r\n    const isMaxReached = Boolean(max && selectedItems?.length >= max);\r\n\r\n    return (\r\n        <Box className={classes.root} width={'100%'}>\r\n            {!utils.generic.isValidArray(options) &&\r\n                <Box className={classes.linearProgressSection}>\r\n                    <Box className={classes.loadingListItem} >\r\n                        {utils.string.t('app.noDataDisplay')}\r\n                    </Box>\r\n                </Box>\r\n            }\r\n            {isSearch && (\r\n                <FormContainer\r\n                    onSubmit={handleSubmit(handlers.onSearch)}\r\n                    nestedClasses={{ root: classes.form }}\r\n                >\r\n                    <FormText\r\n                        {...field}\r\n                        control={control}\r\n                        muiComponentProps={{\r\n                            ...field.muiComponentProps,\r\n                            classes: {\r\n                                root: classes.input,\r\n                            },\r\n                            InputProps: {\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\" classes={{ root: classes.adornmentStart }}>\r\n                                        <SearchIcon />\r\n                                    </InputAdornment>\r\n                                ),\r\n                                endAdornment: (\r\n                                    <InputAdornment position=\"end\" classes={{ root: classes.adornmentEnd }}>\r\n                                        {query ? ClearBtn : <span />}\r\n                                    </InputAdornment>\r\n                                ),\r\n                            },\r\n                        }}\r\n                    />\r\n                </FormContainer>\r\n            )}\r\n            {Boolean(max) && (\r\n                <Collapse in={isMaxReached}>\r\n                    <Fade in={isMaxReached}>\r\n                        <Box mt={1} mb={1}>\r\n                            <Warning type=\"info\" icon text={labels.maxReached || utils.string.t('filters.multiSelect.maxReached', { max })} />\r\n                        </Box>\r\n                    </Fade>\r\n                </Collapse>\r\n            )}\r\n\r\n            <List dense className={classes.list}>\r\n                {utils.generic.isValidArray(options, true) && options?.map((option, index) => {\r\n                    const labelId = `multi-select-checkbox-list-label-${option.id}`;\r\n                    const isSelected = valuesIds.includes(option.id);\r\n\r\n                    if (options.length === index + 1) {\r\n                        return (\r\n                            <ListItem\r\n                                key={option.id}\r\n                                button\r\n                                onClick={() => {\r\n                                    handlers.onToggleOption(option);\r\n                                }}\r\n                                disabled={isMaxReached && !isSelected}\r\n                                classes={{ root: classes.listItem }}\r\n                                ref={lastElementReference}\r\n                            >\r\n\r\n                                <ListItemIcon classes={{ root: classes.listItemIcon }}>\r\n                                    <Checkbox\r\n                                        checked={isSelected}\r\n                                        color=\"primary\"\r\n                                        tabIndex={-1}\r\n                                        disableRipple\r\n                                        disabled={isMaxReached && !isSelected}\r\n                                        inputProps={{ 'aria-labelledby': labelId }}\r\n                                    />\r\n                                </ListItemIcon>\r\n                                <ListItemText id={labelId} primary={option.name} />\r\n                            </ListItem>\r\n\r\n                        );\r\n                    } else {\r\n                        return (<ListItem\r\n                            key={option.id}\r\n                            button\r\n                            onClick={() => {\r\n                                handlers.onToggleOption(option);\r\n                            }}\r\n                            disabled={isMaxReached && !isSelected}\r\n                            classes={{ root: classes.listItem }}\r\n                        >\r\n                            <ListItemIcon classes={{ root: classes.listItemIcon }}>\r\n                                <Checkbox\r\n                                    checked={isSelected}\r\n                                    color=\"primary\"\r\n                                    tabIndex={-1}\r\n                                    disableRipple\r\n                                    disabled={isMaxReached && !isSelected}\r\n                                    inputProps={{ 'aria-labelledby': labelId }}\r\n                                />\r\n                            </ListItemIcon>\r\n                            <ListItemText id={labelId} primary={option.name} />\r\n                        </ListItem>)\r\n                    }\r\n                })}\r\n                {\r\n                    isDataLoading &&\r\n                    <Box className={classes.linearProgressSection}>\r\n                        <Box className={classes.loadingListItem} >\r\n                            {utils.string.t('app.loading')}\r\n                        </Box>\r\n                        <LinearProgress color=\"secondary\" className={classes.linearProgress} />\r\n                    </Box>\r\n                }\r\n                {isDataLoadingError &&\r\n                    <ListItem classes={{ root: classes.listItem }} button>\r\n                        <ListItemText button id={'error'} primary={'Error'} />\r\n                    </ListItem>\r\n                }\r\n            </List>\r\n        </Box>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}