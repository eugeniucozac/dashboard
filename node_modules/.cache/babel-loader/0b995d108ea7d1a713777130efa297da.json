{"ast":null,"code":"import { enqueueNotification, addLoader, removeLoader, authLogout } from 'stores';\nimport * as utils from 'utils';\nexport var postCloseClaim = function postCloseClaim(taskId, data) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/claims.actions.postCloseClaim'\n    };\n    dispatch(postCloseClaimRequest());\n    dispatch(addLoader('postCloseClaim'));\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.bpmService,\n      path: \"workflow/task/\".concat(taskId, \"/next\"),\n      data: data\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(postCloseClaimSuccess(data));\n      dispatch(enqueueNotification(data.message, 'success'));\n      return data;\n    }).catch(function (err) {\n      dispatch(postCloseClaimsFailure(err, defaultError));\n      dispatch(enqueueNotification(err.message, 'error'));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      return err;\n    }).finally(function () {\n      dispatch(removeLoader('postCloseClaim'));\n    });\n  };\n};\nexport var postCloseClaimRequest = function postCloseClaimRequest(params) {\n  return {\n    type: 'CLOSE_CLAIMS_POST_REQUEST',\n    payload: params\n  };\n};\nexport var postCloseClaimSuccess = function postCloseClaimSuccess(data) {\n  return {\n    type: 'CLOSE_CLAIMS_POST_SUCCESS',\n    payload: data\n  };\n};\nexport var postCloseClaimsFailure = function postCloseClaimsFailure(error) {\n  return {\n    type: 'CLOSE_CLAIMS_POST_ERROR',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.postCloseClaim.js"],"names":["enqueueNotification","addLoader","removeLoader","authLogout","utils","postCloseClaim","taskId","data","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","postCloseClaimRequest","api","post","token","accessToken","bpmService","path","then","response","handleResponse","json","handleNewData","postCloseClaimSuccess","message","catch","err","postCloseClaimsFailure","handleUnauthorized","finally","params","type","payload","error"],"mappings":"AAAA,SAASA,mBAAT,EAA8BC,SAA9B,EAAyCC,YAAzC,EAAuDC,UAAvD,QAAyE,QAAzE;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,MAAD,EAASC,IAAT;AAAA,SAAkB,UAACC,QAAD,EAAWC,QAAX,EAAwB;AACtE;AADsE,oBAEbA,QAAQ,EAFK;AAAA,QAEtDC,IAFsD,aAE9DC,IAF8D,CAEtDD,IAFsD;AAAA,QAE5BE,QAF4B,aAE9CC,MAF8C,CAEpCC,IAFoC,CAE5BF,QAF4B;;AAItE,QAAMG,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE;AADa,KAArB;AAIAR,IAAAA,QAAQ,CAACS,qBAAqB,EAAtB,CAAR;AACAT,IAAAA,QAAQ,CAACP,SAAS,CAAC,gBAAD,CAAV,CAAR;AAEA,WAAOG,KAAK,CAACc,GAAN,CACJC,IADI,CACC;AACJC,MAAAA,KAAK,EAAEV,IAAI,CAACW,WADR;AAEJT,MAAAA,QAAQ,EAAEA,QAAQ,CAACU,UAFf;AAGJC,MAAAA,IAAI,0BAAmBjB,MAAnB,UAHA;AAIJC,MAAAA,IAAI,EAAEA;AAJF,KADD,EAOJiB,IAPI,CAOC,UAACC,QAAD;AAAA,aAAcrB,KAAK,CAACc,GAAN,CAAUQ,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAPD,EAQJD,IARI,CAQC,UAACG,IAAD;AAAA,aAAUvB,KAAK,CAACc,GAAN,CAAUU,aAAV,CAAwBD,IAAxB,CAAV;AAAA,KARD,EASJH,IATI,CASC,UAACjB,IAAD,EAAU;AACdC,MAAAA,QAAQ,CAACqB,qBAAqB,CAACtB,IAAD,CAAtB,CAAR;AACAC,MAAAA,QAAQ,CAACR,mBAAmB,CAACO,IAAI,CAACuB,OAAN,EAAe,SAAf,CAApB,CAAR;AACA,aAAOvB,IAAP;AACD,KAbI,EAcJwB,KAdI,CAcE,UAACC,GAAD,EAAS;AACdxB,MAAAA,QAAQ,CAACyB,sBAAsB,CAACD,GAAD,EAAMjB,YAAN,CAAvB,CAAR;AACAP,MAAAA,QAAQ,CAACR,mBAAmB,CAACgC,GAAG,CAACF,OAAL,EAAc,OAAd,CAApB,CAAR;AACA1B,MAAAA,KAAK,CAACc,GAAN,CAAUgB,kBAAV,CAA6BF,GAA7B,EAAkCxB,QAAlC,EAA4CL,UAA5C;AACA,aAAO6B,GAAP;AACD,KAnBI,EAoBJG,OApBI,CAoBI,YAAM;AACb3B,MAAAA,QAAQ,CAACN,YAAY,CAAC,gBAAD,CAAb,CAAR;AACD,KAtBI,CAAP;AAuBD,GAlC6B;AAAA,CAAvB;AAoCP,OAAO,IAAMe,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACmB,MAAD,EAAY;AAC/C,SAAO;AACLC,IAAAA,IAAI,EAAE,2BADD;AAELC,IAAAA,OAAO,EAAEF;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMP,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACtB,IAAD,EAAU;AAC7C,SAAO;AACL8B,IAAAA,IAAI,EAAE,2BADD;AAELC,IAAAA,OAAO,EAAE/B;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAM0B,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACM,KAAD,EAAW;AAC/C,SAAO;AACLF,IAAAA,IAAI,EAAE,yBADD;AAELC,IAAAA,OAAO,EAAEC;AAFJ,GAAP;AAID,CALM","sourcesContent":["import { enqueueNotification, addLoader, removeLoader, authLogout } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const postCloseClaim = (taskId, data) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.postCloseClaim',\r\n  };\r\n\r\n  dispatch(postCloseClaimRequest());\r\n  dispatch(addLoader('postCloseClaim'));\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.bpmService,\r\n      path: `workflow/task/${taskId}/next`,\r\n      data: data,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(postCloseClaimSuccess(data));\r\n      dispatch(enqueueNotification(data.message, 'success'));\r\n      return data;\r\n    })\r\n    .catch((err) => {\r\n      dispatch(postCloseClaimsFailure(err, defaultError));\r\n      dispatch(enqueueNotification(err.message, 'error'));\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('postCloseClaim'));\r\n    });\r\n};\r\n\r\nexport const postCloseClaimRequest = (params) => {\r\n  return {\r\n    type: 'CLOSE_CLAIMS_POST_REQUEST',\r\n    payload: params,\r\n  };\r\n};\r\n\r\nexport const postCloseClaimSuccess = (data) => {\r\n  return {\r\n    type: 'CLOSE_CLAIMS_POST_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const postCloseClaimsFailure = (error) => {\r\n  return {\r\n    type: 'CLOSE_CLAIMS_POST_ERROR',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}