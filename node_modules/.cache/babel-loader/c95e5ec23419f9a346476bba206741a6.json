{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\EnterClaimInformation\\\\EnterClaimInformation.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types'; //app\n\nimport EnterClaimInformationForm from './EnterClaimInformationForm';\nimport { selectLossId, selectLossQualifiers, getLossQualifiers, getCatCodes, selectCatCodes, getPolicyInformation, selectClaimsPolicyInformation, selectClaimantNames, selectClaimsInterest, getInterest, selectClaimsUnderwritingGroups, selectAllClaimDetails, getBEAdjuster, selectBEAdjusterList, selectPriorities, selectClaimData, getComplexityValues, selectComplexityValues, getReferralValues, getPolicyInsures, getPolicyClients, selectClaimPolicyInsures, selectClaimPolicyClients, getPolicySections, selectClaimsPolicySections } from 'stores';\nimport * as utils from 'utils';\nimport { Loader } from 'components'; // mui\n\nimport { Box } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nEnterClaimInformation.propTypes = {\n  policyRef: PropTypes.object.isRequired,\n  setPolicyRef: PropTypes.func.isRequired,\n  isAllStepsCompleted: PropTypes.bool.isRequired,\n  activeStep: PropTypes.number.isRequired,\n  lastStep: PropTypes.bool.isRequired,\n  handleCancel: PropTypes.func.isRequired,\n  handleFinish: PropTypes.func.isRequired,\n  handleNext: PropTypes.func.isRequired,\n  handleBack: PropTypes.func.isRequired,\n  handleSave: PropTypes.func.isRequired,\n  context: PropTypes.string.isRequired,\n  validation: PropTypes.bool.isRequired,\n  setValidation: PropTypes.func.isRequired\n};\nexport default function EnterClaimInformation(props) {\n  _s();\n\n  var dispatch = useDispatch();\n  var lossInformation = useSelector(selectLossId);\n  var lossQualifiers = useSelector(selectLossQualifiers);\n  var policyInformation = useSelector(selectClaimsPolicyInformation);\n  var claimantNames = useSelector(selectClaimantNames);\n  var interest = useSelector(selectClaimsInterest);\n  var underWritingGroups = useSelector(selectClaimsUnderwritingGroups);\n  var allClaimDetails = useSelector(selectAllClaimDetails);\n  var beAdjusterList = useSelector(selectBEAdjusterList);\n  var priorities = useSelector(selectPriorities);\n  var existingClaimData = useSelector(selectClaimData);\n  var complexityValues = useSelector(selectComplexityValues);\n  var claimPolicyInsures = useSelector(selectClaimPolicyInsures);\n  var claimPolicyClients = useSelector(selectClaimPolicyClients);\n  var policySections = useSelector(selectClaimsPolicySections);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isDataReady = _useState2[0],\n      setIsDataReady = _useState2[1];\n\n  useEffect(function () {\n    dispatch(getPolicyInsures()).then(function (response) {\n      if (utils.generic.isValidArray(response)) {\n        dispatch(getPolicyClients()).then(function (response) {\n          if (utils.generic.isValidArray(response)) {\n            dispatch(getPolicySections()).then(function (response) {\n              if (utils.generic.isValidArray(response)) {\n                setIsDataReady(true);\n              }\n            });\n          }\n        });\n      }\n    });\n\n    if (!(existingClaimData === null || existingClaimData === void 0 ? void 0 : existingClaimData.claimId)) {\n      if (utils.generic.isInvalidOrEmptyArray(lossQualifiers)) {\n        dispatch(getLossQualifiers());\n      }\n\n      if (utils.generic.isInvalidOrEmptyArray(catCodes)) {\n        dispatch(getCatCodes());\n      }\n\n      dispatch(getPolicyInformation());\n      dispatch(getBEAdjuster());\n      dispatch(getInterest());\n      dispatch(getComplexityValues());\n      dispatch(getReferralValues());\n    }\n  }, [] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  var backHandler = function backHandler() {\n    props.handleBack();\n  };\n\n  if (utils.generic.isInvalidOrEmptyArray(complexityValues)) {\n    return false;\n  }\n\n  if (!isDataReady) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      height: \"300px\",\n      children: /*#__PURE__*/_jsxDEV(Loader, {\n        visible: true,\n        absolute: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(EnterClaimInformationForm, _objectSpread(_objectSpread({}, props), {}, {\n    policyInformation: policyInformation,\n    lossInformation: lossInformation,\n    lossQualifiers: lossQualifiers,\n    claimantNames: claimantNames,\n    beAdjusterList: beAdjusterList.items,\n    underWritingGroups: underWritingGroups,\n    handleNext: props.handleNext,\n    handleSave: props.handleSave,\n    handleCancel: props.handleCancel,\n    interest: interest,\n    allClaimDetails: allClaimDetails,\n    priorities: priorities,\n    complexityValues: complexityValues,\n    handleBack: backHandler,\n    claimPolicyInsures: claimPolicyInsures,\n    claimPolicyClients: claimPolicyClients,\n    policySections: policySections\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EnterClaimInformation, \"Lsumy3ZEeMHPu+Nq4OdWJkg/Yg0=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = EnterClaimInformation;\n\nvar _c;\n\n$RefreshReg$(_c, \"EnterClaimInformation\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/EnterClaimInformation/EnterClaimInformation.js"],"names":["React","useEffect","useState","useDispatch","useSelector","PropTypes","EnterClaimInformationForm","selectLossId","selectLossQualifiers","getLossQualifiers","getCatCodes","selectCatCodes","getPolicyInformation","selectClaimsPolicyInformation","selectClaimantNames","selectClaimsInterest","getInterest","selectClaimsUnderwritingGroups","selectAllClaimDetails","getBEAdjuster","selectBEAdjusterList","selectPriorities","selectClaimData","getComplexityValues","selectComplexityValues","getReferralValues","getPolicyInsures","getPolicyClients","selectClaimPolicyInsures","selectClaimPolicyClients","getPolicySections","selectClaimsPolicySections","utils","Loader","Box","EnterClaimInformation","propTypes","policyRef","object","isRequired","setPolicyRef","func","isAllStepsCompleted","bool","activeStep","number","lastStep","handleCancel","handleFinish","handleNext","handleBack","handleSave","context","string","validation","setValidation","props","dispatch","lossInformation","lossQualifiers","policyInformation","claimantNames","interest","underWritingGroups","allClaimDetails","beAdjusterList","priorities","existingClaimData","complexityValues","claimPolicyInsures","claimPolicyClients","policySections","isDataReady","setIsDataReady","then","response","generic","isValidArray","claimId","isInvalidOrEmptyArray","catCodes","backHandler","items"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\n//app\r\nimport EnterClaimInformationForm from './EnterClaimInformationForm';\r\nimport {\r\n  selectLossId,\r\n  selectLossQualifiers,\r\n  getLossQualifiers,\r\n  getCatCodes,\r\n  selectCatCodes,\r\n  getPolicyInformation,\r\n  selectClaimsPolicyInformation,\r\n  selectClaimantNames,\r\n  selectClaimsInterest,\r\n  getInterest,\r\n  selectClaimsUnderwritingGroups,\r\n  selectAllClaimDetails,\r\n  getBEAdjuster,\r\n  selectBEAdjusterList,\r\n  selectPriorities,\r\n  selectClaimData,\r\n  getComplexityValues,\r\n  selectComplexityValues,\r\n  getReferralValues,\r\n  getPolicyInsures,\r\n  getPolicyClients,\r\n  selectClaimPolicyInsures,\r\n  selectClaimPolicyClients,\r\n  getPolicySections,\r\n  selectClaimsPolicySections\r\n} from 'stores';\r\nimport * as utils from 'utils';\r\nimport { Loader } from 'components';\r\n\r\n// mui\r\nimport { Box } from '@material-ui/core';\r\n\r\nEnterClaimInformation.propTypes = {\r\n  policyRef: PropTypes.object.isRequired,\r\n  setPolicyRef: PropTypes.func.isRequired,\r\n  isAllStepsCompleted: PropTypes.bool.isRequired,\r\n  activeStep: PropTypes.number.isRequired,\r\n  lastStep: PropTypes.bool.isRequired,\r\n  handleCancel: PropTypes.func.isRequired,\r\n  handleFinish: PropTypes.func.isRequired,\r\n  handleNext: PropTypes.func.isRequired,\r\n  handleBack: PropTypes.func.isRequired,\r\n  handleSave: PropTypes.func.isRequired,\r\n  context: PropTypes.string.isRequired,\r\n  validation: PropTypes.bool.isRequired,\r\n  setValidation: PropTypes.func.isRequired,\r\n};\r\nexport default function EnterClaimInformation(props) {\r\n  const dispatch = useDispatch();\r\n  const lossInformation = useSelector(selectLossId);\r\n  const lossQualifiers = useSelector(selectLossQualifiers);\r\n  const policyInformation = useSelector(selectClaimsPolicyInformation);\r\n  const claimantNames = useSelector(selectClaimantNames);\r\n  const interest = useSelector(selectClaimsInterest);\r\n  const underWritingGroups = useSelector(selectClaimsUnderwritingGroups);\r\n  const allClaimDetails = useSelector(selectAllClaimDetails);\r\n  const beAdjusterList = useSelector(selectBEAdjusterList);\r\n  const priorities = useSelector(selectPriorities);\r\n  const existingClaimData = useSelector(selectClaimData);\r\n  const complexityValues = useSelector(selectComplexityValues);\r\n  const claimPolicyInsures = useSelector(selectClaimPolicyInsures);\r\n  const claimPolicyClients = useSelector(selectClaimPolicyClients);\r\n  const policySections = useSelector(selectClaimsPolicySections);\r\n  \r\n  const [isDataReady, setIsDataReady] = useState(false);\r\n\r\n  useEffect(\r\n    () => {\r\n      dispatch(getPolicyInsures()).then((response) => {\r\n        if (utils.generic.isValidArray(response)) {\r\n          dispatch(getPolicyClients()).then((response) => {\r\n            if (utils.generic.isValidArray(response)) {\r\n              dispatch(getPolicySections()).then((response)=>{\r\n                if (utils.generic.isValidArray(response)) {\r\n                  setIsDataReady(true);\r\n                }\r\n              })\r\n            }\r\n          });\r\n        }\r\n      });\r\n\r\n      if (!existingClaimData?.claimId) {\r\n        if (utils.generic.isInvalidOrEmptyArray(lossQualifiers)) {\r\n          dispatch(getLossQualifiers());\r\n        }\r\n        if (utils.generic.isInvalidOrEmptyArray(catCodes)) {\r\n          dispatch(getCatCodes());\r\n        }\r\n        dispatch(getPolicyInformation());\r\n        dispatch(getBEAdjuster());\r\n        dispatch(getInterest());\r\n        dispatch(getComplexityValues());\r\n        dispatch(getReferralValues());\r\n      }\r\n    },\r\n    [] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  const backHandler = () => {\r\n    props.handleBack();\r\n  };\r\n\r\n  if (utils.generic.isInvalidOrEmptyArray(complexityValues)) {\r\n    return false;\r\n  }\r\n\r\n  if (!isDataReady) {\r\n    return (\r\n      <Box height=\"300px\">\r\n        <Loader visible absolute />\r\n      </Box>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <EnterClaimInformationForm\r\n      {...props}\r\n      policyInformation={policyInformation}\r\n      lossInformation={lossInformation}\r\n      lossQualifiers={lossQualifiers}\r\n      claimantNames={claimantNames}\r\n      beAdjusterList={beAdjusterList.items}\r\n      underWritingGroups={underWritingGroups}\r\n      handleNext={props.handleNext}\r\n      handleSave={props.handleSave}\r\n      handleCancel={props.handleCancel}\r\n      interest={interest}\r\n      allClaimDetails={allClaimDetails}\r\n      priorities={priorities}\r\n      complexityValues={complexityValues}\r\n      handleBack={backHandler}\r\n      claimPolicyInsures={claimPolicyInsures}\r\n      claimPolicyClients={claimPolicyClients}\r\n      policySections={policySections}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}