{"ast":null,"code":"import _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ClaimsComplexityDivision\\\\ClaimsComplexityDivision.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types'; // app\n\nimport { ClaimsComplexityDivisionView } from './ClaimsComplexityDivision.view';\nimport * as utils from 'utils';\nimport { showModal, getComplexityDivisionMatrix, selectComplexityDivisionMatrixChanges, selectComplexityDivisionMatrix, saveComplexityDivisionMatrixChange, postComplexityDivisionMatrix } from 'stores';\nimport * as constants from 'consts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nClaimsComplexityDivision.propTypes = {\n  setIsSelectedTabDirty: PropTypes.func.isRequired\n};\nexport default function ClaimsComplexityDivision(_ref) {\n  _s();\n\n  var setIsSelectedTabDirty = _ref.setIsSelectedTabDirty;\n  var dispatch = useDispatch();\n  var initComplexityMatrixData = useSelector(selectComplexityDivisionMatrix);\n  var matrixDataDiff = useSelector(selectComplexityDivisionMatrixChanges);\n  var matrixPrimaryKey = constants.CLAIM_DIVISIONS_MATRIX_PRIMARY_KEY;\n  var matrixCheckboxValueKey = constants.CLAIM_DIVISIONS_MATRIX_CHECKBOX_VALUE_KEY;\n  var matrixPrimaryKeyId = constants.CLAIM_DIVISIONS_MATRIX_PRIMARY_KEY_ID;\n  var matrixExceptionColumns = constants.CLAIM_DIVISIONS_MATRIX_COLUMN_EXCEPTIONS;\n  useEffect(function () {\n    var isDivisionMatrixUpdated = matrixDataDiff && Object.keys(matrixDataDiff).length !== 0;\n    if (isDivisionMatrixUpdated) setIsSelectedTabDirty(true);else setIsSelectedTabDirty(false);\n  }, [matrixDataDiff]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var resetMatrix = function resetMatrix() {\n    dispatch(showModal({\n      component: 'COMPLEXITY_MANAGEMENT_DIVISION_RESET',\n      props: {\n        title: utils.string.t('status.alert'),\n        fullWidth: true,\n        maxWidth: 'xs',\n        disableAutoFocus: true\n      }\n    }));\n  };\n\n  var saveMatrix = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(saveMatrixData) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return dispatch(postComplexityDivisionMatrix(saveMatrixData));\n\n            case 2:\n              dispatch(getComplexityDivisionMatrix());\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function saveMatrix(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var saveEachMatrixChange = function saveEachMatrixChange(value) {\n    dispatch(saveComplexityDivisionMatrixChange(value));\n  };\n\n  useEffect(function () {\n    if (!initComplexityMatrixData.length) {\n      dispatch(getComplexityDivisionMatrix());\n    }\n  }, [initComplexityMatrixData]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/_jsxDEV(ClaimsComplexityDivisionView, {\n    initMatrixData: initComplexityMatrixData,\n    matrixPrimaryKey: matrixPrimaryKey,\n    matrixCheckboxValueKey: matrixCheckboxValueKey,\n    matrixPrimaryKeyId: matrixPrimaryKeyId,\n    matrixExceptionColumns: matrixExceptionColumns,\n    resetMatrix: resetMatrix,\n    saveMatrix: saveMatrix,\n    saveEachMatrixChange: saveEachMatrixChange,\n    matrixDataDiff: matrixDataDiff\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ClaimsComplexityDivision, \"LvgNf8UlhJfJVfQKsSp68CaOda4=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = ClaimsComplexityDivision;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimsComplexityDivision\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ClaimsComplexityDivision/ClaimsComplexityDivision.js"],"names":["React","useEffect","useSelector","useDispatch","PropTypes","ClaimsComplexityDivisionView","utils","showModal","getComplexityDivisionMatrix","selectComplexityDivisionMatrixChanges","selectComplexityDivisionMatrix","saveComplexityDivisionMatrixChange","postComplexityDivisionMatrix","constants","ClaimsComplexityDivision","propTypes","setIsSelectedTabDirty","func","isRequired","dispatch","initComplexityMatrixData","matrixDataDiff","matrixPrimaryKey","CLAIM_DIVISIONS_MATRIX_PRIMARY_KEY","matrixCheckboxValueKey","CLAIM_DIVISIONS_MATRIX_CHECKBOX_VALUE_KEY","matrixPrimaryKeyId","CLAIM_DIVISIONS_MATRIX_PRIMARY_KEY_ID","matrixExceptionColumns","CLAIM_DIVISIONS_MATRIX_COLUMN_EXCEPTIONS","isDivisionMatrixUpdated","Object","keys","length","resetMatrix","component","props","title","string","t","fullWidth","maxWidth","disableAutoFocus","saveMatrix","saveMatrixData","saveEachMatrixChange","value"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;;AACA,SAASC,4BAAT,QAA6C,iCAA7C;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SACEC,SADF,EAEEC,2BAFF,EAGEC,qCAHF,EAIEC,8BAJF,EAKEC,kCALF,EAMEC,4BANF,QAOO,QAPP;AAQA,OAAO,KAAKC,SAAZ,MAA2B,QAA3B;;AAEAC,wBAAwB,CAACC,SAAzB,GAAqC;AACnCC,EAAAA,qBAAqB,EAAEZ,SAAS,CAACa,IAAV,CAAeC;AADH,CAArC;AAIA,eAAe,SAASJ,wBAAT,OAA6D;AAAA;;AAAA,MAAzBE,qBAAyB,QAAzBA,qBAAyB;AAC1E,MAAMG,QAAQ,GAAGhB,WAAW,EAA5B;AAEA,MAAMiB,wBAAwB,GAAGlB,WAAW,CAACQ,8BAAD,CAA5C;AACA,MAAMW,cAAc,GAAGnB,WAAW,CAACO,qCAAD,CAAlC;AAEA,MAAMa,gBAAgB,GAAGT,SAAS,CAACU,kCAAnC;AACA,MAAMC,sBAAsB,GAAGX,SAAS,CAACY,yCAAzC;AACA,MAAMC,kBAAkB,GAAGb,SAAS,CAACc,qCAArC;AACA,MAAMC,sBAAsB,GAAGf,SAAS,CAACgB,wCAAzC;AAEA5B,EAAAA,SAAS,CAAC,YAAM;AACd,QAAM6B,uBAAuB,GAAGT,cAAc,IAAIU,MAAM,CAACC,IAAP,CAAYX,cAAZ,EAA4BY,MAA5B,KAAuC,CAAzF;AACA,QAAIH,uBAAJ,EAA6Bd,qBAAqB,CAAC,IAAD,CAArB,CAA7B,KACKA,qBAAqB,CAAC,KAAD,CAArB;AACN,GAJQ,EAIN,CAACK,cAAD,CAJM,CAAT,CAX0E,CAepD;;AAEtB,MAAMa,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxBf,IAAAA,QAAQ,CACNZ,SAAS,CAAC;AACR4B,MAAAA,SAAS,EAAE,sCADH;AAERC,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAE/B,KAAK,CAACgC,MAAN,CAAaC,CAAb,CAAe,cAAf,CADF;AAELC,QAAAA,SAAS,EAAE,IAFN;AAGLC,QAAAA,QAAQ,EAAE,IAHL;AAILC,QAAAA,gBAAgB,EAAE;AAJb;AAFC,KAAD,CADH,CAAR;AAWD,GAZD;;AAaA,MAAMC,UAAU;AAAA,yEAAG,iBAAOC,cAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACXzB,QAAQ,CAACP,4BAA4B,CAACgC,cAAD,CAA7B,CADG;;AAAA;AAEjBzB,cAAAA,QAAQ,CAACX,2BAA2B,EAA5B,CAAR;;AAFiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAVmC,UAAU;AAAA;AAAA;AAAA,KAAhB;;AAIA,MAAME,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,KAAD,EAAW;AACtC3B,IAAAA,QAAQ,CAACR,kCAAkC,CAACmC,KAAD,CAAnC,CAAR;AACD,GAFD;;AAIA7C,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACmB,wBAAwB,CAACa,MAA9B,EAAsC;AACpCd,MAAAA,QAAQ,CAACX,2BAA2B,EAA5B,CAAR;AACD;AACF,GAJQ,EAIN,CAACY,wBAAD,CAJM,CAAT,CAtC0E,CA0C1C;;AAEhC,sBACE,QAAC,4BAAD;AACE,IAAA,cAAc,EAAEA,wBADlB;AAEE,IAAA,gBAAgB,EAAEE,gBAFpB;AAGE,IAAA,sBAAsB,EAAEE,sBAH1B;AAIE,IAAA,kBAAkB,EAAEE,kBAJtB;AAKE,IAAA,sBAAsB,EAAEE,sBAL1B;AAME,IAAA,WAAW,EAAEM,WANf;AAOE,IAAA,UAAU,EAAES,UAPd;AAQE,IAAA,oBAAoB,EAAEE,oBARxB;AASE,IAAA,cAAc,EAAExB;AATlB;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;;GAzDuBP,wB;UACLX,W,EAEgBD,W,EACVA,W;;;KAJDY,wB","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\n// app\r\nimport { ClaimsComplexityDivisionView } from './ClaimsComplexityDivision.view';\r\nimport * as utils from 'utils';\r\nimport {\r\n  showModal,\r\n  getComplexityDivisionMatrix,\r\n  selectComplexityDivisionMatrixChanges,\r\n  selectComplexityDivisionMatrix,\r\n  saveComplexityDivisionMatrixChange,\r\n  postComplexityDivisionMatrix,\r\n} from 'stores';\r\nimport * as constants from 'consts';\r\n\r\nClaimsComplexityDivision.propTypes = {\r\n  setIsSelectedTabDirty: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default function ClaimsComplexityDivision({ setIsSelectedTabDirty }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const initComplexityMatrixData = useSelector(selectComplexityDivisionMatrix);\r\n  const matrixDataDiff = useSelector(selectComplexityDivisionMatrixChanges);\r\n\r\n  const matrixPrimaryKey = constants.CLAIM_DIVISIONS_MATRIX_PRIMARY_KEY;\r\n  const matrixCheckboxValueKey = constants.CLAIM_DIVISIONS_MATRIX_CHECKBOX_VALUE_KEY;\r\n  const matrixPrimaryKeyId = constants.CLAIM_DIVISIONS_MATRIX_PRIMARY_KEY_ID;\r\n  const matrixExceptionColumns = constants.CLAIM_DIVISIONS_MATRIX_COLUMN_EXCEPTIONS;\r\n\r\n  useEffect(() => {\r\n    const isDivisionMatrixUpdated = matrixDataDiff && Object.keys(matrixDataDiff).length !== 0;\r\n    if (isDivisionMatrixUpdated) setIsSelectedTabDirty(true);\r\n    else setIsSelectedTabDirty(false);\r\n  }, [matrixDataDiff]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const resetMatrix = () => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'COMPLEXITY_MANAGEMENT_DIVISION_RESET',\r\n        props: {\r\n          title: utils.string.t('status.alert'),\r\n          fullWidth: true,\r\n          maxWidth: 'xs',\r\n          disableAutoFocus: true,\r\n        },\r\n      })\r\n    );\r\n  };\r\n  const saveMatrix = async (saveMatrixData) => {\r\n    await dispatch(postComplexityDivisionMatrix(saveMatrixData));\r\n    dispatch(getComplexityDivisionMatrix());\r\n  };\r\n  const saveEachMatrixChange = (value) => {\r\n    dispatch(saveComplexityDivisionMatrixChange(value));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!initComplexityMatrixData.length) {\r\n      dispatch(getComplexityDivisionMatrix());\r\n    }\r\n  }, [initComplexityMatrixData]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <ClaimsComplexityDivisionView\r\n      initMatrixData={initComplexityMatrixData}\r\n      matrixPrimaryKey={matrixPrimaryKey}\r\n      matrixCheckboxValueKey={matrixCheckboxValueKey}\r\n      matrixPrimaryKeyId={matrixPrimaryKeyId}\r\n      matrixExceptionColumns={matrixExceptionColumns}\r\n      resetMatrix={resetMatrix}\r\n      saveMatrix={saveMatrix}\r\n      saveEachMatrixChange={saveEachMatrixChange}\r\n      matrixDataDiff={matrixDataDiff}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}