{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\TasksProcessingTableRow\\\\TasksProcessingTableRow.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router';\nimport { useSelector, useDispatch } from 'react-redux'; // app\n\nimport { TasksProcessingTableRowView } from './TasksProcessingTableRow.view';\nimport { showModal, selectClaimsProcessingTasksSelected, getCurrencyPurchasedValue, getSancCheckAssociatedTask, selectCaseTaskTypeView, resetPremiumProcessingTaskSearch, resetPremiumProcessingTasksFilters, getPremiumProcessingTasksDetails, checkIsUserClaim } from 'stores';\nimport config from 'config';\nimport * as utils from 'utils';\nimport * as constants from 'consts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nTasksProcessingTableRow.propTypes = {\n  task: PropTypes.object.isRequired,\n  isTaskTeam: PropTypes.bool.isRequired,\n  isCheckBoxSelected: PropTypes.bool,\n  columnProps: PropTypes.func.isRequired,\n  isPremiumProcessing: PropTypes.bool,\n  premiumProcessCheckBoxSelectedTaskList: PropTypes.array,\n  handlers: PropTypes.shape({\n    selectTask: PropTypes.func.isRequired,\n    refreshTasksGrid: PropTypes.func.isRequired,\n    handleEditAdhoc: PropTypes.func.isRequired,\n    handleCreateRFITaskLevel: PropTypes.func.isRequired,\n    createSanctionsCheck: PropTypes.func.isRequired,\n    premiumProcessingSaveAssignee: PropTypes.func\n  }).isRequired,\n  isTaskSelected: PropTypes.bool.isRequired\n};\nexport default function TasksProcessingTableRow(props) {\n  _s();\n\n  var dispatch = useDispatch();\n  var history = useHistory();\n  var currentTask = props.task;\n  var isRFIEnabled = (currentTask === null || currentTask === void 0 ? void 0 : currentTask.taskCategory) === constants.TASK_TYPES_NATIVE;\n  var isRFIType = (currentTask === null || currentTask === void 0 ? void 0 : currentTask.taskType) === constants.RFI;\n  var isTaskClosed = (currentTask === null || currentTask === void 0 ? void 0 : currentTask.status) === constants.TASK_TAB_COMPLETED_STATUS;\n  var caseTaskTypeView = useSelector(selectCaseTaskTypeView);\n  var user = useSelector(function (state) {\n    return state.user;\n  });\n  var selectedTaskItemLength = utils.generic.isValidArray(props === null || props === void 0 ? void 0 : props.premiumProcessSelectedTaskList, true) && (props === null || props === void 0 ? void 0 : props.premiumProcessSelectedTaskList.length) || 0;\n  var taskActionItems = [{\n    id: 'reAssignTask',\n    label: props.isPremiumProcessing ? utils.string.t('app.assignTo') : utils.string.t('claims.processing.taskFunction.reAssignTask'),\n    disabled: !props.isPremiumProcessing && !constants.REASSIGN_ENABLED_TASK_STATUSES.includes(currentTask.status) || props.isPremiumProcessing && selectedTaskItemLength > 1,\n    callback: function callback() {\n      return reAssignTask(currentTask);\n    }\n  }, {\n    id: 'createRFI',\n    label: utils.string.t('claims.processing.taskFunction.createRFI'),\n    disabled: props.isPremiumProcessing && !isRFIEnabled,\n    callback: function callback() {\n      dispatch(selectClaimsProcessingTasksSelected(currentTask));\n      props.handlers.handleCreateRFITaskLevel(currentTask);\n    }\n  }].concat(_toConsumableArray(!props.isPremiumProcessing ? [{\n    id: 'editTask',\n    label: utils.string.t('claims.processing.taskFunction.editTask'),\n    disabled: isRFIType,\n    callback: function callback() {\n      dispatch(selectClaimsProcessingTasksSelected(currentTask));\n      props.handlers.handleEditAdhoc(currentTask);\n    }\n  }, {\n    id: 'setTaskPriority',\n    label: utils.string.t('claims.processing.taskFunction.setTaskPriority'),\n    callback: function callback() {\n      return props.handleUpdateTaskPriority(props.task);\n    }\n  }].concat(_toConsumableArray((currentTask === null || currentTask === void 0 ? void 0 : currentTask.taskCategory) === constants.TASK_TYPES_NATIVE ? [{\n    id: 'createSanctionsCheck',\n    label: utils.string.t('claims.processing.summary.buttons.createSanctionsChecks'),\n    disabled: isTaskClosed,\n    callback: function callback() {\n      dispatch(selectClaimsProcessingTasksSelected(currentTask));\n      props.handlers.createSanctionsCheck(currentTask);\n    }\n  }] : [])) : []));\n\n  var clickTask = function clickTask(taskObj) {\n    return function (event) {\n      if (props.isPremiumProcessing) {\n        if ((taskObj === null || taskObj === void 0 ? void 0 : taskObj.taskId) || (taskObj === null || taskObj === void 0 ? void 0 : taskObj.processId)) {\n          dispatch(resetPremiumProcessingTaskSearch());\n          dispatch(resetPremiumProcessingTasksFilters());\n          dispatch(getPremiumProcessingTasksDetails({\n            requestType: 'search',\n            taskType: caseTaskTypeView,\n            filterTerm: []\n          }));\n          dispatch(getPremiumProcessingTasksDetails({\n            requestType: 'filter',\n            taskType: caseTaskTypeView,\n            filterTerm: []\n          }));\n          history.push(\"\".concat(config.routes.premiumProcessing.case, \"/\").concat((taskObj === null || taskObj === void 0 ? void 0 : taskObj.taskId) || (taskObj === null || taskObj === void 0 ? void 0 : taskObj.processId), \"/\").concat(constants.PREMIUM_PROCESSING_TAB_CASE_DETAILS));\n        }\n      } else {\n        if (taskObj === null || taskObj === void 0 ? void 0 : taskObj.taskRef) {\n          var _user$emailId, _taskObj$processOwner;\n\n          event.stopPropagation();\n\n          if ((taskObj === null || taskObj === void 0 ? void 0 : taskObj.taskDefKey) === constants.SANCTIONS_CHECK_KEY) {\n            dispatch(getSancCheckAssociatedTask(taskObj === null || taskObj === void 0 ? void 0 : taskObj.parentTaskId));\n          }\n\n          var isUserClaim = ((_user$emailId = user.emailId) === null || _user$emailId === void 0 ? void 0 : _user$emailId.toLowerCase()) === (taskObj === null || taskObj === void 0 ? void 0 : (_taskObj$processOwner = taskObj.processOwner) === null || _taskObj$processOwner === void 0 ? void 0 : _taskObj$processOwner.toLowerCase());\n          dispatch(checkIsUserClaim(isUserClaim));\n          dispatch(selectClaimsProcessingTasksSelected(taskObj));\n\n          if ((taskObj === null || taskObj === void 0 ? void 0 : taskObj.taskDefKey) === constants.ADVICE_AND_SETTLEMENT) {\n            dispatch(getCurrencyPurchasedValue(taskObj === null || taskObj === void 0 ? void 0 : taskObj.processId));\n          }\n\n          if (taskObj.taskType === constants.TASK_ROW_TYPE.rfi) {\n            history.push(\"\".concat(config.routes.claimsProcessing.rfi, \"/\").concat(taskObj.taskRef));\n          } else {\n            history.push(\"\".concat(config.routes.claimsProcessing.task, \"/\").concat(taskObj.taskRef));\n          }\n        }\n      }\n    };\n  };\n\n  var reAssignTask = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(currentTaskDetails) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return dispatch(showModal({\n                component: 'ADD_ASSIGNEE',\n                props: {\n                  title: utils.string.t('app.assign'),\n                  hideCompOnBlur: false,\n                  fullWidth: true,\n                  maxWidth: 'sm',\n                  disableAutoFocus: true,\n                  componentProps: {\n                    isPremiumProcessing: props.isPremiumProcessing,\n                    taskDetails: [currentTaskDetails],\n                    submitHandler: function submitHandler(data) {\n                      props.handlers.refreshTasksGrid();\n\n                      if (props.isPremiumProcessing) {\n                        props.handlers.premiumProcessingSaveAssignee(data.premiumProcessingSaveAssigneeResponse);\n                      }\n                    }\n                  }\n                }\n              }));\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function reAssignTask(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(TasksProcessingTableRowView, _objectSpread(_objectSpread({}, props), {}, {\n    taskActionItems: taskActionItems,\n    isPremiumProcessing: props.isPremiumProcessing,\n    caseTaskTypeView: caseTaskTypeView,\n    selectedTaskItemLength: selectedTaskItemLength,\n    handlers: {\n      selectTask: props.handlers.selectTask,\n      clickTask: clickTask,\n      reAssignTask: reAssignTask\n    }\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TasksProcessingTableRow, \"rgnOMM63wPge9o2+GxBJ2ceDn0w=\", false, function () {\n  return [useDispatch, useHistory, useSelector, useSelector];\n});\n\n_c = TasksProcessingTableRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"TasksProcessingTableRow\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/TasksProcessingTableRow/TasksProcessingTableRow.js"],"names":["React","PropTypes","useHistory","useSelector","useDispatch","TasksProcessingTableRowView","showModal","selectClaimsProcessingTasksSelected","getCurrencyPurchasedValue","getSancCheckAssociatedTask","selectCaseTaskTypeView","resetPremiumProcessingTaskSearch","resetPremiumProcessingTasksFilters","getPremiumProcessingTasksDetails","checkIsUserClaim","config","utils","constants","TasksProcessingTableRow","propTypes","task","object","isRequired","isTaskTeam","bool","isCheckBoxSelected","columnProps","func","isPremiumProcessing","premiumProcessCheckBoxSelectedTaskList","array","handlers","shape","selectTask","refreshTasksGrid","handleEditAdhoc","handleCreateRFITaskLevel","createSanctionsCheck","premiumProcessingSaveAssignee","isTaskSelected","props","dispatch","history","currentTask","isRFIEnabled","taskCategory","TASK_TYPES_NATIVE","isRFIType","taskType","RFI","isTaskClosed","status","TASK_TAB_COMPLETED_STATUS","caseTaskTypeView","user","state","selectedTaskItemLength","generic","isValidArray","premiumProcessSelectedTaskList","length","taskActionItems","id","label","string","t","disabled","REASSIGN_ENABLED_TASK_STATUSES","includes","callback","reAssignTask","handleUpdateTaskPriority","clickTask","taskObj","event","taskId","processId","requestType","filterTerm","push","routes","premiumProcessing","case","PREMIUM_PROCESSING_TAB_CASE_DETAILS","taskRef","stopPropagation","taskDefKey","SANCTIONS_CHECK_KEY","parentTaskId","isUserClaim","emailId","toLowerCase","processOwner","ADVICE_AND_SETTLEMENT","TASK_ROW_TYPE","rfi","claimsProcessing","currentTaskDetails","component","title","hideCompOnBlur","fullWidth","maxWidth","disableAutoFocus","componentProps","taskDetails","submitHandler","data","premiumProcessingSaveAssigneeResponse"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC,C,CAEA;;AACA,SAASC,2BAAT,QAA4C,gCAA5C;AACA,SACEC,SADF,EAEEC,mCAFF,EAGEC,yBAHF,EAIEC,0BAJF,EAKEC,sBALF,EAMEC,gCANF,EAOEC,kCAPF,EAQEC,gCARF,EASEC,gBATF,QAUO,QAVP;AAWA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,SAAZ,MAA2B,QAA3B;;AAEAC,uBAAuB,CAACC,SAAxB,GAAoC;AAClCC,EAAAA,IAAI,EAAEnB,SAAS,CAACoB,MAAV,CAAiBC,UADW;AAElCC,EAAAA,UAAU,EAAEtB,SAAS,CAACuB,IAAV,CAAeF,UAFO;AAGlCG,EAAAA,kBAAkB,EAAExB,SAAS,CAACuB,IAHI;AAIlCE,EAAAA,WAAW,EAAEzB,SAAS,CAAC0B,IAAV,CAAeL,UAJM;AAKlCM,EAAAA,mBAAmB,EAAE3B,SAAS,CAACuB,IALG;AAMlCK,EAAAA,sCAAsC,EAAE5B,SAAS,CAAC6B,KANhB;AAOlCC,EAAAA,QAAQ,EAAE9B,SAAS,CAAC+B,KAAV,CAAgB;AACxBC,IAAAA,UAAU,EAAEhC,SAAS,CAAC0B,IAAV,CAAeL,UADH;AAExBY,IAAAA,gBAAgB,EAAEjC,SAAS,CAAC0B,IAAV,CAAeL,UAFT;AAGxBa,IAAAA,eAAe,EAAElC,SAAS,CAAC0B,IAAV,CAAeL,UAHR;AAIxBc,IAAAA,wBAAwB,EAAEnC,SAAS,CAAC0B,IAAV,CAAeL,UAJjB;AAKxBe,IAAAA,oBAAoB,EAAEpC,SAAS,CAAC0B,IAAV,CAAeL,UALb;AAMxBgB,IAAAA,6BAA6B,EAAErC,SAAS,CAAC0B;AANjB,GAAhB,EAOPL,UAd+B;AAelCiB,EAAAA,cAAc,EAAEtC,SAAS,CAACuB,IAAV,CAAeF;AAfG,CAApC;AAkBA,eAAe,SAASJ,uBAAT,CAAiCsB,KAAjC,EAAwC;AAAA;;AACrD,MAAMC,QAAQ,GAAGrC,WAAW,EAA5B;AACA,MAAMsC,OAAO,GAAGxC,UAAU,EAA1B;AAEA,MAAMyC,WAAW,GAAGH,KAAK,CAACpB,IAA1B;AACA,MAAMwB,YAAY,GAAG,CAAAD,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEE,YAAb,MAA8B5B,SAAS,CAAC6B,iBAA7D;AACA,MAAMC,SAAS,GAAG,CAAAJ,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEK,QAAb,MAA0B/B,SAAS,CAACgC,GAAtD;AACA,MAAMC,YAAY,GAAG,CAAAP,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEQ,MAAb,MAAwBlC,SAAS,CAACmC,yBAAvD;AACA,MAAMC,gBAAgB,GAAGlD,WAAW,CAACO,sBAAD,CAApC;AACA,MAAM4C,IAAI,GAAGnD,WAAW,CAAC,UAACoD,KAAD;AAAA,WAAWA,KAAK,CAACD,IAAjB;AAAA,GAAD,CAAxB;AACA,MAAME,sBAAsB,GACzBxC,KAAK,CAACyC,OAAN,CAAcC,YAAd,CAA2BlB,KAA3B,aAA2BA,KAA3B,uBAA2BA,KAAK,CAAEmB,8BAAlC,EAAkE,IAAlE,MAA2EnB,KAA3E,aAA2EA,KAA3E,uBAA2EA,KAAK,CAAEmB,8BAAP,CAAsCC,MAAjH,CAAD,IAA6H,CAD/H;AAGA,MAAIC,eAAe,IACjB;AACEC,IAAAA,EAAE,EAAE,cADN;AAEEC,IAAAA,KAAK,EAAEvB,KAAK,CAACZ,mBAAN,GAA4BZ,KAAK,CAACgD,MAAN,CAAaC,CAAb,CAAe,cAAf,CAA5B,GAA6DjD,KAAK,CAACgD,MAAN,CAAaC,CAAb,CAAe,6CAAf,CAFtE;AAGEC,IAAAA,QAAQ,EACL,CAAC1B,KAAK,CAACZ,mBAAP,IAA8B,CAACX,SAAS,CAACkD,8BAAV,CAAyCC,QAAzC,CAAkDzB,WAAW,CAACQ,MAA9D,CAAhC,IACCX,KAAK,CAACZ,mBAAN,IAA6B4B,sBAAsB,GAAG,CAL3D;AAMEa,IAAAA,QAAQ,EAAE;AAAA,aAAMC,YAAY,CAAC3B,WAAD,CAAlB;AAAA;AANZ,GADiB,EASjB;AACEmB,IAAAA,EAAE,EAAE,WADN;AAEEC,IAAAA,KAAK,EAAE/C,KAAK,CAACgD,MAAN,CAAaC,CAAb,CAAe,0CAAf,CAFT;AAGEC,IAAAA,QAAQ,EAAE1B,KAAK,CAACZ,mBAAN,IAA6B,CAACgB,YAH1C;AAIEyB,IAAAA,QAAQ,EAAE,oBAAM;AACd5B,MAAAA,QAAQ,CAAClC,mCAAmC,CAACoC,WAAD,CAApC,CAAR;AACAH,MAAAA,KAAK,CAACT,QAAN,CAAeK,wBAAf,CAAwCO,WAAxC;AACD;AAPH,GATiB,4BAkBb,CAACH,KAAK,CAACZ,mBAAP,IAEE;AACEkC,IAAAA,EAAE,EAAE,UADN;AAEEC,IAAAA,KAAK,EAAE/C,KAAK,CAACgD,MAAN,CAAaC,CAAb,CAAe,yCAAf,CAFT;AAGEC,IAAAA,QAAQ,EAAEnB,SAHZ;AAIEsB,IAAAA,QAAQ,EAAE,oBAAM;AACd5B,MAAAA,QAAQ,CAAClC,mCAAmC,CAACoC,WAAD,CAApC,CAAR;AACAH,MAAAA,KAAK,CAACT,QAAN,CAAeI,eAAf,CAA+BQ,WAA/B;AACD;AAPH,GAFF,EAWE;AACEmB,IAAAA,EAAE,EAAE,iBADN;AAEEC,IAAAA,KAAK,EAAE/C,KAAK,CAACgD,MAAN,CAAaC,CAAb,CAAe,gDAAf,CAFT;AAGEI,IAAAA,QAAQ,EAAE;AAAA,aAAM7B,KAAK,CAAC+B,wBAAN,CAA+B/B,KAAK,CAACpB,IAArC,CAAN;AAAA;AAHZ,GAXF,4BAgBM,CAAAuB,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEE,YAAb,MAA8B5B,SAAS,CAAC6B,iBAAxC,GACA,CACE;AACEgB,IAAAA,EAAE,EAAE,sBADN;AAEEC,IAAAA,KAAK,EAAE/C,KAAK,CAACgD,MAAN,CAAaC,CAAb,CAAe,yDAAf,CAFT;AAGEC,IAAAA,QAAQ,EAAEhB,YAHZ;AAIEmB,IAAAA,QAAQ,EAAE,oBAAM;AACd5B,MAAAA,QAAQ,CAAClC,mCAAmC,CAACoC,WAAD,CAApC,CAAR;AACAH,MAAAA,KAAK,CAACT,QAAN,CAAeM,oBAAf,CAAoCM,WAApC;AACD;AAPH,GADF,CADA,GAYA,EA5BN,KA8BA,EAhDa,EAAnB;;AAmDA,MAAM6B,SAAS,GAAG,SAAZA,SAAY,CAACC,OAAD;AAAA,WAAa,UAACC,KAAD,EAAW;AACxC,UAAIlC,KAAK,CAACZ,mBAAV,EAA+B;AAC7B,YAAI,CAAA6C,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEE,MAAT,MAAmBF,OAAnB,aAAmBA,OAAnB,uBAAmBA,OAAO,CAAEG,SAA5B,CAAJ,EAA2C;AACzCnC,UAAAA,QAAQ,CAAC9B,gCAAgC,EAAjC,CAAR;AACA8B,UAAAA,QAAQ,CAAC7B,kCAAkC,EAAnC,CAAR;AACA6B,UAAAA,QAAQ,CAAC5B,gCAAgC,CAAC;AAAEgE,YAAAA,WAAW,EAAE,QAAf;AAAyB7B,YAAAA,QAAQ,EAAEK,gBAAnC;AAAqDyB,YAAAA,UAAU,EAAE;AAAjE,WAAD,CAAjC,CAAR;AACArC,UAAAA,QAAQ,CAAC5B,gCAAgC,CAAC;AAAEgE,YAAAA,WAAW,EAAE,QAAf;AAAyB7B,YAAAA,QAAQ,EAAEK,gBAAnC;AAAqDyB,YAAAA,UAAU,EAAE;AAAjE,WAAD,CAAjC,CAAR;AACApC,UAAAA,OAAO,CAACqC,IAAR,WACKhE,MAAM,CAACiE,MAAP,CAAcC,iBAAd,CAAgCC,IADrC,cAC6C,CAAAT,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEE,MAAT,MAAmBF,OAAnB,aAAmBA,OAAnB,uBAAmBA,OAAO,CAAEG,SAA5B,CAD7C,cAEI3D,SAAS,CAACkE,mCAFd;AAKD;AACF,OAZD,MAYO;AACL,YAAIV,OAAJ,aAAIA,OAAJ,uBAAIA,OAAO,CAAEW,OAAb,EAAsB;AAAA;;AACpBV,UAAAA,KAAK,CAACW,eAAN;;AACA,cAAI,CAAAZ,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEa,UAAT,MAAwBrE,SAAS,CAACsE,mBAAtC,EAA2D;AACzD9C,YAAAA,QAAQ,CAAChC,0BAA0B,CAACgE,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAEe,YAAV,CAA3B,CAAR;AACD;;AACD,cAAMC,WAAW,GAAG,kBAAAnC,IAAI,CAACoC,OAAL,gEAAcC,WAAd,SAAgClB,OAAhC,aAAgCA,OAAhC,gDAAgCA,OAAO,CAAEmB,YAAzC,0DAAgC,sBAAuBD,WAAvB,EAAhC,CAApB;AACAlD,UAAAA,QAAQ,CAAC3B,gBAAgB,CAAC2E,WAAD,CAAjB,CAAR;AACAhD,UAAAA,QAAQ,CAAClC,mCAAmC,CAACkE,OAAD,CAApC,CAAR;;AACA,cAAI,CAAAA,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEa,UAAT,MAAwBrE,SAAS,CAAC4E,qBAAtC,EAA6D;AAC3DpD,YAAAA,QAAQ,CAACjC,yBAAyB,CAACiE,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAEG,SAAV,CAA1B,CAAR;AACD;;AACD,cAAIH,OAAO,CAACzB,QAAR,KAAqB/B,SAAS,CAAC6E,aAAV,CAAwBC,GAAjD,EAAsD;AACpDrD,YAAAA,OAAO,CAACqC,IAAR,WAAgBhE,MAAM,CAACiE,MAAP,CAAcgB,gBAAd,CAA+BD,GAA/C,cAAsDtB,OAAO,CAACW,OAA9D;AACD,WAFD,MAEO;AACL1C,YAAAA,OAAO,CAACqC,IAAR,WAAgBhE,MAAM,CAACiE,MAAP,CAAcgB,gBAAd,CAA+B5E,IAA/C,cAAuDqD,OAAO,CAACW,OAA/D;AACD;AACF;AACF;AACF,KAhCiB;AAAA,GAAlB;;AAkCA,MAAMd,YAAY;AAAA,wEAAG,iBAAO2B,kBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACbxD,QAAQ,CACZnC,SAAS,CAAC;AACR4F,gBAAAA,SAAS,EAAE,cADH;AAER1D,gBAAAA,KAAK,EAAE;AACL2D,kBAAAA,KAAK,EAAEnF,KAAK,CAACgD,MAAN,CAAaC,CAAb,CAAe,YAAf,CADF;AAELmC,kBAAAA,cAAc,EAAE,KAFX;AAGLC,kBAAAA,SAAS,EAAE,IAHN;AAILC,kBAAAA,QAAQ,EAAE,IAJL;AAKLC,kBAAAA,gBAAgB,EAAE,IALb;AAMLC,kBAAAA,cAAc,EAAE;AACd5E,oBAAAA,mBAAmB,EAAEY,KAAK,CAACZ,mBADb;AAEd6E,oBAAAA,WAAW,EAAE,CAACR,kBAAD,CAFC;AAGdS,oBAAAA,aAAa,EAAE,uBAACC,IAAD,EAAU;AACvBnE,sBAAAA,KAAK,CAACT,QAAN,CAAeG,gBAAf;;AACA,0BAAIM,KAAK,CAACZ,mBAAV,EAA+B;AAC7BY,wBAAAA,KAAK,CAACT,QAAN,CAAeO,6BAAf,CAA6CqE,IAAI,CAACC,qCAAlD;AACD;AACF;AARa;AANX;AAFC,eAAD,CADG,CADK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAZtC,YAAY;AAAA;AAAA;AAAA,KAAlB;;AAyBA,sBACE,QAAC,2BAAD,kCACM9B,KADN;AAEE,IAAA,eAAe,EAAEqB,eAFnB;AAGE,IAAA,mBAAmB,EAAErB,KAAK,CAACZ,mBAH7B;AAIE,IAAA,gBAAgB,EAAEyB,gBAJpB;AAKE,IAAA,sBAAsB,EAAEG,sBAL1B;AAME,IAAA,QAAQ,EAAE;AACRvB,MAAAA,UAAU,EAAEO,KAAK,CAACT,QAAN,CAAeE,UADnB;AAERuC,MAAAA,SAAS,EAATA,SAFQ;AAGRF,MAAAA,YAAY,EAAZA;AAHQ;AANZ;AAAA;AAAA;AAAA;AAAA,UADF;AAcD;;GAzIuBpD,uB;UACLd,W,EACDF,U,EAMSC,W,EACZA,W;;;KATSe,uB","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useHistory } from 'react-router';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\n// app\r\nimport { TasksProcessingTableRowView } from './TasksProcessingTableRow.view';\r\nimport {\r\n  showModal,\r\n  selectClaimsProcessingTasksSelected,\r\n  getCurrencyPurchasedValue,\r\n  getSancCheckAssociatedTask,\r\n  selectCaseTaskTypeView,\r\n  resetPremiumProcessingTaskSearch,\r\n  resetPremiumProcessingTasksFilters,\r\n  getPremiumProcessingTasksDetails,\r\n  checkIsUserClaim,\r\n} from 'stores';\r\nimport config from 'config';\r\nimport * as utils from 'utils';\r\nimport * as constants from 'consts';\r\n\r\nTasksProcessingTableRow.propTypes = {\r\n  task: PropTypes.object.isRequired,\r\n  isTaskTeam: PropTypes.bool.isRequired,\r\n  isCheckBoxSelected: PropTypes.bool,\r\n  columnProps: PropTypes.func.isRequired,\r\n  isPremiumProcessing: PropTypes.bool,\r\n  premiumProcessCheckBoxSelectedTaskList: PropTypes.array,\r\n  handlers: PropTypes.shape({\r\n    selectTask: PropTypes.func.isRequired,\r\n    refreshTasksGrid: PropTypes.func.isRequired,\r\n    handleEditAdhoc: PropTypes.func.isRequired,\r\n    handleCreateRFITaskLevel: PropTypes.func.isRequired,\r\n    createSanctionsCheck: PropTypes.func.isRequired,\r\n    premiumProcessingSaveAssignee: PropTypes.func,\r\n  }).isRequired,\r\n  isTaskSelected: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default function TasksProcessingTableRow(props) {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const currentTask = props.task;\r\n  const isRFIEnabled = currentTask?.taskCategory === constants.TASK_TYPES_NATIVE;\r\n  const isRFIType = currentTask?.taskType === constants.RFI;\r\n  const isTaskClosed = currentTask?.status === constants.TASK_TAB_COMPLETED_STATUS;\r\n  const caseTaskTypeView = useSelector(selectCaseTaskTypeView);\r\n  const user = useSelector((state) => state.user);\r\n  const selectedTaskItemLength =\r\n    (utils.generic.isValidArray(props?.premiumProcessSelectedTaskList, true) && props?.premiumProcessSelectedTaskList.length) || 0;\r\n\r\n  let taskActionItems = [\r\n    {\r\n      id: 'reAssignTask',\r\n      label: props.isPremiumProcessing ? utils.string.t('app.assignTo') : utils.string.t('claims.processing.taskFunction.reAssignTask'),\r\n      disabled:\r\n        (!props.isPremiumProcessing && !constants.REASSIGN_ENABLED_TASK_STATUSES.includes(currentTask.status)) ||\r\n        (props.isPremiumProcessing && selectedTaskItemLength > 1),\r\n      callback: () => reAssignTask(currentTask),\r\n    },\r\n    {\r\n      id: 'createRFI',\r\n      label: utils.string.t('claims.processing.taskFunction.createRFI'),\r\n      disabled: props.isPremiumProcessing && !isRFIEnabled,\r\n      callback: () => {\r\n        dispatch(selectClaimsProcessingTasksSelected(currentTask));\r\n        props.handlers.handleCreateRFITaskLevel(currentTask);\r\n      },\r\n    },\r\n    ...(!props.isPremiumProcessing\r\n      ? [\r\n          {\r\n            id: 'editTask',\r\n            label: utils.string.t('claims.processing.taskFunction.editTask'),\r\n            disabled: isRFIType,\r\n            callback: () => {\r\n              dispatch(selectClaimsProcessingTasksSelected(currentTask));\r\n              props.handlers.handleEditAdhoc(currentTask);\r\n            },\r\n          },\r\n          {\r\n            id: 'setTaskPriority',\r\n            label: utils.string.t('claims.processing.taskFunction.setTaskPriority'),\r\n            callback: () => props.handleUpdateTaskPriority(props.task),\r\n          },\r\n          ...(currentTask?.taskCategory === constants.TASK_TYPES_NATIVE\r\n            ? [\r\n                {\r\n                  id: 'createSanctionsCheck',\r\n                  label: utils.string.t('claims.processing.summary.buttons.createSanctionsChecks'),\r\n                  disabled: isTaskClosed,\r\n                  callback: () => {\r\n                    dispatch(selectClaimsProcessingTasksSelected(currentTask));\r\n                    props.handlers.createSanctionsCheck(currentTask);\r\n                  },\r\n                },\r\n              ]\r\n            : []),\r\n        ]\r\n      : []),\r\n  ];\r\n\r\n  const clickTask = (taskObj) => (event) => {\r\n    if (props.isPremiumProcessing) {\r\n      if (taskObj?.taskId || taskObj?.processId) {\r\n        dispatch(resetPremiumProcessingTaskSearch());\r\n        dispatch(resetPremiumProcessingTasksFilters());\r\n        dispatch(getPremiumProcessingTasksDetails({ requestType: 'search', taskType: caseTaskTypeView, filterTerm: [] }));\r\n        dispatch(getPremiumProcessingTasksDetails({ requestType: 'filter', taskType: caseTaskTypeView, filterTerm: [] }));\r\n        history.push(\r\n          `${config.routes.premiumProcessing.case}/${taskObj?.taskId || taskObj?.processId}/${\r\n            constants.PREMIUM_PROCESSING_TAB_CASE_DETAILS\r\n          }`\r\n        );\r\n      }\r\n    } else {\r\n      if (taskObj?.taskRef) {\r\n        event.stopPropagation();\r\n        if (taskObj?.taskDefKey === constants.SANCTIONS_CHECK_KEY) {\r\n          dispatch(getSancCheckAssociatedTask(taskObj?.parentTaskId));\r\n        }\r\n        const isUserClaim = user.emailId?.toLowerCase() === taskObj?.processOwner?.toLowerCase();\r\n        dispatch(checkIsUserClaim(isUserClaim));\r\n        dispatch(selectClaimsProcessingTasksSelected(taskObj));\r\n        if (taskObj?.taskDefKey === constants.ADVICE_AND_SETTLEMENT) {\r\n          dispatch(getCurrencyPurchasedValue(taskObj?.processId));\r\n        }\r\n        if (taskObj.taskType === constants.TASK_ROW_TYPE.rfi) {\r\n          history.push(`${config.routes.claimsProcessing.rfi}/${taskObj.taskRef}`);\r\n        } else {\r\n          history.push(`${config.routes.claimsProcessing.task}/${taskObj.taskRef}`);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const reAssignTask = async (currentTaskDetails) => {\r\n    await dispatch(\r\n      showModal({\r\n        component: 'ADD_ASSIGNEE',\r\n        props: {\r\n          title: utils.string.t('app.assign'),\r\n          hideCompOnBlur: false,\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            isPremiumProcessing: props.isPremiumProcessing,\r\n            taskDetails: [currentTaskDetails],\r\n            submitHandler: (data) => {\r\n              props.handlers.refreshTasksGrid();\r\n              if (props.isPremiumProcessing) {\r\n                props.handlers.premiumProcessingSaveAssignee(data.premiumProcessingSaveAssigneeResponse);\r\n              }\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <TasksProcessingTableRowView\r\n      {...props}\r\n      taskActionItems={taskActionItems}\r\n      isPremiumProcessing={props.isPremiumProcessing}\r\n      caseTaskTypeView={caseTaskTypeView}\r\n      selectedTaskItemLength={selectedTaskItemLength}\r\n      handlers={{\r\n        selectTask: props.handlers.selectTask,\r\n        clickTask,\r\n        reAssignTask,\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}