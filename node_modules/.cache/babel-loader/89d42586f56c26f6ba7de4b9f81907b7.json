{"ast":null,"code":"var _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ModellingList\\\\ModellingList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router';\nimport PropTypes from 'prop-types'; // app\n\nimport { ModellingListView } from './ModellingList.view';\nimport { getModellingList, resetModellingList, selectModellingList, showModal, selectModellingTask, selectPlacement } from 'stores';\nimport { usePagination } from 'hooks';\nimport * as constants from 'consts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModellingList.propTypes = {\n  displayAutocomplete: PropTypes.bool\n};\nexport function ModellingList(_ref) {\n  _s();\n\n  var displayAutocomplete = _ref.displayAutocomplete;\n\n  var _useParams = useParams(),\n      id = _useParams.id;\n\n  var dispatch = useDispatch();\n  var modellingTask = useSelector(selectModellingTask) || {};\n  var modellingList = useSelector(selectModellingList) || {};\n  var selectedPlacement = useSelector(selectPlacement) || {};\n  var paginationObj = {\n    page: modellingList.page - 1,\n    rowsTotal: modellingList.itemsTotal,\n    rowsPerPage: modellingList.pageSize\n  };\n  useEffect(function () {\n    dispatch(getModellingList(id));\n    return function () {\n      return dispatch(resetModellingList());\n    };\n  }, [modellingTask] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  var handleChangePage = function handleChangePage(newPage) {\n    dispatch(getModellingList(id, {\n      page: newPage + 1\n    }));\n  };\n\n  var handleChangeRowsPerPage = function handleChangeRowsPerPage(rowsPerPage) {\n    dispatch(getModellingList(id, {\n      size: rowsPerPage\n    }));\n  };\n\n  var handleCreateModelTask = function handleCreateModelTask() {\n    dispatch(showModal({\n      component: 'MODELLING_TASK',\n      props: {\n        title: 'placement.modelling.create',\n        maxWidth: 'md',\n        fullWidth: true,\n        disableAutoFocus: true,\n        componentProps: {\n          insureds: selectedPlacement.insureds,\n          displayAutocomplete: displayAutocomplete\n        }\n      }\n    }));\n  };\n\n  var handleUpdateModellingTask = function handleUpdateModellingTask(modellingTask) {\n    dispatch(showModal({\n      component: 'MODELLING_TASK',\n      props: {\n        title: 'placement.modelling.update',\n        maxWidth: 'md',\n        fullWidth: true,\n        disableAutoFocus: true,\n        componentProps: {\n          modellingTask: modellingTask,\n          insureds: selectedPlacement.insureds,\n          displayAutocomplete: displayAutocomplete\n        }\n      }\n    }));\n  };\n\n  var pagination = usePagination(modellingList.items, paginationObj, handleChangePage, handleChangeRowsPerPage);\n  var popoverActions = [{\n    id: 'edit-modelling-task',\n    label: 'placement.modelling.editDetails',\n    callback: function callback(_ref2) {\n      var modellingTask = _ref2.modellingTask;\n      return handleUpdateModellingTask(modellingTask);\n    }\n  }, {\n    id: 'add-documents',\n    label: 'placement.modelling.addDocument',\n    callback: function callback(_ref3) {\n      var modellingTask = _ref3.modellingTask;\n      return handleUploadDocument(modellingTask);\n    }\n  }];\n\n  var handleUploadDocument = function handleUploadDocument(modellingTask) {\n    dispatch(showModal({\n      component: 'DOCUMENT_UPLOAD',\n      props: {\n        title: 'documents.upload.modal.title',\n        fullWidth: true,\n        maxWidth: 'sm',\n        disableAutoFocus: true,\n        componentProps: {\n          documentType: constants.FOLDER_MODELLING,\n          documentTypeId: modellingTask.id\n        }\n      }\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(ModellingListView, {\n    placementId: selectedPlacement.id,\n    modellingList: modellingList.items,\n    sort: {\n      by: modellingList.sortBy,\n      type: modellingList.sortType,\n      direction: modellingList.sortDirection\n    },\n    popoverActions: popoverActions,\n    pagination: pagination.obj,\n    handleChangePage: pagination.handlers.handleChangePage,\n    handleChangeRowsPerPage: pagination.handlers.handleChangeRowsPerPage,\n    handleCreateModelTask: handleCreateModelTask\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ModellingList, \"nZ64SRUX7znP25o5oo+Nahq0FZc=\", false, function () {\n  return [useParams, useDispatch, useSelector, useSelector, useSelector, usePagination];\n});\n\n_c = ModellingList;\nexport default ModellingList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModellingList\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ModellingList/ModellingList.js"],"names":["React","useEffect","useDispatch","useSelector","useParams","PropTypes","ModellingListView","getModellingList","resetModellingList","selectModellingList","showModal","selectModellingTask","selectPlacement","usePagination","constants","ModellingList","propTypes","displayAutocomplete","bool","id","dispatch","modellingTask","modellingList","selectedPlacement","paginationObj","page","rowsTotal","itemsTotal","rowsPerPage","pageSize","handleChangePage","newPage","handleChangeRowsPerPage","size","handleCreateModelTask","component","props","title","maxWidth","fullWidth","disableAutoFocus","componentProps","insureds","handleUpdateModellingTask","pagination","items","popoverActions","label","callback","handleUploadDocument","documentType","FOLDER_MODELLING","documentTypeId","by","sortBy","type","sortType","direction","sortDirection","obj","handlers"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router';\r\nimport PropTypes from 'prop-types';\r\n\r\n// app\r\nimport { ModellingListView } from './ModellingList.view';\r\nimport { getModellingList, resetModellingList, selectModellingList, showModal, selectModellingTask, selectPlacement } from 'stores';\r\nimport { usePagination } from 'hooks';\r\nimport * as constants from 'consts';\r\n\r\nModellingList.propTypes = {\r\n  displayAutocomplete: PropTypes.bool,\r\n};\r\n\r\nexport function ModellingList({ displayAutocomplete }) {\r\n  const { id } = useParams();\r\n  const dispatch = useDispatch();\r\n  const modellingTask = useSelector(selectModellingTask) || {};\r\n  const modellingList = useSelector(selectModellingList) || {};\r\n  const selectedPlacement = useSelector(selectPlacement) || {};\r\n  const paginationObj = {\r\n    page: modellingList.page - 1,\r\n    rowsTotal: modellingList.itemsTotal,\r\n    rowsPerPage: modellingList.pageSize,\r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n      dispatch(getModellingList(id));\r\n      return () => dispatch(resetModellingList());\r\n    },\r\n    [modellingTask] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  const handleChangePage = (newPage) => {\r\n    dispatch(getModellingList(id, { page: newPage + 1 }));\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (rowsPerPage) => {\r\n    dispatch(getModellingList(id, { size: rowsPerPage }));\r\n  };\r\n\r\n  const handleCreateModelTask = () => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'MODELLING_TASK',\r\n        props: {\r\n          title: 'placement.modelling.create',\r\n          maxWidth: 'md',\r\n          fullWidth: true,\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            insureds: selectedPlacement.insureds,\r\n            displayAutocomplete,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleUpdateModellingTask = (modellingTask) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'MODELLING_TASK',\r\n        props: {\r\n          title: 'placement.modelling.update',\r\n          maxWidth: 'md',\r\n          fullWidth: true,\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            modellingTask,\r\n            insureds: selectedPlacement.insureds,\r\n            displayAutocomplete,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const pagination = usePagination(modellingList.items, paginationObj, handleChangePage, handleChangeRowsPerPage);\r\n\r\n  const popoverActions = [\r\n    {\r\n      id: 'edit-modelling-task',\r\n      label: 'placement.modelling.editDetails',\r\n      callback: ({ modellingTask }) => handleUpdateModellingTask(modellingTask),\r\n    },\r\n    {\r\n      id: 'add-documents',\r\n      label: 'placement.modelling.addDocument',\r\n      callback: ({ modellingTask }) => handleUploadDocument(modellingTask),\r\n    },\r\n  ];\r\n\r\n  const handleUploadDocument = (modellingTask) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'DOCUMENT_UPLOAD',\r\n        props: {\r\n          title: 'documents.upload.modal.title',\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            documentType: constants.FOLDER_MODELLING,\r\n            documentTypeId: modellingTask.id,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <ModellingListView\r\n      placementId={selectedPlacement.id}\r\n      modellingList={modellingList.items}\r\n      sort={{\r\n        by: modellingList.sortBy,\r\n        type: modellingList.sortType,\r\n        direction: modellingList.sortDirection,\r\n      }}\r\n      popoverActions={popoverActions}\r\n      pagination={pagination.obj}\r\n      handleChangePage={pagination.handlers.handleChangePage}\r\n      handleChangeRowsPerPage={pagination.handlers.handleChangeRowsPerPage}\r\n      handleCreateModelTask={handleCreateModelTask}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ModellingList;\r\n"]},"metadata":{},"sourceType":"module"}