{"ast":null,"code":"var featuresPropsCheck = function featuresPropsCheck(type) {\n  return function (props, propName, componentName) {\n    var otherType = type === 'feature' ? 'route' : 'feature';\n\n    if (!props[propName] && !props[otherType]) {\n      return new Error(\"Prop 'feature' or 'route' is required by '\".concat(componentName, \"' component.\"));\n    }\n\n    if (props[propName]) {\n      var errorMsg = '';\n\n      if (props[otherType]) {\n        return new Error(\"'\".concat(componentName, \"' only expects one of props 'feature' and 'route'. Please only assign prop 'feature' or 'route', not both.\"));\n      }\n\n      if (typeof props[propName] !== 'string') {\n        return new Error(\"Invalid prop '\".concat(propName, \"' of type '\").concat(typeof props[propName], \"' supplied to '\").concat(componentName, \"', expected 'string'.\"));\n      }\n\n      if (type === 'feature' && !props['permissions']) {\n        return new Error(\"Prop 'permissions' is required by '\".concat(componentName, \"' component when prop 'feature' is defined.\"));\n      }\n\n      if (type === 'route' && props['permissions']) {\n        return new Error(\"Prop 'permissions' is not required by '\".concat(componentName, \"' component when prop 'route' is defined.\"));\n      }\n\n      if (errorMsg) {\n        return new Error(errorMsg);\n      }\n    }\n\n    return null;\n  };\n};\n\nexport default featuresPropsCheck;","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/AccessControl/AccessControl.props.js"],"names":["featuresPropsCheck","type","props","propName","componentName","otherType","Error","errorMsg"],"mappings":"AAAA,IAAMA,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,IAAD;AAAA,SAAU,UAACC,KAAD,EAAQC,QAAR,EAAkBC,aAAlB,EAAoC;AACvE,QAAMC,SAAS,GAAGJ,IAAI,KAAK,SAAT,GAAqB,OAArB,GAA+B,SAAjD;;AAEA,QAAI,CAACC,KAAK,CAACC,QAAD,CAAN,IAAoB,CAACD,KAAK,CAACG,SAAD,CAA9B,EAA2C;AACzC,aAAO,IAAIC,KAAJ,qDAAuDF,aAAvD,kBAAP;AACD;;AAED,QAAIF,KAAK,CAACC,QAAD,CAAT,EAAqB;AACnB,UAAII,QAAQ,GAAG,EAAf;;AAEA,UAAIL,KAAK,CAACG,SAAD,CAAT,EAAsB;AACpB,eAAO,IAAIC,KAAJ,YACDF,aADC,gHAAP;AAGD;;AAED,UAAI,OAAOF,KAAK,CAACC,QAAD,CAAZ,KAA2B,QAA/B,EAAyC;AACvC,eAAO,IAAIG,KAAJ,yBAA2BH,QAA3B,wBAAiD,OAAOD,KAAK,CAACC,QAAD,CAA7D,4BAAyFC,aAAzF,2BAAP;AACD;;AAED,UAAIH,IAAI,KAAK,SAAT,IAAsB,CAACC,KAAK,CAAC,aAAD,CAAhC,EAAiD;AAC/C,eAAO,IAAII,KAAJ,8CAAgDF,aAAhD,iDAAP;AACD;;AAED,UAAIH,IAAI,KAAK,OAAT,IAAoBC,KAAK,CAAC,aAAD,CAA7B,EAA8C;AAC5C,eAAO,IAAII,KAAJ,kDAAoDF,aAApD,+CAAP;AACD;;AAED,UAAIG,QAAJ,EAAc;AACZ,eAAO,IAAID,KAAJ,CAAUC,QAAV,CAAP;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAjC0B;AAAA,CAA3B;;AAmCA,eAAeP,kBAAf","sourcesContent":["const featuresPropsCheck = (type) => (props, propName, componentName) => {\r\n  const otherType = type === 'feature' ? 'route' : 'feature';\r\n\r\n  if (!props[propName] && !props[otherType]) {\r\n    return new Error(`Prop 'feature' or 'route' is required by '${componentName}' component.`);\r\n  }\r\n\r\n  if (props[propName]) {\r\n    let errorMsg = '';\r\n\r\n    if (props[otherType]) {\r\n      return new Error(\r\n        `'${componentName}' only expects one of props 'feature' and 'route'. Please only assign prop 'feature' or 'route', not both.`\r\n      );\r\n    }\r\n\r\n    if (typeof props[propName] !== 'string') {\r\n      return new Error(`Invalid prop '${propName}' of type '${typeof props[propName]}' supplied to '${componentName}', expected 'string'.`);\r\n    }\r\n\r\n    if (type === 'feature' && !props['permissions']) {\r\n      return new Error(`Prop 'permissions' is required by '${componentName}' component when prop 'feature' is defined.`);\r\n    }\r\n\r\n    if (type === 'route' && props['permissions']) {\r\n      return new Error(`Prop 'permissions' is not required by '${componentName}' component when prop 'route' is defined.`);\r\n    }\r\n\r\n    if (errorMsg) {\r\n      return new Error(errorMsg);\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\nexport default featuresPropsCheck;\r\n"]},"metadata":{},"sourceType":"module"}