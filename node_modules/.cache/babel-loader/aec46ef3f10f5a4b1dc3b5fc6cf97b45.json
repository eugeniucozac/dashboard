{"ast":null,"code":"import { addLoader, removeLoader, enqueueNotification, savedInsuredData, authLogout } from 'stores';\nimport * as utils from 'utils';\nimport get from 'lodash/get';\nexport var postSaveComplexityAddInsured = function postSaveComplexityAddInsured() {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint,\n        claims = _getState.claims;\n\n    var defaultError = {\n      file: 'stores/claims.actions.postSaveComplexityAddInsured'\n    };\n    dispatch(postSaveComplexityAddInsuredRequest());\n    dispatch(addLoader('postSaveComplexityInsuredPolicy'));\n    var insuredData = [],\n        selectedInsuredData = [];\n    var getInsuredData = get(claims, 'complexInsured.selectedComplexityInsured') || [];\n    getInsuredData.forEach(function (item) {\n      if (item.checkedType) {\n        insuredData.push({\n          isActive: '1',\n          policyID: item.insured.xbPolicyID,\n          sourceID: item.insured.xbInstanceID,\n          attributeType: 'insured',\n          attributeValue: item.insured.attributeValue\n        });\n        selectedInsuredData.push(item.insured);\n      }\n    });\n    var data = insuredData;\n    dispatch(savedInsuredData(selectedInsuredData));\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.claimService,\n      path: 'api/data/claims-triage/complex/insured/save',\n      data: data\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (data) {\n      dispatch(postSaveComplexityAddInsuredSuccess(data.data));\n      dispatch(enqueueNotification('notification.complexityInsuredInformation.success', 'success'));\n      return data;\n    })[\"catch\"](function (err) {\n      dispatch(postSaveComplexityAddInsuredFailure(err, defaultError));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      return err;\n    })[\"finally\"](function () {\n      dispatch(removeLoader('postSaveComplexityInsuredPolicy'));\n    });\n  };\n};\nexport var postSaveComplexityAddInsuredRequest = function postSaveComplexityAddInsuredRequest(data) {\n  return {\n    type: 'CLAIMS_SAVE_COMPLEXITY_POLICY_POST_REQUEST',\n    payload: data\n  };\n};\nexport var postSaveComplexityAddInsuredSuccess = function postSaveComplexityAddInsuredSuccess(data) {\n  return {\n    type: 'CLAIMS_SAVE_COMPLEXITY_INSURED_POST_SUCCESS',\n    payload: data\n  };\n};\nexport var postSaveComplexityAddInsuredFailure = function postSaveComplexityAddInsuredFailure(data) {\n  return {\n    type: 'CLAIMS_SAVE_COMPLEXITY_INSURED_POST_ERROR',\n    payload: data\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.postSaveComplexityAddInsured.js"],"names":["addLoader","removeLoader","enqueueNotification","savedInsuredData","authLogout","utils","get","postSaveComplexityAddInsured","dispatch","getState","auth","user","endpoint","config","vars","claims","defaultError","file","postSaveComplexityAddInsuredRequest","insuredData","selectedInsuredData","getInsuredData","forEach","item","checkedType","push","isActive","policyID","insured","xbPolicyID","sourceID","xbInstanceID","attributeType","attributeValue","data","api","post","token","accessToken","claimService","path","then","response","handleResponse","postSaveComplexityAddInsuredSuccess","err","postSaveComplexityAddInsuredFailure","handleUnauthorized","type","payload"],"mappings":"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","sourcesContent":["import { addLoader, removeLoader, enqueueNotification, savedInsuredData, authLogout } from 'stores';\r\nimport * as utils from 'utils';\r\nimport get from 'lodash/get';\r\n\r\nexport const postSaveComplexityAddInsured = () => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}, claims} = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.postSaveComplexityAddInsured',\r\n  };\r\n\r\n  dispatch(postSaveComplexityAddInsuredRequest());\r\n  dispatch(addLoader('postSaveComplexityInsuredPolicy'));\r\n\r\n  const insuredData = [],\r\n    selectedInsuredData = [];\r\n  const getInsuredData = get(claims, 'complexInsured.selectedComplexityInsured') || [];\r\n  getInsuredData.forEach((item) => {\r\n    if (item.checkedType) {\r\n      insuredData.push({\r\n        isActive: '1',\r\n        policyID: item.insured.xbPolicyID,\r\n        sourceID: item.insured.xbInstanceID,\r\n        attributeType: 'insured',\r\n        attributeValue: item.insured.attributeValue,\r\n      });\r\n      selectedInsuredData.push(item.insured);\r\n    }\r\n  });\r\n\r\n  const data = insuredData;\r\n  dispatch(savedInsuredData(selectedInsuredData));\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.claimService,\r\n      path: 'api/data/claims-triage/complex/insured/save',\r\n      data,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((data) => {\r\n      dispatch(postSaveComplexityAddInsuredSuccess(data.data));\r\n      dispatch(enqueueNotification('notification.complexityInsuredInformation.success', 'success'));\r\n      return data;\r\n    })\r\n    .catch((err) => {\r\n      dispatch(postSaveComplexityAddInsuredFailure(err, defaultError));\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('postSaveComplexityInsuredPolicy'));\r\n    });\r\n};\r\n\r\nexport const postSaveComplexityAddInsuredRequest = (data) => {\r\n  return {\r\n    type: 'CLAIMS_SAVE_COMPLEXITY_POLICY_POST_REQUEST',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const postSaveComplexityAddInsuredSuccess = (data) => {\r\n  return {\r\n    type: 'CLAIMS_SAVE_COMPLEXITY_INSURED_POST_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const postSaveComplexityAddInsuredFailure = (data) => {\r\n  return {\r\n    type: 'CLAIMS_SAVE_COMPLEXITY_INSURED_POST_ERROR',\r\n    payload: data,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}