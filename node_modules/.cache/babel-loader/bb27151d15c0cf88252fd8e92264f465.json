{"ast":null,"code":"import _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\pages\\\\ClaimDashboard\\\\ClaimDashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory, useParams, useLocation } from 'react-router'; // app\n\nimport { ClaimDashboardView } from './ClaimDashboard.view';\nimport { selectClaimsTabRowSelected, showModal, hideModal, setClaimsStepperControl } from 'stores';\nimport { STATUS_CLAIMS_DRAFT, STATUS_CLAIMS_GXBSYNCED } from 'consts';\nimport * as utils from 'utils';\nimport config from 'config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ClaimDashboard() {\n  _s();\n\n  var history = useHistory();\n  var dispatch = useDispatch();\n  var location = useLocation();\n  var params = useParams();\n  var isFormDirtyRef = useRef(false); // NOTE:\n  // leaving some of the commented code for when these features\n  //  are re-enabled possibly in the near future\n  // const user = useSelector((state) => state.user);\n  // const isUsersClaim = useSelector(selectIsUserClaim);\n  // const isClosedClaim = useSelector(selectIsClosedClaim);\n  // const isTeamClaim = useSelector(selectIsTeamClaim);\n\n  var claimsRowSelected = useSelector(selectClaimsTabRowSelected);\n\n  var _useState = useState((params === null || params === void 0 ? void 0 : params.tab) || 'claimRefDetail'),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedTab = _useState2[0],\n      setSelectedTab = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      checkRedirectLocation = _useState4[0],\n      setCheckRedirectLocation = _useState4[1];\n\n  var _useState5 = useState({}),\n      _useState6 = _slicedToArray(_useState5, 2),\n      claimRefFromLossObj = _useState6[0],\n      setClaimRefFromLossObj = _useState6[1];\n\n  var claimSelected = claimsRowSelected === null || claimsRowSelected === void 0 ? void 0 : claimsRowSelected[0]; // const userHasAllClaimsPermission = utils.app.access.feature('claimsProcessing.allClaims', ['read', 'create', 'update'], user);\n\n  var setCheckPage = function setCheckPage(val, associateClaimData, lossRef) {\n    setCheckRedirectLocation(val);\n    setClaimRefFromLossObj({\n      claimID: associateClaimData === null || associateClaimData === void 0 ? void 0 : associateClaimData.claimID,\n      claimRef: associateClaimData === null || associateClaimData === void 0 ? void 0 : associateClaimData.claimReference,\n      lossRef: lossRef,\n      sourceId: associateClaimData === null || associateClaimData === void 0 ? void 0 : associateClaimData.sourceID,\n      policyId: associateClaimData === null || associateClaimData === void 0 ? void 0 : associateClaimData.xbPolicyID\n    });\n\n    if (associateClaimData === null || associateClaimData === void 0 ? void 0 : associateClaimData.claimReference) {\n      history.push(\"\".concat(config.routes.claimsProcessing.claim, \"/\").concat(associateClaimData === null || associateClaimData === void 0 ? void 0 : associateClaimData.claimReference));\n    }\n  };\n\n  useEffect(function () {\n    if ((claimsRowSelected === null || claimsRowSelected === void 0 ? void 0 : claimsRowSelected.length) !== 1 || !(claimSelected === null || claimSelected === void 0 ? void 0 : claimSelected.claimReference)) {\n      history.replace(config.routes.claimsFNOL.root);\n    }\n  }, [history, claimsRowSelected]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var handleSelectTab = function handleSelectTab(tabName) {\n    setSelectedTab(tabName);\n  };\n\n  var setIsFormDirty = function setIsFormDirty(isDirty) {\n    isFormDirtyRef.current = isDirty;\n  };\n\n  var handleTabDisabled = function handleTabDisabled(claimStatus) {\n    return claimStatus === STATUS_CLAIMS_GXBSYNCED;\n  };\n\n  var confirmHideModal = function confirmHideModal(modalName) {\n    if (isFormDirtyRef.current) {\n      dispatch(showModal({\n        component: 'CONFIRM',\n        props: {\n          title: utils.string.t('navigation.form.subtitle'),\n          hint: utils.string.t('navigation.form.title'),\n          fullWidth: true,\n          maxWidth: 'xs',\n          componentProps: {\n            cancelLabel: utils.string.t('app.no'),\n            confirmLabel: utils.string.t('app.yes'),\n            submitHandler: function submitHandler() {\n              dispatch(hideModal(modalName));\n            }\n          }\n        }\n      }));\n    } else {\n      dispatch(hideModal(modalName));\n    }\n  };\n  /*\r\n  const handleReassignClaim = (claim) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'SINGLE_ASSIGN_CLAIM',\r\n        props: {\r\n          title: 'claims.processing.bulkAssign.title',\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          hideCompOnBlur: false,\r\n          componentProps: {\r\n            claimsProcessingSelected: [claim],\r\n            setIsDirty: setIsFormDirty,\r\n            clickXHandler: () => {\r\n              confirmHideModal('SINGLE_ASSIGN_CLAIM');\r\n            },\r\n            cancelHandler: () => {\r\n              confirmHideModal('SINGLE_ASSIGN_CLAIM');\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n  */\n\n\n  var handleChangeComplexityPriorityAssignmentClaim = function handleChangeComplexityPriorityAssignmentClaim(claim) {\n    dispatch(showModal({\n      component: 'CHANGE_COMPLEXITY_PRIORITY_ASSIGNMENT',\n      props: {\n        title: 'claims.processing.summary.buttons.changeComplexityPriorityAssignment',\n        fullWidth: true,\n        maxWidth: 'sm',\n        hideCompOnBlur: false,\n        componentProps: {\n          claimsProcessingSelected: [claim],\n          setIsDirty: setIsFormDirty,\n          clickXHandler: function clickXHandler() {\n            confirmHideModal('CHANGE_COMPLEXITY_PRIORITY_ASSIGNMENT');\n          },\n          cancelHandler: function cancelHandler() {\n            confirmHideModal('CHANGE_COMPLEXITY_PRIORITY_ASSIGNMENT');\n          }\n        }\n      }\n    }));\n  };\n\n  var handleCreateRFIModal = function handleCreateRFIModal(claim) {\n    dispatch(showModal({\n      component: 'CREATE_RFI',\n      props: {\n        title: utils.string.t('claims.processing.taskFunction.createRFI'),\n        hideCompOnBlur: false,\n        fullWidth: true,\n        maxWidth: 'md',\n        disableAutoFocus: true,\n        componentProps: {\n          claim: claim,\n          cancelHandler: function cancelHandler() {\n            dispatch(hideModal());\n          }\n        }\n      }\n    }));\n  };\n\n  var handleCreateAdhocTask = function handleCreateAdhocTask(claim) {\n    dispatch(showModal({\n      component: 'CREATE_AD_HOC_TASK',\n      props: {\n        title: utils.string.t('claims.processing.taskFunction.createAdhocTask'),\n        hideCompOnBlur: false,\n        fullWidth: true,\n        maxWidth: 'md',\n        disableAutoFocus: true,\n        componentProps: {\n          claim: claim,\n          cancelHandler: function cancelHandler() {\n            dispatch(hideModal());\n          }\n        }\n      }\n    }));\n  };\n\n  var handleEditClaim = function handleEditClaim(claim) {\n    dispatch(setClaimsStepperControl(1));\n    history.push({\n      pathname: \"\".concat(config.routes.claimsFNOL.newLoss),\n      state: {\n        linkPolicy: {\n          isSearchTerm: '',\n          claim: claim\n        },\n        redirectUrl: location === null || location === void 0 ? void 0 : location.pathname\n      }\n    });\n  };\n\n  var popoverItems = [{\n    id: 'editClaim',\n    label: utils.string.t('claims.processing.summary.buttons.editClaim'),\n    disabled: (claimSelected === null || claimSelected === void 0 ? void 0 : claimSelected.claimStatus) === STATUS_CLAIMS_DRAFT,\n    //isClosedClaim || !(userHasAllClaimsPermission && isTeamClaim),\n    callback: function callback() {\n      return handleEditClaim(claimSelected);\n    }\n  }, {\n    id: 'changeComplexityPriorityAssignment',\n    label: utils.string.t('claims.processing.summary.buttons.changeComplexityPriorityAssignment'),\n    callback: function callback() {\n      return handleChangeComplexityPriorityAssignmentClaim(claimSelected);\n    }\n  }, {\n    id: 'createRFI',\n    label: utils.string.t('claims.processing.summary.buttons.createNewRFI'),\n    disabled: true,\n    //isClosedClaim,\n    callback: function callback() {\n      return handleCreateRFIModal(claimSelected);\n    }\n  }, {\n    id: 'createAdhocTask',\n    label: utils.string.t('claims.processing.summary.buttons.createTask'),\n    disabled: true,\n    //isClosedClaim || !isUsersClaim,\n    callback: function callback() {\n      return handleCreateAdhocTask(claimSelected);\n    }\n  }];\n  var breadcrumbs = [{\n    name: 'claimsFnol',\n    label: utils.string.t('loss.title'),\n    link: config.routes.claimsFNOL.root\n  }, {\n    name: 'lossRef',\n    label: \"\".concat(utils.string.t('loss.text', {\n      lossRef: claimSelected === null || claimSelected === void 0 ? void 0 : claimSelected.lossRef\n    })),\n    link: \"\".concat(config.routes.claimsFNOL.loss, \"/\").concat(!checkRedirectLocation ? claimSelected === null || claimSelected === void 0 ? void 0 : claimSelected.claimRef : claimRefFromLossObj === null || claimRefFromLossObj === void 0 ? void 0 : claimRefFromLossObj.claimRef),\n    active: true\n  }, {\n    name: 'claimRef',\n    label: \"\".concat(utils.string.t('claims.claimRef.text', {\n      claimRef: claimSelected === null || claimSelected === void 0 ? void 0 : claimSelected.claimRef\n    })),\n    link: \"\".concat(config.routes.claimsFNOL.claim, \"/\").concat(claimSelected === null || claimSelected === void 0 ? void 0 : claimSelected.claimRef),\n    active: true\n  }];\n  var tabs = [{\n    value: 'claimRefDetail',\n    disabled: false,\n    label: utils.string.t('claims.claimRef.detail')\n  }, {\n    value: 'claimRefActions',\n    disabled: handleTabDisabled(claimSelected === null || claimSelected === void 0 ? void 0 : claimSelected.claimStatus),\n    label: utils.string.t('claims.claimRef.actions')\n  }, {\n    value: 'claimRefDocs',\n    disabled: false,\n    label: utils.string.t('claims.claimRef.docs')\n  }, {\n    value: 'claimRefNotes',\n    disabled: handleTabDisabled(claimSelected === null || claimSelected === void 0 ? void 0 : claimSelected.claimStatus),\n    label: utils.string.t('claims.claimRef.notes')\n  }, {\n    value: 'claimRefAuditTrail',\n    disabled: handleTabDisabled(claimSelected === null || claimSelected === void 0 ? void 0 : claimSelected.claimStatus),\n    label: utils.string.t('claims.claimRef.auditTrail')\n  }]; // abort\n\n  if (!utils.generic.isValidObject(claimSelected, 'claimReference')) return null;\n  return /*#__PURE__*/_jsxDEV(ClaimDashboardView, {\n    tabs: tabs,\n    selectedTab: selectedTab,\n    handleSelectTab: handleSelectTab,\n    popoverItems: popoverItems,\n    claimObj: claimSelected,\n    claimRefFromLossObj: claimRefFromLossObj,\n    breadcrumbs: breadcrumbs,\n    setCheckPage: setCheckPage,\n    checkRedirectLocation: checkRedirectLocation\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 264,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ClaimDashboard, \"bzZ+X6WPy1bKBXzFQbZuHKhHRms=\", false, function () {\n  return [useHistory, useDispatch, useLocation, useParams, useSelector];\n});\n\n_c = ClaimDashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimDashboard\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/pages/ClaimDashboard/ClaimDashboard.js"],"names":["React","useEffect","useState","useRef","useSelector","useDispatch","useHistory","useParams","useLocation","ClaimDashboardView","selectClaimsTabRowSelected","showModal","hideModal","setClaimsStepperControl","STATUS_CLAIMS_DRAFT","STATUS_CLAIMS_GXBSYNCED","utils","config","ClaimDashboard","history","dispatch","location","params","isFormDirtyRef","claimsRowSelected","tab","selectedTab","setSelectedTab","checkRedirectLocation","setCheckRedirectLocation","claimRefFromLossObj","setClaimRefFromLossObj","claimSelected","setCheckPage","val","associateClaimData","lossRef","claimID","claimRef","claimReference","sourceId","sourceID","policyId","xbPolicyID","push","routes","claimsProcessing","claim","length","replace","claimsFNOL","root","handleSelectTab","tabName","setIsFormDirty","isDirty","current","handleTabDisabled","claimStatus","confirmHideModal","modalName","component","props","title","string","t","hint","fullWidth","maxWidth","componentProps","cancelLabel","confirmLabel","submitHandler","handleChangeComplexityPriorityAssignmentClaim","hideCompOnBlur","claimsProcessingSelected","setIsDirty","clickXHandler","cancelHandler","handleCreateRFIModal","disableAutoFocus","handleCreateAdhocTask","handleEditClaim","pathname","newLoss","state","linkPolicy","isSearchTerm","redirectUrl","popoverItems","id","label","disabled","callback","breadcrumbs","name","link","loss","active","tabs","value","generic","isValidObject"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useHistory, useParams, useLocation } from 'react-router';\r\n\r\n// app\r\nimport { ClaimDashboardView } from './ClaimDashboard.view';\r\nimport { selectClaimsTabRowSelected, showModal, hideModal, setClaimsStepperControl } from 'stores';\r\nimport { STATUS_CLAIMS_DRAFT, STATUS_CLAIMS_GXBSYNCED } from 'consts';\r\nimport * as utils from 'utils';\r\nimport config from 'config';\r\n\r\nexport default function ClaimDashboard() {\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  const location = useLocation();\r\n  const params = useParams();\r\n\r\n  const isFormDirtyRef = useRef(false);\r\n\r\n  // NOTE:\r\n  // leaving some of the commented code for when these features\r\n  //  are re-enabled possibly in the near future\r\n\r\n  // const user = useSelector((state) => state.user);\r\n  // const isUsersClaim = useSelector(selectIsUserClaim);\r\n  // const isClosedClaim = useSelector(selectIsClosedClaim);\r\n  // const isTeamClaim = useSelector(selectIsTeamClaim);\r\n  const claimsRowSelected = useSelector(selectClaimsTabRowSelected);\r\n\r\n  const [selectedTab, setSelectedTab] = useState(params?.tab || 'claimRefDetail');\r\n  const [checkRedirectLocation, setCheckRedirectLocation] = useState(false);\r\n  const [claimRefFromLossObj, setClaimRefFromLossObj] = useState({});\r\n\r\n  const claimSelected = claimsRowSelected?.[0];\r\n  // const userHasAllClaimsPermission = utils.app.access.feature('claimsProcessing.allClaims', ['read', 'create', 'update'], user);\r\n\r\n  const setCheckPage = (val, associateClaimData, lossRef) => {\r\n    setCheckRedirectLocation(val);\r\n    setClaimRefFromLossObj({\r\n      claimID: associateClaimData?.claimID,\r\n      claimRef: associateClaimData?.claimReference,\r\n      lossRef: lossRef,\r\n      sourceId: associateClaimData?.sourceID,\r\n      policyId: associateClaimData?.xbPolicyID,\r\n    });\r\n    if (associateClaimData?.claimReference) {\r\n      history.push(`${config.routes.claimsProcessing.claim}/${associateClaimData?.claimReference}`);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (claimsRowSelected?.length !== 1 || !claimSelected?.claimReference) {\r\n      history.replace(config.routes.claimsFNOL.root);\r\n    }\r\n  }, [history, claimsRowSelected]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const handleSelectTab = (tabName) => {\r\n    setSelectedTab(tabName);\r\n  };\r\n\r\n  const setIsFormDirty = (isDirty) => {\r\n    isFormDirtyRef.current = isDirty;\r\n  };\r\n\r\n  const handleTabDisabled = (claimStatus) => {\r\n    return claimStatus === STATUS_CLAIMS_GXBSYNCED;\r\n  };\r\n\r\n  const confirmHideModal = (modalName) => {\r\n    if (isFormDirtyRef.current) {\r\n      dispatch(\r\n        showModal({\r\n          component: 'CONFIRM',\r\n          props: {\r\n            title: utils.string.t('navigation.form.subtitle'),\r\n            hint: utils.string.t('navigation.form.title'),\r\n            fullWidth: true,\r\n            maxWidth: 'xs',\r\n            componentProps: {\r\n              cancelLabel: utils.string.t('app.no'),\r\n              confirmLabel: utils.string.t('app.yes'),\r\n              submitHandler: () => {\r\n                dispatch(hideModal(modalName));\r\n              },\r\n            },\r\n          },\r\n        })\r\n      );\r\n    } else {\r\n      dispatch(hideModal(modalName));\r\n    }\r\n  };\r\n  /*\r\n  const handleReassignClaim = (claim) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'SINGLE_ASSIGN_CLAIM',\r\n        props: {\r\n          title: 'claims.processing.bulkAssign.title',\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          hideCompOnBlur: false,\r\n          componentProps: {\r\n            claimsProcessingSelected: [claim],\r\n            setIsDirty: setIsFormDirty,\r\n            clickXHandler: () => {\r\n              confirmHideModal('SINGLE_ASSIGN_CLAIM');\r\n            },\r\n            cancelHandler: () => {\r\n              confirmHideModal('SINGLE_ASSIGN_CLAIM');\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n*/\r\n  const handleChangeComplexityPriorityAssignmentClaim = (claim) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CHANGE_COMPLEXITY_PRIORITY_ASSIGNMENT',\r\n        props: {\r\n          title: 'claims.processing.summary.buttons.changeComplexityPriorityAssignment',\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          hideCompOnBlur: false,\r\n          componentProps: {\r\n            claimsProcessingSelected: [claim],\r\n            setIsDirty: setIsFormDirty,\r\n            clickXHandler: () => {\r\n              confirmHideModal('CHANGE_COMPLEXITY_PRIORITY_ASSIGNMENT');\r\n            },\r\n            cancelHandler: () => {\r\n              confirmHideModal('CHANGE_COMPLEXITY_PRIORITY_ASSIGNMENT');\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleCreateRFIModal = (claim) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CREATE_RFI',\r\n        props: {\r\n          title: utils.string.t('claims.processing.taskFunction.createRFI'),\r\n          hideCompOnBlur: false,\r\n          fullWidth: true,\r\n          maxWidth: 'md',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            claim,\r\n            cancelHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleCreateAdhocTask = (claim) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CREATE_AD_HOC_TASK',\r\n        props: {\r\n          title: utils.string.t('claims.processing.taskFunction.createAdhocTask'),\r\n          hideCompOnBlur: false,\r\n          fullWidth: true,\r\n          maxWidth: 'md',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            claim,\r\n            cancelHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleEditClaim = (claim) => {\r\n    dispatch(setClaimsStepperControl(1));\r\n    history.push({\r\n      pathname: `${config.routes.claimsFNOL.newLoss}`,\r\n      state: {\r\n        linkPolicy: {\r\n          isSearchTerm: '',\r\n          claim,\r\n        },\r\n        redirectUrl: location?.pathname,\r\n      },\r\n    });\r\n  };\r\n\r\n  const popoverItems = [\r\n    {\r\n      id: 'editClaim',\r\n      label: utils.string.t('claims.processing.summary.buttons.editClaim'),\r\n      disabled: claimSelected?.claimStatus === STATUS_CLAIMS_DRAFT, //isClosedClaim || !(userHasAllClaimsPermission && isTeamClaim),\r\n      callback: () => handleEditClaim(claimSelected),\r\n    },\r\n    {\r\n      id: 'changeComplexityPriorityAssignment',\r\n      label: utils.string.t('claims.processing.summary.buttons.changeComplexityPriorityAssignment'),\r\n      callback: () => handleChangeComplexityPriorityAssignmentClaim(claimSelected),\r\n    },\r\n    {\r\n      id: 'createRFI',\r\n      label: utils.string.t('claims.processing.summary.buttons.createNewRFI'),\r\n      disabled: true, //isClosedClaim,\r\n      callback: () => handleCreateRFIModal(claimSelected),\r\n    },\r\n    {\r\n      id: 'createAdhocTask',\r\n      label: utils.string.t('claims.processing.summary.buttons.createTask'),\r\n      disabled: true, //isClosedClaim || !isUsersClaim,\r\n      callback: () => handleCreateAdhocTask(claimSelected),\r\n    },\r\n  ];\r\n\r\n  const breadcrumbs = [\r\n    {\r\n      name: 'claimsFnol',\r\n      label: utils.string.t('loss.title'),\r\n      link: config.routes.claimsFNOL.root,\r\n    },\r\n    {\r\n      name: 'lossRef',\r\n      label: `${utils.string.t('loss.text', {\r\n        lossRef: claimSelected?.lossRef,\r\n      })}`,\r\n      link: `${config.routes.claimsFNOL.loss}/${!checkRedirectLocation ? claimSelected?.claimRef : claimRefFromLossObj?.claimRef}`,\r\n      active: true,\r\n    },\r\n    {\r\n      name: 'claimRef',\r\n      label: `${utils.string.t('claims.claimRef.text', {\r\n        claimRef: claimSelected?.claimRef,\r\n      })}`,\r\n      link: `${config.routes.claimsFNOL.claim}/${claimSelected?.claimRef}`,\r\n      active: true,\r\n    },\r\n  ];\r\n\r\n  const tabs = [\r\n    { value: 'claimRefDetail', disabled: false, label: utils.string.t('claims.claimRef.detail') },\r\n    { value: 'claimRefActions', disabled: handleTabDisabled(claimSelected?.claimStatus), label: utils.string.t('claims.claimRef.actions') },\r\n    { value: 'claimRefDocs', disabled: false, label: utils.string.t('claims.claimRef.docs') },\r\n    { value: 'claimRefNotes', disabled: handleTabDisabled(claimSelected?.claimStatus), label: utils.string.t('claims.claimRef.notes') },\r\n    {\r\n      value: 'claimRefAuditTrail',\r\n      disabled: handleTabDisabled(claimSelected?.claimStatus),\r\n      label: utils.string.t('claims.claimRef.auditTrail'),\r\n    },\r\n  ];\r\n\r\n  // abort\r\n  if (!utils.generic.isValidObject(claimSelected, 'claimReference')) return null;\r\n\r\n  return (\r\n    <ClaimDashboardView\r\n      tabs={tabs}\r\n      selectedTab={selectedTab}\r\n      handleSelectTab={handleSelectTab}\r\n      popoverItems={popoverItems}\r\n      claimObj={claimSelected}\r\n      claimRefFromLossObj={claimRefFromLossObj}\r\n      breadcrumbs={breadcrumbs}\r\n      setCheckPage={setCheckPage}\r\n      checkRedirectLocation={checkRedirectLocation}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}