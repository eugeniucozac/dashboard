{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { addLoader, authLogout, enqueueNotification, removeLoader, hideModal } from 'stores';\nimport * as utils from 'utils';\nimport isEmpty from 'lodash/isEmpty';\nexport var postFacility = function postFacility(body) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/risk.actions.postFacility',\n      message: 'Data missing for POST request'\n    };\n\n    if (!body || isEmpty(body)) {\n      dispatch(postFacilityFailure(defaultError));\n      dispatch(enqueueNotification('notification.generic.request', 'error'));\n      dispatch(removeLoader('postFacility'));\n      return;\n    }\n\n    var permissionToBindGroups = body.permissionToBindGroups,\n        permissionToDismissIssuesGroups = body.permissionToDismissIssuesGroups,\n        notifiedUsers = body.notifiedUsers,\n        rest = _objectWithoutProperties(body, [\"permissionToBindGroups\", \"permissionToDismissIssuesGroups\", \"notifiedUsers\"]);\n\n    var data = _objectSpread(_objectSpread({}, rest), {}, {\n      permissionToBindGroups: permissionToBindGroups === null || permissionToBindGroups === void 0 ? void 0 : permissionToBindGroups.map(function (prog) {\n        return prog.value;\n      }),\n      permissionToDismissIssuesGroups: permissionToDismissIssuesGroups === null || permissionToDismissIssuesGroups === void 0 ? void 0 : permissionToDismissIssuesGroups.map(function (item) {\n        return item.value;\n      }),\n      notifiedUsers: notifiedUsers.map(function (user) {\n        return {\n          name: user.name,\n          email: user.email\n        };\n      })\n    });\n\n    dispatch(postFacilityRequest(body));\n    dispatch(addLoader('postFacility'));\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.auth,\n      path: 'api/v1/facilities',\n      data: data\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (data) {\n      dispatch(postFacilitySuccess(data));\n      dispatch(enqueueNotification('notification.facility.postSuccess', 'success'));\n      return data;\n    })[\"catch\"](function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API post error (risk.postFacility)'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(postFacilityFailure(err));\n      dispatch(enqueueNotification(utils.api.getErrorMessage(err), 'error'));\n      return err;\n    })[\"finally\"](function () {\n      dispatch(hideModal());\n      dispatch(removeLoader('postFacility'));\n    });\n  };\n};\nexport var postFacilityRequest = function postFacilityRequest(formData) {\n  return {\n    type: 'RISK_FACILITIES_POST_REQUEST',\n    payload: formData\n  };\n};\nexport var postFacilitySuccess = function postFacilitySuccess(responseData) {\n  return {\n    type: 'RISK_FACILITIES_POST_SUCCESS',\n    payload: responseData\n  };\n};\nexport var postFacilityFailure = function postFacilityFailure(error) {\n  return {\n    type: 'RISK_FACILITIES_POST_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/risk/risk.actions.postFacility.js"],"names":["addLoader","authLogout","enqueueNotification","removeLoader","hideModal","utils","isEmpty","postFacility","body","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","message","postFacilityFailure","permissionToBindGroups","permissionToDismissIssuesGroups","notifiedUsers","rest","data","map","prog","value","item","name","email","postFacilityRequest","api","post","token","accessToken","path","then","response","handleResponse","postFacilitySuccess","err","errorParams","handleError","handleUnauthorized","getErrorMessage","formData","type","payload","responseData","error"],"mappings":"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","sourcesContent":["import { addLoader, authLogout, enqueueNotification, removeLoader, hideModal } from 'stores';\r\nimport * as utils from 'utils';\r\nimport isEmpty from 'lodash/isEmpty';\r\n\r\nexport const postFacility = (body) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/risk.actions.postFacility',\r\n    message: 'Data missing for POST request',\r\n  };\r\n\r\n  if (!body || isEmpty(body)) {\r\n    dispatch(postFacilityFailure(defaultError));\r\n    dispatch(enqueueNotification('notification.generic.request', 'error'));\r\n    dispatch(removeLoader('postFacility'));\r\n    return;\r\n  }\r\n  const { permissionToBindGroups, permissionToDismissIssuesGroups, notifiedUsers, ...rest } = body;\r\n\r\n  const data = {\r\n    ...rest,\r\n    permissionToBindGroups: permissionToBindGroups?.map((prog) => prog.value),\r\n    permissionToDismissIssuesGroups: permissionToDismissIssuesGroups?.map((item) => item.value),\r\n    notifiedUsers: notifiedUsers.map((user) => {\r\n      return {\r\n        name: user.name,\r\n        email: user.email,\r\n      };\r\n    }),\r\n  };\r\n\r\n  dispatch(postFacilityRequest(body));\r\n  dispatch(addLoader('postFacility'));\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.auth,\r\n      path: 'api/v1/facilities',\r\n      data,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((data) => {\r\n      dispatch(postFacilitySuccess(data));\r\n      dispatch(enqueueNotification('notification.facility.postSuccess', 'success'));\r\n      return data;\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        ...defaultError,\r\n        message: 'API post error (risk.postFacility)',\r\n      };\r\n\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(postFacilityFailure(err));\r\n      dispatch(enqueueNotification(utils.api.getErrorMessage(err), 'error'));\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(hideModal());\r\n      dispatch(removeLoader('postFacility'));\r\n    });\r\n};\r\n\r\nexport const postFacilityRequest = (formData) => {\r\n  return {\r\n    type: 'RISK_FACILITIES_POST_REQUEST',\r\n    payload: formData,\r\n  };\r\n};\r\n\r\nexport const postFacilitySuccess = (responseData) => {\r\n  return {\r\n    type: 'RISK_FACILITIES_POST_SUCCESS',\r\n    payload: responseData,\r\n  };\r\n};\r\n\r\nexport const postFacilityFailure = (error) => {\r\n  return {\r\n    type: 'RISK_FACILITIES_POST_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}