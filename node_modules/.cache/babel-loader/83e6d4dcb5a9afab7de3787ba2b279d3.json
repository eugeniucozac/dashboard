{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\components\\\\PowerBiReport\\\\PowerBiReport.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as pbi from 'powerbi-client';\nimport { useDispatch } from 'react-redux'; // app\n\nimport * as utils from 'utils';\nimport { getReportByPlacement } from 'stores';\nimport { PowerBiReportView } from './PowerBiReport.view';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar model = {\n  BackgroundType: {\n    Default: 0,\n    Transparent: 1\n  },\n  TokenType: {\n    Add: 0,\n    Embed: 1\n  },\n  DisplayOption: {\n    ActualSize: 2,\n    FitToPage: 0,\n    FitToWidth: 1\n  }\n};\nvar embedConfiguration = {\n  type: 'report',\n  tokenType: model.TokenType.Embed,\n  pageView: model.DisplayOption.FitToPage,\n  settings: {\n    background: model.BackgroundType.Default,\n    filterPaneEnabled: false\n  }\n};\nexport function PowerBiReport(_ref) {\n  _s();\n\n  var placementId = _ref.placementId;\n  var dispatch = useDispatch();\n  var containerRef = useRef(null);\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      powerbi = _useState2[0],\n      setPowerbi = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selectedReport = _useState4[0],\n      setSelectedReport = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      reports = _useState6[0],\n      setReports = _useState6[1];\n\n  useEffect(function () {\n    if (!placementId) return;\n\n    var fetchReport = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var reports;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return dispatch(getReportByPlacement(placementId));\n\n              case 2:\n                reports = _context.sent;\n\n                if (utils.generic.isValidArray(reports, true)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 5:\n                setReports(reports);\n                loadReport(reports[0]);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function fetchReport() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    fetchReport();\n  }, [placementId] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  var loadReport = function loadReport(report) {\n    setSelectedReport(report);\n    var powerbiInstance = new pbi.service.Service(pbi.factories.hpmFactory, pbi.factories.wpmpFactory, pbi.factories.routerFactory);\n    powerbiInstance.embed(containerRef.current, _objectSpread(_objectSpread({}, embedConfiguration), report));\n    setPowerbi(powerbiInstance);\n  };\n\n  var onSelectReport = function onSelectReport(name, id) {\n    var report = reports.find(function (report) {\n      return report.id === id;\n    });\n    if (!report) return;\n    powerbi.reset(containerRef.current);\n    loadReport(report);\n  };\n\n  var setFullscreen = function setFullscreen() {\n    var report = powerbi.get(containerRef.current);\n    report.fullscreen();\n  };\n\n  return /*#__PURE__*/_jsxDEV(PowerBiReportView, {\n    selectedReport: selectedReport,\n    reports: reports,\n    reportExists: !!utils.generic.isValidArray(reports, true),\n    setFullscreen: setFullscreen,\n    containerRef: containerRef,\n    onSelectReport: onSelectReport\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PowerBiReport, \"mpKgraQ7p6J5Enk92kNiRH0Z5r0=\", false, function () {\n  return [useDispatch];\n});\n\n_c = PowerBiReport;\nPowerBiReport.displayName = \"PowerBiReport\";\nPowerBiReport.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"PowerBiReport\"\n};\nexport default PowerBiReport;\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\components\\\\PowerBiReport\\\\PowerBiReport.js\"] = {\n    name: \"PowerBiReport\",\n    docgenInfo: PowerBiReport.__docgenInfo,\n    path: \"src\\\\components\\\\PowerBiReport\\\\PowerBiReport.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"PowerBiReport\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/PowerBiReport/PowerBiReport.js"],"names":["React","useRef","useEffect","useState","pbi","useDispatch","utils","getReportByPlacement","PowerBiReportView","model","BackgroundType","Default","Transparent","TokenType","Add","Embed","DisplayOption","ActualSize","FitToPage","FitToWidth","embedConfiguration","type","tokenType","pageView","settings","background","filterPaneEnabled","PowerBiReport","placementId","dispatch","containerRef","powerbi","setPowerbi","selectedReport","setSelectedReport","reports","setReports","fetchReport","generic","isValidArray","loadReport","report","powerbiInstance","service","Service","factories","hpmFactory","wpmpFactory","routerFactory","embed","current","onSelectReport","name","id","find","reset","setFullscreen","get","fullscreen"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport * as pbi from 'powerbi-client';\r\nimport { useDispatch } from 'react-redux';\r\n\r\n// app\r\nimport * as utils from 'utils';\r\nimport { getReportByPlacement } from 'stores';\r\nimport { PowerBiReportView } from './PowerBiReport.view';\r\n\r\nconst model = {\r\n  BackgroundType: {\r\n    Default: 0,\r\n    Transparent: 1,\r\n  },\r\n  TokenType: {\r\n    Add: 0,\r\n    Embed: 1,\r\n  },\r\n  DisplayOption: {\r\n    ActualSize: 2,\r\n    FitToPage: 0,\r\n    FitToWidth: 1,\r\n  },\r\n};\r\n\r\nconst embedConfiguration = {\r\n  type: 'report',\r\n  tokenType: model.TokenType.Embed,\r\n  pageView: model.DisplayOption.FitToPage,\r\n  settings: {\r\n    background: model.BackgroundType.Default,\r\n    filterPaneEnabled: false,\r\n  },\r\n};\r\n\r\nexport function PowerBiReport({ placementId }) {\r\n  const dispatch = useDispatch();\r\n  const containerRef = useRef(null);\r\n  const [powerbi, setPowerbi] = useState();\r\n  const [selectedReport, setSelectedReport] = useState({});\r\n  const [reports, setReports] = useState([]);\r\n\r\n  useEffect(\r\n    () => {\r\n      if (!placementId) return;\r\n      const fetchReport = async () => {\r\n        const reports = await dispatch(getReportByPlacement(placementId));\r\n        if (!utils.generic.isValidArray(reports, true)) return;\r\n        setReports(reports);\r\n        loadReport(reports[0]);\r\n      };\r\n      fetchReport();\r\n    },\r\n    [placementId] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  const loadReport = (report) => {\r\n    setSelectedReport(report);\r\n    const powerbiInstance = new pbi.service.Service(pbi.factories.hpmFactory, pbi.factories.wpmpFactory, pbi.factories.routerFactory);\r\n    powerbiInstance.embed(containerRef.current, {\r\n      ...embedConfiguration,\r\n      ...report,\r\n    });\r\n    setPowerbi(powerbiInstance);\r\n  };\r\n\r\n  const onSelectReport = (name, id) => {\r\n    const report = reports.find((report) => report.id === id);\r\n    if (!report) return;\r\n    powerbi.reset(containerRef.current);\r\n    loadReport(report);\r\n  };\r\n\r\n  const setFullscreen = () => {\r\n    const report = powerbi.get(containerRef.current);\r\n    report.fullscreen();\r\n  };\r\n\r\n  return (\r\n    <PowerBiReportView\r\n      selectedReport={selectedReport}\r\n      reports={reports}\r\n      reportExists={!!utils.generic.isValidArray(reports, true)}\r\n      setFullscreen={setFullscreen}\r\n      containerRef={containerRef}\r\n      onSelectReport={onSelectReport}\r\n    />\r\n  );\r\n}\r\n\r\nexport default PowerBiReport;\r\n"]},"metadata":{},"sourceType":"module"}