{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as utils from 'utils';\nimport { authLogout, addLoader, removeLoader } from 'stores';\nexport var getSanctionsCheckStatus = function getSanctionsCheckStatus(rootProcessId) {\n  return function (dispatch, getState) {\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/claims.actions.getSanctionsCheckStatus'\n    };\n    dispatch(getSanctionsCheckStatusRequest());\n    dispatch(addLoader('getSanctionsCheckStatus'));\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.bpmService,\n      path: \"workflow/process/task/\".concat(rootProcessId, \"/sanctionResult\")\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(getSanctionsCheckStatusSuccess(data.data));\n      return data.data;\n    }).catch(function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API post error'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(getSanctionsCheckStatusFailure(err));\n      return err;\n    }).finally(function () {\n      dispatch(removeLoader('getSanctionsCheckStatus'));\n    });\n  };\n};\nexport var getSanctionsCheckStatusRequest = function getSanctionsCheckStatusRequest(params) {\n  return {\n    type: 'GET_SANCTIONS_CHECK_STATUS_REQUEST',\n    payload: params\n  };\n};\nexport var getSanctionsCheckStatusSuccess = function getSanctionsCheckStatusSuccess(data) {\n  return {\n    type: 'GET_SANCTIONS_CHECK_STATUS_SUCCESS',\n    payload: data\n  };\n};\nexport var getSanctionsCheckStatusFailure = function getSanctionsCheckStatusFailure(error) {\n  return {\n    type: 'GET_SANCTIONS_CHECK_STATUS_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.getSanctionsCheckStatus.js"],"names":["utils","authLogout","addLoader","removeLoader","getSanctionsCheckStatus","rootProcessId","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","getSanctionsCheckStatusRequest","api","get","token","accessToken","bpmService","path","then","response","handleResponse","json","handleNewData","data","getSanctionsCheckStatusSuccess","catch","err","errorParams","message","handleError","handleUnauthorized","getSanctionsCheckStatusFailure","finally","params","type","payload","error"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,YAAhC,QAAoD,QAApD;AAEA,OAAO,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,aAAD;AAAA,SAAmB,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAAA,oBAM5EA,QAAQ,EANoE;AAAA,QAEtEC,IAFsE,aAE9EC,IAF8E,CAEtED,IAFsE;AAAA,QAIpEE,QAJoE,aAG9EC,MAH8E,CAI5EC,IAJ4E,CAIpEF,QAJoE;;AAOhF,QAAMG,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE;AADa,KAArB;AAIAR,IAAAA,QAAQ,CAACS,8BAA8B,EAA/B,CAAR;AACAT,IAAAA,QAAQ,CAACJ,SAAS,CAAC,yBAAD,CAAV,CAAR;AAEA,WAAOF,KAAK,CAACgB,GAAN,CACJC,GADI,CACA;AACHC,MAAAA,KAAK,EAAEV,IAAI,CAACW,WADT;AAEHT,MAAAA,QAAQ,EAAEA,QAAQ,CAACU,UAFhB;AAGHC,MAAAA,IAAI,kCAA2BhB,aAA3B;AAHD,KADA,EAMJiB,IANI,CAMC,UAACC,QAAD;AAAA,aAAcvB,KAAK,CAACgB,GAAN,CAAUQ,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAND,EAOJD,IAPI,CAOC,UAACG,IAAD;AAAA,aAAUzB,KAAK,CAACgB,GAAN,CAAUU,aAAV,CAAwBD,IAAxB,CAAV;AAAA,KAPD,EAQJH,IARI,CAQC,UAACK,IAAD,EAAU;AACdrB,MAAAA,QAAQ,CAACsB,8BAA8B,CAACD,IAAI,CAACA,IAAN,CAA/B,CAAR;AACA,aAAOA,IAAI,CAACA,IAAZ;AACD,KAXI,EAYJE,KAZI,CAYE,UAACC,GAAD,EAAS;AACd,UAAMC,WAAW,mCACZlB,YADY;AAEfmB,QAAAA,OAAO,EAAE;AAFM,QAAjB;;AAKAhC,MAAAA,KAAK,CAACgB,GAAN,CAAUiB,WAAV,CAAsBH,GAAtB,EAA2BC,WAA3B;AACA/B,MAAAA,KAAK,CAACgB,GAAN,CAAUkB,kBAAV,CAA6BJ,GAA7B,EAAkCxB,QAAlC,EAA4CL,UAA5C;AACAK,MAAAA,QAAQ,CAAC6B,8BAA8B,CAACL,GAAD,CAA/B,CAAR;AACA,aAAOA,GAAP;AACD,KAtBI,EAuBJM,OAvBI,CAuBI,YAAM;AACb9B,MAAAA,QAAQ,CAACH,YAAY,CAAC,yBAAD,CAAb,CAAR;AACD,KAzBI,CAAP;AA0BD,GAxCsC;AAAA,CAAhC;AA0CP,OAAO,IAAMY,8BAA8B,GAAG,SAAjCA,8BAAiC,CAACsB,MAAD,EAAY;AACxD,SAAO;AACLC,IAAAA,IAAI,EAAE,oCADD;AAELC,IAAAA,OAAO,EAAEF;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMT,8BAA8B,GAAG,SAAjCA,8BAAiC,CAACD,IAAD,EAAU;AACtD,SAAO;AACLW,IAAAA,IAAI,EAAE,oCADD;AAELC,IAAAA,OAAO,EAAEZ;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMQ,8BAA8B,GAAG,SAAjCA,8BAAiC,CAACK,KAAD,EAAW;AACvD,SAAO;AACLF,IAAAA,IAAI,EAAE,oCADD;AAELC,IAAAA,OAAO,EAAEC;AAFJ,GAAP;AAID,CALM","sourcesContent":["import * as utils from 'utils';\r\nimport { authLogout, addLoader, removeLoader } from 'stores';\r\n\r\nexport const getSanctionsCheckStatus = (rootProcessId) => (dispatch, getState) => {\r\n  const {\r\n    user: { auth },\r\n    config: {\r\n      vars: { endpoint },\r\n    },\r\n  } = getState();\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.getSanctionsCheckStatus',\r\n  };\r\n\r\n  dispatch(getSanctionsCheckStatusRequest());\r\n  dispatch(addLoader('getSanctionsCheckStatus'));\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.bpmService,\r\n      path: `workflow/process/task/${rootProcessId}/sanctionResult`,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(getSanctionsCheckStatusSuccess(data.data));\r\n      return data.data;\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        ...defaultError,\r\n        message: 'API post error',\r\n      };\r\n\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(getSanctionsCheckStatusFailure(err));\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('getSanctionsCheckStatus'));\r\n    });\r\n};\r\n\r\nexport const getSanctionsCheckStatusRequest = (params) => {\r\n  return {\r\n    type: 'GET_SANCTIONS_CHECK_STATUS_REQUEST',\r\n    payload: params,\r\n  };\r\n};\r\n\r\nexport const getSanctionsCheckStatusSuccess = (data) => {\r\n  return {\r\n    type: 'GET_SANCTIONS_CHECK_STATUS_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const getSanctionsCheckStatusFailure = (error) => {\r\n  return {\r\n    type: 'GET_SANCTIONS_CHECK_STATUS_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}