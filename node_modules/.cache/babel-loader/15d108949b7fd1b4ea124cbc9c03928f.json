{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\DmsAttachDocumentsTable\\\\DmsAttachDocumentsTable.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectDmsClientSideUploadFiles, removeDmsClientSideUploadedDocuments, showModal } from 'stores'; // app\n\nimport { DmsAttachDocumentsTableView } from './DmsAttachDocumentsTable.view';\nimport * as utils from 'utils';\nimport { useFlexiColumns } from 'hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function DmsAttachDocumentsTable() {\n  _s();\n\n  var _utils$dmsFormatter;\n\n  var dispatch = useDispatch();\n  var clientUploadedFiles = useSelector(selectDmsClientSideUploadFiles);\n  var documentList = clientUploadedFiles === null || clientUploadedFiles === void 0 ? void 0 : clientUploadedFiles.documentList;\n  var cols = [{\n    id: 'documentName',\n    label: utils.string.t('dms.view.columns.documentName'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true\n  }, {\n    id: 'documentSource',\n    label: utils.string.t('dms.view.columns.documentSource'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true\n  }, {\n    id: 'documentTypeDescription',\n    label: utils.string.t('dms.view.columns.documentType'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true\n  }, {\n    id: 'docClassification',\n    label: utils.string.t('dms.view.columns.documentClassification'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true\n  }, {\n    id: 'updatedDate',\n    label: utils.string.t('dms.view.columns.uploadedDate'),\n    sort: {\n      type: 'date',\n      direction: 'asc'\n    },\n    visible: true\n  }, {\n    id: 'createdByName',\n    label: utils.string.t('dms.view.columns.uploadedBy'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true\n  }, {\n    id: 'actions',\n    menu: true,\n    visible: true\n  }];\n  var popoverActions = [{\n    id: 'delete',\n    label: utils.string.t('dms.view.popOverMenuItems.delete'),\n    callback: function callback(_ref) {\n      var index = _ref.index;\n      return confirmDocumentDelete(index);\n    }\n  }];\n  var docClassification = utils === null || utils === void 0 ? void 0 : (_utils$dmsFormatter = utils.dmsFormatter) === null || _utils$dmsFormatter === void 0 ? void 0 : _utils$dmsFormatter.getDocumentClassificationList();\n  var docClassificationMap = new Map(docClassification === null || docClassification === void 0 ? void 0 : docClassification.map(function (item) {\n    return [item === null || item === void 0 ? void 0 : item.id, item === null || item === void 0 ? void 0 : item.value];\n  }));\n\n  var getDocClassification = function getDocClassification(value) {\n    return docClassificationMap === null || docClassificationMap === void 0 ? void 0 : docClassificationMap.get(Number(value));\n  };\n\n  var confirmDocumentDelete = function confirmDocumentDelete(index) {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        fullWidth: true,\n        title: utils.string.t('dms.view.deleteDocument.title'),\n        maxWidth: 'xs',\n        componentProps: {\n          confirmLabel: utils.string.t('dms.view.deleteDocument.confirmLabel'),\n          submitHandler: function submitHandler() {\n            return removeDocument(index);\n          }\n        }\n      }\n    }));\n  };\n\n  var removeDocument = function removeDocument(index) {\n    var _uploadedFiles$docume, _uploadedFiles$fileDe, _uploadedFiles$fileDe2, _uploadedFiles$fileDe3, _uploadedFiles$fileDe4, _uploadedFiles$fileDe5, _uploadedFiles$fileDe6;\n\n    var uploadedFiles = _objectSpread({}, clientUploadedFiles);\n\n    !utils.generic.isInvalidOrEmptyArray(uploadedFiles === null || uploadedFiles === void 0 ? void 0 : uploadedFiles.documentList) && (uploadedFiles === null || uploadedFiles === void 0 ? void 0 : (_uploadedFiles$docume = uploadedFiles.documentList) === null || _uploadedFiles$docume === void 0 ? void 0 : _uploadedFiles$docume.splice(index, 1));\n    !utils.generic.isInvalidOrEmptyArray(uploadedFiles === null || uploadedFiles === void 0 ? void 0 : uploadedFiles.documentNameList) && (uploadedFiles === null || uploadedFiles === void 0 ? void 0 : uploadedFiles.documentNameList.splice(index, 1));\n    !utils.generic.isInvalidOrEmptyArray(uploadedFiles === null || uploadedFiles === void 0 ? void 0 : (_uploadedFiles$fileDe = uploadedFiles.fileDetails) === null || _uploadedFiles$fileDe === void 0 ? void 0 : _uploadedFiles$fileDe.submitFiles) && (uploadedFiles === null || uploadedFiles === void 0 ? void 0 : (_uploadedFiles$fileDe2 = uploadedFiles.fileDetails) === null || _uploadedFiles$fileDe2 === void 0 ? void 0 : _uploadedFiles$fileDe2.submitFiles.splice(index, 1));\n    !utils.generic.isInvalidOrEmptyArray(uploadedFiles === null || uploadedFiles === void 0 ? void 0 : (_uploadedFiles$fileDe3 = uploadedFiles.fileDetails) === null || _uploadedFiles$fileDe3 === void 0 ? void 0 : (_uploadedFiles$fileDe4 = _uploadedFiles$fileDe3.submitData) === null || _uploadedFiles$fileDe4 === void 0 ? void 0 : _uploadedFiles$fileDe4.documentDto) && (uploadedFiles === null || uploadedFiles === void 0 ? void 0 : (_uploadedFiles$fileDe5 = uploadedFiles.fileDetails) === null || _uploadedFiles$fileDe5 === void 0 ? void 0 : (_uploadedFiles$fileDe6 = _uploadedFiles$fileDe5.submitData) === null || _uploadedFiles$fileDe6 === void 0 ? void 0 : _uploadedFiles$fileDe6.documentDto.splice(index, 1));\n    dispatch(removeDmsClientSideUploadedDocuments({\n      uploadedFiles: uploadedFiles\n    }));\n  };\n\n  var _useFlexiColumns = useFlexiColumns(cols),\n      columnsArray = _useFlexiColumns.columns;\n\n  return /*#__PURE__*/_jsxDEV(DmsAttachDocumentsTableView, {\n    columnsArray: columnsArray,\n    documentList: documentList,\n    popoverActions: popoverActions,\n    handlers: {\n      getDocClassification: getDocClassification\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DmsAttachDocumentsTable, \"Zed+l+hQgPXkq+e/Y6nkFLW3Eow=\", false, function () {\n  return [useDispatch, useSelector, useFlexiColumns];\n});\n\n_c = DmsAttachDocumentsTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"DmsAttachDocumentsTable\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/DmsAttachDocumentsTable/DmsAttachDocumentsTable.js"],"names":["React","useDispatch","useSelector","selectDmsClientSideUploadFiles","removeDmsClientSideUploadedDocuments","showModal","DmsAttachDocumentsTableView","utils","useFlexiColumns","DmsAttachDocumentsTable","dispatch","clientUploadedFiles","documentList","cols","id","label","string","t","sort","type","direction","visible","menu","popoverActions","callback","index","confirmDocumentDelete","docClassification","dmsFormatter","getDocumentClassificationList","docClassificationMap","Map","map","item","value","getDocClassification","get","Number","component","props","fullWidth","title","maxWidth","componentProps","confirmLabel","submitHandler","removeDocument","uploadedFiles","generic","isInvalidOrEmptyArray","splice","documentNameList","fileDetails","submitFiles","submitData","documentDto","columnsArray","columns"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectDmsClientSideUploadFiles, removeDmsClientSideUploadedDocuments, showModal } from 'stores';\r\n\r\n// app\r\nimport { DmsAttachDocumentsTableView } from './DmsAttachDocumentsTable.view';\r\nimport * as utils from 'utils';\r\nimport { useFlexiColumns } from 'hooks';\r\n\r\nexport function DmsAttachDocumentsTable() {\r\n  const dispatch = useDispatch();\r\n\r\n  const clientUploadedFiles = useSelector(selectDmsClientSideUploadFiles);\r\n  const documentList = clientUploadedFiles?.documentList;\r\n\r\n  const cols = [\r\n    {\r\n      id: 'documentName',\r\n      label: utils.string.t('dms.view.columns.documentName'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: true,\r\n    },\r\n    {\r\n      id: 'documentSource',\r\n      label: utils.string.t('dms.view.columns.documentSource'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: true,\r\n    },\r\n\r\n    {\r\n      id: 'documentTypeDescription',\r\n      label: utils.string.t('dms.view.columns.documentType'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: true,\r\n    },\r\n    {\r\n      id: 'docClassification',\r\n      label: utils.string.t('dms.view.columns.documentClassification'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: true,\r\n    },\r\n    { id: 'updatedDate', label: utils.string.t('dms.view.columns.uploadedDate'), sort: { type: 'date', direction: 'asc' }, visible: true },\r\n    {\r\n      id: 'createdByName',\r\n      label: utils.string.t('dms.view.columns.uploadedBy'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: true,\r\n    },\r\n    { id: 'actions', menu: true, visible: true },\r\n  ];\r\n\r\n  const popoverActions = [\r\n    {\r\n      id: 'delete',\r\n      label: utils.string.t('dms.view.popOverMenuItems.delete'),\r\n      callback: ({ index }) => confirmDocumentDelete(index),\r\n    },\r\n  ];\r\n\r\n  const docClassification = utils?.dmsFormatter?.getDocumentClassificationList();\r\n\r\n  const docClassificationMap = new Map(\r\n    docClassification?.map((item) => {\r\n      return [item?.id, item?.value];\r\n    })\r\n  );\r\n\r\n  const getDocClassification = (value) => {\r\n    return docClassificationMap?.get(Number(value));\r\n  };\r\n\r\n  const confirmDocumentDelete = (index) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          fullWidth: true,\r\n          title: utils.string.t('dms.view.deleteDocument.title'),\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            confirmLabel: utils.string.t('dms.view.deleteDocument.confirmLabel'),\r\n            submitHandler: () => removeDocument(index),\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const removeDocument = (index) => {\r\n    const uploadedFiles = { ...clientUploadedFiles };\r\n    !utils.generic.isInvalidOrEmptyArray(uploadedFiles?.documentList) && uploadedFiles?.documentList?.splice(index, 1);\r\n    !utils.generic.isInvalidOrEmptyArray(uploadedFiles?.documentNameList) && uploadedFiles?.documentNameList.splice(index, 1);\r\n    !utils.generic.isInvalidOrEmptyArray(uploadedFiles?.fileDetails?.submitFiles) &&\r\n      uploadedFiles?.fileDetails?.submitFiles.splice(index, 1);\r\n    !utils.generic.isInvalidOrEmptyArray(uploadedFiles?.fileDetails?.submitData?.documentDto) &&\r\n      uploadedFiles?.fileDetails?.submitData?.documentDto.splice(index, 1);\r\n\r\n    dispatch(removeDmsClientSideUploadedDocuments({ uploadedFiles: uploadedFiles }));\r\n  };\r\n\r\n  const { columns: columnsArray } = useFlexiColumns(cols);\r\n\r\n  return (\r\n    <DmsAttachDocumentsTableView\r\n      columnsArray={columnsArray}\r\n      documentList={documentList}\r\n      popoverActions={popoverActions}\r\n      handlers={{ getDocClassification: getDocClassification }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}