{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ClaimsUploadViewSearchDocs\\\\ClaimsUploadViewSearchDocs.view.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types'; // app\n\nimport { Tabs, DmsTable, DmsSearch } from 'components';\nimport * as constants from 'consts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nClaimsUploadViewSearchDocsView.propTypes = {\n  tabs: PropTypes.array.isRequired,\n  selectedTab: PropTypes.string.isRequired,\n  isAutoSearchScreen: PropTypes.bool.isRequired,\n  dms: PropTypes.shape({\n    context: PropTypes.string.isRequired\n  }).isRequired,\n  sourceId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  viewOptions: PropTypes.object.isRequired,\n  referenceId: PropTypes.string.isRequired,\n  viewDocumentList: PropTypes.array.isRequired,\n  handlers: PropTypes.shape({\n    selectTab: PropTypes.func.isRequired,\n    onUnlinkorDeleteSuccess: PropTypes.func.isRequired\n  }).isRequired,\n  documentTypeKey: PropTypes.oneOf([constants.DMS_DOCUMENT_TYPE_SECTION_KEYS])\n};\nexport default function ClaimsUploadViewSearchDocsView(_ref) {\n  var tabs = _ref.tabs,\n      selectedTab = _ref.selectedTab,\n      isAutoSearchScreen = _ref.isAutoSearchScreen,\n      dms = _ref.dms,\n      sourceId = _ref.sourceId,\n      viewOptions = _ref.viewOptions,\n      referenceId = _ref.referenceId,\n      viewDocumentList = _ref.viewDocumentList,\n      handlers = _ref.handlers,\n      documentTypeKey = _ref.documentTypeKey;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Tabs, {\n      tabs: tabs,\n      value: selectedTab,\n      onChange: function onChange(tabName) {\n        return handlers.selectTab(tabName);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), selectedTab === constants.DMS_VIEW_TAB_VIEW && /*#__PURE__*/_jsxDEV(DmsTable, _objectSpread(_objectSpread({\n      columnsData: viewDocumentList\n    }, dms), {}, {\n      sourceId: sourceId,\n      canUpload: viewOptions.upload,\n      canSearch: viewOptions.search,\n      canUnlink: viewOptions.unlink,\n      canDelete: viewOptions.delete,\n      referenceId: referenceId,\n      documentTypeKey: documentTypeKey,\n      handlers: handlers\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this), selectedTab === constants.DMS_VIEW_TAB_SEARCH && /*#__PURE__*/_jsxDEV(DmsSearch, _objectSpread(_objectSpread({}, dms), {}, {\n      referenceId: referenceId,\n      isAutoSearchScreen: isAutoSearchScreen\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_c = ClaimsUploadViewSearchDocsView;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimsUploadViewSearchDocsView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ClaimsUploadViewSearchDocs/ClaimsUploadViewSearchDocs.view.js"],"names":["React","PropTypes","Tabs","DmsTable","DmsSearch","constants","ClaimsUploadViewSearchDocsView","propTypes","tabs","array","isRequired","selectedTab","string","isAutoSearchScreen","bool","dms","shape","context","sourceId","oneOfType","number","viewOptions","object","referenceId","viewDocumentList","handlers","selectTab","func","onUnlinkorDeleteSuccess","documentTypeKey","oneOf","DMS_DOCUMENT_TYPE_SECTION_KEYS","tabName","DMS_VIEW_TAB_VIEW","upload","search","unlink","delete","DMS_VIEW_TAB_SEARCH"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// app\r\nimport { Tabs, DmsTable, DmsSearch } from 'components';\r\nimport * as constants from 'consts';\r\n\r\nClaimsUploadViewSearchDocsView.propTypes = {\r\n  tabs: PropTypes.array.isRequired,\r\n  selectedTab: PropTypes.string.isRequired,\r\n  isAutoSearchScreen: PropTypes.bool.isRequired,\r\n  dms: PropTypes.shape({\r\n    context: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n  sourceId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n  viewOptions: PropTypes.object.isRequired,\r\n  referenceId: PropTypes.string.isRequired,\r\n  viewDocumentList: PropTypes.array.isRequired,\r\n  handlers: PropTypes.shape({\r\n    selectTab: PropTypes.func.isRequired,\r\n    onUnlinkorDeleteSuccess: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  documentTypeKey: PropTypes.oneOf([constants.DMS_DOCUMENT_TYPE_SECTION_KEYS]),\r\n};\r\n\r\nexport default function ClaimsUploadViewSearchDocsView({\r\n  tabs,\r\n  selectedTab,\r\n  isAutoSearchScreen,\r\n  dms,\r\n  sourceId,\r\n  viewOptions,\r\n  referenceId,\r\n  viewDocumentList,\r\n  handlers,\r\n  documentTypeKey,\r\n}) {\r\n  return (\r\n    <>\r\n      <Tabs tabs={tabs} value={selectedTab} onChange={(tabName) => handlers.selectTab(tabName)} />\r\n\r\n      {selectedTab === constants.DMS_VIEW_TAB_VIEW && (\r\n        <DmsTable\r\n          columnsData={viewDocumentList}\r\n          {...dms}\r\n          sourceId={sourceId}\r\n          canUpload={viewOptions.upload}\r\n          canSearch={viewOptions.search}\r\n          canUnlink={viewOptions.unlink}\r\n          canDelete={viewOptions.delete}\r\n          referenceId={referenceId}\r\n          documentTypeKey={documentTypeKey}\r\n          handlers={handlers}\r\n        />\r\n      )}\r\n      {selectedTab === constants.DMS_VIEW_TAB_SEARCH && (\r\n        <DmsSearch {...dms} referenceId={referenceId} isAutoSearchScreen={isAutoSearchScreen} />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}