{"ast":null,"code":"var _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ClaimSummaryActions\\\\ClaimSummaryActions.view.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types'; // app\n\nimport { Button } from 'components';\nimport * as utils from 'utils'; // mui\n\nimport { Grid } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nClaimSummaryActionsView.prototypes = {\n  claim: PropTypes.array.isRequired,\n  isClosedClaim: PropTypes.bool,\n  isTeamClaim: PropTypes.bool,\n  isUsersClaim: PropTypes.bool,\n  userHasAllClaimsPermission: PropTypes.bool,\n  handlers: PropTypes.shape({\n    createRFIModal: PropTypes.func.isRequired,\n    createAdHocTaskModal: PropTypes.func.isRequired,\n    reAssignClaim: PropTypes.func.isRequired,\n    setClaimPriority: PropTypes.func.isRequired,\n    handleReOpenClaim: PropTypes.func.isRequired,\n    releaseClaimToQ: PropTypes.func.isRequired\n  }).isRequired\n};\nexport function ClaimSummaryActionsView(_ref) {\n  var claim = _ref.claim,\n      isClosedClaim = _ref.isClosedClaim,\n      userHasAllClaimsPermission = _ref.userHasAllClaimsPermission,\n      isUsersClaim = _ref.isUsersClaim,\n      handlers = _ref.handlers,\n      isTeamClaim = _ref.isTeamClaim;\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: 1,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        text: utils.string.t('app.reAssing'),\n        color: \"primary\",\n        variant: \"outlined\",\n        size: \"small\",\n        disabled: isClosedClaim || !(userHasAllClaimsPermission && isTeamClaim),\n        onClick: function onClick() {\n          return handlers.reAssignClaim(claim);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        text: utils.string.t('claims.processing.summary.buttons.createTask'),\n        size: \"small\",\n        color: \"primary\",\n        variant: \"outlined\",\n        disabled: isClosedClaim || !isUsersClaim,\n        onClick: function onClick() {\n          return handlers.createAdHocTaskModal(claim);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        text: utils.string.t('claims.processing.summary.buttons.createNewRFI'),\n        size: \"small\",\n        color: \"primary\",\n        variant: \"outlined\",\n        disabled: isClosedClaim,\n        onClick: function onClick() {\n          return handlers.createRFIModal(claim);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        text: utils.string.t('claims.modals.claimFunctions.setClaimPriority'),\n        size: \"small\",\n        color: \"primary\",\n        variant: \"outlined\",\n        disabled: isClosedClaim || !isUsersClaim,\n        onClick: function onClick() {\n          return handlers.setClaimPriority(claim);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        variant: \"outlined\",\n        size: \"small\",\n        disabled: isClosedClaim || !isUsersClaim,\n        text: utils.string.t('claims.processing.summary.buttons.releaseQueue'),\n        onClick: function onClick() {\n          return handlers.releaseClaimToQ(claim);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        variant: \"outlined\",\n        size: \"small\",\n        disabled: !isClosedClaim,\n        text: utils.string.t('claims.claimRef.popOverItems.reopenClaim'),\n        onClick: function onClick() {\n          return handlers.handleReOpenClaim(claim);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n_c = ClaimSummaryActionsView;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimSummaryActionsView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ClaimSummaryActions/ClaimSummaryActions.view.js"],"names":["React","PropTypes","Button","utils","Grid","ClaimSummaryActionsView","prototypes","claim","array","isRequired","isClosedClaim","bool","isTeamClaim","isUsersClaim","userHasAllClaimsPermission","handlers","shape","createRFIModal","func","createAdHocTaskModal","reAssignClaim","setClaimPriority","handleReOpenClaim","releaseClaimToQ","string","t"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// app\r\nimport { Button } from 'components';\r\nimport * as utils from 'utils';\r\n\r\n// mui\r\nimport { Grid } from '@material-ui/core';\r\n\r\nClaimSummaryActionsView.prototypes = {\r\n  claim: PropTypes.array.isRequired,\r\n  isClosedClaim: PropTypes.bool,\r\n  isTeamClaim: PropTypes.bool,\r\n  isUsersClaim: PropTypes.bool,\r\n  userHasAllClaimsPermission: PropTypes.bool,\r\n  handlers: PropTypes.shape({\r\n    createRFIModal: PropTypes.func.isRequired,\r\n    createAdHocTaskModal: PropTypes.func.isRequired,\r\n    reAssignClaim: PropTypes.func.isRequired,\r\n    setClaimPriority: PropTypes.func.isRequired,\r\n    handleReOpenClaim: PropTypes.func.isRequired,\r\n    releaseClaimToQ: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport function ClaimSummaryActionsView({ claim, isClosedClaim, userHasAllClaimsPermission, isUsersClaim, handlers, isTeamClaim }) {\r\n  return (\r\n    <Grid container spacing={1}>\r\n      <Grid item>\r\n        <Button\r\n          text={utils.string.t('app.reAssing')}\r\n          color=\"primary\"\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n          disabled={isClosedClaim || !(userHasAllClaimsPermission && isTeamClaim)}\r\n          onClick={() => handlers.reAssignClaim(claim)}\r\n        />\r\n      </Grid>\r\n      <Grid item>\r\n        <Button\r\n          text={utils.string.t('claims.processing.summary.buttons.createTask')}\r\n          size=\"small\"\r\n          color=\"primary\"\r\n          variant=\"outlined\"\r\n          disabled={isClosedClaim || !isUsersClaim}\r\n          onClick={() => handlers.createAdHocTaskModal(claim)}\r\n        />\r\n      </Grid>\r\n      <Grid item>\r\n        <Button\r\n          text={utils.string.t('claims.processing.summary.buttons.createNewRFI')}\r\n          size=\"small\"\r\n          color=\"primary\"\r\n          variant=\"outlined\"\r\n          disabled={isClosedClaim}\r\n          onClick={() => handlers.createRFIModal(claim)}\r\n        />\r\n      </Grid>\r\n      <Grid item>\r\n        <Button\r\n          text={utils.string.t('claims.modals.claimFunctions.setClaimPriority')}\r\n          size=\"small\"\r\n          color=\"primary\"\r\n          variant=\"outlined\"\r\n          disabled={isClosedClaim || !isUsersClaim}\r\n          onClick={() => handlers.setClaimPriority(claim)}\r\n        />\r\n      </Grid>\r\n      <Grid item>\r\n        <Button\r\n          color=\"primary\"\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n          disabled={isClosedClaim || !isUsersClaim}\r\n          text={utils.string.t('claims.processing.summary.buttons.releaseQueue')}\r\n          onClick={() => handlers.releaseClaimToQ(claim)}\r\n        />\r\n      </Grid>\r\n      <Grid item>\r\n        <Button\r\n          color=\"primary\"\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n          disabled={!isClosedClaim}\r\n          text={utils.string.t('claims.claimRef.popOverItems.reopenClaim')}\r\n          onClick={() => handlers.handleReOpenClaim(claim)}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}