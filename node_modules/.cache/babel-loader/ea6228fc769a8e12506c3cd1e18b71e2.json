{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\forms\\\\DmsLinkToLossAndClaim\\\\DmsLinkToLossAndClaim.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useDispatch } from 'react-redux'; // app\n\nimport DmsLinkToLossAndClaimView from './DmsLinkToLossAndClaim.view';\nimport { linkMultipleDmsDocuments, hideModal } from 'stores';\nimport * as constants from 'consts';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nDmsLinkToLossAndClaim.propTypes = {\n  docData: PropTypes.array.isRequired,\n  resetToDefaultValues: PropTypes.func.isRequired,\n  canLinkToTask: PropTypes.bool,\n  parentRefs: PropTypes.object.isRequired\n};\nexport default function DmsLinkToLossAndClaim(_ref) {\n  _s();\n\n  var docData = _ref.docData,\n      resetToDefaultValues = _ref.resetToDefaultValues,\n      canLinkToTask = _ref.canLinkToTask,\n      parentRefs = _ref.parentRefs;\n  var dispatch = useDispatch();\n\n  var confirmDocumentlink = function confirmDocumentlink(docs) {\n    var formValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    var requestParams = [];\n\n    if (formValues === null || formValues === void 0 ? void 0 : formValues.linkToLoss) {\n      var lossParams = docs === null || docs === void 0 ? void 0 : docs.map(function (d) {\n        return {\n          documentId: d.documentId,\n          referenceId: parentRefs === null || parentRefs === void 0 ? void 0 : parentRefs.lossRef,\n          sectionType: constants.DMS_CONTEXT_LOSS\n        };\n      });\n      requestParams === null || requestParams === void 0 ? void 0 : requestParams.push.apply(requestParams, _toConsumableArray(lossParams));\n    }\n\n    if (formValues === null || formValues === void 0 ? void 0 : formValues.linkToClaim) {\n      var claimParams = docs === null || docs === void 0 ? void 0 : docs.map(function (d) {\n        return {\n          documentId: d.documentId,\n          referenceId: parentRefs === null || parentRefs === void 0 ? void 0 : parentRefs.claimRef,\n          sectionType: constants.DMS_CONTEXT_CLAIM\n        };\n      });\n      requestParams === null || requestParams === void 0 ? void 0 : requestParams.push.apply(requestParams, _toConsumableArray(claimParams));\n    }\n\n    if (formValues === null || formValues === void 0 ? void 0 : formValues.linkToTask) {\n      var taskParams = docs === null || docs === void 0 ? void 0 : docs.map(function (d) {\n        return {\n          documentId: d.documentId,\n          referenceId: parentRefs === null || parentRefs === void 0 ? void 0 : parentRefs.taskId,\n          sectionType: constants.DMS_CONTEXT_TASK\n        };\n      });\n      requestParams === null || requestParams === void 0 ? void 0 : requestParams.push.apply(requestParams, _toConsumableArray(taskParams));\n    }\n\n    if (!utils.generic.isInvalidOrEmptyArray(requestParams)) {\n      dispatch(linkMultipleDmsDocuments(requestParams)).then(function (response) {\n        if ((response === null || response === void 0 ? void 0 : response.status) === constants.API_RESPONSE_OK) {\n          resetToDefaultValues();\n          dispatch(hideModal('DMS_LINK_TO_LOSS_AND_CLAIM'));\n        }\n      });\n    }\n  };\n\n  var handleLinkTo = function handleLinkTo(formValues) {\n    if (docData === null || docData === void 0 ? void 0 : docData.isLinked) {\n      return;\n    }\n\n    confirmDocumentlink(docData, formValues);\n  };\n\n  var fields = [{\n    name: 'linkToLoss',\n    type: 'checkbox',\n    defaultValue: false\n  }, {\n    name: 'linkToClaim',\n    type: 'checkbox',\n    defaultValue: false\n  }].concat(_toConsumableArray(canLinkToTask ? [{\n    name: 'linkToTask',\n    type: 'checkbox',\n    defaultValue: false\n  }] : []));\n  var actions = [{\n    name: 'secondary',\n    label: utils.string.t('app.cancel'),\n    handler: function handler() {\n      dispatch(hideModal('DMS_LINK_TO_LOSS_AND_CLAIM'));\n    }\n  }, {\n    name: 'submit',\n    label: utils.string.t('app.link'),\n    handler: function handler(values) {\n      handleLinkTo(values);\n    }\n  }];\n  var defaultValues = utils.form.getInitialValues(fields);\n  var validationSchema = utils.form.getValidationSchema(fields);\n\n  var _useForm = useForm(_objectSpread({\n    defaultValues: defaultValues\n  }, validationSchema && {\n    resolver: yupResolver(validationSchema)\n  })),\n      control = _useForm.control,\n      reset = _useForm.reset,\n      handleSubmit = _useForm.handleSubmit,\n      formState = _useForm.formState;\n\n  return /*#__PURE__*/_jsxDEV(DmsLinkToLossAndClaimView, {\n    fields: fields,\n    control: control,\n    actions: actions,\n    reset: reset,\n    handleSubmit: handleSubmit,\n    formState: formState,\n    canLinkToTask: canLinkToTask\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DmsLinkToLossAndClaim, \"EhIY0S/aAQg6TyzLilT1drJBjU0=\", false, function () {\n  return [useDispatch, useForm];\n});\n\n_c = DmsLinkToLossAndClaim;\n\nvar _c;\n\n$RefreshReg$(_c, \"DmsLinkToLossAndClaim\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/forms/DmsLinkToLossAndClaim/DmsLinkToLossAndClaim.js"],"names":["React","PropTypes","useForm","yupResolver","useDispatch","DmsLinkToLossAndClaimView","linkMultipleDmsDocuments","hideModal","constants","utils","DmsLinkToLossAndClaim","propTypes","docData","array","isRequired","resetToDefaultValues","func","canLinkToTask","bool","parentRefs","object","dispatch","confirmDocumentlink","docs","formValues","requestParams","linkToLoss","lossParams","map","d","documentId","referenceId","lossRef","sectionType","DMS_CONTEXT_LOSS","push","linkToClaim","claimParams","claimRef","DMS_CONTEXT_CLAIM","linkToTask","taskParams","taskId","DMS_CONTEXT_TASK","generic","isInvalidOrEmptyArray","then","response","status","API_RESPONSE_OK","handleLinkTo","isLinked","fields","name","type","defaultValue","actions","label","string","t","handler","values","defaultValues","form","getInitialValues","validationSchema","getValidationSchema","resolver","control","reset","handleSubmit","formState"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useDispatch } from 'react-redux';\r\n\r\n// app\r\nimport DmsLinkToLossAndClaimView from './DmsLinkToLossAndClaim.view';\r\nimport { linkMultipleDmsDocuments, hideModal } from 'stores';\r\nimport * as constants from 'consts';\r\nimport * as utils from 'utils';\r\n\r\nDmsLinkToLossAndClaim.propTypes = {\r\n  docData: PropTypes.array.isRequired,\r\n  resetToDefaultValues: PropTypes.func.isRequired,\r\n  canLinkToTask: PropTypes.bool,\r\n  parentRefs: PropTypes.object.isRequired\r\n};\r\n\r\nexport default function DmsLinkToLossAndClaim({ docData, resetToDefaultValues, canLinkToTask, parentRefs }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const confirmDocumentlink = (docs, formValues = '') => {\r\n    const requestParams = [];\r\n    if (formValues?.linkToLoss) {\r\n      const lossParams = docs?.map((d) => {\r\n        return {\r\n          documentId: d.documentId,\r\n          referenceId: parentRefs?.lossRef,\r\n          sectionType: constants.DMS_CONTEXT_LOSS,\r\n        };\r\n      });\r\n      requestParams?.push(...lossParams);\r\n    }\r\n    if (formValues?.linkToClaim) {\r\n      const claimParams = docs?.map((d) => {\r\n        return {\r\n          documentId: d.documentId,\r\n          referenceId: parentRefs?.claimRef,\r\n          sectionType: constants.DMS_CONTEXT_CLAIM,\r\n        };\r\n      });\r\n      requestParams?.push(...claimParams);\r\n    }\r\n    if (formValues?.linkToTask) {\r\n      const taskParams = docs?.map((d) => {\r\n        return {\r\n          documentId: d.documentId,\r\n          referenceId: parentRefs?.taskId,\r\n          sectionType: constants.DMS_CONTEXT_TASK,\r\n        };\r\n      });\r\n      requestParams?.push(...taskParams);\r\n    }\r\n\r\n    if (!utils.generic.isInvalidOrEmptyArray(requestParams)) {\r\n      dispatch(linkMultipleDmsDocuments(requestParams)).then((response) => {\r\n        if (response?.status === constants.API_RESPONSE_OK) {\r\n          resetToDefaultValues();\r\n          dispatch(hideModal('DMS_LINK_TO_LOSS_AND_CLAIM'));\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleLinkTo = (formValues) => {\r\n    if (docData?.isLinked) {\r\n      return;\r\n    }\r\n    confirmDocumentlink(docData, formValues);\r\n  };\r\n\r\n  const fields = [\r\n    {\r\n      name: 'linkToLoss',\r\n      type: 'checkbox',\r\n      defaultValue: false,\r\n    },\r\n    {\r\n      name: 'linkToClaim',\r\n      type: 'checkbox',\r\n      defaultValue: false,\r\n    },\r\n    ...(canLinkToTask ? [{\r\n      name: 'linkToTask',\r\n      type: 'checkbox',\r\n      defaultValue: false,\r\n    }] : []),\r\n  ];\r\n\r\n  const actions = [\r\n    {\r\n      name: 'secondary',\r\n      label: utils.string.t('app.cancel'),\r\n      handler: () => {\r\n        dispatch(hideModal('DMS_LINK_TO_LOSS_AND_CLAIM'));\r\n      },\r\n    },\r\n    {\r\n      name: 'submit',\r\n      label: utils.string.t('app.link'),\r\n      handler: (values) => {\r\n        handleLinkTo(values);\r\n      },\r\n    },\r\n  ];\r\n\r\n  const defaultValues = utils.form.getInitialValues(fields);\r\n  const validationSchema = utils.form.getValidationSchema(fields);\r\n  const { control, reset, handleSubmit, formState } = useForm({\r\n    defaultValues,\r\n    ...(validationSchema && { resolver: yupResolver(validationSchema) }),\r\n  });\r\n\r\n  return (\r\n    <DmsLinkToLossAndClaimView\r\n      fields={fields}\r\n      control={control}\r\n      actions={actions}\r\n      reset={reset}\r\n      handleSubmit={handleSubmit}\r\n      formState={formState}\r\n      canLinkToTask={canLinkToTask}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}