{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { addLoader, removeLoader, enqueueNotification } from 'stores';\nimport * as utils from 'utils';\nexport var postEmail = function postEmail(params) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        _getState$user = _getState.user,\n        emailId = _getState$user.emailId,\n        auth = _getState$user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var emailTo = params.emailTo,\n        emailCc = params.emailCc,\n        message = params.message,\n        subject = params.subject,\n        objectId = params.objectId,\n        objectCode = params.objectCode,\n        emailType = params.emailType,\n        _params$attachments = params.attachments,\n        attachments = _params$attachments === void 0 ? [] : _params$attachments;\n    var defaultError = {\n      file: 'stores/emailManagementService.actions.postEmail'\n    };\n    dispatch(addLoader('postEmail'));\n    dispatch(postEmailRequest(params));\n\n    if (!(emailTo && objectId && objectCode && emailType)) {\n      dispatch(postEmailFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Missing some params'\n      })));\n      dispatch(enqueueNotification('ems.missingParams', 'error'));\n      dispatch(removeLoader('postEmail'));\n      return Promise.reject({\n        message: 'Missing some params'\n      });\n    }\n\n    var emailData = {\n      emailTo: emailTo,\n      emailCc: \"\".concat(emailId, \";\").concat(emailCc),\n      replyTo: \"\".concat(emailId, \";\").concat(emailCc),\n      message: message,\n      subject: subject,\n      objectId: objectId,\n      objectCode: objectCode,\n      emailType: emailType,\n      isPriority: 1,\n      templateName: 'Template1',\n      //Will remove once we got confirmation from api team\n      eventType: 'PP_ISSUE_DOC',\n      //Will remove once we got confirmation from api team\n      attachments: attachments\n    };\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.notificationService,\n      path: 'email/send',\n      data: emailData\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(postEmailSuccess(data));\n      dispatch(enqueueNotification('ems.mailSentSuccess', 'success'));\n      return data;\n    }).catch(function (err) {\n      utils.api.handleError(err, _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API fetch error (postEmail)'\n      }));\n      dispatch(postEmailFailure(err));\n      dispatch(enqueueNotification('ems.mailSentFailure', 'error'));\n      return err;\n    }).finally(function () {\n      dispatch(removeLoader('postEmail'));\n    });\n  };\n};\nexport var postEmailRequest = function postEmailRequest(params) {\n  return {\n    type: 'EMS_POST_EMAIL_REQUEST',\n    payload: params\n  };\n};\nexport var postEmailSuccess = function postEmailSuccess(data) {\n  return {\n    type: 'EMS_POST_EMAIL_SUCCESS',\n    payload: data\n  };\n};\nexport var postEmailFailure = function postEmailFailure(error) {\n  return {\n    type: 'EMS_POST_EMAIL_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/emailManagementService/emailManagementService.actions.postEmail.js"],"names":["addLoader","removeLoader","enqueueNotification","utils","postEmail","params","dispatch","getState","user","emailId","auth","endpoint","config","vars","emailTo","emailCc","message","subject","objectId","objectCode","emailType","attachments","defaultError","file","postEmailRequest","postEmailFailure","Promise","reject","emailData","replyTo","isPriority","templateName","eventType","api","post","token","accessToken","notificationService","path","data","then","response","handleResponse","json","handleNewData","postEmailSuccess","catch","err","handleError","finally","type","payload","error"],"mappings":"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","sourcesContent":["import { addLoader, removeLoader, enqueueNotification } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const postEmail = (params) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { emailId, auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  const { emailTo, emailCc, message, subject, objectId, objectCode, emailType, attachments = [] } = params;\r\n\r\n  const defaultError = {\r\n    file: 'stores/emailManagementService.actions.postEmail',\r\n  };\r\n\r\n  dispatch(addLoader('postEmail'));\r\n  dispatch(postEmailRequest(params));\r\n\r\n  if (!(emailTo && objectId && objectCode && emailType)) {\r\n    dispatch(postEmailFailure({ ...defaultError, message: 'Missing some params' }));\r\n    dispatch(enqueueNotification('ems.missingParams', 'error'));\r\n    dispatch(removeLoader('postEmail'));\r\n    return Promise.reject({ message: 'Missing some params' });\r\n  }\r\n\r\n  const emailData = {\r\n    emailTo,\r\n    emailCc: `${emailId};${emailCc}`,\r\n    replyTo: `${emailId};${emailCc}`,\r\n    message,\r\n    subject,\r\n    objectId,\r\n    objectCode,\r\n    emailType,\r\n    isPriority: 1,\r\n    templateName: 'Template1', //Will remove once we got confirmation from api team\r\n    eventType: 'PP_ISSUE_DOC', //Will remove once we got confirmation from api team\r\n    attachments,\r\n  };\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.notificationService,\r\n      path: 'email/send',\r\n      data: emailData,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(postEmailSuccess(data));\r\n      dispatch(enqueueNotification('ems.mailSentSuccess', 'success'));\r\n      return data;\r\n    })\r\n    .catch((err) => {\r\n      utils.api.handleError(err, { ...defaultError, message: 'API fetch error (postEmail)' });\r\n      dispatch(postEmailFailure(err));\r\n      dispatch(enqueueNotification('ems.mailSentFailure', 'error'));\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('postEmail'));\r\n    });\r\n};\r\n\r\nexport const postEmailRequest = (params) => {\r\n  return {\r\n    type: 'EMS_POST_EMAIL_REQUEST',\r\n    payload: params,\r\n  };\r\n};\r\n\r\nexport const postEmailSuccess = (data) => {\r\n  return {\r\n    type: 'EMS_POST_EMAIL_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const postEmailFailure = (error) => {\r\n  return {\r\n    type: 'EMS_POST_EMAIL_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}