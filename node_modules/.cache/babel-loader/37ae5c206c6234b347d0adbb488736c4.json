{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ClaimsManageDocuments\\\\ClaimsManageDocuments.js\",\n    _s = $RefreshSig$();\n\nimport { React, useEffect, useState, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ClaimsManageDocumentsView } from './ClaimsManageDocuments.view';\nimport { selectorDmsViewFiles, getViewTableDocuments, selectClaimIdFromGrid, selectLossId, unlinkDmsViewDocuments, viewDocumentsDelete, showModal, viewDocumentsDownload, postClaimAndLossDocumentsToGxb, resetDmsDocumentsUpload, resetDmsDocumentsView, resetDmsDocumentsHistory, resetFilesUploaded, selectDmsDocDetails, selectDmsFileViewGridDataLoader, getDmsDocumentList, enqueueNotification } from 'stores';\nimport * as utils from 'utils';\nimport * as constants from 'consts';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nClaimsManageDocuments.propTypes = {\n  isAllStepsCompleted: PropTypes.bool.isRequired,\n  activeStep: PropTypes.number.isRequired,\n  lastStep: PropTypes.bool.isRequired,\n  handleCancel: PropTypes.func.isRequired,\n  handleFinish: PropTypes.func.isRequired,\n  handleNext: PropTypes.func.isRequired,\n  handleBack: PropTypes.func.isRequired,\n  handleSave: PropTypes.func.isRequired,\n  handleFormStatus: PropTypes.func.isRequired\n};\nexport default function ClaimsManageDocuments(props) {\n  _s();\n\n  var activeStep = props.activeStep,\n      isAllStepsCompleted = props.isAllStepsCompleted,\n      handleBack = props.handleBack,\n      handleNext = props.handleNext,\n      index = props.index,\n      isFormsEdited = props.isFormsEdited,\n      handleSave = props.handleSave,\n      handleFormStatus = props.handleFormStatus;\n  var dispatch = useDispatch();\n  var claimDetails = useSelector(selectClaimIdFromGrid);\n  var lossDetails = useSelector(selectLossId);\n  var sectionType = constants.DMS_CONTEXT_CLAIM;\n  var viewDocumentsList = useSelector(selectorDmsViewFiles);\n  var savedDmsDocList = useSelector(selectDmsDocDetails);\n  var DmsFileViewGridDataLoading = useSelector(selectDmsFileViewGridDataLoader);\n\n  var _useState = useState(DmsFileViewGridDataLoading),\n      _useState2 = _slicedToArray(_useState, 2),\n      isDmsFileViewGridDataLoading = _useState2[0],\n      setIsDmsFileViewGridDataLoading = _useState2[1];\n\n  var claimDocuments = [];\n  var lossDocuments = [];\n\n  var _savedDmsDocList$mana = savedDmsDocList === null || savedDmsDocList === void 0 ? void 0 : savedDmsDocList.manageDocument,\n      lossDocumentDetails = _savedDmsDocList$mana.lossDocumentDetails,\n      claimDocumentDetails = _savedDmsDocList$mana.claimDocumentDetails;\n\n  var updateClaimFileListAfterLinking = function updateClaimFileListAfterLinking() {\n    dispatch(getViewTableDocuments({\n      referenceId: claimDetails === null || claimDetails === void 0 ? void 0 : claimDetails.claimReference,\n      sectionType: sectionType,\n      parentLossRef: lossDetails === null || lossDetails === void 0 ? void 0 : lossDetails.lossRef\n    }));\n  };\n\n  var sendDocumentToGXB = function sendDocumentToGXB(documents) {\n    var lossDoc = _toConsumableArray(lossDocumentDetails);\n\n    var claimDoc = _toConsumableArray(claimDocumentDetails);\n\n    updateGxbIndex(documents, lossDoc);\n    updateGxbIndex(documents, claimDoc);\n    dispatch(getDmsDocumentList('MANAGE_DOCUMENT_LOSS_INFORMATION', lossDoc));\n    dispatch(getDmsDocumentList('MANAGE_DOCUMENT_CLAIM_INFORMATION', claimDoc));\n    dispatch(postClaimAndLossDocumentsToGxb({\n      referenceId: claimDetails === null || claimDetails === void 0 ? void 0 : claimDetails.claimReference,\n      sectionType: sectionType,\n      documents: documents\n    }));\n  };\n\n  var updateGxbIndex = function updateGxbIndex(documentList, docsToUpdate) {\n    var _Object$entries;\n\n    var checkedDocuments = Object.keys(Object.fromEntries((_Object$entries = Object.entries(documentList)) === null || _Object$entries === void 0 ? void 0 : _Object$entries.filter(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n\n      return value;\n    })));\n    docsToUpdate.forEach(function (item) {\n      var _item$documentId;\n\n      item.isSendToGxb = checkedDocuments.includes(item === null || item === void 0 ? void 0 : (_item$documentId = item.documentId) === null || _item$documentId === void 0 ? void 0 : _item$documentId.toString()) ? 1 : 0;\n    });\n  };\n\n  useEffect(function () {\n    var _savedDmsDocList$mana2, _savedDmsDocList$mana3, _savedDmsDocList$mana4, _savedDmsDocList$mana5;\n\n    if (!(savedDmsDocList === null || savedDmsDocList === void 0 ? void 0 : (_savedDmsDocList$mana2 = savedDmsDocList.manageDocument) === null || _savedDmsDocList$mana2 === void 0 ? void 0 : (_savedDmsDocList$mana3 = _savedDmsDocList$mana2.lossDocumentDetails) === null || _savedDmsDocList$mana3 === void 0 ? void 0 : _savedDmsDocList$mana3.length) || !(savedDmsDocList === null || savedDmsDocList === void 0 ? void 0 : (_savedDmsDocList$mana4 = savedDmsDocList.manageDocument) === null || _savedDmsDocList$mana4 === void 0 ? void 0 : (_savedDmsDocList$mana5 = _savedDmsDocList$mana4.claimDocumentDetails) === null || _savedDmsDocList$mana5 === void 0 ? void 0 : _savedDmsDocList$mana5.length)) {\n      updateClaimFileListAfterLinking();\n    }\n\n    return function () {\n      dispatch(resetDmsDocumentsUpload());\n      dispatch(resetDmsDocumentsView());\n      dispatch(resetDmsDocumentsHistory());\n      dispatch(resetFilesUploaded());\n    };\n  }, [] // eslint-disable-line react-hooks/exhaustive-deps\n  ); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  var existedDocumentList = useMemo(function () {\n    return !utils.generic.isInvalidOrEmptyArray(viewDocumentsList) ? viewDocumentsList : [].concat(_toConsumableArray(lossDocumentDetails), _toConsumableArray(claimDocumentDetails));\n  });\n  var originalTableData = useRef(existedDocumentList);\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      search = _useState4[0],\n      setSearch = _useState4[1];\n\n  var _useState5 = useState(originalTableData.current),\n      _useState6 = _slicedToArray(_useState5, 2),\n      filteredTableData = _useState6[0],\n      setFilteredTableData = _useState6[1];\n\n  var searchIndexedTableData = utils.dmsSearch.constructSearchableData(filteredTableData);\n  var fields = utils.generic.isValidArray(existedDocumentList, true) ? existedDocumentList === null || existedDocumentList === void 0 ? void 0 : existedDocumentList.map(function (eachCheck) {\n    return {\n      name: eachCheck === null || eachCheck === void 0 ? void 0 : eachCheck.documentId.toString(),\n      type: 'checkbox',\n      defaultValue: eachCheck.isSendToGxb\n    };\n  }) : [];\n  var validationSchema = utils.form.getValidationSchema(fields);\n  var checkListForm = useForm(_objectSpread({}, validationSchema && {\n    resolver: yupResolver(validationSchema),\n    context: {\n      validation: true\n    }\n  }));\n  var defaultCheckValues = existedDocumentList === null || existedDocumentList === void 0 ? void 0 : existedDocumentList.filter(function (item) {\n    return !!item.isSendToGxb === true;\n  }).length;\n\n  var _useState7 = useState(defaultCheckValues === existedDocumentList.length),\n      _useState8 = _slicedToArray(_useState7, 2),\n      selectAll = _useState8[0],\n      setSelectAll = _useState8[1];\n\n  filteredTableData === null || filteredTableData === void 0 ? void 0 : filteredTableData.forEach(function (item) {\n    if (item === null || item === void 0 ? void 0 : item.isLinkedFromLoss) {\n      lossDocuments.push(item);\n    } else {\n      claimDocuments.push(item);\n    }\n  });\n  var columns = [{\n    id: 'gxb',\n    label: utils.string.t('claims.manageDocumentLabels.gxb'),\n    visible: true,\n    compact: true,\n    align: 'left'\n  }, {\n    id: 'filename',\n    label: utils.string.t('claims.manageDocumentLabels.filename'),\n    visible: true,\n    compact: true,\n    align: 'left',\n    width: '25px'\n  }, {\n    id: 'uploadedby',\n    label: utils.string.t('claims.manageDocumentLabels.uploadedby'),\n    visible: true,\n    compact: true,\n    align: 'left'\n  }, {\n    id: 'uploadedon',\n    label: utils.string.t('claims.manageDocumentLabels.uploadedon'),\n    visible: true,\n    compact: true,\n    align: 'left'\n  }];\n  var popoverActions = [{\n    id: 'download',\n    label: utils.string.t('dms.view.popOverMenuItems.download'),\n    callback: function callback(_ref3) {\n      var doc = _ref3.doc;\n      return dispatch(viewDocumentsDownload(doc));\n    }\n  }, {\n    id: 'unlink',\n    label: utils.string.t('dms.view.popOverMenuItems.unlink'),\n    callback: function callback(_ref4) {\n      var doc = _ref4.doc;\n      return confirmDocumentUnlink([doc]);\n    }\n  }, {\n    id: 'delete',\n    label: utils.string.t('dms.view.popOverMenuItems.delete'),\n    callback: function callback(_ref5) {\n      var doc = _ref5.doc;\n      return confirmDocumentDelete([doc]);\n    }\n  }, {\n    id: 'versionHistory',\n    label: utils.string.t('dms.view.popOverMenuItems.versionHistory'),\n    callback: function callback(_ref6) {\n      var doc = _ref6.doc;\n      return showVersionHistoryModal(doc);\n    }\n  }, {\n    id: 'copyLink',\n    label: utils.string.t('dms.view.popOverMenuItems.copylink'),\n    callback: function callback(_ref7) {\n      var doc = _ref7.doc;\n      return copyLinkToClipboard(doc);\n    }\n  }];\n  var searchFields = [{\n    name: 'query',\n    type: 'text',\n    placeholder: utils.string.t('claims.manageDocumentLabels.searchPlaceholder'),\n    defaultValue: '',\n    gridSize: {\n      xs: 12\n    },\n    muiComponentProps: {\n      autoComplete: 'off'\n    }\n  }];\n  var searchActions = [{\n    name: 'filter',\n    label: utils.string.t('app.searchLabel'),\n    handler: function handler(_ref8) {\n      var query = _ref8.query;\n      return setSearch(query);\n    }\n  }, {\n    name: 'reset',\n    label: utils.string.t('app.reset'),\n    handler: function handler() {\n      return setSearch('');\n    }\n  }];\n\n  var confirmDocumentUnlink = function confirmDocumentUnlink(docs) {\n    var requestParams = [];\n    docs === null || docs === void 0 ? void 0 : docs.forEach(function (doc) {\n      if (doc === null || doc === void 0 ? void 0 : doc.isLinkedFromLoss) {\n        requestParams.push({\n          documentId: doc.documentId,\n          referenceId: claimDetails === null || claimDetails === void 0 ? void 0 : claimDetails.claimReference,\n          sectionType: sectionType\n        }, {\n          documentId: doc.documentId,\n          referenceId: lossDetails === null || lossDetails === void 0 ? void 0 : lossDetails.lossRef,\n          sectionType: constants.DMS_CONTEXT_LOSS\n        });\n      } else {\n        requestParams.push({\n          documentId: doc.documentId,\n          referenceId: claimDetails === null || claimDetails === void 0 ? void 0 : claimDetails.claimReference,\n          sectionType: sectionType\n        });\n      }\n    });\n    var requestParamsLength = requestParams === null || requestParams === void 0 ? void 0 : requestParams.length;\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        fullWidth: true,\n        title: utils.string.t('dms.view.unlinkDocument.title'),\n        maxWidth: 'xs',\n        componentProps: {\n          confirmLabel: utils.string.t('dms.view.unlinkDocument.confirmLabel'),\n          confirmMessage: requestParamsLength === 1 ? utils.string.t('dms.view.unlinkDocument.confirmMessage') : utils.string.t('dms.view.unlinkDocument.confirmMessageForMulti', {\n            count: requestParamsLength\n          }),\n          submitHandler: function submitHandler() {\n            return dispatch(unlinkDmsViewDocuments(requestParams)).then(function (response) {\n              if ((response === null || response === void 0 ? void 0 : response.status) === constants.API_RESPONSE_OK) {\n                updateClaimFileListAfterLinking();\n              }\n            });\n          }\n        }\n      }\n    }));\n  };\n\n  var confirmDocumentDelete = function confirmDocumentDelete(docs) {\n    var documentIds = docs === null || docs === void 0 ? void 0 : docs.map(function (doc) {\n      return doc.documentId;\n    });\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        fullWidth: true,\n        title: utils.string.t('dms.view.deleteDocument.title'),\n        maxWidth: 'xs',\n        componentProps: {\n          confirmLabel: utils.string.t('dms.view.deleteDocument.confirmLabel'),\n          confirmMessage: utils.string.t('dms.view.deleteDocument.confirmMessage'),\n          submitHandler: function submitHandler() {\n            return dispatch(viewDocumentsDelete(documentIds)).then(function (response) {\n              if ((response === null || response === void 0 ? void 0 : response.status) === constants.API_RESPONSE_OK) {\n                updateClaimFileListAfterLinking();\n              }\n            });\n          }\n        }\n      }\n    }));\n  };\n\n  var showVersionHistoryModal = function showVersionHistoryModal(docData) {\n    dispatch(showModal({\n      component: 'DMS_VERSION_HISTORY',\n      props: {\n        fullWidth: true,\n        title: utils.string.t('dms.view.versionHistory.title'),\n        maxWidth: 'xs',\n        componentProps: {\n          docData: docData\n        }\n      }\n    }));\n  };\n\n  var viewDocLauncher = function viewDocLauncher(e, doc) {\n    e.preventDefault();\n    var documentId = doc.documentId,\n        documentName = doc.documentName;\n    utils.dms.dmsDocumentViewLauncher(documentId, documentName);\n  };\n\n  var copyLinkToClipboard = function copyLinkToClipboard(doc) {\n    var _navigator, _window;\n\n    if (((_navigator = navigator) === null || _navigator === void 0 ? void 0 : _navigator.clipboard) !== undefined) {\n      var _navigator2, _navigator2$clipboard;\n\n      //Chrome and other \n      (_navigator2 = navigator) === null || _navigator2 === void 0 ? void 0 : (_navigator2$clipboard = _navigator2.clipboard) === null || _navigator2$clipboard === void 0 ? void 0 : _navigator2$clipboard.writeText(doc === null || doc === void 0 ? void 0 : doc.documentPath).then(function () {\n        dispatch(enqueueNotification(utils.string.t('claims.manageDocumentLabels.copyToClipBoardMessage'), 'success'));\n      }, function (err) {\n        dispatch(enqueueNotification(err, 'error'));\n      });\n    } else if ((_window = window) === null || _window === void 0 ? void 0 : _window.clipboardData) {\n      var _window2, _window2$clipboardDat;\n\n      // Internet Explorer\n      (_window2 = window) === null || _window2 === void 0 ? void 0 : (_window2$clipboardDat = _window2.clipboardData) === null || _window2$clipboardDat === void 0 ? void 0 : _window2$clipboardDat.setData('Text', doc === null || doc === void 0 ? void 0 : doc.documentPath);\n      dispatch(enqueueNotification(utils.string.t('claims.manageDocumentLabels.copyToClipBoardMessage'), 'success'));\n    }\n  };\n\n  useEffect(function () {\n    if (search) {\n      setFilteredTableData(utils.dmsSearch.getFilteredTableData(searchIndexedTableData, search, originalTableData));\n    } else setFilteredTableData(originalTableData.current);\n  }, [search]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    if (!utils.generic.isInvalidOrEmptyArray(existedDocumentList)) {\n      originalTableData.current = existedDocumentList;\n      setFilteredTableData(originalTableData.current);\n    }\n  }, [viewDocumentsList]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    setIsDmsFileViewGridDataLoading(DmsFileViewGridDataLoading);\n  }, [DmsFileViewGridDataLoading]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/_jsxDEV(ClaimsManageDocumentsView, {\n    activeStep: activeStep,\n    isAllStepsCompleted: isAllStepsCompleted,\n    handleBack: handleBack,\n    handleNext: handleNext,\n    index: index,\n    isFormsEdited: isFormsEdited,\n    handleSave: handleSave,\n    col: columns,\n    fields: fields,\n    formControls: checkListForm,\n    popoverActions: popoverActions,\n    searchFields: searchFields,\n    searchActions: searchActions,\n    claimDocuments: claimDocuments,\n    lossDocuments: lossDocuments,\n    updateClaimFileListAfterLinking: updateClaimFileListAfterLinking,\n    sendDocumentToGXB: sendDocumentToGXB,\n    selectAll: selectAll,\n    setSelectAll: setSelectAll,\n    handleFormStatus: handleFormStatus,\n    handlers: {\n      viewDocLauncher: viewDocLauncher\n    },\n    isDmsFileViewGridDataLoading: isDmsFileViewGridDataLoading\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 353,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ClaimsManageDocuments, \"sqcxCMKEAOA0cw2ON+XmmL0EQyY=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useForm];\n});\n\n_c = ClaimsManageDocuments;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimsManageDocuments\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ClaimsManageDocuments/ClaimsManageDocuments.js"],"names":["React","useEffect","useState","useRef","useMemo","PropTypes","useDispatch","useSelector","ClaimsManageDocumentsView","selectorDmsViewFiles","getViewTableDocuments","selectClaimIdFromGrid","selectLossId","unlinkDmsViewDocuments","viewDocumentsDelete","showModal","viewDocumentsDownload","postClaimAndLossDocumentsToGxb","resetDmsDocumentsUpload","resetDmsDocumentsView","resetDmsDocumentsHistory","resetFilesUploaded","selectDmsDocDetails","selectDmsFileViewGridDataLoader","getDmsDocumentList","enqueueNotification","utils","constants","useForm","yupResolver","ClaimsManageDocuments","propTypes","isAllStepsCompleted","bool","isRequired","activeStep","number","lastStep","handleCancel","func","handleFinish","handleNext","handleBack","handleSave","handleFormStatus","props","index","isFormsEdited","dispatch","claimDetails","lossDetails","sectionType","DMS_CONTEXT_CLAIM","viewDocumentsList","savedDmsDocList","DmsFileViewGridDataLoading","isDmsFileViewGridDataLoading","setIsDmsFileViewGridDataLoading","claimDocuments","lossDocuments","manageDocument","lossDocumentDetails","claimDocumentDetails","updateClaimFileListAfterLinking","referenceId","claimReference","parentLossRef","lossRef","sendDocumentToGXB","documents","lossDoc","claimDoc","updateGxbIndex","documentList","docsToUpdate","checkedDocuments","Object","keys","fromEntries","entries","filter","key","value","forEach","item","isSendToGxb","includes","documentId","toString","length","existedDocumentList","generic","isInvalidOrEmptyArray","originalTableData","search","setSearch","current","filteredTableData","setFilteredTableData","searchIndexedTableData","dmsSearch","constructSearchableData","fields","isValidArray","map","eachCheck","name","type","defaultValue","validationSchema","form","getValidationSchema","checkListForm","resolver","context","validation","defaultCheckValues","selectAll","setSelectAll","isLinkedFromLoss","push","columns","id","label","string","t","visible","compact","align","width","popoverActions","callback","doc","confirmDocumentUnlink","confirmDocumentDelete","showVersionHistoryModal","copyLinkToClipboard","searchFields","placeholder","gridSize","xs","muiComponentProps","autoComplete","searchActions","handler","query","docs","requestParams","DMS_CONTEXT_LOSS","requestParamsLength","component","fullWidth","title","maxWidth","componentProps","confirmLabel","confirmMessage","count","submitHandler","then","response","status","API_RESPONSE_OK","documentIds","docData","viewDocLauncher","e","preventDefault","documentName","dms","dmsDocumentViewLauncher","navigator","clipboard","undefined","writeText","documentPath","err","window","clipboardData","setData","getFilteredTableData"],"mappings":"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","sourcesContent":["import { React, useEffect, useState, useRef, useMemo } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ClaimsManageDocumentsView } from './ClaimsManageDocuments.view';\r\nimport {\r\n  selectorDmsViewFiles,\r\n  getViewTableDocuments,\r\n  selectClaimIdFromGrid,\r\n  selectLossId,\r\n  unlinkDmsViewDocuments,\r\n  viewDocumentsDelete,\r\n  showModal,\r\n  viewDocumentsDownload,\r\n  postClaimAndLossDocumentsToGxb,\r\n  resetDmsDocumentsUpload,\r\n  resetDmsDocumentsView,\r\n  resetDmsDocumentsHistory,\r\n  resetFilesUploaded,\r\n  selectDmsDocDetails,\r\n  selectDmsFileViewGridDataLoader,\r\n  getDmsDocumentList,\r\n  enqueueNotification,\r\n} from 'stores';\r\nimport * as utils from 'utils';\r\nimport * as constants from 'consts';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n\r\nClaimsManageDocuments.propTypes = {\r\n  isAllStepsCompleted: PropTypes.bool.isRequired,\r\n  activeStep: PropTypes.number.isRequired,\r\n  lastStep: PropTypes.bool.isRequired,\r\n  handleCancel: PropTypes.func.isRequired,\r\n  handleFinish: PropTypes.func.isRequired,\r\n  handleNext: PropTypes.func.isRequired,\r\n  handleBack: PropTypes.func.isRequired,\r\n  handleSave: PropTypes.func.isRequired,\r\n  handleFormStatus: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default function ClaimsManageDocuments(props) {\r\n  const { activeStep, isAllStepsCompleted, handleBack, handleNext, index, isFormsEdited, handleSave, handleFormStatus } = props;\r\n\r\n  const dispatch = useDispatch();\r\n  const claimDetails = useSelector(selectClaimIdFromGrid);\r\n  const lossDetails = useSelector(selectLossId);\r\n  const sectionType = constants.DMS_CONTEXT_CLAIM;\r\n\r\n  const viewDocumentsList = useSelector(selectorDmsViewFiles);\r\n  const savedDmsDocList = useSelector(selectDmsDocDetails);\r\n  const DmsFileViewGridDataLoading = useSelector(selectDmsFileViewGridDataLoader);\r\n\r\n  const [isDmsFileViewGridDataLoading, setIsDmsFileViewGridDataLoading] = useState(DmsFileViewGridDataLoading);\r\n\r\n  const claimDocuments = [];\r\n  const lossDocuments = [];\r\n\r\n  const { lossDocumentDetails, claimDocumentDetails } = savedDmsDocList?.manageDocument;\r\n\r\n  const updateClaimFileListAfterLinking = () => {\r\n    dispatch(getViewTableDocuments({ referenceId: claimDetails?.claimReference, sectionType, parentLossRef: lossDetails?.lossRef }));\r\n  };\r\n\r\n  const sendDocumentToGXB = (documents) => {\r\n    const lossDoc = [...lossDocumentDetails];\r\n    const claimDoc = [...claimDocumentDetails];\r\n    updateGxbIndex(documents, lossDoc);\r\n    updateGxbIndex(documents, claimDoc);\r\n    dispatch(getDmsDocumentList('MANAGE_DOCUMENT_LOSS_INFORMATION', lossDoc));\r\n    dispatch(getDmsDocumentList('MANAGE_DOCUMENT_CLAIM_INFORMATION', claimDoc));\r\n    dispatch(postClaimAndLossDocumentsToGxb({ referenceId: claimDetails?.claimReference, sectionType: sectionType, documents: documents }));\r\n  };\r\n\r\n  const updateGxbIndex = (documentList, docsToUpdate) => {\r\n    const checkedDocuments = Object.keys(Object.fromEntries(Object.entries(documentList)?.filter(([key, value]) => value)));\r\n    docsToUpdate.forEach((item) => {\r\n      item.isSendToGxb = checkedDocuments.includes(item?.documentId?.toString()) ? 1 : 0;\r\n    });\r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n      if (!savedDmsDocList?.manageDocument?.lossDocumentDetails?.length || !savedDmsDocList?.manageDocument?.claimDocumentDetails?.length) {\r\n        updateClaimFileListAfterLinking();\r\n      }\r\n      return () => {\r\n        dispatch(resetDmsDocumentsUpload());\r\n        dispatch(resetDmsDocumentsView());\r\n        dispatch(resetDmsDocumentsHistory());\r\n        dispatch(resetFilesUploaded());\r\n      };\r\n    },\r\n    [] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  const existedDocumentList = useMemo(() =>\r\n    !utils.generic.isInvalidOrEmptyArray(viewDocumentsList) ? viewDocumentsList : [...lossDocumentDetails, ...claimDocumentDetails]\r\n  );\r\n\r\n  const originalTableData = useRef(existedDocumentList);\r\n\r\n  const [search, setSearch] = useState('');\r\n  const [filteredTableData, setFilteredTableData] = useState(originalTableData.current);\r\n  const searchIndexedTableData = utils.dmsSearch.constructSearchableData(filteredTableData);\r\n\r\n  const fields = utils.generic.isValidArray(existedDocumentList, true)\r\n    ? existedDocumentList?.map((eachCheck) => ({\r\n        name: eachCheck?.documentId.toString(),\r\n        type: 'checkbox',\r\n        defaultValue: eachCheck.isSendToGxb,\r\n      }))\r\n    : [];\r\n\r\n  const validationSchema = utils.form.getValidationSchema(fields);\r\n  const checkListForm = useForm({\r\n    ...(validationSchema && { resolver: yupResolver(validationSchema), context: { validation: true } }),\r\n  });\r\n\r\n  const defaultCheckValues = existedDocumentList?.filter((item) => !!item.isSendToGxb === true).length;\r\n  const [selectAll, setSelectAll] = useState(defaultCheckValues === existedDocumentList.length);\r\n\r\n  filteredTableData?.forEach((item) => {\r\n    if (item?.isLinkedFromLoss) {\r\n      lossDocuments.push(item);\r\n    } else {\r\n      claimDocuments.push(item);\r\n    }\r\n  });\r\n\r\n  const columns = [\r\n    {\r\n      id: 'gxb',\r\n      label: utils.string.t('claims.manageDocumentLabels.gxb'),\r\n      visible: true,\r\n      compact: true,\r\n      align: 'left',\r\n    },\r\n    {\r\n      id: 'filename',\r\n      label: utils.string.t('claims.manageDocumentLabels.filename'),\r\n      visible: true,\r\n      compact: true,\r\n      align: 'left',\r\n      width: '25px',\r\n    },\r\n    {\r\n      id: 'uploadedby',\r\n      label: utils.string.t('claims.manageDocumentLabels.uploadedby'),\r\n      visible: true,\r\n      compact: true,\r\n      align: 'left',\r\n    },\r\n    {\r\n      id: 'uploadedon',\r\n      label: utils.string.t('claims.manageDocumentLabels.uploadedon'),\r\n      visible: true,\r\n      compact: true,\r\n      align: 'left',\r\n    },\r\n  ];\r\n\r\n  const popoverActions = [\r\n    {\r\n      id: 'download',\r\n      label: utils.string.t('dms.view.popOverMenuItems.download'),\r\n      callback: ({ doc }) => dispatch(viewDocumentsDownload(doc)),\r\n    },\r\n    {\r\n      id: 'unlink',\r\n      label: utils.string.t('dms.view.popOverMenuItems.unlink'),\r\n      callback: ({ doc }) => confirmDocumentUnlink([doc]),\r\n    },\r\n    {\r\n      id: 'delete',\r\n      label: utils.string.t('dms.view.popOverMenuItems.delete'),\r\n      callback: ({ doc }) => confirmDocumentDelete([doc]),\r\n    },\r\n    {\r\n      id: 'versionHistory',\r\n      label: utils.string.t('dms.view.popOverMenuItems.versionHistory'),\r\n      callback: ({ doc }) => showVersionHistoryModal(doc),\r\n    },\r\n    {\r\n      id: 'copyLink',\r\n      label: utils.string.t('dms.view.popOverMenuItems.copylink'),\r\n      callback: ({ doc }) => copyLinkToClipboard(doc),\r\n    },\r\n  ];\r\n\r\n  const searchFields = [\r\n    {\r\n      name: 'query',\r\n      type: 'text',\r\n      placeholder: utils.string.t('claims.manageDocumentLabels.searchPlaceholder'),\r\n      defaultValue: '',\r\n      gridSize: { xs: 12 },\r\n      muiComponentProps: {\r\n        autoComplete: 'off',\r\n      },\r\n    },\r\n  ];\r\n\r\n  const searchActions = [\r\n    {\r\n      name: 'filter',\r\n      label: utils.string.t('app.searchLabel'),\r\n      handler: ({ query }) => setSearch(query),\r\n    },\r\n    {\r\n      name: 'reset',\r\n      label: utils.string.t('app.reset'),\r\n      handler: () => setSearch(''),\r\n    },\r\n  ];\r\n\r\n  const confirmDocumentUnlink = (docs) => {\r\n    const requestParams = [];\r\n    docs?.forEach((doc) => {\r\n      if (doc?.isLinkedFromLoss) {\r\n        requestParams.push(\r\n          {\r\n            documentId: doc.documentId,\r\n            referenceId: claimDetails?.claimReference,\r\n            sectionType: sectionType,\r\n          },\r\n          {\r\n            documentId: doc.documentId,\r\n            referenceId: lossDetails?.lossRef,\r\n            sectionType: constants.DMS_CONTEXT_LOSS,\r\n          }\r\n        );\r\n      } else {\r\n        requestParams.push({\r\n          documentId: doc.documentId,\r\n          referenceId: claimDetails?.claimReference,\r\n          sectionType: sectionType,\r\n        });\r\n      }\r\n    });\r\n    const requestParamsLength = requestParams?.length;\r\n\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          fullWidth: true,\r\n          title: utils.string.t('dms.view.unlinkDocument.title'),\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            confirmLabel: utils.string.t('dms.view.unlinkDocument.confirmLabel'),\r\n            confirmMessage:\r\n              requestParamsLength === 1\r\n                ? utils.string.t('dms.view.unlinkDocument.confirmMessage')\r\n                : utils.string.t('dms.view.unlinkDocument.confirmMessageForMulti', {\r\n                    count: requestParamsLength,\r\n                  }),\r\n            submitHandler: () =>\r\n              dispatch(unlinkDmsViewDocuments(requestParams)).then((response) => {\r\n                if (response?.status === constants.API_RESPONSE_OK) {\r\n                  updateClaimFileListAfterLinking();\r\n                }\r\n              }),\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const confirmDocumentDelete = (docs) => {\r\n    const documentIds = docs?.map((doc) => doc.documentId);\r\n\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          fullWidth: true,\r\n          title: utils.string.t('dms.view.deleteDocument.title'),\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            confirmLabel: utils.string.t('dms.view.deleteDocument.confirmLabel'),\r\n            confirmMessage: utils.string.t('dms.view.deleteDocument.confirmMessage'),\r\n            submitHandler: () =>\r\n              dispatch(viewDocumentsDelete(documentIds)).then((response) => {\r\n                if (response?.status === constants.API_RESPONSE_OK) {\r\n                  updateClaimFileListAfterLinking();\r\n                }\r\n              }),\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const showVersionHistoryModal = (docData) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'DMS_VERSION_HISTORY',\r\n        props: {\r\n          fullWidth: true,\r\n          title: utils.string.t('dms.view.versionHistory.title'),\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            docData: docData,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const viewDocLauncher = (e, doc) => {\r\n    e.preventDefault();\r\n    const { documentId, documentName } = doc;\r\n    utils.dms.dmsDocumentViewLauncher(documentId, documentName);\r\n  };\r\n\r\n  const copyLinkToClipboard = (doc) => {\r\n    if (navigator?.clipboard !== undefined) {\r\n      //Chrome and other \r\n      navigator?.clipboard?.writeText(doc?.documentPath).then(\r\n        function () {\r\n          dispatch(enqueueNotification(utils.string.t('claims.manageDocumentLabels.copyToClipBoardMessage'), 'success'));\r\n        },\r\n        function (err) {\r\n          dispatch(enqueueNotification(err, 'error'));\r\n        }\r\n      );\r\n    } else if (window?.clipboardData) {\r\n      // Internet Explorer\r\n      window?.clipboardData?.setData('Text', doc?.documentPath);\r\n      dispatch(enqueueNotification(utils.string.t('claims.manageDocumentLabels.copyToClipBoardMessage'), 'success'));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (search) {\r\n      setFilteredTableData(utils.dmsSearch.getFilteredTableData(searchIndexedTableData, search, originalTableData));\r\n    } else setFilteredTableData(originalTableData.current);\r\n  }, [search]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    if (!utils.generic.isInvalidOrEmptyArray(existedDocumentList)) {\r\n      originalTableData.current = existedDocumentList;\r\n      setFilteredTableData(originalTableData.current);\r\n    }\r\n  }, [viewDocumentsList]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    setIsDmsFileViewGridDataLoading(DmsFileViewGridDataLoading);\r\n  }, [DmsFileViewGridDataLoading]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <ClaimsManageDocumentsView\r\n      activeStep={activeStep}\r\n      isAllStepsCompleted={isAllStepsCompleted}\r\n      handleBack={handleBack}\r\n      handleNext={handleNext}\r\n      index={index}\r\n      isFormsEdited={isFormsEdited}\r\n      handleSave={handleSave}\r\n      col={columns}\r\n      fields={fields}\r\n      formControls={checkListForm}\r\n      popoverActions={popoverActions}\r\n      searchFields={searchFields}\r\n      searchActions={searchActions}\r\n      claimDocuments={claimDocuments}\r\n      lossDocuments={lossDocuments}\r\n      updateClaimFileListAfterLinking={updateClaimFileListAfterLinking}\r\n      sendDocumentToGXB={sendDocumentToGXB}\r\n      selectAll={selectAll}\r\n      setSelectAll={setSelectAll}\r\n      handleFormStatus={handleFormStatus}\r\n      handlers={{\r\n        viewDocLauncher,\r\n      }}\r\n      isDmsFileViewGridDataLoading={isDmsFileViewGridDataLoading}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}