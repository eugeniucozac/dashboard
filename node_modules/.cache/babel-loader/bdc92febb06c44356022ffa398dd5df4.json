{"ast":null,"code":"import _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\pages\\\\ClaimsNewLoss\\\\ClaimsNewLoss.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport { Helmet } from 'react-helmet';\nimport get from 'lodash/get'; // app\n\nimport { ClaimsNewLossView } from './ClaimsNewLoss.view';\nimport { showModal, selectLossId, selectClaimIdUnderProgress, selectClaimsStepper, selectCatCodes, selectClaimsStatuses, selectPriorities, selectLossQualifiers, selectSettlementCurrency, selectReferralResponse, getCatCodes, getStatuses, getPriorityLevels, getLossQualifiers, getSettlementCurrency, getReferralResponse, postLossInformation, postLossInformationSuccess, postClaimDetailsInformation, postEditClaimDetailsInformation, postClaimDetailsInformationSuccess, postEditLossInformation, resetClaimsPoliciesTemp, resetClaimData, selectClaimIdFromGrid, selectAllClaimDetails, selectComplexityValues, getComplexityValues, selectClaimData } from 'stores';\nimport * as utils from 'utils';\nimport config from 'config'; // mui\n\nimport { Typography } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ClaimsNewLoss() {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isNavigationAllowed = _useState2[0],\n      setIsNavigationAllowed = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      validation = _useState4[0],\n      setValidation = _useState4[1];\n\n  var dispatch = useDispatch();\n  var history = useHistory();\n  var brand = useSelector(function (state) {\n    return state.ui.brand;\n  });\n  var lossInformation = useSelector(selectLossId);\n  var claimData = useSelector(selectClaimIdUnderProgress);\n  var catCodes = useSelector(selectCatCodes);\n  var priorities = useSelector(selectPriorities);\n  var lossQualifiers = useSelector(selectLossQualifiers);\n  var claimsStatuses = useSelector(selectClaimsStatuses);\n  var settlementCurrency = useSelector(selectSettlementCurrency);\n  var referralResponse = useSelector(selectReferralResponse);\n  var submitClaimID = get(claimData, 'claimID') || '';\n  var currentStep = useSelector(selectClaimsStepper);\n  var claimsInformation = useSelector(selectClaimIdFromGrid);\n  var editClaimId = get(claimsInformation, 'claimID') || '';\n  var allClaimDetails = useSelector(selectAllClaimDetails);\n  var complexityValues = useSelector(selectComplexityValues);\n  var existingClaimData = useSelector(selectClaimData);\n  var steps = [{\n    slug: 'enterLossInformation',\n    label: 'Enter Loss Information'\n  }, {\n    slug: 'searchPolicy',\n    label: 'Search Policy'\n  }, {\n    slug: 'enterClaimInformation',\n    label: 'Enter Claim Information'\n  }, {\n    slug: 'previewInformation',\n    label: 'Preview Information'\n  }, {\n    slug: 'acknowledgement',\n    label: 'Acknowledgement'\n  }]; // Get this info from api\n\n  var claim = {\n    claimRef: 'CL55690',\n    firstAdvicePac: '13/05/2021',\n    firstAdviceDtu: '13/05/2021'\n  };\n\n  var handleSaveNewClaim = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (submitClaimID) {\n                _context.next = 10;\n                break;\n              }\n\n              if (!editClaimId) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 4;\n              return dispatch(postEditClaimDetailsInformation(values));\n\n            case 4:\n              _context.next = 8;\n              break;\n\n            case 6:\n              _context.next = 8;\n              return dispatch(postClaimDetailsInformation(values));\n\n            case 8:\n              _context.next = 12;\n              break;\n\n            case 10:\n              _context.next = 12;\n              return dispatch(postEditClaimDetailsInformation(values));\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSaveNewClaim(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleSaveNewLoss = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(values) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(lossInformation === null || lossInformation === void 0 ? void 0 : lossInformation.lossDetailID)) {\n                _context2.next = 5;\n                break;\n              }\n\n              _context2.next = 3;\n              return dispatch(postEditLossInformation(values));\n\n            case 3:\n              _context2.next = 7;\n              break;\n\n            case 5:\n              _context2.next = 7;\n              return dispatch(postLossInformation(values));\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleSaveNewLoss(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // On click of cancel button\n\n\n  var launchConfirmModal = function launchConfirmModal() {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        title: utils.string.t('navigation.alert'),\n        fullWidth: true,\n        maxWidth: 'sm',\n        componentProps: {\n          confirmLabel: utils.string.t('app.yes'),\n          cancelLabel: utils.string.t('app.no'),\n          confirmMessage: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            color: \"secondary\",\n            children: utils.string.t('claims.modals.confirm.subtitle')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 15\n          }, _this),\n          submitHandler: function submitHandler() {\n            setIsNavigationAllowed(true);\n            dispatch(postLossInformationSuccess({}));\n            dispatch(postClaimDetailsInformationSuccess(null));\n            dispatch(resetClaimsPoliciesTemp());\n            history.push(config.routes.claimsFNOL.root);\n          },\n          handleClose: function handleClose() {}\n        }\n      }\n    }));\n  }; // On click of Finish button\n\n\n  var launchFinishModal = function launchFinishModal() {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        title: utils.string.t('claims.modals.finishRegisterLoss.title'),\n        fullWidth: true,\n        maxWidth: 'sm',\n        componentProps: {\n          confirmLabel: utils.string.t('app.yes'),\n          cancelLabel: utils.string.t('app.no'),\n          confirmMessage: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            color: \"secondary\",\n            children: utils.string.t('claims.modals.finishRegisterLoss.content')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 15\n          }, _this),\n          submitHandler: function submitHandler() {\n            setIsNavigationAllowed(true);\n            dispatch(resetClaimData());\n            history.push(config.routes.claimsFNOL.root);\n          },\n          handleClose: function handleClose() {}\n        }\n      }\n    }));\n  };\n\n  var handleCancelRegisterNewLoss = function handleCancelRegisterNewLoss() {\n    launchConfirmModal();\n  };\n\n  var getAllReferentialData = function getAllReferentialData() {\n    if (utils.generic.isInvalidOrEmptyArray(catCodes)) {\n      dispatch(getCatCodes());\n    }\n\n    if (utils.generic.isInvalidOrEmptyArray(priorities)) {\n      dispatch(getPriorityLevels());\n    }\n\n    if (utils.generic.isInvalidOrEmptyArray(lossQualifiers)) {\n      dispatch(getLossQualifiers());\n    }\n\n    if (utils.generic.isInvalidOrEmptyArray(claimsStatuses)) {\n      dispatch(getStatuses());\n    }\n\n    if (utils.generic.isInvalidOrEmptyArray(settlementCurrency)) {\n      dispatch(getSettlementCurrency());\n    }\n\n    if (utils.generic.isInvalidOrEmptyArray(referralResponse)) {\n      dispatch(getReferralResponse());\n    }\n  };\n\n  useEffect(function () {\n    getAllReferentialData();\n\n    if (!(existingClaimData === null || existingClaimData === void 0 ? void 0 : existingClaimData.claimId)) {\n      if (utils.generic.isInvalidOrEmptyArray(lossQualifiers)) {\n        dispatch(getLossQualifiers());\n      }\n\n      dispatch(getComplexityValues());\n    }\n\n    return function () {\n      dispatch(resetClaimData());\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"\".concat(utils.string.t('claims.actions.registerNewLoss'), \" - \").concat(utils.app.getAppName(brand))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ClaimsNewLossView, {\n      claim: claim,\n      steps: steps,\n      currentStep: currentStep,\n      isNavigationAllowed: isNavigationAllowed,\n      handleCancel: handleCancelRegisterNewLoss,\n      handleFinishNewLoss: launchFinishModal,\n      handleSaveNewLoss: handleSaveNewLoss,\n      handleSaveNewClaim: handleSaveNewClaim,\n      validation: validation,\n      setValidation: setValidation,\n      allClaimDetails: allClaimDetails,\n      complexityValues: complexityValues,\n      lossQualifiers: lossQualifiers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ClaimsNewLoss, \"E9ze4h2+6agNUKosF1gE59lRHdA=\", false, function () {\n  return [useDispatch, useHistory, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = ClaimsNewLoss;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimsNewLoss\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/pages/ClaimsNewLoss/ClaimsNewLoss.js"],"names":["React","useState","useEffect","useDispatch","useSelector","useHistory","Helmet","get","ClaimsNewLossView","showModal","selectLossId","selectClaimIdUnderProgress","selectClaimsStepper","selectCatCodes","selectClaimsStatuses","selectPriorities","selectLossQualifiers","selectSettlementCurrency","selectReferralResponse","getCatCodes","getStatuses","getPriorityLevels","getLossQualifiers","getSettlementCurrency","getReferralResponse","postLossInformation","postLossInformationSuccess","postClaimDetailsInformation","postEditClaimDetailsInformation","postClaimDetailsInformationSuccess","postEditLossInformation","resetClaimsPoliciesTemp","resetClaimData","selectClaimIdFromGrid","selectAllClaimDetails","selectComplexityValues","getComplexityValues","selectClaimData","utils","config","Typography","ClaimsNewLoss","isNavigationAllowed","setIsNavigationAllowed","validation","setValidation","dispatch","history","brand","state","ui","lossInformation","claimData","catCodes","priorities","lossQualifiers","claimsStatuses","settlementCurrency","referralResponse","submitClaimID","currentStep","claimsInformation","editClaimId","allClaimDetails","complexityValues","existingClaimData","steps","slug","label","claim","claimRef","firstAdvicePac","firstAdviceDtu","handleSaveNewClaim","values","handleSaveNewLoss","lossDetailID","launchConfirmModal","component","props","title","string","t","fullWidth","maxWidth","componentProps","confirmLabel","cancelLabel","confirmMessage","submitHandler","push","routes","claimsFNOL","root","handleClose","launchFinishModal","handleCancelRegisterNewLoss","getAllReferentialData","generic","isInvalidOrEmptyArray","claimId","app","getAppName"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport { Helmet } from 'react-helmet';\r\nimport get from 'lodash/get';\r\n\r\n// app\r\nimport { ClaimsNewLossView } from './ClaimsNewLoss.view';\r\nimport {\r\n  showModal,\r\n  selectLossId,\r\n  selectClaimIdUnderProgress,\r\n  selectClaimsStepper,\r\n  selectCatCodes,\r\n  selectClaimsStatuses,\r\n  selectPriorities,\r\n  selectLossQualifiers,\r\n  selectSettlementCurrency,\r\n  selectReferralResponse,\r\n  getCatCodes,\r\n  getStatuses,\r\n  getPriorityLevels,\r\n  getLossQualifiers,\r\n  getSettlementCurrency,\r\n  getReferralResponse,\r\n  postLossInformation,\r\n  postLossInformationSuccess,\r\n  postClaimDetailsInformation,\r\n  postEditClaimDetailsInformation,\r\n  postClaimDetailsInformationSuccess,\r\n  postEditLossInformation,\r\n  resetClaimsPoliciesTemp,\r\n  resetClaimData,\r\n  selectClaimIdFromGrid,\r\n\r\n\r\n  selectAllClaimDetails,\r\n  selectComplexityValues,\r\n  getComplexityValues,\r\n  selectClaimData\r\n} from 'stores';\r\nimport * as utils from 'utils';\r\nimport config from 'config';\r\n\r\n// mui\r\nimport { Typography } from '@material-ui/core';\r\n\r\nexport default function ClaimsNewLoss() {\r\n  const [isNavigationAllowed, setIsNavigationAllowed] = useState(false);\r\n  const [validation, setValidation] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const brand = useSelector((state) => state.ui.brand);\r\n  const lossInformation = useSelector(selectLossId);\r\n  const claimData = useSelector(selectClaimIdUnderProgress);\r\n\r\n  const catCodes = useSelector(selectCatCodes);\r\n  const priorities = useSelector(selectPriorities);\r\n  const lossQualifiers = useSelector(selectLossQualifiers);\r\n  const claimsStatuses = useSelector(selectClaimsStatuses);\r\n  const settlementCurrency = useSelector(selectSettlementCurrency);\r\n  const referralResponse = useSelector(selectReferralResponse);\r\n\r\n  const submitClaimID = get(claimData, 'claimID') || '';\r\n  const currentStep = useSelector(selectClaimsStepper);\r\n\r\n  const claimsInformation = useSelector(selectClaimIdFromGrid);\r\n  const editClaimId = get(claimsInformation, 'claimID') || '';\r\n\r\n  const allClaimDetails = useSelector(selectAllClaimDetails);\r\n  const complexityValues = useSelector(selectComplexityValues);\r\n  const existingClaimData = useSelector(selectClaimData);\r\n\r\n  const steps = [\r\n    { slug: 'enterLossInformation', label: 'Enter Loss Information' },\r\n    { slug: 'searchPolicy', label: 'Search Policy' },\r\n    { slug: 'enterClaimInformation', label: 'Enter Claim Information' },\r\n    { slug: 'previewInformation', label: 'Preview Information' },\r\n    { slug: 'acknowledgement', label: 'Acknowledgement' },\r\n  ];\r\n\r\n  // Get this info from api\r\n  const claim = {\r\n    claimRef: 'CL55690',\r\n    firstAdvicePac: '13/05/2021',\r\n    firstAdviceDtu: '13/05/2021',\r\n  };\r\n\r\n  const handleSaveNewClaim = async (values) => {\r\n    if (!submitClaimID) {\r\n      if (editClaimId) {\r\n        await dispatch(postEditClaimDetailsInformation(values));\r\n      } else {\r\n        await dispatch(postClaimDetailsInformation(values));\r\n      }\r\n    } else {\r\n      await dispatch(postEditClaimDetailsInformation(values));\r\n    }\r\n  };\r\n\r\n  const handleSaveNewLoss = async (values) => {\r\n    if (lossInformation?.lossDetailID) {\r\n      await dispatch(postEditLossInformation(values));\r\n    } else {\r\n      await dispatch(postLossInformation(values));\r\n    }\r\n  };\r\n\r\n  // On click of cancel button\r\n  const launchConfirmModal = () => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          title: utils.string.t('navigation.alert'),\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          componentProps: {\r\n            confirmLabel: utils.string.t('app.yes'),\r\n            cancelLabel: utils.string.t('app.no'),\r\n            confirmMessage: (\r\n              <Typography variant=\"h5\" color=\"secondary\">\r\n                {utils.string.t('claims.modals.confirm.subtitle')}\r\n              </Typography>\r\n            ),\r\n            submitHandler: () => {\r\n              setIsNavigationAllowed(true);\r\n              dispatch(postLossInformationSuccess({}));\r\n              dispatch(postClaimDetailsInformationSuccess(null));\r\n              dispatch(resetClaimsPoliciesTemp());\r\n              history.push(config.routes.claimsFNOL.root);\r\n            },\r\n            handleClose: () => {},\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  // On click of Finish button\r\n  const launchFinishModal = () => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          title: utils.string.t('claims.modals.finishRegisterLoss.title'),\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          componentProps: {\r\n            confirmLabel: utils.string.t('app.yes'),\r\n            cancelLabel: utils.string.t('app.no'),\r\n            confirmMessage: (\r\n              <Typography variant=\"h5\" color=\"secondary\">\r\n                {utils.string.t('claims.modals.finishRegisterLoss.content')}\r\n              </Typography>\r\n            ),\r\n            submitHandler: () => {\r\n              setIsNavigationAllowed(true);\r\n              dispatch(resetClaimData());\r\n              history.push(config.routes.claimsFNOL.root);\r\n            },\r\n            handleClose: () => {},\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleCancelRegisterNewLoss = () => {\r\n    launchConfirmModal();\r\n  };\r\n\r\n  const getAllReferentialData = () => {\r\n    if (utils.generic.isInvalidOrEmptyArray(catCodes)) {\r\n      dispatch(getCatCodes());\r\n    }\r\n    if (utils.generic.isInvalidOrEmptyArray(priorities)) {\r\n      dispatch(getPriorityLevels());\r\n    }\r\n    if (utils.generic.isInvalidOrEmptyArray(lossQualifiers)) {\r\n      dispatch(getLossQualifiers());\r\n    }\r\n    if (utils.generic.isInvalidOrEmptyArray(claimsStatuses)) {\r\n      dispatch(getStatuses());\r\n    }\r\n    if (utils.generic.isInvalidOrEmptyArray(settlementCurrency)) {\r\n      dispatch(getSettlementCurrency());\r\n    }\r\n    if (utils.generic.isInvalidOrEmptyArray(referralResponse)) {\r\n      dispatch(getReferralResponse());\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getAllReferentialData();\r\n\r\n    if (!existingClaimData?.claimId) {\r\n      if (utils.generic.isInvalidOrEmptyArray(lossQualifiers)) {\r\n        dispatch(getLossQualifiers());\r\n      }\r\n      dispatch(getComplexityValues());\r\n    }\r\n\r\n    return () => {\r\n      dispatch(resetClaimData());\r\n    };\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>{`${utils.string.t('claims.actions.registerNewLoss')} - ${utils.app.getAppName(brand)}`}</title>\r\n      </Helmet>\r\n      <ClaimsNewLossView\r\n        claim={claim}\r\n        steps={steps}\r\n        currentStep={currentStep}\r\n        isNavigationAllowed={isNavigationAllowed}\r\n        handleCancel={handleCancelRegisterNewLoss}\r\n        handleFinishNewLoss={launchFinishModal}\r\n        handleSaveNewLoss={handleSaveNewLoss}\r\n        handleSaveNewClaim={handleSaveNewClaim}\r\n        validation={validation}\r\n        setValidation={setValidation}\r\n\r\n        allClaimDetails={allClaimDetails}\r\n        complexityValues={complexityValues}\r\n        lossQualifiers={lossQualifiers}\r\n      />\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}