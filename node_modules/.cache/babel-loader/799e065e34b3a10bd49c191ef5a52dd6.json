{"ast":null,"code":"import \"core-js/modules/es.promise.finally\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as utils from 'utils';\nimport { addLoader, removeLoader, authLogout } from 'stores';\nexport var getEmsInboxList = function getEmsInboxList(params) {\n  return function (dispatch, getState) {\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/emailManagementService.actions.getEmsInboxList'\n    };\n    dispatch(getEmsInboxListGetRequest(params));\n    dispatch(addLoader('getEmsInboxList'));\n    var validFormData = (params === null || params === void 0 ? void 0 : params.objectId) && (params === null || params === void 0 ? void 0 : params.objectCode) && (params === null || params === void 0 ? void 0 : params.emailType);\n\n    if (!validFormData) {\n      dispatch(removeLoader('getEmsInboxList'));\n      return;\n    }\n\n    var objectId = params.objectId,\n        objectCode = params.objectCode,\n        emailType = params.emailType;\n    var queryParams = {\n      objectId: objectId,\n      objectCode: objectCode,\n      emailType: emailType\n    };\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.notificationService,\n      path: 'email/object',\n      params: queryParams\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      // check that response is valid\n      // sometimes API fails and return an empty string instead of array\n      if (data === null || data === void 0 ? void 0 : data.data) {\n        dispatch(getEmsInboxListSuccess(data.data));\n      } else {\n        return Promise.reject({\n          message: 'Invalid ems string returned by API'\n        });\n      }\n\n      return data;\n    })[\"catch\"](function (error) {\n      utils.api.handleError(error, _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API fetch error (getEmsInboxList)'\n      }));\n      utils.api.handleUnauthorized(error, dispatch, authLogout);\n      dispatch(getEmsInboxListError(error));\n      return error;\n    })[\"finally\"](function () {\n      dispatch(removeLoader('getEmsInboxList'));\n    });\n  };\n};\nexport var getEmsInboxListGetRequest = function getEmsInboxListGetRequest(params) {\n  return {\n    type: 'EMS_INBOX_LIST_REQUEST',\n    payload: params\n  };\n};\nexport var getEmsInboxListSuccess = function getEmsInboxListSuccess(data) {\n  return {\n    type: 'EMS_INBOX_LIST_SUCCESS',\n    payload: data\n  };\n};\nexport var getEmsInboxListError = function getEmsInboxListError(error) {\n  return {\n    type: 'EMS_INBOX_LIST_ERROR',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/emailManagementService/emailManagementService.actions.getEmsInboxList.js"],"names":["utils","addLoader","removeLoader","authLogout","getEmsInboxList","params","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","getEmsInboxListGetRequest","validFormData","objectId","objectCode","emailType","queryParams","api","get","token","accessToken","notificationService","path","then","response","handleResponse","json","handleNewData","data","getEmsInboxListSuccess","Promise","reject","message","error","handleError","handleUnauthorized","getEmsInboxListError","type","payload"],"mappings":"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","sourcesContent":["import * as utils from 'utils';\r\nimport { addLoader, removeLoader, authLogout } from 'stores';\r\n\r\nexport const getEmsInboxList = (params) => (dispatch, getState) => {\r\n  const {\r\n    user: { auth },\r\n    config: {\r\n      vars: { endpoint },\r\n    },\r\n  } = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/emailManagementService.actions.getEmsInboxList',\r\n  };\r\n\r\n  dispatch(getEmsInboxListGetRequest(params));\r\n  dispatch(addLoader('getEmsInboxList'));\r\n\r\n  const validFormData = params?.objectId && params?.objectCode && params?.emailType;\r\n\r\n  if (!validFormData) {\r\n    dispatch(removeLoader('getEmsInboxList'));\r\n    return;\r\n  }\r\n\r\n  const { objectId, objectCode, emailType } = params;\r\n\r\n  const queryParams = {\r\n    objectId,\r\n    objectCode,\r\n    emailType,\r\n  };\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.notificationService,\r\n      path: 'email/object',\r\n      params: queryParams,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      // check that response is valid\r\n      // sometimes API fails and return an empty string instead of array\r\n      if (data?.data) {\r\n        dispatch(getEmsInboxListSuccess(data.data));\r\n      } else {\r\n        return Promise.reject({ message: 'Invalid ems string returned by API' });\r\n      }\r\n      return data;\r\n    })\r\n    .catch((error) => {\r\n      utils.api.handleError(error, { ...defaultError, message: 'API fetch error (getEmsInboxList)' });\r\n      utils.api.handleUnauthorized(error, dispatch, authLogout);\r\n      dispatch(getEmsInboxListError(error));\r\n      return error;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('getEmsInboxList'));\r\n    });\r\n};\r\n\r\nexport const getEmsInboxListGetRequest = (params) => {\r\n  return {\r\n    type: 'EMS_INBOX_LIST_REQUEST',\r\n    payload: params,\r\n  };\r\n};\r\n\r\nexport const getEmsInboxListSuccess = (data) => {\r\n  return {\r\n    type: 'EMS_INBOX_LIST_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const getEmsInboxListError = (error) => {\r\n  return {\r\n    type: 'EMS_INBOX_LIST_ERROR',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}