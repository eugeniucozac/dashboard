{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\forms\\\\AddEditQuoteBind\\\\AddEditQuoteBind.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport MultiStepForm from './MultiStepForm';\nimport { useSelector, useDispatch } from 'react-redux'; // app\n\nimport { getRiskDefinitions, selectRiskDefinitionsFieldsByType, selectRiskFieldOptionsByType, selectRiskProduct, getClients, getInsureds, getReinsureds, selectPartyOptions, postRisk, patchRisk, postRiskDraft } from 'stores';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar AddEditQuoteBind = function AddEditQuoteBind(_ref) {\n  _s();\n\n  var fullScreen = _ref.fullScreen,\n      product = _ref.product,\n      riskData = _ref.riskData,\n      draftId = _ref.draftId,\n      riskId = _ref.riskId;\n  var dispatch = useDispatch();\n  var type = product === null || product === void 0 ? void 0 : product.value;\n  var insuredsLoading = useSelector(function (store) {\n    return store.party.insureds.loading;\n  });\n  var clientsLoading = useSelector(function (store) {\n    return store.party.clients.loading;\n  });\n  var reinsuredsLoading = useSelector(function (store) {\n    return store.party.reinsureds.loading;\n  });\n  var riskDefinitionsLoading = useSelector(function (store) {\n    return store.risk.definitions.loading;\n  });\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var isReQuote = Boolean(riskId);\n  var riskDefinitionsFieldsByType = useSelector(selectRiskDefinitionsFieldsByType(type));\n  var definitionsFields = riskDefinitionsFieldsByType.filter(function (definition) {\n    return definition.type !== 'LABEL';\n  });\n  var riskFieldOptionsByType = useSelector(selectRiskFieldOptionsByType(type));\n  var partyOptions = useSelector(selectPartyOptions);\n  var countries = (riskFieldOptionsByType === null || riskFieldOptionsByType === void 0 ? void 0 : riskFieldOptionsByType.countryOfOrigin) ? riskFieldOptionsByType.countryOfOrigin : [];\n  useEffect(function () {\n    var isSubscribed = true;\n    var isLoadingValue = [insuredsLoading, clientsLoading, reinsuredsLoading, riskDefinitionsLoading].filter(function (loading) {\n      return loading === false;\n    }).length !== 4;\n    isSubscribed && setIsLoading(isLoadingValue);\n    return function () {\n      return isSubscribed = false;\n    };\n  }, [insuredsLoading, clientsLoading, reinsuredsLoading, riskDefinitionsLoading]);\n  useEffect(function () {\n    var isSubscribed = true;\n\n    if (isSubscribed) {\n      dispatch(selectRiskProduct(type));\n\n      if (type && (utils.generic.isInvalidOrEmptyArray(riskDefinitionsFieldsByType) || utils.generic.isInvalidOrEmptyArray(countries))) {\n        dispatch(getRiskDefinitions(type));\n      }\n\n      dispatch(getClients({\n        size: 1000\n      }));\n      dispatch(getInsureds({\n        size: 1000\n      }));\n      dispatch(getReinsureds({\n        size: 1000\n      }));\n    } // cleanup\n\n\n    return function () {\n      isSubscribed = false;\n    };\n  }, [type] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  var fields = utils.risk.parseFields(riskDefinitionsFieldsByType, _objectSpread(_objectSpread({}, partyOptions), {}, {\n    countryOfOrigin: countries\n  }));\n\n  var handlePostRisk = function handlePostRisk(values) {\n    return isReQuote ? dispatch(patchRisk(values, type, fields, riskId)) : dispatch(postRisk(values, type, fields, draftId));\n  };\n\n  var handlePostDraftRisk = function handlePostDraftRisk(values) {\n    draftId ? dispatch(postRiskDraft(values, type, fields, draftId)) : dispatch(postRiskDraft(values, type, fields));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(MultiStepForm, {\n      isReQuote: isReQuote,\n      fullScreen: fullScreen,\n      productType: type,\n      fields: fields,\n      defaultValues: riskData ? utils.form.getFormattedValues(riskData, fields) : utils.form.getInitialValues(fields),\n      riskDataValues: riskData,\n      definitionsFields: definitionsFields,\n      hasCountryOfOrigin: countries.length ? true : false,\n      isLoading: isLoading,\n      handleSubmit: handlePostRisk,\n      handleDraftSave: handlePostDraftRisk\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false);\n};\n\n_s(AddEditQuoteBind, \"JIa37zbUKFUiAsQdE0pwFoOAhRY=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = AddEditQuoteBind;\nexport default AddEditQuoteBind;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddEditQuoteBind\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/forms/AddEditQuoteBind/AddEditQuoteBind.js"],"names":["React","useState","useEffect","MultiStepForm","useSelector","useDispatch","getRiskDefinitions","selectRiskDefinitionsFieldsByType","selectRiskFieldOptionsByType","selectRiskProduct","getClients","getInsureds","getReinsureds","selectPartyOptions","postRisk","patchRisk","postRiskDraft","utils","AddEditQuoteBind","fullScreen","product","riskData","draftId","riskId","dispatch","type","value","insuredsLoading","store","party","insureds","loading","clientsLoading","clients","reinsuredsLoading","reinsureds","riskDefinitionsLoading","risk","definitions","isLoading","setIsLoading","isReQuote","Boolean","riskDefinitionsFieldsByType","definitionsFields","filter","definition","riskFieldOptionsByType","partyOptions","countries","countryOfOrigin","isSubscribed","isLoadingValue","length","generic","isInvalidOrEmptyArray","size","fields","parseFields","handlePostRisk","values","handlePostDraftRisk","form","getFormattedValues","getInitialValues"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC,C,CAEA;;AACA,SACEC,kBADF,EAEEC,iCAFF,EAGEC,4BAHF,EAIEC,iBAJF,EAKEC,UALF,EAMEC,WANF,EAOEC,aAPF,EAQEC,kBARF,EASEC,QATF,EAUEC,SAVF,EAWEC,aAXF,QAYO,QAZP;AAaA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,OAAwD;AAAA;;AAAA,MAArDC,UAAqD,QAArDA,UAAqD;AAAA,MAAzCC,OAAyC,QAAzCA,OAAyC;AAAA,MAAhCC,QAAgC,QAAhCA,QAAgC;AAAA,MAAtBC,OAAsB,QAAtBA,OAAsB;AAAA,MAAbC,MAAa,QAAbA,MAAa;AAC/E,MAAMC,QAAQ,GAAGnB,WAAW,EAA5B;AACA,MAAMoB,IAAI,GAAGL,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEM,KAAtB;AACA,MAAMC,eAAe,GAAGvB,WAAW,CAAC,UAACwB,KAAD;AAAA,WAAWA,KAAK,CAACC,KAAN,CAAYC,QAAZ,CAAqBC,OAAhC;AAAA,GAAD,CAAnC;AACA,MAAMC,cAAc,GAAG5B,WAAW,CAAC,UAACwB,KAAD;AAAA,WAAWA,KAAK,CAACC,KAAN,CAAYI,OAAZ,CAAoBF,OAA/B;AAAA,GAAD,CAAlC;AACA,MAAMG,iBAAiB,GAAG9B,WAAW,CAAC,UAACwB,KAAD;AAAA,WAAWA,KAAK,CAACC,KAAN,CAAYM,UAAZ,CAAuBJ,OAAlC;AAAA,GAAD,CAArC;AACA,MAAMK,sBAAsB,GAAGhC,WAAW,CAAC,UAACwB,KAAD;AAAA,WAAWA,KAAK,CAACS,IAAN,CAAWC,WAAX,CAAuBP,OAAlC;AAAA,GAAD,CAA1C;;AAN+E,kBAQ7C9B,QAAQ,CAAC,IAAD,CARqC;AAAA;AAAA,MAQxEsC,SARwE;AAAA,MAQ7DC,YAR6D;;AAU/E,MAAMC,SAAS,GAAGC,OAAO,CAACnB,MAAD,CAAzB;AAEA,MAAMoB,2BAA2B,GAAGvC,WAAW,CAACG,iCAAiC,CAACkB,IAAD,CAAlC,CAA/C;AACA,MAAMmB,iBAAiB,GAAGD,2BAA2B,CAACE,MAA5B,CAAmC,UAACC,UAAD;AAAA,WAAgBA,UAAU,CAACrB,IAAX,KAAoB,OAApC;AAAA,GAAnC,CAA1B;AACA,MAAMsB,sBAAsB,GAAG3C,WAAW,CAACI,4BAA4B,CAACiB,IAAD,CAA7B,CAA1C;AACA,MAAMuB,YAAY,GAAG5C,WAAW,CAACS,kBAAD,CAAhC;AACA,MAAMoC,SAAS,GAAG,CAAAF,sBAAsB,SAAtB,IAAAA,sBAAsB,WAAtB,YAAAA,sBAAsB,CAAEG,eAAxB,IAA0CH,sBAAsB,CAACG,eAAjE,GAAmF,EAArG;AAEAhD,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIiD,YAAY,GAAG,IAAnB;AAEA,QAAMC,cAAc,GAClB,CAACzB,eAAD,EAAkBK,cAAlB,EAAkCE,iBAAlC,EAAqDE,sBAArD,EAA6ES,MAA7E,CAAoF,UAACd,OAAD;AAAA,aAAaA,OAAO,KAAK,KAAzB;AAAA,KAApF,EAAoHsB,MAApH,KAA+H,CADjI;AAGAF,IAAAA,YAAY,IAAIX,YAAY,CAACY,cAAD,CAA5B;AAEA,WAAO;AAAA,aAAOD,YAAY,GAAG,KAAtB;AAAA,KAAP;AACD,GATQ,EASN,CAACxB,eAAD,EAAkBK,cAAlB,EAAkCE,iBAAlC,EAAqDE,sBAArD,CATM,CAAT;AAWAlC,EAAAA,SAAS,CACP,YAAM;AACJ,QAAIiD,YAAY,GAAG,IAAnB;;AACA,QAAIA,YAAJ,EAAkB;AAChB3B,MAAAA,QAAQ,CAACf,iBAAiB,CAACgB,IAAD,CAAlB,CAAR;;AACA,UAAIA,IAAI,KAAKR,KAAK,CAACqC,OAAN,CAAcC,qBAAd,CAAoCZ,2BAApC,KAAoE1B,KAAK,CAACqC,OAAN,CAAcC,qBAAd,CAAoCN,SAApC,CAAzE,CAAR,EAAkI;AAChIzB,QAAAA,QAAQ,CAAClB,kBAAkB,CAACmB,IAAD,CAAnB,CAAR;AACD;;AAEDD,MAAAA,QAAQ,CAACd,UAAU,CAAC;AAAE8C,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAX,CAAR;AACAhC,MAAAA,QAAQ,CAACb,WAAW,CAAC;AAAE6C,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAZ,CAAR;AACAhC,MAAAA,QAAQ,CAACZ,aAAa,CAAC;AAAE4C,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAd,CAAR;AACD,KAXG,CAYJ;;;AACA,WAAO,YAAM;AACXL,MAAAA,YAAY,GAAG,KAAf;AACD,KAFD;AAGD,GAjBM,EAkBP,CAAC1B,IAAD,CAlBO,CAkBA;AAlBA,GAAT;AAqBA,MAAMgC,MAAM,GAAGxC,KAAK,CAACoB,IAAN,CAAWqB,WAAX,CAAuBf,2BAAvB,kCACVK,YADU;AAEbE,IAAAA,eAAe,EAAED;AAFJ,KAAf;;AAKA,MAAMU,cAAc,GAAG,SAAjBA,cAAiB,CAACC,MAAD,EAAY;AACjC,WAAOnB,SAAS,GAAGjB,QAAQ,CAACT,SAAS,CAAC6C,MAAD,EAASnC,IAAT,EAAegC,MAAf,EAAuBlC,MAAvB,CAAV,CAAX,GAAuDC,QAAQ,CAACV,QAAQ,CAAC8C,MAAD,EAASnC,IAAT,EAAegC,MAAf,EAAuBnC,OAAvB,CAAT,CAA/E;AACD,GAFD;;AAIA,MAAMuC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACD,MAAD,EAAY;AACtCtC,IAAAA,OAAO,GAAGE,QAAQ,CAACR,aAAa,CAAC4C,MAAD,EAASnC,IAAT,EAAegC,MAAf,EAAuBnC,OAAvB,CAAd,CAAX,GAA4DE,QAAQ,CAACR,aAAa,CAAC4C,MAAD,EAASnC,IAAT,EAAegC,MAAf,CAAd,CAA3E;AACD,GAFD;;AAIA,sBACE;AAAA,2BACE,QAAC,aAAD;AACE,MAAA,SAAS,EAAEhB,SADb;AAEE,MAAA,UAAU,EAAEtB,UAFd;AAGE,MAAA,WAAW,EAAEM,IAHf;AAIE,MAAA,MAAM,EAAEgC,MAJV;AAKE,MAAA,aAAa,EAAEpC,QAAQ,GAAGJ,KAAK,CAAC6C,IAAN,CAAWC,kBAAX,CAA8B1C,QAA9B,EAAwCoC,MAAxC,CAAH,GAAqDxC,KAAK,CAAC6C,IAAN,CAAWE,gBAAX,CAA4BP,MAA5B,CAL9E;AAME,MAAA,cAAc,EAAEpC,QANlB;AAOE,MAAA,iBAAiB,EAAEuB,iBAPrB;AAQE,MAAA,kBAAkB,EAAEK,SAAS,CAACI,MAAV,GAAmB,IAAnB,GAA0B,KARhD;AASE,MAAA,SAAS,EAAEd,SATb;AAUE,MAAA,YAAY,EAAEoB,cAVhB;AAWE,MAAA,eAAe,EAAEE;AAXnB;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAiBD,CAhFD;;GAAM3C,gB;UACab,W,EAEOD,W,EACDA,W,EACGA,W,EACKA,W,EAMKA,W,EAELA,W,EACVA,W;;;KAfjBc,gB;AAkFN,eAAeA,gBAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport MultiStepForm from './MultiStepForm';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\n// app\r\nimport {\r\n  getRiskDefinitions,\r\n  selectRiskDefinitionsFieldsByType,\r\n  selectRiskFieldOptionsByType,\r\n  selectRiskProduct,\r\n  getClients,\r\n  getInsureds,\r\n  getReinsureds,\r\n  selectPartyOptions,\r\n  postRisk,\r\n  patchRisk,\r\n  postRiskDraft,\r\n} from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nconst AddEditQuoteBind = ({ fullScreen, product, riskData, draftId, riskId }) => {\r\n  const dispatch = useDispatch();\r\n  const type = product?.value;\r\n  const insuredsLoading = useSelector((store) => store.party.insureds.loading);\r\n  const clientsLoading = useSelector((store) => store.party.clients.loading);\r\n  const reinsuredsLoading = useSelector((store) => store.party.reinsureds.loading);\r\n  const riskDefinitionsLoading = useSelector((store) => store.risk.definitions.loading);\r\n\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  const isReQuote = Boolean(riskId);\r\n\r\n  const riskDefinitionsFieldsByType = useSelector(selectRiskDefinitionsFieldsByType(type));\r\n  const definitionsFields = riskDefinitionsFieldsByType.filter((definition) => definition.type !== 'LABEL');\r\n  const riskFieldOptionsByType = useSelector(selectRiskFieldOptionsByType(type));\r\n  const partyOptions = useSelector(selectPartyOptions);\r\n  const countries = riskFieldOptionsByType?.countryOfOrigin ? riskFieldOptionsByType.countryOfOrigin : [];\r\n\r\n  useEffect(() => {\r\n    let isSubscribed = true;\r\n\r\n    const isLoadingValue =\r\n      [insuredsLoading, clientsLoading, reinsuredsLoading, riskDefinitionsLoading].filter((loading) => loading === false).length !== 4;\r\n\r\n    isSubscribed && setIsLoading(isLoadingValue);\r\n\r\n    return () => (isSubscribed = false);\r\n  }, [insuredsLoading, clientsLoading, reinsuredsLoading, riskDefinitionsLoading]);\r\n\r\n  useEffect(\r\n    () => {\r\n      let isSubscribed = true;\r\n      if (isSubscribed) {\r\n        dispatch(selectRiskProduct(type));\r\n        if (type && (utils.generic.isInvalidOrEmptyArray(riskDefinitionsFieldsByType) || utils.generic.isInvalidOrEmptyArray(countries))) {\r\n          dispatch(getRiskDefinitions(type));\r\n        }\r\n\r\n        dispatch(getClients({ size: 1000 }));\r\n        dispatch(getInsureds({ size: 1000 }));\r\n        dispatch(getReinsureds({ size: 1000 }));\r\n      }\r\n      // cleanup\r\n      return () => {\r\n        isSubscribed = false;\r\n      };\r\n    },\r\n    [type] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  const fields = utils.risk.parseFields(riskDefinitionsFieldsByType, {\r\n    ...partyOptions,\r\n    countryOfOrigin: countries,\r\n  });\r\n\r\n  const handlePostRisk = (values) => {\r\n    return isReQuote ? dispatch(patchRisk(values, type, fields, riskId)) : dispatch(postRisk(values, type, fields, draftId));\r\n  };\r\n\r\n  const handlePostDraftRisk = (values) => {\r\n    draftId ? dispatch(postRiskDraft(values, type, fields, draftId)) : dispatch(postRiskDraft(values, type, fields));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <MultiStepForm\r\n        isReQuote={isReQuote}\r\n        fullScreen={fullScreen}\r\n        productType={type}\r\n        fields={fields}\r\n        defaultValues={riskData ? utils.form.getFormattedValues(riskData, fields) : utils.form.getInitialValues(fields)}\r\n        riskDataValues={riskData}\r\n        definitionsFields={definitionsFields}\r\n        hasCountryOfOrigin={countries.length ? true : false}\r\n        isLoading={isLoading}\r\n        handleSubmit={handlePostRisk}\r\n        handleDraftSave={handlePostDraftRisk}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddEditQuoteBind;\r\n"]},"metadata":{},"sourceType":"module"}