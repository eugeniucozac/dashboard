{"ast":null,"code":"import \"core-js/modules/es.array.map\";\nimport * as utils from 'utils';\nexport var setLocationUploadWizardExcelExtract = function setLocationUploadWizardExcelExtract(_ref) {\n  var headers = _ref.headers,\n      rows = _ref.rows,\n      columns = _ref.columns;\n  return function (dispatch) {\n    dispatch({\n      type: 'LOCATION_SET_UPLOAD_WIZARD_GIVEN_LOCATIONS',\n      payload: {\n        locations: rows,\n        headers: columns\n      }\n    });\n    dispatch(setLocationUploadWizardHeaderMap({\n      headers: headers\n    }));\n  };\n};\nexport var setLocationUploadWizardHeaderMap = function setLocationUploadWizardHeaderMap(_ref2) {\n  var headers = _ref2.headers;\n  return function (dispatch, getState) {\n    dispatch({\n      type: 'LOCATION_SET_UPLOAD_WIZARD_HEADER_MAP',\n      payload: headers\n    });\n    var state = getState();\n    var _state$location = state.location,\n        givenLocations = _state$location.givenLocations,\n        dollarValues = _state$location.dollarValues;\n    var locations = givenLocations.map(function (gl) {\n      return headers.reduce(function (l, header) {\n        var val = gl[header.value];\n        l[header.key] = dollarValues.includes(header.key) ? utils.currency.cleanDollarString(val) : val;\n        return l;\n      }, {});\n    });\n    var validLocations = locations.filter(function (location) {\n      return utils.location.isValidLocation(location) && utils.location.isValidTIV(location);\n    });\n    var notValidTIVLocations = locations.filter(function (location) {\n      return !utils.location.isValidTIV(location);\n    }).length;\n    var notValidGeoLocations = locations.filter(function (location) {\n      return utils.location.isValidTIV(location);\n    }).filter(function (location) {\n      return !utils.location.isValidLocation(location);\n    }).length;\n    console.log('notValidTIVLocations', notValidTIVLocations, notValidGeoLocations);\n    dispatch({\n      type: 'LOCATION_SET_UPLOAD_WIZARD_INVALID_LOCATIONS',\n      payload: {\n        invalidTIVLocations: notValidTIVLocations,\n        invalidGeoLocations: notValidGeoLocations\n      }\n    });\n    dispatch({\n      type: 'LOCATION_SET_UPLOAD_WIZARD_LOCATIONS',\n      payload: validLocations\n    });\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/location/location.actions.uploadWizard.js"],"names":["utils","setLocationUploadWizardExcelExtract","headers","rows","columns","dispatch","type","payload","locations","setLocationUploadWizardHeaderMap","getState","state","location","givenLocations","dollarValues","map","gl","reduce","l","header","val","value","key","includes","currency","cleanDollarString","validLocations","filter","isValidLocation","isValidTIV","notValidTIVLocations","length","notValidGeoLocations","console","log","invalidTIVLocations","invalidGeoLocations"],"mappings":"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","sourcesContent":["import * as utils from 'utils';\r\n\r\nexport const setLocationUploadWizardExcelExtract =\r\n  ({ headers, rows, columns }) =>\r\n  (dispatch) => {\r\n    dispatch({\r\n      type: 'LOCATION_SET_UPLOAD_WIZARD_GIVEN_LOCATIONS',\r\n      payload: {\r\n        locations: rows,\r\n        headers: columns,\r\n      },\r\n    });\r\n\r\n    dispatch(setLocationUploadWizardHeaderMap({ headers }));\r\n  };\r\n\r\nexport const setLocationUploadWizardHeaderMap =\r\n  ({ headers }) =>\r\n  (dispatch, getState) => {\r\n    dispatch({ type: 'LOCATION_SET_UPLOAD_WIZARD_HEADER_MAP', payload: headers });\r\n\r\n    const state = getState();\r\n    const { givenLocations, dollarValues } = state.location;\r\n\r\n    const locations = givenLocations.map((gl) => {\r\n      return headers.reduce((l, header) => {\r\n        let val = gl[header.value];\r\n        l[header.key] = dollarValues.includes(header.key) ? utils.currency.cleanDollarString(val) : val;\r\n        return l;\r\n      }, {});\r\n    });\r\n\r\n    const validLocations = locations.filter((location) => utils.location.isValidLocation(location) && utils.location.isValidTIV(location));\r\n    const notValidTIVLocations = locations.filter((location) => !utils.location.isValidTIV(location)).length;\r\n    const notValidGeoLocations = locations\r\n      .filter((location) => utils.location.isValidTIV(location))\r\n      .filter((location) => !utils.location.isValidLocation(location)).length;\r\n    console.log('notValidTIVLocations', notValidTIVLocations, notValidGeoLocations);\r\n    dispatch({\r\n      type: 'LOCATION_SET_UPLOAD_WIZARD_INVALID_LOCATIONS',\r\n      payload: {\r\n        invalidTIVLocations: notValidTIVLocations,\r\n        invalidGeoLocations: notValidGeoLocations,\r\n      },\r\n    });\r\n\r\n    dispatch({ type: 'LOCATION_SET_UPLOAD_WIZARD_LOCATIONS', payload: validLocations });\r\n  };\r\n"]},"metadata":{},"sourceType":"module"}