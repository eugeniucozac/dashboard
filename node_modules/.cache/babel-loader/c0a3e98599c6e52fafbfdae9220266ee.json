{"ast":null,"code":"import _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\pages\\\\ClaimsProcessing\\\\ClaimsProcessing.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet'; // app\n\nimport { ClaimsProcessingView } from './ClaimsProcessing.view';\nimport { selectClaimsProcessingSelected, hideModal, showModal, getQueryCodeList, selectClaimNavigation, processingNavigation, resetPolicyInformation } from 'stores';\nimport * as utils from 'utils';\nimport config from 'config';\nimport * as constants from 'consts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ClaimsProcessing() {\n  _s();\n\n  var dispatch = useDispatch();\n  var brand = useSelector(function (state) {\n    return state.ui.brand;\n  });\n  var claimsProcessingSelected = useSelector(selectClaimsProcessingSelected);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasUnsavedChanges = _useState2[0],\n      setHasUnsavedChanges = _useState2[1];\n\n  var tabs = [{\n    value: constants.RFI_ON_CLAIMS,\n    label: utils.string.t('claims.processing.tabs.claims')\n  }, {\n    value: constants.RFI_ON_TASKS,\n    label: utils.string.t('claims.processing.tabs.tasks')\n  }];\n  var selectedTab = useSelector(selectClaimNavigation);\n\n  var handleSelectTab = function handleSelectTab(tabName) {\n    if (hasUnsavedChanges) {\n      confirmNavigation(tabName);\n    } else {\n      dispatch(processingNavigation(tabName));\n    }\n  };\n\n  var allowedNavigationUrls = hasUnsavedChanges ? [] : [config.routes.claimsProcessing.root, \"\".concat(config.routes.claimsProcessing.claim, \"/**\"), \"\".concat(config.routes.claimsProcessing.task, \"/**\")];\n\n  var allowNavigation = function allowNavigation(isAllowed) {\n    setHasUnsavedChanges(!isAllowed);\n  };\n\n  var confirmNavigation = function confirmNavigation(tabName) {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        title: utils.string.t('navigation.page.subtitle'),\n        hint: utils.string.t('navigation.page.title'),\n        fullWidth: true,\n        maxWidth: 'xs',\n        componentProps: {\n          cancelLabel: utils.string.t('app.no'),\n          confirmLabel: utils.string.t('app.yes'),\n          submitHandler: function submitHandler() {\n            dispatch(hideModal());\n            dispatch(processingNavigation(tabName));\n            setHasUnsavedChanges(false);\n          },\n          cancelHandler: function cancelHandler() {}\n        }\n      }\n    }));\n  };\n\n  useEffect(function () {\n    dispatch(getQueryCodeList());\n    dispatch(resetPolicyInformation());\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"\".concat(utils.string.t('claims.processing.title'), \" - \").concat(utils.app.getAppName(brand))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ClaimsProcessingView, {\n      claimsSelected: claimsProcessingSelected,\n      tabs: tabs,\n      selectedTab: selectedTab,\n      hasUnsavedChanges: hasUnsavedChanges,\n      allowedNavigationUrls: allowedNavigationUrls,\n      handleSelectTab: handleSelectTab,\n      handlers: {\n        selectTab: handleSelectTab,\n        allowNavigation: allowNavigation\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ClaimsProcessing, \"ibt2ckaqZeraG17x/HqlB1UpHXI=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = ClaimsProcessing;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimsProcessing\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/pages/ClaimsProcessing/ClaimsProcessing.js"],"names":["React","useEffect","useState","useDispatch","useSelector","Helmet","ClaimsProcessingView","selectClaimsProcessingSelected","hideModal","showModal","getQueryCodeList","selectClaimNavigation","processingNavigation","resetPolicyInformation","utils","config","constants","ClaimsProcessing","dispatch","brand","state","ui","claimsProcessingSelected","hasUnsavedChanges","setHasUnsavedChanges","tabs","value","RFI_ON_CLAIMS","label","string","t","RFI_ON_TASKS","selectedTab","handleSelectTab","tabName","confirmNavigation","allowedNavigationUrls","routes","claimsProcessing","root","claim","task","allowNavigation","isAllowed","component","props","title","hint","fullWidth","maxWidth","componentProps","cancelLabel","confirmLabel","submitHandler","cancelHandler","app","getAppName","selectTab"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Helmet } from 'react-helmet';\r\n\r\n// app\r\nimport { ClaimsProcessingView } from './ClaimsProcessing.view';\r\nimport {\r\n  selectClaimsProcessingSelected,\r\n  hideModal,\r\n  showModal,\r\n  getQueryCodeList,\r\n  selectClaimNavigation,\r\n  processingNavigation,\r\n  resetPolicyInformation\r\n} from 'stores';\r\nimport * as utils from 'utils';\r\nimport config from 'config';\r\nimport * as constants from 'consts';\r\n\r\nexport default function ClaimsProcessing() {\r\n  const dispatch = useDispatch();\r\n\r\n  const brand = useSelector((state) => state.ui.brand);\r\n  const claimsProcessingSelected = useSelector(selectClaimsProcessingSelected);\r\n  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\r\n\r\n  const tabs = [\r\n    { value: constants.RFI_ON_CLAIMS, label: utils.string.t('claims.processing.tabs.claims') },\r\n    { value: constants.RFI_ON_TASKS, label: utils.string.t('claims.processing.tabs.tasks') },\r\n  ];\r\n\r\n  const selectedTab = useSelector(selectClaimNavigation);\r\n\r\n  const handleSelectTab = (tabName) => {\r\n    if (hasUnsavedChanges) {\r\n      confirmNavigation(tabName);\r\n    } else {\r\n      dispatch(processingNavigation(tabName));\r\n    }\r\n  };\r\n\r\n  const allowedNavigationUrls = hasUnsavedChanges\r\n    ? []\r\n    : [config.routes.claimsProcessing.root, `${config.routes.claimsProcessing.claim}/**`, `${config.routes.claimsProcessing.task}/**`];\r\n\r\n  const allowNavigation = (isAllowed) => {\r\n    setHasUnsavedChanges(!isAllowed);\r\n  };\r\n\r\n  const confirmNavigation = (tabName) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          title: utils.string.t('navigation.page.subtitle'),\r\n          hint: utils.string.t('navigation.page.title'),\r\n          fullWidth: true,\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            cancelLabel: utils.string.t('app.no'),\r\n            confirmLabel: utils.string.t('app.yes'),\r\n            submitHandler: () => {\r\n              dispatch(hideModal());\r\n              dispatch(processingNavigation(tabName));\r\n              setHasUnsavedChanges(false);\r\n            },\r\n            cancelHandler: () => {},\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n  useEffect(() => {\r\n    dispatch(getQueryCodeList());\r\n    dispatch(resetPolicyInformation());\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>{`${utils.string.t('claims.processing.title')} - ${utils.app.getAppName(brand)}`}</title>\r\n      </Helmet>\r\n      <ClaimsProcessingView\r\n        claimsSelected={claimsProcessingSelected}\r\n        tabs={tabs}\r\n        selectedTab={selectedTab}\r\n        hasUnsavedChanges={hasUnsavedChanges}\r\n        allowedNavigationUrls={allowedNavigationUrls}\r\n        handleSelectTab={handleSelectTab}\r\n        handlers={{\r\n          selectTab: handleSelectTab,\r\n          allowNavigation,\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}