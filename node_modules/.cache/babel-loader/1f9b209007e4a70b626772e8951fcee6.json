{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as utils from 'utils';\nimport { authLogout } from 'stores';\nimport get from 'lodash/get';\nexport var getRfiHistoryDocuments = function getRfiHistoryDocuments(params) {\n  return function (dispatch, getState) {\n    var _selectedTask$selecte;\n\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint,\n        claims = _getState.claims;\n\n    var defaultError = {\n      file: 'stores/claims.actions.getRfiHistoryDocuments'\n    };\n    dispatch(getRfiHistoryDocumentsRequest());\n    var rfiHistoryList = get(claims, 'rfiHistory');\n    var selectedTask = get(claims, 'tasksTab');\n    var taskRef = selectedTask === null || selectedTask === void 0 ? void 0 : (_selectedTask$selecte = selectedTask.selected[0]) === null || _selectedTask$selecte === void 0 ? void 0 : _selectedTask$selecte.taskId;\n    var apiParams = params;\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.dmsService,\n      path: \"dms/document/list?srcApplication=BOTH\",\n      data: apiParams\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      if (data === null || data === void 0 ? void 0 : data.data) {\n        var _rfiHistoryDetails$da;\n\n        var docList = _toConsumableArray(data === null || data === void 0 ? void 0 : data.data);\n\n        var docMap = new Map();\n        docList === null || docList === void 0 ? void 0 : docList.forEach(function (doc) {\n          var docRef = doc === null || doc === void 0 ? void 0 : doc.referenceId;\n          var notesId = docRef === null || docRef === void 0 ? void 0 : docRef.replace(\"\".concat(taskRef, \"-\"), '');\n\n          if (!docMap.has(parseInt(notesId))) {\n            docMap.set(parseInt(notesId), [doc]);\n          } else {\n            var list = docMap.get(parseInt(notesId));\n            list.push(doc);\n            docMap.set(parseInt(doc === null || doc === void 0 ? void 0 : doc.referenceId), list);\n          }\n        });\n\n        var rfiHistoryDetails = _objectSpread({}, rfiHistoryList);\n\n        var rfiHistoryDocList = rfiHistoryDetails === null || rfiHistoryDetails === void 0 ? void 0 : (_rfiHistoryDetails$da = rfiHistoryDetails.data) === null || _rfiHistoryDetails$da === void 0 ? void 0 : _rfiHistoryDetails$da.map(function (item) {\n          var rfiHistory = _objectSpread({}, item);\n\n          var documentList = docMap.get(rfiHistory === null || rfiHistory === void 0 ? void 0 : rfiHistory.caseIncidentNotesID);\n          rfiHistory.documentList = documentList;\n          return rfiHistory;\n        });\n        dispatch(getRfiHistoryDocumentsSuccess({\n          documentList: rfiHistoryDocList\n        }));\n      }\n\n      return data;\n    }).catch(function (error) {\n      dispatch(getRfiHistoryDocumentsFailure(error, defaultError));\n      utils.api.handleUnauthorized(error, dispatch, authLogout);\n      return error;\n    });\n  };\n};\nexport var getRfiHistoryDocumentsRequest = function getRfiHistoryDocumentsRequest(payload) {\n  return {\n    type: 'CLAIMS_GET_RFI_HISTORY_DOCUMENTS_REQUEST',\n    payload: payload\n  };\n};\nexport var getRfiHistoryDocumentsSuccess = function getRfiHistoryDocumentsSuccess(data) {\n  return {\n    type: 'CLAIMS_GET_RFI_HISTORY_DOCUMENTS_SUCCESS',\n    payload: data\n  };\n};\nexport var getRfiHistoryDocumentsFailure = function getRfiHistoryDocumentsFailure(error) {\n  return {\n    type: 'CLAIMS_GET_RFI_HISTORY_DOCUMENTS_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.getRfiHistoryDocuments.js"],"names":["utils","authLogout","get","getRfiHistoryDocuments","params","dispatch","getState","auth","user","endpoint","config","vars","claims","defaultError","file","getRfiHistoryDocumentsRequest","rfiHistoryList","selectedTask","taskRef","selected","taskId","apiParams","api","post","token","accessToken","dmsService","path","data","then","response","handleResponse","json","handleNewData","docList","docMap","Map","forEach","doc","docRef","referenceId","notesId","replace","has","parseInt","set","list","push","rfiHistoryDetails","rfiHistoryDocList","map","item","rfiHistory","documentList","caseIncidentNotesID","getRfiHistoryDocumentsSuccess","catch","error","getRfiHistoryDocumentsFailure","handleUnauthorized","payload","type"],"mappings":"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","sourcesContent":["import * as utils from 'utils';\r\nimport { authLogout } from 'stores';\r\nimport get from 'lodash/get';\r\n\r\nexport const getRfiHistoryDocuments = (params) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } }, claims } = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.getRfiHistoryDocuments',\r\n  };\r\n  dispatch(getRfiHistoryDocumentsRequest());\r\n  const rfiHistoryList = get(claims, 'rfiHistory');\r\n  const selectedTask = get(claims, 'tasksTab');\r\n  const taskRef = selectedTask?.selected[0]?.taskId;\r\n\r\n  const apiParams = params;\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.dmsService,\r\n      path: `dms/document/list?srcApplication=BOTH`,\r\n      data: apiParams,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      if (data?.data) {\r\n        const docList = [...data?.data];\r\n        const docMap = new Map();\r\n        docList?.forEach((doc) => {\r\n          const docRef = doc?.referenceId;\r\n          const notesId = docRef?.replace(`${taskRef}-`, '');\r\n          if (!docMap.has(parseInt(notesId))) {\r\n            docMap.set(parseInt(notesId), [doc]);\r\n          } else {\r\n            const list = docMap.get(parseInt(notesId));\r\n            list.push(doc);\r\n            docMap.set(parseInt(doc?.referenceId), list);\r\n          }\r\n        });\r\n\r\n        const rfiHistoryDetails = { ...rfiHistoryList };\r\n        const rfiHistoryDocList = rfiHistoryDetails?.data?.map((item) => {\r\n          const rfiHistory = { ...item };\r\n          const documentList = docMap.get(rfiHistory?.caseIncidentNotesID);\r\n          rfiHistory.documentList = documentList;\r\n          return rfiHistory;\r\n        });\r\n        dispatch(getRfiHistoryDocumentsSuccess({documentList: rfiHistoryDocList}));\r\n      }\r\n      return data;\r\n    })\r\n    .catch((error) => {\r\n      dispatch(getRfiHistoryDocumentsFailure(error, defaultError));\r\n      utils.api.handleUnauthorized(error, dispatch, authLogout);\r\n      return error;\r\n    });\r\n};\r\n\r\nexport const getRfiHistoryDocumentsRequest = (payload) => {\r\n  return {\r\n    type: 'CLAIMS_GET_RFI_HISTORY_DOCUMENTS_REQUEST',\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const getRfiHistoryDocumentsSuccess = (data) => {\r\n  return {\r\n    type: 'CLAIMS_GET_RFI_HISTORY_DOCUMENTS_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const getRfiHistoryDocumentsFailure = (error) => {\r\n  return {\r\n    type: 'CLAIMS_GET_RFI_HISTORY_DOCUMENTS_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}