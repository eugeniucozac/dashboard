{"ast":null,"code":"import { authLogout, addLoader, removeLoader, enqueueNotification } from 'stores';\nimport * as utils from 'utils';\nimport { RESOLVE, INTERNALRFI, SEND_TO_FEC } from 'consts';\nexport var postSubmitNewRfi = function postSubmitNewRfi(payload) {\n  return function (dispatch, getState) {\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    dispatch(postSubmitNewRfiRequest(payload));\n    dispatch(addLoader('postSubmitNewRfi'));\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.bpmService,\n      path: 'api/workflow/process/sendClaimRFI',\n      data: payload\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(postSubmitNewRfiSuccess(data));\n\n      if (payload.taskCategory === INTERNALRFI) {\n        var _data$data;\n\n        dispatch(enqueueNotification('notification.newRfi.success', 'success', {\n          keepAfterUrlChange: true,\n          data: {\n            id: data === null || data === void 0 ? void 0 : (_data$data = data.data) === null || _data$data === void 0 ? void 0 : _data$data.taskDefinitionKey\n          }\n        }));\n      } else {\n        if (payload.action === RESOLVE || payload.action === SEND_TO_FEC) {\n          var _data$data2;\n\n          dispatch(enqueueNotification(payload.action === RESOLVE && 'notification.newExternalRfi.resolveSuccess' || payload.action === SEND_TO_FEC && 'notification.newExternalRfi.sendFECSuccess', 'success', {\n            keepAfterUrlChange: true,\n            data: {\n              id: data === null || data === void 0 ? void 0 : (_data$data2 = data.data) === null || _data$data2 === void 0 ? void 0 : _data$data2.taskDefinitionKey\n            }\n          }));\n        } else {\n          var _data$data3;\n\n          dispatch(enqueueNotification('notification.newExternalRfi.success', 'success', {\n            keepAfterUrlChange: true,\n            data: {\n              id: data === null || data === void 0 ? void 0 : (_data$data3 = data.data) === null || _data$data3 === void 0 ? void 0 : _data$data3.taskDefinitionKey\n            }\n          }));\n        }\n      }\n\n      return data;\n    }).catch(function (err) {\n      dispatch(postSubmitNewRfiFailure(err));\n\n      if (payload.taskCategory === INTERNALRFI) {\n        dispatch(enqueueNotification('notification.newRfi.fail', 'error'));\n      } else {\n        if (payload.action === RESOLVE || payload.action === SEND_TO_FEC) {\n          dispatch(enqueueNotification(payload.action === RESOLVE && 'notification.newExternalRfi.resolveFail' || payload.action === SEND_TO_FEC && 'notification.newExternalRfi.sendFECFail', 'error', {\n            keepAfterUrlChange: true\n          }));\n        } else {\n          dispatch(enqueueNotification('notification.newExternalRfi.fail', 'error', {\n            keepAfterUrlChange: true\n          }));\n        }\n      }\n\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      return err;\n    }).finally(function () {\n      dispatch(removeLoader('postSubmitNewRfi'));\n    });\n  };\n};\nexport var postSubmitNewRfiRequest = function postSubmitNewRfiRequest(payload) {\n  return {\n    type: 'PREMIUM_PROCESSING_SUBMIT_NEW_RFI_POST_REQUEST',\n    payload: payload\n  };\n};\nexport var postSubmitNewRfiSuccess = function postSubmitNewRfiSuccess(data) {\n  return {\n    type: 'PREMIUM_PROCESSING_SUBMIT_NEW_RFI_POST_SUCCESS',\n    payload: {\n      items: data.data\n    }\n  };\n};\nexport var postSubmitNewRfiFailure = function postSubmitNewRfiFailure(error) {\n  return {\n    type: 'PREMIUM_PROCESSING_SUBMIT_NEW_RFI_POST_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/premiumProcessing/premiumProcessing.actions.postSubmitNewRfi.js"],"names":["authLogout","addLoader","removeLoader","enqueueNotification","utils","RESOLVE","INTERNALRFI","SEND_TO_FEC","postSubmitNewRfi","payload","dispatch","getState","auth","user","endpoint","config","vars","postSubmitNewRfiRequest","api","post","token","accessToken","bpmService","path","data","then","response","handleResponse","json","handleNewData","postSubmitNewRfiSuccess","taskCategory","keepAfterUrlChange","id","taskDefinitionKey","action","catch","err","postSubmitNewRfiFailure","handleUnauthorized","finally","type","items","error"],"mappings":"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","sourcesContent":["import { authLogout, addLoader, removeLoader, enqueueNotification } from 'stores';\r\nimport * as utils from 'utils';\r\nimport { RESOLVE, INTERNALRFI, SEND_TO_FEC } from 'consts';\r\n\r\nexport const postSubmitNewRfi = (payload) => (dispatch, getState) => {\r\n  const {\r\n    user: { auth },\r\n    config: {\r\n      vars: { endpoint },\r\n    },\r\n  } = getState();\r\n\r\n  dispatch(postSubmitNewRfiRequest(payload));\r\n  dispatch(addLoader('postSubmitNewRfi'));\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.bpmService,\r\n      path: 'api/workflow/process/sendClaimRFI',\r\n      data: payload,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(postSubmitNewRfiSuccess(data));\r\n      if (payload.taskCategory === INTERNALRFI) {\r\n        dispatch(\r\n          enqueueNotification('notification.newRfi.success', 'success', {\r\n            keepAfterUrlChange: true,\r\n            data: { id: data?.data?.taskDefinitionKey },\r\n          })\r\n        );\r\n      } else {\r\n        if (payload.action === RESOLVE || payload.action === SEND_TO_FEC) {\r\n          dispatch(\r\n            enqueueNotification(\r\n              (payload.action === RESOLVE && 'notification.newExternalRfi.resolveSuccess') ||\r\n                (payload.action === SEND_TO_FEC && 'notification.newExternalRfi.sendFECSuccess'),\r\n              'success',\r\n              {\r\n                keepAfterUrlChange: true,\r\n                data: { id: data?.data?.taskDefinitionKey },\r\n              }\r\n            )\r\n          );\r\n        } else {\r\n          dispatch(\r\n            enqueueNotification('notification.newExternalRfi.success', 'success', {\r\n              keepAfterUrlChange: true,\r\n              data: { id: data?.data?.taskDefinitionKey },\r\n            })\r\n          );\r\n        }\r\n      }\r\n      return data;\r\n    })\r\n    .catch((err) => {\r\n      dispatch(postSubmitNewRfiFailure(err));\r\n      if (payload.taskCategory === INTERNALRFI) {\r\n        dispatch(enqueueNotification('notification.newRfi.fail', 'error'));\r\n      } else {\r\n        if (payload.action === RESOLVE || payload.action === SEND_TO_FEC) {\r\n          dispatch(\r\n            enqueueNotification(\r\n              (payload.action === RESOLVE && 'notification.newExternalRfi.resolveFail') ||\r\n                (payload.action === SEND_TO_FEC && 'notification.newExternalRfi.sendFECFail'),\r\n              'error',\r\n              {\r\n                keepAfterUrlChange: true,\r\n              }\r\n            )\r\n          );\r\n        } else {\r\n          dispatch(\r\n            enqueueNotification('notification.newExternalRfi.fail', 'error', {\r\n              keepAfterUrlChange: true,\r\n            })\r\n          );\r\n        }\r\n      }\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('postSubmitNewRfi'));\r\n    });\r\n};\r\n\r\nexport const postSubmitNewRfiRequest = (payload) => {\r\n  return {\r\n    type: 'PREMIUM_PROCESSING_SUBMIT_NEW_RFI_POST_REQUEST',\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const postSubmitNewRfiSuccess = (data) => {\r\n  return {\r\n    type: 'PREMIUM_PROCESSING_SUBMIT_NEW_RFI_POST_SUCCESS',\r\n    payload: {\r\n      items: data.data,\r\n    },\r\n  };\r\n};\r\n\r\nexport const postSubmitNewRfiFailure = (error) => {\r\n  return {\r\n    type: 'PREMIUM_PROCESSING_SUBMIT_NEW_RFI_POST_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}