{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ClaimsProcessingTableRow\\\\ClaimsProcessingTableRow.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux'; // app\n\nimport { ClaimsProcessingTableRowView } from './ClaimsProcessingTableRow.view';\nimport * as utils from 'utils';\nimport * as constants from 'consts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nClaimsProcessingTableRow.prototype = {\n  claim: PropTypes.object.isRequired,\n  isSelected: PropTypes.bool,\n  columnProps: PropTypes.object.isRequired,\n  handlers: PropTypes.shape({\n    clickClaim: PropTypes.func.isRequired,\n    createRFI: PropTypes.func.isRequired,\n    createTask: PropTypes.func.isRequired,\n    reAssign: PropTypes.func.isRequired,\n    returnClaimToTeamQueue: PropTypes.func.isRequired,\n    selectClaim: PropTypes.func.isRequired,\n    reOpenClaim: PropTypes.func.isRequired,\n    setClaimPriority: PropTypes.func.isRequired\n  }).isRequired\n};\nexport default function ClaimsProcessingTableRow(_ref) {\n  _s();\n\n  var _claim$processState, _user$emailId, _claim$assigneeEmail, _user$organisation, _user$organisation$na, _claim$team;\n\n  var claim = _ref.claim,\n      handlers = _ref.handlers,\n      rest = _objectWithoutProperties(_ref, [\"claim\", \"handlers\"]);\n\n  var user = useSelector(function (state) {\n    return state.user;\n  });\n  var isClosedClaim = (claim === null || claim === void 0 ? void 0 : (_claim$processState = claim.processState) === null || _claim$processState === void 0 ? void 0 : _claim$processState.toLowerCase()) === constants.CLAIM_STATUS_CLOSED.toLowerCase();\n  var isReassignEnabled = constants.REASSIGN_ENABLED_TASK_STATUSES.includes(claim === null || claim === void 0 ? void 0 : claim.processState);\n  var userHasAllClaimsPermission = utils.app.access.feature('claimsProcessing.allClaims', ['read', 'create', 'update'], user);\n  var isUsersClaim = (user === null || user === void 0 ? void 0 : (_user$emailId = user.emailId) === null || _user$emailId === void 0 ? void 0 : _user$emailId.toLowerCase()) === (claim === null || claim === void 0 ? void 0 : (_claim$assigneeEmail = claim.assigneeEmail) === null || _claim$assigneeEmail === void 0 ? void 0 : _claim$assigneeEmail.toLowerCase());\n  var isTeamClaim = (user === null || user === void 0 ? void 0 : (_user$organisation = user.organisation) === null || _user$organisation === void 0 ? void 0 : (_user$organisation$na = _user$organisation.name) === null || _user$organisation$na === void 0 ? void 0 : _user$organisation$na.toLowerCase()) === (claim === null || claim === void 0 ? void 0 : (_claim$team = claim.team) === null || _claim$team === void 0 ? void 0 : _claim$team.toLowerCase());\n  var rowActions = [{\n    id: 'reAssign',\n    label: utils.string.t('app.reAssing'),\n    disabled: isClosedClaim || !(userHasAllClaimsPermission && isTeamClaim),\n    callback: function callback() {\n      return handlers.reAssign(claim);\n    }\n  }, {\n    id: 'createTask',\n    label: utils.string.t('claims.processing.summary.buttons.createTask'),\n    disabled: isClosedClaim || !isUsersClaim,\n    callback: function callback() {\n      return handlers.createTask(claim);\n    }\n  }, {\n    id: 'createRFI',\n    label: utils.string.t('claims.processing.summary.buttons.createNewRFI'),\n    disabled: isClosedClaim,\n    callback: function callback() {\n      return handlers.createRFI(claim);\n    }\n  }, {\n    id: 'setClaimPriority',\n    label: utils.string.t('claims.claimRef.popOverItems.setClaimPriority'),\n    disabled: isClosedClaim || !isUsersClaim,\n    callback: function callback() {\n      return handlers.setClaimPriority(claim);\n    }\n  }, {\n    id: 'returnClaimToTeamQueue',\n    label: utils.string.t('claims.processing.summary.buttons.releaseQueue'),\n    disabled: isClosedClaim || !isUsersClaim,\n    callback: function callback() {\n      return handlers.returnClaimToTeamQueue(claim);\n    }\n  }, {\n    id: 'reopenClaim',\n    label: utils.string.t('claims.claimRef.popOverItems.reopenClaim'),\n    disabled: !isClosedClaim,\n    callback: function callback() {\n      return handlers.reOpenClaim(claim);\n    }\n  }];\n  return /*#__PURE__*/_jsxDEV(ClaimsProcessingTableRowView, _objectSpread(_objectSpread({\n    claim: claim,\n    isReassignEnabled: isReassignEnabled,\n    handlers: {\n      selectClaim: handlers.selectClaim,\n      clickClaim: handlers.clickClaim\n    }\n  }, rest), {}, {\n    rowActions: rowActions\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ClaimsProcessingTableRow, \"ODc3cjw/vvoWaLFqHWcEGODyOfo=\", false, function () {\n  return [useSelector];\n});\n\n_c = ClaimsProcessingTableRow;\nClaimsProcessingTableRow.displayName = \"ClaimsProcessingTableRow\";\nClaimsProcessingTableRow.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"ClaimsProcessingTableRow\"\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\modules\\\\ClaimsProcessingTableRow\\\\ClaimsProcessingTableRow.js\"] = {\n    name: \"ClaimsProcessingTableRow\",\n    docgenInfo: ClaimsProcessingTableRow.__docgenInfo,\n    path: \"src\\\\modules\\\\ClaimsProcessingTableRow\\\\ClaimsProcessingTableRow.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimsProcessingTableRow\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ClaimsProcessingTableRow/ClaimsProcessingTableRow.js"],"names":["React","PropTypes","useSelector","ClaimsProcessingTableRowView","utils","constants","ClaimsProcessingTableRow","prototype","claim","object","isRequired","isSelected","bool","columnProps","handlers","shape","clickClaim","func","createRFI","createTask","reAssign","returnClaimToTeamQueue","selectClaim","reOpenClaim","setClaimPriority","rest","user","state","isClosedClaim","processState","toLowerCase","CLAIM_STATUS_CLOSED","isReassignEnabled","REASSIGN_ENABLED_TASK_STATUSES","includes","userHasAllClaimsPermission","app","access","feature","isUsersClaim","emailId","assigneeEmail","isTeamClaim","organisation","name","team","rowActions","id","label","string","t","disabled","callback"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector } from 'react-redux';\r\n\r\n// app\r\nimport { ClaimsProcessingTableRowView } from './ClaimsProcessingTableRow.view';\r\nimport * as utils from 'utils';\r\nimport * as constants from 'consts';\r\n\r\nClaimsProcessingTableRow.prototype = {\r\n  claim: PropTypes.object.isRequired,\r\n  isSelected: PropTypes.bool,\r\n  columnProps: PropTypes.object.isRequired,\r\n  handlers: PropTypes.shape({\r\n    clickClaim: PropTypes.func.isRequired,\r\n    createRFI: PropTypes.func.isRequired,\r\n    createTask: PropTypes.func.isRequired,\r\n    reAssign: PropTypes.func.isRequired,\r\n    returnClaimToTeamQueue: PropTypes.func.isRequired,\r\n    selectClaim: PropTypes.func.isRequired,\r\n    reOpenClaim: PropTypes.func.isRequired,\r\n    setClaimPriority: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default function ClaimsProcessingTableRow({ claim, handlers, ...rest }) {\r\n  const user = useSelector((state) => state.user);\r\n\r\n  const isClosedClaim = claim?.processState?.toLowerCase() === constants.CLAIM_STATUS_CLOSED.toLowerCase();\r\n  const isReassignEnabled = constants.REASSIGN_ENABLED_TASK_STATUSES.includes(claim?.processState);\r\n  const userHasAllClaimsPermission = utils.app.access.feature('claimsProcessing.allClaims', ['read', 'create', 'update'], user);\r\n  const isUsersClaim = user?.emailId?.toLowerCase() === claim?.assigneeEmail?.toLowerCase();\r\n  const isTeamClaim = user?.organisation?.name?.toLowerCase() === claim?.team?.toLowerCase();\r\n\r\n  const rowActions = [\r\n    {\r\n      id: 'reAssign',\r\n      label: utils.string.t('app.reAssing'),\r\n      disabled: isClosedClaim || !(userHasAllClaimsPermission && isTeamClaim),\r\n      callback: () => handlers.reAssign(claim),\r\n    },\r\n    {\r\n      id: 'createTask',\r\n      label: utils.string.t('claims.processing.summary.buttons.createTask'),\r\n      disabled: isClosedClaim || !isUsersClaim,\r\n      callback: () => handlers.createTask(claim),\r\n    },\r\n    {\r\n      id: 'createRFI',\r\n      label: utils.string.t('claims.processing.summary.buttons.createNewRFI'),\r\n      disabled: isClosedClaim,\r\n      callback: () => handlers.createRFI(claim),\r\n    },\r\n    {\r\n      id: 'setClaimPriority',\r\n      label: utils.string.t('claims.claimRef.popOverItems.setClaimPriority'),\r\n      disabled: isClosedClaim || !isUsersClaim,\r\n      callback: () => handlers.setClaimPriority(claim),\r\n    },\r\n    {\r\n      id: 'returnClaimToTeamQueue',\r\n      label: utils.string.t('claims.processing.summary.buttons.releaseQueue'),\r\n      disabled: isClosedClaim || !isUsersClaim,\r\n      callback: () => handlers.returnClaimToTeamQueue(claim),\r\n    },\r\n    {\r\n      id: 'reopenClaim',\r\n      label: utils.string.t('claims.claimRef.popOverItems.reopenClaim'),\r\n      disabled: !isClosedClaim,\r\n      callback: () => handlers.reOpenClaim(claim),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <ClaimsProcessingTableRowView\r\n      claim={claim}\r\n      isReassignEnabled={isReassignEnabled}\r\n      handlers={{\r\n        selectClaim: handlers.selectClaim,\r\n        clickClaim: handlers.clickClaim,\r\n      }}\r\n      {...rest}\r\n      rowActions={rowActions}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}