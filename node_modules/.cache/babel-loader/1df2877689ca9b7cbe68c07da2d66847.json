{"ast":null,"code":"import { authLogout, addLoader, removeLoader } from 'stores';\nimport * as utils from 'utils';\nexport var getComplexityDivisionMatrix = function getComplexityDivisionMatrix() {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/claims.actions.getComplexityDivisionMatrix'\n    };\n    dispatch(getComplexityDivisionMatrixRequest());\n    dispatch(addLoader('getComplexityDivisionMatrix'));\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.claimService,\n      path: 'api/data/claims-triage/complex/division'\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(getComplexityDivisionMatrixSuccess(data.data));\n      dispatch(removeLoader('getComplexityDivisionMatrix'));\n      return data.data;\n    }).catch(function (err) {\n      dispatch(getComplexityDivisionMatrixFailure(err, defaultError));\n      dispatch(removeLoader('getComplexityDivisionMatrix'));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      return err;\n    });\n  };\n};\nexport var getComplexityDivisionMatrixRequest = function getComplexityDivisionMatrixRequest() {\n  return {\n    type: 'CLAIMS_COMPLEXITY_DIVISION_GET_REQUEST'\n  };\n};\nexport var getComplexityDivisionMatrixSuccess = function getComplexityDivisionMatrixSuccess(data) {\n  return {\n    type: 'CLAIMS_COMPLEXITY_DIVISION_GET_SUCCESS',\n    payload: data\n  };\n};\nexport var getComplexityDivisionMatrixFailure = function getComplexityDivisionMatrixFailure(err) {\n  return {\n    type: 'CLAIMS_COMPLEXITY_DIVISION_GET_FAILURE',\n    payload: err\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.getComplexityDivisionMatrix.js"],"names":["authLogout","addLoader","removeLoader","utils","getComplexityDivisionMatrix","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","getComplexityDivisionMatrixRequest","api","get","token","accessToken","claimService","path","then","response","handleResponse","json","handleNewData","data","getComplexityDivisionMatrixSuccess","catch","err","getComplexityDivisionMatrixFailure","handleUnauthorized","type","payload"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,YAAhC,QAAoD,QAApD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAO,IAAMC,2BAA2B,GAAG,SAA9BA,2BAA8B;AAAA,SAAM,UAACC,QAAD,EAAWC,QAAX,EAAwB;AACvE;AADuE,oBAEZA,QAAQ,EAFI;AAAA,QAEvDC,IAFuD,aAE/DC,IAF+D,CAEvDD,IAFuD;AAAA,QAE7BE,QAF6B,aAE/CC,MAF+C,CAErCC,IAFqC,CAE7BF,QAF6B;;AAIvE,QAAMG,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE;AADa,KAArB;AAIAR,IAAAA,QAAQ,CAACS,kCAAkC,EAAnC,CAAR;AACAT,IAAAA,QAAQ,CAACJ,SAAS,CAAC,6BAAD,CAAV,CAAR;AAEA,WAAOE,KAAK,CAACY,GAAN,CACJC,GADI,CACA;AACHC,MAAAA,KAAK,EAAEV,IAAI,CAACW,WADT;AAEHT,MAAAA,QAAQ,EAAEA,QAAQ,CAACU,YAFhB;AAGHC,MAAAA,IAAI,EAAE;AAHH,KADA,EAMJC,IANI,CAMC,UAACC,QAAD;AAAA,aAAcnB,KAAK,CAACY,GAAN,CAAUQ,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAND,EAOJD,IAPI,CAOC,UAACG,IAAD;AAAA,aAAUrB,KAAK,CAACY,GAAN,CAAUU,aAAV,CAAwBD,IAAxB,CAAV;AAAA,KAPD,EAQJH,IARI,CAQC,UAACK,IAAD,EAAU;AACdrB,MAAAA,QAAQ,CAACsB,kCAAkC,CAACD,IAAI,CAACA,IAAN,CAAnC,CAAR;AACArB,MAAAA,QAAQ,CAACH,YAAY,CAAC,6BAAD,CAAb,CAAR;AACA,aAAOwB,IAAI,CAACA,IAAZ;AACD,KAZI,EAaJE,KAbI,CAaE,UAACC,GAAD,EAAS;AACdxB,MAAAA,QAAQ,CAACyB,kCAAkC,CAACD,GAAD,EAAMjB,YAAN,CAAnC,CAAR;AACAP,MAAAA,QAAQ,CAACH,YAAY,CAAC,6BAAD,CAAb,CAAR;AACAC,MAAAA,KAAK,CAACY,GAAN,CAAUgB,kBAAV,CAA6BF,GAA7B,EAAkCxB,QAAlC,EAA4CL,UAA5C;AACA,aAAO6B,GAAP;AACD,KAlBI,CAAP;AAmBD,GA9B0C;AAAA,CAApC;AAgCP,OAAO,IAAMf,kCAAkC,GAAG,SAArCA,kCAAqC,GAAM;AACtD,SAAO;AACLkB,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,IAAML,kCAAkC,GAAG,SAArCA,kCAAqC,CAACD,IAAD,EAAU;AAC1D,SAAO;AACLM,IAAAA,IAAI,EAAE,wCADD;AAELC,IAAAA,OAAO,EAAEP;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMI,kCAAkC,GAAG,SAArCA,kCAAqC,CAACD,GAAD,EAAS;AACzD,SAAO;AACLG,IAAAA,IAAI,EAAE,wCADD;AAELC,IAAAA,OAAO,EAAEJ;AAFJ,GAAP;AAID,CALM","sourcesContent":["import { authLogout, addLoader, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const getComplexityDivisionMatrix = () => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } } } = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.getComplexityDivisionMatrix',\r\n  };\r\n\r\n  dispatch(getComplexityDivisionMatrixRequest());\r\n  dispatch(addLoader('getComplexityDivisionMatrix'));\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.claimService,\r\n      path: 'api/data/claims-triage/complex/division',\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(getComplexityDivisionMatrixSuccess(data.data));\r\n      dispatch(removeLoader('getComplexityDivisionMatrix'));\r\n      return data.data;\r\n    })\r\n    .catch((err) => {\r\n      dispatch(getComplexityDivisionMatrixFailure(err, defaultError));\r\n      dispatch(removeLoader('getComplexityDivisionMatrix'));\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const getComplexityDivisionMatrixRequest = () => {\r\n  return {\r\n    type: 'CLAIMS_COMPLEXITY_DIVISION_GET_REQUEST',\r\n  };\r\n};\r\n\r\nexport const getComplexityDivisionMatrixSuccess = (data) => {\r\n  return {\r\n    type: 'CLAIMS_COMPLEXITY_DIVISION_GET_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const getComplexityDivisionMatrixFailure = (err) => {\r\n  return {\r\n    type: 'CLAIMS_COMPLEXITY_DIVISION_GET_FAILURE',\r\n    payload: err,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}