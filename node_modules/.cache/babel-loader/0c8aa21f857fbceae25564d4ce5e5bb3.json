{"ast":null,"code":"import \"core-js/modules/es.array.sort\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ClaimsManagement\\\\ClaimsManagement.view.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PropTypes from 'prop-types'; // app\n\nimport * as utils from 'utils';\nimport { ClaimsProcessingTable } from 'modules';\nimport { TableActions, TableFilters, TableToolbar, FormRadio, Button, FormLabel, FormAutocompleteMui, FormSwitch } from 'components';\nimport styles from './ClaimsManagement.styles';\nimport { useMedia } from 'hooks';\nimport * as constants from 'consts'; // mui\n\nimport { makeStyles, Box, Grid } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nClaimsManagementView.propTypes = {\n  claims: PropTypes.array.isRequired,\n  claimsProcessing: PropTypes.object.isRequired,\n  sort: PropTypes.object.isRequired,\n  columnsArray: PropTypes.array.isRequired,\n  columnProps: PropTypes.func.isRequired,\n  viewFields: PropTypes.array.isRequired,\n  tableFilterFields: PropTypes.array.isRequired,\n  isFetchingFilters: PropTypes.bool,\n  isBulkEnabled: PropTypes.bool,\n  resetKey: PropTypes.number,\n  claimsType: PropTypes.string.isRequired,\n  control: PropTypes.object.isRequired,\n  handlers: PropTypes.shape({\n    search: PropTypes.func.isRequired,\n    searchFilter: PropTypes.func.isRequired,\n    resetFilter: PropTypes.func.isRequired,\n    sort: PropTypes.func.isRequired,\n    changePage: PropTypes.func.isRequired,\n    changeRowsPerPage: PropTypes.func.isRequired,\n    toggleColumn: PropTypes.func.isRequired,\n    resetSearch: PropTypes.func.isRequired,\n    bulkAssignClaims: PropTypes.func.isRequired,\n    setClaimsType: PropTypes.func.isRequired,\n    onSelectSearchBy: PropTypes.func.isRequired\n  }).isRequired,\n  searchTerm: PropTypes.string\n};\nexport function ClaimsManagementView(_ref) {\n  _s();\n\n  var _claimsProcessing$ite;\n\n  var claims = _ref.claims,\n      claimsProcessing = _ref.claimsProcessing,\n      sort = _ref.sort,\n      columnsArray = _ref.columnsArray,\n      columnProps = _ref.columnProps,\n      viewFields = _ref.viewFields,\n      tableFilterFields = _ref.tableFilterFields,\n      isFetchingFilters = _ref.isFetchingFilters,\n      isBulkEnabled = _ref.isBulkEnabled,\n      claimsType = _ref.claimsType,\n      resetKey = _ref.resetKey,\n      control = _ref.control,\n      handlers = _ref.handlers,\n      searchTerm = _ref.searchTerm;\n  var media = useMedia();\n  var classes = makeStyles(styles, {\n    name: 'ClaimsManagement'\n  })({\n    isMobile: media.mobile\n  });\n\n  var columnsData = _toConsumableArray(columnsArray);\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    mt: 3,\n    \"data-testid\": \"claims-management\",\n    children: [/*#__PURE__*/_jsxDEV(TableToolbar, {\n      children: [/*#__PURE__*/_jsxDEV(TableActions, {\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(FormLabel, {\n              label: \"\".concat(utils.string.t('app.view'), \": \"),\n              align: \"left\",\n              nestedClasses: {\n                root: classes.viewLabel\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(FormRadio, _objectSpread(_objectSpread({}, utils.form.getFieldProps(viewFields, 'views')), {}, {\n              control: control\n            }), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), claimsType !== constants.CLAIM_TEAM_TYPE.allClaims && /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(FormLabel, {\n              label: utils.string.t('claims.processing.includeClosedClaims'),\n              align: \"left\",\n              nestedClasses: {\n                root: classes.viewLabel\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(FormSwitch, _objectSpread({}, utils.form.getFieldProps(viewFields, 'includeClosedClaims', control)), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableFilters, {\n        search: true,\n        searchBy: /*#__PURE__*/_jsxDEV(Box, {\n          className: classes.filterBox,\n          children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n            label: \"\".concat(utils.string.t('claims.searchByClaims.label'), \"*\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(FormAutocompleteMui, _objectSpread(_objectSpread({}, utils.form.getFieldProps(viewFields, 'searchBy')), {}, {\n            control: control,\n            nestedClasses: {\n              root: classes.selectAutocomplete\n            },\n            callback: function callback(event, obj) {\n              handlers.onSelectSearchBy(obj === null || obj === void 0 ? void 0 : obj.value, obj === null || obj === void 0 ? void 0 : obj.label);\n            }\n          }), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this),\n        searchPlaceholder: utils.string.t('claims.processing.searchBarPlaceholder'),\n        searchMinChars: 3,\n        nestedClasses: {\n          searchMaxWidth: classes.searchMaxWidth\n        },\n        filtersArray: tableFilterFields,\n        isFetchingFilters: isFetchingFilters,\n        columns: true,\n        clearFilterKey: resetKey,\n        columnsArray: columnsData === null || columnsData === void 0 ? void 0 : columnsData.sort(function (first, second) {\n          var _first$label;\n\n          return (_first$label = first.label) === null || _first$label === void 0 ? void 0 : _first$label.localeCompare(second.label);\n        }),\n        handlers: {\n          onSearch: handlers.search,\n          onResetFilter: handlers.resetFilter,\n          onFilter: function onFilter(values) {\n            return handlers.searchFilter(values);\n          },\n          onToggleColumn: handlers.toggleColumn,\n          onResetSearch: handlers.resetSearch\n        },\n        searchTerm: searchTerm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ClaimsProcessingTable, {\n      claims: claims,\n      cols: columnsArray,\n      columnProps: columnProps,\n      sort: sort,\n      handlers: {\n        bulkAssignClaims: handlers.bulkAssignClaims,\n        changePage: handlers.changePage,\n        changeRowsPerPage: handlers.changeRowsPerPage,\n        sort: handlers.sort\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), (claimsProcessing === null || claimsProcessing === void 0 ? void 0 : (_claimsProcessing$ite = claimsProcessing.items) === null || _claimsProcessing$ite === void 0 ? void 0 : _claimsProcessing$ite.length) > 0 && /*#__PURE__*/_jsxDEV(Button, {\n      text: utils.string.t('claims.processing.bulkAssign.button'),\n      color: \"primary\",\n      variant: \"outlined\",\n      disabled: !isBulkEnabled,\n      onClick: handlers.bulkAssignClaims,\n      \"data-testid\": \"bulk-button\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ClaimsManagementView, \"Inu6KbwmgyiVqUeOTSx0E+dAczw=\", false, function () {\n  return [useMedia];\n});\n\n_c = ClaimsManagementView;\nClaimsManagementView.displayName = \"ClaimsManagementView\";\nClaimsManagementView.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"ClaimsManagementView\",\n  \"props\": {\n    \"claims\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"claimsProcessing\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"sort\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"columnsArray\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"columnProps\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"viewFields\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"tableFilterFields\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"isFetchingFilters\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"isBulkEnabled\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"resetKey\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"claimsType\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"control\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"handlers\": {\n      \"type\": {\n        \"name\": \"shape\",\n        \"value\": {\n          \"search\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"searchFilter\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"resetFilter\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"sort\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"changePage\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"changeRowsPerPage\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"toggleColumn\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"resetSearch\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"bulkAssignClaims\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"setClaimsType\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"onSelectSearchBy\": {\n            \"name\": \"func\",\n            \"required\": true\n          }\n        }\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"searchTerm\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\modules\\\\ClaimsManagement\\\\ClaimsManagement.view.js\"] = {\n    name: \"ClaimsManagementView\",\n    docgenInfo: ClaimsManagementView.__docgenInfo,\n    path: \"src\\\\modules\\\\ClaimsManagement\\\\ClaimsManagement.view.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimsManagementView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ClaimsManagement/ClaimsManagement.view.js"],"names":["React","PropTypes","utils","ClaimsProcessingTable","TableActions","TableFilters","TableToolbar","FormRadio","Button","FormLabel","FormAutocompleteMui","FormSwitch","styles","useMedia","constants","makeStyles","Box","Grid","ClaimsManagementView","propTypes","claims","array","isRequired","claimsProcessing","object","sort","columnsArray","columnProps","func","viewFields","tableFilterFields","isFetchingFilters","bool","isBulkEnabled","resetKey","number","claimsType","string","control","handlers","shape","search","searchFilter","resetFilter","changePage","changeRowsPerPage","toggleColumn","resetSearch","bulkAssignClaims","setClaimsType","onSelectSearchBy","searchTerm","media","classes","name","isMobile","mobile","columnsData","t","root","viewLabel","form","getFieldProps","CLAIM_TEAM_TYPE","allClaims","filterBox","selectAutocomplete","event","obj","value","label","searchMaxWidth","first","second","localeCompare","onSearch","onResetFilter","onFilter","values","onToggleColumn","onResetSearch","items","length"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,qBAAT,QAAsC,SAAtC;AACA,SAASC,YAAT,EAAuBC,YAAvB,EAAqCC,YAArC,EAAmDC,SAAnD,EAA8DC,MAA9D,EAAsEC,SAAtE,EAAiFC,mBAAjF,EAAsGC,UAAtG,QAAwH,YAAxH;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAO,KAAKC,SAAZ,MAA2B,QAA3B,C,CAEA;;AACA,SAASC,UAAT,EAAqBC,GAArB,EAA0BC,IAA1B,QAAsC,mBAAtC;;AAEAC,oBAAoB,CAACC,SAArB,GAAiC;AAC/BC,EAAAA,MAAM,EAAEnB,SAAS,CAACoB,KAAV,CAAgBC,UADO;AAE/BC,EAAAA,gBAAgB,EAAEtB,SAAS,CAACuB,MAAV,CAAiBF,UAFJ;AAG/BG,EAAAA,IAAI,EAAExB,SAAS,CAACuB,MAAV,CAAiBF,UAHQ;AAI/BI,EAAAA,YAAY,EAAEzB,SAAS,CAACoB,KAAV,CAAgBC,UAJC;AAK/BK,EAAAA,WAAW,EAAE1B,SAAS,CAAC2B,IAAV,CAAeN,UALG;AAM/BO,EAAAA,UAAU,EAAE5B,SAAS,CAACoB,KAAV,CAAgBC,UANG;AAO/BQ,EAAAA,iBAAiB,EAAE7B,SAAS,CAACoB,KAAV,CAAgBC,UAPJ;AAQ/BS,EAAAA,iBAAiB,EAAE9B,SAAS,CAAC+B,IARE;AAS/BC,EAAAA,aAAa,EAAEhC,SAAS,CAAC+B,IATM;AAU/BE,EAAAA,QAAQ,EAAEjC,SAAS,CAACkC,MAVW;AAW/BC,EAAAA,UAAU,EAAEnC,SAAS,CAACoC,MAAV,CAAiBf,UAXE;AAY/BgB,EAAAA,OAAO,EAAErC,SAAS,CAACuB,MAAV,CAAiBF,UAZK;AAa/BiB,EAAAA,QAAQ,EAAEtC,SAAS,CAACuC,KAAV,CAAgB;AACxBC,IAAAA,MAAM,EAAExC,SAAS,CAAC2B,IAAV,CAAeN,UADC;AAExBoB,IAAAA,YAAY,EAAEzC,SAAS,CAAC2B,IAAV,CAAeN,UAFL;AAGxBqB,IAAAA,WAAW,EAAE1C,SAAS,CAAC2B,IAAV,CAAeN,UAHJ;AAIxBG,IAAAA,IAAI,EAAExB,SAAS,CAAC2B,IAAV,CAAeN,UAJG;AAKxBsB,IAAAA,UAAU,EAAE3C,SAAS,CAAC2B,IAAV,CAAeN,UALH;AAMxBuB,IAAAA,iBAAiB,EAAE5C,SAAS,CAAC2B,IAAV,CAAeN,UANV;AAOxBwB,IAAAA,YAAY,EAAE7C,SAAS,CAAC2B,IAAV,CAAeN,UAPL;AAQxByB,IAAAA,WAAW,EAAE9C,SAAS,CAAC2B,IAAV,CAAeN,UARJ;AASxB0B,IAAAA,gBAAgB,EAAE/C,SAAS,CAAC2B,IAAV,CAAeN,UATT;AAUxB2B,IAAAA,aAAa,EAAEhD,SAAS,CAAC2B,IAAV,CAAeN,UAVN;AAWxB4B,IAAAA,gBAAgB,EAAEjD,SAAS,CAAC2B,IAAV,CAAeN;AAXT,GAAhB,EAYPA,UAzB4B;AA0B/B6B,EAAAA,UAAU,EAAElD,SAAS,CAACoC;AA1BS,CAAjC;AA6BA,OAAO,SAASnB,oBAAT,OAeJ;AAAA;;AAAA;;AAAA,MAdDE,MAcC,QAdDA,MAcC;AAAA,MAbDG,gBAaC,QAbDA,gBAaC;AAAA,MAZDE,IAYC,QAZDA,IAYC;AAAA,MAXDC,YAWC,QAXDA,YAWC;AAAA,MAVDC,WAUC,QAVDA,WAUC;AAAA,MATDE,UASC,QATDA,UASC;AAAA,MARDC,iBAQC,QARDA,iBAQC;AAAA,MAPDC,iBAOC,QAPDA,iBAOC;AAAA,MANDE,aAMC,QANDA,aAMC;AAAA,MALDG,UAKC,QALDA,UAKC;AAAA,MAJDF,QAIC,QAJDA,QAIC;AAAA,MAHDI,OAGC,QAHDA,OAGC;AAAA,MAFDC,QAEC,QAFDA,QAEC;AAAA,MADDY,UACC,QADDA,UACC;AACD,MAAMC,KAAK,GAAGvC,QAAQ,EAAtB;AACA,MAAMwC,OAAO,GAAGtC,UAAU,CAACH,MAAD,EAAS;AAAE0C,IAAAA,IAAI,EAAE;AAAR,GAAT,CAAV,CAAiD;AAAEC,IAAAA,QAAQ,EAAEH,KAAK,CAACI;AAAlB,GAAjD,CAAhB;;AACA,MAAMC,WAAW,sBAAO/B,YAAP,CAAjB;;AAEA,sBACE,QAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAY,mBAAY,mBAAxB;AAAA,4BACE,QAAC,YAAD;AAAA,8BACE,QAAC,YAAD;AAAA,gCACE,QAAC,IAAD;AAAM,UAAA,SAAS,MAAf;AAAA,kCACE,QAAC,IAAD;AAAM,YAAA,IAAI,MAAV;AAAA,mCACE,QAAC,SAAD;AAAW,cAAA,KAAK,YAAKxB,KAAK,CAACmC,MAAN,CAAaqB,CAAb,CAAe,UAAf,CAAL,OAAhB;AAAqD,cAAA,KAAK,EAAC,MAA3D;AAAkE,cAAA,aAAa,EAAE;AAAEC,gBAAAA,IAAI,EAAEN,OAAO,CAACO;AAAhB;AAAjF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBADF,eAIE,QAAC,IAAD;AAAM,YAAA,IAAI,MAAV;AAAA,mCACE,QAAC,SAAD,kCAAe1D,KAAK,CAAC2D,IAAN,CAAWC,aAAX,CAAyBjC,UAAzB,EAAqC,OAArC,CAAf;AAA8D,cAAA,OAAO,EAAES;AAAvE;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EASGF,UAAU,KAAKtB,SAAS,CAACiD,eAAV,CAA0BC,SAAzC,iBACC,QAAC,IAAD;AAAM,UAAA,SAAS,MAAf;AAAA,kCACE,QAAC,IAAD;AAAM,YAAA,IAAI,MAAV;AAAA,mCACE,QAAC,SAAD;AACE,cAAA,KAAK,EAAE9D,KAAK,CAACmC,MAAN,CAAaqB,CAAb,CAAe,uCAAf,CADT;AAEE,cAAA,KAAK,EAAC,MAFR;AAGE,cAAA,aAAa,EAAE;AAAEC,gBAAAA,IAAI,EAAEN,OAAO,CAACO;AAAhB;AAHjB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBADF,eAQE,QAAC,IAAD;AAAM,YAAA,IAAI,MAAV;AAAA,mCACE,QAAC,UAAD,oBAAgB1D,KAAK,CAAC2D,IAAN,CAAWC,aAAX,CAAyBjC,UAAzB,EAAqC,qBAArC,EAA4DS,OAA5D,CAAhB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBARF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAyBE,QAAC,YAAD;AACE,QAAA,MAAM,MADR;AAEE,QAAA,QAAQ,eACN,QAAC,GAAD;AAAK,UAAA,SAAS,EAAEe,OAAO,CAACY,SAAxB;AAAA,kCACE,QAAC,SAAD;AAAW,YAAA,KAAK,YAAK/D,KAAK,CAACmC,MAAN,CAAaqB,CAAb,CAAe,6BAAf,CAAL;AAAhB;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,mBAAD,kCACMxD,KAAK,CAAC2D,IAAN,CAAWC,aAAX,CAAyBjC,UAAzB,EAAqC,UAArC,CADN;AAEE,YAAA,OAAO,EAAES,OAFX;AAGE,YAAA,aAAa,EAAE;AAAEqB,cAAAA,IAAI,EAAEN,OAAO,CAACa;AAAhB,aAHjB;AAIE,YAAA,QAAQ,EAAE,kBAACC,KAAD,EAAQC,GAAR,EAAgB;AACxB7B,cAAAA,QAAQ,CAACW,gBAAT,CAA0BkB,GAA1B,aAA0BA,GAA1B,uBAA0BA,GAAG,CAAEC,KAA/B,EAAsCD,GAAtC,aAAsCA,GAAtC,uBAAsCA,GAAG,CAAEE,KAA3C;AACD;AANH;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAeE,QAAA,iBAAiB,EAAEpE,KAAK,CAACmC,MAAN,CAAaqB,CAAb,CAAe,wCAAf,CAfrB;AAgBE,QAAA,cAAc,EAAE,CAhBlB;AAiBE,QAAA,aAAa,EAAE;AAAEa,UAAAA,cAAc,EAAElB,OAAO,CAACkB;AAA1B,SAjBjB;AAkBE,QAAA,YAAY,EAAEzC,iBAlBhB;AAmBE,QAAA,iBAAiB,EAAEC,iBAnBrB;AAoBE,QAAA,OAAO,MApBT;AAqBE,QAAA,cAAc,EAAEG,QArBlB;AAsBE,QAAA,YAAY,EAAEuB,WAAF,aAAEA,WAAF,uBAAEA,WAAW,CAAEhC,IAAb,CAAkB,UAAC+C,KAAD,EAAQC,MAAR;AAAA;;AAAA,iCAAmBD,KAAK,CAACF,KAAzB,iDAAmB,aAAaI,aAAb,CAA2BD,MAAM,CAACH,KAAlC,CAAnB;AAAA,SAAlB,CAtBhB;AAuBE,QAAA,QAAQ,EAAE;AACRK,UAAAA,QAAQ,EAAEpC,QAAQ,CAACE,MADX;AAERmC,UAAAA,aAAa,EAAErC,QAAQ,CAACI,WAFhB;AAGRkC,UAAAA,QAAQ,EAAE,kBAACC,MAAD;AAAA,mBAAYvC,QAAQ,CAACG,YAAT,CAAsBoC,MAAtB,CAAZ;AAAA,WAHF;AAIRC,UAAAA,cAAc,EAAExC,QAAQ,CAACO,YAJjB;AAKRkC,UAAAA,aAAa,EAAEzC,QAAQ,CAACQ;AALhB,SAvBZ;AA8BE,QAAA,UAAU,EAAEI;AA9Bd;AAAA;AAAA;AAAA;AAAA,cAzBF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eA2DE,QAAC,qBAAD;AACE,MAAA,MAAM,EAAE/B,MADV;AAEE,MAAA,IAAI,EAAEM,YAFR;AAGE,MAAA,WAAW,EAAEC,WAHf;AAIE,MAAA,IAAI,EAAEF,IAJR;AAKE,MAAA,QAAQ,EAAE;AACRuB,QAAAA,gBAAgB,EAAET,QAAQ,CAACS,gBADnB;AAERJ,QAAAA,UAAU,EAAEL,QAAQ,CAACK,UAFb;AAGRC,QAAAA,iBAAiB,EAAEN,QAAQ,CAACM,iBAHpB;AAIRpB,QAAAA,IAAI,EAAEc,QAAQ,CAACd;AAJP;AALZ;AAAA;AAAA;AAAA;AAAA,YA3DF,EAuEG,CAAAF,gBAAgB,SAAhB,IAAAA,gBAAgB,WAAhB,qCAAAA,gBAAgB,CAAE0D,KAAlB,gFAAyBC,MAAzB,IAAkC,CAAlC,iBACC,QAAC,MAAD;AACE,MAAA,IAAI,EAAEhF,KAAK,CAACmC,MAAN,CAAaqB,CAAb,CAAe,qCAAf,CADR;AAEE,MAAA,KAAK,EAAC,SAFR;AAGE,MAAA,OAAO,EAAC,UAHV;AAIE,MAAA,QAAQ,EAAE,CAACzB,aAJb;AAKE,MAAA,OAAO,EAAEM,QAAQ,CAACS,gBALpB;AAME,qBAAY;AANd;AAAA;AAAA;AAAA;AAAA,YAxEJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoFD;;GAxGe9B,oB;UAgBAL,Q;;;KAhBAK,oB;AAAAA,oB","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// app\r\nimport * as utils from 'utils';\r\nimport { ClaimsProcessingTable } from 'modules';\r\nimport { TableActions, TableFilters, TableToolbar, FormRadio, Button, FormLabel, FormAutocompleteMui, FormSwitch } from 'components';\r\nimport styles from './ClaimsManagement.styles';\r\nimport { useMedia } from 'hooks';\r\nimport * as constants from 'consts';\r\n\r\n// mui\r\nimport { makeStyles, Box, Grid } from '@material-ui/core';\r\n\r\nClaimsManagementView.propTypes = {\r\n  claims: PropTypes.array.isRequired,\r\n  claimsProcessing: PropTypes.object.isRequired,\r\n  sort: PropTypes.object.isRequired,\r\n  columnsArray: PropTypes.array.isRequired,\r\n  columnProps: PropTypes.func.isRequired,\r\n  viewFields: PropTypes.array.isRequired,\r\n  tableFilterFields: PropTypes.array.isRequired,\r\n  isFetchingFilters: PropTypes.bool,\r\n  isBulkEnabled: PropTypes.bool,\r\n  resetKey: PropTypes.number,\r\n  claimsType: PropTypes.string.isRequired,\r\n  control: PropTypes.object.isRequired,\r\n  handlers: PropTypes.shape({\r\n    search: PropTypes.func.isRequired,\r\n    searchFilter: PropTypes.func.isRequired,\r\n    resetFilter: PropTypes.func.isRequired,\r\n    sort: PropTypes.func.isRequired,\r\n    changePage: PropTypes.func.isRequired,\r\n    changeRowsPerPage: PropTypes.func.isRequired,\r\n    toggleColumn: PropTypes.func.isRequired,\r\n    resetSearch: PropTypes.func.isRequired,\r\n    bulkAssignClaims: PropTypes.func.isRequired,\r\n    setClaimsType: PropTypes.func.isRequired,\r\n    onSelectSearchBy: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n  searchTerm: PropTypes.string,\r\n};\r\n\r\nexport function ClaimsManagementView({\r\n  claims,\r\n  claimsProcessing,\r\n  sort,\r\n  columnsArray,\r\n  columnProps,\r\n  viewFields,\r\n  tableFilterFields,\r\n  isFetchingFilters,\r\n  isBulkEnabled,\r\n  claimsType,\r\n  resetKey,\r\n  control,\r\n  handlers,\r\n  searchTerm,\r\n}) {\r\n  const media = useMedia();\r\n  const classes = makeStyles(styles, { name: 'ClaimsManagement' })({ isMobile: media.mobile });\r\n  const columnsData = [...columnsArray];\r\n\r\n  return (\r\n    <Box mt={3} data-testid=\"claims-management\">\r\n      <TableToolbar>\r\n        <TableActions>\r\n          <Grid container>\r\n            <Grid item>\r\n              <FormLabel label={`${utils.string.t('app.view')}: `} align=\"left\" nestedClasses={{ root: classes.viewLabel }} />\r\n            </Grid>\r\n            <Grid item>\r\n              <FormRadio {...utils.form.getFieldProps(viewFields, 'views')} control={control} />\r\n            </Grid>\r\n          </Grid>\r\n          {claimsType !== constants.CLAIM_TEAM_TYPE.allClaims && (\r\n            <Grid container>\r\n              <Grid item>\r\n                <FormLabel\r\n                  label={utils.string.t('claims.processing.includeClosedClaims')}\r\n                  align=\"left\"\r\n                  nestedClasses={{ root: classes.viewLabel }}\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormSwitch {...utils.form.getFieldProps(viewFields, 'includeClosedClaims', control)} />\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n        </TableActions>\r\n        <TableFilters\r\n          search\r\n          searchBy={\r\n            <Box className={classes.filterBox}>\r\n              <FormLabel label={`${utils.string.t('claims.searchByClaims.label')}*`} />\r\n              <FormAutocompleteMui\r\n                {...utils.form.getFieldProps(viewFields, 'searchBy')}\r\n                control={control}\r\n                nestedClasses={{ root: classes.selectAutocomplete }}\r\n                callback={(event, obj) => {\r\n                  handlers.onSelectSearchBy(obj?.value, obj?.label);\r\n                }}\r\n              />\r\n            </Box>\r\n          }\r\n          searchPlaceholder={utils.string.t('claims.processing.searchBarPlaceholder')}\r\n          searchMinChars={3}\r\n          nestedClasses={{ searchMaxWidth: classes.searchMaxWidth }}\r\n          filtersArray={tableFilterFields}\r\n          isFetchingFilters={isFetchingFilters}\r\n          columns\r\n          clearFilterKey={resetKey}\r\n          columnsArray={columnsData?.sort((first, second) => first.label?.localeCompare(second.label))}\r\n          handlers={{\r\n            onSearch: handlers.search,\r\n            onResetFilter: handlers.resetFilter,\r\n            onFilter: (values) => handlers.searchFilter(values),\r\n            onToggleColumn: handlers.toggleColumn,\r\n            onResetSearch: handlers.resetSearch,\r\n          }}\r\n          searchTerm={searchTerm}\r\n        />\r\n      </TableToolbar>\r\n      <ClaimsProcessingTable\r\n        claims={claims}\r\n        cols={columnsArray}\r\n        columnProps={columnProps}\r\n        sort={sort}\r\n        handlers={{\r\n          bulkAssignClaims: handlers.bulkAssignClaims,\r\n          changePage: handlers.changePage,\r\n          changeRowsPerPage: handlers.changeRowsPerPage,\r\n          sort: handlers.sort,\r\n        }}\r\n      />\r\n      {claimsProcessing?.items?.length > 0 && (\r\n        <Button\r\n          text={utils.string.t('claims.processing.bulkAssign.button')}\r\n          color=\"primary\"\r\n          variant=\"outlined\"\r\n          disabled={!isBulkEnabled}\r\n          onClick={handlers.bulkAssignClaims}\r\n          data-testid=\"bulk-button\"\r\n        />\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}