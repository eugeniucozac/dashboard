{"ast":null,"code":"var _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\PremiumProcessingPendingActionAccordion\\\\PremiumProcessingPendingActionAccordion.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router'; // app\n\nimport { PremiumProcessingPendingActionAccordionView } from './PremiumProcessingPendingActionAccordion.view';\nimport config from 'config';\nimport * as constants from 'consts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nPremiumProcessingPendingActionAccordion.propTypes = {\n  taskId: PropTypes.string.isRequired,\n  isValidRPSection: PropTypes.bool,\n  isUnassignedStage: PropTypes.bool.isRequired,\n  isWorkBasket: PropTypes.bool.isRequired,\n  isAllCases: PropTypes.bool.isRequired,\n  isIssueDocumentStage: PropTypes.bool.isRequired,\n  isCheckSigningCase: PropTypes.bool.isRequired,\n  selectedCases: PropTypes.array\n};\nexport default function PremiumProcessingPendingActionAccordion(_ref) {\n  _s();\n\n  var _selectedCases$;\n\n  var taskId = _ref.taskId,\n      isValidRPSection = _ref.isValidRPSection,\n      isWorkBasket = _ref.isWorkBasket,\n      isUnassignedStage = _ref.isUnassignedStage,\n      isIssueDocumentStage = _ref.isIssueDocumentStage,\n      isAllCases = _ref.isAllCases,\n      isCheckSigningCase = _ref.isCheckSigningCase,\n      selectedCases = _ref.selectedCases;\n  var history = useHistory();\n\n  var issueDocumentsHandler = function issueDocumentsHandler() {\n    history.push(\"\".concat(config.routes.premiumProcessing.case, \"/\").concat(taskId, \"/\").concat(constants.PREMIUM_PROCESSING_TAB_ISSUE_DOCUMENTS, \"/\").concat(constants.PREMIUM_PROCESSING_TAB_NON_BUREAU));\n  };\n\n  var newRfiHandler = function newRfiHandler() {\n    if (taskId) {\n      history.push(\"\".concat(config.routes.premiumProcessing.case, \"/\").concat(taskId, \"/\").concat(constants.PREMIUM_PROCESSING_TAB_RFI));\n    }\n  };\n\n  var caseFlagType = selectedCases === null || selectedCases === void 0 ? void 0 : (_selectedCases$ = selectedCases[0]) === null || _selectedCases$ === void 0 ? void 0 : _selectedCases$.type;\n  var selectedCasesType = caseFlagType === null || caseFlagType === void 0 ? void 0 : caseFlagType.split(',');\n  var isQcFlag = Boolean(selectedCasesType === null || selectedCasesType === void 0 ? void 0 : selectedCasesType.some(function (flag) {\n    return flag === constants.QC_FLAG;\n  }));\n  return /*#__PURE__*/_jsxDEV(PremiumProcessingPendingActionAccordionView, {\n    taskId: taskId,\n    isValidRPSection: isValidRPSection,\n    isUnassignedStage: isUnassignedStage,\n    isIssueDocumentStage: isIssueDocumentStage,\n    isWorkBasket: isWorkBasket,\n    isAllCases: isAllCases,\n    isCheckSigningCase: isCheckSigningCase,\n    isQcFlag: isQcFlag,\n    handlers: {\n      issueDocumentsHandler: issueDocumentsHandler,\n      newRfiHandler: newRfiHandler\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PremiumProcessingPendingActionAccordion, \"9cZfZ04734qoCGIctmKX7+sX6eU=\", false, function () {\n  return [useHistory];\n});\n\n_c = PremiumProcessingPendingActionAccordion;\n\nvar _c;\n\n$RefreshReg$(_c, \"PremiumProcessingPendingActionAccordion\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/PremiumProcessingPendingActionAccordion/PremiumProcessingPendingActionAccordion.js"],"names":["React","PropTypes","useHistory","PremiumProcessingPendingActionAccordionView","config","constants","PremiumProcessingPendingActionAccordion","propTypes","taskId","string","isRequired","isValidRPSection","bool","isUnassignedStage","isWorkBasket","isAllCases","isIssueDocumentStage","isCheckSigningCase","selectedCases","array","history","issueDocumentsHandler","push","routes","premiumProcessing","case","PREMIUM_PROCESSING_TAB_ISSUE_DOCUMENTS","PREMIUM_PROCESSING_TAB_NON_BUREAU","newRfiHandler","PREMIUM_PROCESSING_TAB_RFI","caseFlagType","type","selectedCasesType","split","isQcFlag","Boolean","some","flag","QC_FLAG"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useHistory } from 'react-router';\r\n\r\n// app\r\nimport { PremiumProcessingPendingActionAccordionView } from './PremiumProcessingPendingActionAccordion.view';\r\nimport config from 'config';\r\nimport * as constants from 'consts';\r\n\r\nPremiumProcessingPendingActionAccordion.propTypes = {\r\n  taskId: PropTypes.string.isRequired,\r\n  isValidRPSection: PropTypes.bool,\r\n  isUnassignedStage: PropTypes.bool.isRequired,\r\n  isWorkBasket: PropTypes.bool.isRequired,\r\n  isAllCases: PropTypes.bool.isRequired,\r\n  isIssueDocumentStage: PropTypes.bool.isRequired,\r\n  isCheckSigningCase: PropTypes.bool.isRequired,\r\n  selectedCases: PropTypes.array,\r\n};\r\nexport default function PremiumProcessingPendingActionAccordion({\r\n  taskId,\r\n  isValidRPSection,\r\n  isWorkBasket,\r\n  isUnassignedStage,\r\n  isIssueDocumentStage,\r\n  isAllCases,\r\n  isCheckSigningCase,\r\n  selectedCases,\r\n}) {\r\n  const history = useHistory();\r\n\r\n  const issueDocumentsHandler = () => {\r\n    history.push(\r\n      `${config.routes.premiumProcessing.case}/${taskId}/${constants.PREMIUM_PROCESSING_TAB_ISSUE_DOCUMENTS}/${constants.PREMIUM_PROCESSING_TAB_NON_BUREAU}`\r\n    );\r\n  };\r\n\r\n  const newRfiHandler = () => {\r\n    if (taskId) {\r\n      history.push(`${config.routes.premiumProcessing.case}/${taskId}/${constants.PREMIUM_PROCESSING_TAB_RFI}`);\r\n    }\r\n  };\r\n\r\n  const caseFlagType = selectedCases?.[0]?.type;\r\n  const selectedCasesType = caseFlagType?.split(',');\r\n  const isQcFlag = Boolean(selectedCasesType?.some((flag) => flag === constants.QC_FLAG));\r\n\r\n  return (\r\n    <PremiumProcessingPendingActionAccordionView\r\n      taskId={taskId}\r\n      isValidRPSection={isValidRPSection}\r\n      isUnassignedStage={isUnassignedStage}\r\n      isIssueDocumentStage={isIssueDocumentStage}\r\n      isWorkBasket={isWorkBasket}\r\n      isAllCases={isAllCases}\r\n      isCheckSigningCase={isCheckSigningCase}\r\n      isQcFlag={isQcFlag}\r\n      handlers={{ issueDocumentsHandler, newRfiHandler }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}