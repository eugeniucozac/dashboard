{"ast":null,"code":"import \"core-js/modules/es.array.map\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport get from 'lodash/get'; // app\n\nimport { addLoader, authLogout, enqueueNotification, hideModal, removeLoader } from 'stores';\nimport * as utils from 'utils';\nexport var postNewEnquiry = function postNewEnquiry(_ref) {\n  var formData = _ref.formData,\n      _ref$addDocuments = _ref.addDocuments,\n      addDocuments = _ref$addDocuments === void 0 ? false : _ref$addDocuments,\n      redirectionCallback = _ref.redirectionCallback;\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/placement.actions.newEnquiry',\n      message: 'Data missing for POST request'\n    };\n    dispatch(postNewEnquiryRequest(formData));\n    dispatch(addLoader('postNewEnquiry'));\n\n    if (!formData) {\n      dispatch(postNewEnquiryFailure(defaultError));\n      dispatch(enqueueNotification('notification.submission.fail', 'error'));\n      dispatch(hideModal());\n      dispatch(removeLoader('postNewEnquiry'));\n      return;\n    } // build the data for POST\n\n\n    var body = {\n      sourceSystemId: get(getState(), 'placement.selected.sourceSystemId'),\n      departmentId: get(formData, 'department[0].id'),\n      description: get(formData, 'description'),\n      inceptionDate: get(formData, 'inceptionDate'),\n      clients: get(formData, 'clients', []).map(function (client) {\n        return {\n          id: client.id\n        };\n      }),\n      insureds: get(formData, 'insureds', []).filter(function (insured) {\n        return !Boolean(insured.__isNew__);\n      }).map(function (insured) {\n        return {\n          id: insured.id\n        };\n      }),\n      provisionalInsureds: get(formData, 'insureds', []).filter(function (insured) {\n        return Boolean(insured.__isNew__);\n      }).map(function (insured) {\n        return {\n          name: insured.id\n        };\n      })\n    };\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.edge,\n      path: 'api/placement',\n      data: body\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleData(json);\n    }).then(function (data) {\n      dispatch(postNewEnquirySuccess([data]));\n      dispatch(enqueueNotification('notification.submission.success', 'success'));\n\n      if (!addDocuments) {\n        dispatch(hideModal());\n      }\n\n      dispatch(removeLoader('postNewEnquiry'));\n\n      if (utils.generic.isFunction(redirectionCallback)) {\n        redirectionCallback(data.id);\n      }\n\n      return data;\n    })[\"catch\"](function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API post error (placement.newEnquiry)'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(postNewEnquiryFailure(err));\n      dispatch(enqueueNotification('notification.submission.fail', 'error'));\n      dispatch(hideModal());\n      dispatch(removeLoader('postNewEnquiry'));\n      return err;\n    });\n  };\n};\nexport var postNewEnquiryRequest = function postNewEnquiryRequest(formData) {\n  return {\n    type: 'PLACEMENT_NEW_ENQUIRY_POST_REQUEST',\n    payload: formData\n  };\n};\nexport var postNewEnquirySuccess = function postNewEnquirySuccess(responseData) {\n  return {\n    type: 'PLACEMENT_NEW_ENQUIRY_POST_SUCCESS',\n    payload: responseData\n  };\n};\nexport var postNewEnquiryFailure = function postNewEnquiryFailure(error) {\n  return {\n    type: 'PLACEMENT_NEW_ENQUIRY_POST_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/placement/placement.actions.newEnquiry.js"],"names":["get","addLoader","authLogout","enqueueNotification","hideModal","removeLoader","utils","postNewEnquiry","formData","addDocuments","redirectionCallback","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","message","postNewEnquiryRequest","postNewEnquiryFailure","body","sourceSystemId","departmentId","description","inceptionDate","clients","map","client","id","insureds","filter","insured","Boolean","__isNew__","provisionalInsureds","name","api","post","token","accessToken","edge","path","data","then","response","handleResponse","json","handleData","postNewEnquirySuccess","generic","isFunction","err","errorParams","handleError","handleUnauthorized","type","payload","responseData","error"],"mappings":"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","sourcesContent":["import get from 'lodash/get';\r\n\r\n// app\r\nimport { addLoader, authLogout, enqueueNotification, hideModal, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const postNewEnquiry =\r\n  ({ formData, addDocuments = false, redirectionCallback }) =>\r\n  (dispatch, getState) => {\r\n    // prettier-ignore\r\n    const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n    const defaultError = {\r\n      file: 'stores/placement.actions.newEnquiry',\r\n      message: 'Data missing for POST request',\r\n    };\r\n\r\n    dispatch(postNewEnquiryRequest(formData));\r\n    dispatch(addLoader('postNewEnquiry'));\r\n\r\n    if (!formData) {\r\n      dispatch(postNewEnquiryFailure(defaultError));\r\n      dispatch(enqueueNotification('notification.submission.fail', 'error'));\r\n      dispatch(hideModal());\r\n      dispatch(removeLoader('postNewEnquiry'));\r\n      return;\r\n    }\r\n\r\n    // build the data for POST\r\n    const body = {\r\n      sourceSystemId: get(getState(), 'placement.selected.sourceSystemId'),\r\n      departmentId: get(formData, 'department[0].id'),\r\n      description: get(formData, 'description'),\r\n      inceptionDate: get(formData, 'inceptionDate'),\r\n      clients: get(formData, 'clients', []).map((client) => ({ id: client.id })),\r\n      insureds: get(formData, 'insureds', [])\r\n        .filter((insured) => !Boolean(insured.__isNew__))\r\n        .map((insured) => ({ id: insured.id })),\r\n      provisionalInsureds: get(formData, 'insureds', [])\r\n        .filter((insured) => Boolean(insured.__isNew__))\r\n        .map((insured) => ({ name: insured.id })),\r\n    };\r\n\r\n    return utils.api\r\n      .post({\r\n        token: auth.accessToken,\r\n        endpoint: endpoint.edge,\r\n        path: 'api/placement',\r\n        data: body,\r\n      })\r\n      .then((response) => utils.api.handleResponse(response))\r\n      .then((json) => utils.api.handleData(json))\r\n      .then((data) => {\r\n        dispatch(postNewEnquirySuccess([data]));\r\n        dispatch(enqueueNotification('notification.submission.success', 'success'));\r\n        if (!addDocuments) {\r\n          dispatch(hideModal());\r\n        }\r\n        dispatch(removeLoader('postNewEnquiry'));\r\n\r\n        if (utils.generic.isFunction(redirectionCallback)) {\r\n          redirectionCallback(data.id);\r\n        }\r\n\r\n        return data;\r\n      })\r\n      .catch((err) => {\r\n        const errorParams = {\r\n          ...defaultError,\r\n          message: 'API post error (placement.newEnquiry)',\r\n        };\r\n\r\n        utils.api.handleError(err, errorParams);\r\n        utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n        dispatch(postNewEnquiryFailure(err));\r\n        dispatch(enqueueNotification('notification.submission.fail', 'error'));\r\n        dispatch(hideModal());\r\n        dispatch(removeLoader('postNewEnquiry'));\r\n        return err;\r\n      });\r\n  };\r\n\r\nexport const postNewEnquiryRequest = (formData) => {\r\n  return {\r\n    type: 'PLACEMENT_NEW_ENQUIRY_POST_REQUEST',\r\n    payload: formData,\r\n  };\r\n};\r\n\r\nexport const postNewEnquirySuccess = (responseData) => {\r\n  return {\r\n    type: 'PLACEMENT_NEW_ENQUIRY_POST_SUCCESS',\r\n    payload: responseData,\r\n  };\r\n};\r\n\r\nexport const postNewEnquiryFailure = (error) => {\r\n  return {\r\n    type: 'PLACEMENT_NEW_ENQUIRY_POST_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}