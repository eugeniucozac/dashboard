{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\forms\\\\SingleAssignClaim\\\\SingleAssignClaim.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as Yup from 'yup';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup'; // app\n\nimport { SingleAssignClaimView } from './SingleAssignClaim.view';\nimport { Loader } from 'components';\nimport { getClaimsProcessing, getComplexityTypes, getComplexityValues, singleAssignClaim, getUsersByOrg, resetClaimsAssignedToUsers, resetComplexityBasisValues, selectComplexityBasisValues, selectComplexityTypes, selectClaimsAssignedToUsers, selectClaimsProcessingPagination, selectUserOrganisation, selectComplexityValues, showModal } from 'stores';\nimport { useFormActions } from 'hooks';\nimport * as constants from 'consts';\nimport * as utils from 'utils'; // mui\n\nimport { Box } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nSingleAssignClaim.propTypes = {\n  claimsProcessingSelected: PropTypes.array.isRequired,\n  claimsType: PropTypes.string,\n  setIsDirty: PropTypes.func,\n  handleClose: PropTypes.func.isRequired\n};\nexport default function SingleAssignClaim(_ref) {\n  _s();\n\n  var _useSelector, _claims$3, _claims$4;\n\n  var claims = _ref.claimsProcessingSelected,\n      claimsType = _ref.claimsType,\n      setIsDirty = _ref.setIsDirty,\n      handleClose = _ref.handleClose;\n  var dispatch = useDispatch();\n  var userOrganisation = useSelector(selectUserOrganisation);\n  var userIsMphasis = (userOrganisation === null || userOrganisation === void 0 ? void 0 : userOrganisation.id) === constants.ORGANIZATIONS.mphasis.id;\n  var userIsArdonagh = (userOrganisation === null || userOrganisation === void 0 ? void 0 : userOrganisation.id) === constants.ORGANIZATIONS.ardonagh.id;\n  var complexitiesValues = useSelector(selectComplexityValues) || [];\n  var complexityTypes = useSelector(selectComplexityTypes) || [];\n  var complexitiesValuesType = (_useSelector = useSelector(selectComplexityBasisValues)) === null || _useSelector === void 0 ? void 0 : _useSelector.type;\n  var claimsPagination = useSelector(selectClaimsProcessingPagination);\n  var assignToUsersObj = useSelector(selectClaimsAssignedToUsers);\n  var assignToUsersType = assignToUsersObj === null || assignToUsersObj === void 0 ? void 0 : assignToUsersObj.type;\n  var assignToUsersItems = (assignToUsersObj === null || assignToUsersObj === void 0 ? void 0 : assignToUsersObj.items) || [];\n  var assignToUsersLoaded = assignToUsersObj === null || assignToUsersObj === void 0 ? void 0 : assignToUsersObj.loaded;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isAssignToDisabled = _useState2[0],\n      setIsAssignToDisabled = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isComplexityAvailable = _useState4[0],\n      setIsComplexityAvailable = _useState4[1]; // if single claim, find the assigned user\n  // if multiple claims (bulk), find the assigned user if it's the same user for all claims\n\n\n  var assignedUser = function assignedUser(users) {\n    return users.find(function (user) {\n      return user.fullName === (claims === null || claims === void 0 ? void 0 : claims[0].assignedTo);\n    }) || null;\n  }; // find the assigned complexity\n\n\n  var assignedComplexity = function assignedComplexity(complexity) {\n    return complexity.find(function (complex) {\n      var _claims$;\n\n      return complex.complextityType === (claims === null || claims === void 0 ? void 0 : (_claims$ = claims[0]) === null || _claims$ === void 0 ? void 0 : _claims$.complexity);\n    }) || null;\n  };\n\n  var assignedComplexityBasis = function assignedComplexityBasis(complexitiesValues) {\n    return (complexitiesValues === null || complexitiesValues === void 0 ? void 0 : complexitiesValues.find(function (item) {\n      var _claims$2;\n\n      return (item === null || item === void 0 ? void 0 : item.complexityRulesID) === (claims === null || claims === void 0 ? void 0 : (_claims$2 = claims[0]) === null || _claims$2 === void 0 ? void 0 : _claims$2.complexityValueID);\n    })) || null;\n  };\n\n  var fields = [{\n    name: 'complexity',\n    type: 'autocompletemui',\n    label: \"\".concat(utils.string.t('claims.processing.bulkAssign.fields.complexityType.label'), \" *\"),\n    value: assignedComplexity(complexityTypes),\n    options: (claims === null || claims === void 0 ? void 0 : (_claims$3 = claims[0]) === null || _claims$3 === void 0 ? void 0 : _claims$3.complexity) !== 'Unsure' ? complexityTypes.filter(function (item) {\n      return item.complextityType !== 'Unsure';\n    }) : complexityTypes,\n    optionKey: 'complextityType',\n    optionLabel: 'complextityType',\n    validation: Yup.object().nullable().required(utils.string.t('validation.required')),\n    callback: function callback(event, value) {\n      setValue('team', value === null || value === void 0 ? void 0 : value.organizationName);\n      setIsAssignToDisabled(userIsArdonagh && (value === null || value === void 0 ? void 0 : value.complextityType) === constants.ORGANIZATIONS.mphasis.complexity || userIsMphasis && (value === null || value === void 0 ? void 0 : value.complextityType) === constants.ORGANIZATIONS.ardonagh.complexity);\n      setIsComplexityAvailable((value === null || value === void 0 ? void 0 : value.complextityType) === constants.ORGANIZATIONS.ardonagh.complexity);\n    }\n  }, {\n    name: 'complexityBasis',\n    type: 'autocompletemui',\n    label: \"\".concat(utils.string.t('claims.processing.bulkAssign.fields.complexity.label'), \" *\"),\n    value: assignedComplexityBasis(complexitiesValues),\n    options: complexitiesValues,\n    optionKey: 'complexityRulesID',\n    optionLabel: 'complexityRulesValue',\n    validation: isComplexityAvailable && Yup.object().nullable().required(utils.string.t('validation.required'))\n  }, {\n    name: 'team',\n    type: 'text',\n    label: \"\".concat(utils.string.t('claims.processing.bulkAssign.fields.team.label'), \" *\"),\n    value: (claims === null || claims === void 0 ? void 0 : (_claims$4 = claims[0]) === null || _claims$4 === void 0 ? void 0 : _claims$4.team) || '',\n    muiComponentProps: {\n      disabled: true\n    }\n  }, {\n    name: 'assignTo',\n    type: 'autocompletemui',\n    label: \"\".concat(utils.string.t('claims.processing.bulkAssign.fields.assignTo.label'), \" *\"),\n    value: assignedUser(assignToUsersItems),\n    options: assignToUsersItems,\n    optionKey: 'id',\n    optionLabel: 'fullName',\n    validation: Yup.object().nullable().when('assignToUnassigned', {\n      is: function is(val) {\n        return val;\n      },\n      then: Yup.object().nullable(),\n      otherwise: Yup.object().nullable().required(utils.string.t('validation.required'))\n    }).test('assignTo', utils.string.t('claims.processing.bulkAssign.validation.newAssignee'), function () {\n      var _defaultValues$assign, _this$options$parent$;\n\n      return isAssignToDisabled ? true : ((_defaultValues$assign = defaultValues.assignTo) === null || _defaultValues$assign === void 0 ? void 0 : _defaultValues$assign.id) !== ((_this$options$parent$ = this.options.parent.assignTo) === null || _this$options$parent$ === void 0 ? void 0 : _this$options$parent$.id);\n    })\n  }, {\n    name: 'assignToUnassigned',\n    type: 'text',\n    label: \"\".concat(utils.string.t('claims.processing.bulkAssign.fields.assignTo.label'), \" *\"),\n    value: utils.string.t('claims.processing.bulkAssign.unassigned'),\n    muiComponentProps: {\n      disabled: true\n    }\n  }, {\n    name: 'notes',\n    type: 'textarea',\n    label: \"\".concat(utils.string.t('claims.processing.bulkAssign.fields.notes.label'), \" *\"),\n    value: '',\n    muiComponentProps: {\n      multiline: true,\n      rows: 3,\n      rowsMax: 6\n    },\n    validation: Yup.string().min(1, utils.string.t('validation.required')).max(1000, utils.string.t('validation.string.max')).required(utils.string.t('validation.required'))\n  }];\n  var defaultValues = utils.form.getInitialValues(fields);\n  var validationSchema = utils.form.getValidationSchema(fields);\n\n  var _useForm = useForm(_objectSpread({\n    defaultValues: defaultValues\n  }, validationSchema && {\n    resolver: yupResolver(validationSchema)\n  })),\n      control = _useForm.control,\n      watch = _useForm.watch,\n      errors = _useForm.errors,\n      setValue = _useForm.setValue,\n      handleSubmit = _useForm.handleSubmit,\n      formState = _useForm.formState;\n\n  var formValues = watch();\n  var formIsDirty = formState.isDirty;\n  var actions = [{\n    name: 'cancel',\n    label: utils.string.t('app.cancel'),\n    handler: function handler() {\n      if (formIsDirty) {\n        dispatch(showModal({\n          component: 'CONFIRM',\n          props: {\n            title: utils.string.t('navigation.form.subtitle'),\n            hint: utils.string.t('navigation.form.title'),\n            fullWidth: true,\n            maxWidth: 'xs',\n            componentProps: {\n              cancelLabel: utils.string.t('app.no'),\n              confirmLabel: utils.string.t('app.yes'),\n              submitHandler: function submitHandler() {\n                handleClose();\n              }\n            }\n          }\n        }));\n      } else {\n        handleClose();\n      }\n    }\n  }, {\n    name: 'submit',\n    label: utils.string.t('app.assign'),\n    handler: function handler(values) {\n      onSubmit(values);\n    }\n  }];\n\n  var _useFormActions = useFormActions(actions),\n      cancel = _useFormActions.cancel,\n      submit = _useFormActions.submit;\n\n  useEffect(function () {\n    var _claims$5, _claims$6, _claims$7;\n\n    if (assignToUsersType !== 'bulkAssignClaims') {\n      dispatch(resetClaimsAssignedToUsers());\n      dispatch(getUsersByOrg(userOrganisation.name, claims, 'bulkAssignClaims', false));\n      dispatch(getComplexityTypes());\n    } // reset previously loaded partial list of complexity values\n    // then fetch all the values using \"size\" 1000 because we want all the options\n\n\n    if (complexitiesValuesType !== 'bulkAssignClaims' || complexitiesValuesType === 'bulkAssignClaims' && utils.generic.isInvalidOrEmptyArray(complexitiesValues)) {\n      dispatch(resetComplexityBasisValues());\n      dispatch(getComplexityValues(claims === null || claims === void 0 ? void 0 : claims[0].divisionID, claims === null || claims === void 0 ? void 0 : claims[0].sourceId, false));\n    }\n\n    setIsAssignToDisabled(userIsArdonagh && (claims === null || claims === void 0 ? void 0 : (_claims$5 = claims[0]) === null || _claims$5 === void 0 ? void 0 : _claims$5.team) === constants.ORGANIZATIONS.mphasis.label || userIsMphasis && (claims === null || claims === void 0 ? void 0 : (_claims$6 = claims[0]) === null || _claims$6 === void 0 ? void 0 : _claims$6.team) === constants.ORGANIZATIONS.ardonagh.label);\n    setIsComplexityAvailable((claims === null || claims === void 0 ? void 0 : (_claims$7 = claims[0]) === null || _claims$7 === void 0 ? void 0 : _claims$7.complexity) === constants.ORGANIZATIONS.ardonagh.complexity);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    setIsDirty(formIsDirty);\n  }, [formValues]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    setValue('assignTo', assignedUser(assignToUsersItems));\n    setValue('complexity', assignedComplexity(complexityTypes));\n    setValue('complexityBasis', assignedComplexityBasis(complexitiesValues));\n  }, [assignToUsersItems, complexityTypes, complexitiesValues]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var isDataReady = function isDataReady() {\n    return assignToUsersLoaded && utils.generic.isValidArray(assignToUsersItems);\n  };\n\n  var onSubmit = function onSubmit(values) {\n    dispatch(singleAssignClaim(claims, values)).then(function () {\n      // fetch the claims list again to remove the re-assigned claims\n      dispatch(getClaimsProcessing({\n        requestType: constants.CLAIM_PROCESSING_REQ_TYPES.search,\n        claimsType: claimsType,\n        page: claimsPagination === null || claimsPagination === void 0 ? void 0 : claimsPagination.page\n      }));\n    });\n  }; // data is still loading...\n\n\n  if (!isDataReady()) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      height: \"300px\",\n      children: /*#__PURE__*/_jsxDEV(Loader, {\n        visible: true,\n        absolute: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this);\n  } // data is ready\n\n\n  return /*#__PURE__*/_jsxDEV(SingleAssignClaimView, {\n    fields: fields,\n    buttons: {\n      cancel: cancel,\n      submit: submit\n    },\n    formProps: {\n      control: control,\n      errors: errors,\n      handleSubmit: handleSubmit,\n      formState: formState\n    },\n    isAssignToDisabled: isAssignToDisabled,\n    isComplexityAvailable: isComplexityAvailable\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 264,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SingleAssignClaim, \"XFq3HiZAuJiWSys5i4HvpGtxQYg=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useForm, useFormActions];\n});\n\n_c = SingleAssignClaim;\n\nvar _c;\n\n$RefreshReg$(_c, \"SingleAssignClaim\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/forms/SingleAssignClaim/SingleAssignClaim.js"],"names":["React","useEffect","useState","useDispatch","useSelector","PropTypes","Yup","useForm","yupResolver","SingleAssignClaimView","Loader","getClaimsProcessing","getComplexityTypes","getComplexityValues","singleAssignClaim","getUsersByOrg","resetClaimsAssignedToUsers","resetComplexityBasisValues","selectComplexityBasisValues","selectComplexityTypes","selectClaimsAssignedToUsers","selectClaimsProcessingPagination","selectUserOrganisation","selectComplexityValues","showModal","useFormActions","constants","utils","Box","SingleAssignClaim","propTypes","claimsProcessingSelected","array","isRequired","claimsType","string","setIsDirty","func","handleClose","claims","dispatch","userOrganisation","userIsMphasis","id","ORGANIZATIONS","mphasis","userIsArdonagh","ardonagh","complexitiesValues","complexityTypes","complexitiesValuesType","type","claimsPagination","assignToUsersObj","assignToUsersType","assignToUsersItems","items","assignToUsersLoaded","loaded","isAssignToDisabled","setIsAssignToDisabled","isComplexityAvailable","setIsComplexityAvailable","assignedUser","users","find","user","fullName","assignedTo","assignedComplexity","complexity","complex","complextityType","assignedComplexityBasis","item","complexityRulesID","complexityValueID","fields","name","label","t","value","options","filter","optionKey","optionLabel","validation","object","nullable","required","callback","event","setValue","organizationName","team","muiComponentProps","disabled","when","is","val","then","otherwise","test","defaultValues","assignTo","parent","multiline","rows","rowsMax","min","max","form","getInitialValues","validationSchema","getValidationSchema","resolver","control","watch","errors","handleSubmit","formState","formValues","formIsDirty","isDirty","actions","handler","component","props","title","hint","fullWidth","maxWidth","componentProps","cancelLabel","confirmLabel","submitHandler","values","onSubmit","cancel","submit","generic","isInvalidOrEmptyArray","divisionID","sourceId","isDataReady","isValidArray","requestType","CLAIM_PROCESSING_REQ_TYPES","search","page"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport * as Yup from 'yup';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n\r\n// app\r\nimport { SingleAssignClaimView } from './SingleAssignClaim.view';\r\nimport { Loader } from 'components';\r\nimport {\r\n  getClaimsProcessing,\r\n  getComplexityTypes,\r\n  getComplexityValues,\r\n  singleAssignClaim,\r\n  getUsersByOrg,\r\n  resetClaimsAssignedToUsers,\r\n  resetComplexityBasisValues,\r\n  selectComplexityBasisValues,\r\n  selectComplexityTypes,\r\n  selectClaimsAssignedToUsers,\r\n  selectClaimsProcessingPagination,\r\n  selectUserOrganisation,\r\n  selectComplexityValues,\r\n  showModal,\r\n} from 'stores';\r\nimport { useFormActions } from 'hooks';\r\nimport * as constants from 'consts';\r\nimport * as utils from 'utils';\r\n\r\n// mui\r\nimport { Box } from '@material-ui/core';\r\n\r\nSingleAssignClaim.propTypes = {\r\n  claimsProcessingSelected: PropTypes.array.isRequired,\r\n  claimsType: PropTypes.string,\r\n  setIsDirty: PropTypes.func,\r\n  handleClose: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default function SingleAssignClaim({ claimsProcessingSelected: claims, claimsType, setIsDirty, handleClose }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const userOrganisation = useSelector(selectUserOrganisation);\r\n  const userIsMphasis = userOrganisation?.id === constants.ORGANIZATIONS.mphasis.id;\r\n  const userIsArdonagh = userOrganisation?.id === constants.ORGANIZATIONS.ardonagh.id;\r\n  const complexitiesValues = useSelector(selectComplexityValues) || [];\r\n  const complexityTypes = useSelector(selectComplexityTypes) || [];\r\n  const complexitiesValuesType = useSelector(selectComplexityBasisValues)?.type;\r\n  const claimsPagination = useSelector(selectClaimsProcessingPagination);\r\n  const assignToUsersObj = useSelector(selectClaimsAssignedToUsers);\r\n  const assignToUsersType = assignToUsersObj?.type;\r\n  const assignToUsersItems = assignToUsersObj?.items || [];\r\n  const assignToUsersLoaded = assignToUsersObj?.loaded;\r\n  const [isAssignToDisabled, setIsAssignToDisabled] = useState(false);\r\n  const [isComplexityAvailable, setIsComplexityAvailable] = useState(false);\r\n\r\n  // if single claim, find the assigned user\r\n  // if multiple claims (bulk), find the assigned user if it's the same user for all claims\r\n  const assignedUser = (users) => {\r\n    return users.find((user) => user.fullName === claims?.[0].assignedTo) || null;\r\n  };\r\n\r\n  // find the assigned complexity\r\n  const assignedComplexity = (complexity) => {\r\n    return complexity.find((complex) => complex.complextityType === claims?.[0]?.complexity) || null;\r\n  };\r\n\r\n  const assignedComplexityBasis = (complexitiesValues) =>\r\n    complexitiesValues?.find((item) => item?.complexityRulesID === claims?.[0]?.complexityValueID) || null;\r\n\r\n  const fields = [\r\n    {\r\n      name: 'complexity',\r\n      type: 'autocompletemui',\r\n      label: `${utils.string.t('claims.processing.bulkAssign.fields.complexityType.label')} *`,\r\n      value: assignedComplexity(complexityTypes),\r\n      options: claims?.[0]?.complexity !== 'Unsure' ? complexityTypes.filter((item) => item.complextityType !== 'Unsure') : complexityTypes,\r\n      optionKey: 'complextityType',\r\n      optionLabel: 'complextityType',\r\n      validation: Yup.object().nullable().required(utils.string.t('validation.required')),\r\n      callback: (event, value) => {\r\n        setValue('team', value?.organizationName);\r\n        setIsAssignToDisabled(\r\n          (userIsArdonagh && value?.complextityType === constants.ORGANIZATIONS.mphasis.complexity) ||\r\n            (userIsMphasis && value?.complextityType === constants.ORGANIZATIONS.ardonagh.complexity)\r\n        );\r\n        setIsComplexityAvailable(value?.complextityType === constants.ORGANIZATIONS.ardonagh.complexity);\r\n      },\r\n    },\r\n    {\r\n      name: 'complexityBasis',\r\n      type: 'autocompletemui',\r\n      label: `${utils.string.t('claims.processing.bulkAssign.fields.complexity.label')} *`,\r\n      value: assignedComplexityBasis(complexitiesValues),\r\n      options: complexitiesValues,\r\n      optionKey: 'complexityRulesID',\r\n      optionLabel: 'complexityRulesValue',\r\n      validation: isComplexityAvailable && Yup.object().nullable().required(utils.string.t('validation.required')),\r\n    },\r\n    {\r\n      name: 'team',\r\n      type: 'text',\r\n      label: `${utils.string.t('claims.processing.bulkAssign.fields.team.label')} *`,\r\n      value: claims?.[0]?.team || '',\r\n      muiComponentProps: {\r\n        disabled: true,\r\n      },\r\n    },\r\n    {\r\n      name: 'assignTo',\r\n      type: 'autocompletemui',\r\n      label: `${utils.string.t('claims.processing.bulkAssign.fields.assignTo.label')} *`,\r\n      value: assignedUser(assignToUsersItems),\r\n      options: assignToUsersItems,\r\n      optionKey: 'id',\r\n      optionLabel: 'fullName',\r\n      validation: Yup.object()\r\n        .nullable()\r\n        .when('assignToUnassigned', {\r\n          is: (val) => val,\r\n          then: Yup.object().nullable(),\r\n          otherwise: Yup.object().nullable().required(utils.string.t('validation.required')),\r\n        })\r\n        .test('assignTo', utils.string.t('claims.processing.bulkAssign.validation.newAssignee'), function () {\r\n          return isAssignToDisabled ? true : defaultValues.assignTo?.id !== this.options.parent.assignTo?.id;\r\n        }),\r\n    },\r\n    {\r\n      name: 'assignToUnassigned',\r\n      type: 'text',\r\n      label: `${utils.string.t('claims.processing.bulkAssign.fields.assignTo.label')} *`,\r\n      value: utils.string.t('claims.processing.bulkAssign.unassigned'),\r\n      muiComponentProps: {\r\n        disabled: true,\r\n      },\r\n    },\r\n\r\n    {\r\n      name: 'notes',\r\n      type: 'textarea',\r\n      label: `${utils.string.t('claims.processing.bulkAssign.fields.notes.label')} *`,\r\n      value: '',\r\n      muiComponentProps: {\r\n        multiline: true,\r\n        rows: 3,\r\n        rowsMax: 6,\r\n      },\r\n      validation: Yup.string()\r\n        .min(1, utils.string.t('validation.required'))\r\n        .max(1000, utils.string.t('validation.string.max'))\r\n        .required(utils.string.t('validation.required')),\r\n    },\r\n  ];\r\n\r\n  const defaultValues = utils.form.getInitialValues(fields);\r\n  const validationSchema = utils.form.getValidationSchema(fields);\r\n\r\n  const { control, watch, errors, setValue, handleSubmit, formState } = useForm({\r\n    defaultValues,\r\n    ...(validationSchema && { resolver: yupResolver(validationSchema) }),\r\n  });\r\n\r\n  const formValues = watch();\r\n  const formIsDirty = formState.isDirty;\r\n\r\n  const actions = [\r\n    {\r\n      name: 'cancel',\r\n      label: utils.string.t('app.cancel'),\r\n      handler: () => {\r\n        if (formIsDirty) {\r\n          dispatch(\r\n            showModal({\r\n              component: 'CONFIRM',\r\n              props: {\r\n                title: utils.string.t('navigation.form.subtitle'),\r\n                hint: utils.string.t('navigation.form.title'),\r\n                fullWidth: true,\r\n                maxWidth: 'xs',\r\n                componentProps: {\r\n                  cancelLabel: utils.string.t('app.no'),\r\n                  confirmLabel: utils.string.t('app.yes'),\r\n                  submitHandler: () => {\r\n                    handleClose();\r\n                  },\r\n                },\r\n              },\r\n            })\r\n          );\r\n        } else {\r\n          handleClose();\r\n        }\r\n      },\r\n    },\r\n    {\r\n      name: 'submit',\r\n      label: utils.string.t('app.assign'),\r\n      handler: (values) => {\r\n        onSubmit(values);\r\n      },\r\n    },\r\n  ];\r\n\r\n  const { cancel, submit } = useFormActions(actions);\r\n\r\n  useEffect(() => {\r\n    if (assignToUsersType !== 'bulkAssignClaims') {\r\n      dispatch(resetClaimsAssignedToUsers());\r\n\r\n      dispatch(getUsersByOrg(userOrganisation.name, claims, 'bulkAssignClaims', false));\r\n      dispatch(getComplexityTypes());\r\n    }\r\n\r\n    // reset previously loaded partial list of complexity values\r\n    // then fetch all the values using \"size\" 1000 because we want all the options\r\n    if (\r\n      complexitiesValuesType !== 'bulkAssignClaims' ||\r\n      (complexitiesValuesType === 'bulkAssignClaims' && utils.generic.isInvalidOrEmptyArray(complexitiesValues))\r\n    ) {\r\n      dispatch(resetComplexityBasisValues());\r\n\r\n      dispatch(getComplexityValues(claims?.[0].divisionID, claims?.[0].sourceId, false));\r\n    }\r\n    setIsAssignToDisabled(\r\n      (userIsArdonagh && claims?.[0]?.team === constants.ORGANIZATIONS.mphasis.label) ||\r\n        (userIsMphasis && claims?.[0]?.team === constants.ORGANIZATIONS.ardonagh.label)\r\n    );\r\n    setIsComplexityAvailable(claims?.[0]?.complexity === constants.ORGANIZATIONS.ardonagh.complexity);\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    setIsDirty(formIsDirty);\r\n  }, [formValues]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    setValue('assignTo', assignedUser(assignToUsersItems));\r\n    setValue('complexity', assignedComplexity(complexityTypes));\r\n    setValue('complexityBasis', assignedComplexityBasis(complexitiesValues));\r\n  }, [assignToUsersItems, complexityTypes, complexitiesValues]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const isDataReady = () => {\r\n    return assignToUsersLoaded && utils.generic.isValidArray(assignToUsersItems);\r\n  };\r\n\r\n  const onSubmit = (values) => {\r\n    dispatch(singleAssignClaim(claims, values)).then(() => {\r\n      // fetch the claims list again to remove the re-assigned claims\r\n      dispatch(getClaimsProcessing({ requestType: constants.CLAIM_PROCESSING_REQ_TYPES.search, claimsType, page: claimsPagination?.page }));\r\n    });\r\n  };\r\n\r\n  // data is still loading...\r\n  if (!isDataReady()) {\r\n    return (\r\n      <Box height=\"300px\">\r\n        <Loader visible absolute />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  // data is ready\r\n  return (\r\n    <SingleAssignClaimView\r\n      fields={fields}\r\n      buttons={{ cancel, submit }}\r\n      formProps={{ control, errors, handleSubmit, formState }}\r\n      isAssignToDisabled={isAssignToDisabled}\r\n      isComplexityAvailable={isComplexityAvailable}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}