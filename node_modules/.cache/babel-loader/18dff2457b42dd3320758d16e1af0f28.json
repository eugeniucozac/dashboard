{"ast":null,"code":"import \"core-js/modules/es.promise.finally\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n// app\nimport { hideModal, removeLoader, addLoader, authLogout, enqueueNotification, transformOpeningMemoInPUT } from 'stores';\nimport * as utils from 'utils';\nexport var patchOpeningMemo = function patchOpeningMemo(changes, openingMemoId) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/openingMemo.actions.patch',\n      message: 'Data missing for PATCH request'\n    };\n    dispatch(patchOpeningMemoRequest(changes));\n    dispatch(addLoader('patchOpeningMemo'));\n\n    if (!changes || !openingMemoId) {\n      dispatch(patchOpeningMemoFailure(defaultError));\n      dispatch(enqueueNotification('notification.openingMemo.editFail', 'error'));\n      dispatch(hideModal());\n      dispatch(removeLoader('patchOpeningMemo'));\n      return;\n    }\n\n    return utils.api.patch({\n      token: auth.accessToken,\n      endpoint: endpoint.edge,\n      path: \"api/openingMemo/\".concat(openingMemoId),\n      data: changes\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleData(json);\n    }).then(function (data) {\n      var transformedPayload = transformOpeningMemoInPUT(data);\n      dispatch(patchOpeningMemoSuccess(transformedPayload));\n      dispatch(enqueueNotification('notification.openingMemo.editSuccess', 'success'));\n    })[\"catch\"](function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API patch error (openingMemo)'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(patchOpeningMemoFailure(err));\n      dispatch(enqueueNotification('notification.openingMemo.editFail', 'error'));\n      return err;\n    })[\"finally\"](function () {\n      dispatch(hideModal());\n      dispatch(removeLoader('patchOpeningMemo'));\n    });\n  };\n};\nexport var patchOpeningMemoRequest = function patchOpeningMemoRequest(payload) {\n  return {\n    type: 'OPENING_MEMO_PATCH_REQUEST',\n    payload: payload\n  };\n};\nexport var patchOpeningMemoSuccess = function patchOpeningMemoSuccess(payload) {\n  return {\n    type: 'OPENING_MEMO_PATCH_SUCCESS',\n    payload: payload\n  };\n};\nexport var patchOpeningMemoFailure = function patchOpeningMemoFailure(error) {\n  return {\n    type: 'OPENING_MEMO_PATCH_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/openingMemo/openingMemo.actions.patch.js"],"names":["hideModal","removeLoader","addLoader","authLogout","enqueueNotification","transformOpeningMemoInPUT","utils","patchOpeningMemo","changes","openingMemoId","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","message","patchOpeningMemoRequest","patchOpeningMemoFailure","api","patch","token","accessToken","edge","path","data","then","response","handleResponse","json","handleData","transformedPayload","patchOpeningMemoSuccess","err","errorParams","handleError","handleUnauthorized","payload","type","error"],"mappings":"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","sourcesContent":["// app\r\nimport { hideModal, removeLoader, addLoader, authLogout, enqueueNotification, transformOpeningMemoInPUT } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const patchOpeningMemo = (changes, openingMemoId) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/openingMemo.actions.patch',\r\n    message: 'Data missing for PATCH request',\r\n  };\r\n\r\n  dispatch(patchOpeningMemoRequest(changes));\r\n  dispatch(addLoader('patchOpeningMemo'));\r\n\r\n  if (!changes || !openingMemoId) {\r\n    dispatch(patchOpeningMemoFailure(defaultError));\r\n    dispatch(enqueueNotification('notification.openingMemo.editFail', 'error'));\r\n    dispatch(hideModal());\r\n    dispatch(removeLoader('patchOpeningMemo'));\r\n    return;\r\n  }\r\n\r\n  return utils.api\r\n    .patch({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.edge,\r\n      path: `api/openingMemo/${openingMemoId}`,\r\n      data: changes,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleData(json))\r\n    .then((data) => {\r\n      const transformedPayload = transformOpeningMemoInPUT(data);\r\n      dispatch(patchOpeningMemoSuccess(transformedPayload));\r\n      dispatch(enqueueNotification('notification.openingMemo.editSuccess', 'success'));\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        ...defaultError,\r\n        message: 'API patch error (openingMemo)',\r\n      };\r\n\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(patchOpeningMemoFailure(err));\r\n      dispatch(enqueueNotification('notification.openingMemo.editFail', 'error'));\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(hideModal());\r\n      dispatch(removeLoader('patchOpeningMemo'));\r\n    });\r\n};\r\n\r\nexport const patchOpeningMemoRequest = (payload) => {\r\n  return {\r\n    type: 'OPENING_MEMO_PATCH_REQUEST',\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const patchOpeningMemoSuccess = (payload) => {\r\n  return {\r\n    type: 'OPENING_MEMO_PATCH_SUCCESS',\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const patchOpeningMemoFailure = (error) => {\r\n  return {\r\n    type: 'OPENING_MEMO_PATCH_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}