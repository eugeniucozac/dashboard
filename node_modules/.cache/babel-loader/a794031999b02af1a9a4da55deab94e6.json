{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\components\\\\FormMultiSelect\\\\FormMultiSelect.view.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames'; // app\n\nimport styles from './FormMultiSelect.styles'; // mui\n\nimport { Chip } from 'components';\nimport { makeStyles, Box, Checkbox, TextField } from '@material-ui/core';\nimport { Autocomplete } from '@material-ui/lab';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nFormMultiSelectView.propTypes = {\n  label: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  tagType: PropTypes.string,\n  selectedOptions: PropTypes.array,\n  options: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    label: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired\n  })),\n  onSelectOption: PropTypes.func,\n  nestedClasses: PropTypes.object,\n  color: PropTypes.string\n};\nFormMultiSelectView.defaultProps = {\n  color: 'primary',\n  tagType: 'primary'\n};\nexport function FormMultiSelectView(_ref) {\n  var _this = this;\n\n  var label = _ref.label,\n      placeholder = _ref.placeholder,\n      tagType = _ref.tagType,\n      selectedOptions = _ref.selectedOptions,\n      options = _ref.options,\n      setSelectOption = _ref.setSelectOption,\n      nestedClasses = _ref.nestedClasses,\n      color = _ref.color;\n  var classes = makeStyles(styles, {\n    name: 'FormMultiSelect'\n  })();\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: nestedClasses.wrapper,\n    children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n      value: selectedOptions,\n      multiple: true,\n      classes: {\n        option: classes.option,\n        inputFocused: classes.inputFocused,\n        inputRoot: classes.inputRoot,\n        root: classnames(classes.actionsText)\n      },\n      onChange: function onChange(event, newValue) {\n        setSelectOption(_toConsumableArray(newValue));\n      },\n      options: options,\n      disableCloseOnSelect: true,\n      getOptionLabel: function getOptionLabel(option) {\n        return option.label;\n      },\n      getOptionSelected: function getOptionSelected(option, value) {\n        return option.id === value.id;\n      },\n      renderTags: function renderTags(value, getTagProps) {\n        return tagType === 'primary' ? value.map(function (option, index) {\n          return /*#__PURE__*/_jsxDEV(Chip, _objectSpread(_objectSpread({\n            label: option.label\n          }, getTagProps({\n            index: index\n          })), {}, {\n            nestedClasses: {\n              root: classes.issueTypeChip\n            }\n          }), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }, _this);\n        }) : /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [value.length, \" Selected\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, _this);\n      },\n      renderOption: function renderOption(option, _ref2) {\n        var selected = _ref2.selected;\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n            color: color,\n            className: classes.checkbox,\n            checked: selected\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, _this), option.label]\n        }, void 0, true);\n      },\n      renderInput: function renderInput(params) {\n        return /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n          variant: \"outlined\",\n          label: label,\n          placeholder: !params.InputProps.startAdornment ? placeholder : undefined\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, _this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_c = FormMultiSelectView;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormMultiSelectView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/FormMultiSelect/FormMultiSelect.view.js"],"names":["React","PropTypes","classnames","styles","Chip","makeStyles","Box","Checkbox","TextField","Autocomplete","FormMultiSelectView","propTypes","label","string","isRequired","placeholder","tagType","selectedOptions","array","options","arrayOf","shape","id","number","value","onSelectOption","func","nestedClasses","object","color","defaultProps","setSelectOption","classes","name","wrapper","option","inputFocused","inputRoot","root","actionsText","event","newValue","getTagProps","map","index","issueTypeChip","length","selected","checkbox","params","InputProps","startAdornment","undefined"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames';\r\n\r\n// app\r\nimport styles from './FormMultiSelect.styles';\r\n\r\n// mui\r\nimport { Chip } from 'components';\r\nimport { makeStyles, Box, Checkbox, TextField } from '@material-ui/core';\r\nimport { Autocomplete } from '@material-ui/lab';\r\n\r\nFormMultiSelectView.propTypes = {\r\n  label: PropTypes.string.isRequired,\r\n  placeholder: PropTypes.string.isRequired,\r\n  tagType: PropTypes.string,\r\n  selectedOptions: PropTypes.array,\r\n  options: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      label: PropTypes.string.isRequired,\r\n      value: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n  onSelectOption: PropTypes.func,\r\n  nestedClasses: PropTypes.object,\r\n  color: PropTypes.string,\r\n};\r\n\r\nFormMultiSelectView.defaultProps = {\r\n  color: 'primary',\r\n  tagType: 'primary',\r\n};\r\n\r\nexport function FormMultiSelectView({ label, placeholder, tagType, selectedOptions, options, setSelectOption, nestedClasses, color }) {\r\n  const classes = makeStyles(styles, { name: 'FormMultiSelect' })();\r\n\r\n  return (\r\n    <Box className={nestedClasses.wrapper}>\r\n      <Autocomplete\r\n        value={selectedOptions}\r\n        multiple\r\n        classes={{\r\n          option: classes.option,\r\n          inputFocused: classes.inputFocused,\r\n          inputRoot: classes.inputRoot,\r\n          root: classnames(classes.actionsText),\r\n        }}\r\n        onChange={(event, newValue) => {\r\n          setSelectOption([...newValue]);\r\n        }}\r\n        options={options}\r\n        disableCloseOnSelect\r\n        getOptionLabel={(option) => option.label}\r\n        getOptionSelected={(option, value) => option.id === value.id}\r\n        renderTags={(value, getTagProps) =>\r\n          tagType === 'primary' ? (\r\n            value.map((option, index) => (\r\n              <Chip label={option.label} {...getTagProps({ index })} nestedClasses={{ root: classes.issueTypeChip }} />\r\n            ))\r\n          ) : (\r\n            <span>{value.length} Selected</span>\r\n          )\r\n        }\r\n        renderOption={(option, { selected }) => (\r\n          <>\r\n            <Checkbox color={color} className={classes.checkbox} checked={selected} />\r\n            {option.label}\r\n          </>\r\n        )}\r\n        renderInput={(params) => (\r\n          <TextField\r\n            {...params}\r\n            variant=\"outlined\"\r\n            label={label}\r\n            placeholder={!params.InputProps.startAdornment ? placeholder : undefined}\r\n          />\r\n        )}\r\n      />\r\n    </Box>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}