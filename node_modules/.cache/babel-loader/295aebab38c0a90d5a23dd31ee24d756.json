{"ast":null,"code":"import \"core-js/modules/es.array.sort\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ClaimRefTasksTable\\\\ClaimRefTasksTable.view.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get'; // app\n\nimport styles from './ClaimRefTasksTable.styles';\nimport { Empty, Overflow, TableHead, Pagination } from 'components';\nimport { ClaimRefTasksTableRow } from 'modules';\nimport { ReactComponent as IconSearchFile } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/svg/line-icon-search-file.svg\";\nimport { useSort } from 'hooks';\nimport * as utils from 'utils';\nimport { TASK_TAB_COMPLETED_STATUS, TASK_TAB_INPROGRESS_STATUS, SANCTIONS_CHECK_STATUSES } from 'consts';\nimport config from 'config'; // mui\n\nimport { makeStyles, Table, TableBody, Box } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nClaimRefTasksTableView.propTypes = {\n  taskItems: PropTypes.array.isRequired,\n  cols: PropTypes.array.isRequired,\n  columnProps: PropTypes.func.isRequired,\n  sort: PropTypes.object.isRequired,\n  handlers: PropTypes.shape({\n    pagination: PropTypes.shape({\n      obj: PropTypes.object.isRequired,\n      handlers: PropTypes.shape({\n        handleChangePage: PropTypes.func.isRequired,\n        handleChangeRowsPerPage: PropTypes.func.isRequired\n      }).isRequired\n    }).isRequired,\n    handleSort: PropTypes.func.isRequired,\n    selectTask: PropTypes.func.isRequired\n  })\n};\nexport function ClaimRefTasksTableView(_ref) {\n  _s();\n\n  var _this = this;\n\n  var taskItems = _ref.taskItems,\n      colsArr = _ref.cols,\n      columnProps = _ref.columnProps,\n      sortObj = _ref.sort,\n      handlers = _ref.handlers;\n  var classes = makeStyles(styles, {\n    name: 'ClaimRefTasksTable'\n  })();\n\n  var _useSort = useSort(colsArr, sortObj, handlers.handleSort),\n      cols = _useSort.cols,\n      sort = _useSort.sort;\n\n  var hasTasks = utils.generic.isValidArray(taskItems, true);\n\n  var getStatus = function getStatus(task) {\n    if (task === null || task === void 0 ? void 0 : task.status) {\n      var targetDate = new Date(task.targetDueDate).getTime();\n      var createdDate = new Date(task.createdOn).getTime();\n      var dateNow = new Date().getTime();\n      var targetDDMMYY = utils.string.t('format.date', {\n        value: {\n          date: task === null || task === void 0 ? void 0 : task.targetDueDate,\n          format: config.ui.format.date.slashNumeric\n        }\n      });\n      var dateNowDDMMYY = utils.string.t('format.date', {\n        value: {\n          date: new Date(),\n          format: config.ui.format.date.slashNumeric\n        }\n      });\n\n      if ((task === null || task === void 0 ? void 0 : task.approvalStatus) === SANCTIONS_CHECK_STATUSES.rejected) {\n        return {\n          type: 'error'\n        };\n      } else if (targetDate > createdDate && task.status === TASK_TAB_COMPLETED_STATUS) return {\n        type: 'success'\n      };else if (targetDate >= createdDate && targetDate > dateNow && targetDate !== dateNow && targetDDMMYY !== dateNowDDMMYY && task.status === TASK_TAB_INPROGRESS_STATUS) return {\n        type: 'success'\n      };else if (targetDate === dateNow || targetDDMMYY === dateNowDDMMYY) return {\n        type: 'alert'\n      };else if (targetDate <= dateNow && task.status === TASK_TAB_INPROGRESS_STATUS) {\n        return {\n          type: 'error',\n          dateAlert: true\n        };\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    \"data-testid\": \"tasks-tab\",\n    children: [/*#__PURE__*/_jsxDEV(Overflow, {\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        size: \"small\",\n        \"data-testid\": \"tasks-table\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          columns: cols,\n          sorting: sort,\n          nestedClasses: {\n            tableHead: classes.tableHead\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: hasTasks && taskItems.map(function (task) {\n            return /*#__PURE__*/_jsxDEV(ClaimRefTasksTableRow, {\n              task: task,\n              columnProps: columnProps,\n              getStatus: getStatus,\n              selectTask: handlers.selectTask\n            }, task.taskId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 19\n            }, _this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), !hasTasks && /*#__PURE__*/_jsxDEV(Empty, {\n      title: utils.string.t('claims.noMatchFound'),\n      icon: /*#__PURE__*/_jsxDEV(IconSearchFile, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 80\n      }, this),\n      padding: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 21\n    }, this), hasTasks && /*#__PURE__*/_jsxDEV(Pagination, {\n      page: get(handlers.pagination, 'obj.page'),\n      count: get(handlers.pagination, 'obj.rowsTotal'),\n      rowsPerPage: get(handlers.pagination, 'obj.rowsPerPage'),\n      onChangePage: get(handlers.pagination, 'handlers.handleChangePage'),\n      onChangeRowsPerPage: get(handlers.pagination, 'handlers.handleChangeRowsPerPage')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ClaimRefTasksTableView, \"SQefsCp2xDkS0XQZxfxwHsN4W1o=\", false, function () {\n  return [useSort];\n});\n\n_c = ClaimRefTasksTableView;\nClaimRefTasksTableView.displayName = \"ClaimRefTasksTableView\";\nClaimRefTasksTableView.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"ClaimRefTasksTableView\",\n  \"props\": {\n    \"taskItems\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"cols\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"columnProps\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"sort\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"handlers\": {\n      \"type\": {\n        \"name\": \"shape\",\n        \"value\": {\n          \"pagination\": {\n            \"name\": \"shape\",\n            \"value\": {\n              \"obj\": {\n                \"name\": \"object\",\n                \"required\": true\n              },\n              \"handlers\": {\n                \"name\": \"shape\",\n                \"value\": {\n                  \"handleChangePage\": {\n                    \"name\": \"func\",\n                    \"required\": true\n                  },\n                  \"handleChangeRowsPerPage\": {\n                    \"name\": \"func\",\n                    \"required\": true\n                  }\n                },\n                \"required\": true\n              }\n            },\n            \"required\": true\n          },\n          \"handleSort\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"selectTask\": {\n            \"name\": \"func\",\n            \"required\": true\n          }\n        }\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\modules\\\\ClaimRefTasksTable\\\\ClaimRefTasksTable.view.js\"] = {\n    name: \"ClaimRefTasksTableView\",\n    docgenInfo: ClaimRefTasksTableView.__docgenInfo,\n    path: \"src\\\\modules\\\\ClaimRefTasksTable\\\\ClaimRefTasksTable.view.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimRefTasksTableView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ClaimRefTasksTable/ClaimRefTasksTable.view.js"],"names":["React","PropTypes","get","styles","Empty","Overflow","TableHead","Pagination","ClaimRefTasksTableRow","useSort","utils","TASK_TAB_COMPLETED_STATUS","TASK_TAB_INPROGRESS_STATUS","SANCTIONS_CHECK_STATUSES","config","makeStyles","Table","TableBody","Box","ClaimRefTasksTableView","propTypes","taskItems","array","isRequired","cols","columnProps","func","sort","object","handlers","shape","pagination","obj","handleChangePage","handleChangeRowsPerPage","handleSort","selectTask","colsArr","sortObj","classes","name","hasTasks","generic","isValidArray","getStatus","task","status","targetDate","Date","targetDueDate","getTime","createdDate","createdOn","dateNow","targetDDMMYY","string","t","value","date","format","ui","slashNumeric","dateNowDDMMYY","approvalStatus","rejected","type","dateAlert","tableHead","map","taskId"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport get from 'lodash/get';\r\n\r\n// app\r\nimport styles from './ClaimRefTasksTable.styles';\r\nimport { Empty, Overflow, TableHead, Pagination } from 'components';\r\nimport { ClaimRefTasksTableRow } from 'modules';\r\nimport { ReactComponent as IconSearchFile } from '../../assets/svg/line-icon-search-file.svg';\r\nimport { useSort } from 'hooks';\r\nimport * as utils from 'utils';\r\nimport { TASK_TAB_COMPLETED_STATUS, TASK_TAB_INPROGRESS_STATUS, SANCTIONS_CHECK_STATUSES } from 'consts';\r\nimport config from 'config';\r\n\r\n// mui\r\nimport { makeStyles, Table, TableBody, Box } from '@material-ui/core';\r\n\r\nClaimRefTasksTableView.propTypes = {\r\n  taskItems: PropTypes.array.isRequired,\r\n  cols: PropTypes.array.isRequired,\r\n  columnProps: PropTypes.func.isRequired,\r\n  sort: PropTypes.object.isRequired,\r\n  handlers: PropTypes.shape({\r\n    pagination: PropTypes.shape({\r\n      obj: PropTypes.object.isRequired,\r\n      handlers: PropTypes.shape({\r\n        handleChangePage: PropTypes.func.isRequired,\r\n        handleChangeRowsPerPage: PropTypes.func.isRequired,\r\n      }).isRequired,\r\n    }).isRequired,\r\n    handleSort: PropTypes.func.isRequired,\r\n    selectTask: PropTypes.func.isRequired,\r\n  }),\r\n};\r\n\r\nexport function ClaimRefTasksTableView({ taskItems, cols: colsArr, columnProps, sort: sortObj, handlers }) {\r\n  const classes = makeStyles(styles, { name: 'ClaimRefTasksTable' })();\r\n  const { cols, sort } = useSort(colsArr, sortObj, handlers.handleSort);\r\n\r\n  const hasTasks = utils.generic.isValidArray(taskItems, true);\r\n\r\n  const getStatus = (task) => {\r\n    if (task?.status) {\r\n      const targetDate = new Date(task.targetDueDate).getTime();\r\n      const createdDate = new Date(task.createdOn).getTime();\r\n      const dateNow = new Date().getTime();\r\n\r\n      const targetDDMMYY = utils.string.t('format.date', {\r\n        value: { date: task?.targetDueDate, format: config.ui.format.date.slashNumeric },\r\n      });\r\n      const dateNowDDMMYY = utils.string.t('format.date', { value: { date: new Date(), format: config.ui.format.date.slashNumeric } });\r\n\r\n      if (task?.approvalStatus === SANCTIONS_CHECK_STATUSES.rejected) {\r\n        return { type: 'error' };\r\n      } else if (targetDate > createdDate && task.status === TASK_TAB_COMPLETED_STATUS) return { type: 'success' };\r\n      else if (\r\n        targetDate >= createdDate &&\r\n        targetDate > dateNow &&\r\n        targetDate !== dateNow &&\r\n        targetDDMMYY !== dateNowDDMMYY &&\r\n        task.status === TASK_TAB_INPROGRESS_STATUS\r\n      )\r\n        return { type: 'success' };\r\n      else if (targetDate === dateNow || targetDDMMYY === dateNowDDMMYY) return { type: 'alert' };\r\n      else if (targetDate <= dateNow && task.status === TASK_TAB_INPROGRESS_STATUS) {\r\n        return { type: 'error', dateAlert: true };\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box data-testid=\"tasks-tab\">\r\n      <Overflow>\r\n        <Table size=\"small\" data-testid=\"tasks-table\">\r\n          <TableHead columns={cols} sorting={sort} nestedClasses={{ tableHead: classes.tableHead }} />\r\n          <TableBody>\r\n            {hasTasks &&\r\n              taskItems.map((task) => {\r\n                return (\r\n                  <ClaimRefTasksTableRow\r\n                    key={task.taskId}\r\n                    task={task}\r\n                    columnProps={columnProps}\r\n                    getStatus={getStatus}\r\n                    selectTask={handlers.selectTask}\r\n                  />\r\n                );\r\n              })}\r\n          </TableBody>\r\n        </Table>\r\n      </Overflow>\r\n      {!hasTasks && <Empty title={utils.string.t('claims.noMatchFound')} icon={<IconSearchFile />} padding />}\r\n      {hasTasks && (\r\n        <Pagination\r\n          page={get(handlers.pagination, 'obj.page')}\r\n          count={get(handlers.pagination, 'obj.rowsTotal')}\r\n          rowsPerPage={get(handlers.pagination, 'obj.rowsPerPage')}\r\n          onChangePage={get(handlers.pagination, 'handlers.handleChangePage')}\r\n          onChangeRowsPerPage={get(handlers.pagination, 'handlers.handleChangeRowsPerPage')}\r\n        />\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}