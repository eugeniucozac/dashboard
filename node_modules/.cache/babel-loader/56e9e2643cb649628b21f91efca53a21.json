{"ast":null,"code":"import _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport get from 'lodash/get';\nimport xorBy from 'lodash/xorBy'; // app\n\nimport config from 'config';\nimport * as constants from 'consts';\nimport * as utils from 'utils';\nvar initialState = {\n  isChoosing: false,\n  sectionEnabledUG: false,\n  claimsStepper: 0,\n  catCodes: [],\n  claimsAssociateWithLoss: [],\n  claimantNames: [],\n  lossQualifiers: [],\n  lossInformation: {},\n  claimsInformation: {},\n  isClaimsInfoLoading: false,\n  isLossInfoLoading: false,\n  isPolicyInfoLoading: false,\n  isPolicySectionsLoading: false,\n  settlementCurrencies: [],\n  queryCode: [],\n  sendToList: [],\n  policyData: {\n    policyID: null\n  },\n  policyInformation: {},\n  claims: {\n    items: [],\n    itemsTotal: 0,\n    page: 1,\n    pageSize: config.ui.pagination.default,\n    pageTotal: 0,\n    query: '',\n    sort: {\n      by: 'lossRef',\n      direction: 'desc'\n    },\n    searchBy: 'claimantName',\n    filters: {}\n  },\n  processing: {\n    selected: [],\n    items: [],\n    itemsTotal: 0,\n    page: 1,\n    pageSize: config.ui.pagination.default,\n    pageTotal: 0,\n    query: '',\n    sort: {\n      by: 'createdDate',\n      direction: 'desc'\n    },\n    searchBy: constants.CLAIMS_SEARCH_OPTION_CLAIM_REF,\n    filters: {},\n    isloadingFilters: false,\n    isUserClaim: false,\n    isClosedClaim: false,\n    isTeamClaim: false\n  },\n  tasksProcessing: {\n    selectedTaskType: '',\n    selected: [],\n    items: [],\n    rfiCount: '',\n    itemsTotal: 0,\n    page: 1,\n    pageSize: config.ui.pagination.default,\n    pageTotal: 0,\n    query: '',\n    searchBy: 'taskRef',\n    isloadingFilters: false,\n    filters: {},\n    appliedFilters: [],\n    sort: {\n      by: 'targetDueDate, priority',\n      type: 'lexical',\n      direction: 'asc'\n    },\n    associatedTaskDetails: {}\n  },\n  policies: {\n    items: [],\n    itemsTotal: 0,\n    page: 0,\n    pageSize: config.ui.pagination.default,\n    pageTotal: 0,\n    query: '',\n    sort: {\n      by: 'policyRef',\n      direction: 'desc'\n    },\n    searchBy: constants.CLAIMS_POLICY_SEARCH_OPTION.policyRef,\n    filters: {},\n    isloadingFilters: false,\n    isloadingTable: false\n  },\n  claimPoliciesSearchFilters: {\n    search: '',\n    filters: {\n      policyType: [],\n      insured: [],\n      reinsured: [],\n      client: [],\n      riskDetails: [],\n      inceptionDate: null,\n      expiryDate: null,\n      division: [],\n      policyStatus: [],\n      sanctionsCheck: []\n    }\n  },\n  policySections: [],\n  interest: {\n    items: [],\n    selectedInterest: '',\n    isLoading: false\n  },\n  insured: {\n    items: [],\n    itemsTotal: 0,\n    page: 0,\n    pageSize: config.ui.pagination.default,\n    pageTotal: 0,\n    query: '',\n    sort: {\n      by: 'sourceID',\n      direction: 'desc'\n    }\n  },\n  notes: {\n    items: [],\n    itemsTotal: 0,\n    page: 0,\n    pageSize: config.ui.pagination.options[0],\n    pageTotal: 0,\n    query: '',\n    sort: {\n      by: 'updatedDate',\n      direction: 'desc',\n      type: 'date'\n    },\n    filters: []\n  },\n  rfis: {\n    items: [],\n    itemsTotal: 0,\n    page: 0,\n    pageSize: config.ui.pagination.options[1],\n    pageTotal: 0,\n    query: '',\n    sort: {\n      by: 'targetDueDate, priority',\n      direction: 'asc',\n      type: 'date'\n    },\n    filters: []\n  },\n  audits: {\n    items: [],\n    itemsTotal: 0,\n    page: 0,\n    pageSize: config.ui.pagination.options[0],\n    pageTotal: 0,\n    query: '',\n    sort: {\n      by: 'createdBy',\n      direction: 'desc'\n    },\n    filters: []\n  },\n  taskNotes: {\n    items: [],\n    itemsTotal: 0,\n    page: 0,\n    pageSize: config.ui.pagination.options[0],\n    pageTotal: 0,\n    query: '',\n    sort: {\n      by: 'updatedDate',\n      direction: 'desc',\n      type: 'date'\n    },\n    filters: []\n  },\n  rfiHistory: [],\n  rfiCreated: {},\n  underWritingGroups: {\n    items: [],\n    percentageOfSelected: 0,\n    sort: {\n      by: 'groupRef',\n      direction: 'asc'\n    },\n    isLoading: false\n  },\n  allClaimDetails: {},\n  claimBordereauPeriods: [],\n  claimPolicyInsures: [],\n  isClaimPolicyInsuresLoading: false,\n  claimPolicyClients: [],\n  isPolicyClientsLoading: false,\n  claimDetailInformation: {},\n  claimDetailInformationSuccess: null,\n  beAdjuster: {\n    items: [],\n    selectedbeAdjuster: null\n  },\n  priorities: [],\n  reopenTaskList: [],\n  claimsProcessingData: {\n    search: '',\n    filters: {\n      dateAndTimeCreated: '',\n      targetDueDate: '',\n      team: [],\n      assignedToDropdownList: [],\n      priority: [],\n      status: []\n    }\n  },\n  claimsRefData: {\n    claimStatus: [],\n    claimant: [],\n    lossDateFrom: [],\n    lossDateTo: [],\n    lossName: [],\n    insured: [],\n    priority: []\n  },\n  claimLossSearchFilters: {\n    search: '',\n    filters: {\n      claimStatus: [],\n      claimant: [],\n      lossDateFrom: null,\n      lossDateTo: null,\n      lossName: [],\n      insured: [],\n      priority: []\n    }\n  },\n  claimsProcessingSearchFilters: {\n    search: '',\n    filters: {\n      dateAndTimeCreated: [],\n      targetDueDate: [],\n      team: [],\n      assignedToDropdownList: [],\n      priority: [],\n      status: []\n    }\n  },\n  statuses: [],\n  complexityPolicies: {\n    items: [],\n    itemsTotal: 0,\n    page: 1,\n    pageSize: config.ui.pagination.default,\n    pageTotal: 0,\n    query: '',\n    sort: {\n      by: 'policyRef',\n      direction: 'asc'\n    },\n    selectedComplexityPolicies: [],\n    savedComplexPolicies: [],\n    checkedComplexity: false\n  },\n  complexityPoliciesFlagged: {\n    items: [],\n    itemsTotal: 0,\n    page: 1,\n    pageSize: config.ui.pagination.default,\n    pageTotal: 0,\n    query: null,\n    sort: {\n      by: 'policyRef',\n      direction: 'asc'\n    }\n  },\n  complexityBasisValues: {\n    type: '',\n    items: null,\n    itemsTotal: 0,\n    page: 1,\n    pageSize: 5,\n    pageTotal: 0,\n    query: '',\n    sort: {\n      by: 'createdDate',\n      direction: 'desc'\n    },\n    loaded: false\n  },\n  complexityReferralValues: {\n    items: null,\n    itemsTotal: 0,\n    page: 1,\n    pageSize: 5,\n    pageTotal: 0,\n    query: '',\n    sort: {\n      by: 'createdDate',\n      direction: 'desc'\n    }\n  },\n  checkedComplexAddPolicies: [],\n  claimData: {},\n  complexityManagement: {\n    activeTab: '',\n    division: [],\n    divisionChanges: {},\n    complexityBasisValueId: {},\n    complexityBasisDivisionMatrix: [],\n    complexityBasisDivisionMatrixChanges: {},\n    complexityReferralValueId: {},\n    complexityReferralDivisionMatrix: [],\n    complexityReferralDivisionMatrixChanges: {}\n  },\n  complexInsured: {\n    items: null,\n    itemsTotal: 0,\n    page: 0,\n    pageSize: config.ui.pagination.default,\n    pageTotal: 0,\n    query: '',\n    sort: {\n      by: 'insured',\n      direction: 'asc'\n    },\n    selectedComplexityInsured: [],\n    savedComplexInsured: [],\n    checkedComplexity: false\n  },\n  checkedComplexAddInsured: [],\n  complexityValues: [],\n  complexityTypes: [],\n  referralValues: [],\n  referralResponse: [],\n  refTabTasks: {\n    selected: [],\n    items: [],\n    itemsTotal: 0,\n    page: 1,\n    pageSize: config.ui.pagination.options[0],\n    pageTotal: 0,\n    query: '',\n    filters: [],\n    appliedFilters: [],\n    sort: {\n      by: 'taskRef',\n      type: 'lexical',\n      direction: 'desc'\n    }\n  },\n  claimsAssignedToUsers: {\n    type: '',\n    orgName: '',\n    items: [],\n    loaded: false\n  },\n  taskDashboard: {\n    taskDetails: {\n      items: {},\n      query: ''\n    },\n    checkList: [],\n    nextActions: [],\n    checkListChanges: [],\n    checkListChangesPushed: [],\n    nextActionChangesPushed: [],\n    purchasedCurrencyRequired: ''\n  },\n  setPriority: {\n    claimPriority: {}\n  },\n  adhocTask: {\n    status: false,\n    data: {}\n  },\n  tasksClaimsReporting: {\n    data: {},\n    isDataLoading: false\n  },\n  processingNavigation: {\n    navigationItem: constants.CLAIMS_PROCESSING_TAB_SELECTION,\n    selectedView: constants.CLAIM_TEAM_TYPE.myClaims\n  },\n  countriesList: [],\n  lossDocDetails: [],\n  dmsDocDetails: {\n    lossDocDetails: [],\n    linkPolicyDocDetails: [],\n    claimsDocDetails: [],\n    manageDocument: {\n      lossDocumentDetails: [],\n      claimDocumentDetails: []\n    }\n  },\n  linkPolicies: {\n    searchBy: '',\n    searchTerm: '',\n    data: {},\n    loader: false,\n    fieldLoader: false\n  },\n  lossActions: {\n    items: [],\n    itemsTotal: 0,\n    page: 0,\n    pageSize: config.ui.pagination.options[1],\n    pageTotal: 0,\n    query: '',\n    sort: {\n      by: 'targetDueDate, priority',\n      direction: 'asc',\n      type: 'date'\n    },\n    filters: [],\n    fieldLoader: false\n  },\n  lossesTab: {\n    isLoading: false,\n    searchBy: '',\n    searchText: ''\n  },\n  claimsTab: {\n    isClaimsTabLoaded: false,\n    searchBy: '',\n    searchText: '',\n    view: '',\n    includedCloseClaims: false,\n    tableDetails: {\n      selected: [],\n      items: [],\n      itemsTotal: 0,\n      page: 1,\n      pageSize: config.ui.pagination.default,\n      pageTotal: 0,\n      query: '',\n      sort: {\n        by: 'createdDate',\n        direction: 'desc'\n      },\n      searchBy: constants.CLAIMS_SEARCH_OPTION_INSURED,\n      filters: {},\n      isloadingFilters: false\n    }\n  }\n};\n\nvar claimsReducer = function claimsReducer() {\n  var _action$payload, _action$payload2, _selectedPercentage, _selectedPercentage$t, _selectedPercentage$t2, _action$payload$filte, _action$payload7, _action$payload10, _action$payload10$ite, _action$payload11, _action$payload11$ite, _initialState$claimsT, _initialState$claimsT2, _initialState$claimsT3, _initialState$claimsT4, _state$claimsTab, _state$claimsTab$tabl, _action$payload12;\n\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'CLAIMS_ASSOCIATE_WITH_LOSS_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimsAssociateWithLoss: action.payload\n      });\n\n    case 'CLAIMREF_EDIT_NOTES_SUCCESS':\n      // eslint-disable-next-line array-callback-return\n      var getNotesItems = state.notes.items.filter(function (item, idx) {\n        return item.caseIncidentNotesID !== action.payload.caseIncidentNotesID ? item : null;\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        notes: _objectSpread(_objectSpread({}, state.notes), {}, {\n          items: [action.payload].concat(_toConsumableArray(getNotesItems))\n        })\n      });\n\n    case 'CLAIMS_SAVE_NOTES_POST_SUCCESS':\n      var isArrayLargerThanPageSize = state.notes.items.length + 1 > state.notes.pageSize;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        notes: _objectSpread(_objectSpread({}, state.notes), {}, {\n          items: isArrayLargerThanPageSize ? [action.payload].concat(_toConsumableArray(state.notes.items.slice(0, -1))) : [action.payload].concat(_toConsumableArray(state.notes.items)),\n          itemsTotal: state.notes.itemsTotal + 1\n        })\n      });\n\n    case 'CLAIMS_ADHOC_TASK_RESET_STATUS':\n    case 'CLAIMS_SAVE_ADHOC_TASK_POST_REQUEST':\n    case 'CLAIMS_EDIT_ADHOC_TASK_POST_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        adhocTask: _objectSpread({}, initialState.adhocTask)\n      });\n\n    case 'CLAIMS_SAVE_ADHOC_TASK_POST_SUCCESS':\n      var createAdHocResp = action === null || action === void 0 ? void 0 : action.payload;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        adhocTask: {\n          status: (createAdHocResp === null || createAdHocResp === void 0 ? void 0 : createAdHocResp.status) === 'OK' || initialState.adhocTask.status,\n          data: createAdHocResp === null || createAdHocResp === void 0 ? void 0 : createAdHocResp.data\n        }\n      });\n\n    case 'CLAIMS_SAVE_ADHOC_TASK_POST_FAILURE':\n    case 'CLAIMS_EDIT_ADHOC_TASK_POST_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload,\n        adhocTask: _objectSpread({}, initialState.rfiCreated)\n      });\n\n    case 'CLAIMS_EDIT_ADHOC_TASK_POST_SUCCESS':\n      var status = action === null || action === void 0 ? void 0 : (_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.status;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        adhocTask: _objectSpread(_objectSpread({}, state.adhocTask), {}, {\n          status: status === 'OK' || initialState.adhocTask.status\n        })\n      });\n\n    case 'CLAIMS_SAVE_RFI_POST_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        rfiCreated: initialState.rfiCreated\n      });\n\n    case 'CLAIMS_SAVE_RFI_POST_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        rfiCreated: action.payload\n      });\n\n    case 'CLAIMS_SAVE_RFI_POST_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload,\n        rfiCreated: initialState.rfiCreated\n      });\n\n    case 'CLOSE_SANCTIONS_CHECK_SUCCESS':\n    case 'CLOSE_CLAIMS_POST_SUCCESS':\n      return _objectSpread({}, state);\n\n    case 'CLAIMS_CAT_CODES_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        catCodes: action.payload\n      });\n\n    case 'CLAIMS_STATUSES_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        statuses: action.payload,\n        claimsStatusObj: (_action$payload2 = action.payload) === null || _action$payload2 === void 0 ? void 0 : _action$payload2.reduce(function (acc, status) {\n          var name = status.name,\n              id = status.id;\n          return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, name, id === null || id === void 0 ? void 0 : id.toString()));\n        }, {})\n      });\n\n    case 'CLAIMS_COUNTRIESLIST_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        countriesList: action.payload\n      });\n\n    case 'CLAIMS_CLAIMANT_NAMES_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimantNames: action.payload\n      });\n\n    case 'CLAIMS_CLAIMANT_NAMES_UPDATE_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimantNames: [].concat(_toConsumableArray(state.claimantNames), [{\n          id: action.payload.id + 1,\n          name: action.payload.name\n        }])\n      });\n\n    case 'CLAIMS_LOSS_QUALIFIERS_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        lossQualifiers: action.payload\n      });\n\n    case 'CLAIMS_POLICY_INFORMATION_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isPolicyInfoLoading: true\n      });\n\n    case 'CLAIMS_POLICY_INFORMATION_GET_SUCCESS':\n      var selectPolicyType = action.payload.policyType;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        policyInformation: action.payload,\n        sectionEnabledUG: constants.CLAIM_SECTION_ENABLED_UG.indexOf(selectPolicyType) > -1 || false,\n        isPolicyInfoLoading: false\n      });\n\n    case 'CLAIMS_POLICY_INFORMATION_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload,\n        isPolicyInfoLoading: false\n      });\n\n    case 'GET_LOSS_INFORMATION_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        lossInformation: action.payload,\n        isLossInfoLoading: true\n      });\n\n    case 'GET_LOSS_INFORMATION_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload,\n        isLossInfoLoading: false\n      });\n\n    case 'CLAIMS_UNDERWRITING_GROUPS_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        underWritingGroups: _objectSpread(_objectSpread({}, state.underWritingGroups), {}, {\n          items: action.payload.map(function (item) {\n            return _objectSpread(_objectSpread({}, item), {}, {\n              selected: false\n            });\n          }),\n          percentageOfSelected: 0\n        })\n      });\n\n    case 'RESET_CLAIMS_UNDERWRITING_GROUPS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        underWritingGroups: _objectSpread(_objectSpread({}, state.underWritingGroups), {}, {\n          items: [],\n          percentageOfSelected: 0\n        }),\n        claimsInformation: _objectSpread(_objectSpread({}, state.claimsInformation), {}, {\n          policyUnderWritingGroupDtoList: []\n        })\n      });\n\n    case 'CLAIMS_UNDERWRITING_GROUPS_SORTING':\n      var selected = state.underWritingGroups.items.filter(function (item) {\n        return action.payload.includes(item.groupRef);\n      }).map(function (item) {\n        return _objectSpread(_objectSpread({}, item), {}, {\n          selected: true\n        });\n      });\n      var remained = state.underWritingGroups.items.filter(function (item) {\n        return !action.payload.includes(item.groupRef);\n      }).map(function (item) {\n        return _objectSpread(_objectSpread({}, item), {}, {\n          selected: false\n        });\n      });\n      var initial = state.underWritingGroups.items.sort(function (a, b) {\n        return a.groupRef.localeCompare(b.groupRef);\n      }).map(function (item) {\n        return _objectSpread(_objectSpread({}, item), {}, {\n          selected: false\n        });\n      });\n      var selectedPercentage = selected === null || selected === void 0 ? void 0 : selected.reduce(function (acc, current) {\n        return acc + current.percentage;\n      }, 0);\n\n      if (Math.floor(selectedPercentage) !== selectedPercentage && ((_selectedPercentage = selectedPercentage) === null || _selectedPercentage === void 0 ? void 0 : (_selectedPercentage$t = _selectedPercentage.toString()) === null || _selectedPercentage$t === void 0 ? void 0 : (_selectedPercentage$t2 = _selectedPercentage$t.split('.')[1]) === null || _selectedPercentage$t2 === void 0 ? void 0 : _selectedPercentage$t2.length) > 5) {\n        selectedPercentage = selectedPercentage.toFixed(5);\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        underWritingGroups: _objectSpread(_objectSpread({}, state.underWritingGroups), {}, {\n          items: action.payload.length > 0 ? [].concat(_toConsumableArray(selected), _toConsumableArray(remained)) : initial,\n          percentageOfSelected: action.payload.length > 0 ? selectedPercentage : 0\n        })\n      });\n\n    case 'CLAIMS_UNDERWRITING_GROUPS_BY_SECTION_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        underWritingGroups: _objectSpread(_objectSpread({}, state.underWritingGroups), {}, {\n          isLoading: true\n        })\n      });\n\n    case 'CLAIMS_UNDERWRITING_GROUPS_BY_SECTION_GET_SUCCESS':\n      var sortedUnderwritingGroups = action.payload.sortedUnderwritingGroups;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        underWritingGroups: _objectSpread(_objectSpread({}, state.underWritingGroups), {}, {\n          items: sortedUnderwritingGroups.map(function (item) {\n            return _objectSpread(_objectSpread({}, item), {}, {\n              selected: false\n            });\n          }),\n          percentageOfSelected: 0,\n          isLoading: false\n        })\n      });\n\n    case 'CLAIMS_UNDERWRITING_GROUPS_BY_SECTION_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload,\n        underWritingGroups: _objectSpread(_objectSpread({}, state.underWritingGroups), {}, {\n          isLoading: false\n        })\n      });\n\n    case 'CLAIM_STATUS_EDIT_SUCCESS':\n      var _action$payload3 = action.payload,\n          data = _action$payload3.data,\n          id = _action$payload3.id;\n      var updatedStatus = state.claims.items.map(function (item) {\n        if (item.claimID === id) {\n          return _objectSpread(_objectSpread({}, item), {}, {\n            claimStatusID: data.claimStatusId\n          });\n        } else {\n          return item;\n        }\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claims: _objectSpread(_objectSpread({}, state.claims), {}, {\n          items: updatedStatus\n        })\n      });\n\n    case 'LOSS_INFORMATION_EDIT_SUCCESS':\n      var updatedLoss = _objectSpread(_objectSpread({}, state.lossInformation), {}, {\n        catCodesID: action.payload.catCodesID,\n        isActive: action.payload.isActive,\n        lossDescription: action.payload.lossDescription,\n        lossName: action.payload.lossName,\n        fromDate: action.payload.fromDate,\n        toDate: action.payload.toDate,\n        firstContactDate: action.payload.firstContactDate\n      });\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        lossInformation: updatedLoss\n      });\n\n    case 'CLAIMS_PROCESSING_GET_REQUEST':\n      var newRequestType = action.payload.appliedParams.newRequestType;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        processing: _objectSpread(_objectSpread({}, state.processing), newRequestType === constants.CLAIM_PROCESSING_REQ_TYPES.filter ? {\n          isloadingFilters: true\n        } : {})\n      });\n\n    case 'CLAIMS_PROCESSING_GET_SUCCESS':\n      var _action$payload$items = action.payload.items,\n          filterValue = _action$payload$items.filterValue,\n          searchValue = _action$payload$items.searchValue;\n      var pageSize = get(action.payload.pagination, 'size', initialState.processing.pageSize);\n      var claimRequestType = action.payload.requestType;\n      var isNonfilterTypCall = claimRequestType !== constants.CLAIM_PROCESSING_REQ_TYPES.filter;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        processing: _objectSpread(_objectSpread(_objectSpread({}, state.processing), isNonfilterTypCall ? {\n          items: _toConsumableArray(utils.generic.isValidArray(searchValue) ? searchValue : []),\n          itemsTotal: get(action.payload.pagination, 'totalElements', 0),\n          page: get(action.payload.pagination, 'page', 0) + 1,\n          pageSize: pageSize !== 0 ? pageSize : initialState.processing.pageSize,\n          pageTotal: get(action.payload.pagination, 'totalPages', 0),\n          query: get(action.payload.pagination, 'search') || '',\n          searchBy: get(action.payload.pagination, 'searchBy') || ''\n        } : {}), {}, {\n          sort: {\n            by: get(action.payload.pagination, 'orderBy') || '',\n            direction: (get(action.payload.pagination, 'direction') || '').toLowerCase()\n          },\n          filters: !isNonfilterTypCall ? filterValue ? filterValue : _objectSpread({}, state.processing.filters) : _objectSpread({}, state.processing.filters),\n          isloadingFilters: isNonfilterTypCall ? state.processing.isloadingFilters : false,\n          selected: []\n        })\n      });\n\n    case 'CLAIMS_PROCESSING_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload,\n        processing: _objectSpread(_objectSpread({}, state.processing), {}, {\n          isloadingFilters: isNonfilterTypCall ? state.processing.isloadingFilters : false\n        })\n      });\n\n    case 'CLAIMS_PROCESSING_FILTERS_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        processing: _objectSpread(_objectSpread({}, state.processing), {}, {\n          filters: initialState.processing.filters\n        })\n      });\n\n    case 'CLAIMS_PROCESSING_SEARCH_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        processing: _objectSpread(_objectSpread({}, state.processing), {}, {\n          query: initialState.processing.query\n        })\n      });\n\n    case 'CLAIMS_PROCESSING_ITEMS_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        processing: _objectSpread(_objectSpread({}, state.processing), {}, {\n          items: initialState.processing.items\n        })\n      });\n\n    case 'CLAIMS_PROCESSING_SELECT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        processing: _objectSpread(_objectSpread({}, state.processing), {}, {\n          selected: action.payload.forceSingleItem ? [action.payload.claimObj] : xorBy(state.processing.selected || [], [action.payload.claimObj], 'processID')\n        })\n      });\n\n    case 'CLAIMS_PROCESSING_SELECTED_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        processing: _objectSpread(_objectSpread({}, state.processing), {}, {\n          selected: []\n        })\n      });\n\n    case 'CLAIM_NOTES_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        notes: {\n          items: action.payload.items || [],\n          itemsTotal: get(action.payload.pagination, 'totalElements', 0),\n          page: get(action.payload.pagination, 'page', 0),\n          pageSize: get(action.payload.pagination, 'size', initialState.notes.pageSize),\n          pageTotal: get(action.payload.pagination, 'totalPages', 0),\n          query: get(action.payload.pagination, 'search') || '',\n          sort: _objectSpread({}, state.notes.sort),\n          filters: action.payload.filters !== null ? action.payload.filters : state.notes.filters\n        }\n      });\n\n    case 'CLAIM_RFIS_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        rfis: {\n          items: action.payload.items || [],\n          itemsTotal: get(action.payload.pagination, 'totalElements', 0),\n          page: get(action.payload.pagination, 'page', 0),\n          pageSize: get(action.payload.pagination, 'size', initialState.rfis.pageSize),\n          pageTotal: get(action.payload.pagination, 'totalPages', 0),\n          query: get(action.payload.pagination, 'search') || '',\n          sort: _objectSpread({}, state.rfis.sort),\n          filters: action.payload.filters !== null ? action.payload.filters : state.rfis.filters\n        }\n      });\n\n    case 'CLAIM_AUDIT_TRAIL_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        audits: {\n          items: action.payload.items || [],\n          itemsTotal: get(action.payload.pagination, 'totalElements', 0),\n          page: get(action.payload.pagination, 'page', 0),\n          pageSize: get(action.payload.pagination, 'size', initialState.audits.pageSize),\n          pageTotal: get(action.payload.pagination, 'totalPages', 0),\n          query: get(action.payload.pagination, 'search') || '',\n          sort: _objectSpread({}, state.audits.sort)\n        }\n      });\n\n    case 'CLAIM_AUDIT_TRAIL_FILTERS_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        audits: _objectSpread(_objectSpread({}, state.audits), {}, {\n          filters: initialState.audits.filters\n        })\n      });\n\n    case 'CLAIM_AUDIT_TRAIL_ITEMS_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        audits: _objectSpread(_objectSpread({}, state.audits), {}, {\n          items: initialState.audits.items\n        })\n      });\n\n    case 'CLAIM_AUDIT_TRAIL_SEARCH_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        audits: _objectSpread(_objectSpread({}, state.audits), {}, {\n          query: initialState.audits.query\n        })\n      });\n\n    case 'CLAIM_NOTES_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        notes: initialState.notes\n      });\n\n    case 'CLAIM_RFIS_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        rfis: initialState.rfis\n      });\n\n    case 'CLAIM_TASK_NOTES_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        taskNotes: {\n          items: action.payload.items || [],\n          itemsTotal: get(action.payload.pagination, 'totalElements', 0),\n          page: get(action.payload.pagination, 'page', 0),\n          pageSize: get(action.payload.pagination, 'size', initialState.taskNotes.pageSize),\n          pageTotal: get(action.payload.pagination, 'totalPages', 0),\n          query: get(action.payload.pagination, 'search') || '',\n          sort: _objectSpread({}, state.taskNotes.sort),\n          filters: (_action$payload$filte = action.payload.filters) !== null && _action$payload$filte !== void 0 ? _action$payload$filte : state.taskNotes.filters\n        }\n      });\n\n    case 'CLAIMS_TASK_ADD_NOTE_SUCCESS':\n      var isTaskNotesArrayLargerThanPageSize = state.taskNotes.items.length + 1 > state.taskNotes.pageSize;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        taskNotes: {\n          items: isTaskNotesArrayLargerThanPageSize ? [action.payload].concat(_toConsumableArray(state.taskNotes.items.slice(0, -1))) : [action.payload].concat(_toConsumableArray(state.taskNotes.items)),\n          itemsTotal: state.taskNotes.itemsTotal + 1,\n          page: get(action.payload.pagination, 'page', 0),\n          pageSize: get(action.payload.pagination, 'size', initialState.taskNotes.pageSize),\n          pageTotal: get(action.payload.pagination, 'totalPages', 0),\n          query: get(action.payload.pagination, 'search') || '',\n          sort: _objectSpread({}, state.taskNotes.sort)\n        }\n      });\n\n    case 'CLAIMS_TASK_EDIT_NOTE_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        taskNotes: {\n          items: state.taskNotes.items.map(function (item) {\n            if (item.caseIncidentNotesID === action.payload.caseIncidentNotesID) {\n              return _objectSpread({}, action.payload);\n            }\n\n            return item;\n          })\n        }\n      });\n\n    case 'SET_CLAIMS_NOTES_TAB_FILTER_VALUES':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        notes: _objectSpread(_objectSpread({}, state.notes), {}, {\n          filters: action.payload\n        })\n      });\n\n    case 'CLAIMS_TASKS_PROCESSING_GET_REQUEST':\n      var taskReqType = action.payload.appliedParams.newRequestType;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasksProcessing: _objectSpread(_objectSpread({}, state.tasksProcessing), taskReqType === constants.CLAIM_PROCESSING_REQ_TYPES.filter ? {\n          isloadingFilters: true\n        } : {})\n      });\n\n    case 'CLAIMS_TASKS_PROCESSING_GET_SUCCESS':\n      var _action$payload4 = action.payload,\n          requestType = _action$payload4.requestType,\n          taskType = _action$payload4.taskType,\n          taskSortBy = _action$payload4.sortBy,\n          taskDir = _action$payload4.dir,\n          query = _action$payload4.query,\n          navigation = _action$payload4.navigation,\n          _action$payload4$item = _action$payload4.items,\n          tasksFiltersValues = _action$payload4$item.filterValue,\n          tasksSearchValues = _action$payload4$item.searchValue,\n          taskRfiCount = _action$payload4$item.rfiTasksCount,\n          tasksPagination = _action$payload4.pagination,\n          tasksAppliedFilters = _action$payload4.appliedFilters;\n      var initTaskProcessing = initialState.tasksProcessing;\n      var initTaskProcessingSort = initTaskProcessing.sort;\n      var stateTaskProcessing = state.tasksProcessing;\n      var prevTaskProcessingSelected = stateTaskProcessing.selected;\n      var isNonfilterTypeCall = requestType !== constants.CLAIM_PROCESSING_REQ_TYPES.filter;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasksProcessing: _objectSpread(_objectSpread(_objectSpread({}, stateTaskProcessing), isNonfilterTypeCall ? {\n          itemsTotal: get(tasksPagination, 'totalElements', 0),\n          page: get(tasksPagination, 'page', 0) + 1,\n          pageSize: get(tasksPagination, 'size', initialState.tasksProcessing.pageSize),\n          pageTotal: get(tasksPagination, 'totalPages', 0),\n          query: get(tasksPagination, 'searchBy') || query || '',\n          items: tasksSearchValues || [],\n          rfiCount: taskRfiCount || 0\n        } : {}), {}, {\n          sort: {\n            by: taskSortBy || initTaskProcessingSort.by,\n            direction: taskDir || initTaskProcessingSort.direction\n          },\n          filters: isNonfilterTypeCall ? stateTaskProcessing.filters : tasksFiltersValues ? tasksFiltersValues : {},\n          appliedFilters: (tasksAppliedFilters === null || tasksAppliedFilters === void 0 ? void 0 : tasksAppliedFilters.length) ? tasksAppliedFilters : initTaskProcessing.appliedFilters,\n          selected: navigation ? prevTaskProcessingSelected : [],\n          taskType: taskType || initTaskProcessing.taskType,\n          isloadingFilters: isNonfilterTypeCall ? stateTaskProcessing.isloadingFilters : false\n        })\n      });\n\n    case 'CLAIMS_TASKS_PROCESSING_GET_FAILURE':\n      var _action$payload5 = action.payload,\n          taskProcessingError = _action$payload5.error,\n          isNonFilterTypeCall = _action$payload5.isNonFilterTypeCall;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: taskProcessingError,\n        tasksProcessing: _objectSpread(_objectSpread({}, state.tasksProcessing), {}, {\n          items: isNonFilterTypeCall ? initialState.tasksProcessing.items : state.tasksProcessing.items,\n          isloadingFilters: isNonfilterTypCall ? state.processing.isloadingFilters : false\n        })\n      });\n\n    case 'CLAIMS_TASKS_PROCESSING_FILTERS_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasksProcessing: _objectSpread(_objectSpread({}, state.tasksProcessing), {}, {\n          appliedFilters: initialState.tasksProcessing.appliedFilters\n        })\n      });\n\n    case 'CLAIMS_TASKS_PROCESSING_SEARCH_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasksProcessing: _objectSpread(_objectSpread({}, state.tasksProcessing), {}, {\n          query: initialState.tasksProcessing.query\n        })\n      });\n\n    case 'CLAIMS_TASKS_PROCESSING_SELECT':\n      var _action$payload6 = action.payload,\n          taskSelectObj = _action$payload6.taskObj,\n          keepPreviousTasks = _action$payload6.keepPreviousTasks;\n      var newTasksSelectedArray = keepPreviousTasks ? xorBy(state.tasksProcessing.selected || [], [taskSelectObj], 'taskRef') : [taskSelectObj];\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasksProcessing: _objectSpread(_objectSpread({}, state.tasksProcessing), {}, {\n          selected: newTasksSelectedArray\n        })\n      });\n\n    case 'CLAIMS_TASK_DASHBOARD_DETAIL_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        taskDashboard: _objectSpread(_objectSpread({}, state.taskDashboard), {}, {\n          taskDetails: {\n            items: action.payload.items,\n            query: action.payload.query\n          }\n        }),\n        tasksProcessing: _objectSpread(_objectSpread({}, state.tasksProcessing), {}, {\n          selected: action.payload.items || []\n        })\n      });\n\n    case 'CLAIMS_TASK_DASHBOARD_DETAIL_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        taskDashboard: _objectSpread(_objectSpread({}, state.taskDashboard), {}, {\n          taskDetails: initialState.taskDashboard.taskDetails\n        })\n      });\n\n    case 'CURRENCY_PURCHASED_VALUE_GET_SUCCESS':\n      var selectedOption = (_action$payload7 = action.payload) === null || _action$payload7 === void 0 ? void 0 : _action$payload7.data;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        taskDashboard: _objectSpread(_objectSpread({}, state.taskDashboard), {}, {\n          purchasedCurrencyRequired: selectedOption\n        })\n      });\n\n    case 'CLAIMS_TASK_PRIORITY_POST_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimsRefData: action.payload\n      });\n\n    case 'CLAIMS_TASKS_PROCESSING_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasksProcessing: _objectSpread(_objectSpread({}, state.tasksProcessing), {}, {\n          items: initialState.tasksProcessing.items\n        })\n      });\n\n    case 'CLAIMS_GET_RFI_HISTORY_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        rfiHistory: action.payload\n      });\n\n    case 'CLAIMS_TASK_SANCTIONS_CHECK_POST_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        sanctionsCheck: action.payload,\n        loading: false\n      });\n\n    case 'CLAIM_PROCESSING_TASK_TYPE_SELECTED':\n      var claimProcessingTaskTypeSelected = action.payload;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasksProcessing: _objectSpread(_objectSpread({}, state.tasksProcessing), {}, {\n          selectedTaskType: claimProcessingTaskTypeSelected\n        })\n      });\n\n    case 'CLAIMS_TASK_PROCESSING_GET_CHECKLIST_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        taskDashboard: _objectSpread(_objectSpread({}, state.taskDashboard), {}, {\n          checkList: action.payload\n        })\n      });\n\n    case 'CLAIMS_TASK_PROCESSING_GET_NEXT_TASKLIST_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        taskDashboard: _objectSpread(_objectSpread({}, state.taskDashboard), {}, {\n          nextActions: action.payload\n        })\n      });\n\n    case 'CLAIMS_TASK_PROCESSING_SET_CHECKLIST_CHANGES':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        taskDashboard: _objectSpread(_objectSpread({}, state.taskDashboard), {}, {\n          checkListChanges: action.payload\n        })\n      });\n\n    case 'CLAIMS_TASK_PROCESSING_SAVE_CHECKLIST_ACTIONS_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        taskDashboard: _objectSpread(_objectSpread({}, state.taskDashboard), {}, {\n          checkListChangesPushed: action.payload\n        })\n      });\n\n    case 'CLAIMS_TASK_PROCESSING_SAVE_NEXT_ACTION_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        taskDashboard: _objectSpread(_objectSpread({}, state.taskDashboard), {}, {\n          nextActionChangesPushed: action.payload\n        })\n      });\n\n    case 'CLAIMS_TASK_PROCESSING_RESET_CHECKLIST_DATA':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        taskDashboard: _objectSpread({}, initialState.taskDashboard)\n      });\n\n    case 'CLAIMREF_TASKS_REQUEST':\n      var refTaskReqType = action.payload.appliedParams.newRequestType;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        refTabTasks: _objectSpread(_objectSpread({}, state.refTabTasks), refTaskReqType === constants.CLAIM_PROCESSING_REQ_TYPES.filter ? {\n          isloadingFilters: true\n        } : {})\n      });\n\n    case 'CLAIMREF_TASKS_SUCCESS':\n      var _action$payload8 = action.payload,\n          refTaskReqstType = _action$payload8.requestType,\n          claimRefSortBy = _action$payload8.sortBy,\n          claimRefDir = _action$payload8.dir,\n          claimRefQuery = _action$payload8.query,\n          _action$payload8$item = _action$payload8.items,\n          refTasksFiltersValues = _action$payload8$item.filterValue,\n          refTasksSearchValues = _action$payload8$item.searchValue,\n          refTasksPagination = _action$payload8.pagination,\n          refTasksAppliedFilters = _action$payload8.appliedFilters;\n      var initRefTabTasks = initialState.refTabTasks;\n      var initRefTabTasksSort = initRefTabTasks.sort;\n      var stateRefTabTasks = state.refTabTasks;\n      var isNonfilterTypeReq = refTaskReqstType !== constants.CLAIM_PROCESSING_REQ_TYPES.filter;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        refTabTasks: _objectSpread(_objectSpread(_objectSpread({}, stateRefTabTasks), isNonfilterTypeReq ? {\n          itemsTotal: get(refTasksPagination, 'totalElements', 0),\n          page: get(refTasksPagination, 'page', 0) + 1,\n          pageSize: get(refTasksPagination, 'size', initRefTabTasks.pageSize),\n          pageTotal: get(refTasksPagination, 'totalPages', 0),\n          query: get(refTasksPagination, 'searchBy') || claimRefQuery || '',\n          items: refTasksSearchValues || []\n        } : {}), {}, {\n          sort: {\n            by: claimRefSortBy || initRefTabTasksSort.by,\n            direction: claimRefDir || initRefTabTasksSort.direction\n          },\n          filters: isNonfilterTypeReq ? stateRefTabTasks.filters : refTasksFiltersValues ? refTasksFiltersValues : {},\n          appliedFilters: (refTasksAppliedFilters === null || refTasksAppliedFilters === void 0 ? void 0 : refTasksAppliedFilters.length) ? refTasksAppliedFilters : initRefTabTasks.appliedFilters\n        }),\n        loading: false\n      });\n\n    case 'CLAIMREF_TASKS_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload,\n        refTabTasks: _objectSpread(_objectSpread({}, state.refTabTasks), {}, {\n          isloadingFilters: false\n        })\n      });\n\n    case 'CLAIMS_GET_SUCCESS':\n      var claimsPagination = action.payload.pagination || {};\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claims: _objectSpread(_objectSpread({}, state.claims), {}, {\n          itemsTotal: get(claimsPagination, 'totalElements', 0),\n          page: get(claimsPagination, 'page', 0),\n          pageSize: get(claimsPagination, 'size', initialState.claims.pageSize),\n          pageTotal: get(claimsPagination, 'totalPages', 0),\n          query: get(claimsPagination, 'query') || '',\n          items: action.payload.items || [],\n          searchBy: get(claimsPagination, 'searchBy') || initialState.claims.searchBy,\n          sort: _objectSpread({}, state.claims.sort)\n        })\n      });\n\n    case 'CLAIMS_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claims: initialState.claims\n      });\n\n    case 'CLAIMS_POLICIES_GET_REQUEST':\n      var newPolicyRequestType = action.payload.appliedParams.newRequestType;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        policies: _objectSpread(_objectSpread({}, state.policies), newPolicyRequestType === constants.CLAIM_POLICY_SEARCH_REQ_TYPES.filter ? {\n          isloadingFilters: true\n        } : {\n          isloadingTable: true\n        })\n      });\n\n    case 'CLAIMS_POLICIES_GET_SUCCESS':\n      var _action$payload9 = action.payload,\n          _action$payload9$item = _action$payload9.items,\n          policiesFiltersValues = _action$payload9$item.filterValue,\n          policiesSearchValues = _action$payload9$item.searchValue,\n          policiesPagination = _action$payload9.pagination;\n      var policyRequestType = action.payload.requestType;\n      var isPolicyNonfilterTypCall = policyRequestType !== constants.CLAIM_POLICY_SEARCH_REQ_TYPES.filter;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        policies: _objectSpread(_objectSpread(_objectSpread({}, state.policies), isPolicyNonfilterTypCall ? {\n          items: _toConsumableArray(utils.generic.isValidArray(policiesSearchValues) ? policiesSearchValues : []),\n          itemsTotal: get(action.payload.pagination, 'totalElements', 0),\n          page: get(policiesPagination, 'page', 0),\n          pageSize: policiesPagination !== 0 ? policiesPagination.size : initialState.policies.pageSize,\n          pageTotal: get(policiesPagination, 'totalPages', 0),\n          query: get(policiesPagination, 'searchBy') || '',\n          searchBy: get(action.payload.pagination, 'searchBy') || '',\n          isloadingTable: false\n        } : {}), {}, {\n          sort: _objectSpread({}, state.policies.sort),\n          filters: !isPolicyNonfilterTypCall ? policiesFiltersValues ? policiesFiltersValues : _objectSpread({}, state.policies.filters) : _objectSpread({}, state.policies.filters),\n          isloadingFilters: isPolicyNonfilterTypCall ? state.policies.isloadingFilters : false\n        })\n      });\n\n    case 'CLAIMS_POLICIES_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload,\n        policies: _objectSpread(_objectSpread({}, state.policies), {}, {\n          isloadingTable: false,\n          isloadingFilters: isPolicyNonfilterTypCall ? state.policies.isloadingFilters : false\n        })\n      });\n\n    case 'CLAIMS_POLICIES_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        policies: initialState.policies\n      });\n\n    case 'CLAIMS_COMPLEXITY_INSURED_GET_SUCCESS':\n      var claimsInsuredPagination = action.payload.pagination || {};\n      return _objectSpread(_objectSpread({}, state), {}, {\n        insured: _objectSpread(_objectSpread({}, state.insured), {}, {\n          items: action.payload.items || [],\n          itemsTotal: get(claimsInsuredPagination, 'totalElements', 0),\n          page: get(claimsInsuredPagination, 'page', 0),\n          pageSize: get(claimsInsuredPagination, 'size', initialState.insured.pageSize),\n          pageTotal: get(claimsInsuredPagination, 'totalPages', 0),\n          query: get(claimsInsuredPagination, 'query') || ''\n        })\n      });\n\n    case 'CLAIMS_POLICIES_RESET_TEMP':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        policyData: initialState.policyData,\n        policyInformation: initialState.policyInformation\n      });\n\n    case 'CLAIMS_POLICIES_REFERENCE':\n      var policyTypeCheck = action.payload.policyType;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        policyData: action.payload,\n        sectionEnabledUG: constants.CLAIM_SECTION_ENABLED_UG.indexOf(policyTypeCheck) > -1 || false,\n        claimDetailInformationSuccess: initialState.claimDetailInformationSuccess\n      });\n\n    case 'CLAIMS_POLICY_SECTIONS_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isPolicySectionsLoading: true\n      });\n\n    case 'CLAIMS_POLICY_SECTIONS_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        policySections: action.payload,\n        isPolicySectionsLoading: false\n      });\n\n    case 'CLAIMS_POLICY_SECTIONS_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload,\n        isPolicySectionsLoading: false\n      });\n\n    case 'CLAIMS_SETTLEMENT_CURRENCY_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        settlementCurrencies: action.payload\n      });\n\n    case 'LOSS_INFORMATION_POST_SUCCESS':\n    case 'GET_LOSS_INFORMATION_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        lossInformation: action.payload,\n        isLossInfoLoading: false\n      });\n\n    case 'CLAIMS_POST_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimsInformation: action.payload\n      });\n\n    case 'CLAIMS_INSURED_REMOVE_SUCCESS':\n      var checkedInsured = Object.keys(Object.fromEntries(Object.entries(action.payload).filter(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            key = _ref2[0],\n            value = _ref2[1];\n\n        return value;\n      })));\n      return _objectSpread(_objectSpread({}, state), {}, {\n        insured: _objectSpread(_objectSpread({}, state.insured), {}, {\n          items: state.insured.items.filter(function (item) {\n            return item.title !== checkedInsured[0];\n          })\n        })\n      });\n\n    case 'CLAIMS_SELECT_INTEREST_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        interest: _objectSpread(_objectSpread({}, state.interest), {}, {\n          isLoading: true\n        })\n      });\n\n    case 'CLAIMS_SELECT_INTEREST_GET_SUCCESS':\n      var payload = action.payload;\n      var defaultValue = payload.length === 1 ? payload[0].code : '';\n      return _objectSpread(_objectSpread({}, state), {}, {\n        interest: _objectSpread(_objectSpread({}, state.interest), {}, {\n          items: payload,\n          selectedInterest: defaultValue,\n          isLoading: false\n        })\n      });\n\n    case 'CLAIMS_SELECT_INTEREST_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload,\n        interest: _objectSpread(_objectSpread({}, state.interest), {}, {\n          isLoading: true\n        })\n      });\n\n    case 'CLAIMS_SELECT_INTEREST_VALUE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        interest: _objectSpread(_objectSpread({}, state.interest), {}, {\n          selectedInterest: action.payload\n        })\n      });\n\n    case 'CLAIMS_DETAILS_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        allClaimDetails: action.payload\n      });\n\n    case 'UPDATE_CLAIMS_DETAILS_INFORMATION':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimDetailInformation: action.payload\n      });\n\n    case 'CLAIMS_DETAILS_INFORMATION_POST_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimDetailInformationSuccess: action.payload,\n        claimsInformation: action.payload\n      });\n\n    case 'CLAIMS_DETAILS_INFORMATION_UPDATE_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimDetailInformationSuccess: action.payload,\n        claimsInformation: _objectSpread(_objectSpread({}, state.claimsInformation), action.payload.data)\n      });\n\n    case 'CLAIMS_PRIORITY_LEVELS_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        priorities: action.payload\n      });\n\n    case 'CLAIMS_REOPEN_TASK_LIST_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        reopenTaskList: action.payload\n      });\n\n    case 'CLAIMS_BE_ADJUSTER_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        beAdjuster: _objectSpread(_objectSpread({}, state.beAdjuster), {}, {\n          items: action.payload\n        })\n      });\n\n    case 'SET_CLAIMS_BE_ADJUSTER_VALUE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        beAdjuster: _objectSpread(_objectSpread({}, state.beAdjuster), {}, {\n          selectedbeAdjuster: action.payload\n        })\n      });\n\n    case 'CLAIMS_PREVIEW_INFORMATION_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isClaimsInfoLoading: true\n      });\n\n    case 'CLAIMS_PREVIEW_INFORMATION_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimsInformation: action.payload,\n        isClaimsInfoLoading: false\n      });\n\n    case 'CLAIMS_PREVIEW_INFORMATION_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload,\n        isClaimsInfoLoading: false\n      });\n\n    case 'SELECT_CLAIMS_COMPLEXITY':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityPolicies: _objectSpread(_objectSpread({}, state.complexityPolicies), {}, {\n          selectedComplexityPolicies: action.payload || []\n        })\n      });\n\n    case 'CLAIMS_COMPLEXITY_GET_SUCCESS':\n      var complexityPoliciesPagination = action.payload.pagination || {};\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityPolicies: _objectSpread(_objectSpread({}, state.complexityPolicies), {}, {\n          items: action.payload.data || [],\n          itemsTotal: get(complexityPoliciesPagination, 'totalElements', 0),\n          page: get(complexityPoliciesPagination, 'page', 1),\n          pageSize: get(complexityPoliciesPagination, 'size', initialState.complexityPolicies.pageSize),\n          pageTotal: get(complexityPoliciesPagination, 'totalPages', 0),\n          query: get(complexityPoliciesPagination, 'query') || ''\n        })\n      });\n\n    case 'CLAIMS_COMPLEXITY_FLAGGED_GET_SUCCESS':\n      var complexityPoliciesFlaggedPagination = action.payload.pagination || {};\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityPoliciesFlagged: _objectSpread(_objectSpread({}, state.complexityPoliciesFlagged), {}, {\n          items: action.payload.items || [],\n          itemsTotal: get(complexityPoliciesFlaggedPagination, 'totalElements', 0),\n          page: get(complexityPoliciesFlaggedPagination, 'page', 1),\n          pageSize: get(complexityPoliciesFlaggedPagination, 'size', initialState.complexityPoliciesFlagged.pageSize),\n          pageTotal: get(complexityPoliciesFlaggedPagination, 'totalPages', 0),\n          query: get(complexityPoliciesFlaggedPagination, 'query') || ''\n        })\n      });\n\n    case 'CLAIMS_DETAILS_INFORMATION_SUBMIT_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimsInformation: _objectSpread(_objectSpread({}, state.claimsInformation), {}, {\n          claimStatus: action.payload.claimStatus,\n          submitStatus: action.payload.responseData\n        })\n      });\n\n    case 'ADD_NEW_CLAIM_FOR_LOSS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimantNames: initialState.claimantNames,\n        claimsInformation: initialState.claimsInformation,\n        policyData: initialState.policyData,\n        policyInformation: initialState.policyInformation,\n        interest: initialState.interest,\n        policySections: initialState.underWritingGroups,\n        underWritingGroups: initialState.underWritingGroups,\n        allClaimDetails: initialState.allClaimDetails,\n        beAdjuster: initialState.beAdjuster,\n        claimDetailInformationSuccess: initialState.claimDetailInformationSuccess,\n        claimData: initialState.claimData\n      });\n\n    case 'UPDATE_CLAIMS_LOSS_FILTERS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimLossSearchFilters: action.payload\n      });\n\n    case 'CLAIMS_INSURED_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        insured: initialState.insured\n      });\n\n    case 'RESET_CLAIMS_LOSS_FILTERS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimLossSearchFilters: initialState.claimLossSearchFilters\n      });\n\n    case 'CLAIMS_LOSS_FILTERS_POST_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claims: _objectSpread(_objectSpread({}, state.claims), {}, {\n          filters: action.payload\n        })\n      });\n\n    case 'CLAIMS_COMPLEXITY_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityPolicies: initialState.complexityPolicies\n      });\n\n    case 'CHECKED_COMPLEX_ADD_POLICY':\n      var boolCheck = false;\n      var complexPoliciesData = state.complexityPolicies.selectedComplexityPolicies.map(function (item, idx) {\n        if (item.id === action.payload.id) {\n          item.checkedType = !item.checkedType;\n          boolCheck = true;\n        }\n\n        return item;\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityPolicies: _objectSpread(_objectSpread({}, state.complexityPolicies), {}, {\n          selectedComplexityPolicies: boolCheck ? complexPoliciesData : complexPoliciesData.length > 0 ? [].concat(_toConsumableArray(complexPoliciesData), [action.payload]) : [action.payload]\n        })\n      });\n\n    case 'CHECKED_COMPLEX_ADD_INSURED':\n      var insuredBoolCheck = false;\n      var complexInsuredData = state.complexInsured.selectedComplexityInsured.map(function (item, idx) {\n        if (item.id === action.payload.id) {\n          item.checkedType = !item.checkedType;\n          insuredBoolCheck = true;\n        }\n\n        return item;\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexInsured: _objectSpread(_objectSpread({}, state.complexInsured), {}, {\n          selectedComplexityInsured: insuredBoolCheck ? complexInsuredData : complexInsuredData.length > 0 ? [].concat(_toConsumableArray(complexInsuredData), [action.payload]) : [action.payload]\n        })\n      });\n\n    case 'CLAIMS_SAVE_COMPLEXITY_POLICY_POST_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityPolicies: _objectSpread(_objectSpread({}, state.complexityPolicies), {}, {\n          savedComplexPolicies: action.payload,\n          checkedComplexity: true\n        })\n      });\n\n    case 'CLAIMS_SAVE_COMPLEXITY_INSURED_POST_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexInsured: _objectSpread(_objectSpread({}, state.complexInsured), {}, {\n          savedComplexInsured: action.payload,\n          checkedComplexity: true\n        })\n      });\n\n    case 'SAVED_POLICIES_DATA':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        checkedComplexAddPolicies: [].concat(_toConsumableArray(state.checkedComplexAddPolicies), _toConsumableArray(action.payload))\n      });\n\n    case 'CLAIM_SET_DATA':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimData: action.payload\n      });\n\n    case 'CLAIM_RESET_DATA':\n      return _objectSpread({}, initialState);\n\n    case 'CLAIMS_SET_STEPPER_CONTROL':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimsStepper: action.payload\n      });\n\n    case 'CLAIMS_COMPLEXITY_TAB_SET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityManagement: _objectSpread(_objectSpread({}, initialState.complexityManagement), {}, {\n          activeTab: action.payload\n        }),\n        complexityBasisValues: _objectSpread({}, initialState.complexityBasisValues),\n        complexityReferralValues: _objectSpread({}, initialState.complexityReferralValues)\n      });\n\n    case 'CLAIMS_COMPLEXITY_DIVISION_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityManagement: _objectSpread(_objectSpread({}, state.complexityManagement), {}, {\n          division: action.payload,\n          divisionChanges: initialState.complexityManagement.divisionChanges\n        })\n      });\n\n    case 'CLAIMS_COMPLEXITY_DIVISION_SET_CHANGE':\n      var incomingFieldName = Object.keys(action.payload)[0];\n      var falseStateChange = Object.keys(state.complexityManagement.divisionChanges).indexOf(incomingFieldName) > -1;\n      var applicablePayload = falseStateChange ? {} : action.payload;\n\n      var applicableDivisionChanges = _objectSpread({}, state.complexityManagement.divisionChanges);\n\n      if (falseStateChange) {\n        delete applicableDivisionChanges[incomingFieldName];\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityManagement: _objectSpread(_objectSpread({}, state.complexityManagement), {}, {\n          divisionChanges: _objectSpread(_objectSpread({}, applicableDivisionChanges), applicablePayload)\n        })\n      });\n\n    case 'CLAIMS_COMPLEXITY_DIVISION_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityManagement: _objectSpread(_objectSpread({}, state.complexityManagement), {}, {\n          divisionChanges: initialState.complexityManagement.divisionChanges\n        })\n      });\n\n    case 'CLAIMS_COMPLEXITY_DIVISION_SAVE_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityManagement: _objectSpread(_objectSpread({}, state.complexityManagement), {}, {\n          divisionChanges: initialState.complexityManagement.divisionChanges\n        })\n      });\n\n    case 'CLAIMS_COMPLEXITY_SET_COMPLEX_VALUE_ID':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityManagement: _objectSpread(_objectSpread({}, state.complexityManagement), {}, {\n          complexityBasisValueId: action.payload\n        })\n      });\n\n    case 'CLAIMS_COMPLEXITY_BASIS_VALUE_GET_SUCCESS':\n      var complexityBasisValuePagination = action.payload.pagination || {};\n      var initialComplexityBasisSort = initialState.complexityBasisValues.sort;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityBasisValues: {\n          type: action.payload.type || '',\n          items: action.payload.data || [],\n          itemsTotal: get(complexityBasisValuePagination, 'totalElements', 0),\n          page: get(complexityBasisValuePagination, 'page', 1),\n          pageSize: get(complexityBasisValuePagination, 'size', initialState.complexityBasisValues.pageSize),\n          pageTotal: get(complexityBasisValuePagination, 'totalPages', 0),\n          query: get(complexityBasisValuePagination, 'query') || '',\n          sort: {\n            by: get(complexityBasisValuePagination, 'orderBy', initialComplexityBasisSort.by),\n            direction: get(complexityBasisValuePagination, 'direction', initialComplexityBasisSort.direction)\n          },\n          loaded: true\n        },\n        complexityManagement: _objectSpread(_objectSpread({}, initialState.complexityManagement), {}, {\n          activeTab: state.complexityManagement.activeTab,\n          complexityBasisValueId: state.complexityManagement.complexityBasisValueId\n        })\n      });\n\n    case 'CLAIMS_COMPLEXITY_BASIS_VALUE_GET_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityBasisValues: _objectSpread({}, initialState.complexityBasisValues)\n      });\n\n    case 'CLAIMS_ADD_COMPLEXITY_VALUES_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityManagement: _objectSpread(_objectSpread({}, initialState.complexityManagement), {}, {\n          activeTab: state.complexityManagement.activeTab,\n          complexityBasisValueId: state.complexityManagement.complexityBasisValueId\n        })\n      });\n\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_COMPLEX_ID_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityManagement: _objectSpread(_objectSpread({}, state.complexityManagement), {}, {\n          complexityBasisDivisionMatrix: initialState.complexityManagement.complexityBasisDivisionMatrix,\n          complexityBasisDivisionMatrixChanges: initialState.complexityManagement.complexityBasisDivisionMatrixChanges\n        })\n      });\n\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_COMPLEX_ID_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityManagement: _objectSpread(_objectSpread({}, state.complexityManagement), {}, {\n          complexityBasisDivisionMatrix: action.payload,\n          complexityBasisDivisionMatrixChanges: initialState.complexityManagement.complexityBasisDivisionMatrixChanges\n        })\n      });\n\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_COMPLEX_ID_SET_CHANGE':\n      var newComplexityDivisionFieldName = Object.keys(action.payload)[0];\n      var falseComplexityDivisionMatrixFieldChange = Object.keys(state.complexityManagement.complexityBasisDivisionMatrixChanges).indexOf(newComplexityDivisionFieldName) > -1;\n      var newComplexityDivisionPayload = falseComplexityDivisionMatrixFieldChange ? {} : action.payload;\n\n      var newComplexityDivisionChanges = _objectSpread({}, state.complexityManagement.complexityBasisDivisionMatrixChanges);\n\n      if (falseComplexityDivisionMatrixFieldChange) {\n        delete newComplexityDivisionChanges[newComplexityDivisionFieldName];\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityManagement: _objectSpread(_objectSpread({}, state.complexityManagement), {}, {\n          complexityBasisDivisionMatrixChanges: _objectSpread(_objectSpread({}, newComplexityDivisionChanges), newComplexityDivisionPayload)\n        })\n      });\n\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_COMPLEX_ID_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityManagement: _objectSpread(_objectSpread({}, state.complexityManagement), {}, {\n          complexityBasisDivisionMatrixChanges: initialState.complexityManagement.complexityBasisDivisionMatrixChanges\n        })\n      });\n\n    case 'CLAIMS_REMOVE_COMPLEXITY_VALUES_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityManagement: _objectSpread(_objectSpread({}, initialState.complexityManagement), {}, {\n          activeTab: state.complexityManagement.activeTab\n        })\n      });\n\n    case 'CLAIMS_COMPLEXITY_SET_REFERRAL_VALUE_ID':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityManagement: _objectSpread(_objectSpread({}, state.complexityManagement), {}, {\n          complexityReferralValueId: action.payload\n        })\n      });\n\n    case 'CLAIMS_COMPLEXITY_REFERRAL_VALUES_GET_SUCCESS':\n      var complexityReferralValuesPagination = action.payload.pagination || {};\n      var initialComplexityReferralSort = initialState.complexityReferralValues.sort;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityReferralValues: {\n          items: action.payload.data || [],\n          itemsTotal: get(complexityReferralValuesPagination, 'totalElements', 0),\n          page: get(complexityReferralValuesPagination, 'page', 1),\n          pageSize: get(complexityReferralValuesPagination, 'size', initialState.complexityReferralValues.pageSize),\n          pageTotal: get(complexityReferralValuesPagination, 'totalPages', 0),\n          query: get(complexityReferralValuesPagination, 'query') || '',\n          sort: {\n            by: get(complexityReferralValuesPagination, 'orderBy', initialComplexityReferralSort.by),\n            direction: get(complexityReferralValuesPagination, 'direction', initialComplexityReferralSort.direction)\n          }\n        },\n        complexityManagement: _objectSpread(_objectSpread({}, initialState.complexityManagement), {}, {\n          activeTab: state.complexityManagement.activeTab,\n          complexityReferralValueId: state.complexityManagement.complexityReferralValueId\n        })\n      });\n\n    case 'CLAIMS_COMPLEXITY_ADD_REFERRAL_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityManagement: _objectSpread(_objectSpread({}, initialState.complexityManagement), {}, {\n          activeTab: state.complexityManagement.activeTab,\n          complexityReferralValueId: state.complexityManagement.complexityReferralValueId\n        })\n      });\n\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_REFERRAL_ID_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityManagement: _objectSpread(_objectSpread({}, state.complexityManagement), {}, {\n          complexityReferralDivisionMatrix: initialState.complexityManagement.complexityReferralDivisionMatrix,\n          complexityReferralDivisionMatrixChanges: initialState.complexityManagement.complexityReferralDivisionMatrixChanges\n        })\n      });\n\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_REFERRAL_ID_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityManagement: _objectSpread(_objectSpread({}, state.complexityManagement), {}, {\n          complexityReferralDivisionMatrix: action.payload,\n          complexityReferralDivisionMatrixChanges: initialState.complexityManagement.complexityReferralDivisionMatrixChanges\n        })\n      });\n\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_REFERRAL_ID_SET_CHANGE':\n      var newReferralDivisionFieldName = Object.keys(action.payload)[0];\n      var falseReferralDivisionMatrixFieldChange = Object.keys(state.complexityManagement.complexityReferralDivisionMatrixChanges).indexOf(newReferralDivisionFieldName) > -1;\n      var newReferralDivisionPayload = falseReferralDivisionMatrixFieldChange ? {} : action.payload;\n\n      var newReferralDivisionChanges = _objectSpread({}, state.complexityManagement.complexityReferralDivisionMatrixChanges);\n\n      if (falseReferralDivisionMatrixFieldChange) {\n        delete newReferralDivisionChanges[newReferralDivisionFieldName];\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityManagement: _objectSpread(_objectSpread({}, state.complexityManagement), {}, {\n          complexityReferralDivisionMatrixChanges: _objectSpread(_objectSpread({}, newReferralDivisionChanges), newReferralDivisionPayload)\n        })\n      });\n\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_REFERRAL_ID_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityManagement: _objectSpread(_objectSpread({}, state.complexityManagement), {}, {\n          complexityReferralDivisionMatrixChanges: initialState.complexityManagement.complexityReferralDivisionMatrixChanges\n        })\n      });\n\n    case 'CLAIMS_REMOVE_REFERRAL_VALUES_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityManagement: _objectSpread(_objectSpread({}, initialState.complexityManagement), {}, {\n          activeTab: state.complexityManagement.activeTab\n        })\n      });\n\n    case 'UPDATE_CLAIMS_PROCESSING_FILTERS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimsProcessingData: action.payload\n      });\n\n    case 'USER_GET_USERS_BY_ORG_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimsAssignedToUsers: _objectSpread(_objectSpread({}, action.payload), {}, {\n          loaded: true\n        })\n      });\n\n    case 'CLAIMS_ASSIGNED_TO_USERS_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimsAssignedToUsers: _objectSpread({}, initialState.claimsAssignedToUsers)\n      });\n\n    case 'RESET_CLAIMS_PROCESSING_FILTERS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimsProcessingData: initialState.claimsProcessingData\n      });\n\n    case 'CLAIM_UPDATE_COMPLEX_STATUS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityPolicies: _objectSpread(_objectSpread({}, state.complexityPolicies), action.payload)\n      });\n\n    case 'CLAIMS_COMPLEXITY_SEARCH_POST_SUCCESS':\n      var complexityInsuredPagination = action.payload.pagination || {};\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexInsured: _objectSpread(_objectSpread({}, state.complexInsured), {}, {\n          items: action.payload.data || [],\n          itemsTotal: get(complexityInsuredPagination, 'totalElements', 0),\n          page: get(complexityInsuredPagination, 'page', 1),\n          pageSize: get(complexityInsuredPagination, 'size', initialState.complexInsured.pageSize),\n          pageTotal: get(complexityInsuredPagination, 'totalPages', 0),\n          query: get(complexityInsuredPagination, 'query') || ''\n        })\n      });\n\n    case 'CLAIMS_POPUP_INSURED_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexInsured: initialState.complexInsured\n      });\n\n    case 'SAVED_INSURED_DATA':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        checkedComplexAddInsured: [].concat(_toConsumableArray(state.checkedComplexAddInsured), _toConsumableArray(action.payload))\n      });\n\n    case 'CLAIMS_COMPLEXITY_VALUES_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityValues: action.payload\n      });\n\n    case 'CLAIM_COMPLEXITY_TYPES_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityTypes: action.payload\n      });\n\n    case 'CLAIMS_REFERRAL_VALUES_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        referralValues: action.payload\n      });\n\n    case 'CLAIMS_REFERRAL_RESPONSE_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        referralResponse: action.payload\n      });\n\n    case 'CLAIMS_QUERY_CODE_LIST_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        queryCode: action.payload\n      });\n\n    case 'CLAIMS_SET_PRIORITY_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        processing: _objectSpread(_objectSpread({}, state.processing), {}, {\n          items: state.processing.items.map(function (claim) {\n            var _claim$claimID, _action$payload$claim;\n\n            var newPriorityName = action.payload.priorityName;\n            var isSameClaimId = ((_claim$claimID = claim.claimID) === null || _claim$claimID === void 0 ? void 0 : _claim$claimID.toString()) === ((_action$payload$claim = action.payload.claimID) === null || _action$payload$claim === void 0 ? void 0 : _action$payload$claim.toString());\n\n            if (newPriorityName && isSameClaimId) {\n              return _objectSpread(_objectSpread({}, claim), {}, {\n                priority: newPriorityName\n              });\n            }\n\n            return claim;\n          })\n        })\n      });\n\n    case 'GET_ASSOCIATED_TASK_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasksProcessing: _objectSpread(_objectSpread({}, state.tasksProcessing), {}, {\n          associatedTaskDetails: action.payload\n        })\n      });\n\n    case 'TASKS_CLAIMS_REPORTING_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasksClaimsReporting: {\n          data: initialState.tasksClaimsReporting.data,\n          isDataLoading: true\n        }\n      });\n\n    case 'TASKS_CLAIMS_REPORTING_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasksClaimsReporting: {\n          data: action.payload,\n          isDataLoading: false\n        }\n      });\n\n    case 'TASKS_CLAIMS_REPORTING_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload,\n        tasksClaimsReporting: {\n          data: initialState.tasksClaimsReporting.data,\n          isDataLoading: false\n        }\n      });\n\n    case 'PROCESSING_NAVIGATION':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        processingNavigation: _objectSpread(_objectSpread({}, state.processingNavigation), {}, {\n          navigationItem: action.payload\n        })\n      });\n\n    case 'PROCESSING_CLAIM_VIEW_NAVIGATION':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        processingNavigation: _objectSpread(_objectSpread({}, state.processingNavigation), {}, {\n          selectedView: action.payload\n        })\n      });\n\n    case 'CLAIMS_BORDEREAU_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimBordereauPeriods: action.payload\n      });\n\n    case 'CLAIMS_POLICY_INSURED_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isClaimPolicyInsuresLoading: true\n      });\n\n    case 'CLAIMS_POLICY_INSURED_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimPolicyInsures: action.payload,\n        isClaimPolicyInsuresLoading: false\n      });\n\n    case 'CLAIMS_POLICY_INSURED_ERROR':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload,\n        isClaimPolicyInsuresLoading: false\n      });\n\n    case 'CLAIMS_POLICY_CLIENTS_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isPolicyClientsLoading: true\n      });\n\n    case 'CLAIMS_POLICY_CLIENTS_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimPolicyClients: action.payload,\n        isPolicyClientsLoading: false\n      });\n\n    case 'CLAIMS_POLICY_CLIENTS_ERROR':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isPolicyClientsLoading: false,\n        error: action.payload\n      });\n\n    case 'CHECK_IS_USER_CLAIM':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        processing: _objectSpread(_objectSpread({}, state.processing), {}, {\n          isUserClaim: action.payload\n        })\n      });\n\n    case 'CHECK_IS_CLOSED_CLAIM':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        processing: _objectSpread(_objectSpread({}, state.processing), {}, {\n          isClosedClaim: action.payload\n        })\n      });\n\n    case 'CHECK_IS_TEAM_CLAIM':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        processing: _objectSpread(_objectSpread({}, state.processing), {}, {\n          isTeamClaim: action.payload\n        })\n      });\n\n    case 'RESET_POLICY_INFORMATION':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        policyInformation: initialState.policyInformation\n      });\n\n    case 'RESET_LINK_POLICY_DATA':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        linkPolicies: initialState.linkPolicies\n      });\n\n    case 'GET_LOSS_DOCUMENT_DETAILS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        dmsDocDetails: _objectSpread(_objectSpread({}, state.dmsDocDetails), {}, {\n          lossDocDetails: action.payload\n        })\n      });\n\n    case 'GET_LINK_POLICY_DOCUEMENT_DETAILS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        dmsDocDetails: _objectSpread(_objectSpread({}, state.dmsDocDetails), {}, {\n          linkPolicyDocDetails: action.payload\n        })\n      });\n\n    case 'GET_CLAIMS_DOCUEMENT_DETAILS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        dmsDocDetails: _objectSpread(_objectSpread({}, state.dmsDocDetails), {}, {\n          claimsDocDetails: action.payload\n        })\n      });\n\n    case 'GET_MANAGE_DOC_LOSS_DOCUMENT_DETAILS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        dmsDocDetails: _objectSpread(_objectSpread({}, state.dmsDocDetails), {}, {\n          manageDocument: _objectSpread(_objectSpread({}, state.dmsDocDetails.manageDocument), {}, {\n            lossDocumentDetails: action.payload\n          })\n        })\n      });\n\n    case 'GET_MANAGE_DOC_CLAIM_DOCUMENT_DETAILS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        dmsDocDetails: _objectSpread(_objectSpread({}, state.dmsDocDetails), {}, {\n          manageDocument: _objectSpread(_objectSpread({}, state.dmsDocDetails.manageDocument), {}, {\n            claimDocumentDetails: action.payload\n          })\n        })\n      });\n\n    case 'GET_LINK_POLICIES_DATA':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        linkPolicies: _objectSpread(_objectSpread({}, state.linkPolicies), action.payload)\n      });\n\n    case 'RESET_LINK_POLICY_DOCUMENT_DETAILS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        dmsDocDetails: _objectSpread(_objectSpread({}, state.dmsDocDetails), {}, {\n          linkPolicyDocDetails: initialState.dmsDocDetails.linkPolicyDocDetails\n        })\n      });\n\n    case 'GET_LOSSES_TAB_DATA':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        lossesTab: _objectSpread(_objectSpread({}, state.lossesTab), action.payload)\n      });\n\n    case 'RESET_LOSSES_TAB_DATA':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        lossesTab: initialState.lossesTab\n      });\n\n    case 'GET_CLAIMS_TAB_DATA':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimsTab: _objectSpread(_objectSpread({}, state.claimsTab), {}, {\n          isClaimsTabLoaded: action.payload.isClaimsTabLoaded,\n          searchBy: action.payload.searchBy,\n          searchText: action.payload.searchText,\n          view: action.payload.view,\n          includedCloseClaims: action.payload.includedCloseClaims\n        })\n      });\n\n    case 'CLAIMS_TAB_DETAILS_GET_REQUEST':\n      var newReqType = action.payload.appliedParams.newReqType;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimsTab: _objectSpread(_objectSpread({}, state.claimsTab), {}, {\n          tableDetails: _objectSpread(_objectSpread({}, state.claimsTab.tableDetails), newReqType === constants.CLAIM_PROCESSING_REQ_TYPES.filter ? {\n            isloadingFilters: true\n          } : {})\n        })\n      });\n\n    case 'CLAIMS_TAB_DETAILS_GET_SUCCESS':\n      // const { filterValue, claimsSearchValue } = action.payload.items;\n      var claimsFilterValue = (_action$payload10 = action.payload) === null || _action$payload10 === void 0 ? void 0 : (_action$payload10$ite = _action$payload10.items) === null || _action$payload10$ite === void 0 ? void 0 : _action$payload10$ite.filterValue;\n      var claimsSearchValue = (_action$payload11 = action.payload) === null || _action$payload11 === void 0 ? void 0 : (_action$payload11$ite = _action$payload11.items) === null || _action$payload11$ite === void 0 ? void 0 : _action$payload11$ite.searchValue;\n      var claimsPageSize = get(action.payload.pagination, 'size', initialState === null || initialState === void 0 ? void 0 : (_initialState$claimsT = initialState.claimsTab) === null || _initialState$claimsT === void 0 ? void 0 : (_initialState$claimsT2 = _initialState$claimsT.tableDetails) === null || _initialState$claimsT2 === void 0 ? void 0 : _initialState$claimsT2.pageSize);\n      var claimReqType = action.payload.requestType;\n      var isClaimNonFilterTypeCall = claimReqType !== constants.CLAIM_PROCESSING_REQ_TYPES.filter;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimsTab: _objectSpread(_objectSpread({}, state.claimsTab), {}, {\n          tableDetails: _objectSpread(_objectSpread(_objectSpread({}, state.claimsTab.tableDetails), isClaimNonFilterTypeCall ? {\n            items: _toConsumableArray(utils.generic.isValidArray(claimsSearchValue) ? claimsSearchValue : []),\n            itemsTotal: get(action.payload.pagination, 'totalElements', 0),\n            page: get(action.payload.pagination, 'page', 0) + 1,\n            pageSize: claimsPageSize !== 0 ? claimsPageSize : initialState === null || initialState === void 0 ? void 0 : (_initialState$claimsT3 = initialState.claimsTab) === null || _initialState$claimsT3 === void 0 ? void 0 : (_initialState$claimsT4 = _initialState$claimsT3.tableDetails) === null || _initialState$claimsT4 === void 0 ? void 0 : _initialState$claimsT4.pageSize,\n            pageTotal: get(action.payload.pagination, 'totalPages', 0),\n            query: get(action.payload.pagination, 'search') || '',\n            searchBy: get(action.payload.pagination, 'searchBy') || ''\n          } : {}), {}, {\n            sort: {\n              by: get(action.payload.pagination, 'orderBy') || '',\n              direction: (get(action.payload.pagination, 'direction') || '').toLowerCase()\n            },\n            filters: !isClaimNonFilterTypeCall ? claimsFilterValue ? claimsFilterValue : _objectSpread({}, state.claimsTab.tableDetails.filters) : _objectSpread({}, state.claimsTab.tableDetails.filters),\n            isloadingFilters: isClaimNonFilterTypeCall ? state.claimsTab.tableDetails.isloadingFilters : false,\n            selected: []\n          })\n        })\n      });\n\n    case 'CLAIMS_TAB_DETAILS_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload,\n        claimsTab: _objectSpread(_objectSpread({}, state.claimsTab), {}, {\n          tableDetails: _objectSpread(_objectSpread({}, state.claimsTab.tableDetails), {}, {\n            isloadingFilters: isNonfilterTypCall ? state.claimsTab.tableDetails.isloadingFilters : false\n          })\n        })\n      });\n\n    case 'CLAIMS_TAB_TABLE_SELECT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimsTab: _objectSpread(_objectSpread({}, state === null || state === void 0 ? void 0 : state.claimsTab), {}, {\n          tableDetails: _objectSpread(_objectSpread({}, state.claimsTab.tableDetails), {}, {\n            selected: action.payload.forceSingleItem ? [action.payload.claimObj] : xorBy((state === null || state === void 0 ? void 0 : (_state$claimsTab = state.claimsTab) === null || _state$claimsTab === void 0 ? void 0 : (_state$claimsTab$tabl = _state$claimsTab.tableDetails) === null || _state$claimsTab$tabl === void 0 ? void 0 : _state$claimsTab$tabl.selected) || [], [(_action$payload12 = action.payload) === null || _action$payload12 === void 0 ? void 0 : _action$payload12.claimObj], 'processID')\n          })\n        })\n      });\n\n    case 'CLAIMS_EDIT_RE_OPENED_TASK_SUCCESS':\n    case 'CLAIMS_COMPLEXITY_VALUES_GET_FAILURE':\n    case 'CLAIMS_SAVE_COMPLEXITY_INSURED_POST_ERROR':\n    case 'CLAIMS_COMPLEXITY_SEARCH_POST_FAILURE':\n    case 'CLAIMS_PROCESSING_FILTER_POST_ERROR':\n    case 'CLAIMS_LOSS_FILTER_POST_ERROR':\n    case 'CLAIMS_LOSS_FILTER_GET_ERROR':\n    case 'CLAIMS_DETAILS_INFORMATION_POST_FAILURE':\n    case 'CLAIMS_GET_FAILURE':\n    case 'USER_GET_USERS_BY_ORG_FAILURE':\n    case 'CLAIMS_DETAILS_ERROR':\n    case 'CLAIMS_SETTLEMENT_CURRENCY_GET_FAILURE':\n    case 'CLAIMS_LOSS_QUALIFIERS_GET_FAILURE':\n    case 'CLAIMS_COMPLEXITY_INSURED_GET_FAILURE':\n    case 'CLAIMS_PRIORITY_LEVELS_GET_FAILURE':\n    case 'CLAIMS_BE_ADJUSTER_GET_FAILURE':\n    case 'CLAIMS_UNDERWRITING_GROUPS_GET_FAILURE':\n    case 'CLAIMS_STATUSES_GET_FAILURE':\n    case 'CLAIMS_COMPLEXITY_GET_FAILURE':\n    case 'CLAIMS_DETAILS_INFORMATION_SUBMIT_FAILURE':\n    case 'CLAIMS_COMPLEXITY_DIVISION_GET_FAILURE':\n    case 'CLAIMS_COMPLEXITY_DIVISION_SAVE_FAILURE':\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_COMPLEX_ID_GET_FAILURE':\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_COMPLEX_ID_SAVE_FAILURE':\n    case 'CLAIMS_ADD_COMPLEXITY_VALUES_FAILURE':\n    case 'CLAIMS_REMOVE_COMPLEXITY_VALUES_FAILURE':\n    case 'CLAIMS_COMPLEXITY_ADD_REFERRAL_FAILURE':\n    case 'CLAIMS_COMPLEXITY_FLAGGED_GET_FAILURE':\n    case 'CLAIMS_REMOVE_REFERRAL_VALUES_FAILURE':\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_REFERRAL_ID_GET_FAILURE':\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_REFERRAL_ID_SAVE_FAILURE':\n    case 'CLAIMS_COMPLEXITY_REFERRAL_VALUES_GET_FAILURE':\n    case 'CLAIMS_SAVE_COMPLEXITY_POLICY_POST_ERROR':\n    case 'CLAIMS_REFERRAL_VALUES_GET_FAILURE':\n    case 'CLAIMS_COMPLEXITY_BASIS_VALUE_GET_FAILURE':\n    case 'CLAIMS_REFERRAL_RESPONSE_GET_FAILURE':\n    case 'CLAIMS_COMPLEXITY_POLICY_REMOVE_FAILURE':\n    case 'CLAIMS_COMPLEXITY_INSURED_REMOVE_FAILURE':\n    case 'CLAIMS_SAVE_NOTES_POST_ERROR':\n    case 'CLAIM_NOTES_POST_FAILURE':\n    case 'CLAIM_TASK_NOTES_GET_FAILURE':\n    case 'CLAIMS_TASK_PRIORITY_POST_FAILURE':\n    case 'CLAIMS_TASK_SANCTIONS_CHECK_POST_FAILURE':\n    case 'CLAIMS_TASK_PROCESSING_SAVE_ASSIGNEES_ERROR':\n    case 'CLAIMS_TASK_PROCESSING_GET_CHECKLIST_FAILURE':\n    case 'CLAIMS_TASK_PROCESSING_GET_NEXT_TASKLIST_FAILURE':\n    case 'CLAIMS_TASK_PROCESSING_SAVE_CHECKLIST_ACTIONS_ERROR':\n    case 'CLAIMS_TASK_PROCESSING_SAVE_NEXT_ACTION_ERROR':\n    case 'CLAIMS_TASK_DASHBOARD_DETAIL_GET_FAILURE':\n    case 'CLAIMS_SET_PRIORITY_FAILURE':\n    case 'GET_ASSOCIATED_TASK_FAILURE':\n    case 'CLAIMREF_EDIT_NOTES_FAILURE':\n    case 'CURRENCY_PURCHASED_VALUE_GET_FAILURE':\n    case 'CLAIMS_GET_RFI_HISTORY_FAILURE':\n    case 'CLOSE_SANCTIONS_CHECK_FAILURE':\n    case 'CLAIM_RETURN_TO_TEAM_QUEUE_ERROR':\n    case 'CLAIMS_SEND_RFI_POST_FAILURE':\n    case 'CLAIMS_CLOSE_RFI_POST_FAILURE':\n    case 'CLOSE_CLAIMS_POST_ERROR':\n    case 'CLAIM_COMPLEXITY_TYPES_GET_FAILURE':\n    case 'CLAIMS_PROCESSING_SINGLE_ASSIGN_ERROR':\n    case 'CLAIMS_BORDEREAU_ERROR':\n    case 'CLAIMS_COUNTRIESLIST_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default claimsReducer;","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.reducers.js"],"names":["get","xorBy","config","constants","utils","initialState","isChoosing","sectionEnabledUG","claimsStepper","catCodes","claimsAssociateWithLoss","claimantNames","lossQualifiers","lossInformation","claimsInformation","isClaimsInfoLoading","isLossInfoLoading","isPolicyInfoLoading","isPolicySectionsLoading","settlementCurrencies","queryCode","sendToList","policyData","policyID","policyInformation","claims","items","itemsTotal","page","pageSize","ui","pagination","default","pageTotal","query","sort","by","direction","searchBy","filters","processing","selected","CLAIMS_SEARCH_OPTION_CLAIM_REF","isloadingFilters","isUserClaim","isClosedClaim","isTeamClaim","tasksProcessing","selectedTaskType","rfiCount","appliedFilters","type","associatedTaskDetails","policies","CLAIMS_POLICY_SEARCH_OPTION","policyRef","isloadingTable","claimPoliciesSearchFilters","search","policyType","insured","reinsured","client","riskDetails","inceptionDate","expiryDate","division","policyStatus","sanctionsCheck","policySections","interest","selectedInterest","isLoading","notes","options","rfis","audits","taskNotes","rfiHistory","rfiCreated","underWritingGroups","percentageOfSelected","allClaimDetails","claimBordereauPeriods","claimPolicyInsures","isClaimPolicyInsuresLoading","claimPolicyClients","isPolicyClientsLoading","claimDetailInformation","claimDetailInformationSuccess","beAdjuster","selectedbeAdjuster","priorities","reopenTaskList","claimsProcessingData","dateAndTimeCreated","targetDueDate","team","assignedToDropdownList","priority","status","claimsRefData","claimStatus","claimant","lossDateFrom","lossDateTo","lossName","claimLossSearchFilters","claimsProcessingSearchFilters","statuses","complexityPolicies","selectedComplexityPolicies","savedComplexPolicies","checkedComplexity","complexityPoliciesFlagged","complexityBasisValues","loaded","complexityReferralValues","checkedComplexAddPolicies","claimData","complexityManagement","activeTab","divisionChanges","complexityBasisValueId","complexityBasisDivisionMatrix","complexityBasisDivisionMatrixChanges","complexityReferralValueId","complexityReferralDivisionMatrix","complexityReferralDivisionMatrixChanges","complexInsured","selectedComplexityInsured","savedComplexInsured","checkedComplexAddInsured","complexityValues","complexityTypes","referralValues","referralResponse","refTabTasks","claimsAssignedToUsers","orgName","taskDashboard","taskDetails","checkList","nextActions","checkListChanges","checkListChangesPushed","nextActionChangesPushed","purchasedCurrencyRequired","setPriority","claimPriority","adhocTask","data","tasksClaimsReporting","isDataLoading","processingNavigation","navigationItem","CLAIMS_PROCESSING_TAB_SELECTION","selectedView","CLAIM_TEAM_TYPE","myClaims","countriesList","lossDocDetails","dmsDocDetails","linkPolicyDocDetails","claimsDocDetails","manageDocument","lossDocumentDetails","claimDocumentDetails","linkPolicies","searchTerm","loader","fieldLoader","lossActions","lossesTab","searchText","claimsTab","isClaimsTabLoaded","view","includedCloseClaims","tableDetails","CLAIMS_SEARCH_OPTION_INSURED","claimsReducer","state","action","payload","getNotesItems","filter","item","idx","caseIncidentNotesID","isArrayLargerThanPageSize","length","slice","createAdHocResp","error","claimsStatusObj","reduce","acc","name","id","toString","selectPolicyType","CLAIM_SECTION_ENABLED_UG","indexOf","map","policyUnderWritingGroupDtoList","includes","groupRef","remained","initial","a","b","localeCompare","selectedPercentage","current","percentage","Math","floor","split","toFixed","sortedUnderwritingGroups","updatedStatus","claimID","claimStatusID","claimStatusId","updatedLoss","catCodesID","isActive","lossDescription","fromDate","toDate","firstContactDate","newRequestType","appliedParams","CLAIM_PROCESSING_REQ_TYPES","filterValue","searchValue","claimRequestType","requestType","isNonfilterTypCall","generic","isValidArray","toLowerCase","forceSingleItem","claimObj","isTaskNotesArrayLargerThanPageSize","taskReqType","taskType","taskSortBy","sortBy","taskDir","dir","navigation","tasksFiltersValues","tasksSearchValues","taskRfiCount","rfiTasksCount","tasksPagination","tasksAppliedFilters","initTaskProcessing","initTaskProcessingSort","stateTaskProcessing","prevTaskProcessingSelected","isNonfilterTypeCall","taskProcessingError","isNonFilterTypeCall","taskSelectObj","taskObj","keepPreviousTasks","newTasksSelectedArray","selectedOption","loading","claimProcessingTaskTypeSelected","refTaskReqType","refTaskReqstType","claimRefSortBy","claimRefDir","claimRefQuery","refTasksFiltersValues","refTasksSearchValues","refTasksPagination","refTasksAppliedFilters","initRefTabTasks","initRefTabTasksSort","stateRefTabTasks","isNonfilterTypeReq","claimsPagination","newPolicyRequestType","CLAIM_POLICY_SEARCH_REQ_TYPES","policiesFiltersValues","policiesSearchValues","policiesPagination","policyRequestType","isPolicyNonfilterTypCall","size","claimsInsuredPagination","policyTypeCheck","checkedInsured","Object","keys","fromEntries","entries","key","value","title","defaultValue","code","complexityPoliciesPagination","complexityPoliciesFlaggedPagination","submitStatus","responseData","boolCheck","complexPoliciesData","checkedType","insuredBoolCheck","complexInsuredData","incomingFieldName","falseStateChange","applicablePayload","applicableDivisionChanges","complexityBasisValuePagination","initialComplexityBasisSort","newComplexityDivisionFieldName","falseComplexityDivisionMatrixFieldChange","newComplexityDivisionPayload","newComplexityDivisionChanges","complexityReferralValuesPagination","initialComplexityReferralSort","newReferralDivisionFieldName","falseReferralDivisionMatrixFieldChange","newReferralDivisionPayload","newReferralDivisionChanges","complexityInsuredPagination","claim","newPriorityName","priorityName","isSameClaimId","newReqType","claimsFilterValue","claimsSearchValue","claimsPageSize","claimReqType","isClaimNonFilterTypeCall"],"mappings":"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","sourcesContent":["import get from 'lodash/get';\r\nimport xorBy from 'lodash/xorBy';\r\n\r\n// app\r\nimport config from 'config';\r\nimport * as constants from 'consts';\r\nimport * as utils from 'utils';\r\n\r\nconst initialState = {\r\n  isChoosing: false,\r\n  sectionEnabledUG: false,\r\n  claimsStepper: 0,\r\n  catCodes: [],\r\n  claimsAssociateWithLoss: [],\r\n  claimantNames: [],\r\n  lossQualifiers: [],\r\n  lossInformation: {},\r\n  claimsInformation: {},\r\n  isClaimsInfoLoading: false,\r\n  isLossInfoLoading: false,\r\n  isPolicyInfoLoading: false,\r\n  isPolicySectionsLoading: false,\r\n  settlementCurrencies: [],\r\n  queryCode: [],\r\n  sendToList: [],\r\n  policyData: {\r\n    policyID: null,\r\n  },\r\n  policyInformation: {},\r\n  claims: {\r\n    items: [],\r\n    itemsTotal: 0,\r\n    page: 1,\r\n    pageSize: config.ui.pagination.default,\r\n    pageTotal: 0,\r\n    query: '',\r\n    sort: {\r\n      by: 'lossRef',\r\n      direction: 'desc',\r\n    },\r\n    searchBy: 'claimantName',\r\n    filters: {},\r\n  },\r\n  processing: {\r\n    selected: [],\r\n    items: [],\r\n    itemsTotal: 0,\r\n    page: 1,\r\n    pageSize: config.ui.pagination.default,\r\n    pageTotal: 0,\r\n    query: '',\r\n    sort: {\r\n      by: 'createdDate',\r\n      direction: 'desc',\r\n    },\r\n    searchBy: constants.CLAIMS_SEARCH_OPTION_CLAIM_REF,\r\n    filters: {},\r\n    isloadingFilters: false,\r\n    isUserClaim: false,\r\n    isClosedClaim: false,\r\n    isTeamClaim: false,\r\n  },\r\n  tasksProcessing: {\r\n    selectedTaskType: '',\r\n    selected: [],\r\n    items: [],\r\n    rfiCount: '',\r\n    itemsTotal: 0,\r\n    page: 1,\r\n    pageSize: config.ui.pagination.default,\r\n    pageTotal: 0,\r\n    query: '',\r\n    searchBy: 'taskRef',\r\n    isloadingFilters: false,\r\n    filters: {},\r\n    appliedFilters: [],\r\n    sort: {\r\n      by: 'targetDueDate, priority',\r\n      type: 'lexical',\r\n      direction: 'asc',\r\n    },\r\n    associatedTaskDetails: {},\r\n  },\r\n  policies: {\r\n    items: [],\r\n    itemsTotal: 0,\r\n    page: 0,\r\n    pageSize: config.ui.pagination.default,\r\n    pageTotal: 0,\r\n    query: '',\r\n    sort: {\r\n      by: 'policyRef',\r\n      direction: 'desc',\r\n    },\r\n    searchBy: constants.CLAIMS_POLICY_SEARCH_OPTION.policyRef,\r\n    filters: {},\r\n    isloadingFilters: false,\r\n    isloadingTable: false\r\n  },\r\n  claimPoliciesSearchFilters: {\r\n    search: '',\r\n    filters: {\r\n      policyType: [],\r\n      insured: [],\r\n      reinsured: [],\r\n      client: [],\r\n      riskDetails: [],\r\n      inceptionDate: null,\r\n      expiryDate: null,\r\n      division: [],\r\n      policyStatus: [],\r\n      sanctionsCheck: [],\r\n    },\r\n  },\r\n  policySections: [],\r\n  interest: {\r\n    items: [],\r\n    selectedInterest: '',\r\n    isLoading: false\r\n  },\r\n  insured: {\r\n    items: [],\r\n    itemsTotal: 0,\r\n    page: 0,\r\n    pageSize: config.ui.pagination.default,\r\n    pageTotal: 0,\r\n    query: '',\r\n    sort: {\r\n      by: 'sourceID',\r\n      direction: 'desc',\r\n    },\r\n  },\r\n  notes: {\r\n    items: [],\r\n    itemsTotal: 0,\r\n    page: 0,\r\n    pageSize: config.ui.pagination.options[0],\r\n    pageTotal: 0,\r\n    query: '',\r\n    sort: {\r\n      by: 'updatedDate',\r\n      direction: 'desc',\r\n      type: 'date',\r\n    },\r\n    filters: [],\r\n  },\r\n  rfis: {\r\n    items: [],\r\n    itemsTotal: 0,\r\n    page: 0,\r\n    pageSize: config.ui.pagination.options[1],\r\n    pageTotal: 0,\r\n    query: '',\r\n    sort: {\r\n      by: 'targetDueDate, priority',\r\n      direction: 'asc',\r\n      type: 'date',\r\n    },\r\n    filters: [],\r\n  },\r\n  audits: {\r\n    items: [],\r\n    itemsTotal: 0,\r\n    page: 0,\r\n    pageSize: config.ui.pagination.options[0],\r\n    pageTotal: 0,\r\n    query: '',\r\n    sort: {\r\n      by: 'createdBy',\r\n      direction: 'desc',\r\n    },\r\n    filters: [],\r\n  },\r\n  taskNotes: {\r\n    items: [],\r\n    itemsTotal: 0,\r\n    page: 0,\r\n    pageSize: config.ui.pagination.options[0],\r\n    pageTotal: 0,\r\n    query: '',\r\n    sort: {\r\n      by: 'updatedDate',\r\n      direction: 'desc',\r\n      type: 'date',\r\n    },\r\n    filters: [],\r\n  },\r\n  rfiHistory: [],\r\n  rfiCreated: {},\r\n  underWritingGroups: {\r\n    items: [],\r\n    percentageOfSelected: 0,\r\n    sort: {\r\n      by: 'groupRef',\r\n      direction: 'asc',\r\n    },\r\n    isLoading: false\r\n  },\r\n  allClaimDetails: {},\r\n  claimBordereauPeriods: [],\r\n  claimPolicyInsures: [],\r\n  isClaimPolicyInsuresLoading: false,\r\n  claimPolicyClients: [],\r\n  isPolicyClientsLoading: false,\r\n  claimDetailInformation: {},\r\n  claimDetailInformationSuccess: null,\r\n  beAdjuster: {\r\n    items: [],\r\n    selectedbeAdjuster: null,\r\n  },\r\n  priorities: [],\r\n  reopenTaskList: [],\r\n  claimsProcessingData: {\r\n    search: '',\r\n    filters: {\r\n      dateAndTimeCreated: '',\r\n      targetDueDate: '',\r\n      team: [],\r\n      assignedToDropdownList: [],\r\n      priority: [],\r\n      status: [],\r\n    },\r\n  },\r\n  claimsRefData: {\r\n    claimStatus: [],\r\n    claimant: [],\r\n    lossDateFrom: [],\r\n    lossDateTo: [],\r\n    lossName: [],\r\n    insured: [],\r\n    priority: [],\r\n  },\r\n  claimLossSearchFilters: {\r\n    search: '',\r\n    filters: {\r\n      claimStatus: [],\r\n      claimant: [],\r\n      lossDateFrom: null,\r\n      lossDateTo: null,\r\n      lossName: [],\r\n      insured: [],\r\n      priority: [],\r\n    },\r\n  },\r\n  claimsProcessingSearchFilters: {\r\n    search: '',\r\n    filters: {\r\n      dateAndTimeCreated: [],\r\n      targetDueDate: [],\r\n      team: [],\r\n      assignedToDropdownList: [],\r\n      priority: [],\r\n      status: [],\r\n    },\r\n  },\r\n  statuses: [],\r\n  complexityPolicies: {\r\n    items: [],\r\n    itemsTotal: 0,\r\n    page: 1,\r\n    pageSize: config.ui.pagination.default,\r\n    pageTotal: 0,\r\n    query: '',\r\n    sort: {\r\n      by: 'policyRef',\r\n      direction: 'asc',\r\n    },\r\n    selectedComplexityPolicies: [],\r\n    savedComplexPolicies: [],\r\n    checkedComplexity: false,\r\n  },\r\n  complexityPoliciesFlagged: {\r\n    items: [],\r\n    itemsTotal: 0,\r\n    page: 1,\r\n    pageSize: config.ui.pagination.default,\r\n    pageTotal: 0,\r\n    query: null,\r\n    sort: {\r\n      by: 'policyRef',\r\n      direction: 'asc',\r\n    },\r\n  },\r\n  complexityBasisValues: {\r\n    type: '',\r\n    items: null,\r\n    itemsTotal: 0,\r\n    page: 1,\r\n    pageSize: 5,\r\n    pageTotal: 0,\r\n    query: '',\r\n    sort: {\r\n      by: 'createdDate',\r\n      direction: 'desc',\r\n    },\r\n    loaded: false,\r\n  },\r\n  complexityReferralValues: {\r\n    items: null,\r\n    itemsTotal: 0,\r\n    page: 1,\r\n    pageSize: 5,\r\n    pageTotal: 0,\r\n    query: '',\r\n    sort: {\r\n      by: 'createdDate',\r\n      direction: 'desc',\r\n    },\r\n  },\r\n  checkedComplexAddPolicies: [],\r\n  claimData: {},\r\n  complexityManagement: {\r\n    activeTab: '',\r\n    division: [],\r\n    divisionChanges: {},\r\n    complexityBasisValueId: {},\r\n    complexityBasisDivisionMatrix: [],\r\n    complexityBasisDivisionMatrixChanges: {},\r\n    complexityReferralValueId: {},\r\n    complexityReferralDivisionMatrix: [],\r\n    complexityReferralDivisionMatrixChanges: {},\r\n  },\r\n  complexInsured: {\r\n    items: null,\r\n    itemsTotal: 0,\r\n    page: 0,\r\n    pageSize: config.ui.pagination.default,\r\n    pageTotal: 0,\r\n    query: '',\r\n    sort: {\r\n      by: 'insured',\r\n      direction: 'asc',\r\n    },\r\n    selectedComplexityInsured: [],\r\n    savedComplexInsured: [],\r\n    checkedComplexity: false,\r\n  },\r\n  checkedComplexAddInsured: [],\r\n  complexityValues: [],\r\n  complexityTypes: [],\r\n  referralValues: [],\r\n  referralResponse: [],\r\n  refTabTasks: {\r\n    selected: [],\r\n    items: [],\r\n    itemsTotal: 0,\r\n    page: 1,\r\n    pageSize: config.ui.pagination.options[0],\r\n    pageTotal: 0,\r\n    query: '',\r\n    filters: [],\r\n    appliedFilters: [],\r\n    sort: {\r\n      by: 'taskRef',\r\n      type: 'lexical',\r\n      direction: 'desc',\r\n    },\r\n  },\r\n  claimsAssignedToUsers: {\r\n    type: '',\r\n    orgName: '',\r\n    items: [],\r\n    loaded: false,\r\n  },\r\n  taskDashboard: {\r\n    taskDetails: { items: {}, query: '' },\r\n    checkList: [],\r\n    nextActions: [],\r\n    checkListChanges: [],\r\n    checkListChangesPushed: [],\r\n    nextActionChangesPushed: [],\r\n    purchasedCurrencyRequired: '',\r\n  },\r\n  setPriority: {\r\n    claimPriority: {},\r\n  },\r\n  adhocTask: {\r\n    status: false,\r\n    data: {},\r\n  },\r\n  tasksClaimsReporting: {\r\n    data: {},\r\n    isDataLoading: false,\r\n  },\r\n  processingNavigation: {\r\n    navigationItem: constants.CLAIMS_PROCESSING_TAB_SELECTION,\r\n    selectedView: constants.CLAIM_TEAM_TYPE.myClaims,\r\n  },\r\n  countriesList: [],\r\n  lossDocDetails: [],\r\n  dmsDocDetails: {\r\n    lossDocDetails: [],\r\n    linkPolicyDocDetails: [],\r\n    claimsDocDetails: [],\r\n    manageDocument: {\r\n      lossDocumentDetails: [],\r\n      claimDocumentDetails: [],\r\n    },\r\n  },\r\n  linkPolicies: {\r\n    searchBy: '',\r\n    searchTerm: '',\r\n    data: {},\r\n    loader: false,\r\n    fieldLoader: false\r\n  },\r\n  lossActions: {\r\n    items: [],\r\n    itemsTotal: 0,\r\n    page: 0,\r\n    pageSize: config.ui.pagination.options[1],\r\n    pageTotal: 0,\r\n    query: '',\r\n    sort: {\r\n      by: 'targetDueDate, priority',\r\n      direction: 'asc',\r\n      type: 'date',\r\n    },\r\n    filters: [],\r\n    fieldLoader: false,\r\n  },\r\n  lossesTab: {\r\n    isLoading: false,\r\n    searchBy: '',\r\n    searchText: '',\r\n  },\r\n  claimsTab: {\r\n    isClaimsTabLoaded: false,\r\n    searchBy: '',\r\n    searchText: '',\r\n    view: '',\r\n    includedCloseClaims: false,\r\n    tableDetails: {\r\n      selected: [],\r\n      items: [],\r\n      itemsTotal: 0,\r\n      page: 1,\r\n      pageSize: config.ui.pagination.default,\r\n      pageTotal: 0,\r\n      query: '',\r\n      sort: {\r\n        by: 'createdDate',\r\n        direction: 'desc',\r\n      },\r\n      searchBy: constants.CLAIMS_SEARCH_OPTION_INSURED,\r\n      filters: {},\r\n      isloadingFilters: false,\r\n    }\r\n  }\r\n};\r\n\r\nconst claimsReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'CLAIMS_ASSOCIATE_WITH_LOSS_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        claimsAssociateWithLoss: action.payload,\r\n      };\r\n    case 'CLAIMREF_EDIT_NOTES_SUCCESS':\r\n      // eslint-disable-next-line array-callback-return\r\n      const getNotesItems = state.notes.items.filter((item, idx) =>\r\n        item.caseIncidentNotesID !== action.payload.caseIncidentNotesID ? item : null\r\n      );\r\n      return {\r\n        ...state,\r\n        notes: {\r\n          ...state.notes,\r\n          items: [action.payload, ...getNotesItems],\r\n        },\r\n      };\r\n    case 'CLAIMS_SAVE_NOTES_POST_SUCCESS':\r\n      const isArrayLargerThanPageSize = state.notes.items.length + 1 > state.notes.pageSize;\r\n      return {\r\n        ...state,\r\n        notes: {\r\n          ...state.notes,\r\n          items: isArrayLargerThanPageSize ? [action.payload, ...state.notes.items.slice(0, -1)] : [action.payload, ...state.notes.items],\r\n          itemsTotal: state.notes.itemsTotal + 1,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_ADHOC_TASK_RESET_STATUS':\r\n    case 'CLAIMS_SAVE_ADHOC_TASK_POST_REQUEST':\r\n    case 'CLAIMS_EDIT_ADHOC_TASK_POST_REQUEST':\r\n      return {\r\n        ...state,\r\n        adhocTask: { ...initialState.adhocTask },\r\n      };\r\n    case 'CLAIMS_SAVE_ADHOC_TASK_POST_SUCCESS':\r\n      const createAdHocResp = action?.payload;\r\n      return {\r\n        ...state,\r\n        adhocTask: {\r\n          status: createAdHocResp?.status === 'OK' || initialState.adhocTask.status,\r\n          data: createAdHocResp?.data,\r\n        },\r\n      };\r\n    case 'CLAIMS_SAVE_ADHOC_TASK_POST_FAILURE':\r\n    case 'CLAIMS_EDIT_ADHOC_TASK_POST_FAILURE':\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        adhocTask: { ...initialState.rfiCreated },\r\n      };\r\n\r\n    case 'CLAIMS_EDIT_ADHOC_TASK_POST_SUCCESS':\r\n      const status = action?.payload?.status;\r\n      return {\r\n        ...state,\r\n        adhocTask: {\r\n          ...state.adhocTask,\r\n          status: status === 'OK' || initialState.adhocTask.status,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_SAVE_RFI_POST_REQUEST':\r\n      return {\r\n        ...state,\r\n        rfiCreated: initialState.rfiCreated,\r\n      };\r\n    case 'CLAIMS_SAVE_RFI_POST_SUCCESS':\r\n      return {\r\n        ...state,\r\n        rfiCreated: action.payload,\r\n      };\r\n    case 'CLAIMS_SAVE_RFI_POST_FAILURE':\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        rfiCreated: initialState.rfiCreated,\r\n      };\r\n\r\n    case 'CLOSE_SANCTIONS_CHECK_SUCCESS':\r\n    case 'CLOSE_CLAIMS_POST_SUCCESS':\r\n      return {\r\n        ...state,\r\n      };\r\n    case 'CLAIMS_CAT_CODES_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        catCodes: action.payload,\r\n      };\r\n    case 'CLAIMS_STATUSES_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        statuses: action.payload,\r\n        claimsStatusObj: action.payload?.reduce((acc, status) => {\r\n          const { name, id } = status;\r\n          return { ...acc, [name]: id?.toString() };\r\n        }, {}),\r\n      };\r\n    case 'CLAIMS_COUNTRIESLIST_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        countriesList: action.payload,\r\n      };\r\n    case 'CLAIMS_CLAIMANT_NAMES_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        claimantNames: action.payload,\r\n      };\r\n    case 'CLAIMS_CLAIMANT_NAMES_UPDATE_SUCCESS':\r\n      return {\r\n        ...state,\r\n        claimantNames: [...state.claimantNames, { id: action.payload.id + 1, name: action.payload.name }],\r\n      };\r\n    case 'CLAIMS_LOSS_QUALIFIERS_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        lossQualifiers: action.payload,\r\n      };\r\n    case 'CLAIMS_POLICY_INFORMATION_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        isPolicyInfoLoading: true,\r\n      };\r\n    case 'CLAIMS_POLICY_INFORMATION_GET_SUCCESS':\r\n      const selectPolicyType = action.payload.policyType;\r\n      return {\r\n        ...state,\r\n        policyInformation: action.payload,\r\n        sectionEnabledUG: constants.CLAIM_SECTION_ENABLED_UG.indexOf(selectPolicyType) > -1 || false,\r\n        isPolicyInfoLoading: false,\r\n      };\r\n    case 'CLAIMS_POLICY_INFORMATION_GET_FAILURE':\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        isPolicyInfoLoading: false,\r\n      };\r\n    case 'GET_LOSS_INFORMATION_REQUEST':\r\n      return {\r\n        ...state,\r\n        lossInformation: action.payload,\r\n        isLossInfoLoading: true,\r\n      };\r\n    case 'GET_LOSS_INFORMATION_FAILURE':\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        isLossInfoLoading: false,\r\n      };\r\n\r\n    case 'CLAIMS_UNDERWRITING_GROUPS_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        underWritingGroups: {\r\n          ...state.underWritingGroups,\r\n          items: action.payload.map((item) => ({ ...item, selected: false })),\r\n          percentageOfSelected: 0,\r\n        },\r\n      };\r\n    case 'RESET_CLAIMS_UNDERWRITING_GROUPS':\r\n      return {\r\n        ...state,\r\n        underWritingGroups: {\r\n          ...state.underWritingGroups,\r\n          items: [],\r\n          percentageOfSelected: 0,\r\n        },\r\n        claimsInformation: {\r\n          ...state.claimsInformation,\r\n          policyUnderWritingGroupDtoList: [],\r\n        },\r\n      };\r\n    case 'CLAIMS_UNDERWRITING_GROUPS_SORTING':\r\n      const selected = state.underWritingGroups.items\r\n        .filter((item) => action.payload.includes(item.groupRef))\r\n        .map((item) => ({ ...item, selected: true }));\r\n      const remained = state.underWritingGroups.items\r\n        .filter((item) => !action.payload.includes(item.groupRef))\r\n        .map((item) => ({ ...item, selected: false }));\r\n      const initial = state.underWritingGroups.items\r\n        .sort((a, b) => a.groupRef.localeCompare(b.groupRef))\r\n        .map((item) => ({ ...item, selected: false }));\r\n\r\n      let selectedPercentage = selected?.reduce((acc, current) => acc + current.percentage, 0);\r\n      if (Math.floor(selectedPercentage) !== selectedPercentage && selectedPercentage?.toString()?.split('.')[1]?.length > 5) {\r\n        selectedPercentage = selectedPercentage.toFixed(5);\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        underWritingGroups: {\r\n          ...state.underWritingGroups,\r\n          items: action.payload.length > 0 ? [...selected, ...remained] : initial,\r\n          percentageOfSelected: action.payload.length > 0 ? selectedPercentage : 0,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_UNDERWRITING_GROUPS_BY_SECTION_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        underWritingGroups: {\r\n          ...state.underWritingGroups,\r\n          isLoading: true\r\n        },\r\n      };\r\n    case 'CLAIMS_UNDERWRITING_GROUPS_BY_SECTION_GET_SUCCESS':\r\n      const { sortedUnderwritingGroups } = action.payload;\r\n      return {\r\n        ...state,\r\n        underWritingGroups: {\r\n          ...state.underWritingGroups,\r\n          items: sortedUnderwritingGroups.map((item) => ({ ...item, selected: false })),\r\n          percentageOfSelected: 0,\r\n          isLoading: false\r\n\r\n        },\r\n      };\r\n    case 'CLAIMS_UNDERWRITING_GROUPS_BY_SECTION_GET_FAILURE':\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        underWritingGroups: {\r\n          ...state.underWritingGroups,\r\n          isLoading: false\r\n        }\r\n      }\r\n\r\n    case 'CLAIM_STATUS_EDIT_SUCCESS':\r\n      const { data, id } = action.payload;\r\n      const updatedStatus = state.claims.items.map((item) => {\r\n        if (item.claimID === id) {\r\n          return {\r\n            ...item,\r\n            claimStatusID: data.claimStatusId,\r\n          };\r\n        } else {\r\n          return item;\r\n        }\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        claims: {\r\n          ...state.claims,\r\n          items: updatedStatus,\r\n        },\r\n      };\r\n    case 'LOSS_INFORMATION_EDIT_SUCCESS':\r\n      const updatedLoss = {\r\n        ...state.lossInformation,\r\n        catCodesID: action.payload.catCodesID,\r\n        isActive: action.payload.isActive,\r\n        lossDescription: action.payload.lossDescription,\r\n        lossName: action.payload.lossName,\r\n        fromDate: action.payload.fromDate,\r\n        toDate: action.payload.toDate,\r\n        firstContactDate: action.payload.firstContactDate,\r\n      };\r\n\r\n      return {\r\n        ...state,\r\n        lossInformation: updatedLoss,\r\n      };\r\n\r\n    case 'CLAIMS_PROCESSING_GET_REQUEST':\r\n      const { newRequestType } = action.payload.appliedParams;\r\n      return {\r\n        ...state,\r\n        processing: {\r\n          ...state.processing,\r\n          ...(newRequestType === constants.CLAIM_PROCESSING_REQ_TYPES.filter ? { isloadingFilters: true } : {}),\r\n        },\r\n      };\r\n    case 'CLAIMS_PROCESSING_GET_SUCCESS':\r\n      const { filterValue, searchValue } = action.payload.items;\r\n      const pageSize = get(action.payload.pagination, 'size', initialState.processing.pageSize);\r\n\r\n      const claimRequestType = action.payload.requestType;\r\n      const isNonfilterTypCall = claimRequestType !== constants.CLAIM_PROCESSING_REQ_TYPES.filter;\r\n\r\n      return {\r\n        ...state,\r\n        processing: {\r\n          ...state.processing,\r\n          ...(isNonfilterTypCall\r\n            ? {\r\n              items: [...(utils.generic.isValidArray(searchValue) ? searchValue : [])],\r\n              itemsTotal: get(action.payload.pagination, 'totalElements', 0),\r\n              page: get(action.payload.pagination, 'page', 0) + 1,\r\n              pageSize: pageSize !== 0 ? pageSize : initialState.processing.pageSize,\r\n              pageTotal: get(action.payload.pagination, 'totalPages', 0),\r\n              query: get(action.payload.pagination, 'search') || '',\r\n              searchBy: get(action.payload.pagination, 'searchBy') || '',\r\n            }\r\n            : {}),\r\n          sort: {\r\n            by: get(action.payload.pagination, 'orderBy') || '',\r\n            direction: (get(action.payload.pagination, 'direction') || '').toLowerCase(),\r\n          },\r\n          filters: !isNonfilterTypCall ? (filterValue ? filterValue : { ...state.processing.filters }) : { ...state.processing.filters },\r\n          isloadingFilters: isNonfilterTypCall ? state.processing.isloadingFilters : false,\r\n          selected: [],\r\n        },\r\n      };\r\n    case 'CLAIMS_PROCESSING_GET_FAILURE':\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        processing: {\r\n          ...state.processing,\r\n          isloadingFilters: isNonfilterTypCall ? state.processing.isloadingFilters : false,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_PROCESSING_FILTERS_RESET':\r\n      return {\r\n        ...state,\r\n        processing: {\r\n          ...state.processing,\r\n          filters: initialState.processing.filters,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_PROCESSING_SEARCH_RESET':\r\n      return {\r\n        ...state,\r\n        processing: {\r\n          ...state.processing,\r\n          query: initialState.processing.query,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_PROCESSING_ITEMS_RESET':\r\n      return {\r\n        ...state,\r\n        processing: {\r\n          ...state.processing,\r\n          items: initialState.processing.items,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_PROCESSING_SELECT':\r\n      return {\r\n        ...state,\r\n        processing: {\r\n          ...state.processing,\r\n          selected: action.payload.forceSingleItem\r\n            ? [action.payload.claimObj]\r\n            : xorBy(state.processing.selected || [], [action.payload.claimObj], 'processID'),\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_PROCESSING_SELECTED_RESET':\r\n      return {\r\n        ...state,\r\n        processing: {\r\n          ...state.processing,\r\n          selected: [],\r\n        },\r\n      };\r\n\r\n    case 'CLAIM_NOTES_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        notes: {\r\n          items: action.payload.items || [],\r\n          itemsTotal: get(action.payload.pagination, 'totalElements', 0),\r\n          page: get(action.payload.pagination, 'page', 0),\r\n          pageSize: get(action.payload.pagination, 'size', initialState.notes.pageSize),\r\n          pageTotal: get(action.payload.pagination, 'totalPages', 0),\r\n          query: get(action.payload.pagination, 'search') || '',\r\n          sort: {\r\n            ...state.notes.sort,\r\n          },\r\n          filters: action.payload.filters !== null ? action.payload.filters : state.notes.filters,\r\n        },\r\n      };\r\n\r\n    case 'CLAIM_RFIS_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        rfis: {\r\n          items: action.payload.items || [],\r\n          itemsTotal: get(action.payload.pagination, 'totalElements', 0),\r\n          page: get(action.payload.pagination, 'page', 0),\r\n          pageSize: get(action.payload.pagination, 'size', initialState.rfis.pageSize),\r\n          pageTotal: get(action.payload.pagination, 'totalPages', 0),\r\n          query: get(action.payload.pagination, 'search') || '',\r\n          sort: {\r\n            ...state.rfis.sort,\r\n          },\r\n          filters: action.payload.filters !== null ? action.payload.filters : state.rfis.filters,\r\n        },\r\n      };\r\n\r\n    case 'CLAIM_AUDIT_TRAIL_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        audits: {\r\n          items: action.payload.items || [],\r\n          itemsTotal: get(action.payload.pagination, 'totalElements', 0),\r\n          page: get(action.payload.pagination, 'page', 0),\r\n          pageSize: get(action.payload.pagination, 'size', initialState.audits.pageSize),\r\n          pageTotal: get(action.payload.pagination, 'totalPages', 0),\r\n          query: get(action.payload.pagination, 'search') || '',\r\n          sort: {\r\n            ...state.audits.sort,\r\n          },\r\n        },\r\n      };\r\n\r\n    case 'CLAIM_AUDIT_TRAIL_FILTERS_RESET':\r\n      return {\r\n        ...state,\r\n        audits: {\r\n          ...state.audits,\r\n          filters: initialState.audits.filters,\r\n        },\r\n      };\r\n\r\n    case 'CLAIM_AUDIT_TRAIL_ITEMS_RESET':\r\n      return {\r\n        ...state,\r\n        audits: {\r\n          ...state.audits,\r\n          items: initialState.audits.items,\r\n        },\r\n      };\r\n\r\n    case 'CLAIM_AUDIT_TRAIL_SEARCH_RESET':\r\n      return {\r\n        ...state,\r\n        audits: {\r\n          ...state.audits,\r\n          query: initialState.audits.query,\r\n        },\r\n      };\r\n\r\n    case 'CLAIM_NOTES_RESET':\r\n      return {\r\n        ...state,\r\n        notes: initialState.notes,\r\n      };\r\n\r\n    case 'CLAIM_RFIS_RESET':\r\n      return {\r\n        ...state,\r\n        rfis: initialState.rfis,\r\n      };\r\n\r\n    case 'CLAIM_TASK_NOTES_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        taskNotes: {\r\n          items: action.payload.items || [],\r\n          itemsTotal: get(action.payload.pagination, 'totalElements', 0),\r\n          page: get(action.payload.pagination, 'page', 0),\r\n          pageSize: get(action.payload.pagination, 'size', initialState.taskNotes.pageSize),\r\n          pageTotal: get(action.payload.pagination, 'totalPages', 0),\r\n          query: get(action.payload.pagination, 'search') || '',\r\n          sort: {\r\n            ...state.taskNotes.sort,\r\n          },\r\n          filters: action.payload.filters ?? state.taskNotes.filters,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_TASK_ADD_NOTE_SUCCESS':\r\n      const isTaskNotesArrayLargerThanPageSize = state.taskNotes.items.length + 1 > state.taskNotes.pageSize;\r\n      return {\r\n        ...state,\r\n        taskNotes: {\r\n          items: isTaskNotesArrayLargerThanPageSize\r\n            ? [action.payload, ...state.taskNotes.items.slice(0, -1)]\r\n            : [action.payload, ...state.taskNotes.items],\r\n          itemsTotal: state.taskNotes.itemsTotal + 1,\r\n          page: get(action.payload.pagination, 'page', 0),\r\n          pageSize: get(action.payload.pagination, 'size', initialState.taskNotes.pageSize),\r\n          pageTotal: get(action.payload.pagination, 'totalPages', 0),\r\n          query: get(action.payload.pagination, 'search') || '',\r\n          sort: {\r\n            ...state.taskNotes.sort,\r\n          },\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_TASK_EDIT_NOTE_SUCCESS':\r\n      return {\r\n        ...state,\r\n        taskNotes: {\r\n          items: state.taskNotes.items.map((item) => {\r\n            if (item.caseIncidentNotesID === action.payload.caseIncidentNotesID) {\r\n              return {\r\n                ...action.payload,\r\n              };\r\n            }\r\n\r\n            return item;\r\n          }),\r\n        },\r\n      };\r\n\r\n    case 'SET_CLAIMS_NOTES_TAB_FILTER_VALUES':\r\n      return {\r\n        ...state,\r\n        notes: {\r\n          ...state.notes,\r\n          filters: action.payload,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_TASKS_PROCESSING_GET_REQUEST':\r\n      const { newRequestType: taskReqType } = action.payload.appliedParams;\r\n      return {\r\n        ...state,\r\n        tasksProcessing: {\r\n          ...state.tasksProcessing,\r\n          ...(taskReqType === constants.CLAIM_PROCESSING_REQ_TYPES.filter ? { isloadingFilters: true } : {}),\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_TASKS_PROCESSING_GET_SUCCESS':\r\n      const {\r\n        requestType,\r\n        taskType,\r\n        sortBy: taskSortBy,\r\n        dir: taskDir,\r\n        query,\r\n        navigation,\r\n        items: { filterValue: tasksFiltersValues, searchValue: tasksSearchValues, rfiTasksCount: taskRfiCount },\r\n        pagination: tasksPagination,\r\n        appliedFilters: tasksAppliedFilters,\r\n      } = action.payload;\r\n\r\n      const initTaskProcessing = initialState.tasksProcessing;\r\n      const initTaskProcessingSort = initTaskProcessing.sort;\r\n      const stateTaskProcessing = state.tasksProcessing;\r\n      const prevTaskProcessingSelected = stateTaskProcessing.selected;\r\n      const isNonfilterTypeCall = requestType !== constants.CLAIM_PROCESSING_REQ_TYPES.filter;\r\n\r\n      return {\r\n        ...state,\r\n        tasksProcessing: {\r\n          ...stateTaskProcessing,\r\n          ...(isNonfilterTypeCall\r\n            ? {\r\n              itemsTotal: get(tasksPagination, 'totalElements', 0),\r\n              page: get(tasksPagination, 'page', 0) + 1,\r\n              pageSize: get(tasksPagination, 'size', initialState.tasksProcessing.pageSize),\r\n              pageTotal: get(tasksPagination, 'totalPages', 0),\r\n              query: get(tasksPagination, 'searchBy') || query || '',\r\n              items: tasksSearchValues || [],\r\n              rfiCount: taskRfiCount || 0,\r\n            }\r\n            : {}),\r\n          sort: {\r\n            by: taskSortBy || initTaskProcessingSort.by,\r\n            direction: taskDir || initTaskProcessingSort.direction,\r\n          },\r\n          filters: isNonfilterTypeCall ? stateTaskProcessing.filters : tasksFiltersValues ? tasksFiltersValues : {},\r\n          appliedFilters: tasksAppliedFilters?.length ? tasksAppliedFilters : initTaskProcessing.appliedFilters,\r\n          selected: navigation ? prevTaskProcessingSelected : [],\r\n          taskType: taskType || initTaskProcessing.taskType,\r\n          isloadingFilters: isNonfilterTypeCall ? stateTaskProcessing.isloadingFilters : false,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_TASKS_PROCESSING_GET_FAILURE':\r\n      const { error: taskProcessingError, isNonFilterTypeCall } = action.payload;\r\n      return {\r\n        ...state,\r\n        error: taskProcessingError,\r\n        tasksProcessing: {\r\n          ...state.tasksProcessing,\r\n          items: isNonFilterTypeCall ? initialState.tasksProcessing.items : state.tasksProcessing.items,\r\n          isloadingFilters: isNonfilterTypCall ? state.processing.isloadingFilters : false,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_TASKS_PROCESSING_FILTERS_RESET':\r\n      return {\r\n        ...state,\r\n        tasksProcessing: {\r\n          ...state.tasksProcessing,\r\n          appliedFilters: initialState.tasksProcessing.appliedFilters,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_TASKS_PROCESSING_SEARCH_RESET':\r\n      return {\r\n        ...state,\r\n        tasksProcessing: {\r\n          ...state.tasksProcessing,\r\n          query: initialState.tasksProcessing.query,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_TASKS_PROCESSING_SELECT':\r\n      const { taskObj: taskSelectObj, keepPreviousTasks } = action.payload;\r\n      const newTasksSelectedArray = keepPreviousTasks\r\n        ? xorBy(state.tasksProcessing.selected || [], [taskSelectObj], 'taskRef')\r\n        : [taskSelectObj];\r\n\r\n      return {\r\n        ...state,\r\n        tasksProcessing: {\r\n          ...state.tasksProcessing,\r\n          selected: newTasksSelectedArray,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_TASK_DASHBOARD_DETAIL_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        taskDashboard: {\r\n          ...state.taskDashboard,\r\n          taskDetails: { items: action.payload.items, query: action.payload.query },\r\n        },\r\n        tasksProcessing: {\r\n          ...state.tasksProcessing,\r\n          selected: action.payload.items || [],\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_TASK_DASHBOARD_DETAIL_RESET':\r\n      return {\r\n        ...state,\r\n        taskDashboard: {\r\n          ...state.taskDashboard,\r\n          taskDetails: initialState.taskDashboard.taskDetails,\r\n        },\r\n      };\r\n\r\n    case 'CURRENCY_PURCHASED_VALUE_GET_SUCCESS':\r\n      const selectedOption = action.payload?.data;\r\n      return {\r\n        ...state,\r\n        taskDashboard: {\r\n          ...state.taskDashboard,\r\n          purchasedCurrencyRequired: selectedOption,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_TASK_PRIORITY_POST_SUCCESS':\r\n      return {\r\n        ...state,\r\n        claimsRefData: action.payload,\r\n      };\r\n\r\n    case 'CLAIMS_TASKS_PROCESSING_RESET':\r\n      return {\r\n        ...state,\r\n        tasksProcessing: {\r\n          ...state.tasksProcessing,\r\n          items: initialState.tasksProcessing.items,\r\n        },\r\n      };\r\n    case 'CLAIMS_GET_RFI_HISTORY_SUCCESS':\r\n      return {\r\n        ...state,\r\n        rfiHistory: action.payload,\r\n      };\r\n    case 'CLAIMS_TASK_SANCTIONS_CHECK_POST_SUCCESS':\r\n      return {\r\n        ...state,\r\n        sanctionsCheck: action.payload,\r\n        loading: false,\r\n      };\r\n    case 'CLAIM_PROCESSING_TASK_TYPE_SELECTED':\r\n      const claimProcessingTaskTypeSelected = action.payload;\r\n      return {\r\n        ...state,\r\n        tasksProcessing: {\r\n          ...state.tasksProcessing,\r\n          selectedTaskType: claimProcessingTaskTypeSelected,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_TASK_PROCESSING_GET_CHECKLIST_SUCCESS':\r\n      return {\r\n        ...state,\r\n        taskDashboard: {\r\n          ...state.taskDashboard,\r\n          checkList: action.payload,\r\n        },\r\n      };\r\n    case 'CLAIMS_TASK_PROCESSING_GET_NEXT_TASKLIST_SUCCESS':\r\n      return {\r\n        ...state,\r\n        taskDashboard: {\r\n          ...state.taskDashboard,\r\n          nextActions: action.payload,\r\n        },\r\n      };\r\n    case 'CLAIMS_TASK_PROCESSING_SET_CHECKLIST_CHANGES':\r\n      return {\r\n        ...state,\r\n        taskDashboard: {\r\n          ...state.taskDashboard,\r\n          checkListChanges: action.payload,\r\n        },\r\n      };\r\n    case 'CLAIMS_TASK_PROCESSING_SAVE_CHECKLIST_ACTIONS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        taskDashboard: {\r\n          ...state.taskDashboard,\r\n          checkListChangesPushed: action.payload,\r\n        },\r\n      };\r\n    case 'CLAIMS_TASK_PROCESSING_SAVE_NEXT_ACTION_SUCCESS':\r\n      return {\r\n        ...state,\r\n        taskDashboard: {\r\n          ...state.taskDashboard,\r\n          nextActionChangesPushed: action.payload,\r\n        },\r\n      };\r\n    case 'CLAIMS_TASK_PROCESSING_RESET_CHECKLIST_DATA':\r\n      return {\r\n        ...state,\r\n        taskDashboard: {\r\n          ...initialState.taskDashboard,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMREF_TASKS_REQUEST':\r\n      const { newRequestType: refTaskReqType } = action.payload.appliedParams;\r\n      return {\r\n        ...state,\r\n        refTabTasks: {\r\n          ...state.refTabTasks,\r\n          ...(refTaskReqType === constants.CLAIM_PROCESSING_REQ_TYPES.filter ? { isloadingFilters: true } : {}),\r\n        },\r\n      };\r\n\r\n    case 'CLAIMREF_TASKS_SUCCESS':\r\n      const {\r\n        requestType: refTaskReqstType,\r\n        sortBy: claimRefSortBy,\r\n        dir: claimRefDir,\r\n        query: claimRefQuery,\r\n        items: { filterValue: refTasksFiltersValues, searchValue: refTasksSearchValues },\r\n        pagination: refTasksPagination,\r\n        appliedFilters: refTasksAppliedFilters,\r\n      } = action.payload;\r\n\r\n      const initRefTabTasks = initialState.refTabTasks;\r\n      const initRefTabTasksSort = initRefTabTasks.sort;\r\n      const stateRefTabTasks = state.refTabTasks;\r\n      const isNonfilterTypeReq = refTaskReqstType !== constants.CLAIM_PROCESSING_REQ_TYPES.filter;\r\n\r\n      return {\r\n        ...state,\r\n        refTabTasks: {\r\n          ...stateRefTabTasks,\r\n          ...(isNonfilterTypeReq\r\n            ? {\r\n              itemsTotal: get(refTasksPagination, 'totalElements', 0),\r\n              page: get(refTasksPagination, 'page', 0) + 1,\r\n              pageSize: get(refTasksPagination, 'size', initRefTabTasks.pageSize),\r\n              pageTotal: get(refTasksPagination, 'totalPages', 0),\r\n              query: get(refTasksPagination, 'searchBy') || claimRefQuery || '',\r\n              items: refTasksSearchValues || [],\r\n            }\r\n            : {}),\r\n          sort: {\r\n            by: claimRefSortBy || initRefTabTasksSort.by,\r\n            direction: claimRefDir || initRefTabTasksSort.direction,\r\n          },\r\n          filters: isNonfilterTypeReq ? stateRefTabTasks.filters : refTasksFiltersValues ? refTasksFiltersValues : {},\r\n          appliedFilters: refTasksAppliedFilters?.length ? refTasksAppliedFilters : initRefTabTasks.appliedFilters,\r\n        },\r\n        loading: false,\r\n      };\r\n\r\n    case 'CLAIMREF_TASKS_FAILURE':\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        refTabTasks: {\r\n          ...state.refTabTasks,\r\n          isloadingFilters: false,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_GET_SUCCESS':\r\n      const claimsPagination = action.payload.pagination || {};\r\n\r\n      return {\r\n        ...state,\r\n        claims: {\r\n          ...state.claims,\r\n          itemsTotal: get(claimsPagination, 'totalElements', 0),\r\n          page: get(claimsPagination, 'page', 0),\r\n          pageSize: get(claimsPagination, 'size', initialState.claims.pageSize),\r\n          pageTotal: get(claimsPagination, 'totalPages', 0),\r\n          query: get(claimsPagination, 'query') || '',\r\n          items: action.payload.items || [],\r\n          searchBy: get(claimsPagination, 'searchBy') || initialState.claims.searchBy,\r\n          sort: {\r\n            ...state.claims.sort,\r\n          },\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_RESET':\r\n      return {\r\n        ...state,\r\n        claims: initialState.claims,\r\n      };\r\n    case 'CLAIMS_POLICIES_GET_REQUEST':\r\n      const { newRequestType: newPolicyRequestType } = action.payload.appliedParams;\r\n      return {\r\n        ...state,\r\n        policies: {\r\n          ...state.policies,\r\n          ...(newPolicyRequestType === constants.CLAIM_POLICY_SEARCH_REQ_TYPES.filter ? { isloadingFilters: true } : { isloadingTable: true }),\r\n        },\r\n      };\r\n    case 'CLAIMS_POLICIES_GET_SUCCESS':\r\n      const {\r\n        items: { filterValue: policiesFiltersValues, searchValue: policiesSearchValues },\r\n        pagination: policiesPagination,\r\n      } = action.payload;\r\n      const policyRequestType = action.payload.requestType;\r\n      const isPolicyNonfilterTypCall = policyRequestType !== constants.CLAIM_POLICY_SEARCH_REQ_TYPES.filter;\r\n\r\n      return {\r\n        ...state,\r\n        policies: {\r\n          ...state.policies,\r\n          ...(isPolicyNonfilterTypCall\r\n            ? {\r\n              items: [...(utils.generic.isValidArray(policiesSearchValues) ? policiesSearchValues : [])],\r\n              itemsTotal: get(action.payload.pagination, 'totalElements', 0),\r\n              page: get(policiesPagination, 'page', 0),\r\n              pageSize: policiesPagination !== 0 ? policiesPagination.size : initialState.policies.pageSize,\r\n              pageTotal: get(policiesPagination, 'totalPages', 0),\r\n              query: get(policiesPagination, 'searchBy') || '',\r\n              searchBy: get(action.payload.pagination, 'searchBy') || '',\r\n              isloadingTable: false\r\n            }\r\n            : {}),\r\n          sort: {\r\n            ...state.policies.sort,\r\n          },\r\n          filters: !isPolicyNonfilterTypCall\r\n            ? policiesFiltersValues\r\n              ? policiesFiltersValues\r\n              : { ...state.policies.filters }\r\n            : { ...state.policies.filters },\r\n          isloadingFilters: isPolicyNonfilterTypCall ? state.policies.isloadingFilters : false,\r\n        },\r\n      };\r\n    case 'CLAIMS_POLICIES_GET_FAILURE':\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        policies: {\r\n          ...state.policies,\r\n          isloadingTable: false,\r\n          isloadingFilters: isPolicyNonfilterTypCall ? state.policies.isloadingFilters : false,\r\n        },\r\n      };\r\n    case 'CLAIMS_POLICIES_RESET':\r\n      return {\r\n        ...state,\r\n        policies: initialState.policies,\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_INSURED_GET_SUCCESS':\r\n      const claimsInsuredPagination = action.payload.pagination || {};\r\n\r\n      return {\r\n        ...state,\r\n        insured: {\r\n          ...state.insured,\r\n          items: action.payload.items || [],\r\n          itemsTotal: get(claimsInsuredPagination, 'totalElements', 0),\r\n          page: get(claimsInsuredPagination, 'page', 0),\r\n          pageSize: get(claimsInsuredPagination, 'size', initialState.insured.pageSize),\r\n          pageTotal: get(claimsInsuredPagination, 'totalPages', 0),\r\n          query: get(claimsInsuredPagination, 'query') || '',\r\n        },\r\n      };\r\n    case 'CLAIMS_POLICIES_RESET_TEMP':\r\n      return {\r\n        ...state,\r\n        policyData: initialState.policyData,\r\n        policyInformation: initialState.policyInformation,\r\n      };\r\n    case 'CLAIMS_POLICIES_REFERENCE':\r\n      const policyTypeCheck = action.payload.policyType;\r\n      return {\r\n        ...state,\r\n        policyData: action.payload,\r\n        sectionEnabledUG: constants.CLAIM_SECTION_ENABLED_UG.indexOf(policyTypeCheck) > -1 || false,\r\n        claimDetailInformationSuccess: initialState.claimDetailInformationSuccess,\r\n      };\r\n    case 'CLAIMS_POLICY_SECTIONS_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        isPolicySectionsLoading: true,\r\n      };\r\n    case 'CLAIMS_POLICY_SECTIONS_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        policySections: action.payload,\r\n        isPolicySectionsLoading: false,\r\n      };\r\n    case 'CLAIMS_POLICY_SECTIONS_GET_FAILURE':\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        isPolicySectionsLoading: false,\r\n      };\r\n    case 'CLAIMS_SETTLEMENT_CURRENCY_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        settlementCurrencies: action.payload,\r\n      };\r\n    case 'LOSS_INFORMATION_POST_SUCCESS':\r\n    case 'GET_LOSS_INFORMATION_SUCCESS':\r\n      return {\r\n        ...state,\r\n        lossInformation: action.payload,\r\n        isLossInfoLoading: false,\r\n      };\r\n    case 'CLAIMS_POST_SUCCESS':\r\n      return {\r\n        ...state,\r\n        claimsInformation: action.payload,\r\n      };\r\n    case 'CLAIMS_INSURED_REMOVE_SUCCESS':\r\n      const checkedInsured = Object.keys(Object.fromEntries(Object.entries(action.payload).filter(([key, value]) => value)));\r\n\r\n      return {\r\n        ...state,\r\n        insured: {\r\n          ...state.insured,\r\n          items: state.insured.items.filter((item) => item.title !== checkedInsured[0]),\r\n        },\r\n      };\r\n    case 'CLAIMS_SELECT_INTEREST_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        interest: {\r\n          ...state.interest,\r\n          isLoading: true\r\n        }\r\n      };\r\n    case 'CLAIMS_SELECT_INTEREST_GET_SUCCESS':\r\n      const { payload } = action;\r\n      const defaultValue = payload.length === 1 ? payload[0].code : '';\r\n\r\n      return {\r\n        ...state,\r\n        interest: {\r\n          ...state.interest,\r\n          items: payload,\r\n          selectedInterest: defaultValue,\r\n          isLoading: false\r\n        },\r\n      };\r\n    case 'CLAIMS_SELECT_INTEREST_GET_FAILURE':\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        interest: {\r\n          ...state.interest,\r\n          isLoading: true\r\n        }\r\n      };\r\n\r\n    case 'CLAIMS_SELECT_INTEREST_VALUE':\r\n      return {\r\n        ...state,\r\n        interest: {\r\n          ...state.interest,\r\n          selectedInterest: action.payload,\r\n        },\r\n      };\r\n    case 'CLAIMS_DETAILS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        allClaimDetails: action.payload,\r\n      };\r\n    case 'UPDATE_CLAIMS_DETAILS_INFORMATION':\r\n      return {\r\n        ...state,\r\n        claimDetailInformation: action.payload,\r\n      };\r\n    case 'CLAIMS_DETAILS_INFORMATION_POST_SUCCESS':\r\n      return {\r\n        ...state,\r\n        claimDetailInformationSuccess: action.payload,\r\n        claimsInformation: action.payload,\r\n      };\r\n    case 'CLAIMS_DETAILS_INFORMATION_UPDATE_SUCCESS':\r\n      return {\r\n        ...state,\r\n        claimDetailInformationSuccess: action.payload,\r\n        claimsInformation: {\r\n          ...state.claimsInformation,\r\n          ...action.payload.data,\r\n        },\r\n      };\r\n    case 'CLAIMS_PRIORITY_LEVELS_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        priorities: action.payload,\r\n      };\r\n    case 'CLAIMS_REOPEN_TASK_LIST_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        reopenTaskList: action.payload,\r\n      };\r\n    case 'CLAIMS_BE_ADJUSTER_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        beAdjuster: { ...state.beAdjuster, items: action.payload },\r\n      };\r\n    case 'SET_CLAIMS_BE_ADJUSTER_VALUE':\r\n      return {\r\n        ...state,\r\n        beAdjuster: { ...state.beAdjuster, selectedbeAdjuster: action.payload },\r\n      };\r\n    case 'CLAIMS_PREVIEW_INFORMATION_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        isClaimsInfoLoading: true,\r\n      };\r\n    case 'CLAIMS_PREVIEW_INFORMATION_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        claimsInformation: action.payload,\r\n        isClaimsInfoLoading: false,\r\n      };\r\n    case 'CLAIMS_PREVIEW_INFORMATION_GET_FAILURE':\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        isClaimsInfoLoading: false,\r\n      };\r\n    case 'SELECT_CLAIMS_COMPLEXITY':\r\n      return {\r\n        ...state,\r\n        complexityPolicies: {\r\n          ...state.complexityPolicies,\r\n          selectedComplexityPolicies: action.payload || [],\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_GET_SUCCESS':\r\n      const complexityPoliciesPagination = action.payload.pagination || {};\r\n\r\n      return {\r\n        ...state,\r\n        complexityPolicies: {\r\n          ...state.complexityPolicies,\r\n          items: action.payload.data || [],\r\n          itemsTotal: get(complexityPoliciesPagination, 'totalElements', 0),\r\n          page: get(complexityPoliciesPagination, 'page', 1),\r\n          pageSize: get(complexityPoliciesPagination, 'size', initialState.complexityPolicies.pageSize),\r\n          pageTotal: get(complexityPoliciesPagination, 'totalPages', 0),\r\n          query: get(complexityPoliciesPagination, 'query') || '',\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_FLAGGED_GET_SUCCESS':\r\n      const complexityPoliciesFlaggedPagination = action.payload.pagination || {};\r\n\r\n      return {\r\n        ...state,\r\n        complexityPoliciesFlagged: {\r\n          ...state.complexityPoliciesFlagged,\r\n          items: action.payload.items || [],\r\n          itemsTotal: get(complexityPoliciesFlaggedPagination, 'totalElements', 0),\r\n          page: get(complexityPoliciesFlaggedPagination, 'page', 1),\r\n          pageSize: get(complexityPoliciesFlaggedPagination, 'size', initialState.complexityPoliciesFlagged.pageSize),\r\n          pageTotal: get(complexityPoliciesFlaggedPagination, 'totalPages', 0),\r\n          query: get(complexityPoliciesFlaggedPagination, 'query') || '',\r\n        },\r\n      };\r\n    case 'CLAIMS_DETAILS_INFORMATION_SUBMIT_SUCCESS':\r\n      return {\r\n        ...state,\r\n        claimsInformation: {\r\n          ...state.claimsInformation,\r\n          claimStatus: action.payload.claimStatus,\r\n          submitStatus: action.payload.responseData,\r\n        },\r\n      };\r\n    case 'ADD_NEW_CLAIM_FOR_LOSS':\r\n      return {\r\n        ...state,\r\n        claimantNames: initialState.claimantNames,\r\n        claimsInformation: initialState.claimsInformation,\r\n        policyData: initialState.policyData,\r\n        policyInformation: initialState.policyInformation,\r\n        interest: initialState.interest,\r\n        policySections: initialState.underWritingGroups,\r\n        underWritingGroups: initialState.underWritingGroups,\r\n        allClaimDetails: initialState.allClaimDetails,\r\n        beAdjuster: initialState.beAdjuster,\r\n        claimDetailInformationSuccess: initialState.claimDetailInformationSuccess,\r\n        claimData: initialState.claimData,\r\n      };\r\n    case 'UPDATE_CLAIMS_LOSS_FILTERS':\r\n      return {\r\n        ...state,\r\n        claimLossSearchFilters: action.payload,\r\n      };\r\n    case 'CLAIMS_INSURED_RESET':\r\n      return {\r\n        ...state,\r\n        insured: initialState.insured,\r\n      };\r\n    case 'RESET_CLAIMS_LOSS_FILTERS':\r\n      return {\r\n        ...state,\r\n        claimLossSearchFilters: initialState.claimLossSearchFilters,\r\n      };\r\n    case 'CLAIMS_LOSS_FILTERS_POST_SUCCESS':\r\n      return {\r\n        ...state,\r\n        claims: {\r\n          ...state.claims,\r\n          filters: action.payload,\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_RESET':\r\n      return {\r\n        ...state,\r\n        complexityPolicies: initialState.complexityPolicies,\r\n      };\r\n    case 'CHECKED_COMPLEX_ADD_POLICY':\r\n      let boolCheck = false;\r\n      const complexPoliciesData = state.complexityPolicies.selectedComplexityPolicies.map((item, idx) => {\r\n        if (item.id === action.payload.id) {\r\n          item.checkedType = !item.checkedType;\r\n          boolCheck = true;\r\n        }\r\n        return item;\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        complexityPolicies: {\r\n          ...state.complexityPolicies,\r\n          selectedComplexityPolicies: boolCheck\r\n            ? complexPoliciesData\r\n            : complexPoliciesData.length > 0\r\n              ? [...complexPoliciesData, action.payload]\r\n              : [action.payload],\r\n        },\r\n      };\r\n    case 'CHECKED_COMPLEX_ADD_INSURED':\r\n      let insuredBoolCheck = false;\r\n      const complexInsuredData = state.complexInsured.selectedComplexityInsured.map((item, idx) => {\r\n        if (item.id === action.payload.id) {\r\n          item.checkedType = !item.checkedType;\r\n          insuredBoolCheck = true;\r\n        }\r\n        return item;\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        complexInsured: {\r\n          ...state.complexInsured,\r\n          selectedComplexityInsured: insuredBoolCheck\r\n            ? complexInsuredData\r\n            : complexInsuredData.length > 0\r\n              ? [...complexInsuredData, action.payload]\r\n              : [action.payload],\r\n        },\r\n      };\r\n    case 'CLAIMS_SAVE_COMPLEXITY_POLICY_POST_SUCCESS':\r\n      return {\r\n        ...state,\r\n        complexityPolicies: {\r\n          ...state.complexityPolicies,\r\n          savedComplexPolicies: action.payload,\r\n          checkedComplexity: true,\r\n        },\r\n      };\r\n    case 'CLAIMS_SAVE_COMPLEXITY_INSURED_POST_SUCCESS':\r\n      return {\r\n        ...state,\r\n        complexInsured: {\r\n          ...state.complexInsured,\r\n          savedComplexInsured: action.payload,\r\n          checkedComplexity: true,\r\n        },\r\n      };\r\n    case 'SAVED_POLICIES_DATA':\r\n      return {\r\n        ...state,\r\n        checkedComplexAddPolicies: [...state.checkedComplexAddPolicies, ...action.payload],\r\n      };\r\n    case 'CLAIM_SET_DATA':\r\n      return {\r\n        ...state,\r\n        claimData: action.payload,\r\n      };\r\n    case 'CLAIM_RESET_DATA':\r\n      return {\r\n        ...initialState,\r\n      };\r\n    case 'CLAIMS_SET_STEPPER_CONTROL':\r\n      return {\r\n        ...state,\r\n        claimsStepper: action.payload,\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_TAB_SET':\r\n      return {\r\n        ...state,\r\n        complexityManagement: {\r\n          ...initialState.complexityManagement,\r\n          activeTab: action.payload,\r\n        },\r\n        complexityBasisValues: {\r\n          ...initialState.complexityBasisValues,\r\n        },\r\n        complexityReferralValues: {\r\n          ...initialState.complexityReferralValues,\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_DIVISION_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        complexityManagement: {\r\n          ...state.complexityManagement,\r\n          division: action.payload,\r\n          divisionChanges: initialState.complexityManagement.divisionChanges,\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_DIVISION_SET_CHANGE':\r\n      const incomingFieldName = Object.keys(action.payload)[0];\r\n      const falseStateChange = Object.keys(state.complexityManagement.divisionChanges).indexOf(incomingFieldName) > -1;\r\n      const applicablePayload = falseStateChange ? {} : action.payload;\r\n      const applicableDivisionChanges = { ...state.complexityManagement.divisionChanges };\r\n      if (falseStateChange) {\r\n        delete applicableDivisionChanges[incomingFieldName];\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        complexityManagement: {\r\n          ...state.complexityManagement,\r\n          divisionChanges: { ...applicableDivisionChanges, ...applicablePayload },\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_DIVISION_RESET':\r\n      return {\r\n        ...state,\r\n        complexityManagement: {\r\n          ...state.complexityManagement,\r\n          divisionChanges: initialState.complexityManagement.divisionChanges,\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_DIVISION_SAVE_SUCCESS':\r\n      return {\r\n        ...state,\r\n        complexityManagement: {\r\n          ...state.complexityManagement,\r\n          divisionChanges: initialState.complexityManagement.divisionChanges,\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_SET_COMPLEX_VALUE_ID':\r\n      return {\r\n        ...state,\r\n        complexityManagement: {\r\n          ...state.complexityManagement,\r\n          complexityBasisValueId: action.payload,\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_BASIS_VALUE_GET_SUCCESS':\r\n      const complexityBasisValuePagination = action.payload.pagination || {};\r\n      const initialComplexityBasisSort = initialState.complexityBasisValues.sort;\r\n\r\n      return {\r\n        ...state,\r\n        complexityBasisValues: {\r\n          type: action.payload.type || '',\r\n          items: action.payload.data || [],\r\n          itemsTotal: get(complexityBasisValuePagination, 'totalElements', 0),\r\n          page: get(complexityBasisValuePagination, 'page', 1),\r\n          pageSize: get(complexityBasisValuePagination, 'size', initialState.complexityBasisValues.pageSize),\r\n          pageTotal: get(complexityBasisValuePagination, 'totalPages', 0),\r\n          query: get(complexityBasisValuePagination, 'query') || '',\r\n          sort: {\r\n            by: get(complexityBasisValuePagination, 'orderBy', initialComplexityBasisSort.by),\r\n            direction: get(complexityBasisValuePagination, 'direction', initialComplexityBasisSort.direction),\r\n          },\r\n          loaded: true,\r\n        },\r\n        complexityManagement: {\r\n          ...initialState.complexityManagement,\r\n          activeTab: state.complexityManagement.activeTab,\r\n          complexityBasisValueId: state.complexityManagement.complexityBasisValueId,\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_BASIS_VALUE_GET_RESET':\r\n      return {\r\n        ...state,\r\n        complexityBasisValues: {\r\n          ...initialState.complexityBasisValues,\r\n        },\r\n      };\r\n    case 'CLAIMS_ADD_COMPLEXITY_VALUES_SUCCESS':\r\n      return {\r\n        ...state,\r\n        complexityManagement: {\r\n          ...initialState.complexityManagement,\r\n          activeTab: state.complexityManagement.activeTab,\r\n          complexityBasisValueId: state.complexityManagement.complexityBasisValueId,\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_COMPLEX_ID_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        complexityManagement: {\r\n          ...state.complexityManagement,\r\n          complexityBasisDivisionMatrix: initialState.complexityManagement.complexityBasisDivisionMatrix,\r\n          complexityBasisDivisionMatrixChanges: initialState.complexityManagement.complexityBasisDivisionMatrixChanges,\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_COMPLEX_ID_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        complexityManagement: {\r\n          ...state.complexityManagement,\r\n          complexityBasisDivisionMatrix: action.payload,\r\n          complexityBasisDivisionMatrixChanges: initialState.complexityManagement.complexityBasisDivisionMatrixChanges,\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_COMPLEX_ID_SET_CHANGE':\r\n      const newComplexityDivisionFieldName = Object.keys(action.payload)[0];\r\n      const falseComplexityDivisionMatrixFieldChange =\r\n        Object.keys(state.complexityManagement.complexityBasisDivisionMatrixChanges).indexOf(newComplexityDivisionFieldName) > -1;\r\n      const newComplexityDivisionPayload = falseComplexityDivisionMatrixFieldChange ? {} : action.payload;\r\n      const newComplexityDivisionChanges = { ...state.complexityManagement.complexityBasisDivisionMatrixChanges };\r\n      if (falseComplexityDivisionMatrixFieldChange) {\r\n        delete newComplexityDivisionChanges[newComplexityDivisionFieldName];\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        complexityManagement: {\r\n          ...state.complexityManagement,\r\n          complexityBasisDivisionMatrixChanges: { ...newComplexityDivisionChanges, ...newComplexityDivisionPayload },\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_COMPLEX_ID_RESET':\r\n      return {\r\n        ...state,\r\n        complexityManagement: {\r\n          ...state.complexityManagement,\r\n          complexityBasisDivisionMatrixChanges: initialState.complexityManagement.complexityBasisDivisionMatrixChanges,\r\n        },\r\n      };\r\n    case 'CLAIMS_REMOVE_COMPLEXITY_VALUES_SUCCESS':\r\n      return {\r\n        ...state,\r\n        complexityManagement: {\r\n          ...initialState.complexityManagement,\r\n          activeTab: state.complexityManagement.activeTab,\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_SET_REFERRAL_VALUE_ID':\r\n      return {\r\n        ...state,\r\n        complexityManagement: {\r\n          ...state.complexityManagement,\r\n          complexityReferralValueId: action.payload,\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_REFERRAL_VALUES_GET_SUCCESS':\r\n      const complexityReferralValuesPagination = action.payload.pagination || {};\r\n      const initialComplexityReferralSort = initialState.complexityReferralValues.sort;\r\n\r\n      return {\r\n        ...state,\r\n        complexityReferralValues: {\r\n          items: action.payload.data || [],\r\n          itemsTotal: get(complexityReferralValuesPagination, 'totalElements', 0),\r\n          page: get(complexityReferralValuesPagination, 'page', 1),\r\n          pageSize: get(complexityReferralValuesPagination, 'size', initialState.complexityReferralValues.pageSize),\r\n          pageTotal: get(complexityReferralValuesPagination, 'totalPages', 0),\r\n          query: get(complexityReferralValuesPagination, 'query') || '',\r\n          sort: {\r\n            by: get(complexityReferralValuesPagination, 'orderBy', initialComplexityReferralSort.by),\r\n            direction: get(complexityReferralValuesPagination, 'direction', initialComplexityReferralSort.direction),\r\n          },\r\n        },\r\n        complexityManagement: {\r\n          ...initialState.complexityManagement,\r\n          activeTab: state.complexityManagement.activeTab,\r\n          complexityReferralValueId: state.complexityManagement.complexityReferralValueId,\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_ADD_REFERRAL_SUCCESS':\r\n      return {\r\n        ...state,\r\n        complexityManagement: {\r\n          ...initialState.complexityManagement,\r\n          activeTab: state.complexityManagement.activeTab,\r\n          complexityReferralValueId: state.complexityManagement.complexityReferralValueId,\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_REFERRAL_ID_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        complexityManagement: {\r\n          ...state.complexityManagement,\r\n          complexityReferralDivisionMatrix: initialState.complexityManagement.complexityReferralDivisionMatrix,\r\n          complexityReferralDivisionMatrixChanges: initialState.complexityManagement.complexityReferralDivisionMatrixChanges,\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_REFERRAL_ID_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        complexityManagement: {\r\n          ...state.complexityManagement,\r\n          complexityReferralDivisionMatrix: action.payload,\r\n          complexityReferralDivisionMatrixChanges: initialState.complexityManagement.complexityReferralDivisionMatrixChanges,\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_REFERRAL_ID_SET_CHANGE':\r\n      const newReferralDivisionFieldName = Object.keys(action.payload)[0];\r\n      const falseReferralDivisionMatrixFieldChange =\r\n        Object.keys(state.complexityManagement.complexityReferralDivisionMatrixChanges).indexOf(newReferralDivisionFieldName) > -1;\r\n      const newReferralDivisionPayload = falseReferralDivisionMatrixFieldChange ? {} : action.payload;\r\n      const newReferralDivisionChanges = { ...state.complexityManagement.complexityReferralDivisionMatrixChanges };\r\n      if (falseReferralDivisionMatrixFieldChange) {\r\n        delete newReferralDivisionChanges[newReferralDivisionFieldName];\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        complexityManagement: {\r\n          ...state.complexityManagement,\r\n          complexityReferralDivisionMatrixChanges: { ...newReferralDivisionChanges, ...newReferralDivisionPayload },\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_REFERRAL_ID_RESET':\r\n      return {\r\n        ...state,\r\n        complexityManagement: {\r\n          ...state.complexityManagement,\r\n          complexityReferralDivisionMatrixChanges: initialState.complexityManagement.complexityReferralDivisionMatrixChanges,\r\n        },\r\n      };\r\n    case 'CLAIMS_REMOVE_REFERRAL_VALUES_SUCCESS':\r\n      return {\r\n        ...state,\r\n        complexityManagement: {\r\n          ...initialState.complexityManagement,\r\n          activeTab: state.complexityManagement.activeTab,\r\n        },\r\n      };\r\n    case 'UPDATE_CLAIMS_PROCESSING_FILTERS':\r\n      return {\r\n        ...state,\r\n        claimsProcessingData: action.payload,\r\n      };\r\n    case 'USER_GET_USERS_BY_ORG_SUCCESS':\r\n      return {\r\n        ...state,\r\n        claimsAssignedToUsers: {\r\n          ...action.payload,\r\n          loaded: true,\r\n        },\r\n      };\r\n    case 'CLAIMS_ASSIGNED_TO_USERS_RESET':\r\n      return {\r\n        ...state,\r\n        claimsAssignedToUsers: {\r\n          ...initialState.claimsAssignedToUsers,\r\n        },\r\n      };\r\n    case 'RESET_CLAIMS_PROCESSING_FILTERS':\r\n      return {\r\n        ...state,\r\n        claimsProcessingData: initialState.claimsProcessingData,\r\n      };\r\n    case 'CLAIM_UPDATE_COMPLEX_STATUS':\r\n      return {\r\n        ...state,\r\n        complexityPolicies: {\r\n          ...state.complexityPolicies,\r\n          ...action.payload,\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_SEARCH_POST_SUCCESS':\r\n      const complexityInsuredPagination = action.payload.pagination || {};\r\n      return {\r\n        ...state,\r\n        complexInsured: {\r\n          ...state.complexInsured,\r\n          items: action.payload.data || [],\r\n          itemsTotal: get(complexityInsuredPagination, 'totalElements', 0),\r\n          page: get(complexityInsuredPagination, 'page', 1),\r\n          pageSize: get(complexityInsuredPagination, 'size', initialState.complexInsured.pageSize),\r\n          pageTotal: get(complexityInsuredPagination, 'totalPages', 0),\r\n          query: get(complexityInsuredPagination, 'query') || '',\r\n        },\r\n      };\r\n    case 'CLAIMS_POPUP_INSURED_RESET':\r\n      return {\r\n        ...state,\r\n        complexInsured: initialState.complexInsured,\r\n      };\r\n    case 'SAVED_INSURED_DATA':\r\n      return {\r\n        ...state,\r\n        checkedComplexAddInsured: [...state.checkedComplexAddInsured, ...action.payload],\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_VALUES_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        complexityValues: action.payload,\r\n      };\r\n    case 'CLAIM_COMPLEXITY_TYPES_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        complexityTypes: action.payload,\r\n      };\r\n    case 'CLAIMS_REFERRAL_VALUES_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        referralValues: action.payload,\r\n      };\r\n    case 'CLAIMS_REFERRAL_RESPONSE_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        referralResponse: action.payload,\r\n      };\r\n    case 'CLAIMS_QUERY_CODE_LIST_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        queryCode: action.payload,\r\n      };\r\n    case 'CLAIMS_SET_PRIORITY_SUCCESS':\r\n      return {\r\n        ...state,\r\n        processing: {\r\n          ...state.processing,\r\n          items: state.processing.items.map((claim) => {\r\n            const newPriorityName = action.payload.priorityName;\r\n            const isSameClaimId = claim.claimID?.toString() === action.payload.claimID?.toString();\r\n\r\n            if (newPriorityName && isSameClaimId) {\r\n              return {\r\n                ...claim,\r\n                priority: newPriorityName,\r\n              };\r\n            }\r\n\r\n            return claim;\r\n          }),\r\n        },\r\n      };\r\n    case 'GET_ASSOCIATED_TASK_SUCCESS':\r\n      return {\r\n        ...state,\r\n        tasksProcessing: {\r\n          ...state.tasksProcessing,\r\n          associatedTaskDetails: action.payload,\r\n        },\r\n      };\r\n    case 'TASKS_CLAIMS_REPORTING_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        tasksClaimsReporting: {\r\n          data: initialState.tasksClaimsReporting.data,\r\n          isDataLoading: true,\r\n        },\r\n      };\r\n    case 'TASKS_CLAIMS_REPORTING_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        tasksClaimsReporting: { data: action.payload, isDataLoading: false },\r\n      };\r\n    case 'TASKS_CLAIMS_REPORTING_GET_FAILURE':\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        tasksClaimsReporting: { data: initialState.tasksClaimsReporting.data, isDataLoading: false },\r\n      };\r\n    case 'PROCESSING_NAVIGATION':\r\n      return {\r\n        ...state,\r\n        processingNavigation: {\r\n          ...state.processingNavigation,\r\n          navigationItem: action.payload,\r\n        },\r\n      };\r\n    case 'PROCESSING_CLAIM_VIEW_NAVIGATION':\r\n      return {\r\n        ...state,\r\n        processingNavigation: {\r\n          ...state.processingNavigation,\r\n          selectedView: action.payload,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_BORDEREAU_SUCCESS':\r\n      return {\r\n        ...state,\r\n        claimBordereauPeriods: action.payload,\r\n      };\r\n    case 'CLAIMS_POLICY_INSURED_REQUEST':\r\n      return {\r\n        ...state,\r\n        isClaimPolicyInsuresLoading: true\r\n      };\r\n    case 'CLAIMS_POLICY_INSURED_SUCCESS':\r\n      return {\r\n        ...state,\r\n        claimPolicyInsures: action.payload,\r\n        isClaimPolicyInsuresLoading: false\r\n\r\n      };\r\n    case 'CLAIMS_POLICY_INSURED_ERROR':\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        isClaimPolicyInsuresLoading: false\r\n      };\r\n    case 'CLAIMS_POLICY_CLIENTS_REQUEST':\r\n      return {\r\n        ...state,\r\n        isPolicyClientsLoading: true\r\n      };\r\n    case 'CLAIMS_POLICY_CLIENTS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        claimPolicyClients: action.payload,\r\n        isPolicyClientsLoading: false\r\n      };\r\n    case 'CLAIMS_POLICY_CLIENTS_ERROR':\r\n      return {\r\n        ...state,\r\n        isPolicyClientsLoading: false,\r\n        error: action.payload,\r\n      };\r\n    case 'CHECK_IS_USER_CLAIM':\r\n      return {\r\n        ...state,\r\n        processing: {\r\n          ...state.processing,\r\n          isUserClaim: action.payload,\r\n        },\r\n      };\r\n    case 'CHECK_IS_CLOSED_CLAIM':\r\n      return {\r\n        ...state,\r\n        processing: {\r\n          ...state.processing,\r\n          isClosedClaim: action.payload,\r\n        },\r\n      };\r\n    case 'CHECK_IS_TEAM_CLAIM':\r\n      return {\r\n        ...state,\r\n        processing: {\r\n          ...state.processing,\r\n          isTeamClaim: action.payload,\r\n        },\r\n      };\r\n    case 'RESET_POLICY_INFORMATION':\r\n      return {\r\n        ...state,\r\n        policyInformation: initialState.policyInformation,\r\n      };\r\n    case 'RESET_LINK_POLICY_DATA':\r\n      return {\r\n        ...state,\r\n        linkPolicies: initialState.linkPolicies,\r\n      };\r\n    case 'GET_LOSS_DOCUMENT_DETAILS':\r\n      return {\r\n        ...state,\r\n        dmsDocDetails: {\r\n          ...state.dmsDocDetails,\r\n          lossDocDetails: action.payload,\r\n        },\r\n      };\r\n    case 'GET_LINK_POLICY_DOCUEMENT_DETAILS':\r\n      return {\r\n        ...state,\r\n        dmsDocDetails: {\r\n          ...state.dmsDocDetails,\r\n          linkPolicyDocDetails: action.payload,\r\n        },\r\n      };\r\n    case 'GET_CLAIMS_DOCUEMENT_DETAILS':\r\n      return {\r\n        ...state,\r\n        dmsDocDetails: {\r\n          ...state.dmsDocDetails,\r\n          claimsDocDetails: action.payload,\r\n        },\r\n      };\r\n    case 'GET_MANAGE_DOC_LOSS_DOCUMENT_DETAILS':\r\n      return {\r\n        ...state,\r\n        dmsDocDetails: {\r\n          ...state.dmsDocDetails,\r\n          manageDocument: {\r\n            ...state.dmsDocDetails.manageDocument,\r\n            lossDocumentDetails: action.payload,\r\n          },\r\n        },\r\n      };\r\n    case 'GET_MANAGE_DOC_CLAIM_DOCUMENT_DETAILS':\r\n      return {\r\n        ...state,\r\n        dmsDocDetails: {\r\n          ...state.dmsDocDetails,\r\n          manageDocument: {\r\n            ...state.dmsDocDetails.manageDocument,\r\n            claimDocumentDetails: action.payload,\r\n          },\r\n        },\r\n      };\r\n    case 'GET_LINK_POLICIES_DATA':\r\n      return {\r\n        ...state,\r\n        linkPolicies: {\r\n          ...state.linkPolicies,\r\n          ...action.payload,\r\n        },\r\n      };\r\n    case 'RESET_LINK_POLICY_DOCUMENT_DETAILS':\r\n      return {\r\n        ...state,\r\n        dmsDocDetails: {\r\n          ...state.dmsDocDetails,\r\n          linkPolicyDocDetails: initialState.dmsDocDetails.linkPolicyDocDetails,\r\n        },\r\n      };\r\n    case 'GET_LOSSES_TAB_DATA':\r\n      return {\r\n        ...state,\r\n        lossesTab: {\r\n          ...state.lossesTab,\r\n          ...action.payload\r\n        }\r\n      };\r\n    case 'RESET_LOSSES_TAB_DATA':\r\n      return {\r\n        ...state,\r\n        lossesTab: initialState.lossesTab\r\n      };\r\n    case 'GET_CLAIMS_TAB_DATA':\r\n      return {\r\n        ...state,\r\n          claimsTab: {\r\n            ...state.claimsTab,\r\n            isClaimsTabLoaded: action.payload.isClaimsTabLoaded,\r\n            searchBy: action.payload.searchBy,\r\n            searchText: action.payload.searchText,\r\n            view: action.payload.view,\r\n            includedCloseClaims: action.payload.includedCloseClaims\r\n          }\r\n      }\r\n    case 'CLAIMS_TAB_DETAILS_GET_REQUEST':\r\n        const { newReqType } = action.payload.appliedParams;\r\n        return {\r\n          ...state,\r\n          claimsTab: {\r\n            ...state.claimsTab,\r\n            tableDetails: {\r\n              ...state.claimsTab.tableDetails,\r\n            ...(newReqType === constants.CLAIM_PROCESSING_REQ_TYPES.filter ? { isloadingFilters: true } : {}),\r\n            }\r\n          },\r\n    }\r\n    case 'CLAIMS_TAB_DETAILS_GET_SUCCESS':\r\n      // const { filterValue, claimsSearchValue } = action.payload.items;\r\n      const claimsFilterValue = action.payload?.items?.filterValue;\r\n      const claimsSearchValue = action.payload?.items?.searchValue;\r\n      const claimsPageSize = get(action.payload.pagination, 'size', initialState?.claimsTab?.tableDetails?.pageSize);\r\n\r\n      const claimReqType = action.payload.requestType;\r\n      const isClaimNonFilterTypeCall = claimReqType !== constants.CLAIM_PROCESSING_REQ_TYPES.filter;\r\n\r\n      return {\r\n        ...state,\r\n        claimsTab: {\r\n          ...state.claimsTab,\r\n          tableDetails: {\r\n            ...state.claimsTab.tableDetails,\r\n            ...(isClaimNonFilterTypeCall\r\n              ? {\r\n                  items: [...(utils.generic.isValidArray(claimsSearchValue) ? claimsSearchValue : [])],\r\n                  itemsTotal: get(action.payload.pagination, 'totalElements', 0),\r\n                  page: get(action.payload.pagination, 'page', 0) + 1,\r\n                  pageSize: claimsPageSize !== 0 ? claimsPageSize : initialState?.claimsTab?.tableDetails?.pageSize,\r\n                  pageTotal: get(action.payload.pagination, 'totalPages', 0),\r\n                  query: get(action.payload.pagination, 'search') || '',\r\n                  searchBy: get(action.payload.pagination, 'searchBy') || '',\r\n                }\r\n              : {}),\r\n            sort: {\r\n              by: get(action.payload.pagination, 'orderBy') || '',\r\n              direction: (get(action.payload.pagination, 'direction') || '').toLowerCase(),\r\n            },\r\n            filters: !isClaimNonFilterTypeCall ? (claimsFilterValue ? claimsFilterValue : { ...state.claimsTab.tableDetails.filters }) : { ...state.claimsTab.tableDetails.filters },\r\n            isloadingFilters: isClaimNonFilterTypeCall ? state.claimsTab.tableDetails.isloadingFilters : false,\r\n            selected: [],\r\n          }\r\n        },\r\n      };\r\n    case 'CLAIMS_TAB_DETAILS_GET_FAILURE':\r\n        return {\r\n          ...state,\r\n          error: action.payload,\r\n          claimsTab: {\r\n            ...state.claimsTab,\r\n            tableDetails: {\r\n              ...state.claimsTab.tableDetails,\r\n              isloadingFilters: isNonfilterTypCall ? state.claimsTab.tableDetails.isloadingFilters : false,\r\n            }\r\n          }\r\n        };\r\n    case 'CLAIMS_TAB_TABLE_SELECT':\r\n        return {\r\n            ...state,\r\n            claimsTab: {\r\n              ...state?.claimsTab,\r\n              tableDetails: {\r\n                ...state.claimsTab.tableDetails,\r\n                selected: action.payload.forceSingleItem\r\n                  ? [action.payload.claimObj]\r\n                  : xorBy(state?.claimsTab?.tableDetails?.selected || [], [action.payload?.claimObj], 'processID'),\r\n              }\r\n            }\r\n          };\r\n    \r\n    case 'CLAIMS_EDIT_RE_OPENED_TASK_SUCCESS':\r\n    case 'CLAIMS_COMPLEXITY_VALUES_GET_FAILURE':\r\n    case 'CLAIMS_SAVE_COMPLEXITY_INSURED_POST_ERROR':\r\n    case 'CLAIMS_COMPLEXITY_SEARCH_POST_FAILURE':\r\n    case 'CLAIMS_PROCESSING_FILTER_POST_ERROR':\r\n    case 'CLAIMS_LOSS_FILTER_POST_ERROR':\r\n    case 'CLAIMS_LOSS_FILTER_GET_ERROR':\r\n    case 'CLAIMS_DETAILS_INFORMATION_POST_FAILURE':\r\n    case 'CLAIMS_GET_FAILURE':\r\n    case 'USER_GET_USERS_BY_ORG_FAILURE':\r\n    case 'CLAIMS_DETAILS_ERROR':\r\n    case 'CLAIMS_SETTLEMENT_CURRENCY_GET_FAILURE':\r\n    case 'CLAIMS_LOSS_QUALIFIERS_GET_FAILURE':\r\n    case 'CLAIMS_COMPLEXITY_INSURED_GET_FAILURE':\r\n    case 'CLAIMS_PRIORITY_LEVELS_GET_FAILURE':\r\n    case 'CLAIMS_BE_ADJUSTER_GET_FAILURE':\r\n    case 'CLAIMS_UNDERWRITING_GROUPS_GET_FAILURE':\r\n    case 'CLAIMS_STATUSES_GET_FAILURE':\r\n    case 'CLAIMS_COMPLEXITY_GET_FAILURE':\r\n    case 'CLAIMS_DETAILS_INFORMATION_SUBMIT_FAILURE':\r\n    case 'CLAIMS_COMPLEXITY_DIVISION_GET_FAILURE':\r\n    case 'CLAIMS_COMPLEXITY_DIVISION_SAVE_FAILURE':\r\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_COMPLEX_ID_GET_FAILURE':\r\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_COMPLEX_ID_SAVE_FAILURE':\r\n    case 'CLAIMS_ADD_COMPLEXITY_VALUES_FAILURE':\r\n    case 'CLAIMS_REMOVE_COMPLEXITY_VALUES_FAILURE':\r\n    case 'CLAIMS_COMPLEXITY_ADD_REFERRAL_FAILURE':\r\n    case 'CLAIMS_COMPLEXITY_FLAGGED_GET_FAILURE':\r\n    case 'CLAIMS_REMOVE_REFERRAL_VALUES_FAILURE':\r\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_REFERRAL_ID_GET_FAILURE':\r\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_REFERRAL_ID_SAVE_FAILURE':\r\n    case 'CLAIMS_COMPLEXITY_REFERRAL_VALUES_GET_FAILURE':\r\n    case 'CLAIMS_SAVE_COMPLEXITY_POLICY_POST_ERROR':\r\n    case 'CLAIMS_REFERRAL_VALUES_GET_FAILURE':\r\n    case 'CLAIMS_COMPLEXITY_BASIS_VALUE_GET_FAILURE':\r\n    case 'CLAIMS_REFERRAL_RESPONSE_GET_FAILURE':\r\n    case 'CLAIMS_COMPLEXITY_POLICY_REMOVE_FAILURE':\r\n    case 'CLAIMS_COMPLEXITY_INSURED_REMOVE_FAILURE':\r\n    case 'CLAIMS_SAVE_NOTES_POST_ERROR':\r\n    case 'CLAIM_NOTES_POST_FAILURE':\r\n    case 'CLAIM_TASK_NOTES_GET_FAILURE':\r\n    case 'CLAIMS_TASK_PRIORITY_POST_FAILURE':\r\n    case 'CLAIMS_TASK_SANCTIONS_CHECK_POST_FAILURE':\r\n    case 'CLAIMS_TASK_PROCESSING_SAVE_ASSIGNEES_ERROR':\r\n    case 'CLAIMS_TASK_PROCESSING_GET_CHECKLIST_FAILURE':\r\n    case 'CLAIMS_TASK_PROCESSING_GET_NEXT_TASKLIST_FAILURE':\r\n    case 'CLAIMS_TASK_PROCESSING_SAVE_CHECKLIST_ACTIONS_ERROR':\r\n    case 'CLAIMS_TASK_PROCESSING_SAVE_NEXT_ACTION_ERROR':\r\n    case 'CLAIMS_TASK_DASHBOARD_DETAIL_GET_FAILURE':\r\n    case 'CLAIMS_SET_PRIORITY_FAILURE':\r\n    case 'GET_ASSOCIATED_TASK_FAILURE':\r\n    case 'CLAIMREF_EDIT_NOTES_FAILURE':\r\n    case 'CURRENCY_PURCHASED_VALUE_GET_FAILURE':\r\n    case 'CLAIMS_GET_RFI_HISTORY_FAILURE':\r\n    case 'CLOSE_SANCTIONS_CHECK_FAILURE':\r\n    case 'CLAIM_RETURN_TO_TEAM_QUEUE_ERROR':\r\n    case 'CLAIMS_SEND_RFI_POST_FAILURE':\r\n    case 'CLAIMS_CLOSE_RFI_POST_FAILURE':\r\n    case 'CLOSE_CLAIMS_POST_ERROR':\r\n    case 'CLAIM_COMPLEXITY_TYPES_GET_FAILURE':\r\n    case 'CLAIMS_PROCESSING_SINGLE_ASSIGN_ERROR':\r\n    case 'CLAIMS_BORDEREAU_ERROR':\r\n    case 'CLAIMS_COUNTRIESLIST_GET_FAILURE':\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default claimsReducer;\r\n"]},"metadata":{},"sourceType":"module"}