{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\RfiDetails\\\\RfiDetails.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux'; //app\n\nimport { RfiDetailsView } from './RfiDetails.view';\nimport { setDmsTaskContextType, resetDmsTaskTypeContext, selectLossInformation, selectLossInfoIsLoading, selectClaimsInformation, selectClaimsTabSelectedClaimData, selectClaimInfoIsLoading, selectTaskDashboardTaskDetails, selectIsTaskDashboardTaskDetailsLoading, selectRfiHistoryListLoader, selectRefDataCatCodesList, selectQueryCodes, selectRefDataQueryCodes, selectLossQualifiers, selectSanctionsCheckStatus, getSanctionsCheckStatus, getLossInformation, getSelectedClaimDetails, getClaimsTaskDashboardDetail, getRfiHistory, resetRfiDashboardData } from 'stores';\nimport { DMS_TASK_CONTEXT_TYPE_RFI_RESPONSE } from 'consts';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function RfiDetails(props) {\n  _s();\n\n  var rfiTask = props.rfiTask;\n  var dispatch = useDispatch();\n  var lossInformation = useSelector(selectLossInformation);\n  var isLossInfoLoading = useSelector(selectLossInfoIsLoading);\n  var claimsInformation = useSelector(selectClaimsInformation);\n  var claimBasicDetail = useSelector(selectClaimsTabSelectedClaimData);\n  var isClaimInfoLoading = useSelector(selectClaimInfoIsLoading);\n  var associatedTaskInformation = useSelector(selectTaskDashboardTaskDetails);\n  var isAssociatedTaskInfoLoading = useSelector(selectIsTaskDashboardTaskDetailsLoading);\n  var catCodes = useSelector(selectRefDataCatCodesList);\n  var claimsQueryCodes = useSelector(selectQueryCodes);\n  var refDataQueryCodes = useSelector(selectRefDataQueryCodes);\n  var lossQualifiers = useSelector(selectLossQualifiers);\n  var sanctionCheckStatus = useSelector(selectSanctionsCheckStatus);\n  var rfiHistoryLoader = useSelector(selectRfiHistoryListLoader);\n  var rfiOriginType = utils.claimsRfi.checkRfiOriginType(rfiTask === null || rfiTask === void 0 ? void 0 : rfiTask.refType);\n  var claimDetail = (claimsInformation === null || claimsInformation === void 0 ? void 0 : claimsInformation.claimReference) ? claimsInformation : claimBasicDetail;\n  useEffect(function () {\n    dispatch(getRfiHistory(rfiTask === null || rfiTask === void 0 ? void 0 : rfiTask.taskId));\n    dispatch(setDmsTaskContextType({\n      type: DMS_TASK_CONTEXT_TYPE_RFI_RESPONSE,\n      refId: rfiTask === null || rfiTask === void 0 ? void 0 : rfiTask.taskId\n    }));\n    dispatch(getLossInformation({\n      lossDetailsId: rfiTask === null || rfiTask === void 0 ? void 0 : rfiTask.lossDetailID,\n      sourceIdParams: rfiTask === null || rfiTask === void 0 ? void 0 : rfiTask.sourceID,\n      divisionIdParam: rfiTask === null || rfiTask === void 0 ? void 0 : rfiTask.departmentID,\n      claimRefParam: (rfiTask === null || rfiTask === void 0 ? void 0 : rfiTask.processRef) || (rfiTask === null || rfiTask === void 0 ? void 0 : rfiTask.claimRef),\n      viewLoader: false\n    }));\n    dispatch(getSelectedClaimDetails({\n      claimId: rfiTask === null || rfiTask === void 0 ? void 0 : rfiTask.businessProcessID,\n      claimRefParams: rfiTask === null || rfiTask === void 0 ? void 0 : rfiTask.claimRef,\n      sourceIdParams: rfiTask === null || rfiTask === void 0 ? void 0 : rfiTask.sourceID,\n      divisionIDParams: rfiTask === null || rfiTask === void 0 ? void 0 : rfiTask.departmentID,\n      viewLoader: false\n    }));\n    dispatch(getClaimsTaskDashboardDetail({\n      query: rfiTask === null || rfiTask === void 0 ? void 0 : rfiTask.parentTaskRef,\n      claimID: rfiTask === null || rfiTask === void 0 ? void 0 : rfiTask.businessProcessID,\n      viewLoader: false\n    }));\n    dispatch(getSanctionsCheckStatus(rfiTask === null || rfiTask === void 0 ? void 0 : rfiTask.rootProcessId, false));\n    return function () {\n      dispatch(resetDmsTaskTypeContext());\n      dispatch(resetRfiDashboardData());\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n  //Sections Data\n\n  var lossInfo = utils.claimsAdditionalDetails.getLossCardInfo(lossInformation, catCodes, isLossInfoLoading);\n  var claimInfo = utils.claimsAdditionalDetails.getClaimCardInfo(claimDetail, lossQualifiers, isClaimInfoLoading);\n  var taskInfo = utils.claimsAdditionalDetails.getTaskCardInfo(associatedTaskInformation, sanctionCheckStatus, isAssociatedTaskInfoLoading);\n  return /*#__PURE__*/_jsxDEV(RfiDetailsView, _objectSpread(_objectSpread({}, props), {}, {\n    rfiOriginType: rfiOriginType,\n    lossInfo: lossInfo,\n    claimInfo: claimInfo,\n    taskInfo: taskInfo,\n    claimsQueryCodes: claimsQueryCodes,\n    refDataQueryCodes: refDataQueryCodes,\n    rfiHistoryLoader: rfiHistoryLoader\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RfiDetails, \"vWmwNMr6tsCeEUarkfiU05Ufts4=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = RfiDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"RfiDetails\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/RfiDetails/RfiDetails.js"],"names":["React","useEffect","useDispatch","useSelector","RfiDetailsView","setDmsTaskContextType","resetDmsTaskTypeContext","selectLossInformation","selectLossInfoIsLoading","selectClaimsInformation","selectClaimsTabSelectedClaimData","selectClaimInfoIsLoading","selectTaskDashboardTaskDetails","selectIsTaskDashboardTaskDetailsLoading","selectRfiHistoryListLoader","selectRefDataCatCodesList","selectQueryCodes","selectRefDataQueryCodes","selectLossQualifiers","selectSanctionsCheckStatus","getSanctionsCheckStatus","getLossInformation","getSelectedClaimDetails","getClaimsTaskDashboardDetail","getRfiHistory","resetRfiDashboardData","DMS_TASK_CONTEXT_TYPE_RFI_RESPONSE","utils","RfiDetails","props","rfiTask","dispatch","lossInformation","isLossInfoLoading","claimsInformation","claimBasicDetail","isClaimInfoLoading","associatedTaskInformation","isAssociatedTaskInfoLoading","catCodes","claimsQueryCodes","refDataQueryCodes","lossQualifiers","sanctionCheckStatus","rfiHistoryLoader","rfiOriginType","claimsRfi","checkRfiOriginType","refType","claimDetail","claimReference","taskId","type","refId","lossDetailsId","lossDetailID","sourceIdParams","sourceID","divisionIdParam","departmentID","claimRefParam","processRef","claimRef","viewLoader","claimId","businessProcessID","claimRefParams","divisionIDParams","query","parentTaskRef","claimID","rootProcessId","lossInfo","claimsAdditionalDetails","getLossCardInfo","claimInfo","getClaimCardInfo","taskInfo","getTaskCardInfo"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n//app\r\nimport { RfiDetailsView } from './RfiDetails.view';\r\nimport {\r\n  setDmsTaskContextType,\r\n  resetDmsTaskTypeContext,\r\n  selectLossInformation,\r\n  selectLossInfoIsLoading,\r\n  selectClaimsInformation,\r\n  selectClaimsTabSelectedClaimData,\r\n  selectClaimInfoIsLoading,\r\n  selectTaskDashboardTaskDetails,\r\n  selectIsTaskDashboardTaskDetailsLoading,\r\n  selectRfiHistoryListLoader,\r\n  selectRefDataCatCodesList,\r\n  selectQueryCodes,\r\n  selectRefDataQueryCodes,\r\n  selectLossQualifiers,\r\n  selectSanctionsCheckStatus,\r\n  getSanctionsCheckStatus,\r\n  getLossInformation,\r\n  getSelectedClaimDetails,\r\n  getClaimsTaskDashboardDetail,\r\n  getRfiHistory,\r\n  resetRfiDashboardData,\r\n} from 'stores';\r\nimport { DMS_TASK_CONTEXT_TYPE_RFI_RESPONSE } from 'consts';\r\nimport * as utils from 'utils';\r\n\r\nexport default function RfiDetails(props) {\r\n  const { rfiTask } = props;\r\n  const dispatch = useDispatch();\r\n\r\n  const lossInformation = useSelector(selectLossInformation);\r\n  const isLossInfoLoading = useSelector(selectLossInfoIsLoading);\r\n  const claimsInformation = useSelector(selectClaimsInformation);\r\n  const claimBasicDetail = useSelector(selectClaimsTabSelectedClaimData);\r\n  const isClaimInfoLoading = useSelector(selectClaimInfoIsLoading);\r\n  const associatedTaskInformation = useSelector(selectTaskDashboardTaskDetails);\r\n  const isAssociatedTaskInfoLoading = useSelector(selectIsTaskDashboardTaskDetailsLoading);\r\n\r\n  const catCodes = useSelector(selectRefDataCatCodesList);\r\n  const claimsQueryCodes = useSelector(selectQueryCodes);\r\n  const refDataQueryCodes = useSelector(selectRefDataQueryCodes);\r\n  const lossQualifiers = useSelector(selectLossQualifiers);\r\n  const sanctionCheckStatus = useSelector(selectSanctionsCheckStatus);\r\n  const rfiHistoryLoader = useSelector(selectRfiHistoryListLoader);\r\n\r\n  const rfiOriginType = utils.claimsRfi.checkRfiOriginType(rfiTask?.refType);\r\n  const claimDetail = claimsInformation?.claimReference ? claimsInformation : claimBasicDetail;\r\n\r\n  useEffect(() => {\r\n    dispatch(getRfiHistory(rfiTask?.taskId));\r\n    dispatch(setDmsTaskContextType({ type: DMS_TASK_CONTEXT_TYPE_RFI_RESPONSE, refId: rfiTask?.taskId }));\r\n\r\n    dispatch(\r\n      getLossInformation({\r\n        lossDetailsId: rfiTask?.lossDetailID,\r\n        sourceIdParams: rfiTask?.sourceID,\r\n        divisionIdParam: rfiTask?.departmentID,\r\n        claimRefParam: rfiTask?.processRef || rfiTask?.claimRef,\r\n        viewLoader: false,\r\n      })\r\n    );\r\n    dispatch(\r\n      getSelectedClaimDetails({\r\n        claimId: rfiTask?.businessProcessID,\r\n        claimRefParams: rfiTask?.claimRef,\r\n        sourceIdParams: rfiTask?.sourceID,\r\n        divisionIDParams: rfiTask?.departmentID,\r\n        viewLoader: false,\r\n      })\r\n    );\r\n    dispatch(getClaimsTaskDashboardDetail({ query: rfiTask?.parentTaskRef, claimID: rfiTask?.businessProcessID, viewLoader: false }));\r\n\r\n    dispatch(getSanctionsCheckStatus(rfiTask?.rootProcessId, false));\r\n\r\n    return () => {\r\n      dispatch(resetDmsTaskTypeContext());\r\n      dispatch(resetRfiDashboardData());\r\n    };\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  //Sections Data\r\n  const lossInfo = utils.claimsAdditionalDetails.getLossCardInfo(lossInformation, catCodes, isLossInfoLoading);\r\n  const claimInfo = utils.claimsAdditionalDetails.getClaimCardInfo(claimDetail, lossQualifiers, isClaimInfoLoading);\r\n  const taskInfo = utils.claimsAdditionalDetails.getTaskCardInfo(\r\n    associatedTaskInformation,\r\n    sanctionCheckStatus,\r\n    isAssociatedTaskInfoLoading\r\n  );\r\n\r\n  return (\r\n    <RfiDetailsView\r\n      {...props}\r\n      rfiOriginType={rfiOriginType}\r\n      lossInfo={lossInfo}\r\n      claimInfo={claimInfo}\r\n      taskInfo={taskInfo}\r\n      claimsQueryCodes={claimsQueryCodes}\r\n      refDataQueryCodes={refDataQueryCodes}\r\n      rfiHistoryLoader={rfiHistoryLoader}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}