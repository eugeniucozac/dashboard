{"ast":null,"code":"import \"core-js/modules/es.promise.finally\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { addLoader, enqueueNotification, removeLoader, hideModal } from 'stores';\nimport * as utils from 'utils';\nimport { getComplexityBasisValue, authLogout } from 'stores';\nimport * as constants from 'consts';\nexport var postClaimsComplexityValues = function postClaimsComplexityValues(formData) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/claims.actions.postClaimsComplexityValues'\n    };\n    dispatch(postClaimsComplexityValuesRequest(formData));\n    dispatch(addLoader('postClaimsComplexityValues'));\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.claimService,\n      path: 'api/data/claims-triage/complex/complexity-values',\n      data: formData\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(postClaimsComplexityValuesSuccess(data.data));\n      dispatch(enqueueNotification('notification.addComplexityValue.success', 'success'));\n      dispatch(getComplexityBasisValue());\n      dispatch(hideModal());\n      return data;\n    })[\"catch\"](function (err) {\n      var _err$response;\n\n      utils.api.handleError(err, _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API fetch error (claims.postClaimComplexityValues)'\n      }));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(postClaimsComplexityValuesFailure(err));\n      dispatch((err === null || err === void 0 ? void 0 : (_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.status) === constants.API_STATUS_CONFLICT ? enqueueNotification('notification.addComplexityValue.duplicate', 'error') : enqueueNotification('notification.addComplexityValue.fail', 'error'));\n      return err;\n    })[\"finally\"](function () {\n      dispatch(removeLoader('postClaimsComplexityValues'));\n    });\n  };\n};\nexport var postClaimsComplexityValuesRequest = function postClaimsComplexityValuesRequest(formData) {\n  return {\n    type: 'CLAIMS_ADD_COMPLEXITY_VALUES_REQUEST',\n    payload: formData\n  };\n};\nexport var postClaimsComplexityValuesSuccess = function postClaimsComplexityValuesSuccess(data) {\n  return {\n    type: 'CLAIMS_ADD_COMPLEXITY_VALUES_SUCCESS',\n    payload: data\n  };\n};\nexport var postClaimsComplexityValuesFailure = function postClaimsComplexityValuesFailure(err) {\n  return {\n    type: 'CLAIMS_ADD_COMPLEXITY_VALUES_FAILURE',\n    payload: err\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.postClaimsComplexityValues.js"],"names":["addLoader","enqueueNotification","removeLoader","hideModal","utils","getComplexityBasisValue","authLogout","constants","postClaimsComplexityValues","formData","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","postClaimsComplexityValuesRequest","api","post","token","accessToken","claimService","path","data","then","response","handleResponse","json","handleNewData","postClaimsComplexityValuesSuccess","err","handleError","message","handleUnauthorized","postClaimsComplexityValuesFailure","status","API_STATUS_CONFLICT","type","payload"],"mappings":"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","sourcesContent":["import { addLoader, enqueueNotification, removeLoader, hideModal } from 'stores';\r\nimport * as utils from 'utils';\r\nimport { getComplexityBasisValue, authLogout } from 'stores';\r\nimport * as constants from 'consts';\r\n\r\nexport const postClaimsComplexityValues = (formData) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } } } = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.postClaimsComplexityValues',\r\n  };\r\n\r\n  dispatch(postClaimsComplexityValuesRequest(formData));\r\n  dispatch(addLoader('postClaimsComplexityValues'));\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.claimService,\r\n      path: 'api/data/claims-triage/complex/complexity-values',\r\n      data: formData,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(postClaimsComplexityValuesSuccess(data.data));\r\n      dispatch(enqueueNotification('notification.addComplexityValue.success', 'success'));\r\n      dispatch(getComplexityBasisValue());\r\n      dispatch(hideModal());\r\n      return data;\r\n    })\r\n    .catch((err) => {\r\n      utils.api.handleError(err, { ...defaultError, message: 'API fetch error (claims.postClaimComplexityValues)' });\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(postClaimsComplexityValuesFailure(err));\r\n      dispatch(\r\n        err?.response?.status === constants.API_STATUS_CONFLICT\r\n          ? enqueueNotification('notification.addComplexityValue.duplicate', 'error')\r\n          : enqueueNotification('notification.addComplexityValue.fail', 'error')\r\n      );\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('postClaimsComplexityValues'));\r\n    });\r\n};\r\n\r\nexport const postClaimsComplexityValuesRequest = (formData) => {\r\n  return {\r\n    type: 'CLAIMS_ADD_COMPLEXITY_VALUES_REQUEST',\r\n    payload: formData,\r\n  };\r\n};\r\n\r\nexport const postClaimsComplexityValuesSuccess = (data) => {\r\n  return {\r\n    type: 'CLAIMS_ADD_COMPLEXITY_VALUES_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const postClaimsComplexityValuesFailure = (err) => {\r\n  return {\r\n    type: 'CLAIMS_ADD_COMPLEXITY_VALUES_FAILURE',\r\n    payload: err,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}