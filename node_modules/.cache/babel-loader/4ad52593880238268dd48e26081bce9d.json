{"ast":null,"code":"var _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\TaskSidebarDocument\\\\TaskSidebarDocument.view.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router'; // app\n\nimport styles from './TaskSidebarDocument.styles';\nimport { Link, FormFileDrop } from 'components';\nimport { showModal, selectClaimsTasksProcessingSelected, addLoader } from 'stores';\nimport * as utils from 'utils';\nimport * as constants from 'consts';\nimport config from 'config'; // mui\n\nimport { makeStyles, Grid } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nTaskSidebarDocumentView.propTypes = {\n  fields: PropTypes.array\n};\nexport function TaskSidebarDocumentView(_ref) {\n  _s();\n\n  var fields = _ref.fields;\n  var classes = makeStyles(styles, {\n    name: 'TaskSidebarDocument'\n  })();\n  var dispatch = useDispatch();\n  var history = useHistory();\n  var tasksSelected = useSelector(selectClaimsTasksProcessingSelected);\n  var task = tasksSelected[0];\n\n  var uploadModal = function uploadModal() {\n    return function (files) {\n      dispatch(addLoader('DmsUploadFiles'));\n      dispatch(showModal({\n        component: 'DMS_UPLOAD_FILES',\n        props: {\n          fullWidth: true,\n          title: utils.string.t('dms.upload.modalItems.uploadDocuments'),\n          maxWidth: 'xl',\n          componentProps: {\n            files: files,\n            context: constants.DMS_CONTEXT_TASK,\n            referenceId: task === null || task === void 0 ? void 0 : task.taskId,\n            sourceId: Number(task === null || task === void 0 ? void 0 : task.sourceID),\n            documentTypeKey: constants.DMS_DOCUMENT_TYPE_SECTION_KEYS.claims,\n            confirmLabel: utils.string.t('app.ok'),\n            cancelLabel: utils.string.t('app.goBack'),\n            confirmMessage: utils.string.t('processingInstructions.documentsWillNotBeSaved'),\n            buttonColors: {\n              confirm: 'secondary',\n              cancel: 'primary'\n            }\n          }\n        }\n      }));\n    };\n  };\n\n  var isAnRfiTask = function isAnRfiTask(task) {\n    return (task === null || task === void 0 ? void 0 : task.taskType) === 'RFI' || (task === null || task === void 0 ? void 0 : task.taskRef.startsWith('Q'));\n  };\n\n  var viewAllDocs = function viewAllDocs() {\n    if (task === null || task === void 0 ? void 0 : task.taskRef) {\n      if (isAnRfiTask(task)) {\n        history.push(\"\".concat(config.routes.claimsProcessing.rfi, \"/\").concat(task.taskRef, \"/documents\"));\n      } else {\n        history.push(\"\".concat(config.routes.claimsProcessing.task, \"/\").concat(task.taskRef, \"/documents\"));\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    \"justify-content\": \"flex-end\",\n    spacing: 2,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      \"justify-content\": \"flex-end\",\n      className: classes.viewDocs,\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        text: utils.string.t('app.viewalldocuments'),\n        color: \"secondary\",\n        handleClick: function handleClick() {\n          return viewAllDocs();\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsxDEV(FormFileDrop, {\n        name: \"file\",\n        attachedFiles: \"\",\n        showUploadPreview: false,\n        componentProps: {\n          multiple: true\n        },\n        dragLabel: utils.string.t('dms.upload.modalItems.dragDrop'),\n        onChange: uploadModal()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TaskSidebarDocumentView, \"VfOjwqhsJegKpiGJSC3E3/HHpoE=\", false, function () {\n  return [useDispatch, useHistory, useSelector];\n});\n\n_c = TaskSidebarDocumentView;\nTaskSidebarDocumentView.displayName = \"TaskSidebarDocumentView\";\nTaskSidebarDocumentView.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"TaskSidebarDocumentView\",\n  \"props\": {\n    \"fields\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\modules\\\\TaskSidebarDocument\\\\TaskSidebarDocument.view.js\"] = {\n    name: \"TaskSidebarDocumentView\",\n    docgenInfo: TaskSidebarDocumentView.__docgenInfo,\n    path: \"src\\\\modules\\\\TaskSidebarDocument\\\\TaskSidebarDocument.view.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskSidebarDocumentView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/TaskSidebarDocument/TaskSidebarDocument.view.js"],"names":["React","PropTypes","useSelector","useDispatch","useHistory","styles","Link","FormFileDrop","showModal","selectClaimsTasksProcessingSelected","addLoader","utils","constants","config","makeStyles","Grid","TaskSidebarDocumentView","propTypes","fields","array","classes","name","dispatch","history","tasksSelected","task","uploadModal","files","component","props","fullWidth","title","string","t","maxWidth","componentProps","context","DMS_CONTEXT_TASK","referenceId","taskId","sourceId","Number","sourceID","documentTypeKey","DMS_DOCUMENT_TYPE_SECTION_KEYS","claims","confirmLabel","cancelLabel","confirmMessage","buttonColors","confirm","cancel","isAnRfiTask","taskType","taskRef","startsWith","viewAllDocs","push","routes","claimsProcessing","rfi","viewDocs","multiple"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\n\r\n// app\r\nimport styles from './TaskSidebarDocument.styles';\r\nimport { Link, FormFileDrop } from 'components';\r\nimport { showModal, selectClaimsTasksProcessingSelected, addLoader } from 'stores';\r\nimport * as utils from 'utils';\r\nimport * as constants from 'consts';\r\nimport config from 'config';\r\n\r\n// mui\r\nimport { makeStyles, Grid } from '@material-ui/core';\r\n\r\nTaskSidebarDocumentView.propTypes = {\r\n  fields: PropTypes.array,\r\n};\r\n\r\nexport function TaskSidebarDocumentView({ fields }) {\r\n  const classes = makeStyles(styles, { name: 'TaskSidebarDocument' })();\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const tasksSelected = useSelector(selectClaimsTasksProcessingSelected);\r\n  const task = tasksSelected[0];\r\n\r\n  const uploadModal = () => (files) => {\r\n    dispatch(addLoader('DmsUploadFiles'));\r\n\r\n    dispatch(\r\n      showModal({\r\n        component: 'DMS_UPLOAD_FILES',\r\n        props: {\r\n          fullWidth: true,\r\n          title: utils.string.t('dms.upload.modalItems.uploadDocuments'),\r\n          maxWidth: 'xl',\r\n          componentProps: {\r\n            files,\r\n            context: constants.DMS_CONTEXT_TASK,\r\n            referenceId: task?.taskId,\r\n            sourceId: Number(task?.sourceID),\r\n            documentTypeKey: constants.DMS_DOCUMENT_TYPE_SECTION_KEYS.claims,\r\n            confirmLabel: utils.string.t('app.ok'),\r\n            cancelLabel: utils.string.t('app.goBack'),\r\n            confirmMessage: utils.string.t('processingInstructions.documentsWillNotBeSaved'),\r\n            buttonColors: { confirm: 'secondary', cancel: 'primary' },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const isAnRfiTask = (task) => {\r\n    return task?.taskType === 'RFI' || task?.taskRef.startsWith('Q');\r\n  };\r\n\r\n  const viewAllDocs = () => {\r\n    if (task?.taskRef) {\r\n      if (isAnRfiTask(task)) {\r\n        history.push(`${config.routes.claimsProcessing.rfi}/${task.taskRef}/documents`);\r\n      } else {\r\n        history.push(`${config.routes.claimsProcessing.task}/${task.taskRef}/documents`);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid container justify-content=\"flex-end\" spacing={2}>\r\n      <Grid item xs={12} justify-content=\"flex-end\" className={classes.viewDocs}>\r\n        <Link text={utils.string.t('app.viewalldocuments')} color=\"secondary\" handleClick={() => viewAllDocs()} />\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <FormFileDrop\r\n          name=\"file\"\r\n          attachedFiles=\"\"\r\n          showUploadPreview={false}\r\n          componentProps={{\r\n            multiple: true,\r\n          }}\r\n          dragLabel={utils.string.t('dms.upload.modalItems.dragDrop')}\r\n          onChange={uploadModal()}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}