{"ast":null,"code":"import * as utils from 'utils';\nimport { authLogout } from 'stores';\nexport var getRfiResponseDate = function getRfiResponseDate(params) {\n  return function (dispatch, getState) {\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var _params$sla = params.sla,\n        sla = _params$sla === void 0 ? 0 : _params$sla;\n    var request = {\n      considerDays: sla\n    };\n    dispatch(getRfiResponseDateRequest());\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.bpmService,\n      path: \"workflow/holidayList/getSlaDate\",\n      params: request\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(getRfiResponseDateSuccess(data === null || data === void 0 ? void 0 : data.data));\n      return data;\n    }).catch(function (err) {\n      dispatch(getRfiResponseDateFailure(err));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      return err;\n    });\n  };\n};\nexport var getRfiResponseDateRequest = function getRfiResponseDateRequest() {\n  return {\n    type: 'PREMIUM_PROCESSING_RFI_RESPONSE_DATE_REQUEST'\n  };\n};\nexport var getRfiResponseDateSuccess = function getRfiResponseDateSuccess(data) {\n  return {\n    type: 'PREMIUM_PROCESSING_RFI_RESPONSE_DATE_SUCCESS',\n    payload: {\n      responseDate: data.dueDate\n    }\n  };\n};\nexport var getRfiResponseDateFailure = function getRfiResponseDateFailure(error) {\n  return {\n    type: 'PREMIUM_PROCESSING_RFI_RESPONSE_DATE_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/premiumProcessing/premiumProcessing.actions.getRfiResponseDate.js"],"names":["utils","authLogout","getRfiResponseDate","params","dispatch","getState","auth","user","endpoint","config","vars","sla","request","considerDays","getRfiResponseDateRequest","api","get","token","accessToken","bpmService","path","then","response","handleResponse","json","handleNewData","data","getRfiResponseDateSuccess","catch","err","getRfiResponseDateFailure","handleUnauthorized","type","payload","responseDate","dueDate","error"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,QAA3B;AACA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,MAAD;AAAA,SAAY,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAAA,oBAMhEA,QAAQ,EANwD;AAAA,QAE1DC,IAF0D,aAElEC,IAFkE,CAE1DD,IAF0D;AAAA,QAIxDE,QAJwD,aAGlEC,MAHkE,CAIhEC,IAJgE,CAIxDF,QAJwD;;AAAA,sBAQhDL,MARgD,CAQ5DQ,GAR4D;AAAA,QAQ5DA,GAR4D,4BAQtD,CARsD;AASpE,QAAMC,OAAO,GAAG;AACdC,MAAAA,YAAY,EAAEF;AADA,KAAhB;AAIAP,IAAAA,QAAQ,CAACU,yBAAyB,EAA1B,CAAR;AAEA,WAAOd,KAAK,CAACe,GAAN,CACJC,GADI,CACA;AACHC,MAAAA,KAAK,EAAEX,IAAI,CAACY,WADT;AAEHV,MAAAA,QAAQ,EAAEA,QAAQ,CAACW,UAFhB;AAGHC,MAAAA,IAAI,mCAHD;AAIHjB,MAAAA,MAAM,EAAES;AAJL,KADA,EAOJS,IAPI,CAOC,UAACC,QAAD;AAAA,aAActB,KAAK,CAACe,GAAN,CAAUQ,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAPD,EAQJD,IARI,CAQC,UAACG,IAAD;AAAA,aAAUxB,KAAK,CAACe,GAAN,CAAUU,aAAV,CAAwBD,IAAxB,CAAV;AAAA,KARD,EASJH,IATI,CASC,UAACK,IAAD,EAAU;AACdtB,MAAAA,QAAQ,CAACuB,yBAAyB,CAACD,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEA,IAAP,CAA1B,CAAR;AACA,aAAOA,IAAP;AACD,KAZI,EAaJE,KAbI,CAaE,UAACC,GAAD,EAAS;AACdzB,MAAAA,QAAQ,CAAC0B,yBAAyB,CAACD,GAAD,CAA1B,CAAR;AACA7B,MAAAA,KAAK,CAACe,GAAN,CAAUgB,kBAAV,CAA6BF,GAA7B,EAAkCzB,QAAlC,EAA4CH,UAA5C;AACA,aAAO4B,GAAP;AACD,KAjBI,CAAP;AAkBD,GAjCiC;AAAA,CAA3B;AAmCP,OAAO,IAAMf,yBAAyB,GAAG,SAA5BA,yBAA4B,GAAM;AAC7C,SAAO;AACLkB,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,IAAML,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACD,IAAD,EAAU;AACjD,SAAO;AACLM,IAAAA,IAAI,EAAE,8CADD;AAELC,IAAAA,OAAO,EAAE;AACPC,MAAAA,YAAY,EAAER,IAAI,CAACS;AADZ;AAFJ,GAAP;AAMD,CAPM;AASP,OAAO,IAAML,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACM,KAAD,EAAW;AAClD,SAAO;AACLJ,IAAAA,IAAI,EAAE,8CADD;AAELC,IAAAA,OAAO,EAAEG;AAFJ,GAAP;AAID,CALM","sourcesContent":["import * as utils from 'utils';\r\nimport { authLogout } from 'stores';\r\nexport const getRfiResponseDate = (params) => (dispatch, getState) => {\r\n  const {\r\n    user: { auth },\r\n    config: {\r\n      vars: { endpoint },\r\n    },\r\n  } = getState();\r\n\r\n  const { sla = 0 } = params;\r\n  const request = {\r\n    considerDays: sla,\r\n  };\r\n\r\n  dispatch(getRfiResponseDateRequest());\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.bpmService,\r\n      path: `workflow/holidayList/getSlaDate`,\r\n      params: request,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(getRfiResponseDateSuccess(data?.data));\r\n      return data;\r\n    })\r\n    .catch((err) => {\r\n      dispatch(getRfiResponseDateFailure(err));\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const getRfiResponseDateRequest = () => {\r\n  return {\r\n    type: 'PREMIUM_PROCESSING_RFI_RESPONSE_DATE_REQUEST',\r\n  };\r\n};\r\n\r\nexport const getRfiResponseDateSuccess = (data) => {\r\n  return {\r\n    type: 'PREMIUM_PROCESSING_RFI_RESPONSE_DATE_SUCCESS',\r\n    payload: {\r\n      responseDate: data.dueDate,\r\n    },\r\n  };\r\n};\r\n\r\nexport const getRfiResponseDateFailure = (error) => {\r\n  return {\r\n    type: 'PREMIUM_PROCESSING_RFI_RESPONSE_DATE_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}