{"ast":null,"code":"import _defineProperty from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport get from 'lodash/get'; // app\n\nimport config from 'config';\nimport * as constants from 'consts';\nimport * as utils from 'utils';\nvar initialState = {\n  gridData: {\n    items: [],\n    itemsTotal: 0,\n    page: 1,\n    pageSize: config.ui.pagination.default,\n    pageTotal: 0,\n    query: '',\n    filters: {},\n    sort: {\n      by: 'instructionId',\n      type: 'lexical',\n      direction: 'desc'\n    }\n  },\n  isPiGridDataLoading: false,\n  isPiHasNoGridData: false,\n  departmentList: [],\n  advancedSearchResults: [],\n  addedRiskRefDetailsFromAdvSearch: [],\n  producingBrokers: [],\n  accountExecutives: [],\n  piAccountExecutives: [],\n  producingBrokerNames: [],\n  workFlowFrontEndContacts: [],\n  instructions: [],\n  riskReferencesDocumentsCountList: [],\n  isRiskReferenceDocumentCountLoading: true,\n  financialCheckList: [],\n  retainedBrokerageAmountList: [],\n  isFinancialCheckListLoading: false,\n  documents: {\n    riskReferences: [],\n    premiumTaxDocument: null,\n    signedLinesDocument: null\n  },\n  endorsementNonPremium: [],\n  bordereauPolicyTypes: [],\n  facilityTypes: [],\n  statuses: [],\n  retainedBrokerageAmountForPdf: {\n    retBrokerageAmt: '',\n    convertedBrokerageAmt: {}\n  },\n  totalAmountForPdf: '',\n  isResetAllSelected: false,\n  selectedRiskRef: {},\n  givenRiskRefs: [],\n  givenRiskRefsHeaders: [],\n  autoMatch: false,\n  headerMap: [{\n    key: 'riskReference',\n    value: ''\n  }, {\n    key: 'grossPremiumAmount',\n    value: ''\n  }, {\n    key: 'slipOrder',\n    value: ''\n  }, {\n    key: 'totalBrokerage',\n    value: ''\n  }, {\n    key: 'clientDiscount',\n    value: ''\n  }, {\n    key: 'thirdPartyCommissionSharing',\n    value: ''\n  }, {\n    key: 'thirdPartyName',\n    value: ''\n  }, {\n    key: 'pfInternalCommissionSharing',\n    value: ''\n  }, {\n    key: 'pfInternalDepartment',\n    value: ''\n  }, {\n    key: 'retainedBrokerage',\n    value: ''\n  }, {\n    key: 'retainedBrokerageCurrencyCode',\n    value: ''\n  }, {\n    key: 'fees',\n    value: ''\n  }, {\n    key: 'otherDeductions',\n    value: ''\n  }, {\n    key: 'settlementCurrency',\n    value: ''\n  }, {\n    key: 'paymentBasis',\n    value: ''\n  }, {\n    key: 'ppwOrPpc',\n    value: ''\n  }],\n  riskRefsUploadedFromExcel: [],\n  excelRiskRefs: []\n};\n\nvar processingInstructionsReducers = function processingInstructionsReducers() {\n  var _action$payload, _state$documents, _state$documents$risk;\n\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'PROCESSING_INSTRUCTIONS_GRID_DATA_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: true\n      });\n\n    case 'PROCESSING_INSTRUCTIONS_GRID_DATA_LOADING':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isPiGridDataLoading: action.payload\n      });\n\n    case 'PROCESSING_INSTRUCTIONS_GRID_DATA_GET_SUCCESS':\n      var processingInstructionsGridPagination = action.payload.pagination || {};\n      return _objectSpread(_objectSpread({}, state), {}, {\n        gridData: _objectSpread(_objectSpread({}, state.gridData), {}, {\n          items: action.payload.items || [],\n          itemsTotal: get(processingInstructionsGridPagination, 'totalElements', 0),\n          page: get(processingInstructionsGridPagination, 'page', 1),\n          pageSize: get(processingInstructionsGridPagination, 'size', initialState.gridData.pageSize),\n          pageTotal: get(processingInstructionsGridPagination, 'totalPages', 0),\n          query: get(processingInstructionsGridPagination, 'searchBy', ''),\n          sort: _objectSpread(_objectSpread(_objectSpread({}, state.gridData.sort), processingInstructionsGridPagination.direction && {\n            direction: processingInstructionsGridPagination.direction.toLowerCase()\n          }), processingInstructionsGridPagination.orderBy && {\n            by: processingInstructionsGridPagination.orderBy\n          }),\n          filters: action.payload.filters\n        }),\n        loading: false,\n        isPiGridDataLoading: false,\n        isPiHasNoGridData: utils.generic.isValidArray((_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.items, true) ? false : true\n      });\n\n    case 'PROCESSING_INSTRUCTIONS_GRID_DATA_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isPiHasNoGridData: action.payload\n      });\n\n    case 'PROCESSING_INSTRUCTIONS_GRID_DATA_RESET_SEARCH':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        gridData: _objectSpread({}, initialState.gridData)\n      });\n\n    case 'PROCESSING_INSTRUCTIONS_GET_STATUSES_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        statuses: action.payload\n      });\n\n    case 'PROCESSING_INSTRUCTIONS_SAVE_RISK_REFS_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        piAccountExecutives: action.payload.accountExecutives,\n        producingBrokerNames: action.payload.producingBrokers //  workFlowFrontEndContacts: action.payload.workFlowFrontEndContacts, // TO DO\n\n      });\n\n    case 'PROCESSING_INSTRUCTIONS_GET_INSTRUCTION_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        piAccountExecutives: action.payload.accountExecutives,\n        producingBrokerNames: action.payload.producingBrokers,\n        isFinancialCheckListLoading: false //  workFlowFrontEndContacts: action.payload.workFlowFrontEndContacts, //TO DO\n\n      });\n\n    case 'PROCESSING_INSTRUCTIONS_GET_DEPARTMENTS_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        departmentList: action.payload\n      });\n\n    case 'PROCESSING_INSTRUCTIONS_UPDATE_ADVANCED_SEARCH_SELECTED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addedRiskRefDetailsFromAdvSearch: action.payload\n      });\n\n    case 'PROCESSING_INSTRUCTIONS_GET_ADVANCED_SEARCH_RESULTS_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        advancedSearchResults: action.payload\n      });\n\n    case 'PROCESSING_INSTRUCTIONS_GET_USERS_IN_ROLES_SUCCESS':\n      var usersOptions = action.payload || [];\n      return _objectSpread(_objectSpread({}, state), {}, {\n        producingBrokers: usersOptions.filter(function (user) {\n          return user.userRole === constants.PRODUCING_BROKER;\n        }).map(function (type) {\n          return {\n            id: type.userId,\n            value: type.fullName\n          };\n        }),\n        accountExecutives: usersOptions.filter(function (user) {\n          return user.userRole === constants.ACCOUNT_EXECUTIVE;\n        }).map(function (type) {\n          return {\n            id: type.userId,\n            value: type.fullName\n          };\n        })\n      });\n\n    case 'PROCESSING_INSTRUCTIONS_STORE_BY_ID':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        instructions: _objectSpread(_objectSpread({}, state.instructions), {}, _defineProperty({}, action.id, action.payload))\n      });\n\n    case 'PROCESSING_INSTRUCTIONS_UPDATE_FINANCIAL_CHECKLIST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        financialCheckList: action.payload,\n        isFinancialCheckListLoading: false\n      });\n\n    case 'PROCESSING_INSTRUCTIONS_RETAINED_BROKERAGE_AMOUNT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        retainedBrokerageAmountList: action.payload\n      });\n\n    case 'RISK_REFERENCE_DOCUMENTS_COUNT_LOADING':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isRiskReferenceDocumentCountLoading: action.payload\n      });\n\n    case 'RISK_REFERENCE_DOCUMENTS_COUNT_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        riskReferencesDocumentsCountList: action.payload,\n        isRiskReferenceDocumentCountLoading: false\n      });\n\n    case 'RISK_REFERENCE_DOCUMENTS_COUNT_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        riskReferencesDocumentsCountList: [],\n        isRiskReferenceDocumentCountLoading: false\n      });\n\n    case 'REFERENCE_DOCUMENT_COUNT_DETAILS_UPDATE':\n      return _objectSpread(_objectSpread(_objectSpread({}, state), state.documents), {}, {\n        riskReferences: (_state$documents = state.documents) === null || _state$documents === void 0 ? void 0 : (_state$documents$risk = _state$documents.riskReferences) === null || _state$documents$risk === void 0 ? void 0 : _state$documents$risk.map(function (element) {\n          var _action$payload2, _action$payload2$find;\n\n          return element.documentsCount = ((_action$payload2 = action.payload) === null || _action$payload2 === void 0 ? void 0 : (_action$payload2$find = _action$payload2.find(function (data) {\n            return data.riskRefId === element.riskRefId;\n          })) === null || _action$payload2$find === void 0 ? void 0 : _action$payload2$find.documentCount) || 0;\n        })\n      });\n\n    case 'PROCESSING_INSTRUCTIONS_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        instructions: {}\n      });\n\n    case 'PROCESSING_INSTRUCTIONS_GET_USERS_FOR_ROLE_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        usersInRoles: action.payload\n      });\n\n    case 'PROCESSING_INSTRUCTIONS_STORE_NON_PREMIUM_VALUE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        nonPremiumValue: action.payload\n      });\n\n    case 'PROCESSING_INSTRUCTIONS_REF_DATA_ENDORSEMENT_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        endorsementNonPremium: action.payload\n      });\n\n    case 'PROCESSING_INSTRUCTIONS_GET_BORDEREAU_POLICY_TYPES_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        bordereauPolicyTypes: action.payload\n      });\n\n    case 'PROCESSING_INSTRUCTIONS_DOCUMENTS_STORE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        documents: action.payload\n      });\n\n    case 'PROCESSING_INSTRUCTIONS_GET_FACILITY_TYPES_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        facilityTypes: action.payload\n      });\n\n    case 'PROCESSING_INSTRUCTIONS_STORE_RETAINED_BROKERAGE_AMOUNT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        retainedBrokerageAmountForPdf: {\n          retBrokerageAmt: action.payload.retBrokerageAmt,\n          convertedBrokerageAmt: action.payload.convertedBrokerageAmt\n        }\n      });\n\n    case 'PROCESSING_INSTRUCTIONS_STORE_TOTAL_AMOUNT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        totalAmountForPdf: action.payload\n      });\n\n    case 'PROCESSING_INSTRUCTIONS_RESET_ALL':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isResetAllSelected: action.payload\n      });\n\n    case 'PROCESSING_INSTRUCTIONS_SELECTED_RISKREF':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selectedRiskRef: action.payload\n      });\n\n    case 'PROCESSING_INSTRUCTIONS_RESET_SELECTED_RISKREF':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selectedRiskRef: initialState.selectedRiskRef\n      });\n\n    case 'PROCESSING_INSTRUCTIONS_SET_UPLOAD_WIZARD_GIVEN_RISKREFS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        givenRiskRefs: action.payload.givenRiskRefs || [],\n        givenRiskRefsHeaders: action.payload.headers || []\n      });\n\n    case 'PROCESSING_INSTRUCTIONS_SET_UPLOAD_WIZARD_HEADER_MAP':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        headerMap: action.payload,\n        autoMatch: true\n      });\n\n    case 'PROCESSING_INSTRUCTIONS_SET_UPLOAD_WIZARD_RISKREFS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        riskRefsUploadedFromExcel: action.payload\n      });\n\n    case 'PROCESSING_INSTRUCTIONS_SUBMIT_UPLOAD_EXCEL_RISKREFS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        excelRiskRefs: action.payload\n      });\n\n    case 'PROCESSING_INSTRUCTIONS_SET_UPLOAD_WIZARD_HEADER_MAP_RESET':\n      // reset on submit\n      return _objectSpread(_objectSpread({}, state), {}, {\n        headerMap: initialState.headerMap,\n        autoMatch: initialState.autoMatch\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default processingInstructionsReducers;","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/processingInstructions/processingInstructions.reducers.js"],"names":["get","config","constants","utils","initialState","gridData","items","itemsTotal","page","pageSize","ui","pagination","default","pageTotal","query","filters","sort","by","type","direction","isPiGridDataLoading","isPiHasNoGridData","departmentList","advancedSearchResults","addedRiskRefDetailsFromAdvSearch","producingBrokers","accountExecutives","piAccountExecutives","producingBrokerNames","workFlowFrontEndContacts","instructions","riskReferencesDocumentsCountList","isRiskReferenceDocumentCountLoading","financialCheckList","retainedBrokerageAmountList","isFinancialCheckListLoading","documents","riskReferences","premiumTaxDocument","signedLinesDocument","endorsementNonPremium","bordereauPolicyTypes","facilityTypes","statuses","retainedBrokerageAmountForPdf","retBrokerageAmt","convertedBrokerageAmt","totalAmountForPdf","isResetAllSelected","selectedRiskRef","givenRiskRefs","givenRiskRefsHeaders","autoMatch","headerMap","key","value","riskRefsUploadedFromExcel","excelRiskRefs","processingInstructionsReducers","state","action","loading","payload","processingInstructionsGridPagination","toLowerCase","orderBy","generic","isValidArray","usersOptions","filter","user","userRole","PRODUCING_BROKER","map","id","userId","fullName","ACCOUNT_EXECUTIVE","element","documentsCount","find","data","riskRefId","documentCount","usersInRoles","nonPremiumValue","headers"],"mappings":"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","sourcesContent":["import get from 'lodash/get';\r\n\r\n// app\r\nimport config from 'config';\r\nimport * as constants from 'consts';\r\nimport * as utils from 'utils';\r\n\r\nconst initialState = {\r\n  gridData: {\r\n    items: [],\r\n    itemsTotal: 0,\r\n    page: 1,\r\n    pageSize: config.ui.pagination.default,\r\n    pageTotal: 0,\r\n    query: '',\r\n    filters: {},\r\n    sort: {\r\n      by: 'instructionId',\r\n      type: 'lexical',\r\n      direction: 'desc',\r\n    },\r\n  },\r\n  isPiGridDataLoading: false,\r\n  isPiHasNoGridData: false,\r\n  departmentList: [],\r\n  advancedSearchResults: [],\r\n  addedRiskRefDetailsFromAdvSearch: [],\r\n  producingBrokers: [],\r\n  accountExecutives: [],\r\n  piAccountExecutives: [],\r\n  producingBrokerNames: [],\r\n  workFlowFrontEndContacts: [],\r\n  instructions: [],\r\n  riskReferencesDocumentsCountList: [],\r\n  isRiskReferenceDocumentCountLoading: true,\r\n  financialCheckList: [],\r\n  retainedBrokerageAmountList: [],\r\n  isFinancialCheckListLoading: false,\r\n  documents: {\r\n    riskReferences: [],\r\n    premiumTaxDocument: null,\r\n    signedLinesDocument: null,\r\n  },\r\n  endorsementNonPremium: [],\r\n  bordereauPolicyTypes: [],\r\n  facilityTypes: [],\r\n  statuses: [],\r\n  retainedBrokerageAmountForPdf: {\r\n    retBrokerageAmt: '',\r\n    convertedBrokerageAmt: {},\r\n  },\r\n  totalAmountForPdf: '',\r\n  isResetAllSelected: false,\r\n  selectedRiskRef: {},\r\n  givenRiskRefs: [],\r\n  givenRiskRefsHeaders: [],\r\n  autoMatch: false,\r\n  headerMap: [\r\n    { key: 'riskReference', value: '' },\r\n    { key: 'grossPremiumAmount', value: '' },\r\n    { key: 'slipOrder', value: '' },\r\n    { key: 'totalBrokerage', value: '' },\r\n    { key: 'clientDiscount', value: '' },\r\n    { key: 'thirdPartyCommissionSharing', value: '' },\r\n    { key: 'thirdPartyName', value: '' },\r\n    { key: 'pfInternalCommissionSharing', value: '' },\r\n    { key: 'pfInternalDepartment', value: '' },\r\n    { key: 'retainedBrokerage', value: '' },\r\n    { key: 'retainedBrokerageCurrencyCode', value: '' },\r\n    { key: 'fees', value: '' },\r\n    { key: 'otherDeductions', value: '' },\r\n    { key: 'settlementCurrency', value: '' },\r\n    { key: 'paymentBasis', value: '' },\r\n    { key: 'ppwOrPpc', value: '' },\r\n  ],\r\n  riskRefsUploadedFromExcel: [],\r\n  excelRiskRefs: [],\r\n};\r\n\r\nconst processingInstructionsReducers = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'PROCESSING_INSTRUCTIONS_GRID_DATA_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    case 'PROCESSING_INSTRUCTIONS_GRID_DATA_LOADING':\r\n      return {\r\n        ...state,\r\n        isPiGridDataLoading: action.payload,\r\n      };\r\n\r\n    case 'PROCESSING_INSTRUCTIONS_GRID_DATA_GET_SUCCESS':\r\n      const processingInstructionsGridPagination = action.payload.pagination || {};\r\n      return {\r\n        ...state,\r\n        gridData: {\r\n          ...state.gridData,\r\n          items: action.payload.items || [],\r\n          itemsTotal: get(processingInstructionsGridPagination, 'totalElements', 0),\r\n          page: get(processingInstructionsGridPagination, 'page', 1),\r\n          pageSize: get(processingInstructionsGridPagination, 'size', initialState.gridData.pageSize),\r\n          pageTotal: get(processingInstructionsGridPagination, 'totalPages', 0),\r\n          query: get(processingInstructionsGridPagination, 'searchBy', ''),\r\n          sort: {\r\n            ...state.gridData.sort,\r\n            ...(processingInstructionsGridPagination.direction && {\r\n              direction: processingInstructionsGridPagination.direction.toLowerCase(),\r\n            }),\r\n            ...(processingInstructionsGridPagination.orderBy && { by: processingInstructionsGridPagination.orderBy }),\r\n          },\r\n          filters: action.payload.filters,\r\n        },\r\n        loading: false,\r\n        isPiGridDataLoading: false,\r\n        isPiHasNoGridData: utils.generic.isValidArray(action.payload?.items, true) ? false : true,\r\n      };\r\n    case 'PROCESSING_INSTRUCTIONS_GRID_DATA_GET_FAILURE':\r\n      return {\r\n        ...state,\r\n        isPiHasNoGridData: action.payload,\r\n      };\r\n\r\n    case 'PROCESSING_INSTRUCTIONS_GRID_DATA_RESET_SEARCH':\r\n      return {\r\n        ...state,\r\n        gridData: {\r\n          ...initialState.gridData,\r\n        },\r\n      };\r\n\r\n    case 'PROCESSING_INSTRUCTIONS_GET_STATUSES_SUCCESS':\r\n      return {\r\n        ...state,\r\n        statuses: action.payload,\r\n      };\r\n\r\n    case 'PROCESSING_INSTRUCTIONS_SAVE_RISK_REFS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        piAccountExecutives: action.payload.accountExecutives,\r\n        producingBrokerNames: action.payload.producingBrokers,\r\n        //  workFlowFrontEndContacts: action.payload.workFlowFrontEndContacts, // TO DO\r\n      };\r\n\r\n    case 'PROCESSING_INSTRUCTIONS_GET_INSTRUCTION_SUCCESS':\r\n      return {\r\n        ...state,\r\n        piAccountExecutives: action.payload.accountExecutives,\r\n        producingBrokerNames: action.payload.producingBrokers,\r\n        isFinancialCheckListLoading: false,\r\n        //  workFlowFrontEndContacts: action.payload.workFlowFrontEndContacts, //TO DO\r\n      };\r\n\r\n    case 'PROCESSING_INSTRUCTIONS_GET_DEPARTMENTS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        departmentList: action.payload,\r\n      };\r\n\r\n    case 'PROCESSING_INSTRUCTIONS_UPDATE_ADVANCED_SEARCH_SELECTED':\r\n      return {\r\n        ...state,\r\n        addedRiskRefDetailsFromAdvSearch: action.payload,\r\n      };\r\n\r\n    case 'PROCESSING_INSTRUCTIONS_GET_ADVANCED_SEARCH_RESULTS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        advancedSearchResults: action.payload,\r\n      };\r\n\r\n    case 'PROCESSING_INSTRUCTIONS_GET_USERS_IN_ROLES_SUCCESS':\r\n      const usersOptions = action.payload || [];\r\n\r\n      return {\r\n        ...state,\r\n        producingBrokers: usersOptions\r\n          .filter((user) => user.userRole === constants.PRODUCING_BROKER)\r\n          .map((type) => {\r\n            return {\r\n              id: type.userId,\r\n              value: type.fullName,\r\n            };\r\n          }),\r\n        accountExecutives: usersOptions\r\n          .filter((user) => user.userRole === constants.ACCOUNT_EXECUTIVE)\r\n          .map((type) => {\r\n            return {\r\n              id: type.userId,\r\n              value: type.fullName,\r\n            };\r\n          }),\r\n      };\r\n\r\n    case 'PROCESSING_INSTRUCTIONS_STORE_BY_ID':\r\n      return {\r\n        ...state,\r\n        instructions: {\r\n          ...state.instructions,\r\n          [action.id]: action.payload,\r\n        },\r\n      };\r\n\r\n    case 'PROCESSING_INSTRUCTIONS_UPDATE_FINANCIAL_CHECKLIST':\r\n      return {\r\n        ...state,\r\n        financialCheckList: action.payload,\r\n        isFinancialCheckListLoading: false,\r\n      };\r\n\r\n    case 'PROCESSING_INSTRUCTIONS_RETAINED_BROKERAGE_AMOUNT':\r\n      return {\r\n        ...state,\r\n        retainedBrokerageAmountList: action.payload,\r\n      };\r\n\r\n    case 'RISK_REFERENCE_DOCUMENTS_COUNT_LOADING':\r\n      return {\r\n        ...state,\r\n        isRiskReferenceDocumentCountLoading: action.payload,\r\n      };\r\n    case 'RISK_REFERENCE_DOCUMENTS_COUNT_SUCCESS':\r\n      return {\r\n        ...state,\r\n        riskReferencesDocumentsCountList: action.payload,\r\n        isRiskReferenceDocumentCountLoading: false,\r\n      };\r\n    case 'RISK_REFERENCE_DOCUMENTS_COUNT_FAILURE':\r\n      return {\r\n        ...state,\r\n        riskReferencesDocumentsCountList: [],\r\n        isRiskReferenceDocumentCountLoading: false,\r\n      };\r\n\r\n    case 'REFERENCE_DOCUMENT_COUNT_DETAILS_UPDATE':\r\n      return {\r\n        ...state,\r\n        ...state.documents,\r\n        riskReferences: state.documents?.riskReferences?.map(\r\n          (element) => (element.documentsCount = action.payload?.find((data) => data.riskRefId === element.riskRefId)?.documentCount || 0)\r\n        ),\r\n      };\r\n\r\n    case 'PROCESSING_INSTRUCTIONS_RESET':\r\n      return {\r\n        ...state,\r\n        instructions: {},\r\n      };\r\n\r\n    case 'PROCESSING_INSTRUCTIONS_GET_USERS_FOR_ROLE_SUCCESS':\r\n      return {\r\n        ...state,\r\n        usersInRoles: action.payload,\r\n      };\r\n\r\n    case 'PROCESSING_INSTRUCTIONS_STORE_NON_PREMIUM_VALUE':\r\n      return {\r\n        ...state,\r\n        nonPremiumValue: action.payload,\r\n      };\r\n\r\n    case 'PROCESSING_INSTRUCTIONS_REF_DATA_ENDORSEMENT_SUCCESS':\r\n      return {\r\n        ...state,\r\n        endorsementNonPremium: action.payload,\r\n      };\r\n\r\n    case 'PROCESSING_INSTRUCTIONS_GET_BORDEREAU_POLICY_TYPES_SUCCESS':\r\n      return {\r\n        ...state,\r\n        bordereauPolicyTypes: action.payload,\r\n      };\r\n\r\n    case 'PROCESSING_INSTRUCTIONS_DOCUMENTS_STORE':\r\n      return {\r\n        ...state,\r\n        documents: action.payload,\r\n      };\r\n\r\n    case 'PROCESSING_INSTRUCTIONS_GET_FACILITY_TYPES_SUCCESS':\r\n      return {\r\n        ...state,\r\n        facilityTypes: action.payload,\r\n      };\r\n\r\n    case 'PROCESSING_INSTRUCTIONS_STORE_RETAINED_BROKERAGE_AMOUNT':\r\n      return {\r\n        ...state,\r\n        retainedBrokerageAmountForPdf: {\r\n          retBrokerageAmt: action.payload.retBrokerageAmt,\r\n          convertedBrokerageAmt: action.payload.convertedBrokerageAmt,\r\n        },\r\n      };\r\n\r\n    case 'PROCESSING_INSTRUCTIONS_STORE_TOTAL_AMOUNT':\r\n      return {\r\n        ...state,\r\n        totalAmountForPdf: action.payload,\r\n      };\r\n\r\n    case 'PROCESSING_INSTRUCTIONS_RESET_ALL':\r\n      return {\r\n        ...state,\r\n        isResetAllSelected: action.payload,\r\n      };\r\n\r\n    case 'PROCESSING_INSTRUCTIONS_SELECTED_RISKREF':\r\n      return {\r\n        ...state,\r\n        selectedRiskRef: action.payload,\r\n      };\r\n\r\n    case 'PROCESSING_INSTRUCTIONS_RESET_SELECTED_RISKREF':\r\n      return {\r\n        ...state,\r\n        selectedRiskRef: initialState.selectedRiskRef,\r\n      };\r\n\r\n    case 'PROCESSING_INSTRUCTIONS_SET_UPLOAD_WIZARD_GIVEN_RISKREFS':\r\n      return {\r\n        ...state,\r\n        givenRiskRefs: action.payload.givenRiskRefs || [],\r\n        givenRiskRefsHeaders: action.payload.headers || [],\r\n      };\r\n\r\n    case 'PROCESSING_INSTRUCTIONS_SET_UPLOAD_WIZARD_HEADER_MAP':\r\n      return {\r\n        ...state,\r\n        headerMap: action.payload,\r\n        autoMatch: true,\r\n      };\r\n\r\n    case 'PROCESSING_INSTRUCTIONS_SET_UPLOAD_WIZARD_RISKREFS':\r\n      return {\r\n        ...state,\r\n        riskRefsUploadedFromExcel: action.payload,\r\n      };\r\n\r\n    case 'PROCESSING_INSTRUCTIONS_SUBMIT_UPLOAD_EXCEL_RISKREFS':\r\n      return {\r\n        ...state,\r\n        excelRiskRefs: action.payload,\r\n      };\r\n\r\n    case 'PROCESSING_INSTRUCTIONS_SET_UPLOAD_WIZARD_HEADER_MAP_RESET': // reset on submit\r\n      return {\r\n        ...state,\r\n        headerMap: initialState.headerMap,\r\n        autoMatch: initialState.autoMatch,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default processingInstructionsReducers;\r\n"]},"metadata":{},"sourceType":"module"}