{"ast":null,"code":"import \"core-js/modules/es.string.trim\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ClaimsEditComplexityRulesValue\\\\ClaimsEditComplexityRulesValueForm.view.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as Yup from 'yup'; //app\n\nimport styles from './ClaimsEditComplexityRulesValue.styles';\nimport { FormContainer, FormGrid, FormText } from 'components';\nimport { selectComplexityBasisValueId, selectComplexityReferralValueId } from 'stores';\nimport * as utils from 'utils'; //mui\n\nimport { makeStyles } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nClaimsEditComplexityRulesValueFormView.prototypes = {\n  isComplexityActive: PropTypes.bool.isRequired,\n  handleEditValues: PropTypes.func.isRequired\n};\nexport function ClaimsEditComplexityRulesValueFormView(_ref) {\n  _s();\n\n  var isComplexityActive = _ref.isComplexityActive,\n      handleEditValues = _ref.handleEditValues;\n  var classes = makeStyles(styles, {\n    name: 'ClaimsEditComplexityRulesValue'\n  })();\n  var currentComplexity = useSelector(selectComplexityBasisValueId);\n  var currentReferral = useSelector(selectComplexityReferralValueId);\n  var editFields = [{\n    name: 'editComplexityValue',\n    type: 'text',\n    value: (isComplexityActive ? currentComplexity === null || currentComplexity === void 0 ? void 0 : currentComplexity.complexityRulesValue : currentReferral === null || currentReferral === void 0 ? void 0 : currentReferral.complexityRulesValue) || '',\n    muiComponentProps: {\n      classes: {\n        root: classes.formInput\n      }\n    },\n    validation: Yup.string().trim().required(utils.string.t('validation.required')).max(75, utils.string.t('validation.string.max'))\n  }];\n  var defaultValues = utils.form.getInitialValues(editFields);\n  var validationSchema = utils.form.getValidationSchema(editFields);\n\n  var _useForm = useForm(_objectSpread({\n    defaultValues: defaultValues\n  }, validationSchema && {\n    resolver: yupResolver(validationSchema)\n  })),\n      control = _useForm.control,\n      errors = _useForm.errors,\n      handleSubmit = _useForm.handleSubmit,\n      watch = _useForm.watch;\n\n  var complexityRulesValue = watch('editComplexityValue');\n  useEffect(function () {\n    handleSubmit(handleEditValues({\n      complexityRulesValue: complexityRulesValue,\n      isComplex: 1\n    }));\n  }, [complexityRulesValue]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/_jsxDEV(FormContainer, {\n    onSubmit: handleSubmit,\n    className: classes.formcontainer,\n    children: /*#__PURE__*/_jsxDEV(FormGrid, {\n      container: true,\n      spacing: 0,\n      className: classes.editcomplexityruleForm,\n      children: /*#__PURE__*/_jsxDEV(FormGrid, {\n        item: true,\n        xs: 6,\n        children: /*#__PURE__*/_jsxDEV(FormText, _objectSpread(_objectSpread({}, utils.form.getFieldProps(editFields, 'editComplexityValue', control)), {}, {\n          error: errors.editComplexityValue\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ClaimsEditComplexityRulesValueFormView, \"HNLS59zBONBb/iRx8R+FaGIvmKg=\", false, function () {\n  return [useSelector, useSelector, useForm];\n});\n\n_c = ClaimsEditComplexityRulesValueFormView;\nClaimsEditComplexityRulesValueFormView.displayName = \"ClaimsEditComplexityRulesValueFormView\";\nClaimsEditComplexityRulesValueFormView.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"ClaimsEditComplexityRulesValueFormView\"\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\modules\\\\ClaimsEditComplexityRulesValue\\\\ClaimsEditComplexityRulesValueForm.view.js\"] = {\n    name: \"ClaimsEditComplexityRulesValueFormView\",\n    docgenInfo: ClaimsEditComplexityRulesValueFormView.__docgenInfo,\n    path: \"src\\\\modules\\\\ClaimsEditComplexityRulesValue\\\\ClaimsEditComplexityRulesValueForm.view.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimsEditComplexityRulesValueFormView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ClaimsEditComplexityRulesValue/ClaimsEditComplexityRulesValueForm.view.js"],"names":["React","useEffect","useSelector","PropTypes","useForm","yupResolver","Yup","styles","FormContainer","FormGrid","FormText","selectComplexityBasisValueId","selectComplexityReferralValueId","utils","makeStyles","ClaimsEditComplexityRulesValueFormView","prototypes","isComplexityActive","bool","isRequired","handleEditValues","func","classes","name","currentComplexity","currentReferral","editFields","type","value","complexityRulesValue","muiComponentProps","root","formInput","validation","string","trim","required","t","max","defaultValues","form","getInitialValues","validationSchema","getValidationSchema","resolver","control","errors","handleSubmit","watch","isComplex","formcontainer","editcomplexityruleForm","getFieldProps","editComplexityValue"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as Yup from 'yup';\r\n\r\n//app\r\nimport styles from './ClaimsEditComplexityRulesValue.styles';\r\nimport { FormContainer, FormGrid, FormText } from 'components';\r\nimport { selectComplexityBasisValueId, selectComplexityReferralValueId } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\n//mui\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nClaimsEditComplexityRulesValueFormView.prototypes = {\r\n  isComplexityActive: PropTypes.bool.isRequired,\r\n  handleEditValues: PropTypes.func.isRequired,\r\n};\r\nexport function ClaimsEditComplexityRulesValueFormView({ isComplexityActive, handleEditValues }) {\r\n  const classes = makeStyles(styles, { name: 'ClaimsEditComplexityRulesValue' })();\r\n\r\n  const currentComplexity = useSelector(selectComplexityBasisValueId);\r\n  const currentReferral = useSelector(selectComplexityReferralValueId);\r\n\r\n  const editFields = [\r\n    {\r\n      name: 'editComplexityValue',\r\n      type: 'text',\r\n      value: (isComplexityActive ? currentComplexity?.complexityRulesValue : currentReferral?.complexityRulesValue) || '',\r\n      muiComponentProps: {\r\n        classes: {\r\n          root: classes.formInput,\r\n        },\r\n      },\r\n      validation: Yup.string().trim().required(utils.string.t('validation.required')).max(75, utils.string.t('validation.string.max')),\r\n    },\r\n  ];\r\n\r\n  const defaultValues = utils.form.getInitialValues(editFields);\r\n  const validationSchema = utils.form.getValidationSchema(editFields);\r\n  const { control, errors, handleSubmit, watch } = useForm({\r\n    defaultValues,\r\n    ...(validationSchema && { resolver: yupResolver(validationSchema) }),\r\n  });\r\n  const complexityRulesValue = watch('editComplexityValue');\r\n\r\n  useEffect(() => {\r\n    handleSubmit(handleEditValues({ complexityRulesValue, isComplex: 1 }));\r\n  }, [complexityRulesValue]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <FormContainer onSubmit={handleSubmit} className={classes.formcontainer}>\r\n      <FormGrid container spacing={0} className={classes.editcomplexityruleForm}>\r\n        <FormGrid item xs={6}>\r\n          <FormText {...utils.form.getFieldProps(editFields, 'editComplexityValue', control)} error={errors.editComplexityValue} />\r\n        </FormGrid>\r\n      </FormGrid>\r\n    </FormContainer>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}