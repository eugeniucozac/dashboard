{"ast":null,"code":"import _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\pages\\\\RfiDashboard\\\\RfiDashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { useHistory, useParams } from 'react-router'; // app\n\nimport { RfiDashboardView } from './RfiDashboard.view';\nimport { selectClaimsTasksProcessingListSelected, selectRfiHistoryList } from 'stores';\nimport * as utils from 'utils';\nimport config from 'config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function RfiDashboard() {\n  _s();\n\n  var history = useHistory();\n  var params = useParams();\n  var brand = useSelector(function (state) {\n    return state.ui.brand;\n  }); // Redux management\n\n  var tasksProcessingSelected = useSelector(selectClaimsTasksProcessingListSelected); // State management\n\n  var _useState = useState((params === null || params === void 0 ? void 0 : params.tab) || 'rfiDetails'),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedTab = _useState2[0],\n      setSelectedTab = _useState2[1];\n\n  var _useState3 = useState(tasksProcessingSelected[0]),\n      _useState4 = _slicedToArray(_useState3, 1),\n      selectedTask = _useState4[0];\n\n  useEffect(function () {\n    var _tasksProcessingSelec;\n\n    if ((tasksProcessingSelected === null || tasksProcessingSelected === void 0 ? void 0 : tasksProcessingSelected.length) !== 1 || !(tasksProcessingSelected === null || tasksProcessingSelected === void 0 ? void 0 : (_tasksProcessingSelec = tasksProcessingSelected[0]) === null || _tasksProcessingSelec === void 0 ? void 0 : _tasksProcessingSelec.taskRef)) {\n      history.replace(config.routes.claimsFNOL.root);\n    }\n  }, [history, tasksProcessingSelected]);\n  var rfiHistory = useSelector(selectRfiHistoryList);\n\n  var handleSelectTab = function handleSelectTab(tabName) {\n    setSelectedTab(tabName);\n  };\n\n  var tabs = [{\n    value: 'rfiDetails',\n    label: utils.string.t('claims.rfiDashboard.tabs.rfiDetail')\n  }, {\n    value: 'documents',\n    label: utils.string.t('claims.rfiDashboard.tabs.documents')\n  }];\n  var breadcrumbs = [{\n    name: 'claimsProcessing',\n    label: utils.string.t('claims.loss.title'),\n    link: config.routes.claimsFNOL.root\n  }, {\n    name: 'claimRef',\n    label: \"\".concat(utils.string.t('claims.rfiDashboard.breadCrumbs.claimRef', {\n      claimRef: selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.processRef\n    })),\n    link: \"\".concat(config.routes.claimsFNOL.claim, \"/\").concat(selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.processRef)\n  }, {\n    name: 'taskRef',\n    label: \"\".concat(utils.string.t('claims.rfiDashboard.breadCrumbs.rfiId', {\n      id: selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.taskRef\n    })),\n    link: \"\".concat(config.routes.claimsFNOL.rfi, \"/\").concat(selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.taskRef),\n    active: true\n  }]; // abort\n\n  if (!selectedTask) return '';\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"\".concat(utils.string.t('claims.processing.title'), \" - \").concat(utils.app.getAppName(brand))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RfiDashboardView, {\n      rfiTask: selectedTask,\n      tabs: tabs,\n      rfiHistory: rfiHistory,\n      selectedTab: selectedTab,\n      breadcrumbs: breadcrumbs,\n      handleSelectTab: handleSelectTab\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(RfiDashboard, \"R3/vDpSWMvmt0kX36zLmJAhXQOg=\", false, function () {\n  return [useHistory, useParams, useSelector, useSelector, useSelector];\n});\n\n_c = RfiDashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"RfiDashboard\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/pages/RfiDashboard/RfiDashboard.js"],"names":["React","useState","useEffect","useSelector","Helmet","useHistory","useParams","RfiDashboardView","selectClaimsTasksProcessingListSelected","selectRfiHistoryList","utils","config","RfiDashboard","history","params","brand","state","ui","tasksProcessingSelected","tab","selectedTab","setSelectedTab","selectedTask","length","taskRef","replace","routes","claimsFNOL","root","rfiHistory","handleSelectTab","tabName","tabs","value","label","string","t","breadcrumbs","name","link","claimRef","processRef","claim","id","rfi","active","app","getAppName"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Helmet } from 'react-helmet';\r\nimport { useHistory, useParams } from 'react-router';\r\n\r\n// app\r\nimport { RfiDashboardView } from './RfiDashboard.view';\r\nimport { selectClaimsTasksProcessingListSelected, selectRfiHistoryList } from 'stores';\r\nimport * as utils from 'utils';\r\nimport config from 'config';\r\n\r\nexport default function RfiDashboard() {\r\n  const history = useHistory();\r\n  const params = useParams();\r\n  const brand = useSelector((state) => state.ui.brand);\r\n\r\n  // Redux management\r\n  const tasksProcessingSelected = useSelector(selectClaimsTasksProcessingListSelected);\r\n\r\n  // State management\r\n  const [selectedTab, setSelectedTab] = useState(params?.tab || 'rfiDetails');\r\n  const [selectedTask] = useState(tasksProcessingSelected[0]);\r\n\r\n  useEffect(() => {\r\n    if (tasksProcessingSelected?.length !== 1 || !tasksProcessingSelected?.[0]?.taskRef) {\r\n      history.replace(config.routes.claimsFNOL.root);\r\n    }\r\n  }, [history, tasksProcessingSelected]);\r\n\r\n  const rfiHistory = useSelector(selectRfiHistoryList);\r\n  const handleSelectTab = (tabName) => {\r\n    setSelectedTab(tabName);\r\n  };\r\n\r\n  const tabs = [\r\n    { value: 'rfiDetails', label: utils.string.t('claims.rfiDashboard.tabs.rfiDetail') },\r\n    { value: 'documents', label: utils.string.t('claims.rfiDashboard.tabs.documents') },\r\n  ];\r\n\r\n  const breadcrumbs = [\r\n    {\r\n      name: 'claimsProcessing',\r\n      label: utils.string.t('claims.loss.title'),\r\n      link: config.routes.claimsFNOL.root,\r\n    },\r\n    {\r\n      name: 'claimRef',\r\n      label: `${utils.string.t('claims.rfiDashboard.breadCrumbs.claimRef', { claimRef: selectedTask?.processRef })}`,\r\n      link: `${config.routes.claimsFNOL.claim}/${selectedTask?.processRef}`,\r\n    },\r\n    {\r\n      name: 'taskRef',\r\n      label: `${utils.string.t('claims.rfiDashboard.breadCrumbs.rfiId', { id: selectedTask?.taskRef })}`,\r\n      link: `${config.routes.claimsFNOL.rfi}/${selectedTask?.taskRef}`,\r\n      active: true,\r\n    },\r\n  ];\r\n\r\n  // abort\r\n  if (!selectedTask) return '';\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>{`${utils.string.t('claims.processing.title')} - ${utils.app.getAppName(brand)}`}</title>\r\n      </Helmet>\r\n      <RfiDashboardView\r\n        rfiTask={selectedTask}\r\n        tabs={tabs}\r\n        rfiHistory={rfiHistory}\r\n        selectedTab={selectedTab}\r\n        breadcrumbs={breadcrumbs}\r\n        handleSelectTab={handleSelectTab}\r\n      />\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}