{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\TasksTabTableRow\\\\TasksTabTableRow.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useHistory } from 'react-router';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux'; // app\n\nimport { TasksTabTableRowView } from './TasksTabTableRow.view';\nimport { selectClaimsProcessingTasksSelected, selectCaseTaskTypeView, checkIsUserClaim, setClaimsFnolPushBackRoute, showModal, hideModal, getSancCheckAssociatedTask, selectClaimsTasksProcessingListSelected, setClaimsProcessingTasksListSelected, selectClaimsTasksProcessingList, getClaimsTasksProcessingList } from 'stores';\nimport config from 'config';\nimport * as constants from 'consts';\nimport * as utils from 'utils';\nimport { Breadcrumb } from 'components'; // mui\n\nimport { Typography } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nTasksTabTableRow.propTypes = {\n  task: PropTypes.object.isRequired,\n  isTaskTeam: PropTypes.bool.isRequired,\n  isSelected: PropTypes.bool,\n  columnProps: PropTypes.func.isRequired,\n  handlers: PropTypes.shape({\n    selectTask: PropTypes.func.isRequired,\n    refreshTasksGrid: PropTypes.func.isRequired\n  }).isRequired\n};\nexport default function TasksTabTableRow(props) {\n  _s();\n\n  var _this = this,\n      _props$handlers;\n\n  var dispatch = useDispatch();\n  var history = useHistory();\n  var task = props.task;\n  var pathname = history.location.pathname;\n  var tasksSelected = useSelector(selectClaimsTasksProcessingListSelected);\n  var caseTaskTypeView = useSelector(selectCaseTaskTypeView);\n  var claimsTasksProcessing = useSelector(selectClaimsTasksProcessingList);\n  var user = useSelector(function (state) {\n    return state.user;\n  });\n  var searchTypeCall = constants.CLAIM_PROCESSING_REQ_TYPES.search;\n  var taskType = claimsTasksProcessing === null || claimsTasksProcessing === void 0 ? void 0 : claimsTasksProcessing.taskType;\n  var appliedFilters = claimsTasksProcessing === null || claimsTasksProcessing === void 0 ? void 0 : claimsTasksProcessing.appliedFilters;\n\n  var editTask = function editTask(task) {\n    dispatch(showModal({\n      component: 'CREATE_AD_HOC_TASK',\n      props: {\n        title: utils.string.t('claims.processing.taskFunction.editTask'),\n        hideCompOnBlur: false,\n        fullWidth: true,\n        maxWidth: 'md',\n        disableAutoFocus: true,\n        componentProps: {\n          claim: task,\n          cancelHandler: function cancelHandler() {\n            dispatch(hideModal());\n          },\n          submitHandler: function submitHandler() {}\n        }\n      }\n    }));\n  };\n\n  var taskActionItems = [{\n    id: 'editTask',\n    label: utils.string.t('claims.processing.taskFunction.editTask'),\n    callback: function callback() {\n      editTask(props === null || props === void 0 ? void 0 : props.task);\n    }\n  }, {\n    id: 'changePriority',\n    label: utils.string.t('claims.processing.taskFunction.changePriority'),\n    callback: function callback() {\n      return changePriority();\n    }\n  }, {\n    id: 'createRfi',\n    label: utils.string.t('claims.processing.taskFunction.createRFI'),\n    callback: function callback() {\n      handleCreateRFITaskLevel();\n    }\n  }];\n\n  var handleCreateRFITaskLevel = function handleCreateRFITaskLevel() {\n    var breadcrumbs = [{\n      name: 'lossRef',\n      label: utils.string.t('claims.loss.text', {\n        lossRef: task === null || task === void 0 ? void 0 : task.lossRef\n      }),\n      link: pathname,\n      active: true\n    }, (task === null || task === void 0 ? void 0 : task.claimRef) && {\n      name: 'claimRef',\n      label: \"\".concat(utils.string.t('claims.rfiDashboard.breadCrumbs.claimRef', {\n        claimRef: task === null || task === void 0 ? void 0 : task.claimRef\n      })),\n      link: pathname,\n      active: true\n    }, (task === null || task === void 0 ? void 0 : task.taskRef) && {\n      name: 'taskRef',\n      label: \"\".concat(utils.string.t('claims.rfiDashboard.breadCrumbs.taskRef', {\n        taskRef: task === null || task === void 0 ? void 0 : task.taskRef\n      })),\n      link: pathname,\n      active: true,\n      largeFont: true\n    }];\n\n    var TitleWBreadCrumb = function TitleWBreadCrumb() {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Breadcrumb, {\n          links: breadcrumbs\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h2\",\n          style: {\n            paddingLeft: '1.2rem'\n          },\n          children: utils.string.t('claims.processing.taskFunction.createRFI')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true);\n    };\n\n    dispatch(showModal({\n      component: 'CLAIMS_CREATE_RFI_STEPPER',\n      props: {\n        titleChildren: /*#__PURE__*/_jsxDEV(TitleWBreadCrumb, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 26\n        }, _this),\n        hideCompOnBlur: false,\n        fullWidth: true,\n        maxWidth: 'lg',\n        disableAutoFocus: true,\n        componentProps: {\n          claim: task,\n          type: constants.RFI_ON_TASKS,\n          cancelHandler: function cancelHandler() {\n            dispatch(hideModal());\n          }\n        }\n      }\n    }));\n  };\n\n  var clickTask = function clickTask(taskObj) {\n    return function (event) {\n      if (taskObj === null || taskObj === void 0 ? void 0 : taskObj.taskRef) {\n        var _user$emailId, _taskObj$processOwner;\n\n        event.stopPropagation();\n        (taskObj === null || taskObj === void 0 ? void 0 : taskObj.taskDefKey) === constants.SANCTIONS_CHECK_KEY && dispatch(getSancCheckAssociatedTask(taskObj === null || taskObj === void 0 ? void 0 : taskObj.parentTaskId));\n        var isUserClaim = ((_user$emailId = user.emailId) === null || _user$emailId === void 0 ? void 0 : _user$emailId.toLowerCase()) === (taskObj === null || taskObj === void 0 ? void 0 : (_taskObj$processOwner = taskObj.processOwner) === null || _taskObj$processOwner === void 0 ? void 0 : _taskObj$processOwner.toLowerCase());\n        dispatch(checkIsUserClaim(isUserClaim));\n        dispatch(selectClaimsProcessingTasksSelected(taskObj)); // TODO redundant remove it later\n\n        dispatch(setClaimsProcessingTasksListSelected(taskObj));\n        dispatch(setClaimsFnolPushBackRoute(constants.CLAIMS_FNOL_PUSH_BACK_ROUTES.routes.lossAndClaims));\n\n        if (taskObj.taskType === constants.TASK_ROW_TYPE.rfi) {\n          history.push(\"\".concat(config.routes.claimsFNOL.rfi, \"/\").concat(taskObj.taskRef));\n        } else {\n          history.push(\"\".concat(config.routes.claimsFNOL.task, \"/\").concat(taskObj === null || taskObj === void 0 ? void 0 : taskObj.taskRef));\n        }\n      }\n    };\n  };\n\n  var changePriority = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var tasksData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              tasksData = (tasksSelected === null || tasksSelected === void 0 ? void 0 : tasksSelected.length) ? tasksSelected : [task];\n              dispatch(showModal({\n                component: 'CHANGE_PRIORITY',\n                props: {\n                  title: utils.string.t('claims.processing.taskFunction.changePriority'),\n                  hideCompOnBlur: false,\n                  fullWidth: true,\n                  maxWidth: 'sm',\n                  disableAutoFocus: true,\n                  componentProps: {\n                    task: tasksData,\n                    handlers: {\n                      submitHandler: function submitHandler() {\n                        refreshTasksData();\n                      },\n                      cancelHandler: function cancelHandler() {\n                        dispatch(hideModal());\n                      }\n                    }\n                  }\n                }\n              }));\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function changePriority() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var refreshTasksData = function refreshTasksData() {\n    dispatch(getClaimsTasksProcessingList({\n      requestType: searchTypeCall,\n      taskType: taskType,\n      filterTerm: appliedFilters || null,\n      navigation: true\n    }));\n  };\n\n  var isTaskLinkDisabled = function isTaskLinkDisabled() {\n    var task = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var automatedTasks = constants === null || constants === void 0 ? void 0 : constants.AUTOMATED_TASK_DEF_KEYS;\n    return automatedTasks === null || automatedTasks === void 0 ? void 0 : automatedTasks.includes(task === null || task === void 0 ? void 0 : task.taskDefKey);\n  }; // automated BPM task does not need task dashboard Link and tasks handlers\n\n\n  return /*#__PURE__*/_jsxDEV(TasksTabTableRowView, _objectSpread(_objectSpread({}, props), {}, {\n    taskActionItems: isTaskLinkDisabled(task) ? [] : taskActionItems,\n    isPremiumProcessing: props === null || props === void 0 ? void 0 : props.isPremiumProcessing,\n    caseTaskTypeView: caseTaskTypeView,\n    handlers: {\n      selectTask: props === null || props === void 0 ? void 0 : (_props$handlers = props.handlers) === null || _props$handlers === void 0 ? void 0 : _props$handlers.selectTask,\n      clickTask: clickTask,\n      editTask: editTask\n    },\n    isTaskLinkDisabled: isTaskLinkDisabled(task)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TasksTabTableRow, \"cizsVChTkarybweUcvhobR7Miu8=\", false, function () {\n  return [useDispatch, useHistory, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = TasksTabTableRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"TasksTabTableRow\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/TasksTabTableRow/TasksTabTableRow.js"],"names":["React","useHistory","PropTypes","useSelector","useDispatch","TasksTabTableRowView","selectClaimsProcessingTasksSelected","selectCaseTaskTypeView","checkIsUserClaim","setClaimsFnolPushBackRoute","showModal","hideModal","getSancCheckAssociatedTask","selectClaimsTasksProcessingListSelected","setClaimsProcessingTasksListSelected","selectClaimsTasksProcessingList","getClaimsTasksProcessingList","config","constants","utils","Breadcrumb","Typography","TasksTabTableRow","propTypes","task","object","isRequired","isTaskTeam","bool","isSelected","columnProps","func","handlers","shape","selectTask","refreshTasksGrid","props","dispatch","history","pathname","location","tasksSelected","caseTaskTypeView","claimsTasksProcessing","user","state","searchTypeCall","CLAIM_PROCESSING_REQ_TYPES","search","taskType","appliedFilters","editTask","component","title","string","t","hideCompOnBlur","fullWidth","maxWidth","disableAutoFocus","componentProps","claim","cancelHandler","submitHandler","taskActionItems","id","label","callback","changePriority","handleCreateRFITaskLevel","breadcrumbs","name","lossRef","link","active","claimRef","taskRef","largeFont","TitleWBreadCrumb","paddingLeft","titleChildren","type","RFI_ON_TASKS","clickTask","taskObj","event","stopPropagation","taskDefKey","SANCTIONS_CHECK_KEY","parentTaskId","isUserClaim","emailId","toLowerCase","processOwner","CLAIMS_FNOL_PUSH_BACK_ROUTES","routes","lossAndClaims","TASK_ROW_TYPE","rfi","push","claimsFNOL","tasksData","length","refreshTasksData","requestType","filterTerm","navigation","isTaskLinkDisabled","automatedTasks","AUTOMATED_TASK_DEF_KEYS","includes","isPremiumProcessing"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC,C,CAEA;;AACA,SAASC,oBAAT,QAAqC,yBAArC;AACA,SACEC,mCADF,EAEEC,sBAFF,EAGEC,gBAHF,EAIEC,0BAJF,EAKEC,SALF,EAMEC,SANF,EAOEC,0BAPF,EAQEC,uCARF,EASEC,oCATF,EAUEC,+BAVF,EAWEC,4BAXF,QAYO,QAZP;AAaA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAO,KAAKC,SAAZ,MAA2B,QAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,YAA3B,C,CACA;;AACA,SAASC,UAAT,QAA2B,mBAA3B;;;AAEAC,gBAAgB,CAACC,SAAjB,GAA6B;AAC3BC,EAAAA,IAAI,EAAEtB,SAAS,CAACuB,MAAV,CAAiBC,UADI;AAE3BC,EAAAA,UAAU,EAAEzB,SAAS,CAAC0B,IAAV,CAAeF,UAFA;AAG3BG,EAAAA,UAAU,EAAE3B,SAAS,CAAC0B,IAHK;AAI3BE,EAAAA,WAAW,EAAE5B,SAAS,CAAC6B,IAAV,CAAeL,UAJD;AAK3BM,EAAAA,QAAQ,EAAE9B,SAAS,CAAC+B,KAAV,CAAgB;AACxBC,IAAAA,UAAU,EAAEhC,SAAS,CAAC6B,IAAV,CAAeL,UADH;AAExBS,IAAAA,gBAAgB,EAAEjC,SAAS,CAAC6B,IAAV,CAAeL;AAFT,GAAhB,EAGPA;AARwB,CAA7B;AAWA,eAAe,SAASJ,gBAAT,CAA0Bc,KAA1B,EAAiC;AAAA;;AAAA;AAAA;;AAC9C,MAAMC,QAAQ,GAAGjC,WAAW,EAA5B;AACA,MAAMkC,OAAO,GAAGrC,UAAU,EAA1B;AAF8C,MAGtCuB,IAHsC,GAG7BY,KAH6B,CAGtCZ,IAHsC;AAAA,MAItCe,QAJsC,GAIzBD,OAAO,CAACE,QAJiB,CAItCD,QAJsC;AAK9C,MAAME,aAAa,GAAGtC,WAAW,CAACU,uCAAD,CAAjC;AACA,MAAM6B,gBAAgB,GAAGvC,WAAW,CAACI,sBAAD,CAApC;AACA,MAAMoC,qBAAqB,GAAGxC,WAAW,CAACY,+BAAD,CAAzC;AACA,MAAM6B,IAAI,GAAGzC,WAAW,CAAC,UAAC0C,KAAD;AAAA,WAAWA,KAAK,CAACD,IAAjB;AAAA,GAAD,CAAxB;AACA,MAAME,cAAc,GAAG5B,SAAS,CAAC6B,0BAAV,CAAqCC,MAA5D;AACA,MAAMC,QAAQ,GAAGN,qBAAH,aAAGA,qBAAH,uBAAGA,qBAAqB,CAAEM,QAAxC;AACA,MAAMC,cAAc,GAAGP,qBAAH,aAAGA,qBAAH,uBAAGA,qBAAqB,CAAEO,cAA9C;;AAEA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAC3B,IAAD,EAAU;AACzBa,IAAAA,QAAQ,CACN3B,SAAS,CAAC;AACR0C,MAAAA,SAAS,EAAE,oBADH;AAERhB,MAAAA,KAAK,EAAE;AACLiB,QAAAA,KAAK,EAAElC,KAAK,CAACmC,MAAN,CAAaC,CAAb,CAAe,yCAAf,CADF;AAELC,QAAAA,cAAc,EAAE,KAFX;AAGLC,QAAAA,SAAS,EAAE,IAHN;AAILC,QAAAA,QAAQ,EAAE,IAJL;AAKLC,QAAAA,gBAAgB,EAAE,IALb;AAMLC,QAAAA,cAAc,EAAE;AACdC,UAAAA,KAAK,EAAErC,IADO;AAEdsC,UAAAA,aAAa,EAAE,yBAAM;AACnBzB,YAAAA,QAAQ,CAAC1B,SAAS,EAAV,CAAR;AACD,WAJa;AAKdoD,UAAAA,aAAa,EAAE,yBAAM,CAAG;AALV;AANX;AAFC,KAAD,CADH,CAAR;AAmBD,GApBD;;AAqBA,MAAMC,eAAe,GAAG,CACtB;AACEC,IAAAA,EAAE,EAAE,UADN;AAEEC,IAAAA,KAAK,EAAE/C,KAAK,CAACmC,MAAN,CAAaC,CAAb,CAAe,yCAAf,CAFT;AAGEY,IAAAA,QAAQ,EAAE,oBAAM;AACdhB,MAAAA,QAAQ,CAACf,KAAD,aAACA,KAAD,uBAACA,KAAK,CAAEZ,IAAR,CAAR;AACD;AALH,GADsB,EAQtB;AACEyC,IAAAA,EAAE,EAAE,gBADN;AAEEC,IAAAA,KAAK,EAAE/C,KAAK,CAACmC,MAAN,CAAaC,CAAb,CAAe,+CAAf,CAFT;AAGEY,IAAAA,QAAQ,EAAE;AAAA,aAAMC,cAAc,EAApB;AAAA;AAHZ,GARsB,EAatB;AACEH,IAAAA,EAAE,EAAE,WADN;AAEEC,IAAAA,KAAK,EAAE/C,KAAK,CAACmC,MAAN,CAAaC,CAAb,CAAe,0CAAf,CAFT;AAGEY,IAAAA,QAAQ,EAAE,oBAAM;AACdE,MAAAA,wBAAwB;AACzB;AALH,GAbsB,CAAxB;;AAsBA,MAAMA,wBAAwB,GAAG,SAA3BA,wBAA2B,GAAM;AACrC,QAAMC,WAAW,GAAG,CAClB;AACEC,MAAAA,IAAI,EAAE,SADR;AAEEL,MAAAA,KAAK,EAAE/C,KAAK,CAACmC,MAAN,CAAaC,CAAb,CAAe,kBAAf,EAAmC;AAAEiB,QAAAA,OAAO,EAAEhD,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEgD;AAAjB,OAAnC,CAFT;AAGEC,MAAAA,IAAI,EAAElC,QAHR;AAIEmC,MAAAA,MAAM,EAAE;AAJV,KADkB,EAOlB,CAAAlD,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEmD,QAAN,KAAkB;AAChBJ,MAAAA,IAAI,EAAE,UADU;AAEhBL,MAAAA,KAAK,YAAK/C,KAAK,CAACmC,MAAN,CAAaC,CAAb,CAAe,0CAAf,EAA2D;AAAEoB,QAAAA,QAAQ,EAAEnD,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEmD;AAAlB,OAA3D,CAAL,CAFW;AAGhBF,MAAAA,IAAI,EAAElC,QAHU;AAIhBmC,MAAAA,MAAM,EAAE;AAJQ,KAPA,EAalB,CAAAlD,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEoD,OAAN,KAAiB;AACfL,MAAAA,IAAI,EAAE,SADS;AAEfL,MAAAA,KAAK,YAAK/C,KAAK,CAACmC,MAAN,CAAaC,CAAb,CAAe,yCAAf,EAA0D;AAAEqB,QAAAA,OAAO,EAAEpD,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEoD;AAAjB,OAA1D,CAAL,CAFU;AAGfH,MAAAA,IAAI,EAAElC,QAHS;AAIfmC,MAAAA,MAAM,EAAE,IAJO;AAKfG,MAAAA,SAAS,EAAE;AALI,KAbC,CAApB;;AAsBA,QAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC7B,0BACE;AAAA,gCACE,QAAC,UAAD;AAAY,UAAA,KAAK,EAAER;AAAnB;AAAA;AAAA;AAAA;AAAA,iBADF,eAEE,QAAC,UAAD;AAAY,UAAA,OAAO,EAAC,IAApB;AAAyB,UAAA,KAAK,EAAE;AAAES,YAAAA,WAAW,EAAE;AAAf,WAAhC;AAAA,oBACG5D,KAAK,CAACmC,MAAN,CAAaC,CAAb,CAAe,0CAAf;AADH;AAAA;AAAA;AAAA;AAAA,iBAFF;AAAA,sBADF;AAQD,KATD;;AAUAlB,IAAAA,QAAQ,CACN3B,SAAS,CAAC;AACR0C,MAAAA,SAAS,EAAE,2BADH;AAERhB,MAAAA,KAAK,EAAE;AACL4C,QAAAA,aAAa,eAAE,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,iBADV;AAELxB,QAAAA,cAAc,EAAE,KAFX;AAGLC,QAAAA,SAAS,EAAE,IAHN;AAILC,QAAAA,QAAQ,EAAE,IAJL;AAKLC,QAAAA,gBAAgB,EAAE,IALb;AAMLC,QAAAA,cAAc,EAAE;AACdC,UAAAA,KAAK,EAAErC,IADO;AAEdyD,UAAAA,IAAI,EAAE/D,SAAS,CAACgE,YAFF;AAGdpB,UAAAA,aAAa,EAAE,yBAAM;AACnBzB,YAAAA,QAAQ,CAAC1B,SAAS,EAAV,CAAR;AACD;AALa;AANX;AAFC,KAAD,CADH,CAAR;AAmBD,GApDD;;AAqDA,MAAMwE,SAAS,GAAG,SAAZA,SAAY,CAACC,OAAD;AAAA,WAAa,UAACC,KAAD,EAAW;AACxC,UAAID,OAAJ,aAAIA,OAAJ,uBAAIA,OAAO,CAAER,OAAb,EAAsB;AAAA;;AACpBS,QAAAA,KAAK,CAACC,eAAN;AACA,SAAAF,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEG,UAAT,MAAwBrE,SAAS,CAACsE,mBAAlC,IAAyDnD,QAAQ,CAACzB,0BAA0B,CAACwE,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAEK,YAAV,CAA3B,CAAjE;AACA,YAAMC,WAAW,GAAG,kBAAA9C,IAAI,CAAC+C,OAAL,gEAAcC,WAAd,SAAgCR,OAAhC,aAAgCA,OAAhC,gDAAgCA,OAAO,CAAES,YAAzC,0DAAgC,sBAAuBD,WAAvB,EAAhC,CAApB;AACAvD,QAAAA,QAAQ,CAAC7B,gBAAgB,CAACkF,WAAD,CAAjB,CAAR;AACArD,QAAAA,QAAQ,CAAC/B,mCAAmC,CAAC8E,OAAD,CAApC,CAAR,CALoB,CAKoC;;AACxD/C,QAAAA,QAAQ,CAACvB,oCAAoC,CAACsE,OAAD,CAArC,CAAR;AACA/C,QAAAA,QAAQ,CAAC5B,0BAA0B,CAACS,SAAS,CAAC4E,4BAAV,CAAuCC,MAAvC,CAA8CC,aAA/C,CAA3B,CAAR;;AACA,YAAIZ,OAAO,CAACnC,QAAR,KAAqB/B,SAAS,CAAC+E,aAAV,CAAwBC,GAAjD,EAAsD;AACpD5D,UAAAA,OAAO,CAAC6D,IAAR,WAAgBlF,MAAM,CAAC8E,MAAP,CAAcK,UAAd,CAAyBF,GAAzC,cAAgDd,OAAO,CAACR,OAAxD;AACD,SAFD,MAEO;AACLtC,UAAAA,OAAO,CAAC6D,IAAR,WAAgBlF,MAAM,CAAC8E,MAAP,CAAcK,UAAd,CAAyB5E,IAAzC,cAAiD4D,OAAjD,aAAiDA,OAAjD,uBAAiDA,OAAO,CAAER,OAA1D;AACD;AACF;AACF,KAfiB;AAAA,GAAlB;;AAiBA,MAAMR,cAAc;AAAA,wEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACfiC,cAAAA,SADe,GACH,CAAA5D,aAAa,SAAb,IAAAA,aAAa,WAAb,YAAAA,aAAa,CAAE6D,MAAf,IAAwB7D,aAAxB,GAAwC,CAACjB,IAAD,CADrC;AAErBa,cAAAA,QAAQ,CACN3B,SAAS,CAAC;AACR0C,gBAAAA,SAAS,EAAE,iBADH;AAERhB,gBAAAA,KAAK,EAAE;AACLiB,kBAAAA,KAAK,EAAElC,KAAK,CAACmC,MAAN,CAAaC,CAAb,CAAe,+CAAf,CADF;AAELC,kBAAAA,cAAc,EAAE,KAFX;AAGLC,kBAAAA,SAAS,EAAE,IAHN;AAILC,kBAAAA,QAAQ,EAAE,IAJL;AAKLC,kBAAAA,gBAAgB,EAAE,IALb;AAMLC,kBAAAA,cAAc,EAAE;AACdpC,oBAAAA,IAAI,EAAE6E,SADQ;AAEdrE,oBAAAA,QAAQ,EAAE;AACR+B,sBAAAA,aAAa,EAAE,yBAAM;AACnBwC,wBAAAA,gBAAgB;AACjB,uBAHO;AAIRzC,sBAAAA,aAAa,EAAE,yBAAM;AACnBzB,wBAAAA,QAAQ,CAAC1B,SAAS,EAAV,CAAR;AACD;AANO;AAFI;AANX;AAFC,eAAD,CADH,CAAR;;AAFqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAdyD,cAAc;AAAA;AAAA;AAAA,KAApB;;AA2BA,MAAMmC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC7BlE,IAAAA,QAAQ,CAACrB,4BAA4B,CAAC;AAAEwF,MAAAA,WAAW,EAAE1D,cAAf;AAA+BG,MAAAA,QAAQ,EAARA,QAA/B;AAAyCwD,MAAAA,UAAU,EAAEvD,cAAc,IAAI,IAAvE;AAA6EwD,MAAAA,UAAU,EAAE;AAAzF,KAAD,CAA7B,CAAR;AACD,GAFD;;AAIA,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,GAAe;AAAA,QAAdnF,IAAc,uEAAP,EAAO;AACxC,QAAMoF,cAAc,GAAG1F,SAAH,aAAGA,SAAH,uBAAGA,SAAS,CAAE2F,uBAAlC;AACA,WAAOD,cAAP,aAAOA,cAAP,uBAAOA,cAAc,CAAEE,QAAhB,CAAyBtF,IAAzB,aAAyBA,IAAzB,uBAAyBA,IAAI,CAAE+D,UAA/B,CAAP;AACD,GAHD,CA7J8C,CAgK3C;;;AAEH,sBACE,QAAC,oBAAD,kCACMnD,KADN;AAEE,IAAA,eAAe,EAAEuE,kBAAkB,CAACnF,IAAD,CAAlB,GAA2B,EAA3B,GAAgCwC,eAFnD;AAGE,IAAA,mBAAmB,EAAE5B,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAE2E,mBAH9B;AAIE,IAAA,gBAAgB,EAAErE,gBAJpB;AAKE,IAAA,QAAQ,EAAE;AACRR,MAAAA,UAAU,EAAEE,KAAF,aAAEA,KAAF,0CAAEA,KAAK,CAAEJ,QAAT,oDAAE,gBAAiBE,UADrB;AAERiD,MAAAA,SAAS,EAATA,SAFQ;AAGRhC,MAAAA,QAAQ,EAARA;AAHQ,KALZ;AAUE,IAAA,kBAAkB,EAAEwD,kBAAkB,CAACnF,IAAD;AAVxC;AAAA;AAAA;AAAA;AAAA,UADF;AAcD;;GAhLuBF,gB;UACLlB,W,EACDH,U,EAGME,W,EACGA,W,EACKA,W,EACjBA,W;;;KARSmB,gB","sourcesContent":["import React from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\n// app\r\nimport { TasksTabTableRowView } from './TasksTabTableRow.view';\r\nimport {\r\n  selectClaimsProcessingTasksSelected,\r\n  selectCaseTaskTypeView,\r\n  checkIsUserClaim,\r\n  setClaimsFnolPushBackRoute,\r\n  showModal,\r\n  hideModal,\r\n  getSancCheckAssociatedTask,\r\n  selectClaimsTasksProcessingListSelected,\r\n  setClaimsProcessingTasksListSelected,\r\n  selectClaimsTasksProcessingList,\r\n  getClaimsTasksProcessingList,\r\n} from 'stores';\r\nimport config from 'config';\r\nimport * as constants from 'consts';\r\nimport * as utils from 'utils';\r\nimport { Breadcrumb } from 'components';\r\n// mui\r\nimport { Typography } from '@material-ui/core';\r\n\r\nTasksTabTableRow.propTypes = {\r\n  task: PropTypes.object.isRequired,\r\n  isTaskTeam: PropTypes.bool.isRequired,\r\n  isSelected: PropTypes.bool,\r\n  columnProps: PropTypes.func.isRequired,\r\n  handlers: PropTypes.shape({\r\n    selectTask: PropTypes.func.isRequired,\r\n    refreshTasksGrid: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default function TasksTabTableRow(props) {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const { task } = props;\r\n  const { pathname } = history.location;\r\n  const tasksSelected = useSelector(selectClaimsTasksProcessingListSelected);\r\n  const caseTaskTypeView = useSelector(selectCaseTaskTypeView);\r\n  const claimsTasksProcessing = useSelector(selectClaimsTasksProcessingList);\r\n  const user = useSelector((state) => state.user);\r\n  const searchTypeCall = constants.CLAIM_PROCESSING_REQ_TYPES.search;\r\n  const taskType = claimsTasksProcessing?.taskType;\r\n  const appliedFilters = claimsTasksProcessing?.appliedFilters;\r\n\r\n  const editTask = (task) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CREATE_AD_HOC_TASK',\r\n        props: {\r\n          title: utils.string.t('claims.processing.taskFunction.editTask'),\r\n          hideCompOnBlur: false,\r\n          fullWidth: true,\r\n          maxWidth: 'md',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            claim: task,\r\n            cancelHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n            submitHandler: () => { },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n  const taskActionItems = [\r\n    {\r\n      id: 'editTask',\r\n      label: utils.string.t('claims.processing.taskFunction.editTask'),\r\n      callback: () => {\r\n        editTask(props?.task);\r\n      },\r\n    },\r\n    {\r\n      id: 'changePriority',\r\n      label: utils.string.t('claims.processing.taskFunction.changePriority'),\r\n      callback: () => changePriority(),\r\n    },\r\n    {\r\n      id: 'createRfi',\r\n      label: utils.string.t('claims.processing.taskFunction.createRFI'),\r\n      callback: () => {\r\n        handleCreateRFITaskLevel();\r\n      },\r\n    },\r\n  ];\r\n\r\n  const handleCreateRFITaskLevel = () => {\r\n    const breadcrumbs = [\r\n      {\r\n        name: 'lossRef',\r\n        label: utils.string.t('claims.loss.text', { lossRef: task?.lossRef }),\r\n        link: pathname,\r\n        active: true,\r\n      },\r\n      task?.claimRef && {\r\n        name: 'claimRef',\r\n        label: `${utils.string.t('claims.rfiDashboard.breadCrumbs.claimRef', { claimRef: task?.claimRef })}`,\r\n        link: pathname,\r\n        active: true,\r\n      },\r\n      task?.taskRef && {\r\n        name: 'taskRef',\r\n        label: `${utils.string.t('claims.rfiDashboard.breadCrumbs.taskRef', { taskRef: task?.taskRef })}`,\r\n        link: pathname,\r\n        active: true,\r\n        largeFont: true,\r\n      },\r\n    ];\r\n\r\n    const TitleWBreadCrumb = () => {\r\n      return (\r\n        <>\r\n          <Breadcrumb links={breadcrumbs} />\r\n          <Typography variant=\"h2\" style={{ paddingLeft: '1.2rem' }}>\r\n            {utils.string.t('claims.processing.taskFunction.createRFI')}\r\n          </Typography>\r\n        </>\r\n      )\r\n    }\r\n    dispatch(\r\n      showModal({\r\n        component: 'CLAIMS_CREATE_RFI_STEPPER',\r\n        props: {\r\n          titleChildren: <TitleWBreadCrumb />,\r\n          hideCompOnBlur: false,\r\n          fullWidth: true,\r\n          maxWidth: 'lg',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            claim: task,\r\n            type: constants.RFI_ON_TASKS,\r\n            cancelHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n  const clickTask = (taskObj) => (event) => {\r\n    if (taskObj?.taskRef) {\r\n      event.stopPropagation();\r\n      taskObj?.taskDefKey === constants.SANCTIONS_CHECK_KEY && dispatch(getSancCheckAssociatedTask(taskObj?.parentTaskId));\r\n      const isUserClaim = user.emailId?.toLowerCase() === taskObj?.processOwner?.toLowerCase();\r\n      dispatch(checkIsUserClaim(isUserClaim));\r\n      dispatch(selectClaimsProcessingTasksSelected(taskObj)); // TODO redundant remove it later\r\n      dispatch(setClaimsProcessingTasksListSelected(taskObj));\r\n      dispatch(setClaimsFnolPushBackRoute(constants.CLAIMS_FNOL_PUSH_BACK_ROUTES.routes.lossAndClaims));\r\n      if (taskObj.taskType === constants.TASK_ROW_TYPE.rfi) {\r\n        history.push(`${config.routes.claimsFNOL.rfi}/${taskObj.taskRef}`);\r\n      } else {\r\n        history.push(`${config.routes.claimsFNOL.task}/${taskObj?.taskRef}`);\r\n      }\r\n    }\r\n  };\r\n\r\n  const changePriority = async () => {\r\n    const tasksData = tasksSelected?.length ? tasksSelected : [task];\r\n    dispatch(\r\n      showModal({\r\n        component: 'CHANGE_PRIORITY',\r\n        props: {\r\n          title: utils.string.t('claims.processing.taskFunction.changePriority'),\r\n          hideCompOnBlur: false,\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            task: tasksData,\r\n            handlers: {\r\n              submitHandler: () => {\r\n                refreshTasksData();\r\n              },\r\n              cancelHandler: () => {\r\n                dispatch(hideModal());\r\n              },\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const refreshTasksData = () => {\r\n    dispatch(getClaimsTasksProcessingList({ requestType: searchTypeCall, taskType, filterTerm: appliedFilters || null, navigation: true }));\r\n  };\r\n\r\n  const isTaskLinkDisabled = (task = {}) => {\r\n    const automatedTasks = constants?.AUTOMATED_TASK_DEF_KEYS;\r\n    return automatedTasks?.includes(task?.taskDefKey);\r\n  }; // automated BPM task does not need task dashboard Link and tasks handlers\r\n\r\n  return (\r\n    <TasksTabTableRowView\r\n      {...props}\r\n      taskActionItems={isTaskLinkDisabled(task) ? [] : taskActionItems}\r\n      isPremiumProcessing={props?.isPremiumProcessing}\r\n      caseTaskTypeView={caseTaskTypeView}\r\n      handlers={{\r\n        selectTask: props?.handlers?.selectTask,\r\n        clickTask,\r\n        editTask,\r\n      }}\r\n      isTaskLinkDisabled={isTaskLinkDisabled(task)}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}