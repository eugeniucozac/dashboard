{"ast":null,"code":"import _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\AddRiskObjectAddress\\\\AddRiskObjectAddress.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport sortBy from 'lodash/sortBy';\nimport debounce from 'lodash/debounce';\nimport get from 'lodash/get';\nimport round from 'lodash/round';\nimport turfLength from '@turf/length';\nimport { lineString as turfLineString } from '@turf/helpers'; // app\n\nimport styles from './AddRiskObjectAddress.styles';\nimport { AddRiskObjectAddressView } from './AddRiskObjectAddress.view';\nimport { getRiskAddress } from 'stores';\nimport config from 'config'; // mui\n\nimport { makeStyles } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nAddRiskObjectAddress.propTypes = {\n  field: PropTypes.object.isRequired,\n  formProps: PropTypes.object.isRequired\n};\nexport default function AddRiskObjectAddress(_ref) {\n  _s();\n\n  var field = _ref.field,\n      formProps = _ref.formProps;\n  var classes = makeStyles(styles, {\n    name: 'AddRiskObjectAddress'\n  })();\n  var dispatch = useDispatch();\n  var refLocations = useRef([]);\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      distance = _useState2[0],\n      setDistance = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      locations = _useState4[0],\n      setLocations = _useState4[1];\n\n  var _useState5 = useState({\n    maxZoom: 12\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      map = _useState6[0],\n      setMap = _useState6[1];\n\n  var validFields = ['street', 'city', 'zipCode', 'county', 'state', 'distanceToCoast', 'formattedAddress', 'outputCounty', 'outputState'];\n  var geojson = {\n    type: 'FeatureCollection',\n    features: []\n  };\n\n  var mapOnLoad = function mapOnLoad(instance) {\n    if (!instance) return;\n    setMap(_objectSpread(_objectSpread({}, map), {}, {\n      instance: instance\n    }));\n    instance.addSource('geojson', {\n      type: 'geojson',\n      data: geojson\n    });\n    instance.addLayer({\n      id: 'measure-circle',\n      type: 'circle',\n      source: 'geojson',\n      paint: {\n        'circle-radius': 5,\n        'circle-color': 'rgb(19, 93, 252)',\n        'circle-stroke-width': 2,\n        'circle-stroke-color': 'rgb(255,255,255)'\n      },\n      filter: ['in', '$type', 'Point']\n    });\n    instance.addLayer({\n      id: 'measure-lines',\n      type: 'line',\n      source: 'geojson',\n      layout: {\n        'line-cap': 'round',\n        'line-join': 'round'\n      },\n      paint: {\n        'line-color': 'rgb(19, 93, 252)',\n        'line-width': 2.5\n      },\n      filter: ['in', '$type', 'LineString']\n    });\n    instance.addLayer({\n      id: 'measure-point',\n      type: 'symbol',\n      source: 'geojson',\n      layout: {\n        'text-field': ['get', 'title'],\n        'text-size': 14,\n        'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\n        'text-offset': [0, 0.6],\n        'text-anchor': 'top',\n        'symbol-z-order': 'source'\n      },\n      paint: {\n        'text-halo-blur': 1,\n        'text-halo-color': 'rgba(255,255,255,1)',\n        'text-halo-width': 1\n      },\n      filter: ['in', '$type', 'Point']\n    });\n    instance.on('click', function (event) {\n      var marker = get(refLocations, 'current[0]') || {};\n      var coordinatesMarker = [marker.lng, marker.lat];\n      var coordinatesPoint = [event.lngLat.lng, event.lngLat.lat];\n      var distance = turfLength(turfLineString([coordinatesMarker, coordinatesPoint]), {\n        units: 'miles'\n      });\n      var distanceString = distance ? round(distance, 2) : ''; // abort\n\n      if (!marker.lng || !marker.lat) return;\n      geojson.features = [];\n      updateDistance(distanceString);\n      var line = {\n        type: 'Feature',\n        geometry: {\n          type: 'LineString',\n          coordinates: [coordinatesMarker, coordinatesPoint]\n        }\n      };\n      var point = {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: coordinatesPoint\n        },\n        properties: {\n          title: \"\".concat(distance ? distanceString + ' miles' : '')\n        }\n      };\n      geojson.features.push(point);\n      geojson.features.push(line);\n      instance.getSource('geojson').setData(geojson);\n    });\n  };\n\n  var handleAddressSearch = debounce( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(name, value, getValues) {\n      var values, obj, response, mapSource;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              values = get(getValues({\n                nest: true\n              }), field.name);\n              obj = _objectSpread(_objectSpread({}, values), {}, _defineProperty({}, name, value));\n\n              if (!Object.values(obj).some(function (v) {\n                return Boolean(v);\n              })) {\n                _context.next = 7;\n                break;\n              }\n\n              _context.next = 5;\n              return dispatch(getRiskAddress(Object.values(obj).filter(function (v) {\n                return !!v;\n              }).join(', ')));\n\n            case 5:\n              response = _context.sent;\n\n              if (response) {\n                refLocations.current = [response];\n                setLocations([response]);\n                updateLocation([response]);\n                updateDistance('', false);\n                mapSource = map.instance.getSource('geojson');\n                geojson.features = [];\n                mapSource.setData(geojson);\n              }\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), config.ui.autocomplete.delay);\n\n  var handleAddressOnChange = function handleAddressOnChange(definition) {\n    return function (value, control) {\n      handleAddressSearch(definition.name, value, control.getValues);\n      return value;\n    };\n  };\n\n  var updateDistance = function updateDistance(value) {\n    var revalidate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    setDistance(value);\n    formProps.setValue(\"\".concat(field.name, \".distanceToCoast\"), value);\n\n    if (revalidate) {\n      formProps.trigger(\"\".concat(field.name, \".distanceToCoast\"));\n    }\n  };\n\n  var updateLocation = function updateLocation(value) {\n    var _value$ = value[0],\n        outputAddress = _value$.outputAddress,\n        county = _value$.county,\n        state = _value$.state;\n    formProps.setValue(\"\".concat(field.name, \".formattedAddress\"), outputAddress);\n    formProps.setValue(\"\".concat(field.name, \".outputCounty\"), county);\n    formProps.setValue(\"\".concat(field.name, \".outputState\"), state);\n  };\n\n  var customFieldProperties = field && field.objectDef ? {\n    objectDef: sortBy(field.objectDef.filter(function (def) {\n      return validFields.includes(def.name);\n    }).map(function (def) {\n      if (def.name === 'street') {\n        def.gridSize = {\n          xs: 12,\n          sm: 8,\n          lg: 12\n        };\n        def.order = 0;\n        def.onChange = handleAddressOnChange(def);\n      }\n\n      if (def.name === 'zipCode') {\n        def.gridSize = {\n          xs: 4\n        };\n        def.order = 1;\n        def.onChange = handleAddressOnChange(def);\n      }\n\n      if (def.name === 'city') {\n        def.gridSize = {\n          xs: 8,\n          sm: 12,\n          md: 6,\n          lg: 8\n        };\n        def.order = 2;\n        def.onChange = handleAddressOnChange(def);\n      }\n\n      if (def.name === 'county') {\n        def.gridSize = {\n          xs: 8,\n          md: 4,\n          lg: 8\n        };\n        def.order = 3;\n        def.onChange = handleAddressOnChange(def);\n      }\n\n      if (def.name === 'state') {\n        def.gridSize = {\n          xs: 4,\n          md: 2,\n          lg: 4\n        };\n        def.order = 4;\n        def.onChange = handleAddressOnChange(def);\n      }\n\n      if (def.name === 'distanceToCoast') {\n        def.type = 'hidden';\n        def.order = -1;\n        def.errorProps = {\n          nestedClasses: {\n            root: classes.error\n          }\n        };\n      }\n\n      if (def.name === 'formattedAddress') {\n        def.type = 'hidden';\n        def.order = -1;\n      }\n\n      return def;\n    }), 'order')\n  } : {}; // abort\n\n  if (!field || !field.name || !field.objectDef) return null;\n  if (!formProps || !formProps.control) return null;\n  return /*#__PURE__*/_jsxDEV(AddRiskObjectAddressView, {\n    field: _objectSpread(_objectSpread({}, field), customFieldProperties),\n    formProps: formProps,\n    map: map,\n    locations: locations,\n    distance: distance,\n    mapOnLoad: mapOnLoad\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 253,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddRiskObjectAddress, \"u4kXcqkd685GohyNOBvrsNRtvfY=\", false, function () {\n  return [useDispatch];\n});\n\n_c = AddRiskObjectAddress;\nAddRiskObjectAddress.displayName = \"AddRiskObjectAddress\";\nAddRiskObjectAddress.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"AddRiskObjectAddress\",\n  \"props\": {\n    \"field\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"formProps\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\modules\\\\AddRiskObjectAddress\\\\AddRiskObjectAddress.js\"] = {\n    name: \"AddRiskObjectAddress\",\n    docgenInfo: AddRiskObjectAddress.__docgenInfo,\n    path: \"src\\\\modules\\\\AddRiskObjectAddress\\\\AddRiskObjectAddress.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"AddRiskObjectAddress\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/AddRiskObjectAddress/AddRiskObjectAddress.js"],"names":["React","useState","useRef","PropTypes","useDispatch","sortBy","debounce","get","round","turfLength","lineString","turfLineString","styles","AddRiskObjectAddressView","getRiskAddress","config","makeStyles","AddRiskObjectAddress","propTypes","field","object","isRequired","formProps","classes","name","dispatch","refLocations","distance","setDistance","locations","setLocations","maxZoom","map","setMap","validFields","geojson","type","features","mapOnLoad","instance","addSource","data","addLayer","id","source","paint","filter","layout","on","event","marker","coordinatesMarker","lng","lat","coordinatesPoint","lngLat","units","distanceString","updateDistance","line","geometry","coordinates","point","properties","title","push","getSource","setData","handleAddressSearch","value","getValues","values","nest","obj","Object","some","v","Boolean","join","response","current","updateLocation","mapSource","ui","autocomplete","delay","handleAddressOnChange","definition","control","revalidate","setValue","trigger","outputAddress","county","state","customFieldProperties","objectDef","def","includes","gridSize","xs","sm","lg","order","onChange","md","errorProps","nestedClasses","root","error"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch } from 'react-redux';\r\nimport sortBy from 'lodash/sortBy';\r\nimport debounce from 'lodash/debounce';\r\nimport get from 'lodash/get';\r\nimport round from 'lodash/round';\r\nimport turfLength from '@turf/length';\r\nimport { lineString as turfLineString } from '@turf/helpers';\r\n\r\n// app\r\nimport styles from './AddRiskObjectAddress.styles';\r\nimport { AddRiskObjectAddressView } from './AddRiskObjectAddress.view';\r\nimport { getRiskAddress } from 'stores';\r\nimport config from 'config';\r\n\r\n// mui\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nAddRiskObjectAddress.propTypes = {\r\n  field: PropTypes.object.isRequired,\r\n  formProps: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default function AddRiskObjectAddress({ field, formProps }) {\r\n  const classes = makeStyles(styles, { name: 'AddRiskObjectAddress' })();\r\n  const dispatch = useDispatch();\r\n  const refLocations = useRef([]);\r\n  const [distance, setDistance] = useState();\r\n  const [locations, setLocations] = useState([]);\r\n  const [map, setMap] = useState({ maxZoom: 12 });\r\n  const validFields = [\r\n    'street',\r\n    'city',\r\n    'zipCode',\r\n    'county',\r\n    'state',\r\n    'distanceToCoast',\r\n    'formattedAddress',\r\n    'outputCounty',\r\n    'outputState',\r\n  ];\r\n\r\n  const geojson = {\r\n    type: 'FeatureCollection',\r\n    features: [],\r\n  };\r\n\r\n  const mapOnLoad = (instance) => {\r\n    if (!instance) return;\r\n\r\n    setMap({ ...map, instance });\r\n\r\n    instance.addSource('geojson', {\r\n      type: 'geojson',\r\n      data: geojson,\r\n    });\r\n\r\n    instance.addLayer({\r\n      id: 'measure-circle',\r\n      type: 'circle',\r\n      source: 'geojson',\r\n      paint: {\r\n        'circle-radius': 5,\r\n        'circle-color': 'rgb(19, 93, 252)',\r\n        'circle-stroke-width': 2,\r\n        'circle-stroke-color': 'rgb(255,255,255)',\r\n      },\r\n      filter: ['in', '$type', 'Point'],\r\n    });\r\n\r\n    instance.addLayer({\r\n      id: 'measure-lines',\r\n      type: 'line',\r\n      source: 'geojson',\r\n      layout: {\r\n        'line-cap': 'round',\r\n        'line-join': 'round',\r\n      },\r\n      paint: {\r\n        'line-color': 'rgb(19, 93, 252)',\r\n        'line-width': 2.5,\r\n      },\r\n      filter: ['in', '$type', 'LineString'],\r\n    });\r\n\r\n    instance.addLayer({\r\n      id: 'measure-point',\r\n      type: 'symbol',\r\n      source: 'geojson',\r\n      layout: {\r\n        'text-field': ['get', 'title'],\r\n        'text-size': 14,\r\n        'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],\r\n        'text-offset': [0, 0.6],\r\n        'text-anchor': 'top',\r\n        'symbol-z-order': 'source',\r\n      },\r\n      paint: {\r\n        'text-halo-blur': 1,\r\n        'text-halo-color': 'rgba(255,255,255,1)',\r\n        'text-halo-width': 1,\r\n      },\r\n      filter: ['in', '$type', 'Point'],\r\n    });\r\n\r\n    instance.on('click', (event) => {\r\n      const marker = get(refLocations, 'current[0]') || {};\r\n      const coordinatesMarker = [marker.lng, marker.lat];\r\n      const coordinatesPoint = [event.lngLat.lng, event.lngLat.lat];\r\n      const distance = turfLength(turfLineString([coordinatesMarker, coordinatesPoint]), { units: 'miles' });\r\n      const distanceString = distance ? round(distance, 2) : '';\r\n\r\n      // abort\r\n      if (!marker.lng || !marker.lat) return;\r\n\r\n      geojson.features = [];\r\n      updateDistance(distanceString);\r\n\r\n      const line = {\r\n        type: 'Feature',\r\n        geometry: {\r\n          type: 'LineString',\r\n          coordinates: [coordinatesMarker, coordinatesPoint],\r\n        },\r\n      };\r\n\r\n      const point = {\r\n        type: 'Feature',\r\n        geometry: {\r\n          type: 'Point',\r\n          coordinates: coordinatesPoint,\r\n        },\r\n        properties: {\r\n          title: `${distance ? distanceString + ' miles' : ''}`,\r\n        },\r\n      };\r\n\r\n      geojson.features.push(point);\r\n      geojson.features.push(line);\r\n      instance.getSource('geojson').setData(geojson);\r\n    });\r\n  };\r\n\r\n  const handleAddressSearch = debounce(async (name, value, getValues) => {\r\n    const values = get(getValues({ nest: true }), field.name);\r\n\r\n    const obj = {\r\n      ...values,\r\n      [name]: value,\r\n    };\r\n\r\n    if (Object.values(obj).some((v) => Boolean(v))) {\r\n      const response = await dispatch(\r\n        getRiskAddress(\r\n          Object.values(obj)\r\n            .filter((v) => !!v)\r\n            .join(', ')\r\n        )\r\n      );\r\n\r\n      if (response) {\r\n        refLocations.current = [response];\r\n        setLocations([response]);\r\n        updateLocation([response]);\r\n        updateDistance('', false);\r\n\r\n        const mapSource = map.instance.getSource('geojson');\r\n        geojson.features = [];\r\n        mapSource.setData(geojson);\r\n      }\r\n    }\r\n  }, config.ui.autocomplete.delay);\r\n\r\n  const handleAddressOnChange = (definition) => (value, control) => {\r\n    handleAddressSearch(definition.name, value, control.getValues);\r\n    return value;\r\n  };\r\n\r\n  const updateDistance = (value, revalidate = true) => {\r\n    setDistance(value);\r\n    formProps.setValue(`${field.name}.distanceToCoast`, value);\r\n\r\n    if (revalidate) {\r\n      formProps.trigger(`${field.name}.distanceToCoast`);\r\n    }\r\n  };\r\n\r\n  const updateLocation = (value) => {\r\n    const { outputAddress, county, state } = value[0];\r\n    formProps.setValue(`${field.name}.formattedAddress`, outputAddress);\r\n    formProps.setValue(`${field.name}.outputCounty`, county);\r\n    formProps.setValue(`${field.name}.outputState`, state);\r\n  };\r\n\r\n  const customFieldProperties =\r\n    field && field.objectDef\r\n      ? {\r\n          objectDef: sortBy(\r\n            field.objectDef\r\n              .filter((def) => validFields.includes(def.name))\r\n              .map((def) => {\r\n                if (def.name === 'street') {\r\n                  def.gridSize = { xs: 12, sm: 8, lg: 12 };\r\n                  def.order = 0;\r\n                  def.onChange = handleAddressOnChange(def);\r\n                }\r\n                if (def.name === 'zipCode') {\r\n                  def.gridSize = { xs: 4 };\r\n                  def.order = 1;\r\n                  def.onChange = handleAddressOnChange(def);\r\n                }\r\n                if (def.name === 'city') {\r\n                  def.gridSize = { xs: 8, sm: 12, md: 6, lg: 8 };\r\n                  def.order = 2;\r\n                  def.onChange = handleAddressOnChange(def);\r\n                }\r\n                if (def.name === 'county') {\r\n                  def.gridSize = { xs: 8, md: 4, lg: 8 };\r\n                  def.order = 3;\r\n                  def.onChange = handleAddressOnChange(def);\r\n                }\r\n                if (def.name === 'state') {\r\n                  def.gridSize = { xs: 4, md: 2, lg: 4 };\r\n                  def.order = 4;\r\n                  def.onChange = handleAddressOnChange(def);\r\n                }\r\n                if (def.name === 'distanceToCoast') {\r\n                  def.type = 'hidden';\r\n                  def.order = -1;\r\n                  def.errorProps = {\r\n                    nestedClasses: {\r\n                      root: classes.error,\r\n                    },\r\n                  };\r\n                }\r\n                if (def.name === 'formattedAddress') {\r\n                  def.type = 'hidden';\r\n                  def.order = -1;\r\n                }\r\n                return def;\r\n              }),\r\n            'order'\r\n          ),\r\n        }\r\n      : {};\r\n\r\n  // abort\r\n  if (!field || !field.name || !field.objectDef) return null;\r\n  if (!formProps || !formProps.control) return null;\r\n\r\n  return (\r\n    <AddRiskObjectAddressView\r\n      field={{ ...field, ...customFieldProperties }}\r\n      formProps={formProps}\r\n      map={map}\r\n      locations={locations}\r\n      distance={distance}\r\n      mapOnLoad={mapOnLoad}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}