{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n// app\nimport * as utils from 'utils';\nimport { authLogout, addLoader, enqueueNotification, hideModal, removeLoader } from 'stores';\nexport var postEditTaskPriority = function postEditTaskPriority(formData) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/claims.actions.postEditTaskPriority'\n    };\n    dispatch(postEditTaskPriorityRequest(formData));\n    dispatch(addLoader('postEditTaskPriority'));\n\n    if (!formData || !formData.taskId && !formData.priority) {\n      dispatch(postEditTaskPriorityFailure(defaultError));\n      dispatch(enqueueNotification('notification.setPriority.fail', 'error'));\n      dispatch(removeLoader('postEditTaskPriority'));\n      return;\n    }\n\n    var priority = formData.priority,\n        taskId = formData.taskId; // get the data for PATCH\n\n    var data = {\n      priority: priority,\n      taskId: taskId\n    };\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.bpmService,\n      path: \"workflow/process/update/task/priority\",\n      data: data\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(postEditTaskPrioritySuccess(data));\n      dispatch(enqueueNotification('notification.setPriority.success', 'success'));\n    }).catch(function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API fetch error (claims.postEditTaskPriority)'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(postEditTaskPriorityFailure(err));\n      dispatch(enqueueNotification('notification.setPriority.fail', 'error'));\n      return err;\n    }).finally(function () {\n      dispatch(removeLoader('postEditTaskPriority'));\n      dispatch(hideModal());\n    });\n  };\n};\nexport var postEditTaskPriorityRequest = function postEditTaskPriorityRequest(params) {\n  return {\n    type: 'CLAIMS_TASK_PRIORITY_EDIT_POST_REQUEST',\n    payload: params\n  };\n};\nexport var postEditTaskPrioritySuccess = function postEditTaskPrioritySuccess(data) {\n  return {\n    type: 'CLAIMS_TASK_PRIORITY_POST_SUCCESS',\n    payload: data\n  };\n};\nexport var postEditTaskPriorityFailure = function postEditTaskPriorityFailure(error) {\n  return {\n    type: 'CLAIMS_TASK_PRIORITY_POST_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.postEditTaskPriority.js"],"names":["utils","authLogout","addLoader","enqueueNotification","hideModal","removeLoader","postEditTaskPriority","formData","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","postEditTaskPriorityRequest","taskId","priority","postEditTaskPriorityFailure","data","api","post","token","accessToken","bpmService","path","then","response","handleResponse","json","handleNewData","postEditTaskPrioritySuccess","catch","err","errorParams","message","handleError","handleUnauthorized","finally","params","type","payload","error"],"mappings":"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","sourcesContent":["// app\r\nimport * as utils from 'utils';\r\nimport { authLogout, addLoader, enqueueNotification, hideModal, removeLoader } from 'stores';\r\n\r\nexport const postEditTaskPriority = (formData) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } } } = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.postEditTaskPriority',\r\n  };\r\n\r\n  dispatch(postEditTaskPriorityRequest(formData));\r\n  dispatch(addLoader('postEditTaskPriority'));\r\n\r\n  if (!formData || (!formData.taskId && !formData.priority)) {\r\n    dispatch(postEditTaskPriorityFailure(defaultError));\r\n    dispatch(enqueueNotification('notification.setPriority.fail', 'error'));\r\n    dispatch(removeLoader('postEditTaskPriority'));\r\n    return;\r\n  }\r\n\r\n  const { priority, taskId } = formData;\r\n  // get the data for PATCH\r\n  const data = {\r\n    priority: priority,\r\n    taskId: taskId,\r\n  };\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.bpmService,\r\n      path: `workflow/process/update/task/priority`,\r\n      data,\r\n    })\r\n    .then((response) => {\r\n      return utils.api.handleResponse(response);\r\n    })\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(postEditTaskPrioritySuccess(data));\r\n      dispatch(enqueueNotification('notification.setPriority.success', 'success'));\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        ...defaultError,\r\n        message: 'API fetch error (claims.postEditTaskPriority)',\r\n      };\r\n\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(postEditTaskPriorityFailure(err));\r\n      dispatch(enqueueNotification('notification.setPriority.fail', 'error'));\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('postEditTaskPriority'));\r\n      dispatch(hideModal());\r\n    });\r\n};\r\n\r\nexport const postEditTaskPriorityRequest = (params) => {\r\n  return {\r\n    type: 'CLAIMS_TASK_PRIORITY_EDIT_POST_REQUEST',\r\n    payload: params,\r\n  };\r\n};\r\n\r\nexport const postEditTaskPrioritySuccess = (data) => {\r\n  return {\r\n    type: 'CLAIMS_TASK_PRIORITY_POST_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const postEditTaskPriorityFailure = (error) => {\r\n  return {\r\n    type: 'CLAIMS_TASK_PRIORITY_POST_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}