{"ast":null,"code":"import _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\pages\\\\Claims\\\\Claims.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport { Helmet } from 'react-helmet'; // app\n\nimport { ClaimsView } from './Claims.view';\nimport { postClaimDetailsInformationSuccess, getLossInformation, getClaimsPreviewInformation, selectCatCodes, selectLossQualifiers, selectPriorities, selectSettlementCurrency, selectReferralResponse, selectClaimData, setClaimData, claimsPolicyData, getPolicyInformation, getClaimantNames, getInterest, getBEAdjuster, getLossQualifiers, getCatCodes, getPriorityLevels, getSettlementCurrency, selectClaimsPolicyData, getClaimDetailsSuccess, resetClaimData, setClaimsStepperControl, getComplexityValues, getReferralValues, getReferralResponse, showModal } from 'stores';\nimport * as utils from 'utils';\nimport config from 'config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Claims() {\n  _s();\n\n  var dispatch = useDispatch();\n  var history = useHistory();\n  var brand = useSelector(function (state) {\n    return state.ui.brand;\n  });\n  var claimData = useSelector(selectClaimData);\n  var claimCurrentPolicyData = useSelector(selectClaimsPolicyData);\n  var catCodes = useSelector(selectCatCodes);\n  var priorities = useSelector(selectPriorities);\n  var lossQualifiers = useSelector(selectLossQualifiers);\n  var settlementCurrency = useSelector(selectSettlementCurrency);\n  var referralResponse = useSelector(selectReferralResponse);\n\n  var handleRegisterNewLoss = function handleRegisterNewLoss() {\n    history.push(config.routes.claimsFNOL.newLoss);\n    dispatch(setClaimData({}));\n    dispatch(resetClaimData());\n  };\n\n  var handleComplexityRulesManagement = function handleComplexityRulesManagement() {\n    history.push(config.routes.claimsFNOL.complexityRules);\n  };\n\n  var handleClaimsProcessing = function handleClaimsProcessing() {\n    history.push(config.routes.claimsProcessing.root);\n  };\n\n  var handleCreateClaim = function handleCreateClaim(data) {\n    dispatch(setClaimsStepperControl(1));\n    dispatch(getLossInformation(data.lossDetailID, data.sourceID));\n    history.push(config.routes.claimsFNOL.newLoss);\n  };\n\n  useEffect(function () {\n    dispatch(setClaimData({}));\n    dispatch(setClaimsStepperControl(0));\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var handleRegisterNewLossModal = function handleRegisterNewLossModal() {\n    dispatch(showModal({\n      component: 'CLAIM_REGISTER_NEW_LOSS',\n      props: {\n        title: utils.string.t('Loss and Claim Registration'),\n        fullWidth: true,\n        maxWidth: 'xl',\n        disableAutoFocus: true,\n        disable: false,\n        componentProps: {}\n      }\n    }));\n  };\n\n  useEffect(function () {\n    if (claimData === null || claimData === void 0 ? void 0 : claimData.claimId) {\n      if (utils.generic.isInvalidOrEmptyArray(catCodes)) {\n        dispatch(getCatCodes());\n      }\n\n      if (utils.generic.isInvalidOrEmptyArray(priorities)) {\n        dispatch(getPriorityLevels());\n      }\n\n      if (utils.generic.isInvalidOrEmptyArray(lossQualifiers)) {\n        dispatch(getLossQualifiers());\n      }\n\n      if (utils.generic.isInvalidOrEmptyArray(settlementCurrency)) {\n        dispatch(getSettlementCurrency());\n      }\n\n      if (utils.generic.isInvalidOrEmptyArray(referralResponse)) {\n        dispatch(getReferralResponse());\n      }\n\n      dispatch(getLossInformation(claimData.lossId, claimData.sourceID));\n      dispatch(claimsPolicyData({\n        xbInstanceID: claimData.xbInstanceID,\n        xbPolicyID: claimData.xbPolicyID,\n        policyNumber: claimData.policyNumber,\n        divisionID: claimData.divisionID\n      }));\n    }\n  }, [claimData]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    if ((claimData === null || claimData === void 0 ? void 0 : claimData.claimId) && (claimCurrentPolicyData === null || claimCurrentPolicyData === void 0 ? void 0 : claimCurrentPolicyData.xbInstanceID)) {\n      var fetchData = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var claimDetails;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  dispatch(getPolicyInformation());\n                  dispatch(getInterest());\n                  dispatch(getBEAdjuster());\n                  dispatch(getClaimantNames());\n                  dispatch(postClaimDetailsInformationSuccess(claimData.claimId));\n                  _context.next = 7;\n                  return dispatch(getClaimsPreviewInformation(claimData === null || claimData === void 0 ? void 0 : claimData.claimId, claimData === null || claimData === void 0 ? void 0 : claimData.claimReference, claimData === null || claimData === void 0 ? void 0 : claimData.sourceID, claimData === null || claimData === void 0 ? void 0 : claimData.divisionID));\n\n                case 7:\n                  claimDetails = _context.sent;\n                  dispatch(getClaimDetailsSuccess(claimDetails));\n                  dispatch(getComplexityValues());\n                  dispatch(getReferralValues());\n\n                case 11:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function fetchData() {\n          return _ref.apply(this, arguments);\n        };\n      }();\n\n      fetchData();\n    }\n  }, [claimCurrentPolicyData]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"\".concat(utils.string.t('claims.title'), \" - \").concat(utils.app.getAppName(brand))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ClaimsView, {\n      handleClaimsProcessing: handleClaimsProcessing,\n      handleComplexityRulesManagement: handleComplexityRulesManagement,\n      handleCreateClaim: handleCreateClaim,\n      handleRegisterNewLoss: handleRegisterNewLoss,\n      handleRegisterNewLossModal: handleRegisterNewLossModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Claims, \"Sb4R5Yxqj0Uk/gxJujDlD4OTQT4=\", false, function () {\n  return [useDispatch, useHistory, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Claims;\n\nvar _c;\n\n$RefreshReg$(_c, \"Claims\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/pages/Claims/Claims.js"],"names":["React","useEffect","useSelector","useDispatch","useHistory","Helmet","ClaimsView","postClaimDetailsInformationSuccess","getLossInformation","getClaimsPreviewInformation","selectCatCodes","selectLossQualifiers","selectPriorities","selectSettlementCurrency","selectReferralResponse","selectClaimData","setClaimData","claimsPolicyData","getPolicyInformation","getClaimantNames","getInterest","getBEAdjuster","getLossQualifiers","getCatCodes","getPriorityLevels","getSettlementCurrency","selectClaimsPolicyData","getClaimDetailsSuccess","resetClaimData","setClaimsStepperControl","getComplexityValues","getReferralValues","getReferralResponse","showModal","utils","config","Claims","dispatch","history","brand","state","ui","claimData","claimCurrentPolicyData","catCodes","priorities","lossQualifiers","settlementCurrency","referralResponse","handleRegisterNewLoss","push","routes","claimsFNOL","newLoss","handleComplexityRulesManagement","complexityRules","handleClaimsProcessing","claimsProcessing","root","handleCreateClaim","data","lossDetailID","sourceID","handleRegisterNewLossModal","component","props","title","string","t","fullWidth","maxWidth","disableAutoFocus","disable","componentProps","claimId","generic","isInvalidOrEmptyArray","lossId","xbInstanceID","xbPolicyID","policyNumber","divisionID","fetchData","claimReference","claimDetails","app","getAppName"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport { Helmet } from 'react-helmet';\r\n\r\n// app\r\nimport { ClaimsView } from './Claims.view';\r\nimport {\r\n  postClaimDetailsInformationSuccess,\r\n  getLossInformation,\r\n  getClaimsPreviewInformation,\r\n  selectCatCodes,\r\n  selectLossQualifiers,\r\n  selectPriorities,\r\n  selectSettlementCurrency,\r\n  selectReferralResponse,\r\n  selectClaimData,\r\n  setClaimData,\r\n  claimsPolicyData,\r\n  getPolicyInformation,\r\n  getClaimantNames,\r\n  getInterest,\r\n  getBEAdjuster,\r\n  getLossQualifiers,\r\n  getCatCodes,\r\n  getPriorityLevels,\r\n  getSettlementCurrency,\r\n  selectClaimsPolicyData,\r\n  getClaimDetailsSuccess,\r\n  resetClaimData,\r\n  setClaimsStepperControl,\r\n  getComplexityValues,\r\n  getReferralValues,\r\n  getReferralResponse,\r\n  showModal\r\n} from 'stores';\r\nimport * as utils from 'utils';\r\nimport config from 'config';\r\n\r\nexport default function Claims() {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const brand = useSelector((state) => state.ui.brand);\r\n  const claimData = useSelector(selectClaimData);\r\n  const claimCurrentPolicyData = useSelector(selectClaimsPolicyData);\r\n  const catCodes = useSelector(selectCatCodes);\r\n  const priorities = useSelector(selectPriorities);\r\n  const lossQualifiers = useSelector(selectLossQualifiers);\r\n  const settlementCurrency = useSelector(selectSettlementCurrency);\r\n  const referralResponse = useSelector(selectReferralResponse);\r\n\r\n  const handleRegisterNewLoss = () => {\r\n    history.push(config.routes.claimsFNOL.newLoss);\r\n    dispatch(setClaimData({}));\r\n    dispatch(resetClaimData());\r\n  };\r\n\r\n  const handleComplexityRulesManagement = () => {\r\n    history.push(config.routes.claimsFNOL.complexityRules);\r\n  };\r\n\r\n  const handleClaimsProcessing = () => {\r\n    history.push(config.routes.claimsProcessing.root);\r\n  };\r\n\r\n  const handleCreateClaim = (data) => {\r\n    dispatch(setClaimsStepperControl(1));\r\n    dispatch(getLossInformation(data.lossDetailID, data.sourceID));\r\n    history.push(config.routes.claimsFNOL.newLoss);\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(setClaimData({}));\r\n    dispatch(setClaimsStepperControl(0));\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const handleRegisterNewLossModal = () => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CLAIM_REGISTER_NEW_LOSS',\r\n        props: {\r\n          title: utils.string.t('Loss and Claim Registration'),\r\n          fullWidth: true,\r\n          maxWidth: 'xl',\r\n          disableAutoFocus: true,\r\n          disable: false,\r\n          componentProps: {\r\n          },\r\n        },\r\n      })\r\n    );\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (claimData?.claimId) {\r\n      if (utils.generic.isInvalidOrEmptyArray(catCodes)) {\r\n        dispatch(getCatCodes());\r\n      }\r\n      if (utils.generic.isInvalidOrEmptyArray(priorities)) {\r\n        dispatch(getPriorityLevels());\r\n      }\r\n      if (utils.generic.isInvalidOrEmptyArray(lossQualifiers)) {\r\n        dispatch(getLossQualifiers());\r\n      }\r\n      if (utils.generic.isInvalidOrEmptyArray(settlementCurrency)) {\r\n        dispatch(getSettlementCurrency());\r\n      }\r\n      if (utils.generic.isInvalidOrEmptyArray(referralResponse)) {\r\n        dispatch(getReferralResponse());\r\n      }\r\n      dispatch(getLossInformation(claimData.lossId, claimData.sourceID));\r\n      dispatch(\r\n        claimsPolicyData({\r\n          xbInstanceID: claimData.xbInstanceID,\r\n          xbPolicyID: claimData.xbPolicyID,\r\n          policyNumber: claimData.policyNumber,\r\n          divisionID: claimData.divisionID,\r\n        })\r\n      );\r\n    }\r\n  }, [claimData]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    if (claimData?.claimId && claimCurrentPolicyData?.xbInstanceID) {\r\n      async function fetchData() {\r\n        dispatch(getPolicyInformation());\r\n        dispatch(getInterest());\r\n        dispatch(getBEAdjuster());\r\n        dispatch(getClaimantNames());\r\n\r\n        dispatch(postClaimDetailsInformationSuccess(claimData.claimId));\r\n        const claimDetails = await dispatch(\r\n          getClaimsPreviewInformation(claimData?.claimId, claimData?.claimReference, claimData?.sourceID, claimData?.divisionID)\r\n        );\r\n        dispatch(getClaimDetailsSuccess(claimDetails));\r\n        dispatch(getComplexityValues());\r\n        dispatch(getReferralValues());\r\n      }\r\n      fetchData();\r\n    }\r\n  }, [claimCurrentPolicyData]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>{`${utils.string.t('claims.title')} - ${utils.app.getAppName(brand)}`}</title>\r\n      </Helmet>\r\n      <ClaimsView\r\n        handleClaimsProcessing={handleClaimsProcessing}\r\n        handleComplexityRulesManagement={handleComplexityRulesManagement}\r\n        handleCreateClaim={handleCreateClaim}\r\n        handleRegisterNewLoss={handleRegisterNewLoss}\r\n        handleRegisterNewLossModal={handleRegisterNewLossModal}\r\n      />\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}