{"ast":null,"code":"import moment from 'moment';\nvar utilsDate = {\n  toISOString: function toISOString(date) {\n    return moment(date).toISOString();\n  },\n  formatDate: function formatDate() {\n    var format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'YYYY-MM-DD';\n    return moment().format(format);\n  },\n  formatISO: function formatISO(date) {\n    // input:   dd/mm/yyyy hh:mm:ss  (date format from API endpoints)\n    // output:  yyyy-mm-dd hh:mm:ss  (moment expects ISO 8601 date format)\n    // this method transforms the dates so that JS/moment can handle them\n    // quit if date is not defined\n    if (!date || date.length <= 0) return date;\n    var partDate = date.toString().split(/[\\sT]+/)[0];\n    var partTime = date.toString().split(/[\\sT]+/)[1]; // quit if date part doesn't have day, month and year\n\n    if (partDate.split('/').length < 3) return date;\n    var partDay = partDate.split('/')[0];\n    var partMonth = partDate.split('/')[1];\n    var partYear = partDate.split('/')[2];\n    return partYear + '-' + partMonth + '-' + partDay + (partTime ? ' ' + partTime : '');\n  },\n  fromNow: function fromNow(date, translations) {\n    var fromNow = moment(date).fromNow(); // TODO added on 13/11/2019: add default translations\n\n    return moment(date).calendar(null, {\n      sameDay: function sameDay() {\n        return \"[\".concat(fromNow, \"]\");\n      },\n      lastWeek: function lastWeek() {\n        return \"[\".concat(fromNow, \"]\");\n      },\n      lastDay: \"[\".concat(translations.yesterday || 'Yesterday', \"]\"),\n      nextDay: \"[\".concat(translations.tomorrow || 'Tomorrow', \"]\"),\n      nextWeek: function nextWeek() {\n        return \"[\".concat(fromNow, \"]\");\n      },\n      sameElse: function sameElse() {\n        return \"[\".concat(fromNow, \"]\");\n      }\n    });\n  },\n  timestamp: function timestamp(date) {\n    // abort\n    if (!date || date.length <= 0) return 0;\n    var newDate = date && new Date(date);\n    var timestamp = newDate && newDate.getTime();\n    return timestamp || 0;\n  },\n  today: function today() {\n    var format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'YYYY-MM-DD';\n    return moment().format(format);\n  },\n  tomorrow: function tomorrow() {\n    return moment().add(1, 'days');\n  },\n  monthDetails: function monthDetails(date) {\n    var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'YYYY-MM-DD';\n    return {\n      monthName: moment(date).format('MMMM'),\n      month: moment(date).format('M'),\n      year: moment(date).format('YYYY'),\n      date: moment(date).format(format)\n    };\n  },\n  previousMonth: function previousMonth(date) {\n    var startLastMonth = moment(date).subtract(1, 'months').startOf('month');\n    return utilsDate.monthDetails(startLastMonth);\n  },\n  nextMonth: function nextMonth(date) {\n    var startNextMonth = moment(date).add(1, 'months').startOf('month');\n    return utilsDate.monthDetails(startNextMonth);\n  },\n  diffDays: function diffDays(firstDate, secondDate) {\n    return moment(firstDate).diff(moment(secondDate), 'days');\n  },\n  datePercent: function datePercent(startDate, endDate, currentDate) {\n    var mStart = moment(startDate);\n    var mEnd = moment(endDate);\n    var mData = moment(currentDate);\n    var percentile = 100.0 * mData.diff(mStart) / mEnd.diff(mStart);\n    return percentile;\n  }\n};\nexport default utilsDate;","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/utils/date/date.js"],"names":["moment","utilsDate","toISOString","date","formatDate","format","formatISO","length","partDate","toString","split","partTime","partDay","partMonth","partYear","fromNow","translations","calendar","sameDay","lastWeek","lastDay","yesterday","nextDay","tomorrow","nextWeek","sameElse","timestamp","newDate","Date","getTime","today","add","monthDetails","monthName","month","year","previousMonth","startLastMonth","subtract","startOf","nextMonth","startNextMonth","diffDays","firstDate","secondDate","diff","datePercent","startDate","endDate","currentDate","mStart","mEnd","mData","percentile"],"mappings":"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","sourcesContent":["import moment from 'moment';\r\n\r\nconst utilsDate = {\r\n  toISOString: (date) => {\r\n    return moment(date).toISOString();\r\n  },\r\n  formatDate: (format = 'YYYY-MM-DD') => {\r\n    return moment().format(format);\r\n  },\r\n  formatISO: (date) => {\r\n    // input:   dd/mm/yyyy hh:mm:ss  (date format from API endpoints)\r\n    // output:  yyyy-mm-dd hh:mm:ss  (moment expects ISO 8601 date format)\r\n    // this method transforms the dates so that JS/moment can handle them\r\n\r\n    // quit if date is not defined\r\n    if (!date || date.length <= 0) return date;\r\n\r\n    const partDate = date.toString().split(/[\\sT]+/)[0];\r\n    const partTime = date.toString().split(/[\\sT]+/)[1];\r\n\r\n    // quit if date part doesn't have day, month and year\r\n    if (partDate.split('/').length < 3) return date;\r\n\r\n    const partDay = partDate.split('/')[0];\r\n    const partMonth = partDate.split('/')[1];\r\n    const partYear = partDate.split('/')[2];\r\n\r\n    return partYear + '-' + partMonth + '-' + partDay + (partTime ? ' ' + partTime : '');\r\n  },\r\n\r\n  fromNow: (date, translations) => {\r\n    const fromNow = moment(date).fromNow();\r\n\r\n    // TODO added on 13/11/2019: add default translations\r\n\r\n    return moment(date).calendar(null, {\r\n      sameDay: () => `[${fromNow}]`,\r\n      lastWeek: () => `[${fromNow}]`,\r\n      lastDay: `[${translations.yesterday || 'Yesterday'}]`,\r\n      nextDay: `[${translations.tomorrow || 'Tomorrow'}]`,\r\n      nextWeek: () => `[${fromNow}]`,\r\n      sameElse: () => `[${fromNow}]`,\r\n    });\r\n  },\r\n\r\n  timestamp: (date) => {\r\n    // abort\r\n    if (!date || date.length <= 0) return 0;\r\n\r\n    const newDate = date && new Date(date);\r\n    const timestamp = newDate && newDate.getTime();\r\n\r\n    return timestamp || 0;\r\n  },\r\n\r\n  today: (format = 'YYYY-MM-DD') => {\r\n    return moment().format(format);\r\n  },\r\n  tomorrow: () => {\r\n    return moment().add(1, 'days');\r\n  },\r\n  monthDetails: (date, format = 'YYYY-MM-DD') => {\r\n    return {\r\n      monthName: moment(date).format('MMMM'),\r\n      month: moment(date).format('M'),\r\n      year: moment(date).format('YYYY'),\r\n      date: moment(date).format(format),\r\n    };\r\n  },\r\n  previousMonth: (date) => {\r\n    const startLastMonth = moment(date).subtract(1, 'months').startOf('month');\r\n\r\n    return utilsDate.monthDetails(startLastMonth);\r\n  },\r\n  nextMonth: (date) => {\r\n    const startNextMonth = moment(date).add(1, 'months').startOf('month');\r\n\r\n    return utilsDate.monthDetails(startNextMonth);\r\n  },\r\n\r\n  diffDays: (firstDate, secondDate) => {\r\n    return moment(firstDate).diff(moment(secondDate), 'days');\r\n  },\r\n\r\n  datePercent: (startDate, endDate, currentDate) => {\r\n    const mStart = moment(startDate);\r\n    const mEnd = moment(endDate);\r\n    const mData = moment(currentDate);\r\n\r\n    const percentile = (100.0 * mData.diff(mStart)) / mEnd.diff(mStart);\r\n\r\n    return percentile;\r\n  },\r\n};\r\n\r\nexport default utilsDate;\r\n"]},"metadata":{},"sourceType":"module"}