{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport moment from 'moment';\nimport get from 'lodash/get'; // app\n\nimport { authLogout, addLoader, removeLoader, enqueueNotification } from 'stores';\nimport * as utils from 'utils';\nexport var getClaimNotes = function getClaimNotes(params) {\n  return function (dispatch, getState) {\n    var _claims$notes, _claims$notes2, _claims$notes2$sort, _claims$notes3, _claims$notes3$sort;\n\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint,\n        claims = _getState.claims;\n\n    var claimId = params.claimId,\n        page = params.page,\n        size = params.size,\n        sortBy = params.sortBy,\n        direction = params.direction,\n        query = params.query,\n        _params$filters = params.filters,\n        filters = _params$filters === void 0 ? {} : _params$filters;\n    var defaultError = {\n      file: 'stores/claims.actions.getClaimNotes'\n    };\n    dispatch(getClaimNotesRequest(params));\n    dispatch(addLoader('getClaimNotes'));\n\n    if (!claimId) {\n      dispatch(getClaimNotesFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Missing claimID param'\n      })));\n      dispatch(enqueueNotification('claims.notes.notifications.getFailure', 'error'));\n      dispatch(removeLoader('getClaimNotes'));\n      return;\n    }\n\n    var prevQuery = get(claims, 'notes.query') || '';\n    var newQuery = params.hasOwnProperty('query') ? query : prevQuery;\n\n    var constructFilters = function constructFilters(filtersObj) {\n      var filteredArray = [];\n\n      for (var key in filtersObj) {\n        var _filtersObj$key;\n\n        var selectedFilterValue = key === 'createdDate' || key === 'updatedDate' ? moment(new Date(filtersObj[key])).format('DD-MM-YYYY') : filtersObj[key];\n\n        if (((_filtersObj$key = filtersObj[key]) === null || _filtersObj$key === void 0 ? void 0 : _filtersObj$key.length) > 0 && typeof filtersObj[key] !== 'string') {\n          filteredArray.push({\n            column: key,\n            filterValue: selectedFilterValue\n          });\n        } else if (typeof filtersObj[key] === 'string' && filtersObj[key] !== '') {\n          filteredArray.push({\n            column: key,\n            filterValue: [{\n              id: 0,\n              name: selectedFilterValue\n            }]\n          });\n        }\n      }\n\n      return filteredArray;\n    };\n\n    var prevFilters = get(claims, 'notes.filters') || [];\n    var newFilters = params.hasOwnProperty('filters') ? constructFilters(filters) : prevFilters;\n    var apiParams = {\n      page: page || 0,\n      pageSize: size || (claims === null || claims === void 0 ? void 0 : (_claims$notes = claims.notes) === null || _claims$notes === void 0 ? void 0 : _claims$notes.pageSize),\n      sortBy: sortBy || (claims === null || claims === void 0 ? void 0 : (_claims$notes2 = claims.notes) === null || _claims$notes2 === void 0 ? void 0 : (_claims$notes2$sort = _claims$notes2.sort) === null || _claims$notes2$sort === void 0 ? void 0 : _claims$notes2$sort.by),\n      direction: (direction || (claims === null || claims === void 0 ? void 0 : (_claims$notes3 = claims.notes) === null || _claims$notes3 === void 0 ? void 0 : (_claims$notes3$sort = _claims$notes3.sort) === null || _claims$notes3$sort === void 0 ? void 0 : _claims$notes3$sort.direction) || '').toUpperCase(),\n      search: newQuery || '',\n      filters: (newFilters === null || newFilters === void 0 ? void 0 : newFilters.length) > 0 ? newFilters : null\n    };\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.bpmService,\n      path: \"case/bpm/claim/note/\".concat(claimId),\n      data: apiParams\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (data) {\n      return utils.api.handleNewData(data);\n    }).then(function (json) {\n      dispatch(getClaimNotesSuccess(json));\n      return json;\n    }).catch(function (err) {\n      dispatch(getClaimNotesFailure(err, defaultError));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      return err;\n    }).finally(function () {\n      dispatch(removeLoader('getClaimNotes'));\n    });\n  };\n};\nexport var getClaimNotesRequest = function getClaimNotesRequest(caseIncidentID) {\n  return {\n    type: 'CLAIM_NOTES_GET_REQUEST',\n    payload: caseIncidentID\n  };\n};\nexport var getClaimNotesSuccess = function getClaimNotesSuccess(json) {\n  var _json$data, _json$data2;\n\n  return {\n    type: 'CLAIM_NOTES_GET_SUCCESS',\n    payload: {\n      items: (_json$data = json.data) === null || _json$data === void 0 ? void 0 : _json$data.searchValue,\n      filters: (_json$data2 = json.data) === null || _json$data2 === void 0 ? void 0 : _json$data2.filterValue,\n      pagination: json.pagination\n    }\n  };\n};\nexport var getClaimNotesFailure = function getClaimNotesFailure(err) {\n  return {\n    type: 'CLAIM_NOTES_GET_FAILURE',\n    payload: err\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.getClaimNotes.js"],"names":["moment","get","authLogout","addLoader","removeLoader","enqueueNotification","utils","getClaimNotes","params","dispatch","getState","auth","user","endpoint","config","vars","claims","claimId","page","size","sortBy","direction","query","filters","defaultError","file","getClaimNotesRequest","getClaimNotesFailure","message","prevQuery","newQuery","hasOwnProperty","constructFilters","filtersObj","filteredArray","key","selectedFilterValue","Date","format","length","push","column","filterValue","id","name","prevFilters","newFilters","apiParams","pageSize","notes","sort","by","toUpperCase","search","api","post","token","accessToken","bpmService","path","data","then","response","handleResponse","handleNewData","json","getClaimNotesSuccess","catch","err","handleUnauthorized","finally","caseIncidentID","type","payload","items","searchValue","pagination"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,GAAP,MAAgB,YAAhB,C,CAEA;;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,YAAhC,EAA8CC,mBAA9C,QAAyE,QAAzE;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,MAAD;AAAA,SAAY,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAAA;;AAC/D;AAD+D,oBAEEA,QAAQ,EAFV;AAAA,QAE/CC,IAF+C,aAEvDC,IAFuD,CAE/CD,IAF+C;AAAA,QAErBE,QAFqB,aAEvCC,MAFuC,CAE7BC,IAF6B,CAErBF,QAFqB;AAAA,QAERG,MAFQ,aAERA,MAFQ;;AAAA,QAGvDC,OAHuD,GAGST,MAHT,CAGvDS,OAHuD;AAAA,QAG9CC,IAH8C,GAGSV,MAHT,CAG9CU,IAH8C;AAAA,QAGxCC,IAHwC,GAGSX,MAHT,CAGxCW,IAHwC;AAAA,QAGlCC,MAHkC,GAGSZ,MAHT,CAGlCY,MAHkC;AAAA,QAG1BC,SAH0B,GAGSb,MAHT,CAG1Ba,SAH0B;AAAA,QAGfC,KAHe,GAGSd,MAHT,CAGfc,KAHe;AAAA,0BAGSd,MAHT,CAGRe,OAHQ;AAAA,QAGRA,OAHQ,gCAGE,EAHF;AAK/D,QAAMC,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE;AADa,KAArB;AAIAhB,IAAAA,QAAQ,CAACiB,oBAAoB,CAAClB,MAAD,CAArB,CAAR;AACAC,IAAAA,QAAQ,CAACN,SAAS,CAAC,eAAD,CAAV,CAAR;;AAEA,QAAI,CAACc,OAAL,EAAc;AACZR,MAAAA,QAAQ,CAACkB,oBAAoB,iCAAMH,YAAN;AAAoBI,QAAAA,OAAO,EAAE;AAA7B,SAArB,CAAR;AACAnB,MAAAA,QAAQ,CAACJ,mBAAmB,CAAC,uCAAD,EAA0C,OAA1C,CAApB,CAAR;AACAI,MAAAA,QAAQ,CAACL,YAAY,CAAC,eAAD,CAAb,CAAR;AACA;AACD;;AAED,QAAMyB,SAAS,GAAG5B,GAAG,CAACe,MAAD,EAAS,aAAT,CAAH,IAA8B,EAAhD;AACA,QAAMc,QAAQ,GAAGtB,MAAM,CAACuB,cAAP,CAAsB,OAAtB,IAAiCT,KAAjC,GAAyCO,SAA1D;;AAEA,QAAMG,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,UAAD,EAAgB;AACvC,UAAMC,aAAa,GAAG,EAAtB;;AACA,WAAK,IAAMC,GAAX,IAAkBF,UAAlB,EAA8B;AAAA;;AAC5B,YAAMG,mBAAmB,GACvBD,GAAG,KAAK,aAAR,IAAyBA,GAAG,KAAK,aAAjC,GAAiDnC,MAAM,CAAC,IAAIqC,IAAJ,CAASJ,UAAU,CAACE,GAAD,CAAnB,CAAD,CAAN,CAAkCG,MAAlC,CAAyC,YAAzC,CAAjD,GAA0GL,UAAU,CAACE,GAAD,CADtH;;AAEA,YAAI,oBAAAF,UAAU,CAACE,GAAD,CAAV,oEAAiBI,MAAjB,IAA0B,CAA1B,IAA+B,OAAON,UAAU,CAACE,GAAD,CAAjB,KAA2B,QAA9D,EAAwE;AACtED,UAAAA,aAAa,CAACM,IAAd,CAAmB;AACjBC,YAAAA,MAAM,EAAEN,GADS;AAEjBO,YAAAA,WAAW,EAAEN;AAFI,WAAnB;AAID,SALD,MAKO,IAAI,OAAOH,UAAU,CAACE,GAAD,CAAjB,KAA2B,QAA3B,IAAuCF,UAAU,CAACE,GAAD,CAAV,KAAoB,EAA/D,EAAmE;AACxED,UAAAA,aAAa,CAACM,IAAd,CAAmB;AACjBC,YAAAA,MAAM,EAAEN,GADS;AAEjBO,YAAAA,WAAW,EAAE,CAAC;AAAEC,cAAAA,EAAE,EAAE,CAAN;AAASC,cAAAA,IAAI,EAAER;AAAf,aAAD;AAFI,WAAnB;AAID;AACF;;AACD,aAAOF,aAAP;AACD,KAlBD;;AAoBA,QAAMW,WAAW,GAAG5C,GAAG,CAACe,MAAD,EAAS,eAAT,CAAH,IAAgC,EAApD;AACA,QAAM8B,UAAU,GAAGtC,MAAM,CAACuB,cAAP,CAAsB,SAAtB,IAAmCC,gBAAgB,CAACT,OAAD,CAAnD,GAA+DsB,WAAlF;AAEA,QAAME,SAAS,GAAG;AAChB7B,MAAAA,IAAI,EAAEA,IAAI,IAAI,CADE;AAEhB8B,MAAAA,QAAQ,EAAE7B,IAAI,KAAIH,MAAJ,aAAIA,MAAJ,wCAAIA,MAAM,CAAEiC,KAAZ,kDAAI,cAAeD,QAAnB,CAFE;AAGhB5B,MAAAA,MAAM,EAAEA,MAAM,KAAIJ,MAAJ,aAAIA,MAAJ,yCAAIA,MAAM,CAAEiC,KAAZ,0EAAI,eAAeC,IAAnB,wDAAI,oBAAqBC,EAAzB,CAHE;AAIhB9B,MAAAA,SAAS,EAAE,CAACA,SAAS,KAAIL,MAAJ,aAAIA,MAAJ,yCAAIA,MAAM,CAAEiC,KAAZ,0EAAI,eAAeC,IAAnB,wDAAI,oBAAqB7B,SAAzB,CAAT,IAA+C,EAAhD,EAAoD+B,WAApD,EAJK;AAKhBC,MAAAA,MAAM,EAAEvB,QAAQ,IAAI,EALJ;AAMhBP,MAAAA,OAAO,EAAE,CAAAuB,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEP,MAAZ,IAAqB,CAArB,GAAyBO,UAAzB,GAAsC;AAN/B,KAAlB;AASA,WAAOxC,KAAK,CAACgD,GAAN,CACJC,IADI,CACC;AACJC,MAAAA,KAAK,EAAE7C,IAAI,CAAC8C,WADR;AAEJ5C,MAAAA,QAAQ,EAAEA,QAAQ,CAAC6C,UAFf;AAGJC,MAAAA,IAAI,gCAAyB1C,OAAzB,CAHA;AAIJ2C,MAAAA,IAAI,EAAEb;AAJF,KADD,EAOJc,IAPI,CAOC,UAACC,QAAD;AAAA,aAAcxD,KAAK,CAACgD,GAAN,CAAUS,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAPD,EAQJD,IARI,CAQC,UAACD,IAAD;AAAA,aAAUtD,KAAK,CAACgD,GAAN,CAAUU,aAAV,CAAwBJ,IAAxB,CAAV;AAAA,KARD,EASJC,IATI,CASC,UAACI,IAAD,EAAU;AACdxD,MAAAA,QAAQ,CAACyD,oBAAoB,CAACD,IAAD,CAArB,CAAR;AACA,aAAOA,IAAP;AACD,KAZI,EAaJE,KAbI,CAaE,UAACC,GAAD,EAAS;AACd3D,MAAAA,QAAQ,CAACkB,oBAAoB,CAACyC,GAAD,EAAM5C,YAAN,CAArB,CAAR;AACAlB,MAAAA,KAAK,CAACgD,GAAN,CAAUe,kBAAV,CAA6BD,GAA7B,EAAkC3D,QAAlC,EAA4CP,UAA5C;AACA,aAAOkE,GAAP;AACD,KAjBI,EAkBJE,OAlBI,CAkBI,YAAM;AACb7D,MAAAA,QAAQ,CAACL,YAAY,CAAC,eAAD,CAAb,CAAR;AACD,KApBI,CAAP;AAqBD,GA3E4B;AAAA,CAAtB;AA6EP,OAAO,IAAMsB,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAC6C,cAAD,EAAoB;AACtD,SAAO;AACLC,IAAAA,IAAI,EAAE,yBADD;AAELC,IAAAA,OAAO,EAAEF;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAML,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACD,IAAD,EAAU;AAAA;;AAC5C,SAAO;AACLO,IAAAA,IAAI,EAAE,yBADD;AAELC,IAAAA,OAAO,EAAE;AACPC,MAAAA,KAAK,gBAAET,IAAI,CAACL,IAAP,+CAAE,WAAWe,WADX;AAEPpD,MAAAA,OAAO,iBAAE0C,IAAI,CAACL,IAAP,gDAAE,YAAWlB,WAFb;AAGPkC,MAAAA,UAAU,EAAEX,IAAI,CAACW;AAHV;AAFJ,GAAP;AAQD,CATM;AAWP,OAAO,IAAMjD,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACyC,GAAD,EAAS;AAC3C,SAAO;AACLI,IAAAA,IAAI,EAAE,yBADD;AAELC,IAAAA,OAAO,EAAEL;AAFJ,GAAP;AAID,CALM","sourcesContent":["import moment from 'moment';\r\nimport get from 'lodash/get';\r\n\r\n// app\r\nimport { authLogout, addLoader, removeLoader, enqueueNotification } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const getClaimNotes = (params) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}, claims} = getState();\r\n  const { claimId, page, size, sortBy, direction, query, filters = {} } = params;\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.getClaimNotes',\r\n  };\r\n\r\n  dispatch(getClaimNotesRequest(params));\r\n  dispatch(addLoader('getClaimNotes'));\r\n\r\n  if (!claimId) {\r\n    dispatch(getClaimNotesFailure({ ...defaultError, message: 'Missing claimID param' }));\r\n    dispatch(enqueueNotification('claims.notes.notifications.getFailure', 'error'));\r\n    dispatch(removeLoader('getClaimNotes'));\r\n    return;\r\n  }\r\n\r\n  const prevQuery = get(claims, 'notes.query') || '';\r\n  const newQuery = params.hasOwnProperty('query') ? query : prevQuery;\r\n\r\n  const constructFilters = (filtersObj) => {\r\n    const filteredArray = [];\r\n    for (const key in filtersObj) {\r\n      const selectedFilterValue =\r\n        key === 'createdDate' || key === 'updatedDate' ? moment(new Date(filtersObj[key])).format('DD-MM-YYYY') : filtersObj[key];\r\n      if (filtersObj[key]?.length > 0 && typeof filtersObj[key] !== 'string') {\r\n        filteredArray.push({\r\n          column: key,\r\n          filterValue: selectedFilterValue,\r\n        });\r\n      } else if (typeof filtersObj[key] === 'string' && filtersObj[key] !== '') {\r\n        filteredArray.push({\r\n          column: key,\r\n          filterValue: [{ id: 0, name: selectedFilterValue }],\r\n        });\r\n      }\r\n    }\r\n    return filteredArray;\r\n  };\r\n\r\n  const prevFilters = get(claims, 'notes.filters') || [];\r\n  const newFilters = params.hasOwnProperty('filters') ? constructFilters(filters) : prevFilters;\r\n\r\n  const apiParams = {\r\n    page: page || 0,\r\n    pageSize: size || claims?.notes?.pageSize,\r\n    sortBy: sortBy || claims?.notes?.sort?.by,\r\n    direction: (direction || claims?.notes?.sort?.direction || '').toUpperCase(),\r\n    search: newQuery || '',\r\n    filters: newFilters?.length > 0 ? newFilters : null,\r\n  };\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.bpmService,\r\n      path: `case/bpm/claim/note/${claimId}`,\r\n      data: apiParams,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((data) => utils.api.handleNewData(data))\r\n    .then((json) => {\r\n      dispatch(getClaimNotesSuccess(json));\r\n      return json;\r\n    })\r\n    .catch((err) => {\r\n      dispatch(getClaimNotesFailure(err, defaultError));\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('getClaimNotes'));\r\n    });\r\n};\r\n\r\nexport const getClaimNotesRequest = (caseIncidentID) => {\r\n  return {\r\n    type: 'CLAIM_NOTES_GET_REQUEST',\r\n    payload: caseIncidentID,\r\n  };\r\n};\r\n\r\nexport const getClaimNotesSuccess = (json) => {\r\n  return {\r\n    type: 'CLAIM_NOTES_GET_SUCCESS',\r\n    payload: {\r\n      items: json.data?.searchValue,\r\n      filters: json.data?.filterValue,\r\n      pagination: json.pagination,\r\n    },\r\n  };\r\n};\r\n\r\nexport const getClaimNotesFailure = (err) => {\r\n  return {\r\n    type: 'CLAIM_NOTES_GET_FAILURE',\r\n    payload: err,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}