{"ast":null,"code":"import get from 'lodash/get';\nimport { addLoader, removeLoader, enqueueNotification, getComplexityReferralValues, authLogout } from 'stores';\nimport * as utils from 'utils';\nexport var postComplexityDivisionMatrixByReferralId = function postComplexityDivisionMatrixByReferralId(updatedMatrixData) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint,\n        claims = _getState.claims;\n\n    var defaultError = {\n      file: 'stores/claims.actions.postComplexityDivisionMatrixByReferralId'\n    };\n    var complexRuleValueObj = get(claims, 'complexityManagement.complexityReferralValueId');\n    var complexRuleValueId = complexRuleValueObj.complexityRulesID;\n    var complexityRuleValue = complexRuleValueObj.complexityRulesValue;\n    var payload = {\n      complexDivisions: utils.generic.isValidArray(updatedMatrixData) ? updatedMatrixData : [],\n      referralRuleValue: complexityRuleValue || ''\n    };\n    dispatch(postComplexityDivisionMatrixByReferralIdRequest(updatedMatrixData));\n    dispatch(addLoader('postComplexityDivisionMatrixByReferralId'));\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.claimService,\n      path: \"api/data/claims-triage/complex/referral-values/\".concat(complexRuleValueId, \"/division-matrix\"),\n      data: payload\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json, true);\n    }).then(function (data) {\n      dispatch(enqueueNotification('notification.complexityReferralDivision.success', 'success'));\n      dispatch(getComplexityReferralValues());\n      return data;\n    }).catch(function (err) {\n      dispatch(postComplexityDivisionMatrixByReferralIdFailure(err, defaultError));\n      dispatch(enqueueNotification('notification.complexityReferralDivision.fail', 'error'));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      return err;\n    }).finally(function () {\n      dispatch(removeLoader('postComplexityDivisionMatrixByReferralId'));\n    });\n  };\n};\nexport var postComplexityDivisionMatrixByReferralIdRequest = function postComplexityDivisionMatrixByReferralIdRequest(updatedMatrixData) {\n  return {\n    type: 'CLAIMS_COMPLEXITY_DIVISION_BY_REFERRAL_ID_SAVE_REQUEST',\n    payload: updatedMatrixData\n  };\n};\nexport var postComplexityDivisionMatrixByReferralIdFailure = function postComplexityDivisionMatrixByReferralIdFailure(err) {\n  return {\n    type: 'CLAIMS_COMPLEXITY_DIVISION_BY_REFERRAL_ID_SAVE_FAILURE',\n    payload: err\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.postComplexityDivisionMatrixByReferralId.js"],"names":["get","addLoader","removeLoader","enqueueNotification","getComplexityReferralValues","authLogout","utils","postComplexityDivisionMatrixByReferralId","updatedMatrixData","dispatch","getState","auth","user","endpoint","config","vars","claims","defaultError","file","complexRuleValueObj","complexRuleValueId","complexityRulesID","complexityRuleValue","complexityRulesValue","payload","complexDivisions","generic","isValidArray","referralRuleValue","postComplexityDivisionMatrixByReferralIdRequest","api","post","token","accessToken","claimService","path","data","then","response","handleResponse","json","handleNewData","catch","err","postComplexityDivisionMatrixByReferralIdFailure","handleUnauthorized","finally","type"],"mappings":"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","sourcesContent":["import get from 'lodash/get';\r\n\r\nimport { addLoader, removeLoader, enqueueNotification, getComplexityReferralValues, authLogout } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const postComplexityDivisionMatrixByReferralId = (updatedMatrixData) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } }, claims } = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.postComplexityDivisionMatrixByReferralId',\r\n  };\r\n\r\n  const complexRuleValueObj = get(claims, 'complexityManagement.complexityReferralValueId');\r\n  const complexRuleValueId = complexRuleValueObj.complexityRulesID;\r\n  const complexityRuleValue = complexRuleValueObj.complexityRulesValue;\r\n\r\n  const payload = {\r\n    complexDivisions: utils.generic.isValidArray(updatedMatrixData) ? updatedMatrixData : [],\r\n    referralRuleValue: complexityRuleValue || '',\r\n  };\r\n\r\n  dispatch(postComplexityDivisionMatrixByReferralIdRequest(updatedMatrixData));\r\n  dispatch(addLoader('postComplexityDivisionMatrixByReferralId'));\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.claimService,\r\n      path: `api/data/claims-triage/complex/referral-values/${complexRuleValueId}/division-matrix`,\r\n      data: payload,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json, true))\r\n    .then((data) => {\r\n      dispatch(enqueueNotification('notification.complexityReferralDivision.success', 'success'));\r\n      dispatch(getComplexityReferralValues());\r\n      return data;\r\n    })\r\n    .catch((err) => {\r\n      dispatch(postComplexityDivisionMatrixByReferralIdFailure(err, defaultError));\r\n      dispatch(enqueueNotification('notification.complexityReferralDivision.fail', 'error'));\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('postComplexityDivisionMatrixByReferralId'));\r\n    });\r\n};\r\n\r\nexport const postComplexityDivisionMatrixByReferralIdRequest = (updatedMatrixData) => {\r\n  return {\r\n    type: 'CLAIMS_COMPLEXITY_DIVISION_BY_REFERRAL_ID_SAVE_REQUEST',\r\n    payload: updatedMatrixData,\r\n  };\r\n};\r\n\r\nexport const postComplexityDivisionMatrixByReferralIdFailure = (err) => {\r\n  return {\r\n    type: 'CLAIMS_COMPLEXITY_DIVISION_BY_REFERRAL_ID_SAVE_FAILURE',\r\n    payload: err,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}