{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as utils from 'utils';\nimport { authLogout, addLoader, removeLoader } from 'stores';\nexport var getSancCheckAssociatedTask = function getSancCheckAssociatedTask(taskId) {\n  return function (dispatch, getState) {\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/claims.actions.getSancCheckAssociatedTask'\n    };\n    dispatch(getAssociatedTaskRequest());\n    dispatch(addLoader('getAssociatedTask'));\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.bpmService,\n      path: \"workflow/task/\".concat(taskId)\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(getAssociatedTaskRequestSuccess(data.data));\n      dispatch(removeLoader('getAssociatedTask'));\n      return data.data;\n    })[\"catch\"](function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API post error'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(getAssociatedTaskRequestFailure(err));\n      dispatch(removeLoader('getAssociatedTask'));\n      return err;\n    });\n  };\n};\nexport var getAssociatedTaskRequest = function getAssociatedTaskRequest(params) {\n  return {\n    type: 'GET_ASSOCIATED_TASK_REQUEST',\n    payload: params\n  };\n};\nexport var getAssociatedTaskRequestSuccess = function getAssociatedTaskRequestSuccess(data) {\n  return {\n    type: 'GET_ASSOCIATED_TASK_SUCCESS',\n    payload: data\n  };\n};\nexport var getAssociatedTaskRequestFailure = function getAssociatedTaskRequestFailure(error) {\n  return {\n    type: 'GET_ASSOCIATED_TASK_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.getSancCheckAssociatedTask.js"],"names":["utils","authLogout","addLoader","removeLoader","getSancCheckAssociatedTask","taskId","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","getAssociatedTaskRequest","api","get","token","accessToken","bpmService","path","then","response","handleResponse","json","handleNewData","data","getAssociatedTaskRequestSuccess","err","errorParams","message","handleError","handleUnauthorized","getAssociatedTaskRequestFailure","params","type","payload","error"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,YAAhC,QAAoD,QAApD;AAEA,OAAO,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACC,MAAD;AAAA,SAAY,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAAA,oBAMxEA,QAAQ,EANgE;AAAA,QAElEC,IAFkE,aAE1EC,IAF0E,CAElED,IAFkE;AAAA,QAIhEE,QAJgE,aAG1EC,MAH0E,CAIxEC,IAJwE,CAIhEF,QAJgE;;AAO5E,QAAMG,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE;AADa,KAArB;AAIAR,IAAAA,QAAQ,CAACS,wBAAwB,EAAzB,CAAR;AACAT,IAAAA,QAAQ,CAACJ,SAAS,CAAC,mBAAD,CAAV,CAAR;AAEA,WAAOF,KAAK,CAACgB,GAAN,CACJC,GADI,CACA;AACHC,MAAAA,KAAK,EAAEV,IAAI,CAACW,WADT;AAEHT,MAAAA,QAAQ,EAAEA,QAAQ,CAACU,UAFhB;AAGHC,MAAAA,IAAI,0BAAmBhB,MAAnB;AAHD,KADA,EAMJiB,IANI,CAMC,UAACC,QAAD;AAAA,aAAcvB,KAAK,CAACgB,GAAN,CAAUQ,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAND,EAOJD,IAPI,CAOC,UAACG,IAAD;AAAA,aAAUzB,KAAK,CAACgB,GAAN,CAAUU,aAAV,CAAwBD,IAAxB,CAAV;AAAA,KAPD,EAQJH,IARI,CAQC,UAACK,IAAD,EAAU;AACdrB,MAAAA,QAAQ,CAACsB,+BAA+B,CAACD,IAAI,CAACA,IAAN,CAAhC,CAAR;AACArB,MAAAA,QAAQ,CAACH,YAAY,CAAC,mBAAD,CAAb,CAAR;AACA,aAAOwB,IAAI,CAACA,IAAZ;AACD,KAZI,WAaE,UAACE,GAAD,EAAS;AACd,UAAMC,WAAW,mCACZjB,YADY;AAEfkB,QAAAA,OAAO,EAAE;AAFM,QAAjB;;AAKA/B,MAAAA,KAAK,CAACgB,GAAN,CAAUgB,WAAV,CAAsBH,GAAtB,EAA2BC,WAA3B;AACA9B,MAAAA,KAAK,CAACgB,GAAN,CAAUiB,kBAAV,CAA6BJ,GAA7B,EAAkCvB,QAAlC,EAA4CL,UAA5C;AACAK,MAAAA,QAAQ,CAAC4B,+BAA+B,CAACL,GAAD,CAAhC,CAAR;AACAvB,MAAAA,QAAQ,CAACH,YAAY,CAAC,mBAAD,CAAb,CAAR;AACA,aAAO0B,GAAP;AACD,KAxBI,CAAP;AAyBD,GAvCyC;AAAA,CAAnC;AAyCP,OAAO,IAAMd,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACoB,MAAD,EAAY;AAClD,SAAO;AACLC,IAAAA,IAAI,EAAE,6BADD;AAELC,IAAAA,OAAO,EAAEF;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMP,+BAA+B,GAAG,SAAlCA,+BAAkC,CAACD,IAAD,EAAU;AACvD,SAAO;AACLS,IAAAA,IAAI,EAAE,6BADD;AAELC,IAAAA,OAAO,EAAEV;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMO,+BAA+B,GAAG,SAAlCA,+BAAkC,CAACI,KAAD,EAAW;AACxD,SAAO;AACLF,IAAAA,IAAI,EAAE,6BADD;AAELC,IAAAA,OAAO,EAAEC;AAFJ,GAAP;AAID,CALM","sourcesContent":["import * as utils from 'utils';\r\nimport { authLogout, addLoader, removeLoader } from 'stores';\r\n\r\nexport const getSancCheckAssociatedTask = (taskId) => (dispatch, getState) => {\r\n  const {\r\n    user: { auth },\r\n    config: {\r\n      vars: { endpoint },\r\n    },\r\n  } = getState();\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.getSancCheckAssociatedTask',\r\n  };\r\n\r\n  dispatch(getAssociatedTaskRequest());\r\n  dispatch(addLoader('getAssociatedTask'));\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.bpmService,\r\n      path: `workflow/task/${taskId}`,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(getAssociatedTaskRequestSuccess(data.data));\r\n      dispatch(removeLoader('getAssociatedTask'));\r\n      return data.data;\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        ...defaultError,\r\n        message: 'API post error',\r\n      };\r\n\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(getAssociatedTaskRequestFailure(err));\r\n      dispatch(removeLoader('getAssociatedTask'));\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const getAssociatedTaskRequest = (params) => {\r\n  return {\r\n    type: 'GET_ASSOCIATED_TASK_REQUEST',\r\n    payload: params,\r\n  };\r\n};\r\n\r\nexport const getAssociatedTaskRequestSuccess = (data) => {\r\n  return {\r\n    type: 'GET_ASSOCIATED_TASK_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const getAssociatedTaskRequestFailure = (error) => {\r\n  return {\r\n    type: 'GET_ASSOCIATED_TASK_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}