{"ast":null,"code":"import isString from 'lodash/isString'; // app\n\nimport { FILE_EXTENSION, DMS_DOC_VIEW_FORMATS } from 'consts';\nimport * as utils from 'utils';\nvar utilsFile = {\n  download: function download(blob, filename) {\n    if (!blob || !filename) return;\n    var url = window.URL.createObjectURL(blob);\n    var link = window.document.createElement('a');\n    link.href = url;\n    link.download = filename;\n    window.document.body.appendChild(link);\n    link.click();\n    link.parentNode.removeChild(link);\n  },\n  viewDoc: function viewDoc(blob, filename) {\n    if (!blob) {\n      var _ext = utilsFile.getFileExtensionFromFilename(filename).toLowerCase();\n\n      return {\n        url: '',\n        ext: _ext,\n        mimeType: utilsFile.getFileMimeTypefromFileExtension(_ext)\n      };\n    }\n\n    if (!filename) return {\n      url: '',\n      ext: '',\n      mimeType: ''\n    };\n    var ext = utilsFile.getFileExtensionFromFilename(filename).toLowerCase();\n    var mimeType = utilsFile.getFileMimeTypefromFileExtension(ext);\n    var blobdata = new Blob([blob], {\n      type: mimeType === null || mimeType === void 0 ? void 0 : mimeType.type\n    });\n    return {\n      url: (mimeType === null || mimeType === void 0 ? void 0 : mimeType.type) ? URL.createObjectURL(blobdata) : '',\n      ext: ext,\n      mimeType: mimeType\n    };\n  },\n  getFilenameFromHeadersBlob: function getFilenameFromHeadersBlob(headers, blob, defaultName) {\n    var fallbackExtension = utilsFile.getFileExtensionFromBlobType(blob);\n    var fallbackFilename = defaultName && isString(defaultName) && fallbackExtension ? \"\".concat(defaultName, \".\").concat(fallbackExtension) : undefined;\n\n    if (headers && utils.generic.isFunction(headers.get)) {\n      var contentDisposition = headers.get('Content-Disposition') || '';\n      var filenameParts = contentDisposition.split('filename=');\n      var filenameStringParts = filenameParts && filenameParts[1] ? filenameParts[1].split(';') : '';\n      var filename = filenameStringParts && filenameStringParts[0];\n      return filename || fallbackFilename;\n    }\n\n    return fallbackFilename;\n  },\n  getFileExtensionFromBlobType: function getFileExtensionFromBlobType(blob) {\n    if (!blob || !blob.type) return;\n    return FILE_EXTENSION[blob.type];\n  },\n  truncate: function truncate(n, len) {\n    var ext = n.lastIndexOf('.') > -1 ? n.substring(n.lastIndexOf('.') - 2, n.length).toLowerCase() : '';\n    var filename = n.replace('.' + ext, '');\n\n    if (filename.length <= len) {\n      return n;\n    }\n\n    filename = filename.substr(0, len) + (n.length > len ? '..' : '');\n    return filename + '.' + ext;\n  },\n  getFileExtensionFromFilename: function getFileExtensionFromFilename(filename) {\n    if (!filename || typeof filename !== 'string' || !filename.includes('.')) return '';\n    return filename.split('.').pop();\n  },\n  getFilenameWithoutExtensionFromFilename: function getFilenameWithoutExtensionFromFilename(filename) {\n    if (!filename || typeof filename !== 'string') return '';\n    return filename.replace(/\\.[^/.]+$/, '');\n  },\n  getFileMimeTypefromFileExtension: function getFileMimeTypefromFileExtension(fileExtentsion) {\n    return utils.generic.isValidObject(DMS_DOC_VIEW_FORMATS, fileExtentsion) ? DMS_DOC_VIEW_FORMATS[fileExtentsion] : {};\n  }\n};\nexport default utilsFile;","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/utils/file/file.js"],"names":["isString","FILE_EXTENSION","DMS_DOC_VIEW_FORMATS","utils","utilsFile","download","blob","filename","url","window","URL","createObjectURL","link","document","createElement","href","body","appendChild","click","parentNode","removeChild","viewDoc","ext","getFileExtensionFromFilename","toLowerCase","mimeType","getFileMimeTypefromFileExtension","blobdata","Blob","type","getFilenameFromHeadersBlob","headers","defaultName","fallbackExtension","getFileExtensionFromBlobType","fallbackFilename","undefined","generic","isFunction","get","contentDisposition","filenameParts","split","filenameStringParts","truncate","n","len","lastIndexOf","substring","length","replace","substr","includes","pop","getFilenameWithoutExtensionFromFilename","fileExtentsion","isValidObject"],"mappings":"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","sourcesContent":["import isString from 'lodash/isString';\r\n\r\n// app\r\nimport { FILE_EXTENSION, DMS_DOC_VIEW_FORMATS } from 'consts';\r\nimport * as utils from 'utils';\r\n\r\nconst utilsFile = {\r\n  download: (blob, filename) => {\r\n    if (!blob || !filename) return;\r\n\r\n    const url = window.URL.createObjectURL(blob);\r\n    const link = window.document.createElement('a');\r\n\r\n    link.href = url;\r\n    link.download = filename;\r\n    window.document.body.appendChild(link);\r\n    link.click();\r\n    link.parentNode.removeChild(link);\r\n  },\r\n\r\n  viewDoc: (blob, filename) => {\r\n    if (!blob) {\r\n      const ext = utilsFile.getFileExtensionFromFilename(filename).toLowerCase();\r\n      return { url: '', ext, mimeType: utilsFile.getFileMimeTypefromFileExtension(ext) };\r\n    }\r\n    if (!filename) return { url: '', ext: '', mimeType: '' };\r\n\r\n    const ext = utilsFile.getFileExtensionFromFilename(filename).toLowerCase();\r\n    const mimeType = utilsFile.getFileMimeTypefromFileExtension(ext);\r\n    const blobdata = new Blob([blob], { type: mimeType?.type });\r\n    return { url: mimeType?.type ? URL.createObjectURL(blobdata) : '', ext, mimeType };\r\n  },\r\n\r\n  getFilenameFromHeadersBlob: (headers, blob, defaultName) => {\r\n    const fallbackExtension = utilsFile.getFileExtensionFromBlobType(blob);\r\n    const fallbackFilename = defaultName && isString(defaultName) && fallbackExtension ? `${defaultName}.${fallbackExtension}` : undefined;\r\n\r\n    if (headers && utils.generic.isFunction(headers.get)) {\r\n      const contentDisposition = headers.get('Content-Disposition') || '';\r\n      const filenameParts = contentDisposition.split('filename=');\r\n      const filenameStringParts = filenameParts && filenameParts[1] ? filenameParts[1].split(';') : '';\r\n      const filename = filenameStringParts && filenameStringParts[0];\r\n\r\n      return filename || fallbackFilename;\r\n    }\r\n\r\n    return fallbackFilename;\r\n  },\r\n\r\n  getFileExtensionFromBlobType: (blob) => {\r\n    if (!blob || !blob.type) return;\r\n\r\n    return FILE_EXTENSION[blob.type];\r\n  },\r\n\r\n  truncate: (n, len) => {\r\n    const ext = n.lastIndexOf('.') > -1 ? n.substring(n.lastIndexOf('.') - 2, n.length).toLowerCase() : '';\r\n    let filename = n.replace('.' + ext, '');\r\n    if (filename.length <= len) {\r\n      return n;\r\n    }\r\n    filename = filename.substr(0, len) + (n.length > len ? '..' : '');\r\n    return filename + '.' + ext;\r\n  },\r\n  getFileExtensionFromFilename: (filename) => {\r\n    if (!filename || typeof filename !== 'string' || !filename.includes('.')) return '';\r\n\r\n    return filename.split('.').pop();\r\n  },\r\n\r\n  getFilenameWithoutExtensionFromFilename: (filename) => {\r\n    if (!filename || typeof filename !== 'string') return '';\r\n\r\n    return filename.replace(/\\.[^/.]+$/, '');\r\n  },\r\n\r\n  getFileMimeTypefromFileExtension: (fileExtentsion) => {\r\n    return utils.generic.isValidObject(DMS_DOC_VIEW_FORMATS, fileExtentsion) ? DMS_DOC_VIEW_FORMATS[fileExtentsion] : {};\r\n  },\r\n};\r\n\r\nexport default utilsFile;\r\n"]},"metadata":{},"sourceType":"module"}