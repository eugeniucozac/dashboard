{"ast":null,"code":"import moment from 'moment';\nimport isEmpty from 'lodash/isEmpty'; // app\n\nimport config from 'config';\nimport * as utils from 'utils';\nimport * as constants from 'consts';\nvar utilsProcessingInstructions = {\n  getRetainedBrokerageValue: function getRetainedBrokerageValue(grossPremium, slipOrder, totalRetainedBrokerage) {\n    var total = Number(utils.string.stripNonNumeric(grossPremium || 0)) * Number(utils.string.stripNonNumeric(slipOrder || 0) / 100) * Number(utils.string.stripNonNumeric(totalRetainedBrokerage || 0) / 100);\n    return parseInt(total * 100) / 100;\n  },\n  getRetainedBrokerageCurrencies: function getRetainedBrokerageCurrencies() {\n    var currentYear = utils.date.today('YYYY');\n    var originalBrokerage = config.processingInstructions.originalBrokerage[currentYear]; // try to get previous year if current year is not yet available\n\n    if (!originalBrokerage) {\n      var previousYear = moment(currentYear, 'YYYY').subtract(1, 'year').format('YYYY');\n      originalBrokerage = config.processingInstructions.originalBrokerage[previousYear];\n    }\n\n    if (!originalBrokerage || !originalBrokerage.length) return [];\n    return originalBrokerage;\n  },\n  getRetainedBrokerageConvertedValue: function getRetainedBrokerageConvertedValue(currencyCode) {\n    var total = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    if (!currencyCode) return;\n    var currencies = utilsProcessingInstructions.getRetainedBrokerageCurrencies();\n    var currencyObj = currencies.find(function (item) {\n      return item.currency === currencyCode;\n    });\n    if (isEmpty(currencyObj)) return;\n    return {\n      value: parseInt(total / currencyObj.rate * 100) / 100,\n      rate: currencyObj.rate\n    };\n  },\n  getProcessTypeName: function getProcessTypeName(id) {\n    if (!id) return '';\n    if (id === constants.PROCESS_TYPE_ID_CLOSING) return 'closing';\n    if (id === constants.PROCESS_TYPE_ID_ENDORSEMENT) return 'endorsement';\n    if (id === constants.PROCESS_TYPE_ID_FDO) return 'fdo';\n    if (id === constants.PROCESS_TYPE_ID_BORDEREAU) return 'bordereau';\n    if (id === constants.PROCESS_TYPE_ID_FEE_AND_AMENDMENT) return 'feeAmendment';\n    return '';\n  },\n  isApproved: function isApproved(processingInstructions) {\n    if (!processingInstructions || !utils.generic.isValidObject(processingInstructions)) return false;\n    return processingInstructions.isAccountHandlerApproved && processingInstructions.isAuthorisedSignatoryApproved;\n  },\n  isClosing: function isClosing(type) {\n    if (!type) return false;\n    return type === constants.PROCESS_TYPE_ID_CLOSING;\n  },\n  isEndorsement: function isEndorsement(type) {\n    if (!type) return false;\n    return type === constants.PROCESS_TYPE_ID_ENDORSEMENT;\n  },\n  isFdo: function isFdo(type) {\n    if (!type) return false;\n    return type === constants.PROCESS_TYPE_ID_FDO;\n  },\n  isBordereau: function isBordereau(type) {\n    if (!type) return false;\n    return type === constants.PROCESS_TYPE_ID_BORDEREAU;\n  },\n  isFeeAndAmendment: function isFeeAndAmendment(type) {\n    if (!type) return false;\n    return type === constants.PROCESS_TYPE_ID_FEE_AND_AMENDMENT;\n  },\n  status: {\n    isDraft: function isDraft(statusId) {\n      if (!statusId) return false;\n      return statusId === constants.PI_STATUS_DRAFT;\n    },\n    isRejectedDraft: function isRejectedDraft(statusId) {\n      if (!statusId) return false;\n      return statusId === constants.PI_STATUS_REJECTED_DRAFT;\n    },\n    isSubmittedAuthorisedSignatory: function isSubmittedAuthorisedSignatory(statusId) {\n      if (!statusId) return false;\n      return statusId === constants.PI_STATUS_SUBMITTED_AUTHORISED_SIGNATORY;\n    },\n    isSubmittedProcessing: function isSubmittedProcessing(statusId) {\n      if (!statusId) return false;\n      return statusId === constants.PI_STATUS_SUBMITTED_PROCESSING;\n    },\n    isReopened: function isReopened(statusId) {\n      if (!statusId) return false;\n      return statusId === constants.PI_STATUS_DRAFT_POST_SUBMISSION;\n    }\n  },\n  getFinancialField: function getFinancialField(instruction, name) {\n    if (!instruction || !name || utils.generic.isInvalidOrEmptyArray(instruction.financialChecklist)) return null;\n    return instruction.financialChecklist.find(function (field) {\n      return field.name === name;\n    });\n  },\n  // fields = {checklist:{quotesPutUp:true,dutyOfDisclosure:false},details:{contactName:true},financialChecklist:{retainedBrokerage:true},riskReference:{documentCount:true}};\n  // dataObj = {checkList: [], details:{}, financialChecklist: [], riskReference: []}\n  checkProcessingInstructionMandatoryData: function checkProcessingInstructionMandatoryData(fields, dataObj) {\n    var flag = true;\n    Object.keys(fields).every(function (field) {\n      var fieldObj = fields[field];\n      var mandatoryKeys = Object.keys(fieldObj).filter(function (mandatoryKey) {\n        return fieldObj[mandatoryKey];\n      });\n\n      if (utils.generic.isValidArray(mandatoryKeys, true)) {\n        var obj = dataObj[field];\n\n        if (!obj) {\n          flag = false;\n          return flag;\n        }\n\n        var count = mandatoryKeys.length;\n\n        if (obj && field === constants.CHECKLIST) {\n          obj.every(function (data) {\n            if (constants.CHECKLIST_WITH_SIGNED_DATE.includes(data.checkListDetails) && mandatoryKeys.includes(data.checkListDetails)) {\n              flag = !!(data.accountHandler === 'YES' && data.signedDate);\n              count--;\n            } else if (mandatoryKeys.includes(data.checkListDetails)) {\n              flag = !!data.accountHandler;\n              count--;\n            }\n\n            if (!count) {\n              return false;\n            }\n\n            return flag;\n          });\n        } else if (obj && field === constants.DETAILS) {\n          mandatoryKeys.every(function (key) {\n            flag = !!obj[key];\n            return flag;\n          });\n        } else if (obj && field === constants.FINANCIAL_CHECKLIST) {\n          obj.every(function (data) {\n            if (mandatoryKeys.includes(data.name)) {\n              flag = data.numberValue >= 0;\n              count--;\n            }\n\n            if (!count) {\n              return false;\n            }\n\n            return flag;\n          });\n        } else if (obj && field === constants.RISK_REFERENCE) {\n          obj.every(function (data) {\n            flag = !!data.documentCount;\n            return flag;\n          });\n        }\n      }\n\n      return flag;\n    });\n    return flag;\n  }\n};\nexport default utilsProcessingInstructions;","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/utils/processingInstructions/processingInstructions.js"],"names":["moment","isEmpty","config","utils","constants","utilsProcessingInstructions","getRetainedBrokerageValue","grossPremium","slipOrder","totalRetainedBrokerage","total","Number","string","stripNonNumeric","parseInt","getRetainedBrokerageCurrencies","currentYear","date","today","originalBrokerage","processingInstructions","previousYear","subtract","format","length","getRetainedBrokerageConvertedValue","currencyCode","currencies","currencyObj","find","item","currency","value","rate","getProcessTypeName","id","PROCESS_TYPE_ID_CLOSING","PROCESS_TYPE_ID_ENDORSEMENT","PROCESS_TYPE_ID_FDO","PROCESS_TYPE_ID_BORDEREAU","PROCESS_TYPE_ID_FEE_AND_AMENDMENT","isApproved","generic","isValidObject","isAccountHandlerApproved","isAuthorisedSignatoryApproved","isClosing","type","isEndorsement","isFdo","isBordereau","isFeeAndAmendment","status","isDraft","statusId","PI_STATUS_DRAFT","isRejectedDraft","PI_STATUS_REJECTED_DRAFT","isSubmittedAuthorisedSignatory","PI_STATUS_SUBMITTED_AUTHORISED_SIGNATORY","isSubmittedProcessing","PI_STATUS_SUBMITTED_PROCESSING","isReopened","PI_STATUS_DRAFT_POST_SUBMISSION","getFinancialField","instruction","name","isInvalidOrEmptyArray","financialChecklist","field","checkProcessingInstructionMandatoryData","fields","dataObj","flag","Object","keys","every","fieldObj","mandatoryKeys","filter","mandatoryKey","isValidArray","obj","count","CHECKLIST","data","CHECKLIST_WITH_SIGNED_DATE","includes","checkListDetails","accountHandler","signedDate","DETAILS","key","FINANCIAL_CHECKLIST","numberValue","RISK_REFERENCE","documentCount"],"mappings":"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","sourcesContent":["import moment from 'moment';\r\nimport isEmpty from 'lodash/isEmpty';\r\n\r\n// app\r\nimport config from 'config';\r\nimport * as utils from 'utils';\r\nimport * as constants from 'consts';\r\n\r\nconst utilsProcessingInstructions = {\r\n  getRetainedBrokerageValue: (grossPremium, slipOrder, totalRetainedBrokerage) => {\r\n    const total =\r\n      Number(utils.string.stripNonNumeric(grossPremium || 0)) *\r\n      Number(utils.string.stripNonNumeric(slipOrder || 0) / 100) *\r\n      Number(utils.string.stripNonNumeric(totalRetainedBrokerage || 0) / 100);\r\n\r\n    return parseInt(total * 100) / 100;\r\n  },\r\n\r\n  getRetainedBrokerageCurrencies: () => {\r\n    const currentYear = utils.date.today('YYYY');\r\n    let originalBrokerage = config.processingInstructions.originalBrokerage[currentYear];\r\n\r\n    // try to get previous year if current year is not yet available\r\n    if (!originalBrokerage) {\r\n      const previousYear = moment(currentYear, 'YYYY').subtract(1, 'year').format('YYYY');\r\n      originalBrokerage = config.processingInstructions.originalBrokerage[previousYear];\r\n    }\r\n\r\n    if (!originalBrokerage || !originalBrokerage.length) return [];\r\n\r\n    return originalBrokerage;\r\n  },\r\n\r\n  getRetainedBrokerageConvertedValue: (currencyCode, total = 0) => {\r\n    if (!currencyCode) return;\r\n    const currencies = utilsProcessingInstructions.getRetainedBrokerageCurrencies();\r\n\r\n    const currencyObj = currencies.find((item) => item.currency === currencyCode);\r\n    if (isEmpty(currencyObj)) return;\r\n\r\n    return {\r\n      value: parseInt((total / currencyObj.rate) * 100) / 100,\r\n      rate: currencyObj.rate,\r\n    };\r\n  },\r\n\r\n  getProcessTypeName: (id) => {\r\n    if (!id) return '';\r\n    if (id === constants.PROCESS_TYPE_ID_CLOSING) return 'closing';\r\n    if (id === constants.PROCESS_TYPE_ID_ENDORSEMENT) return 'endorsement';\r\n    if (id === constants.PROCESS_TYPE_ID_FDO) return 'fdo';\r\n    if (id === constants.PROCESS_TYPE_ID_BORDEREAU) return 'bordereau';\r\n    if (id === constants.PROCESS_TYPE_ID_FEE_AND_AMENDMENT) return 'feeAmendment';\r\n    return '';\r\n  },\r\n\r\n  isApproved: (processingInstructions) => {\r\n    if (!processingInstructions || !utils.generic.isValidObject(processingInstructions)) return false;\r\n\r\n    return processingInstructions.isAccountHandlerApproved && processingInstructions.isAuthorisedSignatoryApproved;\r\n  },\r\n\r\n  isClosing: (type) => {\r\n    if (!type) return false;\r\n    return type === constants.PROCESS_TYPE_ID_CLOSING;\r\n  },\r\n\r\n  isEndorsement: (type) => {\r\n    if (!type) return false;\r\n    return type === constants.PROCESS_TYPE_ID_ENDORSEMENT;\r\n  },\r\n\r\n  isFdo: (type) => {\r\n    if (!type) return false;\r\n    return type === constants.PROCESS_TYPE_ID_FDO;\r\n  },\r\n\r\n  isBordereau: (type) => {\r\n    if (!type) return false;\r\n    return type === constants.PROCESS_TYPE_ID_BORDEREAU;\r\n  },\r\n\r\n  isFeeAndAmendment: (type) => {\r\n    if (!type) return false;\r\n    return type === constants.PROCESS_TYPE_ID_FEE_AND_AMENDMENT;\r\n  },\r\n\r\n  status: {\r\n    isDraft: (statusId) => {\r\n      if (!statusId) return false;\r\n      return statusId === constants.PI_STATUS_DRAFT;\r\n    },\r\n\r\n    isRejectedDraft: (statusId) => {\r\n      if (!statusId) return false;\r\n      return statusId === constants.PI_STATUS_REJECTED_DRAFT;\r\n    },\r\n\r\n    isSubmittedAuthorisedSignatory: (statusId) => {\r\n      if (!statusId) return false;\r\n      return statusId === constants.PI_STATUS_SUBMITTED_AUTHORISED_SIGNATORY;\r\n    },\r\n\r\n    isSubmittedProcessing: (statusId) => {\r\n      if (!statusId) return false;\r\n      return statusId === constants.PI_STATUS_SUBMITTED_PROCESSING;\r\n    },\r\n\r\n    isReopened: (statusId) => {\r\n      if (!statusId) return false;\r\n      return statusId === constants.PI_STATUS_DRAFT_POST_SUBMISSION;\r\n    },\r\n  },\r\n\r\n  getFinancialField: (instruction, name) => {\r\n    if (!instruction || !name || utils.generic.isInvalidOrEmptyArray(instruction.financialChecklist)) return null;\r\n\r\n    return instruction.financialChecklist.find((field) => field.name === name);\r\n  },\r\n  // fields = {checklist:{quotesPutUp:true,dutyOfDisclosure:false},details:{contactName:true},financialChecklist:{retainedBrokerage:true},riskReference:{documentCount:true}};\r\n  // dataObj = {checkList: [], details:{}, financialChecklist: [], riskReference: []}\r\n  checkProcessingInstructionMandatoryData: (fields, dataObj) => {\r\n    let flag = true;\r\n    Object.keys(fields).every((field) => {\r\n      const fieldObj = fields[field];\r\n      const mandatoryKeys = Object.keys(fieldObj).filter((mandatoryKey) => fieldObj[mandatoryKey]);\r\n      if (utils.generic.isValidArray(mandatoryKeys, true)) {\r\n        const obj = dataObj[field];\r\n        if (!obj) {\r\n          flag = false;\r\n          return flag;\r\n        }\r\n        let count = mandatoryKeys.length;\r\n        if (obj && field === constants.CHECKLIST) {\r\n          obj.every((data) => {\r\n            if (constants.CHECKLIST_WITH_SIGNED_DATE.includes(data.checkListDetails) && mandatoryKeys.includes(data.checkListDetails)) {\r\n              flag = !!(data.accountHandler === 'YES' && data.signedDate);\r\n              count--;\r\n            } else if (mandatoryKeys.includes(data.checkListDetails)) {\r\n              flag = !!data.accountHandler;\r\n              count--;\r\n            }\r\n            if (!count) {\r\n              return false;\r\n            }\r\n            return flag;\r\n          });\r\n        } else if (obj && field === constants.DETAILS) {\r\n          mandatoryKeys.every((key) => {\r\n            flag = !!obj[key];\r\n            return flag;\r\n          });\r\n        } else if (obj && field === constants.FINANCIAL_CHECKLIST) {\r\n          obj.every((data) => {\r\n            if (mandatoryKeys.includes(data.name)) {\r\n              flag = data.numberValue >= 0;\r\n              count--;\r\n            }\r\n            if (!count) {\r\n              return false;\r\n            }\r\n            return flag;\r\n          });\r\n        } else if (obj && field === constants.RISK_REFERENCE) {\r\n          obj.every((data) => {\r\n            flag = !!data.documentCount;\r\n            return flag;\r\n          });\r\n        }\r\n      }\r\n      return flag;\r\n    });\r\n    return flag;\r\n  },\r\n};\r\n\r\nexport default utilsProcessingInstructions;\r\n"]},"metadata":{},"sourceType":"module"}