{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\TasksTab\\\\TasksTab.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as Yup from 'yup';\nimport { useParams } from 'react-router';\nimport get from 'lodash/get'; //app\n\nimport { selectClaimsTasksProcessingListFilterLoading, selectClaimsTasksProcessingListFilterValues, selectClaimsTasksProcessingList, selectedClaimsProcessingTaskType, selectEditAdhocTaskStatus, getClaimsTasksProcessingList, resetClaimsProcessingTasksListFilters, resetClaimsProcessingTaskListSearch, collapseNav, udpateIsCheckSigningToggle, selectedClaimsProcessingPreviousTaskType, selectClaimsTaskProcessingListAppliedFilters } from 'stores';\nimport TasksTabView from './TasksTab.view';\nimport styles from './TasksTab.style';\nimport { MultiSelect, FormDate } from 'components';\nimport * as utils from 'utils';\nimport { useFlexiColumns } from 'hooks';\nimport { TASK_TEAM_TYPE, TASKS_SEARCH_OPTION_PROCESS_REF, TASKS_SEARCH_OPTION_DESCRIPTION, TASKS_SEARCH_OPTION_TASKI_REF, CLAIM_PROCESSING_REQ_TYPES, TASKS_SEARCH_OPTION_TASKS_NAME, TASKS_SEARCH_OPTION_ASSIGNED, TASKS_SEARCH_OPTION_PRIORITY } from 'consts'; //mui\n\nimport { makeStyles } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TasksTab() {\n  _s();\n\n  var classes = makeStyles(styles, {\n    name: 'TasksTab'\n  })();\n  var dispatch = useDispatch();\n  var params = useParams();\n  var claimsTasksProcessing = useSelector(selectClaimsTasksProcessingList);\n  var claimsTasksProcessingFilters = useSelector(selectClaimsTasksProcessingListFilterValues);\n  var editAdhocStatus = useSelector(selectEditAdhocTaskStatus);\n  var uiNavExpanded = useSelector(function (state) {\n    return get(state, 'ui.nav.expanded');\n  });\n  var appliedFilters = useSelector(selectClaimsTaskProcessingListAppliedFilters);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isCheckSigningValue = _useState2[0],\n      setIsCheckSigningValue = _useState2[1];\n\n  var isFetchingFilters = useSelector(selectClaimsTasksProcessingListFilterLoading);\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      newPage = _useState4[0],\n      setNewPage = _useState4[1];\n\n  var _useState5 = useState(utils.string.t('claims.searchByTasks.options.TaskRef')),\n      _useState6 = _slicedToArray(_useState5, 2),\n      searchByText = _useState6[0],\n      setSearchByText = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      resetKey = _useState8[0],\n      setResetKey = _useState8[1];\n\n  var _useState9 = useState(claimsTasksProcessing.taskType || TASK_TEAM_TYPE.myTask),\n      _useState10 = _slicedToArray(_useState9, 2),\n      taskType = _useState10[0],\n      setTaskType = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      isTaskTeam = _useState12[0],\n      setIsTaskTeam = _useState12[1];\n\n  var _useState13 = useState(''),\n      _useState14 = _slicedToArray(_useState13, 2),\n      searchTerm = _useState14[0],\n      setSearchTerm = _useState14[1];\n\n  var searchTypeCall = CLAIM_PROCESSING_REQ_TYPES.search;\n  var filterTypeCall = CLAIM_PROCESSING_REQ_TYPES.filter;\n  var refId = params.refId;\n  var selectOptions = [{\n    label: utils.string.t('claims.searchByTasks.options.TaskName'),\n    value: TASKS_SEARCH_OPTION_TASKS_NAME\n  }, {\n    label: utils.string.t('claims.searchByTasks.options.TaskRef'),\n    value: TASKS_SEARCH_OPTION_TASKI_REF\n  }, {\n    label: utils.string.t('claims.searchByTasks.options.Description'),\n    value: TASKS_SEARCH_OPTION_DESCRIPTION\n  }, {\n    label: utils.string.t('claims.searchByTasks.options.AssignedTo'),\n    value: TASKS_SEARCH_OPTION_ASSIGNED\n  }, {\n    label: utils.string.t('claims.searchByTasks.options.ClaimRef'),\n    value: TASKS_SEARCH_OPTION_PROCESS_REF\n  }, {\n    label: utils.string.t('claims.searchByTasks.options.Priority'),\n    value: TASKS_SEARCH_OPTION_PRIORITY\n  }];\n  var taskTypeOptions = [{\n    value: 'myTask',\n    label: utils.string.t('claims.processing.myTasks')\n  }, {\n    value: 'myTeam',\n    label: utils.string.t('claims.processing.myTeamTasks')\n  }];\n  var multiSelectField = [{\n    name: 'multiselect',\n    type: 'switch',\n    value: false,\n    disable: true,\n    muiComponentProps: {\n      onChange: function onChange() {}\n    }\n  }];\n  var fields = [{\n    name: 'taskType',\n    type: 'radio',\n    value: taskType,\n    defaultValue: taskType,\n    muiFormGroupProps: {\n      row: true,\n      classes: {\n        root: classes.radioLabel\n      }\n    },\n    options: taskTypeOptions\n  }, {\n    name: 'createdOn',\n    type: 'datepicker',\n    value: null\n  }, {\n    name: 'targetDueDate',\n    type: 'datepicker',\n    value: null\n  }, {\n    name: 'inceptionDate',\n    type: 'datepicker',\n    value: null\n  }, {\n    name: 'searchType',\n    type: 'autocompletemui',\n    options: selectOptions,\n    value: (selectOptions === null || selectOptions === void 0 ? void 0 : selectOptions.find(function (item) {\n      return (item === null || item === void 0 ? void 0 : item.value) === TASKS_SEARCH_OPTION_TASKS_NAME;\n    })) || null,\n    muiComponentProps: {\n      inputProps: {\n        title: searchByText || ''\n      }\n    },\n    validation: Yup.object().nullable().required(utils.string.t('validation.required')),\n    callback: function callback(event, data) {\n      setSearchByText(data === null || data === void 0 ? void 0 : data.label);\n    }\n  }];\n  var defaultValues = utils.form.getInitialValues(fields);\n  var validationSchema = utils.form.getValidationSchema(fields);\n\n  var _useForm = useForm(_objectSpread({\n    defaultValues: defaultValues\n  }, validationSchema && {\n    resolver: yupResolver(validationSchema)\n  })),\n      control = _useForm.control,\n      watch = _useForm.watch,\n      setValue = _useForm.setValue;\n\n  var taskTypeValue = watch('taskType');\n  var watchSearchType = watch('searchType');\n  var tableFilterFields = [{\n    id: 'createdOn',\n    type: 'datepicker',\n    label: utils.string.t('claims.processing.tasksGridColumns.created'),\n    value: '',\n    content: /*#__PURE__*/_jsxDEV(FormDate, _objectSpread(_objectSpread({\n      control: control\n    }, utils.form.getFieldProps(defaultValues, 'createdOn')), {}, {\n      id: \"creationdatepicker\",\n      name: \"createdOn\",\n      type: \"datepicker\",\n      value: '',\n      label: '',\n      plainText: true,\n      plainTextIcon: true,\n      placeholder: utils.string.t('app.selectDate'),\n      muiComponentProps: {\n        fullWidth: false,\n        margin: 'dense'\n      },\n      muiPickerProps: {\n        clearable: false,\n        variant: 'inline',\n        format: 'DD-MM-YYYY'\n      }\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }, this)\n  }, {\n    id: 'targetDueDate',\n    type: 'datepicker',\n    label: utils.string.t('claims.processing.tasksGridColumns.dueDate'),\n    value: '',\n    content: /*#__PURE__*/_jsxDEV(FormDate, _objectSpread(_objectSpread({\n      control: control\n    }, utils.form.getFieldProps(defaultValues, 'targetDueDate')), {}, {\n      id: \"duedatepicker\",\n      name: \"targetDueDate\",\n      type: \"datepicker\",\n      value: '',\n      label: '',\n      plainText: true,\n      plainTextIcon: true,\n      placeholder: utils.string.t('app.selectDate'),\n      muiComponentProps: {\n        fullWidth: false,\n        margin: 'dense'\n      },\n      muiPickerProps: {\n        clearable: false,\n        variant: 'inline',\n        format: 'DD-MM-YYYY'\n      }\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }, this)\n  }, {\n    id: 'taskType',\n    type: 'multiSelect',\n    label: utils.string.t('claims.processing.tasksGridColumns.taskName'),\n    value: [],\n    options: claimsTasksProcessingFilters === null || claimsTasksProcessingFilters === void 0 ? void 0 : claimsTasksProcessingFilters.taskType,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"taskType\",\n      search: true,\n      options: claimsTasksProcessingFilters === null || claimsTasksProcessingFilters === void 0 ? void 0 : claimsTasksProcessingFilters.taskType\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 16\n    }, this)\n  }, {\n    id: 'priority',\n    type: 'multiSelect',\n    label: utils.string.t('claims.processing.tasksGridColumns.priority'),\n    value: [],\n    options: claimsTasksProcessingFilters === null || claimsTasksProcessingFilters === void 0 ? void 0 : claimsTasksProcessingFilters.priority,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"priority\",\n      search: true,\n      options: claimsTasksProcessingFilters === null || claimsTasksProcessingFilters === void 0 ? void 0 : claimsTasksProcessingFilters.priority\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 16\n    }, this)\n  }, {\n    id: 'description',\n    type: 'multiSelect',\n    label: utils.string.t('claims.processing.tasksGridColumns.description'),\n    value: [],\n    options: claimsTasksProcessingFilters === null || claimsTasksProcessingFilters === void 0 ? void 0 : claimsTasksProcessingFilters.description,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"description\",\n      search: true,\n      options: claimsTasksProcessingFilters === null || claimsTasksProcessingFilters === void 0 ? void 0 : claimsTasksProcessingFilters.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 16\n    }, this)\n  }, {\n    id: 'assignee',\n    type: 'multiSelect',\n    label: utils.string.t('claims.processing.tasksGridColumns.assignedTo'),\n    value: [],\n    options: claimsTasksProcessingFilters === null || claimsTasksProcessingFilters === void 0 ? void 0 : claimsTasksProcessingFilters.assignee,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"assignee\",\n      search: true,\n      options: claimsTasksProcessingFilters === null || claimsTasksProcessingFilters === void 0 ? void 0 : claimsTasksProcessingFilters.assignee\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 16\n    }, this)\n  }];\n  var columns = [{\n    id: 'id',\n    empty: true,\n    visible: true\n  }, {\n    id: 'taskRef',\n    label: utils.string.t('claims.processing.tasksGridColumns.taskRef'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true,\n    mandatory: true\n  }, {\n    id: 'createdOn',\n    label: utils.string.t('claims.processing.tasksGridColumns.created'),\n    sort: {\n      type: 'date',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true,\n    mandatory: true\n  }, {\n    id: 'taskType',\n    label: utils.string.t('claims.processing.tasksGridColumns.taskName'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }, {\n    id: 'description',\n    label: utils.string.t('claims.processing.tasksGridColumns.description'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true,\n    ellipsis: true\n  }, {\n    id: 'targetDueDate',\n    label: utils.string.t('claims.processing.tasksGridColumns.dueDate'),\n    sort: {\n      type: 'date',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }, {\n    id: 'assignee',\n    label: utils.string.t('claims.processing.tasksGridColumns.assignedTo'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }, {\n    id: 'processRef',\n    label: utils.string.t('claims.processing.tasksGridColumns.claimRef'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }, {\n    id: 'priority',\n    label: utils.string.t('claims.processing.tasksGridColumns.priority'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }];\n\n  var _useFlexiColumns = useFlexiColumns(columns),\n      columnsArray = _useFlexiColumns.columns,\n      columnProps = _useFlexiColumns.columnProps,\n      toggleColumn = _useFlexiColumns.toggleColumn;\n\n  var resetFilter = function resetFilter() {\n    setValue('createdOn', null);\n    setValue('targetDueDate', null);\n    dispatch(resetClaimsProcessingTasksListFilters());\n    setResetKey(new Date().getTime());\n    dispatch(getClaimsTasksProcessingList({\n      requestType: searchTypeCall,\n      taskType: taskType,\n      query: searchTerm,\n      filterTerm: {}\n    }));\n    dispatch(getClaimsTasksProcessingList({\n      requestType: filterTypeCall,\n      taskType: taskType,\n      query: searchTerm,\n      filterTerm: {}\n    }));\n  };\n\n  var resetSearch = function resetSearch() {\n    setValue('createdOn', null);\n    setValue('targetDueDate', null);\n    dispatch(resetClaimsProcessingTaskListSearch());\n    setResetKey(new Date().getTime());\n    dispatch(getClaimsTasksProcessingList({\n      requestType: searchTypeCall,\n      taskType: taskType,\n      filterTerm: []\n    }));\n    dispatch(getClaimsTasksProcessingList({\n      requestType: filterTypeCall,\n      taskType: taskType,\n      filterTerm: []\n    }));\n  };\n\n  var handleSearch = function handleSearch(_ref) {\n    var search = _ref.search,\n        filters = _ref.filters;\n    setValue('createdOn', null);\n    setValue('targetDueDate', null);\n    var searchType = (watchSearchType === null || watchSearchType === void 0 ? void 0 : watchSearchType.value) || '';\n    setSearchTerm(search);\n    setResetKey(new Date().getTime());\n\n    if (search !== (claimsTasksProcessing === null || claimsTasksProcessing === void 0 ? void 0 : claimsTasksProcessing.query)) {\n      dispatch(getClaimsTasksProcessingList({\n        requestType: searchTypeCall,\n        taskType: taskType,\n        query: search,\n        direction: 'asc',\n        searchType: searchType,\n        navigation: false\n      }));\n      dispatch(getClaimsTasksProcessingList({\n        requestType: filterTypeCall,\n        taskType: taskType,\n        query: search,\n        direction: 'asc',\n        searchType: searchType,\n        navigation: false\n      }));\n    }\n  };\n\n  var handleSearchFilter = function handleSearchFilter(_ref2) {\n    var search = _ref2.search,\n        filters = _ref2.filters;\n    dispatch(getClaimsTasksProcessingList({\n      requestType: searchTypeCall,\n      taskType: taskType,\n      query: search,\n      filterTerm: filters,\n      navigation: false\n    }));\n  };\n\n  var handleChangePage = function handleChangePage(newPage) {\n    setNewPage(newPage);\n    dispatch(getClaimsTasksProcessingList({\n      requestType: searchTypeCall,\n      taskType: taskType,\n      page: newPage,\n      query: searchTerm,\n      filterTerm: appliedFilters || null,\n      navigation: true\n    }));\n  };\n\n  var handleChangeRowsPerPage = function handleChangeRowsPerPage(rowsPerPage) {\n    dispatch(getClaimsTasksProcessingList({\n      requestType: searchTypeCall,\n      taskType: taskType,\n      size: rowsPerPage,\n      query: searchTerm,\n      filterTerm: appliedFilters || null,\n      navigation: true\n    }));\n  };\n\n  var handleSort = function handleSort(by, dir) {\n    dispatch(getClaimsTasksProcessingList({\n      requestType: searchTypeCall,\n      taskType: taskType,\n      sortBy: by,\n      direction: dir,\n      query: searchTerm,\n      navigation: false\n    }));\n  };\n\n  var refreshTasksGrid = function refreshTasksGrid() {\n    dispatch(getClaimsTasksProcessingList({\n      requestType: searchTypeCall,\n      taskType: taskType\n    }));\n    dispatch(getClaimsTasksProcessingList({\n      requestType: filterTypeCall,\n      taskType: taskType\n    }));\n  };\n\n  var hasTasks = utils.generic.isValidArray(claimsTasksProcessing === null || claimsTasksProcessing === void 0 ? void 0 : claimsTasksProcessing.items, true);\n\n  var resetNotificationFilters = function resetNotificationFilters() {\n    setIsCheckSigningValue(false);\n  };\n\n  useEffect(function () {\n    var searchType = (watchSearchType === null || watchSearchType === void 0 ? void 0 : watchSearchType.value) || '';\n\n    if (refId) {\n      dispatch(getClaimsTasksProcessingList({\n        requestType: searchTypeCall,\n        taskType: taskType,\n        searchType: searchType,\n        page: newPage,\n        query: refId\n      }));\n      dispatch(getClaimsTasksProcessingList({\n        requestType: filterTypeCall,\n        taskType: taskType,\n        searchType: searchType,\n        page: newPage,\n        query: refId\n      }));\n    }\n  }, [refId]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    if (taskType && !refId) {\n      setValue('taskType', taskType);\n      setIsTaskTeam(taskType === TASK_TEAM_TYPE.myTeam);\n      setResetKey(tableFilterFields);\n      setValue('createdOn', null);\n      setValue('targetDueDate', null);\n      setResetKey(new Date().getTime());\n\n      if ((claimsTasksProcessing === null || claimsTasksProcessing === void 0 ? void 0 : claimsTasksProcessing.previousTaskType) !== taskType) {\n        dispatch(selectedClaimsProcessingPreviousTaskType(taskType));\n        dispatch(resetClaimsProcessingTasksListFilters());\n        dispatch(resetClaimsProcessingTaskListSearch());\n        dispatch(getClaimsTasksProcessingList({\n          requestType: searchTypeCall,\n          taskType: taskType,\n          filterTerm: []\n        }));\n        dispatch(getClaimsTasksProcessingList({\n          requestType: filterTypeCall,\n          taskType: taskType\n        }));\n      }\n    }\n  }, [taskType]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var toggleCheckSigning = function toggleCheckSigning(event) {\n    var _event$target, _event$target2;\n\n    setResetKey(tableFilterFields);\n    setIsCheckSigningValue(event === null || event === void 0 ? void 0 : (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.checked);\n    var checkedValue = event === null || event === void 0 ? void 0 : (_event$target2 = event.target) === null || _event$target2 === void 0 ? void 0 : _event$target2.checked;\n    dispatch(udpateIsCheckSigningToggle(checkedValue));\n  };\n\n  useEffect(function () {\n    dispatch(selectedClaimsProcessingTaskType(taskType));\n  }, [taskType]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    var searchType = (watchSearchType === null || watchSearchType === void 0 ? void 0 : watchSearchType.value) || '';\n\n    if (editAdhocStatus) {\n      dispatch(getClaimsTasksProcessingList({\n        requestType: searchTypeCall,\n        taskType: taskType,\n        searchType: searchType,\n        page: newPage,\n        query: searchTerm\n      }));\n      dispatch(getClaimsTasksProcessingList({\n        requestType: filterTypeCall,\n        taskType: taskType,\n        searchType: searchType,\n        page: newPage,\n        query: searchTerm\n      }));\n    }\n  }, [editAdhocStatus]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var toggleFlexiColumns = function toggleFlexiColumns(columns) {\n    if (uiNavExpanded) {\n      dispatch(collapseNav());\n    }\n\n    toggleColumn(columns);\n  };\n\n  return /*#__PURE__*/_jsxDEV(TasksTabView, {\n    isTaskTeam: isTaskTeam,\n    setValue: setValue,\n    hasTasks: hasTasks,\n    fields: fields,\n    notificationRefId: refId,\n    control: control,\n    taskTypeValue: taskTypeValue,\n    tasks: claimsTasksProcessing,\n    sort: _objectSpread(_objectSpread({}, claimsTasksProcessing.sort), {}, {\n      direction: claimsTasksProcessing.sort.direction.toLowerCase(),\n      type: 'numeric'\n    }),\n    columnsArray: columnsArray,\n    columnProps: columnProps,\n    tableFilterFields: tableFilterFields,\n    isFetchingFilters: isFetchingFilters,\n    isCheckSigningValue: isCheckSigningValue,\n    resetKey: resetKey,\n    multiSelectField: multiSelectField,\n    handlers: {\n      toggleColumn: toggleFlexiColumns,\n      resetFilter: resetFilter,\n      resetSearch: resetSearch,\n      handleSearch: handleSearch,\n      handleSearchFilter: handleSearchFilter,\n      handleChangePage: handleChangePage,\n      handleChangeRowsPerPage: handleChangeRowsPerPage,\n      handleSort: handleSort,\n      setTaskType: setTaskType,\n      refreshTasksGrid: refreshTasksGrid,\n      resetNotificationFilters: resetNotificationFilters,\n      toggleCheckSigning: toggleCheckSigning\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 470,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TasksTab, \"4Y8aD0aUgxBfW2GJ7LFS61scDpc=\", false, function () {\n  return [useDispatch, useParams, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useForm, useFlexiColumns];\n});\n\n_c = TasksTab;\n\nvar _c;\n\n$RefreshReg$(_c, \"TasksTab\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/TasksTab/TasksTab.js"],"names":["React","useEffect","useState","useSelector","useDispatch","useForm","yupResolver","Yup","useParams","get","selectClaimsTasksProcessingListFilterLoading","selectClaimsTasksProcessingListFilterValues","selectClaimsTasksProcessingList","selectedClaimsProcessingTaskType","selectEditAdhocTaskStatus","getClaimsTasksProcessingList","resetClaimsProcessingTasksListFilters","resetClaimsProcessingTaskListSearch","collapseNav","udpateIsCheckSigningToggle","selectedClaimsProcessingPreviousTaskType","selectClaimsTaskProcessingListAppliedFilters","TasksTabView","styles","MultiSelect","FormDate","utils","useFlexiColumns","TASK_TEAM_TYPE","TASKS_SEARCH_OPTION_PROCESS_REF","TASKS_SEARCH_OPTION_DESCRIPTION","TASKS_SEARCH_OPTION_TASKI_REF","CLAIM_PROCESSING_REQ_TYPES","TASKS_SEARCH_OPTION_TASKS_NAME","TASKS_SEARCH_OPTION_ASSIGNED","TASKS_SEARCH_OPTION_PRIORITY","makeStyles","TasksTab","classes","name","dispatch","params","claimsTasksProcessing","claimsTasksProcessingFilters","editAdhocStatus","uiNavExpanded","state","appliedFilters","isCheckSigningValue","setIsCheckSigningValue","isFetchingFilters","newPage","setNewPage","string","t","searchByText","setSearchByText","resetKey","setResetKey","taskType","myTask","setTaskType","isTaskTeam","setIsTaskTeam","searchTerm","setSearchTerm","searchTypeCall","search","filterTypeCall","filter","refId","selectOptions","label","value","taskTypeOptions","multiSelectField","type","disable","muiComponentProps","onChange","fields","defaultValue","muiFormGroupProps","row","root","radioLabel","options","find","item","inputProps","title","validation","object","nullable","required","callback","event","data","defaultValues","form","getInitialValues","validationSchema","getValidationSchema","resolver","control","watch","setValue","taskTypeValue","watchSearchType","tableFilterFields","id","content","getFieldProps","fullWidth","margin","clearable","variant","format","priority","description","assignee","columns","empty","visible","sort","direction","nowrap","mandatory","ellipsis","columnsArray","columnProps","toggleColumn","resetFilter","Date","getTime","requestType","query","filterTerm","resetSearch","handleSearch","filters","searchType","navigation","handleSearchFilter","handleChangePage","page","handleChangeRowsPerPage","rowsPerPage","size","handleSort","by","dir","sortBy","refreshTasksGrid","hasTasks","generic","isValidArray","items","resetNotificationFilters","myTeam","previousTaskType","toggleCheckSigning","target","checked","checkedValue","toggleFlexiColumns","toLowerCase"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as Yup from 'yup';\r\nimport { useParams } from 'react-router';\r\nimport get from 'lodash/get';\r\n\r\n//app\r\nimport {\r\n  selectClaimsTasksProcessingListFilterLoading,\r\n  selectClaimsTasksProcessingListFilterValues,\r\n  selectClaimsTasksProcessingList,\r\n  selectedClaimsProcessingTaskType,\r\n  selectEditAdhocTaskStatus,\r\n  getClaimsTasksProcessingList,\r\n  resetClaimsProcessingTasksListFilters,\r\n  resetClaimsProcessingTaskListSearch,\r\n  collapseNav,\r\n  udpateIsCheckSigningToggle,\r\n  selectedClaimsProcessingPreviousTaskType,\r\n  selectClaimsTaskProcessingListAppliedFilters\r\n} from 'stores';\r\nimport TasksTabView from './TasksTab.view';\r\nimport styles from './TasksTab.style';\r\nimport { MultiSelect, FormDate } from 'components';\r\nimport * as utils from 'utils';\r\nimport { useFlexiColumns } from 'hooks';\r\nimport {\r\n  TASK_TEAM_TYPE,\r\n  TASKS_SEARCH_OPTION_PROCESS_REF,\r\n  TASKS_SEARCH_OPTION_DESCRIPTION,\r\n  TASKS_SEARCH_OPTION_TASKI_REF,\r\n  CLAIM_PROCESSING_REQ_TYPES,\r\n  TASKS_SEARCH_OPTION_TASKS_NAME,\r\n  TASKS_SEARCH_OPTION_ASSIGNED,\r\n  TASKS_SEARCH_OPTION_PRIORITY,\r\n} from 'consts';\r\n\r\n//mui\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nexport default function TasksTab() {\r\n  const classes = makeStyles(styles, { name: 'TasksTab' })();\r\n  const dispatch = useDispatch();\r\n  const params = useParams();\r\n  const claimsTasksProcessing = useSelector(selectClaimsTasksProcessingList);\r\n  const claimsTasksProcessingFilters = useSelector(selectClaimsTasksProcessingListFilterValues);\r\n  const editAdhocStatus = useSelector(selectEditAdhocTaskStatus);\r\n  const uiNavExpanded = useSelector((state) => get(state, 'ui.nav.expanded'));\r\n  const appliedFilters = useSelector(selectClaimsTaskProcessingListAppliedFilters);\r\n\r\n  const [isCheckSigningValue, setIsCheckSigningValue] = useState(false);\r\n  const isFetchingFilters = useSelector(selectClaimsTasksProcessingListFilterLoading);\r\n\r\n  const [newPage, setNewPage] = useState(0);\r\n  const [searchByText, setSearchByText] = useState(utils.string.t('claims.searchByTasks.options.TaskRef'));\r\n  const [resetKey, setResetKey] = useState();\r\n\r\n  const [taskType, setTaskType] = useState(claimsTasksProcessing.taskType || TASK_TEAM_TYPE.myTask);\r\n  const [isTaskTeam, setIsTaskTeam] = useState(false);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  const searchTypeCall = CLAIM_PROCESSING_REQ_TYPES.search;\r\n  const filterTypeCall = CLAIM_PROCESSING_REQ_TYPES.filter;\r\n\r\n  const { refId } = params;\r\n\r\n  const selectOptions = [\r\n    { label: utils.string.t('claims.searchByTasks.options.TaskName'), value: TASKS_SEARCH_OPTION_TASKS_NAME },\r\n    { label: utils.string.t('claims.searchByTasks.options.TaskRef'), value: TASKS_SEARCH_OPTION_TASKI_REF },\r\n    { label: utils.string.t('claims.searchByTasks.options.Description'), value: TASKS_SEARCH_OPTION_DESCRIPTION },\r\n    { label: utils.string.t('claims.searchByTasks.options.AssignedTo'), value: TASKS_SEARCH_OPTION_ASSIGNED },\r\n    { label: utils.string.t('claims.searchByTasks.options.ClaimRef'), value: TASKS_SEARCH_OPTION_PROCESS_REF },\r\n    { label: utils.string.t('claims.searchByTasks.options.Priority'), value: TASKS_SEARCH_OPTION_PRIORITY },\r\n  ];\r\n\r\n  let taskTypeOptions = [\r\n    { value: 'myTask', label: utils.string.t('claims.processing.myTasks') },\r\n    { value: 'myTeam', label: utils.string.t('claims.processing.myTeamTasks') },\r\n  ];\r\n\r\n  const multiSelectField = [\r\n    {\r\n      name: 'multiselect',\r\n      type: 'switch',\r\n      value: false,\r\n      disable: true,\r\n      muiComponentProps: {\r\n        onChange: () => {},\r\n      },\r\n    },\r\n  ];\r\n\r\n  const fields = [\r\n    {\r\n      name: 'taskType',\r\n      type: 'radio',\r\n      value: taskType,\r\n      defaultValue: taskType,\r\n      muiFormGroupProps: {\r\n        row: true,\r\n        classes: {\r\n          root: classes.radioLabel,\r\n        },\r\n      },\r\n      options: taskTypeOptions,\r\n    },\r\n    { name: 'createdOn', type: 'datepicker', value: null },\r\n    { name: 'targetDueDate', type: 'datepicker', value: null },\r\n    { name: 'inceptionDate', type: 'datepicker', value: null },\r\n    {\r\n      name: 'searchType',\r\n      type: 'autocompletemui',\r\n      options: selectOptions,\r\n      value: selectOptions?.find((item) => item?.value === TASKS_SEARCH_OPTION_TASKS_NAME) || null,\r\n      muiComponentProps: {\r\n        inputProps: {\r\n          title: searchByText || '',\r\n        },\r\n      },\r\n      validation: Yup.object().nullable().required(utils.string.t('validation.required')),\r\n      callback: (event, data) => {\r\n        setSearchByText(data?.label);\r\n      },\r\n    },\r\n  ];\r\n\r\n  const defaultValues = utils.form.getInitialValues(fields);\r\n  const validationSchema = utils.form.getValidationSchema(fields);\r\n\r\n  const { control, watch, setValue } = useForm({\r\n    defaultValues,\r\n    ...(validationSchema && { resolver: yupResolver(validationSchema) }),\r\n  });\r\n  const taskTypeValue = watch('taskType');\r\n  const watchSearchType = watch('searchType');\r\n\r\n  const tableFilterFields = [\r\n    {\r\n      id: 'createdOn',\r\n      type: 'datepicker',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.created'),\r\n      value: '',\r\n      content: (\r\n        <FormDate\r\n          control={control}\r\n          {...utils.form.getFieldProps(defaultValues, 'createdOn')}\r\n          id=\"creationdatepicker\"\r\n          name=\"createdOn\"\r\n          type=\"datepicker\"\r\n          value={''}\r\n          label={''}\r\n          plainText\r\n          plainTextIcon\r\n          placeholder={utils.string.t('app.selectDate')}\r\n          muiComponentProps={{\r\n            fullWidth: false,\r\n            margin: 'dense',\r\n          }}\r\n          muiPickerProps={{\r\n            clearable: false,\r\n            variant: 'inline',\r\n            format: 'DD-MM-YYYY',\r\n          }}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      id: 'targetDueDate',\r\n      type: 'datepicker',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.dueDate'),\r\n      value: '',\r\n      content: (\r\n        <FormDate\r\n          control={control}\r\n          {...utils.form.getFieldProps(defaultValues, 'targetDueDate')}\r\n          id=\"duedatepicker\"\r\n          name=\"targetDueDate\"\r\n          type=\"datepicker\"\r\n          value={''}\r\n          label={''}\r\n          plainText\r\n          plainTextIcon\r\n          placeholder={utils.string.t('app.selectDate')}\r\n          muiComponentProps={{\r\n            fullWidth: false,\r\n            margin: 'dense',\r\n          }}\r\n          muiPickerProps={{\r\n            clearable: false,\r\n            variant: 'inline',\r\n            format: 'DD-MM-YYYY',\r\n          }}\r\n        />\r\n      ),\r\n    },\r\n\r\n    {\r\n      id: 'taskType',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.taskName'),\r\n      value: [],\r\n      options: claimsTasksProcessingFilters?.taskType,\r\n      content: <MultiSelect id=\"taskType\" search options={claimsTasksProcessingFilters?.taskType} />,\r\n    },\r\n    {\r\n      id: 'priority',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.priority'),\r\n      value: [],\r\n      options: claimsTasksProcessingFilters?.priority,\r\n      content: <MultiSelect id=\"priority\" search options={claimsTasksProcessingFilters?.priority} />,\r\n    },\r\n    {\r\n      id: 'description',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.description'),\r\n      value: [],\r\n      options: claimsTasksProcessingFilters?.description,\r\n      content: <MultiSelect id=\"description\" search options={claimsTasksProcessingFilters?.description} />,\r\n    },\r\n    {\r\n      id: 'assignee',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.assignedTo'),\r\n      value: [],\r\n      options: claimsTasksProcessingFilters?.assignee,\r\n      content: <MultiSelect id=\"assignee\" search options={claimsTasksProcessingFilters?.assignee} />,\r\n    },\r\n  ];\r\n\r\n  const columns = [\r\n    { id: 'id', empty: true, visible: true },\r\n    {\r\n      id: 'taskRef',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.taskRef'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n      mandatory: true,\r\n    },\r\n    {\r\n      id: 'createdOn',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.created'),\r\n      sort: { type: 'date', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n      mandatory: true,\r\n    },\r\n    {\r\n      id: 'taskType',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.taskName'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n    },\r\n    {\r\n      id: 'description',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.description'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n      ellipsis: true,\r\n    },\r\n    {\r\n      id: 'targetDueDate',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.dueDate'),\r\n      sort: { type: 'date', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n    },\r\n    {\r\n      id: 'assignee',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.assignedTo'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n    },\r\n    {\r\n      id: 'processRef',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.claimRef'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n    },\r\n    {\r\n      id: 'priority',\r\n      label: utils.string.t('claims.processing.tasksGridColumns.priority'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n    },\r\n  ];\r\n\r\n  const { columns: columnsArray, columnProps, toggleColumn } = useFlexiColumns(columns);\r\n\r\n  const resetFilter = () => {\r\n    setValue('createdOn', null);\r\n    setValue('targetDueDate', null);\r\n    dispatch(resetClaimsProcessingTasksListFilters());\r\n    setResetKey(new Date().getTime());\r\n    dispatch(getClaimsTasksProcessingList({ requestType: searchTypeCall, taskType, query: searchTerm, filterTerm: {} }));\r\n    dispatch(getClaimsTasksProcessingList({ requestType: filterTypeCall, taskType, query: searchTerm, filterTerm: {} }));\r\n  };\r\n\r\n  const resetSearch = () => {\r\n    setValue('createdOn', null);\r\n    setValue('targetDueDate', null);\r\n    dispatch(resetClaimsProcessingTaskListSearch());\r\n    setResetKey(new Date().getTime());\r\n    dispatch(getClaimsTasksProcessingList({ requestType: searchTypeCall, taskType, filterTerm: [] }));\r\n    dispatch(getClaimsTasksProcessingList({ requestType: filterTypeCall, taskType, filterTerm: [] }));\r\n  };\r\n\r\n  const handleSearch = ({ search, filters }) => {\r\n    setValue('createdOn', null);\r\n    setValue('targetDueDate', null);\r\n    const searchType = watchSearchType?.value || '';\r\n    setSearchTerm(search);\r\n    setResetKey(new Date().getTime());\r\n    if(search !== claimsTasksProcessing?.query){\r\n      dispatch(\r\n        getClaimsTasksProcessingList({\r\n          requestType: searchTypeCall,\r\n          taskType,\r\n          query: search,\r\n          direction: 'asc',\r\n          searchType: searchType,\r\n          navigation: false,\r\n        })\r\n      );\r\n      dispatch(\r\n        getClaimsTasksProcessingList({\r\n          requestType: filterTypeCall,\r\n          taskType,\r\n          query: search,\r\n          direction: 'asc',\r\n          searchType: searchType,\r\n          navigation: false,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleSearchFilter = ({ search, filters }) => {\r\n    dispatch(\r\n      getClaimsTasksProcessingList({ requestType: searchTypeCall, taskType, query: search, filterTerm: filters, navigation: false })\r\n    );\r\n  };\r\n\r\n  const handleChangePage = (newPage) => {\r\n    setNewPage(newPage);\r\n    dispatch(getClaimsTasksProcessingList({ requestType: searchTypeCall, taskType, page: newPage, query: searchTerm, filterTerm: appliedFilters || null, navigation: true }));\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (rowsPerPage) => {\r\n    dispatch(\r\n      getClaimsTasksProcessingList({ requestType: searchTypeCall, taskType, size: rowsPerPage, query: searchTerm, filterTerm: appliedFilters || null, navigation: true })\r\n    );\r\n  };\r\n\r\n  const handleSort = (by, dir) => {\r\n    dispatch(\r\n      getClaimsTasksProcessingList({\r\n        requestType: searchTypeCall,\r\n        taskType,\r\n        sortBy: by,\r\n        direction: dir,\r\n        query: searchTerm,\r\n        navigation: false,\r\n      })\r\n    );\r\n  };\r\n\r\n  const refreshTasksGrid = () => {\r\n    dispatch(getClaimsTasksProcessingList({ requestType: searchTypeCall, taskType }));\r\n    dispatch(getClaimsTasksProcessingList({ requestType: filterTypeCall, taskType }));\r\n  };\r\n\r\n  const hasTasks = utils.generic.isValidArray(claimsTasksProcessing?.items, true);\r\n\r\n  const resetNotificationFilters = () => {\r\n    setIsCheckSigningValue(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const searchType = watchSearchType?.value || '';\r\n    if (refId) {\r\n      dispatch(\r\n        getClaimsTasksProcessingList({\r\n          requestType: searchTypeCall,\r\n          taskType,\r\n          searchType: searchType,\r\n          page: newPage,\r\n          query: refId,\r\n        })\r\n      );\r\n      dispatch(\r\n        getClaimsTasksProcessingList({\r\n          requestType: filterTypeCall,\r\n          taskType,\r\n          searchType: searchType,\r\n          page: newPage,\r\n          query: refId,\r\n        })\r\n      );\r\n    }\r\n  }, [refId]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    if (taskType && !refId) {\r\n      setValue('taskType', taskType);\r\n      setIsTaskTeam(taskType === TASK_TEAM_TYPE.myTeam);\r\n      setResetKey(tableFilterFields);\r\n      setValue('createdOn', null);\r\n      setValue('targetDueDate', null);\r\n      setResetKey(new Date().getTime());\r\n      if (claimsTasksProcessing?.previousTaskType !== taskType) {\r\n        dispatch(selectedClaimsProcessingPreviousTaskType(taskType));\r\n        dispatch(resetClaimsProcessingTasksListFilters());\r\n        dispatch(resetClaimsProcessingTaskListSearch());\r\n        dispatch(getClaimsTasksProcessingList({ requestType: searchTypeCall, taskType, filterTerm: [] }));\r\n        dispatch(getClaimsTasksProcessingList({ requestType: filterTypeCall, taskType }));\r\n      }\r\n    }\r\n  }, [taskType]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const toggleCheckSigning = (event) => {\r\n    setResetKey(tableFilterFields);\r\n    setIsCheckSigningValue(event?.target?.checked);\r\n    const checkedValue = event?.target?.checked;\r\n    dispatch(udpateIsCheckSigningToggle(checkedValue));\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(selectedClaimsProcessingTaskType(taskType));\r\n  }, [taskType]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    const searchType = watchSearchType?.value || '';\r\n    if (editAdhocStatus) {\r\n      dispatch(\r\n        getClaimsTasksProcessingList({\r\n          requestType: searchTypeCall,\r\n          taskType,\r\n          searchType: searchType,\r\n          page: newPage,\r\n          query: searchTerm,\r\n        })\r\n      );\r\n      dispatch(\r\n        getClaimsTasksProcessingList({\r\n          requestType: filterTypeCall,\r\n          taskType,\r\n          searchType: searchType,\r\n          page: newPage,\r\n          query: searchTerm,\r\n        })\r\n      );\r\n    }\r\n  }, [editAdhocStatus]); // eslint-disable-line react-hooks/exhaustive-deps\r\n  const toggleFlexiColumns = (columns) => {\r\n    if (uiNavExpanded) {\r\n      dispatch(collapseNav());\r\n    }\r\n    toggleColumn(columns);\r\n  };\r\n  return (\r\n    <TasksTabView\r\n      isTaskTeam={isTaskTeam}\r\n      setValue={setValue}\r\n      hasTasks={hasTasks}\r\n      fields={fields}\r\n      notificationRefId={refId}\r\n      control={control}\r\n      taskTypeValue={taskTypeValue}\r\n      tasks={claimsTasksProcessing}\r\n      sort={{\r\n        ...claimsTasksProcessing.sort,\r\n        direction: claimsTasksProcessing.sort.direction.toLowerCase(),\r\n        type: 'numeric',\r\n      }}\r\n      columnsArray={columnsArray}\r\n      columnProps={columnProps}\r\n      tableFilterFields={tableFilterFields}\r\n      isFetchingFilters={isFetchingFilters}\r\n      isCheckSigningValue={isCheckSigningValue}\r\n      resetKey={resetKey}\r\n      multiSelectField={multiSelectField}\r\n      handlers={{\r\n        toggleColumn: toggleFlexiColumns,\r\n        resetFilter,\r\n        resetSearch,\r\n        handleSearch,\r\n        handleSearchFilter,\r\n        handleChangePage,\r\n        handleChangeRowsPerPage,\r\n        handleSort,\r\n        setTaskType,\r\n        refreshTasksGrid,\r\n        resetNotificationFilters,\r\n        toggleCheckSigning,\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}