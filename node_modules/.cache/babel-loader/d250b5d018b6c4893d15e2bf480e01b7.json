{"ast":null,"code":"import \"core-js/modules/es.array.filter\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { addLoader, authLogout, enqueueNotification, hideModal, removeLoader } from 'stores';\nimport * as utils from 'utils';\nimport get from 'lodash/get';\nimport omit from 'lodash/omit';\nimport pick from 'lodash/pick';\nimport isEmpty from 'lodash/isEmpty';\nimport numbro from 'numbro';\nexport var postPlacementAddPolicyMarket = function postPlacementAddPolicyMarket(formData) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    dispatch(postPlacementAddPolicyMarketRequest(formData));\n    dispatch(addLoader('postPlacementAddPolicyMarket'));\n    var policyId = get(formData, 'policy');\n    var market = get(formData, 'market[0]');\n    var nonPFMarket = get(formData, 'nonPFMarket');\n    var uw = get(formData, 'underwriter') || [];\n    var uwDefault = uw.filter(function (uw) {\n      return !Boolean(uw.__isNew__);\n    })[0];\n    var uwProvisional = uw.filter(function (uw) {\n      return Boolean(uw.__isNew__);\n    }).map(function (uw) {\n      return Object.assign({}, {\n        name: uw.value\n      });\n    })[0];\n    var defaultError = {\n      file: 'stores/placement.actions.addPolicyMarket',\n      message: 'Data missing for POST request'\n    };\n\n    var marketType = _objectSpread(_objectSpread({}, market && {\n      market: pick(market, ['id'])\n    }), nonPFMarket && {\n      nonPFMarket: nonPFMarket\n    });\n\n    if (!formData || !policyId || isEmpty(marketType)) {\n      dispatch(postPlacementAddPolicyMarketFailure(defaultError));\n      dispatch(enqueueNotification('notification.addMarket.fail', 'error'));\n      dispatch(hideModal());\n      dispatch(removeLoader('postPlacementAddPolicyMarket'));\n      return;\n    }\n\n    var hasQuote = formData.status || formData.premium || formData.writtenLinePercentage; // get the data for POST\n\n    var body = _objectSpread(_objectSpread(_objectSpread(_objectSpread({\n      parentPolicyId: policyId,\n      sourceSystemId: get(getState(), 'placement.selected.sourceSystemId')\n    }, marketType), uwDefault && {\n      underwriter: pick(uwDefault, ['id'])\n    }), uwProvisional && {\n      provisionalUnderwriter: pick(uwProvisional, ['name'])\n    }), hasQuote && _objectSpread(_objectSpread(_objectSpread({}, omit(formData, ['status', 'currency', 'policy', 'market', 'underwriter', 'quoteOptions'])), {}, {\n      statusId: get(formData, 'status'),\n      isLeader: formData.isLeader,\n      lineToStand: formData.lineToStand\n    }, formData.premium && {\n      premium: numbro.unformat(formData.premium)\n    }), formData.writtenLinePercentage && {\n      writtenLinePercentage: numbro.unformat(formData.writtenLinePercentage)\n    }));\n\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.edge,\n      path: 'api/policy/market',\n      data: body\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleData(json);\n    }).then(function (data) {\n      dispatch(postPlacementAddPolicyMarketSuccess(data));\n      dispatch(enqueueNotification('notification.addMarket.success', 'success'));\n      dispatch(hideModal());\n      dispatch(removeLoader('postPlacementAddPolicyMarket'));\n    })[\"catch\"](function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API post error (placement.addPolicyMarket)'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(postPlacementAddPolicyMarketFailure(err));\n      dispatch(enqueueNotification('notification.addMarket.fail', 'error'));\n      dispatch(hideModal());\n      dispatch(removeLoader('postPlacementAddPolicyMarket'));\n      return err;\n    });\n  };\n};\nexport var postPlacementAddPolicyMarketRequest = function postPlacementAddPolicyMarketRequest(formData) {\n  return {\n    type: 'PLACEMENT_ADD_POLICY_MARKET_POST_REQUEST',\n    payload: formData\n  };\n};\nexport var postPlacementAddPolicyMarketSuccess = function postPlacementAddPolicyMarketSuccess(responseData) {\n  return {\n    type: 'PLACEMENT_POLICY_MARKET_ADD_POST_SUCCESS',\n    payload: responseData\n  };\n};\nexport var postPlacementAddPolicyMarketFailure = function postPlacementAddPolicyMarketFailure(error) {\n  return {\n    type: 'PLACEMENT_ADD_POLICY_MARKET_POST_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/placement/placement.actions.addPolicyMarket.js"],"names":["addLoader","authLogout","enqueueNotification","hideModal","removeLoader","utils","get","omit","pick","isEmpty","numbro","postPlacementAddPolicyMarket","formData","dispatch","getState","auth","user","endpoint","config","vars","postPlacementAddPolicyMarketRequest","policyId","market","nonPFMarket","uw","uwDefault","filter","Boolean","__isNew__","uwProvisional","map","Object","assign","name","value","defaultError","file","message","marketType","postPlacementAddPolicyMarketFailure","hasQuote","status","premium","writtenLinePercentage","body","parentPolicyId","sourceSystemId","underwriter","provisionalUnderwriter","statusId","isLeader","lineToStand","unformat","api","post","token","accessToken","edge","path","data","then","response","handleResponse","json","handleData","postPlacementAddPolicyMarketSuccess","err","errorParams","handleError","handleUnauthorized","type","payload","responseData","error"],"mappings":"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","sourcesContent":["import { addLoader, authLogout, enqueueNotification, hideModal, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\nimport get from 'lodash/get';\r\nimport omit from 'lodash/omit';\r\nimport pick from 'lodash/pick';\r\nimport isEmpty from 'lodash/isEmpty';\r\nimport numbro from 'numbro';\r\n\r\nexport const postPlacementAddPolicyMarket = (formData) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  dispatch(postPlacementAddPolicyMarketRequest(formData));\r\n  dispatch(addLoader('postPlacementAddPolicyMarket'));\r\n\r\n  const policyId = get(formData, 'policy');\r\n  const market = get(formData, 'market[0]');\r\n  const nonPFMarket = get(formData, 'nonPFMarket');\r\n  const uw = get(formData, 'underwriter') || [];\r\n  const uwDefault = uw.filter((uw) => !Boolean(uw.__isNew__))[0];\r\n  const uwProvisional = uw\r\n    .filter((uw) => Boolean(uw.__isNew__))\r\n    .map((uw) => {\r\n      return Object.assign({}, { name: uw.value });\r\n    })[0];\r\n\r\n  const defaultError = {\r\n    file: 'stores/placement.actions.addPolicyMarket',\r\n    message: 'Data missing for POST request',\r\n  };\r\n\r\n  const marketType = {\r\n    ...(market && { market: pick(market, ['id']) }),\r\n    ...(nonPFMarket && { nonPFMarket }),\r\n  };\r\n\r\n  if (!formData || !policyId || isEmpty(marketType)) {\r\n    dispatch(postPlacementAddPolicyMarketFailure(defaultError));\r\n    dispatch(enqueueNotification('notification.addMarket.fail', 'error'));\r\n    dispatch(hideModal());\r\n    dispatch(removeLoader('postPlacementAddPolicyMarket'));\r\n    return;\r\n  }\r\n\r\n  const hasQuote = formData.status || formData.premium || formData.writtenLinePercentage;\r\n\r\n  // get the data for POST\r\n  const body = {\r\n    parentPolicyId: policyId,\r\n    sourceSystemId: get(getState(), 'placement.selected.sourceSystemId'),\r\n    ...marketType,\r\n    ...(uwDefault && { underwriter: pick(uwDefault, ['id']) }),\r\n    ...(uwProvisional && { provisionalUnderwriter: pick(uwProvisional, ['name']) }),\r\n    ...(hasQuote && {\r\n      ...omit(formData, ['status', 'currency', 'policy', 'market', 'underwriter', 'quoteOptions']),\r\n      statusId: get(formData, 'status'),\r\n      isLeader: formData.isLeader,\r\n      lineToStand: formData.lineToStand,\r\n      ...(formData.premium && { premium: numbro.unformat(formData.premium) }),\r\n      ...(formData.writtenLinePercentage && { writtenLinePercentage: numbro.unformat(formData.writtenLinePercentage) }),\r\n    }),\r\n  };\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.edge,\r\n      path: 'api/policy/market',\r\n      data: body,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleData(json))\r\n    .then((data) => {\r\n      dispatch(postPlacementAddPolicyMarketSuccess(data));\r\n      dispatch(enqueueNotification('notification.addMarket.success', 'success'));\r\n      dispatch(hideModal());\r\n      dispatch(removeLoader('postPlacementAddPolicyMarket'));\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        ...defaultError,\r\n        message: 'API post error (placement.addPolicyMarket)',\r\n      };\r\n\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(postPlacementAddPolicyMarketFailure(err));\r\n      dispatch(enqueueNotification('notification.addMarket.fail', 'error'));\r\n      dispatch(hideModal());\r\n      dispatch(removeLoader('postPlacementAddPolicyMarket'));\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const postPlacementAddPolicyMarketRequest = (formData) => {\r\n  return {\r\n    type: 'PLACEMENT_ADD_POLICY_MARKET_POST_REQUEST',\r\n    payload: formData,\r\n  };\r\n};\r\n\r\nexport const postPlacementAddPolicyMarketSuccess = (responseData) => {\r\n  return {\r\n    type: 'PLACEMENT_POLICY_MARKET_ADD_POST_SUCCESS',\r\n    payload: responseData,\r\n  };\r\n};\r\n\r\nexport const postPlacementAddPolicyMarketFailure = (error) => {\r\n  return {\r\n    type: 'PLACEMENT_ADD_POLICY_MARKET_POST_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}