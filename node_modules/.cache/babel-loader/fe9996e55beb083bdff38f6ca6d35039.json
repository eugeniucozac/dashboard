{"ast":null,"code":"import { addLoader, removeLoader } from 'stores';\nimport * as utils from 'utils';\nimport types from './types';\nexport var getdmsVersionHistory = function getdmsVersionHistory(documentId) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/claims.actions.getVersionHistory'\n    };\n    var params = {\n      documentId: documentId\n    };\n    dispatch(getVersionHistoryRequest(params));\n    dispatch(addLoader('getVersionHistory'));\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.dmsService,\n      path: 'dms/version/history',\n      params: params\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (data) {\n      dispatch(getVersionHistorySuccess(data));\n      return data;\n    }).catch(function (err) {\n      dispatch(getVersionHistoryFailure(err, defaultError));\n      return err;\n    }).finally(function () {\n      dispatch(removeLoader('getVersionHistory'));\n    });\n  };\n};\nexport var getVersionHistoryRequest = function getVersionHistoryRequest(params) {\n  return {\n    type: types.GET_DMS_VERSION_HISTORY_PENDING,\n    payload: params\n  };\n};\nexport var getVersionHistorySuccess = function getVersionHistorySuccess(data) {\n  return {\n    type: types.GET_DMS_VERSION_HISTORY_SUCCESS,\n    payload: {\n      items: data\n    }\n  };\n};\nexport var getVersionHistoryFailure = function getVersionHistoryFailure(error) {\n  return {\n    type: types.GET_DMS_VERSION_HISTORY_REJECTED,\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/dms/dms.actions.getVersionHistory.js"],"names":["addLoader","removeLoader","utils","types","getdmsVersionHistory","documentId","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","params","getVersionHistoryRequest","api","get","token","accessToken","dmsService","path","then","response","handleResponse","data","getVersionHistorySuccess","catch","err","getVersionHistoryFailure","finally","type","GET_DMS_VERSION_HISTORY_PENDING","payload","GET_DMS_VERSION_HISTORY_SUCCESS","items","error","GET_DMS_VERSION_HISTORY_REJECTED"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,YAApB,QAAwC,QAAxC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,KAAP,MAAkB,SAAlB;AAEA,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,UAAD;AAAA,SAAgB,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC1E;AAD0E,oBAEfA,QAAQ,EAFO;AAAA,QAE1DC,IAF0D,aAElEC,IAFkE,CAE1DD,IAF0D;AAAA,QAEhCE,QAFgC,aAElDC,MAFkD,CAExCC,IAFwC,CAEhCF,QAFgC;;AAI1E,QAAMG,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE;AADa,KAArB;AAGA,QAAMC,MAAM,GAAG;AAAEV,MAAAA,UAAU,EAAEA;AAAd,KAAf;AAEAC,IAAAA,QAAQ,CAACU,wBAAwB,CAACD,MAAD,CAAzB,CAAR;AACAT,IAAAA,QAAQ,CAACN,SAAS,CAAC,mBAAD,CAAV,CAAR;AAEA,WAAOE,KAAK,CAACe,GAAN,CACJC,GADI,CACA;AACHC,MAAAA,KAAK,EAAEX,IAAI,CAACY,WADT;AAEHV,MAAAA,QAAQ,EAAEA,QAAQ,CAACW,UAFhB;AAGHC,MAAAA,IAAI,EAAE,qBAHH;AAIHP,MAAAA,MAAM,EAANA;AAJG,KADA,EAOJQ,IAPI,CAOC,UAACC,QAAD;AAAA,aAActB,KAAK,CAACe,GAAN,CAAUQ,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAPD,EAQJD,IARI,CAQC,UAACG,IAAD,EAAU;AACdpB,MAAAA,QAAQ,CAACqB,wBAAwB,CAACD,IAAD,CAAzB,CAAR;AACA,aAAOA,IAAP;AACD,KAXI,EAYJE,KAZI,CAYE,UAACC,GAAD,EAAS;AACdvB,MAAAA,QAAQ,CAACwB,wBAAwB,CAACD,GAAD,EAAMhB,YAAN,CAAzB,CAAR;AACA,aAAOgB,GAAP;AACD,KAfI,EAgBJE,OAhBI,CAgBI,YAAM;AACbzB,MAAAA,QAAQ,CAACL,YAAY,CAAC,mBAAD,CAAb,CAAR;AACD,KAlBI,CAAP;AAmBD,GA/BmC;AAAA,CAA7B;AAiCP,OAAO,IAAMe,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACD,MAAD,EAAY;AAClD,SAAO;AACLiB,IAAAA,IAAI,EAAE7B,KAAK,CAAC8B,+BADP;AAELC,IAAAA,OAAO,EAAEnB;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMY,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACD,IAAD,EAAU;AAChD,SAAO;AACLM,IAAAA,IAAI,EAAE7B,KAAK,CAACgC,+BADP;AAELD,IAAAA,OAAO,EAAE;AACPE,MAAAA,KAAK,EAAEV;AADA;AAFJ,GAAP;AAMD,CAPM;AASP,OAAO,IAAMI,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACO,KAAD,EAAW;AACjD,SAAO;AACLL,IAAAA,IAAI,EAAE7B,KAAK,CAACmC,gCADP;AAELJ,IAAAA,OAAO,EAAEG;AAFJ,GAAP;AAID,CALM","sourcesContent":["import { addLoader, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nimport types from './types';\r\n\r\nexport const getdmsVersionHistory = (documentId) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } } } = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.getVersionHistory',\r\n  };\r\n  const params = { documentId: documentId };\r\n\r\n  dispatch(getVersionHistoryRequest(params));\r\n  dispatch(addLoader('getVersionHistory'));\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.dmsService,\r\n      path: 'dms/version/history',\r\n      params,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((data) => {\r\n      dispatch(getVersionHistorySuccess(data));\r\n      return data;\r\n    })\r\n    .catch((err) => {\r\n      dispatch(getVersionHistoryFailure(err, defaultError));\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('getVersionHistory'));\r\n    });\r\n};\r\n\r\nexport const getVersionHistoryRequest = (params) => {\r\n  return {\r\n    type: types.GET_DMS_VERSION_HISTORY_PENDING,\r\n    payload: params,\r\n  };\r\n};\r\n\r\nexport const getVersionHistorySuccess = (data) => {\r\n  return {\r\n    type: types.GET_DMS_VERSION_HISTORY_SUCCESS,\r\n    payload: {\r\n      items: data,\r\n    },\r\n  };\r\n};\r\n\r\nexport const getVersionHistoryFailure = (error) => {\r\n  return {\r\n    type: types.GET_DMS_VERSION_HISTORY_REJECTED,\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}