{"ast":null,"code":"// app\nimport { authLogout, removeLoader } from 'stores';\nimport * as utils from 'utils';\nexport var getCoverageDefinition = function getCoverageDefinition(product, type) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/risk.actions.getCoverageDefinition'\n    };\n    dispatch(getCoverageDefinitionRequest(type));\n\n    if (!product || !type) {\n      dispatch(getCoverageDefinitionFailure(defaultError));\n      dispatch(removeLoader('getCoverageDefinition'));\n      return;\n    }\n\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.auth,\n      path: \"api/v1/products/\".concat(product, \"?type=\").concat(type)\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleData(json);\n    }).then(function (data) {\n      dispatch(getCoverageDefinitionSuccess(product, data));\n    }).catch(function (err) {\n      utils.api.handleError(err, defaultError);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(getCoverageDefinitionFailure(err));\n      return err;\n    });\n  };\n};\nexport var getCoverageDefinitionRequest = function getCoverageDefinitionRequest(type) {\n  return {\n    type: 'COVERAGE_DEFINITIONS_GET_REQUEST',\n    payload: type\n  };\n};\nexport var getCoverageDefinitionSuccess = function getCoverageDefinitionSuccess(product, data) {\n  return {\n    type: 'COVERAGE_DEFINITIONS_GET_SUCCESS',\n    payload: {\n      product: product,\n      definition: data.product\n    }\n  };\n};\nexport var getCoverageDefinitionFailure = function getCoverageDefinitionFailure(error) {\n  return {\n    type: 'COVERAGE_DEFINITIONS_GET_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/risk/risk.actions.getCoverageDefinition.js"],"names":["authLogout","removeLoader","utils","getCoverageDefinition","product","type","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","getCoverageDefinitionRequest","getCoverageDefinitionFailure","api","get","token","accessToken","path","then","response","handleResponse","json","handleData","data","getCoverageDefinitionSuccess","catch","err","handleError","handleUnauthorized","payload","definition","error"],"mappings":"AAAA;AACA,SAASA,UAAT,EAAqBC,YAArB,QAAyC,QAAzC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,OAAD,EAAUC,IAAV;AAAA,SAAmB,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC9E;AAD8E,oBAEnBA,QAAQ,EAFW;AAAA,QAE9DC,IAF8D,aAEtEC,IAFsE,CAE9DD,IAF8D;AAAA,QAEpCE,QAFoC,aAEtDC,MAFsD,CAE5CC,IAF4C,CAEpCF,QAFoC;;AAI9E,QAAMG,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE;AADa,KAArB;AAIAR,IAAAA,QAAQ,CAACS,4BAA4B,CAACV,IAAD,CAA7B,CAAR;;AAEA,QAAI,CAACD,OAAD,IAAY,CAACC,IAAjB,EAAuB;AACrBC,MAAAA,QAAQ,CAACU,4BAA4B,CAACH,YAAD,CAA7B,CAAR;AACAP,MAAAA,QAAQ,CAACL,YAAY,CAAC,uBAAD,CAAb,CAAR;AACA;AACD;;AAED,WAAOC,KAAK,CAACe,GAAN,CACJC,GADI,CACA;AACHC,MAAAA,KAAK,EAAEX,IAAI,CAACY,WADT;AAEHV,MAAAA,QAAQ,EAAEA,QAAQ,CAACF,IAFhB;AAGHa,MAAAA,IAAI,4BAAqBjB,OAArB,mBAAqCC,IAArC;AAHD,KADA,EAOJiB,IAPI,CAOC,UAACC,QAAD;AAAA,aAAcrB,KAAK,CAACe,GAAN,CAAUO,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAPD,EAQJD,IARI,CAQC,UAACG,IAAD;AAAA,aAAUvB,KAAK,CAACe,GAAN,CAAUS,UAAV,CAAqBD,IAArB,CAAV;AAAA,KARD,EASJH,IATI,CASC,UAACK,IAAD,EAAU;AACdrB,MAAAA,QAAQ,CAACsB,4BAA4B,CAACxB,OAAD,EAAUuB,IAAV,CAA7B,CAAR;AACD,KAXI,EAYJE,KAZI,CAYE,UAACC,GAAD,EAAS;AACd5B,MAAAA,KAAK,CAACe,GAAN,CAAUc,WAAV,CAAsBD,GAAtB,EAA2BjB,YAA3B;AACAX,MAAAA,KAAK,CAACe,GAAN,CAAUe,kBAAV,CAA6BF,GAA7B,EAAkCxB,QAAlC,EAA4CN,UAA5C;AACAM,MAAAA,QAAQ,CAACU,4BAA4B,CAACc,GAAD,CAA7B,CAAR;AACA,aAAOA,GAAP;AACD,KAjBI,CAAP;AAkBD,GAlCoC;AAAA,CAA9B;AAoCP,OAAO,IAAMf,4BAA4B,GAAG,SAA/BA,4BAA+B,CAACV,IAAD,EAAU;AACpD,SAAO;AACLA,IAAAA,IAAI,EAAE,kCADD;AAEL4B,IAAAA,OAAO,EAAE5B;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMuB,4BAA4B,GAAG,SAA/BA,4BAA+B,CAACxB,OAAD,EAAUuB,IAAV,EAAmB;AAC7D,SAAO;AACLtB,IAAAA,IAAI,EAAE,kCADD;AAEL4B,IAAAA,OAAO,EAAE;AAAE7B,MAAAA,OAAO,EAAPA,OAAF;AAAW8B,MAAAA,UAAU,EAAEP,IAAI,CAACvB;AAA5B;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMY,4BAA4B,GAAG,SAA/BA,4BAA+B,CAACmB,KAAD,EAAW;AACrD,SAAO;AACL9B,IAAAA,IAAI,EAAE,kCADD;AAEL4B,IAAAA,OAAO,EAAEE;AAFJ,GAAP;AAID,CALM","sourcesContent":["// app\r\nimport { authLogout, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const getCoverageDefinition = (product, type) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } } } = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/risk.actions.getCoverageDefinition',\r\n  };\r\n\r\n  dispatch(getCoverageDefinitionRequest(type));\r\n\r\n  if (!product || !type) {\r\n    dispatch(getCoverageDefinitionFailure(defaultError));\r\n    dispatch(removeLoader('getCoverageDefinition'));\r\n    return;\r\n  }\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.auth,\r\n      path: `api/v1/products/${product}?type=${type}`,\r\n    })\r\n\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleData(json))\r\n    .then((data) => {\r\n      dispatch(getCoverageDefinitionSuccess(product, data));\r\n    })\r\n    .catch((err) => {\r\n      utils.api.handleError(err, defaultError);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(getCoverageDefinitionFailure(err));\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const getCoverageDefinitionRequest = (type) => {\r\n  return {\r\n    type: 'COVERAGE_DEFINITIONS_GET_REQUEST',\r\n    payload: type,\r\n  };\r\n};\r\n\r\nexport const getCoverageDefinitionSuccess = (product, data) => {\r\n  return {\r\n    type: 'COVERAGE_DEFINITIONS_GET_SUCCESS',\r\n    payload: { product, definition: data.product },\r\n  };\r\n};\r\n\r\nexport const getCoverageDefinitionFailure = (error) => {\r\n  return {\r\n    type: 'COVERAGE_DEFINITIONS_GET_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}