{"ast":null,"code":"import _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\OpeningMemo\\\\OpeningMemo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get'; // app\n\nimport { getFilesList, showModal, postOpeningMemoPDF, selectUser, getPolicy } from 'stores';\nimport { OpeningMemoView } from './OpeningMemo.view';\nimport { downloadPDF, savePDF } from './OpeningMemo.pdf';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nOpeningMemo.propTypes = {\n  routeWithId: PropTypes.bool.isRequired,\n  route: PropTypes.string.isRequired,\n  origin: PropTypes.shape({\n    path: PropTypes.string.isRequired,\n    id: PropTypes.number\n  })\n};\nOpeningMemo.defaultProps = {\n  routeWithId: false\n};\nexport default function OpeningMemo(_ref) {\n  _s();\n\n  var routeWithId = _ref.routeWithId,\n      route = _ref.route,\n      origin = _ref.origin;\n  var dispatch = useDispatch();\n  var user = useSelector(selectUser);\n  var configVars = useSelector(function (state) {\n    return state.config.vars;\n  });\n  var openingMemoSelected = useSelector(function (state) {\n    return state.openingMemo.selected;\n  });\n  var referenceData = useSelector(function (state) {\n    return state.referenceData;\n  }) || [];\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      umrFiles = _useState2[0],\n      setUmrFiles = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      hasXbPolicies = _useState4[0],\n      setHasXbPolicies = _useState4[1];\n\n  var isApproved = utils.openingMemo.isApproved(openingMemoSelected) && hasXbPolicies;\n  useEffect(function () {\n    // fetch XB policies associated with the UMR(s) listed on the Opening Memo\n    if (openingMemoSelected && openingMemoSelected.uniqueMarketReference) {\n      dispatch(getPolicy(openingMemoSelected.uniqueMarketReference, false)).then(function (response) {\n        setHasXbPolicies(utils.generic.isValidArray(response, true));\n      });\n    } // DEV ONLY!!!\n    // temporarily prevent whitespace call\n\n\n    if (utils.app.isDevelopment(configVars)) {\n      if (!openingMemoSelected || !openingMemoSelected.uniqueMarketReference) return;\n\n      var getUmrFileList = /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return dispatch(getFilesList(openingMemoSelected.uniqueMarketReference));\n\n                case 2:\n                  return _context.abrupt(\"return\", _context.sent);\n\n                case 3:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function getUmrFileList() {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n\n      getUmrFileList().then(function (data) {\n        setUmrFiles(data);\n      });\n    }\n  }, [openingMemoSelected.uniqueMarketReference] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  var popoverItems = [{\n    id: 'addUMR',\n    label: utils.string.t('openingMemo.addEditUmr.title'),\n    callback: function callback() {\n      return handleAddEditUmr();\n    }\n  }].concat(_toConsumableArray(utils.generic.isValidArray(umrFiles, true) ? [{\n    id: 'downloadWhitespaceMrc',\n    label: utils.string.t('openingMemo.whitespace.downloadMrc'),\n    callback: function callback() {\n      return handleDownloadWhitespaceMRC();\n    }\n  }] : []), [{\n    id: 'downloadOpeningMemo',\n    label: utils.string.t('openingMemo.downloadOpeningMemo'),\n    callback: function callback() {\n      return handleDownloadOpeningMemo();\n    }\n  }], _toConsumableArray(utils.user.isBroker(user) ? [{\n    id: 'uploadOpeningMemo',\n    label: utils.string.t('openingMemo.upload.btn'),\n    disabled: !isApproved,\n    tooltip: !isApproved ? !hasXbPolicies ? utils.string.t('openingMemo.upload.noXbPolicies') : utils.string.t('openingMemo.upload.notApproved') : null,\n    callback: function callback() {\n      return handleUploadOpeningMemo();\n    }\n  }] : []));\n\n  var handleDownloadWhitespaceMRC = function handleDownloadWhitespaceMRC() {\n    dispatch(showModal({\n      component: 'DOWNLOAD_FILES',\n      props: {\n        title: 'openingMemo.whitespace.downloadMrc',\n        fullWidth: true,\n        maxWidth: 'sm',\n        disableAutoFocus: true,\n        componentProps: {\n          umrIds: umrFiles\n        }\n      }\n    }));\n  };\n\n  var handleDownloadOpeningMemo = function handleDownloadOpeningMemo() {\n    downloadPDF({\n      openingMemo: openingMemoSelected,\n      departmentName: utils.placement.getDepartmentName(openingMemoSelected, referenceData.departments),\n      referenceData: referenceData\n    });\n  };\n\n  var handleUploadOpeningMemo = function handleUploadOpeningMemo() {\n    var pdf = savePDF({\n      openingMemo: openingMemoSelected,\n      departmentName: utils.placement.getDepartmentName(openingMemoSelected, referenceData.departments),\n      referenceData: referenceData\n    });\n\n    if (isApproved) {\n      dispatch(postOpeningMemoPDF(openingMemoSelected.id, pdf));\n    }\n  };\n\n  var handleAddEditUmr = function handleAddEditUmr() {\n    var umr = openingMemoSelected ? get(openingMemoSelected, 'uniqueMarketReference', '') : '';\n    dispatch(showModal({\n      component: 'ADD_EDIT_UMR',\n      props: {\n        title: 'openingMemo.addEditUmr.title',\n        subtitle: umr.replace(/,/g, ', '),\n        fullWidth: true,\n        maxWidth: 'xs',\n        disableAutoFocus: true,\n        componentProps: {\n          origin: origin,\n          openingMemo: openingMemoSelected\n        }\n      }\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(OpeningMemoView, {\n    origin: origin,\n    routeWithId: routeWithId,\n    route: route,\n    popoverItems: popoverItems\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 10\n  }, this);\n}\n\n_s(OpeningMemo, \"FRolHIqq5JbkNvZJT9ueJkPzTTE=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = OpeningMemo;\n\nvar _c;\n\n$RefreshReg$(_c, \"OpeningMemo\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/OpeningMemo/OpeningMemo.js"],"names":["React","useEffect","useState","useDispatch","useSelector","PropTypes","get","getFilesList","showModal","postOpeningMemoPDF","selectUser","getPolicy","OpeningMemoView","downloadPDF","savePDF","utils","OpeningMemo","propTypes","routeWithId","bool","isRequired","route","string","origin","shape","path","id","number","defaultProps","dispatch","user","configVars","state","config","vars","openingMemoSelected","openingMemo","selected","referenceData","umrFiles","setUmrFiles","hasXbPolicies","setHasXbPolicies","isApproved","uniqueMarketReference","then","response","generic","isValidArray","app","isDevelopment","getUmrFileList","data","popoverItems","label","t","callback","handleAddEditUmr","handleDownloadWhitespaceMRC","handleDownloadOpeningMemo","isBroker","disabled","tooltip","handleUploadOpeningMemo","component","props","title","fullWidth","maxWidth","disableAutoFocus","componentProps","umrIds","departmentName","placement","getDepartmentName","departments","pdf","umr","subtitle","replace"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport get from 'lodash/get';\r\n\r\n// app\r\nimport { getFilesList, showModal, postOpeningMemoPDF, selectUser, getPolicy } from 'stores';\r\nimport { OpeningMemoView } from './OpeningMemo.view';\r\nimport { downloadPDF, savePDF } from './OpeningMemo.pdf';\r\nimport * as utils from 'utils';\r\n\r\nOpeningMemo.propTypes = {\r\n  routeWithId: PropTypes.bool.isRequired,\r\n  route: PropTypes.string.isRequired,\r\n  origin: PropTypes.shape({\r\n    path: PropTypes.string.isRequired,\r\n    id: PropTypes.number,\r\n  }),\r\n};\r\n\r\nOpeningMemo.defaultProps = {\r\n  routeWithId: false,\r\n};\r\n\r\nexport default function OpeningMemo({ routeWithId, route, origin }) {\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(selectUser);\r\n  const configVars = useSelector((state) => state.config.vars);\r\n  const openingMemoSelected = useSelector((state) => state.openingMemo.selected);\r\n  const referenceData = useSelector((state) => state.referenceData) || [];\r\n  const [umrFiles, setUmrFiles] = useState([]);\r\n  const [hasXbPolicies, setHasXbPolicies] = useState(false);\r\n  const isApproved = utils.openingMemo.isApproved(openingMemoSelected) && hasXbPolicies;\r\n\r\n  useEffect(\r\n    () => {\r\n      // fetch XB policies associated with the UMR(s) listed on the Opening Memo\r\n      if (openingMemoSelected && openingMemoSelected.uniqueMarketReference) {\r\n        dispatch(getPolicy(openingMemoSelected.uniqueMarketReference, false)).then((response) => {\r\n          setHasXbPolicies(utils.generic.isValidArray(response, true));\r\n        });\r\n      }\r\n\r\n      // DEV ONLY!!!\r\n      // temporarily prevent whitespace call\r\n      if (utils.app.isDevelopment(configVars)) {\r\n        if (!openingMemoSelected || !openingMemoSelected.uniqueMarketReference) return;\r\n\r\n        const getUmrFileList = async () => {\r\n          return await dispatch(getFilesList(openingMemoSelected.uniqueMarketReference));\r\n        };\r\n\r\n        getUmrFileList().then((data) => {\r\n          setUmrFiles(data);\r\n        });\r\n      }\r\n    },\r\n    [openingMemoSelected.uniqueMarketReference] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  const popoverItems = [\r\n    {\r\n      id: 'addUMR',\r\n      label: utils.string.t('openingMemo.addEditUmr.title'),\r\n      callback: () => handleAddEditUmr(),\r\n    },\r\n    ...(utils.generic.isValidArray(umrFiles, true)\r\n      ? [\r\n          {\r\n            id: 'downloadWhitespaceMrc',\r\n            label: utils.string.t('openingMemo.whitespace.downloadMrc'),\r\n            callback: () => handleDownloadWhitespaceMRC(),\r\n          },\r\n        ]\r\n      : []),\r\n    {\r\n      id: 'downloadOpeningMemo',\r\n      label: utils.string.t('openingMemo.downloadOpeningMemo'),\r\n      callback: () => handleDownloadOpeningMemo(),\r\n    },\r\n    ...(utils.user.isBroker(user)\r\n      ? [\r\n          {\r\n            id: 'uploadOpeningMemo',\r\n            label: utils.string.t('openingMemo.upload.btn'),\r\n            disabled: !isApproved,\r\n            tooltip: !isApproved\r\n              ? !hasXbPolicies\r\n                ? utils.string.t('openingMemo.upload.noXbPolicies')\r\n                : utils.string.t('openingMemo.upload.notApproved')\r\n              : null,\r\n            callback: () => handleUploadOpeningMemo(),\r\n          },\r\n        ]\r\n      : []),\r\n  ];\r\n\r\n  const handleDownloadWhitespaceMRC = () => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'DOWNLOAD_FILES',\r\n        props: {\r\n          title: 'openingMemo.whitespace.downloadMrc',\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            umrIds: umrFiles,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleDownloadOpeningMemo = () => {\r\n    downloadPDF({\r\n      openingMemo: openingMemoSelected,\r\n      departmentName: utils.placement.getDepartmentName(openingMemoSelected, referenceData.departments),\r\n      referenceData,\r\n    });\r\n  };\r\n\r\n  const handleUploadOpeningMemo = () => {\r\n    const pdf = savePDF({\r\n      openingMemo: openingMemoSelected,\r\n      departmentName: utils.placement.getDepartmentName(openingMemoSelected, referenceData.departments),\r\n      referenceData,\r\n    });\r\n\r\n    if (isApproved) {\r\n      dispatch(postOpeningMemoPDF(openingMemoSelected.id, pdf));\r\n    }\r\n  };\r\n\r\n  const handleAddEditUmr = () => {\r\n    const umr = openingMemoSelected ? get(openingMemoSelected, 'uniqueMarketReference', '') : '';\r\n\r\n    dispatch(\r\n      showModal({\r\n        component: 'ADD_EDIT_UMR',\r\n        props: {\r\n          title: 'openingMemo.addEditUmr.title',\r\n          subtitle: umr.replace(/,/g, ', '),\r\n          fullWidth: true,\r\n          maxWidth: 'xs',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            origin,\r\n            openingMemo: openingMemoSelected,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  return <OpeningMemoView origin={origin} routeWithId={routeWithId} route={route} popoverItems={popoverItems} />;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}