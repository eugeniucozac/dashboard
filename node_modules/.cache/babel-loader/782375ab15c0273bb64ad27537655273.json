{"ast":null,"code":"import _defineProperty from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ProcessingInstructionsDetails\\\\ProcessingInstructionsDetails.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport get from 'lodash/get';\nimport config from 'config';\nimport moment from 'moment'; // app\n\nimport ProcessingInstructionsDetailsView from './ProcessingInstructionsDetails.view';\nimport { selectUser, showModal, updateProcessingInstruction, removePremiumTaxSignedLinesDocument, addLoader, storeProcessingInstructionDocuments, viewDocumentsDownload, setRiskRefsUploadWizardExcelExtract, setRiskRefsUploadWizardHeaderMap, submitExcelUploadedRiskRefs, updatePiFinancialCheckList, savePIRetainedBrokerageAmountData } from 'stores';\nimport * as constants from 'consts';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nProcessingInstructionsDetails.propTypes = {\n  instruction: PropTypes.object.isRequired,\n  handlers: PropTypes.shape({\n    back: PropTypes.func.isRequired,\n    next: PropTypes.func.isRequired\n  }).isRequired\n};\nexport default function ProcessingInstructionsDetails(_ref) {\n  _s();\n\n  var _instruction$details, _instruction$details2, _instruction$details3, _instruction$details4, _instruction$details5, _instruction$details6, _instruction$details7, _instruction$details8, _instruction$riskRefe;\n\n  var instruction = _ref.instruction,\n      handlers = _ref.handlers,\n      childRef = _ref.childRef;\n  var dispatch = useDispatch();\n  var user = useSelector(selectUser);\n  var documents = useSelector(function (state) {\n    return get(state, 'processingInstructions.documents');\n  }) || {};\n  var getFinancialCheckListTableDetails = useSelector(function (state) {\n    return get(state, 'processingInstructions.financialCheckList');\n  }) || {};\n  var getRetainedBrokerageAmountList = useSelector(function (state) {\n    return get(state, 'processingInstructions.RetainedBrokerageAmountList');\n  }) || {};\n  var excelRiskRefs = useSelector(function (state) {\n    return get(state, 'processingInstructions.excelRiskRefs');\n  }) || [];\n  var refDataCurrencies = useSelector(function (state) {\n    return get(state, 'referenceData.currencyCodes');\n  }) || [];\n  var isDraft = utils.processingInstructions.status.isDraft(instruction === null || instruction === void 0 ? void 0 : instruction.statusId);\n  var isRejectedDraft = utils.processingInstructions.status.isRejectedDraft(instruction === null || instruction === void 0 ? void 0 : instruction.statusId);\n  var isSubmittedAuthorisedSignatory = utils.processingInstructions.status.isSubmittedAuthorisedSignatory(instruction === null || instruction === void 0 ? void 0 : instruction.statusId);\n  var isReopened = utils.processingInstructions.status.isReopened(instruction === null || instruction === void 0 ? void 0 : instruction.statusId);\n  var userHasWritePermission = utils.app.access.feature('processingInstructions.processingInstructions', ['create', 'update'], user);\n  var userHasApproverAccess = utils.app.access.feature('processingInstructions.approverChecklist', ['create', 'update'], user);\n  var isCheckboxesEditable = userHasApproverAccess && isSubmittedAuthorisedSignatory;\n\n  var _useState = useState(getFinancialCheckListTableDetails),\n      _useState2 = _slicedToArray(_useState, 2),\n      financialCheckListTable = _useState2[0],\n      setFinancialCheckListTable = _useState2[1];\n\n  var isEditable = userHasWritePermission && (isDraft || isRejectedDraft || isReopened);\n  var isReadOnly = !isEditable;\n  var referenceData = useSelector(function (state) {\n    return state.referenceData;\n  });\n  var retainedBrokerageAmountData = utils.form.getSelectOptions('premiumCurrency', _objectSpread(_objectSpread({}, referenceData), {}, {\n    premiumCurrency: utils.processingInstructions.getRetainedBrokerageCurrencies()\n  }));\n\n  var _useState3 = useState(getRetainedBrokerageAmountList),\n      _useState4 = _slicedToArray(_useState3, 2),\n      retainedBrokerageAmountList = _useState4[0],\n      setRetainedBrokerageAmountList = _useState4[1];\n\n  useEffect(function () {\n    if (utils.generic.isValidArray(excelRiskRefs, true)) {\n      var updatedPiRiskRefsFromExcelRiskRefs = financialCheckListTable === null || financialCheckListTable === void 0 ? void 0 : financialCheckListTable.map(function (piRiskRef) {\n        var matchedRiskRef = excelRiskRefs === null || excelRiskRefs === void 0 ? void 0 : excelRiskRefs.find(function (exRiskRef) {\n          return (exRiskRef === null || exRiskRef === void 0 ? void 0 : exRiskRef.riskReference) === (piRiskRef === null || piRiskRef === void 0 ? void 0 : piRiskRef.riskReference);\n        });\n\n        if (matchedRiskRef) {\n          return _objectSpread(_objectSpread({}, piRiskRef), matchedRiskRef);\n        }\n\n        return piRiskRef;\n      });\n      setFinancialCheckListTable(updatedPiRiskRefsFromExcelRiskRefs);\n    }\n  }, [excelRiskRefs]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var toggleOptions = [{\n    label: utils.string.t('app.yes'),\n    value: 1\n  }, {\n    label: utils.string.t('app.no'),\n    value: 0\n  }, {\n    label: utils.string.t('app.na'),\n    value: -1\n  }];\n  var fields = [{\n    name: 'highPriority',\n    type: 'checkbox',\n    value: instruction === null || instruction === void 0 ? void 0 : (_instruction$details = instruction.details) === null || _instruction$details === void 0 ? void 0 : _instruction$details.highPriority,\n    label: utils.string.t('processingInstructions.processingInstructionsForEndFaBorder.fields.highPriority'),\n    muiComponentProps: {\n      disabled: isReadOnly\n    }\n  }, {\n    name: 'frontEndSendDocs',\n    type: 'checkbox',\n    value: instruction === null || instruction === void 0 ? void 0 : (_instruction$details2 = instruction.details) === null || _instruction$details2 === void 0 ? void 0 : _instruction$details2.frontEndSendDocs,\n    label: utils.string.t('processingInstructions.processingInstructionsForEndFaBorder.fields.frontEndSendDocuments'),\n    muiComponentProps: {\n      disabled: isReadOnly\n    }\n  }, {\n    name: 'premiumTaxCalculationSheetAttachedNumber',\n    type: 'toggle',\n    // value: getToggleValue(utils.processingInstructions.getFinancialField(instruction, 'premiumTaxCalculationSheetAttached')?.numberValue),\n    value: instruction === null || instruction === void 0 ? void 0 : (_instruction$details3 = instruction.details) === null || _instruction$details3 === void 0 ? void 0 : _instruction$details3.premiumTaxCalculationSheetAttached,\n    options: toggleOptions,\n    buttonGroupProps: {\n      exclusive: true,\n      disabled: isReadOnly\n    }\n  }, {\n    name: 'premiumTaxCalculationSheetAttachedCheckbox',\n    type: 'checkbox',\n    // value: utils.processingInstructions.getFinancialField(instruction, 'premiumTaxCalculationSheetAttached')\n    //   ?.approvedByAuthorisedSignatory,\n    value: instruction === null || instruction === void 0 ? void 0 : (_instruction$details4 = instruction.details) === null || _instruction$details4 === void 0 ? void 0 : _instruction$details4.premiumTaxAuthorisedSignatory,\n    disabled: !isCheckboxesEditable\n  }, {\n    name: 'signedLinesCalculationSheetAttachedNumber',\n    type: 'toggle',\n    // value: getToggleValue(\n    //   utils.processingInstructions.getFinancialField(instruction, 'signedLinesCalculationSheetAttached')?.numberValue\n    // ),\n    value: instruction === null || instruction === void 0 ? void 0 : (_instruction$details5 = instruction.details) === null || _instruction$details5 === void 0 ? void 0 : _instruction$details5.signedLinesCalculationSheetAttached,\n    options: toggleOptions,\n    buttonGroupProps: {\n      exclusive: true,\n      disabled: isReadOnly\n    }\n  }, {\n    name: 'signedLinesCalculationSheetAttachedCheckbox',\n    type: 'checkbox',\n    // value: utils.processingInstructions.getFinancialField(instruction, 'signedLinesCalculationSheetAttached')\n    //   ?.approvedByAuthorisedSignatory,\n    value: instruction === null || instruction === void 0 ? void 0 : (_instruction$details6 = instruction.details) === null || _instruction$details6 === void 0 ? void 0 : _instruction$details6.signedLinesAuthorisedSignatory,\n    disabled: !isCheckboxesEditable\n  }, {\n    name: 'financialGridCheckbox',\n    type: 'checkbox',\n    value: instruction === null || instruction === void 0 ? void 0 : (_instruction$details7 = instruction.details) === null || _instruction$details7 === void 0 ? void 0 : _instruction$details7.riskReferencesAuthorisedSignatory,\n    disabled: !isCheckboxesEditable\n  }, {\n    name: 'notes',\n    label: utils.string.t('processingInstructions.details.notes'),\n    type: 'textarea',\n    value: (instruction === null || instruction === void 0 ? void 0 : (_instruction$details8 = instruction.details) === null || _instruction$details8 === void 0 ? void 0 : _instruction$details8.notes) || '',\n    muiComponentProps: {\n      inputProps: {\n        maxLength: 4000\n      },\n      multiline: true,\n      minRows: 4,\n      maxRows: 8,\n      disabled: isReadOnly\n    }\n  }];\n  var selectedRiskRef = instruction === null || instruction === void 0 ? void 0 : (_instruction$riskRefe = instruction.riskReferences) === null || _instruction$riskRefe === void 0 ? void 0 : _instruction$riskRefe.find(function (r) {\n    return r.leadPolicy;\n  });\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      defaultValues = _useState6[0],\n      setDefaultValues = _useState6[1];\n\n  var handleSave = function handleSave() {\n    var _childRef$current, _childRef$current$pro;\n\n    var formValues = (childRef === null || childRef === void 0 ? void 0 : (_childRef$current = childRef.current) === null || _childRef$current === void 0 ? void 0 : (_childRef$current$pro = _childRef$current.props) === null || _childRef$current$pro === void 0 ? void 0 : _childRef$current$pro.values) || {};\n\n    var updatedInstruction = _objectSpread(_objectSpread({}, instruction), {}, {\n      details: _objectSpread(_objectSpread({}, instruction.details), {}, {\n        highPriority: formValues.highPriority,\n        frontEndSendDocs: formValues.frontEndSendDocs,\n        notes: formValues.notes,\n        premiumTaxCalculationSheetAttached: formValues.premiumTaxCalculationSheetAttachedNumber,\n        // update exact key name which is used in API\n        premiumTaxAuthorisedSignatory: formValues.premiumTaxCalculationSheetAttachedCheckbox,\n        // update exact key name which is used in API\n        signedLinesCalculationSheetAttached: formValues.signedLinesCalculationSheetAttachedNumber,\n        // update exact key name which is used in API\n        signedLinesAuthorisedSignatory: formValues.signedLinesCalculationSheetAttachedCheckbox,\n        // update exact key name which is used in API\n        riskReferencesAuthorisedSignatory: formValues.financialGridCheckbox\n      }),\n      financialChecklistDetails: financialCheckListTable === null || financialCheckListTable === void 0 ? void 0 : financialCheckListTable.map(function (riskRef) {\n        var isValidDate = moment(riskRef.ppwOrPpcDate).isValid();\n        var ppwOrPpcDate = isValidDate ? moment(riskRef.ppwOrPpcDate).format('YYYY-MM-DD') : '';\n        return {\n          instructionBrokerageDetailsId: riskRef.instructionBrokerageDetailsId,\n          riskReference: riskRef.riskReference,\n          grossPremiumAmount: riskRef.grossPremiumAmount,\n          slipOrder: riskRef.slipOrder,\n          totalBrokerage: riskRef.totalBrokerage,\n          clientDiscount: riskRef.clientDiscount,\n          thirdPartyCommissionSharing: riskRef.thirdPartyCommissionSharing,\n          thirdPartyName: riskRef.thirdPartyName,\n          pfInternalCommissionSharing: riskRef.pfInternalCommissionSharing,\n          pfInternalDepartment: riskRef.pfInternalDepartment,\n          retainedBrokerage: riskRef.retainedBrokerage,\n          retainedBrokerageCurrencyCode: riskRef.retainedBrokerageCurrencyCode,\n          fees: riskRef.fees,\n          otherDeductions: riskRef.otherDeductions,\n          settlementCurrency: riskRef.settlementCurrency,\n          paymentBasis: riskRef.paymentBasis,\n          ppwOrPpc: riskRef.ppwOrPpc,\n          ppwOrPpcDate: ppwOrPpcDate\n        };\n      })\n    });\n\n    setFinancialCheckListTable(function (prevState) {\n      return prevState.map(function (dd) {\n        return _objectSpread(_objectSpread({}, dd), {}, {\n          isRowSelected: false\n        });\n      });\n    });\n    dispatch(updateProcessingInstruction(updatedInstruction, formValues));\n  };\n\n  var handleCancel = function handleCancel() {\n    var _childRef$current2, _childRef$current2$pr, _instruction$financia;\n\n    var reset = childRef === null || childRef === void 0 ? void 0 : (_childRef$current2 = childRef.current) === null || _childRef$current2 === void 0 ? void 0 : (_childRef$current2$pr = _childRef$current2.props) === null || _childRef$current2$pr === void 0 ? void 0 : _childRef$current2$pr.resetFunc;\n\n    if (utils.generic.isFunction(reset)) {\n      reset(defaultValues, {\n        keepDirty: false\n      });\n    }\n\n    var financialCheckListDBList = instruction === null || instruction === void 0 ? void 0 : (_instruction$financia = instruction.financialChecklistDetails) === null || _instruction$financia === void 0 ? void 0 : _instruction$financia.map(function (element, index) {\n      return _objectSpread(_objectSpread({}, element), {}, {\n        id: index\n      });\n    });\n    dispatch(updatePiFinancialCheckList(financialCheckListDBList));\n    setFinancialCheckListTable(financialCheckListDBList);\n  };\n\n  useEffect(function () {\n    setRetainedBrokerageAmountList(retainedBrokerageAmountData);\n    var financialList = financialCheckListTable; // Calculate Retain Brokerage value & Total column for every row\n\n    financialList === null || financialList === void 0 ? void 0 : financialList.map(function (element) {\n      var _refDataCurrencies$fi, _constants$PAYMENT_BA, _constants$PPW_PPC_OP, _retainedBrokerageAmo;\n\n      var amount = utils.processingInstructions.getRetainedBrokerageValue(element.grossPremiumAmount, element.slipOrder, element.retainedBrokerage);\n      var brokerage = utils.processingInstructions.getRetainedBrokerageConvertedValue(element.retainedBrokerageCurrencyCode || constants.CURRENCY_USD, amount);\n      return element.retainedBrokerageAmount = amount, element.convertedBrokerage = brokerage, element.settlementCurrencyName = ((_refDataCurrencies$fi = refDataCurrencies.find(function (a) {\n        return a.currencyCodeID === parseInt(element.settlementCurrency);\n      })) === null || _refDataCurrencies$fi === void 0 ? void 0 : _refDataCurrencies$fi.currencyCd) || '', element.paymentBasisName = ((_constants$PAYMENT_BA = constants.PAYMENT_BASIS_OPTIONS.find(function (a) {\n        return a.code === element.paymentBasis;\n      })) === null || _constants$PAYMENT_BA === void 0 ? void 0 : _constants$PAYMENT_BA.name) || '', element.ppwOrPpcName = ((_constants$PPW_PPC_OP = constants.PPW_PPC_OPTIONS.find(function (a) {\n        return a.code === element.ppwOrPpc;\n      })) === null || _constants$PPW_PPC_OP === void 0 ? void 0 : _constants$PPW_PPC_OP.name) || '', element.retainedBrokerageCurrencyCodeName = ((_retainedBrokerageAmo = retainedBrokerageAmountData.find(function (a) {\n        return a.id === element.retainedBrokerageCurrencyCode;\n      })) === null || _retainedBrokerageAmo === void 0 ? void 0 : _retainedBrokerageAmo.label) || constants.CURRENCY_USD, element.clientDiscount && element.thirdPartyCommissionSharing && element.pfInternalCommissionSharing && element.retainedBrokerage ? element.total = utils.generic.getSumOfArray([element.clientDiscount, element.thirdPartyCommissionSharing, element.pfInternalCommissionSharing, element.retainedBrokerage], config.ui.format.percent.decimal) : element.total = null;\n    });\n    dispatch(updatePiFinancialCheckList(financialList));\n    dispatch(savePIRetainedBrokerageAmountData(retainedBrokerageAmountData));\n  }, [financialCheckListTable]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    var _childRef$current3, _childRef$current3$pr;\n\n    var reset = childRef === null || childRef === void 0 ? void 0 : (_childRef$current3 = childRef.current) === null || _childRef$current3 === void 0 ? void 0 : (_childRef$current3$pr = _childRef$current3.props) === null || _childRef$current3$pr === void 0 ? void 0 : _childRef$current3$pr.resetFunc;\n\n    var updatedDefaultValues = _objectSpread({}, utils.form.getInitialValues(fields));\n\n    setDefaultValues(updatedDefaultValues);\n\n    if (utils.generic.isFunction(reset)) {\n      reset(updatedDefaultValues, {\n        keepDirty: false\n      });\n    }\n  }, [instruction] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  var handleUploadedDocument = function handleUploadedDocument(data, documentTypeKey) {\n    var _data$data;\n\n    var newFiles = data === null || data === void 0 ? void 0 : (_data$data = data.data) === null || _data$data === void 0 ? void 0 : _data$data.documentDto;\n    if (!utils.generic.isValidArray(newFiles)) return;\n    var newGxbDocs = newFiles.map(function (file) {\n      return _objectSpread(_objectSpread({}, file), {}, {\n        folderUuid: file === null || file === void 0 ? void 0 : file.folderUid,\n        name: file === null || file === void 0 ? void 0 : file.documentName,\n        path: file === null || file === void 0 ? void 0 : file.documentPath,\n        source: file === null || file === void 0 ? void 0 : file.documentSource,\n        typeId: file === null || file === void 0 ? void 0 : file.documentTypeId,\n        uuid: file === null || file === void 0 ? void 0 : file.documentUid\n      });\n    });\n\n    var updatedDocuments = _objectSpread(_objectSpread(_objectSpread({}, documents), documentTypeKey === constants.DMS_DOCUMENT_TYPE_SECTION_KEYS.type.piPremiumCalculation && {\n      premiumTaxDocument: newGxbDocs[0]\n    }), documentTypeKey === constants.DMS_DOCUMENT_TYPE_SECTION_KEYS.type.piMarketSigned && {\n      signedLinesDocument: newGxbDocs[0]\n    });\n\n    dispatch(storeProcessingInstructionDocuments(updatedDocuments));\n  };\n\n  var uploadPremiumTaxSignedLinesModal = function uploadPremiumTaxSignedLinesModal(documentTypeKey) {\n    return function (files) {\n      dispatch(addLoader('DmsUploadFiles'));\n      dispatch(showModal({\n        component: 'DMS_UPLOAD_FILES',\n        props: {\n          fullWidth: true,\n          title: utils.string.t('dms.upload.modalItems.uploadDocuments'),\n          maxWidth: 'xl',\n          componentProps: {\n            files: files,\n            context: constants.DMS_CONTEXT_PROCESSING_INSTRUCTION,\n            referenceId: Number(instruction === null || instruction === void 0 ? void 0 : instruction.id),\n            sourceId: Number(selectedRiskRef === null || selectedRiskRef === void 0 ? void 0 : selectedRiskRef.xbInstanceId),\n            documentTypeKey: documentTypeKey,\n            postDmsDocumentsSuccess: function postDmsDocumentsSuccess(data) {\n              return handleUploadedDocument(data, documentTypeKey);\n            },\n            confirmLabel: utils.string.t('app.ok'),\n            cancelLabel: utils.string.t('app.goBack'),\n            confirmMessage: utils.string.t('processingInstructions.documentsWillNotBeSaved'),\n            buttonColors: {\n              confirm: 'secondary',\n              cancel: 'primary'\n            }\n          }\n        }\n      }));\n    };\n  };\n\n  var confirmRemoveDocumentModal = function confirmRemoveDocumentModal(file, removeDocumentType) {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        fullWidth: true,\n        title: utils.string.t('processingInstructions.checklist.warning.title'),\n        maxWidth: 'xs',\n        componentProps: {\n          confirmLabel: utils.string.t('app.yes'),\n          cancelLabel: utils.string.t('app.no'),\n          confirmMessage: utils.string.t('processingInstructions.removeDocumentWarning'),\n          buttonColors: {\n            confirm: 'secondary',\n            cancel: 'primary'\n          },\n          submitHandler: function submitHandler() {\n            dispatch(removePremiumTaxSignedLinesDocument({\n              docIds: file === null || file === void 0 ? void 0 : file.documentId,\n              removeDocumentType: removeDocumentType,\n              documents: documents\n            }));\n          },\n          cancelHandler: function cancelHandler() {},\n          handleClose: function handleClose() {}\n        }\n      }\n    }));\n  };\n\n  var handleLinkDownload = function handleLinkDownload(file) {\n    dispatch(viewDocumentsDownload({\n      documentId: file === null || file === void 0 ? void 0 : file.documentId,\n      documentName: file === null || file === void 0 ? void 0 : file.name\n    }));\n  };\n\n  var headerMap = [{\n    key: 'riskReference',\n    value: ''\n  }, {\n    key: 'grossPremiumAmount',\n    value: ''\n  }, {\n    key: 'slipOrder',\n    value: ''\n  }, {\n    key: 'totalBrokerage',\n    value: ''\n  }, {\n    key: 'clientDiscount',\n    value: ''\n  }, {\n    key: 'thirdPartyCommissionSharing',\n    value: ''\n  }, {\n    key: 'thirdPartyName',\n    value: ''\n  }, {\n    key: 'pfInternalCommissionSharing',\n    value: ''\n  }, {\n    key: 'pfInternalDepartment',\n    value: ''\n  }, {\n    key: 'retainedBrokerage',\n    value: ''\n  }, {\n    key: 'retainedBrokerageCurrencyCode',\n    value: ''\n  }, {\n    key: 'fees',\n    value: ''\n  }, {\n    key: 'otherDeductions',\n    value: ''\n  }, {\n    key: 'settlementCurrency',\n    value: ''\n  }, {\n    key: 'paymentBasis',\n    value: ''\n  }, {\n    key: 'ppwOrPpc',\n    value: ''\n  }];\n\n  var uploadExcelData = function uploadExcelData() {\n    dispatch(showModal({\n      component: 'PASTE_FROM_EXCEL',\n      props: {\n        title: utils.string.t('processingInstructions.details.piDetailsExcelModal.title'),\n        fullWidth: true,\n        maxWidth: 'lg',\n        hideCompOnBlur: false,\n        componentProps: {\n          name: 'placement-overview',\n          headers: headerMap,\n          steps: 3,\n          isValidateHeadersMapping: true,\n          labels: {\n            step1: {\n              title: utils.string.html('processingInstructions.details.piDetailsExcelModal.step1.title'),\n              hint: utils.string.t('processingInstructions.details.piDetailsExcelModal.step1.hint')\n            },\n            step2: {\n              title: utils.string.html('processingInstructions.details.piDetailsExcelModal.step2.title'),\n              hint: utils.string.t('processingInstructions.details.piDetailsExcelModal.step2.hint')\n            },\n            step3: {\n              title: utils.string.html('processingInstructions.details.piDetailsExcelModal.step3.title'),\n              hint: utils.string.t('')\n            }\n          },\n          handlers: {\n            extract: function extract(data) {\n              dispatch(setRiskRefsUploadWizardExcelExtract(data));\n            },\n            match: function match(data) {\n              dispatch(setRiskRefsUploadWizardHeaderMap(data));\n            },\n            submit: function submit() {\n              dispatch(submitExcelUploadedRiskRefs());\n            }\n          }\n        }\n      }\n    }));\n  };\n\n  var financialCheckListTableFields = {\n    arrayItemDef: [{\n      id: 'id',\n      name: 'id',\n      visible: false,\n      type: 'label',\n      value: '',\n      width: 10,\n      label: '',\n      visable: false\n    }, {\n      id: 'riskReference',\n      name: 'riskReference',\n      visible: true,\n      type: 'text',\n      value: '',\n      width: 120,\n      label: 'Facility Reference\t',\n      disabled: true\n    }, {\n      id: 'grossPremiumAmount',\n      name: 'grossPremiumAmount',\n      visible: true,\n      ellipsis: true,\n      nowrap: false,\n      type: 'numericText',\n      value: '',\n      width: 120,\n      label: utils.string.t('processingInstructions.details.grossPremium')\n    }, {\n      id: 'slipOrder',\n      name: 'slipOrder',\n      visible: true,\n      ellipsis: true,\n      nowrap: false,\n      type: 'numericText',\n      value: '',\n      width: 120,\n      label: utils.string.t('processingInstructions.details.slipOrder')\n    }, {\n      id: 'totalBrokerage',\n      name: 'totalBrokerage',\n      visible: true,\n      ellipsis: true,\n      nowrap: false,\n      type: 'numericText',\n      value: '',\n      width: 100,\n      label: utils.string.t('processingInstructions.details.totalBrokerage')\n    }, {\n      id: 'clientDiscount',\n      name: 'clientDiscount',\n      visible: true,\n      ellipsis: true,\n      nowrap: false,\n      type: 'numericText',\n      value: '',\n      width: 120,\n      label: utils.string.t('processingInstructions.details.clientDiscount')\n    }, {\n      id: 'thirdPartyCommissionSharing',\n      visible: true,\n      name: 'thirdPartyCommissionSharing',\n      ellipsis: true,\n      nowrap: false,\n      type: 'numericText',\n      value: '',\n      width: 120,\n      label: utils.string.t('processingInstructions.details.thirdPartyCommissionSharing')\n    }, {\n      id: 'thirdPartyName',\n      name: 'thirdPartyName',\n      visible: true,\n      ellipsis: true,\n      nowrap: false,\n      type: 'text',\n      value: '',\n      width: 120,\n      label: utils.string.t('processingInstructions.details.thirdParty')\n    }, {\n      id: 'pfInternalCommissionSharing',\n      name: 'pfInternalCommissionSharing',\n      visible: true,\n      ellipsis: true,\n      nowrap: false,\n      type: 'numericText',\n      value: '',\n      width: 120,\n      label: utils.string.t('processingInstructions.details.pfInternalCommissionSharing')\n    }, {\n      id: 'pfInternalDepartment',\n      visible: true,\n      ellipsis: true,\n      nowrap: false,\n      type: 'text',\n      value: '',\n      width: 120,\n      label: utils.string.t('processingInstructions.details.pfInternalDepartment')\n    }, {\n      id: 'retainedBrokerage',\n      visible: true,\n      ellipsis: true,\n      nowrap: false,\n      type: 'numericText',\n      value: '',\n      width: 120,\n      label: utils.string.t('processingInstructions.details.retainedBrokerage')\n    }, {\n      id: 'retainedBrokerageCurrencyCode',\n      visible: true,\n      ellipsis: true,\n      nowrap: false,\n      type: 'select',\n      displayName: 'retainedBrokerageCurrencyCodeName',\n      options: retainedBrokerageAmountList,\n      optionKey: 'id',\n      optionLabel: 'label',\n      value: constants.CURRENCY_USD,\n      width: 120,\n      label: utils.string.t('processingInstructions.details.retainedBrokerageAmount')\n    }, {\n      id: 'retainedBrokerageValue',\n      visible: true,\n      ellipsis: true,\n      nowrap: false,\n      type: 'retainedBrokeragelabel',\n      value: '',\n      width: 180,\n      label: ''\n    }, {\n      id: 'total',\n      visible: true,\n      ellipsis: true,\n      nowrap: false,\n      type: 'label',\n      value: '',\n      width: 80,\n      label: utils.string.t('processingInstructions.details.total')\n    }, {\n      id: 'fees',\n      visible: true,\n      ellipsis: true,\n      nowrap: false,\n      type: 'numericText',\n      value: '',\n      width: 80,\n      label: utils.string.t('processingInstructions.details.fees')\n    }, {\n      id: 'otherDeductions',\n      name: 'otherDeductions',\n      visible: true,\n      ellipsis: true,\n      nowrap: false,\n      type: 'numericText',\n      value: '',\n      width: 120,\n      label: utils.string.t('processingInstructions.details.otherDeductions')\n    }, {\n      id: 'settlementCurrency',\n      visible: true,\n      ellipsis: true,\n      nowrap: false,\n      type: 'select',\n      displayName: 'settlementCurrencyName',\n      options: refDataCurrencies,\n      optionKey: 'currencyCodeID',\n      optionLabel: 'currencyCd',\n      value: '',\n      width: 120,\n      label: utils.string.t('processingInstructions.details.settlementCurrency')\n    }, {\n      id: 'paymentBasis',\n      visible: true,\n      ellipsis: true,\n      nowrap: false,\n      type: 'select',\n      displayName: 'paymentBasisName',\n      options: constants.PAYMENT_BASIS_OPTIONS,\n      optionKey: 'code',\n      optionLabel: 'name',\n      value: '',\n      width: 180,\n      label: utils.string.t('processingInstructions.details.paymentBasis')\n    }, {\n      id: 'ppwOrPpc',\n      visible: true,\n      ellipsis: true,\n      nowrap: false,\n      type: 'select',\n      displayName: 'ppwOrPpcName',\n      options: constants.PPW_PPC_OPTIONS,\n      optionKey: 'code',\n      optionLabel: 'name',\n      value: '',\n      width: 120,\n      label: utils.string.t('processingInstructions.details.ppwPPC')\n    }, {\n      id: 'ppwOrPpcDate',\n      visible: true,\n      ellipsis: true,\n      nowrap: false,\n      type: 'datepicker',\n      value: '',\n      width: 180,\n      format: config.ui.format.date.text,\n      label: utils.string.t('processingInstructions.details.ppwPPCDate')\n    }, {\n      id: 'copyAction',\n      visible: true,\n      ellipsis: true,\n      nowrap: false,\n      type: 'copyIcon',\n      value: '',\n      width: 80,\n      label: ''\n    }],\n    fieldData: []\n  };\n\n  var tableTextboxChange = function tableTextboxChange(e, column, row, name) {\n    var _e$target;\n\n    var value = column.type === 'text' ? (e === null || e === void 0 ? void 0 : (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.value) || '' : (e === null || e === void 0 ? void 0 : e.floatValue) || '';\n\n    if (column.type === 'text') {\n      e.preventDefault();\n    }\n\n    if (column.id === 'thirdPartyCommissionSharing') {\n      setFinancialCheckListTable(function (prevState) {\n        return prevState.map(function (dd) {\n          var _objectSpread2;\n\n          return dd.id === row.id ? _objectSpread(_objectSpread({}, dd), {}, (_objectSpread2 = {}, _defineProperty(_objectSpread2, column === null || column === void 0 ? void 0 : column.id, value), _defineProperty(_objectSpread2, \"isThirdPartyCommissionDisabled\", value ? false : true), _objectSpread2)) : dd;\n        });\n      });\n    }\n\n    if (column.id === 'pfInternalCommissionSharing') {\n      setFinancialCheckListTable(function (prevState) {\n        return prevState.map(function (dd) {\n          var _objectSpread3;\n\n          return dd.id === row.id ? _objectSpread(_objectSpread({}, dd), {}, (_objectSpread3 = {}, _defineProperty(_objectSpread3, column === null || column === void 0 ? void 0 : column.id, value), _defineProperty(_objectSpread3, \"isPfInternalDepartmentDisabled\", value ? false : true), _objectSpread3)) : dd;\n        });\n      });\n    }\n\n    if (column.id !== 'pfInternalCommissionSharing' && column.id !== 'thirdPartyCommissionSharing') {\n      setFinancialCheckListTable(function (prevState) {\n        return prevState.map(function (dd) {\n          return dd.id === row.id ? _objectSpread(_objectSpread({}, dd), {}, _defineProperty({}, column === null || column === void 0 ? void 0 : column.id, value)) : dd;\n        });\n      });\n    }\n\n    if (row.clientDiscount && row.thirdPartyCommissionSharing && row.pfInternalCommissionSharing && row.retainedBrokerage) {\n      var sumValuesArray = [row.clientDiscount, row.thirdPartyCommissionSharing, row.pfInternalCommissionSharing, row.retainedBrokerage];\n      var totalValue = utils.generic.getSumOfArray(sumValuesArray, config.ui.format.percent.decimal);\n      setFinancialCheckListTable(function (prevState) {\n        return prevState.map(function (dd) {\n          return dd.id === row.id ? _objectSpread(_objectSpread({}, dd), {}, {\n            total: totalValue\n          }) : dd;\n        });\n      });\n    } else {\n      setFinancialCheckListTable(function (prevState) {\n        return prevState.map(function (dd) {\n          return dd.id === row.id ? _objectSpread(_objectSpread({}, dd), {}, {\n            total: null\n          }) : dd;\n        });\n      });\n    }\n\n    dispatch(updatePiFinancialCheckList(financialCheckListTable));\n  };\n\n  var tableSelectChange = function tableSelectChange(e, selectedValue, column, row) {\n    e.preventDefault();\n    setFinancialCheckListTable(function (prevState) {\n      return prevState.map(function (dd) {\n        var _objectSpread5;\n\n        return dd.id === row.id ? _objectSpread(_objectSpread({}, dd), {}, (_objectSpread5 = {}, _defineProperty(_objectSpread5, column === null || column === void 0 ? void 0 : column.id, selectedValue === null || selectedValue === void 0 ? void 0 : selectedValue.value), _defineProperty(_objectSpread5, column === null || column === void 0 ? void 0 : column.displayName, selectedValue === null || selectedValue === void 0 ? void 0 : selectedValue.name), _objectSpread5)) : dd;\n      });\n    });\n  };\n\n  var tableRowClick = function tableRowClick(e, row) {\n    e.preventDefault();\n\n    if (!isReadOnly) {\n      if (!row.isRowSelected) {\n        setFinancialCheckListTable(function (prevState) {\n          return prevState.map(function (dd) {\n            return dd.id === row.id ? _objectSpread(_objectSpread({}, dd), {}, {\n              isRowSelected: true\n            }) : _objectSpread(_objectSpread({}, dd), {}, {\n              isRowSelected: false\n            });\n          });\n        });\n      }\n    }\n  };\n\n  var handleTableDatePicker = function handleTableDatePicker(columnName, value, row) {\n    setFinancialCheckListTable(function (prevState) {\n      return prevState.map(function (dd) {\n        return dd.id === row.id ? _objectSpread(_objectSpread({}, dd), {}, _defineProperty({}, columnName, value)) : dd;\n      });\n    });\n  };\n\n  var handleCopyTableRowData = function handleCopyTableRowData(index) {\n    if (!isReadOnly) {\n      var copyAboveRow = financialCheckListTable === null || financialCheckListTable === void 0 ? void 0 : financialCheckListTable.find(function (a) {\n        return a.id === index - 1;\n      });\n      var currentRow = financialCheckListTable === null || financialCheckListTable === void 0 ? void 0 : financialCheckListTable.find(function (a) {\n        return a.id === index;\n      });\n      setFinancialCheckListTable(function (prevState) {\n        return prevState.map(function (dd) {\n          return dd.id === index ? _objectSpread(_objectSpread({}, dd), {}, {\n            id: currentRow === null || currentRow === void 0 ? void 0 : currentRow.id,\n            grossPremiumAmount: copyAboveRow === null || copyAboveRow === void 0 ? void 0 : copyAboveRow.grossPremiumAmount,\n            slipOrder: copyAboveRow === null || copyAboveRow === void 0 ? void 0 : copyAboveRow.slipOrder,\n            totalBrokerage: copyAboveRow === null || copyAboveRow === void 0 ? void 0 : copyAboveRow.totalBrokerage,\n            clientDiscount: copyAboveRow === null || copyAboveRow === void 0 ? void 0 : copyAboveRow.clientDiscount,\n            thirdPartyCommissionSharing: copyAboveRow === null || copyAboveRow === void 0 ? void 0 : copyAboveRow.thirdPartyCommissionSharing,\n            thirdPartyName: copyAboveRow === null || copyAboveRow === void 0 ? void 0 : copyAboveRow.thirdPartyName,\n            isThirdPartyCommissionDisabled: copyAboveRow === null || copyAboveRow === void 0 ? void 0 : copyAboveRow.isThirdPartyCommissionDisabled,\n            pfInternalCommissionSharing: copyAboveRow === null || copyAboveRow === void 0 ? void 0 : copyAboveRow.pfInternalCommissionSharing,\n            pfInternalDepartment: copyAboveRow === null || copyAboveRow === void 0 ? void 0 : copyAboveRow.pfInternalDepartment,\n            isPfInternalDepartmentDisabled: copyAboveRow === null || copyAboveRow === void 0 ? void 0 : copyAboveRow.isPfInternalDepartmentDisabled,\n            retainedBrokerage: copyAboveRow === null || copyAboveRow === void 0 ? void 0 : copyAboveRow.retainedBrokerage,\n            retainedBrokerageCurrencyCode: copyAboveRow === null || copyAboveRow === void 0 ? void 0 : copyAboveRow.retainedBrokerageCurrencyCode,\n            retainedBrokerageValue: copyAboveRow === null || copyAboveRow === void 0 ? void 0 : copyAboveRow.retainedBrokerageValue,\n            total: copyAboveRow === null || copyAboveRow === void 0 ? void 0 : copyAboveRow.total,\n            fees: copyAboveRow === null || copyAboveRow === void 0 ? void 0 : copyAboveRow.fees,\n            otherDeductions: copyAboveRow === null || copyAboveRow === void 0 ? void 0 : copyAboveRow.otherDeductions,\n            settlementCurrency: copyAboveRow === null || copyAboveRow === void 0 ? void 0 : copyAboveRow.settlementCurrency,\n            paymentBasis: copyAboveRow === null || copyAboveRow === void 0 ? void 0 : copyAboveRow.paymentBasis,\n            ppwOrPpc: copyAboveRow === null || copyAboveRow === void 0 ? void 0 : copyAboveRow.ppwOrPpc\n          }) : dd;\n        });\n      });\n    }\n  }; // abort if data is not ready/available\n\n\n  if (!defaultValues || !instruction) return null;\n  return /*#__PURE__*/_jsxDEV(ProcessingInstructionsDetailsView, {\n    instructionId: instruction === null || instruction === void 0 ? void 0 : instruction.id,\n    documents: documents,\n    fields: fields,\n    defaultValues: defaultValues,\n    riskRefId: selectedRiskRef === null || selectedRiskRef === void 0 ? void 0 : selectedRiskRef.riskRefId,\n    isEditable: isEditable,\n    isReadOnly: isReadOnly,\n    financialCheckListDBData: instruction === null || instruction === void 0 ? void 0 : instruction.financialChecklistDetails,\n    tableRows: financialCheckListTable,\n    tableFields: financialCheckListTableFields,\n    handlers: _objectSpread(_objectSpread({}, handlers), {}, {\n      cancel: handleCancel,\n      confirmRemoveDocumentModal: confirmRemoveDocumentModal,\n      download: handleLinkDownload,\n      save: handleSave,\n      uploadExcelData: uploadExcelData,\n      uploadPremiumTaxSignedLinesModal: uploadPremiumTaxSignedLinesModal,\n      handleTextboxChange: tableTextboxChange,\n      handleTableRowClick: tableRowClick,\n      handleSelectChange: tableSelectChange,\n      handleDatePicker: handleTableDatePicker,\n      handleCopyTableRowData: handleCopyTableRowData\n    }),\n    ref: childRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 760,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ProcessingInstructionsDetails, \"lXa5gcIB8TydxLlgplDeyewKPz0=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = ProcessingInstructionsDetails;\nProcessingInstructionsDetails.displayName = \"ProcessingInstructionsDetails\";\nProcessingInstructionsDetails.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"ProcessingInstructionsDetails\",\n  \"props\": {\n    \"instruction\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"handlers\": {\n      \"type\": {\n        \"name\": \"shape\",\n        \"value\": {\n          \"back\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"next\": {\n            \"name\": \"func\",\n            \"required\": true\n          }\n        }\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\modules\\\\ProcessingInstructionsDetails\\\\ProcessingInstructionsDetails.js\"] = {\n    name: \"ProcessingInstructionsDetails\",\n    docgenInfo: ProcessingInstructionsDetails.__docgenInfo,\n    path: \"src\\\\modules\\\\ProcessingInstructionsDetails\\\\ProcessingInstructionsDetails.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ProcessingInstructionsDetails\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ProcessingInstructionsDetails/ProcessingInstructionsDetails.js"],"names":["React","useState","useEffect","PropTypes","useDispatch","useSelector","get","config","moment","ProcessingInstructionsDetailsView","selectUser","showModal","updateProcessingInstruction","removePremiumTaxSignedLinesDocument","addLoader","storeProcessingInstructionDocuments","viewDocumentsDownload","setRiskRefsUploadWizardExcelExtract","setRiskRefsUploadWizardHeaderMap","submitExcelUploadedRiskRefs","updatePiFinancialCheckList","savePIRetainedBrokerageAmountData","constants","utils","ProcessingInstructionsDetails","propTypes","instruction","object","isRequired","handlers","shape","back","func","next","childRef","dispatch","user","documents","state","getFinancialCheckListTableDetails","getRetainedBrokerageAmountList","excelRiskRefs","refDataCurrencies","isDraft","processingInstructions","status","statusId","isRejectedDraft","isSubmittedAuthorisedSignatory","isReopened","userHasWritePermission","app","access","feature","userHasApproverAccess","isCheckboxesEditable","financialCheckListTable","setFinancialCheckListTable","isEditable","isReadOnly","referenceData","retainedBrokerageAmountData","form","getSelectOptions","premiumCurrency","getRetainedBrokerageCurrencies","retainedBrokerageAmountList","setRetainedBrokerageAmountList","generic","isValidArray","updatedPiRiskRefsFromExcelRiskRefs","map","piRiskRef","matchedRiskRef","find","exRiskRef","riskReference","toggleOptions","label","string","t","value","fields","name","type","details","highPriority","muiComponentProps","disabled","frontEndSendDocs","premiumTaxCalculationSheetAttached","options","buttonGroupProps","exclusive","premiumTaxAuthorisedSignatory","signedLinesCalculationSheetAttached","signedLinesAuthorisedSignatory","riskReferencesAuthorisedSignatory","notes","inputProps","maxLength","multiline","minRows","maxRows","selectedRiskRef","riskReferences","r","leadPolicy","defaultValues","setDefaultValues","handleSave","formValues","current","props","values","updatedInstruction","premiumTaxCalculationSheetAttachedNumber","premiumTaxCalculationSheetAttachedCheckbox","signedLinesCalculationSheetAttachedNumber","signedLinesCalculationSheetAttachedCheckbox","financialGridCheckbox","financialChecklistDetails","riskRef","isValidDate","ppwOrPpcDate","isValid","format","instructionBrokerageDetailsId","grossPremiumAmount","slipOrder","totalBrokerage","clientDiscount","thirdPartyCommissionSharing","thirdPartyName","pfInternalCommissionSharing","pfInternalDepartment","retainedBrokerage","retainedBrokerageCurrencyCode","fees","otherDeductions","settlementCurrency","paymentBasis","ppwOrPpc","prevState","dd","isRowSelected","handleCancel","reset","resetFunc","isFunction","keepDirty","financialCheckListDBList","element","index","id","financialList","amount","getRetainedBrokerageValue","brokerage","getRetainedBrokerageConvertedValue","CURRENCY_USD","retainedBrokerageAmount","convertedBrokerage","settlementCurrencyName","a","currencyCodeID","parseInt","currencyCd","paymentBasisName","PAYMENT_BASIS_OPTIONS","code","ppwOrPpcName","PPW_PPC_OPTIONS","retainedBrokerageCurrencyCodeName","total","getSumOfArray","ui","percent","decimal","updatedDefaultValues","getInitialValues","handleUploadedDocument","data","documentTypeKey","newFiles","documentDto","newGxbDocs","file","folderUuid","folderUid","documentName","path","documentPath","source","documentSource","typeId","documentTypeId","uuid","documentUid","updatedDocuments","DMS_DOCUMENT_TYPE_SECTION_KEYS","piPremiumCalculation","premiumTaxDocument","piMarketSigned","signedLinesDocument","uploadPremiumTaxSignedLinesModal","files","component","fullWidth","title","maxWidth","componentProps","context","DMS_CONTEXT_PROCESSING_INSTRUCTION","referenceId","Number","sourceId","xbInstanceId","postDmsDocumentsSuccess","confirmLabel","cancelLabel","confirmMessage","buttonColors","confirm","cancel","confirmRemoveDocumentModal","removeDocumentType","submitHandler","docIds","documentId","cancelHandler","handleClose","handleLinkDownload","headerMap","key","uploadExcelData","hideCompOnBlur","headers","steps","isValidateHeadersMapping","labels","step1","html","hint","step2","step3","extract","match","submit","financialCheckListTableFields","arrayItemDef","visible","width","visable","ellipsis","nowrap","displayName","optionKey","optionLabel","date","text","fieldData","tableTextboxChange","e","column","row","target","floatValue","preventDefault","sumValuesArray","totalValue","tableSelectChange","selectedValue","tableRowClick","handleTableDatePicker","columnName","handleCopyTableRowData","copyAboveRow","currentRow","isThirdPartyCommissionDisabled","isPfInternalDepartmentDisabled","retainedBrokerageValue","riskRefId","download","save","handleTextboxChange","handleTableRowClick","handleSelectChange","handleDatePicker"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB,C,CAEA;;AACA,OAAOC,iCAAP,MAA8C,sCAA9C;AACA,SACEC,UADF,EAEEC,SAFF,EAGEC,2BAHF,EAIEC,mCAJF,EAKEC,SALF,EAMEC,mCANF,EAOEC,qBAPF,EAQEC,mCARF,EASEC,gCATF,EAUEC,2BAVF,EAWEC,0BAXF,EAYEC,iCAZF,QAaO,QAbP;AAcA,OAAO,KAAKC,SAAZ,MAA2B,QAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;AAEAC,6BAA6B,CAACC,SAA9B,GAA0C;AACxCC,EAAAA,WAAW,EAAEvB,SAAS,CAACwB,MAAV,CAAiBC,UADU;AAExCC,EAAAA,QAAQ,EAAE1B,SAAS,CAAC2B,KAAV,CAAgB;AACxBC,IAAAA,IAAI,EAAE5B,SAAS,CAAC6B,IAAV,CAAeJ,UADG;AAExBK,IAAAA,IAAI,EAAE9B,SAAS,CAAC6B,IAAV,CAAeJ;AAFG,GAAhB,EAGPA;AALqC,CAA1C;AAQA,eAAe,SAASJ,6BAAT,OAA4E;AAAA;;AAAA;;AAAA,MAAnCE,WAAmC,QAAnCA,WAAmC;AAAA,MAAtBG,QAAsB,QAAtBA,QAAsB;AAAA,MAAZK,QAAY,QAAZA,QAAY;AACzF,MAAMC,QAAQ,GAAG/B,WAAW,EAA5B;AAEA,MAAMgC,IAAI,GAAG/B,WAAW,CAACK,UAAD,CAAxB;AACA,MAAM2B,SAAS,GAAGhC,WAAW,CAAC,UAACiC,KAAD;AAAA,WAAWhC,GAAG,CAACgC,KAAD,EAAQ,kCAAR,CAAd;AAAA,GAAD,CAAX,IAA0E,EAA5F;AACA,MAAMC,iCAAiC,GAAGlC,WAAW,CAAC,UAACiC,KAAD;AAAA,WAAWhC,GAAG,CAACgC,KAAD,EAAQ,2CAAR,CAAd;AAAA,GAAD,CAAX,IAAmF,EAA7H;AACA,MAAME,8BAA8B,GAAGnC,WAAW,CAAC,UAACiC,KAAD;AAAA,WAAWhC,GAAG,CAACgC,KAAD,EAAQ,oDAAR,CAAd;AAAA,GAAD,CAAX,IAA4F,EAAnI;AACA,MAAMG,aAAa,GAAGpC,WAAW,CAAC,UAACiC,KAAD;AAAA,WAAWhC,GAAG,CAACgC,KAAD,EAAQ,sCAAR,CAAd;AAAA,GAAD,CAAX,IAA8E,EAApG;AACA,MAAMI,iBAAiB,GAAGrC,WAAW,CAAC,UAACiC,KAAD;AAAA,WAAWhC,GAAG,CAACgC,KAAD,EAAQ,6BAAR,CAAd;AAAA,GAAD,CAAX,IAAqE,EAA/F;AACA,MAAMK,OAAO,GAAGpB,KAAK,CAACqB,sBAAN,CAA6BC,MAA7B,CAAoCF,OAApC,CAA4CjB,WAA5C,aAA4CA,WAA5C,uBAA4CA,WAAW,CAAEoB,QAAzD,CAAhB;AACA,MAAMC,eAAe,GAAGxB,KAAK,CAACqB,sBAAN,CAA6BC,MAA7B,CAAoCE,eAApC,CAAoDrB,WAApD,aAAoDA,WAApD,uBAAoDA,WAAW,CAAEoB,QAAjE,CAAxB;AACA,MAAME,8BAA8B,GAAGzB,KAAK,CAACqB,sBAAN,CAA6BC,MAA7B,CAAoCG,8BAApC,CAAmEtB,WAAnE,aAAmEA,WAAnE,uBAAmEA,WAAW,CAAEoB,QAAhF,CAAvC;AACA,MAAMG,UAAU,GAAG1B,KAAK,CAACqB,sBAAN,CAA6BC,MAA7B,CAAoCI,UAApC,CAA+CvB,WAA/C,aAA+CA,WAA/C,uBAA+CA,WAAW,CAAEoB,QAA5D,CAAnB;AACA,MAAMI,sBAAsB,GAAG3B,KAAK,CAAC4B,GAAN,CAAUC,MAAV,CAAiBC,OAAjB,CAAyB,+CAAzB,EAA0E,CAAC,QAAD,EAAW,QAAX,CAA1E,EAAgGjB,IAAhG,CAA/B;AACA,MAAMkB,qBAAqB,GAAG/B,KAAK,CAAC4B,GAAN,CAAUC,MAAV,CAAiBC,OAAjB,CAAyB,0CAAzB,EAAqE,CAAC,QAAD,EAAW,QAAX,CAArE,EAA2FjB,IAA3F,CAA9B;AACA,MAAMmB,oBAAoB,GAAGD,qBAAqB,IAAIN,8BAAtD;;AAfyF,kBAgB3B/C,QAAQ,CAACsC,iCAAD,CAhBmB;AAAA;AAAA,MAgBlFiB,uBAhBkF;AAAA,MAgBzDC,0BAhByD;;AAiBzF,MAAMC,UAAU,GAAGR,sBAAsB,KAAKP,OAAO,IAAII,eAAX,IAA8BE,UAAnC,CAAzC;AACA,MAAMU,UAAU,GAAG,CAACD,UAApB;AACA,MAAME,aAAa,GAAGvD,WAAW,CAAC,UAACiC,KAAD;AAAA,WAAWA,KAAK,CAACsB,aAAjB;AAAA,GAAD,CAAjC;AAEA,MAAMC,2BAA2B,GAAGtC,KAAK,CAACuC,IAAN,CAAWC,gBAAX,CAA4B,iBAA5B,kCAC/BH,aAD+B;AAElCI,IAAAA,eAAe,EAAEzC,KAAK,CAACqB,sBAAN,CAA6BqB,8BAA7B;AAFiB,KAApC;;AArByF,mBAyBnBhE,QAAQ,CAACuC,8BAAD,CAzBW;AAAA;AAAA,MAyBlF0B,2BAzBkF;AAAA,MAyBrDC,8BAzBqD;;AA2BzFjE,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIqB,KAAK,CAAC6C,OAAN,CAAcC,YAAd,CAA2B5B,aAA3B,EAA0C,IAA1C,CAAJ,EAAqD;AACnD,UAAM6B,kCAAkC,GAAGd,uBAAH,aAAGA,uBAAH,uBAAGA,uBAAuB,CAAEe,GAAzB,CAA6B,UAACC,SAAD,EAAe;AACrF,YAAMC,cAAc,GAAGhC,aAAH,aAAGA,aAAH,uBAAGA,aAAa,CAAEiC,IAAf,CAAoB,UAACC,SAAD;AAAA,iBAAe,CAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEC,aAAX,OAA6BJ,SAA7B,aAA6BA,SAA7B,uBAA6BA,SAAS,CAAEI,aAAxC,CAAf;AAAA,SAApB,CAAvB;;AACA,YAAIH,cAAJ,EAAoB;AAClB,iDAAYD,SAAZ,GAA0BC,cAA1B;AACD;;AACD,eAAOD,SAAP;AACD,OAN0C,CAA3C;AAOAf,MAAAA,0BAA0B,CAACa,kCAAD,CAA1B;AACD;AACF,GAXQ,EAWN,CAAC7B,aAAD,CAXM,CAAT,CA3ByF,CAsCpE;;AAErB,MAAMoC,aAAa,GAAG,CACpB;AAAEC,IAAAA,KAAK,EAAEvD,KAAK,CAACwD,MAAN,CAAaC,CAAb,CAAe,SAAf,CAAT;AAAoCC,IAAAA,KAAK,EAAE;AAA3C,GADoB,EAEpB;AAAEH,IAAAA,KAAK,EAAEvD,KAAK,CAACwD,MAAN,CAAaC,CAAb,CAAe,QAAf,CAAT;AAAmCC,IAAAA,KAAK,EAAE;AAA1C,GAFoB,EAGpB;AAAEH,IAAAA,KAAK,EAAEvD,KAAK,CAACwD,MAAN,CAAaC,CAAb,CAAe,QAAf,CAAT;AAAmCC,IAAAA,KAAK,EAAE,CAAC;AAA3C,GAHoB,CAAtB;AAMA,MAAMC,MAAM,GAAG,CACb;AACEC,IAAAA,IAAI,EAAE,cADR;AAEEC,IAAAA,IAAI,EAAE,UAFR;AAGEH,IAAAA,KAAK,EAAEvD,WAAF,aAAEA,WAAF,+CAAEA,WAAW,CAAE2D,OAAf,yDAAE,qBAAsBC,YAH/B;AAIER,IAAAA,KAAK,EAAEvD,KAAK,CAACwD,MAAN,CAAaC,CAAb,CAAe,iFAAf,CAJT;AAKEO,IAAAA,iBAAiB,EAAE;AACjBC,MAAAA,QAAQ,EAAE7B;AADO;AALrB,GADa,EAUb;AACEwB,IAAAA,IAAI,EAAE,kBADR;AAEEC,IAAAA,IAAI,EAAE,UAFR;AAGEH,IAAAA,KAAK,EAAEvD,WAAF,aAAEA,WAAF,gDAAEA,WAAW,CAAE2D,OAAf,0DAAE,sBAAsBI,gBAH/B;AAIEX,IAAAA,KAAK,EAAEvD,KAAK,CAACwD,MAAN,CAAaC,CAAb,CAAe,0FAAf,CAJT;AAKEO,IAAAA,iBAAiB,EAAE;AACjBC,MAAAA,QAAQ,EAAE7B;AADO;AALrB,GAVa,EAmBb;AACEwB,IAAAA,IAAI,EAAE,0CADR;AAEEC,IAAAA,IAAI,EAAE,QAFR;AAGE;AACAH,IAAAA,KAAK,EAAEvD,WAAF,aAAEA,WAAF,gDAAEA,WAAW,CAAE2D,OAAf,0DAAE,sBAAsBK,kCAJ/B;AAKEC,IAAAA,OAAO,EAAEd,aALX;AAMEe,IAAAA,gBAAgB,EAAE;AAChBC,MAAAA,SAAS,EAAE,IADK;AAEhBL,MAAAA,QAAQ,EAAE7B;AAFM;AANpB,GAnBa,EA8Bb;AACEwB,IAAAA,IAAI,EAAE,4CADR;AAEEC,IAAAA,IAAI,EAAE,UAFR;AAGE;AACA;AACAH,IAAAA,KAAK,EAAEvD,WAAF,aAAEA,WAAF,gDAAEA,WAAW,CAAE2D,OAAf,0DAAE,sBAAsBS,6BAL/B;AAMEN,IAAAA,QAAQ,EAAE,CAACjC;AANb,GA9Ba,EAsCb;AACE4B,IAAAA,IAAI,EAAE,2CADR;AAEEC,IAAAA,IAAI,EAAE,QAFR;AAGE;AACA;AACA;AACAH,IAAAA,KAAK,EAAEvD,WAAF,aAAEA,WAAF,gDAAEA,WAAW,CAAE2D,OAAf,0DAAE,sBAAsBU,mCAN/B;AAOEJ,IAAAA,OAAO,EAAEd,aAPX;AAQEe,IAAAA,gBAAgB,EAAE;AAChBC,MAAAA,SAAS,EAAE,IADK;AAEhBL,MAAAA,QAAQ,EAAE7B;AAFM;AARpB,GAtCa,EAmDb;AACEwB,IAAAA,IAAI,EAAE,6CADR;AAEEC,IAAAA,IAAI,EAAE,UAFR;AAGE;AACA;AACAH,IAAAA,KAAK,EAAEvD,WAAF,aAAEA,WAAF,gDAAEA,WAAW,CAAE2D,OAAf,0DAAE,sBAAsBW,8BAL/B;AAMER,IAAAA,QAAQ,EAAE,CAACjC;AANb,GAnDa,EA2Db;AACE4B,IAAAA,IAAI,EAAE,uBADR;AAEEC,IAAAA,IAAI,EAAE,UAFR;AAGEH,IAAAA,KAAK,EAAEvD,WAAF,aAAEA,WAAF,gDAAEA,WAAW,CAAE2D,OAAf,0DAAE,sBAAsBY,iCAH/B;AAIET,IAAAA,QAAQ,EAAE,CAACjC;AAJb,GA3Da,EAiEb;AACE4B,IAAAA,IAAI,EAAE,OADR;AAEEL,IAAAA,KAAK,EAAEvD,KAAK,CAACwD,MAAN,CAAaC,CAAb,CAAe,sCAAf,CAFT;AAGEI,IAAAA,IAAI,EAAE,UAHR;AAIEH,IAAAA,KAAK,EAAE,CAAAvD,WAAW,SAAX,IAAAA,WAAW,WAAX,qCAAAA,WAAW,CAAE2D,OAAb,gFAAsBa,KAAtB,KAA+B,EAJxC;AAKEX,IAAAA,iBAAiB,EAAE;AACjBY,MAAAA,UAAU,EAAE;AAAEC,QAAAA,SAAS,EAAE;AAAb,OADK;AAEjBC,MAAAA,SAAS,EAAE,IAFM;AAGjBC,MAAAA,OAAO,EAAE,CAHQ;AAIjBC,MAAAA,OAAO,EAAE,CAJQ;AAKjBf,MAAAA,QAAQ,EAAE7B;AALO;AALrB,GAjEa,CAAf;AAgFA,MAAM6C,eAAe,GAAG9E,WAAH,aAAGA,WAAH,gDAAGA,WAAW,CAAE+E,cAAhB,0DAAG,sBAA6B/B,IAA7B,CAAkC,UAACgC,CAAD;AAAA,WAAOA,CAAC,CAACC,UAAT;AAAA,GAAlC,CAAxB;;AA9HyF,mBAgI/C1G,QAAQ,EAhIuC;AAAA;AAAA,MAgIlF2G,aAhIkF;AAAA,MAgInEC,gBAhImE;;AAkIzF,MAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAAA;;AACvB,QAAMC,UAAU,GAAG,CAAA7E,QAAQ,SAAR,IAAAA,QAAQ,WAAR,iCAAAA,QAAQ,CAAE8E,OAAV,iGAAmBC,KAAnB,gFAA0BC,MAA1B,KAAoC,EAAvD;;AAEA,QAAMC,kBAAkB,mCACnBzF,WADmB;AAEtB2D,MAAAA,OAAO,kCACF3D,WAAW,CAAC2D,OADV;AAELC,QAAAA,YAAY,EAAEyB,UAAU,CAACzB,YAFpB;AAGLG,QAAAA,gBAAgB,EAAEsB,UAAU,CAACtB,gBAHxB;AAILS,QAAAA,KAAK,EAAEa,UAAU,CAACb,KAJb;AAKLR,QAAAA,kCAAkC,EAAEqB,UAAU,CAACK,wCAL1C;AAKoF;AACzFtB,QAAAA,6BAA6B,EAAEiB,UAAU,CAACM,0CANrC;AAMiF;AACtFtB,QAAAA,mCAAmC,EAAEgB,UAAU,CAACO,yCAP3C;AAOsF;AAC3FtB,QAAAA,8BAA8B,EAAEe,UAAU,CAACQ,2CARtC;AAQmF;AACxFtB,QAAAA,iCAAiC,EAAEc,UAAU,CAACS;AATzC,QAFe;AAatBC,MAAAA,yBAAyB,EAAEjE,uBAAF,aAAEA,uBAAF,uBAAEA,uBAAuB,CAAEe,GAAzB,CAA6B,UAACmD,OAAD,EAAa;AACnE,YAAMC,WAAW,GAAGnH,MAAM,CAACkH,OAAO,CAACE,YAAT,CAAN,CAA6BC,OAA7B,EAApB;AACA,YAAMD,YAAY,GAAGD,WAAW,GAAGnH,MAAM,CAACkH,OAAO,CAACE,YAAT,CAAN,CAA6BE,MAA7B,CAAoC,YAApC,CAAH,GAAuD,EAAvF;AACA,eAAO;AACLC,UAAAA,6BAA6B,EAAEL,OAAO,CAACK,6BADlC;AAELnD,UAAAA,aAAa,EAAE8C,OAAO,CAAC9C,aAFlB;AAGLoD,UAAAA,kBAAkB,EAAEN,OAAO,CAACM,kBAHvB;AAILC,UAAAA,SAAS,EAAEP,OAAO,CAACO,SAJd;AAKLC,UAAAA,cAAc,EAAER,OAAO,CAACQ,cALnB;AAMLC,UAAAA,cAAc,EAAET,OAAO,CAACS,cANnB;AAOLC,UAAAA,2BAA2B,EAAEV,OAAO,CAACU,2BAPhC;AAQLC,UAAAA,cAAc,EAAEX,OAAO,CAACW,cARnB;AASLC,UAAAA,2BAA2B,EAAEZ,OAAO,CAACY,2BAThC;AAULC,UAAAA,oBAAoB,EAAEb,OAAO,CAACa,oBAVzB;AAWLC,UAAAA,iBAAiB,EAAEd,OAAO,CAACc,iBAXtB;AAYLC,UAAAA,6BAA6B,EAAEf,OAAO,CAACe,6BAZlC;AAaLC,UAAAA,IAAI,EAAEhB,OAAO,CAACgB,IAbT;AAcLC,UAAAA,eAAe,EAAEjB,OAAO,CAACiB,eAdpB;AAeLC,UAAAA,kBAAkB,EAAElB,OAAO,CAACkB,kBAfvB;AAgBLC,UAAAA,YAAY,EAAEnB,OAAO,CAACmB,YAhBjB;AAiBLC,UAAAA,QAAQ,EAAEpB,OAAO,CAACoB,QAjBb;AAkBLlB,UAAAA,YAAY,EAAEA;AAlBT,SAAP;AAoBD,OAvB0B;AAbL,MAAxB;;AAsCAnE,IAAAA,0BAA0B,CAAC,UAACsF,SAAD;AAAA,aAAeA,SAAS,CAACxE,GAAV,CAAc,UAACyE,EAAD;AAAA,+CAAcA,EAAd;AAAkBC,UAAAA,aAAa,EAAE;AAAjC;AAAA,OAAd,CAAf;AAAA,KAAD,CAA1B;AACA9G,IAAAA,QAAQ,CAACvB,2BAA2B,CAACuG,kBAAD,EAAqBJ,UAArB,CAA5B,CAAR;AACD,GA3CD;;AA6CA,MAAMmC,YAAY,GAAG,SAAfA,YAAe,GAAM;AAAA;;AACzB,QAAMC,KAAK,GAAGjH,QAAH,aAAGA,QAAH,6CAAGA,QAAQ,CAAE8E,OAAb,gFAAG,mBAAmBC,KAAtB,0DAAG,sBAA0BmC,SAAxC;;AAEA,QAAI7H,KAAK,CAAC6C,OAAN,CAAciF,UAAd,CAAyBF,KAAzB,CAAJ,EAAqC;AACnCA,MAAAA,KAAK,CAACvC,aAAD,EAAgB;AAAE0C,QAAAA,SAAS,EAAE;AAAb,OAAhB,CAAL;AACD;;AACD,QAAMC,wBAAwB,GAAG7H,WAAH,aAAGA,WAAH,gDAAGA,WAAW,CAAE+F,yBAAhB,0DAAG,sBAAwClD,GAAxC,CAA4C,UAACiF,OAAD,EAAUC,KAAV,EAAoB;AAC/F,6CAAYD,OAAZ;AAAqBE,QAAAA,EAAE,EAAED;AAAzB;AACD,KAFgC,CAAjC;AAGAtH,IAAAA,QAAQ,CAACf,0BAA0B,CAACmI,wBAAD,CAA3B,CAAR;AACA9F,IAAAA,0BAA0B,CAAC8F,wBAAD,CAA1B;AACD,GAXD;;AAaArJ,EAAAA,SAAS,CAAC,YAAM;AACdiE,IAAAA,8BAA8B,CAACN,2BAAD,CAA9B;AACA,QAAI8F,aAAa,GAAGnG,uBAApB,CAFc,CAGd;;AACAmG,IAAAA,aAAa,SAAb,IAAAA,aAAa,WAAb,YAAAA,aAAa,CAAEpF,GAAf,CAAmB,UAACiF,OAAD,EAAa;AAAA;;AAC9B,UAAMI,MAAM,GAAGrI,KAAK,CAACqB,sBAAN,CAA6BiH,yBAA7B,CACbL,OAAO,CAACxB,kBADK,EAEbwB,OAAO,CAACvB,SAFK,EAGbuB,OAAO,CAAChB,iBAHK,CAAf;AAKA,UAAMsB,SAAS,GAAGvI,KAAK,CAACqB,sBAAN,CAA6BmH,kCAA7B,CAChBP,OAAO,CAACf,6BAAR,IAAyCnH,SAAS,CAAC0I,YADnC,EAEhBJ,MAFgB,CAAlB;AAIA,aACGJ,OAAO,CAACS,uBAAR,GAAkCL,MAAnC,EACCJ,OAAO,CAACU,kBAAR,GAA6BJ,SAD9B,EAECN,OAAO,CAACW,sBAAR,GACC,0BAAAzH,iBAAiB,CAACgC,IAAlB,CAAuB,UAAC0F,CAAD;AAAA,eAAOA,CAAC,CAACC,cAAF,KAAqBC,QAAQ,CAACd,OAAO,CAACZ,kBAAT,CAApC;AAAA,OAAvB,iFAA0F2B,UAA1F,KAAwG,EAH1G,EAICf,OAAO,CAACgB,gBAAR,GAA2B,0BAAAlJ,SAAS,CAACmJ,qBAAV,CAAgC/F,IAAhC,CAAqC,UAAC0F,CAAD;AAAA,eAAOA,CAAC,CAACM,IAAF,KAAWlB,OAAO,CAACX,YAA1B;AAAA,OAArC,iFAA8E1D,IAA9E,KAAsF,EAJlH,EAKCqE,OAAO,CAACmB,YAAR,GAAuB,0BAAArJ,SAAS,CAACsJ,eAAV,CAA0BlG,IAA1B,CAA+B,UAAC0F,CAAD;AAAA,eAAOA,CAAC,CAACM,IAAF,KAAWlB,OAAO,CAACV,QAA1B;AAAA,OAA/B,iFAAoE3D,IAApE,KAA4E,EALpG,EAMCqE,OAAO,CAACqB,iCAAR,GACC,0BAAAhH,2BAA2B,CAACa,IAA5B,CAAiC,UAAC0F,CAAD;AAAA,eAAOA,CAAC,CAACV,EAAF,KAASF,OAAO,CAACf,6BAAxB;AAAA,OAAjC,iFAAyF3D,KAAzF,KAAkGxD,SAAS,CAAC0I,YAP9G,EAQAR,OAAO,CAACrB,cAAR,IAA0BqB,OAAO,CAACpB,2BAAlC,IAAiEoB,OAAO,CAAClB,2BAAzE,IAAwGkB,OAAO,CAAChB,iBAAhH,GACKgB,OAAO,CAACsB,KAAR,GAAgBvJ,KAAK,CAAC6C,OAAN,CAAc2G,aAAd,CACf,CAACvB,OAAO,CAACrB,cAAT,EAAyBqB,OAAO,CAACpB,2BAAjC,EAA8DoB,OAAO,CAAClB,2BAAtE,EAAmGkB,OAAO,CAAChB,iBAA3G,CADe,EAEfjI,MAAM,CAACyK,EAAP,CAAUlD,MAAV,CAAiBmD,OAAjB,CAAyBC,OAFV,CADrB,GAKK1B,OAAO,CAACsB,KAAR,GAAgB,IAdvB;AAgBD,KA1BD;AA2BA3I,IAAAA,QAAQ,CAACf,0BAA0B,CAACuI,aAAD,CAA3B,CAAR;AACAxH,IAAAA,QAAQ,CAACd,iCAAiC,CAACwC,2BAAD,CAAlC,CAAR;AACD,GAjCQ,EAiCN,CAACL,uBAAD,CAjCM,CAAT,CA5LyF,CA6N1D;;AAE/BtD,EAAAA,SAAS,CACP,YAAM;AAAA;;AACJ,QAAMiJ,KAAK,GAAGjH,QAAH,aAAGA,QAAH,6CAAGA,QAAQ,CAAE8E,OAAb,gFAAG,mBAAmBC,KAAtB,0DAAG,sBAA0BmC,SAAxC;;AACA,QAAM+B,oBAAoB,qBACrB5J,KAAK,CAACuC,IAAN,CAAWsH,gBAAX,CAA4BlG,MAA5B,CADqB,CAA1B;;AAIA2B,IAAAA,gBAAgB,CAACsE,oBAAD,CAAhB;;AAEA,QAAI5J,KAAK,CAAC6C,OAAN,CAAciF,UAAd,CAAyBF,KAAzB,CAAJ,EAAqC;AACnCA,MAAAA,KAAK,CAACgC,oBAAD,EAAuB;AAC1B7B,QAAAA,SAAS,EAAE;AADe,OAAvB,CAAL;AAGD;AACF,GAdM,EAeP,CAAC5H,WAAD,CAfO,CAeO;AAfP,GAAT;;AAkBA,MAAM2J,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,IAAD,EAAOC,eAAP,EAA2B;AAAA;;AACxD,QAAMC,QAAQ,GAAGF,IAAH,aAAGA,IAAH,qCAAGA,IAAI,CAAEA,IAAT,+CAAG,WAAYG,WAA7B;AACA,QAAI,CAAClK,KAAK,CAAC6C,OAAN,CAAcC,YAAd,CAA2BmH,QAA3B,CAAL,EAA2C;AAC3C,QAAME,UAAU,GAAGF,QAAQ,CAACjH,GAAT,CAAa,UAACoH,IAAD,EAAU;AACxC,6CACKA,IADL;AAEEC,QAAAA,UAAU,EAAED,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEE,SAFpB;AAGE1G,QAAAA,IAAI,EAAEwG,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEG,YAHd;AAIEC,QAAAA,IAAI,EAAEJ,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEK,YAJd;AAKEC,QAAAA,MAAM,EAAEN,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEO,cALhB;AAMEC,QAAAA,MAAM,EAAER,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAES,cANhB;AAOEC,QAAAA,IAAI,EAAEV,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEW;AAPd;AASD,KAVkB,CAAnB;;AAYA,QAAMC,gBAAgB,iDACjBlK,SADiB,GAEhBkJ,eAAe,KAAKjK,SAAS,CAACkL,8BAAV,CAAyCpH,IAAzC,CAA8CqH,oBAAlE,IAA0F;AAC5FC,MAAAA,kBAAkB,EAAEhB,UAAU,CAAC,CAAD;AAD8D,KAF1E,GAKhBH,eAAe,KAAKjK,SAAS,CAACkL,8BAAV,CAAyCpH,IAAzC,CAA8CuH,cAAlE,IAAoF;AACtFC,MAAAA,mBAAmB,EAAElB,UAAU,CAAC,CAAD;AADuD,KALpE,CAAtB;;AASAvJ,IAAAA,QAAQ,CAACpB,mCAAmC,CAACwL,gBAAD,CAApC,CAAR;AACD,GAzBD;;AA2BA,MAAMM,gCAAgC,GAAG,SAAnCA,gCAAmC,CAACtB,eAAD;AAAA,WAAqB,UAACuB,KAAD,EAAW;AACvE3K,MAAAA,QAAQ,CAACrB,SAAS,CAAC,gBAAD,CAAV,CAAR;AAEAqB,MAAAA,QAAQ,CACNxB,SAAS,CAAC;AACRoM,QAAAA,SAAS,EAAE,kBADH;AAER9F,QAAAA,KAAK,EAAE;AACL+F,UAAAA,SAAS,EAAE,IADN;AAELC,UAAAA,KAAK,EAAE1L,KAAK,CAACwD,MAAN,CAAaC,CAAb,CAAe,uCAAf,CAFF;AAGLkI,UAAAA,QAAQ,EAAE,IAHL;AAILC,UAAAA,cAAc,EAAE;AACdL,YAAAA,KAAK,EAALA,KADc;AAEdM,YAAAA,OAAO,EAAE9L,SAAS,CAAC+L,kCAFL;AAGdC,YAAAA,WAAW,EAAEC,MAAM,CAAC7L,WAAD,aAACA,WAAD,uBAACA,WAAW,CAAEgI,EAAd,CAHL;AAId8D,YAAAA,QAAQ,EAAED,MAAM,CAAC/G,eAAD,aAACA,eAAD,uBAACA,eAAe,CAAEiH,YAAlB,CAJF;AAKdlC,YAAAA,eAAe,EAAfA,eALc;AAMdmC,YAAAA,uBAAuB,EAAE,iCAACpC,IAAD;AAAA,qBAAUD,sBAAsB,CAACC,IAAD,EAAOC,eAAP,CAAhC;AAAA,aANX;AAOdoC,YAAAA,YAAY,EAAEpM,KAAK,CAACwD,MAAN,CAAaC,CAAb,CAAe,QAAf,CAPA;AAQd4I,YAAAA,WAAW,EAAErM,KAAK,CAACwD,MAAN,CAAaC,CAAb,CAAe,YAAf,CARC;AASd6I,YAAAA,cAAc,EAAEtM,KAAK,CAACwD,MAAN,CAAaC,CAAb,CAAe,gDAAf,CATF;AAUd8I,YAAAA,YAAY,EAAE;AAAEC,cAAAA,OAAO,EAAE,WAAX;AAAwBC,cAAAA,MAAM,EAAE;AAAhC;AAVA;AAJX;AAFC,OAAD,CADH,CAAR;AAsBD,KAzBwC;AAAA,GAAzC;;AA2BA,MAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACtC,IAAD,EAAOuC,kBAAP,EAA8B;AAC/D/L,IAAAA,QAAQ,CACNxB,SAAS,CAAC;AACRoM,MAAAA,SAAS,EAAE,SADH;AAER9F,MAAAA,KAAK,EAAE;AACL+F,QAAAA,SAAS,EAAE,IADN;AAELC,QAAAA,KAAK,EAAE1L,KAAK,CAACwD,MAAN,CAAaC,CAAb,CAAe,gDAAf,CAFF;AAGLkI,QAAAA,QAAQ,EAAE,IAHL;AAILC,QAAAA,cAAc,EAAE;AACdQ,UAAAA,YAAY,EAAEpM,KAAK,CAACwD,MAAN,CAAaC,CAAb,CAAe,SAAf,CADA;AAEd4I,UAAAA,WAAW,EAAErM,KAAK,CAACwD,MAAN,CAAaC,CAAb,CAAe,QAAf,CAFC;AAGd6I,UAAAA,cAAc,EAAEtM,KAAK,CAACwD,MAAN,CAAaC,CAAb,CAAe,8CAAf,CAHF;AAId8I,UAAAA,YAAY,EAAE;AAAEC,YAAAA,OAAO,EAAE,WAAX;AAAwBC,YAAAA,MAAM,EAAE;AAAhC,WAJA;AAKdG,UAAAA,aAAa,EAAE,yBAAM;AACnBhM,YAAAA,QAAQ,CAACtB,mCAAmC,CAAC;AAAEuN,cAAAA,MAAM,EAAEzC,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAE0C,UAAhB;AAA4BH,cAAAA,kBAAkB,EAAlBA,kBAA5B;AAAgD7L,cAAAA,SAAS,EAATA;AAAhD,aAAD,CAApC,CAAR;AACD,WAPa;AAQdiM,UAAAA,aAAa,EAAE,yBAAM,CAAE,CART;AASdC,UAAAA,WAAW,EAAE,uBAAM,CAAE;AATP;AAJX;AAFC,KAAD,CADH,CAAR;AAqBD,GAtBD;;AAwBA,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAC7C,IAAD,EAAU;AACnCxJ,IAAAA,QAAQ,CAACnB,qBAAqB,CAAC;AAAEqN,MAAAA,UAAU,EAAE1C,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAE0C,UAApB;AAAgCvC,MAAAA,YAAY,EAAEH,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAExG;AAApD,KAAD,CAAtB,CAAR;AACD,GAFD;;AAIA,MAAMsJ,SAAS,GAAG,CAChB;AAAEC,IAAAA,GAAG,EAAE,eAAP;AAAwBzJ,IAAAA,KAAK,EAAE;AAA/B,GADgB,EAEhB;AAAEyJ,IAAAA,GAAG,EAAE,oBAAP;AAA6BzJ,IAAAA,KAAK,EAAE;AAApC,GAFgB,EAGhB;AAAEyJ,IAAAA,GAAG,EAAE,WAAP;AAAoBzJ,IAAAA,KAAK,EAAE;AAA3B,GAHgB,EAIhB;AAAEyJ,IAAAA,GAAG,EAAE,gBAAP;AAAyBzJ,IAAAA,KAAK,EAAE;AAAhC,GAJgB,EAKhB;AAAEyJ,IAAAA,GAAG,EAAE,gBAAP;AAAyBzJ,IAAAA,KAAK,EAAE;AAAhC,GALgB,EAMhB;AAAEyJ,IAAAA,GAAG,EAAE,6BAAP;AAAsCzJ,IAAAA,KAAK,EAAE;AAA7C,GANgB,EAOhB;AAAEyJ,IAAAA,GAAG,EAAE,gBAAP;AAAyBzJ,IAAAA,KAAK,EAAE;AAAhC,GAPgB,EAQhB;AAAEyJ,IAAAA,GAAG,EAAE,6BAAP;AAAsCzJ,IAAAA,KAAK,EAAE;AAA7C,GARgB,EAShB;AAAEyJ,IAAAA,GAAG,EAAE,sBAAP;AAA+BzJ,IAAAA,KAAK,EAAE;AAAtC,GATgB,EAUhB;AAAEyJ,IAAAA,GAAG,EAAE,mBAAP;AAA4BzJ,IAAAA,KAAK,EAAE;AAAnC,GAVgB,EAWhB;AAAEyJ,IAAAA,GAAG,EAAE,+BAAP;AAAwCzJ,IAAAA,KAAK,EAAE;AAA/C,GAXgB,EAYhB;AAAEyJ,IAAAA,GAAG,EAAE,MAAP;AAAezJ,IAAAA,KAAK,EAAE;AAAtB,GAZgB,EAahB;AAAEyJ,IAAAA,GAAG,EAAE,iBAAP;AAA0BzJ,IAAAA,KAAK,EAAE;AAAjC,GAbgB,EAchB;AAAEyJ,IAAAA,GAAG,EAAE,oBAAP;AAA6BzJ,IAAAA,KAAK,EAAE;AAApC,GAdgB,EAehB;AAAEyJ,IAAAA,GAAG,EAAE,cAAP;AAAuBzJ,IAAAA,KAAK,EAAE;AAA9B,GAfgB,EAgBhB;AAAEyJ,IAAAA,GAAG,EAAE,UAAP;AAAmBzJ,IAAAA,KAAK,EAAE;AAA1B,GAhBgB,CAAlB;;AAmBA,MAAM0J,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5BxM,IAAAA,QAAQ,CACNxB,SAAS,CAAC;AACRoM,MAAAA,SAAS,EAAE,kBADH;AAER9F,MAAAA,KAAK,EAAE;AACLgG,QAAAA,KAAK,EAAE1L,KAAK,CAACwD,MAAN,CAAaC,CAAb,CAAe,0DAAf,CADF;AAELgI,QAAAA,SAAS,EAAE,IAFN;AAGLE,QAAAA,QAAQ,EAAE,IAHL;AAIL0B,QAAAA,cAAc,EAAE,KAJX;AAKLzB,QAAAA,cAAc,EAAE;AACdhI,UAAAA,IAAI,EAAE,oBADQ;AAEd0J,UAAAA,OAAO,EAAEJ,SAFK;AAGdK,UAAAA,KAAK,EAAE,CAHO;AAIdC,UAAAA,wBAAwB,EAAE,IAJZ;AAKdC,UAAAA,MAAM,EAAE;AACNC,YAAAA,KAAK,EAAE;AACLhC,cAAAA,KAAK,EAAE1L,KAAK,CAACwD,MAAN,CAAamK,IAAb,CAAkB,gEAAlB,CADF;AAELC,cAAAA,IAAI,EAAE5N,KAAK,CAACwD,MAAN,CAAaC,CAAb,CAAe,+DAAf;AAFD,aADD;AAKNoK,YAAAA,KAAK,EAAE;AACLnC,cAAAA,KAAK,EAAE1L,KAAK,CAACwD,MAAN,CAAamK,IAAb,CAAkB,gEAAlB,CADF;AAELC,cAAAA,IAAI,EAAE5N,KAAK,CAACwD,MAAN,CAAaC,CAAb,CAAe,+DAAf;AAFD,aALD;AASNqK,YAAAA,KAAK,EAAE;AACLpC,cAAAA,KAAK,EAAE1L,KAAK,CAACwD,MAAN,CAAamK,IAAb,CAAkB,gEAAlB,CADF;AAELC,cAAAA,IAAI,EAAE5N,KAAK,CAACwD,MAAN,CAAaC,CAAb,CAAe,EAAf;AAFD;AATD,WALM;AAmBdnD,UAAAA,QAAQ,EAAE;AACRyN,YAAAA,OAAO,EAAE,iBAAChE,IAAD,EAAU;AACjBnJ,cAAAA,QAAQ,CAAClB,mCAAmC,CAACqK,IAAD,CAApC,CAAR;AACD,aAHO;AAIRiE,YAAAA,KAAK,EAAE,eAACjE,IAAD,EAAU;AACfnJ,cAAAA,QAAQ,CAACjB,gCAAgC,CAACoK,IAAD,CAAjC,CAAR;AACD,aANO;AAORkE,YAAAA,MAAM,EAAE,kBAAM;AACZrN,cAAAA,QAAQ,CAAChB,2BAA2B,EAA5B,CAAR;AACD;AATO;AAnBI;AALX;AAFC,KAAD,CADH,CAAR;AA0CD,GA3CD;;AA6CA,MAAIsO,6BAA6B,GAAG;AAClCC,IAAAA,YAAY,EAAE,CACZ;AAAEhG,MAAAA,EAAE,EAAE,IAAN;AAAYvE,MAAAA,IAAI,EAAE,IAAlB;AAAwBwK,MAAAA,OAAO,EAAE,KAAjC;AAAwCvK,MAAAA,IAAI,EAAE,OAA9C;AAAuDH,MAAAA,KAAK,EAAE,EAA9D;AAAkE2K,MAAAA,KAAK,EAAE,EAAzE;AAA6E9K,MAAAA,KAAK,EAAE,EAApF;AAAwF+K,MAAAA,OAAO,EAAE;AAAjG,KADY,EAEZ;AACEnG,MAAAA,EAAE,EAAE,eADN;AAEEvE,MAAAA,IAAI,EAAE,eAFR;AAGEwK,MAAAA,OAAO,EAAE,IAHX;AAIEvK,MAAAA,IAAI,EAAE,MAJR;AAKEH,MAAAA,KAAK,EAAE,EALT;AAME2K,MAAAA,KAAK,EAAE,GANT;AAOE9K,MAAAA,KAAK,EAAE,qBAPT;AAQEU,MAAAA,QAAQ,EAAE;AARZ,KAFY,EAYZ;AACEkE,MAAAA,EAAE,EAAE,oBADN;AAEEvE,MAAAA,IAAI,EAAE,oBAFR;AAGEwK,MAAAA,OAAO,EAAE,IAHX;AAIEG,MAAAA,QAAQ,EAAE,IAJZ;AAKEC,MAAAA,MAAM,EAAE,KALV;AAME3K,MAAAA,IAAI,EAAE,aANR;AAOEH,MAAAA,KAAK,EAAE,EAPT;AAQE2K,MAAAA,KAAK,EAAE,GART;AASE9K,MAAAA,KAAK,EAAEvD,KAAK,CAACwD,MAAN,CAAaC,CAAb,CAAe,6CAAf;AATT,KAZY,EAuBZ;AACE0E,MAAAA,EAAE,EAAE,WADN;AAEEvE,MAAAA,IAAI,EAAE,WAFR;AAGEwK,MAAAA,OAAO,EAAE,IAHX;AAIEG,MAAAA,QAAQ,EAAE,IAJZ;AAKEC,MAAAA,MAAM,EAAE,KALV;AAME3K,MAAAA,IAAI,EAAE,aANR;AAOEH,MAAAA,KAAK,EAAE,EAPT;AAQE2K,MAAAA,KAAK,EAAE,GART;AASE9K,MAAAA,KAAK,EAAEvD,KAAK,CAACwD,MAAN,CAAaC,CAAb,CAAe,0CAAf;AATT,KAvBY,EAkCZ;AACE0E,MAAAA,EAAE,EAAE,gBADN;AAEEvE,MAAAA,IAAI,EAAE,gBAFR;AAGEwK,MAAAA,OAAO,EAAE,IAHX;AAIEG,MAAAA,QAAQ,EAAE,IAJZ;AAKEC,MAAAA,MAAM,EAAE,KALV;AAME3K,MAAAA,IAAI,EAAE,aANR;AAOEH,MAAAA,KAAK,EAAE,EAPT;AAQE2K,MAAAA,KAAK,EAAE,GART;AASE9K,MAAAA,KAAK,EAAEvD,KAAK,CAACwD,MAAN,CAAaC,CAAb,CAAe,+CAAf;AATT,KAlCY,EA6CZ;AACE0E,MAAAA,EAAE,EAAE,gBADN;AAEEvE,MAAAA,IAAI,EAAE,gBAFR;AAGEwK,MAAAA,OAAO,EAAE,IAHX;AAIEG,MAAAA,QAAQ,EAAE,IAJZ;AAKEC,MAAAA,MAAM,EAAE,KALV;AAME3K,MAAAA,IAAI,EAAE,aANR;AAOEH,MAAAA,KAAK,EAAE,EAPT;AAQE2K,MAAAA,KAAK,EAAE,GART;AASE9K,MAAAA,KAAK,EAAEvD,KAAK,CAACwD,MAAN,CAAaC,CAAb,CAAe,+CAAf;AATT,KA7CY,EAwDZ;AACE0E,MAAAA,EAAE,EAAE,6BADN;AAEEiG,MAAAA,OAAO,EAAE,IAFX;AAGExK,MAAAA,IAAI,EAAE,6BAHR;AAIE2K,MAAAA,QAAQ,EAAE,IAJZ;AAKEC,MAAAA,MAAM,EAAE,KALV;AAME3K,MAAAA,IAAI,EAAE,aANR;AAOEH,MAAAA,KAAK,EAAE,EAPT;AAQE2K,MAAAA,KAAK,EAAE,GART;AASE9K,MAAAA,KAAK,EAAEvD,KAAK,CAACwD,MAAN,CAAaC,CAAb,CAAe,4DAAf;AATT,KAxDY,EAmEZ;AACE0E,MAAAA,EAAE,EAAE,gBADN;AAEEvE,MAAAA,IAAI,EAAE,gBAFR;AAGEwK,MAAAA,OAAO,EAAE,IAHX;AAIEG,MAAAA,QAAQ,EAAE,IAJZ;AAKEC,MAAAA,MAAM,EAAE,KALV;AAME3K,MAAAA,IAAI,EAAE,MANR;AAOEH,MAAAA,KAAK,EAAE,EAPT;AAQE2K,MAAAA,KAAK,EAAE,GART;AASE9K,MAAAA,KAAK,EAAEvD,KAAK,CAACwD,MAAN,CAAaC,CAAb,CAAe,2CAAf;AATT,KAnEY,EA8EZ;AACE0E,MAAAA,EAAE,EAAE,6BADN;AAEEvE,MAAAA,IAAI,EAAE,6BAFR;AAGEwK,MAAAA,OAAO,EAAE,IAHX;AAIEG,MAAAA,QAAQ,EAAE,IAJZ;AAKEC,MAAAA,MAAM,EAAE,KALV;AAME3K,MAAAA,IAAI,EAAE,aANR;AAOEH,MAAAA,KAAK,EAAE,EAPT;AAQE2K,MAAAA,KAAK,EAAE,GART;AASE9K,MAAAA,KAAK,EAAEvD,KAAK,CAACwD,MAAN,CAAaC,CAAb,CAAe,4DAAf;AATT,KA9EY,EAyFZ;AACE0E,MAAAA,EAAE,EAAE,sBADN;AAEEiG,MAAAA,OAAO,EAAE,IAFX;AAGEG,MAAAA,QAAQ,EAAE,IAHZ;AAIEC,MAAAA,MAAM,EAAE,KAJV;AAKE3K,MAAAA,IAAI,EAAE,MALR;AAMEH,MAAAA,KAAK,EAAE,EANT;AAOE2K,MAAAA,KAAK,EAAE,GAPT;AAQE9K,MAAAA,KAAK,EAAEvD,KAAK,CAACwD,MAAN,CAAaC,CAAb,CAAe,qDAAf;AART,KAzFY,EAmGZ;AACE0E,MAAAA,EAAE,EAAE,mBADN;AAEEiG,MAAAA,OAAO,EAAE,IAFX;AAGEG,MAAAA,QAAQ,EAAE,IAHZ;AAIEC,MAAAA,MAAM,EAAE,KAJV;AAKE3K,MAAAA,IAAI,EAAE,aALR;AAMEH,MAAAA,KAAK,EAAE,EANT;AAOE2K,MAAAA,KAAK,EAAE,GAPT;AAQE9K,MAAAA,KAAK,EAAEvD,KAAK,CAACwD,MAAN,CAAaC,CAAb,CAAe,kDAAf;AART,KAnGY,EA6GZ;AACE0E,MAAAA,EAAE,EAAE,+BADN;AAEEiG,MAAAA,OAAO,EAAE,IAFX;AAGEG,MAAAA,QAAQ,EAAE,IAHZ;AAIEC,MAAAA,MAAM,EAAE,KAJV;AAKE3K,MAAAA,IAAI,EAAE,QALR;AAME4K,MAAAA,WAAW,EAAE,mCANf;AAOErK,MAAAA,OAAO,EAAEzB,2BAPX;AAQE+L,MAAAA,SAAS,EAAE,IARb;AASEC,MAAAA,WAAW,EAAE,OATf;AAUEjL,MAAAA,KAAK,EAAE3D,SAAS,CAAC0I,YAVnB;AAWE4F,MAAAA,KAAK,EAAE,GAXT;AAYE9K,MAAAA,KAAK,EAAEvD,KAAK,CAACwD,MAAN,CAAaC,CAAb,CAAe,wDAAf;AAZT,KA7GY,EA2HZ;AACE0E,MAAAA,EAAE,EAAE,wBADN;AAEEiG,MAAAA,OAAO,EAAE,IAFX;AAGEG,MAAAA,QAAQ,EAAE,IAHZ;AAIEC,MAAAA,MAAM,EAAE,KAJV;AAKE3K,MAAAA,IAAI,EAAE,wBALR;AAMEH,MAAAA,KAAK,EAAE,EANT;AAOE2K,MAAAA,KAAK,EAAE,GAPT;AAQE9K,MAAAA,KAAK,EAAE;AART,KA3HY,EAqIZ;AACE4E,MAAAA,EAAE,EAAE,OADN;AAEEiG,MAAAA,OAAO,EAAE,IAFX;AAGEG,MAAAA,QAAQ,EAAE,IAHZ;AAIEC,MAAAA,MAAM,EAAE,KAJV;AAKE3K,MAAAA,IAAI,EAAE,OALR;AAMEH,MAAAA,KAAK,EAAE,EANT;AAOE2K,MAAAA,KAAK,EAAE,EAPT;AAQE9K,MAAAA,KAAK,EAAEvD,KAAK,CAACwD,MAAN,CAAaC,CAAb,CAAe,sCAAf;AART,KArIY,EA+IZ;AACE0E,MAAAA,EAAE,EAAE,MADN;AAEEiG,MAAAA,OAAO,EAAE,IAFX;AAGEG,MAAAA,QAAQ,EAAE,IAHZ;AAIEC,MAAAA,MAAM,EAAE,KAJV;AAKE3K,MAAAA,IAAI,EAAE,aALR;AAMEH,MAAAA,KAAK,EAAE,EANT;AAOE2K,MAAAA,KAAK,EAAE,EAPT;AAQE9K,MAAAA,KAAK,EAAEvD,KAAK,CAACwD,MAAN,CAAaC,CAAb,CAAe,qCAAf;AART,KA/IY,EAyJZ;AACE0E,MAAAA,EAAE,EAAE,iBADN;AAEEvE,MAAAA,IAAI,EAAE,iBAFR;AAGEwK,MAAAA,OAAO,EAAE,IAHX;AAIEG,MAAAA,QAAQ,EAAE,IAJZ;AAKEC,MAAAA,MAAM,EAAE,KALV;AAME3K,MAAAA,IAAI,EAAE,aANR;AAOEH,MAAAA,KAAK,EAAE,EAPT;AAQE2K,MAAAA,KAAK,EAAE,GART;AASE9K,MAAAA,KAAK,EAAEvD,KAAK,CAACwD,MAAN,CAAaC,CAAb,CAAe,gDAAf;AATT,KAzJY,EAoKZ;AACE0E,MAAAA,EAAE,EAAE,oBADN;AAEEiG,MAAAA,OAAO,EAAE,IAFX;AAGEG,MAAAA,QAAQ,EAAE,IAHZ;AAIEC,MAAAA,MAAM,EAAE,KAJV;AAKE3K,MAAAA,IAAI,EAAE,QALR;AAME4K,MAAAA,WAAW,EAAE,wBANf;AAOErK,MAAAA,OAAO,EAAEjD,iBAPX;AAQEuN,MAAAA,SAAS,EAAE,gBARb;AASEC,MAAAA,WAAW,EAAE,YATf;AAUEjL,MAAAA,KAAK,EAAE,EAVT;AAWE2K,MAAAA,KAAK,EAAE,GAXT;AAYE9K,MAAAA,KAAK,EAAEvD,KAAK,CAACwD,MAAN,CAAaC,CAAb,CAAe,mDAAf;AAZT,KApKY,EAkLZ;AACE0E,MAAAA,EAAE,EAAE,cADN;AAEEiG,MAAAA,OAAO,EAAE,IAFX;AAGEG,MAAAA,QAAQ,EAAE,IAHZ;AAIEC,MAAAA,MAAM,EAAE,KAJV;AAKE3K,MAAAA,IAAI,EAAE,QALR;AAME4K,MAAAA,WAAW,EAAE,kBANf;AAOErK,MAAAA,OAAO,EAAErE,SAAS,CAACmJ,qBAPrB;AAQEwF,MAAAA,SAAS,EAAE,MARb;AASEC,MAAAA,WAAW,EAAE,MATf;AAUEjL,MAAAA,KAAK,EAAE,EAVT;AAWE2K,MAAAA,KAAK,EAAE,GAXT;AAYE9K,MAAAA,KAAK,EAAEvD,KAAK,CAACwD,MAAN,CAAaC,CAAb,CAAe,6CAAf;AAZT,KAlLY,EAgMZ;AACE0E,MAAAA,EAAE,EAAE,UADN;AAEEiG,MAAAA,OAAO,EAAE,IAFX;AAGEG,MAAAA,QAAQ,EAAE,IAHZ;AAIEC,MAAAA,MAAM,EAAE,KAJV;AAKE3K,MAAAA,IAAI,EAAE,QALR;AAME4K,MAAAA,WAAW,EAAE,cANf;AAOErK,MAAAA,OAAO,EAAErE,SAAS,CAACsJ,eAPrB;AAQEqF,MAAAA,SAAS,EAAE,MARb;AASEC,MAAAA,WAAW,EAAE,MATf;AAUEjL,MAAAA,KAAK,EAAE,EAVT;AAWE2K,MAAAA,KAAK,EAAE,GAXT;AAYE9K,MAAAA,KAAK,EAAEvD,KAAK,CAACwD,MAAN,CAAaC,CAAb,CAAe,uCAAf;AAZT,KAhMY,EA8MZ;AACE0E,MAAAA,EAAE,EAAE,cADN;AAEEiG,MAAAA,OAAO,EAAE,IAFX;AAGEG,MAAAA,QAAQ,EAAE,IAHZ;AAIEC,MAAAA,MAAM,EAAE,KAJV;AAKE3K,MAAAA,IAAI,EAAE,YALR;AAMEH,MAAAA,KAAK,EAAE,EANT;AAOE2K,MAAAA,KAAK,EAAE,GAPT;AAQE9H,MAAAA,MAAM,EAAEvH,MAAM,CAACyK,EAAP,CAAUlD,MAAV,CAAiBqI,IAAjB,CAAsBC,IARhC;AASEtL,MAAAA,KAAK,EAAEvD,KAAK,CAACwD,MAAN,CAAaC,CAAb,CAAe,2CAAf;AATT,KA9MY,EAyNZ;AAAE0E,MAAAA,EAAE,EAAE,YAAN;AAAoBiG,MAAAA,OAAO,EAAE,IAA7B;AAAmCG,MAAAA,QAAQ,EAAE,IAA7C;AAAmDC,MAAAA,MAAM,EAAE,KAA3D;AAAkE3K,MAAAA,IAAI,EAAE,UAAxE;AAAoFH,MAAAA,KAAK,EAAE,EAA3F;AAA+F2K,MAAAA,KAAK,EAAE,EAAtG;AAA0G9K,MAAAA,KAAK,EAAE;AAAjH,KAzNY,CADoB;AA4NlCuL,IAAAA,SAAS,EAAE;AA5NuB,GAApC;;AA+NA,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,CAAD,EAAIC,MAAJ,EAAYC,GAAZ,EAAiBtL,IAAjB,EAA0B;AAAA;;AACnD,QAAIF,KAAK,GAAGuL,MAAM,CAACpL,IAAP,KAAgB,MAAhB,GAAyB,CAAAmL,CAAC,SAAD,IAAAA,CAAC,WAAD,yBAAAA,CAAC,CAAEG,MAAH,wDAAWzL,KAAX,KAAoB,EAA7C,GAAkD,CAAAsL,CAAC,SAAD,IAAAA,CAAC,WAAD,YAAAA,CAAC,CAAEI,UAAH,KAAiB,EAA/E;;AACA,QAAIH,MAAM,CAACpL,IAAP,KAAgB,MAApB,EAA4B;AAC1BmL,MAAAA,CAAC,CAACK,cAAF;AACD;;AAED,QAAIJ,MAAM,CAAC9G,EAAP,KAAc,6BAAlB,EAAiD;AAC/CjG,MAAAA,0BAA0B,CAAC,UAACsF,SAAD;AAAA,eACzBA,SAAS,CAACxE,GAAV,CAAc,UAACyE,EAAD;AAAA;;AAAA,iBACZA,EAAE,CAACU,EAAH,KAAU+G,GAAG,CAAC/G,EAAd,mCAESV,EAFT,6DAGOwH,MAHP,aAGOA,MAHP,uBAGOA,MAAM,CAAE9G,EAHf,EAGoBzE,KAHpB,qEAIsCA,KAAK,GAAG,KAAH,GAAW,IAJtD,sBAMI+D,EAPQ;AAAA,SAAd,CADyB;AAAA,OAAD,CAA1B;AAWD;;AACD,QAAIwH,MAAM,CAAC9G,EAAP,KAAc,6BAAlB,EAAiD;AAC/CjG,MAAAA,0BAA0B,CAAC,UAACsF,SAAD;AAAA,eACzBA,SAAS,CAACxE,GAAV,CAAc,UAACyE,EAAD;AAAA;;AAAA,iBACZA,EAAE,CAACU,EAAH,KAAU+G,GAAG,CAAC/G,EAAd,mCAESV,EAFT,6DAGOwH,MAHP,aAGOA,MAHP,uBAGOA,MAAM,CAAE9G,EAHf,EAGoBzE,KAHpB,qEAIsCA,KAAK,GAAG,KAAH,GAAW,IAJtD,sBAMI+D,EAPQ;AAAA,SAAd,CADyB;AAAA,OAAD,CAA1B;AAWD;;AACD,QAAIwH,MAAM,CAAC9G,EAAP,KAAc,6BAAd,IAA+C8G,MAAM,CAAC9G,EAAP,KAAc,6BAAjE,EAAgG;AAC9FjG,MAAAA,0BAA0B,CAAC,UAACsF,SAAD;AAAA,eAAeA,SAAS,CAACxE,GAAV,CAAc,UAACyE,EAAD;AAAA,iBAASA,EAAE,CAACU,EAAH,KAAU+G,GAAG,CAAC/G,EAAd,mCAAwBV,EAAxB,2BAA6BwH,MAA7B,aAA6BA,MAA7B,uBAA6BA,MAAM,CAAE9G,EAArC,EAA0CzE,KAA1C,KAAoD+D,EAA7D;AAAA,SAAd,CAAf;AAAA,OAAD,CAA1B;AACD;;AAED,QAAIyH,GAAG,CAACtI,cAAJ,IAAsBsI,GAAG,CAACrI,2BAA1B,IAAyDqI,GAAG,CAACnI,2BAA7D,IAA4FmI,GAAG,CAACjI,iBAApG,EAAuH;AACrH,UAAMqI,cAAc,GAAG,CAACJ,GAAG,CAACtI,cAAL,EAAqBsI,GAAG,CAACrI,2BAAzB,EAAsDqI,GAAG,CAACnI,2BAA1D,EAAuFmI,GAAG,CAACjI,iBAA3F,CAAvB;AACA,UAAMsI,UAAU,GAAGvP,KAAK,CAAC6C,OAAN,CAAc2G,aAAd,CAA4B8F,cAA5B,EAA4CtQ,MAAM,CAACyK,EAAP,CAAUlD,MAAV,CAAiBmD,OAAjB,CAAyBC,OAArE,CAAnB;AACAzH,MAAAA,0BAA0B,CAAC,UAACsF,SAAD;AAAA,eAAeA,SAAS,CAACxE,GAAV,CAAc,UAACyE,EAAD;AAAA,iBAASA,EAAE,CAACU,EAAH,KAAU+G,GAAG,CAAC/G,EAAd,mCAAwBV,EAAxB;AAA4B8B,YAAAA,KAAK,EAAEgG;AAAnC,eAAkD9H,EAA3D;AAAA,SAAd,CAAf;AAAA,OAAD,CAA1B;AACD,KAJD,MAIO;AACLvF,MAAAA,0BAA0B,CAAC,UAACsF,SAAD;AAAA,eAAeA,SAAS,CAACxE,GAAV,CAAc,UAACyE,EAAD;AAAA,iBAASA,EAAE,CAACU,EAAH,KAAU+G,GAAG,CAAC/G,EAAd,mCAAwBV,EAAxB;AAA4B8B,YAAAA,KAAK,EAAE;AAAnC,eAA4C9B,EAArD;AAAA,SAAd,CAAf;AAAA,OAAD,CAA1B;AACD;;AACD7G,IAAAA,QAAQ,CAACf,0BAA0B,CAACoC,uBAAD,CAA3B,CAAR;AACD,GA5CD;;AA8CA,MAAMuN,iBAAiB,GAAG,SAApBA,iBAAoB,CAACR,CAAD,EAAIS,aAAJ,EAAmBR,MAAnB,EAA2BC,GAA3B,EAAmC;AAC3DF,IAAAA,CAAC,CAACK,cAAF;AACAnN,IAAAA,0BAA0B,CAAC,UAACsF,SAAD;AAAA,aACzBA,SAAS,CAACxE,GAAV,CAAc,UAACyE,EAAD;AAAA;;AAAA,eACZA,EAAE,CAACU,EAAH,KAAU+G,GAAG,CAAC/G,EAAd,mCAESV,EAFT,6DAGOwH,MAHP,aAGOA,MAHP,uBAGOA,MAAM,CAAE9G,EAHf,EAGoBsH,aAHpB,aAGoBA,aAHpB,uBAGoBA,aAAa,CAAE/L,KAHnC,mCAIOuL,MAJP,aAIOA,MAJP,uBAIOA,MAAM,CAAER,WAJf,EAI6BgB,aAJ7B,aAI6BA,aAJ7B,uBAI6BA,aAAa,CAAE7L,IAJ5C,sBAMI6D,EAPQ;AAAA,OAAd,CADyB;AAAA,KAAD,CAA1B;AAWD,GAbD;;AAeA,MAAMiI,aAAa,GAAG,SAAhBA,aAAgB,CAACV,CAAD,EAAIE,GAAJ,EAAY;AAChCF,IAAAA,CAAC,CAACK,cAAF;;AACA,QAAI,CAACjN,UAAL,EAAiB;AACf,UAAI,CAAC8M,GAAG,CAACxH,aAAT,EAAwB;AACtBxF,QAAAA,0BAA0B,CAAC,UAACsF,SAAD;AAAA,iBACzBA,SAAS,CAACxE,GAAV,CAAc,UAACyE,EAAD;AAAA,mBAASA,EAAE,CAACU,EAAH,KAAU+G,GAAG,CAAC/G,EAAd,mCAAwBV,EAAxB;AAA4BC,cAAAA,aAAa,EAAE;AAA3C,iDAAyDD,EAAzD;AAA6DC,cAAAA,aAAa,EAAE;AAA5E,cAAT;AAAA,WAAd,CADyB;AAAA,SAAD,CAA1B;AAGD;AACF;AACF,GATD;;AAWA,MAAMiI,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,UAAD,EAAalM,KAAb,EAAoBwL,GAApB,EAA4B;AACxDhN,IAAAA,0BAA0B,CAAC,UAACsF,SAAD;AAAA,aAAeA,SAAS,CAACxE,GAAV,CAAc,UAACyE,EAAD;AAAA,eAASA,EAAE,CAACU,EAAH,KAAU+G,GAAG,CAAC/G,EAAd,mCAAwBV,EAAxB,2BAA6BmI,UAA7B,EAA0ClM,KAA1C,KAAoD+D,EAA7D;AAAA,OAAd,CAAf;AAAA,KAAD,CAA1B;AACD,GAFD;;AAGA,MAAMoI,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAC3H,KAAD,EAAW;AACxC,QAAI,CAAC9F,UAAL,EAAiB;AACf,UAAM0N,YAAY,GAAG7N,uBAAH,aAAGA,uBAAH,uBAAGA,uBAAuB,CAAEkB,IAAzB,CAA8B,UAAC0F,CAAD;AAAA,eAAOA,CAAC,CAACV,EAAF,KAASD,KAAK,GAAG,CAAxB;AAAA,OAA9B,CAArB;AACA,UAAM6H,UAAU,GAAG9N,uBAAH,aAAGA,uBAAH,uBAAGA,uBAAuB,CAAEkB,IAAzB,CAA8B,UAAC0F,CAAD;AAAA,eAAOA,CAAC,CAACV,EAAF,KAASD,KAAhB;AAAA,OAA9B,CAAnB;AACAhG,MAAAA,0BAA0B,CAAC,UAACsF,SAAD;AAAA,eACzBA,SAAS,CAACxE,GAAV,CAAc,UAACyE,EAAD;AAAA,iBACZA,EAAE,CAACU,EAAH,KAAUD,KAAV,mCAEST,EAFT;AAGMU,YAAAA,EAAE,EAAE4H,UAAF,aAAEA,UAAF,uBAAEA,UAAU,CAAE5H,EAHtB;AAIM1B,YAAAA,kBAAkB,EAAEqJ,YAAF,aAAEA,YAAF,uBAAEA,YAAY,CAAErJ,kBAJxC;AAKMC,YAAAA,SAAS,EAAEoJ,YAAF,aAAEA,YAAF,uBAAEA,YAAY,CAAEpJ,SAL/B;AAMMC,YAAAA,cAAc,EAAEmJ,YAAF,aAAEA,YAAF,uBAAEA,YAAY,CAAEnJ,cANpC;AAOMC,YAAAA,cAAc,EAAEkJ,YAAF,aAAEA,YAAF,uBAAEA,YAAY,CAAElJ,cAPpC;AAQMC,YAAAA,2BAA2B,EAAEiJ,YAAF,aAAEA,YAAF,uBAAEA,YAAY,CAAEjJ,2BARjD;AASMC,YAAAA,cAAc,EAAEgJ,YAAF,aAAEA,YAAF,uBAAEA,YAAY,CAAEhJ,cATpC;AAUMkJ,YAAAA,8BAA8B,EAAEF,YAAF,aAAEA,YAAF,uBAAEA,YAAY,CAAEE,8BAVpD;AAWMjJ,YAAAA,2BAA2B,EAAE+I,YAAF,aAAEA,YAAF,uBAAEA,YAAY,CAAE/I,2BAXjD;AAYMC,YAAAA,oBAAoB,EAAE8I,YAAF,aAAEA,YAAF,uBAAEA,YAAY,CAAE9I,oBAZ1C;AAaMiJ,YAAAA,8BAA8B,EAAEH,YAAF,aAAEA,YAAF,uBAAEA,YAAY,CAAEG,8BAbpD;AAcMhJ,YAAAA,iBAAiB,EAAE6I,YAAF,aAAEA,YAAF,uBAAEA,YAAY,CAAE7I,iBAdvC;AAeMC,YAAAA,6BAA6B,EAAE4I,YAAF,aAAEA,YAAF,uBAAEA,YAAY,CAAE5I,6BAfnD;AAgBMgJ,YAAAA,sBAAsB,EAAEJ,YAAF,aAAEA,YAAF,uBAAEA,YAAY,CAAEI,sBAhB5C;AAiBM3G,YAAAA,KAAK,EAAEuG,YAAF,aAAEA,YAAF,uBAAEA,YAAY,CAAEvG,KAjB3B;AAkBMpC,YAAAA,IAAI,EAAE2I,YAAF,aAAEA,YAAF,uBAAEA,YAAY,CAAE3I,IAlB1B;AAmBMC,YAAAA,eAAe,EAAE0I,YAAF,aAAEA,YAAF,uBAAEA,YAAY,CAAE1I,eAnBrC;AAoBMC,YAAAA,kBAAkB,EAAEyI,YAAF,aAAEA,YAAF,uBAAEA,YAAY,CAAEzI,kBApBxC;AAqBMC,YAAAA,YAAY,EAAEwI,YAAF,aAAEA,YAAF,uBAAEA,YAAY,CAAExI,YArBlC;AAsBMC,YAAAA,QAAQ,EAAEuI,YAAF,aAAEA,YAAF,uBAAEA,YAAY,CAAEvI;AAtB9B,eAwBIE,EAzBQ;AAAA,SAAd,CADyB;AAAA,OAAD,CAA1B;AA6BD;AACF,GAlCD,CA7qByF,CAitBzF;;;AACA,MAAI,CAACpC,aAAD,IAAkB,CAAClF,WAAvB,EAAoC,OAAO,IAAP;AAEpC,sBACE,QAAC,iCAAD;AACE,IAAA,aAAa,EAAEA,WAAF,aAAEA,WAAF,uBAAEA,WAAW,CAAEgI,EAD9B;AAEE,IAAA,SAAS,EAAErH,SAFb;AAGE,IAAA,MAAM,EAAE6C,MAHV;AAIE,IAAA,aAAa,EAAE0B,aAJjB;AAKE,IAAA,SAAS,EAAEJ,eAAF,aAAEA,eAAF,uBAAEA,eAAe,CAAEkL,SAL9B;AAME,IAAA,UAAU,EAAEhO,UANd;AAOE,IAAA,UAAU,EAAEC,UAPd;AAQE,IAAA,wBAAwB,EAAEjC,WAAF,aAAEA,WAAF,uBAAEA,WAAW,CAAE+F,yBARzC;AASE,IAAA,SAAS,EAAEjE,uBATb;AAUE,IAAA,WAAW,EAAEiM,6BAVf;AAWE,IAAA,QAAQ,kCACH5N,QADG;AAENmM,MAAAA,MAAM,EAAE9E,YAFF;AAGN+E,MAAAA,0BAA0B,EAA1BA,0BAHM;AAIN0D,MAAAA,QAAQ,EAAEnD,kBAJJ;AAKNoD,MAAAA,IAAI,EAAE9K,UALA;AAMN6H,MAAAA,eAAe,EAAfA,eANM;AAON9B,MAAAA,gCAAgC,EAAhCA,gCAPM;AAQNgF,MAAAA,mBAAmB,EAAEvB,kBARf;AASNwB,MAAAA,mBAAmB,EAAEb,aATf;AAUNc,MAAAA,kBAAkB,EAAEhB,iBAVd;AAWNiB,MAAAA,gBAAgB,EAAEd,qBAXZ;AAYNE,MAAAA,sBAAsB,EAAEA;AAZlB,MAXV;AAyBE,IAAA,GAAG,EAAElP;AAzBP;AAAA;AAAA;AAAA;AAAA,UADF;AA6BD;;GAjvBuBV,6B;UACLpB,W,EAEJC,W,EACKA,W,EACwBA,W,EACHA,W,EACjBA,W,EACIA,W,EAWJA,W;;;KAnBAmB,6B;AAAAA,6B","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport get from 'lodash/get';\r\nimport config from 'config';\r\nimport moment from 'moment';\r\n\r\n// app\r\nimport ProcessingInstructionsDetailsView from './ProcessingInstructionsDetails.view';\r\nimport {\r\n  selectUser,\r\n  showModal,\r\n  updateProcessingInstruction,\r\n  removePremiumTaxSignedLinesDocument,\r\n  addLoader,\r\n  storeProcessingInstructionDocuments,\r\n  viewDocumentsDownload,\r\n  setRiskRefsUploadWizardExcelExtract,\r\n  setRiskRefsUploadWizardHeaderMap,\r\n  submitExcelUploadedRiskRefs,\r\n  updatePiFinancialCheckList,\r\n  savePIRetainedBrokerageAmountData,\r\n} from 'stores';\r\nimport * as constants from 'consts';\r\nimport * as utils from 'utils';\r\n\r\nProcessingInstructionsDetails.propTypes = {\r\n  instruction: PropTypes.object.isRequired,\r\n  handlers: PropTypes.shape({\r\n    back: PropTypes.func.isRequired,\r\n    next: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default function ProcessingInstructionsDetails({ instruction, handlers, childRef }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const user = useSelector(selectUser);\r\n  const documents = useSelector((state) => get(state, 'processingInstructions.documents')) || {};\r\n  const getFinancialCheckListTableDetails = useSelector((state) => get(state, 'processingInstructions.financialCheckList')) || {};\r\n  const getRetainedBrokerageAmountList = useSelector((state) => get(state, 'processingInstructions.RetainedBrokerageAmountList')) || {};\r\n  const excelRiskRefs = useSelector((state) => get(state, 'processingInstructions.excelRiskRefs')) || [];\r\n  const refDataCurrencies = useSelector((state) => get(state, 'referenceData.currencyCodes')) || [];\r\n  const isDraft = utils.processingInstructions.status.isDraft(instruction?.statusId);\r\n  const isRejectedDraft = utils.processingInstructions.status.isRejectedDraft(instruction?.statusId);\r\n  const isSubmittedAuthorisedSignatory = utils.processingInstructions.status.isSubmittedAuthorisedSignatory(instruction?.statusId);\r\n  const isReopened = utils.processingInstructions.status.isReopened(instruction?.statusId);\r\n  const userHasWritePermission = utils.app.access.feature('processingInstructions.processingInstructions', ['create', 'update'], user);\r\n  const userHasApproverAccess = utils.app.access.feature('processingInstructions.approverChecklist', ['create', 'update'], user);\r\n  const isCheckboxesEditable = userHasApproverAccess && isSubmittedAuthorisedSignatory;\r\n  const [financialCheckListTable, setFinancialCheckListTable] = useState(getFinancialCheckListTableDetails);\r\n  const isEditable = userHasWritePermission && (isDraft || isRejectedDraft || isReopened);\r\n  const isReadOnly = !isEditable;\r\n  const referenceData = useSelector((state) => state.referenceData);\r\n\r\n  const retainedBrokerageAmountData = utils.form.getSelectOptions('premiumCurrency', {\r\n    ...referenceData,\r\n    premiumCurrency: utils.processingInstructions.getRetainedBrokerageCurrencies(),\r\n  });\r\n  const [retainedBrokerageAmountList, setRetainedBrokerageAmountList] = useState(getRetainedBrokerageAmountList);\r\n\r\n  useEffect(() => {\r\n    if (utils.generic.isValidArray(excelRiskRefs, true)) {\r\n      const updatedPiRiskRefsFromExcelRiskRefs = financialCheckListTable?.map((piRiskRef) => {\r\n        const matchedRiskRef = excelRiskRefs?.find((exRiskRef) => exRiskRef?.riskReference === piRiskRef?.riskReference);\r\n        if (matchedRiskRef) {\r\n          return { ...piRiskRef, ...matchedRiskRef };\r\n        }\r\n        return piRiskRef;\r\n      });\r\n      setFinancialCheckListTable(updatedPiRiskRefsFromExcelRiskRefs);\r\n    }\r\n  }, [excelRiskRefs]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const toggleOptions = [\r\n    { label: utils.string.t('app.yes'), value: 1 },\r\n    { label: utils.string.t('app.no'), value: 0 },\r\n    { label: utils.string.t('app.na'), value: -1 },\r\n  ];\r\n\r\n  const fields = [\r\n    {\r\n      name: 'highPriority',\r\n      type: 'checkbox',\r\n      value: instruction?.details?.highPriority,\r\n      label: utils.string.t('processingInstructions.processingInstructionsForEndFaBorder.fields.highPriority'),\r\n      muiComponentProps: {\r\n        disabled: isReadOnly,\r\n      },\r\n    },\r\n    {\r\n      name: 'frontEndSendDocs',\r\n      type: 'checkbox',\r\n      value: instruction?.details?.frontEndSendDocs,\r\n      label: utils.string.t('processingInstructions.processingInstructionsForEndFaBorder.fields.frontEndSendDocuments'),\r\n      muiComponentProps: {\r\n        disabled: isReadOnly,\r\n      },\r\n    },\r\n    {\r\n      name: 'premiumTaxCalculationSheetAttachedNumber',\r\n      type: 'toggle',\r\n      // value: getToggleValue(utils.processingInstructions.getFinancialField(instruction, 'premiumTaxCalculationSheetAttached')?.numberValue),\r\n      value: instruction?.details?.premiumTaxCalculationSheetAttached,\r\n      options: toggleOptions,\r\n      buttonGroupProps: {\r\n        exclusive: true,\r\n        disabled: isReadOnly,\r\n      },\r\n    },\r\n    {\r\n      name: 'premiumTaxCalculationSheetAttachedCheckbox',\r\n      type: 'checkbox',\r\n      // value: utils.processingInstructions.getFinancialField(instruction, 'premiumTaxCalculationSheetAttached')\r\n      //   ?.approvedByAuthorisedSignatory,\r\n      value: instruction?.details?.premiumTaxAuthorisedSignatory,\r\n      disabled: !isCheckboxesEditable,\r\n    },\r\n    {\r\n      name: 'signedLinesCalculationSheetAttachedNumber',\r\n      type: 'toggle',\r\n      // value: getToggleValue(\r\n      //   utils.processingInstructions.getFinancialField(instruction, 'signedLinesCalculationSheetAttached')?.numberValue\r\n      // ),\r\n      value: instruction?.details?.signedLinesCalculationSheetAttached,\r\n      options: toggleOptions,\r\n      buttonGroupProps: {\r\n        exclusive: true,\r\n        disabled: isReadOnly,\r\n      },\r\n    },\r\n    {\r\n      name: 'signedLinesCalculationSheetAttachedCheckbox',\r\n      type: 'checkbox',\r\n      // value: utils.processingInstructions.getFinancialField(instruction, 'signedLinesCalculationSheetAttached')\r\n      //   ?.approvedByAuthorisedSignatory,\r\n      value: instruction?.details?.signedLinesAuthorisedSignatory,\r\n      disabled: !isCheckboxesEditable,\r\n    },\r\n    {\r\n      name: 'financialGridCheckbox',\r\n      type: 'checkbox',\r\n      value: instruction?.details?.riskReferencesAuthorisedSignatory,\r\n      disabled: !isCheckboxesEditable,\r\n    },\r\n    {\r\n      name: 'notes',\r\n      label: utils.string.t('processingInstructions.details.notes'),\r\n      type: 'textarea',\r\n      value: instruction?.details?.notes || '',\r\n      muiComponentProps: {\r\n        inputProps: { maxLength: 4000 },\r\n        multiline: true,\r\n        minRows: 4,\r\n        maxRows: 8,\r\n        disabled: isReadOnly,\r\n      },\r\n    },\r\n  ];\r\n\r\n  const selectedRiskRef = instruction?.riskReferences?.find((r) => r.leadPolicy);\r\n\r\n  const [defaultValues, setDefaultValues] = useState();\r\n\r\n  const handleSave = () => {\r\n    const formValues = childRef?.current?.props?.values || {};\r\n\r\n    const updatedInstruction = {\r\n      ...instruction,\r\n      details: {\r\n        ...instruction.details,\r\n        highPriority: formValues.highPriority,\r\n        frontEndSendDocs: formValues.frontEndSendDocs,\r\n        notes: formValues.notes,\r\n        premiumTaxCalculationSheetAttached: formValues.premiumTaxCalculationSheetAttachedNumber, // update exact key name which is used in API\r\n        premiumTaxAuthorisedSignatory: formValues.premiumTaxCalculationSheetAttachedCheckbox, // update exact key name which is used in API\r\n        signedLinesCalculationSheetAttached: formValues.signedLinesCalculationSheetAttachedNumber, // update exact key name which is used in API\r\n        signedLinesAuthorisedSignatory: formValues.signedLinesCalculationSheetAttachedCheckbox, // update exact key name which is used in API\r\n        riskReferencesAuthorisedSignatory: formValues.financialGridCheckbox,\r\n      },\r\n      financialChecklistDetails: financialCheckListTable?.map((riskRef) => {\r\n        const isValidDate = moment(riskRef.ppwOrPpcDate).isValid();\r\n        const ppwOrPpcDate = isValidDate ? moment(riskRef.ppwOrPpcDate).format('YYYY-MM-DD') : '';\r\n        return {\r\n          instructionBrokerageDetailsId: riskRef.instructionBrokerageDetailsId,\r\n          riskReference: riskRef.riskReference,\r\n          grossPremiumAmount: riskRef.grossPremiumAmount,\r\n          slipOrder: riskRef.slipOrder,\r\n          totalBrokerage: riskRef.totalBrokerage,\r\n          clientDiscount: riskRef.clientDiscount,\r\n          thirdPartyCommissionSharing: riskRef.thirdPartyCommissionSharing,\r\n          thirdPartyName: riskRef.thirdPartyName,\r\n          pfInternalCommissionSharing: riskRef.pfInternalCommissionSharing,\r\n          pfInternalDepartment: riskRef.pfInternalDepartment,\r\n          retainedBrokerage: riskRef.retainedBrokerage,\r\n          retainedBrokerageCurrencyCode: riskRef.retainedBrokerageCurrencyCode,\r\n          fees: riskRef.fees,\r\n          otherDeductions: riskRef.otherDeductions,\r\n          settlementCurrency: riskRef.settlementCurrency,\r\n          paymentBasis: riskRef.paymentBasis,\r\n          ppwOrPpc: riskRef.ppwOrPpc,\r\n          ppwOrPpcDate: ppwOrPpcDate,\r\n        };\r\n      }),\r\n    };\r\n    setFinancialCheckListTable((prevState) => prevState.map((dd) => ({ ...dd, isRowSelected: false })));\r\n    dispatch(updateProcessingInstruction(updatedInstruction, formValues));\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    const reset = childRef?.current?.props?.resetFunc;\r\n\r\n    if (utils.generic.isFunction(reset)) {\r\n      reset(defaultValues, { keepDirty: false });\r\n    }\r\n    const financialCheckListDBList = instruction?.financialChecklistDetails?.map((element, index) => {\r\n      return { ...element, id: index };\r\n    });\r\n    dispatch(updatePiFinancialCheckList(financialCheckListDBList));\r\n    setFinancialCheckListTable(financialCheckListDBList);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setRetainedBrokerageAmountList(retainedBrokerageAmountData);\r\n    let financialList = financialCheckListTable;\r\n    // Calculate Retain Brokerage value & Total column for every row\r\n    financialList?.map((element) => {\r\n      const amount = utils.processingInstructions.getRetainedBrokerageValue(\r\n        element.grossPremiumAmount,\r\n        element.slipOrder,\r\n        element.retainedBrokerage\r\n      );\r\n      const brokerage = utils.processingInstructions.getRetainedBrokerageConvertedValue(\r\n        element.retainedBrokerageCurrencyCode || constants.CURRENCY_USD,\r\n        amount\r\n      );\r\n      return (\r\n        (element.retainedBrokerageAmount = amount),\r\n        (element.convertedBrokerage = brokerage),\r\n        (element.settlementCurrencyName =\r\n          refDataCurrencies.find((a) => a.currencyCodeID === parseInt(element.settlementCurrency))?.currencyCd || ''),\r\n        (element.paymentBasisName = constants.PAYMENT_BASIS_OPTIONS.find((a) => a.code === element.paymentBasis)?.name || ''),\r\n        (element.ppwOrPpcName = constants.PPW_PPC_OPTIONS.find((a) => a.code === element.ppwOrPpc)?.name || ''),\r\n        (element.retainedBrokerageCurrencyCodeName =\r\n          retainedBrokerageAmountData.find((a) => a.id === element.retainedBrokerageCurrencyCode)?.label || constants.CURRENCY_USD),\r\n        element.clientDiscount && element.thirdPartyCommissionSharing && element.pfInternalCommissionSharing && element.retainedBrokerage\r\n          ? (element.total = utils.generic.getSumOfArray(\r\n              [element.clientDiscount, element.thirdPartyCommissionSharing, element.pfInternalCommissionSharing, element.retainedBrokerage],\r\n              config.ui.format.percent.decimal\r\n            ))\r\n          : (element.total = null)\r\n      );\r\n    });\r\n    dispatch(updatePiFinancialCheckList(financialList));\r\n    dispatch(savePIRetainedBrokerageAmountData(retainedBrokerageAmountData));\r\n  }, [financialCheckListTable]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(\r\n    () => {\r\n      const reset = childRef?.current?.props?.resetFunc;\r\n      const updatedDefaultValues = {\r\n        ...utils.form.getInitialValues(fields),\r\n      };\r\n\r\n      setDefaultValues(updatedDefaultValues);\r\n\r\n      if (utils.generic.isFunction(reset)) {\r\n        reset(updatedDefaultValues, {\r\n          keepDirty: false,\r\n        });\r\n      }\r\n    },\r\n    [instruction] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  const handleUploadedDocument = (data, documentTypeKey) => {\r\n    const newFiles = data?.data?.documentDto;\r\n    if (!utils.generic.isValidArray(newFiles)) return;\r\n    const newGxbDocs = newFiles.map((file) => {\r\n      return {\r\n        ...file,\r\n        folderUuid: file?.folderUid,\r\n        name: file?.documentName,\r\n        path: file?.documentPath,\r\n        source: file?.documentSource,\r\n        typeId: file?.documentTypeId,\r\n        uuid: file?.documentUid,\r\n      };\r\n    });\r\n\r\n    const updatedDocuments = {\r\n      ...documents,\r\n      ...(documentTypeKey === constants.DMS_DOCUMENT_TYPE_SECTION_KEYS.type.piPremiumCalculation && {\r\n        premiumTaxDocument: newGxbDocs[0],\r\n      }),\r\n      ...(documentTypeKey === constants.DMS_DOCUMENT_TYPE_SECTION_KEYS.type.piMarketSigned && {\r\n        signedLinesDocument: newGxbDocs[0],\r\n      }),\r\n    };\r\n    dispatch(storeProcessingInstructionDocuments(updatedDocuments));\r\n  };\r\n\r\n  const uploadPremiumTaxSignedLinesModal = (documentTypeKey) => (files) => {\r\n    dispatch(addLoader('DmsUploadFiles'));\r\n\r\n    dispatch(\r\n      showModal({\r\n        component: 'DMS_UPLOAD_FILES',\r\n        props: {\r\n          fullWidth: true,\r\n          title: utils.string.t('dms.upload.modalItems.uploadDocuments'),\r\n          maxWidth: 'xl',\r\n          componentProps: {\r\n            files,\r\n            context: constants.DMS_CONTEXT_PROCESSING_INSTRUCTION,\r\n            referenceId: Number(instruction?.id),\r\n            sourceId: Number(selectedRiskRef?.xbInstanceId),\r\n            documentTypeKey,\r\n            postDmsDocumentsSuccess: (data) => handleUploadedDocument(data, documentTypeKey),\r\n            confirmLabel: utils.string.t('app.ok'),\r\n            cancelLabel: utils.string.t('app.goBack'),\r\n            confirmMessage: utils.string.t('processingInstructions.documentsWillNotBeSaved'),\r\n            buttonColors: { confirm: 'secondary', cancel: 'primary' },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const confirmRemoveDocumentModal = (file, removeDocumentType) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          fullWidth: true,\r\n          title: utils.string.t('processingInstructions.checklist.warning.title'),\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            confirmLabel: utils.string.t('app.yes'),\r\n            cancelLabel: utils.string.t('app.no'),\r\n            confirmMessage: utils.string.t('processingInstructions.removeDocumentWarning'),\r\n            buttonColors: { confirm: 'secondary', cancel: 'primary' },\r\n            submitHandler: () => {\r\n              dispatch(removePremiumTaxSignedLinesDocument({ docIds: file?.documentId, removeDocumentType, documents }));\r\n            },\r\n            cancelHandler: () => {},\r\n            handleClose: () => {},\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleLinkDownload = (file) => {\r\n    dispatch(viewDocumentsDownload({ documentId: file?.documentId, documentName: file?.name }));\r\n  };\r\n\r\n  const headerMap = [\r\n    { key: 'riskReference', value: '' },\r\n    { key: 'grossPremiumAmount', value: '' },\r\n    { key: 'slipOrder', value: '' },\r\n    { key: 'totalBrokerage', value: '' },\r\n    { key: 'clientDiscount', value: '' },\r\n    { key: 'thirdPartyCommissionSharing', value: '' },\r\n    { key: 'thirdPartyName', value: '' },\r\n    { key: 'pfInternalCommissionSharing', value: '' },\r\n    { key: 'pfInternalDepartment', value: '' },\r\n    { key: 'retainedBrokerage', value: '' },\r\n    { key: 'retainedBrokerageCurrencyCode', value: '' },\r\n    { key: 'fees', value: '' },\r\n    { key: 'otherDeductions', value: '' },\r\n    { key: 'settlementCurrency', value: '' },\r\n    { key: 'paymentBasis', value: '' },\r\n    { key: 'ppwOrPpc', value: '' },\r\n  ];\r\n\r\n  const uploadExcelData = () => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'PASTE_FROM_EXCEL',\r\n        props: {\r\n          title: utils.string.t('processingInstructions.details.piDetailsExcelModal.title'),\r\n          fullWidth: true,\r\n          maxWidth: 'lg',\r\n          hideCompOnBlur: false,\r\n          componentProps: {\r\n            name: 'placement-overview',\r\n            headers: headerMap,\r\n            steps: 3,\r\n            isValidateHeadersMapping: true,\r\n            labels: {\r\n              step1: {\r\n                title: utils.string.html('processingInstructions.details.piDetailsExcelModal.step1.title'),\r\n                hint: utils.string.t('processingInstructions.details.piDetailsExcelModal.step1.hint'),\r\n              },\r\n              step2: {\r\n                title: utils.string.html('processingInstructions.details.piDetailsExcelModal.step2.title'),\r\n                hint: utils.string.t('processingInstructions.details.piDetailsExcelModal.step2.hint'),\r\n              },\r\n              step3: {\r\n                title: utils.string.html('processingInstructions.details.piDetailsExcelModal.step3.title'),\r\n                hint: utils.string.t(''),\r\n              },\r\n            },\r\n            handlers: {\r\n              extract: (data) => {\r\n                dispatch(setRiskRefsUploadWizardExcelExtract(data));\r\n              },\r\n              match: (data) => {\r\n                dispatch(setRiskRefsUploadWizardHeaderMap(data));\r\n              },\r\n              submit: () => {\r\n                dispatch(submitExcelUploadedRiskRefs());\r\n              },\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  let financialCheckListTableFields = {\r\n    arrayItemDef: [\r\n      { id: 'id', name: 'id', visible: false, type: 'label', value: '', width: 10, label: '', visable: false },\r\n      {\r\n        id: 'riskReference',\r\n        name: 'riskReference',\r\n        visible: true,\r\n        type: 'text',\r\n        value: '',\r\n        width: 120,\r\n        label: 'Facility Reference\t',\r\n        disabled: true,\r\n      },\r\n      {\r\n        id: 'grossPremiumAmount',\r\n        name: 'grossPremiumAmount',\r\n        visible: true,\r\n        ellipsis: true,\r\n        nowrap: false,\r\n        type: 'numericText',\r\n        value: '',\r\n        width: 120,\r\n        label: utils.string.t('processingInstructions.details.grossPremium'),\r\n      },\r\n      {\r\n        id: 'slipOrder',\r\n        name: 'slipOrder',\r\n        visible: true,\r\n        ellipsis: true,\r\n        nowrap: false,\r\n        type: 'numericText',\r\n        value: '',\r\n        width: 120,\r\n        label: utils.string.t('processingInstructions.details.slipOrder'),\r\n      },\r\n      {\r\n        id: 'totalBrokerage',\r\n        name: 'totalBrokerage',\r\n        visible: true,\r\n        ellipsis: true,\r\n        nowrap: false,\r\n        type: 'numericText',\r\n        value: '',\r\n        width: 100,\r\n        label: utils.string.t('processingInstructions.details.totalBrokerage'),\r\n      },\r\n      {\r\n        id: 'clientDiscount',\r\n        name: 'clientDiscount',\r\n        visible: true,\r\n        ellipsis: true,\r\n        nowrap: false,\r\n        type: 'numericText',\r\n        value: '',\r\n        width: 120,\r\n        label: utils.string.t('processingInstructions.details.clientDiscount'),\r\n      },\r\n      {\r\n        id: 'thirdPartyCommissionSharing',\r\n        visible: true,\r\n        name: 'thirdPartyCommissionSharing',\r\n        ellipsis: true,\r\n        nowrap: false,\r\n        type: 'numericText',\r\n        value: '',\r\n        width: 120,\r\n        label: utils.string.t('processingInstructions.details.thirdPartyCommissionSharing'),\r\n      },\r\n      {\r\n        id: 'thirdPartyName',\r\n        name: 'thirdPartyName',\r\n        visible: true,\r\n        ellipsis: true,\r\n        nowrap: false,\r\n        type: 'text',\r\n        value: '',\r\n        width: 120,\r\n        label: utils.string.t('processingInstructions.details.thirdParty'),\r\n      },\r\n      {\r\n        id: 'pfInternalCommissionSharing',\r\n        name: 'pfInternalCommissionSharing',\r\n        visible: true,\r\n        ellipsis: true,\r\n        nowrap: false,\r\n        type: 'numericText',\r\n        value: '',\r\n        width: 120,\r\n        label: utils.string.t('processingInstructions.details.pfInternalCommissionSharing'),\r\n      },\r\n      {\r\n        id: 'pfInternalDepartment',\r\n        visible: true,\r\n        ellipsis: true,\r\n        nowrap: false,\r\n        type: 'text',\r\n        value: '',\r\n        width: 120,\r\n        label: utils.string.t('processingInstructions.details.pfInternalDepartment'),\r\n      },\r\n      {\r\n        id: 'retainedBrokerage',\r\n        visible: true,\r\n        ellipsis: true,\r\n        nowrap: false,\r\n        type: 'numericText',\r\n        value: '',\r\n        width: 120,\r\n        label: utils.string.t('processingInstructions.details.retainedBrokerage'),\r\n      },\r\n      {\r\n        id: 'retainedBrokerageCurrencyCode',\r\n        visible: true,\r\n        ellipsis: true,\r\n        nowrap: false,\r\n        type: 'select',\r\n        displayName: 'retainedBrokerageCurrencyCodeName',\r\n        options: retainedBrokerageAmountList,\r\n        optionKey: 'id',\r\n        optionLabel: 'label',\r\n        value: constants.CURRENCY_USD,\r\n        width: 120,\r\n        label: utils.string.t('processingInstructions.details.retainedBrokerageAmount'),\r\n      },\r\n      {\r\n        id: 'retainedBrokerageValue',\r\n        visible: true,\r\n        ellipsis: true,\r\n        nowrap: false,\r\n        type: 'retainedBrokeragelabel',\r\n        value: '',\r\n        width: 180,\r\n        label: '',\r\n      },\r\n      {\r\n        id: 'total',\r\n        visible: true,\r\n        ellipsis: true,\r\n        nowrap: false,\r\n        type: 'label',\r\n        value: '',\r\n        width: 80,\r\n        label: utils.string.t('processingInstructions.details.total'),\r\n      },\r\n      {\r\n        id: 'fees',\r\n        visible: true,\r\n        ellipsis: true,\r\n        nowrap: false,\r\n        type: 'numericText',\r\n        value: '',\r\n        width: 80,\r\n        label: utils.string.t('processingInstructions.details.fees'),\r\n      },\r\n      {\r\n        id: 'otherDeductions',\r\n        name: 'otherDeductions',\r\n        visible: true,\r\n        ellipsis: true,\r\n        nowrap: false,\r\n        type: 'numericText',\r\n        value: '',\r\n        width: 120,\r\n        label: utils.string.t('processingInstructions.details.otherDeductions'),\r\n      },\r\n      {\r\n        id: 'settlementCurrency',\r\n        visible: true,\r\n        ellipsis: true,\r\n        nowrap: false,\r\n        type: 'select',\r\n        displayName: 'settlementCurrencyName',\r\n        options: refDataCurrencies,\r\n        optionKey: 'currencyCodeID',\r\n        optionLabel: 'currencyCd',\r\n        value: '',\r\n        width: 120,\r\n        label: utils.string.t('processingInstructions.details.settlementCurrency'),\r\n      },\r\n      {\r\n        id: 'paymentBasis',\r\n        visible: true,\r\n        ellipsis: true,\r\n        nowrap: false,\r\n        type: 'select',\r\n        displayName: 'paymentBasisName',\r\n        options: constants.PAYMENT_BASIS_OPTIONS,\r\n        optionKey: 'code',\r\n        optionLabel: 'name',\r\n        value: '',\r\n        width: 180,\r\n        label: utils.string.t('processingInstructions.details.paymentBasis'),\r\n      },\r\n      {\r\n        id: 'ppwOrPpc',\r\n        visible: true,\r\n        ellipsis: true,\r\n        nowrap: false,\r\n        type: 'select',\r\n        displayName: 'ppwOrPpcName',\r\n        options: constants.PPW_PPC_OPTIONS,\r\n        optionKey: 'code',\r\n        optionLabel: 'name',\r\n        value: '',\r\n        width: 120,\r\n        label: utils.string.t('processingInstructions.details.ppwPPC'),\r\n      },\r\n      {\r\n        id: 'ppwOrPpcDate',\r\n        visible: true,\r\n        ellipsis: true,\r\n        nowrap: false,\r\n        type: 'datepicker',\r\n        value: '',\r\n        width: 180,\r\n        format: config.ui.format.date.text,\r\n        label: utils.string.t('processingInstructions.details.ppwPPCDate'),\r\n      },\r\n      { id: 'copyAction', visible: true, ellipsis: true, nowrap: false, type: 'copyIcon', value: '', width: 80, label: '' },\r\n    ],\r\n    fieldData: [],\r\n  };\r\n\r\n  const tableTextboxChange = (e, column, row, name) => {\r\n    let value = column.type === 'text' ? e?.target?.value || '' : e?.floatValue || '';\r\n    if (column.type === 'text') {\r\n      e.preventDefault();\r\n    }\r\n\r\n    if (column.id === 'thirdPartyCommissionSharing') {\r\n      setFinancialCheckListTable((prevState) =>\r\n        prevState.map((dd) =>\r\n          dd.id === row.id\r\n            ? {\r\n                ...dd,\r\n                [column?.id]: value,\r\n                isThirdPartyCommissionDisabled: value ? false : true,\r\n              }\r\n            : dd\r\n        )\r\n      );\r\n    }\r\n    if (column.id === 'pfInternalCommissionSharing') {\r\n      setFinancialCheckListTable((prevState) =>\r\n        prevState.map((dd) =>\r\n          dd.id === row.id\r\n            ? {\r\n                ...dd,\r\n                [column?.id]: value,\r\n                isPfInternalDepartmentDisabled: value ? false : true,\r\n              }\r\n            : dd\r\n        )\r\n      );\r\n    }\r\n    if (column.id !== 'pfInternalCommissionSharing' && column.id !== 'thirdPartyCommissionSharing') {\r\n      setFinancialCheckListTable((prevState) => prevState.map((dd) => (dd.id === row.id ? { ...dd, [column?.id]: value } : dd)));\r\n    }\r\n\r\n    if (row.clientDiscount && row.thirdPartyCommissionSharing && row.pfInternalCommissionSharing && row.retainedBrokerage) {\r\n      const sumValuesArray = [row.clientDiscount, row.thirdPartyCommissionSharing, row.pfInternalCommissionSharing, row.retainedBrokerage];\r\n      const totalValue = utils.generic.getSumOfArray(sumValuesArray, config.ui.format.percent.decimal);\r\n      setFinancialCheckListTable((prevState) => prevState.map((dd) => (dd.id === row.id ? { ...dd, total: totalValue } : dd)));\r\n    } else {\r\n      setFinancialCheckListTable((prevState) => prevState.map((dd) => (dd.id === row.id ? { ...dd, total: null } : dd)));\r\n    }\r\n    dispatch(updatePiFinancialCheckList(financialCheckListTable));\r\n  };\r\n\r\n  const tableSelectChange = (e, selectedValue, column, row) => {\r\n    e.preventDefault();\r\n    setFinancialCheckListTable((prevState) =>\r\n      prevState.map((dd) =>\r\n        dd.id === row.id\r\n          ? {\r\n              ...dd,\r\n              [column?.id]: selectedValue?.value,\r\n              [column?.displayName]: selectedValue?.name,\r\n            }\r\n          : dd\r\n      )\r\n    );\r\n  };\r\n\r\n  const tableRowClick = (e, row) => {\r\n    e.preventDefault();\r\n    if (!isReadOnly) {\r\n      if (!row.isRowSelected) {\r\n        setFinancialCheckListTable((prevState) =>\r\n          prevState.map((dd) => (dd.id === row.id ? { ...dd, isRowSelected: true } : { ...dd, isRowSelected: false }))\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleTableDatePicker = (columnName, value, row) => {\r\n    setFinancialCheckListTable((prevState) => prevState.map((dd) => (dd.id === row.id ? { ...dd, [columnName]: value } : dd)));\r\n  };\r\n  const handleCopyTableRowData = (index) => {\r\n    if (!isReadOnly) {\r\n      const copyAboveRow = financialCheckListTable?.find((a) => a.id === index - 1);\r\n      const currentRow = financialCheckListTable?.find((a) => a.id === index);\r\n      setFinancialCheckListTable((prevState) =>\r\n        prevState.map((dd) =>\r\n          dd.id === index\r\n            ? {\r\n                ...dd,\r\n                id: currentRow?.id,\r\n                grossPremiumAmount: copyAboveRow?.grossPremiumAmount,\r\n                slipOrder: copyAboveRow?.slipOrder,\r\n                totalBrokerage: copyAboveRow?.totalBrokerage,\r\n                clientDiscount: copyAboveRow?.clientDiscount,\r\n                thirdPartyCommissionSharing: copyAboveRow?.thirdPartyCommissionSharing,\r\n                thirdPartyName: copyAboveRow?.thirdPartyName,\r\n                isThirdPartyCommissionDisabled: copyAboveRow?.isThirdPartyCommissionDisabled,\r\n                pfInternalCommissionSharing: copyAboveRow?.pfInternalCommissionSharing,\r\n                pfInternalDepartment: copyAboveRow?.pfInternalDepartment,\r\n                isPfInternalDepartmentDisabled: copyAboveRow?.isPfInternalDepartmentDisabled,\r\n                retainedBrokerage: copyAboveRow?.retainedBrokerage,\r\n                retainedBrokerageCurrencyCode: copyAboveRow?.retainedBrokerageCurrencyCode,\r\n                retainedBrokerageValue: copyAboveRow?.retainedBrokerageValue,\r\n                total: copyAboveRow?.total,\r\n                fees: copyAboveRow?.fees,\r\n                otherDeductions: copyAboveRow?.otherDeductions,\r\n                settlementCurrency: copyAboveRow?.settlementCurrency,\r\n                paymentBasis: copyAboveRow?.paymentBasis,\r\n                ppwOrPpc: copyAboveRow?.ppwOrPpc,\r\n              }\r\n            : dd\r\n        )\r\n      );\r\n    }\r\n  };\r\n\r\n  // abort if data is not ready/available\r\n  if (!defaultValues || !instruction) return null;\r\n\r\n  return (\r\n    <ProcessingInstructionsDetailsView\r\n      instructionId={instruction?.id}\r\n      documents={documents}\r\n      fields={fields}\r\n      defaultValues={defaultValues}\r\n      riskRefId={selectedRiskRef?.riskRefId}\r\n      isEditable={isEditable}\r\n      isReadOnly={isReadOnly}\r\n      financialCheckListDBData={instruction?.financialChecklistDetails}\r\n      tableRows={financialCheckListTable}\r\n      tableFields={financialCheckListTableFields}\r\n      handlers={{\r\n        ...handlers,\r\n        cancel: handleCancel,\r\n        confirmRemoveDocumentModal,\r\n        download: handleLinkDownload,\r\n        save: handleSave,\r\n        uploadExcelData,\r\n        uploadPremiumTaxSignedLinesModal,\r\n        handleTextboxChange: tableTextboxChange,\r\n        handleTableRowClick: tableRowClick,\r\n        handleSelectChange: tableSelectChange,\r\n        handleDatePicker: handleTableDatePicker,\r\n        handleCopyTableRowData: handleCopyTableRowData,\r\n      }}\r\n      ref={childRef}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}