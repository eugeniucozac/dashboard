{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\forms\\\\AddAssignee\\\\AddAssignee.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as Yup from 'yup';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport uniqBy from 'lodash/uniqBy'; // app\n\nimport { AddAssigneeView } from './AddAssignee.view';\nimport { hideModal, selectClaimsAssignedToUsers, getUsersByOrg, postSaveTaskProcessingAssignees, resetClaimsAssignedToUsers, getAssignedToUsersList, selectAssignedToUsers, postAssignToUser } from 'stores';\nimport * as utils from 'utils';\nimport { useFormActions } from 'hooks';\nimport * as constants from 'consts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nAddAssignee.propTypes = {\n  taskDetails: PropTypes.array.isRequired,\n  submitHandler: PropTypes.func.isRequired,\n  isPremiumProcessing: PropTypes.bool\n};\nexport default function AddAssignee(_ref) {\n  _s();\n\n  var _taskDetails$;\n\n  var isPremiumProcessing = _ref.isPremiumProcessing,\n      taskDetails = _ref.taskDetails,\n      submitHandler = _ref.submitHandler;\n  var dispatch = useDispatch();\n  var newTeam = ((_taskDetails$ = taskDetails[0]) === null || _taskDetails$ === void 0 ? void 0 : _taskDetails$.team) || constants.ORGANIZATIONS.mphasis.name;\n  var selectAssignees = useSelector(selectClaimsAssignedToUsers);\n  var allAssignees = selectAssignees === null || selectAssignees === void 0 ? void 0 : selectAssignees.items;\n  var hasOrgChanged = (selectAssignees === null || selectAssignees === void 0 ? void 0 : selectAssignees.orgName) !== newTeam;\n  var assignedToUsersList = useSelector(selectAssignedToUsers);\n  var isAssignedToUserList = utils.generic.isValidArray(assignedToUsersList, true);\n\n  var _useState = useState(allAssignees),\n      _useState2 = _slicedToArray(_useState, 2),\n      assigneeList = _useState2[0],\n      setAssigneeList = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      additionalAssigneeList = _useState4[0],\n      setAdditionalAssigneeList = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      assigneeResetKey = _useState6[0],\n      setAssigneeResetKey = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      resetKey = _useState8[0],\n      setResetKey = _useState8[1];\n\n  var additionalAssigneeOptions = [{\n    id: -1,\n    fullName: '',\n    email: ''\n  }].concat(_toConsumableArray(additionalAssigneeList));\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      ppAssigneUserList = _useState10[0],\n      setPPAssigneUserList = _useState10[1];\n\n  var fields = [{\n    name: 'addAssignee',\n    type: 'autocompletemui',\n    optionKey: 'email',\n    optionLabel: 'fullName',\n    options: isPremiumProcessing && utils.generic.isValidArray(ppAssigneUserList, true) ? ppAssigneUserList : assigneeList || [],\n    value: null,\n    validation: Yup.object().nullable().required(utils.string.t('validation.required'))\n  }].concat(_toConsumableArray(!isPremiumProcessing ? [{\n    name: 'addAdditionalAssignee',\n    type: 'autocompletemui',\n    value: null,\n    optionKey: 'email',\n    optionLabel: 'fullName',\n    options: additionalAssigneeOptions\n  }] : []));\n  var actions = [{\n    name: 'cancel',\n    label: utils.string.t('app.cancel'),\n    handler: function handler() {\n      return hideModal();\n    }\n  }, {\n    name: 'submit',\n    label: utils.string.t('app.assign'),\n    handler: function () {\n      var _handler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n        var addAssignee, addAdditionalAssignee, addAssigneesRequest, assignList, response, premiumProcessingSaveAssigneeResponse;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                addAssignee = _ref2.addAssignee, addAdditionalAssignee = _ref2.addAdditionalAssignee;\n\n                if (isPremiumProcessing) {\n                  _context.next = 8;\n                  break;\n                }\n\n                addAssigneesRequest = taskDetails.map(function (eachTask) {\n                  return {\n                    additionalAssignee: addAdditionalAssignee === null || addAdditionalAssignee === void 0 ? void 0 : addAdditionalAssignee.email,\n                    assignTo: addAssignee === null || addAssignee === void 0 ? void 0 : addAssignee.email,\n                    processId: eachTask.processId,\n                    taskId: eachTask.taskId\n                  };\n                });\n                _context.next = 5;\n                return dispatch(postSaveTaskProcessingAssignees(addAssigneesRequest));\n\n              case 5:\n                if (submitHandler) {\n                  submitHandler({\n                    addAssignee: addAssignee,\n                    addAdditionalAssignee: addAdditionalAssignee\n                  });\n                }\n\n                _context.next = 14;\n                break;\n\n              case 8:\n                if (!taskDetails) {\n                  _context.next = 14;\n                  break;\n                }\n\n                assignList = utils.generic.isValidArray(ppAssigneUserList, true) && ppAssigneUserList.filter(function (a) {\n                  return a.emailId === (addAssignee === null || addAssignee === void 0 ? void 0 : addAssignee.emailId) && a.fullName === (addAssignee === null || addAssignee === void 0 ? void 0 : addAssignee.fullName);\n                });\n                _context.next = 12;\n                return dispatch(postAssignToUser({\n                  userDetails: assignList,\n                  rowDetails: taskDetails\n                }));\n\n              case 12:\n                response = _context.sent;\n\n                if (response && (response === null || response === void 0 ? void 0 : response.status) === constants.API_RESPONSE_OK) {\n                  premiumProcessingSaveAssigneeResponse = response;\n\n                  if (submitHandler) {\n                    submitHandler({\n                      addAssignee: addAssignee,\n                      addAdditionalAssignee: addAdditionalAssignee,\n                      premiumProcessingSaveAssigneeResponse: premiumProcessingSaveAssigneeResponse\n                    });\n                  }\n                }\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function handler(_x) {\n        return _handler.apply(this, arguments);\n      }\n\n      return handler;\n    }()\n  }];\n  var defaultValues = utils.form.getInitialValues(fields);\n  var validationSchema = utils.form.getValidationSchema(fields);\n\n  var _useForm = useForm(_objectSpread({\n    defaultValues: defaultValues\n  }, validationSchema && {\n    resolver: yupResolver(validationSchema)\n  })),\n      control = _useForm.control,\n      errors = _useForm.errors,\n      watch = _useForm.watch,\n      handleSubmit = _useForm.handleSubmit;\n\n  var assigneeField = watch('addAssignee');\n\n  var _useFormActions = useFormActions(actions),\n      cancel = _useFormActions.cancel,\n      submit = _useFormActions.submit;\n\n  var cancelModal = function cancelModal() {\n    dispatch(hideModal());\n  };\n\n  var createEligibleList = function createEligibleList(allList, existingAssignees) {\n    var result = utils.generic.isValidArray(existingAssignees, true) ? allList.filter(function (_ref3) {\n      var email = _ref3.email;\n      return existingAssignees.indexOf(email.toLowerCase()) === -1;\n    }) : allList;\n    return result;\n  };\n\n  useEffect(function () {\n    if (isPremiumProcessing) {\n      if (!isAssignedToUserList) {\n        dispatch(getAssignedToUsersList());\n      }\n    } else {\n      dispatch(resetClaimsAssignedToUsers());\n\n      if (hasOrgChanged) {\n        dispatch(getUsersByOrg(newTeam, taskDetails, 'addAssignee'));\n      }\n\n      setAssigneeResetKey(new Date().getTime());\n    }\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    if (isAssignedToUserList) {\n      if (utils.generic.isValidArray(taskDetails, true)) {\n        var usersList = assignedToUsersList.filter(function (item) {\n          var _taskDetails$2, _taskDetails$3;\n\n          return item.xbInstanceId === ((_taskDetails$2 = taskDetails[0]) === null || _taskDetails$2 === void 0 ? void 0 : _taskDetails$2.xbInstanceId) && item.departmentId === ((_taskDetails$3 = taskDetails[0]) === null || _taskDetails$3 === void 0 ? void 0 : _taskDetails$3.departmentID);\n        });\n        setPPAssigneUserList(uniqBy(usersList, 'userId'));\n      }\n    }\n  }, [taskDetails, isAssignedToUserList]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    if (!isPremiumProcessing) {\n      var existingAssignees = utils.generic.isValidArray(taskDetails, true) && taskDetails.map(function (eachTask) {\n        var _eachTask$assignee;\n\n        return eachTask === null || eachTask === void 0 ? void 0 : (_eachTask$assignee = eachTask.assignee) === null || _eachTask$assignee === void 0 ? void 0 : _eachTask$assignee.toLowerCase();\n      });\n\n      if (utils.generic.isValidArray(allAssignees, true)) {\n        var uniqExistingAssignees = existingAssignees.filter(function (asgn, ind) {\n          return existingAssignees.indexOf(asgn) === ind;\n        });\n        setAssigneeList(createEligibleList(allAssignees, uniqExistingAssignees));\n      }\n\n      if (assigneeField === null || assigneeField === void 0 ? void 0 : assigneeField.email) {\n        var _assigneeField$email;\n\n        setAdditionalAssigneeList(createEligibleList(allAssignees, [].concat(_toConsumableArray(existingAssignees), [assigneeField === null || assigneeField === void 0 ? void 0 : (_assigneeField$email = assigneeField.email) === null || _assigneeField$email === void 0 ? void 0 : _assigneeField$email.toLowerCase()])));\n      }\n\n      setResetKey(new Date().getTime());\n    }\n  }, [allAssignees, assigneeField]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/_jsxDEV(AddAssigneeView, {\n    fields: fields,\n    assigneeField: isPremiumProcessing ? assigneeField === null || assigneeField === void 0 ? void 0 : assigneeField.emailId : assigneeField === null || assigneeField === void 0 ? void 0 : assigneeField.email,\n    control: control,\n    errors: errors,\n    assigneeResetKey: assigneeResetKey,\n    resetKey: resetKey,\n    isPremiumProcessing: isPremiumProcessing,\n    actions: {\n      submit: submit,\n      cancel: cancel\n    },\n    handlers: {\n      submit: handleSubmit,\n      cancel: cancelModal\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddAssignee, \"UUZrh5cR9sRthXvyXp+HUfu4JA8=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useForm, useFormActions];\n});\n\n_c = AddAssignee;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddAssignee\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/forms/AddAssignee/AddAssignee.js"],"names":["React","useState","useEffect","PropTypes","useDispatch","useSelector","Yup","useForm","yupResolver","uniqBy","AddAssigneeView","hideModal","selectClaimsAssignedToUsers","getUsersByOrg","postSaveTaskProcessingAssignees","resetClaimsAssignedToUsers","getAssignedToUsersList","selectAssignedToUsers","postAssignToUser","utils","useFormActions","constants","AddAssignee","propTypes","taskDetails","array","isRequired","submitHandler","func","isPremiumProcessing","bool","dispatch","newTeam","team","ORGANIZATIONS","mphasis","name","selectAssignees","allAssignees","items","hasOrgChanged","orgName","assignedToUsersList","isAssignedToUserList","generic","isValidArray","assigneeList","setAssigneeList","additionalAssigneeList","setAdditionalAssigneeList","assigneeResetKey","setAssigneeResetKey","resetKey","setResetKey","additionalAssigneeOptions","id","fullName","email","ppAssigneUserList","setPPAssigneUserList","fields","type","optionKey","optionLabel","options","value","validation","object","nullable","required","string","t","actions","label","handler","addAssignee","addAdditionalAssignee","addAssigneesRequest","map","eachTask","additionalAssignee","assignTo","processId","taskId","assignList","filter","a","emailId","userDetails","rowDetails","response","status","API_RESPONSE_OK","premiumProcessingSaveAssigneeResponse","defaultValues","form","getInitialValues","validationSchema","getValidationSchema","resolver","control","errors","watch","handleSubmit","assigneeField","cancel","submit","cancelModal","createEligibleList","allList","existingAssignees","result","indexOf","toLowerCase","Date","getTime","usersList","item","xbInstanceId","departmentId","departmentID","assignee","uniqExistingAssignees","asgn","ind"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport * as Yup from 'yup';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport uniqBy from 'lodash/uniqBy';\r\n\r\n// app\r\nimport { AddAssigneeView } from './AddAssignee.view';\r\nimport {\r\n  hideModal,\r\n  selectClaimsAssignedToUsers,\r\n  getUsersByOrg,\r\n  postSaveTaskProcessingAssignees,\r\n  resetClaimsAssignedToUsers,\r\n  getAssignedToUsersList,\r\n  selectAssignedToUsers,\r\n  postAssignToUser,\r\n} from 'stores';\r\nimport * as utils from 'utils';\r\nimport { useFormActions } from 'hooks';\r\nimport * as constants from 'consts';\r\n\r\nAddAssignee.propTypes = {\r\n  taskDetails: PropTypes.array.isRequired,\r\n  submitHandler: PropTypes.func.isRequired,\r\n  isPremiumProcessing: PropTypes.bool,\r\n};\r\n\r\nexport default function AddAssignee({ isPremiumProcessing, taskDetails, submitHandler }) {\r\n  const dispatch = useDispatch();\r\n  const newTeam = taskDetails[0]?.team || constants.ORGANIZATIONS.mphasis.name;\r\n  const selectAssignees = useSelector(selectClaimsAssignedToUsers);\r\n\r\n  const allAssignees = selectAssignees?.items;\r\n  const hasOrgChanged = selectAssignees?.orgName !== newTeam;\r\n  const assignedToUsersList = useSelector(selectAssignedToUsers);\r\n  const isAssignedToUserList = utils.generic.isValidArray(assignedToUsersList, true);\r\n  const [assigneeList, setAssigneeList] = useState(allAssignees);\r\n  const [additionalAssigneeList, setAdditionalAssigneeList] = useState([]);\r\n  const [assigneeResetKey, setAssigneeResetKey] = useState();\r\n  const [resetKey, setResetKey] = useState();\r\n  const additionalAssigneeOptions = [{ id: -1, fullName: '', email: '' }, ...additionalAssigneeList];\r\n  const [ppAssigneUserList, setPPAssigneUserList] = useState([]);\r\n\r\n  const fields = [\r\n    {\r\n      name: 'addAssignee',\r\n      type: 'autocompletemui',\r\n      optionKey: 'email',\r\n      optionLabel: 'fullName',\r\n      options: isPremiumProcessing && utils.generic.isValidArray(ppAssigneUserList, true) ? ppAssigneUserList : assigneeList || [],\r\n      value: null,\r\n      validation: Yup.object().nullable().required(utils.string.t('validation.required')),\r\n    },\r\n    ...(!isPremiumProcessing\r\n      ? [\r\n          {\r\n            name: 'addAdditionalAssignee',\r\n            type: 'autocompletemui',\r\n            value: null,\r\n            optionKey: 'email',\r\n            optionLabel: 'fullName',\r\n            options: additionalAssigneeOptions,\r\n          },\r\n        ]\r\n      : []),\r\n  ];\r\n\r\n  const actions = [\r\n    {\r\n      name: 'cancel',\r\n      label: utils.string.t('app.cancel'),\r\n      handler: () => hideModal(),\r\n    },\r\n    {\r\n      name: 'submit',\r\n      label: utils.string.t('app.assign'),\r\n      handler: async ({ addAssignee, addAdditionalAssignee }) => {\r\n        if (!isPremiumProcessing) {\r\n          const addAssigneesRequest = taskDetails.map((eachTask) => {\r\n            return {\r\n              additionalAssignee: addAdditionalAssignee?.email,\r\n              assignTo: addAssignee?.email,\r\n              processId: eachTask.processId,\r\n              taskId: eachTask.taskId,\r\n            };\r\n          });\r\n          await dispatch(postSaveTaskProcessingAssignees(addAssigneesRequest));\r\n          if (submitHandler) {\r\n            submitHandler({ addAssignee, addAdditionalAssignee });\r\n          }\r\n        } else {\r\n          if (taskDetails) {\r\n            let assignList =\r\n              utils.generic.isValidArray(ppAssigneUserList, true) &&\r\n              ppAssigneUserList.filter((a) => a.emailId === addAssignee?.emailId && a.fullName === addAssignee?.fullName);\r\n            const response = await dispatch(postAssignToUser({ userDetails: assignList, rowDetails: taskDetails }));\r\n            if (response && response?.status === constants.API_RESPONSE_OK) {\r\n              const premiumProcessingSaveAssigneeResponse = response;\r\n              if (submitHandler) {\r\n                submitHandler({ addAssignee, addAdditionalAssignee, premiumProcessingSaveAssigneeResponse });\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n    },\r\n  ];\r\n\r\n  const defaultValues = utils.form.getInitialValues(fields);\r\n  const validationSchema = utils.form.getValidationSchema(fields);\r\n\r\n  const { control, errors, watch, handleSubmit } = useForm({\r\n    defaultValues,\r\n    ...(validationSchema && { resolver: yupResolver(validationSchema) }),\r\n  });\r\n\r\n  const assigneeField = watch('addAssignee');\r\n\r\n  const { cancel, submit } = useFormActions(actions);\r\n\r\n  const cancelModal = () => {\r\n    dispatch(hideModal());\r\n  };\r\n\r\n  const createEligibleList = (allList, existingAssignees) => {\r\n    const result = utils.generic.isValidArray(existingAssignees, true)\r\n      ? allList.filter(({ email }) => existingAssignees.indexOf(email.toLowerCase()) === -1)\r\n      : allList;\r\n    return result;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isPremiumProcessing) {\r\n      if (!isAssignedToUserList) {\r\n        dispatch(getAssignedToUsersList());\r\n      }\r\n    } else {\r\n      dispatch(resetClaimsAssignedToUsers());\r\n      if (hasOrgChanged) {\r\n        dispatch(getUsersByOrg(newTeam, taskDetails, 'addAssignee'));\r\n      }\r\n      setAssigneeResetKey(new Date().getTime());\r\n    }\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    if (isAssignedToUserList) {\r\n      if (utils.generic.isValidArray(taskDetails, true)) {\r\n        const usersList = assignedToUsersList.filter(\r\n          (item) => item.xbInstanceId === taskDetails[0]?.xbInstanceId && item.departmentId === taskDetails[0]?.departmentID\r\n        );\r\n        setPPAssigneUserList(uniqBy(usersList, 'userId'));\r\n      }\r\n    }\r\n  }, [taskDetails, isAssignedToUserList]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    if (!isPremiumProcessing) {\r\n      const existingAssignees =\r\n        utils.generic.isValidArray(taskDetails, true) && taskDetails.map((eachTask) => eachTask?.assignee?.toLowerCase());\r\n      if (utils.generic.isValidArray(allAssignees, true)) {\r\n        const uniqExistingAssignees = existingAssignees.filter((asgn, ind) => existingAssignees.indexOf(asgn) === ind);\r\n        setAssigneeList(createEligibleList(allAssignees, uniqExistingAssignees));\r\n      }\r\n      if (assigneeField?.email) {\r\n        setAdditionalAssigneeList(createEligibleList(allAssignees, [...existingAssignees, assigneeField?.email?.toLowerCase()]));\r\n      }\r\n      setResetKey(new Date().getTime());\r\n    }\r\n  }, [allAssignees, assigneeField]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <AddAssigneeView\r\n      fields={fields}\r\n      assigneeField={isPremiumProcessing ? assigneeField?.emailId : assigneeField?.email}\r\n      control={control}\r\n      errors={errors}\r\n      assigneeResetKey={assigneeResetKey}\r\n      resetKey={resetKey}\r\n      isPremiumProcessing={isPremiumProcessing}\r\n      actions={{\r\n        submit,\r\n        cancel,\r\n      }}\r\n      handlers={{\r\n        submit: handleSubmit,\r\n        cancel: cancelModal,\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}