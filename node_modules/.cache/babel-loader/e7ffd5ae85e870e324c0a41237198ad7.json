{"ast":null,"code":"import _defineProperty from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\components\\\\MapBoxOverlay\\\\MapBoxOverlay.js\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport classnames from 'classnames'; // app\n\nimport styles from './MapBoxOverlay.styles';\nimport { MapBoxButton, ChartKey } from 'components';\nimport * as utils from 'utils'; // mui\n\nimport { withStyles, Popover, Toolbar } from '@material-ui/core';\nimport LayersIcon from '@material-ui/icons/Layers';\nimport FullScreenIcon from '@material-ui/icons/Fullscreen';\nimport FullScreenExitIcon from '@material-ui/icons/FullscreenExit';\nimport LanguageIcon from '@material-ui/icons/Language';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var MapBoxOverlay = /*#__PURE__*/function (_PureComponent) {\n  _inherits(MapBoxOverlay, _PureComponent);\n\n  var _super = _createSuper(MapBoxOverlay);\n\n  function MapBoxOverlay(props) {\n    var _this;\n\n    _classCallCheck(this, MapBoxOverlay);\n\n    _this = _super.call(this, props);\n\n    _this.handleClickLayers = function (event) {\n      _this.setState({\n        anchorEl: event.currentTarget\n      });\n    };\n\n    _this.handleCloseLayers = function () {\n      _this.setState({\n        anchorEl: null\n      });\n    };\n\n    _this.state = {\n      anchorEl: null\n    };\n    return _this;\n  }\n\n  _createClass(MapBoxOverlay, [{\n    key: \"render\",\n    value: function render() {\n      var anchorEl = this.state.anchorEl;\n      var _this$props = this.props,\n          layers = _this$props.layers,\n          overflow = _this$props.overflow,\n          fullscreen = _this$props.fullscreen,\n          buttons = _this$props.buttons,\n          header = _this$props.header,\n          handleToggleLayer = _this$props.handleToggleLayer,\n          handleToggleFullScreen = _this$props.handleToggleFullScreen,\n          handleToggleSatellite = _this$props.handleToggleSatellite,\n          classes = _this$props.classes,\n          showSatelliteView = _this$props.showSatelliteView;\n      var isLayersMenuOpen = Boolean(anchorEl);\n      var layerKeys = Object.keys(layers);\n      var hasLayers = layers && Object.keys(layers).length > 0 && handleToggleLayer;\n\n      var classesToolbar = _defineProperty({}, classes.toolbarOverflow, overflow);\n\n      return /*#__PURE__*/_jsxDEV(Toolbar, {\n        className: classnames(classes.toolbar, classesToolbar),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.buttons,\n          children: [utils.generic.isFunction(handleToggleFullScreen) && /*#__PURE__*/_jsxDEV(MapBoxButton, {\n            icon: fullscreen ? FullScreenExitIcon : FullScreenIcon,\n            size: \"small\",\n            tooltip: {\n              title: utils.string.t(fullscreen ? 'app.fullscreenExit' : 'app.fullscreen')\n            },\n            onClick: handleToggleFullScreen,\n            \"data-testid\": \"map-full-screen-button\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this), hasLayers && /*#__PURE__*/_jsxDEV(MapBoxButton, {\n            icon: LayersIcon,\n            size: \"small\",\n            tooltip: {\n              title: utils.string.t('map.layers.tooltip')\n            },\n            onClick: this.handleClickLayers,\n            open: isLayersMenuOpen,\n            \"aria-owns\": isLayersMenuOpen ? 'menu' : null,\n            \"data-testid\": \"map-layers-button\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this), utils.generic.isFunction(handleToggleSatellite) && /*#__PURE__*/_jsxDEV(MapBoxButton, {\n            icon: LanguageIcon,\n            size: \"small\",\n            selected: showSatelliteView,\n            tooltip: {\n              title: utils.string.t('map.satellite.tooltip')\n            },\n            onClick: handleToggleSatellite,\n            \"data-testid\": \"map-toggle-satellite-button\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this), utils.generic.isValidArray(buttons, true) && buttons.map(function (option, index) {\n            return /*#__PURE__*/React.cloneElement(option, {\n              key: \"map-button-\".concat(index)\n            });\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 9\n        }, this), !fullscreen && header, hasLayers && /*#__PURE__*/_jsxDEV(Popover, {\n          id: \"menu\",\n          anchorEl: anchorEl,\n          open: Boolean(anchorEl),\n          onClose: this.handleCloseLayers,\n          classes: {\n            paper: classes.popover\n          },\n          anchorOrigin: {\n            vertical: 'top',\n            horizontal: 'right'\n          },\n          transformOrigin: {\n            vertical: 'top',\n            horizontal: 'left'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.menu,\n            children: /*#__PURE__*/_jsxDEV(ChartKey, {\n              items: layerKeys.map(function (k) {\n                var item = layers[k];\n                return {\n                  id: item.name,\n                  label: item.name,\n                  checked: item.visibility === utils.map.visibility.visible,\n                  groupKey: k\n                };\n              }),\n              onToggle: function onToggle(id, checked, item) {\n                return handleToggleLayer(item.groupKey);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return MapBoxOverlay;\n}(PureComponent);\nMapBoxOverlay.propTypes = {\n  locations: PropTypes.array,\n  layers: PropTypes.object,\n  buttons: PropTypes.array,\n  overflow: PropTypes.bool,\n  fullscreen: PropTypes.bool,\n  showSatelliteView: PropTypes.bool,\n  header: PropTypes.node,\n  handleToggleLayer: PropTypes.func,\n  handleToggleFullScreen: PropTypes.func,\n  handleToggleSatellite: PropTypes.func\n};\nexport default compose(withStyles(styles))(MapBoxOverlay);","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/MapBoxOverlay/MapBoxOverlay.js"],"names":["React","PureComponent","PropTypes","compose","classnames","styles","MapBoxButton","ChartKey","utils","withStyles","Popover","Toolbar","LayersIcon","FullScreenIcon","FullScreenExitIcon","LanguageIcon","MapBoxOverlay","props","handleClickLayers","event","setState","anchorEl","currentTarget","handleCloseLayers","state","layers","overflow","fullscreen","buttons","header","handleToggleLayer","handleToggleFullScreen","handleToggleSatellite","classes","showSatelliteView","isLayersMenuOpen","Boolean","layerKeys","Object","keys","hasLayers","length","classesToolbar","toolbarOverflow","toolbar","generic","isFunction","title","string","t","isValidArray","map","option","index","cloneElement","key","paper","popover","vertical","horizontal","menu","k","item","id","name","label","checked","visibility","visible","groupKey","propTypes","locations","array","object","bool","node","func"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { compose } from 'redux';\r\nimport classnames from 'classnames';\r\n\r\n// app\r\nimport styles from './MapBoxOverlay.styles';\r\nimport { MapBoxButton, ChartKey } from 'components';\r\nimport * as utils from 'utils';\r\n\r\n// mui\r\nimport { withStyles, Popover, Toolbar } from '@material-ui/core';\r\nimport LayersIcon from '@material-ui/icons/Layers';\r\nimport FullScreenIcon from '@material-ui/icons/Fullscreen';\r\nimport FullScreenExitIcon from '@material-ui/icons/FullscreenExit';\r\nimport LanguageIcon from '@material-ui/icons/Language';\r\n\r\nexport class MapBoxOverlay extends PureComponent {\r\n  static propTypes = {\r\n    locations: PropTypes.array,\r\n    layers: PropTypes.object,\r\n    buttons: PropTypes.array,\r\n    overflow: PropTypes.bool,\r\n    fullscreen: PropTypes.bool,\r\n    showSatelliteView: PropTypes.bool,\r\n    header: PropTypes.node,\r\n    handleToggleLayer: PropTypes.func,\r\n    handleToggleFullScreen: PropTypes.func,\r\n    handleToggleSatellite: PropTypes.func,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      anchorEl: null,\r\n    };\r\n  }\r\n\r\n  handleClickLayers = (event) => {\r\n    this.setState({ anchorEl: event.currentTarget });\r\n  };\r\n\r\n  handleCloseLayers = () => {\r\n    this.setState({ anchorEl: null });\r\n  };\r\n\r\n  render() {\r\n    const { anchorEl } = this.state;\r\n    const {\r\n      layers,\r\n      overflow,\r\n      fullscreen,\r\n      buttons,\r\n      header,\r\n      handleToggleLayer,\r\n      handleToggleFullScreen,\r\n      handleToggleSatellite,\r\n      classes,\r\n      showSatelliteView,\r\n    } = this.props;\r\n\r\n    const isLayersMenuOpen = Boolean(anchorEl);\r\n    const layerKeys = Object.keys(layers);\r\n    const hasLayers = layers && Object.keys(layers).length > 0 && handleToggleLayer;\r\n\r\n    const classesToolbar = {\r\n      [classes.toolbarOverflow]: overflow,\r\n    };\r\n\r\n    return (\r\n      <Toolbar className={classnames(classes.toolbar, classesToolbar)}>\r\n        <div className={classes.buttons}>\r\n          {utils.generic.isFunction(handleToggleFullScreen) && (\r\n            <MapBoxButton\r\n              icon={fullscreen ? FullScreenExitIcon : FullScreenIcon}\r\n              size=\"small\"\r\n              tooltip={{ title: utils.string.t(fullscreen ? 'app.fullscreenExit' : 'app.fullscreen') }}\r\n              onClick={handleToggleFullScreen}\r\n              data-testid=\"map-full-screen-button\"\r\n            />\r\n          )}\r\n\r\n          {hasLayers && (\r\n            <MapBoxButton\r\n              icon={LayersIcon}\r\n              size=\"small\"\r\n              tooltip={{ title: utils.string.t('map.layers.tooltip') }}\r\n              onClick={this.handleClickLayers}\r\n              open={isLayersMenuOpen}\r\n              aria-owns={isLayersMenuOpen ? 'menu' : null}\r\n              data-testid=\"map-layers-button\"\r\n            />\r\n          )}\r\n\r\n          {utils.generic.isFunction(handleToggleSatellite) && (\r\n            <MapBoxButton\r\n              icon={LanguageIcon}\r\n              size=\"small\"\r\n              selected={showSatelliteView}\r\n              tooltip={{ title: utils.string.t('map.satellite.tooltip') }}\r\n              onClick={handleToggleSatellite}\r\n              data-testid=\"map-toggle-satellite-button\"\r\n            />\r\n          )}\r\n\r\n          {/* render additional buttons passed in props */}\r\n          {utils.generic.isValidArray(buttons, true) &&\r\n            buttons.map((option, index) => {\r\n              return React.cloneElement(option, { key: `map-button-${index}` });\r\n            })}\r\n        </div>\r\n\r\n        {/* render extra content to display above the map (ex: geocoding) */}\r\n        {!fullscreen && header}\r\n\r\n        {hasLayers && (\r\n          <Popover\r\n            id=\"menu\"\r\n            anchorEl={anchorEl}\r\n            open={Boolean(anchorEl)}\r\n            onClose={this.handleCloseLayers}\r\n            classes={{ paper: classes.popover }}\r\n            anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n            transformOrigin={{ vertical: 'top', horizontal: 'left' }}\r\n          >\r\n            <div className={classes.menu}>\r\n              <ChartKey\r\n                items={layerKeys.map((k) => {\r\n                  const item = layers[k];\r\n                  return {\r\n                    id: item.name,\r\n                    label: item.name,\r\n                    checked: item.visibility === utils.map.visibility.visible,\r\n                    groupKey: k,\r\n                  };\r\n                })}\r\n                onToggle={(id, checked, item) => handleToggleLayer(item.groupKey)}\r\n              />\r\n            </div>\r\n          </Popover>\r\n        )}\r\n      </Toolbar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default compose(withStyles(styles))(MapBoxOverlay);\r\n"]},"metadata":{},"sourceType":"module"}