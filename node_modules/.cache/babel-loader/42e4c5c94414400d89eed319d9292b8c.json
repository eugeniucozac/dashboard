{"ast":null,"code":"import \"core-js/modules/es.object.values\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\forms\\\\BulkAssignClaims\\\\BulkAssignClaims.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as Yup from 'yup';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup'; // app\n\nimport { BulkAssignClaimsView } from './BulkAssignClaims.view';\nimport { Loader } from 'components';\nimport { bulkAssignClaims, getClaimsProcessing, getUsersByOrg, resetClaimsAssignedToUsers, selectClaimsAssignedToUsers, selectClaimsProcessingPagination, selectUserOrganisation, showModal } from 'stores';\nimport { useFormActions } from 'hooks';\nimport * as constants from 'consts';\nimport * as utils from 'utils'; // mui\n\nimport { Box } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nBulkAssignClaims.propTypes = {\n  claimsProcessingSelected: PropTypes.array.isRequired,\n  claimsType: PropTypes.string,\n  setIsDirty: PropTypes.func,\n  handleClose: PropTypes.func.isRequired\n};\nexport default function BulkAssignClaims(_ref) {\n  _s();\n\n  var claims = _ref.claimsProcessingSelected,\n      claimsType = _ref.claimsType,\n      setIsDirty = _ref.setIsDirty,\n      handleClose = _ref.handleClose;\n  var dispatch = useDispatch();\n  var userOrganisation = useSelector(selectUserOrganisation);\n  var claimsPagination = useSelector(selectClaimsProcessingPagination);\n  var assignToUsersObj = useSelector(selectClaimsAssignedToUsers);\n  var assignToUsersType = assignToUsersObj === null || assignToUsersObj === void 0 ? void 0 : assignToUsersObj.type;\n  var assignToUsersItems = (assignToUsersObj === null || assignToUsersObj === void 0 ? void 0 : assignToUsersObj.items) || [];\n  var assignToUsersLoaded = assignToUsersObj === null || assignToUsersObj === void 0 ? void 0 : assignToUsersObj.loaded;\n  var teamOptions = Object.values(constants.ORGANIZATIONS) || [];\n  var unassignedUser = {\n    id: 'unassigned',\n    fullName: utils.string.t('claims.processing.bulkAssign.unassigned')\n  };\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      resetKey = _useState2[0],\n      setResetKey = _useState2[1];\n\n  var fields = [{\n    name: 'team',\n    type: 'autocompletemui',\n    label: utils.string.t('claims.processing.bulkAssign.fields.team.label'),\n    value: (teamOptions === null || teamOptions === void 0 ? void 0 : teamOptions.find(function (team) {\n      return team.id === userOrganisation.id;\n    })) || null,\n    options: teamOptions,\n    optionKey: 'name',\n    disabled: true,\n    validation: Yup.object().required(utils.string.t('validation.required'))\n  }, {\n    name: 'assignTo',\n    type: 'autocompletemui',\n    label: \"\".concat(utils.string.t('claims.processing.bulkAssign.fields.assignTo.label'), \" *\"),\n    value: null,\n    options: [unassignedUser].concat(_toConsumableArray(assignToUsersItems)),\n    optionKey: 'id',\n    optionLabel: 'fullName',\n    validation: Yup.object().nullable().required(utils.string.t('validation.required')).test('assignTo', utils.string.t('claims.processing.bulkAssign.validation.newAssignee'), function () {\n      var _defaultValues$assign, _this$options$parent$;\n\n      return ((_defaultValues$assign = defaultValues.assignTo) === null || _defaultValues$assign === void 0 ? void 0 : _defaultValues$assign.id) !== ((_this$options$parent$ = this.options.parent.assignTo) === null || _this$options$parent$ === void 0 ? void 0 : _this$options$parent$.id);\n    })\n  }, {\n    name: 'notes',\n    type: 'textarea',\n    label: \"\".concat(utils.string.t('claims.processing.bulkAssign.fields.notes.label'), \" *\"),\n    value: '',\n    muiComponentProps: {\n      multiline: true,\n      rows: 3,\n      rowsMax: 6\n    },\n    validation: Yup.string().min(1, utils.string.t('validation.required')).max(1000, utils.string.t('validation.string.max')).required(utils.string.t('validation.required'))\n  }];\n  var defaultValues = utils.form.getInitialValues(fields);\n  var validationSchema = utils.form.getValidationSchema(fields);\n\n  var _useForm = useForm(_objectSpread({\n    defaultValues: defaultValues\n  }, validationSchema && {\n    resolver: yupResolver(validationSchema)\n  })),\n      control = _useForm.control,\n      watch = _useForm.watch,\n      errors = _useForm.errors,\n      handleSubmit = _useForm.handleSubmit,\n      formState = _useForm.formState;\n\n  var formValues = watch();\n  var formIsDirty = formState.isDirty;\n  var actions = [{\n    name: 'cancel',\n    label: utils.string.t('app.cancel'),\n    handler: function handler() {\n      if (formIsDirty) {\n        dispatch(showModal({\n          component: 'CONFIRM',\n          props: {\n            title: utils.string.t('navigation.form.subtitle'),\n            hint: utils.string.t('navigation.form.title'),\n            fullWidth: true,\n            maxWidth: 'xs',\n            componentProps: {\n              cancelLabel: utils.string.t('app.no'),\n              confirmLabel: utils.string.t('app.yes'),\n              submitHandler: function submitHandler() {\n                handleClose();\n              }\n            }\n          }\n        }));\n      } else {\n        handleClose();\n      }\n    }\n  }, {\n    name: 'submit',\n    label: utils.string.t('app.assign'),\n    handler: function handler(values) {\n      onSubmit(values);\n    }\n  }];\n\n  var _useFormActions = useFormActions(actions),\n      cancel = _useFormActions.cancel,\n      submit = _useFormActions.submit;\n\n  useEffect(function () {\n    if (assignToUsersType !== 'bulkAssignClaims' || assignToUsersType === 'bulkAssignClaims' && utils.generic.isInvalidOrEmptyArray(assignToUsersItems)) {\n      dispatch(resetClaimsAssignedToUsers());\n      dispatch(getUsersByOrg(userOrganisation.name, claims, 'bulkAssignClaims', false));\n    }\n\n    setResetKey(new Date().getTime());\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    setIsDirty(formIsDirty);\n  }, [formValues]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var isDataReady = function isDataReady() {\n    return assignToUsersLoaded && utils.generic.isValidArray(assignToUsersObj === null || assignToUsersObj === void 0 ? void 0 : assignToUsersObj.items);\n  };\n\n  var onSubmit = function onSubmit(values) {\n    dispatch(bulkAssignClaims(claims, teamOptions, values)).then(function () {\n      // fetch the claims list again to update the re-assigned claims\n      dispatch(getClaimsProcessing({\n        requestType: constants.CLAIM_PROCESSING_REQ_TYPES.search,\n        claimsType: claimsType,\n        page: claimsPagination === null || claimsPagination === void 0 ? void 0 : claimsPagination.page\n      }));\n    });\n  }; // data is still loading...\n\n\n  if (!isDataReady()) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      height: \"300px\",\n      children: /*#__PURE__*/_jsxDEV(Loader, {\n        visible: true,\n        absolute: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this);\n  } // data is ready\n\n\n  return /*#__PURE__*/_jsxDEV(BulkAssignClaimsView, {\n    fields: fields,\n    buttons: {\n      cancel: cancel,\n      submit: submit\n    },\n    formProps: {\n      control: control,\n      errors: errors,\n      handleSubmit: handleSubmit,\n      formState: formState\n    },\n    resetKey: resetKey\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 5\n  }, this);\n}\n\n_s(BulkAssignClaims, \"sd7u9eNziY3npMjvx/xH37wDOU8=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useForm, useFormActions];\n});\n\n_c = BulkAssignClaims;\nBulkAssignClaims.displayName = \"BulkAssignClaims\";\nBulkAssignClaims.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"BulkAssignClaims\",\n  \"props\": {\n    \"claimsProcessingSelected\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"claimsType\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"setIsDirty\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"handleClose\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\forms\\\\BulkAssignClaims\\\\BulkAssignClaims.js\"] = {\n    name: \"BulkAssignClaims\",\n    docgenInfo: BulkAssignClaims.__docgenInfo,\n    path: \"src\\\\forms\\\\BulkAssignClaims\\\\BulkAssignClaims.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"BulkAssignClaims\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/forms/BulkAssignClaims/BulkAssignClaims.js"],"names":["React","useEffect","useState","useDispatch","useSelector","PropTypes","Yup","useForm","yupResolver","BulkAssignClaimsView","Loader","bulkAssignClaims","getClaimsProcessing","getUsersByOrg","resetClaimsAssignedToUsers","selectClaimsAssignedToUsers","selectClaimsProcessingPagination","selectUserOrganisation","showModal","useFormActions","constants","utils","Box","BulkAssignClaims","propTypes","claimsProcessingSelected","array","isRequired","claimsType","string","setIsDirty","func","handleClose","claims","dispatch","userOrganisation","claimsPagination","assignToUsersObj","assignToUsersType","type","assignToUsersItems","items","assignToUsersLoaded","loaded","teamOptions","Object","values","ORGANIZATIONS","unassignedUser","id","fullName","t","resetKey","setResetKey","fields","name","label","value","find","team","options","optionKey","disabled","validation","object","required","optionLabel","nullable","test","defaultValues","assignTo","parent","muiComponentProps","multiline","rows","rowsMax","min","max","form","getInitialValues","validationSchema","getValidationSchema","resolver","control","watch","errors","handleSubmit","formState","formValues","formIsDirty","isDirty","actions","handler","component","props","title","hint","fullWidth","maxWidth","componentProps","cancelLabel","confirmLabel","submitHandler","onSubmit","cancel","submit","generic","isInvalidOrEmptyArray","Date","getTime","isDataReady","isValidArray","then","requestType","CLAIM_PROCESSING_REQ_TYPES","search","page"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport * as Yup from 'yup';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n\r\n// app\r\nimport { BulkAssignClaimsView } from './BulkAssignClaims.view';\r\nimport { Loader } from 'components';\r\nimport {\r\n  bulkAssignClaims,\r\n  getClaimsProcessing,\r\n  getUsersByOrg,\r\n  resetClaimsAssignedToUsers,\r\n  selectClaimsAssignedToUsers,\r\n  selectClaimsProcessingPagination,\r\n  selectUserOrganisation,\r\n  showModal,\r\n} from 'stores';\r\nimport { useFormActions } from 'hooks';\r\nimport * as constants from 'consts';\r\nimport * as utils from 'utils';\r\n\r\n// mui\r\nimport { Box } from '@material-ui/core';\r\n\r\nBulkAssignClaims.propTypes = {\r\n  claimsProcessingSelected: PropTypes.array.isRequired,\r\n  claimsType: PropTypes.string,\r\n  setIsDirty: PropTypes.func,\r\n  handleClose: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default function BulkAssignClaims({ claimsProcessingSelected: claims, claimsType, setIsDirty, handleClose }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const userOrganisation = useSelector(selectUserOrganisation);\r\n  const claimsPagination = useSelector(selectClaimsProcessingPagination);\r\n  const assignToUsersObj = useSelector(selectClaimsAssignedToUsers);\r\n  const assignToUsersType = assignToUsersObj?.type;\r\n  const assignToUsersItems = assignToUsersObj?.items || [];\r\n  const assignToUsersLoaded = assignToUsersObj?.loaded;\r\n  const teamOptions = Object.values(constants.ORGANIZATIONS) || [];\r\n  const unassignedUser = { id: 'unassigned', fullName: utils.string.t('claims.processing.bulkAssign.unassigned') };\r\n  const [resetKey, setResetKey] = useState();\r\n\r\n  const fields = [\r\n    {\r\n      name: 'team',\r\n      type: 'autocompletemui',\r\n      label: utils.string.t('claims.processing.bulkAssign.fields.team.label'),\r\n      value: teamOptions?.find((team) => team.id === userOrganisation.id) || null,\r\n      options: teamOptions,\r\n      optionKey: 'name',\r\n      disabled: true,\r\n      validation: Yup.object().required(utils.string.t('validation.required')),\r\n    },\r\n    {\r\n      name: 'assignTo',\r\n      type: 'autocompletemui',\r\n      label: `${utils.string.t('claims.processing.bulkAssign.fields.assignTo.label')} *`,\r\n      value: null,\r\n      options: [unassignedUser, ...assignToUsersItems],\r\n      optionKey: 'id',\r\n      optionLabel: 'fullName',\r\n      validation: Yup.object()\r\n        .nullable()\r\n        .required(utils.string.t('validation.required'))\r\n        .test('assignTo', utils.string.t('claims.processing.bulkAssign.validation.newAssignee'), function () {\r\n          return defaultValues.assignTo?.id !== this.options.parent.assignTo?.id;\r\n        }),\r\n    },\r\n    {\r\n      name: 'notes',\r\n      type: 'textarea',\r\n      label: `${utils.string.t('claims.processing.bulkAssign.fields.notes.label')} *`,\r\n      value: '',\r\n      muiComponentProps: {\r\n        multiline: true,\r\n        rows: 3,\r\n        rowsMax: 6,\r\n      },\r\n      validation: Yup.string()\r\n        .min(1, utils.string.t('validation.required'))\r\n        .max(1000, utils.string.t('validation.string.max'))\r\n        .required(utils.string.t('validation.required')),\r\n    },\r\n  ];\r\n\r\n  const defaultValues = utils.form.getInitialValues(fields);\r\n  const validationSchema = utils.form.getValidationSchema(fields);\r\n\r\n  const { control, watch, errors, handleSubmit, formState } = useForm({\r\n    defaultValues,\r\n    ...(validationSchema && { resolver: yupResolver(validationSchema) }),\r\n  });\r\n\r\n  const formValues = watch();\r\n  const formIsDirty = formState.isDirty;\r\n\r\n  const actions = [\r\n    {\r\n      name: 'cancel',\r\n      label: utils.string.t('app.cancel'),\r\n      handler: () => {\r\n        if (formIsDirty) {\r\n          dispatch(\r\n            showModal({\r\n              component: 'CONFIRM',\r\n              props: {\r\n                title: utils.string.t('navigation.form.subtitle'),\r\n                hint: utils.string.t('navigation.form.title'),\r\n                fullWidth: true,\r\n                maxWidth: 'xs',\r\n                componentProps: {\r\n                  cancelLabel: utils.string.t('app.no'),\r\n                  confirmLabel: utils.string.t('app.yes'),\r\n                  submitHandler: () => {\r\n                    handleClose();\r\n                  },\r\n                },\r\n              },\r\n            })\r\n          );\r\n        } else {\r\n          handleClose();\r\n        }\r\n      },\r\n    },\r\n    {\r\n      name: 'submit',\r\n      label: utils.string.t('app.assign'),\r\n      handler: (values) => {\r\n        onSubmit(values);\r\n      },\r\n    },\r\n  ];\r\n\r\n  const { cancel, submit } = useFormActions(actions);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      assignToUsersType !== 'bulkAssignClaims' ||\r\n      (assignToUsersType === 'bulkAssignClaims' && utils.generic.isInvalidOrEmptyArray(assignToUsersItems))\r\n    ) {\r\n      dispatch(resetClaimsAssignedToUsers());\r\n\r\n      dispatch(getUsersByOrg(userOrganisation.name, claims, 'bulkAssignClaims', false));\r\n    }\r\n    setResetKey(new Date().getTime());\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    setIsDirty(formIsDirty);\r\n  }, [formValues]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const isDataReady = () => {\r\n    return assignToUsersLoaded && utils.generic.isValidArray(assignToUsersObj?.items);\r\n  };\r\n\r\n  const onSubmit = (values) => {\r\n    dispatch(bulkAssignClaims(claims, teamOptions, values)).then(() => {\r\n      // fetch the claims list again to update the re-assigned claims\r\n      dispatch(getClaimsProcessing({ requestType: constants.CLAIM_PROCESSING_REQ_TYPES.search, claimsType, page: claimsPagination?.page }));\r\n    });\r\n  };\r\n\r\n  // data is still loading...\r\n  if (!isDataReady()) {\r\n    return (\r\n      <Box height=\"300px\">\r\n        <Loader visible absolute />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  // data is ready\r\n  return (\r\n    <BulkAssignClaimsView\r\n      fields={fields}\r\n      buttons={{ cancel, submit }}\r\n      formProps={{ control, errors, handleSubmit, formState }}\r\n      resetKey={resetKey}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}