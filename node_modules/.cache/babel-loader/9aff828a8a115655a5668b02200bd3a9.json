{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\RfiDetails\\\\RfiDetails.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux'; //app\n\nimport { RfiDetailsView } from './RfiDetails.view';\nimport { setDmsTaskContextType, resetDmsTaskTypeContext, selectLossInformation, selectLossInfoIsLoading, selectClaimsInformation, selectClaimsTabRows, selectClaimsTabSelectedClaimData, selectClaimInfoIsLoading, selectTaskDashboardTaskDetails, selectIsTaskDashboardTaskDetailsLoading, selectRfiHistoryListLoader, selectRefDataCatCodesList, selectQueryCodes, selectRefDataQueryCodes, selectLossQualifiers, selectSanctionsCheckStatus, getSanctionsCheckStatus, getLossInformation, getClaimsTabDetails, getSelectedClaimDetails, getClaimsTaskDashboardDetail, getRfiHistory, resetRfiDashboardData, getRfiHistoryDocuments, setClaimsTabSelectedItem } from 'stores';\nimport { DMS_TASK_CONTEXT_TYPE_RFI_RESPONSE } from 'consts';\nimport * as utils from 'utils';\nimport * as constants from 'consts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function RfiDetails(props) {\n  _s();\n\n  var rfiTask = props.rfiTask;\n  var dispatch = useDispatch();\n  var lossInformation = useSelector(selectLossInformation);\n  var isLossInfoLoading = useSelector(selectLossInfoIsLoading);\n  var claimsInformation = useSelector(selectClaimsInformation);\n  var claimBasicDetail = useSelector(selectClaimsTabSelectedClaimData);\n  var isClaimInfoLoading = useSelector(selectClaimInfoIsLoading);\n  var associatedTaskInformation = useSelector(selectTaskDashboardTaskDetails);\n  var isAssociatedTaskInfoLoading = useSelector(selectIsTaskDashboardTaskDetailsLoading);\n  var catCodes = useSelector(selectRefDataCatCodesList);\n  var claimsQueryCodes = useSelector(selectQueryCodes);\n  var refDataQueryCodes = useSelector(selectRefDataQueryCodes);\n  var lossQualifiers = useSelector(selectLossQualifiers);\n  var sanctionCheckStatus = useSelector(selectSanctionsCheckStatus);\n  var rfiHistoryLoader = useSelector(selectRfiHistoryListLoader);\n  var claimsTabRowsData = useSelector(selectClaimsTabRows);\n  var rfiOriginType = utils.claimsRfi.checkRfiOriginType(rfiTask === null || rfiTask === void 0 ? void 0 : rfiTask.refType);\n  var claimDetail = (claimsInformation === null || claimsInformation === void 0 ? void 0 : claimsInformation.claimReference) ? claimsInformation : claimBasicDetail;\n  var claimDashboardDisplayData = utils.generic.isValidArray(claimsTabRowsData, true) ? claimsTabRowsData[0] : {};\n  useEffect(function () {\n    getRfiHistoryDetails();\n    dispatch(setDmsTaskContextType({\n      type: DMS_TASK_CONTEXT_TYPE_RFI_RESPONSE,\n      refId: rfiTask === null || rfiTask === void 0 ? void 0 : rfiTask.taskId\n    }));\n    dispatch(getLossInformation({\n      lossDetailsId: rfiTask === null || rfiTask === void 0 ? void 0 : rfiTask.lossDetailID,\n      sourceIdParams: rfiTask === null || rfiTask === void 0 ? void 0 : rfiTask.sourceID,\n      divisionIdParam: rfiTask === null || rfiTask === void 0 ? void 0 : rfiTask.departmentID,\n      claimRefParam: (rfiTask === null || rfiTask === void 0 ? void 0 : rfiTask.claimRef) || (rfiTask === null || rfiTask === void 0 ? void 0 : rfiTask.processRef),\n      viewLoader: false\n    }));\n    dispatch(getClaimsTabDetails({\n      requestType: constants.CLAIMS_TAB_REQ_TYPES.search,\n      claimsType: constants.CLAIM_TEAM_TYPE.allClaims,\n      searchBy: constants.CLAIMS_TAB_SEARCH_OPTION_CLAIM_REF,\n      firstTimeSort: 'processRef',\n      term: rfiTask === null || rfiTask === void 0 ? void 0 : rfiTask.claimRef\n    }));\n    dispatch(getSelectedClaimDetails({\n      claimId: rfiTask === null || rfiTask === void 0 ? void 0 : rfiTask.businessProcessID,\n      claimRefParams: rfiTask === null || rfiTask === void 0 ? void 0 : rfiTask.claimRef,\n      sourceIdParams: rfiTask === null || rfiTask === void 0 ? void 0 : rfiTask.sourceID,\n      divisionIDParams: rfiTask === null || rfiTask === void 0 ? void 0 : rfiTask.departmentID,\n      viewLoader: false\n    }));\n    dispatch(getClaimsTaskDashboardDetail({\n      query: rfiTask === null || rfiTask === void 0 ? void 0 : rfiTask.parentTaskRef,\n      claimID: rfiTask === null || rfiTask === void 0 ? void 0 : rfiTask.businessProcessID,\n      viewLoader: false\n    }));\n    dispatch(getSanctionsCheckStatus(rfiTask === null || rfiTask === void 0 ? void 0 : rfiTask.rootProcessId, false));\n    return function () {\n      dispatch(resetDmsTaskTypeContext());\n      dispatch(resetRfiDashboardData());\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    if (utils.generic.isValidObject(claimDashboardDisplayData) && ((claimDashboardDisplayData === null || claimDashboardDisplayData === void 0 ? void 0 : claimDashboardDisplayData.claimRef) || (claimDashboardDisplayData === null || claimDashboardDisplayData === void 0 ? void 0 : claimDashboardDisplayData.claimReference))) {\n      dispatch(setClaimsTabSelectedItem(claimDashboardDisplayData, true));\n    }\n  }, [claimDashboardDisplayData]); // eslint-disable-line react-hooks/exhaustive-deps\n  //Sections Data\n\n  var lossInfo = utils.claimsAdditionalDetails.getLossCardInfo(lossInformation, catCodes, isLossInfoLoading);\n  var claimInfo = utils.claimsAdditionalDetails.getClaimCardInfo(claimDetail, lossQualifiers, isClaimInfoLoading);\n  var taskInfo = utils.claimsAdditionalDetails.getTaskCardInfo(associatedTaskInformation, sanctionCheckStatus, isAssociatedTaskInfoLoading);\n\n  var getRfiHistoryDetails = function getRfiHistoryDetails() {\n    var _dispatch;\n\n    (_dispatch = dispatch(getRfiHistory(rfiTask === null || rfiTask === void 0 ? void 0 : rfiTask.taskId))) === null || _dispatch === void 0 ? void 0 : _dispatch.then(function (data) {\n      if (data.status === constants.API_RESPONSE_OK) {\n        var rfihistoryList = _toConsumableArray(data === null || data === void 0 ? void 0 : data.data);\n\n        if (!utils.generic.isInvalidOrEmptyArray(rfihistoryList)) {\n          var caseIncidentNotesList = [];\n          rfihistoryList === null || rfihistoryList === void 0 ? void 0 : rfihistoryList.forEach(function (item) {\n            var _item$caseIncidentNot;\n\n            caseIncidentNotesList.push({\n              referenceId: \"\".concat(rfiTask === null || rfiTask === void 0 ? void 0 : rfiTask.taskId, \"-\").concat(item === null || item === void 0 ? void 0 : (_item$caseIncidentNot = item.caseIncidentNotesID) === null || _item$caseIncidentNot === void 0 ? void 0 : _item$caseIncidentNot.toString()),\n              sectionType: constants.DMS_CONTEXT_TASK\n            });\n          });\n          dispatch(getRfiHistoryDocuments(caseIncidentNotesList));\n        }\n      }\n    });\n  };\n\n  var openDocViewer = function openDocViewer(event, doc) {\n    event.preventDefault();\n    var documentId = doc.documentId,\n        documentName = doc.documentName;\n    utils.dms.dmsDocumentViewLauncher(documentId, documentName);\n  };\n\n  return /*#__PURE__*/_jsxDEV(RfiDetailsView, _objectSpread(_objectSpread({}, props), {}, {\n    rfiOriginType: rfiOriginType,\n    lossInfo: lossInfo,\n    claimInfo: claimInfo,\n    taskInfo: taskInfo,\n    claimsQueryCodes: claimsQueryCodes,\n    refDataQueryCodes: refDataQueryCodes,\n    rfiHistoryLoader: rfiHistoryLoader,\n    handlers: {\n      openDocViewer: openDocViewer,\n      getRfiHistoryDetails: getRfiHistoryDetails\n    }\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RfiDetails, \"HZzVqQ8wswWUXjZKoJmHqaYnj+s=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = RfiDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"RfiDetails\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/RfiDetails/RfiDetails.js"],"names":["React","useEffect","useDispatch","useSelector","RfiDetailsView","setDmsTaskContextType","resetDmsTaskTypeContext","selectLossInformation","selectLossInfoIsLoading","selectClaimsInformation","selectClaimsTabRows","selectClaimsTabSelectedClaimData","selectClaimInfoIsLoading","selectTaskDashboardTaskDetails","selectIsTaskDashboardTaskDetailsLoading","selectRfiHistoryListLoader","selectRefDataCatCodesList","selectQueryCodes","selectRefDataQueryCodes","selectLossQualifiers","selectSanctionsCheckStatus","getSanctionsCheckStatus","getLossInformation","getClaimsTabDetails","getSelectedClaimDetails","getClaimsTaskDashboardDetail","getRfiHistory","resetRfiDashboardData","getRfiHistoryDocuments","setClaimsTabSelectedItem","DMS_TASK_CONTEXT_TYPE_RFI_RESPONSE","utils","constants","RfiDetails","props","rfiTask","dispatch","lossInformation","isLossInfoLoading","claimsInformation","claimBasicDetail","isClaimInfoLoading","associatedTaskInformation","isAssociatedTaskInfoLoading","catCodes","claimsQueryCodes","refDataQueryCodes","lossQualifiers","sanctionCheckStatus","rfiHistoryLoader","claimsTabRowsData","rfiOriginType","claimsRfi","checkRfiOriginType","refType","claimDetail","claimReference","claimDashboardDisplayData","generic","isValidArray","getRfiHistoryDetails","type","refId","taskId","lossDetailsId","lossDetailID","sourceIdParams","sourceID","divisionIdParam","departmentID","claimRefParam","claimRef","processRef","viewLoader","requestType","CLAIMS_TAB_REQ_TYPES","search","claimsType","CLAIM_TEAM_TYPE","allClaims","searchBy","CLAIMS_TAB_SEARCH_OPTION_CLAIM_REF","firstTimeSort","term","claimId","businessProcessID","claimRefParams","divisionIDParams","query","parentTaskRef","claimID","rootProcessId","isValidObject","lossInfo","claimsAdditionalDetails","getLossCardInfo","claimInfo","getClaimCardInfo","taskInfo","getTaskCardInfo","then","data","status","API_RESPONSE_OK","rfihistoryList","isInvalidOrEmptyArray","caseIncidentNotesList","forEach","item","push","referenceId","caseIncidentNotesID","toString","sectionType","DMS_CONTEXT_TASK","openDocViewer","event","doc","preventDefault","documentId","documentName","dms","dmsDocumentViewLauncher"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n//app\r\nimport { RfiDetailsView } from './RfiDetails.view';\r\nimport {\r\n  setDmsTaskContextType,\r\n  resetDmsTaskTypeContext,\r\n  selectLossInformation,\r\n  selectLossInfoIsLoading,\r\n  selectClaimsInformation,\r\n  selectClaimsTabRows,\r\n  selectClaimsTabSelectedClaimData,\r\n  selectClaimInfoIsLoading,\r\n  selectTaskDashboardTaskDetails,\r\n  selectIsTaskDashboardTaskDetailsLoading,\r\n  selectRfiHistoryListLoader,\r\n  selectRefDataCatCodesList,\r\n  selectQueryCodes,\r\n  selectRefDataQueryCodes,\r\n  selectLossQualifiers,\r\n  selectSanctionsCheckStatus,\r\n  getSanctionsCheckStatus,\r\n  getLossInformation,\r\n  getClaimsTabDetails,\r\n  getSelectedClaimDetails,\r\n  getClaimsTaskDashboardDetail,\r\n  getRfiHistory,\r\n  resetRfiDashboardData,\r\n  getRfiHistoryDocuments,\r\n  setClaimsTabSelectedItem,\r\n} from 'stores';\r\nimport { DMS_TASK_CONTEXT_TYPE_RFI_RESPONSE } from 'consts';\r\nimport * as utils from 'utils';\r\nimport * as constants from 'consts';\r\n\r\nexport default function RfiDetails(props) {\r\n  const { rfiTask } = props;\r\n  const dispatch = useDispatch();\r\n\r\n  const lossInformation = useSelector(selectLossInformation);\r\n  const isLossInfoLoading = useSelector(selectLossInfoIsLoading);\r\n  const claimsInformation = useSelector(selectClaimsInformation);\r\n  const claimBasicDetail = useSelector(selectClaimsTabSelectedClaimData);\r\n  const isClaimInfoLoading = useSelector(selectClaimInfoIsLoading);\r\n  const associatedTaskInformation = useSelector(selectTaskDashboardTaskDetails);\r\n  const isAssociatedTaskInfoLoading = useSelector(selectIsTaskDashboardTaskDetailsLoading);\r\n\r\n  const catCodes = useSelector(selectRefDataCatCodesList);\r\n  const claimsQueryCodes = useSelector(selectQueryCodes);\r\n  const refDataQueryCodes = useSelector(selectRefDataQueryCodes);\r\n  const lossQualifiers = useSelector(selectLossQualifiers);\r\n  const sanctionCheckStatus = useSelector(selectSanctionsCheckStatus);\r\n  const rfiHistoryLoader = useSelector(selectRfiHistoryListLoader);\r\n  const claimsTabRowsData = useSelector(selectClaimsTabRows);\r\n\r\n  const rfiOriginType = utils.claimsRfi.checkRfiOriginType(rfiTask?.refType);\r\n  const claimDetail = claimsInformation?.claimReference ? claimsInformation : claimBasicDetail;\r\n  const claimDashboardDisplayData = utils.generic.isValidArray(claimsTabRowsData, true) ? claimsTabRowsData[0] : {};\r\n\r\n  useEffect(() => {\r\n    getRfiHistoryDetails();\r\n    dispatch(setDmsTaskContextType({ type: DMS_TASK_CONTEXT_TYPE_RFI_RESPONSE, refId: rfiTask?.taskId }));\r\n\r\n    dispatch(\r\n      getLossInformation({\r\n        lossDetailsId: rfiTask?.lossDetailID,\r\n        sourceIdParams: rfiTask?.sourceID,\r\n        divisionIdParam: rfiTask?.departmentID,\r\n        claimRefParam: rfiTask?.claimRef || rfiTask?.processRef,\r\n        viewLoader: false,\r\n      })\r\n    );\r\n    dispatch(\r\n      getClaimsTabDetails({\r\n        requestType: constants.CLAIMS_TAB_REQ_TYPES.search,\r\n        claimsType: constants.CLAIM_TEAM_TYPE.allClaims,\r\n        searchBy: constants.CLAIMS_TAB_SEARCH_OPTION_CLAIM_REF,\r\n        firstTimeSort: 'processRef',\r\n        term: rfiTask?.claimRef,\r\n      })\r\n    );\r\n    dispatch(\r\n      getSelectedClaimDetails({\r\n        claimId: rfiTask?.businessProcessID,\r\n        claimRefParams: rfiTask?.claimRef,\r\n        sourceIdParams: rfiTask?.sourceID,\r\n        divisionIDParams: rfiTask?.departmentID,\r\n        viewLoader: false,\r\n      })\r\n    );\r\n    dispatch(getClaimsTaskDashboardDetail({ query: rfiTask?.parentTaskRef, claimID: rfiTask?.businessProcessID, viewLoader: false }));\r\n\r\n    dispatch(getSanctionsCheckStatus(rfiTask?.rootProcessId, false));\r\n\r\n    return () => {\r\n      dispatch(resetDmsTaskTypeContext());\r\n      dispatch(resetRfiDashboardData());\r\n    };\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    if (\r\n      utils.generic.isValidObject(claimDashboardDisplayData) &&\r\n      (claimDashboardDisplayData?.claimRef || claimDashboardDisplayData?.claimReference)\r\n    ) {\r\n      dispatch(setClaimsTabSelectedItem(claimDashboardDisplayData, true));\r\n    }\r\n  }, [claimDashboardDisplayData]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  //Sections Data\r\n  const lossInfo = utils.claimsAdditionalDetails.getLossCardInfo(lossInformation, catCodes, isLossInfoLoading);\r\n  const claimInfo = utils.claimsAdditionalDetails.getClaimCardInfo(claimDetail, lossQualifiers, isClaimInfoLoading);\r\n  const taskInfo = utils.claimsAdditionalDetails.getTaskCardInfo(\r\n    associatedTaskInformation,\r\n    sanctionCheckStatus,\r\n    isAssociatedTaskInfoLoading\r\n  );\r\n\r\n  const getRfiHistoryDetails = () => {\r\n    dispatch(getRfiHistory(rfiTask?.taskId))?.then((data) => {\r\n      if (data.status === constants.API_RESPONSE_OK) {\r\n        const rfihistoryList = [...data?.data];\r\n        if (!utils.generic.isInvalidOrEmptyArray(rfihistoryList)) {\r\n          const caseIncidentNotesList = [];\r\n          rfihistoryList?.forEach((item) => {\r\n            caseIncidentNotesList.push({\r\n              referenceId: `${rfiTask?.taskId}-${item?.caseIncidentNotesID?.toString()}`,\r\n              sectionType: constants.DMS_CONTEXT_TASK,\r\n            });\r\n          });\r\n          dispatch(getRfiHistoryDocuments(caseIncidentNotesList));\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  const openDocViewer = (event, doc) => {\r\n    event.preventDefault();\r\n    const { documentId, documentName } = doc;\r\n    utils.dms.dmsDocumentViewLauncher(documentId, documentName);\r\n  };\r\n\r\n  return (\r\n    <RfiDetailsView\r\n      {...props}\r\n      rfiOriginType={rfiOriginType}\r\n      lossInfo={lossInfo}\r\n      claimInfo={claimInfo}\r\n      taskInfo={taskInfo}\r\n      claimsQueryCodes={claimsQueryCodes}\r\n      refDataQueryCodes={refDataQueryCodes}\r\n      rfiHistoryLoader={rfiHistoryLoader}\r\n      handlers={{ openDocViewer: openDocViewer, getRfiHistoryDetails: getRfiHistoryDetails }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}