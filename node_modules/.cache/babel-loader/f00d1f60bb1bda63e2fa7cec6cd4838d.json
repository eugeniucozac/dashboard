{"ast":null,"code":"import \"core-js/modules/es.promise.finally\";\nimport { authLogout, addLoader, removeLoader } from 'stores';\nimport * as utils from 'utils';\nexport var getCatCodes = function getCatCodes() {\n  var viewLoader = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/claims.actions.getCatCodes'\n    };\n    dispatch(getCatCodesRequest());\n    viewLoader && dispatch(addLoader('getCatCodes'));\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.claimService,\n      path: 'api/data/gui/cat-codes'\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(getCatCodesSuccess(data.data));\n      return data.data;\n    })[\"catch\"](function (err) {\n      dispatch(getCatCodesCodesFailure(err, defaultError));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      return err;\n    })[\"finally\"](function () {\n      viewLoader && dispatch(removeLoader('getCatCodes'));\n    });\n  };\n};\nexport var getCatCodesRequest = function getCatCodesRequest(data) {\n  return {\n    type: 'CLAIMS_CAT_CODES_GET_REQUEST',\n    payload: data\n  };\n};\nexport var getCatCodesSuccess = function getCatCodesSuccess(data) {\n  return {\n    type: 'CLAIMS_CAT_CODES_GET_SUCCESS',\n    payload: data\n  };\n};\nexport var getCatCodesCodesFailure = function getCatCodesCodesFailure(err) {\n  return {\n    type: 'CLAIMS_CAT_CODES_GET_FAILURE',\n    payload: err\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.getCatCodes.js"],"names":["authLogout","addLoader","removeLoader","utils","getCatCodes","viewLoader","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","getCatCodesRequest","api","get","token","accessToken","claimService","path","then","response","handleResponse","json","handleNewData","data","getCatCodesSuccess","err","getCatCodesCodesFailure","handleUnauthorized","type","payload"],"mappings":";AAAA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,YAAhC,QAAoD,QAApD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAO,IAAMC,WAAW,GACtB,SADWA,WACX;AAAA,MAACC,UAAD,uEAAc,IAAd;AAAA,SACA,UAACC,QAAD,EAAWC,QAAX,EAAwB;AACtB;AADsB,oBAEmCA,QAAQ,EAF3C;AAAA,QAENC,IAFM,aAEdC,IAFc,CAEND,IAFM;AAAA,QAEoBE,QAFpB,aAEEC,MAFF,CAEYC,IAFZ,CAEoBF,QAFpB;;AAItB,QAAMG,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE;AADa,KAArB;AAIAR,IAAAA,QAAQ,CAACS,kBAAkB,EAAnB,CAAR;AACAV,IAAAA,UAAU,IAAIC,QAAQ,CAACL,SAAS,CAAC,aAAD,CAAV,CAAtB;AAEA,WAAOE,KAAK,CAACa,GAAN,CACJC,GADI,CACA;AACHC,MAAAA,KAAK,EAAEV,IAAI,CAACW,WADT;AAEHT,MAAAA,QAAQ,EAAEA,QAAQ,CAACU,YAFhB;AAGHC,MAAAA,IAAI,EAAE;AAHH,KADA,EAMJC,IANI,CAMC,UAACC,QAAD;AAAA,aAAcpB,KAAK,CAACa,GAAN,CAAUQ,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAND,EAOJD,IAPI,CAOC,UAACG,IAAD;AAAA,aAAUtB,KAAK,CAACa,GAAN,CAAUU,aAAV,CAAwBD,IAAxB,CAAV;AAAA,KAPD,EAQJH,IARI,CAQC,UAACK,IAAD,EAAU;AACdrB,MAAAA,QAAQ,CAACsB,kBAAkB,CAACD,IAAI,CAACA,IAAN,CAAnB,CAAR;AACA,aAAOA,IAAI,CAACA,IAAZ;AACD,KAXI,WAYE,UAACE,GAAD,EAAS;AACdvB,MAAAA,QAAQ,CAACwB,uBAAuB,CAACD,GAAD,EAAMhB,YAAN,CAAxB,CAAR;AACAV,MAAAA,KAAK,CAACa,GAAN,CAAUe,kBAAV,CAA6BF,GAA7B,EAAkCvB,QAAlC,EAA4CN,UAA5C;AACA,aAAO6B,GAAP;AACD,KAhBI,aAiBI,YAAM;AACbxB,MAAAA,UAAU,IAAIC,QAAQ,CAACJ,YAAY,CAAC,aAAD,CAAb,CAAtB;AACD,KAnBI,CAAP;AAoBD,GAhCD;AAAA,CADK;AAmCP,OAAO,IAAMa,kBAAkB,GAAG,SAArBA,kBAAqB,CAACY,IAAD,EAAU;AAC1C,SAAO;AACLK,IAAAA,IAAI,EAAE,8BADD;AAELC,IAAAA,OAAO,EAAEN;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACD,IAAD,EAAU;AAC1C,SAAO;AACLK,IAAAA,IAAI,EAAE,8BADD;AAELC,IAAAA,OAAO,EAAEN;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMG,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACD,GAAD,EAAS;AAC9C,SAAO;AACLG,IAAAA,IAAI,EAAE,8BADD;AAELC,IAAAA,OAAO,EAAEJ;AAFJ,GAAP;AAID,CALM","sourcesContent":["import { authLogout, addLoader, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const getCatCodes =\r\n  (viewLoader = true) =>\r\n  (dispatch, getState) => {\r\n    // prettier-ignore\r\n    const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n    const defaultError = {\r\n      file: 'stores/claims.actions.getCatCodes',\r\n    };\r\n\r\n    dispatch(getCatCodesRequest());\r\n    viewLoader && dispatch(addLoader('getCatCodes'));\r\n\r\n    return utils.api\r\n      .get({\r\n        token: auth.accessToken,\r\n        endpoint: endpoint.claimService,\r\n        path: 'api/data/gui/cat-codes',\r\n      })\r\n      .then((response) => utils.api.handleResponse(response))\r\n      .then((json) => utils.api.handleNewData(json))\r\n      .then((data) => {\r\n        dispatch(getCatCodesSuccess(data.data));\r\n        return data.data;\r\n      })\r\n      .catch((err) => {\r\n        dispatch(getCatCodesCodesFailure(err, defaultError));\r\n        utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n        return err;\r\n      })\r\n      .finally(() => {\r\n        viewLoader && dispatch(removeLoader('getCatCodes'));\r\n      });\r\n  };\r\n\r\nexport const getCatCodesRequest = (data) => {\r\n  return {\r\n    type: 'CLAIMS_CAT_CODES_GET_REQUEST',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const getCatCodesSuccess = (data) => {\r\n  return {\r\n    type: 'CLAIMS_CAT_CODES_GET_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const getCatCodesCodesFailure = (err) => {\r\n  return {\r\n    type: 'CLAIMS_CAT_CODES_GET_FAILURE',\r\n    payload: err,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}