{"ast":null,"code":"import { authLogout, addLoader, removeLoader } from 'stores';\nimport * as utils from 'utils';\nimport get from 'lodash/get';\nexport var getPolicyClients = function getPolicyClients(params) {\n  return function (dispatch, getState) {\n    var _params$viewLoader;\n\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint,\n        claims = _getState.claims;\n\n    var defaultError = {\n      file: 'stores/claims.actions.getPolicyClients'\n    };\n    var xbPolicyId = get(claims, 'policyData.xbPolicyID') || '';\n    var xbInstanceId = get(claims, 'policyData.xbInstanceID') || '';\n    var viewLoader = (_params$viewLoader = params === null || params === void 0 ? void 0 : params.viewLoader) !== null && _params$viewLoader !== void 0 ? _params$viewLoader : true;\n    dispatch(getPolicyClientsRequest());\n    viewLoader && dispatch(addLoader('getPolicyClients'));\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.claimService,\n      path: \"api/data/gui/policy/\".concat(xbPolicyId, \"/source/\").concat(xbInstanceId, \"/client\")\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(getPolicyClientsSuccess(data.data));\n      return data.data;\n    }).catch(function (err) {\n      dispatch(getPolicyClientsFailure(err, defaultError));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      return err;\n    }).finally(function () {\n      viewLoader && dispatch(removeLoader('getPolicyClients'));\n    });\n  };\n};\nexport var getPolicyClientsRequest = function getPolicyClientsRequest() {\n  return {\n    type: 'CLAIMS_POLICY_CLIENTS_REQUEST'\n  };\n};\nexport var getPolicyClientsSuccess = function getPolicyClientsSuccess(data) {\n  return {\n    type: 'CLAIMS_POLICY_CLIENTS_SUCCESS',\n    payload: data\n  };\n};\nexport var getPolicyClientsFailure = function getPolicyClientsFailure(error) {\n  return {\n    type: 'CLAIMS_POLICY_CLIENTS_ERROR',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.getPolicyClients.js"],"names":["authLogout","addLoader","removeLoader","utils","get","getPolicyClients","params","dispatch","getState","auth","user","endpoint","config","vars","claims","defaultError","file","xbPolicyId","xbInstanceId","viewLoader","getPolicyClientsRequest","api","token","accessToken","claimService","path","then","response","handleResponse","json","handleNewData","data","getPolicyClientsSuccess","catch","err","getPolicyClientsFailure","handleUnauthorized","finally","type","payload","error"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,YAAhC,QAAoD,QAApD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AAEA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,MAAD;AAAA,SAAY,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAAA;;AAClE;AADkE,oBAECA,QAAQ,EAFT;AAAA,QAElDC,IAFkD,aAE1DC,IAF0D,CAElDD,IAFkD;AAAA,QAExBE,QAFwB,aAE1CC,MAF0C,CAEhCC,IAFgC,CAExBF,QAFwB;AAAA,QAEVG,MAFU,aAEVA,MAFU;;AAIlE,QAAMC,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE;AADa,KAArB;AAIA,QAAMC,UAAU,GAAGb,GAAG,CAACU,MAAD,EAAS,uBAAT,CAAH,IAAwC,EAA3D;AACA,QAAMI,YAAY,GAAGd,GAAG,CAACU,MAAD,EAAS,yBAAT,CAAH,IAA0C,EAA/D;AACA,QAAMK,UAAU,yBAAGb,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAEa,UAAX,mEAAyB,IAAzC;AAEAZ,IAAAA,QAAQ,CAACa,uBAAuB,EAAxB,CAAR;AACAD,IAAAA,UAAU,IAAIZ,QAAQ,CAACN,SAAS,CAAC,kBAAD,CAAV,CAAtB;AAEA,WAAOE,KAAK,CAACkB,GAAN,CACJjB,GADI,CACA;AACHkB,MAAAA,KAAK,EAAEb,IAAI,CAACc,WADT;AAEHZ,MAAAA,QAAQ,EAAEA,QAAQ,CAACa,YAFhB;AAGHC,MAAAA,IAAI,gCAAyBR,UAAzB,qBAA8CC,YAA9C;AAHD,KADA,EAMJQ,IANI,CAMC,UAACC,QAAD;AAAA,aAAcxB,KAAK,CAACkB,GAAN,CAAUO,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAND,EAOJD,IAPI,CAOC,UAACG,IAAD;AAAA,aAAU1B,KAAK,CAACkB,GAAN,CAAUS,aAAV,CAAwBD,IAAxB,CAAV;AAAA,KAPD,EAQJH,IARI,CAQC,UAACK,IAAD,EAAU;AACdxB,MAAAA,QAAQ,CAACyB,uBAAuB,CAACD,IAAI,CAACA,IAAN,CAAxB,CAAR;AACA,aAAOA,IAAI,CAACA,IAAZ;AACD,KAXI,EAYJE,KAZI,CAYE,UAACC,GAAD,EAAS;AACd3B,MAAAA,QAAQ,CAAC4B,uBAAuB,CAACD,GAAD,EAAMnB,YAAN,CAAxB,CAAR;AACAZ,MAAAA,KAAK,CAACkB,GAAN,CAAUe,kBAAV,CAA6BF,GAA7B,EAAkC3B,QAAlC,EAA4CP,UAA5C;AACA,aAAOkC,GAAP;AACD,KAhBI,EAiBJG,OAjBI,CAiBI,YAAM;AACblB,MAAAA,UAAU,IAAIZ,QAAQ,CAACL,YAAY,CAAC,kBAAD,CAAb,CAAtB;AACD,KAnBI,CAAP;AAoBD,GAnC+B;AAAA,CAAzB;AAqCP,OAAO,IAAMkB,uBAAuB,GAAG,SAA1BA,uBAA0B,GAAM;AAC3C,SAAO;AACLkB,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,IAAMN,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACD,IAAD,EAAU;AAC/C,SAAO;AACLO,IAAAA,IAAI,EAAE,+BADD;AAELC,IAAAA,OAAO,EAAER;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMI,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACK,KAAD,EAAW;AAChD,SAAO;AACLF,IAAAA,IAAI,EAAE,6BADD;AAELC,IAAAA,OAAO,EAAEC;AAFJ,GAAP;AAID,CALM","sourcesContent":["import { authLogout, addLoader, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\nimport get from 'lodash/get';\r\n\r\nexport const getPolicyClients = (params) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } }, claims } = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.getPolicyClients',\r\n  };\r\n\r\n  const xbPolicyId = get(claims, 'policyData.xbPolicyID') || '';\r\n  const xbInstanceId = get(claims, 'policyData.xbInstanceID') || '';\r\n  const viewLoader = params?.viewLoader ?? true\r\n\r\n  dispatch(getPolicyClientsRequest());\r\n  viewLoader && dispatch(addLoader('getPolicyClients'));\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.claimService,\r\n      path: `api/data/gui/policy/${xbPolicyId}/source/${xbInstanceId}/client`,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(getPolicyClientsSuccess(data.data));\r\n      return data.data;\r\n    })\r\n    .catch((err) => {\r\n      dispatch(getPolicyClientsFailure(err, defaultError));\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      viewLoader && dispatch(removeLoader('getPolicyClients'));\r\n    });\r\n};\r\n\r\nexport const getPolicyClientsRequest = () => {\r\n  return {\r\n    type: 'CLAIMS_POLICY_CLIENTS_REQUEST',\r\n  };\r\n};\r\n\r\nexport const getPolicyClientsSuccess = (data) => {\r\n  return {\r\n    type: 'CLAIMS_POLICY_CLIENTS_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const getPolicyClientsFailure = (error) => {\r\n  return {\r\n    type: 'CLAIMS_POLICY_CLIENTS_ERROR',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}