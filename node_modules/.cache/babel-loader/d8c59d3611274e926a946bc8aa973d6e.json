{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n// app\nimport * as utils from 'utils';\nimport { authLogout, addLoader, enqueueNotification, hideModal, removeLoader } from 'stores';\nexport var editClaimPriority = function editClaimPriority(formData, priorities, claim) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/claims.actions.editClaimPriority'\n    };\n    var priority = formData.priority;\n    var claimID = claim.claimID,\n        processID = claim.processID;\n    dispatch(editClaimPriorityRequest(formData, priorities, claim));\n    dispatch(addLoader('editClaimPriority'));\n\n    if (!formData || !priority || !claimID) {\n      dispatch(editClaimPriorityFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Missing request params'\n      })));\n      dispatch(hideModal());\n      dispatch(removeLoader('editClaimPriority'));\n      return;\n    }\n\n    return utils.api.put({\n      token: auth.accessToken,\n      endpoint: endpoint.claimService,\n      path: \"api/workflow/claims/\".concat(claimID, \"/process/\").concat(processID, \"/priority/\").concat(priority)\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      var _priorities$find;\n\n      var priorityId = data === null || data === void 0 ? void 0 : data.data;\n      var priorityName = (_priorities$find = priorities.find(function (p) {\n        var _p$id;\n\n        return ((_p$id = p.id) === null || _p$id === void 0 ? void 0 : _p$id.toString()) === (priorityId === null || priorityId === void 0 ? void 0 : priorityId.toString());\n      })) === null || _priorities$find === void 0 ? void 0 : _priorities$find.description;\n      dispatch(editClaimPrioritySuccess(priorityId, priorityName, claimID));\n      dispatch(enqueueNotification('notification.claimPriority.success', 'success'));\n      return priorityId;\n    })[\"catch\"](function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API fetch error (claims.actions.editClaimPriority)'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(editClaimPriorityFailure(err));\n      dispatch(enqueueNotification('notification.claimPriority.fail', 'error'));\n      return err;\n    })[\"finally\"](function () {\n      dispatch(hideModal());\n      dispatch(removeLoader('editClaimPriority'));\n    });\n  };\n};\nexport var editClaimPriorityRequest = function editClaimPriorityRequest(formData, priorities, claim) {\n  return {\n    type: 'CLAIMS_SET_PRIORITY_REQUEST',\n    payload: {\n      formData: formData,\n      priorities: priorities,\n      claim: claim\n    }\n  };\n};\nexport var editClaimPrioritySuccess = function editClaimPrioritySuccess(priorityId, priorityName, claimID) {\n  return {\n    type: 'CLAIMS_SET_PRIORITY_SUCCESS',\n    payload: {\n      priorityId: priorityId,\n      priorityName: priorityName,\n      claimID: claimID\n    }\n  };\n};\nexport var editClaimPriorityFailure = function editClaimPriorityFailure(error) {\n  return {\n    type: 'CLAIMS_SET_PRIORITY_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.editClaimPriority.js"],"names":["utils","authLogout","addLoader","enqueueNotification","hideModal","removeLoader","editClaimPriority","formData","priorities","claim","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","priority","claimID","processID","editClaimPriorityRequest","editClaimPriorityFailure","message","api","put","token","accessToken","claimService","path","then","response","handleResponse","json","handleNewData","data","priorityId","priorityName","find","p","id","toString","description","editClaimPrioritySuccess","err","errorParams","handleError","handleUnauthorized","type","payload","error"],"mappings":"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","sourcesContent":["// app\r\nimport * as utils from 'utils';\r\nimport { authLogout, addLoader, enqueueNotification, hideModal, removeLoader } from 'stores';\r\n\r\nexport const editClaimPriority = (formData, priorities, claim) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } } } = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.editClaimPriority',\r\n  };\r\n\r\n  const { priority } = formData;\r\n  const { claimID, processID } = claim;\r\n\r\n  dispatch(editClaimPriorityRequest(formData, priorities, claim));\r\n  dispatch(addLoader('editClaimPriority'));\r\n\r\n  if (!formData || !priority || !claimID) {\r\n    dispatch(editClaimPriorityFailure({ ...defaultError, message: 'Missing request params' }));\r\n    dispatch(hideModal());\r\n    dispatch(removeLoader('editClaimPriority'));\r\n    return;\r\n  }\r\n\r\n  return utils.api\r\n    .put({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.claimService,\r\n      path: `api/workflow/claims/${claimID}/process/${processID}/priority/${priority}`,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      const priorityId = data?.data;\r\n      const priorityName = priorities.find((p) => p.id?.toString() === priorityId?.toString())?.description;\r\n\r\n      dispatch(editClaimPrioritySuccess(priorityId, priorityName, claimID));\r\n      dispatch(enqueueNotification('notification.claimPriority.success', 'success'));\r\n      return priorityId;\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        ...defaultError,\r\n        message: 'API fetch error (claims.actions.editClaimPriority)',\r\n      };\r\n\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(editClaimPriorityFailure(err));\r\n      dispatch(enqueueNotification('notification.claimPriority.fail', 'error'));\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(hideModal());\r\n      dispatch(removeLoader('editClaimPriority'));\r\n    });\r\n};\r\n\r\nexport const editClaimPriorityRequest = (formData, priorities, claim) => {\r\n  return {\r\n    type: 'CLAIMS_SET_PRIORITY_REQUEST',\r\n    payload: { formData, priorities, claim },\r\n  };\r\n};\r\n\r\nexport const editClaimPrioritySuccess = (priorityId, priorityName, claimID) => {\r\n  return {\r\n    type: 'CLAIMS_SET_PRIORITY_SUCCESS',\r\n    payload: { priorityId, priorityName, claimID },\r\n  };\r\n};\r\n\r\nexport const editClaimPriorityFailure = (error) => {\r\n  return {\r\n    type: 'CLAIMS_SET_PRIORITY_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}