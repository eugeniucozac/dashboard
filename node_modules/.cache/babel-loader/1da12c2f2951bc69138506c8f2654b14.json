{"ast":null,"code":"import _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ClaimsTab\\\\ClaimsTabTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport get from 'lodash/get';\nimport xorBy from 'lodash/xorBy'; // app\n\nimport { ClaimsTabTableView } from './ClaimsTabTable.view';\nimport * as utils from 'utils';\nimport { collapseSidebar, expandSidebar, selectClaimsProcessingItem, showModal, hideModal, getClaimsProcessing, returnToTeamQueueClaim, selectClaimsTabPagination, selectClaimsTabItem, selectClaimsTabRowSelected } from 'stores';\nimport { useSort, usePagination } from 'hooks';\nimport config from 'config';\nimport * as constants from 'consts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nClaimsTabTable.prototypes = {\n  claims: PropTypes.array.isRequired,\n  cols: PropTypes.array.isRequired,\n  columnProps: PropTypes.object.isRequired,\n  sort: PropTypes.object.isRequired,\n  handlers: PropTypes.shape({\n    bulkAssignClaims: PropTypes.object.isRequired,\n    changePage: PropTypes.object.isRequired,\n    changeRowsPerPage: PropTypes.object.isRequired,\n    sort: PropTypes.object.isRequired\n  }).isRequired\n};\nexport function ClaimsTabTable(_ref) {\n  _s();\n\n  var _this = this;\n\n  var claims = _ref.claims,\n      colsArr = _ref.cols,\n      columnProps = _ref.columnProps,\n      sortObj = _ref.sort,\n      _ref$handlers = _ref.handlers,\n      handlers = _ref$handlers === void 0 ? {} : _ref$handlers;\n  var dispatch = useDispatch();\n  var history = useHistory();\n  var isReassignFormDirtyRef = useRef(false);\n  var claimsTabRowSelected = useSelector(selectClaimsTabRowSelected);\n  var claimsTabPagination = useSelector(selectClaimsTabPagination);\n  var uiSidebarExpanded = useSelector(function (state) {\n    return get(state, 'ui.sidebar.expanded');\n  });\n  var claimsType = constants.CLAIM_TEAM_TYPE.myClaims;\n  var searchBy = constants.CLAIMS_SEARCH_OPTION_CLAIM_REF;\n\n  var _useSort = useSort(colsArr, sortObj, handlers === null || handlers === void 0 ? void 0 : handlers.sort),\n      cols = _useSort.cols,\n      sort = _useSort.sort;\n\n  var pagination = usePagination(claims || [], claimsTabPagination, handlers.changePage, handlers.changeRowsPerPage);\n  var claimsTabRowSelectedLength = (claimsTabRowSelected === null || claimsTabRowSelected === void 0 ? void 0 : claimsTabRowSelected.length) || 0;\n  useEffect(function () {\n    if (claimsTabRowSelectedLength !== 1) {\n      dispatch(collapseSidebar());\n    }\n  }, [claimsTabRowSelectedLength]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var selectClaim = function selectClaim(claimObj) {\n    return function () {\n      var selectedClaimsArray = xorBy(claimsTabRowSelected, [claimObj], 'claimReference');\n\n      if (claimObj === null || claimObj === void 0 ? void 0 : claimObj.claimReference) {\n        dispatch(selectClaimsTabItem(claimObj));\n\n        if (!uiSidebarExpanded && (selectedClaimsArray === null || selectedClaimsArray === void 0 ? void 0 : selectedClaimsArray.length) === 1) {\n          dispatch(expandSidebar());\n        }\n      }\n    };\n  };\n\n  var clickClaim = function clickClaim(claimObj) {\n    return function (event) {\n      event.stopPropagation();\n\n      if (claimObj === null || claimObj === void 0 ? void 0 : claimObj.claimReference) {\n        dispatch(selectClaimsTabItem(claimObj, true));\n        history.push(\"\".concat(config.routes.claimsFNOL.claim, \"/\").concat(claimObj === null || claimObj === void 0 ? void 0 : claimObj.claimReference));\n      }\n    };\n  };\n\n  var handleCreateAdHocTaskModal = function handleCreateAdHocTaskModal(claim) {\n    dispatch(!claimsTabRowSelectedLength ? selectClaimsProcessingItem(claim) : selectClaimsProcessingItem(claim, true));\n    dispatch(showModal({\n      component: 'CREATE_AD_HOC_TASK',\n      props: {\n        title: utils.string.t('claims.processing.taskFunction.createAdhocTask'),\n        hideCompOnBlur: false,\n        fullWidth: true,\n        maxWidth: 'md',\n        disableAutoFocus: true,\n        componentProps: {\n          claim: claim,\n          submitHandler: function submitHandler() {\n            dispatch(hideModal());\n          },\n          cancelHandler: function cancelHandler() {\n            dispatch(hideModal());\n          }\n        }\n      }\n    }));\n  };\n\n  var handleCreateRFIModal = function handleCreateRFIModal(claim) {\n    dispatch(!claimsTabRowSelectedLength ? selectClaimsProcessingItem(claim) : selectClaimsProcessingItem(claim, true));\n    dispatch(showModal({\n      component: 'CREATE_RFI',\n      props: {\n        title: utils.string.t('claims.processing.taskFunction.createRFI'),\n        hideCompOnBlur: false,\n        fullWidth: true,\n        maxWidth: 'md',\n        disableAutoFocus: true,\n        componentProps: {\n          claim: claim,\n          cancelHandler: function cancelHandler() {\n            dispatch(hideModal());\n          }\n        }\n      }\n    }));\n  };\n\n  var handleSetClaimPriority = function handleSetClaimPriority(claim) {\n    dispatch(showModal({\n      component: 'SET_CLAIM_PRIORITY',\n      props: {\n        title: utils.string.t('claims.modals.claimFunctions.setClaimPriority'),\n        fullWidth: true,\n        hideCompOnBlur: false,\n        maxWidth: 'sm',\n        disableAutoFocus: true,\n        componentProps: {\n          claim: claim,\n          cancelHandler: function cancelHandler() {\n            dispatch(hideModal());\n          }\n        }\n      }\n    }));\n  };\n\n  var handleSetClaimTaskSelection = function handleSetClaimTaskSelection(claim) {\n    dispatch(showModal({\n      component: 'SET_CLAIM_TASK_SELECTION',\n      props: {\n        title: utils.string.t('claims.modals.claimFunctions.setClaimTaskSelection'),\n        fullWidth: true,\n        maxWidth: 'sm',\n        disableAutoFocus: true,\n        componentProps: {\n          claim: claim,\n          cancelHandler: function cancelHandler() {\n            dispatch(hideModal());\n          }\n        }\n      }\n    }));\n  };\n\n  var setIsReassignFormDirty = function setIsReassignFormDirty(isDirty) {\n    isReassignFormDirtyRef.current = isDirty;\n  };\n\n  var bulkAssignConfirm = function bulkAssignConfirm() {\n    if (isReassignFormDirtyRef.current) {\n      dispatch(showModal({\n        component: 'CONFIRM',\n        props: {\n          title: utils.string.t('navigation.form.subtitle'),\n          hint: utils.string.t('navigation.form.title'),\n          fullWidth: true,\n          maxWidth: 'xs',\n          componentProps: {\n            cancelLabel: utils.string.t('app.no'),\n            confirmLabel: utils.string.t('app.yes'),\n            submitHandler: function submitHandler() {\n              dispatch(hideModal('SINGLE_ASSIGN_CLAIM'));\n            }\n          }\n        }\n      }));\n    } else {\n      dispatch(hideModal('SINGLE_ASSIGN_CLAIM'));\n    }\n  };\n\n  var handleReassignClaim = function handleReassignClaim(claim) {\n    dispatch(showModal({\n      component: 'SINGLE_ASSIGN_CLAIM',\n      props: {\n        title: 'claims.processing.bulkAssign.title',\n        fullWidth: true,\n        maxWidth: 'sm',\n        hideCompOnBlur: false,\n        componentProps: {\n          claimsProcessingSelected: [claim],\n          claimsType: claimsType,\n          setIsDirty: setIsReassignFormDirty,\n          clickXHandler: function clickXHandler() {\n            bulkAssignConfirm();\n          },\n          cancelHandler: function cancelHandler() {\n            bulkAssignConfirm();\n          }\n        }\n      }\n    }));\n  };\n\n  var handleReturnClaimToTeamQueue = function handleReturnClaimToTeamQueue(claim) {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        title: utils.string.t('status.alert'),\n        fullWidth: true,\n        maxWidth: 'xs',\n        componentProps: {\n          cancelLabel: utils.string.t('app.no'),\n          confirmLabel: utils.string.t('app.yes'),\n          confirmMessage: /*#__PURE__*/_jsxDEV(\"span\", {\n            dangerouslySetInnerHTML: {\n              __html: \"\".concat(utils.string.t('claims.complexityRulesManagementDetails.alertModal.note'))\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 15\n          }, _this),\n          submitHandler: function () {\n            var _submitHandler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n              return _regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      _context.next = 2;\n                      return dispatch(returnToTeamQueueClaim(claim));\n\n                    case 2:\n                      _context.next = 4;\n                      return dispatch(getClaimsProcessing({\n                        requestType: constants.CLAIM_PROCESSING_REQ_TYPES.search,\n                        claimsType: claimsType,\n                        filterTerm: [],\n                        searchBy: searchBy,\n                        pullClosedRecords: false\n                      }));\n\n                    case 4:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, _callee);\n            }));\n\n            function submitHandler() {\n              return _submitHandler.apply(this, arguments);\n            }\n\n            return submitHandler;\n          }(),\n          cancelHandler: function cancelHandler() {\n            dispatch(hideModal());\n          }\n        }\n      }\n    }));\n  };\n\n  var handleReOpenClaim = function handleReOpenClaim(claim) {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        title: utils.string.t('claims.claimRef.popOverItems.reOpen'),\n        hint: utils.string.t('claims.claimRef.popOverItems.reOpenClaimMessage'),\n        fullWidth: true,\n        maxWidth: 'xs',\n        componentProps: {\n          cancelLabel: utils.string.t('app.no'),\n          confirmLabel: utils.string.t('app.yes'),\n          submitHandler: function submitHandler() {\n            handleSetClaimTaskSelection(claim);\n          },\n          cancelHandler: function cancelHandler() {\n            dispatch(hideModal());\n          }\n        }\n      }\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(ClaimsTabTableView, {\n    claims: claims || [],\n    claimsSelected: claimsTabRowSelected,\n    cols: cols,\n    columnProps: columnProps,\n    sort: sort,\n    pagination: pagination,\n    handlers: {\n      bulkAssignClaims: handlers.bulkAssignClaims,\n      clickClaim: clickClaim,\n      handleCreateAdHocTaskModal: handleCreateAdHocTaskModal,\n      handleCreateRFIModal: handleCreateRFIModal,\n      handleReassignClaim: handleReassignClaim,\n      handleSetClaimPriority: handleSetClaimPriority,\n      handleReturnClaimToTeamQueue: handleReturnClaimToTeamQueue,\n      handleReOpenClaim: handleReOpenClaim,\n      selectClaim: selectClaim,\n      sort: handlers.sort\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 287,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ClaimsTabTable, \"Kad+/3sIec+o0n/j60yDAodXxq4=\", false, function () {\n  return [useDispatch, useHistory, useSelector, useSelector, useSelector, useSort, usePagination];\n});\n\n_c = ClaimsTabTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimsTabTable\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ClaimsTab/ClaimsTabTable.js"],"names":["React","useEffect","useRef","PropTypes","useDispatch","useSelector","useHistory","get","xorBy","ClaimsTabTableView","utils","collapseSidebar","expandSidebar","selectClaimsProcessingItem","showModal","hideModal","getClaimsProcessing","returnToTeamQueueClaim","selectClaimsTabPagination","selectClaimsTabItem","selectClaimsTabRowSelected","useSort","usePagination","config","constants","ClaimsTabTable","prototypes","claims","array","isRequired","cols","columnProps","object","sort","handlers","shape","bulkAssignClaims","changePage","changeRowsPerPage","colsArr","sortObj","dispatch","history","isReassignFormDirtyRef","claimsTabRowSelected","claimsTabPagination","uiSidebarExpanded","state","claimsType","CLAIM_TEAM_TYPE","myClaims","searchBy","CLAIMS_SEARCH_OPTION_CLAIM_REF","pagination","claimsTabRowSelectedLength","length","selectClaim","claimObj","selectedClaimsArray","claimReference","clickClaim","event","stopPropagation","push","routes","claimsFNOL","claim","handleCreateAdHocTaskModal","component","props","title","string","t","hideCompOnBlur","fullWidth","maxWidth","disableAutoFocus","componentProps","submitHandler","cancelHandler","handleCreateRFIModal","handleSetClaimPriority","handleSetClaimTaskSelection","setIsReassignFormDirty","isDirty","current","bulkAssignConfirm","hint","cancelLabel","confirmLabel","handleReassignClaim","claimsProcessingSelected","setIsDirty","clickXHandler","handleReturnClaimToTeamQueue","confirmMessage","__html","requestType","CLAIM_PROCESSING_REQ_TYPES","search","filterTerm","pullClosedRecords","handleReOpenClaim"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport get from 'lodash/get';\r\nimport xorBy from 'lodash/xorBy';\r\n\r\n// app\r\nimport { ClaimsTabTableView } from './ClaimsTabTable.view';\r\nimport * as utils from 'utils';\r\nimport {\r\n  collapseSidebar,\r\n  expandSidebar,\r\n  selectClaimsProcessingItem,\r\n  showModal,\r\n  hideModal,\r\n  getClaimsProcessing,\r\n  returnToTeamQueueClaim,\r\n  selectClaimsTabPagination,\r\n  selectClaimsTabItem,\r\n  selectClaimsTabRowSelected\r\n} from 'stores';\r\nimport { useSort, usePagination } from 'hooks';\r\nimport config from 'config';\r\nimport * as constants from 'consts';\r\n\r\nClaimsTabTable.prototypes = {\r\n  claims: PropTypes.array.isRequired,\r\n  cols: PropTypes.array.isRequired,\r\n  columnProps: PropTypes.object.isRequired,\r\n  sort: PropTypes.object.isRequired,\r\n  handlers: PropTypes.shape({\r\n    bulkAssignClaims: PropTypes.object.isRequired,\r\n    changePage: PropTypes.object.isRequired,\r\n    changeRowsPerPage: PropTypes.object.isRequired,\r\n    sort: PropTypes.object.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport function ClaimsTabTable({ claims, cols: colsArr, columnProps, sort: sortObj, handlers = {} }) {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const isReassignFormDirtyRef = useRef(false);\r\n\r\n  const claimsTabRowSelected = useSelector(selectClaimsTabRowSelected);\r\n  const claimsTabPagination = useSelector(selectClaimsTabPagination);\r\n  const uiSidebarExpanded = useSelector((state) => get(state, 'ui.sidebar.expanded'));\r\n  const claimsType = constants.CLAIM_TEAM_TYPE.myClaims;\r\n  const searchBy = constants.CLAIMS_SEARCH_OPTION_CLAIM_REF;\r\n\r\n  const { cols, sort } = useSort(colsArr, sortObj, handlers?.sort);\r\n  const pagination = usePagination(claims || [], claimsTabPagination, handlers.changePage, handlers.changeRowsPerPage);\r\n  const claimsTabRowSelectedLength = claimsTabRowSelected?.length || 0;\r\n\r\n  useEffect(() => {\r\n    if (claimsTabRowSelectedLength !== 1) {\r\n      dispatch(collapseSidebar());\r\n    }\r\n  }, [claimsTabRowSelectedLength]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const selectClaim = (claimObj) => () => {\r\n    const selectedClaimsArray = xorBy(claimsTabRowSelected, [claimObj], 'claimReference');\r\n\r\n    if (claimObj?.claimReference) {\r\n      dispatch(selectClaimsTabItem(claimObj));\r\n      if (!uiSidebarExpanded && selectedClaimsArray?.length === 1) {\r\n        dispatch(expandSidebar());\r\n      }\r\n    }\r\n  };\r\n\r\n  const clickClaim = (claimObj) => (event) => {\r\n    event.stopPropagation();\r\n\r\n    if (claimObj?.claimReference) {\r\n      dispatch(selectClaimsTabItem(claimObj, true));\r\n      history.push(`${config.routes.claimsFNOL.claim}/${claimObj?.claimReference}`);\r\n    }\r\n  };\r\n\r\n  const handleCreateAdHocTaskModal = (claim) => {\r\n    dispatch(!claimsTabRowSelectedLength ? selectClaimsProcessingItem(claim) : selectClaimsProcessingItem(claim, true));\r\n    dispatch(\r\n      showModal({\r\n        component: 'CREATE_AD_HOC_TASK',\r\n        props: {\r\n          title: utils.string.t('claims.processing.taskFunction.createAdhocTask'),\r\n          hideCompOnBlur: false,\r\n          fullWidth: true,\r\n          maxWidth: 'md',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            claim,\r\n            submitHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n            cancelHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleCreateRFIModal = (claim) => {\r\n    dispatch(!claimsTabRowSelectedLength ? selectClaimsProcessingItem(claim) : selectClaimsProcessingItem(claim, true));\r\n    dispatch(\r\n      showModal({\r\n        component: 'CREATE_RFI',\r\n        props: {\r\n          title: utils.string.t('claims.processing.taskFunction.createRFI'),\r\n          hideCompOnBlur: false,\r\n          fullWidth: true,\r\n          maxWidth: 'md',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            claim,\r\n            cancelHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleSetClaimPriority = (claim) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'SET_CLAIM_PRIORITY',\r\n        props: {\r\n          title: utils.string.t('claims.modals.claimFunctions.setClaimPriority'),\r\n          fullWidth: true,\r\n          hideCompOnBlur: false,\r\n          maxWidth: 'sm',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            claim,\r\n            cancelHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleSetClaimTaskSelection = (claim) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'SET_CLAIM_TASK_SELECTION',\r\n        props: {\r\n          title: utils.string.t('claims.modals.claimFunctions.setClaimTaskSelection'),\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            claim,\r\n            cancelHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const setIsReassignFormDirty = (isDirty) => {\r\n    isReassignFormDirtyRef.current = isDirty;\r\n  };\r\n\r\n  const bulkAssignConfirm = () => {\r\n    if (isReassignFormDirtyRef.current) {\r\n      dispatch(\r\n        showModal({\r\n          component: 'CONFIRM',\r\n          props: {\r\n            title: utils.string.t('navigation.form.subtitle'),\r\n            hint: utils.string.t('navigation.form.title'),\r\n            fullWidth: true,\r\n            maxWidth: 'xs',\r\n            componentProps: {\r\n              cancelLabel: utils.string.t('app.no'),\r\n              confirmLabel: utils.string.t('app.yes'),\r\n              submitHandler: () => {\r\n                dispatch(hideModal('SINGLE_ASSIGN_CLAIM'));\r\n              },\r\n            },\r\n          },\r\n        })\r\n      );\r\n    } else {\r\n      dispatch(hideModal('SINGLE_ASSIGN_CLAIM'));\r\n    }\r\n  };\r\n\r\n  const handleReassignClaim = (claim) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'SINGLE_ASSIGN_CLAIM',\r\n        props: {\r\n          title: 'claims.processing.bulkAssign.title',\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          hideCompOnBlur: false,\r\n          componentProps: {\r\n            claimsProcessingSelected: [claim],\r\n            claimsType,\r\n            setIsDirty: setIsReassignFormDirty,\r\n            clickXHandler: () => {\r\n              bulkAssignConfirm();\r\n            },\r\n            cancelHandler: () => {\r\n              bulkAssignConfirm();\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleReturnClaimToTeamQueue = (claim) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          title: utils.string.t('status.alert'),\r\n          fullWidth: true,\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            cancelLabel: utils.string.t('app.no'),\r\n            confirmLabel: utils.string.t('app.yes'),\r\n            confirmMessage: (\r\n              <span\r\n                dangerouslySetInnerHTML={{\r\n                  __html: `${utils.string.t('claims.complexityRulesManagementDetails.alertModal.note')}`,\r\n                }}\r\n              />\r\n            ),\r\n            submitHandler: async () => {\r\n              await dispatch(returnToTeamQueueClaim(claim));\r\n              await dispatch(\r\n                getClaimsProcessing({\r\n                  requestType: constants.CLAIM_PROCESSING_REQ_TYPES.search,\r\n                  claimsType,\r\n                  filterTerm: [],\r\n                  searchBy,\r\n                  pullClosedRecords: false,\r\n                })\r\n              );\r\n            },\r\n            cancelHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleReOpenClaim = (claim) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          title: utils.string.t('claims.claimRef.popOverItems.reOpen'),\r\n          hint: utils.string.t('claims.claimRef.popOverItems.reOpenClaimMessage'),\r\n          fullWidth: true,\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            cancelLabel: utils.string.t('app.no'),\r\n            confirmLabel: utils.string.t('app.yes'),\r\n            submitHandler: () => {\r\n              handleSetClaimTaskSelection(claim);\r\n            },\r\n            cancelHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <ClaimsTabTableView\r\n      claims={claims || []}\r\n      claimsSelected={claimsTabRowSelected}\r\n      cols={cols}\r\n      columnProps={columnProps}\r\n      sort={sort}\r\n      pagination={pagination}\r\n      handlers={{\r\n        bulkAssignClaims: handlers.bulkAssignClaims,\r\n        clickClaim,\r\n        handleCreateAdHocTaskModal,\r\n        handleCreateRFIModal,\r\n        handleReassignClaim,\r\n        handleSetClaimPriority,\r\n        handleReturnClaimToTeamQueue,\r\n        handleReOpenClaim,\r\n        selectClaim,\r\n        sort: handlers.sort,\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}