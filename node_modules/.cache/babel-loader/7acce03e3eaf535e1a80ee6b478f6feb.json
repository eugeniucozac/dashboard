{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar SumTotalValues = function SumTotalValues(_ref) {\n  var field = _ref.field,\n      item = _ref.item,\n      index = _ref.index,\n      formProps = _ref.formProps;\n  var watchFields = item.valueFields.map(function (fieldItem) {\n    return \"\".concat(field, \"[\").concat(index, \"].\").concat(fieldItem);\n  });\n  var watchValues = formProps === null || formProps === void 0 ? void 0 : formProps.watch(watchFields);\n  var result = Object.values(watchValues).reduce(function (a, b) {\n    return Number(a) + Number(b);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: result ? \"\".concat(result, \" %\") : ''\n  }, void 0, false);\n};\n\n_c = SumTotalValues;\nexport default SumTotalValues;\n\nvar _c;\n\n$RefreshReg$(_c, \"SumTotalValues\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/FormDataGrid/SumTotalValues.js"],"names":["SumTotalValues","field","item","index","formProps","watchFields","valueFields","map","fieldItem","watchValues","watch","result","Object","values","reduce","a","b","Number"],"mappings":";;;AAAA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,OAAuC;AAAA,MAApCC,KAAoC,QAApCA,KAAoC;AAAA,MAA7BC,IAA6B,QAA7BA,IAA6B;AAAA,MAAvBC,KAAuB,QAAvBA,KAAuB;AAAA,MAAhBC,SAAgB,QAAhBA,SAAgB;AAC5D,MAAMC,WAAW,GAAGH,IAAI,CAACI,WAAL,CAAiBC,GAAjB,CAAqB,UAACC,SAAD;AAAA,qBAAkBP,KAAlB,cAA2BE,KAA3B,eAAqCK,SAArC;AAAA,GAArB,CAApB;AACA,MAAMC,WAAW,GAAGL,SAAH,aAAGA,SAAH,uBAAGA,SAAS,CAAEM,KAAX,CAAiBL,WAAjB,CAApB;AACA,MAAMM,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAcJ,WAAd,EAA2BK,MAA3B,CAAkC,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUC,MAAM,CAACF,CAAD,CAAN,GAAYE,MAAM,CAACD,CAAD,CAA5B;AAAA,GAAlC,CAAf;AAEA,sBAAO;AAAA,cAAGL,MAAM,aAAMA,MAAN,UAAmB;AAA5B,mBAAP;AACD,CAND;;KAAMX,c;AAQN,eAAeA,cAAf","sourcesContent":["const SumTotalValues = ({ field, item, index, formProps }) => {\r\n  const watchFields = item.valueFields.map((fieldItem) => `${field}[${index}].${fieldItem}`);\r\n  const watchValues = formProps?.watch(watchFields);\r\n  const result = Object.values(watchValues).reduce((a, b) => Number(a) + Number(b));\r\n\r\n  return <>{result ? `${result} %` : ''}</>;\r\n};\r\n\r\nexport default SumTotalValues;\r\n"]},"metadata":{},"sourceType":"module"}