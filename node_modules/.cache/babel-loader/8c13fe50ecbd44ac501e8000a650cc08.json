{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\components\\\\DmsTable\\\\DmsTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { firstBy } from 'thenby'; // app\n\nimport { DmsTableView } from './DmsTable.view';\nimport * as utils from 'utils';\nimport { showModal, hideModal, unlinkDmsViewDocuments, viewDocumentsDownload, viewDocumentsDelete, setDmsContext, viewDocumentsMultiDownload, selectContextSubType, getDmsEditMetadata, getDmsMetaData, addLoader, selectDmsFileViewGridDataLoader, selectUserRole, getViewTableDocuments, selectCaseDetails, enqueueNotification } from 'stores';\nimport * as constants from 'consts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nDmsTable.propTypes = {\n  columnsData: PropTypes.array.isRequired,\n  context: PropTypes.oneOf(['Claim', 'Loss', 'Policy', 'Task', 'Case']).isRequired,\n  searchParamsAfterUpload: PropTypes.shape({\n    referenceId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n    sectionType: PropTypes.string.isRequired\n  }),\n  referenceId: PropTypes.string.isRequired,\n  sourceId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  documentTypeKey: PropTypes.oneOf(Object.values(constants.DMS_DOCUMENT_TYPE_SECTION_KEYS)),\n  showHeader: PropTypes.bool,\n  canUpload: PropTypes.bool,\n  canSearch: PropTypes.bool,\n  canUnlink: PropTypes.bool,\n  canDelete: PropTypes.bool,\n  canMultiSelect: PropTypes.bool,\n  canEditMetaData: PropTypes.bool,\n  handlers: PropTypes.shape({\n    onUnlinkorDeleteSuccess: PropTypes.func,\n    onSelectFile: PropTypes.func,\n    onClosingUploadModal: PropTypes.func\n  }),\n  isClaims: PropTypes.bool,\n  isClaimsUploadDisabled: PropTypes.bool,\n  isDmsDocumentMenuDisabled: PropTypes.bool,\n  claimsUploadWarningMsg: PropTypes.string,\n  claimsSearchDocumentsTxt: PropTypes.string,\n  parentLossRef: PropTypes.string\n};\nDmsTable.defaultProps = {\n  documentTypeKey: constants.DMS_DOCUMENT_TYPE_SECTION_KEYS.policy,\n  showHeader: true,\n  canUpload: true,\n  canSearch: true,\n  canUnlink: true,\n  canDelete: true,\n  canMultiSelect: true,\n  canEditMetaData: true,\n  canLinkToLossAndClaim: false,\n  isClaims: false,\n  isClaimsUploadDisabled: false,\n  isDmsDocumentMenuDisabled: false\n};\nexport default function DmsTable(_ref) {\n  _s();\n\n  var _utils$dms, _utils$dms2, _utils$dmsFormatter;\n\n  var columnsData = _ref.columnsData,\n      context = _ref.context,\n      searchParamsAfterUpload = _ref.searchParamsAfterUpload,\n      referenceId = _ref.referenceId,\n      sourceId = _ref.sourceId,\n      documentTypeKey = _ref.documentTypeKey,\n      showHeader = _ref.showHeader,\n      canUpload = _ref.canUpload,\n      canSearch = _ref.canSearch,\n      canUnlink = _ref.canUnlink,\n      canDelete = _ref.canDelete,\n      canMultiSelect = _ref.canMultiSelect,\n      canEditMetaData = _ref.canEditMetaData,\n      canLinkToLossAndClaim = _ref.canLinkToLossAndClaim,\n      handlers = _ref.handlers,\n      isClaimsFNOL = _ref.isClaims,\n      isClaimsUploadDisabled = _ref.isClaimsUploadDisabled,\n      isDmsDocumentMenuDisabled = _ref.isDmsDocumentMenuDisabled,\n      claimsUploadWarningMsg = _ref.claimsUploadWarningMsg,\n      claimsSearchDocumentsTxt = _ref.claimsSearchDocumentsTxt,\n      parentLossRef = _ref.parentLossRef;\n  var dispatch = useDispatch();\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      search = _useState2[0],\n      setSearch = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      resetKey = _useState4[0],\n      setResetKey = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      originalTableData = _useState6[0],\n      setOriginalTableData = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      filteredTableData = _useState8[0],\n      setFilteredTableData = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      searchIndex = _useState10[0],\n      setSearchIndex = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      isMultiSelect = _useState12[0],\n      setIsMultiSelect = _useState12[1];\n\n  var _useState13 = useState([]),\n      _useState14 = _slicedToArray(_useState13, 2),\n      selectedDocs = _useState14[0],\n      setSelectedDocs = _useState14[1];\n\n  var DmsFileViewGridDataLoading = useSelector(selectDmsFileViewGridDataLoader);\n  var contextSubType = useSelector(selectContextSubType);\n  var currentUser = useSelector(selectUserRole);\n  var ppCaseDetails = useSelector(selectCaseDetails); // TODO will be later coming as props\n\n  var xbInstanceId = sourceId ? sourceId : constants.DMS_CLAIM_SOURCE_ID;\n\n  var _useState15 = useState(DmsFileViewGridDataLoading),\n      _useState16 = _slicedToArray(_useState15, 2),\n      isDmsFileViewGridDataLoading = _useState16[0],\n      setIsDmsFileViewGridDataLoading = _useState16[1];\n\n  useEffect(function () {\n    setIsDmsFileViewGridDataLoading(DmsFileViewGridDataLoading);\n  }, [DmsFileViewGridDataLoading]);\n  var isWorkBasketOrAllCases = (ppCaseDetails === null || ppCaseDetails === void 0 ? void 0 : ppCaseDetails.taskView) === constants.WORKBASKET || (ppCaseDetails === null || ppCaseDetails === void 0 ? void 0 : ppCaseDetails.taskView) === constants.ALL_CASES;\n  var isSeniorManager = utils.generic.isValidArray(currentUser, true) && currentUser.some(function (item) {\n    return [constants.SENIOR_MANAGER.toLowerCase()].includes(item.name.toLowerCase());\n  });\n  useEffect(function () {\n    var tableDataString = function tableDataString(data, allValues) {\n      if (!allValues) allValues = [];\n\n      for (var key in data) {\n        if (typeof data[key] === 'object') tableDataString(data[key], allValues);else allValues.push(\"\".concat(data[key], \"' '\"));\n      }\n\n      return allValues;\n    };\n\n    var setInitialTableData = function setInitialTableData() {\n      setOriginalTableData(columnsData);\n      setFilteredTableData(columnsData);\n      var searchInd = columnsData === null || columnsData === void 0 ? void 0 : columnsData.map(function (data) {\n        var allValues = tableDataString(data);\n        return {\n          allValues: allValues.toString()\n        };\n      });\n      setSearchIndex(searchInd);\n    };\n\n    setInitialTableData();\n  }, [columnsData]);\n  useEffect(function () {\n    if (search) {\n      var newFilteredTableData = searchIndex === null || searchIndex === void 0 ? void 0 : searchIndex.map(function (data, index) {\n        var _data$allValues;\n\n        if ((data === null || data === void 0 ? void 0 : (_data$allValues = data.allValues) === null || _data$allValues === void 0 ? void 0 : _data$allValues.toLowerCase().indexOf(search.toLowerCase())) >= 0) return originalTableData[index];\n        return null;\n      });\n      setFilteredTableData(newFilteredTableData === null || newFilteredTableData === void 0 ? void 0 : newFilteredTableData.filter(function (data) {\n        if (data) return true;\n        return false;\n      }));\n    } else setFilteredTableData(originalTableData);\n  }, [search, originalTableData, searchIndex]);\n  var isDmsFromPiRiskRef = [constants.DMS_DOCUMENT_TYPE_SECTION_KEYS.piEndorsement, constants.DMS_DOCUMENT_TYPE_SECTION_KEYS.piFABorder, constants.DMS_DOCUMENT_TYPE_SECTION_KEYS.piClosingFdo].includes(documentTypeKey);\n  var isClaims = (utils === null || utils === void 0 ? void 0 : (_utils$dms = utils.dms) === null || _utils$dms === void 0 ? void 0 : _utils$dms.hasOwnProperty('checkIfClaimsScreenContext')) ? utils === null || utils === void 0 ? void 0 : (_utils$dms2 = utils.dms) === null || _utils$dms2 === void 0 ? void 0 : _utils$dms2.checkIfClaimsScreenContext(context) : false;\n  var cols = [{\n    id: 'multiSelect',\n    visible: true\n  }].concat(_toConsumableArray(!isDmsFromPiRiskRef ? [{\n    id: 'folderName',\n    label: utils.string.t('dms.view.columns.folderName'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    }\n  }] : []), [{\n    id: 'documentName',\n    label: utils.string.t('dms.view.columns.documentName'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    }\n  }, {\n    id: 'documentSource',\n    label: utils.string.t('dms.view.columns.documentSource'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    }\n  }], _toConsumableArray(!isDmsFromPiRiskRef && !isClaimsFNOL ? [{\n    id: 'hDriveFolders',\n    label: utils.string.t('dms.view.columns.hDriveFolders'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    }\n  }] : []), [{\n    id: 'documentTypeDescription',\n    label: utils.string.t('dms.view.columns.documentType'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    }\n  }, {\n    id: 'docClassification',\n    label: utils.string.t('dms.view.columns.documentClassification'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    }\n  }, {\n    id: 'updatedDate',\n    label: utils.string.t('dms.view.columns.uploadedDate'),\n    sort: {\n      type: 'date',\n      direction: 'asc'\n    }\n  }, {\n    id: 'createdByName',\n    label: utils.string.t('dms.view.columns.uploadedBy'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    }\n  }, {\n    id: 'documentVersion',\n    label: utils.string.t('dms.view.columns.documentVersion'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    }\n  }], _toConsumableArray(!isClaimsFNOL || !isClaims ? [{\n    id: 'createdDate',\n    label: utils.string.t('dms.view.columns.creationDate'),\n    sort: {\n      type: 'date',\n      direction: 'asc'\n    },\n    visible: true\n  }] : []), [{\n    id: 'actions',\n    menu: true,\n    visible: true\n  }]);\n\n  var resetToDefaultValues = function resetToDefaultValues() {\n    handlers.onUnlinkorDeleteSuccess();\n    setSelectedDocs([]);\n    setIsMultiSelect(false);\n  };\n\n  var confirmDocumentUnlink = function confirmDocumentUnlink(docs) {\n    var requestParams = docs === null || docs === void 0 ? void 0 : docs.map(function (d) {\n      return {\n        documentId: d.documentId,\n        referenceId: referenceId,\n        sectionType: context\n      };\n    });\n    var requestParamsLength = requestParams === null || requestParams === void 0 ? void 0 : requestParams.length;\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        fullWidth: true,\n        title: utils.string.t('dms.view.unlinkDocument.title'),\n        maxWidth: 'xs',\n        componentProps: {\n          confirmLabel: utils.string.t('dms.view.unlinkDocument.confirmLabel'),\n          confirmMessage: requestParamsLength === 1 ? utils.string.t('dms.view.unlinkDocument.confirmMessage') : utils.string.t('dms.view.unlinkDocument.confirmMessageForMulti', {\n            count: requestParamsLength\n          }),\n          submitHandler: function submitHandler() {\n            return dispatch(unlinkDmsViewDocuments(requestParams)).then(function (response) {\n              if ((response === null || response === void 0 ? void 0 : response.status) === constants.API_RESPONSE_OK) {\n                resetToDefaultValues();\n              }\n            });\n          }\n        }\n      }\n    }));\n  };\n\n  var confirmDocumentDelete = function confirmDocumentDelete(docs) {\n    // GXB sharepoint sourced docs cannot be deleted\n    var hasGxbDocs = selectedDocs.some(function (doc) {\n      return isGxbDocument(doc);\n    });\n    var documentIds = hasGxbDocs ? docs === null || docs === void 0 ? void 0 : docs.filter(function (doc) {\n      return !isGxbDocument(doc);\n    }).map(function (doc) {\n      return doc.documentId;\n    }) : docs === null || docs === void 0 ? void 0 : docs.map(function (doc) {\n      return doc.documentId;\n    });\n    var documentIdsLength = documentIds === null || documentIds === void 0 ? void 0 : documentIds.length;\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        fullWidth: true,\n        title: utils.string.t('dms.view.deleteDocument.title'),\n        maxWidth: 'xs',\n        componentProps: {\n          confirmLabel: utils.string.t('dms.view.deleteDocument.confirmLabel'),\n          confirmMessage: documentIdsLength === 1 ? utils.string.t('dms.view.deleteDocument.confirmMessage') : utils.string.t('dms.view.deleteDocument.confirmMessageForMulti', {\n            count: documentIdsLength\n          }),\n          warningMessage: hasGxbDocs ? utils.string.t('dms.view.deleteDocument.gxbDocsDeleteWarning') : '',\n          submitHandler: function submitHandler() {\n            return dispatch(viewDocumentsDelete(documentIds)).then(function (response) {\n              if ((response === null || response === void 0 ? void 0 : response.status) === constants.API_RESPONSE_OK) {\n                resetToDefaultValues();\n              }\n            });\n          }\n        }\n      }\n    }));\n  };\n\n  var confirmDocumentLinkToLossAndClaim = function confirmDocumentLinkToLossAndClaim(docData) {\n    dispatch(showModal({\n      component: 'DMS_LINK_TO_LOSS_AND_CLAIM',\n      props: {\n        fullWidth: true,\n        title: utils.string.t('dms.view.linkToLossAndClaim.title'),\n        maxWidth: 'xs',\n        componentProps: {\n          docData: docData,\n          resetToDefaultValues: resetToDefaultValues\n        }\n      }\n    }));\n  };\n\n  var showVersionHistoryModal = function showVersionHistoryModal(docData) {\n    dispatch(showModal({\n      component: 'DMS_VERSION_HISTORY',\n      props: {\n        fullWidth: true,\n        title: utils.string.t('dms.view.versionHistory.title'),\n        maxWidth: 'xs',\n        componentProps: {\n          docData: docData\n        }\n      }\n    }));\n  };\n\n  var launchEditMetadataModel = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(doc) {\n      var refinedReferenceId;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              refinedReferenceId = getRefIdForContext();\n              dispatch(setDmsContext(context));\n              _context.next = 4;\n              return dispatch(getDmsMetaData(context, xbInstanceId, referenceId));\n\n            case 4:\n              _context.next = 6;\n              return dispatch(getDmsEditMetadata(doc === null || doc === void 0 ? void 0 : doc.documentId, doc === null || doc === void 0 ? void 0 : doc.docClassification)).then(function (res) {\n                if ((res === null || res === void 0 ? void 0 : res.status) === constants.API_RESPONSE_OK) {\n                  dispatch(showModal({\n                    component: 'DMS_EDIT_META_DATA',\n                    props: {\n                      fullWidth: true,\n                      title: utils.string.t('dms.view.editMetadata.title'),\n                      maxWidth: 'xl',\n                      componentProps: {\n                        docData: doc,\n                        context: context,\n                        referenceId: refinedReferenceId,\n                        selectedSourceId: sourceId,\n                        documentTypeKey: documentTypeKey,\n                        searchParamsAfterUpload: searchParamsAfterUpload,\n                        cancelHandler: function cancelHandler() {\n                          dispatch(hideModal('DMS_EDIT_META_DATA'));\n                        }\n                      }\n                    }\n                  }));\n                }\n              });\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function launchEditMetadataModel(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var popoverActions = [{\n    id: 'download',\n    label: utils.string.t('dms.view.popOverMenuItems.download'),\n    callback: function callback(_ref3) {\n      var doc = _ref3.doc;\n      return dispatch(viewDocumentsDownload(doc));\n    }\n  }].concat(_toConsumableArray(canUnlink ? [{\n    id: 'unlink',\n    label: utils.string.t('dms.view.popOverMenuItems.unlink'),\n    disabled: isWorkBasketOrAllCases,\n    callback: function callback(_ref4) {\n      var doc = _ref4.doc;\n      return confirmDocumentUnlink([doc]);\n    }\n  }] : []), _toConsumableArray(canDelete ? [{\n    id: 'delete',\n    label: utils.string.t('dms.view.popOverMenuItems.delete'),\n    disabled: isWorkBasketOrAllCases,\n    callback: function callback(_ref5) {\n      var doc = _ref5.doc;\n      return confirmDocumentDelete([doc]);\n    }\n  }] : []), [{\n    id: 'versionHistory',\n    label: utils.string.t('dms.view.popOverMenuItems.versionHistory'),\n    callback: function callback(_ref6) {\n      var doc = _ref6.doc;\n      return showVersionHistoryModal(doc);\n    }\n  }], _toConsumableArray(canEditMetaData ? [{\n    id: 'editMetaData',\n    label: utils.string.t('dms.view.popOverMenuItems.editMetadata'),\n    disabled: isWorkBasketOrAllCases,\n    callback: function callback(_ref7) {\n      var doc = _ref7.doc;\n      return launchEditMetadataModel(doc);\n    }\n  }] : []), _toConsumableArray(canLinkToLossAndClaim ? [{\n    id: 'LinkTo',\n    label: utils.string.t('dms.view.popOverMenuItems.linkToLossAndClaim'),\n    callback: function callback(_ref8) {\n      var doc = _ref8.doc;\n      return confirmDocumentLinkToLossAndClaim([doc]);\n    }\n  }] : []));\n\n  var resetSearch = function resetSearch() {\n    setResetKey(new Date().getTime());\n    setSearch('');\n  };\n\n  var submitSearch = function submitSearch(query) {\n    setSearch(query);\n  };\n\n  var handleSort = function handleSort(by, dir) {\n    originalTableData === null || originalTableData === void 0 ? void 0 : originalTableData.sort(firstBy(utils.sort.array('lexical', by, dir)));\n  };\n\n  var launchDmsUpload = function launchDmsUpload() {\n    return function (files) {\n      dispatch(addLoader('DmsUploadFiles'));\n      var refinedReferenceId = getRefIdForContext();\n      dispatch(showModal({\n        component: 'DMS_UPLOAD_FILES',\n        props: {\n          fullWidth: true,\n          title: utils.string.t('dms.upload.modalItems.uploadDocuments'),\n          maxWidth: 'lg',\n          componentProps: {\n            files: files,\n            context: context,\n            referenceId: refinedReferenceId,\n            sourceId: sourceId,\n            documentTypeKey: documentTypeKey,\n            searchParamsAfterUpload: searchParamsAfterUpload,\n            confirmLabel: utils.string.t('app.ok'),\n            cancelLabel: utils.string.t('app.goBack'),\n            confirmMessage: utils.string.t('processingInstructions.documentsWillNotBeSaved'),\n            buttonColors: {\n              confirm: 'secondary',\n              cancel: 'primary'\n            },\n            onClosingUploadModal: function onClosingUploadModal() {\n              return handleUploadModalClose();\n            }\n          }\n        }\n      }));\n    };\n  };\n\n  var handleUploadModalClose = function handleUploadModalClose() {\n    // Premium Processing Case Details\n    var policyRef = ppCaseDetails === null || ppCaseDetails === void 0 ? void 0 : ppCaseDetails.policyRef;\n    var instructionId = ppCaseDetails === null || ppCaseDetails === void 0 ? void 0 : ppCaseDetails.instructionId;\n\n    if (!utils.dmsFormatter.isDmsFromPiInstruction(documentTypeKey)) {\n      // Refresh DmsTable Data once Upload is done\n      dispatch(getViewTableDocuments(_objectSpread({}, searchParamsAfterUpload ? searchParamsAfterUpload : _objectSpread({\n        referenceId: referenceId,\n        sectionType: context,\n        documentTypeKey: documentTypeKey,\n        parentLossRef: parentLossRef\n      }, policyRef && instructionId && {\n        policyRef: policyRef,\n        instructionId: instructionId\n      }))));\n    }\n  };\n\n  var handleCheckboxClick = function handleCheckboxClick(e, doc) {\n    e.stopPropagation();\n    var newlySelectedDocs = [].concat(_toConsumableArray(selectedDocs), [doc]);\n\n    if (selectedDocs === null || selectedDocs === void 0 ? void 0 : selectedDocs.find(function (docs) {\n      return docs.documentId === doc.documentId;\n    })) {\n      newlySelectedDocs = newlySelectedDocs.filter(function (selectedDoc) {\n        return selectedDoc.documentId !== doc.documentId;\n      });\n    }\n\n    if (utils.generic.isFunction(handlers === null || handlers === void 0 ? void 0 : handlers.onSelectFile)) {\n      handlers.onSelectFile(newlySelectedDocs);\n    }\n\n    setSelectedDocs(newlySelectedDocs);\n  };\n\n  var checkLinkedToMultipleContexts = function checkLinkedToMultipleContexts(docList) {\n    var linkedDocList = [];\n\n    if (utils.generic.isValidArray(docList, true)) {\n      var selectedDocList = _toConsumableArray(docList);\n\n      selectedDocList.forEach(function (doc) {\n        if (doc === null || doc === void 0 ? void 0 : doc.isLinkedToMultipleContexts) {\n          linkedDocList.push(doc.documentName);\n        }\n      });\n    }\n\n    return linkedDocList;\n  };\n\n  var showCheckboxesClick = function showCheckboxesClick(event) {\n    var _event$target;\n\n    setIsMultiSelect(event === null || event === void 0 ? void 0 : (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.checked);\n  };\n\n  var handleMultipleDownload = function handleMultipleDownload() {\n    var selectedDocIds = selectedDocs === null || selectedDocs === void 0 ? void 0 : selectedDocs.map(function (docId) {\n      return docId.documentId;\n    });\n\n    if ((selectedDocs === null || selectedDocs === void 0 ? void 0 : selectedDocs.length) !== 1) {\n      dispatch(viewDocumentsMultiDownload(selectedDocIds));\n      return;\n    }\n\n    dispatch(viewDocumentsDownload(selectedDocs === null || selectedDocs === void 0 ? void 0 : selectedDocs[0]));\n  };\n\n  var handleMutipleUnlinking = function handleMutipleUnlinking() {\n    confirmDocumentUnlink(selectedDocs);\n  };\n\n  var handleMutipleDelete = function handleMutipleDelete() {\n    var linkedDocList = checkLinkedToMultipleContexts(selectedDocs);\n\n    if ((linkedDocList === null || linkedDocList === void 0 ? void 0 : linkedDocList.length) > 0) {\n      var errorTxt = utils.string.t('dms.view.deleteDocument.deleteWarning') + '\\n' + linkedDocList.join(', ');\n      dispatch(enqueueNotification(errorTxt, 'error'));\n    }\n\n    confirmDocumentDelete(selectedDocs);\n  };\n\n  var handleMutipleLinkToLossAndClaim = function handleMutipleLinkToLossAndClaim() {\n    confirmDocumentLinkToLossAndClaim(selectedDocs);\n  };\n\n  var isGxbDocument = function isGxbDocument(doc) {\n    return doc.srcApplication === constants.DMS_SHAREPATH_SOURCES.gxb;\n  };\n\n  var getRefIdForContext = function getRefIdForContext() {\n    var type = contextSubType.type,\n        caseIncidentNotesID = contextSubType.caseIncidentNotesID,\n        refId = contextSubType.refId;\n\n    if (type === constants.DMS_TASK_CONTEXT_TYPE_RFI_RESPONSE) {\n      return caseIncidentNotesID ? refId + '-' + caseIncidentNotesID : refId;\n    } else if (type === constants.DMS_TASK_CONTEXT_TYPE_RFI || type === constants.DMS_TASK_CONTEXT_TYPE_ADHOC) {\n      return refId;\n    } else {\n      return referenceId;\n    }\n  };\n\n  var docClassification = utils === null || utils === void 0 ? void 0 : (_utils$dmsFormatter = utils.dmsFormatter) === null || _utils$dmsFormatter === void 0 ? void 0 : _utils$dmsFormatter.getDocumentClassificationList();\n  var docClassificationList = new Map(docClassification === null || docClassification === void 0 ? void 0 : docClassification.map(function (item) {\n    return [item === null || item === void 0 ? void 0 : item.id, item === null || item === void 0 ? void 0 : item.value];\n  }));\n\n  var getDocClassification = function getDocClassification(value) {\n    return docClassificationList === null || docClassificationList === void 0 ? void 0 : docClassificationList.get(Number(value));\n  };\n\n  var viewDocLauncher = function viewDocLauncher(e, doc) {\n    e.preventDefault();\n    var documentId = doc.documentId,\n        documentName = doc.documentName;\n    utils.dms.dmsDocumentViewLauncher(documentId, documentName);\n  }; // abort\n\n\n  if (!columnsData) return null;\n  return /*#__PURE__*/_jsxDEV(DmsTableView, {\n    cols: cols,\n    documents: filteredTableData,\n    popoverActions: popoverActions,\n    search: search,\n    resetKey: resetKey,\n    isMultiSelect: isMultiSelect,\n    showHeader: showHeader,\n    canUpload: canUpload,\n    canSearch: canSearch,\n    canUnlink: canUnlink,\n    canDelete: canDelete,\n    canLinkToLossAndClaim: canLinkToLossAndClaim,\n    canMultiSelect: canMultiSelect,\n    selectedDocs: selectedDocs,\n    isDmsFromPiRiskRef: isDmsFromPiRiskRef,\n    isWorkBasketOrAllCases: isWorkBasketOrAllCases,\n    isDmsFileViewGridDataLoading: isDmsFileViewGridDataLoading,\n    isSeniorManager: isSeniorManager,\n    handlers: {\n      resetSearch: resetSearch,\n      submitSearch: submitSearch,\n      handleSort: handleSort,\n      uploadModal: launchDmsUpload,\n      handleCheckboxClick: handleCheckboxClick,\n      showCheckboxesClick: showCheckboxesClick,\n      handleMultipleDownload: handleMultipleDownload,\n      handleMutipleUnlinking: handleMutipleUnlinking,\n      handleMutipleDelete: handleMutipleDelete,\n      handleMutipleLinkToLossAndClaim: handleMutipleLinkToLossAndClaim,\n      viewDocLauncher: viewDocLauncher\n    },\n    isClaims: isClaims,\n    isClaimsFNOL: isClaimsFNOL,\n    isClaimsUploadDisabled: isClaimsUploadDisabled,\n    isDmsDocumentMenuDisabled: isDmsDocumentMenuDisabled,\n    claimsUploadWarningMsg: claimsUploadWarningMsg,\n    claimsSearchDocumentsTxt: claimsSearchDocumentsTxt,\n    getDocClassification: getDocClassification\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 576,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DmsTable, \"CwWPogv5CH/hakP5PxeEgQ902/Y=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = DmsTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"DmsTable\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/DmsTable/DmsTable.js"],"names":["React","useState","useEffect","useDispatch","useSelector","PropTypes","firstBy","DmsTableView","utils","showModal","hideModal","unlinkDmsViewDocuments","viewDocumentsDownload","viewDocumentsDelete","setDmsContext","viewDocumentsMultiDownload","selectContextSubType","getDmsEditMetadata","getDmsMetaData","addLoader","selectDmsFileViewGridDataLoader","selectUserRole","getViewTableDocuments","selectCaseDetails","enqueueNotification","constants","DmsTable","propTypes","columnsData","array","isRequired","context","oneOf","searchParamsAfterUpload","shape","referenceId","oneOfType","number","string","sectionType","sourceId","documentTypeKey","Object","values","DMS_DOCUMENT_TYPE_SECTION_KEYS","showHeader","bool","canUpload","canSearch","canUnlink","canDelete","canMultiSelect","canEditMetaData","handlers","onUnlinkorDeleteSuccess","func","onSelectFile","onClosingUploadModal","isClaims","isClaimsUploadDisabled","isDmsDocumentMenuDisabled","claimsUploadWarningMsg","claimsSearchDocumentsTxt","parentLossRef","defaultProps","policy","canLinkToLossAndClaim","isClaimsFNOL","dispatch","search","setSearch","resetKey","setResetKey","originalTableData","setOriginalTableData","filteredTableData","setFilteredTableData","searchIndex","setSearchIndex","isMultiSelect","setIsMultiSelect","selectedDocs","setSelectedDocs","DmsFileViewGridDataLoading","contextSubType","currentUser","ppCaseDetails","xbInstanceId","DMS_CLAIM_SOURCE_ID","isDmsFileViewGridDataLoading","setIsDmsFileViewGridDataLoading","isWorkBasketOrAllCases","taskView","WORKBASKET","ALL_CASES","isSeniorManager","generic","isValidArray","some","item","SENIOR_MANAGER","toLowerCase","includes","name","tableDataString","data","allValues","key","push","setInitialTableData","searchInd","map","toString","newFilteredTableData","index","indexOf","filter","isDmsFromPiRiskRef","piEndorsement","piFABorder","piClosingFdo","dms","hasOwnProperty","checkIfClaimsScreenContext","cols","id","visible","label","t","sort","type","direction","menu","resetToDefaultValues","confirmDocumentUnlink","docs","requestParams","d","documentId","requestParamsLength","length","component","props","fullWidth","title","maxWidth","componentProps","confirmLabel","confirmMessage","count","submitHandler","then","response","status","API_RESPONSE_OK","confirmDocumentDelete","hasGxbDocs","doc","isGxbDocument","documentIds","documentIdsLength","warningMessage","confirmDocumentLinkToLossAndClaim","docData","showVersionHistoryModal","launchEditMetadataModel","refinedReferenceId","getRefIdForContext","docClassification","res","selectedSourceId","cancelHandler","popoverActions","callback","disabled","resetSearch","Date","getTime","submitSearch","query","handleSort","by","dir","launchDmsUpload","files","cancelLabel","buttonColors","confirm","cancel","handleUploadModalClose","policyRef","instructionId","dmsFormatter","isDmsFromPiInstruction","handleCheckboxClick","e","stopPropagation","newlySelectedDocs","find","selectedDoc","isFunction","checkLinkedToMultipleContexts","docList","linkedDocList","selectedDocList","forEach","isLinkedToMultipleContexts","documentName","showCheckboxesClick","event","target","checked","handleMultipleDownload","selectedDocIds","docId","handleMutipleUnlinking","handleMutipleDelete","errorTxt","join","handleMutipleLinkToLossAndClaim","srcApplication","DMS_SHAREPATH_SOURCES","gxb","caseIncidentNotesID","refId","DMS_TASK_CONTEXT_TYPE_RFI_RESPONSE","DMS_TASK_CONTEXT_TYPE_RFI","DMS_TASK_CONTEXT_TYPE_ADHOC","getDocumentClassificationList","docClassificationList","Map","value","getDocClassification","get","Number","viewDocLauncher","preventDefault","dmsDocumentViewLauncher","uploadModal"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { firstBy } from 'thenby';\r\n\r\n// app\r\nimport { DmsTableView } from './DmsTable.view';\r\nimport * as utils from 'utils';\r\nimport {\r\n  showModal,\r\n  hideModal,\r\n  unlinkDmsViewDocuments,\r\n  viewDocumentsDownload,\r\n  viewDocumentsDelete,\r\n  setDmsContext,\r\n  viewDocumentsMultiDownload,\r\n  selectContextSubType,\r\n  getDmsEditMetadata,\r\n  getDmsMetaData,\r\n  addLoader,\r\n  selectDmsFileViewGridDataLoader,\r\n  selectUserRole,\r\n  getViewTableDocuments,\r\n  selectCaseDetails,\r\n  enqueueNotification\r\n} from 'stores';\r\nimport * as constants from 'consts';\r\n\r\nDmsTable.propTypes = {\r\n  columnsData: PropTypes.array.isRequired,\r\n  context: PropTypes.oneOf(['Claim', 'Loss', 'Policy', 'Task', 'Case']).isRequired,\r\n  searchParamsAfterUpload: PropTypes.shape({\r\n    referenceId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\r\n    sectionType: PropTypes.string.isRequired,\r\n  }),\r\n  referenceId: PropTypes.string.isRequired,\r\n  sourceId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n  documentTypeKey: PropTypes.oneOf(Object.values(constants.DMS_DOCUMENT_TYPE_SECTION_KEYS)),\r\n  showHeader: PropTypes.bool,\r\n  canUpload: PropTypes.bool,\r\n  canSearch: PropTypes.bool,\r\n  canUnlink: PropTypes.bool,\r\n  canDelete: PropTypes.bool,\r\n  canMultiSelect: PropTypes.bool,\r\n  canEditMetaData: PropTypes.bool,\r\n  handlers: PropTypes.shape({\r\n    onUnlinkorDeleteSuccess: PropTypes.func,\r\n    onSelectFile: PropTypes.func,\r\n    onClosingUploadModal: PropTypes.func,\r\n  }),\r\n  isClaims: PropTypes.bool,\r\n  isClaimsUploadDisabled: PropTypes.bool,\r\n  isDmsDocumentMenuDisabled: PropTypes.bool,\r\n  claimsUploadWarningMsg: PropTypes.string,\r\n  claimsSearchDocumentsTxt: PropTypes.string,\r\n  parentLossRef: PropTypes.string\r\n};\r\n\r\nDmsTable.defaultProps = {\r\n  documentTypeKey: constants.DMS_DOCUMENT_TYPE_SECTION_KEYS.policy,\r\n  showHeader: true,\r\n  canUpload: true,\r\n  canSearch: true,\r\n  canUnlink: true,\r\n  canDelete: true,\r\n  canMultiSelect: true,\r\n  canEditMetaData: true,\r\n  canLinkToLossAndClaim: false,\r\n  isClaims: false,\r\n  isClaimsUploadDisabled: false,\r\n  isDmsDocumentMenuDisabled: false,\r\n};\r\n\r\nexport default function DmsTable({\r\n  columnsData,\r\n  context,\r\n  searchParamsAfterUpload,\r\n  referenceId,\r\n  sourceId,\r\n  documentTypeKey,\r\n  showHeader,\r\n  canUpload,\r\n  canSearch,\r\n  canUnlink,\r\n  canDelete,\r\n  canMultiSelect,\r\n  canEditMetaData,\r\n  canLinkToLossAndClaim,\r\n  handlers,\r\n  isClaims: isClaimsFNOL,\r\n  isClaimsUploadDisabled,\r\n  isDmsDocumentMenuDisabled,\r\n  claimsUploadWarningMsg,\r\n  claimsSearchDocumentsTxt,\r\n  parentLossRef\r\n}) {\r\n  const dispatch = useDispatch();\r\n\r\n  const [search, setSearch] = useState('');\r\n  const [resetKey, setResetKey] = useState();\r\n  const [originalTableData, setOriginalTableData] = useState([]);\r\n  const [filteredTableData, setFilteredTableData] = useState([]);\r\n  const [searchIndex, setSearchIndex] = useState([]);\r\n  const [isMultiSelect, setIsMultiSelect] = useState(false);\r\n  const [selectedDocs, setSelectedDocs] = useState([]);\r\n  const DmsFileViewGridDataLoading = useSelector(selectDmsFileViewGridDataLoader);\r\n\r\n  const contextSubType = useSelector(selectContextSubType);\r\n  const currentUser = useSelector(selectUserRole);\r\n  const ppCaseDetails = useSelector(selectCaseDetails); // TODO will be later coming as props\r\n\r\n  const xbInstanceId = sourceId ? sourceId : constants.DMS_CLAIM_SOURCE_ID;\r\n  const [isDmsFileViewGridDataLoading, setIsDmsFileViewGridDataLoading] = useState(DmsFileViewGridDataLoading);\r\n\r\n  useEffect(() => {\r\n    setIsDmsFileViewGridDataLoading(DmsFileViewGridDataLoading);\r\n  }, [DmsFileViewGridDataLoading]);\r\n\r\n  const isWorkBasketOrAllCases = ppCaseDetails?.taskView === constants.WORKBASKET || ppCaseDetails?.taskView === constants.ALL_CASES;\r\n  const isSeniorManager =\r\n    utils.generic.isValidArray(currentUser, true) &&\r\n    currentUser.some((item) => [constants.SENIOR_MANAGER.toLowerCase()].includes(item.name.toLowerCase()));\r\n\r\n  useEffect(() => {\r\n    const tableDataString = (data, allValues) => {\r\n      if (!allValues) allValues = [];\r\n      for (const key in data) {\r\n        if (typeof data[key] === 'object') tableDataString(data[key], allValues);\r\n        else allValues.push(`${data[key]}' '`);\r\n      }\r\n      return allValues;\r\n    };\r\n\r\n    const setInitialTableData = () => {\r\n      setOriginalTableData(columnsData);\r\n      setFilteredTableData(columnsData);\r\n      const searchInd = columnsData?.map((data) => {\r\n        const allValues = tableDataString(data);\r\n        return { allValues: allValues.toString() };\r\n      });\r\n      setSearchIndex(searchInd);\r\n    };\r\n\r\n    setInitialTableData();\r\n  }, [columnsData]);\r\n\r\n  useEffect(() => {\r\n    if (search) {\r\n      const newFilteredTableData = searchIndex?.map((data, index) => {\r\n        if (data?.allValues?.toLowerCase().indexOf(search.toLowerCase()) >= 0) return originalTableData[index];\r\n        return null;\r\n      });\r\n      setFilteredTableData(\r\n        newFilteredTableData?.filter((data) => {\r\n          if (data) return true;\r\n          return false;\r\n        })\r\n      );\r\n    } else setFilteredTableData(originalTableData);\r\n  }, [search, originalTableData, searchIndex]);\r\n\r\n  const isDmsFromPiRiskRef = [\r\n    constants.DMS_DOCUMENT_TYPE_SECTION_KEYS.piEndorsement,\r\n    constants.DMS_DOCUMENT_TYPE_SECTION_KEYS.piFABorder,\r\n    constants.DMS_DOCUMENT_TYPE_SECTION_KEYS.piClosingFdo,\r\n  ].includes(documentTypeKey);\r\n\r\n  const isClaims = utils?.dms?.hasOwnProperty('checkIfClaimsScreenContext') ?\r\n    utils?.dms?.checkIfClaimsScreenContext(context) : false;\r\n\r\n  const cols = [\r\n    {\r\n      id: 'multiSelect',\r\n      visible: true,\r\n    },\r\n    ...(!isDmsFromPiRiskRef\r\n      ? [\r\n          {\r\n            id: 'folderName',\r\n            label: utils.string.t('dms.view.columns.folderName'),\r\n            sort: { type: 'lexical', direction: 'asc' },\r\n          },\r\n        ]\r\n      : []),\r\n    { id: 'documentName', label: utils.string.t('dms.view.columns.documentName'), sort: { type: 'lexical', direction: 'asc' } },\r\n    { id: 'documentSource', label: utils.string.t('dms.view.columns.documentSource'), sort: { type: 'lexical', direction: 'asc' } },\r\n    ...(!isDmsFromPiRiskRef && !isClaimsFNOL\r\n      ? [\r\n          {\r\n            id: 'hDriveFolders',\r\n            label: utils.string.t('dms.view.columns.hDriveFolders'),\r\n            sort: { type: 'lexical', direction: 'asc' },\r\n          },\r\n        ]\r\n      : []),\r\n    { id: 'documentTypeDescription', label: utils.string.t('dms.view.columns.documentType'), sort: { type: 'lexical', direction: 'asc' } },\r\n    {\r\n      id: 'docClassification',\r\n      label: utils.string.t('dms.view.columns.documentClassification'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n    },\r\n    { id: 'updatedDate', label: utils.string.t('dms.view.columns.uploadedDate'), sort: { type: 'date', direction: 'asc' } },\r\n    { id: 'createdByName', label: utils.string.t('dms.view.columns.uploadedBy'), sort: { type: 'lexical', direction: 'asc' } },\r\n    {\r\n      id: 'documentVersion',\r\n      label: utils.string.t('dms.view.columns.documentVersion'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n    },\r\n    ...((!isClaimsFNOL || !isClaims)\r\n      ? [\r\n          {\r\n            id: 'createdDate',\r\n            label: utils.string.t('dms.view.columns.creationDate'),\r\n            sort: { type: 'date', direction: 'asc' },\r\n            visible: true,\r\n          },\r\n        ]\r\n      : []),\r\n    { id: 'actions', menu: true, visible: true },\r\n  ];\r\n\r\n  const resetToDefaultValues = () => {\r\n    handlers.onUnlinkorDeleteSuccess();\r\n    setSelectedDocs([]);\r\n    setIsMultiSelect(false);\r\n  };\r\n\r\n  const confirmDocumentUnlink = (docs) => {\r\n    const requestParams = docs?.map((d) => {\r\n      return {\r\n        documentId: d.documentId,\r\n        referenceId: referenceId,\r\n        sectionType: context,\r\n      };\r\n    });\r\n    const requestParamsLength = requestParams?.length;\r\n\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          fullWidth: true,\r\n          title: utils.string.t('dms.view.unlinkDocument.title'),\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            confirmLabel: utils.string.t('dms.view.unlinkDocument.confirmLabel'),\r\n            confirmMessage:\r\n              requestParamsLength === 1\r\n                ? utils.string.t('dms.view.unlinkDocument.confirmMessage')\r\n                : utils.string.t('dms.view.unlinkDocument.confirmMessageForMulti', {\r\n                    count: requestParamsLength,\r\n                  }),\r\n            submitHandler: () =>\r\n              dispatch(unlinkDmsViewDocuments(requestParams)).then((response) => {\r\n                if (response?.status === constants.API_RESPONSE_OK) {\r\n                  resetToDefaultValues();\r\n                }\r\n              }),\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const confirmDocumentDelete = (docs) => {\r\n    // GXB sharepoint sourced docs cannot be deleted\r\n    const hasGxbDocs = selectedDocs.some((doc) => isGxbDocument(doc));\r\n\r\n    const documentIds = hasGxbDocs\r\n      ? docs?.filter((doc) => !isGxbDocument(doc)).map((doc) => doc.documentId)\r\n      : docs?.map((doc) => doc.documentId);\r\n    const documentIdsLength = documentIds?.length;\r\n\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          fullWidth: true,\r\n          title: utils.string.t('dms.view.deleteDocument.title'),\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            confirmLabel: utils.string.t('dms.view.deleteDocument.confirmLabel'),\r\n            confirmMessage:\r\n              documentIdsLength === 1\r\n                ? utils.string.t('dms.view.deleteDocument.confirmMessage')\r\n                : utils.string.t('dms.view.deleteDocument.confirmMessageForMulti', {\r\n                    count: documentIdsLength,\r\n                  }),\r\n            warningMessage: hasGxbDocs ? utils.string.t('dms.view.deleteDocument.gxbDocsDeleteWarning') : '',\r\n            submitHandler: () =>\r\n              dispatch(viewDocumentsDelete(documentIds)).then((response) => {\r\n                if (response?.status === constants.API_RESPONSE_OK) {\r\n                  resetToDefaultValues();\r\n                }\r\n              }),\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const confirmDocumentLinkToLossAndClaim = (docData) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'DMS_LINK_TO_LOSS_AND_CLAIM',\r\n        props: {\r\n          fullWidth: true,\r\n          title: utils.string.t('dms.view.linkToLossAndClaim.title'),\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            docData: docData,\r\n            resetToDefaultValues,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const showVersionHistoryModal = (docData) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'DMS_VERSION_HISTORY',\r\n        props: {\r\n          fullWidth: true,\r\n          title: utils.string.t('dms.view.versionHistory.title'),\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            docData: docData,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const launchEditMetadataModel = async (doc) => {\r\n    const refinedReferenceId = getRefIdForContext();\r\n\r\n    dispatch(setDmsContext(context));\r\n    await dispatch(getDmsMetaData(context, xbInstanceId, referenceId));\r\n    await dispatch(getDmsEditMetadata(doc?.documentId, doc?.docClassification)).then((res) => {\r\n      if (res?.status === constants.API_RESPONSE_OK) {\r\n        dispatch(\r\n          showModal({\r\n            component: 'DMS_EDIT_META_DATA',\r\n            props: {\r\n              fullWidth: true,\r\n              title: utils.string.t('dms.view.editMetadata.title'),\r\n              maxWidth: 'xl',\r\n              componentProps: {\r\n                docData: doc,\r\n                context,\r\n                referenceId: refinedReferenceId,\r\n                selectedSourceId: sourceId,\r\n                documentTypeKey: documentTypeKey,\r\n                searchParamsAfterUpload,\r\n                cancelHandler: () => {\r\n                  dispatch(hideModal('DMS_EDIT_META_DATA'));\r\n                },\r\n              },\r\n            },\r\n          })\r\n        );\r\n      }\r\n    });\r\n  };\r\n  const popoverActions = [\r\n    {\r\n      id: 'download',\r\n      label: utils.string.t('dms.view.popOverMenuItems.download'),\r\n      callback: ({ doc }) => dispatch(viewDocumentsDownload(doc)),\r\n    },\r\n    ...(canUnlink\r\n      ? [\r\n          {\r\n            id: 'unlink',\r\n            label: utils.string.t('dms.view.popOverMenuItems.unlink'),\r\n            disabled: isWorkBasketOrAllCases,\r\n            callback: ({ doc }) => confirmDocumentUnlink([doc]),\r\n          },\r\n        ]\r\n      : []),\r\n    ...(canDelete\r\n      ? [\r\n          {\r\n            id: 'delete',\r\n            label: utils.string.t('dms.view.popOverMenuItems.delete'),\r\n            disabled: isWorkBasketOrAllCases,\r\n            callback: ({ doc }) => confirmDocumentDelete([doc]),\r\n          },\r\n        ]\r\n      : []),\r\n    {\r\n      id: 'versionHistory',\r\n      label: utils.string.t('dms.view.popOverMenuItems.versionHistory'),\r\n      callback: ({ doc }) => showVersionHistoryModal(doc),\r\n    },\r\n    ...(canEditMetaData\r\n      ? [\r\n          {\r\n            id: 'editMetaData',\r\n            label: utils.string.t('dms.view.popOverMenuItems.editMetadata'),\r\n            disabled: isWorkBasketOrAllCases,\r\n            callback: ({ doc }) => launchEditMetadataModel(doc),\r\n          },\r\n        ]\r\n      : []),\r\n    ...(canLinkToLossAndClaim\r\n      ? [\r\n          {\r\n            id: 'LinkTo',\r\n            label: utils.string.t('dms.view.popOverMenuItems.linkToLossAndClaim'),\r\n            callback: ({ doc }) => confirmDocumentLinkToLossAndClaim([doc]),\r\n          },\r\n        ]\r\n      : []),\r\n  ];\r\n\r\n  const resetSearch = () => {\r\n    setResetKey(new Date().getTime());\r\n    setSearch('');\r\n  };\r\n\r\n  const submitSearch = (query) => {\r\n    setSearch(query);\r\n  };\r\n\r\n  const handleSort = (by, dir) => {\r\n    originalTableData?.sort(firstBy(utils.sort.array('lexical', by, dir)));\r\n  };\r\n\r\n  const launchDmsUpload = () => (files) => {\r\n    dispatch(addLoader('DmsUploadFiles'));\r\n    const refinedReferenceId = getRefIdForContext();\r\n\r\n    dispatch(\r\n      showModal({\r\n        component: 'DMS_UPLOAD_FILES',\r\n        props: {\r\n          fullWidth: true,\r\n          title: utils.string.t('dms.upload.modalItems.uploadDocuments'),\r\n          maxWidth: 'lg',\r\n          componentProps: {\r\n            files,\r\n            context,\r\n            referenceId: refinedReferenceId,\r\n            sourceId,\r\n            documentTypeKey,\r\n            searchParamsAfterUpload,\r\n            confirmLabel: utils.string.t('app.ok'),\r\n            cancelLabel: utils.string.t('app.goBack'),\r\n            confirmMessage: utils.string.t('processingInstructions.documentsWillNotBeSaved'),\r\n            buttonColors: { confirm: 'secondary', cancel: 'primary' },\r\n            onClosingUploadModal: () => handleUploadModalClose(),\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleUploadModalClose = () => {\r\n    // Premium Processing Case Details\r\n    const policyRef = ppCaseDetails?.policyRef;\r\n    const instructionId = ppCaseDetails?.instructionId;\r\n    if (!utils.dmsFormatter.isDmsFromPiInstruction(documentTypeKey)) {\r\n      // Refresh DmsTable Data once Upload is done\r\n      dispatch(\r\n        getViewTableDocuments({\r\n          ...(searchParamsAfterUpload\r\n            ? searchParamsAfterUpload\r\n            : {\r\n              referenceId,\r\n              sectionType: context,\r\n              documentTypeKey,\r\n              parentLossRef,\r\n              ...(policyRef && instructionId && { policyRef, instructionId }),\r\n            }),\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleCheckboxClick = (e, doc) => {\r\n    e.stopPropagation();\r\n    let newlySelectedDocs = [...selectedDocs, doc];\r\n    if (selectedDocs?.find((docs) => docs.documentId === doc.documentId)) {\r\n      newlySelectedDocs = newlySelectedDocs.filter((selectedDoc) => selectedDoc.documentId !== doc.documentId);\r\n    }\r\n\r\n    if (utils.generic.isFunction(handlers?.onSelectFile)) {\r\n      handlers.onSelectFile(newlySelectedDocs);\r\n    }\r\n\r\n    setSelectedDocs(newlySelectedDocs);\r\n  };\r\n\r\n  const checkLinkedToMultipleContexts = (docList) => {\r\n    const linkedDocList = [];\r\n    if (utils.generic.isValidArray(docList, true)) {\r\n      const selectedDocList = [...docList];\r\n      selectedDocList.forEach((doc) => {\r\n        if (doc?.isLinkedToMultipleContexts) {\r\n          linkedDocList.push(doc.documentName);\r\n        }\r\n      })\r\n    }\r\n    return linkedDocList;\r\n  }\r\n\r\n  const showCheckboxesClick = (event) => {\r\n    setIsMultiSelect(event?.target?.checked);\r\n  };\r\n\r\n  const handleMultipleDownload = () => {\r\n    const selectedDocIds = selectedDocs?.map((docId) => docId.documentId);\r\n    if (selectedDocs?.length !== 1) {\r\n      dispatch(viewDocumentsMultiDownload(selectedDocIds));\r\n      return;\r\n    }\r\n    dispatch(viewDocumentsDownload(selectedDocs?.[0]));\r\n  };\r\n\r\n  const handleMutipleUnlinking = () => {\r\n    confirmDocumentUnlink(selectedDocs);\r\n  };\r\n\r\n  const handleMutipleDelete = () => {\r\n    const linkedDocList = checkLinkedToMultipleContexts(selectedDocs);\r\n    if (linkedDocList?.length > 0){\r\n      const errorTxt = utils.string.t('dms.view.deleteDocument.deleteWarning') + '\\n' + linkedDocList.join(', ');\r\n      dispatch(enqueueNotification(errorTxt, 'error'));\r\n    }\r\n    confirmDocumentDelete(selectedDocs);\r\n  };\r\n  \r\n  const handleMutipleLinkToLossAndClaim = () => {\r\n    confirmDocumentLinkToLossAndClaim(selectedDocs);\r\n  };\r\n\r\n  const isGxbDocument = (doc) => {\r\n    return doc.srcApplication === constants.DMS_SHAREPATH_SOURCES.gxb;\r\n  };\r\n\r\n  const getRefIdForContext = () => {\r\n    const { type, caseIncidentNotesID, refId } = contextSubType;\r\n    if (type === constants.DMS_TASK_CONTEXT_TYPE_RFI_RESPONSE) {\r\n      return caseIncidentNotesID ? refId + '-' + caseIncidentNotesID : refId;\r\n    } else if (type === constants.DMS_TASK_CONTEXT_TYPE_RFI || type === constants.DMS_TASK_CONTEXT_TYPE_ADHOC) {\r\n      return refId;\r\n    } else {\r\n      return referenceId;\r\n    }\r\n  };\r\n\r\n  const docClassification = utils?.dmsFormatter?.getDocumentClassificationList();\r\n\r\n  const docClassificationList = new Map(\r\n    docClassification?.map((item) => {\r\n      return [item?.id, item?.value];\r\n    })\r\n  );\r\n\r\n  const getDocClassification = (value) => {\r\n    return docClassificationList?.get(Number(value));\r\n  };\r\n\r\n  const viewDocLauncher = (e, doc) => {\r\n    e.preventDefault();\r\n    const { documentId, documentName } = doc;\r\n    utils.dms.dmsDocumentViewLauncher(documentId, documentName);\r\n  };\r\n\r\n  // abort\r\n  if (!columnsData) return null;\r\n\r\n  return (\r\n    <DmsTableView\r\n      cols={cols}\r\n      documents={filteredTableData}\r\n      popoverActions={popoverActions}\r\n      search={search}\r\n      resetKey={resetKey}\r\n      isMultiSelect={isMultiSelect}\r\n      showHeader={showHeader}\r\n      canUpload={canUpload}\r\n      canSearch={canSearch}\r\n      canUnlink={canUnlink}\r\n      canDelete={canDelete}\r\n      canLinkToLossAndClaim={canLinkToLossAndClaim}\r\n      canMultiSelect={canMultiSelect}\r\n      selectedDocs={selectedDocs}\r\n      isDmsFromPiRiskRef={isDmsFromPiRiskRef}\r\n      isWorkBasketOrAllCases={isWorkBasketOrAllCases}\r\n      isDmsFileViewGridDataLoading={isDmsFileViewGridDataLoading}\r\n      isSeniorManager={isSeniorManager}\r\n      handlers={{\r\n        resetSearch: resetSearch,\r\n        submitSearch: submitSearch,\r\n        handleSort: handleSort,\r\n        uploadModal: launchDmsUpload,\r\n        handleCheckboxClick: handleCheckboxClick,\r\n        showCheckboxesClick: showCheckboxesClick,\r\n        handleMultipleDownload: handleMultipleDownload,\r\n        handleMutipleUnlinking: handleMutipleUnlinking,\r\n        handleMutipleDelete: handleMutipleDelete,\r\n        handleMutipleLinkToLossAndClaim: handleMutipleLinkToLossAndClaim,\r\n        viewDocLauncher,\r\n      }}\r\n      isClaims={isClaims}\r\n      isClaimsFNOL={isClaimsFNOL}\r\n      isClaimsUploadDisabled={isClaimsUploadDisabled}\r\n      isDmsDocumentMenuDisabled={isDmsDocumentMenuDisabled}\r\n      claimsUploadWarningMsg={claimsUploadWarningMsg}\r\n      claimsSearchDocumentsTxt={claimsSearchDocumentsTxt}\r\n      getDocClassification={getDocClassification}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}