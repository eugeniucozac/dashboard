{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\forms\\\\CreateInWhitespace\\\\CreateInWhitespace.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as Yup from 'yup'; // app\n\nimport styles from './CreateInWhitespace.styles';\nimport { CreateInWhitespaceView } from './CreateInWhitespace.view';\nimport { getTemplates, patchPolicyPostWhitespace } from 'stores';\nimport * as utils from 'utils'; // mui\n\nimport { makeStyles } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function CreateInWhitespace(_ref) {\n  _s();\n\n  var handleClose = _ref.handleClose,\n      policy = _ref.policy;\n  var classes = makeStyles(styles, {\n    name: 'CreateInWhitespace'\n  })();\n  var dispatch = useDispatch();\n  var templates = useSelector(function (state) {\n    return state.whitespace.templates.items;\n  }) || [];\n  var templatesLoading = useSelector(function (state) {\n    return state.whitespace.templates.loading;\n  });\n  useEffect(function () {\n    dispatch(getTemplates());\n  }, [] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  var handleSubmit = function handleSubmit(payload) {\n    return dispatch(patchPolicyPostWhitespace(policy, payload));\n  };\n\n  var handleCancel = function handleCancel() {\n    if (utils.generic.isFunction(handleClose)) {\n      handleClose();\n    }\n  };\n\n  var fields = [[{\n    gridSize: {\n      xs: 12\n    },\n    type: 'select',\n    name: 'productType',\n    value: '__placeholder__',\n    options: [{\n      label: utils.string.t('whitespace.selectTemplate'),\n      value: '__placeholder__',\n      placeholder: true\n    }].concat(_toConsumableArray(utils.form.getSelectOptions('templates', {\n      templates: templates\n    }))),\n    label: utils.string.t('whitespace.template'),\n    validation: Yup.string().transform(function (value) {\n      return value === '__placeholder__' ? '' : value;\n    }).required(utils.string.t('validation.required'))\n  }, {\n    type: 'text',\n    label: utils.string.t('whitespace.reference'),\n    value: policy.umrId || '',\n    name: 'umrId',\n    validation: Yup.string().uppercase().required(utils.string.t('validation.required')),\n    muiComponentProps: _objectSpread({\n      classes: {\n        root: classes.umr\n      }\n    }, policy.umrId && {\n      InputProps: {\n        readOnly: true,\n        disabled: true\n      }\n    })\n  }]];\n  var actions = [{\n    name: 'submit',\n    label: utils.string.t('app.create'),\n    handler: handleSubmit\n  }, {\n    name: 'cancel',\n    label: utils.string.t('app.cancel'),\n    handler: handleCancel\n  }];\n  return /*#__PURE__*/_jsxDEV(CreateInWhitespaceView, {\n    fields: fields,\n    actions: actions,\n    loading: templatesLoading\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 10\n  }, this);\n}\n\n_s(CreateInWhitespace, \"zHN1qv86eUuN2a3XkjtfGxSkkhI=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = CreateInWhitespace;\nCreateInWhitespace.displayName = \"CreateInWhitespace\";\nCreateInWhitespace.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"CreateInWhitespace\"\n};\nexport default CreateInWhitespace;\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\forms\\\\CreateInWhitespace\\\\CreateInWhitespace.js\"] = {\n    name: \"CreateInWhitespace\",\n    docgenInfo: CreateInWhitespace.__docgenInfo,\n    path: \"src\\\\forms\\\\CreateInWhitespace\\\\CreateInWhitespace.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateInWhitespace\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/forms/CreateInWhitespace/CreateInWhitespace.js"],"names":["React","useEffect","useDispatch","useSelector","Yup","styles","CreateInWhitespaceView","getTemplates","patchPolicyPostWhitespace","utils","makeStyles","CreateInWhitespace","handleClose","policy","classes","name","dispatch","templates","state","whitespace","items","templatesLoading","loading","handleSubmit","payload","handleCancel","generic","isFunction","fields","gridSize","xs","type","value","options","label","string","t","placeholder","form","getSelectOptions","validation","transform","required","umrId","uppercase","muiComponentProps","root","umr","InputProps","readOnly","disabled","actions","handler"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport * as Yup from 'yup';\r\n\r\n// app\r\nimport styles from './CreateInWhitespace.styles';\r\nimport { CreateInWhitespaceView } from './CreateInWhitespace.view';\r\nimport { getTemplates, patchPolicyPostWhitespace } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\n// mui\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nexport function CreateInWhitespace({ handleClose, policy }) {\r\n  const classes = makeStyles(styles, { name: 'CreateInWhitespace' })();\r\n  const dispatch = useDispatch();\r\n  const templates = useSelector((state) => state.whitespace.templates.items) || [];\r\n  const templatesLoading = useSelector((state) => state.whitespace.templates.loading);\r\n\r\n  useEffect(\r\n    () => {\r\n      dispatch(getTemplates());\r\n    },\r\n    [] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  const handleSubmit = (payload) => {\r\n    return dispatch(patchPolicyPostWhitespace(policy, payload));\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    if (utils.generic.isFunction(handleClose)) {\r\n      handleClose();\r\n    }\r\n  };\r\n\r\n  const fields = [\r\n    [\r\n      {\r\n        gridSize: { xs: 12 },\r\n        type: 'select',\r\n        name: 'productType',\r\n        value: '__placeholder__',\r\n        options: [\r\n          { label: utils.string.t('whitespace.selectTemplate'), value: '__placeholder__', placeholder: true },\r\n          ...utils.form.getSelectOptions('templates', { templates }),\r\n        ],\r\n        label: utils.string.t('whitespace.template'),\r\n        validation: Yup.string()\r\n          .transform((value) => (value === '__placeholder__' ? '' : value))\r\n          .required(utils.string.t('validation.required')),\r\n      },\r\n      {\r\n        type: 'text',\r\n        label: utils.string.t('whitespace.reference'),\r\n        value: policy.umrId || '',\r\n        name: 'umrId',\r\n        validation: Yup.string().uppercase().required(utils.string.t('validation.required')),\r\n        muiComponentProps: {\r\n          classes: { root: classes.umr },\r\n          ...(policy.umrId && { InputProps: { readOnly: true, disabled: true } }),\r\n        },\r\n      },\r\n    ],\r\n  ];\r\n\r\n  const actions = [\r\n    {\r\n      name: 'submit',\r\n      label: utils.string.t('app.create'),\r\n      handler: handleSubmit,\r\n    },\r\n    {\r\n      name: 'cancel',\r\n      label: utils.string.t('app.cancel'),\r\n      handler: handleCancel,\r\n    },\r\n  ];\r\n\r\n  return <CreateInWhitespaceView fields={fields} actions={actions} loading={templatesLoading} />;\r\n}\r\n\r\nexport default CreateInWhitespace;\r\n"]},"metadata":{},"sourceType":"module"}