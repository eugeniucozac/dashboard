{"ast":null,"code":"import * as utils from 'utils';\nimport { authLogout } from 'stores';\nexport var getDistanceToCoast = function getDistanceToCoast(location) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    dispatch(getDistanceToCoastRequest(location));\n    var lng = location.lng,\n        lat = location.lat;\n    var params = {\n      lng: lng,\n      lat: lat\n    };\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.dtc,\n      path: 'api/distance-to-coast',\n      params: params\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (data) {\n      dispatch(getDistanceToCoastSuccess(data));\n      return data;\n    }).catch(function (err) {\n      var errorParams = {\n        file: 'stores/risk.actions.getDistanceToCoast',\n        message: 'API fetch error (risk.getDistanceToCoast)'\n      };\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(getDistanceToCoastFailure(err));\n      return err;\n    });\n  };\n};\nexport var getDistanceToCoastRequest = function getDistanceToCoastRequest(searchTerm) {\n  return {\n    type: 'RISK_ADDRESS_DTC_GET_REQUEST',\n    payload: searchTerm\n  };\n};\nexport var getDistanceToCoastSuccess = function getDistanceToCoastSuccess(responseData) {\n  return {\n    type: 'RISK_ADDRESS_DTC_GET_SUCCESS',\n    payload: responseData\n  };\n};\nexport var getDistanceToCoastFailure = function getDistanceToCoastFailure(error) {\n  return {\n    type: 'RISK_ADDRESS_DTC_GET_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/risk/risk.actions.getDistanceToCoast.js"],"names":["utils","authLogout","getDistanceToCoast","location","dispatch","getState","auth","user","endpoint","config","vars","getDistanceToCoastRequest","lng","lat","params","api","get","token","accessToken","dtc","path","then","response","handleResponse","data","getDistanceToCoastSuccess","catch","err","errorParams","file","message","handleError","handleUnauthorized","getDistanceToCoastFailure","searchTerm","type","payload","responseData","error"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,QAA3B;AAEA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD;AAAA,SAAc,UAACC,QAAD,EAAWC,QAAX,EAAwB;AACtE;AADsE,oBAEbA,QAAQ,EAFK;AAAA,QAEtDC,IAFsD,aAE9DC,IAF8D,CAEtDD,IAFsD;AAAA,QAE5BE,QAF4B,aAE9CC,MAF8C,CAEpCC,IAFoC,CAE5BF,QAF4B;;AAItEJ,IAAAA,QAAQ,CAACO,yBAAyB,CAACR,QAAD,CAA1B,CAAR;AAJsE,QAM9DS,GAN8D,GAMjDT,QANiD,CAM9DS,GAN8D;AAAA,QAMzDC,GANyD,GAMjDV,QANiD,CAMzDU,GANyD;AAQtE,QAAMC,MAAM,GAAG;AACbF,MAAAA,GAAG,EAAHA,GADa;AAEbC,MAAAA,GAAG,EAAHA;AAFa,KAAf;AAKA,WAAOb,KAAK,CAACe,GAAN,CACJC,GADI,CACA;AACHC,MAAAA,KAAK,EAAEX,IAAI,CAACY,WADT;AAEHV,MAAAA,QAAQ,EAAEA,QAAQ,CAACW,GAFhB;AAGHC,MAAAA,IAAI,EAAE,uBAHH;AAIHN,MAAAA,MAAM,EAANA;AAJG,KADA,EAOJO,IAPI,CAOC,UAACC,QAAD;AAAA,aAActB,KAAK,CAACe,GAAN,CAAUQ,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAPD,EAQJD,IARI,CAQC,UAACG,IAAD,EAAU;AACdpB,MAAAA,QAAQ,CAACqB,yBAAyB,CAACD,IAAD,CAA1B,CAAR;AACA,aAAOA,IAAP;AACD,KAXI,EAYJE,KAZI,CAYE,UAACC,GAAD,EAAS;AACd,UAAMC,WAAW,GAAG;AAClBC,QAAAA,IAAI,EAAE,wCADY;AAElBC,QAAAA,OAAO,EAAE;AAFS,OAApB;AAKA9B,MAAAA,KAAK,CAACe,GAAN,CAAUgB,WAAV,CAAsBJ,GAAtB,EAA2BC,WAA3B;AACA5B,MAAAA,KAAK,CAACe,GAAN,CAAUiB,kBAAV,CAA6BL,GAA7B,EAAkCvB,QAAlC,EAA4CH,UAA5C;AACAG,MAAAA,QAAQ,CAAC6B,yBAAyB,CAACN,GAAD,CAA1B,CAAR;AACA,aAAOA,GAAP;AACD,KAtBI,CAAP;AAuBD,GApCiC;AAAA,CAA3B;AAsCP,OAAO,IAAMhB,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACuB,UAAD,EAAgB;AACvD,SAAO;AACLC,IAAAA,IAAI,EAAE,8BADD;AAELC,IAAAA,OAAO,EAAEF;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMT,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACY,YAAD,EAAkB;AACzD,SAAO;AACLF,IAAAA,IAAI,EAAE,8BADD;AAELC,IAAAA,OAAO,EAAEC;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMJ,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACK,KAAD,EAAW;AAClD,SAAO;AACLH,IAAAA,IAAI,EAAE,8BADD;AAELC,IAAAA,OAAO,EAAEE;AAFJ,GAAP;AAID,CALM","sourcesContent":["import * as utils from 'utils';\r\nimport { authLogout } from 'stores';\r\n\r\nexport const getDistanceToCoast = (location) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  dispatch(getDistanceToCoastRequest(location));\r\n\r\n  const { lng, lat } = location;\r\n\r\n  const params = {\r\n    lng,\r\n    lat,\r\n  };\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.dtc,\r\n      path: 'api/distance-to-coast',\r\n      params,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((data) => {\r\n      dispatch(getDistanceToCoastSuccess(data));\r\n      return data;\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        file: 'stores/risk.actions.getDistanceToCoast',\r\n        message: 'API fetch error (risk.getDistanceToCoast)',\r\n      };\r\n\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(getDistanceToCoastFailure(err));\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const getDistanceToCoastRequest = (searchTerm) => {\r\n  return {\r\n    type: 'RISK_ADDRESS_DTC_GET_REQUEST',\r\n    payload: searchTerm,\r\n  };\r\n};\r\n\r\nexport const getDistanceToCoastSuccess = (responseData) => {\r\n  return {\r\n    type: 'RISK_ADDRESS_DTC_GET_SUCCESS',\r\n    payload: responseData,\r\n  };\r\n};\r\n\r\nexport const getDistanceToCoastFailure = (error) => {\r\n  return {\r\n    type: 'RISK_ADDRESS_DTC_GET_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}