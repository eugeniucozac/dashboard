{"ast":null,"code":"import _toArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toArray\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\forms\\\\CreateEditUser\\\\CreateEditUser.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as Yup from 'yup'; // app\n\nimport { CreateEditUserView } from './CreateEditUser.view';\nimport { Loader } from 'components';\nimport { getRefDataDepartments, getRefDataGroups, getRefDataRoles, selectAdministrationRefDataDepartments, selectAdministrationRefDataGroups, selectAdministrationRefDataRoles, selectAdministrationRefDataOrganisations, selectRefDataXbInstances, userCreate, userEdit, selectRefDataNewBusinessProcess, getTeamsData } from 'stores';\nimport * as utils from 'utils';\nimport * as constants from 'consts'; // mui\n\nimport { Box } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CreateEditUser(_ref) {\n  _s();\n\n  var handleClose = _ref.handleClose,\n      _ref$user = _ref.user,\n      user = _ref$user === void 0 ? {} : _ref$user;\n  var dispatch = useDispatch();\n  var refDataGroups = useSelector(selectAdministrationRefDataGroups);\n  var refDataRoles = useSelector(selectAdministrationRefDataRoles);\n  var refDataXbInstances = useSelector(selectRefDataXbInstances);\n  var refDataBusinessProcesses = useSelector(selectRefDataNewBusinessProcess);\n  var refDataDepartments = useSelector(selectAdministrationRefDataDepartments);\n  var refDataOrganisations = useSelector(selectAdministrationRefDataOrganisations);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      departmentsLoaded = _useState2[0],\n      setDepartmentsLoaded = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      groupsLoaded = _useState4[0],\n      setGroupsLoaded = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      rolesLoaded = _useState6[0],\n      setRolesLoaded = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      teamLoaded = _useState8[0],\n      setTeamLoaded = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      showGroupsBasedOnTeams = _useState10[0],\n      setShowGroupsBasedOnTeams = _useState10[1];\n\n  var optionsXbInstance = refDataXbInstances.filter(function (id) {\n    var _id$edgeSourceName, _constants$EDGE_XB_IN;\n\n    return (id === null || id === void 0 ? void 0 : (_id$edgeSourceName = id.edgeSourceName) === null || _id$edgeSourceName === void 0 ? void 0 : _id$edgeSourceName.toLowerCase()) !== ((_constants$EDGE_XB_IN = constants.EDGE_XB_INSTANCE) === null || _constants$EDGE_XB_IN === void 0 ? void 0 : _constants$EDGE_XB_IN.toLowerCase());\n  });\n\n  var isDataReady = function isDataReady() {\n    if (user === null || user === void 0 ? void 0 : user.id) {\n      return [departmentsLoaded, groupsLoaded, rolesLoaded].every(function (v) {\n        return v === true;\n      });\n    } else {\n      return [groupsLoaded].every(function (v) {\n        return v === true;\n      });\n    }\n  };\n\n  useEffect(function () {\n    var _user$groupIds;\n\n    var groupIdsAsInt = ((_user$groupIds = user.groupIds) === null || _user$groupIds === void 0 ? void 0 : _user$groupIds.split(',').map(function (strId) {\n      return parseInt(strId.trim());\n    })) || '';\n    dispatch(getRefDataGroups()).then(function (res) {\n      return utils.generic.isValidArray(res) && setGroupsLoaded(true);\n    });\n    dispatch(getRefDataDepartments(user.xbInstanceIds)).then(function (res) {\n      return utils.generic.isValidArray(res) && setDepartmentsLoaded(true);\n    });\n\n    if (user === null || user === void 0 ? void 0 : user.id) {\n      dispatch(getRefDataRoles(groupIdsAsInt)).then(function (res) {\n        return utils.generic.isValidArray(res) && setRolesLoaded(true);\n      });\n    }\n\n    dispatch(getTeamsData());\n  }, [] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  useEffect(function () {\n    var claimsGroupItems = [utils.string.t('administration.users.create.claimGroupsList.claimsAdmin'), utils.string.t('administration.users.create.claimGroupsList.claimsBackOfficeMphasis'), utils.string.t('administration.users.create.claimGroupsList.claimsBackOfficeArdonagh')];\n\n    if (!teamLoaded && !utils.generic.isInvalidOrEmptyArray(refDataGroups)) {\n      var getGroupsDataBasedOnSelectionOfTeams = refDataGroups.filter(function (itm) {\n        return !claimsGroupItems.includes(itm.name);\n      });\n      setShowGroupsBasedOnTeams(getGroupsDataBasedOnSelectionOfTeams);\n    } else {\n      setShowGroupsBasedOnTeams([]);\n    }\n  }, [refDataGroups, teamLoaded]);\n\n  var showClaimGroups = function showClaimGroups(id, value) {\n    var claimsGroupMphasisItems = [utils.string.t('administration.users.create.claimGroupsList.claimsAdmin'), utils.string.t('administration.users.create.claimGroupsList.claimsBackOfficeMphasis')];\n    var claimsGroupArdonaghItems = [utils.string.t('administration.users.create.claimGroupsList.claimsAdmin'), utils.string.t('administration.users.create.claimGroupsList.claimsBackOfficeArdonagh')];\n\n    if (id === 'team' && value === 1) {\n      getClaimsGroupsToShow(claimsGroupMphasisItems);\n    } else if (id === 'team' && value === 2) {\n      getClaimsGroupsToShow(claimsGroupArdonaghItems);\n    }\n  };\n\n  var getClaimsGroupsToShow = function getClaimsGroupsToShow(items) {\n    var getGroupsDataBasedOnSelectionOfTeams = refDataGroups.filter(function (itm) {\n      return items.includes(itm.name);\n    });\n    setShowGroupsBasedOnTeams(getGroupsDataBasedOnSelectionOfTeams);\n  };\n\n  var onChangeGroups = function onChangeGroups(grps) {\n    var groupIds = grps.map(function (grp) {\n      return grp.id;\n    });\n\n    if (isDataReady() || utils.generic.isValidArray(groupIds, true)) {\n      dispatch(getRefDataRoles(groupIds));\n    }\n  };\n\n  var onChangeXbInstances = function onChangeXbInstances(xbs) {\n    var xbIds = xbs.map(function (xbs) {\n      return xbs.sourceID;\n    });\n\n    if (isDataReady() || utils.generic.isValidArray(xbIds, true)) {\n      dispatch(getRefDataDepartments(xbIds));\n    }\n  };\n\n  var onSubmit = function onSubmit(updatedUser, dirtyFields, setError) {\n    if (user.id) {\n      return dispatch(userEdit(updatedUser, user.id));\n    } else {\n      return dispatch(userCreate(updatedUser, setError));\n    }\n  };\n\n  var onCancel = function onCancel() {\n    if (utils.generic.isFunction(handleClose)) {\n      handleClose();\n    }\n  };\n\n  var existingUsersGroups = function existingUsersGroups() {\n    if (!(user === null || user === void 0 ? void 0 : user.groupIds) || utils.generic.isInvalidOrEmptyArray(refDataGroups)) return [];\n    var userGroups = user.groupIds.split(',').map(function (id) {\n      return id.trim();\n    });\n    return refDataGroups.filter(function (it) {\n      return userGroups.includes(it.id + '');\n    }) || [];\n  };\n\n  var existingUsersBusinessProcesses = function existingUsersBusinessProcesses() {\n    if (!(user === null || user === void 0 ? void 0 : user.businessProcessIds) || utils.generic.isInvalidOrEmptyArray(refDataBusinessProcesses)) return [];\n    var userProcesses = user.businessProcessIds.split(',').map(function (id) {\n      return id.trim();\n    });\n    return refDataBusinessProcesses.filter(function (it) {\n      return userProcesses.includes(it.businessProcessID + '');\n    }) || [];\n  };\n\n  var existingUsersDepartments = function existingUsersDepartments() {\n    if (!(user === null || user === void 0 ? void 0 : user.departmentIds) || utils.generic.isInvalidOrEmptyArray(refDataDepartments)) return [];\n    var userDepts = user.departmentIds.split(',').map(function (id) {\n      return id.trim();\n    });\n    return refDataDepartments.filter(function (it) {\n      return userDepts.includes(it.id + '');\n    }) || [];\n  };\n\n  var existingUsersXbInstances = function existingUsersXbInstances() {\n    if (!(user === null || user === void 0 ? void 0 : user.xbInstanceIds) || utils.generic.isInvalidOrEmptyArray(refDataXbInstances)) return [];\n    var userXbis = user.xbInstanceIds.split(',').map(function (id) {\n      return id.trim();\n    });\n    return refDataXbInstances.filter(function (xbi) {\n      return userXbis.includes(xbi.sourceID + '');\n    }) || [];\n  };\n\n  var existingUserRole = function existingUserRole() {\n    var _refDataRoles$filter$;\n\n    var roleId = refDataRoles === null || refDataRoles === void 0 ? void 0 : (_refDataRoles$filter$ = refDataRoles.filter(function (it) {\n      return user.roleId === it.id + '';\n    })[0]) === null || _refDataRoles$filter$ === void 0 ? void 0 : _refDataRoles$filter$.id;\n    return roleId || '';\n  };\n\n  var getFirstname = function getFirstname() {\n    if (!user.fullName) return '';\n    return user.fullName.trim().split(/\\s+/)[0];\n  };\n\n  var getLastname = function getLastname() {\n    if (!user.fullName) return ''; // eslint-disable-next-line no-unused-vars\n\n    var _user$fullName$trim$s = user.fullName.trim().split(/\\s+/),\n        _user$fullName$trim$s2 = _toArray(_user$fullName$trim$s),\n        first = _user$fullName$trim$s2[0],\n        second = _user$fullName$trim$s2.slice(1);\n\n    return second.join(' ');\n  };\n\n  var existingUserTeam = function existingUserTeam() {\n    var _refDataOrganisations;\n\n    return (refDataOrganisations === null || refDataOrganisations === void 0 ? void 0 : (_refDataOrganisations = refDataOrganisations.find(function (organisation) {\n      var userOrgId = ((user === null || user === void 0 ? void 0 : user.organisationId) || '').toString();\n      var orgId = (organisation.id || '').toString();\n      return userOrgId === orgId;\n    })) === null || _refDataOrganisations === void 0 ? void 0 : _refDataOrganisations.id) || '';\n  };\n\n  var fields = [{\n    name: 'firstName',\n    label: utils.string.t('administration.users.create.label.firstName'),\n    value: getFirstname(),\n    type: 'text',\n    validation: Yup.string().required(utils.string.t('validation.required')).trim(),\n    muiComponentProps: {\n      inputProps: {\n        maxLength: 30\n      }\n    }\n  }, {\n    name: 'lastName',\n    label: utils.string.t('administration.users.create.label.lastName'),\n    value: getLastname(),\n    type: 'text',\n    validation: Yup.string().required(utils.string.t('validation.required')).trim(),\n    muiComponentProps: {\n      inputProps: {\n        maxLength: 30\n      }\n    }\n  }, {\n    name: 'emailId',\n    label: utils.string.t('administration.users.create.label.email'),\n    value: user.email || '',\n    type: 'text',\n    muiComponentProps: {\n      disabled: (user === null || user === void 0 ? void 0 : user.email) !== undefined,\n      inputProps: {\n        maxLength: 60\n      }\n    },\n    validation: !user.email && Yup.string().email(utils.string.t('validation.email')).required(utils.string.t('validation.required'))\n  }, {\n    name: 'groups',\n    label: utils.string.t('administration.users.create.label.groups'),\n    type: 'autocomplete',\n    value: existingUsersGroups(),\n    validation: Yup.array().required(utils.string.t('validation.required')),\n    options: showGroupsBasedOnTeams,\n    optionKey: 'id',\n    optionLabel: 'name',\n    muiComponentProps: {\n      'data-testid': 'groups'\n    },\n    innerComponentProps: {\n      allowEmpty: true,\n      isMulti: true,\n      maxMenuHeight: 120\n    }\n  }, {\n    name: 'role',\n    label: utils.string.t('admin.form.role.label'),\n    value: existingUserRole(),\n    type: 'select',\n    muiComponentProps: {\n      'data-testid': 'role',\n      disabled: !refDataRoles || refDataRoles.length === 0\n    },\n    options: refDataRoles,\n    optionKey: 'id',\n    optionLabel: 'name',\n    validation: Yup.string().required(utils.string.t('validation.required'))\n  }, {\n    name: 'businessProcesses',\n    label: utils.string.t('administration.users.create.label.businessProcess'),\n    type: 'autocomplete',\n    value: existingUsersBusinessProcesses(),\n    options: refDataBusinessProcesses,\n    optionKey: 'businessProcessID',\n    optionLabel: 'businessProcessName',\n    validation: Yup.array().required(utils.string.t('validation.required')),\n    muiComponentProps: {\n      'data-testid': 'businessProcesses'\n    },\n    innerComponentProps: {\n      allowEmpty: true,\n      isMulti: true,\n      maxMenuHeight: 120\n    }\n  }, {\n    name: 'team',\n    label: utils.string.t('administration.users.create.label.team'),\n    type: 'select',\n    value: existingUserTeam(),\n    options: teamLoaded ? refDataOrganisations : [],\n    optionKey: 'id',\n    optionLabel: 'name',\n    muiComponentProps: {\n      disabled: !teamLoaded\n    },\n    validation: teamLoaded && Yup.string().required(utils.string.t('validation.required'))\n  }, {\n    name: 'xbInstances',\n    label: utils.string.t('administration.users.create.label.xbInstance'),\n    type: 'autocomplete',\n    value: existingUsersXbInstances(),\n    options: optionsXbInstance,\n    optionKey: 'sourceID',\n    optionLabel: 'sourceName',\n    validation: Yup.array().required(utils.string.t('validation.required')),\n    muiComponentProps: {\n      'data-testid': 'xbInstance'\n    },\n    innerComponentProps: {\n      allowEmpty: true,\n      isMulti: true,\n      maxMenuHeight: 120\n    }\n  }, {\n    name: 'departments',\n    label: utils.string.t('administration.users.create.label.department'),\n    type: 'autocomplete',\n    value: existingUsersDepartments(),\n    options: refDataDepartments,\n    optionKey: 'id',\n    optionLabel: 'name',\n    validation: Yup.array().required(utils.string.t('validation.required')).test('departments', utils.string.t('administration.users.create.validation.departmentsXbInstances'), function (value) {\n      var _this$parent;\n\n      var xbInstances = (this === null || this === void 0 ? void 0 : (_this$parent = this.parent) === null || _this$parent === void 0 ? void 0 : _this$parent.xbInstances) || [];\n      var xbInstancesIds = xbInstances.map(function (xbi) {\n        return xbi.sourceID + '';\n      });\n      var departments = value || [];\n      var departmentsXbInstancesIds = departments.map(function (dept) {\n        var deptId = (dept === null || dept === void 0 ? void 0 : dept.id) || '';\n        var deptIdParts = deptId.split('-') || [];\n        return deptIdParts[1];\n      }).filter(Boolean); // if xbInstance hasn't been selected yet, ignore further validation\n\n      if (utils.generic.isInvalidOrEmptyArray(xbInstancesIds)) return true; // if departments hasn't been selected yet, form is not valid\n\n      if (utils.generic.isInvalidOrEmptyArray(departmentsXbInstancesIds)) return false; // check if all XB Instances have at least one department selected\n\n      return xbInstancesIds.every(function (xbId) {\n        return departmentsXbInstancesIds.includes(xbId);\n      });\n    }),\n    muiComponentProps: {\n      disabled: !((refDataDepartments === null || refDataDepartments === void 0 ? void 0 : refDataDepartments.length) > 0),\n      'data-testid': 'department'\n    },\n    innerComponentProps: {\n      allowEmpty: true,\n      isMulti: true,\n      maxMenuHeight: 120\n    }\n  }];\n  var actions = [{\n    name: 'submit',\n    label: user.id ? utils.string.t('app.save') : utils.string.t('app.create'),\n    handler: onSubmit\n  }, {\n    name: 'cancel',\n    label: utils.string.t('app.cancel'),\n    handler: onCancel\n  }]; // data is still loading...\n\n  if (!isDataReady()) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      height: \"300px\",\n      children: /*#__PURE__*/_jsxDEV(Loader, {\n        visible: true,\n        absolute: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 7\n    }, this);\n  } // data is ready\n\n\n  return /*#__PURE__*/_jsxDEV(CreateEditUserView, {\n    actions: actions,\n    fields: fields,\n    onChangeGroups: onChangeGroups,\n    onChangeXbInstances: onChangeXbInstances,\n    setTeamLoaded: setTeamLoaded,\n    user: user,\n    showClaimGroups: showClaimGroups\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 356,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CreateEditUser, \"ozXxVh3DLTYaQvmX3aTbVZ8ovlE=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = CreateEditUser;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateEditUser\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/forms/CreateEditUser/CreateEditUser.js"],"names":["React","useEffect","useState","useDispatch","useSelector","Yup","CreateEditUserView","Loader","getRefDataDepartments","getRefDataGroups","getRefDataRoles","selectAdministrationRefDataDepartments","selectAdministrationRefDataGroups","selectAdministrationRefDataRoles","selectAdministrationRefDataOrganisations","selectRefDataXbInstances","userCreate","userEdit","selectRefDataNewBusinessProcess","getTeamsData","utils","constants","Box","CreateEditUser","handleClose","user","dispatch","refDataGroups","refDataRoles","refDataXbInstances","refDataBusinessProcesses","refDataDepartments","refDataOrganisations","departmentsLoaded","setDepartmentsLoaded","groupsLoaded","setGroupsLoaded","rolesLoaded","setRolesLoaded","teamLoaded","setTeamLoaded","showGroupsBasedOnTeams","setShowGroupsBasedOnTeams","optionsXbInstance","filter","id","edgeSourceName","toLowerCase","EDGE_XB_INSTANCE","isDataReady","every","v","groupIdsAsInt","groupIds","split","map","strId","parseInt","trim","then","res","generic","isValidArray","xbInstanceIds","claimsGroupItems","string","t","isInvalidOrEmptyArray","getGroupsDataBasedOnSelectionOfTeams","itm","includes","name","showClaimGroups","value","claimsGroupMphasisItems","claimsGroupArdonaghItems","getClaimsGroupsToShow","items","onChangeGroups","grps","grp","onChangeXbInstances","xbs","xbIds","sourceID","onSubmit","updatedUser","dirtyFields","setError","onCancel","isFunction","existingUsersGroups","userGroups","it","existingUsersBusinessProcesses","businessProcessIds","userProcesses","businessProcessID","existingUsersDepartments","departmentIds","userDepts","existingUsersXbInstances","userXbis","xbi","existingUserRole","roleId","getFirstname","fullName","getLastname","first","second","join","existingUserTeam","find","organisation","userOrgId","organisationId","toString","orgId","fields","label","type","validation","required","muiComponentProps","inputProps","maxLength","email","disabled","undefined","array","options","optionKey","optionLabel","innerComponentProps","allowEmpty","isMulti","maxMenuHeight","length","test","xbInstances","parent","xbInstancesIds","departments","departmentsXbInstancesIds","dept","deptId","deptIdParts","Boolean","xbId","actions","handler"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport * as Yup from 'yup';\r\n\r\n// app\r\nimport { CreateEditUserView } from './CreateEditUser.view';\r\nimport { Loader } from 'components';\r\nimport {\r\n  getRefDataDepartments,\r\n  getRefDataGroups,\r\n  getRefDataRoles,\r\n  selectAdministrationRefDataDepartments,\r\n  selectAdministrationRefDataGroups,\r\n  selectAdministrationRefDataRoles,\r\n  selectAdministrationRefDataOrganisations,\r\n  selectRefDataXbInstances,\r\n  userCreate,\r\n  userEdit,\r\n  selectRefDataNewBusinessProcess,\r\n  getTeamsData,\r\n} from 'stores';\r\nimport * as utils from 'utils';\r\nimport * as constants from 'consts';\r\n\r\n// mui\r\nimport { Box } from '@material-ui/core';\r\n\r\nexport default function CreateEditUser({ handleClose, user = {} }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const refDataGroups = useSelector(selectAdministrationRefDataGroups);\r\n  const refDataRoles = useSelector(selectAdministrationRefDataRoles);\r\n  const refDataXbInstances = useSelector(selectRefDataXbInstances);\r\n  const refDataBusinessProcesses = useSelector(selectRefDataNewBusinessProcess);\r\n  const refDataDepartments = useSelector(selectAdministrationRefDataDepartments);\r\n  const refDataOrganisations = useSelector(selectAdministrationRefDataOrganisations);\r\n\r\n  const [departmentsLoaded, setDepartmentsLoaded] = useState(false);\r\n  const [groupsLoaded, setGroupsLoaded] = useState(false);\r\n  const [rolesLoaded, setRolesLoaded] = useState(false);\r\n  const [teamLoaded, setTeamLoaded] = useState(false);\r\n  const [showGroupsBasedOnTeams, setShowGroupsBasedOnTeams] = useState([]);\r\n\r\n  const optionsXbInstance = refDataXbInstances.filter((id) => id?.edgeSourceName?.toLowerCase() !== constants.EDGE_XB_INSTANCE?.toLowerCase());\r\n\r\n  const isDataReady = () => {\r\n    if (user?.id) {\r\n      return [departmentsLoaded, groupsLoaded, rolesLoaded].every((v) => v === true);\r\n    } else {\r\n      return [groupsLoaded].every((v) => v === true);\r\n    }\r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n      const groupIdsAsInt = user.groupIds?.split(',').map((strId) => parseInt(strId.trim())) || '';\r\n\r\n      dispatch(getRefDataGroups()).then((res) => utils.generic.isValidArray(res) && setGroupsLoaded(true));\r\n      dispatch(getRefDataDepartments(user.xbInstanceIds)).then((res) => utils.generic.isValidArray(res) && setDepartmentsLoaded(true));\r\n\r\n      if (user?.id) {\r\n        dispatch(getRefDataRoles(groupIdsAsInt)).then((res) => utils.generic.isValidArray(res) && setRolesLoaded(true));\r\n      }\r\n\r\n      dispatch(getTeamsData());\r\n    },\r\n    [] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  useEffect(() => {\r\n    const claimsGroupItems = [\r\n      utils.string.t('administration.users.create.claimGroupsList.claimsAdmin'),\r\n      utils.string.t('administration.users.create.claimGroupsList.claimsBackOfficeMphasis'),\r\n      utils.string.t('administration.users.create.claimGroupsList.claimsBackOfficeArdonagh'),\r\n    ];\r\n\r\n    if (!teamLoaded && !utils.generic.isInvalidOrEmptyArray(refDataGroups)) {\r\n      const getGroupsDataBasedOnSelectionOfTeams = refDataGroups.filter((itm) => {\r\n        return !claimsGroupItems.includes(itm.name);\r\n      });\r\n      setShowGroupsBasedOnTeams(getGroupsDataBasedOnSelectionOfTeams);\r\n    } else {\r\n      setShowGroupsBasedOnTeams([]);\r\n    }\r\n  }, [refDataGroups, teamLoaded]);\r\n\r\n  const showClaimGroups = (id, value) => {\r\n    const claimsGroupMphasisItems = [\r\n      utils.string.t('administration.users.create.claimGroupsList.claimsAdmin'),\r\n      utils.string.t('administration.users.create.claimGroupsList.claimsBackOfficeMphasis'),\r\n    ];\r\n    const claimsGroupArdonaghItems = [\r\n      utils.string.t('administration.users.create.claimGroupsList.claimsAdmin'),\r\n      utils.string.t('administration.users.create.claimGroupsList.claimsBackOfficeArdonagh'),\r\n    ];\r\n    if (id === 'team' && value === 1) {\r\n      getClaimsGroupsToShow(claimsGroupMphasisItems);\r\n    } else if (id === 'team' && value === 2) {\r\n      getClaimsGroupsToShow(claimsGroupArdonaghItems);\r\n    }\r\n  };\r\n\r\n  const getClaimsGroupsToShow = (items) => {\r\n    const getGroupsDataBasedOnSelectionOfTeams = refDataGroups.filter((itm) => {\r\n      return items.includes(itm.name);\r\n    });\r\n    setShowGroupsBasedOnTeams(getGroupsDataBasedOnSelectionOfTeams);\r\n  };\r\n\r\n  const onChangeGroups = (grps) => {\r\n    const groupIds = grps.map((grp) => grp.id);\r\n\r\n    if (isDataReady() || utils.generic.isValidArray(groupIds, true)) {\r\n      dispatch(getRefDataRoles(groupIds));\r\n    }\r\n  };\r\n\r\n  const onChangeXbInstances = (xbs) => {\r\n    const xbIds = xbs.map((xbs) => xbs.sourceID);\r\n\r\n    if (isDataReady() || utils.generic.isValidArray(xbIds, true)) {\r\n      dispatch(getRefDataDepartments(xbIds));\r\n    }\r\n  };\r\n\r\n  const onSubmit = (updatedUser, dirtyFields, setError) => {\r\n    if (user.id) {\r\n      return dispatch(userEdit(updatedUser, user.id));\r\n    } else {\r\n      return dispatch(userCreate(updatedUser, setError));\r\n    }\r\n  };\r\n\r\n  const onCancel = () => {\r\n    if (utils.generic.isFunction(handleClose)) {\r\n      handleClose();\r\n    }\r\n  };\r\n\r\n  const existingUsersGroups = () => {\r\n    if (!user?.groupIds || utils.generic.isInvalidOrEmptyArray(refDataGroups)) return [];\r\n    const userGroups = user.groupIds.split(',').map((id) => id.trim());\r\n    return refDataGroups.filter((it) => userGroups.includes(it.id + '')) || [];\r\n  };\r\n\r\n  const existingUsersBusinessProcesses = () => {\r\n    if (!user?.businessProcessIds || utils.generic.isInvalidOrEmptyArray(refDataBusinessProcesses)) return [];\r\n    const userProcesses = user.businessProcessIds.split(',').map((id) => id.trim());\r\n    return refDataBusinessProcesses.filter((it) => userProcesses.includes(it.businessProcessID + '')) || [];\r\n  };\r\n\r\n  const existingUsersDepartments = () => {\r\n    if (!user?.departmentIds || utils.generic.isInvalidOrEmptyArray(refDataDepartments)) return [];\r\n    const userDepts = user.departmentIds.split(',').map((id) => id.trim());\r\n    return refDataDepartments.filter((it) => userDepts.includes(it.id + '')) || [];\r\n  };\r\n\r\n  const existingUsersXbInstances = () => {\r\n    if (!user?.xbInstanceIds || utils.generic.isInvalidOrEmptyArray(refDataXbInstances)) return [];\r\n    const userXbis = user.xbInstanceIds.split(',').map((id) => id.trim());\r\n    return refDataXbInstances.filter((xbi) => userXbis.includes(xbi.sourceID + '')) || [];\r\n  };\r\n\r\n  const existingUserRole = () => {\r\n    let roleId = refDataRoles?.filter((it) => user.roleId === it.id + '')[0]?.id;\r\n    return roleId || '';\r\n  };\r\n\r\n  const getFirstname = () => {\r\n    if (!user.fullName) return '';\r\n    return user.fullName.trim().split(/\\s+/)[0];\r\n  };\r\n\r\n  const getLastname = () => {\r\n    if (!user.fullName) return '';\r\n    // eslint-disable-next-line no-unused-vars\r\n    const [first, ...second] = user.fullName.trim().split(/\\s+/);\r\n    return second.join(' ');\r\n  };\r\n\r\n  const existingUserTeam = () => {\r\n    return (\r\n      refDataOrganisations?.find((organisation) => {\r\n        const userOrgId = (user?.organisationId || '').toString();\r\n        const orgId = (organisation.id || '').toString();\r\n        return userOrgId === orgId;\r\n      })?.id || ''\r\n    );\r\n  };\r\n\r\n  const fields = [\r\n    {\r\n      name: 'firstName',\r\n      label: utils.string.t('administration.users.create.label.firstName'),\r\n      value: getFirstname(),\r\n      type: 'text',\r\n      validation: Yup.string().required(utils.string.t('validation.required')).trim(),\r\n      muiComponentProps: {\r\n        inputProps: {\r\n          maxLength: 30,\r\n        },\r\n      },\r\n    },\r\n    {\r\n      name: 'lastName',\r\n      label: utils.string.t('administration.users.create.label.lastName'),\r\n      value: getLastname(),\r\n      type: 'text',\r\n      validation: Yup.string().required(utils.string.t('validation.required')).trim(),\r\n      muiComponentProps: {\r\n        inputProps: {\r\n          maxLength: 30,\r\n        },\r\n      },\r\n    },\r\n    {\r\n      name: 'emailId',\r\n      label: utils.string.t('administration.users.create.label.email'),\r\n      value: user.email || '',\r\n      type: 'text',\r\n      muiComponentProps: {\r\n        disabled: user?.email !== undefined,\r\n        inputProps: {\r\n          maxLength: 60,\r\n        },\r\n      },\r\n      validation: !user.email && Yup.string().email(utils.string.t('validation.email')).required(utils.string.t('validation.required')),\r\n    },\r\n    {\r\n      name: 'groups',\r\n      label: utils.string.t('administration.users.create.label.groups'),\r\n      type: 'autocomplete',\r\n      value: existingUsersGroups(),\r\n      validation: Yup.array().required(utils.string.t('validation.required')),\r\n      options: showGroupsBasedOnTeams,\r\n      optionKey: 'id',\r\n      optionLabel: 'name',\r\n      muiComponentProps: { 'data-testid': 'groups' },\r\n      innerComponentProps: { allowEmpty: true, isMulti: true, maxMenuHeight: 120 },\r\n    },\r\n    {\r\n      name: 'role',\r\n      label: utils.string.t('admin.form.role.label'),\r\n      value: existingUserRole(),\r\n      type: 'select',\r\n      muiComponentProps: {\r\n        'data-testid': 'role',\r\n        disabled: !refDataRoles || refDataRoles.length === 0,\r\n      },\r\n      options: refDataRoles,\r\n      optionKey: 'id',\r\n      optionLabel: 'name',\r\n      validation: Yup.string().required(utils.string.t('validation.required')),\r\n    },\r\n    {\r\n      name: 'businessProcesses',\r\n      label: utils.string.t('administration.users.create.label.businessProcess'),\r\n      type: 'autocomplete',\r\n      value: existingUsersBusinessProcesses(),\r\n      options: refDataBusinessProcesses,\r\n      optionKey: 'businessProcessID',\r\n      optionLabel: 'businessProcessName',\r\n      validation: Yup.array().required(utils.string.t('validation.required')),\r\n      muiComponentProps: { 'data-testid': 'businessProcesses' },\r\n      innerComponentProps: { allowEmpty: true, isMulti: true, maxMenuHeight: 120 },\r\n    },\r\n    {\r\n      name: 'team',\r\n      label: utils.string.t('administration.users.create.label.team'),\r\n      type: 'select',\r\n      value: existingUserTeam(),\r\n      options: teamLoaded ? refDataOrganisations : [],\r\n      optionKey: 'id',\r\n      optionLabel: 'name',\r\n      muiComponentProps: {\r\n        disabled: !teamLoaded,\r\n      },\r\n      validation: teamLoaded && Yup.string().required(utils.string.t('validation.required')),\r\n    },\r\n    {\r\n      name: 'xbInstances',\r\n      label: utils.string.t('administration.users.create.label.xbInstance'),\r\n      type: 'autocomplete',\r\n      value: existingUsersXbInstances(),\r\n      options: optionsXbInstance,\r\n      optionKey: 'sourceID',\r\n      optionLabel: 'sourceName',\r\n      validation: Yup.array().required(utils.string.t('validation.required')),\r\n      muiComponentProps: { 'data-testid': 'xbInstance' },\r\n      innerComponentProps: { allowEmpty: true, isMulti: true, maxMenuHeight: 120 },\r\n    },\r\n    {\r\n      name: 'departments',\r\n      label: utils.string.t('administration.users.create.label.department'),\r\n      type: 'autocomplete',\r\n      value: existingUsersDepartments(),\r\n      options: refDataDepartments,\r\n      optionKey: 'id',\r\n      optionLabel: 'name',\r\n      validation: Yup.array()\r\n        .required(utils.string.t('validation.required'))\r\n        .test('departments', utils.string.t('administration.users.create.validation.departmentsXbInstances'), function (value) {\r\n          const xbInstances = this?.parent?.xbInstances || [];\r\n          const xbInstancesIds = xbInstances.map((xbi) => xbi.sourceID + '');\r\n\r\n          const departments = value || [];\r\n          const departmentsXbInstancesIds = departments\r\n            .map((dept) => {\r\n              const deptId = dept?.id || '';\r\n              const deptIdParts = deptId.split('-') || [];\r\n              return deptIdParts[1];\r\n            })\r\n            .filter(Boolean);\r\n\r\n          // if xbInstance hasn't been selected yet, ignore further validation\r\n          if (utils.generic.isInvalidOrEmptyArray(xbInstancesIds)) return true;\r\n\r\n          // if departments hasn't been selected yet, form is not valid\r\n          if (utils.generic.isInvalidOrEmptyArray(departmentsXbInstancesIds)) return false;\r\n\r\n          // check if all XB Instances have at least one department selected\r\n          return xbInstancesIds.every((xbId) => departmentsXbInstancesIds.includes(xbId));\r\n        }),\r\n      muiComponentProps: {\r\n        disabled: !(refDataDepartments?.length > 0),\r\n        'data-testid': 'department',\r\n      },\r\n      innerComponentProps: { allowEmpty: true, isMulti: true, maxMenuHeight: 120 },\r\n    },\r\n  ];\r\n\r\n  const actions = [\r\n    {\r\n      name: 'submit',\r\n      label: user.id ? utils.string.t('app.save') : utils.string.t('app.create'),\r\n      handler: onSubmit,\r\n    },\r\n    {\r\n      name: 'cancel',\r\n      label: utils.string.t('app.cancel'),\r\n      handler: onCancel,\r\n    },\r\n  ];\r\n\r\n  // data is still loading...\r\n  if (!isDataReady()) {\r\n    return (\r\n      <Box height=\"300px\">\r\n        <Loader visible absolute />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  // data is ready\r\n  return (\r\n    <CreateEditUserView\r\n      actions={actions}\r\n      fields={fields}\r\n      onChangeGroups={onChangeGroups}\r\n      onChangeXbInstances={onChangeXbInstances}\r\n      setTeamLoaded={setTeamLoaded}\r\n      user={user}\r\n      showClaimGroups={showClaimGroups}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}