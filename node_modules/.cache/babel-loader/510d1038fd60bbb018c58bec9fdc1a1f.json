{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport get from 'lodash/get';\nimport { authLogout, addLoader, enqueueNotification, removeLoader, setClaimData } from 'stores';\nimport * as utils from 'utils';\nimport * as constants from 'consts';\nexport var postClaimDetailsInformation = function postClaimDetailsInformation(formData) {\n  return function (dispatch, getState) {\n    var _get, _get$items$, _formData$lossQualifi, _formData$lossQualifi2, _formData$settlementC, _formData$claimantNam, _formData$ugSections, _formData$ugSections2, _formData$priority, _formData$priority2, _formData$complexity, _formData$complexity2, _formData$complexity3, _formData$referral, _formData$complexity4, _formData$referral2, _formData$complexity5, _formData$rfiResponse, _formData$complexity6, _formData$rfiResponse2, _formData$bordereauPe, _formData$insured, _formData$client, _formData$countryCode, _formData$originalCur;\n\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        user = _getState.user,\n        endpoint = _getState.config.vars.endpoint,\n        claims = _getState.claims;\n\n    var defaultError = {\n      file: 'stores/claims.actions.postClaimDetailsInformation'\n    };\n    dispatch(postClaimDetailsInformationRequest(formData));\n    dispatch(addLoader('postClaimDetailsInformation'));\n    var nowIsoString = utils.date.toISOString(new Date());\n    var assignedFullName = get(user, 'fullName');\n    var defaultValues = get(claims, 'allClaimDetails');\n    var claimantNames = get(claims, 'claimantNames');\n    var referralValues = get(claims, 'referralValues');\n    var referralResponse = get(claims, 'referralResponse');\n    var underWritingGroups = get(claims, 'underWritingGroups.items');\n    var newClaimants = claimantNames.filter(function (claimant) {\n      return typeof claimant.id === 'number';\n    }).map(function (claimant) {\n      return claimant.name;\n    });\n    var policyUnderWritingGroupDtoList = underWritingGroups.filter(function (ug) {\n      return ug.selected;\n    });\n    var selectedbeAdjuster = get(claims, 'beAdjuster.selectedbeAdjuster');\n    var beAdjusterID = (formData === null || formData === void 0 ? void 0 : formData.adjuster) === 'beAdjuster' ? selectedbeAdjuster === null || selectedbeAdjuster === void 0 ? void 0 : selectedbeAdjuster.id : null;\n    var nonBEAdjusterName = (formData === null || formData === void 0 ? void 0 : formData.adjuster) === 'nonBeAdjuster' ? formData.nonBeAdjuster : null;\n    var policyInterestID = (_get = get(claims, 'interest')) === null || _get === void 0 ? void 0 : (_get$items$ = _get.items[0]) === null || _get$items$ === void 0 ? void 0 : _get$items$.policyInterestID;\n    var referralValuesAssignedTo = referralValues.find(function (item) {\n      return item.complexityRulesID === Number(formData.referral);\n    });\n    var findReferralValues = referralValuesAssignedTo === null || referralValuesAssignedTo === void 0 ? void 0 : referralValuesAssignedTo.complexityRulesValue.includes('Assign to Myself');\n    var referralResponseAssignedTo = referralResponse.find(function (item) {\n      return item.id === formData.rfiResponse;\n    });\n    var findReferralResponse = referralResponseAssignedTo === null || referralResponseAssignedTo === void 0 ? void 0 : referralResponseAssignedTo.description.includes('Assign to Myself');\n    var refRequired = 'Referral Required';\n\n    var addDateAndTime = function addDateAndTime(date, time) {\n      if (!date) return date;\n      var actualDate = new Date(utils.string.t('format.date', {\n        value: {\n          date: date,\n          format: 'D MMM YYYY'\n        }\n      }) + ' ' + (time ? time + ':00' : '00:00:00'));\n      return actualDate || date;\n    };\n\n    var reqData = _objectSpread(_objectSpread({}, defaultValues), {}, {\n      assignedTo: findReferralValues || findReferralResponse ? assignedFullName : 'Unassigned',\n      basisOfOrder: (formData === null || formData === void 0 ? void 0 : formData.order) || '0',\n      adjusterName: formData.adjusterName,\n      adjusterReference: formData === null || formData === void 0 ? void 0 : formData.adjusterReference,\n      fgunarrative: formData === null || formData === void 0 ? void 0 : formData.fgunarrative,\n      location: formData.location,\n      lossQualifierID: (formData === null || formData === void 0 ? void 0 : (_formData$lossQualifi = formData.lossQualifierID) === null || _formData$lossQualifi === void 0 ? void 0 : _formData$lossQualifi.id) || '',\n      lossQualifierName: (formData === null || formData === void 0 ? void 0 : (_formData$lossQualifi2 = formData.lossQualifierID) === null || _formData$lossQualifi2 === void 0 ? void 0 : _formData$lossQualifi2.name) || '',\n      movementType: formData.movementType,\n      orderPercentage: formData.orderPercentage,\n      settlementCurrencyCode: formData === null || formData === void 0 ? void 0 : (_formData$settlementC = formData.settlementCurrencyCode) === null || _formData$settlementC === void 0 ? void 0 : _formData$settlementC.currencyCd,\n      newClaimants: newClaimants,\n      createdBy: user.id,\n      claimantName: formData === null || formData === void 0 ? void 0 : (_formData$claimantNam = formData.claimantName) === null || _formData$claimantNam === void 0 ? void 0 : _formData$claimantNam.name,\n      createdDate: nowIsoString,\n      policySectionID: (formData === null || formData === void 0 ? void 0 : (_formData$ugSections = formData.ugSections) === null || _formData$ugSections === void 0 ? void 0 : _formData$ugSections.id) === constants.CLAIM_POLICY_SECTION_DEFAULT ? null : formData === null || formData === void 0 ? void 0 : (_formData$ugSections2 = formData.ugSections) === null || _formData$ugSections2 === void 0 ? void 0 : _formData$ugSections2.id,\n      policyUnderWritingGroupDtoList: policyUnderWritingGroupDtoList,\n      updatedBy: user.id,\n      updatedDate: nowIsoString,\n      submittedDate: nowIsoString,\n      lossFromDate: utils.date.toISOString(formData === null || formData === void 0 ? void 0 : formData.fromDate),\n      lossToDate: utils.date.toISOString(formData === null || formData === void 0 ? void 0 : formData.toDate),\n      priorityDescription: (formData === null || formData === void 0 ? void 0 : (_formData$priority = formData.priority) === null || _formData$priority === void 0 ? void 0 : _formData$priority.description) || 'Medium',\n      priorityID: (formData === null || formData === void 0 ? void 0 : (_formData$priority2 = formData.priority) === null || _formData$priority2 === void 0 ? void 0 : _formData$priority2.id) || 3,\n      beAdjusterID: beAdjusterID,\n      nonBEAdjusterName: nonBEAdjusterName,\n      policyInterestID: policyInterestID,\n      certificateExpiryDate: utils.date.toISOString(formData === null || formData === void 0 ? void 0 : formData.certificateExpiryDate),\n      certificateInceptionDate: utils.date.toISOString(formData === null || formData === void 0 ? void 0 : formData.certificateInceptionDate),\n      certificateNumber: formData === null || formData === void 0 ? void 0 : formData.certificateNumber,\n      complexityValueID: formData === null || formData === void 0 ? void 0 : (_formData$complexity = formData.complexity) === null || _formData$complexity === void 0 ? void 0 : _formData$complexity.complexityRulesID,\n      complexityValue: formData === null || formData === void 0 ? void 0 : (_formData$complexity2 = formData.complexity) === null || _formData$complexity2 === void 0 ? void 0 : _formData$complexity2.complexityRulesValue,\n      referralValueID: (formData === null || formData === void 0 ? void 0 : (_formData$complexity3 = formData.complexity) === null || _formData$complexity3 === void 0 ? void 0 : _formData$complexity3.complexityRulesValue) === refRequired ? formData === null || formData === void 0 ? void 0 : (_formData$referral = formData.referral) === null || _formData$referral === void 0 ? void 0 : _formData$referral.complexityRulesID : null,\n      referralValue: (formData === null || formData === void 0 ? void 0 : (_formData$complexity4 = formData.complexity) === null || _formData$complexity4 === void 0 ? void 0 : _formData$complexity4.complexityRulesValue) === refRequired ? formData === null || formData === void 0 ? void 0 : (_formData$referral2 = formData.referral) === null || _formData$referral2 === void 0 ? void 0 : _formData$referral2.complexityRulesValue : null,\n      referralResponseID: (formData === null || formData === void 0 ? void 0 : (_formData$complexity5 = formData.complexity) === null || _formData$complexity5 === void 0 ? void 0 : _formData$complexity5.complexityRulesValue) === refRequired ? formData === null || formData === void 0 ? void 0 : (_formData$rfiResponse = formData.rfiResponse) === null || _formData$rfiResponse === void 0 ? void 0 : _formData$rfiResponse.id : null,\n      referralResponseDescription: (formData === null || formData === void 0 ? void 0 : (_formData$complexity6 = formData.complexity) === null || _formData$complexity6 === void 0 ? void 0 : _formData$complexity6.complexityRulesValue) === refRequired ? formData === null || formData === void 0 ? void 0 : (_formData$rfiResponse2 = formData.rfiResponse) === null || _formData$rfiResponse2 === void 0 ? void 0 : _formData$rfiResponse2.description : null,\n      claimReceivedDate: addDateAndTime(formData === null || formData === void 0 ? void 0 : formData.claimReceivedDate, formData === null || formData === void 0 ? void 0 : formData.claimReceivedTime),\n      bordereauPeriod: (formData === null || formData === void 0 ? void 0 : (_formData$bordereauPe = formData.bordereauPeriod) === null || _formData$bordereauPe === void 0 ? void 0 : _formData$bordereauPe.id) || null,\n      bordereauClaim: (formData === null || formData === void 0 ? void 0 : formData.bordereauClaim) ? 1 : 0,\n      insuredID: parseInt(formData === null || formData === void 0 ? void 0 : (_formData$insured = formData.insured) === null || _formData$insured === void 0 ? void 0 : _formData$insured.id) || null,\n      clientID: parseInt(formData === null || formData === void 0 ? void 0 : (_formData$client = formData.client) === null || _formData$client === void 0 ? void 0 : _formData$client.id) || null,\n      settlementCountry: (formData === null || formData === void 0 ? void 0 : (_formData$countryCode = formData.countryCode) === null || _formData$countryCode === void 0 ? void 0 : _formData$countryCode.countryCode) || null,\n      originalCurrency: (formData === null || formData === void 0 ? void 0 : (_formData$originalCur = formData.originalCurrencyCode) === null || _formData$originalCur === void 0 ? void 0 : _formData$originalCur.currencyCd) || null\n    });\n\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.claimService,\n      path: 'api/data/claims',\n      data: reqData\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (data) {\n      var _data$data, _data$data2;\n\n      dispatch(postClaimDetailsInformationSuccess(data.data));\n      dispatch(enqueueNotification('notification.claimInformation.success', 'success'));\n      dispatch(removeLoader('postClaimDetailsInformation'));\n      dispatch(setClaimData({\n        lossId: reqData.lossDetailID,\n        claimId: data === null || data === void 0 ? void 0 : (_data$data = data.data) === null || _data$data === void 0 ? void 0 : _data$data.claimID,\n        policyRef: reqData.policyRef,\n        policyNumber: reqData.policyRef,\n        xbInstanceID: reqData.xbInstanceID,\n        xbPolicyID: reqData.xbPolicyID,\n        claimRef: data === null || data === void 0 ? void 0 : (_data$data2 = data.data) === null || _data$data2 === void 0 ? void 0 : _data$data2.claimReference\n      }));\n      return data.data;\n    })[\"catch\"](function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API post error'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(postClaimDetailsInformationFailure(err));\n      dispatch(enqueueNotification('notification.claimInformation.fail', 'error'));\n      dispatch(removeLoader('postClaimDetailsInformation'));\n      return err;\n    });\n  };\n};\nexport var postClaimDetailsInformationRequest = function postClaimDetailsInformationRequest(data) {\n  return {\n    type: 'CLAIMS_DETAILS_INFORMATION_POST_REQUEST',\n    payload: data\n  };\n};\nexport var postClaimDetailsInformationSuccess = function postClaimDetailsInformationSuccess(responseData) {\n  return {\n    type: 'CLAIMS_DETAILS_INFORMATION_POST_SUCCESS',\n    payload: responseData\n  };\n};\nexport var postClaimDetailsInformationFailure = function postClaimDetailsInformationFailure(error) {\n  return {\n    type: 'CLAIMS_DETAILS_INFORMATION_POST_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.postClaimDetailsInformation.js"],"names":["get","authLogout","addLoader","enqueueNotification","removeLoader","setClaimData","utils","constants","postClaimDetailsInformation","formData","dispatch","getState","auth","user","endpoint","config","vars","claims","defaultError","file","postClaimDetailsInformationRequest","nowIsoString","date","toISOString","Date","assignedFullName","defaultValues","claimantNames","referralValues","referralResponse","underWritingGroups","newClaimants","filter","claimant","id","map","name","policyUnderWritingGroupDtoList","ug","selected","selectedbeAdjuster","beAdjusterID","adjuster","nonBEAdjusterName","nonBeAdjuster","policyInterestID","items","referralValuesAssignedTo","find","item","complexityRulesID","Number","referral","findReferralValues","complexityRulesValue","includes","referralResponseAssignedTo","rfiResponse","findReferralResponse","description","refRequired","addDateAndTime","time","actualDate","string","t","value","format","reqData","assignedTo","basisOfOrder","order","adjusterName","adjusterReference","fgunarrative","location","lossQualifierID","lossQualifierName","movementType","orderPercentage","settlementCurrencyCode","currencyCd","createdBy","claimantName","createdDate","policySectionID","ugSections","CLAIM_POLICY_SECTION_DEFAULT","updatedBy","updatedDate","submittedDate","lossFromDate","fromDate","lossToDate","toDate","priorityDescription","priority","priorityID","certificateExpiryDate","certificateInceptionDate","certificateNumber","complexityValueID","complexity","complexityValue","referralValueID","referralValue","referralResponseID","referralResponseDescription","claimReceivedDate","claimReceivedTime","bordereauPeriod","bordereauClaim","insuredID","parseInt","insured","clientID","client","settlementCountry","countryCode","originalCurrency","originalCurrencyCode","api","post","token","accessToken","claimService","path","data","then","response","handleResponse","postClaimDetailsInformationSuccess","lossId","lossDetailID","claimId","claimID","policyRef","policyNumber","xbInstanceID","xbPolicyID","claimRef","claimReference","err","errorParams","message","handleError","handleUnauthorized","postClaimDetailsInformationFailure","type","payload","responseData","error"],"mappings":"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","sourcesContent":["import get from 'lodash/get';\r\n\r\nimport { authLogout, addLoader, enqueueNotification, removeLoader, setClaimData } from 'stores';\r\nimport * as utils from 'utils';\r\nimport * as constants from 'consts';\r\n\r\nexport const postClaimDetailsInformation = (formData) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, user, config: { vars: { endpoint } }, claims } = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.postClaimDetailsInformation',\r\n  };\r\n\r\n  dispatch(postClaimDetailsInformationRequest(formData));\r\n  dispatch(addLoader('postClaimDetailsInformation'));\r\n\r\n  const nowIsoString = utils.date.toISOString(new Date());\r\n\r\n  const assignedFullName = get(user, 'fullName');\r\n  const defaultValues = get(claims, 'allClaimDetails');\r\n  const claimantNames = get(claims, 'claimantNames');\r\n  const referralValues = get(claims, 'referralValues');\r\n  const referralResponse = get(claims, 'referralResponse');\r\n  const underWritingGroups = get(claims, 'underWritingGroups.items');\r\n  const newClaimants = claimantNames.filter((claimant) => typeof claimant.id === 'number').map((claimant) => claimant.name);\r\n  const policyUnderWritingGroupDtoList = underWritingGroups.filter((ug) => ug.selected);\r\n  const selectedbeAdjuster = get(claims, 'beAdjuster.selectedbeAdjuster');\r\n  const beAdjusterID = formData?.adjuster === 'beAdjuster' ? selectedbeAdjuster?.id : null;\r\n  const nonBEAdjusterName = formData?.adjuster === 'nonBeAdjuster' ? formData.nonBeAdjuster : null;\r\n  const policyInterestID = get(claims, 'interest')?.items[0]?.policyInterestID;\r\n\r\n  const referralValuesAssignedTo = referralValues.find((item) => item.complexityRulesID === Number(formData.referral));\r\n  const findReferralValues = referralValuesAssignedTo?.complexityRulesValue.includes('Assign to Myself');\r\n  const referralResponseAssignedTo = referralResponse.find((item) => item.id === formData.rfiResponse);\r\n  const findReferralResponse = referralResponseAssignedTo?.description.includes('Assign to Myself');\r\n  const refRequired = 'Referral Required';\r\n\r\n  const addDateAndTime = (date, time) => {\r\n    if (!date) return date;\r\n    let actualDate = new Date(\r\n      utils.string.t('format.date', { value: { date: date, format: 'D MMM YYYY' } }) + ' ' + (time ? time + ':00' : '00:00:00')\r\n    );\r\n    return actualDate || date;\r\n  };\r\n\r\n  const reqData = {\r\n    ...defaultValues,\r\n    assignedTo: findReferralValues || findReferralResponse ? assignedFullName : 'Unassigned',\r\n    basisOfOrder: formData?.order || '0',\r\n    adjusterName: formData.adjusterName,\r\n    adjusterReference: formData?.adjusterReference,\r\n    fgunarrative: formData?.fgunarrative,\r\n    location: formData.location,\r\n    lossQualifierID: formData?.lossQualifierID?.id || '',\r\n    lossQualifierName: formData?.lossQualifierID?.name || '',\r\n    movementType: formData.movementType,\r\n    orderPercentage: formData.orderPercentage,\r\n    settlementCurrencyCode: formData?.settlementCurrencyCode?.currencyCd,\r\n    newClaimants,\r\n    createdBy: user.id,\r\n    claimantName: formData?.claimantName?.name,\r\n    createdDate: nowIsoString,\r\n    policySectionID: formData?.ugSections?.id === constants.CLAIM_POLICY_SECTION_DEFAULT ? null : formData?.ugSections?.id,\r\n    policyUnderWritingGroupDtoList,\r\n    updatedBy: user.id,\r\n    updatedDate: nowIsoString,\r\n    submittedDate: nowIsoString,\r\n    lossFromDate: utils.date.toISOString(formData?.fromDate),\r\n    lossToDate: utils.date.toISOString(formData?.toDate),\r\n    priorityDescription: formData?.priority?.description || 'Medium',\r\n    priorityID: formData?.priority?.id || 3,\r\n    beAdjusterID,\r\n    nonBEAdjusterName,\r\n    policyInterestID,\r\n    certificateExpiryDate: utils.date.toISOString(formData?.certificateExpiryDate),\r\n    certificateInceptionDate: utils.date.toISOString(formData?.certificateInceptionDate),\r\n    certificateNumber: formData?.certificateNumber,\r\n    complexityValueID: formData?.complexity?.complexityRulesID,\r\n    complexityValue: formData?.complexity?.complexityRulesValue,\r\n    referralValueID: formData?.complexity?.complexityRulesValue === refRequired ? formData?.referral?.complexityRulesID : null,\r\n    referralValue: formData?.complexity?.complexityRulesValue === refRequired ? formData?.referral?.complexityRulesValue : null,\r\n    referralResponseID: formData?.complexity?.complexityRulesValue === refRequired ? formData?.rfiResponse?.id : null,\r\n    referralResponseDescription: formData?.complexity?.complexityRulesValue === refRequired ? formData?.rfiResponse?.description : null,\r\n    claimReceivedDate: addDateAndTime(formData?.claimReceivedDate, formData?.claimReceivedTime),\r\n    bordereauPeriod: formData?.bordereauPeriod?.id || null,\r\n    bordereauClaim: formData?.bordereauClaim ? 1 : 0,\r\n    insuredID: parseInt(formData?.insured?.id) || null,\r\n    clientID: parseInt(formData?.client?.id) || null,\r\n    settlementCountry: formData?.countryCode?.countryCode || null,\r\n    originalCurrency: formData?.originalCurrencyCode?.currencyCd || null,\r\n  };\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.claimService,\r\n      path: 'api/data/claims',\r\n      data: reqData,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((data) => {\r\n      dispatch(postClaimDetailsInformationSuccess(data.data));\r\n      dispatch(enqueueNotification('notification.claimInformation.success', 'success'));\r\n      dispatch(removeLoader('postClaimDetailsInformation'));\r\n      dispatch(\r\n        setClaimData({\r\n          lossId: reqData.lossDetailID,\r\n          claimId: data?.data?.claimID,\r\n          policyRef: reqData.policyRef,\r\n          policyNumber: reqData.policyRef,\r\n          xbInstanceID: reqData.xbInstanceID,\r\n          xbPolicyID: reqData.xbPolicyID,\r\n          claimRef: data?.data?.claimReference,\r\n        })\r\n      );\r\n      return data.data;\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        ...defaultError,\r\n        message: 'API post error',\r\n      };\r\n\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(postClaimDetailsInformationFailure(err));\r\n      dispatch(enqueueNotification('notification.claimInformation.fail', 'error'));\r\n      dispatch(removeLoader('postClaimDetailsInformation'));\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const postClaimDetailsInformationRequest = (data) => {\r\n  return {\r\n    type: 'CLAIMS_DETAILS_INFORMATION_POST_REQUEST',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const postClaimDetailsInformationSuccess = (responseData) => {\r\n  return {\r\n    type: 'CLAIMS_DETAILS_INFORMATION_POST_SUCCESS',\r\n    payload: responseData,\r\n  };\r\n};\r\n\r\nexport const postClaimDetailsInformationFailure = (error) => {\r\n  return {\r\n    type: 'CLAIMS_DETAILS_INFORMATION_POST_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}