{"ast":null,"code":"import \"core-js/modules/es.array.sort\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as utils from 'utils';\nimport get from 'lodash/get';\nimport has from 'lodash/has';\nimport { firstBy } from 'thenby';\nvar initialState = {\n  items: {}\n};\n\nvar sortComments = function sortComments(comments) {\n  return comments.sort(firstBy(utils.sort.array('date', 'date')));\n};\n\nvar commentReducers = function commentReducers() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'COMMENTS_GET_SUCCESS':\n      var getCommentsId = action.payload.id;\n      var getComments = action.payload.comments || [];\n\n      if (!getCommentsId || getComments.length <= 0) {\n        return state;\n      }\n\n      if (getComments.length > 0) {\n        getComments = getComments.filter(function (comment) {\n          return comment.message && comment.date && has(comment, 'user.id');\n        });\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        items: _objectSpread(_objectSpread({}, state.items), {}, _defineProperty({}, getCommentsId, sortComments(getComments)))\n      });\n\n    case 'COMMENTS_GET_BY_PLACEMENT_SUCCESS':\n      var url = action.payload.id;\n      var allComments = action.payload.comments || [];\n\n      if (!url || allComments.length <= 0) {\n        return state;\n      }\n\n      if (allComments.length > 0) {\n        allComments = allComments.filter(function (comment) {\n          return comment.typeId && comment.message && comment.date && has(comment, 'user.id');\n        });\n      }\n\n      var newComments = {};\n      sortComments(allComments).forEach(function (comment) {\n        var marketUrl = \"\".concat(url, \"/\").concat(comment.typeId);\n\n        if (!newComments[marketUrl]) {\n          newComments[marketUrl] = [];\n        }\n\n        newComments[marketUrl].push(comment);\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        items: _objectSpread(_objectSpread({}, state.items), newComments)\n      });\n\n    case 'COMMENTS_POST_SUCCESS':\n      {\n        var postCommentsId = action.payload.id;\n        var postComments = action.payload.comments || [];\n        var postPreviousComments = get(state, \"items[\".concat(postCommentsId, \"]\")) || [];\n        return _objectSpread(_objectSpread({}, state), {}, {\n          items: _objectSpread(_objectSpread({}, state.items), {}, _defineProperty({}, postCommentsId, sortComments([].concat(_toConsumableArray(postPreviousComments), [postComments]))))\n        });\n      }\n\n    case 'COMMENTS_DELETE_SUCCESS':\n      {\n        var _postCommentsId = action.payload.id;\n\n        var _postPreviousComments = get(state, \"items[\".concat(_postCommentsId, \"]\")) || [];\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          items: _objectSpread(_objectSpread({}, state.items), {}, _defineProperty({}, _postCommentsId, _postPreviousComments.filter(function (comment) {\n            return comment.id !== action.payload.commentId;\n          })))\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default commentReducers;","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/comment/comment.reducers.js"],"names":["utils","get","has","firstBy","initialState","items","sortComments","comments","sort","array","commentReducers","state","action","type","getCommentsId","payload","id","getComments","length","filter","comment","message","date","url","allComments","typeId","newComments","forEach","marketUrl","push","postCommentsId","postComments","postPreviousComments","commentId"],"mappings":"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","sourcesContent":["import * as utils from 'utils';\r\nimport get from 'lodash/get';\r\nimport has from 'lodash/has';\r\nimport { firstBy } from 'thenby';\r\n\r\nconst initialState = {\r\n  items: {},\r\n};\r\n\r\nconst sortComments = (comments) => {\r\n  return comments.sort(firstBy(utils.sort.array('date', 'date')));\r\n};\r\n\r\nconst commentReducers = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'COMMENTS_GET_SUCCESS':\r\n      const getCommentsId = action.payload.id;\r\n      let getComments = action.payload.comments || [];\r\n\r\n      if (!getCommentsId || getComments.length <= 0) {\r\n        return state;\r\n      }\r\n\r\n      if (getComments.length > 0) {\r\n        getComments = getComments.filter((comment) => {\r\n          return comment.message && comment.date && has(comment, 'user.id');\r\n        });\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        items: {\r\n          ...state.items,\r\n          [getCommentsId]: sortComments(getComments),\r\n        },\r\n      };\r\n\r\n    case 'COMMENTS_GET_BY_PLACEMENT_SUCCESS':\r\n      const url = action.payload.id;\r\n      let allComments = action.payload.comments || [];\r\n\r\n      if (!url || allComments.length <= 0) {\r\n        return state;\r\n      }\r\n\r\n      if (allComments.length > 0) {\r\n        allComments = allComments.filter((comment) => {\r\n          return comment.typeId && comment.message && comment.date && has(comment, 'user.id');\r\n        });\r\n      }\r\n\r\n      const newComments = {};\r\n\r\n      sortComments(allComments).forEach((comment) => {\r\n        const marketUrl = `${url}/${comment.typeId}`;\r\n        if (!newComments[marketUrl]) {\r\n          newComments[marketUrl] = [];\r\n        }\r\n        newComments[marketUrl].push(comment);\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        items: {\r\n          ...state.items,\r\n          ...newComments,\r\n        },\r\n      };\r\n\r\n    case 'COMMENTS_POST_SUCCESS': {\r\n      const postCommentsId = action.payload.id;\r\n      let postComments = action.payload.comments || [];\r\n\r\n      const postPreviousComments = get(state, `items[${postCommentsId}]`) || [];\r\n\r\n      return {\r\n        ...state,\r\n        items: {\r\n          ...state.items,\r\n          [postCommentsId]: sortComments([...postPreviousComments, postComments]),\r\n        },\r\n      };\r\n    }\r\n\r\n    case 'COMMENTS_DELETE_SUCCESS': {\r\n      const postCommentsId = action.payload.id;\r\n      const postPreviousComments = get(state, `items[${postCommentsId}]`) || [];\r\n\r\n      return {\r\n        ...state,\r\n        items: {\r\n          ...state.items,\r\n          [postCommentsId]: postPreviousComments.filter((comment) => comment.id !== action.payload.commentId),\r\n        },\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default commentReducers;\r\n"]},"metadata":{},"sourceType":"module"}