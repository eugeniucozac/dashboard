{"ast":null,"code":"import _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\pages\\\\Placement\\\\Placement.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useParams } from 'react-router';\nimport { Helmet } from 'react-helmet';\nimport isNumber from 'lodash/isNumber';\nimport toNumber from 'lodash/toNumber';\nimport get from 'lodash/get'; // app\n\nimport { PlacementView } from './Placement.view';\nimport { getPlacementDetails, resetPlacementLocations, resetMarket, bulkPlacementClear, enqueueNotification, selectIsBroker, selectMarketSelectedId, selectPlacement, selectPlacementId, selectRefDataLoaded, selectRefDataStatusIdByCode } from 'stores';\nimport { STATUS_PLACEMENT_BOUND } from 'consts';\nimport * as utils from 'utils';\nimport config from 'config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Placement() {\n  _s();\n\n  var _useState = useState([{\n    name: 'overview',\n    label: utils.string.t('placement.overview.title'),\n    route: config.routes.placement.overview,\n    showForPhysicalLoss: true\n  }, {\n    name: 'marketing',\n    label: utils.string.t('placement.marketing.title'),\n    route: \"\".concat(config.routes.placement.marketing.markets)\n  }, {\n    name: 'modelling',\n    label: utils.string.t('placement.modelling.title'),\n    route: config.routes.placement.modelling,\n    showForIsBroker: true\n  }, {\n    name: 'checklist',\n    label: utils.string.t('placement.openingMemo.title'),\n    route: config.routes.placement.checklist,\n    showForIsBroker: true\n  }, {\n    name: 'bound',\n    label: utils.string.t('placement.bound.title'),\n    route: config.routes.placement.bound\n  }, {\n    name: 'documents',\n    label: utils.string.t('placement.document.title'),\n    route: config.routes.placement.documents\n  }]),\n      _useState2 = _slicedToArray(_useState, 1),\n      breadcrumbs = _useState2[0];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      placementExpanded = _useState4[0],\n      setPlacementExpanded = _useState4[1];\n\n  var params = useParams();\n  var history = useHistory();\n  var dispatch = useDispatch();\n  var uiBrand = useSelector(function (state) {\n    return state.ui.brand;\n  });\n  var market = useSelector(function (state) {\n    return state.market;\n  });\n  var openingMemo = useSelector(function (state) {\n    return state.openingMemo;\n  });\n  var userIsBroker = useSelector(selectIsBroker);\n  var marketSelectedId = useSelector(selectMarketSelectedId);\n  var placementSelected = useSelector(selectPlacement);\n  var placementSelectedId = useSelector(selectPlacementId);\n  var refDataLoaded = useSelector(selectRefDataLoaded);\n  var refDataStatusIdPlacementBound = useSelector(selectRefDataStatusIdByCode('placement', STATUS_PLACEMENT_BOUND));\n  var configVars = useSelector(function (state) {\n    return get(state, 'config.vars');\n  });\n  var isDev = utils.app.isDevelopment(configVars);\n  useEffect(function () {\n    var prevId = placementSelectedId && placementSelectedId.toString();\n    var currentId = params && get(params, 'id', '').toString(); // reset locations if the placement has changed\n\n    if (prevId !== currentId) {\n      dispatch(resetPlacementLocations());\n    } // reset bulk selections\n\n\n    dispatch(bulkPlacementClear()); // fetch placement details\n\n    if (currentId && isNumber(toNumber(currentId))) {\n      dispatch(getPlacementDetails(parseInt(currentId), !placementSelected, true)).then(function (res) {\n        if (!res || !res.id || res.status === 'error') {\n          history.replace(config.routes.home.root);\n          dispatch(enqueueNotification('notification.getPlacement.fail', 'warning', {\n            data: {\n              id: currentId\n            }\n          }));\n        }\n      });\n    } // cleanup\n\n\n    return function () {\n      dispatch(resetPlacementLocations());\n      dispatch(resetMarket());\n      dispatch(bulkPlacementClear());\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(function () {\n    // collapse placement summary if a new market is selected\n    if (marketSelectedId) {\n      setPlacementExpanded(false);\n    }\n  }, [marketSelectedId]);\n\n  var isPlacementReady = function isPlacementReady() {\n    var paramsId = get(params, 'id');\n    var selectedId = get(placementSelected, 'id');\n    return !!paramsId && !!selectedId && paramsId.toString() === selectedId.toString();\n  };\n\n  var setActiveStep = function setActiveStep(breadcrumbs) {\n    return breadcrumbs.map(function (item) {\n      if (item.name === 'marketing' && history.location.pathname.includes('/placement/marketing/')) {\n        item.active = true;\n      } else {\n        item.active = history.location.pathname === item.link;\n      }\n\n      return item;\n    });\n  };\n\n  var handleExpand = function handleExpand() {\n    setPlacementExpanded(!placementExpanded);\n  };\n\n  var breadcrumbsLinks = utils.placement.getFilteredBreadcrumbs({\n    breadcrumbs: breadcrumbs,\n    placement: placementSelected,\n    isBroker: userIsBroker,\n    isDev: isDev,\n    statusBoundId: refDataStatusIdPlacementBound\n  });\n  var placementName = utils.placement.getInsureds(placementSelected);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"\".concat(utils.string.t('app.placement')).concat(placementName ? \" - \".concat(placementName) : '', \" - \").concat(utils.app.getAppName(uiBrand))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PlacementView, {\n      isDev: isDev,\n      isReady: isPlacementReady() && refDataLoaded,\n      breadcrumbs: setActiveStep(breadcrumbsLinks),\n      isBroker: userIsBroker,\n      placementExpanded: placementExpanded,\n      placementSelected: placementSelected,\n      openingMemo: openingMemo,\n      market: market,\n      handlers: {\n        expandPlacement: handleExpand\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Placement, \"Rczl9EUm2gleN2BDfOoIyGR2DOI=\", false, function () {\n  return [useParams, useHistory, useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Placement;\n\nvar _c;\n\n$RefreshReg$(_c, \"Placement\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/pages/Placement/Placement.js"],"names":["React","useEffect","useState","useDispatch","useSelector","useHistory","useParams","Helmet","isNumber","toNumber","get","PlacementView","getPlacementDetails","resetPlacementLocations","resetMarket","bulkPlacementClear","enqueueNotification","selectIsBroker","selectMarketSelectedId","selectPlacement","selectPlacementId","selectRefDataLoaded","selectRefDataStatusIdByCode","STATUS_PLACEMENT_BOUND","utils","config","Placement","name","label","string","t","route","routes","placement","overview","showForPhysicalLoss","marketing","markets","modelling","showForIsBroker","checklist","bound","documents","breadcrumbs","placementExpanded","setPlacementExpanded","params","history","dispatch","uiBrand","state","ui","brand","market","openingMemo","userIsBroker","marketSelectedId","placementSelected","placementSelectedId","refDataLoaded","refDataStatusIdPlacementBound","configVars","isDev","app","isDevelopment","prevId","toString","currentId","parseInt","then","res","id","status","replace","home","root","data","isPlacementReady","paramsId","selectedId","setActiveStep","map","item","location","pathname","includes","active","link","handleExpand","breadcrumbsLinks","getFilteredBreadcrumbs","isBroker","statusBoundId","placementName","getInsureds","getAppName","expandPlacement"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory, useParams } from 'react-router';\r\nimport { Helmet } from 'react-helmet';\r\nimport isNumber from 'lodash/isNumber';\r\nimport toNumber from 'lodash/toNumber';\r\nimport get from 'lodash/get';\r\n\r\n// app\r\nimport { PlacementView } from './Placement.view';\r\nimport {\r\n  getPlacementDetails,\r\n  resetPlacementLocations,\r\n  resetMarket,\r\n  bulkPlacementClear,\r\n  enqueueNotification,\r\n  selectIsBroker,\r\n  selectMarketSelectedId,\r\n  selectPlacement,\r\n  selectPlacementId,\r\n  selectRefDataLoaded,\r\n  selectRefDataStatusIdByCode,\r\n} from 'stores';\r\nimport { STATUS_PLACEMENT_BOUND } from 'consts';\r\nimport * as utils from 'utils';\r\nimport config from 'config';\r\n\r\nexport default function Placement() {\r\n  const [breadcrumbs] = useState([\r\n    {\r\n      name: 'overview',\r\n      label: utils.string.t('placement.overview.title'),\r\n      route: config.routes.placement.overview,\r\n      showForPhysicalLoss: true,\r\n    },\r\n    {\r\n      name: 'marketing',\r\n      label: utils.string.t('placement.marketing.title'),\r\n      route: `${config.routes.placement.marketing.markets}`,\r\n    },\r\n    {\r\n      name: 'modelling',\r\n      label: utils.string.t('placement.modelling.title'),\r\n      route: config.routes.placement.modelling,\r\n      showForIsBroker: true,\r\n    },\r\n    {\r\n      name: 'checklist',\r\n      label: utils.string.t('placement.openingMemo.title'),\r\n      route: config.routes.placement.checklist,\r\n      showForIsBroker: true,\r\n    },\r\n    {\r\n      name: 'bound',\r\n      label: utils.string.t('placement.bound.title'),\r\n      route: config.routes.placement.bound,\r\n    },\r\n    {\r\n      name: 'documents',\r\n      label: utils.string.t('placement.document.title'),\r\n      route: config.routes.placement.documents,\r\n    },\r\n  ]);\r\n  const [placementExpanded, setPlacementExpanded] = useState(true);\r\n\r\n  const params = useParams();\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n\r\n  const uiBrand = useSelector((state) => state.ui.brand);\r\n  const market = useSelector((state) => state.market);\r\n  const openingMemo = useSelector((state) => state.openingMemo);\r\n  const userIsBroker = useSelector(selectIsBroker);\r\n  const marketSelectedId = useSelector(selectMarketSelectedId);\r\n  const placementSelected = useSelector(selectPlacement);\r\n  const placementSelectedId = useSelector(selectPlacementId);\r\n  const refDataLoaded = useSelector(selectRefDataLoaded);\r\n  const refDataStatusIdPlacementBound = useSelector(selectRefDataStatusIdByCode('placement', STATUS_PLACEMENT_BOUND));\r\n  const configVars = useSelector((state) => get(state, 'config.vars'));\r\n\r\n  const isDev = utils.app.isDevelopment(configVars);\r\n\r\n  useEffect(() => {\r\n    const prevId = placementSelectedId && placementSelectedId.toString();\r\n    const currentId = params && get(params, 'id', '').toString();\r\n\r\n    // reset locations if the placement has changed\r\n    if (prevId !== currentId) {\r\n      dispatch(resetPlacementLocations());\r\n    }\r\n\r\n    // reset bulk selections\r\n    dispatch(bulkPlacementClear());\r\n\r\n    // fetch placement details\r\n    if (currentId && isNumber(toNumber(currentId))) {\r\n      dispatch(getPlacementDetails(parseInt(currentId), !placementSelected, true)).then((res) => {\r\n        if (!res || !res.id || res.status === 'error') {\r\n          history.replace(config.routes.home.root);\r\n          dispatch(enqueueNotification('notification.getPlacement.fail', 'warning', { data: { id: currentId } }));\r\n        }\r\n      });\r\n    }\r\n\r\n    // cleanup\r\n    return () => {\r\n      dispatch(resetPlacementLocations());\r\n      dispatch(resetMarket());\r\n      dispatch(bulkPlacementClear());\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // collapse placement summary if a new market is selected\r\n    if (marketSelectedId) {\r\n      setPlacementExpanded(false);\r\n    }\r\n  }, [marketSelectedId]);\r\n\r\n  const isPlacementReady = () => {\r\n    const paramsId = get(params, 'id');\r\n    const selectedId = get(placementSelected, 'id');\r\n\r\n    return !!paramsId && !!selectedId && paramsId.toString() === selectedId.toString();\r\n  };\r\n\r\n  const setActiveStep = (breadcrumbs) => {\r\n    return breadcrumbs.map((item) => {\r\n      if (item.name === 'marketing' && history.location.pathname.includes('/placement/marketing/')) {\r\n        item.active = true;\r\n      } else {\r\n        item.active = history.location.pathname === item.link;\r\n      }\r\n\r\n      return item;\r\n    });\r\n  };\r\n\r\n  const handleExpand = () => {\r\n    setPlacementExpanded(!placementExpanded);\r\n  };\r\n\r\n  const breadcrumbsLinks = utils.placement.getFilteredBreadcrumbs({\r\n    breadcrumbs,\r\n    placement: placementSelected,\r\n    isBroker: userIsBroker,\r\n    isDev,\r\n    statusBoundId: refDataStatusIdPlacementBound,\r\n  });\r\n\r\n  const placementName = utils.placement.getInsureds(placementSelected);\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>{`${utils.string.t('app.placement')}${placementName ? ` - ${placementName}` : ''} - ${utils.app.getAppName(\r\n          uiBrand\r\n        )}`}</title>\r\n      </Helmet>\r\n\r\n      <PlacementView\r\n        isDev={isDev}\r\n        isReady={isPlacementReady() && refDataLoaded}\r\n        breadcrumbs={setActiveStep(breadcrumbsLinks)}\r\n        isBroker={userIsBroker}\r\n        placementExpanded={placementExpanded}\r\n        placementSelected={placementSelected}\r\n        openingMemo={openingMemo}\r\n        market={market}\r\n        handlers={{\r\n          expandPlacement: handleExpand,\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}