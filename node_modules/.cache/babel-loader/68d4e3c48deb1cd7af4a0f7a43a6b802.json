{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as utils from 'utils';\nimport { addLoader, removeLoader, authLogout } from 'stores';\nexport var getUsersInRoles = function getUsersInRoles(roles) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/processingInstructions.actions.getUsersInRoles'\n    };\n    dispatch(getUsersInRolesRequest(roles));\n    dispatch(addLoader('getUsersInRoles'));\n\n    if (utils.generic.isInvalidOrEmptyArray(roles)) {\n      dispatch(getUsersInRolesFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Invalid roles param'\n      })));\n    }\n\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.authService,\n      path: \"api/users/inRoles?userRoleLst=\".concat(roles.join(','))\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(getUsersInRolesSuccess(data.data));\n      return data.data;\n    }).catch(function (err) {\n      utils.api.handleError(err, _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API fetch error (processingInstructions.getUsersInRoles)'\n      }));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(getUsersInRolesFailure(err));\n      return err;\n    }).finally(function () {\n      dispatch(removeLoader('getUsersInRoles'));\n    });\n  };\n};\nexport var getUsersInRolesRequest = function getUsersInRolesRequest(payload) {\n  return {\n    type: 'PROCESSING_INSTRUCTIONS_GET_USERS_IN_ROLES_REQUEST',\n    payload: payload\n  };\n};\nexport var getUsersInRolesSuccess = function getUsersInRolesSuccess(responseData) {\n  return {\n    type: 'PROCESSING_INSTRUCTIONS_GET_USERS_IN_ROLES_SUCCESS',\n    payload: responseData\n  };\n};\nexport var getUsersInRolesFailure = function getUsersInRolesFailure(error) {\n  return {\n    type: 'PROCESSING_INSTRUCTIONS_GET_USERS_IN_ROLES_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/processingInstructions/processingInstructions.actions.getUsersInRoles.js"],"names":["utils","addLoader","removeLoader","authLogout","getUsersInRoles","roles","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","getUsersInRolesRequest","generic","isInvalidOrEmptyArray","getUsersInRolesFailure","message","api","get","token","accessToken","authService","path","join","then","response","handleResponse","json","handleNewData","data","getUsersInRolesSuccess","catch","err","handleError","handleUnauthorized","finally","payload","type","responseData","error"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,EAAoBC,YAApB,EAAkCC,UAAlC,QAAoD,QAApD;AAEA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SAAW,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAChE;AADgE,oBAEPA,QAAQ,EAFD;AAAA,QAEhDC,IAFgD,aAExDC,IAFwD,CAEhDD,IAFgD;AAAA,QAEtBE,QAFsB,aAExCC,MAFwC,CAE9BC,IAF8B,CAEtBF,QAFsB;;AAIhE,QAAMG,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE;AADa,KAArB;AAIAR,IAAAA,QAAQ,CAACS,sBAAsB,CAACV,KAAD,CAAvB,CAAR;AACAC,IAAAA,QAAQ,CAACL,SAAS,CAAC,iBAAD,CAAV,CAAR;;AAEA,QAAID,KAAK,CAACgB,OAAN,CAAcC,qBAAd,CAAoCZ,KAApC,CAAJ,EAAgD;AAC9CC,MAAAA,QAAQ,CAACY,sBAAsB,iCAAML,YAAN;AAAoBM,QAAAA,OAAO,EAAE;AAA7B,SAAvB,CAAR;AACD;;AAED,WAAOnB,KAAK,CAACoB,GAAN,CACJC,GADI,CACA;AACHC,MAAAA,KAAK,EAAEd,IAAI,CAACe,WADT;AAEHb,MAAAA,QAAQ,EAAEA,QAAQ,CAACc,WAFhB;AAGHC,MAAAA,IAAI,0CAAmCpB,KAAK,CAACqB,IAAN,CAAW,GAAX,CAAnC;AAHD,KADA,EAMJC,IANI,CAMC,UAACC,QAAD;AAAA,aAAc5B,KAAK,CAACoB,GAAN,CAAUS,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAND,EAOJD,IAPI,CAOC,UAACG,IAAD;AAAA,aAAU9B,KAAK,CAACoB,GAAN,CAAUW,aAAV,CAAwBD,IAAxB,CAAV;AAAA,KAPD,EAQJH,IARI,CAQC,UAACK,IAAD,EAAU;AACd1B,MAAAA,QAAQ,CAAC2B,sBAAsB,CAACD,IAAI,CAACA,IAAN,CAAvB,CAAR;AACA,aAAOA,IAAI,CAACA,IAAZ;AACD,KAXI,EAYJE,KAZI,CAYE,UAACC,GAAD,EAAS;AACdnC,MAAAA,KAAK,CAACoB,GAAN,CAAUgB,WAAV,CAAsBD,GAAtB,kCAAgCtB,YAAhC;AAA8CM,QAAAA,OAAO,EAAE;AAAvD;AACAnB,MAAAA,KAAK,CAACoB,GAAN,CAAUiB,kBAAV,CAA6BF,GAA7B,EAAkC7B,QAAlC,EAA4CH,UAA5C;AACAG,MAAAA,QAAQ,CAACY,sBAAsB,CAACiB,GAAD,CAAvB,CAAR;AACA,aAAOA,GAAP;AACD,KAjBI,EAkBJG,OAlBI,CAkBI,YAAM;AACbhC,MAAAA,QAAQ,CAACJ,YAAY,CAAC,iBAAD,CAAb,CAAR;AACD,KApBI,CAAP;AAqBD,GApC8B;AAAA,CAAxB;AAsCP,OAAO,IAAMa,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACwB,OAAD,EAAa;AACjD,SAAO;AACLC,IAAAA,IAAI,EAAE,oDADD;AAELD,IAAAA,OAAO,EAAPA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,IAAMN,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACQ,YAAD,EAAkB;AACtD,SAAO;AACLD,IAAAA,IAAI,EAAE,oDADD;AAELD,IAAAA,OAAO,EAAEE;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMvB,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACwB,KAAD,EAAW;AAC/C,SAAO;AACLF,IAAAA,IAAI,EAAE,oDADD;AAELD,IAAAA,OAAO,EAAEG;AAFJ,GAAP;AAID,CALM","sourcesContent":["import * as utils from 'utils';\r\nimport { addLoader, removeLoader, authLogout } from 'stores';\r\n\r\nexport const getUsersInRoles = (roles) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/processingInstructions.actions.getUsersInRoles',\r\n  };\r\n\r\n  dispatch(getUsersInRolesRequest(roles));\r\n  dispatch(addLoader('getUsersInRoles'));\r\n\r\n  if (utils.generic.isInvalidOrEmptyArray(roles)) {\r\n    dispatch(getUsersInRolesFailure({ ...defaultError, message: 'Invalid roles param' }));\r\n  }\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.authService,\r\n      path: `api/users/inRoles?userRoleLst=${roles.join(',')}`,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(getUsersInRolesSuccess(data.data));\r\n      return data.data;\r\n    })\r\n    .catch((err) => {\r\n      utils.api.handleError(err, { ...defaultError, message: 'API fetch error (processingInstructions.getUsersInRoles)' });\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(getUsersInRolesFailure(err));\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('getUsersInRoles'));\r\n    });\r\n};\r\n\r\nexport const getUsersInRolesRequest = (payload) => {\r\n  return {\r\n    type: 'PROCESSING_INSTRUCTIONS_GET_USERS_IN_ROLES_REQUEST',\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const getUsersInRolesSuccess = (responseData) => {\r\n  return {\r\n    type: 'PROCESSING_INSTRUCTIONS_GET_USERS_IN_ROLES_SUCCESS',\r\n    payload: responseData,\r\n  };\r\n};\r\n\r\nexport const getUsersInRolesFailure = (error) => {\r\n  return {\r\n    type: 'PROCESSING_INSTRUCTIONS_GET_USERS_IN_ROLES_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}