{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\components\\\\MultiSelect\\\\MultiSelect.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types'; // app\n\nimport { MultiSelectView } from './MultiSelect.view';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nMultiSelect.propTypes = {\n  id: PropTypes.string.isRequired,\n  search: PropTypes.bool,\n  options: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n    name: PropTypes.string.isRequired\n  })).isRequired,\n  values: PropTypes.array,\n  placeholder: PropTypes.string,\n  max: PropTypes.number,\n  labels: PropTypes.shape({\n    maxReached: PropTypes.string\n  }),\n  handlers: PropTypes.shape({\n    toggleOption: PropTypes.func\n  })\n};\nMultiSelect.defaultProps = {\n  max: 0,\n  options: [],\n  values: [],\n  labels: {},\n  handlers: {},\n  nestedClasses: {}\n};\nexport default function MultiSelect(_ref) {\n  _s();\n\n  var id = _ref.id,\n      options = _ref.options,\n      values = _ref.values,\n      placeholder = _ref.placeholder,\n      handlers = _ref.handlers,\n      props = _objectWithoutProperties(_ref, [\"id\", \"options\", \"values\", \"placeholder\", \"handlers\"]);\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      query = _useState2[0],\n      setQuery = _useState2[1];\n\n  var onKeyStroke = function onKeyStroke(value) {\n    setQuery(value);\n  };\n\n  var onClear = function onClear(reset) {\n    return function (event) {\n      setQuery('');\n      reset();\n    };\n  };\n\n  var onToggleOption = function onToggleOption(item) {\n    if (utils.generic.isFunction(handlers.toggleOption)) {\n      handlers.toggleOption(id, item);\n    }\n  };\n\n  var field = {\n    name: \"multi-select-search-\".concat(id),\n    placeholder: placeholder || '',\n    defaultValue: '',\n    onChange: function onChange(value) {\n      onKeyStroke(value ? value.trim() : '');\n      return value;\n    },\n    muiComponentProps: {\n      autoComplete: 'off'\n    }\n  }; // abort\n\n  if (utils.generic.isInvalidOrEmptyArray(options)) return null;\n  var optionsFiltered = options.filter(function (value) {\n    var name = ((value === null || value === void 0 ? void 0 : value.name) || '').toLowerCase();\n    return query ? name.includes(query.toLowerCase()) : true;\n  });\n  return /*#__PURE__*/_jsxDEV(MultiSelectView, _objectSpread({\n    id: \"multi-select-\".concat(id),\n    field: field,\n    query: query,\n    options: optionsFiltered,\n    selectedItems: values,\n    handlers: {\n      onClear: onClear,\n      onToggleOption: onToggleOption\n    }\n  }, props), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MultiSelect, \"qO/HZodsWTfJhuzZtdaxiosei2U=\");\n\n_c = MultiSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiSelect\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/MultiSelect/MultiSelect.js"],"names":["React","useState","PropTypes","MultiSelectView","utils","MultiSelect","propTypes","id","string","isRequired","search","bool","options","arrayOf","shape","oneOfType","number","name","values","array","placeholder","max","labels","maxReached","handlers","toggleOption","func","defaultProps","nestedClasses","props","query","setQuery","onKeyStroke","value","onClear","reset","event","onToggleOption","item","generic","isFunction","field","defaultValue","onChange","trim","muiComponentProps","autoComplete","isInvalidOrEmptyArray","optionsFiltered","filter","toLowerCase","includes"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// app\r\nimport { MultiSelectView } from './MultiSelect.view';\r\nimport * as utils from 'utils';\r\n\r\nMultiSelect.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  search: PropTypes.bool,\r\n  options: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n      name: PropTypes.string.isRequired,\r\n    })\r\n  ).isRequired,\r\n  values: PropTypes.array,\r\n  placeholder: PropTypes.string,\r\n  max: PropTypes.number,\r\n  labels: PropTypes.shape({\r\n    maxReached: PropTypes.string,\r\n  }),\r\n  handlers: PropTypes.shape({\r\n    toggleOption: PropTypes.func,\r\n  }),\r\n};\r\n\r\nMultiSelect.defaultProps = {\r\n  max: 0,\r\n  options: [],\r\n  values: [],\r\n  labels: {},\r\n  handlers: {},\r\n  nestedClasses: {},\r\n};\r\n\r\nexport default function MultiSelect({ id, options, values, placeholder, handlers, ...props }) {\r\n  const [query, setQuery] = useState('');\r\n\r\n  const onKeyStroke = (value) => {\r\n    setQuery(value);\r\n  };\r\n\r\n  const onClear = (reset) => (event) => {\r\n    setQuery('');\r\n    reset();\r\n  };\r\n\r\n  const onToggleOption = (item) => {\r\n    if (utils.generic.isFunction(handlers.toggleOption)) {\r\n      handlers.toggleOption(id, item);\r\n    }\r\n  };\r\n\r\n  const field = {\r\n    name: `multi-select-search-${id}`,\r\n    placeholder: placeholder || '',\r\n    defaultValue: '',\r\n    onChange: (value) => {\r\n      onKeyStroke(value ? value.trim() : '');\r\n      return value;\r\n    },\r\n    muiComponentProps: {\r\n      autoComplete: 'off',\r\n    },\r\n  };\r\n\r\n  // abort\r\n  if (utils.generic.isInvalidOrEmptyArray(options)) return null;\r\n\r\n  const optionsFiltered = options.filter((value) => {\r\n    const name = (value?.name || '').toLowerCase();\r\n    return query ? name.includes(query.toLowerCase()) : true;\r\n  });\r\n\r\n  return (\r\n    <MultiSelectView\r\n      id={`multi-select-${id}`}\r\n      field={field}\r\n      query={query}\r\n      options={optionsFiltered}\r\n      selectedItems={values}\r\n      handlers={{\r\n        onClear,\r\n        onToggleOption,\r\n      }}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}