{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { authLogout, enqueueNotification } from 'stores';\nimport * as utils from 'utils';\nimport isEmpty from 'lodash/isEmpty';\nexport var putQuoteRates = function putQuoteRates(commissionRates, quoteID) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/risk.actions.putQuoteRates',\n      message: 'Data missing for PUT request'\n    };\n\n    if (isEmpty(commissionRates) || !quoteID) {\n      dispatch(enqueueNotification('notification.generic.request', 'error'));\n      return;\n    }\n\n    var body = _objectSpread({}, commissionRates);\n\n    var path = \"api/v1/quotes/\".concat(quoteID, \"/rates\");\n    return utils.api.put({\n      token: auth.accessToken,\n      endpoint: endpoint.auth,\n      path: path,\n      data: body\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleResponseJsonObject(json);\n    }).then(function (data) {\n      dispatch(enqueueNotification('notification.putQuoteRates.success', 'success'));\n      return data;\n    })[\"catch\"](function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API post error (risk.putQuoteRates)'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(enqueueNotification(utils.api.getErrorMessage(err), 'error'));\n      return err;\n    });\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/risk/risk.actions.putQuoteRates.js"],"names":["authLogout","enqueueNotification","utils","isEmpty","putQuoteRates","commissionRates","quoteID","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","message","body","path","api","put","token","accessToken","data","then","response","handleResponse","json","handleResponseJsonObject","err","errorParams","handleError","handleUnauthorized","getErrorMessage"],"mappings":";AAAA,SAASA,UAAT,EAAqBC,mBAArB,QAAgD,QAAhD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AAEA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,eAAD,EAAkBC,OAAlB;AAAA,SAA8B,UAACC,QAAD,EAAWC,QAAX,EAAwB;AACjF;AADiF,oBAExBA,QAAQ,EAFgB;AAAA,QAEjEC,IAFiE,aAEzEC,IAFyE,CAEjED,IAFiE;AAAA,QAEvCE,QAFuC,aAEzDC,MAFyD,CAE/CC,IAF+C,CAEvCF,QAFuC;;AAIjF,QAAMG,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE,mCADa;AAEnBC,MAAAA,OAAO,EAAE;AAFU,KAArB;;AAKA,QAAIb,OAAO,CAACE,eAAD,CAAP,IAA4B,CAACC,OAAjC,EAA0C;AACxCC,MAAAA,QAAQ,CAACN,mBAAmB,CAAC,8BAAD,EAAiC,OAAjC,CAApB,CAAR;AACA;AACD;;AAED,QAAMgB,IAAI,qBACLZ,eADK,CAAV;;AAIA,QAAMa,IAAI,2BAAoBZ,OAApB,WAAV;AAEA,WAAOJ,KAAK,CAACiB,GAAN,CACJC,GADI,CACA;AACHC,MAAAA,KAAK,EAAEZ,IAAI,CAACa,WADT;AAEHX,MAAAA,QAAQ,EAAEA,QAAQ,CAACF,IAFhB;AAGHS,MAAAA,IAAI,EAAJA,IAHG;AAIHK,MAAAA,IAAI,EAAEN;AAJH,KADA,EAOJO,IAPI,CAOC,UAACC,QAAD;AAAA,aAAcvB,KAAK,CAACiB,GAAN,CAAUO,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAPD,EAQJD,IARI,CAQC,UAACG,IAAD;AAAA,aAAUzB,KAAK,CAACiB,GAAN,CAAUS,wBAAV,CAAmCD,IAAnC,CAAV;AAAA,KARD,EASJH,IATI,CASC,UAACD,IAAD,EAAU;AACdhB,MAAAA,QAAQ,CAACN,mBAAmB,CAAC,oCAAD,EAAuC,SAAvC,CAApB,CAAR;AACA,aAAOsB,IAAP;AACD,KAZI,WAcE,UAACM,GAAD,EAAS;AACd,UAAMC,WAAW,mCACZhB,YADY;AAEfE,QAAAA,OAAO,EAAE;AAFM,QAAjB;;AAKAd,MAAAA,KAAK,CAACiB,GAAN,CAAUY,WAAV,CAAsBF,GAAtB,EAA2BC,WAA3B;AACA5B,MAAAA,KAAK,CAACiB,GAAN,CAAUa,kBAAV,CAA6BH,GAA7B,EAAkCtB,QAAlC,EAA4CP,UAA5C;AACAO,MAAAA,QAAQ,CAACN,mBAAmB,CAACC,KAAK,CAACiB,GAAN,CAAUc,eAAV,CAA0BJ,GAA1B,CAAD,EAAiC,OAAjC,CAApB,CAAR;AACA,aAAOA,GAAP;AACD,KAxBI,CAAP;AAyBD,GA7C4B;AAAA,CAAtB","sourcesContent":["import { authLogout, enqueueNotification } from 'stores';\r\nimport * as utils from 'utils';\r\nimport isEmpty from 'lodash/isEmpty';\r\n\r\nexport const putQuoteRates = (commissionRates, quoteID) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/risk.actions.putQuoteRates',\r\n    message: 'Data missing for PUT request',\r\n  };\r\n\r\n  if (isEmpty(commissionRates) || !quoteID) {\r\n    dispatch(enqueueNotification('notification.generic.request', 'error'));\r\n    return;\r\n  }\r\n\r\n  const body = {\r\n    ...commissionRates,\r\n  };\r\n\r\n  const path = `api/v1/quotes/${quoteID}/rates`;\r\n\r\n  return utils.api\r\n    .put({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.auth,\r\n      path,\r\n      data: body,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleResponseJsonObject(json))\r\n    .then((data) => {\r\n      dispatch(enqueueNotification('notification.putQuoteRates.success', 'success'));\r\n      return data;\r\n    })\r\n\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        ...defaultError,\r\n        message: 'API post error (risk.putQuoteRates)',\r\n      };\r\n\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(enqueueNotification(utils.api.getErrorMessage(err), 'error'));\r\n      return err;\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}