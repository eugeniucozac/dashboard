{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { authLogout } from 'stores';\nimport * as utils from 'utils';\nexport var getCoverages = function getCoverages(id) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/risk.actions.getCoverage'\n    };\n    dispatch(getCoverageRequest(id));\n\n    if (!id) {\n      dispatch(getCoverageFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'ID missing'\n      })));\n      return _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'ID missing'\n      });\n    }\n\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.auth,\n      path: \"api/v1/risks/\".concat(id, \"/coverages\")\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleResponseJsonArray(json);\n    }).then(function (data) {\n      dispatch(getCoverageSuccess(data));\n      return data;\n    })[\"catch\"](function (err) {\n      utils.api.handleError(err, defaultError);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(getCoverageFailure(err));\n      return err;\n    });\n  };\n};\nexport var getCoverageRequest = function getCoverageRequest(id) {\n  return {\n    type: 'RISK_COVERAGE_GET_REQUEST',\n    payload: id\n  };\n};\nexport var getCoverageSuccess = function getCoverageSuccess(data) {\n  return {\n    type: 'RISK_COVERAGE_GET_SUCCESS',\n    payload: data\n  };\n};\nexport var getCoverageFailure = function getCoverageFailure(error) {\n  return {\n    type: 'RISK_COVERAGE_GET_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/risk/risk.actions.getCoverages.js"],"names":["authLogout","utils","getCoverages","id","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","getCoverageRequest","getCoverageFailure","message","api","get","token","accessToken","path","then","response","handleResponse","json","handleResponseJsonArray","data","getCoverageSuccess","err","handleError","handleUnauthorized","type","payload","error"],"mappings":";AAAA,SAASA,UAAT,QAA2B,QAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,EAAD;AAAA,SAAQ,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC1D;AAD0D,oBAEDA,QAAQ,EAFP;AAAA,QAE1CC,IAF0C,aAElDC,IAFkD,CAE1CD,IAF0C;AAAA,QAEhBE,QAFgB,aAElCC,MAFkC,CAExBC,IAFwB,CAEhBF,QAFgB;;AAI1D,QAAMG,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE;AADa,KAArB;AAIAR,IAAAA,QAAQ,CAACS,kBAAkB,CAACV,EAAD,CAAnB,CAAR;;AAEA,QAAI,CAACA,EAAL,EAAS;AACPC,MAAAA,QAAQ,CAACU,kBAAkB,iCAAMH,YAAN;AAAoBI,QAAAA,OAAO,EAAE;AAA7B,SAAnB,CAAR;AACA,6CAAYJ,YAAZ;AAA0BI,QAAAA,OAAO,EAAE;AAAnC;AACD;;AAED,WAAOd,KAAK,CAACe,GAAN,CACJC,GADI,CACA;AACHC,MAAAA,KAAK,EAAEZ,IAAI,CAACa,WADT;AAEHX,MAAAA,QAAQ,EAAEA,QAAQ,CAACF,IAFhB;AAGHc,MAAAA,IAAI,yBAAkBjB,EAAlB;AAHD,KADA,EAMJkB,IANI,CAMC,UAACC,QAAD;AAAA,aAAcrB,KAAK,CAACe,GAAN,CAAUO,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAND,EAOJD,IAPI,CAOC,UAACG,IAAD;AAAA,aAAUvB,KAAK,CAACe,GAAN,CAAUS,uBAAV,CAAkCD,IAAlC,CAAV;AAAA,KAPD,EAQJH,IARI,CAQC,UAACK,IAAD,EAAU;AACdtB,MAAAA,QAAQ,CAACuB,kBAAkB,CAACD,IAAD,CAAnB,CAAR;AACA,aAAOA,IAAP;AACD,KAXI,WAYE,UAACE,GAAD,EAAS;AACd3B,MAAAA,KAAK,CAACe,GAAN,CAAUa,WAAV,CAAsBD,GAAtB,EAA2BjB,YAA3B;AACAV,MAAAA,KAAK,CAACe,GAAN,CAAUc,kBAAV,CAA6BF,GAA7B,EAAkCxB,QAAlC,EAA4CJ,UAA5C;AACAI,MAAAA,QAAQ,CAACU,kBAAkB,CAACc,GAAD,CAAnB,CAAR;AACA,aAAOA,GAAP;AACD,KAjBI,CAAP;AAkBD,GAjC2B;AAAA,CAArB;AAmCP,OAAO,IAAMf,kBAAkB,GAAG,SAArBA,kBAAqB,CAACV,EAAD,EAAQ;AACxC,SAAO;AACL4B,IAAAA,IAAI,EAAE,2BADD;AAELC,IAAAA,OAAO,EAAE7B;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMwB,kBAAkB,GAAG,SAArBA,kBAAqB,CAACD,IAAD,EAAU;AAC1C,SAAO;AACLK,IAAAA,IAAI,EAAE,2BADD;AAELC,IAAAA,OAAO,EAAEN;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMZ,kBAAkB,GAAG,SAArBA,kBAAqB,CAACmB,KAAD,EAAW;AAC3C,SAAO;AACLF,IAAAA,IAAI,EAAE,2BADD;AAELC,IAAAA,OAAO,EAAEC;AAFJ,GAAP;AAID,CALM","sourcesContent":["import { authLogout } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const getCoverages = (id) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/risk.actions.getCoverage',\r\n  };\r\n\r\n  dispatch(getCoverageRequest(id));\r\n\r\n  if (!id) {\r\n    dispatch(getCoverageFailure({ ...defaultError, message: 'ID missing' }));\r\n    return { ...defaultError, message: 'ID missing' };\r\n  }\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.auth,\r\n      path: `api/v1/risks/${id}/coverages`,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleResponseJsonArray(json))\r\n    .then((data) => {\r\n      dispatch(getCoverageSuccess(data));\r\n      return data;\r\n    })\r\n    .catch((err) => {\r\n      utils.api.handleError(err, defaultError);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(getCoverageFailure(err));\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const getCoverageRequest = (id) => {\r\n  return {\r\n    type: 'RISK_COVERAGE_GET_REQUEST',\r\n    payload: id,\r\n  };\r\n};\r\n\r\nexport const getCoverageSuccess = (data) => {\r\n  return {\r\n    type: 'RISK_COVERAGE_GET_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const getCoverageFailure = (error) => {\r\n  return {\r\n    type: 'RISK_COVERAGE_GET_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}