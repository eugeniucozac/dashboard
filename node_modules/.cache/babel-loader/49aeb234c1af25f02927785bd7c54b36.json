{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\MarketSheetPDF\\\\MarketSheetPDF.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types'; // app\n\nimport * as utils from 'utils';\nimport { MarketSheetPDFView } from './MarketSheetPDF.view.js';\nimport toNumber from 'lodash/toNumber';\nimport { STATUS_MARKET_QUOTED, STATUS_POLICY_NTU } from 'consts';\nimport { selectRefDataDepartmentById, selectRefDataStatusIdByCode } from 'stores';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nMarketSheetPDF.propTypes = {\n  mudmapConfig: PropTypes.object.isRequired,\n  layers: PropTypes.object.isRequired,\n  mudmaps: PropTypes.object,\n  year: PropTypes.object.isRequired,\n  policiesFiltered: PropTypes.array.isRequired,\n  placement: PropTypes.object.isRequired,\n  formValues: PropTypes.object.isRequired\n};\nexport function MarketSheetPDF(_ref) {\n  _s();\n\n  var mudmapConfig = _ref.mudmapConfig,\n      layers = _ref.layers,\n      mudmaps = _ref.mudmaps,\n      year = _ref.year,\n      policiesFiltered = _ref.policiesFiltered,\n      placement = _ref.placement,\n      formValues = _ref.formValues;\n  var department = useSelector(selectRefDataDepartmentById(placement.departmentId)) || {};\n  var statusMarketQuoted = useSelector(selectRefDataStatusIdByCode('market', STATUS_MARKET_QUOTED));\n  var statusPolicyNtu = useSelector(selectRefDataStatusIdByCode('policy', STATUS_POLICY_NTU));\n  var comments = useSelector(function (state) {\n    return state.comment.items;\n  });\n\n  var getPoliciesMudmap = function getPoliciesMudmap(businessTypeId) {\n    var config = mudmaps && mudmaps[businessTypeId] || [];\n    return utils.policies.getMudmap(policiesFiltered.filter(function (policy) {\n      var isValidStatus = policy.statusId !== statusPolicyNtu;\n      var isSelectedGroup = policy.businessTypeId === toNumber(businessTypeId);\n      return isValidStatus && isSelectedGroup;\n    }), config, statusMarketQuoted, 'written');\n  };\n\n  var groups = Object.keys(layers).map(function (key, lIndex) {\n    return {\n      policies: layers[key].map(function (policy, pIndex) {\n        return _objectSpread(_objectSpread({}, policy), {}, {\n          markets: utils.placementPDF.getPDFMarkets(policy.markets, comments, placement.id, lIndex, pIndex)\n        });\n      }),\n      mudmap: getPoliciesMudmap(key),\n      businessTypeName: utils.referenceData.businessTypes.getNameById(department.businessTypes, toNumber(key))\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(MarketSheetPDFView, {\n    placementInfo: {\n      id: placement.id,\n      users: placement.users,\n      department: department && department.name,\n      insureds: utils.placement.getInsureds(placement),\n      clients: utils.placement.getClients(placement),\n      clientCount: placement.clients && placement.clients.length,\n      inceptionDate: placement.inceptionDate,\n      description: placement.description\n    },\n    pages: utils.placementPDF.getPages(groups, formValues, comments, placement.id),\n    yearObj: year,\n    mudmapConfig: mudmapConfig,\n    formValues: formValues\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MarketSheetPDF, \"cY/3OCRPwJCa/Hd4jaP6wzHwbt8=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = MarketSheetPDF;\nexport default MarketSheetPDF;\n\nvar _c;\n\n$RefreshReg$(_c, \"MarketSheetPDF\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/MarketSheetPDF/MarketSheetPDF.js"],"names":["React","useSelector","PropTypes","utils","MarketSheetPDFView","toNumber","STATUS_MARKET_QUOTED","STATUS_POLICY_NTU","selectRefDataDepartmentById","selectRefDataStatusIdByCode","MarketSheetPDF","propTypes","mudmapConfig","object","isRequired","layers","mudmaps","year","policiesFiltered","array","placement","formValues","department","departmentId","statusMarketQuoted","statusPolicyNtu","comments","state","comment","items","getPoliciesMudmap","businessTypeId","config","policies","getMudmap","filter","policy","isValidStatus","statusId","isSelectedGroup","groups","Object","keys","map","key","lIndex","pIndex","markets","placementPDF","getPDFMarkets","id","mudmap","businessTypeName","referenceData","businessTypes","getNameById","users","name","insureds","getInsureds","clients","getClients","clientCount","length","inceptionDate","description","getPages"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\n// app\r\nimport * as utils from 'utils';\r\nimport { MarketSheetPDFView } from './MarketSheetPDF.view.js';\r\nimport toNumber from 'lodash/toNumber';\r\nimport { STATUS_MARKET_QUOTED, STATUS_POLICY_NTU } from 'consts';\r\nimport { selectRefDataDepartmentById, selectRefDataStatusIdByCode } from 'stores';\r\n\r\nMarketSheetPDF.propTypes = {\r\n  mudmapConfig: PropTypes.object.isRequired,\r\n  layers: PropTypes.object.isRequired,\r\n  mudmaps: PropTypes.object,\r\n  year: PropTypes.object.isRequired,\r\n  policiesFiltered: PropTypes.array.isRequired,\r\n  placement: PropTypes.object.isRequired,\r\n  formValues: PropTypes.object.isRequired,\r\n};\r\n\r\nexport function MarketSheetPDF({ mudmapConfig, layers, mudmaps, year, policiesFiltered, placement, formValues }) {\r\n  const department = useSelector(selectRefDataDepartmentById(placement.departmentId)) || {};\r\n  const statusMarketQuoted = useSelector(selectRefDataStatusIdByCode('market', STATUS_MARKET_QUOTED));\r\n  const statusPolicyNtu = useSelector(selectRefDataStatusIdByCode('policy', STATUS_POLICY_NTU));\r\n  const comments = useSelector((state) => state.comment.items);\r\n\r\n  const getPoliciesMudmap = (businessTypeId) => {\r\n    const config = (mudmaps && mudmaps[businessTypeId]) || [];\r\n    return utils.policies.getMudmap(\r\n      policiesFiltered.filter((policy) => {\r\n        const isValidStatus = policy.statusId !== statusPolicyNtu;\r\n        const isSelectedGroup = policy.businessTypeId === toNumber(businessTypeId);\r\n        return isValidStatus && isSelectedGroup;\r\n      }),\r\n      config,\r\n      statusMarketQuoted,\r\n      'written'\r\n    );\r\n  };\r\n\r\n  const groups = Object.keys(layers).map((key, lIndex) => {\r\n    return {\r\n      policies: layers[key].map((policy, pIndex) => ({\r\n        ...policy,\r\n        markets: utils.placementPDF.getPDFMarkets(policy.markets, comments, placement.id, lIndex, pIndex),\r\n      })),\r\n      mudmap: getPoliciesMudmap(key),\r\n      businessTypeName: utils.referenceData.businessTypes.getNameById(department.businessTypes, toNumber(key)),\r\n    };\r\n  });\r\n\r\n  return (\r\n    <MarketSheetPDFView\r\n      placementInfo={{\r\n        id: placement.id,\r\n        users: placement.users,\r\n        department: department && department.name,\r\n        insureds: utils.placement.getInsureds(placement),\r\n        clients: utils.placement.getClients(placement),\r\n        clientCount: placement.clients && placement.clients.length,\r\n        inceptionDate: placement.inceptionDate,\r\n        description: placement.description,\r\n      }}\r\n      pages={utils.placementPDF.getPages(groups, formValues, comments, placement.id)}\r\n      yearObj={year}\r\n      mudmapConfig={mudmapConfig}\r\n      formValues={formValues}\r\n    />\r\n  );\r\n}\r\n\r\nexport default MarketSheetPDF;\r\n"]},"metadata":{},"sourceType":"module"}