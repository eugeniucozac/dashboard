{"ast":null,"code":"import _defineProperty from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\components\\\\DrawerComponent\\\\DrawerComponent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames'; // app\n\nimport styles from './DrawerComponent.styles';\nimport { setDmsWidgetExpand } from 'stores'; // mui\n\nimport { makeStyles, Drawer, Divider, IconButton } from '@material-ui/core';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nDrawerComponent.propTypes = {\n  isDrawerOpen: PropTypes.bool.isRequired,\n  isFromDashboard: PropTypes.bool\n};\nexport default function DrawerComponent(_ref) {\n  _s();\n\n  var _classnames, _classnames2;\n\n  var isDrawerOpen = _ref.isDrawerOpen,\n      children = _ref.children,\n      isFromDashboard = _ref.isFromDashboard;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isExpanded = _useState2[0],\n      setIsExpanded = _useState2[1];\n\n  var classes = makeStyles(styles, {\n    name: 'DrawerComponent'\n  })({\n    isFromDashboard: isFromDashboard,\n    isExpanded: isExpanded\n  });\n  var dispatch = useDispatch();\n\n  var handleArrowClick = function handleArrowClick() {\n    setIsExpanded(!isExpanded);\n  };\n\n  useEffect(function () {\n    dispatch(setDmsWidgetExpand(isExpanded));\n  }, [isExpanded]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/_jsxDEV(Drawer, {\n    variant: \"persistent\",\n    anchor: \"right\",\n    open: isDrawerOpen,\n    classes: {\n      paper: classes.drawer\n    },\n    children: [/*#__PURE__*/_jsxDEV(IconButton, {\n      color: \"inherit\",\n      \"aria-label\": \"open\",\n      edge: \"start\",\n      disableRipple: true,\n      disableFocusRipple: true,\n      onClick: handleArrowClick,\n      className: classnames((_classnames = {}, _defineProperty(_classnames, classes.button, true), _defineProperty(_classnames, classes.buttonExpanded, isExpanded), _classnames)),\n      children: [isExpanded ? /*#__PURE__*/_jsxDEV(ChevronRightIcon, {\n        className: classnames((_classnames2 = {}, _defineProperty(_classnames2, classes.iconArrow, true), _defineProperty(_classnames2, classes.iconArrowExpanded, isExpanded), _classnames2))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(ChevronLeftIcon, {\n        className: classes.iconArrow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), isExpanded ? null : /*#__PURE__*/_jsxDEV(DescriptionIcon, {\n        className: classes.iconDocument\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DrawerComponent, \"ZToD/Nw7XeWfw+r2YKh13AXROrU=\", false, function () {\n  return [useDispatch];\n});\n\n_c = DrawerComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"DrawerComponent\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/DrawerComponent/DrawerComponent.js"],"names":["React","useState","useEffect","useDispatch","PropTypes","classnames","styles","setDmsWidgetExpand","makeStyles","Drawer","Divider","IconButton","ChevronLeftIcon","ChevronRightIcon","DescriptionIcon","DrawerComponent","propTypes","isDrawerOpen","bool","isRequired","isFromDashboard","children","isExpanded","setIsExpanded","classes","name","dispatch","handleArrowClick","paper","drawer","button","buttonExpanded","iconArrow","iconArrowExpanded","iconDocument"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames';\r\n\r\n// app\r\nimport styles from './DrawerComponent.styles';\r\nimport { setDmsWidgetExpand } from 'stores';\r\n\r\n// mui\r\nimport { makeStyles, Drawer, Divider, IconButton } from '@material-ui/core';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\n\r\nDrawerComponent.propTypes = {\r\n  isDrawerOpen: PropTypes.bool.isRequired,\r\n  isFromDashboard: PropTypes.bool,\r\n};\r\n\r\nexport default function DrawerComponent({ isDrawerOpen, children, isFromDashboard }) {\r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n\r\n  const classes = makeStyles(styles, { name: 'DrawerComponent' })({ isFromDashboard, isExpanded });\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleArrowClick = () => {\r\n    setIsExpanded(!isExpanded);\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(setDmsWidgetExpand(isExpanded));\r\n  }, [isExpanded]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <Drawer variant=\"persistent\" anchor=\"right\" open={isDrawerOpen} classes={{ paper: classes.drawer }}>\r\n      <IconButton\r\n        color=\"inherit\"\r\n        aria-label=\"open\"\r\n        edge=\"start\"\r\n        disableRipple\r\n        disableFocusRipple\r\n        onClick={handleArrowClick}\r\n        className={classnames({\r\n          [classes.button]: true,\r\n          [classes.buttonExpanded]: isExpanded,\r\n        })}\r\n      >\r\n        {isExpanded ? (\r\n          <ChevronRightIcon\r\n            className={classnames({\r\n              [classes.iconArrow]: true,\r\n              [classes.iconArrowExpanded]: isExpanded,\r\n            })}\r\n          />\r\n        ) : (\r\n          <ChevronLeftIcon className={classes.iconArrow} />\r\n        )}\r\n        {isExpanded ? null : <DescriptionIcon className={classes.iconDocument} />}\r\n      </IconButton>\r\n      <Divider />\r\n      {children}\r\n    </Drawer>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}