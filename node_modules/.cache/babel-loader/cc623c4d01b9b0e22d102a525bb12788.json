{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ClaimsSelectPolicy\\\\ClaimsSelectPolicy.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useForm } from 'react-hook-form'; //app\n\nimport { ClaimsSelectPolicyView } from './ClaimsSelectPolicy.view';\nimport { useFlexiColumns } from 'hooks';\nimport * as utils from 'utils';\nimport { getPolicies, selectPolicies, selectClaimsPolicyData, claimsPolicyData, selectPoliciesFilterLoading, resetUnderwritingGroups, sortingUnderwritingGroups } from 'stores';\nimport * as constants from 'consts';\nimport { MultiSelect, FormDate } from 'components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nClaimsSelectPolicy.propTypes = {\n  setConfirm: PropTypes.func.isRequired\n};\nexport default function ClaimsSelectPolicy(_ref) {\n  _s();\n\n  var _policies$filters, _policies$filters2, _policies$filters3, _policies$filters4, _policies$filters5, _policies$filters6, _policies$filters7, _policies$filters8, _policies$filters9, _policies$filters10, _policies$filters11, _policies$filters12, _policies$filters13, _policies$filters14;\n\n  var setConfirm = _ref.setConfirm;\n  var dispatch = useDispatch();\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      searchTerm = _useState2[0],\n      setSearchTerm = _useState2[1];\n\n  var policyData = useSelector(selectClaimsPolicyData);\n  var policies = useSelector(selectPolicies);\n  useEffect(function () {\n    var _policies$items;\n\n    if ((policies === null || policies === void 0 ? void 0 : (_policies$items = policies.items) === null || _policies$items === void 0 ? void 0 : _policies$items.length) > 0 && (policyData === null || policyData === void 0 ? void 0 : policyData.xbPolicyID)) {\n      var isPolicyExist = policies.items.some(function (policy) {\n        return policy.xbPolicyID === Number(policyData.xbPolicyID);\n      });\n      setConfirm(isPolicyExist);\n    }\n  }, [policies]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    dispatch(resetUnderwritingGroups());\n    dispatch(sortingUnderwritingGroups([])); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  var isFetchingFilters = useSelector(selectPoliciesFilterLoading);\n\n  var _useState3 = useState(constants.CLAIMS_POLICY_SEARCH_OPTION.policyRef),\n      _useState4 = _slicedToArray(_useState3, 2),\n      searchBy = _useState4[0],\n      setSearchBy = _useState4[1];\n\n  var _useState5 = useState(utils.string.t('claims.searchPolicy.searchByOptions.PolicyRef')),\n      _useState6 = _slicedToArray(_useState5, 2),\n      searchByText = _useState6[0],\n      setSearchByText = _useState6[1];\n\n  var searchTypeCall = constants.CLAIM_POLICY_SEARCH_REQ_TYPES.search;\n  var filterTypeCall = constants.CLAIM_POLICY_SEARCH_REQ_TYPES.filter;\n  var selectOptions = [{\n    label: utils.string.t('claims.searchPolicy.searchByOptions.PolicyRef'),\n    value: constants.CLAIMS_POLICY_SEARCH_OPTION.policyRef\n  }, {\n    label: utils.string.t('claims.searchPolicy.searchByOptions.Insured'),\n    value: constants.CLAIMS_POLICY_SEARCH_OPTION.insured\n  }, {\n    label: utils.string.t('claims.searchPolicy.searchByOptions.Claimant'),\n    value: constants.CLAIMS_POLICY_SEARCH_OPTION.claimant\n  }, {\n    label: utils.string.t('claims.searchPolicy.searchByOptions.ClientName'),\n    value: constants.CLAIMS_POLICY_SEARCH_OPTION.clientName\n  }, {\n    label: utils.string.t('claims.searchPolicy.searchByOptions.RiskDetails'),\n    value: constants.CLAIMS_POLICY_SEARCH_OPTION.riskDetails\n  }];\n  var defaultFormFields = [{\n    name: 'inceptionDate',\n    type: 'datepicker',\n    value: null\n  }, {\n    name: 'expiryDate',\n    type: 'datepicker',\n    value: null\n  }];\n  var defaultValues = utils.form.getInitialValues(defaultFormFields);\n\n  var _useForm = useForm({\n    defaultValues: defaultValues\n  }),\n      control = _useForm.control,\n      reset = _useForm.reset;\n\n  var viewFields = [{\n    name: 'searchBy',\n    type: 'autocompletemui',\n    options: selectOptions,\n    value: (selectOptions === null || selectOptions === void 0 ? void 0 : selectOptions.find(function (item) {\n      return (item === null || item === void 0 ? void 0 : item.value) === constants.CLAIMS_POLICY_SEARCH_OPTION.policyRef;\n    })) || null,\n    validation: Yup.object().nullable().required(utils.string.t('validation.required')),\n    muiComponentProps: {\n      inputProps: {\n        title: searchByText || ''\n      }\n    }\n  }];\n  var viewDefaultValues = utils.form.getInitialValues(viewFields);\n  var viewValidationSchema = utils.form.getValidationSchema(viewFields);\n\n  var _useForm2 = useForm(_objectSpread({\n    viewDefaultValues: viewDefaultValues\n  }, viewValidationSchema && {\n    resolver: yupResolver(viewValidationSchema)\n  })),\n      viewControl = _useForm2.control;\n\n  var tableFilterFields = [{\n    id: 'policyType',\n    type: 'multiSelect',\n    label: utils.string.t('claims.searchPolicy.columns.policyType'),\n    placeholder: utils.string.t('claims.filterPlaceHolderText'),\n    value: [],\n    options: ((_policies$filters = policies.filters) === null || _policies$filters === void 0 ? void 0 : _policies$filters.policyType) || [],\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"policyType\",\n      search: true,\n      options: ((_policies$filters2 = policies.filters) === null || _policies$filters2 === void 0 ? void 0 : _policies$filters2.policyType) || []\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 16\n    }, this)\n  }, {\n    id: 'insured',\n    type: 'multiSelect',\n    label: utils.string.t('claims.searchPolicy.columns.insured'),\n    placeholder: utils.string.t('claims.filterPlaceHolderText'),\n    value: [],\n    options: ((_policies$filters3 = policies.filters) === null || _policies$filters3 === void 0 ? void 0 : _policies$filters3.insured) || [],\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"insured\",\n      search: true,\n      options: ((_policies$filters4 = policies.filters) === null || _policies$filters4 === void 0 ? void 0 : _policies$filters4.insured) || []\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 16\n    }, this)\n  }, {\n    id: 'reinsured',\n    type: 'multiSelect',\n    label: utils.string.t('claims.searchPolicy.columns.reinsured'),\n    placeholder: utils.string.t('claims.filterPlaceHolderText'),\n    value: [],\n    options: ((_policies$filters5 = policies.filters) === null || _policies$filters5 === void 0 ? void 0 : _policies$filters5.reinsured) || [],\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"reinsured\",\n      search: true,\n      options: ((_policies$filters6 = policies.filters) === null || _policies$filters6 === void 0 ? void 0 : _policies$filters6.reinsured) || []\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 16\n    }, this)\n  }, {\n    id: 'clientName',\n    type: 'multiSelect',\n    label: utils.string.t('claims.searchPolicy.columns.client'),\n    placeholder: utils.string.t('claims.filterPlaceHolderText'),\n    value: [],\n    options: ((_policies$filters7 = policies.filters) === null || _policies$filters7 === void 0 ? void 0 : _policies$filters7.clientName) || [],\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"clientName\",\n      search: true,\n      options: ((_policies$filters8 = policies.filters) === null || _policies$filters8 === void 0 ? void 0 : _policies$filters8.clientName) || []\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 16\n    }, this)\n  }, {\n    id: 'riskDetails',\n    type: 'multiSelect',\n    label: utils.string.t('claims.searchPolicy.columns.riskDetails'),\n    placeholder: utils.string.t('claims.filterPlaceHolderText'),\n    value: [],\n    options: ((_policies$filters9 = policies.filters) === null || _policies$filters9 === void 0 ? void 0 : _policies$filters9.riskDetails) || [],\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"riskDetails\",\n      search: true,\n      options: ((_policies$filters10 = policies.filters) === null || _policies$filters10 === void 0 ? void 0 : _policies$filters10.riskDetails) || []\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 16\n    }, this)\n  }, {\n    id: 'inceptionDate',\n    type: 'datepicker',\n    label: utils.string.t('claims.searchPolicy.columns.inceptionDate'),\n    value: '',\n    content: /*#__PURE__*/_jsxDEV(FormDate, _objectSpread(_objectSpread({\n      control: control\n    }, utils.form.getFieldProps(defaultFormFields, 'inceptionDate')), {}, {\n      id: \"datepicker\",\n      label: '',\n      plainText: true,\n      plainTextIcon: true,\n      placeholder: utils.string.t('app.selectDate'),\n      muiComponentProps: {\n        fullWidth: false,\n        margin: 'dense'\n      },\n      muiPickerProps: {\n        clearable: false,\n        variant: 'inline',\n        format: 'DD-MM-YYYY'\n      }\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }, this)\n  }, {\n    id: 'expiryDate',\n    type: 'datepicker',\n    label: utils.string.t('claims.searchPolicy.columns.expiryDate'),\n    placeholder: utils.string.t('claims.filterPlaceHolderText'),\n    value: '',\n    content: /*#__PURE__*/_jsxDEV(FormDate, _objectSpread(_objectSpread({\n      control: control\n    }, utils.form.getFieldProps(defaultFormFields, 'expiryDate')), {}, {\n      id: \"datepicker\",\n      label: '',\n      plainText: true,\n      plainTextIcon: true,\n      placeholder: utils.string.t('app.selectDate'),\n      muiComponentProps: {\n        fullWidth: false,\n        margin: 'dense'\n      },\n      muiPickerProps: {\n        clearable: false,\n        variant: 'inline',\n        format: 'DD-MM-YYYY'\n      }\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }, this)\n  }, {\n    id: 'division',\n    type: 'multiSelect',\n    label: utils.string.t('claims.searchPolicy.columns.division'),\n    placeholder: utils.string.t('claims.filterPlaceHolderText'),\n    value: [],\n    options: ((_policies$filters11 = policies.filters) === null || _policies$filters11 === void 0 ? void 0 : _policies$filters11.division) || [],\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"division\",\n      search: true,\n      options: ((_policies$filters12 = policies.filters) === null || _policies$filters12 === void 0 ? void 0 : _policies$filters12.division) || []\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 16\n    }, this)\n  }, {\n    id: 'policyStatus',\n    type: 'multiSelect',\n    label: utils.string.t('claims.searchPolicy.columns.policyStatus'),\n    placeholder: utils.string.t('claims.filterPlaceHolderText'),\n    value: [],\n    options: ((_policies$filters13 = policies.filters) === null || _policies$filters13 === void 0 ? void 0 : _policies$filters13.policyStatus) || [],\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"policyStatus\",\n      search: true,\n      options: ((_policies$filters14 = policies.filters) === null || _policies$filters14 === void 0 ? void 0 : _policies$filters14.policyStatus) || []\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 16\n    }, this)\n  }];\n  var columns = [{\n    id: 'policyRef',\n    label: utils.string.t('claims.searchPolicy.columns.contractPolicyRef'),\n    sort: {\n      type: '',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true,\n    mandatory: true\n  }, {\n    id: 'coverHolder',\n    label: utils.string.t('claims.searchPolicy.columns.coverHolder'),\n    sort: {\n      type: '',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true,\n    mandatory: false\n  }, {\n    id: 'statusCode',\n    label: utils.string.t('claims.searchPolicy.columns.policyStatus'),\n    sort: {\n      type: '',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true,\n    mandatory: false\n  }, {\n    id: 'policyType',\n    label: utils.string.t('claims.searchPolicy.columns.policyType'),\n    sort: {\n      type: '',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true,\n    mandatory: false\n  }, {\n    id: 'insured',\n    label: utils.string.t('claims.searchPolicy.columns.insured'),\n    sort: {\n      type: '',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true,\n    mandatory: false\n  }, {\n    id: 'reInsured',\n    label: utils.string.t('claims.searchPolicy.columns.reinsured'),\n    sort: {\n      type: '',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true,\n    mandatory: false\n  }, {\n    id: 'clientName',\n    label: utils.string.t('claims.searchPolicy.columns.client'),\n    sort: {\n      type: '',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true,\n    mandatory: false\n  }, {\n    id: 'riskDetails',\n    label: utils.string.t('claims.searchPolicy.columns.riskDetails'),\n    sort: {\n      type: '',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true,\n    mandatory: false\n  }, {\n    id: 'inceptionDate',\n    label: utils.string.t('claims.searchPolicy.columns.inceptionDate'),\n    sort: {\n      type: 'date',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true,\n    mandatory: true\n  }, {\n    id: 'expiryDate',\n    label: utils.string.t('claims.searchPolicy.columns.expiryDate'),\n    sort: {\n      type: 'date',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true,\n    mandatory: true\n  }, {\n    id: 'company',\n    label: utils.string.t('claims.searchPolicy.columns.company'),\n    sort: {\n      type: '',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true,\n    mandatory: false\n  }, {\n    id: 'division',\n    label: utils.string.t('claims.searchPolicy.columns.division'),\n    sort: {\n      type: '',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true,\n    mandatory: false\n  }];\n\n  var _useFlexiColumns = useFlexiColumns(columns),\n      columnsArray = _useFlexiColumns.columns,\n      columnProps = _useFlexiColumns.columnProps,\n      toggleColumn = _useFlexiColumns.toggleColumn;\n\n  var onSelectSearchBy = function onSelectSearchBy(searchByValue, searchByLabel) {\n    setSearchByText(searchByLabel);\n    setSearchBy(searchByValue);\n    dispatch(getPolicies({\n      requestType: searchTypeCall,\n      term: searchByValue,\n      direction: 'desc',\n      searchBy: searchBy\n    }));\n    dispatch(getPolicies({\n      requestType: filterTypeCall,\n      term: searchByValue,\n      direction: 'desc',\n      searchBy: searchBy\n    }));\n  };\n\n  var handlePolicyData = function handlePolicyData(event) {\n    var policyData = policies.items.find(function (policy) {\n      return policy.xbPolicyID === Number(event.target.value);\n    });\n    dispatch(claimsPolicyData(_objectSpread(_objectSpread({}, policyData), {}, {\n      xbPolicyID: event.target.value,\n      searchTerm: searchTerm\n    })));\n    setConfirm(true);\n  };\n\n  var handleSearch = function handleSearch(_ref2) {\n    var search = _ref2.search,\n        filters = _ref2.filters;\n\n    if (search) {\n      setSearchTerm(search);\n      dispatch(getPolicies({\n        requestType: searchTypeCall,\n        term: search,\n        direction: 'desc',\n        searchBy: searchBy\n      }));\n      dispatch(getPolicies({\n        requestType: filterTypeCall,\n        term: search,\n        direction: 'desc',\n        searchBy: searchBy,\n        filterTerm: filters\n      }));\n    }\n  };\n\n  var handleSearchFilter = function handleSearchFilter(_ref3) {\n    var search = _ref3.search,\n        filters = _ref3.filters;\n    dispatch(getPolicies({\n      requestType: searchTypeCall,\n      term: search,\n      direction: 'desc',\n      searchBy: searchBy,\n      filterTerm: filters\n    }));\n    dispatch(getPolicies({\n      requestType: filterTypeCall,\n      term: search,\n      direction: 'desc',\n      searchBy: searchBy,\n      filterTerm: filters\n    }));\n  };\n\n  var onResetFilter = function onResetFilter() {\n    reset();\n    dispatch(getPolicies({\n      requestType: searchTypeCall,\n      filterTerm: [],\n      searchBy: searchBy\n    }));\n  };\n\n  var onResetSearch = function onResetSearch() {\n    setSearchTerm('');\n  };\n\n  var handleChangePage = function handleChangePage(newPage) {\n    dispatch(getPolicies({\n      requestType: searchTypeCall,\n      term: searchTerm,\n      page: newPage,\n      direction: 'desc',\n      searchBy: searchBy\n    }));\n  };\n\n  var handleChangeRowsPerPage = function handleChangeRowsPerPage(rowsPerPage) {\n    dispatch(getPolicies({\n      requestType: searchTypeCall,\n      term: searchTerm,\n      size: rowsPerPage,\n      direction: 'desc',\n      searchBy: searchBy\n    }));\n  };\n\n  var handleSort = function handleSort(by, dir) {\n    getPolicies({\n      requestType: searchTypeCall,\n      term: searchTerm,\n      sortBy: by,\n      direction: dir,\n      searchBy: searchBy\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(ClaimsSelectPolicyView, {\n    columnsArray: columnsArray,\n    rows: (policies === null || policies === void 0 ? void 0 : policies.items) || [],\n    policyData: policyData,\n    sort: _objectSpread(_objectSpread({}, policies.sort), {}, {\n      type: 'id'\n    }),\n    pagination: {\n      page: policies.page,\n      rowsTotal: policies.itemsTotal,\n      rowsPerPage: policies.pageSize\n    },\n    tableFilterFields: tableFilterFields,\n    isFetchingFilters: isFetchingFilters,\n    viewFields: viewFields,\n    viewControl: viewControl,\n    handlers: {\n      handleSort: handleSort,\n      handleSearch: handleSearch,\n      handleSearchFilter: handleSearchFilter,\n      onResetFilter: onResetFilter,\n      onResetSearch: onResetSearch,\n      handlePolicyData: handlePolicyData,\n      handleChangePage: handleChangePage,\n      handleChangeRowsPerPage: handleChangeRowsPerPage,\n      columnProps: columnProps,\n      toggleColumn: toggleColumn,\n      onSelectSearchBy: onSelectSearchBy\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 444,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ClaimsSelectPolicy, \"0V43G2SCFOomCXqCoQ7mCF905x0=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useForm, useForm, useFlexiColumns];\n});\n\n_c = ClaimsSelectPolicy;\nClaimsSelectPolicy.displayName = \"ClaimsSelectPolicy\";\nClaimsSelectPolicy.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"ClaimsSelectPolicy\",\n  \"props\": {\n    \"setConfirm\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\modules\\\\ClaimsSelectPolicy\\\\ClaimsSelectPolicy.js\"] = {\n    name: \"ClaimsSelectPolicy\",\n    docgenInfo: ClaimsSelectPolicy.__docgenInfo,\n    path: \"src\\\\modules\\\\ClaimsSelectPolicy\\\\ClaimsSelectPolicy.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimsSelectPolicy\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ClaimsSelectPolicy/ClaimsSelectPolicy.js"],"names":["React","useState","useEffect","useDispatch","useSelector","Yup","PropTypes","yupResolver","useForm","ClaimsSelectPolicyView","useFlexiColumns","utils","getPolicies","selectPolicies","selectClaimsPolicyData","claimsPolicyData","selectPoliciesFilterLoading","resetUnderwritingGroups","sortingUnderwritingGroups","constants","MultiSelect","FormDate","ClaimsSelectPolicy","propTypes","setConfirm","func","isRequired","dispatch","searchTerm","setSearchTerm","policyData","policies","items","length","xbPolicyID","isPolicyExist","some","policy","Number","isFetchingFilters","CLAIMS_POLICY_SEARCH_OPTION","policyRef","searchBy","setSearchBy","string","t","searchByText","setSearchByText","searchTypeCall","CLAIM_POLICY_SEARCH_REQ_TYPES","search","filterTypeCall","filter","selectOptions","label","value","insured","claimant","clientName","riskDetails","defaultFormFields","name","type","defaultValues","form","getInitialValues","control","reset","viewFields","options","find","item","validation","object","nullable","required","muiComponentProps","inputProps","title","viewDefaultValues","viewValidationSchema","getValidationSchema","resolver","viewControl","tableFilterFields","id","placeholder","filters","policyType","content","reinsured","getFieldProps","fullWidth","margin","clearable","variant","format","division","policyStatus","columns","sort","direction","nowrap","visible","mandatory","columnsArray","columnProps","toggleColumn","onSelectSearchBy","searchByValue","searchByLabel","requestType","term","handlePolicyData","event","target","handleSearch","filterTerm","handleSearchFilter","onResetFilter","onResetSearch","handleChangePage","newPage","page","handleChangeRowsPerPage","rowsPerPage","size","handleSort","by","dir","sortBy","rowsTotal","itemsTotal","pageSize"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport * as Yup from 'yup';\r\nimport PropTypes from 'prop-types';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useForm } from 'react-hook-form';\r\n\r\n//app\r\nimport { ClaimsSelectPolicyView } from './ClaimsSelectPolicy.view';\r\nimport { useFlexiColumns } from 'hooks';\r\nimport * as utils from 'utils';\r\nimport {\r\n  getPolicies,\r\n  selectPolicies,\r\n  selectClaimsPolicyData,\r\n  claimsPolicyData,\r\n  selectPoliciesFilterLoading,\r\n  resetUnderwritingGroups,\r\n  sortingUnderwritingGroups,\r\n} from 'stores';\r\nimport * as constants from 'consts';\r\nimport { MultiSelect, FormDate } from 'components';\r\n\r\nClaimsSelectPolicy.propTypes = {\r\n  setConfirm: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default function ClaimsSelectPolicy({ setConfirm }) {\r\n  const dispatch = useDispatch();\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const policyData = useSelector(selectClaimsPolicyData);\r\n  const policies = useSelector(selectPolicies);\r\n\r\n  useEffect(() => {\r\n    if (policies?.items?.length > 0 && policyData?.xbPolicyID) {\r\n      const isPolicyExist = policies.items.some((policy) => policy.xbPolicyID === Number(policyData.xbPolicyID));\r\n      setConfirm(isPolicyExist);\r\n    }\r\n  }, [policies]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    dispatch(resetUnderwritingGroups());\r\n    dispatch(sortingUnderwritingGroups([]));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const isFetchingFilters = useSelector(selectPoliciesFilterLoading);\r\n  const [searchBy, setSearchBy] = useState(constants.CLAIMS_POLICY_SEARCH_OPTION.policyRef);\r\n  const [searchByText, setSearchByText] = useState(utils.string.t('claims.searchPolicy.searchByOptions.PolicyRef'));\r\n  const searchTypeCall = constants.CLAIM_POLICY_SEARCH_REQ_TYPES.search;\r\n  const filterTypeCall = constants.CLAIM_POLICY_SEARCH_REQ_TYPES.filter;\r\n  const selectOptions = [\r\n    { label: utils.string.t('claims.searchPolicy.searchByOptions.PolicyRef'), value: constants.CLAIMS_POLICY_SEARCH_OPTION.policyRef },\r\n    { label: utils.string.t('claims.searchPolicy.searchByOptions.Insured'), value: constants.CLAIMS_POLICY_SEARCH_OPTION.insured },\r\n    { label: utils.string.t('claims.searchPolicy.searchByOptions.Claimant'), value: constants.CLAIMS_POLICY_SEARCH_OPTION.claimant },\r\n    { label: utils.string.t('claims.searchPolicy.searchByOptions.ClientName'), value: constants.CLAIMS_POLICY_SEARCH_OPTION.clientName },\r\n    { label: utils.string.t('claims.searchPolicy.searchByOptions.RiskDetails'), value: constants.CLAIMS_POLICY_SEARCH_OPTION.riskDetails },\r\n  ];\r\n  const defaultFormFields = [\r\n    {\r\n      name: 'inceptionDate',\r\n      type: 'datepicker',\r\n      value: null,\r\n    },\r\n    {\r\n      name: 'expiryDate',\r\n      type: 'datepicker',\r\n      value: null,\r\n    },\r\n  ];\r\n\r\n  const defaultValues = utils.form.getInitialValues(defaultFormFields);\r\n  const { control, reset } = useForm({ defaultValues });\r\n  const viewFields = [\r\n    {\r\n      name: 'searchBy',\r\n      type: 'autocompletemui',\r\n      options: selectOptions,\r\n      value: selectOptions?.find((item) => item?.value === constants.CLAIMS_POLICY_SEARCH_OPTION.policyRef) || null,\r\n      validation: Yup.object().nullable().required(utils.string.t('validation.required')),\r\n      muiComponentProps: {\r\n        inputProps: {\r\n          title: searchByText || '',\r\n        },\r\n      },\r\n    },\r\n  ];\r\n\r\n  const viewDefaultValues = utils.form.getInitialValues(viewFields);\r\n  const viewValidationSchema = utils.form.getValidationSchema(viewFields);\r\n\r\n  const { control: viewControl } = useForm({\r\n    viewDefaultValues,\r\n    ...(viewValidationSchema && { resolver: yupResolver(viewValidationSchema) }),\r\n  });\r\n\r\n  const tableFilterFields = [\r\n    {\r\n      id: 'policyType',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('claims.searchPolicy.columns.policyType'),\r\n      placeholder: utils.string.t('claims.filterPlaceHolderText'),\r\n      value: [],\r\n      options: policies.filters?.policyType || [],\r\n      content: <MultiSelect id=\"policyType\" search options={policies.filters?.policyType || []} />,\r\n    },\r\n    {\r\n      id: 'insured',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('claims.searchPolicy.columns.insured'),\r\n      placeholder: utils.string.t('claims.filterPlaceHolderText'),\r\n      value: [],\r\n      options: policies.filters?.insured || [],\r\n      content: <MultiSelect id=\"insured\" search options={policies.filters?.insured || []} />,\r\n    },\r\n    {\r\n      id: 'reinsured',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('claims.searchPolicy.columns.reinsured'),\r\n      placeholder: utils.string.t('claims.filterPlaceHolderText'),\r\n      value: [],\r\n      options: policies.filters?.reinsured || [],\r\n      content: <MultiSelect id=\"reinsured\" search options={policies.filters?.reinsured || []} />,\r\n    },\r\n    {\r\n      id: 'clientName',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('claims.searchPolicy.columns.client'),\r\n      placeholder: utils.string.t('claims.filterPlaceHolderText'),\r\n      value: [],\r\n      options: policies.filters?.clientName || [],\r\n      content: <MultiSelect id=\"clientName\" search options={policies.filters?.clientName || []} />,\r\n    },\r\n    {\r\n      id: 'riskDetails',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('claims.searchPolicy.columns.riskDetails'),\r\n      placeholder: utils.string.t('claims.filterPlaceHolderText'),\r\n      value: [],\r\n      options: policies.filters?.riskDetails || [],\r\n      content: <MultiSelect id=\"riskDetails\" search options={policies.filters?.riskDetails || []} />,\r\n    },\r\n    {\r\n      id: 'inceptionDate',\r\n      type: 'datepicker',\r\n      label: utils.string.t('claims.searchPolicy.columns.inceptionDate'),\r\n      value: '',\r\n      content: (\r\n        <FormDate\r\n          control={control}\r\n          {...utils.form.getFieldProps(defaultFormFields, 'inceptionDate')}\r\n          id=\"datepicker\"\r\n          label={''}\r\n          plainText\r\n          plainTextIcon\r\n          placeholder={utils.string.t('app.selectDate')}\r\n          muiComponentProps={{\r\n            fullWidth: false,\r\n            margin: 'dense',\r\n          }}\r\n          muiPickerProps={{\r\n            clearable: false,\r\n            variant: 'inline',\r\n            format: 'DD-MM-YYYY',\r\n          }}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      id: 'expiryDate',\r\n      type: 'datepicker',\r\n      label: utils.string.t('claims.searchPolicy.columns.expiryDate'),\r\n      placeholder: utils.string.t('claims.filterPlaceHolderText'),\r\n      value: '',\r\n      content: (\r\n        <FormDate\r\n          control={control}\r\n          {...utils.form.getFieldProps(defaultFormFields, 'expiryDate')}\r\n          id=\"datepicker\"\r\n          label={''}\r\n          plainText\r\n          plainTextIcon\r\n          placeholder={utils.string.t('app.selectDate')}\r\n          muiComponentProps={{\r\n            fullWidth: false,\r\n            margin: 'dense',\r\n          }}\r\n          muiPickerProps={{\r\n            clearable: false,\r\n            variant: 'inline',\r\n            format: 'DD-MM-YYYY',\r\n          }}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      id: 'division',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('claims.searchPolicy.columns.division'),\r\n      placeholder: utils.string.t('claims.filterPlaceHolderText'),\r\n      value: [],\r\n      options: policies.filters?.division || [],\r\n      content: <MultiSelect id=\"division\" search options={policies.filters?.division || []} />,\r\n    },\r\n    {\r\n      id: 'policyStatus',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('claims.searchPolicy.columns.policyStatus'),\r\n      placeholder: utils.string.t('claims.filterPlaceHolderText'),\r\n      value: [],\r\n      options: policies.filters?.policyStatus || [],\r\n      content: <MultiSelect id=\"policyStatus\" search options={policies.filters?.policyStatus || []} />,\r\n    },\r\n  ];\r\n\r\n  const columns = [\r\n    {\r\n      id: 'policyRef',\r\n      label: utils.string.t('claims.searchPolicy.columns.contractPolicyRef'),\r\n      sort: { type: '', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n      mandatory: true,\r\n    },\r\n    {\r\n      id: 'coverHolder',\r\n      label: utils.string.t('claims.searchPolicy.columns.coverHolder'),\r\n      sort: { type: '', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n      mandatory: false,\r\n    },\r\n    {\r\n      id: 'statusCode',\r\n      label: utils.string.t('claims.searchPolicy.columns.policyStatus'),\r\n      sort: { type: '', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n      mandatory: false,\r\n    },\r\n    {\r\n      id: 'policyType',\r\n      label: utils.string.t('claims.searchPolicy.columns.policyType'),\r\n      sort: { type: '', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n      mandatory: false,\r\n    },\r\n    {\r\n      id: 'insured',\r\n      label: utils.string.t('claims.searchPolicy.columns.insured'),\r\n      sort: { type: '', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n      mandatory: false,\r\n    },\r\n    {\r\n      id: 'reInsured',\r\n      label: utils.string.t('claims.searchPolicy.columns.reinsured'),\r\n      sort: { type: '', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n      mandatory: false,\r\n    },\r\n    {\r\n      id: 'clientName',\r\n      label: utils.string.t('claims.searchPolicy.columns.client'),\r\n      sort: { type: '', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n      mandatory: false,\r\n    },\r\n    {\r\n      id: 'riskDetails',\r\n      label: utils.string.t('claims.searchPolicy.columns.riskDetails'),\r\n      sort: { type: '', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n      mandatory: false,\r\n    },\r\n    {\r\n      id: 'inceptionDate',\r\n      label: utils.string.t('claims.searchPolicy.columns.inceptionDate'),\r\n      sort: { type: 'date', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n      mandatory: true,\r\n    },\r\n    {\r\n      id: 'expiryDate',\r\n      label: utils.string.t('claims.searchPolicy.columns.expiryDate'),\r\n      sort: { type: 'date', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n      mandatory: true,\r\n    },\r\n    {\r\n      id: 'company',\r\n      label: utils.string.t('claims.searchPolicy.columns.company'),\r\n      sort: { type: '', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n      mandatory: false,\r\n    },\r\n    {\r\n      id: 'division',\r\n      label: utils.string.t('claims.searchPolicy.columns.division'),\r\n      sort: { type: '', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n      mandatory: false,\r\n    },\r\n  ];\r\n\r\n  const { columns: columnsArray, columnProps, toggleColumn } = useFlexiColumns(columns);\r\n\r\n  const onSelectSearchBy = (searchByValue, searchByLabel) => {\r\n    setSearchByText(searchByLabel);\r\n    setSearchBy(searchByValue);\r\n    dispatch(\r\n      getPolicies({\r\n        requestType: searchTypeCall,\r\n        term: searchByValue,\r\n        direction: 'desc',\r\n        searchBy,\r\n      })\r\n    );\r\n    dispatch(\r\n      getPolicies({\r\n        requestType: filterTypeCall,\r\n        term: searchByValue,\r\n        direction: 'desc',\r\n        searchBy,\r\n      })\r\n    );\r\n  };\r\n\r\n  const handlePolicyData = (event) => {\r\n    const policyData = policies.items.find((policy) => policy.xbPolicyID === Number(event.target.value));\r\n    dispatch(\r\n      claimsPolicyData({\r\n        ...policyData,\r\n        xbPolicyID: event.target.value,\r\n        searchTerm,\r\n      })\r\n    );\r\n    setConfirm(true);\r\n  };\r\n\r\n  const handleSearch = ({ search, filters }) => {\r\n    if (search) {\r\n      setSearchTerm(search);\r\n      dispatch(\r\n        getPolicies({\r\n          requestType: searchTypeCall,\r\n          term: search,\r\n          direction: 'desc',\r\n          searchBy,\r\n        })\r\n      );\r\n      dispatch(\r\n        getPolicies({\r\n          requestType: filterTypeCall,\r\n          term: search,\r\n          direction: 'desc',\r\n          searchBy,\r\n          filterTerm: filters,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleSearchFilter = ({ search, filters }) => {\r\n    dispatch(\r\n      getPolicies({\r\n        requestType: searchTypeCall,\r\n        term: search,\r\n        direction: 'desc',\r\n        searchBy,\r\n        filterTerm: filters,\r\n      })\r\n    );\r\n    dispatch(\r\n      getPolicies({\r\n        requestType: filterTypeCall,\r\n        term: search,\r\n        direction: 'desc',\r\n        searchBy,\r\n        filterTerm: filters,\r\n      })\r\n    );\r\n  };\r\n\r\n  const onResetFilter = () => {\r\n    reset();\r\n    dispatch(\r\n      getPolicies({\r\n        requestType: searchTypeCall,\r\n        filterTerm: [],\r\n        searchBy,\r\n      })\r\n    );\r\n  };\r\n\r\n  const onResetSearch = () => {\r\n    setSearchTerm('');\r\n  };\r\n\r\n  const handleChangePage = (newPage) => {\r\n    dispatch(\r\n      getPolicies({\r\n        requestType: searchTypeCall,\r\n        term: searchTerm,\r\n        page: newPage,\r\n        direction: 'desc',\r\n        searchBy,\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (rowsPerPage) => {\r\n   dispatch(\r\n      getPolicies({\r\n        requestType: searchTypeCall,\r\n        term: searchTerm,\r\n        size: rowsPerPage,\r\n        direction: 'desc',\r\n        searchBy,\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleSort = (by, dir) => {\r\n    getPolicies({\r\n      requestType: searchTypeCall,\r\n      term: searchTerm,\r\n      sortBy: by,\r\n      direction: dir,\r\n      searchBy,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <ClaimsSelectPolicyView\r\n      columnsArray={columnsArray}\r\n      rows={policies?.items || []}\r\n      policyData={policyData}\r\n      sort={{\r\n        ...policies.sort,\r\n        type: 'id',\r\n      }}\r\n      pagination={{\r\n        page: policies.page,\r\n        rowsTotal: policies.itemsTotal,\r\n        rowsPerPage: policies.pageSize,\r\n      }}\r\n      tableFilterFields={tableFilterFields}\r\n      isFetchingFilters={isFetchingFilters}\r\n      viewFields={viewFields}\r\n      viewControl={viewControl}\r\n      handlers={{\r\n        handleSort,\r\n        handleSearch,\r\n        handleSearchFilter,\r\n        onResetFilter,\r\n        onResetSearch,\r\n        handlePolicyData,\r\n        handleChangePage,\r\n        handleChangeRowsPerPage,\r\n        columnProps,\r\n        toggleColumn,\r\n        onSelectSearchBy,\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}