{"ast":null,"code":"import _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\pages\\\\Trips\\\\Trips.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport { Helmet } from 'react-helmet';\nimport get from 'lodash/get'; // app\n\nimport { TripsView } from './Trips.view';\nimport { usePagination } from 'hooks';\nimport { getTripList, getTripById, deleteTrip, showModal } from 'stores';\nimport config from 'config';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Trips() {\n  _s();\n\n  var dispatch = useDispatch();\n  var history = useHistory();\n  var brand = useSelector(function (state) {\n    return state.ui.brand;\n  });\n  var loader = useSelector(function (store) {\n    return get(store, 'ui.loader.queue', []);\n  });\n  var tripList = useSelector(function (store) {\n    return store.trip.list;\n  });\n  var tripSelected = useSelector(function (store) {\n    return store.trip.selected;\n  });\n  useEffect(function () {\n    dispatch(getTripList());\n  }, [] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  var handleSearch = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(query) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return dispatch(getTripList({\n                query: query\n              }));\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSearch(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleSearchReset = function handleSearchReset() {\n    if (get(tripList, 'query')) {\n      dispatch(getTripList({\n        query: ''\n      }));\n    }\n  };\n\n  var handleChangePage = function handleChangePage(newPage) {\n    dispatch(getTripList({\n      page: newPage + 1\n    }));\n  };\n\n  var handleChangeRowsPerPage = function handleChangeRowsPerPage(rowsPerPage) {\n    dispatch(getTripList({\n      size: rowsPerPage\n    }));\n  };\n\n  var handleEdit = function handleEdit(popoverData) {\n    history.push(\"\".concat(config.routes.opportunity.root, \"/\").concat(popoverData.id));\n  };\n\n  var handleClickRow = function handleClickRow(id) {\n    return function (event) {\n      dispatch(getTripById(id, false));\n    };\n  };\n\n  var handleDelete = function handleDelete(popoverData) {\n    var submitHandler = function submitHandler() {\n      dispatch(deleteTrip(popoverData.id));\n    };\n\n    dispatch(showModal({\n      component: 'CONFIRM_DELETE',\n      props: {\n        title: 'trips.deleteTrip',\n        subtitle: popoverData.title,\n        fullWidth: true,\n        maxWidth: 'xs',\n        disableAutoFocus: true,\n        componentProps: {\n          submitHandler: submitHandler\n        }\n      }\n    }));\n  }; // get the pagination values from the store (populated from API endpoint pagination)\n  // and pass them to usePagination to update its state\n\n\n  var paginationObj = {\n    page: tripList.page - 1,\n    rowsTotal: tripList.itemsTotal,\n    rowsPerPage: tripList.pageSize\n  };\n  var pagination = usePagination(tripList.items, paginationObj, handleChangePage, handleChangeRowsPerPage);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"\".concat(utils.string.t('trips.title'), \" - \").concat(utils.app.getAppName(brand))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TripsView, {\n      list: tripList,\n      selected: tripSelected || {},\n      sort: {\n        by: tripList.sortBy,\n        type: tripList.sortType,\n        direction: tripList.sortDirection\n      },\n      pagination: pagination.obj,\n      loader: loader,\n      handleSearch: handleSearch,\n      handleSearchReset: handleSearchReset,\n      handleChangePage: pagination.handlers.handleChangePage,\n      handleChangeRowsPerPage: pagination.handlers.handleChangeRowsPerPage,\n      handleEdit: handleEdit,\n      handleClickRow: handleClickRow,\n      handleDelete: handleDelete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Trips, \"Da06zGfnc9/FoSW2xncreBdSGmo=\", false, function () {\n  return [useDispatch, useHistory, useSelector, useSelector, useSelector, useSelector, usePagination];\n});\n\n_c = Trips;\n\nvar _c;\n\n$RefreshReg$(_c, \"Trips\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/pages/Trips/Trips.js"],"names":["React","useEffect","useSelector","useDispatch","useHistory","Helmet","get","TripsView","usePagination","getTripList","getTripById","deleteTrip","showModal","config","utils","Trips","dispatch","history","brand","state","ui","loader","store","tripList","trip","list","tripSelected","selected","handleSearch","query","handleSearchReset","handleChangePage","newPage","page","handleChangeRowsPerPage","rowsPerPage","size","handleEdit","popoverData","push","routes","opportunity","root","id","handleClickRow","event","handleDelete","submitHandler","component","props","title","subtitle","fullWidth","maxWidth","disableAutoFocus","componentProps","paginationObj","rowsTotal","itemsTotal","pageSize","pagination","items","string","t","app","getAppName","by","sortBy","type","sortType","direction","sortDirection","obj","handlers"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport { Helmet } from 'react-helmet';\r\nimport get from 'lodash/get';\r\n\r\n// app\r\nimport { TripsView } from './Trips.view';\r\nimport { usePagination } from 'hooks';\r\nimport { getTripList, getTripById, deleteTrip, showModal } from 'stores';\r\nimport config from 'config';\r\nimport * as utils from 'utils';\r\n\r\nexport default function Trips() {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const brand = useSelector((state) => state.ui.brand);\r\n  const loader = useSelector((store) => get(store, 'ui.loader.queue', []));\r\n  const tripList = useSelector((store) => store.trip.list);\r\n  const tripSelected = useSelector((store) => store.trip.selected);\r\n\r\n  useEffect(\r\n    () => {\r\n      dispatch(getTripList());\r\n    },\r\n    [] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  const handleSearch = async (query) => {\r\n    await dispatch(getTripList({ query: query }));\r\n  };\r\n\r\n  const handleSearchReset = () => {\r\n    if (get(tripList, 'query')) {\r\n      dispatch(getTripList({ query: '' }));\r\n    }\r\n  };\r\n\r\n  const handleChangePage = (newPage) => {\r\n    dispatch(getTripList({ page: newPage + 1 }));\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (rowsPerPage) => {\r\n    dispatch(getTripList({ size: rowsPerPage }));\r\n  };\r\n\r\n  const handleEdit = (popoverData) => {\r\n    history.push(`${config.routes.opportunity.root}/${popoverData.id}`);\r\n  };\r\n\r\n  const handleClickRow = (id) => (event) => {\r\n    dispatch(getTripById(id, false));\r\n  };\r\n\r\n  const handleDelete = (popoverData) => {\r\n    let submitHandler = () => {\r\n      dispatch(deleteTrip(popoverData.id));\r\n    };\r\n\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM_DELETE',\r\n        props: {\r\n          title: 'trips.deleteTrip',\r\n          subtitle: popoverData.title,\r\n          fullWidth: true,\r\n          maxWidth: 'xs',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            submitHandler,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  // get the pagination values from the store (populated from API endpoint pagination)\r\n  // and pass them to usePagination to update its state\r\n  const paginationObj = {\r\n    page: tripList.page - 1,\r\n    rowsTotal: tripList.itemsTotal,\r\n    rowsPerPage: tripList.pageSize,\r\n  };\r\n\r\n  const pagination = usePagination(tripList.items, paginationObj, handleChangePage, handleChangeRowsPerPage);\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>{`${utils.string.t('trips.title')} - ${utils.app.getAppName(brand)}`}</title>\r\n      </Helmet>\r\n\r\n      <TripsView\r\n        list={tripList}\r\n        selected={tripSelected || {}}\r\n        sort={{\r\n          by: tripList.sortBy,\r\n          type: tripList.sortType,\r\n          direction: tripList.sortDirection,\r\n        }}\r\n        pagination={pagination.obj}\r\n        loader={loader}\r\n        handleSearch={handleSearch}\r\n        handleSearchReset={handleSearchReset}\r\n        handleChangePage={pagination.handlers.handleChangePage}\r\n        handleChangeRowsPerPage={pagination.handlers.handleChangeRowsPerPage}\r\n        handleEdit={handleEdit}\r\n        handleClickRow={handleClickRow}\r\n        handleDelete={handleDelete}\r\n      />\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}