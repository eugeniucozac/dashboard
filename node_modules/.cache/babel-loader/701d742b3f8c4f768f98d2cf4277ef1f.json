{"ast":null,"code":"import _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\components\\\\InfiniteScroll\\\\InfiniteScroll.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport propTypes from 'prop-types';\nimport { CellMeasurerCache } from 'react-virtualized'; // app\n\nimport { InfiniteScrollView } from './InfiniteScroll.view';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nInfiniteScroll.propTypes = {\n  itemCount: propTypes.number.isRequired,\n  content: propTypes.func.isRequired,\n  rowHeight: propTypes.node.isRequired,\n  containerHeight: propTypes.node.isRequired\n};\nexport default function InfiniteScroll(_ref) {\n  _s();\n\n  var itemCount = _ref.itemCount,\n      rowHeight = _ref.rowHeight,\n      content = _ref.content,\n      containerHeight = _ref.containerHeight;\n  var cache = new CellMeasurerCache({\n    defaultHeight: rowHeight,\n    fixedWidth: true\n  });\n\n  var _useState = useState(undefined),\n      _useState2 = _slicedToArray(_useState, 2),\n      scrollToIndex = _useState2[0],\n      setScrollToIndex = _useState2[1];\n\n  useEffect(function () {\n    if (!itemCount) return;\n    setScrollToIndex(0);\n    cache.clearAll();\n  }, [itemCount] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  return /*#__PURE__*/_jsxDEV(InfiniteScrollView, {\n    itemCount: itemCount,\n    content: content,\n    containerHeight: containerHeight,\n    cache: cache,\n    scrollToIndex: scrollToIndex\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n\n_s(InfiniteScroll, \"FCvUMFmp8QvRfwdxsiuBCoVf9Kc=\");\n\n_c = InfiniteScroll;\n\nvar _c;\n\n$RefreshReg$(_c, \"InfiniteScroll\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/InfiniteScroll/InfiniteScroll.js"],"names":["React","useEffect","useState","propTypes","CellMeasurerCache","InfiniteScrollView","InfiniteScroll","itemCount","number","isRequired","content","func","rowHeight","node","containerHeight","cache","defaultHeight","fixedWidth","undefined","scrollToIndex","setScrollToIndex","clearAll"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,iBAAT,QAAkC,mBAAlC,C,CAEA;;AACA,SAASC,kBAAT,QAAmC,uBAAnC;;AAEAC,cAAc,CAACH,SAAf,GAA2B;AACzBI,EAAAA,SAAS,EAAEJ,SAAS,CAACK,MAAV,CAAiBC,UADH;AAEzBC,EAAAA,OAAO,EAAEP,SAAS,CAACQ,IAAV,CAAeF,UAFC;AAGzBG,EAAAA,SAAS,EAAET,SAAS,CAACU,IAAV,CAAeJ,UAHD;AAIzBK,EAAAA,eAAe,EAAEX,SAAS,CAACU,IAAV,CAAeJ;AAJP,CAA3B;AAOA,eAAe,SAASH,cAAT,OAA4E;AAAA;;AAAA,MAAlDC,SAAkD,QAAlDA,SAAkD;AAAA,MAAvCK,SAAuC,QAAvCA,SAAuC;AAAA,MAA5BF,OAA4B,QAA5BA,OAA4B;AAAA,MAAnBI,eAAmB,QAAnBA,eAAmB;AACzF,MAAMC,KAAK,GAAG,IAAIX,iBAAJ,CAAsB;AAAEY,IAAAA,aAAa,EAAEJ,SAAjB;AAA4BK,IAAAA,UAAU,EAAE;AAAxC,GAAtB,CAAd;;AADyF,kBAE/Cf,QAAQ,CAACgB,SAAD,CAFuC;AAAA;AAAA,MAElFC,aAFkF;AAAA,MAEnEC,gBAFmE;;AAIzFnB,EAAAA,SAAS,CACP,YAAM;AACJ,QAAI,CAACM,SAAL,EAAgB;AAChBa,IAAAA,gBAAgB,CAAC,CAAD,CAAhB;AACAL,IAAAA,KAAK,CAACM,QAAN;AACD,GALM,EAMP,CAACd,SAAD,CANO,CAMK;AANL,GAAT;AASA,sBACE,QAAC,kBAAD;AACE,IAAA,SAAS,EAAEA,SADb;AAEE,IAAA,OAAO,EAAEG,OAFX;AAGE,IAAA,eAAe,EAAEI,eAHnB;AAIE,IAAA,KAAK,EAAEC,KAJT;AAKE,IAAA,aAAa,EAAEI;AALjB;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GAtBuBb,c;;KAAAA,c","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport propTypes from 'prop-types';\r\nimport { CellMeasurerCache } from 'react-virtualized';\r\n\r\n// app\r\nimport { InfiniteScrollView } from './InfiniteScroll.view';\r\n\r\nInfiniteScroll.propTypes = {\r\n  itemCount: propTypes.number.isRequired,\r\n  content: propTypes.func.isRequired,\r\n  rowHeight: propTypes.node.isRequired,\r\n  containerHeight: propTypes.node.isRequired,\r\n};\r\n\r\nexport default function InfiniteScroll({ itemCount, rowHeight, content, containerHeight }) {\r\n  const cache = new CellMeasurerCache({ defaultHeight: rowHeight, fixedWidth: true });\r\n  const [scrollToIndex, setScrollToIndex] = useState(undefined);\r\n\r\n  useEffect(\r\n    () => {\r\n      if (!itemCount) return;\r\n      setScrollToIndex(0);\r\n      cache.clearAll();\r\n    },\r\n    [itemCount] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  return (\r\n    <InfiniteScrollView\r\n      itemCount={itemCount}\r\n      content={content}\r\n      containerHeight={containerHeight}\r\n      cache={cache}\r\n      scrollToIndex={scrollToIndex}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}