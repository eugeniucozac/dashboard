{"ast":null,"code":"import \"core-js/modules/es.promise.finally\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as utils from 'utils'; //app\n\nimport { authLogout, addLoader, removeLoader } from 'stores';\nexport var getUsersForRole = function getUsersForRole(roles) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/processingInstructions.actions.getUsersForRole'\n    };\n    dispatch(getUsersForRoleRequest());\n    dispatch(addLoader('getUsersForRole'));\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.authService,\n      path: 'api/users/inRoles',\n      params: {\n        userRoleLst: roles\n      }\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(getUsersForRoleSuccess(data.data));\n      return data.data;\n    })[\"catch\"](function (err) {\n      utils.api.handleError(err, _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API fetch error (processingInstructions.getProcessingInstructionId)'\n      }));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(getUsersForRoleFailure(err));\n      return err;\n    })[\"finally\"](function () {\n      dispatch(removeLoader('getUsersForRole'));\n    });\n  };\n};\n\nvar getUsersForRoleRequest = function getUsersForRoleRequest() {\n  return {\n    type: 'PROCESSING_INSTRUCTIONS_GET_USERS_FOR_ROLE_REQUEST'\n  };\n};\n\nvar getUsersForRoleSuccess = function getUsersForRoleSuccess(data) {\n  return {\n    type: 'PROCESSING_INSTRUCTIONS_GET_USERS_FOR_ROLE_SUCCESS',\n    payload: data\n  };\n};\n\nvar getUsersForRoleFailure = function getUsersForRoleFailure(error) {\n  return {\n    type: 'PROCESSING_INSTRUCTIONS_GET_USERS_FOR_ROLE_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/processingInstructions/processingInstructions.actions.getUsersForRole.js"],"names":["utils","authLogout","addLoader","removeLoader","getUsersForRole","roles","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","getUsersForRoleRequest","api","get","token","accessToken","authService","path","params","userRoleLst","then","response","handleResponse","json","handleNewData","data","getUsersForRoleSuccess","err","handleError","message","handleUnauthorized","getUsersForRoleFailure","type","payload","error"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB,C,CAEA;;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,YAAhC,QAAoD,QAApD;AAEA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SAAW,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAChE;AADgE,oBAETA,QAAQ,EAFC;AAAA,QAEjDC,IAFiD,aAExDC,IAFwD,CAEjDD,IAFiD;AAAA,QAExBE,QAFwB,aAE1CC,MAF0C,CAEhCC,IAFgC,CAExBF,QAFwB;;AAIhE,QAAMG,YAAY,GAAG;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAArB;AAEAR,IAAAA,QAAQ,CAACS,sBAAsB,EAAvB,CAAR;AACAT,IAAAA,QAAQ,CAACJ,SAAS,CAAC,iBAAD,CAAV,CAAR;AAEA,WAAOF,KAAK,CAACgB,GAAN,CACJC,GADI,CACA;AACHC,MAAAA,KAAK,EAAEV,IAAI,CAACW,WADT;AAEHT,MAAAA,QAAQ,EAAEA,QAAQ,CAACU,WAFhB;AAGHC,MAAAA,IAAI,EAAE,mBAHH;AAIHC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,WAAW,EAAElB;AAAf;AAJL,KADA,EAOJmB,IAPI,CAOC,UAACC,QAAD;AAAA,aAAczB,KAAK,CAACgB,GAAN,CAAUU,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAPD,EAQJD,IARI,CAQC,UAACG,IAAD;AAAA,aAAU3B,KAAK,CAACgB,GAAN,CAAUY,aAAV,CAAwBD,IAAxB,CAAV;AAAA,KARD,EASJH,IATI,CASC,UAACK,IAAD,EAAU;AACdvB,MAAAA,QAAQ,CAACwB,sBAAsB,CAACD,IAAI,CAACA,IAAN,CAAvB,CAAR;AACA,aAAOA,IAAI,CAACA,IAAZ;AACD,KAZI,WAaE,UAACE,GAAD,EAAS;AACd/B,MAAAA,KAAK,CAACgB,GAAN,CAAUgB,WAAV,CAAsBD,GAAtB,kCAAgClB,YAAhC;AAA8CoB,QAAAA,OAAO,EAAE;AAAvD;AACAjC,MAAAA,KAAK,CAACgB,GAAN,CAAUkB,kBAAV,CAA6BH,GAA7B,EAAkCzB,QAAlC,EAA4CL,UAA5C;AACAK,MAAAA,QAAQ,CAAC6B,sBAAsB,CAACJ,GAAD,CAAvB,CAAR;AACA,aAAOA,GAAP;AACD,KAlBI,aAmBI,YAAM;AACbzB,MAAAA,QAAQ,CAACH,YAAY,CAAC,iBAAD,CAAb,CAAR;AACD,KArBI,CAAP;AAsBD,GA/B8B;AAAA,CAAxB;;AAiCP,IAAMY,sBAAsB,GAAG,SAAzBA,sBAAyB,GAAM;AACnC,SAAO;AACLqB,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJD;;AAMA,IAAMN,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACD,IAAD,EAAU;AACvC,SAAO;AACLO,IAAAA,IAAI,EAAE,oDADD;AAELC,IAAAA,OAAO,EAAER;AAFJ,GAAP;AAID,CALD;;AAOA,IAAMM,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACG,KAAD,EAAW;AACxC,SAAO;AACLF,IAAAA,IAAI,EAAE,oDADD;AAELC,IAAAA,OAAO,EAAEC;AAFJ,GAAP;AAID,CALD","sourcesContent":["import * as utils from 'utils';\r\n\r\n//app\r\nimport { authLogout, addLoader, removeLoader } from 'stores';\r\n\r\nexport const getUsersForRole = (roles) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: {auth}, config: { vars: { endpoint }}} = getState();\r\n\r\n  const defaultError = { file: 'stores/processingInstructions.actions.getUsersForRole' };\r\n\r\n  dispatch(getUsersForRoleRequest());\r\n  dispatch(addLoader('getUsersForRole'));\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.authService,\r\n      path: 'api/users/inRoles',\r\n      params: { userRoleLst: roles },\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(getUsersForRoleSuccess(data.data));\r\n      return data.data;\r\n    })\r\n    .catch((err) => {\r\n      utils.api.handleError(err, { ...defaultError, message: 'API fetch error (processingInstructions.getProcessingInstructionId)' });\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(getUsersForRoleFailure(err));\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('getUsersForRole'));\r\n    });\r\n};\r\n\r\nconst getUsersForRoleRequest = () => {\r\n  return {\r\n    type: 'PROCESSING_INSTRUCTIONS_GET_USERS_FOR_ROLE_REQUEST',\r\n  };\r\n};\r\n\r\nconst getUsersForRoleSuccess = (data) => {\r\n  return {\r\n    type: 'PROCESSING_INSTRUCTIONS_GET_USERS_FOR_ROLE_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nconst getUsersForRoleFailure = (error) => {\r\n  return {\r\n    type: 'PROCESSING_INSTRUCTIONS_GET_USERS_FOR_ROLE_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}