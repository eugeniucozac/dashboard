{"ast":null,"code":"import _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\components\\\\Mudmap\\\\Mudmap.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport merge from 'lodash/merge';\nimport debounce from 'lodash/debounce';\nimport get from 'lodash/get'; // app\n\nimport styles from './Mudmap.styles';\nimport { MudmapAxis, MudmapLayer, MudmapLimit, MudmapTranche } from 'components';\nimport { sortByLeft, setLefts, mapById, calcMaxAmount, calcMaxPercentage, getLimits, getTranches, getXaxis, getYaxis } from './Mudmap.utils';\nimport * as utils from 'utils'; // mui\n\nimport { makeStyles } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nMudmap.propTypes = {\n  items: PropTypes.array,\n  capacities: PropTypes.array,\n  limits: PropTypes.array,\n  currency: PropTypes.string,\n  ratio: PropTypes.number,\n  fullscreen: PropTypes.bool,\n  type: PropTypes.oneOf(['written', 'signed']),\n  handlers: PropTypes.object\n};\nMudmap.defaultProps = {\n  currency: '',\n  capacities: [],\n  ratio: 9 / 16,\n  // 16:9 ratio\n  type: 'written',\n  handlers: {}\n};\nexport default function Mudmap(_ref) {\n  _s();\n\n  var _this = this;\n\n  var items = _ref.items,\n      capacities = _ref.capacities,\n      limits = _ref.limits,\n      currency = _ref.currency,\n      ratio = _ref.ratio,\n      fullscreen = _ref.fullscreen,\n      type = _ref.type,\n      handlers = _ref.handlers;\n  var margin = {\n    top: 24,\n    right: fullscreen ? 60 : 48,\n    bottom: fullscreen ? 32 : 24,\n    left: fullscreen ? 60 : 48\n  };\n  var classes = makeStyles(styles, {\n    name: 'Mudmap'\n  })({\n    margin: margin\n  });\n  var mudMapRef = useRef(null);\n  var layerById = mapById(setLefts(items, type));\n\n  var _useState = useState(items),\n      _useState2 = _slicedToArray(_useState, 2),\n      quotes = _useState2[0],\n      setQuotes = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      dimensions = _useState4[0],\n      setDimensions = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      draggingId = _useState6[0],\n      setDraggingId = _useState6[1];\n\n  var _useState7 = useState(2),\n      _useState8 = _slicedToArray(_useState7, 2),\n      zIndex = _useState8[0],\n      setZIndex = _useState8[1];\n\n  var _useState9 = useState(layerById),\n      _useState10 = _slicedToArray(_useState9, 2),\n      layerMap = _useState10[0],\n      setLayerMap = _useState10[1];\n\n  var _useState11 = useState(layerById),\n      _useState12 = _slicedToArray(_useState11, 2),\n      layerDraggingMap = _useState12[0],\n      setLayerDraggingMap = _useState12[1];\n\n  var layers = setLefts(quotes, type);\n  var layersDragging = Object.values(layerDraggingMap);\n  var maxAmount = calcMaxAmount(layers);\n  var maxPercentage = calcMaxPercentage(layers, type);\n  var isLoaded = maxAmount > 0;\n  var xAxis = isLoaded ? getXaxis(0, 1, maxPercentage) : [0, 1];\n  var yAxis = isLoaded ? getYaxis(layers) : [];\n  var yAxisLimits = isLoaded ? getLimits(limits) : [];\n  var tranches = isLoaded ? getTranches(layers, type) : [];\n\n  var handleResize = function handleResize() {\n    setDimensions({\n      width: get(mudMapRef, 'current.clientWidth', 0),\n      height: get(mudMapRef, 'current.clientHeight', 0)\n    });\n  }; // first render\n\n\n  useEffect(function () {\n    var debouncedObserver = debounce(function (entries, observer) {\n      if (entries && entries[0]) handleResize();\n    }, 250);\n    var mudmapElem = mudMapRef.current;\n    if (!mudmapElem) return;\n    var ro = new ResizeObserver(debouncedObserver);\n    handleResize();\n    window.addEventListener('resize', handleResize); // check if the mudmap is resized and update width/height accordingly\n\n    ro.observe(mudmapElem); // cleanup\n\n    return function () {\n      window.removeEventListener('resize', handleResize);\n      ro.unobserve(mudmapElem);\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n  // every render\n\n  useEffect(function () {\n    setQuotes(items);\n    setLayerMap(layerById);\n    setLayerDraggingMap(layerById);\n  }, [items] // eslint-disable-line react-hooks/exhaustive-deps\n  ); // abort\n\n  if (!utils.generic.isValidArray(quotes, true)) return null;\n\n  var stopDragging = function stopDragging() {\n    setTimeout(function () {\n      setDraggingId(null);\n      setLayerMap(layerDraggingMap);\n      setQuotes(Object.values(layerDraggingMap));\n      handlers.reorderMudmap(layerDraggingMap);\n    }, 20);\n  };\n\n  var startDragging = function startDragging(layerId) {\n    setZIndex(zIndex + 1);\n    setDraggingId(layerId);\n  };\n\n  var setDragging = function setDragging(layerMap) {\n    return debounce(function (layerId, moveDeltaX) {\n      var copyLayerMap = merge({}, layerMap);\n      copyLayerMap[layerId].left += moveDeltaX / dimensions.width * maxPercentage;\n      setLefts(sortByLeft(Object.values(copyLayerMap), type), type);\n\n      if (layerDraggingMap[layerId].order !== copyLayerMap[layerId].order) {\n        setLayerDraggingMap(copyLayerMap);\n      }\n    }, 20);\n  };\n\n  var getCapacityColor = function getCapacityColor(capacityId) {\n    var capacity = capacities.find(function (c) {\n      return c.id === capacityId;\n    }) || {};\n    return capacity.color;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    \"data-testid\": \"mudmap\",\n    style: {\n      paddingTop: \"\".concat(ratio * 100, \"%\")\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.container,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: mudMapRef,\n        className: classes.mudmap,\n        children: [yAxis.map(function (value, idx) {\n          return /*#__PURE__*/_jsxDEV(MudmapAxis, {\n            axis: \"y\",\n            value: value,\n            height: maxAmount,\n            margin: margin,\n            fullscreen: fullscreen,\n            currency: currency\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 15\n          }, _this);\n        }), xAxis.map(function (value, idx) {\n          return /*#__PURE__*/_jsxDEV(MudmapAxis, {\n            axis: \"x\",\n            value: value,\n            width: maxPercentage,\n            margin: margin,\n            fullscreen: fullscreen\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 20\n          }, _this);\n        }), yAxisLimits.map(function (a) {\n          return /*#__PURE__*/_jsxDEV(MudmapLimit, {\n            limit: limits.find(function (l) {\n              return l.value === a;\n            }),\n            height: maxAmount,\n            fullscreen: fullscreen,\n            currency: currency\n          }, a, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 15\n          }, _this);\n        }), tranches.map(function (t) {\n          return /*#__PURE__*/_jsxDEV(MudmapTranche, {\n            tranche: t,\n            height: maxAmount,\n            margin: margin,\n            fullscreen: fullscreen\n          }, \"\".concat(t.u, \"-\").concat(t.l), false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 20\n          }, _this);\n        }), layers.map(function (l) {\n          if (!draggingId || draggingId === l.id) {\n            return /*#__PURE__*/_jsxDEV(MudmapLayer, {\n              layer: l,\n              maxAmount: maxAmount,\n              maxPercentage: maxPercentage,\n              type: type,\n              isDragging: draggingId && draggingId === l.id,\n              zIndex: zIndex,\n              currency: l.currency,\n              color: getCapacityColor(l.capacityId),\n              startDragging: startDragging,\n              setDragging: setDragging(layerMap),\n              stopDragging: stopDragging\n            }, l.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 17\n            }, _this);\n          }\n\n          return null;\n        }), layersDragging.map(function (l) {\n          if (draggingId) {\n            return /*#__PURE__*/_jsxDEV(MudmapLayer, {\n              layer: l,\n              maxAmount: maxAmount,\n              maxPercentage: maxPercentage,\n              type: type,\n              isPlaceholder: draggingId && draggingId === l.id,\n              currency: l.currency,\n              color: getCapacityColor(l.capacityId),\n              startDragging: startDragging,\n              setDragging: setDragging(layerMap),\n              stopDragging: stopDragging\n            }, l.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 17\n            }, _this);\n          }\n\n          return null;\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Mudmap, \"6zTQVhQBp6TAzRvHlWExbN8cZ5o=\");\n\n_c = Mudmap;\nMudmap.displayName = \"Mudmap\";\nMudmap.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"Mudmap\",\n  \"props\": {\n    \"currency\": {\n      \"defaultValue\": {\n        \"value\": \"''\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"capacities\": {\n      \"defaultValue\": {\n        \"value\": \"[]\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"ratio\": {\n      \"defaultValue\": {\n        \"value\": \"9 / 16\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"type\": {\n      \"defaultValue\": {\n        \"value\": \"'written'\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"'written'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'signed'\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"handlers\": {\n      \"defaultValue\": {\n        \"value\": \"{}\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"items\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"limits\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"fullscreen\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\components\\\\Mudmap\\\\Mudmap.js\"] = {\n    name: \"Mudmap\",\n    docgenInfo: Mudmap.__docgenInfo,\n    path: \"src\\\\components\\\\Mudmap\\\\Mudmap.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Mudmap\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/Mudmap/Mudmap.js"],"names":["React","useEffect","useState","useRef","PropTypes","ResizeObserver","merge","debounce","get","styles","MudmapAxis","MudmapLayer","MudmapLimit","MudmapTranche","sortByLeft","setLefts","mapById","calcMaxAmount","calcMaxPercentage","getLimits","getTranches","getXaxis","getYaxis","utils","makeStyles","Mudmap","propTypes","items","array","capacities","limits","currency","string","ratio","number","fullscreen","bool","type","oneOf","handlers","object","defaultProps","margin","top","right","bottom","left","classes","name","mudMapRef","layerById","quotes","setQuotes","dimensions","setDimensions","draggingId","setDraggingId","zIndex","setZIndex","layerMap","setLayerMap","layerDraggingMap","setLayerDraggingMap","layers","layersDragging","Object","values","maxAmount","maxPercentage","isLoaded","xAxis","yAxis","yAxisLimits","tranches","handleResize","width","height","debouncedObserver","entries","observer","mudmapElem","current","ro","window","addEventListener","observe","removeEventListener","unobserve","generic","isValidArray","stopDragging","setTimeout","reorderMudmap","startDragging","layerId","setDragging","moveDeltaX","copyLayerMap","order","getCapacityColor","capacityId","capacity","find","c","id","color","root","paddingTop","container","mudmap","map","value","idx","a","l","t","u"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,GAAP,MAAgB,YAAhB,C,CAEA;;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SAASC,UAAT,EAAqBC,WAArB,EAAkCC,WAAlC,EAA+CC,aAA/C,QAAoE,YAApE;AACA,SACEC,UADF,EAEEC,QAFF,EAGEC,OAHF,EAIEC,aAJF,EAKEC,iBALF,EAMEC,SANF,EAOEC,WAPF,EAQEC,QARF,EASEC,QATF,QAUO,gBAVP;AAWA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB,C,CAEA;;AACA,SAASC,UAAT,QAA2B,mBAA3B;;AAEAC,MAAM,CAACC,SAAP,GAAmB;AACjBC,EAAAA,KAAK,EAAEvB,SAAS,CAACwB,KADA;AAEjBC,EAAAA,UAAU,EAAEzB,SAAS,CAACwB,KAFL;AAGjBE,EAAAA,MAAM,EAAE1B,SAAS,CAACwB,KAHD;AAIjBG,EAAAA,QAAQ,EAAE3B,SAAS,CAAC4B,MAJH;AAKjBC,EAAAA,KAAK,EAAE7B,SAAS,CAAC8B,MALA;AAMjBC,EAAAA,UAAU,EAAE/B,SAAS,CAACgC,IANL;AAOjBC,EAAAA,IAAI,EAAEjC,SAAS,CAACkC,KAAV,CAAgB,CAAC,SAAD,EAAY,QAAZ,CAAhB,CAPW;AAQjBC,EAAAA,QAAQ,EAAEnC,SAAS,CAACoC;AARH,CAAnB;AAWAf,MAAM,CAACgB,YAAP,GAAsB;AACpBV,EAAAA,QAAQ,EAAE,EADU;AAEpBF,EAAAA,UAAU,EAAE,EAFQ;AAGpBI,EAAAA,KAAK,EAAE,IAAI,EAHS;AAGL;AACfI,EAAAA,IAAI,EAAE,SAJc;AAKpBE,EAAAA,QAAQ,EAAE;AALU,CAAtB;AAQA,eAAe,SAASd,MAAT,OAA4F;AAAA;;AAAA;;AAAA,MAA1EE,KAA0E,QAA1EA,KAA0E;AAAA,MAAnEE,UAAmE,QAAnEA,UAAmE;AAAA,MAAvDC,MAAuD,QAAvDA,MAAuD;AAAA,MAA/CC,QAA+C,QAA/CA,QAA+C;AAAA,MAArCE,KAAqC,QAArCA,KAAqC;AAAA,MAA9BE,UAA8B,QAA9BA,UAA8B;AAAA,MAAlBE,IAAkB,QAAlBA,IAAkB;AAAA,MAAZE,QAAY,QAAZA,QAAY;AACzG,MAAMG,MAAM,GAAG;AACbC,IAAAA,GAAG,EAAE,EADQ;AAEbC,IAAAA,KAAK,EAAET,UAAU,GAAG,EAAH,GAAQ,EAFZ;AAGbU,IAAAA,MAAM,EAAEV,UAAU,GAAG,EAAH,GAAQ,EAHb;AAIbW,IAAAA,IAAI,EAAEX,UAAU,GAAG,EAAH,GAAQ;AAJX,GAAf;AAOA,MAAMY,OAAO,GAAGvB,UAAU,CAACf,MAAD,EAAS;AAAEuC,IAAAA,IAAI,EAAE;AAAR,GAAT,CAAV,CAAuC;AAAEN,IAAAA,MAAM,EAANA;AAAF,GAAvC,CAAhB;AACA,MAAMO,SAAS,GAAG9C,MAAM,CAAC,IAAD,CAAxB;AAEA,MAAM+C,SAAS,GAAGlC,OAAO,CAACD,QAAQ,CAACY,KAAD,EAAQU,IAAR,CAAT,CAAzB;;AAXyG,kBAa7EnC,QAAQ,CAACyB,KAAD,CAbqE;AAAA;AAAA,MAalGwB,MAbkG;AAAA,MAa1FC,SAb0F;;AAAA,mBAcrElD,QAAQ,CAAC,EAAD,CAd6D;AAAA;AAAA,MAclGmD,UAdkG;AAAA,MActFC,aAdsF;;AAAA,mBAerEpD,QAAQ,CAAC,IAAD,CAf6D;AAAA;AAAA,MAelGqD,UAfkG;AAAA,MAetFC,aAfsF;;AAAA,mBAgB7EtD,QAAQ,CAAC,CAAD,CAhBqE;AAAA;AAAA,MAgBlGuD,MAhBkG;AAAA,MAgB1FC,SAhB0F;;AAAA,mBAiBzExD,QAAQ,CAACgD,SAAD,CAjBiE;AAAA;AAAA,MAiBlGS,QAjBkG;AAAA,MAiBxFC,WAjBwF;;AAAA,oBAkBzD1D,QAAQ,CAACgD,SAAD,CAlBiD;AAAA;AAAA,MAkBlGW,gBAlBkG;AAAA,MAkBhFC,mBAlBgF;;AAoBzG,MAAMC,MAAM,GAAGhD,QAAQ,CAACoC,MAAD,EAASd,IAAT,CAAvB;AACA,MAAM2B,cAAc,GAAGC,MAAM,CAACC,MAAP,CAAcL,gBAAd,CAAvB;AACA,MAAMM,SAAS,GAAGlD,aAAa,CAAC8C,MAAD,CAA/B;AACA,MAAMK,aAAa,GAAGlD,iBAAiB,CAAC6C,MAAD,EAAS1B,IAAT,CAAvC;AACA,MAAMgC,QAAQ,GAAGF,SAAS,GAAG,CAA7B;AAEA,MAAMG,KAAK,GAAGD,QAAQ,GAAGhD,QAAQ,CAAC,CAAD,EAAI,CAAJ,EAAO+C,aAAP,CAAX,GAAmC,CAAC,CAAD,EAAI,CAAJ,CAAzD;AACA,MAAMG,KAAK,GAAGF,QAAQ,GAAG/C,QAAQ,CAACyC,MAAD,CAAX,GAAsB,EAA5C;AACA,MAAMS,WAAW,GAAGH,QAAQ,GAAGlD,SAAS,CAACW,MAAD,CAAZ,GAAuB,EAAnD;AACA,MAAM2C,QAAQ,GAAGJ,QAAQ,GAAGjD,WAAW,CAAC2C,MAAD,EAAS1B,IAAT,CAAd,GAA+B,EAAxD;;AAEA,MAAMqC,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzBpB,IAAAA,aAAa,CAAC;AACZqB,MAAAA,KAAK,EAAEnE,GAAG,CAACyC,SAAD,EAAY,qBAAZ,EAAmC,CAAnC,CADE;AAEZ2B,MAAAA,MAAM,EAAEpE,GAAG,CAACyC,SAAD,EAAY,sBAAZ,EAAoC,CAApC;AAFC,KAAD,CAAb;AAID,GALD,CA/ByG,CAsCzG;;;AACAhD,EAAAA,SAAS,CAAC,YAAM;AACd,QAAM4E,iBAAiB,GAAGtE,QAAQ,CAAC,UAACuE,OAAD,EAAUC,QAAV,EAAuB;AACxD,UAAID,OAAO,IAAIA,OAAO,CAAC,CAAD,CAAtB,EAA2BJ,YAAY;AACxC,KAFiC,EAE/B,GAF+B,CAAlC;AAIA,QAAMM,UAAU,GAAG/B,SAAS,CAACgC,OAA7B;AACA,QAAI,CAACD,UAAL,EAAiB;AAEjB,QAAME,EAAE,GAAG,IAAI7E,cAAJ,CAAmBwE,iBAAnB,CAAX;AAEAH,IAAAA,YAAY;AACZS,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCV,YAAlC,EAXc,CAad;;AACAQ,IAAAA,EAAE,CAACG,OAAH,CAAWL,UAAX,EAdc,CAgBd;;AACA,WAAO,YAAM;AACXG,MAAAA,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqCZ,YAArC;AACAQ,MAAAA,EAAE,CAACK,SAAH,CAAaP,UAAb;AACD,KAHD;AAID,GArBQ,EAqBN,EArBM,CAAT,CAvCyG,CA4DjG;AAER;;AACA/E,EAAAA,SAAS,CACP,YAAM;AACJmD,IAAAA,SAAS,CAACzB,KAAD,CAAT;AACAiC,IAAAA,WAAW,CAACV,SAAD,CAAX;AACAY,IAAAA,mBAAmB,CAACZ,SAAD,CAAnB;AACD,GALM,EAMP,CAACvB,KAAD,CANO,CAMC;AAND,GAAT,CA/DyG,CAwEzG;;AACA,MAAI,CAACJ,KAAK,CAACiE,OAAN,CAAcC,YAAd,CAA2BtC,MAA3B,EAAmC,IAAnC,CAAL,EAA+C,OAAO,IAAP;;AAE/C,MAAMuC,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzBC,IAAAA,UAAU,CAAC,YAAM;AACfnC,MAAAA,aAAa,CAAC,IAAD,CAAb;AACAI,MAAAA,WAAW,CAACC,gBAAD,CAAX;AACAT,MAAAA,SAAS,CAACa,MAAM,CAACC,MAAP,CAAcL,gBAAd,CAAD,CAAT;AACAtB,MAAAA,QAAQ,CAACqD,aAAT,CAAuB/B,gBAAvB;AACD,KALS,EAKP,EALO,CAAV;AAMD,GAPD;;AASA,MAAMgC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,OAAD,EAAa;AACjCpC,IAAAA,SAAS,CAACD,MAAM,GAAG,CAAV,CAAT;AACAD,IAAAA,aAAa,CAACsC,OAAD,CAAb;AACD,GAHD;;AAKA,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAACpC,QAAD;AAAA,WAClBpD,QAAQ,CAAC,UAACuF,OAAD,EAAUE,UAAV,EAAyB;AAChC,UAAMC,YAAY,GAAG3F,KAAK,CAAC,EAAD,EAAKqD,QAAL,CAA1B;AAEAsC,MAAAA,YAAY,CAACH,OAAD,CAAZ,CAAsBhD,IAAtB,IAA+BkD,UAAU,GAAG3C,UAAU,CAACsB,KAAzB,GAAkCP,aAAhE;AACArD,MAAAA,QAAQ,CAACD,UAAU,CAACmD,MAAM,CAACC,MAAP,CAAc+B,YAAd,CAAD,EAA8B5D,IAA9B,CAAX,EAAgDA,IAAhD,CAAR;;AAEA,UAAIwB,gBAAgB,CAACiC,OAAD,CAAhB,CAA0BI,KAA1B,KAAoCD,YAAY,CAACH,OAAD,CAAZ,CAAsBI,KAA9D,EAAqE;AACnEpC,QAAAA,mBAAmB,CAACmC,YAAD,CAAnB;AACD;AACF,KATO,EASL,EATK,CADU;AAAA,GAApB;;AAYA,MAAME,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,UAAD,EAAgB;AACvC,QAAMC,QAAQ,GAAGxE,UAAU,CAACyE,IAAX,CAAgB,UAACC,CAAD;AAAA,aAAOA,CAAC,CAACC,EAAF,KAASJ,UAAhB;AAAA,KAAhB,KAA+C,EAAhE;AAEA,WAAOC,QAAQ,CAACI,KAAhB;AACD,GAJD;;AAMA,sBACE;AAAK,IAAA,SAAS,EAAE1D,OAAO,CAAC2D,IAAxB;AAA8B,mBAAY,QAA1C;AAAmD,IAAA,KAAK,EAAE;AAAEC,MAAAA,UAAU,YAAK1E,KAAK,GAAG,GAAb;AAAZ,KAA1D;AAAA,2BACE;AAAK,MAAA,SAAS,EAAEc,OAAO,CAAC6D,SAAxB;AAAA,6BACE;AAAK,QAAA,GAAG,EAAE3D,SAAV;AAAqB,QAAA,SAAS,EAAEF,OAAO,CAAC8D,MAAxC;AAAA,mBACGtC,KAAK,CAACuC,GAAN,CAAU,UAACC,KAAD,EAAQC,GAAR,EAAgB;AACzB,8BACE,QAAC,UAAD;AAAsB,YAAA,IAAI,EAAC,GAA3B;AAA+B,YAAA,KAAK,EAAED,KAAtC;AAA6C,YAAA,MAAM,EAAE5C,SAArD;AAAgE,YAAA,MAAM,EAAEzB,MAAxE;AAAgF,YAAA,UAAU,EAAEP,UAA5F;AAAwG,YAAA,QAAQ,EAAEJ;AAAlH,aAAiBiF,GAAjB;AAAA;AAAA;AAAA;AAAA,mBADF;AAGD,SAJA,CADH,EAOG1C,KAAK,CAACwC,GAAN,CAAU,UAACC,KAAD,EAAQC,GAAR,EAAgB;AACzB,8BAAO,QAAC,UAAD;AAAsB,YAAA,IAAI,EAAC,GAA3B;AAA+B,YAAA,KAAK,EAAED,KAAtC;AAA6C,YAAA,KAAK,EAAE3C,aAApD;AAAmE,YAAA,MAAM,EAAE1B,MAA3E;AAAmF,YAAA,UAAU,EAAEP;AAA/F,aAAiB6E,GAAjB;AAAA;AAAA;AAAA;AAAA,mBAAP;AACD,SAFA,CAPH,EAWGxC,WAAW,CAACsC,GAAZ,CAAgB,UAACG,CAAD,EAAO;AACtB,8BACE,QAAC,WAAD;AAEE,YAAA,KAAK,EAAEnF,MAAM,CAACwE,IAAP,CAAY,UAACY,CAAD;AAAA,qBAAOA,CAAC,CAACH,KAAF,KAAYE,CAAnB;AAAA,aAAZ,CAFT;AAGE,YAAA,MAAM,EAAE9C,SAHV;AAIE,YAAA,UAAU,EAAEhC,UAJd;AAKE,YAAA,QAAQ,EAAEJ;AALZ,aACOkF,CADP;AAAA;AAAA;AAAA;AAAA,mBADF;AASD,SAVA,CAXH,EAuBGxC,QAAQ,CAACqC,GAAT,CAAa,UAACK,CAAD,EAAO;AACnB,8BAAO,QAAC,aAAD;AAAqC,YAAA,OAAO,EAAEA,CAA9C;AAAiD,YAAA,MAAM,EAAEhD,SAAzD;AAAoE,YAAA,MAAM,EAAEzB,MAA5E;AAAoF,YAAA,UAAU,EAAEP;AAAhG,uBAAuBgF,CAAC,CAACC,CAAzB,cAA8BD,CAAC,CAACD,CAAhC;AAAA;AAAA;AAAA;AAAA,mBAAP;AACD,SAFA,CAvBH,EA2BGnD,MAAM,CAAC+C,GAAP,CAAW,UAACI,CAAD,EAAO;AACjB,cAAI,CAAC3D,UAAD,IAAeA,UAAU,KAAK2D,CAAC,CAACV,EAApC,EAAwC;AACtC,gCACE,QAAC,WAAD;AAEE,cAAA,KAAK,EAAEU,CAFT;AAGE,cAAA,SAAS,EAAE/C,SAHb;AAIE,cAAA,aAAa,EAAEC,aAJjB;AAKE,cAAA,IAAI,EAAE/B,IALR;AAME,cAAA,UAAU,EAAEkB,UAAU,IAAIA,UAAU,KAAK2D,CAAC,CAACV,EAN7C;AAOE,cAAA,MAAM,EAAE/C,MAPV;AAQE,cAAA,QAAQ,EAAEyD,CAAC,CAACnF,QARd;AASE,cAAA,KAAK,EAAEoE,gBAAgB,CAACe,CAAC,CAACd,UAAH,CATzB;AAUE,cAAA,aAAa,EAAEP,aAVjB;AAWE,cAAA,WAAW,EAAEE,WAAW,CAACpC,QAAD,CAX1B;AAYE,cAAA,YAAY,EAAE+B;AAZhB,eACOwB,CAAC,CAACV,EADT;AAAA;AAAA;AAAA;AAAA,qBADF;AAgBD;;AACD,iBAAO,IAAP;AACD,SApBA,CA3BH,EAiDGxC,cAAc,CAAC8C,GAAf,CAAmB,UAACI,CAAD,EAAO;AACzB,cAAI3D,UAAJ,EAAgB;AACd,gCACE,QAAC,WAAD;AAEE,cAAA,KAAK,EAAE2D,CAFT;AAGE,cAAA,SAAS,EAAE/C,SAHb;AAIE,cAAA,aAAa,EAAEC,aAJjB;AAKE,cAAA,IAAI,EAAE/B,IALR;AAME,cAAA,aAAa,EAAEkB,UAAU,IAAIA,UAAU,KAAK2D,CAAC,CAACV,EANhD;AAOE,cAAA,QAAQ,EAAEU,CAAC,CAACnF,QAPd;AAQE,cAAA,KAAK,EAAEoE,gBAAgB,CAACe,CAAC,CAACd,UAAH,CARzB;AASE,cAAA,aAAa,EAAEP,aATjB;AAUE,cAAA,WAAW,EAAEE,WAAW,CAACpC,QAAD,CAV1B;AAWE,cAAA,YAAY,EAAE+B;AAXhB,eACOwB,CAAC,CAACV,EADT;AAAA;AAAA;AAAA;AAAA,qBADF;AAeD;;AACD,iBAAO,IAAP;AACD,SAnBA,CAjDH;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA4ED;;GAvLuB/E,M;;KAAAA,M;AAAAA,M","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ResizeObserver from 'resize-observer-polyfill';\r\nimport merge from 'lodash/merge';\r\nimport debounce from 'lodash/debounce';\r\nimport get from 'lodash/get';\r\n\r\n// app\r\nimport styles from './Mudmap.styles';\r\nimport { MudmapAxis, MudmapLayer, MudmapLimit, MudmapTranche } from 'components';\r\nimport {\r\n  sortByLeft,\r\n  setLefts,\r\n  mapById,\r\n  calcMaxAmount,\r\n  calcMaxPercentage,\r\n  getLimits,\r\n  getTranches,\r\n  getXaxis,\r\n  getYaxis,\r\n} from './Mudmap.utils';\r\nimport * as utils from 'utils';\r\n\r\n// mui\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nMudmap.propTypes = {\r\n  items: PropTypes.array,\r\n  capacities: PropTypes.array,\r\n  limits: PropTypes.array,\r\n  currency: PropTypes.string,\r\n  ratio: PropTypes.number,\r\n  fullscreen: PropTypes.bool,\r\n  type: PropTypes.oneOf(['written', 'signed']),\r\n  handlers: PropTypes.object,\r\n};\r\n\r\nMudmap.defaultProps = {\r\n  currency: '',\r\n  capacities: [],\r\n  ratio: 9 / 16, // 16:9 ratio\r\n  type: 'written',\r\n  handlers: {},\r\n};\r\n\r\nexport default function Mudmap({ items, capacities, limits, currency, ratio, fullscreen, type, handlers }) {\r\n  const margin = {\r\n    top: 24,\r\n    right: fullscreen ? 60 : 48,\r\n    bottom: fullscreen ? 32 : 24,\r\n    left: fullscreen ? 60 : 48,\r\n  };\r\n\r\n  const classes = makeStyles(styles, { name: 'Mudmap' })({ margin });\r\n  const mudMapRef = useRef(null);\r\n\r\n  const layerById = mapById(setLefts(items, type));\r\n\r\n  const [quotes, setQuotes] = useState(items);\r\n  const [dimensions, setDimensions] = useState({});\r\n  const [draggingId, setDraggingId] = useState(null);\r\n  const [zIndex, setZIndex] = useState(2);\r\n  const [layerMap, setLayerMap] = useState(layerById);\r\n  const [layerDraggingMap, setLayerDraggingMap] = useState(layerById);\r\n\r\n  const layers = setLefts(quotes, type);\r\n  const layersDragging = Object.values(layerDraggingMap);\r\n  const maxAmount = calcMaxAmount(layers);\r\n  const maxPercentage = calcMaxPercentage(layers, type);\r\n  const isLoaded = maxAmount > 0;\r\n\r\n  const xAxis = isLoaded ? getXaxis(0, 1, maxPercentage) : [0, 1];\r\n  const yAxis = isLoaded ? getYaxis(layers) : [];\r\n  const yAxisLimits = isLoaded ? getLimits(limits) : [];\r\n  const tranches = isLoaded ? getTranches(layers, type) : [];\r\n\r\n  const handleResize = () => {\r\n    setDimensions({\r\n      width: get(mudMapRef, 'current.clientWidth', 0),\r\n      height: get(mudMapRef, 'current.clientHeight', 0),\r\n    });\r\n  };\r\n\r\n  // first render\r\n  useEffect(() => {\r\n    const debouncedObserver = debounce((entries, observer) => {\r\n      if (entries && entries[0]) handleResize();\r\n    }, 250);\r\n\r\n    const mudmapElem = mudMapRef.current;\r\n    if (!mudmapElem) return;\r\n\r\n    const ro = new ResizeObserver(debouncedObserver);\r\n\r\n    handleResize();\r\n    window.addEventListener('resize', handleResize);\r\n\r\n    // check if the mudmap is resized and update width/height accordingly\r\n    ro.observe(mudmapElem);\r\n\r\n    // cleanup\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n      ro.unobserve(mudmapElem);\r\n    };\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  // every render\r\n  useEffect(\r\n    () => {\r\n      setQuotes(items);\r\n      setLayerMap(layerById);\r\n      setLayerDraggingMap(layerById);\r\n    },\r\n    [items] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  // abort\r\n  if (!utils.generic.isValidArray(quotes, true)) return null;\r\n\r\n  const stopDragging = () => {\r\n    setTimeout(() => {\r\n      setDraggingId(null);\r\n      setLayerMap(layerDraggingMap);\r\n      setQuotes(Object.values(layerDraggingMap));\r\n      handlers.reorderMudmap(layerDraggingMap);\r\n    }, 20);\r\n  };\r\n\r\n  const startDragging = (layerId) => {\r\n    setZIndex(zIndex + 1);\r\n    setDraggingId(layerId);\r\n  };\r\n\r\n  const setDragging = (layerMap) =>\r\n    debounce((layerId, moveDeltaX) => {\r\n      const copyLayerMap = merge({}, layerMap);\r\n\r\n      copyLayerMap[layerId].left += (moveDeltaX / dimensions.width) * maxPercentage;\r\n      setLefts(sortByLeft(Object.values(copyLayerMap), type), type);\r\n\r\n      if (layerDraggingMap[layerId].order !== copyLayerMap[layerId].order) {\r\n        setLayerDraggingMap(copyLayerMap);\r\n      }\r\n    }, 20);\r\n\r\n  const getCapacityColor = (capacityId) => {\r\n    const capacity = capacities.find((c) => c.id === capacityId) || {};\r\n\r\n    return capacity.color;\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root} data-testid=\"mudmap\" style={{ paddingTop: `${ratio * 100}%` }}>\r\n      <div className={classes.container}>\r\n        <div ref={mudMapRef} className={classes.mudmap}>\r\n          {yAxis.map((value, idx) => {\r\n            return (\r\n              <MudmapAxis key={idx} axis=\"y\" value={value} height={maxAmount} margin={margin} fullscreen={fullscreen} currency={currency} />\r\n            );\r\n          })}\r\n\r\n          {xAxis.map((value, idx) => {\r\n            return <MudmapAxis key={idx} axis=\"x\" value={value} width={maxPercentage} margin={margin} fullscreen={fullscreen} />;\r\n          })}\r\n\r\n          {yAxisLimits.map((a) => {\r\n            return (\r\n              <MudmapLimit\r\n                key={a}\r\n                limit={limits.find((l) => l.value === a)}\r\n                height={maxAmount}\r\n                fullscreen={fullscreen}\r\n                currency={currency}\r\n              />\r\n            );\r\n          })}\r\n\r\n          {tranches.map((t) => {\r\n            return <MudmapTranche key={`${t.u}-${t.l}`} tranche={t} height={maxAmount} margin={margin} fullscreen={fullscreen} />;\r\n          })}\r\n\r\n          {layers.map((l) => {\r\n            if (!draggingId || draggingId === l.id) {\r\n              return (\r\n                <MudmapLayer\r\n                  key={l.id}\r\n                  layer={l}\r\n                  maxAmount={maxAmount}\r\n                  maxPercentage={maxPercentage}\r\n                  type={type}\r\n                  isDragging={draggingId && draggingId === l.id}\r\n                  zIndex={zIndex}\r\n                  currency={l.currency}\r\n                  color={getCapacityColor(l.capacityId)}\r\n                  startDragging={startDragging}\r\n                  setDragging={setDragging(layerMap)}\r\n                  stopDragging={stopDragging}\r\n                />\r\n              );\r\n            }\r\n            return null;\r\n          })}\r\n\r\n          {layersDragging.map((l) => {\r\n            if (draggingId) {\r\n              return (\r\n                <MudmapLayer\r\n                  key={l.id}\r\n                  layer={l}\r\n                  maxAmount={maxAmount}\r\n                  maxPercentage={maxPercentage}\r\n                  type={type}\r\n                  isPlaceholder={draggingId && draggingId === l.id}\r\n                  currency={l.currency}\r\n                  color={getCapacityColor(l.capacityId)}\r\n                  startDragging={startDragging}\r\n                  setDragging={setDragging(layerMap)}\r\n                  stopDragging={stopDragging}\r\n                />\r\n              );\r\n            }\r\n            return null;\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}