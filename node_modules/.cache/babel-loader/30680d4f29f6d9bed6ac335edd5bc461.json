{"ast":null,"code":"import \"core-js/modules/es.array.find\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\forms\\\\SetClaimsTaskSelection\\\\SetClaimsTaskSelection.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as Yup from 'yup';\nimport * as constants from 'consts'; //app\n\nimport { SetClaimsTaskSelectionView } from './SetClaimsTaskSelection.view';\nimport { hideModal, selectReopenTaskList, selectPriorities, getReOpenTaskLists, editReOpenedClaimTask, getClaimsProcessing, getPriorityLevels } from 'stores';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nSetClaimsTaskSelection.propTypes = {\n  claim: PropTypes.object\n};\nexport default function SetClaimsTaskSelection(_ref) {\n  _s();\n\n  var claim = _ref.claim;\n  var dispatch = useDispatch();\n  var tasks = useSelector(selectReopenTaskList) || [];\n  var priorities = useSelector(selectPriorities);\n  var claimsType = constants.CLAIM_TEAM_TYPE.myClaims;\n  var searchBy = constants.CLAIMS_SEARCH_OPTION_CLAIM_REF;\n  var fields = [{\n    name: 'processID',\n    type: 'hidden',\n    value: claim === null || claim === void 0 ? void 0 : claim.processID\n  }, {\n    name: 'taskSelection',\n    type: 'select',\n    options: tasks || [],\n    defaultValue: (tasks === null || tasks === void 0 ? void 0 : tasks.find(function (item) {\n      return (claim === null || claim === void 0 ? void 0 : claim.tasks) === (item === null || item === void 0 ? void 0 : item.taskLabel);\n    })) || '',\n    optionKey: 'taskListID',\n    optionLabel: 'taskLabel',\n    validation: Yup.string().required(utils.string.t('validation.required'))\n  }];\n  var actions = [{\n    name: 'cancel',\n    label: utils.string.t('app.exit'),\n    handler: function handler() {\n      dispatch(hideModal());\n    }\n  }, {\n    name: 'submit',\n    label: utils.string.t('app.save'),\n    handler: function handler(value) {\n      var selectedObj = tasks === null || tasks === void 0 ? void 0 : tasks.find(function (item) {\n        return item.taskListID === value.taskSelection;\n      });\n      dispatch(editReOpenedClaimTask(selectedObj, value, priorities)).then(function (data) {\n        var _data$response;\n\n        if ((data === null || data === void 0 ? void 0 : (_data$response = data.response) === null || _data$response === void 0 ? void 0 : _data$response.status) === constants.API_RESPONSE_SUCCESS_STATUS) {\n          dispatch(getClaimsProcessing({\n            requestType: constants.CLAIM_PROCESSING_REQ_TYPES.search,\n            claimsType: claimsType,\n            term: '',\n            filterTerm: [],\n            searchBy: searchBy,\n            pullClosedRecords: 'false'\n          }));\n        }\n      });\n      dispatch(hideModal());\n    }\n  }];\n  useEffect(function () {\n    if (utils.generic.isInvalidOrEmptyArray(priorities)) {\n      dispatch(getPriorityLevels());\n    }\n\n    if (utils.generic.isInvalidOrEmptyArray(tasks)) {\n      dispatch(getReOpenTaskLists());\n    }\n  }, [] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  return /*#__PURE__*/_jsxDEV(SetClaimsTaskSelectionView, {\n    actions: actions,\n    fields: fields\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 10\n  }, this);\n}\n\n_s(SetClaimsTaskSelection, \"lGUOdn0x5mTH+ylf7ov7+N3jAqQ=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = SetClaimsTaskSelection;\nSetClaimsTaskSelection.displayName = \"SetClaimsTaskSelection\";\nSetClaimsTaskSelection.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"SetClaimsTaskSelection\",\n  \"props\": {\n    \"claim\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\forms\\\\SetClaimsTaskSelection\\\\SetClaimsTaskSelection.js\"] = {\n    name: \"SetClaimsTaskSelection\",\n    docgenInfo: SetClaimsTaskSelection.__docgenInfo,\n    path: \"src\\\\forms\\\\SetClaimsTaskSelection\\\\SetClaimsTaskSelection.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"SetClaimsTaskSelection\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/forms/SetClaimsTaskSelection/SetClaimsTaskSelection.js"],"names":["React","useEffect","PropTypes","useDispatch","useSelector","Yup","constants","SetClaimsTaskSelectionView","hideModal","selectReopenTaskList","selectPriorities","getReOpenTaskLists","editReOpenedClaimTask","getClaimsProcessing","getPriorityLevels","utils","SetClaimsTaskSelection","propTypes","claim","object","dispatch","tasks","priorities","claimsType","CLAIM_TEAM_TYPE","myClaims","searchBy","CLAIMS_SEARCH_OPTION_CLAIM_REF","fields","name","type","value","processID","options","defaultValue","find","item","taskLabel","optionKey","optionLabel","validation","string","required","t","actions","label","handler","selectedObj","taskListID","taskSelection","then","data","response","status","API_RESPONSE_SUCCESS_STATUS","requestType","CLAIM_PROCESSING_REQ_TYPES","search","term","filterTerm","pullClosedRecords","generic","isInvalidOrEmptyArray"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport * as Yup from 'yup';\r\nimport * as constants from 'consts';\r\n\r\n//app\r\nimport { SetClaimsTaskSelectionView } from './SetClaimsTaskSelection.view';\r\nimport {\r\n  hideModal,\r\n  selectReopenTaskList,\r\n  selectPriorities,\r\n  getReOpenTaskLists,\r\n  editReOpenedClaimTask,\r\n  getClaimsProcessing,\r\n  getPriorityLevels,\r\n} from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nSetClaimsTaskSelection.propTypes = {\r\n  claim: PropTypes.object,\r\n};\r\n\r\nexport default function SetClaimsTaskSelection({ claim }) {\r\n  const dispatch = useDispatch();\r\n  const tasks = useSelector(selectReopenTaskList) || [];\r\n  const priorities = useSelector(selectPriorities);\r\n  const claimsType = constants.CLAIM_TEAM_TYPE.myClaims;\r\n  const searchBy = constants.CLAIMS_SEARCH_OPTION_CLAIM_REF;\r\n\r\n  const fields = [\r\n    {\r\n      name: 'processID',\r\n      type: 'hidden',\r\n      value: claim?.processID,\r\n    },\r\n    {\r\n      name: 'taskSelection',\r\n      type: 'select',\r\n      options: tasks || [],\r\n      defaultValue: tasks?.find((item) => claim?.tasks === item?.taskLabel) || '',\r\n      optionKey: 'taskListID',\r\n      optionLabel: 'taskLabel',\r\n      validation: Yup.string().required(utils.string.t('validation.required')),\r\n    },\r\n  ];\r\n\r\n  const actions = [\r\n    {\r\n      name: 'cancel',\r\n      label: utils.string.t('app.exit'),\r\n      handler: () => {\r\n        dispatch(hideModal());\r\n      },\r\n    },\r\n    {\r\n      name: 'submit',\r\n      label: utils.string.t('app.save'),\r\n      handler: (value) => {\r\n        const selectedObj = tasks?.find((item) => item.taskListID === value.taskSelection);\r\n        dispatch(editReOpenedClaimTask(selectedObj, value, priorities)).then((data) => {\r\n          if (data?.response?.status === constants.API_RESPONSE_SUCCESS_STATUS) {\r\n            dispatch(\r\n              getClaimsProcessing({\r\n                requestType: constants.CLAIM_PROCESSING_REQ_TYPES.search,\r\n                claimsType,\r\n                term: '',\r\n                filterTerm: [],\r\n                searchBy,\r\n                pullClosedRecords: 'false',\r\n              })\r\n            );\r\n          }\r\n        });\r\n        dispatch(hideModal());\r\n      },\r\n    },\r\n  ];\r\n\r\n  useEffect(\r\n    () => {\r\n      if (utils.generic.isInvalidOrEmptyArray(priorities)) {\r\n        dispatch(getPriorityLevels());\r\n      }\r\n      if (utils.generic.isInvalidOrEmptyArray(tasks)) {\r\n        dispatch(getReOpenTaskLists());\r\n      }\r\n    },\r\n    [] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  return <SetClaimsTaskSelectionView actions={actions} fields={fields} />;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}