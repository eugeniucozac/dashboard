{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { addLoader, authLogout, enqueueNotification, hideModal, removeLoader } from 'stores';\nimport * as utils from 'utils';\nimport isEmpty from 'lodash/isEmpty';\nexport var postRiskDraft = function postRiskDraft(values, productType, definitions, draftId) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/risk.actions.postRiskDraft',\n      message: 'Data missing for POST request'\n    };\n    dispatch(postRiskDraftRequest(values));\n    dispatch(addLoader('postRiskDraft'));\n\n    if (!values || isEmpty(values) || !productType || !utils.generic.isValidArray(definitions)) {\n      dispatch(postRiskDraftFailure(defaultError));\n      dispatch(enqueueNotification('notification.generic.request', 'error'));\n      dispatch(hideModal());\n      dispatch(removeLoader('postRiskDraft'));\n      return;\n    }\n\n    var transFormedValues = _objectSpread({}, utils.risk.parsedValues(utils.risk.filterConditionalValues(values, definitions), definitions));\n\n    var body = {\n      id: draftId ? draftId : null,\n      risk: _objectSpread(_objectSpread({}, transFormedValues), {}, {\n        riskType: productType,\n        address: _objectSpread(_objectSpread({}, transFormedValues.address), {}, {\n          country: null\n        }),\n        ownerAddress: _objectSpread(_objectSpread({}, transFormedValues.ownerAddress), {}, {\n          country: null\n        })\n      })\n    };\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.auth,\n      path: 'api/v1/risks/drafts',\n      data: body\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleResponseJsonObject(json);\n    }).then(function (data) {\n      dispatch(postRiskDraftSuccess(data, draftId));\n      dispatch(enqueueNotification(\"\".concat(draftId ? 'notification.editDraft.success' : 'notification.saveDraft.success'), 'success'));\n    })[\"catch\"](function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API post error (risk.postRiskDraft)'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(postRiskDraftFailure(err));\n      dispatch(enqueueNotification(utils.api.getErrorMessage(err), 'error'));\n      dispatch(hideModal());\n      dispatch(removeLoader('postRiskDraft'));\n      return err;\n    })[\"finally\"](function () {\n      dispatch(hideModal());\n      dispatch(removeLoader('postRiskDraft'));\n      return;\n    });\n  };\n};\nexport var postRiskDraftRequest = function postRiskDraftRequest(formData) {\n  return {\n    type: 'DRAFT_RISK_POST_REQUEST',\n    payload: formData\n  };\n};\nexport var postRiskDraftSuccess = function postRiskDraftSuccess(responseData, draftId) {\n  return {\n    type: draftId ? 'DRAFT_RISK_UPDATE_SUCCESS' : 'DRAFT_RISK_POST_SUCCESS',\n    payload: responseData\n  };\n};\nexport var postRiskDraftFailure = function postRiskDraftFailure(error) {\n  return {\n    type: 'DRAFT_RISK_POST_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/risk/risk.actions.saveDraft.js"],"names":["addLoader","authLogout","enqueueNotification","hideModal","removeLoader","utils","isEmpty","postRiskDraft","values","productType","definitions","draftId","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","message","postRiskDraftRequest","generic","isValidArray","postRiskDraftFailure","transFormedValues","risk","parsedValues","filterConditionalValues","body","id","riskType","address","country","ownerAddress","api","post","token","accessToken","path","data","then","response","handleResponse","json","handleResponseJsonObject","postRiskDraftSuccess","err","errorParams","handleError","handleUnauthorized","getErrorMessage","formData","type","payload","responseData","error"],"mappings":"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","sourcesContent":["import { addLoader, authLogout, enqueueNotification, hideModal, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\nimport isEmpty from 'lodash/isEmpty';\r\n\r\nexport const postRiskDraft = (values, productType, definitions, draftId) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } } } = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/risk.actions.postRiskDraft',\r\n    message: 'Data missing for POST request',\r\n  };\r\n\r\n  dispatch(postRiskDraftRequest(values));\r\n  dispatch(addLoader('postRiskDraft'));\r\n\r\n  if (!values || isEmpty(values) || !productType || !utils.generic.isValidArray(definitions)) {\r\n    dispatch(postRiskDraftFailure(defaultError));\r\n    dispatch(enqueueNotification('notification.generic.request', 'error'));\r\n    dispatch(hideModal());\r\n    dispatch(removeLoader('postRiskDraft'));\r\n    return;\r\n  }\r\n\r\n  const transFormedValues = { ...utils.risk.parsedValues(utils.risk.filterConditionalValues(values, definitions), definitions) };\r\n  const body = {\r\n    id: draftId ? draftId : null,\r\n    risk: {\r\n      ...transFormedValues,\r\n      riskType: productType,\r\n      address: {\r\n        ...transFormedValues.address,\r\n        country: null,\r\n      },\r\n      ownerAddress: {\r\n        ...transFormedValues.ownerAddress,\r\n        country: null,\r\n      },\r\n    },\r\n  };\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.auth,\r\n      path: 'api/v1/risks/drafts',\r\n      data: body,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleResponseJsonObject(json))\r\n    .then((data) => {\r\n      dispatch(postRiskDraftSuccess(data, draftId));\r\n      dispatch(enqueueNotification(`${draftId ? 'notification.editDraft.success' : 'notification.saveDraft.success'}`, 'success'));\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        ...defaultError,\r\n        message: 'API post error (risk.postRiskDraft)',\r\n      };\r\n\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(postRiskDraftFailure(err));\r\n      dispatch(enqueueNotification(utils.api.getErrorMessage(err), 'error'));\r\n      dispatch(hideModal());\r\n      dispatch(removeLoader('postRiskDraft'));\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(hideModal());\r\n      dispatch(removeLoader('postRiskDraft'));\r\n      return;\r\n    });\r\n};\r\n\r\nexport const postRiskDraftRequest = (formData) => {\r\n  return {\r\n    type: 'DRAFT_RISK_POST_REQUEST',\r\n    payload: formData,\r\n  };\r\n};\r\n\r\nexport const postRiskDraftSuccess = (responseData, draftId) => {\r\n  return {\r\n    type: draftId ? 'DRAFT_RISK_UPDATE_SUCCESS' : 'DRAFT_RISK_POST_SUCCESS',\r\n    payload: responseData,\r\n  };\r\n};\r\n\r\nexport const postRiskDraftFailure = (error) => {\r\n  return {\r\n    type: 'DRAFT_RISK_POST_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}