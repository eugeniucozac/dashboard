{"ast":null,"code":"import _defineProperty from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\components\\\\FilterBar\\\\FilterBar.view.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport classnames from 'classnames';\nimport get from 'lodash/get'; // app\n\nimport styles from './FilterBar.style';\nimport { Button, FormAutocomplete, FormContainer, FormFields, FormActions, FormGrid, FormText } from 'components';\nimport * as utils from 'utils';\nimport { useMedia } from 'hooks'; // mui\n\nimport CloseIcon from '@material-ui/icons/Close';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { makeStyles, InputAdornment } from '@material-ui/core';\nimport IconButton from '@material-ui/core/IconButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function FilterBarView(_ref) {\n  _s();\n\n  var _this = this;\n\n  var fields = _ref.fields,\n      actions = _ref.actions;\n  var media = useMedia();\n  var classes = makeStyles(styles, {\n    name: 'FilterBar'\n  })({\n    isMobile: media.mobile\n  });\n  var defaultValues = utils.form.getInitialValues(fields);\n  var validationSchema = utils.form.getValidationSchema(fields);\n  var spacing = media.mobile ? 2 : 0;\n\n  var _useForm = useForm(_objectSpread({\n    defaultValues: defaultValues\n  }, validationSchema && {\n    resolver: yupResolver(validationSchema)\n  })),\n      control = _useForm.control,\n      reset = _useForm.reset,\n      errors = _useForm.errors,\n      handleSubmit = _useForm.handleSubmit,\n      formState = _useForm.formState,\n      setValue = _useForm.setValue;\n\n  var resetAction = actions && actions.find(function (action) {\n    return action.name === 'reset';\n  });\n  var filterAction = actions && actions.find(function (action) {\n    return action.name === 'filter';\n  });\n\n  var onReset = function onReset() {\n    resetAction && utils.generic.isFunction(resetAction.handler) && resetAction.handler();\n    reset();\n  };\n\n  var onFilter = function onFilter(formData) {\n    filterAction && utils.generic.isFunction(filterAction.handler) && filterAction.handler(formData);\n  };\n\n  var fieldMap = {\n    text: FormText,\n    autocomplete: FormAutocomplete\n  };\n  var filteredFields = fields.filter(function (field) {\n    return field.type !== fieldMap[field.type];\n  });\n\n  var ClearBtn = /*#__PURE__*/_jsxDEV(Button, {\n    size: \"small\",\n    variant: \"text\",\n    icon: CloseIcon,\n    onClick: onReset,\n    nestedClasses: {\n      btn: classes.resetButton\n    },\n    \"data-testid\": \"search-button-clear\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n\n  var renderField = function renderField(field, firstInput) {\n    var FieldComponent = fieldMap[field.type];\n\n    switch (field.type) {\n      case 'autocomplete':\n        return /*#__PURE__*/_jsxDEV(FieldComponent, _objectSpread(_objectSpread({\n          control: control\n        }, field), {}, {\n          innerComponentProps: _objectSpread(_objectSpread({}, field.innerComponentProps), {}, {\n            isClearable: false\n          }),\n          muiComponentProps: _objectSpread(_objectSpread({}, field.muiComponentProps), {}, {\n            InputProps: {\n              classes: {\n                root: classnames(classes.autocompleteRoot, _defineProperty({}, classes.firstInput, firstInput))\n              }\n            }\n          }),\n          handleUpdate: function handleUpdate(id, value) {\n            setValue(id, value, {\n              shouldDirty: true\n            });\n          }\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, _this);\n\n      case 'text':\n        return /*#__PURE__*/_jsxDEV(FieldComponent, _objectSpread(_objectSpread({\n          control: control\n        }, field), {}, {\n          error: errors[field.name],\n          muiComponentProps: _objectSpread({\n            InputProps: _objectSpread(_objectSpread({}, get(field, 'muiComponentProps.InputProps', {})), {}, {\n              classes: {\n                root: classnames(classes.filledRoot, _defineProperty({}, classes.firstInput, firstInput)),\n                input: classes.filledInput\n              },\n              endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n                position: \"end\",\n                classes: {\n                  root: classes.adornmentEnd\n                },\n                children: resetAction && formState.isDirty ? ClearBtn : /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 101,\n                  columnNumber: 68\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 19\n              }, _this)\n            })\n          }, field.muiComponentProps)\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, _this);\n\n      default:\n        return null;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(FormContainer, {\n      nestedClasses: {\n        root: classes.formContainer\n      },\n      onSubmit: handleSubmit(onFilter),\n      \"data-testid\": \"filter-bar\",\n      children: [/*#__PURE__*/_jsxDEV(FormFields, {\n        nestedClasses: {\n          root: classes.formFields\n        },\n        children: /*#__PURE__*/_jsxDEV(FormGrid, {\n          container: true,\n          spacing: spacing,\n          children: filteredFields.map(function (field, index) {\n            return /*#__PURE__*/_jsxDEV(FormGrid, _objectSpread(_objectSpread({\n              item: true\n            }, field.gridSize), {}, {\n              nestedClasses: {\n                root: classes.formGrid\n              },\n              children: renderField(field, index === 0)\n            }), field.name, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 15\n            }, _this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormActions, {\n        nestedClasses: {\n          actions: classes.actions\n        },\n        children: filterAction ? /*#__PURE__*/_jsxDEV(IconButton, {\n          disableRipple: true,\n          type: \"submit\",\n          disabled: formState.isSubmitting,\n          color: \"primary\",\n          className: classes.filterButton,\n          children: /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FilterBarView, \"kIFoWXGiCU7HNI30y5yT5rNBwaA=\", false, function () {\n  return [useMedia, useForm];\n});\n\n_c = FilterBarView;\n\nvar _c;\n\n$RefreshReg$(_c, \"FilterBarView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/FilterBar/FilterBar.view.js"],"names":["React","useForm","yupResolver","classnames","get","styles","Button","FormAutocomplete","FormContainer","FormFields","FormActions","FormGrid","FormText","utils","useMedia","CloseIcon","SearchIcon","makeStyles","InputAdornment","IconButton","FilterBarView","fields","actions","media","classes","name","isMobile","mobile","defaultValues","form","getInitialValues","validationSchema","getValidationSchema","spacing","resolver","control","reset","errors","handleSubmit","formState","setValue","resetAction","find","action","filterAction","onReset","generic","isFunction","handler","onFilter","formData","fieldMap","text","autocomplete","filteredFields","filter","field","type","ClearBtn","btn","resetButton","renderField","firstInput","FieldComponent","innerComponentProps","isClearable","muiComponentProps","InputProps","root","autocompleteRoot","id","value","shouldDirty","filledRoot","input","filledInput","endAdornment","adornmentEnd","isDirty","formContainer","formFields","map","index","gridSize","formGrid","isSubmitting","filterButton"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport classnames from 'classnames';\r\nimport get from 'lodash/get';\r\n\r\n// app\r\nimport styles from './FilterBar.style';\r\nimport { Button, FormAutocomplete, FormContainer, FormFields, FormActions, FormGrid, FormText } from 'components';\r\nimport * as utils from 'utils';\r\nimport { useMedia } from 'hooks';\r\n\r\n// mui\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { makeStyles, InputAdornment } from '@material-ui/core';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nexport function FilterBarView({ fields, actions }) {\r\n  const media = useMedia();\r\n  const classes = makeStyles(styles, { name: 'FilterBar' })({ isMobile: media.mobile });\r\n  const defaultValues = utils.form.getInitialValues(fields);\r\n  const validationSchema = utils.form.getValidationSchema(fields);\r\n  const spacing = media.mobile ? 2 : 0;\r\n\r\n  const { control, reset, errors, handleSubmit, formState, setValue } = useForm({\r\n    defaultValues,\r\n    ...(validationSchema && { resolver: yupResolver(validationSchema) }),\r\n  });\r\n\r\n  const resetAction = actions && actions.find((action) => action.name === 'reset');\r\n  const filterAction = actions && actions.find((action) => action.name === 'filter');\r\n\r\n  const onReset = () => {\r\n    resetAction && utils.generic.isFunction(resetAction.handler) && resetAction.handler();\r\n    reset();\r\n  };\r\n\r\n  const onFilter = (formData) => {\r\n    filterAction && utils.generic.isFunction(filterAction.handler) && filterAction.handler(formData);\r\n  };\r\n\r\n  const fieldMap = {\r\n    text: FormText,\r\n    autocomplete: FormAutocomplete,\r\n  };\r\n\r\n  const filteredFields = fields.filter((field) => field.type !== fieldMap[field.type]);\r\n  const ClearBtn = (\r\n    <Button\r\n      size=\"small\"\r\n      variant=\"text\"\r\n      icon={CloseIcon}\r\n      onClick={onReset}\r\n      nestedClasses={{ btn: classes.resetButton }}\r\n      data-testid=\"search-button-clear\"\r\n    />\r\n  );\r\n\r\n  const renderField = (field, firstInput) => {\r\n    const FieldComponent = fieldMap[field.type];\r\n\r\n    switch (field.type) {\r\n      case 'autocomplete':\r\n        return (\r\n          <FieldComponent\r\n            control={control}\r\n            {...field}\r\n            innerComponentProps={{\r\n              ...field.innerComponentProps,\r\n              isClearable: false,\r\n            }}\r\n            muiComponentProps={{\r\n              ...field.muiComponentProps,\r\n              InputProps: {\r\n                classes: {\r\n                  root: classnames(classes.autocompleteRoot, { [classes.firstInput]: firstInput }),\r\n                },\r\n              },\r\n            }}\r\n            handleUpdate={(id, value) => {\r\n              setValue(id, value, { shouldDirty: true });\r\n            }}\r\n          />\r\n        );\r\n      case 'text':\r\n        return (\r\n          <FieldComponent\r\n            control={control}\r\n            {...field}\r\n            error={errors[field.name]}\r\n            muiComponentProps={{\r\n              InputProps: {\r\n                ...get(field, 'muiComponentProps.InputProps', {}),\r\n                classes: {\r\n                  root: classnames(classes.filledRoot, { [classes.firstInput]: firstInput }),\r\n                  input: classes.filledInput,\r\n                },\r\n                endAdornment: (\r\n                  <InputAdornment position=\"end\" classes={{ root: classes.adornmentEnd }}>\r\n                    {resetAction && formState.isDirty ? ClearBtn : <span />}\r\n                  </InputAdornment>\r\n                ),\r\n              },\r\n              ...field.muiComponentProps,\r\n            }}\r\n          />\r\n        );\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <FormContainer nestedClasses={{ root: classes.formContainer }} onSubmit={handleSubmit(onFilter)} data-testid=\"filter-bar\">\r\n        <FormFields nestedClasses={{ root: classes.formFields }}>\r\n          <FormGrid container spacing={spacing}>\r\n            {filteredFields.map((field, index) => (\r\n              <FormGrid key={field.name} item {...field.gridSize} nestedClasses={{ root: classes.formGrid }}>\r\n                {renderField(field, index === 0)}\r\n              </FormGrid>\r\n            ))}\r\n          </FormGrid>\r\n        </FormFields>\r\n        <FormActions nestedClasses={{ actions: classes.actions }}>\r\n          {filterAction ? (\r\n            <IconButton\r\n              disableRipple={true}\r\n              type=\"submit\"\r\n              disabled={formState.isSubmitting}\r\n              color=\"primary\"\r\n              className={classes.filterButton}\r\n            >\r\n              <SearchIcon />\r\n            </IconButton>\r\n          ) : null}\r\n        </FormActions>\r\n      </FormContainer>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}