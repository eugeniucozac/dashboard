{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ClaimsComplexityReferralValues\\\\ClaimsComplexityReferralValues.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types'; // app\n\nimport { ClaimsComplexityReferralValuesView } from './ClaimsComplexityReferralValues.view';\nimport { showModal, hideModal, getComplexityReferralValues, selectComplexityReferralValues, selectComplexityReferralDivisionMatrix, selectComplexityReferralDivisionMatrixChanges, getComplexityDivisionMatrixByReferralId, postComplexityDivisionMatrixByReferralId, setComplexityReferralValueId, saveComplexityDivisionMatrixByReferralIdChange } from 'stores';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nClaimsComplexityReferralValues.propTypes = {\n  setIsSelectedTabDirty: PropTypes.func.isRequired\n};\nexport default function ClaimsComplexityReferralValues(_ref) {\n  _s();\n\n  var setIsSelectedTabDirty = _ref.setIsSelectedTabDirty;\n  var dispatch = useDispatch();\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentComplexityRulesValue = _useState2[0],\n      setCurrentComplexityRulesValue = _useState2[1];\n\n  var complexityReferralValues = useSelector(selectComplexityReferralValues);\n  var initComplexityMatrixData = useSelector(selectComplexityReferralDivisionMatrix);\n  var matrixDataDiff = useSelector(selectComplexityReferralDivisionMatrixChanges);\n  useEffect(function () {\n    var isComplexityBasicValuesUpdated = matrixDataDiff && Object.keys(matrixDataDiff).length !== 0;\n    if (isComplexityBasicValuesUpdated) setIsSelectedTabDirty(true);else setIsSelectedTabDirty(false);\n  }, [matrixDataDiff]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var handleAddReferralValue = function handleAddReferralValue() {\n    dispatch(showModal({\n      component: 'ADD_REFERRAL',\n      props: {\n        title: \"\".concat(utils.string.t('claims.modals.addReferralValues.title')),\n        fullWidth: true,\n        maxWidth: 'sm',\n        disableAutoFocus: true,\n        hideCompOnBlur: false,\n        componentProps: {\n          clickOutSideHandler: function clickOutSideHandler() {\n            return _clickOutSideHandler();\n          }\n        }\n      }\n    }));\n  };\n\n  var _clickOutSideHandler = function _clickOutSideHandler() {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        title: utils.string.t('status.alert'),\n        hint: utils.string.t('navigation.title'),\n        fullWidth: true,\n        maxWidth: 'xs',\n        componentProps: {\n          cancelLabel: utils.string.t('app.no'),\n          confirmLabel: utils.string.t('app.yes'),\n          submitHandler: function submitHandler() {\n            dispatch(hideModal());\n          }\n        }\n      }\n    }));\n  };\n\n  var handleRemoveComplexityValues = function handleRemoveComplexityValues() {\n    setCurrentComplexityRulesValue({});\n    dispatch(showModal({\n      component: 'COMPLEXITY_MANAGEMENT_REMOVE_RULE_VALUE',\n      props: {\n        title: utils.string.t('status.alert'),\n        fullWidth: true,\n        maxWidth: 'sm',\n        disableAutoFocus: true\n      }\n    }));\n  };\n\n  var handleEditComplexityRule = function handleEditComplexityRule(complexityRuleValue) {\n    setCurrentComplexityRulesValue(_objectSpread({}, complexityRuleValue));\n    dispatch(setComplexityReferralValueId(complexityRuleValue));\n  };\n\n  var handleUpdateComplexityRuleValue = function handleUpdateComplexityRuleValue(complexityRuleValue) {\n    var newValue = _objectSpread(_objectSpread({}, currentComplexityRulesValue), complexityRuleValue);\n\n    dispatch(setComplexityReferralValueId(newValue));\n  };\n\n  var resetMatrix = function resetMatrix() {\n    dispatch(showModal({\n      component: 'COMPLEXITY_MANAGEMENT_DIVISION_RESET',\n      props: {\n        title: utils.string.t('status.alert'),\n        fullWidth: true,\n        maxWidth: 'xs',\n        disableAutoFocus: true\n      }\n    }));\n  };\n\n  var saveMatrix = function saveMatrix(saveMatrixData) {\n    dispatch(postComplexityDivisionMatrixByReferralId(saveMatrixData));\n  };\n\n  var saveEachMatrixChange = function saveEachMatrixChange(value) {\n    dispatch(saveComplexityDivisionMatrixByReferralIdChange(value));\n  };\n\n  var constructMatrixProps = {\n    initComplexityMatrixData: initComplexityMatrixData,\n    matrixDataDiff: matrixDataDiff,\n    resetMatrix: resetMatrix,\n    saveMatrix: saveMatrix,\n    saveEachMatrixChange: saveEachMatrixChange\n  };\n  var canDeleteRule = !(currentComplexityRulesValue === null || currentComplexityRulesValue === void 0 ? void 0 : currentComplexityRulesValue.complexityRulesID);\n  useEffect(function () {\n    if (!complexityReferralValues.itemsTotal) {\n      dispatch(getComplexityReferralValues());\n    }\n\n    if ((currentComplexityRulesValue === null || currentComplexityRulesValue === void 0 ? void 0 : currentComplexityRulesValue.complexityRulesID) > -1) {\n      dispatch(getComplexityDivisionMatrixByReferralId(currentComplexityRulesValue.complexityRulesID));\n    }\n  }, [complexityReferralValues, currentComplexityRulesValue]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/_jsxDEV(ClaimsComplexityReferralValuesView, {\n    canDeleteRule: canDeleteRule,\n    constructMatrixProps: constructMatrixProps,\n    complexityReferralValues: complexityReferralValues,\n    handleAddReferralValue: handleAddReferralValue,\n    handleRemoveComplexityValues: handleRemoveComplexityValues,\n    handleEditComplexityRule: handleEditComplexityRule,\n    handleUpdateComplexityRuleValue: handleUpdateComplexityRuleValue\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ClaimsComplexityReferralValues, \"N/2/3p/bsYc1rA01IGkmY7i9N8k=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = ClaimsComplexityReferralValues;\nClaimsComplexityReferralValues.displayName = \"ClaimsComplexityReferralValues\";\nClaimsComplexityReferralValues.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"ClaimsComplexityReferralValues\",\n  \"props\": {\n    \"setIsSelectedTabDirty\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\modules\\\\ClaimsComplexityReferralValues\\\\ClaimsComplexityReferralValues.js\"] = {\n    name: \"ClaimsComplexityReferralValues\",\n    docgenInfo: ClaimsComplexityReferralValues.__docgenInfo,\n    path: \"src\\\\modules\\\\ClaimsComplexityReferralValues\\\\ClaimsComplexityReferralValues.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimsComplexityReferralValues\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ClaimsComplexityReferralValues/ClaimsComplexityReferralValues.js"],"names":["React","useEffect","useState","useDispatch","useSelector","PropTypes","ClaimsComplexityReferralValuesView","showModal","hideModal","getComplexityReferralValues","selectComplexityReferralValues","selectComplexityReferralDivisionMatrix","selectComplexityReferralDivisionMatrixChanges","getComplexityDivisionMatrixByReferralId","postComplexityDivisionMatrixByReferralId","setComplexityReferralValueId","saveComplexityDivisionMatrixByReferralIdChange","utils","ClaimsComplexityReferralValues","propTypes","setIsSelectedTabDirty","func","isRequired","dispatch","currentComplexityRulesValue","setCurrentComplexityRulesValue","complexityReferralValues","initComplexityMatrixData","matrixDataDiff","isComplexityBasicValuesUpdated","Object","keys","length","handleAddReferralValue","component","props","title","string","t","fullWidth","maxWidth","disableAutoFocus","hideCompOnBlur","componentProps","clickOutSideHandler","hint","cancelLabel","confirmLabel","submitHandler","handleRemoveComplexityValues","handleEditComplexityRule","complexityRuleValue","handleUpdateComplexityRuleValue","newValue","resetMatrix","saveMatrix","saveMatrixData","saveEachMatrixChange","value","constructMatrixProps","canDeleteRule","complexityRulesID","itemsTotal"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\n// app\r\nimport { ClaimsComplexityReferralValuesView } from './ClaimsComplexityReferralValues.view';\r\nimport {\r\n  showModal,\r\n  hideModal,\r\n  getComplexityReferralValues,\r\n  selectComplexityReferralValues,\r\n  selectComplexityReferralDivisionMatrix,\r\n  selectComplexityReferralDivisionMatrixChanges,\r\n  getComplexityDivisionMatrixByReferralId,\r\n  postComplexityDivisionMatrixByReferralId,\r\n  setComplexityReferralValueId,\r\n  saveComplexityDivisionMatrixByReferralIdChange,\r\n} from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nClaimsComplexityReferralValues.propTypes = {\r\n  setIsSelectedTabDirty: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default function ClaimsComplexityReferralValues({ setIsSelectedTabDirty }) {\r\n  const dispatch = useDispatch();\r\n  const [currentComplexityRulesValue, setCurrentComplexityRulesValue] = useState({});\r\n\r\n  const complexityReferralValues = useSelector(selectComplexityReferralValues);\r\n\r\n  const initComplexityMatrixData = useSelector(selectComplexityReferralDivisionMatrix);\r\n  const matrixDataDiff = useSelector(selectComplexityReferralDivisionMatrixChanges);\r\n\r\n  useEffect(() => {\r\n    const isComplexityBasicValuesUpdated = matrixDataDiff && Object.keys(matrixDataDiff).length !== 0;\r\n    if (isComplexityBasicValuesUpdated) setIsSelectedTabDirty(true);\r\n    else setIsSelectedTabDirty(false);\r\n  }, [matrixDataDiff]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const handleAddReferralValue = () => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'ADD_REFERRAL',\r\n        props: {\r\n          title: `${utils.string.t('claims.modals.addReferralValues.title')}`,\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          disableAutoFocus: true,\r\n          hideCompOnBlur: false,\r\n          componentProps: {\r\n            clickOutSideHandler: () => clickOutSideHandler(),\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n  const clickOutSideHandler = () => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          title: utils.string.t('status.alert'),\r\n          hint: utils.string.t('navigation.title'),\r\n          fullWidth: true,\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            cancelLabel: utils.string.t('app.no'),\r\n            confirmLabel: utils.string.t('app.yes'),\r\n            submitHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleRemoveComplexityValues = () => {\r\n    setCurrentComplexityRulesValue({});\r\n    dispatch(\r\n      showModal({\r\n        component: 'COMPLEXITY_MANAGEMENT_REMOVE_RULE_VALUE',\r\n        props: {\r\n          title: utils.string.t('status.alert'),\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          disableAutoFocus: true,\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleEditComplexityRule = (complexityRuleValue) => {\r\n    setCurrentComplexityRulesValue({ ...complexityRuleValue });\r\n    dispatch(setComplexityReferralValueId(complexityRuleValue));\r\n  };\r\n\r\n  const handleUpdateComplexityRuleValue = (complexityRuleValue) => {\r\n    const newValue = { ...currentComplexityRulesValue, ...complexityRuleValue };\r\n    dispatch(setComplexityReferralValueId(newValue));\r\n  };\r\n\r\n  const resetMatrix = () => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'COMPLEXITY_MANAGEMENT_DIVISION_RESET',\r\n        props: {\r\n          title: utils.string.t('status.alert'),\r\n          fullWidth: true,\r\n          maxWidth: 'xs',\r\n          disableAutoFocus: true,\r\n        },\r\n      })\r\n    );\r\n  };\r\n  const saveMatrix = (saveMatrixData) => {\r\n    dispatch(postComplexityDivisionMatrixByReferralId(saveMatrixData));\r\n  };\r\n  const saveEachMatrixChange = (value) => {\r\n    dispatch(saveComplexityDivisionMatrixByReferralIdChange(value));\r\n  };\r\n\r\n  const constructMatrixProps = {\r\n    initComplexityMatrixData,\r\n    matrixDataDiff,\r\n    resetMatrix,\r\n    saveMatrix,\r\n    saveEachMatrixChange,\r\n  };\r\n  const canDeleteRule = !currentComplexityRulesValue?.complexityRulesID;\r\n\r\n  useEffect(() => {\r\n    if (!complexityReferralValues.itemsTotal) {\r\n      dispatch(getComplexityReferralValues());\r\n    }\r\n    if (currentComplexityRulesValue?.complexityRulesID > -1) {\r\n      dispatch(getComplexityDivisionMatrixByReferralId(currentComplexityRulesValue.complexityRulesID));\r\n    }\r\n  }, [complexityReferralValues, currentComplexityRulesValue]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <ClaimsComplexityReferralValuesView\r\n      canDeleteRule={canDeleteRule}\r\n      constructMatrixProps={constructMatrixProps}\r\n      complexityReferralValues={complexityReferralValues}\r\n      handleAddReferralValue={handleAddReferralValue}\r\n      handleRemoveComplexityValues={handleRemoveComplexityValues}\r\n      handleEditComplexityRule={handleEditComplexityRule}\r\n      handleUpdateComplexityRuleValue={handleUpdateComplexityRuleValue}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}