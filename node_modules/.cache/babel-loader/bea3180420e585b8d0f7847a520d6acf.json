{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\components\\\\DynamicTable\\\\DynamicTableComponent.view.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types'; // app\n\nimport config from 'config';\nimport * as utils from 'utils';\nimport styles from './DynamicTableComponent.styles';\nimport { FormToggle, FormText, FormPopoverMenuRHF, FormCheckbox, FormDate, DynamicValue } from 'components'; // mui\n\nimport { makeStyles } from '@material-ui/core';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nDynamicTableComponentView.propTypes = {\n  field: PropTypes.object.isRequired,\n  formProps: PropTypes.object.isRequired\n};\nexport function DynamicTableComponentView(_ref) {\n  _s();\n\n  var _this = this;\n\n  var field = _ref.field,\n      formProps = _ref.formProps;\n  var control = formProps.control,\n      watch = formProps.watch,\n      setValue = formProps.setValue;\n  var classes = makeStyles(styles, {\n    name: 'DynamicTableComponent'\n  })();\n  var referenceData = useSelector(function (state) {\n    return state.referenceData;\n  });\n  var options = [];\n\n  if (field.optionsKey) {\n    // provide options for dynamic select components\n    options = utils.form.getSelectOptions(field.optionsKey, _objectSpread(_objectSpread({}, referenceData), {}, {\n      premiumCurrency: utils.openingMemo.getRetainedBrokerageCurrencies()\n    }));\n  }\n\n  var render = function render() {\n    switch (field.type) {\n      case 'text':\n        return /*#__PURE__*/_jsxDEV(FormText, {\n          control: control,\n          name: field.name,\n          type: field.type,\n          compact: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 16\n        }, _this);\n\n      case 'checkbox':\n        return /*#__PURE__*/_jsxDEV(FormCheckbox, {\n          control: control,\n          name: field.name,\n          type: field.type,\n          disabled: field.disabled\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 16\n        }, _this);\n\n      case 'select':\n        var text = watch(field.name);\n        return /*#__PURE__*/_jsxDEV(FormPopoverMenuRHF, {\n          control: control,\n          name: field.name,\n          placeholder: utils.string.t('app.select'),\n          text: utils.form.getLabelById(options, text),\n          size: \"small\",\n          icon: ArrowDropDownIcon,\n          iconPosition: \"right\",\n          anchorOrigin: {\n            vertical: 'bottom',\n            horizontal: 'left'\n          },\n          nestedClasses: {\n            btn: classes.popoverButton\n          },\n          items: options.map(function (_ref2) {\n            var id = _ref2.id,\n                label = _ref2.label;\n            return {\n              id: id,\n              label: label,\n              callback: function callback() {\n                return setValue(field.name, id, {\n                  shouldDirty: true\n                });\n              }\n            };\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, _this);\n\n      case 'datepicker':\n        return /*#__PURE__*/_jsxDEV(FormDate, {\n          control: control,\n          name: field.name,\n          outputFormat: field.outputFormat,\n          placeholder: utils.string.t('app.selectDate'),\n          type: field.type,\n          nestedClasses: {\n            root: classes.datePickerLabel\n          },\n          plainText: true,\n          muiComponentProps: {\n            margin: 'none',\n            disabled: field.disabled\n          },\n          muiPickerProps: {\n            format: config.ui.format.date.text\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, _this);\n\n      case 'toggle':\n        return /*#__PURE__*/_jsxDEV(FormToggle, {\n          name: field.name,\n          control: control,\n          buttonGroupProps: {\n            disabled: field.disabled,\n            exclusive: true,\n            size: 'small'\n          },\n          valueIfUnchecked: '',\n          handleChange: function handleChange(value) {\n            return value || field.defaultValue;\n          },\n          options: options,\n          margin: \"none\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, _this);\n\n      case 'dynamic':\n        var sourceRowIds = field.dynamicValue.sourceRowIds;\n        if (!sourceRowIds || !Array.isArray(sourceRowIds)) return;\n        return /*#__PURE__*/_jsxDEV(DynamicValue, {\n          field: field,\n          values: watch(field.dynamicValue.sourceRowIds)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 16\n        }, _this);\n\n      default:\n        return null;\n    }\n  };\n\n  return render();\n}\n\n_s(DynamicTableComponentView, \"e5qGxtLmFFwa3T1Nn4jgIz5vfXk=\", false, function () {\n  return [useSelector];\n});\n\n_c = DynamicTableComponentView;\nDynamicTableComponentView.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"DynamicTableComponentView\",\n  \"props\": {\n    \"field\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"formProps\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\components\\\\DynamicTable\\\\DynamicTableComponent.view.js\"] = {\n    name: \"DynamicTableComponentView\",\n    docgenInfo: DynamicTableComponentView.__docgenInfo,\n    path: \"src\\\\components\\\\DynamicTable\\\\DynamicTableComponent.view.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"DynamicTableComponentView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/DynamicTable/DynamicTableComponent.view.js"],"names":["React","useSelector","PropTypes","config","utils","styles","FormToggle","FormText","FormPopoverMenuRHF","FormCheckbox","FormDate","DynamicValue","makeStyles","ArrowDropDownIcon","DynamicTableComponentView","propTypes","field","object","isRequired","formProps","control","watch","setValue","classes","name","referenceData","state","options","optionsKey","form","getSelectOptions","premiumCurrency","openingMemo","getRetainedBrokerageCurrencies","render","type","disabled","text","string","t","getLabelById","vertical","horizontal","btn","popoverButton","map","id","label","callback","shouldDirty","outputFormat","root","datePickerLabel","margin","format","ui","date","exclusive","size","value","defaultValue","sourceRowIds","dynamicValue","Array","isArray"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,SAASC,UAAT,EAAqBC,QAArB,EAA+BC,kBAA/B,EAAmDC,YAAnD,EAAiEC,QAAjE,EAA2EC,YAA3E,QAA+F,YAA/F,C,CAEA;;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,OAAOC,iBAAP,MAA8B,kCAA9B;;AAEAC,yBAAyB,CAACC,SAA1B,GAAsC;AACpCC,EAAAA,KAAK,EAAEd,SAAS,CAACe,MAAV,CAAiBC,UADY;AAEpCC,EAAAA,SAAS,EAAEjB,SAAS,CAACe,MAAV,CAAiBC;AAFQ,CAAtC;AAKA,OAAO,SAASJ,yBAAT,OAAyD;AAAA;;AAAA;;AAAA,MAApBE,KAAoB,QAApBA,KAAoB;AAAA,MAAbG,SAAa,QAAbA,SAAa;AAAA,MACtDC,OADsD,GACzBD,SADyB,CACtDC,OADsD;AAAA,MAC7CC,KAD6C,GACzBF,SADyB,CAC7CE,KAD6C;AAAA,MACtCC,QADsC,GACzBH,SADyB,CACtCG,QADsC;AAE9D,MAAMC,OAAO,GAAGX,UAAU,CAACP,MAAD,EAAS;AAAEmB,IAAAA,IAAI,EAAE;AAAR,GAAT,CAAV,EAAhB;AACA,MAAMC,aAAa,GAAGxB,WAAW,CAAC,UAACyB,KAAD;AAAA,WAAWA,KAAK,CAACD,aAAjB;AAAA,GAAD,CAAjC;AACA,MAAIE,OAAO,GAAG,EAAd;;AAEA,MAAIX,KAAK,CAACY,UAAV,EAAsB;AACpB;AACAD,IAAAA,OAAO,GAAGvB,KAAK,CAACyB,IAAN,CAAWC,gBAAX,CAA4Bd,KAAK,CAACY,UAAlC,kCACLH,aADK;AAERM,MAAAA,eAAe,EAAE3B,KAAK,CAAC4B,WAAN,CAAkBC,8BAAlB;AAFT,OAAV;AAID;;AAED,MAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;AACnB,YAAQlB,KAAK,CAACmB,IAAd;AACE,WAAK,MAAL;AACE,4BAAO,QAAC,QAAD;AAAU,UAAA,OAAO,EAAEf,OAAnB;AAA4B,UAAA,IAAI,EAAEJ,KAAK,CAACQ,IAAxC;AAA8C,UAAA,IAAI,EAAER,KAAK,CAACmB,IAA1D;AAAgE,UAAA,OAAO;AAAvE;AAAA;AAAA;AAAA;AAAA,iBAAP;;AAEF,WAAK,UAAL;AACE,4BAAO,QAAC,YAAD;AAAc,UAAA,OAAO,EAAEf,OAAvB;AAAgC,UAAA,IAAI,EAAEJ,KAAK,CAACQ,IAA5C;AAAkD,UAAA,IAAI,EAAER,KAAK,CAACmB,IAA9D;AAAoE,UAAA,QAAQ,EAAEnB,KAAK,CAACoB;AAApF;AAAA;AAAA;AAAA;AAAA,iBAAP;;AAEF,WAAK,QAAL;AACE,YAAMC,IAAI,GAAGhB,KAAK,CAACL,KAAK,CAACQ,IAAP,CAAlB;AACA,4BACE,QAAC,kBAAD;AACE,UAAA,OAAO,EAAEJ,OADX;AAEE,UAAA,IAAI,EAAEJ,KAAK,CAACQ,IAFd;AAGE,UAAA,WAAW,EAAEpB,KAAK,CAACkC,MAAN,CAAaC,CAAb,CAAe,YAAf,CAHf;AAIE,UAAA,IAAI,EAAEnC,KAAK,CAACyB,IAAN,CAAWW,YAAX,CAAwBb,OAAxB,EAAiCU,IAAjC,CAJR;AAKE,UAAA,IAAI,EAAC,OALP;AAME,UAAA,IAAI,EAAExB,iBANR;AAOE,UAAA,YAAY,EAAC,OAPf;AAQE,UAAA,YAAY,EAAE;AACZ4B,YAAAA,QAAQ,EAAE,QADE;AAEZC,YAAAA,UAAU,EAAE;AAFA,WARhB;AAYE,UAAA,aAAa,EAAE;AAAEC,YAAAA,GAAG,EAAEpB,OAAO,CAACqB;AAAf,WAZjB;AAaE,UAAA,KAAK,EAAEjB,OAAO,CAACkB,GAAR,CAAY;AAAA,gBAAGC,EAAH,SAAGA,EAAH;AAAA,gBAAOC,KAAP,SAAOA,KAAP;AAAA,mBAAoB;AACrCD,cAAAA,EAAE,EAAFA,EADqC;AAErCC,cAAAA,KAAK,EAALA,KAFqC;AAGrCC,cAAAA,QAAQ,EAAE;AAAA,uBAAM1B,QAAQ,CAACN,KAAK,CAACQ,IAAP,EAAasB,EAAb,EAAiB;AAAEG,kBAAAA,WAAW,EAAE;AAAf,iBAAjB,CAAd;AAAA;AAH2B,aAApB;AAAA,WAAZ;AAbT;AAAA;AAAA;AAAA;AAAA,iBADF;;AAsBF,WAAK,YAAL;AACE,4BACE,QAAC,QAAD;AACE,UAAA,OAAO,EAAE7B,OADX;AAEE,UAAA,IAAI,EAAEJ,KAAK,CAACQ,IAFd;AAGE,UAAA,YAAY,EAAER,KAAK,CAACkC,YAHtB;AAIE,UAAA,WAAW,EAAE9C,KAAK,CAACkC,MAAN,CAAaC,CAAb,CAAe,gBAAf,CAJf;AAKE,UAAA,IAAI,EAAEvB,KAAK,CAACmB,IALd;AAME,UAAA,aAAa,EAAE;AAAEgB,YAAAA,IAAI,EAAE5B,OAAO,CAAC6B;AAAhB,WANjB;AAOE,UAAA,SAAS,MAPX;AAQE,UAAA,iBAAiB,EAAE;AACjBC,YAAAA,MAAM,EAAE,MADS;AAEjBjB,YAAAA,QAAQ,EAAEpB,KAAK,CAACoB;AAFC,WARrB;AAYE,UAAA,cAAc,EAAE;AACdkB,YAAAA,MAAM,EAAEnD,MAAM,CAACoD,EAAP,CAAUD,MAAV,CAAiBE,IAAjB,CAAsBnB;AADhB;AAZlB;AAAA;AAAA;AAAA;AAAA,iBADF;;AAmBF,WAAK,QAAL;AACE,4BACE,QAAC,UAAD;AACE,UAAA,IAAI,EAAErB,KAAK,CAACQ,IADd;AAEE,UAAA,OAAO,EAAEJ,OAFX;AAGE,UAAA,gBAAgB,EAAE;AAChBgB,YAAAA,QAAQ,EAAEpB,KAAK,CAACoB,QADA;AAEhBqB,YAAAA,SAAS,EAAE,IAFK;AAGhBC,YAAAA,IAAI,EAAE;AAHU,WAHpB;AAQE,UAAA,gBAAgB,EAAE,EARpB;AASE,UAAA,YAAY,EAAE,sBAACC,KAAD;AAAA,mBAAWA,KAAK,IAAI3C,KAAK,CAAC4C,YAA1B;AAAA,WAThB;AAUE,UAAA,OAAO,EAAEjC,OAVX;AAWE,UAAA,MAAM,EAAC;AAXT;AAAA;AAAA;AAAA;AAAA,iBADF;;AAgBF,WAAK,SAAL;AAAA,YACUkC,YADV,GAC2B7C,KAAK,CAAC8C,YADjC,CACUD,YADV;AAEE,YAAI,CAACA,YAAD,IAAiB,CAACE,KAAK,CAACC,OAAN,CAAcH,YAAd,CAAtB,EAAmD;AACnD,4BAAO,QAAC,YAAD;AAAc,UAAA,KAAK,EAAE7C,KAArB;AAA4B,UAAA,MAAM,EAAEK,KAAK,CAACL,KAAK,CAAC8C,YAAN,CAAmBD,YAApB;AAAzC;AAAA;AAAA;AAAA;AAAA,iBAAP;;AAEF;AACE,eAAO,IAAP;AA1EJ;AA4ED,GA7ED;;AA+EA,SAAO3B,MAAM,EAAb;AACD;;GA9FepB,yB;UAGQb,W;;;KAHRa,yB","sourcesContent":["import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\n// app\r\nimport config from 'config';\r\nimport * as utils from 'utils';\r\nimport styles from './DynamicTableComponent.styles';\r\nimport { FormToggle, FormText, FormPopoverMenuRHF, FormCheckbox, FormDate, DynamicValue } from 'components';\r\n\r\n// mui\r\nimport { makeStyles } from '@material-ui/core';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\n\r\nDynamicTableComponentView.propTypes = {\r\n  field: PropTypes.object.isRequired,\r\n  formProps: PropTypes.object.isRequired,\r\n};\r\n\r\nexport function DynamicTableComponentView({ field, formProps }) {\r\n  const { control, watch, setValue } = formProps;\r\n  const classes = makeStyles(styles, { name: 'DynamicTableComponent' })();\r\n  const referenceData = useSelector((state) => state.referenceData);\r\n  let options = [];\r\n\r\n  if (field.optionsKey) {\r\n    // provide options for dynamic select components\r\n    options = utils.form.getSelectOptions(field.optionsKey, {\r\n      ...referenceData,\r\n      premiumCurrency: utils.openingMemo.getRetainedBrokerageCurrencies(),\r\n    });\r\n  }\r\n\r\n  const render = () => {\r\n    switch (field.type) {\r\n      case 'text':\r\n        return <FormText control={control} name={field.name} type={field.type} compact />;\r\n\r\n      case 'checkbox':\r\n        return <FormCheckbox control={control} name={field.name} type={field.type} disabled={field.disabled} />;\r\n\r\n      case 'select':\r\n        const text = watch(field.name);\r\n        return (\r\n          <FormPopoverMenuRHF\r\n            control={control}\r\n            name={field.name}\r\n            placeholder={utils.string.t('app.select')}\r\n            text={utils.form.getLabelById(options, text)}\r\n            size=\"small\"\r\n            icon={ArrowDropDownIcon}\r\n            iconPosition=\"right\"\r\n            anchorOrigin={{\r\n              vertical: 'bottom',\r\n              horizontal: 'left',\r\n            }}\r\n            nestedClasses={{ btn: classes.popoverButton }}\r\n            items={options.map(({ id, label }) => ({\r\n              id,\r\n              label,\r\n              callback: () => setValue(field.name, id, { shouldDirty: true }),\r\n            }))}\r\n          />\r\n        );\r\n\r\n      case 'datepicker':\r\n        return (\r\n          <FormDate\r\n            control={control}\r\n            name={field.name}\r\n            outputFormat={field.outputFormat}\r\n            placeholder={utils.string.t('app.selectDate')}\r\n            type={field.type}\r\n            nestedClasses={{ root: classes.datePickerLabel }}\r\n            plainText\r\n            muiComponentProps={{\r\n              margin: 'none',\r\n              disabled: field.disabled,\r\n            }}\r\n            muiPickerProps={{\r\n              format: config.ui.format.date.text,\r\n            }}\r\n          />\r\n        );\r\n\r\n      case 'toggle':\r\n        return (\r\n          <FormToggle\r\n            name={field.name}\r\n            control={control}\r\n            buttonGroupProps={{\r\n              disabled: field.disabled,\r\n              exclusive: true,\r\n              size: 'small',\r\n            }}\r\n            valueIfUnchecked={''}\r\n            handleChange={(value) => value || field.defaultValue}\r\n            options={options}\r\n            margin=\"none\"\r\n          />\r\n        );\r\n\r\n      case 'dynamic':\r\n        const { sourceRowIds } = field.dynamicValue;\r\n        if (!sourceRowIds || !Array.isArray(sourceRowIds)) return;\r\n        return <DynamicValue field={field} values={watch(field.dynamicValue.sourceRowIds)} />;\r\n\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  return render();\r\n}\r\n"]},"metadata":{},"sourceType":"module"}