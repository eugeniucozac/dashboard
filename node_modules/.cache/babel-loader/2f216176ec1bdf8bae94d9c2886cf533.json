{"ast":null,"code":"import isString from 'lodash/isString'; // app\n\nimport { FILE_EXTENSION } from 'consts';\nimport * as utils from 'utils';\nvar utilsFile = {\n  download: function download(blob, filename) {\n    if (!blob || !filename) return;\n    var url = window.URL.createObjectURL(blob);\n    var link = window.document.createElement('a');\n    link.href = url;\n    link.download = filename;\n    window.document.body.appendChild(link);\n    link.click();\n    link.parentNode.removeChild(link);\n  },\n  viewDoc: function viewDoc(blob, filename) {\n    if (!blob || !filename) return;\n    var ext = filename.split('.')[1];\n    var blobdata = new Blob([blob], {\n      type: ext === 'pdf' && 'application/pdf' || ext === 'txt' && 'text/plain' || ext === 'rtf' && 'application/rtf' || ext === 'doc' && 'application/msword' || ext === 'docx' && 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' || ext === 'xls' && 'application/vnd.ms-excel' || ext === 'xlsx' && 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' || ext === 'ppt' && 'application/vnd.ms-powerpoint' || ext === 'pptx' && 'application/vnd.openxmlformats-officedocument.presentationml.pr' || ext === 'flv' && 'video/x-flv' || ext === 'mp4' && 'video/mp4' || ext === 'mov' && 'video/quicktime' || ext === 'avi' && 'video/x-msvideo' || ext === 'wmv' && 'video/x-ms-wmv' || ext === 'm3u8' && 'application/x-mpegURL' || ext === 'ts' && 'video/MP2T' || ext === '3gp' && 'video/3gpp' || ext === 'mp3' && 'audio/mpeg' || ext === 'mp4' && 'audio/mp4' || ext === 'png' && 'image/png' || ext === 'bmp' && 'image/bmp' || (ext === 'tif' || ext === 'tiff') && 'image/tiff' || (ext === 'jpg' || ext === 'jpeg') && 'image/jpeg'\n    });\n\n    try {\n      var url = URL.createObjectURL(blobdata);\n      return url;\n    } catch (e) {\n      // TODO will remove once Client demo is over\n      console.log(e);\n    }\n  },\n  getFilenameFromHeadersBlob: function getFilenameFromHeadersBlob(headers, blob, defaultName) {\n    var fallbackExtension = utilsFile.getFileExtensionFromBlobType(blob);\n    var fallbackFilename = defaultName && isString(defaultName) && fallbackExtension ? \"\".concat(defaultName, \".\").concat(fallbackExtension) : undefined;\n\n    if (headers && utils.generic.isFunction(headers.get)) {\n      var contentDisposition = headers.get('Content-Disposition') || '';\n      var filenameParts = contentDisposition.split('filename=');\n      var filenameStringParts = filenameParts && filenameParts[1] ? filenameParts[1].split(';') : '';\n      var filename = filenameStringParts && filenameStringParts[0];\n      return filename || fallbackFilename;\n    }\n\n    return fallbackFilename;\n  },\n  getFileExtensionFromBlobType: function getFileExtensionFromBlobType(blob) {\n    if (!blob || !blob.type) return;\n    return FILE_EXTENSION[blob.type];\n  },\n  truncate: function truncate(n, len) {\n    var ext = n.lastIndexOf('.') > -1 ? n.substring(n.lastIndexOf('.') - 2, n.length).toLowerCase() : '';\n    var filename = n.replace('.' + ext, '');\n\n    if (filename.length <= len) {\n      return n;\n    }\n\n    filename = filename.substr(0, len) + (n.length > len ? '..' : '');\n    return filename + '.' + ext;\n  },\n  getFileExtensionFromFilename: function getFileExtensionFromFilename(filename) {\n    if (!filename || typeof filename !== 'string' || !filename.includes('.')) return '';\n    return filename.split('.').pop();\n  },\n  getFilenameWithoutExtensionFromFilename: function getFilenameWithoutExtensionFromFilename(filename) {\n    if (!filename || typeof filename !== 'string') return '';\n    return filename.replace(/\\.[^/.]+$/, '');\n  }\n};\nexport default utilsFile;","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/utils/file/file.js"],"names":["isString","FILE_EXTENSION","utils","utilsFile","download","blob","filename","url","window","URL","createObjectURL","link","document","createElement","href","body","appendChild","click","parentNode","removeChild","viewDoc","ext","split","blobdata","Blob","type","e","console","log","getFilenameFromHeadersBlob","headers","defaultName","fallbackExtension","getFileExtensionFromBlobType","fallbackFilename","undefined","generic","isFunction","get","contentDisposition","filenameParts","filenameStringParts","truncate","n","len","lastIndexOf","substring","length","toLowerCase","replace","substr","getFileExtensionFromFilename","includes","pop","getFilenameWithoutExtensionFromFilename"],"mappings":"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","sourcesContent":["import isString from 'lodash/isString';\r\n\r\n// app\r\nimport { FILE_EXTENSION } from 'consts';\r\nimport * as utils from 'utils';\r\n\r\nconst utilsFile = {\r\n  download: (blob, filename) => {\r\n    if (!blob || !filename) return;\r\n\r\n    const url = window.URL.createObjectURL(blob);\r\n    const link = window.document.createElement('a');\r\n\r\n    link.href = url;\r\n    link.download = filename;\r\n    window.document.body.appendChild(link);\r\n    link.click();\r\n    link.parentNode.removeChild(link);\r\n  },\r\n\r\n  viewDoc: (blob, filename) => {\r\n    if (!blob || !filename) return;\r\n    const ext = filename.split('.')[1];\r\n    const blobdata = new Blob([blob], {\r\n      type:\r\n        (ext === 'pdf' && 'application/pdf') ||\r\n        (ext === 'txt' && 'text/plain') ||\r\n        (ext === 'rtf' && 'application/rtf') ||\r\n        (ext === 'doc' && 'application/msword') ||\r\n        (ext === 'docx' && 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') ||\r\n        (ext === 'xls' && 'application/vnd.ms-excel') ||\r\n        (ext === 'xlsx' && 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet') ||\r\n        (ext === 'ppt' && 'application/vnd.ms-powerpoint') ||\r\n        (ext === 'pptx' && 'application/vnd.openxmlformats-officedocument.presentationml.pr') ||\r\n\r\n        (ext === 'flv' && 'video/x-flv') ||\r\n        (ext === 'mp4' && 'video/mp4') ||\r\n        (ext === 'mov' && 'video/quicktime') ||\r\n        (ext === 'avi' && 'video/x-msvideo') ||\r\n        (ext === 'wmv' && 'video/x-ms-wmv') ||\r\n        (ext === 'm3u8' && 'application/x-mpegURL') ||\r\n        (ext === 'ts' && 'video/MP2T') ||\r\n        (ext === '3gp' && 'video/3gpp') ||\r\n\r\n        (ext === 'mp3' && 'audio/mpeg') ||\r\n        (ext === 'mp4' && 'audio/mp4') ||\r\n\r\n        (ext === 'png' && 'image/png') ||\r\n        (ext === 'bmp' && 'image/bmp') ||\r\n        ((ext === 'tif' || ext === 'tiff') && 'image/tiff') ||\r\n        ((ext === 'jpg' || ext === 'jpeg') && 'image/jpeg'),\r\n    });\r\n    try {\r\n      const url = URL.createObjectURL(blobdata);\r\n      return url;\r\n    } catch (e) {\r\n      // TODO will remove once Client demo is over\r\n      console.log(e);\r\n    }\r\n  },\r\n\r\n  getFilenameFromHeadersBlob: (headers, blob, defaultName) => {\r\n    const fallbackExtension = utilsFile.getFileExtensionFromBlobType(blob);\r\n    const fallbackFilename = defaultName && isString(defaultName) && fallbackExtension ? `${defaultName}.${fallbackExtension}` : undefined;\r\n\r\n    if (headers && utils.generic.isFunction(headers.get)) {\r\n      const contentDisposition = headers.get('Content-Disposition') || '';\r\n      const filenameParts = contentDisposition.split('filename=');\r\n      const filenameStringParts = filenameParts && filenameParts[1] ? filenameParts[1].split(';') : '';\r\n      const filename = filenameStringParts && filenameStringParts[0];\r\n\r\n      return filename || fallbackFilename;\r\n    }\r\n\r\n    return fallbackFilename;\r\n  },\r\n\r\n  getFileExtensionFromBlobType: (blob) => {\r\n    if (!blob || !blob.type) return;\r\n\r\n    return FILE_EXTENSION[blob.type];\r\n  },\r\n\r\n  truncate: (n, len) => {\r\n    const ext = n.lastIndexOf('.') > -1 ? n.substring(n.lastIndexOf('.') - 2, n.length).toLowerCase() : '';\r\n    let filename = n.replace('.' + ext, '');\r\n    if (filename.length <= len) {\r\n      return n;\r\n    }\r\n    filename = filename.substr(0, len) + (n.length > len ? '..' : '');\r\n    return filename + '.' + ext;\r\n  },\r\n  getFileExtensionFromFilename: (filename) => {\r\n    if (!filename || typeof filename !== 'string' || !filename.includes('.')) return '';\r\n\r\n    return filename.split('.').pop();\r\n  },\r\n\r\n  getFilenameWithoutExtensionFromFilename: (filename) => {\r\n    if (!filename || typeof filename !== 'string') return '';\r\n\r\n    return filename.replace(/\\.[^/.]+$/, '');\r\n  },\r\n};\r\n\r\nexport default utilsFile;\r\n"]},"metadata":{},"sourceType":"module"}