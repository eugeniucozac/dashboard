{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { authLogout, addLoader, removeLoader, enqueueNotification, hideModal } from 'stores';\nimport * as utils from 'utils';\nexport var editTaskNote = function editTaskNote(formData, note) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/claims.actions.editTaskNote'\n    };\n    dispatch(editTaskNoteRequest(formData, note));\n    dispatch(addLoader('editTaskNote'));\n\n    if (!(formData === null || formData === void 0 ? void 0 : formData.details) || !(note === null || note === void 0 ? void 0 : note.caseIncidentNotesID)) {\n      dispatch(editTaskNoteFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Missing requests params'\n      })));\n      dispatch(removeLoader('editTaskNote'));\n      return;\n    }\n\n    return utils.api.put({\n      token: auth.accessToken,\n      endpoint: endpoint.bpmService,\n      path: 'notes/update',\n      data: {\n        caseIncidentNotesID: note.caseIncidentNotesID,\n        notesDescription: formData.details\n      }\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(editTaskNoteSuccess(data.data));\n      dispatch(enqueueNotification(utils.string.t('claims.notes.notifications.editNoteSuccess'), 'success'));\n      return data;\n    }).catch(function (error) {\n      dispatch(editTaskNoteFailure(error, defaultError));\n      dispatch(enqueueNotification(utils.string.t('claims.notes.notifications.editNoteFailure'), 'error'));\n      utils.api.handleUnauthorized(error, dispatch, authLogout);\n      return error;\n    }).finally(function () {\n      dispatch(removeLoader('editTaskNote'));\n      dispatch(hideModal());\n    });\n  };\n};\nexport var editTaskNoteRequest = function editTaskNoteRequest(formData, note) {\n  return {\n    type: 'CLAIMS_TASK_EDIT_NOTE_REQUEST',\n    payload: {\n      formData: formData,\n      note: note\n    }\n  };\n};\nexport var editTaskNoteSuccess = function editTaskNoteSuccess(data) {\n  return {\n    type: 'CLAIMS_TASK_EDIT_NOTE_SUCCESS',\n    payload: data\n  };\n};\nexport var editTaskNoteFailure = function editTaskNoteFailure(error) {\n  return {\n    type: 'CLAIMS_TASK_EDIT_NOTE_ERROR',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.editTaskNote.js"],"names":["authLogout","addLoader","removeLoader","enqueueNotification","hideModal","utils","editTaskNote","formData","note","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","editTaskNoteRequest","details","caseIncidentNotesID","editTaskNoteFailure","message","api","put","token","accessToken","bpmService","path","data","notesDescription","then","response","handleResponse","json","handleNewData","editTaskNoteSuccess","string","t","catch","error","handleUnauthorized","finally","type","payload"],"mappings":"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","sourcesContent":["import { authLogout, addLoader, removeLoader, enqueueNotification, hideModal } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const editTaskNote = (formData, note) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.editTaskNote',\r\n  };\r\n\r\n  dispatch(editTaskNoteRequest(formData, note));\r\n  dispatch(addLoader('editTaskNote'));\r\n\r\n  if (!formData?.details || !note?.caseIncidentNotesID) {\r\n    dispatch(editTaskNoteFailure({ ...defaultError, message: 'Missing requests params' }));\r\n    dispatch(removeLoader('editTaskNote'));\r\n    return;\r\n  }\r\n\r\n  return utils.api\r\n    .put({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.bpmService,\r\n      path: 'notes/update',\r\n      data: {\r\n        caseIncidentNotesID: note.caseIncidentNotesID,\r\n        notesDescription: formData.details,\r\n      },\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(editTaskNoteSuccess(data.data));\r\n      dispatch(enqueueNotification(utils.string.t('claims.notes.notifications.editNoteSuccess'), 'success'));\r\n      return data;\r\n    })\r\n    .catch((error) => {\r\n      dispatch(editTaskNoteFailure(error, defaultError));\r\n      dispatch(enqueueNotification(utils.string.t('claims.notes.notifications.editNoteFailure'), 'error'));\r\n      utils.api.handleUnauthorized(error, dispatch, authLogout);\r\n      return error;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('editTaskNote'));\r\n      dispatch(hideModal());\r\n    });\r\n};\r\n\r\nexport const editTaskNoteRequest = (formData, note) => {\r\n  return {\r\n    type: 'CLAIMS_TASK_EDIT_NOTE_REQUEST',\r\n    payload: { formData, note },\r\n  };\r\n};\r\n\r\nexport const editTaskNoteSuccess = (data) => {\r\n  return {\r\n    type: 'CLAIMS_TASK_EDIT_NOTE_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const editTaskNoteFailure = (error) => {\r\n  return {\r\n    type: 'CLAIMS_TASK_EDIT_NOTE_ERROR',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}