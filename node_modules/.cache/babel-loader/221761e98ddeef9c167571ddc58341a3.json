{"ast":null,"code":"import _createForOfIteratorHelper from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\RiskData\\\\RiskData.js\",\n    _this = this;\n\nimport * as React from 'react';\nimport startCase from 'lodash/startCase';\nimport toLower from 'lodash/toLower';\nimport get from 'lodash/get'; // app\n\nimport styles from './RiskData.styles';\nimport { FormGrid } from 'components';\nimport * as utils from 'utils';\nimport { RISK_DEFINITION_GENERAL } from 'consts'; // mui\n\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport { Box, makeStyles, Typography } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar RiskData = function RiskData(_ref) {\n  var riskIsLoading = _ref.riskIsLoading,\n      riskValues = _ref.riskValues,\n      groups = _ref.groups,\n      definitionsFields = _ref.definitionsFields,\n      valuesByID = _ref.valuesByID,\n      countryOfOrigin = _ref.countryOfOrigin;\n  var classes = makeStyles(styles, {\n    name: 'RiskData'\n  })();\n\n  var renderValue = function renderValue(field, value) {\n    var _valuesByID$field$nam, _valuesByID$field$nam2;\n\n    var prefix = '';\n    var suffix = '';\n    var newValue = value;\n\n    switch (field.type) {\n      case 'DOUBLE':\n        var isPercent = field && field.validation && field.validation.percent;\n        newValue = utils.string.t(\"format.\".concat(isPercent ? 'percent' : 'currency'), {\n          value: {\n            number: value\n          }\n        });\n        break;\n\n      case 'BOOLEAN':\n        newValue = value === 'true' || value === true ? utils.string.t('app.yes') : value === 'false' || value === false ? utils.string.t('app.no') : '';\n        break;\n\n      case 'DATE':\n        newValue = utils.string.t(\"format.date\", {\n          value: {\n            date: value\n          }\n        });\n        break;\n\n      case 'ID':\n        newValue = ((_valuesByID$field$nam = valuesByID[field.name]) === null || _valuesByID$field$nam === void 0 ? void 0 : _valuesByID$field$nam.id) === value ? (_valuesByID$field$nam2 = valuesByID[field.name]) === null || _valuesByID$field$nam2 === void 0 ? void 0 : _valuesByID$field$nam2.name : '';\n        break;\n\n      case 'SELECT':\n        {\n          if (field.autocomplete) {\n            if (utils.generic.isValidArray(value)) {\n              newValue = '';\n\n              var _iterator = _createForOfIteratorHelper(value),\n                  _step;\n\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  var singleValue = _step.value;\n                  newValue = newValue + \"\".concat((singleValue === null || singleValue === void 0 ? void 0 : singleValue.label) || singleValue, \",\");\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n\n              newValue = newValue.slice(0, -1);\n            } else newValue = (value === null || value === void 0 ? void 0 : value.label) || value;\n          } else {\n            var options = field.name === 'countryOfOrigin' ? countryOfOrigin : utils.generic.isValidArray(field.options, true) ? field.options : [];\n            var option = options.find(function (o) {\n              return String(o.value) === String(value);\n            }) || {};\n            newValue = (option === null || option === void 0 ? void 0 : option.label) !== 'Select...' ? option.label : value ? value : '';\n          }\n\n          break;\n        }\n\n      case 'RADIO':\n        {\n          newValue = value || '';\n          break;\n        }\n\n      default:\n        break;\n    } // add prefix/suffix for specific fields\n\n\n    if (field.name === 'distanceToCoast' && value) {\n      suffix = \" \".concat(utils.string.t('map.unit.miles'));\n    } // the extra <span /> is used to prevent Material-UI complaining about not receiving a ReactNode\n    // this happens if the value is true/false/undefined/null...\n    // this workaround prevents errors in case some invalid values fall through the cracks\n\n\n    return utils.generic.isValidObject(newValue) ? null : /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [prefix, newValue, suffix]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, _this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      mb: 1,\n      display: \"flex\",\n      alignItems: \"center\",\n      \"data-testid\": \"risk-data\",\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        children: utils.string.t('risks.data')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(FormGrid, {\n      container: true,\n      spacing: 2,\n      children: riskIsLoading || !utils.generic.isValidObject(riskValues) ? /*#__PURE__*/_jsxDEV(FormGrid, {\n        item: true,\n        xs: 12,\n        sm: 6,\n        md: 4,\n        lg: 3,\n        \"data-testid\": \"risk-data-loading\",\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          className: classes.card,\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            p: 2,\n            className: classes.cardTitle,\n            children: /*#__PURE__*/_jsxDEV(Skeleton, {\n              animation: \"wave\",\n              width: \"100%\",\n              height: 40\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 17\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(Box, {\n            p: 2,\n            children: [/*#__PURE__*/_jsxDEV(Skeleton, {\n              animation: \"wave\",\n              height: 20,\n              style: {\n                marginBottom: 6\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 17\n            }, _this), /*#__PURE__*/_jsxDEV(Skeleton, {\n              animation: \"wave\",\n              height: 20,\n              style: {\n                marginBottom: 6\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 17\n            }, _this), /*#__PURE__*/_jsxDEV(Skeleton, {\n              animation: \"wave\",\n              height: 20,\n              style: {\n                marginBottom: 6\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 17\n            }, _this), /*#__PURE__*/_jsxDEV(Skeleton, {\n              animation: \"wave\",\n              height: 20\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 17\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, _this) : groups.map(function (group, index) {\n        var fields = utils.risk.getFieldsByGroup(definitionsFields, group) || [];\n        return group === RISK_DEFINITION_GENERAL ? /*#__PURE__*/_jsxDEV(FormGrid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          md: 4,\n          lg: 3,\n          \"data-testid\": \"risk-data-\".concat(group),\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            className: classes.card,\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              p: 2,\n              className: classes.cardTitle,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h3\",\n                className: classes.cardTitleHeading,\n                children: startCase(toLower(group))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 21\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 19\n            }, _this), /*#__PURE__*/_jsxDEV(Box, {\n              p: 2,\n              children: /*#__PURE__*/_jsxDEV(FormGrid, {\n                container: true,\n                spacing: 1,\n                children: fields.map(function (field) {\n                  var value = riskValues[field === null || field === void 0 ? void 0 : field.name] || null;\n                  var condition = utils.risk.getCondition(field, fields);\n                  var refValueCondition = condition && get(riskValues, \"\".concat(condition.name));\n                  var isConditionValid = condition && utils.risk.isConditionValid(condition, refValueCondition);\n                  var isHidden = utils.risk.isHiddenField(field);\n                  return !isHidden && (condition === undefined || condition && isConditionValid) ? /*#__PURE__*/_jsxDEV(FormGrid, {\n                    item: true,\n                    xs: 12,\n                    sm: 12,\n                    children: /*#__PURE__*/_jsxDEV(FormGrid, {\n                      container: true,\n                      spacing: 1,\n                      children: [/*#__PURE__*/_jsxDEV(FormGrid, {\n                        item: true,\n                        xs: 6,\n                        children: /*#__PURE__*/_jsxDEV(Typography, {\n                          variant: \"body2\",\n                          component: \"span\",\n                          children: field.label\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 134,\n                          columnNumber: 33\n                        }, _this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 133,\n                        columnNumber: 31\n                      }, _this), /*#__PURE__*/_jsxDEV(FormGrid, {\n                        item: true,\n                        xs: 6,\n                        children: /*#__PURE__*/_jsxDEV(Typography, {\n                          variant: \"body2\",\n                          component: \"span\",\n                          style: {\n                            fontWeight: 'bold'\n                          },\n                          children: renderValue(field, value)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 139,\n                          columnNumber: 33\n                        }, _this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 138,\n                        columnNumber: 31\n                      }, _this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 132,\n                      columnNumber: 29\n                    }, _this)\n                  }, \"\".concat(field.label, \"-\").concat(value), false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 131,\n                    columnNumber: 27\n                  }, _this) : /*#__PURE__*/_jsxDEV(FormGrid, {\n                    item: true,\n                    xs: 12,\n                    sm: 4\n                  }, \"\".concat(field.label, \"-\").concat(value), false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 146,\n                    columnNumber: 27\n                  }, _this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 21\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 19\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 17\n          }, _this)\n        }, group, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 15\n        }, _this) : /*#__PURE__*/_jsxDEV(FormGrid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          md: 4,\n          lg: 3,\n          \"data-testid\": \"risk-data-\".concat(group),\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            className: classes.card,\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              p: 2,\n              className: classes.cardTitle,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h3\",\n                className: classes.cardTitleHeading,\n                children: startCase(toLower(group))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 21\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 19\n            }, _this), /*#__PURE__*/_jsxDEV(Box, {\n              p: 2,\n              children: fields.filter(function (field) {\n                return Boolean(field.name) && field.type !== 'label';\n              }).map(function (field, idx) {\n                var value = riskValues[field.name];\n                var isArrayColumn = utils.risk.isArrayColumn(field) && utils.generic.isValidArray(value);\n                var isArrayTable = utils.risk.isArrayTable(field) && utils.generic.isValidArray(value);\n                var isObject = utils.risk.isObject(field) && utils.generic.isValidObject(value);\n                var valueArray = isArrayColumn || isArrayTable ? value : [value];\n                var arrayKey = isArrayColumn || isArrayTable ? 'arrayItemDef' : isObject ? 'objectDef' : '';\n                var condition = utils.risk.getCondition(field, fields);\n                var refValueCondition = condition && get(riskValues, \"\".concat(condition.name));\n                var isConditionValid = condition && utils.risk.isConditionValid(condition, refValueCondition);\n                var isHidden = utils.risk.isHiddenField(field);\n\n                if (isArrayColumn || isArrayTable || isObject) {\n                  return condition === undefined || condition && isConditionValid ? /*#__PURE__*/_jsxDEV(FormGrid, {\n                    spacing: 2,\n                    container: true,\n                    children: [!isObject ? /*#__PURE__*/_jsxDEV(FormGrid, {\n                      item: true,\n                      xs: 12,\n                      children: field.label\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 180,\n                      columnNumber: 33\n                    }, _this) : null, valueArray.map(function (v, index) {\n                      return /*#__PURE__*/_jsxDEV(FormGrid, {\n                        item: true,\n                        xs: 12,\n                        children: /*#__PURE__*/_jsxDEV(Box, {\n                          className: (valueArray === null || valueArray === void 0 ? void 0 : valueArray.length) > 1 ? \"\".concat(classes.card, \" \").concat(classes.cardArray) : \"\",\n                          children: field[arrayKey].filter(function (f) {\n                            return Boolean(f.name);\n                          }).map(function (arrayField) {\n                            var isHidden = utils.risk.isHiddenField(arrayField);\n                            var isTitle = utils.risk.isTitleField(arrayField);\n                            return !isHidden || isTitle ? /*#__PURE__*/_jsxDEV(FormGrid, {\n                              spacing: 1,\n                              container: true,\n                              children: [/*#__PURE__*/_jsxDEV(FormGrid, {\n                                item: true,\n                                xs: 6,\n                                children: /*#__PURE__*/_jsxDEV(Typography, {\n                                  variant: \"body2\",\n                                  component: \"span\",\n                                  children: arrayField.label\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 198,\n                                  columnNumber: 49\n                                }, _this)\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 197,\n                                columnNumber: 47\n                              }, _this), /*#__PURE__*/_jsxDEV(FormGrid, {\n                                item: true,\n                                xs: 6,\n                                children: /*#__PURE__*/_jsxDEV(Typography, {\n                                  variant: \"body2\",\n                                  component: \"span\",\n                                  style: {\n                                    fontWeight: 'bold'\n                                  },\n                                  children: renderValue(arrayField, v[arrayField.name])\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 203,\n                                  columnNumber: 49\n                                }, _this)\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 202,\n                                columnNumber: 47\n                              }, _this)]\n                            }, \"\".concat(arrayField.name, \"-\").concat(arrayField.label), true, {\n                              fileName: _jsxFileName,\n                              lineNumber: 196,\n                              columnNumber: 45\n                            }, _this) : null;\n                          })\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 188,\n                          columnNumber: 37\n                        }, _this)\n                      }, \"key-\".concat(index), false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 187,\n                        columnNumber: 35\n                      }, _this);\n                    })]\n                  }, \"\".concat(field.label, \"-\").concat(field.label), true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 178,\n                    columnNumber: 29\n                  }, _this) : null;\n                }\n\n                return !isHidden && (condition === undefined || condition && isConditionValid) ? /*#__PURE__*/_jsxDEV(FormGrid, {\n                  container: true,\n                  spacing: 2,\n                  children: [/*#__PURE__*/_jsxDEV(FormGrid, {\n                    item: true,\n                    xs: 6,\n                    children: /*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"body2\",\n                      component: \"span\",\n                      children: field.label || field.title\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 221,\n                      columnNumber: 31\n                    }, _this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 220,\n                    columnNumber: 29\n                  }, _this), /*#__PURE__*/_jsxDEV(FormGrid, {\n                    item: true,\n                    xs: 6,\n                    children: /*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"body2\",\n                      component: \"span\",\n                      style: {\n                        fontWeight: 'bold'\n                      },\n                      children: renderValue(field, value)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 226,\n                      columnNumber: 31\n                    }, _this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 225,\n                    columnNumber: 29\n                  }, _this)]\n                }, \"\".concat(field.name, \"-\").concat(field.label), true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 219,\n                  columnNumber: 27\n                }, _this) : null;\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 19\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 17\n          }, _this)\n        }, group, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 15\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n};\n\n_c = RiskData;\nRiskData.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"RiskData\"\n};\nexport default RiskData;\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\modules\\\\RiskData\\\\RiskData.js\"] = {\n    name: \"RiskData\",\n    docgenInfo: RiskData.__docgenInfo,\n    path: \"src\\\\modules\\\\RiskData\\\\RiskData.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"RiskData\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/RiskData/RiskData.js"],"names":["React","startCase","toLower","get","styles","FormGrid","utils","RISK_DEFINITION_GENERAL","Skeleton","Box","makeStyles","Typography","RiskData","riskIsLoading","riskValues","groups","definitionsFields","valuesByID","countryOfOrigin","classes","name","renderValue","field","value","prefix","suffix","newValue","type","isPercent","validation","percent","string","t","number","date","id","autocomplete","generic","isValidArray","singleValue","label","slice","options","option","find","o","String","isValidObject","card","cardTitle","marginBottom","map","group","index","fields","risk","getFieldsByGroup","cardTitleHeading","condition","getCondition","refValueCondition","isConditionValid","isHidden","isHiddenField","undefined","fontWeight","filter","Boolean","idx","isArrayColumn","isArrayTable","isObject","valueArray","arrayKey","v","length","cardArray","f","arrayField","isTitle","isTitleField","title"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AAEA,OAAOC,GAAP,MAAgB,YAAhB,C,CAEA;;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,QAAT,QAAyB,YAAzB;AAEA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,uBAAT,QAAwC,QAAxC,C,CACA;;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,SAASC,GAAT,EAAcC,UAAd,EAA0BC,UAA1B,QAA4C,mBAA5C;;;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAA2F;AAAA,MAAxFC,aAAwF,QAAxFA,aAAwF;AAAA,MAAzEC,UAAyE,QAAzEA,UAAyE;AAAA,MAA7DC,MAA6D,QAA7DA,MAA6D;AAAA,MAArDC,iBAAqD,QAArDA,iBAAqD;AAAA,MAAlCC,UAAkC,QAAlCA,UAAkC;AAAA,MAAtBC,eAAsB,QAAtBA,eAAsB;AAC1G,MAAMC,OAAO,GAAGT,UAAU,CAACN,MAAD,EAAS;AAAEgB,IAAAA,IAAI,EAAE;AAAR,GAAT,CAAV,EAAhB;;AAEA,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAQC,KAAR,EAAkB;AAAA;;AACpC,QAAIC,MAAM,GAAG,EAAb;AACA,QAAIC,MAAM,GAAG,EAAb;AACA,QAAIC,QAAQ,GAAGH,KAAf;;AAEA,YAAQD,KAAK,CAACK,IAAd;AACE,WAAK,QAAL;AACE,YAAMC,SAAS,GAAGN,KAAK,IAAIA,KAAK,CAACO,UAAf,IAA6BP,KAAK,CAACO,UAAN,CAAiBC,OAAhE;AACAJ,QAAAA,QAAQ,GAAGpB,KAAK,CAACyB,MAAN,CAAaC,CAAb,kBAAyBJ,SAAS,GAAG,SAAH,GAAe,UAAjD,GAA+D;AAAEL,UAAAA,KAAK,EAAE;AAAEU,YAAAA,MAAM,EAAEV;AAAV;AAAT,SAA/D,CAAX;AACA;;AACF,WAAK,SAAL;AACEG,QAAAA,QAAQ,GACNH,KAAK,KAAK,MAAV,IAAoBA,KAAK,KAAK,IAA9B,GACIjB,KAAK,CAACyB,MAAN,CAAaC,CAAb,CAAe,SAAf,CADJ,GAEIT,KAAK,KAAK,OAAV,IAAqBA,KAAK,KAAK,KAA/B,GACAjB,KAAK,CAACyB,MAAN,CAAaC,CAAb,CAAe,QAAf,CADA,GAEA,EALN;AAMA;;AAEF,WAAK,MAAL;AACEN,QAAAA,QAAQ,GAAGpB,KAAK,CAACyB,MAAN,CAAaC,CAAb,gBAA8B;AAAET,UAAAA,KAAK,EAAE;AAAEW,YAAAA,IAAI,EAAEX;AAAR;AAAT,SAA9B,CAAX;AACA;;AACF,WAAK,IAAL;AACEG,QAAAA,QAAQ,GAAG,0BAAAT,UAAU,CAACK,KAAK,CAACF,IAAP,CAAV,gFAAwBe,EAAxB,MAA+BZ,KAA/B,6BAAuCN,UAAU,CAACK,KAAK,CAACF,IAAP,CAAjD,2DAAuC,uBAAwBA,IAA/D,GAAsE,EAAjF;AACA;;AAEF,WAAK,QAAL;AAAe;AACb,cAAIE,KAAK,CAACc,YAAV,EAAwB;AACtB,gBAAI9B,KAAK,CAAC+B,OAAN,CAAcC,YAAd,CAA2Bf,KAA3B,CAAJ,EAAuC;AACrCG,cAAAA,QAAQ,GAAG,EAAX;;AADqC,yDAEXH,KAFW;AAAA;;AAAA;AAErC,oEAAiC;AAAA,sBAAtBgB,WAAsB;AAC/Bb,kBAAAA,QAAQ,GAAGA,QAAQ,aAAM,CAAAa,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEC,KAAb,KAAsBD,WAA5B,MAAnB;AACD;AAJoC;AAAA;AAAA;AAAA;AAAA;;AAKrCb,cAAAA,QAAQ,GAAGA,QAAQ,CAACe,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAX;AACD,aAND,MAMOf,QAAQ,GAAG,CAAAH,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEiB,KAAP,KAAgBjB,KAA3B;AACR,WARD,MAQO;AACL,gBAAMmB,OAAO,GACXpB,KAAK,CAACF,IAAN,KAAe,iBAAf,GAAmCF,eAAnC,GAAqDZ,KAAK,CAAC+B,OAAN,CAAcC,YAAd,CAA2BhB,KAAK,CAACoB,OAAjC,EAA0C,IAA1C,IAAkDpB,KAAK,CAACoB,OAAxD,GAAkE,EADzH;AAEA,gBAAMC,MAAM,GAAGD,OAAO,CAACE,IAAR,CAAa,UAACC,CAAD;AAAA,qBAAOC,MAAM,CAACD,CAAC,CAACtB,KAAH,CAAN,KAAoBuB,MAAM,CAACvB,KAAD,CAAjC;AAAA,aAAb,KAA0D,EAAzE;AAEAG,YAAAA,QAAQ,GAAG,CAAAiB,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEH,KAAR,MAAkB,WAAlB,GAAgCG,MAAM,CAACH,KAAvC,GAA+CjB,KAAK,GAAGA,KAAH,GAAW,EAA1E;AACD;;AACD;AACD;;AACD,WAAK,OAAL;AAAc;AACZG,UAAAA,QAAQ,GAAGH,KAAK,IAAI,EAApB;AACA;AACD;;AAED;AACE;AA7CJ,KALoC,CAqDpC;;;AACA,QAAID,KAAK,CAACF,IAAN,KAAe,iBAAf,IAAoCG,KAAxC,EAA+C;AAC7CE,MAAAA,MAAM,cAAOnB,KAAK,CAACyB,MAAN,CAAaC,CAAb,CAAe,gBAAf,CAAP,CAAN;AACD,KAxDmC,CAyDpC;AACA;AACA;;;AACA,WAAO1B,KAAK,CAAC+B,OAAN,CAAcU,aAAd,CAA4BrB,QAA5B,IAAwC,IAAxC,gBACL;AAAA,iBACGF,MADH,EAEGE,QAFH,EAGGD,MAHH;AAAA;AAAA;AAAA;AAAA;AAAA,aADF;AAOD,GAnED;;AAqEA,sBACE;AAAA,4BACE,QAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAY,MAAA,OAAO,EAAC,MAApB;AAA2B,MAAA,UAAU,EAAC,QAAtC;AAA+C,qBAAY,WAA3D;AAAA,6BACE,QAAC,UAAD;AAAY,QAAA,OAAO,EAAC,IAApB;AAAA,kBAA0BnB,KAAK,CAACyB,MAAN,CAAaC,CAAb,CAAe,YAAf;AAA1B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,aADF,eAIE,QAAC,QAAD;AAAU,MAAA,SAAS,MAAnB;AAAoB,MAAA,OAAO,EAAE,CAA7B;AAAA,gBACGnB,aAAa,IAAI,CAACP,KAAK,CAAC+B,OAAN,CAAcU,aAAd,CAA4BjC,UAA5B,CAAlB,gBACC,QAAC,QAAD;AAAU,QAAA,IAAI,MAAd;AAAe,QAAA,EAAE,EAAE,EAAnB;AAAuB,QAAA,EAAE,EAAE,CAA3B;AAA8B,QAAA,EAAE,EAAE,CAAlC;AAAqC,QAAA,EAAE,EAAE,CAAzC;AAA4C,uBAAY,mBAAxD;AAAA,+BACE,QAAC,GAAD;AAAK,UAAA,SAAS,EAAEK,OAAO,CAAC6B,IAAxB;AAAA,kCACE,QAAC,GAAD;AAAK,YAAA,CAAC,EAAE,CAAR;AAAW,YAAA,SAAS,EAAE7B,OAAO,CAAC8B,SAA9B;AAAA,mCACE,QAAC,QAAD;AAAU,cAAA,SAAS,EAAC,MAApB;AAA2B,cAAA,KAAK,EAAC,MAAjC;AAAwC,cAAA,MAAM,EAAE;AAAhD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,mBADF,eAIE,QAAC,GAAD;AAAK,YAAA,CAAC,EAAE,CAAR;AAAA,oCACE,QAAC,QAAD;AAAU,cAAA,SAAS,EAAC,MAApB;AAA2B,cAAA,MAAM,EAAE,EAAnC;AAAuC,cAAA,KAAK,EAAE;AAAEC,gBAAAA,YAAY,EAAE;AAAhB;AAA9C;AAAA;AAAA;AAAA;AAAA,qBADF,eAEE,QAAC,QAAD;AAAU,cAAA,SAAS,EAAC,MAApB;AAA2B,cAAA,MAAM,EAAE,EAAnC;AAAuC,cAAA,KAAK,EAAE;AAAEA,gBAAAA,YAAY,EAAE;AAAhB;AAA9C;AAAA;AAAA;AAAA;AAAA,qBAFF,eAGE,QAAC,QAAD;AAAU,cAAA,SAAS,EAAC,MAApB;AAA2B,cAAA,MAAM,EAAE,EAAnC;AAAuC,cAAA,KAAK,EAAE;AAAEA,gBAAAA,YAAY,EAAE;AAAhB;AAA9C;AAAA;AAAA;AAAA;AAAA,qBAHF,eAIE,QAAC,QAAD;AAAU,cAAA,SAAS,EAAC,MAApB;AAA2B,cAAA,MAAM,EAAE;AAAnC;AAAA;AAAA;AAAA;AAAA,qBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,mBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,eADD,GAeCnC,MAAM,CAACoC,GAAP,CAAW,UAACC,KAAD,EAAQC,KAAR,EAAkB;AAC3B,YAAMC,MAAM,GAAGhD,KAAK,CAACiD,IAAN,CAAWC,gBAAX,CAA4BxC,iBAA5B,EAA+CoC,KAA/C,KAAyD,EAAxE;AAEA,eAAOA,KAAK,KAAK7C,uBAAV,gBACL,QAAC,QAAD;AAAU,UAAA,IAAI,MAAd;AAAe,UAAA,EAAE,EAAE,EAAnB;AAAuB,UAAA,EAAE,EAAE,CAA3B;AAA8B,UAAA,EAAE,EAAE,CAAlC;AAAqC,UAAA,EAAE,EAAE,CAAzC;AAA4C,6CAA0B6C,KAA1B,CAA5C;AAAA,iCACE,QAAC,GAAD;AAAK,YAAA,SAAS,EAAEjC,OAAO,CAAC6B,IAAxB;AAAA,oCACE,QAAC,GAAD;AAAK,cAAA,CAAC,EAAE,CAAR;AAAW,cAAA,SAAS,EAAE7B,OAAO,CAAC8B,SAA9B;AAAA,qCACE,QAAC,UAAD;AAAY,gBAAA,OAAO,EAAC,IAApB;AAAyB,gBAAA,SAAS,EAAE9B,OAAO,CAACsC,gBAA5C;AAAA,0BACGxD,SAAS,CAACC,OAAO,CAACkD,KAAD,CAAR;AADZ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,qBADF,eAME,QAAC,GAAD;AAAK,cAAA,CAAC,EAAE,CAAR;AAAA,qCACE,QAAC,QAAD;AAAU,gBAAA,SAAS,MAAnB;AAAoB,gBAAA,OAAO,EAAE,CAA7B;AAAA,0BACGE,MAAM,CAACH,GAAP,CAAW,UAAC7B,KAAD,EAAW;AACrB,sBAAMC,KAAK,GAAGT,UAAU,CAACQ,KAAD,aAACA,KAAD,uBAACA,KAAK,CAAEF,IAAR,CAAV,IAA2B,IAAzC;AACA,sBAAMsC,SAAS,GAAGpD,KAAK,CAACiD,IAAN,CAAWI,YAAX,CAAwBrC,KAAxB,EAA+BgC,MAA/B,CAAlB;AACA,sBAAMM,iBAAiB,GAAGF,SAAS,IAAIvD,GAAG,CAACW,UAAD,YAAgB4C,SAAS,CAACtC,IAA1B,EAA1C;AACA,sBAAMyC,gBAAgB,GAAGH,SAAS,IAAIpD,KAAK,CAACiD,IAAN,CAAWM,gBAAX,CAA4BH,SAA5B,EAAuCE,iBAAvC,CAAtC;AACA,sBAAME,QAAQ,GAAGxD,KAAK,CAACiD,IAAN,CAAWQ,aAAX,CAAyBzC,KAAzB,CAAjB;AAEA,yBAAO,CAACwC,QAAD,KAAcJ,SAAS,KAAKM,SAAd,IAA4BN,SAAS,IAAIG,gBAAvD,iBACL,QAAC,QAAD;AAAU,oBAAA,IAAI,MAAd;AAAe,oBAAA,EAAE,EAAE,EAAnB;AAAuB,oBAAA,EAAE,EAAE,EAA3B;AAAA,2CACE,QAAC,QAAD;AAAU,sBAAA,SAAS,MAAnB;AAAoB,sBAAA,OAAO,EAAE,CAA7B;AAAA,8CACE,QAAC,QAAD;AAAU,wBAAA,IAAI,MAAd;AAAe,wBAAA,EAAE,EAAE,CAAnB;AAAA,+CACE,QAAC,UAAD;AAAY,0BAAA,OAAO,EAAC,OAApB;AAA4B,0BAAA,SAAS,EAAC,MAAtC;AAAA,oCACGvC,KAAK,CAACkB;AADT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,+BADF,eAME,QAAC,QAAD;AAAU,wBAAA,IAAI,MAAd;AAAe,wBAAA,EAAE,EAAE,CAAnB;AAAA,+CACE,QAAC,UAAD;AAAY,0BAAA,OAAO,EAAC,OAApB;AAA4B,0BAAA,SAAS,EAAC,MAAtC;AAA6C,0BAAA,KAAK,EAAE;AAAEyB,4BAAAA,UAAU,EAAE;AAAd,2BAApD;AAAA,oCACG5C,WAAW,CAACC,KAAD,EAAQC,KAAR;AADd;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,+BANF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,+BAAuCD,KAAK,CAACkB,KAA7C,cAAsDjB,KAAtD;AAAA;AAAA;AAAA;AAAA,2BADK,gBAgBL,QAAC,QAAD;AAAU,oBAAA,IAAI,MAAd;AAAe,oBAAA,EAAE,EAAE,EAAnB;AAAuB,oBAAA,EAAE,EAAE;AAA3B,+BAAsCD,KAAK,CAACkB,KAA5C,cAAqDjB,KAArD;AAAA;AAAA;AAAA;AAAA,2BAhBF;AAkBD,iBAzBA;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,qBANF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,WAAoF6B,KAApF;AAAA;AAAA;AAAA;AAAA,iBADK,gBAyCL,QAAC,QAAD;AAAU,UAAA,IAAI,MAAd;AAAe,UAAA,EAAE,EAAE,EAAnB;AAAuB,UAAA,EAAE,EAAE,CAA3B;AAA8B,UAAA,EAAE,EAAE,CAAlC;AAAqC,UAAA,EAAE,EAAE,CAAzC;AAA4C,6CAA0BA,KAA1B,CAA5C;AAAA,iCACE,QAAC,GAAD;AAAK,YAAA,SAAS,EAAEjC,OAAO,CAAC6B,IAAxB;AAAA,oCACE,QAAC,GAAD;AAAK,cAAA,CAAC,EAAE,CAAR;AAAW,cAAA,SAAS,EAAE7B,OAAO,CAAC8B,SAA9B;AAAA,qCACE,QAAC,UAAD;AAAY,gBAAA,OAAO,EAAC,IAApB;AAAyB,gBAAA,SAAS,EAAE9B,OAAO,CAACsC,gBAA5C;AAAA,0BACGxD,SAAS,CAACC,OAAO,CAACkD,KAAD,CAAR;AADZ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,qBADF,eAME,QAAC,GAAD;AAAK,cAAA,CAAC,EAAE,CAAR;AAAA,wBACGE,MAAM,CACJY,MADF,CACS,UAAC5C,KAAD;AAAA,uBAAW6C,OAAO,CAAC7C,KAAK,CAACF,IAAP,CAAP,IAAuBE,KAAK,CAACK,IAAN,KAAe,OAAjD;AAAA,eADT,EAEEwB,GAFF,CAEM,UAAC7B,KAAD,EAAQ8C,GAAR,EAAgB;AACnB,oBAAM7C,KAAK,GAAGT,UAAU,CAACQ,KAAK,CAACF,IAAP,CAAxB;AACA,oBAAMiD,aAAa,GAAG/D,KAAK,CAACiD,IAAN,CAAWc,aAAX,CAAyB/C,KAAzB,KAAmChB,KAAK,CAAC+B,OAAN,CAAcC,YAAd,CAA2Bf,KAA3B,CAAzD;AACA,oBAAM+C,YAAY,GAAGhE,KAAK,CAACiD,IAAN,CAAWe,YAAX,CAAwBhD,KAAxB,KAAkChB,KAAK,CAAC+B,OAAN,CAAcC,YAAd,CAA2Bf,KAA3B,CAAvD;AACA,oBAAMgD,QAAQ,GAAGjE,KAAK,CAACiD,IAAN,CAAWgB,QAAX,CAAoBjD,KAApB,KAA8BhB,KAAK,CAAC+B,OAAN,CAAcU,aAAd,CAA4BxB,KAA5B,CAA/C;AACA,oBAAMiD,UAAU,GAAGH,aAAa,IAAIC,YAAjB,GAAgC/C,KAAhC,GAAwC,CAACA,KAAD,CAA3D;AACA,oBAAMkD,QAAQ,GAAGJ,aAAa,IAAIC,YAAjB,GAAgC,cAAhC,GAAiDC,QAAQ,GAAG,WAAH,GAAiB,EAA3F;AACA,oBAAMb,SAAS,GAAGpD,KAAK,CAACiD,IAAN,CAAWI,YAAX,CAAwBrC,KAAxB,EAA+BgC,MAA/B,CAAlB;AACA,oBAAMM,iBAAiB,GAAGF,SAAS,IAAIvD,GAAG,CAACW,UAAD,YAAgB4C,SAAS,CAACtC,IAA1B,EAA1C;AACA,oBAAMyC,gBAAgB,GAAGH,SAAS,IAAIpD,KAAK,CAACiD,IAAN,CAAWM,gBAAX,CAA4BH,SAA5B,EAAuCE,iBAAvC,CAAtC;AACA,oBAAME,QAAQ,GAAGxD,KAAK,CAACiD,IAAN,CAAWQ,aAAX,CAAyBzC,KAAzB,CAAjB;;AAEA,oBAAI+C,aAAa,IAAIC,YAAjB,IAAiCC,QAArC,EAA+C;AAC7C,yBAAOb,SAAS,KAAKM,SAAd,IAA4BN,SAAS,IAAIG,gBAAzC,gBACL,QAAC,QAAD;AAAU,oBAAA,OAAO,EAAE,CAAnB;AAAsB,oBAAA,SAAS,MAA/B;AAAA,+BACG,CAACU,QAAD,gBACC,QAAC,QAAD;AAAU,sBAAA,IAAI,MAAd;AAAe,sBAAA,EAAE,EAAE,EAAnB;AAAA,gCACGjD,KAAK,CAACkB;AADT;AAAA;AAAA;AAAA;AAAA,6BADD,GAIG,IALN,EAOGgC,UAAU,CAACrB,GAAX,CAAe,UAACuB,CAAD,EAAIrB,KAAJ,EAAc;AAC5B,0CACE,QAAC,QAAD;AAAU,wBAAA,IAAI,MAAd;AAAe,wBAAA,EAAE,EAAE,EAAnB;AAAA,+CACE,QAAC,GAAD;AAAK,0BAAA,SAAS,EAAE,CAAAmB,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEG,MAAZ,IAAqB,CAArB,aAA4BxD,OAAO,CAAC6B,IAApC,cAA4C7B,OAAO,CAACyD,SAApD,MAAhB;AAAA,oCACGtD,KAAK,CAACmD,QAAD,CAAL,CACEP,MADF,CACS,UAACW,CAAD;AAAA,mCAAOV,OAAO,CAACU,CAAC,CAACzD,IAAH,CAAd;AAAA,2BADT,EAEE+B,GAFF,CAEM,UAAC2B,UAAD,EAAgB;AACnB,gCAAMhB,QAAQ,GAAGxD,KAAK,CAACiD,IAAN,CAAWQ,aAAX,CAAyBe,UAAzB,CAAjB;AACA,gCAAMC,OAAO,GAAGzE,KAAK,CAACiD,IAAN,CAAWyB,YAAX,CAAwBF,UAAxB,CAAhB;AAEA,mCAAO,CAAChB,QAAD,IAAaiB,OAAb,gBACL,QAAC,QAAD;AAAU,8BAAA,OAAO,EAAE,CAAnB;AAAsB,8BAAA,SAAS,MAA/B;AAAA,sDACE,QAAC,QAAD;AAAU,gCAAA,IAAI,MAAd;AAAe,gCAAA,EAAE,EAAE,CAAnB;AAAA,uDACE,QAAC,UAAD;AAAY,kCAAA,OAAO,EAAC,OAApB;AAA4B,kCAAA,SAAS,EAAC,MAAtC;AAAA,4CACGD,UAAU,CAACtC;AADd;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,uCADF,eAME,QAAC,QAAD;AAAU,gCAAA,IAAI,MAAd;AAAe,gCAAA,EAAE,EAAE,CAAnB;AAAA,uDACE,QAAC,UAAD;AAAY,kCAAA,OAAO,EAAC,OAApB;AAA4B,kCAAA,SAAS,EAAC,MAAtC;AAA6C,kCAAA,KAAK,EAAE;AAAEyB,oCAAAA,UAAU,EAAE;AAAd,mCAApD;AAAA,4CACG5C,WAAW,CAACyD,UAAD,EAAaJ,CAAC,CAACI,UAAU,CAAC1D,IAAZ,CAAd;AADd;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,uCANF;AAAA,yCAAwC0D,UAAU,CAAC1D,IAAnD,cAA2D0D,UAAU,CAACtC,KAAtE;AAAA;AAAA;AAAA;AAAA,qCADK,GAaH,IAbJ;AAcD,2BApBF;AADH;AAAA;AAAA;AAAA;AAAA;AADF,uCAAmCa,KAAnC;AAAA;AAAA;AAAA;AAAA,+BADF;AA2BD,qBA5BA,CAPH;AAAA,+BAAwC/B,KAAK,CAACkB,KAA9C,cAAuDlB,KAAK,CAACkB,KAA7D;AAAA;AAAA;AAAA;AAAA,2BADK,GAsCH,IAtCJ;AAuCD;;AAED,uBAAO,CAACsB,QAAD,KAAcJ,SAAS,KAAKM,SAAd,IAA4BN,SAAS,IAAIG,gBAAvD,iBACL,QAAC,QAAD;AAAU,kBAAA,SAAS,MAAnB;AAAoB,kBAAA,OAAO,EAAE,CAA7B;AAAA,0CACE,QAAC,QAAD;AAAU,oBAAA,IAAI,MAAd;AAAe,oBAAA,EAAE,EAAE,CAAnB;AAAA,2CACE,QAAC,UAAD;AAAY,sBAAA,OAAO,EAAC,OAApB;AAA4B,sBAAA,SAAS,EAAC,MAAtC;AAAA,gCACGvC,KAAK,CAACkB,KAAN,IAAelB,KAAK,CAAC2D;AADxB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,2BADF,eAME,QAAC,QAAD;AAAU,oBAAA,IAAI,MAAd;AAAe,oBAAA,EAAE,EAAE,CAAnB;AAAA,2CACE,QAAC,UAAD;AAAY,sBAAA,OAAO,EAAC,OAApB;AAA4B,sBAAA,SAAS,EAAC,MAAtC;AAA6C,sBAAA,KAAK,EAAE;AAAEhB,wBAAAA,UAAU,EAAE;AAAd,uBAApD;AAAA,gCACG5C,WAAW,CAACC,KAAD,EAAQC,KAAR;AADd;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,2BANF;AAAA,6BAAwCD,KAAK,CAACF,IAA9C,cAAsDE,KAAK,CAACkB,KAA5D;AAAA;AAAA;AAAA;AAAA,yBADK,GAaH,IAbJ;AAcD,eAtEF;AADH;AAAA;AAAA;AAAA;AAAA,qBANF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,WAAoFY,KAApF;AAAA;AAAA;AAAA;AAAA,iBAzCF;AA4HD,OA/HD;AAhBJ;AAAA;AAAA;AAAA;AAAA,aAJF;AAAA,kBADF;AAyJD,CAjOD;;KAAMxC,Q;;;;;;AAmON,eAAeA,QAAf","sourcesContent":["import * as React from 'react';\r\nimport startCase from 'lodash/startCase';\r\nimport toLower from 'lodash/toLower';\r\n\r\nimport get from 'lodash/get';\r\n\r\n// app\r\nimport styles from './RiskData.styles';\r\nimport { FormGrid } from 'components';\r\n\r\nimport * as utils from 'utils';\r\nimport { RISK_DEFINITION_GENERAL } from 'consts';\r\n// mui\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\nimport { Box, makeStyles, Typography } from '@material-ui/core';\r\n\r\nconst RiskData = ({ riskIsLoading, riskValues, groups, definitionsFields, valuesByID, countryOfOrigin }) => {\r\n  const classes = makeStyles(styles, { name: 'RiskData' })();\r\n\r\n  const renderValue = (field, value) => {\r\n    let prefix = '';\r\n    let suffix = '';\r\n    let newValue = value;\r\n\r\n    switch (field.type) {\r\n      case 'DOUBLE':\r\n        const isPercent = field && field.validation && field.validation.percent;\r\n        newValue = utils.string.t(`format.${isPercent ? 'percent' : 'currency'}`, { value: { number: value } });\r\n        break;\r\n      case 'BOOLEAN':\r\n        newValue =\r\n          value === 'true' || value === true\r\n            ? utils.string.t('app.yes')\r\n            : value === 'false' || value === false\r\n            ? utils.string.t('app.no')\r\n            : '';\r\n        break;\r\n\r\n      case 'DATE':\r\n        newValue = utils.string.t(`format.date`, { value: { date: value } });\r\n        break;\r\n      case 'ID':\r\n        newValue = valuesByID[field.name]?.id === value ? valuesByID[field.name]?.name : '';\r\n        break;\r\n\r\n      case 'SELECT': {\r\n        if (field.autocomplete) {\r\n          if (utils.generic.isValidArray(value)) {\r\n            newValue = '';\r\n            for (const singleValue of value) {\r\n              newValue = newValue + `${singleValue?.label || singleValue},`;\r\n            }\r\n            newValue = newValue.slice(0, -1);\r\n          } else newValue = value?.label || value;\r\n        } else {\r\n          const options =\r\n            field.name === 'countryOfOrigin' ? countryOfOrigin : utils.generic.isValidArray(field.options, true) ? field.options : [];\r\n          const option = options.find((o) => String(o.value) === String(value)) || {};\r\n\r\n          newValue = option?.label !== 'Select...' ? option.label : value ? value : '';\r\n        }\r\n        break;\r\n      }\r\n      case 'RADIO': {\r\n        newValue = value || '';\r\n        break;\r\n      }\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\n    // add prefix/suffix for specific fields\r\n    if (field.name === 'distanceToCoast' && value) {\r\n      suffix = ` ${utils.string.t('map.unit.miles')}`;\r\n    }\r\n    // the extra <span /> is used to prevent Material-UI complaining about not receiving a ReactNode\r\n    // this happens if the value is true/false/undefined/null...\r\n    // this workaround prevents errors in case some invalid values fall through the cracks\r\n    return utils.generic.isValidObject(newValue) ? null : (\r\n      <span>\r\n        {prefix}\r\n        {newValue}\r\n        {suffix}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box mb={1} display=\"flex\" alignItems=\"center\" data-testid=\"risk-data\">\r\n        <Typography variant=\"h3\">{utils.string.t('risks.data')}</Typography>\r\n      </Box>\r\n      <FormGrid container spacing={2}>\r\n        {riskIsLoading || !utils.generic.isValidObject(riskValues) ? (\r\n          <FormGrid item xs={12} sm={6} md={4} lg={3} data-testid=\"risk-data-loading\">\r\n            <Box className={classes.card}>\r\n              <Box p={2} className={classes.cardTitle}>\r\n                <Skeleton animation=\"wave\" width=\"100%\" height={40} />\r\n              </Box>\r\n              <Box p={2}>\r\n                <Skeleton animation=\"wave\" height={20} style={{ marginBottom: 6 }} />\r\n                <Skeleton animation=\"wave\" height={20} style={{ marginBottom: 6 }} />\r\n                <Skeleton animation=\"wave\" height={20} style={{ marginBottom: 6 }} />\r\n                <Skeleton animation=\"wave\" height={20} />\r\n              </Box>\r\n            </Box>\r\n          </FormGrid>\r\n        ) : (\r\n          groups.map((group, index) => {\r\n            const fields = utils.risk.getFieldsByGroup(definitionsFields, group) || [];\r\n\r\n            return group === RISK_DEFINITION_GENERAL ? (\r\n              <FormGrid item xs={12} sm={6} md={4} lg={3} data-testid={`risk-data-${group}`} key={group}>\r\n                <Box className={classes.card}>\r\n                  <Box p={2} className={classes.cardTitle}>\r\n                    <Typography variant=\"h3\" className={classes.cardTitleHeading}>\r\n                      {startCase(toLower(group))}\r\n                    </Typography>\r\n                  </Box>\r\n                  <Box p={2}>\r\n                    <FormGrid container spacing={1}>\r\n                      {fields.map((field) => {\r\n                        const value = riskValues[field?.name] || null;\r\n                        const condition = utils.risk.getCondition(field, fields);\r\n                        const refValueCondition = condition && get(riskValues, `${condition.name}`);\r\n                        const isConditionValid = condition && utils.risk.isConditionValid(condition, refValueCondition);\r\n                        const isHidden = utils.risk.isHiddenField(field);\r\n\r\n                        return !isHidden && (condition === undefined || (condition && isConditionValid)) ? (\r\n                          <FormGrid item xs={12} sm={12} key={`${field.label}-${value}`}>\r\n                            <FormGrid container spacing={1}>\r\n                              <FormGrid item xs={6}>\r\n                                <Typography variant=\"body2\" component=\"span\">\r\n                                  {field.label}\r\n                                </Typography>\r\n                              </FormGrid>\r\n                              <FormGrid item xs={6}>\r\n                                <Typography variant=\"body2\" component=\"span\" style={{ fontWeight: 'bold' }}>\r\n                                  {renderValue(field, value)}\r\n                                </Typography>\r\n                              </FormGrid>\r\n                            </FormGrid>\r\n                          </FormGrid>\r\n                        ) : (\r\n                          <FormGrid item xs={12} sm={4} key={`${field.label}-${value}`} />\r\n                        );\r\n                      })}\r\n                    </FormGrid>\r\n                  </Box>\r\n                </Box>\r\n              </FormGrid>\r\n            ) : (\r\n              <FormGrid item xs={12} sm={6} md={4} lg={3} data-testid={`risk-data-${group}`} key={group}>\r\n                <Box className={classes.card}>\r\n                  <Box p={2} className={classes.cardTitle}>\r\n                    <Typography variant=\"h3\" className={classes.cardTitleHeading}>\r\n                      {startCase(toLower(group))}\r\n                    </Typography>\r\n                  </Box>\r\n                  <Box p={2}>\r\n                    {fields\r\n                      .filter((field) => Boolean(field.name) && field.type !== 'label')\r\n                      .map((field, idx) => {\r\n                        const value = riskValues[field.name];\r\n                        const isArrayColumn = utils.risk.isArrayColumn(field) && utils.generic.isValidArray(value);\r\n                        const isArrayTable = utils.risk.isArrayTable(field) && utils.generic.isValidArray(value);\r\n                        const isObject = utils.risk.isObject(field) && utils.generic.isValidObject(value);\r\n                        const valueArray = isArrayColumn || isArrayTable ? value : [value];\r\n                        const arrayKey = isArrayColumn || isArrayTable ? 'arrayItemDef' : isObject ? 'objectDef' : '';\r\n                        const condition = utils.risk.getCondition(field, fields);\r\n                        const refValueCondition = condition && get(riskValues, `${condition.name}`);\r\n                        const isConditionValid = condition && utils.risk.isConditionValid(condition, refValueCondition);\r\n                        const isHidden = utils.risk.isHiddenField(field);\r\n\r\n                        if (isArrayColumn || isArrayTable || isObject) {\r\n                          return condition === undefined || (condition && isConditionValid) ? (\r\n                            <FormGrid spacing={2} container key={`${field.label}-${field.label}`}>\r\n                              {!isObject ? (\r\n                                <FormGrid item xs={12}>\r\n                                  {field.label}\r\n                                </FormGrid>\r\n                              ) : null}\r\n\r\n                              {valueArray.map((v, index) => {\r\n                                return (\r\n                                  <FormGrid item xs={12} key={`key-${index}`}>\r\n                                    <Box className={valueArray?.length > 1 ? `${classes.card} ${classes.cardArray}` : ``}>\r\n                                      {field[arrayKey]\r\n                                        .filter((f) => Boolean(f.name))\r\n                                        .map((arrayField) => {\r\n                                          const isHidden = utils.risk.isHiddenField(arrayField);\r\n                                          const isTitle = utils.risk.isTitleField(arrayField);\r\n\r\n                                          return !isHidden || isTitle ? (\r\n                                            <FormGrid spacing={1} container key={`${arrayField.name}-${arrayField.label}`}>\r\n                                              <FormGrid item xs={6}>\r\n                                                <Typography variant=\"body2\" component=\"span\">\r\n                                                  {arrayField.label}\r\n                                                </Typography>\r\n                                              </FormGrid>\r\n                                              <FormGrid item xs={6}>\r\n                                                <Typography variant=\"body2\" component=\"span\" style={{ fontWeight: 'bold' }}>\r\n                                                  {renderValue(arrayField, v[arrayField.name])}\r\n                                                </Typography>\r\n                                              </FormGrid>\r\n                                            </FormGrid>\r\n                                          ) : null;\r\n                                        })}\r\n                                    </Box>\r\n                                  </FormGrid>\r\n                                );\r\n                              })}\r\n                            </FormGrid>\r\n                          ) : null;\r\n                        }\r\n\r\n                        return !isHidden && (condition === undefined || (condition && isConditionValid)) ? (\r\n                          <FormGrid container spacing={2} key={`${field.name}-${field.label}`}>\r\n                            <FormGrid item xs={6}>\r\n                              <Typography variant=\"body2\" component=\"span\">\r\n                                {field.label || field.title}\r\n                              </Typography>\r\n                            </FormGrid>\r\n                            <FormGrid item xs={6}>\r\n                              <Typography variant=\"body2\" component=\"span\" style={{ fontWeight: 'bold' }}>\r\n                                {renderValue(field, value)}\r\n                              </Typography>\r\n                            </FormGrid>\r\n                          </FormGrid>\r\n                        ) : null;\r\n                      })}\r\n                  </Box>\r\n                </Box>\r\n              </FormGrid>\r\n            );\r\n          })\r\n        )}\r\n      </FormGrid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RiskData;\r\n"]},"metadata":{},"sourceType":"module"}