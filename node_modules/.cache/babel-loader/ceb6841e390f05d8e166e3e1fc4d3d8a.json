{"ast":null,"code":"import _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport get from 'lodash/get';\nimport xorBy from 'lodash/xorBy'; // app\n\nimport config from 'config';\nimport * as constants from 'consts';\nimport * as utils from 'utils';\nvar initialState = {\n  isChoosing: false,\n  isLossSubmitted: false,\n  sectionEnabledUG: false,\n  claimsStepper: 0,\n  catCodes: [],\n  claimsAssociateWithLoss: [],\n  claimantNames: [],\n  lossQualifiers: [],\n  lossInformation: {},\n  selectedLossInformation: {},\n  claimsInformation: {},\n  selectedClaimsDetails: {},\n  isClaimsInfoLoading: false,\n  isLossInfoLoading: false,\n  isPolicyInfoLoading: false,\n  isPolicySectionsLoading: false,\n  isClaimsAssociateWithLossLoading: false,\n  isSanctionCheckStatusLoading: false,\n  settlementCurrencies: [],\n  queryCode: [],\n  sendToList: [],\n  policyData: {\n    policyID: null\n  },\n  policyInformation: {},\n  claims: {\n    items: [],\n    itemsTotal: 0,\n    page: 1,\n    pageSize: config.ui.pagination.default,\n    pageTotal: 0,\n    query: '',\n    sort: {\n      by: 'lossRef',\n      direction: 'desc'\n    },\n    searchBy: 'claimantName',\n    filters: {}\n  },\n  processing: {\n    selected: [],\n    items: [],\n    itemsTotal: 0,\n    page: 1,\n    pageSize: config.ui.pagination.default,\n    pageTotal: 0,\n    query: '',\n    sort: {\n      by: 'createdDate',\n      direction: 'desc'\n    },\n    searchBy: constants.CLAIMS_SEARCH_OPTION_CLAIM_REF,\n    filters: {},\n    isloadingFilters: false,\n    isUserClaim: false,\n    isClosedClaim: false,\n    isTeamClaim: false\n  },\n  tasksProcessing: {\n    selectedTaskType: '',\n    selected: [],\n    items: [],\n    rfiCount: '',\n    itemsTotal: 0,\n    page: 1,\n    pageSize: config.ui.pagination.default,\n    pageTotal: 0,\n    query: '',\n    searchBy: 'taskRef',\n    isloadingFilters: false,\n    filters: {},\n    appliedFilters: [],\n    sort: {\n      by: 'targetDueDate, priority',\n      type: 'lexical',\n      direction: 'asc'\n    },\n    associatedTaskDetails: {}\n  },\n  policies: {\n    items: [],\n    itemsTotal: 0,\n    page: 0,\n    pageSize: config.ui.pagination.default,\n    pageTotal: 0,\n    query: '',\n    sort: {\n      by: 'policyRef',\n      direction: 'desc'\n    },\n    searchBy: constants.CLAIMS_POLICY_SEARCH_OPTION.policyRef,\n    filters: {},\n    isloadingFilters: false,\n    isloadingTable: false\n  },\n  claimPoliciesSearchFilters: {\n    search: '',\n    filters: {\n      policyType: [],\n      insured: [],\n      reinsured: [],\n      client: [],\n      riskDetails: [],\n      inceptionDate: null,\n      expiryDate: null,\n      division: [],\n      policyStatus: [],\n      sanctionsCheck: []\n    }\n  },\n  policySections: [],\n  interest: {\n    items: [],\n    selectedInterest: '',\n    isLoading: false\n  },\n  insured: {\n    items: [],\n    itemsTotal: 0,\n    page: 0,\n    pageSize: config.ui.pagination.default,\n    pageTotal: 0,\n    query: '',\n    sort: {\n      by: 'sourceID',\n      direction: 'desc'\n    }\n  },\n  notes: {\n    items: [],\n    itemsTotal: 0,\n    page: 0,\n    pageSize: config.ui.pagination.options[0],\n    pageTotal: 0,\n    query: '',\n    sort: {\n      by: 'updatedDate',\n      direction: 'desc',\n      type: 'date'\n    },\n    filters: []\n  },\n  rfis: {\n    items: [],\n    itemsTotal: 0,\n    page: 0,\n    pageSize: config.ui.pagination.options[1],\n    pageTotal: 0,\n    query: '',\n    sort: {\n      by: 'targetDueDate, priority',\n      direction: 'asc',\n      type: 'date'\n    },\n    filters: []\n  },\n  audits: {\n    items: [],\n    itemsTotal: 0,\n    page: 0,\n    pageSize: config.ui.pagination.options[0],\n    pageTotal: 0,\n    query: '',\n    sort: {\n      by: 'createdBy',\n      direction: 'desc'\n    },\n    filters: []\n  },\n  taskNotes: {\n    items: [],\n    itemsTotal: 0,\n    page: 0,\n    pageSize: config.ui.pagination.options[0],\n    pageTotal: 0,\n    query: '',\n    sort: {\n      by: 'updatedDate',\n      direction: 'desc',\n      type: 'date'\n    },\n    filters: []\n  },\n  rfiHistory: {\n    data: [],\n    isLoading: false\n  },\n  rfiInfo: {\n    data: {},\n    documents: []\n  },\n  underWritingGroups: {\n    items: [],\n    percentageOfSelected: 0,\n    sort: {\n      by: 'groupRef',\n      direction: 'asc'\n    },\n    isLoading: false\n  },\n  allClaimDetails: {},\n  claimBordereauPeriods: [],\n  claimPolicyInsures: [],\n  isClaimPolicyInsuresLoading: false,\n  claimPolicyClients: [],\n  isPolicyClientsLoading: false,\n  claimDetailInformation: {},\n  claimDetailInformationSuccess: null,\n  beAdjuster: {\n    items: [],\n    selectedbeAdjuster: null\n  },\n  priorities: [],\n  isPrioritiesLoading: false,\n  prioritiesLoaded: false,\n  reopenTaskList: [],\n  claimsProcessingData: {\n    search: '',\n    filters: {\n      dateAndTimeCreated: '',\n      targetDueDate: '',\n      team: [],\n      assignedToDropdownList: [],\n      priority: [],\n      status: []\n    }\n  },\n  claimsRefData: {\n    claimStatus: [],\n    claimant: [],\n    lossDateFrom: [],\n    lossDateTo: [],\n    lossName: [],\n    insured: [],\n    priority: []\n  },\n  claimLossSearchFilters: {\n    search: '',\n    filters: {\n      claimStatus: [],\n      claimant: [],\n      lossDateFrom: null,\n      lossDateTo: null,\n      lossName: [],\n      insured: [],\n      priority: []\n    }\n  },\n  claimsProcessingSearchFilters: {\n    search: '',\n    filters: {\n      dateAndTimeCreated: [],\n      targetDueDate: [],\n      team: [],\n      assignedToDropdownList: [],\n      priority: [],\n      status: []\n    }\n  },\n  statuses: [],\n  complexityPolicies: {\n    items: [],\n    itemsTotal: 0,\n    page: 1,\n    pageSize: config.ui.pagination.default,\n    pageTotal: 0,\n    query: '',\n    sort: {\n      by: 'policyRef',\n      direction: 'asc'\n    },\n    selectedComplexityPolicies: [],\n    savedComplexPolicies: [],\n    checkedComplexity: false\n  },\n  complexityPoliciesFlagged: {\n    items: [],\n    itemsTotal: 0,\n    page: 1,\n    pageSize: config.ui.pagination.default,\n    pageTotal: 0,\n    query: null,\n    sort: {\n      by: 'policyRef',\n      direction: 'asc'\n    }\n  },\n  complexityBasisValues: {\n    type: '',\n    items: null,\n    itemsTotal: 0,\n    page: 1,\n    pageSize: 5,\n    pageTotal: 0,\n    query: '',\n    sort: {\n      by: 'createdDate',\n      direction: 'desc'\n    },\n    loaded: false\n  },\n  complexityReferralValues: {\n    items: null,\n    itemsTotal: 0,\n    page: 1,\n    pageSize: 5,\n    pageTotal: 0,\n    query: '',\n    sort: {\n      by: 'createdDate',\n      direction: 'desc'\n    }\n  },\n  checkedComplexAddPolicies: [],\n  claimData: {},\n  complexityManagement: {\n    activeTab: '',\n    division: [],\n    divisionChanges: {},\n    complexityBasisValueId: {},\n    complexityBasisDivisionMatrix: [],\n    complexityBasisDivisionMatrixChanges: {},\n    complexityReferralValueId: {},\n    complexityReferralDivisionMatrix: [],\n    complexityReferralDivisionMatrixChanges: {}\n  },\n  complexInsured: {\n    items: null,\n    itemsTotal: 0,\n    page: 0,\n    pageSize: config.ui.pagination.default,\n    pageTotal: 0,\n    query: '',\n    sort: {\n      by: 'insured',\n      direction: 'asc'\n    },\n    selectedComplexityInsured: [],\n    savedComplexInsured: [],\n    checkedComplexity: false\n  },\n  checkedComplexAddInsured: [],\n  complexityValues: [],\n  complexityValuesLoaded: false,\n  complexityTypes: [],\n  complexityTypesLoaded: false,\n  referralValues: [],\n  referralResponse: [],\n  refTabTasks: {\n    selected: [],\n    items: [],\n    itemsTotal: 0,\n    page: 1,\n    pageSize: config.ui.pagination.options[0],\n    pageTotal: 0,\n    query: '',\n    filters: [],\n    appliedFilters: [],\n    sort: {\n      by: 'taskRef',\n      type: 'lexical',\n      direction: 'desc'\n    }\n  },\n  isClaimsAssignedToUsersLoading: false,\n  claimsAssignedToUsers: {\n    type: '',\n    orgName: '',\n    items: [],\n    loaded: false\n  },\n  taskDashboard: {\n    taskDetails: {\n      items: {},\n      query: ''\n    },\n    checkList: [],\n    nextActions: [],\n    checkListChanges: [],\n    checkListChangesPushed: [],\n    nextActionChangesPushed: [],\n    purchasedCurrencyRequired: '',\n    isLoading: false\n  },\n  setPriority: {\n    claimPriority: {}\n  },\n  adhocTask: {\n    status: false,\n    data: {},\n    documents: []\n  },\n  tasksClaimsReporting: {\n    data: {},\n    isDataLoading: false\n  },\n  processingNavigation: {\n    navigationItem: constants.CLAIMS_PROCESSING_TAB_SELECTION,\n    selectedView: constants.CLAIM_TEAM_TYPE.myClaims\n  },\n  lossDocDetails: [],\n  dmsDocDetails: {\n    lossDocDetails: [],\n    linkPolicyDocDetails: [],\n    claimsDocDetails: [],\n    manageDocument: {\n      lossDocumentDetails: [],\n      claimDocumentDetails: []\n    }\n  },\n  linkPolicies: {\n    searchBy: 'clientName',\n    searchTerm: '',\n    data: {},\n    loader: false,\n    fieldLoader: false\n  },\n  lossActions: {\n    items: [],\n    itemsTotal: 0,\n    page: 0,\n    pageSize: config.ui.pagination.default,\n    pageTotal: 0,\n    query: '',\n    sort: {\n      by: 'targetDueDate,priority',\n      direction: 'asc',\n      type: 'date'\n    },\n    filters: [],\n    fieldLoader: false\n  },\n  lossesTab: {\n    isLoading: false,\n    searchText: '',\n    items: [],\n    itemsTotal: 0,\n    page: 0,\n    pageSize: config.ui.pagination.default,\n    pageTotal: 0,\n    query: '',\n    sort: {\n      by: 'createdDate,lossRef',\n      direction: 'desc'\n    },\n    searchBy: '',\n    filters: {},\n    filterValues: {},\n    refreshLossesTab: false\n  },\n  advanceTab: {\n    searchText: '',\n    items: [],\n    itemsTotal: 0,\n    page: 1,\n    pageSize: config.ui.pagination.default,\n    pageTotal: 0,\n    query: '',\n    sort: {\n      by: 'lossRef,claimRef',\n      direction: 'desc'\n    },\n    searchBy: '',\n    filters: {},\n    filterValues: {},\n    refreshAdvanceTab: false,\n    pullClosedRecords: false,\n    isloadingFilters: false,\n    isloadingTable: false\n  },\n  claimsTab: {\n    isClaimsTabLoaded: false,\n    searchBy: '',\n    searchText: '',\n    view: '',\n    tableDetails: {\n      selected: [],\n      items: [],\n      itemsTotal: 0,\n      page: 1,\n      pageSize: config.ui.pagination.default,\n      pageTotal: 0,\n      query: '',\n      sort: {\n        by: 'processRef',\n        direction: 'desc'\n      },\n      searchBy: constants.CLAIMS_SEARCH_OPTION_INSURED,\n      filters: {\n        claimLossFromDate: '',\n        insured: [],\n        division: [],\n        claimStatus: [],\n        claimStage: [],\n        assignedTo: [],\n        team: [],\n        priority: []\n      },\n      isloadingFilters: false,\n      isloadingTable: false,\n      selectedFilters: []\n    }\n  },\n  tasksTab: {\n    selectedTaskType: '',\n    selected: [],\n    items: [],\n    rfiCount: '',\n    itemsTotal: 0,\n    page: 1,\n    pageSize: config.ui.pagination.default,\n    pageTotal: 0,\n    query: '',\n    searchBy: 'taskRef',\n    isloadingFilters: false,\n    isTableLoading: false,\n    filters: {},\n    appliedFilters: {},\n    previousTaskType: '',\n    sort: {\n      by: 'targetDueDate',\n      type: 'lexical',\n      direction: 'asc'\n    },\n    associatedTaskDetails: {}\n  },\n  pushBackRoute: '',\n  fnolSelectedTab: '',\n  caseIncidentDetails: {},\n  sanctionCheckStatus: {},\n  bpmClaimInformation: {\n    data: {},\n    isLoading: false\n  },\n  rfiHistoryDocuments: {\n    documentList: [],\n    isLoading: false\n  }\n};\n\nvar claimsReducer = function claimsReducer() {\n  var _action$payload, _action$payload2, _selectedPercentage, _selectedPercentage$t, _selectedPercentage$t2, _sortedUnderwritingGr, _action$payload4, _action$payload5, _action$payload$claim, _updateClaimsValues$a, _updateClaimsValues$a2, _updateClaimsValues$c, _state$claimsTab$tabl, _state$claimsTab$tabl2, _action$payload$filte, _action$payload9, _action$payload10, _action$payload11, _action$payload12, _action$payload13, _action$payload14, _action$payload15, _action$payload16, _action$payload17, _action$payload18, _action$payload19, _action$payload20, _action$payload20$ite, _action$payload21, _action$payload21$ite, _action$payload22, _action$payload23, _action$payload24, _action$payload24$ite, _action$payload25, _action$payload25$ite, _action$payload26, _action$payload27, _action$payload28, _action$payload29, _action$payload30, _action$payload31, _action$payload32, _action$payload33, _action$payload36, _action$payload36$ite, _action$payload37, _action$payload37$ite, _initialState$claimsT, _initialState$claimsT2, _initialState$claimsT3, _initialState$claimsT4, _state$claimsTab, _state$claimsTab$tabl3, _action$payload38, _action$payload39, _action$payload39$par, _action$payload40;\n\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'CLAIMS_ASSOCIATE_WITH_LOSS_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isClaimsAssociateWithLossLoading: true\n      });\n\n    case 'CLAIMS_ASSOCIATE_WITH_LOSS_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimsAssociateWithLoss: action.payload,\n        isClaimsAssociateWithLossLoading: false\n      });\n\n    case 'CLAIMREF_EDIT_NOTES_SUCCESS':\n      // eslint-disable-next-line array-callback-return\n      var getNotesItems = state.notes.items.filter(function (item, idx) {\n        return item.caseIncidentNotesID !== action.payload.caseIncidentNotesID ? item : null;\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        notes: _objectSpread(_objectSpread({}, state.notes), {}, {\n          items: [action.payload].concat(_toConsumableArray(getNotesItems))\n        })\n      });\n\n    case 'CLAIMS_SAVE_NOTES_POST_SUCCESS':\n      var isArrayLargerThanPageSize = state.notes.items.length + 1 > state.notes.pageSize;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        notes: _objectSpread(_objectSpread({}, state.notes), {}, {\n          items: isArrayLargerThanPageSize ? [action.payload].concat(_toConsumableArray(state.notes.items.slice(0, -1))) : [action.payload].concat(_toConsumableArray(state.notes.items)),\n          itemsTotal: state.notes.itemsTotal + 1\n        })\n      });\n\n    case 'CLAIMS_ADHOC_TASK_RESET_STATUS':\n    case 'CLAIMS_SAVE_ADHOC_TASK_POST_REQUEST':\n    case 'CLAIMS_EDIT_ADHOC_TASK_POST_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        adhocTask: _objectSpread({}, initialState.adhocTask)\n      });\n\n    case 'CLAIMS_SAVE_ADHOC_TASK_POST_SUCCESS':\n      var createAdHocResp = action === null || action === void 0 ? void 0 : action.payload;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        adhocTask: {\n          status: (createAdHocResp === null || createAdHocResp === void 0 ? void 0 : createAdHocResp.status) === 'OK' || initialState.adhocTask.status,\n          data: createAdHocResp === null || createAdHocResp === void 0 ? void 0 : createAdHocResp.data,\n          documents: initialState.adhocTask.documents\n        }\n      });\n\n    case 'CLAIMS_SAVE_ADHOC_TASK_POST_FAILURE':\n    case 'CLAIMS_EDIT_ADHOC_TASK_POST_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload,\n        adhocTask: _objectSpread({}, initialState.rfiInfo)\n      });\n\n    case 'CLAIMS_EDIT_ADHOC_TASK_POST_SUCCESS':\n      var editAdHocResp = action === null || action === void 0 ? void 0 : action.payload;\n\n      var taskDetails = _objectSpread({}, action === null || action === void 0 ? void 0 : (_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.taskDetails);\n\n      var editAdHocDetails = _objectSpread({}, editAdHocResp === null || editAdHocResp === void 0 ? void 0 : editAdHocResp.data);\n\n      var formattedResp = _objectSpread(_objectSpread({}, taskDetails), {}, {\n        name: editAdHocDetails === null || editAdHocDetails === void 0 ? void 0 : editAdHocDetails.taskName,\n        dueDate: editAdHocDetails === null || editAdHocDetails === void 0 ? void 0 : editAdHocDetails.targetDueDate\n      });\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        adhocTask: _objectSpread({\n          status: (editAdHocResp === null || editAdHocResp === void 0 ? void 0 : editAdHocResp.status) === 'OK' || initialState.adhocTask.status,\n          data: _objectSpread(_objectSpread({}, formattedResp), editAdHocDetails)\n        }, state.adhocTask)\n      });\n\n    case 'SET_ADHOC_TASK_DOCUMENTS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        adhocTask: _objectSpread(_objectSpread({}, state.adhocTask), {}, {\n          documents: action === null || action === void 0 ? void 0 : action.payload\n        })\n      });\n\n    case 'CLAIMS_SAVE_RFI_POST_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        rfiInfo: initialState.rfiInfo\n      });\n\n    case 'CLAIMS_SAVE_RFI_POST_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        rfiInfo: _objectSpread({}, initialState.rfiInfo)\n      });\n\n    case 'CLAIMS_SAVE_RFI_POST_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        rfiInfo: {\n          data: action.payload,\n          documents: initialState.rfiInfo.documents\n        }\n      });\n\n    case 'CLAIMS_SAVE_RFI_POST_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload,\n        rfiInfo: initialState.rfiInfo\n      });\n\n    case 'SET_RFI_DOCUMENTS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        rfiInfo: {\n          data: state.rfiInfo.data,\n          documents: action.payload\n        }\n      });\n\n    case 'CLOSE_SANCTIONS_CHECK_SUCCESS':\n    case 'CLOSE_CLAIMS_POST_SUCCESS':\n      return _objectSpread({}, state);\n\n    case 'CLAIMS_CAT_CODES_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        catCodes: action.payload\n      });\n\n    case 'CLAIMS_CASE_INCIDENT_DETAILS_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        caseIncidentDetails: action.payload\n      });\n\n    case 'CLAIMS_CASE_INCIDENT_DETAILS_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        caseIncidentDetails: initialState.caseIncidentDetails\n      });\n\n    case 'RESET_CASE_INCIDENT_DETAILS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        caseIncidentDetails: initialState.caseIncidentDetails\n      });\n\n    case 'CLAIMS_STATUSES_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        statuses: action.payload,\n        claimsStatusObj: (_action$payload2 = action.payload) === null || _action$payload2 === void 0 ? void 0 : _action$payload2.reduce(function (acc, status) {\n          var name = status.name,\n              id = status.id;\n          return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, name, id === null || id === void 0 ? void 0 : id.toString()));\n        }, {})\n      });\n\n    case 'CLAIMS_CLAIMANT_NAMES_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimantNames: action.payload\n      });\n\n    case 'CLAIMS_CLAIMANT_NAMES_UPDATE_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimantNames: [].concat(_toConsumableArray(state.claimantNames), [{\n          id: action.payload.id + 1,\n          name: action.payload.name\n        }])\n      });\n\n    case 'CLAIMS_LOSS_QUALIFIERS_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        lossQualifiers: action.payload\n      });\n\n    case 'CLAIMS_POLICY_INFORMATION_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isPolicyInfoLoading: true\n      });\n\n    case 'CLAIMS_POLICY_INFORMATION_GET_SUCCESS':\n      var selectPolicyType = action.payload.policyType;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        policyInformation: action.payload,\n        sectionEnabledUG: constants.CLAIM_SECTION_ENABLED_UG.indexOf(selectPolicyType) > -1 || false,\n        isPolicyInfoLoading: false\n      });\n\n    case 'CLAIMS_POLICY_INFORMATION_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload,\n        isPolicyInfoLoading: false\n      });\n\n    case 'GET_LOSS_INFORMATION_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        lossInformation: action.payload,\n        isLossInfoLoading: true\n      });\n\n    case 'LOSS_SELECT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selectedLossInformation: action.payload.lossObj\n      });\n\n    case 'RESET_SELECTED_LOSS_ITEM':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selectedLossInformation: initialState.selectedLossInformation\n      });\n\n    case 'GET_LOSS_INFORMATION_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload,\n        isLossInfoLoading: false\n      });\n\n    case 'CLAIMS_UNDERWRITING_GROUPS_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        underWritingGroups: _objectSpread(_objectSpread({}, state.underWritingGroups), {}, {\n          items: action.payload.map(function (item) {\n            return _objectSpread(_objectSpread({}, item), {}, {\n              selected: false\n            });\n          }),\n          percentageOfSelected: 0\n        })\n      });\n\n    case 'RESET_CLAIMS_UNDERWRITING_GROUPS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        underWritingGroups: _objectSpread(_objectSpread({}, state.underWritingGroups), {}, {\n          items: [],\n          percentageOfSelected: 0\n        }),\n        claimsInformation: _objectSpread(_objectSpread({}, state.claimsInformation), {}, {\n          policyUnderWritingGroupDtoList: []\n        })\n      });\n\n    case 'CLAIMS_UNDERWRITING_GROUPS_SORTING':\n      var selected = state.underWritingGroups.items.filter(function (item) {\n        return action.payload.includes(item.groupRef);\n      }).map(function (item) {\n        return _objectSpread(_objectSpread({}, item), {}, {\n          selected: true\n        });\n      });\n      var remained = state.underWritingGroups.items.filter(function (item) {\n        return !action.payload.includes(item.groupRef);\n      }).map(function (item) {\n        return _objectSpread(_objectSpread({}, item), {}, {\n          selected: false\n        });\n      });\n      var initial = state.underWritingGroups.items.sort(function (a, b) {\n        return a.groupRef.localeCompare(b.groupRef);\n      }).map(function (item) {\n        return _objectSpread(_objectSpread({}, item), {}, {\n          selected: false\n        });\n      });\n      var selectedPercentage = selected === null || selected === void 0 ? void 0 : selected.reduce(function (acc, current) {\n        return acc + current.percentage;\n      }, 0);\n\n      if (Math.floor(selectedPercentage) !== selectedPercentage && ((_selectedPercentage = selectedPercentage) === null || _selectedPercentage === void 0 ? void 0 : (_selectedPercentage$t = _selectedPercentage.toString()) === null || _selectedPercentage$t === void 0 ? void 0 : (_selectedPercentage$t2 = _selectedPercentage$t.split('.')[1]) === null || _selectedPercentage$t2 === void 0 ? void 0 : _selectedPercentage$t2.length) > 5) {\n        selectedPercentage = selectedPercentage.toFixed(5);\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        underWritingGroups: _objectSpread(_objectSpread({}, state.underWritingGroups), {}, {\n          items: action.payload.length > 0 ? [].concat(_toConsumableArray(selected), _toConsumableArray(remained)) : initial,\n          percentageOfSelected: action.payload.length > 0 ? selectedPercentage : 0\n        })\n      });\n\n    case 'CLAIMS_UNDERWRITING_GROUPS_BY_SECTION_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        underWritingGroups: _objectSpread(_objectSpread({}, initialState.underWritingGroups), {}, {\n          isLoading: true\n        })\n      });\n\n    case 'CLAIMS_UNDERWRITING_GROUPS_BY_SECTION_GET_SUCCESS':\n      var sortedUnderwritingGroups = action.payload.sortedUnderwritingGroups;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        underWritingGroups: _objectSpread(_objectSpread({}, state.underWritingGroups), {}, {\n          items: utils.generic.isValidArray(sortedUnderwritingGroups) ? sortedUnderwritingGroups === null || sortedUnderwritingGroups === void 0 ? void 0 : (_sortedUnderwritingGr = sortedUnderwritingGroups.filter(function (item) {\n            return Number(item === null || item === void 0 ? void 0 : item.isDisabled) === 0;\n          })) === null || _sortedUnderwritingGr === void 0 ? void 0 : _sortedUnderwritingGr.map(function (item) {\n            return _objectSpread(_objectSpread({}, item), {}, {\n              selected: false\n            });\n          }) : [],\n          percentageOfSelected: 0,\n          isLoading: false\n        })\n      });\n\n    case 'CLAIMS_UNDERWRITING_GROUPS_BY_SECTION_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload,\n        underWritingGroups: _objectSpread({}, initialState.underWritingGroups)\n      });\n\n    case 'CLAIM_STATUS_EDIT_SUCCESS':\n      var _action$payload3 = action.payload,\n          data = _action$payload3.data,\n          id = _action$payload3.id;\n      var updatedStatus = state.claims.items.map(function (item) {\n        if (item.claimID === id) {\n          return _objectSpread(_objectSpread({}, item), {}, {\n            claimStatusID: data.claimStatusId\n          });\n        } else {\n          return item;\n        }\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claims: _objectSpread(_objectSpread({}, state.claims), {}, {\n          items: updatedStatus\n        })\n      });\n\n    case 'LOSS_INFORMATION_EDIT_SUCCESS':\n      var updatedLoss = _objectSpread(_objectSpread({}, state.lossInformation), {}, {\n        catCodesID: action.payload.catCodesID,\n        isActive: action.payload.isActive,\n        lossDescription: action.payload.lossDescription,\n        lossName: action.payload.lossName,\n        fromDate: action.payload.fromDate,\n        toDate: action.payload.toDate,\n        firstContactDate: action.payload.firstContactDate\n      });\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        lossInformation: updatedLoss\n      });\n\n    case 'CLAIMS_PROCESSING_GET_REQUEST':\n      var newRequestType = action.payload.appliedParams.newRequestType;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        processing: _objectSpread(_objectSpread({}, state.processing), newRequestType === constants.CLAIM_PROCESSING_REQ_TYPES.filter ? {\n          isloadingFilters: true\n        } : {})\n      });\n\n    case 'CLAIMS_PROCESSING_GET_SUCCESS':\n      var _action$payload$items = action.payload.items,\n          filterValue = _action$payload$items.filterValue,\n          searchValue = _action$payload$items.searchValue;\n      var pageSize = get(action.payload.pagination, 'size', initialState.processing.pageSize);\n      var claimRequestType = action.payload.requestType;\n      var isNonfilterTypCall = claimRequestType !== constants.CLAIM_PROCESSING_REQ_TYPES.filter;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        processing: _objectSpread(_objectSpread(_objectSpread({}, state.processing), isNonfilterTypCall ? {\n          items: _toConsumableArray(utils.generic.isValidArray(searchValue) ? searchValue : []),\n          itemsTotal: get(action.payload.pagination, 'totalElements', 0),\n          page: get(action.payload.pagination, 'page', 0) + 1,\n          pageSize: pageSize !== 0 ? pageSize : initialState.processing.pageSize,\n          pageTotal: get(action.payload.pagination, 'totalPages', 0),\n          query: get(action.payload.pagination, 'search') || '',\n          searchBy: get(action.payload.pagination, 'searchBy') || ''\n        } : {}), {}, {\n          sort: {\n            by: get(action.payload.pagination, 'orderBy') || '',\n            direction: (get(action.payload.pagination, 'direction') || '').toLowerCase()\n          },\n          filters: !isNonfilterTypCall ? filterValue ? filterValue : _objectSpread({}, state.processing.filters) : _objectSpread({}, state.processing.filters),\n          isloadingFilters: isNonfilterTypCall ? state.processing.isloadingFilters : false,\n          selected: []\n        })\n      });\n\n    case 'CLAIMS_PROCESSING_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: (_action$payload4 = action.payload) === null || _action$payload4 === void 0 ? void 0 : _action$payload4.error,\n        processing: _objectSpread(_objectSpread({}, state.processing), {}, {\n          isloadingFilters: ((_action$payload5 = action.payload) === null || _action$payload5 === void 0 ? void 0 : _action$payload5.isNonFilterTypeCall) ? state.processing.isloadingFilters : false\n        })\n      });\n\n    case 'CLAIMS_PROCESSING_UPDATE_CLAIM_SUCCESS':\n      var updateClaimsIds = (_action$payload$claim = action.payload.claims) === null || _action$payload$claim === void 0 ? void 0 : _action$payload$claim.map(function (claim) {\n        return claim.claimId;\n      });\n      var updateClaimsValues = action.payload.values;\n      var updateClaimsName = (updateClaimsValues === null || updateClaimsValues === void 0 ? void 0 : (_updateClaimsValues$a = updateClaimsValues.assignTo) === null || _updateClaimsValues$a === void 0 ? void 0 : _updateClaimsValues$a.fullName) || '';\n      var updateClaimsEmail = (updateClaimsValues === null || updateClaimsValues === void 0 ? void 0 : (_updateClaimsValues$a2 = updateClaimsValues.assignTo) === null || _updateClaimsValues$a2 === void 0 ? void 0 : _updateClaimsValues$a2.email) || '';\n      var updateClaimsComplexity = updateClaimsValues === null || updateClaimsValues === void 0 ? void 0 : updateClaimsValues.complexity;\n      var updateClaimsComplexityBasis = updateClaimsValues === null || updateClaimsValues === void 0 ? void 0 : (_updateClaimsValues$c = updateClaimsValues.complexityBasis) === null || _updateClaimsValues$c === void 0 ? void 0 : _updateClaimsValues$c.complexityRulesValue;\n      var updateClaimsPriority = updateClaimsValues === null || updateClaimsValues === void 0 ? void 0 : updateClaimsValues.priority;\n      var updateClaimsPriorityId = updateClaimsValues === null || updateClaimsValues === void 0 ? void 0 : updateClaimsValues.priorityId;\n      var updateClaimsTeam = updateClaimsValues === null || updateClaimsValues === void 0 ? void 0 : updateClaimsValues.team;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        // this updates the claim data for the dashboard page\n        claimsInformation: _objectSpread(_objectSpread({}, state.claimsInformation), {}, {\n          complexity: updateClaimsComplexity || state.claimsInformation.complexity,\n          complexityBasis: updateClaimsComplexityBasis || state.claimsInformation.complexityBasis,\n          priorityID: updateClaimsPriorityId || state.claimsInformation.priorityID,\n          priorityDescription: updateClaimsPriority || state.claimsInformation.priorityDescription\n        }),\n        // this updates the claims data on the claims table tab\n        claimsTab: _objectSpread(_objectSpread({}, state.claimsTab), {}, {\n          tableDetails: _objectSpread(_objectSpread({}, state.claimsTab.tableDetails), {}, {\n            items: (_state$claimsTab$tabl = state.claimsTab.tableDetails.items) === null || _state$claimsTab$tabl === void 0 ? void 0 : _state$claimsTab$tabl.map(function (claim) {\n              if (updateClaimsIds.includes(claim.claimId)) {\n                return _objectSpread(_objectSpread({}, claim), {}, {\n                  assignedTo: updateClaimsName,\n                  assignedToEmail: updateClaimsEmail,\n                  complexity: updateClaimsComplexity || claim.complexity,\n                  complexityBasis: updateClaimsComplexityBasis || claim.complexityBasis,\n                  priority: updateClaimsPriority || claim.priority,\n                  priorityId: updateClaimsPriorityId || claim.priorityId,\n                  team: updateClaimsTeam || claim.team\n                });\n              } else {\n                return claim;\n              }\n            }),\n            selected: (_state$claimsTab$tabl2 = state.claimsTab.tableDetails.selected) === null || _state$claimsTab$tabl2 === void 0 ? void 0 : _state$claimsTab$tabl2.map(function (claim) {\n              if (updateClaimsIds.includes(claim.claimId)) {\n                return _objectSpread(_objectSpread({}, claim), {}, {\n                  assignedTo: updateClaimsName,\n                  assignedToEmail: updateClaimsEmail,\n                  complexity: updateClaimsComplexity || claim.complexity,\n                  complexityBasis: updateClaimsComplexityBasis || claim.complexityBasis,\n                  priority: updateClaimsPriority || claim.priority,\n                  priorityId: updateClaimsPriorityId || claim.priorityId,\n                  team: updateClaimsTeam || claim.team\n                });\n              } else {\n                return claim;\n              }\n            })\n          })\n        })\n      });\n\n    case 'CLAIMS_PROCESSING_FILTERS_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        processing: _objectSpread(_objectSpread({}, state.processing), {}, {\n          filters: initialState.processing.filters\n        })\n      });\n\n    case 'CLAIMS_PROCESSING_SEARCH_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        processing: _objectSpread(_objectSpread({}, state.processing), {}, {\n          query: initialState.processing.query\n        })\n      });\n\n    case 'CLAIMS_PROCESSING_ITEMS_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        processing: _objectSpread(_objectSpread({}, state.processing), {}, {\n          items: initialState.processing.items\n        })\n      });\n\n    case 'CLAIMS_PROCESSING_SELECT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        processing: _objectSpread(_objectSpread({}, state.processing), {}, {\n          selected: action.payload.forceSingleItem ? [action.payload.claimObj] : xorBy(state.processing.selected || [], [action.payload.claimObj], 'processID')\n        })\n      });\n\n    case 'CLAIMS_PROCESSING_SELECTED_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        processing: _objectSpread(_objectSpread({}, state.processing), {}, {\n          selected: []\n        })\n      });\n\n    case 'CLAIM_NOTES_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        notes: {\n          items: action.payload.items || [],\n          itemsTotal: get(action.payload.pagination, 'totalElements', 0),\n          page: get(action.payload.pagination, 'page', 0),\n          pageSize: get(action.payload.pagination, 'size', initialState.notes.pageSize),\n          pageTotal: get(action.payload.pagination, 'totalPages', 0),\n          query: get(action.payload.pagination, 'search') || '',\n          sort: _objectSpread({}, state.notes.sort),\n          filters: action.payload.filters !== null ? action.payload.filters : state.notes.filters\n        }\n      });\n\n    case 'CLAIM_RFIS_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        rfis: {\n          items: action.payload.items || [],\n          itemsTotal: get(action.payload.pagination, 'totalElements', 0),\n          page: get(action.payload.pagination, 'page', 0),\n          pageSize: get(action.payload.pagination, 'size', initialState.rfis.pageSize),\n          pageTotal: get(action.payload.pagination, 'totalPages', 0),\n          query: get(action.payload.pagination, 'search') || '',\n          sort: _objectSpread({}, state.rfis.sort),\n          filters: action.payload.filters !== null ? action.payload.filters : state.rfis.filters\n        }\n      });\n\n    case 'CLAIM_AUDIT_TRAIL_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        audits: {\n          items: action.payload.items || [],\n          itemsTotal: get(action.payload.pagination, 'totalElements', 0),\n          page: get(action.payload.pagination, 'page', 0),\n          pageSize: get(action.payload.pagination, 'size', initialState.audits.pageSize),\n          pageTotal: get(action.payload.pagination, 'totalPages', 0),\n          query: get(action.payload.pagination, 'search') || '',\n          sort: _objectSpread({}, state.audits.sort)\n        }\n      });\n\n    case 'CLAIMS_LOSS_ACTIONS_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        lossActions: {\n          items: action.payload.data || [],\n          itemsTotal: get(action.payload.pagination, 'totalElements', 0),\n          page: get(action.payload.pagination, 'page', 0),\n          pageSize: get(action.payload.pagination, 'size', initialState.lossActions.pageSize),\n          pageTotal: get(action.payload.pagination, 'totalPages', 0),\n          query: get(action.payload.pagination, 'search') || '',\n          sort: _objectSpread({}, state.lossActions.sort),\n          filters: action.payload.filters !== null ? action.payload.filters : state.lossActions.filters\n        }\n      });\n\n    case 'CLAIM_AUDIT_TRAIL_FILTERS_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        audits: _objectSpread(_objectSpread({}, state.audits), {}, {\n          filters: initialState.audits.filters\n        })\n      });\n\n    case 'CLAIM_AUDIT_TRAIL_ITEMS_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        audits: _objectSpread(_objectSpread({}, state.audits), {}, {\n          items: initialState.audits.items\n        })\n      });\n\n    case 'CLAIM_AUDIT_TRAIL_SEARCH_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        audits: _objectSpread(_objectSpread({}, state.audits), {}, {\n          query: initialState.audits.query\n        })\n      });\n\n    case 'CLAIM_NOTES_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        notes: initialState.notes\n      });\n\n    case 'CLAIM_RFIS_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        rfis: initialState.rfis\n      });\n\n    case 'CLAIM_TASK_NOTES_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        taskNotes: {\n          items: action.payload.items || [],\n          itemsTotal: get(action.payload.pagination, 'totalElements', 0),\n          page: get(action.payload.pagination, 'page', 0),\n          pageSize: get(action.payload.pagination, 'size', initialState.taskNotes.pageSize),\n          pageTotal: get(action.payload.pagination, 'totalPages', 0),\n          query: get(action.payload.pagination, 'search') || '',\n          sort: _objectSpread({}, state.taskNotes.sort),\n          filters: (_action$payload$filte = action.payload.filters) !== null && _action$payload$filte !== void 0 ? _action$payload$filte : state.taskNotes.filters\n        }\n      });\n\n    case 'CLAIMS_TASK_ADD_NOTE_SUCCESS':\n      var isTaskNotesArrayLargerThanPageSize = state.taskNotes.items.length + 1 > state.taskNotes.pageSize;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        taskNotes: {\n          items: isTaskNotesArrayLargerThanPageSize ? [action.payload].concat(_toConsumableArray(state.taskNotes.items.slice(0, -1))) : [action.payload].concat(_toConsumableArray(state.taskNotes.items)),\n          itemsTotal: state.taskNotes.itemsTotal + 1,\n          page: get(action.payload.pagination, 'page', 0),\n          pageSize: get(action.payload.pagination, 'size', initialState.taskNotes.pageSize),\n          pageTotal: get(action.payload.pagination, 'totalPages', 0),\n          query: get(action.payload.pagination, 'search') || '',\n          sort: _objectSpread({}, state.taskNotes.sort)\n        }\n      });\n\n    case 'CLAIMS_TASK_EDIT_NOTE_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        taskNotes: {\n          items: state.taskNotes.items.map(function (item) {\n            if (item.caseIncidentNotesID === action.payload.caseIncidentNotesID) {\n              return _objectSpread({}, action.payload);\n            }\n\n            return item;\n          }),\n          sort: _objectSpread({}, state.taskNotes.sort)\n        }\n      });\n\n    case 'SET_CLAIMS_NOTES_TAB_FILTER_VALUES':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        notes: _objectSpread(_objectSpread({}, state.notes), {}, {\n          filters: action.payload\n        })\n      });\n\n    case 'CLAIMS_TASKS_PROCESSING_GET_REQUEST':\n      var taskReqType = action.payload.appliedParams.newRequestType;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasksProcessing: _objectSpread(_objectSpread({}, state.tasksProcessing), taskReqType === constants.CLAIM_PROCESSING_REQ_TYPES.filter ? {\n          isloadingFilters: true\n        } : {})\n      });\n\n    case 'CLAIMS_TASKS_PROCESSING_GET_SUCCESS':\n      var _action$payload6 = action.payload,\n          requestType = _action$payload6.requestType,\n          taskType = _action$payload6.taskType,\n          taskSortBy = _action$payload6.sortBy,\n          taskDir = _action$payload6.dir,\n          query = _action$payload6.query,\n          navigation = _action$payload6.navigation,\n          _action$payload6$item = _action$payload6.items,\n          tasksFiltersValues = _action$payload6$item.filterValue,\n          tasksSearchValues = _action$payload6$item.searchValue,\n          taskRfiCount = _action$payload6$item.rfiTasksCount,\n          tasksPagination = _action$payload6.pagination,\n          tasksAppliedFilters = _action$payload6.appliedFilters;\n      var initTaskProcessing = initialState.tasksProcessing;\n      var initTaskProcessingSort = initTaskProcessing.sort;\n      var stateTaskProcessing = state.tasksProcessing;\n      var prevTaskProcessingSelected = stateTaskProcessing.selected;\n      var isNonfilterTypeCall = requestType !== constants.CLAIM_PROCESSING_REQ_TYPES.filter;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasksProcessing: _objectSpread(_objectSpread(_objectSpread({}, stateTaskProcessing), isNonfilterTypeCall ? {\n          itemsTotal: get(tasksPagination, 'totalElements', 0),\n          page: get(tasksPagination, 'page', 0) + 1,\n          pageSize: get(tasksPagination, 'size', initialState.tasksProcessing.pageSize),\n          pageTotal: get(tasksPagination, 'totalPages', 0),\n          query: get(tasksPagination, 'searchBy') || query || '',\n          items: tasksSearchValues || [],\n          rfiCount: taskRfiCount || 0\n        } : {}), {}, {\n          sort: {\n            by: taskSortBy || initTaskProcessingSort.by,\n            direction: taskDir || initTaskProcessingSort.direction\n          },\n          filters: isNonfilterTypeCall ? stateTaskProcessing.filters : tasksFiltersValues ? tasksFiltersValues : {},\n          appliedFilters: (tasksAppliedFilters === null || tasksAppliedFilters === void 0 ? void 0 : tasksAppliedFilters.length) ? tasksAppliedFilters : initTaskProcessing.appliedFilters,\n          selected: navigation ? prevTaskProcessingSelected : [],\n          taskType: taskType || initTaskProcessing.taskType,\n          isloadingFilters: isNonfilterTypeCall ? stateTaskProcessing.isloadingFilters : false\n        })\n      });\n\n    case 'CLAIMS_TASKS_PROCESSING_GET_FAILURE':\n      var _action$payload7 = action.payload,\n          taskProcessingError = _action$payload7.error,\n          isNonFilterTypeCall = _action$payload7.isNonFilterTypeCall;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: taskProcessingError,\n        tasksProcessing: _objectSpread(_objectSpread({}, state.tasksProcessing), {}, {\n          items: isNonFilterTypeCall ? initialState.tasksProcessing.items : state.tasksProcessing.items,\n          isloadingFilters: isNonFilterTypeCall ? state.processing.isloadingFilters : false\n        })\n      });\n\n    case 'CLAIMS_TASKS_PROCESSING_FILTERS_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasksProcessing: _objectSpread(_objectSpread({}, state.tasksProcessing), {}, {\n          appliedFilters: initialState.tasksProcessing.appliedFilters\n        })\n      });\n\n    case 'CLAIMS_TASKS_PROCESSING_LIST_FILTERS_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasksTab: _objectSpread(_objectSpread({}, state.tasksTab), {}, {\n          appliedFilters: initialState.tasksTab.appliedFilters\n        })\n      });\n\n    case 'CLAIMS_TASKS_PROCESSING_SEARCH_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasksProcessing: _objectSpread(_objectSpread({}, state.tasksProcessing), {}, {\n          query: initialState.tasksProcessing.query\n        })\n      });\n\n    case 'CLAIMS_TASKS_PROCESSING_LIST_SEARCH_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasksTab: _objectSpread(_objectSpread({}, state.tasksTab), {}, {\n          query: initialState.tasksTab.query\n        })\n      });\n\n    case 'CLAIMS_TASKS_PROCESSING_SELECT':\n      var _action$payload8 = action.payload,\n          taskSelectObj = _action$payload8.taskObj,\n          keepPreviousTasks = _action$payload8.keepPreviousTasks;\n      var newTasksSelectedArray = keepPreviousTasks ? xorBy(state.tasksProcessing.selected || [], [taskSelectObj], 'taskRef') : [taskSelectObj];\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasksProcessing: _objectSpread(_objectSpread({}, state.tasksProcessing), {}, {\n          selected: newTasksSelectedArray\n        })\n      });\n\n    case 'CLAIMS_TASKS_PROCESSING_LIST_SELECT':\n      var newTasksSelectedList = ((_action$payload9 = action.payload) === null || _action$payload9 === void 0 ? void 0 : _action$payload9.keepPreviousTasks) ? xorBy(state.tasksTab.selected || [], [(_action$payload10 = action.payload) === null || _action$payload10 === void 0 ? void 0 : _action$payload10.taskObj], 'taskRef') : [(_action$payload11 = action.payload) === null || _action$payload11 === void 0 ? void 0 : _action$payload11.taskObj];\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasksTab: _objectSpread(_objectSpread({}, state.tasksTab), {}, {\n          selected: newTasksSelectedList\n        })\n      });\n\n    case 'CLAIMS_TASKS_PROCESSING_LIST_GET_REQUEST':\n      var isNonfilterCalls = ((_action$payload12 = action.payload) === null || _action$payload12 === void 0 ? void 0 : _action$payload12.requestType) !== constants.CLAIM_PROCESSING_REQ_TYPES.filter;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasksTab: _objectSpread(_objectSpread({}, state.tasksTab), {}, {\n          isTableLoading: isNonfilterCalls\n        })\n      });\n\n    case 'CLAIMS_TASKS_PROCESSING_LIST_GET_SUCCESS':\n      var initTaskProcessingList = initialState.tasksTab;\n      var initTaskProcessingListSort = initTaskProcessingList.sort;\n      var stateTaskProcessingList = state.tasksTab;\n      var prevTaskProcessingListSelected = stateTaskProcessingList.selected;\n      var isNonfilterTypeCalls = ((_action$payload13 = action.payload) === null || _action$payload13 === void 0 ? void 0 : _action$payload13.requestTypes) !== constants.CLAIM_PROCESSING_REQ_TYPES.filter;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasksTab: _objectSpread(_objectSpread(_objectSpread({}, stateTaskProcessingList), isNonfilterTypeCalls ? {\n          itemsTotal: get((_action$payload14 = action.payload) === null || _action$payload14 === void 0 ? void 0 : _action$payload14.pagination, 'totalElements', 0),\n          page: get((_action$payload15 = action.payload) === null || _action$payload15 === void 0 ? void 0 : _action$payload15.pagination, 'page', 0) + 1,\n          pageSize: get((_action$payload16 = action.payload) === null || _action$payload16 === void 0 ? void 0 : _action$payload16.pagination, 'size', initialState.tasksTab.pageSize),\n          pageTotal: get((_action$payload17 = action.payload) === null || _action$payload17 === void 0 ? void 0 : _action$payload17.pagination, 'totalPages', 0),\n          query: get((_action$payload18 = action.payload) === null || _action$payload18 === void 0 ? void 0 : _action$payload18.pagination, 'searchBy') || ((_action$payload19 = action.payload) === null || _action$payload19 === void 0 ? void 0 : _action$payload19.query) || '',\n          items: ((_action$payload20 = action.payload) === null || _action$payload20 === void 0 ? void 0 : (_action$payload20$ite = _action$payload20.items) === null || _action$payload20$ite === void 0 ? void 0 : _action$payload20$ite.searchValue) || [],\n          rfiCount: ((_action$payload21 = action.payload) === null || _action$payload21 === void 0 ? void 0 : (_action$payload21$ite = _action$payload21.items) === null || _action$payload21$ite === void 0 ? void 0 : _action$payload21$ite.rfiTasksCount) || 0,\n          isTableLoading: false\n        } : {}), {}, {\n          sort: {\n            by: ((_action$payload22 = action.payload) === null || _action$payload22 === void 0 ? void 0 : _action$payload22.sortBy) || initTaskProcessingListSort.by,\n            direction: ((_action$payload23 = action.payload) === null || _action$payload23 === void 0 ? void 0 : _action$payload23.dir) || initTaskProcessingListSort.direction\n          },\n          filters: isNonfilterTypeCalls ? stateTaskProcessingList.filters : ((_action$payload24 = action.payload) === null || _action$payload24 === void 0 ? void 0 : (_action$payload24$ite = _action$payload24.items) === null || _action$payload24$ite === void 0 ? void 0 : _action$payload24$ite.filterValue) ? (_action$payload25 = action.payload) === null || _action$payload25 === void 0 ? void 0 : (_action$payload25$ite = _action$payload25.items) === null || _action$payload25$ite === void 0 ? void 0 : _action$payload25$ite.filterValue : {},\n          appliedFilters: utils.generic.isValidObject((_action$payload26 = action.payload) === null || _action$payload26 === void 0 ? void 0 : _action$payload26.appliedFilters) ? (_action$payload27 = action.payload) === null || _action$payload27 === void 0 ? void 0 : _action$payload27.appliedFilters : initTaskProcessingList.appliedFilters,\n          selected: ((_action$payload28 = action.payload) === null || _action$payload28 === void 0 ? void 0 : _action$payload28.navigation) ? prevTaskProcessingListSelected : [],\n          taskType: ((_action$payload29 = action.payload) === null || _action$payload29 === void 0 ? void 0 : _action$payload29.taskType) || initTaskProcessingList.taskType,\n          isloadingFilters: isNonfilterTypeCalls ? stateTaskProcessingList.isloadingFilters : false\n        })\n      });\n\n    case 'CLAIMS_TASKS_PROCESSING_LIST_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: (_action$payload30 = action.payload) === null || _action$payload30 === void 0 ? void 0 : _action$payload30.error,\n        tasksTab: _objectSpread(_objectSpread({}, state.tasksTab), {}, {\n          items: ((_action$payload31 = action.payload) === null || _action$payload31 === void 0 ? void 0 : _action$payload31.isNonFilterTypeCall) ? initialState.tasksTab.items : state.tasksTab.items,\n          isloadingFilters: ((_action$payload32 = action.payload) === null || _action$payload32 === void 0 ? void 0 : _action$payload32.isNonFilterTypeCall) ? state.processing.isloadingFilters : false,\n          isTableLoading: false\n        })\n      });\n\n    case 'CLAIMS_TASK_DASHBOARD_DETAIL_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        taskDashboard: _objectSpread(_objectSpread({}, state.taskDashboard), {}, {\n          isLoading: true\n        })\n      });\n\n    case 'CLAIMS_TASK_DASHBOARD_DETAIL_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        taskDashboard: _objectSpread(_objectSpread({}, state.taskDashboard), {}, {\n          taskDetails: {\n            items: action.payload.items,\n            query: action.payload.query\n          },\n          isLoading: false\n        }),\n        tasksProcessing: _objectSpread(_objectSpread({}, state.tasksProcessing), {}, {\n          selected: action.payload.items || []\n        })\n      });\n\n    case 'CLAIMS_TASK_DASHBOARD_DETAIL_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload,\n        taskDashboard: _objectSpread(_objectSpread({}, state.taskDashboard), {}, {\n          isLoading: false\n        })\n      });\n\n    case 'CLAIMS_TASK_DASHBOARD_DETAIL_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        taskDashboard: _objectSpread(_objectSpread({}, state.taskDashboard), {}, {\n          taskDetails: initialState.taskDashboard.taskDetails\n        })\n      });\n\n    case 'CURRENCY_PURCHASED_VALUE_GET_SUCCESS':\n      var selectedOption = (_action$payload33 = action.payload) === null || _action$payload33 === void 0 ? void 0 : _action$payload33.data;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        taskDashboard: _objectSpread(_objectSpread({}, state.taskDashboard), {}, {\n          purchasedCurrencyRequired: selectedOption\n        })\n      });\n\n    case 'CLAIMS_TASK_PRIORITY_POST_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimsRefData: action.payload\n      });\n\n    case 'CLAIMS_TASKS_PROCESSING_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasksProcessing: _objectSpread(_objectSpread({}, state.tasksProcessing), {}, {\n          items: initialState.tasksProcessing.items\n        })\n      });\n\n    case 'CLAIMS_GET_RFI_HISTORY_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        rfiHistory: {\n          data: [],\n          isLoading: true\n        }\n      });\n\n    case 'CLAIMS_GET_RFI_HISTORY_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        rfiHistory: {\n          data: action.payload,\n          isLoading: false\n        }\n      });\n\n    case 'CLAIMS_GET_RFI_HISTORY_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        rfiHistory: initialState.rfiHistory,\n        error: action.payload\n      });\n\n    case 'CLAIMS_TASK_SANCTIONS_CHECK_POST_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        sanctionsCheck: action.payload,\n        loading: false\n      });\n\n    case 'CLAIM_PROCESSING_TASK_TYPE_SELECTED':\n      var claimProcessingTaskTypeSelected = action.payload;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasksProcessing: _objectSpread(_objectSpread({}, state.tasksProcessing), {}, {\n          selectedTaskType: claimProcessingTaskTypeSelected\n        })\n      });\n\n    case 'CLAIM_PROCESSING_PREVIOUS_TASK_TYPE_SELECTED':\n      var claimProcessingPreviousTaskTypeSelected = action.payload;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasksTab: _objectSpread(_objectSpread({}, state.tasksTab), {}, {\n          previousTaskType: claimProcessingPreviousTaskTypeSelected\n        })\n      });\n\n    case 'CLAIMS_TASK_PROCESSING_GET_CHECKLIST_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        taskDashboard: _objectSpread(_objectSpread({}, state.taskDashboard), {}, {\n          checkList: action.payload\n        })\n      });\n\n    case 'CLAIMS_TASK_PROCESSING_GET_NEXT_TASKLIST_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        taskDashboard: _objectSpread(_objectSpread({}, state.taskDashboard), {}, {\n          nextActions: action.payload\n        })\n      });\n\n    case 'CLAIMS_TASK_PROCESSING_SET_CHECKLIST_CHANGES':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        taskDashboard: _objectSpread(_objectSpread({}, state.taskDashboard), {}, {\n          checkListChanges: action.payload\n        })\n      });\n\n    case 'CLAIMS_TASK_PROCESSING_SAVE_CHECKLIST_ACTIONS_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        taskDashboard: _objectSpread(_objectSpread({}, state.taskDashboard), {}, {\n          checkListChangesPushed: action.payload\n        })\n      });\n\n    case 'CLAIMS_TASK_PROCESSING_SAVE_NEXT_ACTION_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        taskDashboard: _objectSpread(_objectSpread({}, state.taskDashboard), {}, {\n          nextActionChangesPushed: action.payload\n        })\n      });\n\n    case 'CLAIMS_TASK_PROCESSING_RESET_CHECKLIST_DATA':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        taskDashboard: _objectSpread({}, initialState.taskDashboard)\n      });\n\n    case 'CLAIMREF_TASKS_REQUEST':\n      var refTaskReqType = action.payload.appliedParams.newRequestType;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        refTabTasks: _objectSpread(_objectSpread({}, state.refTabTasks), refTaskReqType === constants.CLAIM_PROCESSING_REQ_TYPES.filter ? {\n          isloadingFilters: true\n        } : {})\n      });\n\n    case 'CLAIMREF_TASKS_SUCCESS':\n      var _action$payload34 = action.payload,\n          refTaskReqstType = _action$payload34.requestType,\n          claimRefSortBy = _action$payload34.sortBy,\n          claimRefDir = _action$payload34.dir,\n          claimRefQuery = _action$payload34.query,\n          _action$payload34$ite = _action$payload34.items,\n          refTasksFiltersValues = _action$payload34$ite.filterValue,\n          refTasksSearchValues = _action$payload34$ite.searchValue,\n          refTasksPagination = _action$payload34.pagination,\n          refTasksAppliedFilters = _action$payload34.appliedFilters;\n      var initRefTabTasks = initialState.refTabTasks;\n      var initRefTabTasksSort = initRefTabTasks.sort;\n      var stateRefTabTasks = state.refTabTasks;\n      var isNonfilterTypeReq = refTaskReqstType !== constants.CLAIM_PROCESSING_REQ_TYPES.filter;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        refTabTasks: _objectSpread(_objectSpread(_objectSpread({}, stateRefTabTasks), isNonfilterTypeReq ? {\n          itemsTotal: get(refTasksPagination, 'totalElements', 0),\n          page: get(refTasksPagination, 'page', 0) + 1,\n          pageSize: get(refTasksPagination, 'size', initRefTabTasks.pageSize),\n          pageTotal: get(refTasksPagination, 'totalPages', 0),\n          query: get(refTasksPagination, 'searchBy') || claimRefQuery || '',\n          items: refTasksSearchValues || []\n        } : {}), {}, {\n          sort: {\n            by: claimRefSortBy || initRefTabTasksSort.by,\n            direction: claimRefDir || initRefTabTasksSort.direction\n          },\n          filters: isNonfilterTypeReq ? stateRefTabTasks.filters : refTasksFiltersValues ? refTasksFiltersValues : {},\n          appliedFilters: (refTasksAppliedFilters === null || refTasksAppliedFilters === void 0 ? void 0 : refTasksAppliedFilters.length) ? refTasksAppliedFilters : initRefTabTasks.appliedFilters\n        }),\n        loading: false\n      });\n\n    case 'CLAIMREF_TASKS_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload,\n        refTabTasks: _objectSpread(_objectSpread({}, state.refTabTasks), {}, {\n          isloadingFilters: false\n        })\n      });\n\n    case 'CLAIMS_GET_SUCCESS':\n      var claimsPagination = action.payload.pagination || {};\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claims: _objectSpread(_objectSpread({}, state.claims), {}, {\n          itemsTotal: get(claimsPagination, 'totalElements', 0),\n          page: get(claimsPagination, 'page', 0),\n          pageSize: get(claimsPagination, 'size', initialState.claims.pageSize),\n          pageTotal: get(claimsPagination, 'totalPages', 0),\n          query: get(claimsPagination, 'query') || '',\n          items: action.payload.items || [],\n          searchBy: get(claimsPagination, 'searchBy') || initialState.claims.searchBy,\n          sort: _objectSpread({}, state.claims.sort)\n        })\n      });\n\n    case 'CLAIMS_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claims: initialState.claims\n      });\n\n    case 'CLAIMS_POLICIES_GET_REQUEST':\n      var newPolicyRequestType = action.payload.appliedParams.newRequestType;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        policies: _objectSpread(_objectSpread({}, state.policies), newPolicyRequestType === constants.CLAIM_POLICY_SEARCH_REQ_TYPES.filter ? {\n          isloadingFilters: true\n        } : {\n          isloadingTable: true\n        })\n      });\n\n    case 'CLAIMS_POLICIES_GET_SUCCESS':\n      var _action$payload35 = action.payload,\n          _action$payload35$ite = _action$payload35.items,\n          policiesFiltersValues = _action$payload35$ite.filterValue,\n          policiesSearchValues = _action$payload35$ite.searchValue,\n          policiesPagination = _action$payload35.pagination;\n      var policyRequestType = action.payload.requestType;\n      var isPolicyNonfilterTypCall = policyRequestType !== constants.CLAIM_POLICY_SEARCH_REQ_TYPES.filter;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        policies: _objectSpread(_objectSpread(_objectSpread({}, state.policies), isPolicyNonfilterTypCall ? {\n          items: _toConsumableArray(utils.generic.isValidArray(policiesSearchValues) ? policiesSearchValues : []),\n          itemsTotal: get(action.payload.pagination, 'totalElements', 0),\n          page: get(policiesPagination, 'page', 0),\n          pageSize: policiesPagination !== 0 ? policiesPagination.size : initialState.policies.pageSize,\n          pageTotal: get(policiesPagination, 'totalPages', 0),\n          query: get(policiesPagination, 'searchBy') || '',\n          searchBy: get(action.payload.pagination, 'searchBy') || '',\n          isloadingTable: false\n        } : {}), {}, {\n          sort: _objectSpread({}, state.policies.sort),\n          filters: !isPolicyNonfilterTypCall ? policiesFiltersValues ? policiesFiltersValues : _objectSpread({}, state.policies.filters) : _objectSpread({}, state.policies.filters),\n          isloadingFilters: isPolicyNonfilterTypCall ? state.policies.isloadingFilters : false\n        })\n      });\n\n    case 'CLAIMS_POLICIES_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload.error,\n        policies: _objectSpread(_objectSpread({}, state.policies), {}, {\n          isloadingTable: false,\n          isloadingFilters: action.payload.isNonFilterTypeCall ? state.policies.isloadingFilters : false\n        })\n      });\n\n    case 'CLAIMS_POLICIES_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        policies: initialState.policies\n      });\n\n    case 'CLAIMS_COMPLEXITY_INSURED_GET_SUCCESS':\n      var claimsInsuredPagination = action.payload.pagination || {};\n      return _objectSpread(_objectSpread({}, state), {}, {\n        insured: _objectSpread(_objectSpread({}, state.insured), {}, {\n          items: action.payload.items || [],\n          itemsTotal: get(claimsInsuredPagination, 'totalElements', 0),\n          page: get(claimsInsuredPagination, 'page', 0),\n          pageSize: get(claimsInsuredPagination, 'size', initialState.insured.pageSize),\n          pageTotal: get(claimsInsuredPagination, 'totalPages', 0),\n          query: get(claimsInsuredPagination, 'query') || ''\n        })\n      });\n\n    case 'CLAIMS_POLICIES_RESET_TEMP':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        policyData: initialState.policyData,\n        policyInformation: initialState.policyInformation\n      });\n\n    case 'CLAIMS_POLICIES_REFERENCE':\n      var policyTypeCheck = action.payload.policyType;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        policyData: action.payload,\n        sectionEnabledUG: constants.CLAIM_SECTION_ENABLED_UG.indexOf(policyTypeCheck) > -1 || false,\n        claimDetailInformationSuccess: initialState.claimDetailInformationSuccess\n      });\n\n    case 'CLAIMS_POLICY_SECTIONS_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isPolicySectionsLoading: true\n      });\n\n    case 'CLAIMS_POLICY_SECTIONS_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        policySections: action.payload,\n        isPolicySectionsLoading: false\n      });\n\n    case 'CLAIMS_POLICY_SECTIONS_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload,\n        isPolicySectionsLoading: false\n      });\n\n    case 'CLAIMS_SETTLEMENT_CURRENCY_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        settlementCurrencies: action.payload\n      });\n\n    case 'LOSS_INFORMATION_POST_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        lossInformation: action.payload,\n        isLossSubmitted: true,\n        isLossInfoLoading: false\n      });\n\n    case 'RESET_LOSS_SUBMISSION':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLossSubmitted: false\n      });\n\n    case 'GET_LOSS_INFORMATION_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        lossInformation: action.payload,\n        isLossInfoLoading: false\n      });\n\n    case 'CLAIMS_POST_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimsInformation: action.payload\n      });\n\n    case 'CLAIMS_INSURED_REMOVE_SUCCESS':\n      var checkedInsured = Object.keys(Object.fromEntries(Object.entries(action.payload).filter(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            key = _ref2[0],\n            value = _ref2[1];\n\n        return value;\n      })));\n      return _objectSpread(_objectSpread({}, state), {}, {\n        insured: _objectSpread(_objectSpread({}, state.insured), {}, {\n          items: state.insured.items.filter(function (item) {\n            return item.title !== checkedInsured[0];\n          })\n        })\n      });\n\n    case 'CLAIMS_SELECT_INTEREST_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        interest: _objectSpread(_objectSpread({}, state.interest), {}, {\n          isLoading: true\n        })\n      });\n\n    case 'CLAIMS_SELECT_INTEREST_GET_SUCCESS':\n      var payload = action.payload;\n      var defaultValue = payload.length === 1 ? payload[0].code : '';\n      return _objectSpread(_objectSpread({}, state), {}, {\n        interest: _objectSpread(_objectSpread({}, state.interest), {}, {\n          items: payload,\n          selectedInterest: defaultValue,\n          isLoading: false\n        })\n      });\n\n    case 'CLAIMS_SELECT_INTEREST_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload,\n        interest: _objectSpread(_objectSpread({}, state.interest), {}, {\n          isLoading: false\n        })\n      });\n\n    case 'CLAIMS_SELECT_INTEREST_VALUE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        interest: _objectSpread(_objectSpread({}, state.interest), {}, {\n          selectedInterest: action.payload\n        })\n      });\n\n    case 'CLAIMS_DETAILS_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        allClaimDetails: action.payload\n      });\n\n    case 'UPDATE_CLAIMS_DETAILS_INFORMATION':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimDetailInformation: action.payload\n      });\n\n    case 'CLAIMS_DETAILS_INFORMATION_POST_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimDetailInformationSuccess: action.payload,\n        claimsInformation: action.payload\n      });\n\n    case 'CLAIMS_DETAILS_INFORMATION_UPDATE_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimDetailInformationSuccess: action.payload,\n        claimsInformation: _objectSpread(_objectSpread({}, state.claimsInformation), action.payload)\n      });\n\n    case 'CLAIMS_PRIORITY_LEVELS_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        prioritiesLoaded: false,\n        isPrioritiesLoading: true\n      });\n\n    case 'CLAIMS_PRIORITY_LEVELS_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        priorities: action.payload,\n        prioritiesLoaded: true,\n        isPrioritiesLoading: false\n      });\n\n    case 'CLAIMS_PRIORITY_LEVELS_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload,\n        isPrioritiesLoading: false,\n        prioritiesLoaded: true\n      });\n\n    case 'CLAIMS_REOPEN_TASK_LIST_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        reopenTaskList: action.payload\n      });\n\n    case 'CLAIMS_BE_ADJUSTER_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        beAdjuster: _objectSpread(_objectSpread({}, state.beAdjuster), {}, {\n          items: action.payload\n        })\n      });\n\n    case 'SET_CLAIMS_BE_ADJUSTER_VALUE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        beAdjuster: _objectSpread(_objectSpread({}, state.beAdjuster), {}, {\n          selectedbeAdjuster: action.payload\n        })\n      });\n\n    case 'CLAIMS_PREVIEW_INFORMATION_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isClaimsInfoLoading: true\n      });\n\n    case 'CLAIMS_BASIC_INFORMATION_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isClaimsInfoLoading: true\n      });\n\n    case 'CLAIMS_PREVIEW_INFORMATION_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimsInformation: action.payload,\n        isClaimsInfoLoading: false\n      });\n\n    case 'CLAIMS_SELECTED_INFORMATION_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selectedClaimsDetails: action.payload\n      });\n\n    case 'CLAIMS_BASIC_INFORMATION_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimsInformation: action.payload,\n        isClaimsInfoLoading: false\n      });\n\n    case 'CLAIMS_PREVIEW_INFORMATION_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload,\n        isClaimsInfoLoading: false\n      });\n\n    case 'CLAIMS_BASIC_INFORMATION_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload,\n        isClaimsInfoLoading: false\n      });\n\n    case 'SELECT_CLAIMS_COMPLEXITY':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityPolicies: _objectSpread(_objectSpread({}, state.complexityPolicies), {}, {\n          selectedComplexityPolicies: action.payload || []\n        })\n      });\n\n    case 'CLAIMS_COMPLEXITY_GET_SUCCESS':\n      var complexityPoliciesPagination = action.payload.pagination || {};\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityPolicies: _objectSpread(_objectSpread({}, state.complexityPolicies), {}, {\n          items: action.payload.data || [],\n          itemsTotal: get(complexityPoliciesPagination, 'totalElements', 0),\n          page: get(complexityPoliciesPagination, 'page', 1),\n          pageSize: get(complexityPoliciesPagination, 'size', initialState.complexityPolicies.pageSize),\n          pageTotal: get(complexityPoliciesPagination, 'totalPages', 0),\n          query: get(complexityPoliciesPagination, 'query') || ''\n        })\n      });\n\n    case 'CLAIMS_COMPLEXITY_FLAGGED_GET_SUCCESS':\n      var complexityPoliciesFlaggedPagination = action.payload.pagination || {};\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityPoliciesFlagged: _objectSpread(_objectSpread({}, state.complexityPoliciesFlagged), {}, {\n          items: action.payload.items || [],\n          itemsTotal: get(complexityPoliciesFlaggedPagination, 'totalElements', 0),\n          page: get(complexityPoliciesFlaggedPagination, 'page', 1),\n          pageSize: get(complexityPoliciesFlaggedPagination, 'size', initialState.complexityPoliciesFlagged.pageSize),\n          pageTotal: get(complexityPoliciesFlaggedPagination, 'totalPages', 0),\n          query: get(complexityPoliciesFlaggedPagination, 'query') || ''\n        })\n      });\n\n    case 'CLAIMS_DETAILS_INFORMATION_SUBMIT_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimsInformation: _objectSpread(_objectSpread({}, state.claimsInformation), {}, {\n          claimStatus: action.payload.claimStatus,\n          submitStatus: action.payload.responseData\n        })\n      });\n\n    case 'ADD_NEW_CLAIM_FOR_LOSS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimantNames: initialState.claimantNames,\n        claimsInformation: initialState.claimsInformation,\n        policyData: initialState.policyData,\n        policyInformation: initialState.policyInformation,\n        interest: initialState.interest,\n        policySections: initialState.underWritingGroups,\n        underWritingGroups: initialState.underWritingGroups,\n        allClaimDetails: initialState.allClaimDetails,\n        beAdjuster: initialState.beAdjuster,\n        claimDetailInformationSuccess: initialState.claimDetailInformationSuccess,\n        claimData: initialState.claimData\n      });\n\n    case 'RESET_LOSS_DATA':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        lossInformation: initialState.lossInformation\n      });\n\n    case 'RESET_CLAIMS_INFORMATION':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimsInformation: initialState.claimsInformation\n      });\n\n    case 'RESET_LOSS_POLICY_CLAIM_DATA':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimantNames: initialState.claimantNames,\n        claimsInformation: initialState.claimsInformation,\n        policyData: initialState.policyData,\n        policyInformation: initialState.policyInformation,\n        interest: initialState.interest,\n        policySections: initialState.underWritingGroups,\n        underWritingGroups: initialState.underWritingGroups,\n        allClaimDetails: initialState.allClaimDetails,\n        beAdjuster: initialState.beAdjuster,\n        claimDetailInformationSuccess: initialState.claimDetailInformationSuccess,\n        claimData: initialState.claimData,\n        lossInformation: initialState.lossInformation,\n        linkPolicies: initialState.linkPolicies,\n        policies: initialState.policies\n      });\n\n    case 'UPDATE_CLAIMS_LOSS_FILTERS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimLossSearchFilters: action.payload\n      });\n\n    case 'CLAIMS_INSURED_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        insured: initialState.insured\n      });\n\n    case 'RESET_CLAIMS_LOSS_FILTERS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimLossSearchFilters: initialState.claimLossSearchFilters\n      });\n\n    case 'CLAIMS_LOSS_FILTERS_POST_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claims: _objectSpread(_objectSpread({}, state.claims), {}, {\n          filters: action.payload\n        })\n      });\n\n    case 'CLAIMS_COMPLEXITY_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityPolicies: initialState.complexityPolicies\n      });\n\n    case 'CHECKED_COMPLEX_ADD_POLICY':\n      var boolCheck = false;\n      var complexPoliciesData = state.complexityPolicies.selectedComplexityPolicies.map(function (item, idx) {\n        if (item.id === action.payload.id) {\n          item.checkedType = !item.checkedType;\n          boolCheck = true;\n        }\n\n        return item;\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityPolicies: _objectSpread(_objectSpread({}, state.complexityPolicies), {}, {\n          selectedComplexityPolicies: boolCheck ? complexPoliciesData : complexPoliciesData.length > 0 ? [].concat(_toConsumableArray(complexPoliciesData), [action.payload]) : [action.payload]\n        })\n      });\n\n    case 'CHECKED_COMPLEX_ADD_INSURED':\n      var insuredBoolCheck = false;\n      var complexInsuredData = state.complexInsured.selectedComplexityInsured.map(function (item, idx) {\n        if (item.id === action.payload.id) {\n          item.checkedType = !item.checkedType;\n          insuredBoolCheck = true;\n        }\n\n        return item;\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexInsured: _objectSpread(_objectSpread({}, state.complexInsured), {}, {\n          selectedComplexityInsured: insuredBoolCheck ? complexInsuredData : complexInsuredData.length > 0 ? [].concat(_toConsumableArray(complexInsuredData), [action.payload]) : [action.payload]\n        })\n      });\n\n    case 'CLAIMS_SAVE_COMPLEXITY_POLICY_POST_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityPolicies: _objectSpread(_objectSpread({}, state.complexityPolicies), {}, {\n          savedComplexPolicies: action.payload,\n          checkedComplexity: true\n        })\n      });\n\n    case 'CLAIMS_SAVE_COMPLEXITY_INSURED_POST_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexInsured: _objectSpread(_objectSpread({}, state.complexInsured), {}, {\n          savedComplexInsured: action.payload,\n          checkedComplexity: true\n        })\n      });\n\n    case 'SAVED_POLICIES_DATA':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        checkedComplexAddPolicies: [].concat(_toConsumableArray(state.checkedComplexAddPolicies), _toConsumableArray(action.payload))\n      });\n\n    case 'CLAIM_SET_DATA':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimData: action.payload\n      });\n\n    case 'CLAIM_RESET_DATA':\n      return _objectSpread({}, initialState);\n\n    case 'CLAIMS_SET_STEPPER_CONTROL':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimsStepper: action.payload\n      });\n\n    case 'CLAIMS_COMPLEXITY_TAB_SET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityManagement: _objectSpread(_objectSpread({}, initialState.complexityManagement), {}, {\n          activeTab: action.payload\n        }),\n        complexityBasisValues: _objectSpread({}, initialState.complexityBasisValues),\n        complexityReferralValues: _objectSpread({}, initialState.complexityReferralValues)\n      });\n\n    case 'CLAIMS_COMPLEXITY_DIVISION_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityManagement: _objectSpread(_objectSpread({}, state.complexityManagement), {}, {\n          division: action.payload,\n          divisionChanges: initialState.complexityManagement.divisionChanges\n        })\n      });\n\n    case 'CLAIMS_COMPLEXITY_DIVISION_SET_CHANGE':\n      var incomingFieldName = Object.keys(action.payload)[0];\n      var falseStateChange = Object.keys(state.complexityManagement.divisionChanges).indexOf(incomingFieldName) > -1;\n      var applicablePayload = falseStateChange ? {} : action.payload;\n\n      var applicableDivisionChanges = _objectSpread({}, state.complexityManagement.divisionChanges);\n\n      if (falseStateChange) {\n        delete applicableDivisionChanges[incomingFieldName];\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityManagement: _objectSpread(_objectSpread({}, state.complexityManagement), {}, {\n          divisionChanges: _objectSpread(_objectSpread({}, applicableDivisionChanges), applicablePayload)\n        })\n      });\n\n    case 'CLAIMS_COMPLEXITY_DIVISION_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityManagement: _objectSpread(_objectSpread({}, state.complexityManagement), {}, {\n          divisionChanges: initialState.complexityManagement.divisionChanges\n        })\n      });\n\n    case 'CLAIMS_COMPLEXITY_DIVISION_SAVE_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityManagement: _objectSpread(_objectSpread({}, state.complexityManagement), {}, {\n          divisionChanges: initialState.complexityManagement.divisionChanges\n        })\n      });\n\n    case 'CLAIMS_COMPLEXITY_SET_COMPLEX_VALUE_ID':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityManagement: _objectSpread(_objectSpread({}, state.complexityManagement), {}, {\n          complexityBasisValueId: action.payload\n        })\n      });\n\n    case 'CLAIMS_COMPLEXITY_BASIS_VALUE_GET_SUCCESS':\n      var complexityBasisValuePagination = action.payload.pagination || {};\n      var initialComplexityBasisSort = initialState.complexityBasisValues.sort;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityBasisValues: {\n          type: action.payload.type || '',\n          items: action.payload.data || [],\n          itemsTotal: get(complexityBasisValuePagination, 'totalElements', 0),\n          page: get(complexityBasisValuePagination, 'page', 1),\n          pageSize: get(complexityBasisValuePagination, 'size', initialState.complexityBasisValues.pageSize),\n          pageTotal: get(complexityBasisValuePagination, 'totalPages', 0),\n          query: get(complexityBasisValuePagination, 'query') || '',\n          sort: {\n            by: get(complexityBasisValuePagination, 'orderBy', initialComplexityBasisSort.by),\n            direction: get(complexityBasisValuePagination, 'direction', initialComplexityBasisSort.direction)\n          },\n          loaded: true\n        },\n        complexityManagement: _objectSpread(_objectSpread({}, initialState.complexityManagement), {}, {\n          activeTab: state.complexityManagement.activeTab,\n          complexityBasisValueId: state.complexityManagement.complexityBasisValueId\n        })\n      });\n\n    case 'CLAIMS_COMPLEXITY_BASIS_VALUE_GET_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityBasisValues: _objectSpread({}, initialState.complexityBasisValues)\n      });\n\n    case 'CLAIMS_ADD_COMPLEXITY_VALUES_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityManagement: _objectSpread(_objectSpread({}, initialState.complexityManagement), {}, {\n          activeTab: state.complexityManagement.activeTab,\n          complexityBasisValueId: state.complexityManagement.complexityBasisValueId\n        })\n      });\n\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_COMPLEX_ID_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityManagement: _objectSpread(_objectSpread({}, state.complexityManagement), {}, {\n          complexityBasisDivisionMatrix: initialState.complexityManagement.complexityBasisDivisionMatrix,\n          complexityBasisDivisionMatrixChanges: initialState.complexityManagement.complexityBasisDivisionMatrixChanges\n        })\n      });\n\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_COMPLEX_ID_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityManagement: _objectSpread(_objectSpread({}, state.complexityManagement), {}, {\n          complexityBasisDivisionMatrix: action.payload,\n          complexityBasisDivisionMatrixChanges: initialState.complexityManagement.complexityBasisDivisionMatrixChanges\n        })\n      });\n\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_COMPLEX_ID_SET_CHANGE':\n      var newComplexityDivisionFieldName = Object.keys(action.payload)[0];\n      var falseComplexityDivisionMatrixFieldChange = Object.keys(state.complexityManagement.complexityBasisDivisionMatrixChanges).indexOf(newComplexityDivisionFieldName) > -1;\n      var newComplexityDivisionPayload = falseComplexityDivisionMatrixFieldChange ? {} : action.payload;\n\n      var newComplexityDivisionChanges = _objectSpread({}, state.complexityManagement.complexityBasisDivisionMatrixChanges);\n\n      if (falseComplexityDivisionMatrixFieldChange) {\n        delete newComplexityDivisionChanges[newComplexityDivisionFieldName];\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityManagement: _objectSpread(_objectSpread({}, state.complexityManagement), {}, {\n          complexityBasisDivisionMatrixChanges: _objectSpread(_objectSpread({}, newComplexityDivisionChanges), newComplexityDivisionPayload)\n        })\n      });\n\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_COMPLEX_ID_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityManagement: _objectSpread(_objectSpread({}, state.complexityManagement), {}, {\n          complexityBasisDivisionMatrixChanges: initialState.complexityManagement.complexityBasisDivisionMatrixChanges\n        })\n      });\n\n    case 'CLAIMS_REMOVE_COMPLEXITY_VALUES_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityManagement: _objectSpread(_objectSpread({}, initialState.complexityManagement), {}, {\n          activeTab: state.complexityManagement.activeTab\n        })\n      });\n\n    case 'CLAIMS_COMPLEXITY_SET_REFERRAL_VALUE_ID':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityManagement: _objectSpread(_objectSpread({}, state.complexityManagement), {}, {\n          complexityReferralValueId: action.payload\n        })\n      });\n\n    case 'CLAIMS_COMPLEXITY_REFERRAL_VALUES_GET_SUCCESS':\n      var complexityReferralValuesPagination = action.payload.pagination || {};\n      var initialComplexityReferralSort = initialState.complexityReferralValues.sort;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityReferralValues: {\n          items: action.payload.data || [],\n          itemsTotal: get(complexityReferralValuesPagination, 'totalElements', 0),\n          page: get(complexityReferralValuesPagination, 'page', 1),\n          pageSize: get(complexityReferralValuesPagination, 'size', initialState.complexityReferralValues.pageSize),\n          pageTotal: get(complexityReferralValuesPagination, 'totalPages', 0),\n          query: get(complexityReferralValuesPagination, 'query') || '',\n          sort: {\n            by: get(complexityReferralValuesPagination, 'orderBy', initialComplexityReferralSort.by),\n            direction: get(complexityReferralValuesPagination, 'direction', initialComplexityReferralSort.direction)\n          }\n        },\n        complexityManagement: _objectSpread(_objectSpread({}, initialState.complexityManagement), {}, {\n          activeTab: state.complexityManagement.activeTab,\n          complexityReferralValueId: state.complexityManagement.complexityReferralValueId\n        })\n      });\n\n    case 'CLAIMS_COMPLEXITY_ADD_REFERRAL_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityManagement: _objectSpread(_objectSpread({}, initialState.complexityManagement), {}, {\n          activeTab: state.complexityManagement.activeTab,\n          complexityReferralValueId: state.complexityManagement.complexityReferralValueId\n        })\n      });\n\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_REFERRAL_ID_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityManagement: _objectSpread(_objectSpread({}, state.complexityManagement), {}, {\n          complexityReferralDivisionMatrix: initialState.complexityManagement.complexityReferralDivisionMatrix,\n          complexityReferralDivisionMatrixChanges: initialState.complexityManagement.complexityReferralDivisionMatrixChanges\n        })\n      });\n\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_REFERRAL_ID_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityManagement: _objectSpread(_objectSpread({}, state.complexityManagement), {}, {\n          complexityReferralDivisionMatrix: action.payload,\n          complexityReferralDivisionMatrixChanges: initialState.complexityManagement.complexityReferralDivisionMatrixChanges\n        })\n      });\n\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_REFERRAL_ID_SET_CHANGE':\n      var newReferralDivisionFieldName = Object.keys(action.payload)[0];\n      var falseReferralDivisionMatrixFieldChange = Object.keys(state.complexityManagement.complexityReferralDivisionMatrixChanges).indexOf(newReferralDivisionFieldName) > -1;\n      var newReferralDivisionPayload = falseReferralDivisionMatrixFieldChange ? {} : action.payload;\n\n      var newReferralDivisionChanges = _objectSpread({}, state.complexityManagement.complexityReferralDivisionMatrixChanges);\n\n      if (falseReferralDivisionMatrixFieldChange) {\n        delete newReferralDivisionChanges[newReferralDivisionFieldName];\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityManagement: _objectSpread(_objectSpread({}, state.complexityManagement), {}, {\n          complexityReferralDivisionMatrixChanges: _objectSpread(_objectSpread({}, newReferralDivisionChanges), newReferralDivisionPayload)\n        })\n      });\n\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_REFERRAL_ID_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityManagement: _objectSpread(_objectSpread({}, state.complexityManagement), {}, {\n          complexityReferralDivisionMatrixChanges: initialState.complexityManagement.complexityReferralDivisionMatrixChanges\n        })\n      });\n\n    case 'CLAIMS_REMOVE_REFERRAL_VALUES_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityManagement: _objectSpread(_objectSpread({}, initialState.complexityManagement), {}, {\n          activeTab: state.complexityManagement.activeTab\n        })\n      });\n\n    case 'UPDATE_CLAIMS_PROCESSING_FILTERS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimsProcessingData: action.payload\n      });\n\n    case 'USER_GET_USERS_BY_ORG_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isClaimsAssignedToUsersLoading: true\n      });\n\n    case 'USER_GET_USERS_BY_ORG_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isClaimsAssignedToUsersLoading: false,\n        error: action.payload\n      });\n\n    case 'USER_GET_USERS_BY_ORG_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimsAssignedToUsers: _objectSpread(_objectSpread({}, action.payload), {}, {\n          loaded: true\n        }),\n        isClaimsAssignedToUsersLoading: false\n      });\n\n    case 'CLAIMS_ASSIGNED_TO_USERS_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimsAssignedToUsers: _objectSpread({}, initialState.claimsAssignedToUsers)\n      });\n\n    case 'RESET_CLAIMS_PROCESSING_FILTERS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimsProcessingData: initialState.claimsProcessingData\n      });\n\n    case 'CLAIM_UPDATE_COMPLEX_STATUS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityPolicies: _objectSpread(_objectSpread({}, state.complexityPolicies), action.payload)\n      });\n\n    case 'CLAIMS_COMPLEXITY_SEARCH_POST_SUCCESS':\n      var complexityInsuredPagination = action.payload.pagination || {};\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexInsured: _objectSpread(_objectSpread({}, state.complexInsured), {}, {\n          items: action.payload.data || [],\n          itemsTotal: get(complexityInsuredPagination, 'totalElements', 0),\n          page: get(complexityInsuredPagination, 'page', 1),\n          pageSize: get(complexityInsuredPagination, 'size', initialState.complexInsured.pageSize),\n          pageTotal: get(complexityInsuredPagination, 'totalPages', 0),\n          query: get(complexityInsuredPagination, 'query') || ''\n        })\n      });\n\n    case 'CLAIMS_POPUP_INSURED_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexInsured: initialState.complexInsured\n      });\n\n    case 'SAVED_INSURED_DATA':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        checkedComplexAddInsured: [].concat(_toConsumableArray(state.checkedComplexAddInsured), _toConsumableArray(action.payload))\n      });\n\n    case 'CLAIMS_COMPLEXITY_VALUES_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityValues: action.payload,\n        complexityValuesLoaded: true\n      });\n\n    case 'CLAIM_COMPLEXITY_TYPES_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        complexityTypes: action.payload,\n        complexityTypesLoaded: true\n      });\n\n    case 'CLAIMS_REFERRAL_VALUES_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        referralValues: action.payload\n      });\n\n    case 'CLAIMS_REFERRAL_RESPONSE_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        referralResponse: action.payload\n      });\n\n    case 'CLAIMS_QUERY_CODE_LIST_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        queryCode: action.payload\n      });\n\n    case 'CLAIMS_SET_PRIORITY_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        processing: _objectSpread(_objectSpread({}, state.processing), {}, {\n          items: state.processing.items.map(function (claim) {\n            var _claim$claimID, _action$payload$claim2;\n\n            var newPriorityName = action.payload.priorityName;\n            var isSameClaimId = ((_claim$claimID = claim.claimID) === null || _claim$claimID === void 0 ? void 0 : _claim$claimID.toString()) === ((_action$payload$claim2 = action.payload.claimID) === null || _action$payload$claim2 === void 0 ? void 0 : _action$payload$claim2.toString());\n\n            if (newPriorityName && isSameClaimId) {\n              return _objectSpread(_objectSpread({}, claim), {}, {\n                priority: newPriorityName\n              });\n            }\n\n            return claim;\n          })\n        })\n      });\n\n    case 'GET_ASSOCIATED_TASK_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasksProcessing: _objectSpread(_objectSpread({}, state.tasksProcessing), {}, {\n          associatedTaskDetails: action.payload\n        })\n      });\n\n    case 'TASKS_CLAIMS_REPORTING_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasksClaimsReporting: {\n          data: initialState.tasksClaimsReporting.data,\n          isDataLoading: true\n        }\n      });\n\n    case 'TASKS_CLAIMS_REPORTING_GET_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tasksClaimsReporting: {\n          data: action.payload,\n          isDataLoading: false\n        }\n      });\n\n    case 'TASKS_CLAIMS_REPORTING_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload,\n        tasksClaimsReporting: {\n          data: initialState.tasksClaimsReporting.data,\n          isDataLoading: false\n        }\n      });\n\n    case 'PROCESSING_NAVIGATION':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        processingNavigation: _objectSpread(_objectSpread({}, state.processingNavigation), {}, {\n          navigationItem: action.payload\n        })\n      });\n\n    case 'PROCESSING_CLAIM_VIEW_NAVIGATION':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        processingNavigation: _objectSpread(_objectSpread({}, state.processingNavigation), {}, {\n          selectedView: action.payload\n        })\n      });\n\n    case 'CLAIMS_BORDEREAU_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isBordereauPeriodsLoading: true\n      });\n\n    case 'CLAIMS_BORDEREAU_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimBordereauPeriods: action.payload,\n        isBordereauPeriodsLoading: false\n      });\n\n    case 'CLAIMS_BORDEREAU_ERROR':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload,\n        isBordereauPeriodsLoading: false\n      });\n\n    case 'CLAIMS_POLICY_INSURED_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isClaimPolicyInsuresLoading: true\n      });\n\n    case 'CLAIMS_POLICY_INSURED_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimPolicyInsures: action.payload,\n        isClaimPolicyInsuresLoading: false\n      });\n\n    case 'CLAIMS_POLICY_INSURED_ERROR':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload,\n        isClaimPolicyInsuresLoading: false\n      });\n\n    case 'CLAIMS_POLICY_CLIENTS_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isPolicyClientsLoading: true\n      });\n\n    case 'CLAIMS_POLICY_CLIENTS_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimPolicyClients: action.payload,\n        isPolicyClientsLoading: false\n      });\n\n    case 'CLAIMS_POLICY_CLIENTS_ERROR':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isPolicyClientsLoading: false,\n        error: action.payload\n      });\n\n    case 'CHECK_IS_USER_CLAIM':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        processing: _objectSpread(_objectSpread({}, state.processing), {}, {\n          isUserClaim: action.payload\n        })\n      });\n\n    case 'CHECK_IS_CLOSED_CLAIM':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        processing: _objectSpread(_objectSpread({}, state.processing), {}, {\n          isClosedClaim: action.payload\n        })\n      });\n\n    case 'CHECK_IS_TEAM_CLAIM':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        processing: _objectSpread(_objectSpread({}, state.processing), {}, {\n          isTeamClaim: action.payload\n        })\n      });\n\n    case 'RESET_POLICY_INFORMATION':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        policyInformation: initialState.policyInformation\n      });\n\n    case 'RESET_LINK_POLICY_DATA':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        linkPolicies: initialState.linkPolicies\n      });\n\n    case 'GET_LOSS_DOCUMENT_DETAILS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        dmsDocDetails: _objectSpread(_objectSpread({}, state.dmsDocDetails), {}, {\n          lossDocDetails: action.payload\n        })\n      });\n\n    case 'GET_LINK_POLICY_DOCUEMENT_DETAILS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        dmsDocDetails: _objectSpread(_objectSpread({}, state.dmsDocDetails), {}, {\n          linkPolicyDocDetails: action.payload\n        })\n      });\n\n    case 'GET_CLAIMS_DOCUEMENT_DETAILS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        dmsDocDetails: _objectSpread(_objectSpread({}, state.dmsDocDetails), {}, {\n          claimsDocDetails: action.payload\n        })\n      });\n\n    case 'GET_MANAGE_DOC_LOSS_DOCUMENT_DETAILS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        dmsDocDetails: _objectSpread(_objectSpread({}, state.dmsDocDetails), {}, {\n          manageDocument: _objectSpread(_objectSpread({}, state.dmsDocDetails.manageDocument), {}, {\n            lossDocumentDetails: action.payload\n          })\n        })\n      });\n\n    case 'GET_MANAGE_DOC_CLAIM_DOCUMENT_DETAILS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        dmsDocDetails: _objectSpread(_objectSpread({}, state.dmsDocDetails), {}, {\n          manageDocument: _objectSpread(_objectSpread({}, state.dmsDocDetails.manageDocument), {}, {\n            claimDocumentDetails: action.payload\n          })\n        })\n      });\n\n    case 'GET_LINK_POLICIES_DATA':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        linkPolicies: _objectSpread(_objectSpread({}, state.linkPolicies), action.payload)\n      });\n\n    case 'RESET_LINK_POLICY_DOCUMENT_DETAILS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        dmsDocDetails: _objectSpread(_objectSpread({}, state.dmsDocDetails), {}, {\n          linkPolicyDocDetails: initialState.dmsDocDetails.linkPolicyDocDetails\n        })\n      });\n\n    case 'GET_LOSSES_TAB_DATA':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        lossesTab: _objectSpread(_objectSpread({}, state.lossesTab), action.payload)\n      });\n\n    case 'GET_LOSSES_TABLE_FILTER_VALUES':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        lossesTab: _objectSpread(_objectSpread({}, state.lossesTab), {}, {\n          filterValues: action.payload\n        })\n      });\n\n    case 'RESET_LOSSES_TAB_DATA':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        lossesTab: initialState.lossesTab\n      });\n\n    case 'LOSSES_TAB_POST_SUCCESS':\n      var lossesTabPagination = action.payload.pagination || {};\n      var payloadData;\n      if (action.payload.requestType === 'search') payloadData = {\n        items: action.payload.items\n      };else if (action.payload.requestType === 'filter') payloadData = {\n        filters: action.payload.items\n      };\n      return _objectSpread(_objectSpread({}, state), {}, {\n        lossesTab: _objectSpread(_objectSpread(_objectSpread({}, state.lossesTab), payloadData), action.payload.requestType === 'search' ? {\n          itemsTotal: get(lossesTabPagination, 'totalElements', 0),\n          page: get(lossesTabPagination, 'page', 1),\n          pageSize: get(lossesTabPagination, 'size', initialState.lossesTab.pageSize),\n          pageTotal: get(lossesTabPagination, 'totalPages', 0),\n          query: get(lossesTabPagination, 'query') || ''\n        } : null)\n      });\n\n    case 'GET_CLAIMS_TAB_DATA':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimsTab: _objectSpread(_objectSpread({}, state.claimsTab), {}, {\n          isClaimsTabLoaded: action.payload.isClaimsTabLoaded,\n          searchBy: action.payload.searchBy,\n          searchText: action.payload.searchText,\n          view: action.payload.view\n        })\n      });\n\n    case 'CLAIMS_TAB_DETAILS_GET_REQUEST':\n      var newClaimsTabReqType = action.payload.appliedParams.newClaimsTabReqType;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimsTab: _objectSpread(_objectSpread({}, state.claimsTab), {}, {\n          tableDetails: _objectSpread(_objectSpread({}, state.claimsTab.tableDetails), newClaimsTabReqType === constants.CLAIM_PROCESSING_REQ_TYPES.filter ? {\n            isloadingFilters: true\n          } : {\n            isloadingTable: true\n          })\n        })\n      });\n\n    case 'CLAIMS_TAB_DETAILS_GET_SUCCESS':\n      var claimsFilterValue = (_action$payload36 = action.payload) === null || _action$payload36 === void 0 ? void 0 : (_action$payload36$ite = _action$payload36.items) === null || _action$payload36$ite === void 0 ? void 0 : _action$payload36$ite.filterValue;\n      var claimsSearchValue = (_action$payload37 = action.payload) === null || _action$payload37 === void 0 ? void 0 : (_action$payload37$ite = _action$payload37.items) === null || _action$payload37$ite === void 0 ? void 0 : _action$payload37$ite.searchValue;\n      var claimsPageSize = get(action.payload.pagination, 'size', initialState === null || initialState === void 0 ? void 0 : (_initialState$claimsT = initialState.claimsTab) === null || _initialState$claimsT === void 0 ? void 0 : (_initialState$claimsT2 = _initialState$claimsT.tableDetails) === null || _initialState$claimsT2 === void 0 ? void 0 : _initialState$claimsT2.pageSize);\n      var claimReqType = action.payload.requestType;\n      var isClaimNonFilterTypeCall = claimReqType !== constants.CLAIM_PROCESSING_REQ_TYPES.filter;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimsTab: _objectSpread(_objectSpread({}, state.claimsTab), {}, {\n          tableDetails: _objectSpread(_objectSpread(_objectSpread({}, state.claimsTab.tableDetails), isClaimNonFilterTypeCall ? {\n            items: _toConsumableArray(utils.generic.isValidArray(claimsSearchValue) ? claimsSearchValue : []),\n            itemsTotal: get(action.payload.pagination, 'totalElements', 0),\n            page: get(action.payload.pagination, 'page', 0) + 1,\n            pageSize: claimsPageSize !== 0 ? claimsPageSize : initialState === null || initialState === void 0 ? void 0 : (_initialState$claimsT3 = initialState.claimsTab) === null || _initialState$claimsT3 === void 0 ? void 0 : (_initialState$claimsT4 = _initialState$claimsT3.tableDetails) === null || _initialState$claimsT4 === void 0 ? void 0 : _initialState$claimsT4.pageSize,\n            pageTotal: get(action.payload.pagination, 'totalPages', 0),\n            query: get(action.payload.pagination, 'search') || '',\n            searchBy: get(action.payload.pagination, 'searchBy') || '',\n            isloadingTable: false\n          } : {}), {}, {\n            sort: {\n              by: get(action.payload.pagination, 'orderBy') || '',\n              direction: (get(action.payload.pagination, 'direction') || '').toLowerCase()\n            },\n            filters: !isClaimNonFilterTypeCall ? claimsFilterValue ? claimsFilterValue : _objectSpread({}, state.claimsTab.tableDetails.filters) : _objectSpread({}, state.claimsTab.tableDetails.filters),\n            isloadingFilters: !isClaimNonFilterTypeCall ? false : state.claimsTab.tableDetails.isloadingFilters,\n            selected: []\n          })\n        })\n      });\n\n    case 'CLAIMS_TAB_TABLE_DETAILS_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload,\n        claimsTab: _objectSpread(_objectSpread({}, state.claimsTab), {}, {\n          tableDetails: _objectSpread(_objectSpread({}, state.claimsTab.tableDetails), {}, {\n            items: initialState.claimsTab.tableDetails.items,\n            isloadingTable: false\n          })\n        })\n      });\n\n    case 'CLAIMS_TAB_FILTER_DETAILS_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload,\n        claimsTab: _objectSpread(_objectSpread({}, state.claimsTab), {}, {\n          tableDetails: _objectSpread(_objectSpread({}, state.claimsTab.tableDetails), {}, {\n            isloadingFilters: false\n          })\n        })\n      });\n\n    case 'CLAIMS_TAB_TABLE_SELECT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimsTab: _objectSpread(_objectSpread({}, state === null || state === void 0 ? void 0 : state.claimsTab), {}, {\n          tableDetails: _objectSpread(_objectSpread({}, state.claimsTab.tableDetails), {}, {\n            selected: action.payload.forceSingleItem ? [action.payload.claimObj] : xorBy((state === null || state === void 0 ? void 0 : (_state$claimsTab = state.claimsTab) === null || _state$claimsTab === void 0 ? void 0 : (_state$claimsTab$tabl3 = _state$claimsTab.tableDetails) === null || _state$claimsTab$tabl3 === void 0 ? void 0 : _state$claimsTab$tabl3.selected) || [], [(_action$payload38 = action.payload) === null || _action$payload38 === void 0 ? void 0 : _action$payload38.claimObj], 'processID')\n          })\n        })\n      });\n\n    case 'CLAIMS_ASSOCIATE_WITH_LOSS_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload,\n        isClaimsAssociateWithLossLoading: false\n      });\n\n    case 'CLAIMS_FNOL_PUSH_BACK_ROUTES':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        pushBackRoute: action.payload\n      });\n\n    case 'CLAIMS_FNOL_SELECT_TAB':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        fnolSelectedTab: action.payload\n      });\n\n    case 'GET_SANCTIONS_CHECK_STATUS_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        sanctionCheckStatus: action.payload\n      });\n\n    case 'GET_SANCTIONS_CHECK_STATUS_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        sanctionCheckStatus: initialState.sanctionCheckStatus,\n        error: action.payload\n      });\n\n    case 'CLAIMS_TAB_SEARCH_RESET':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimsTab: _objectSpread(_objectSpread({}, state.claimsTab), {}, {\n          tableDetails: _objectSpread(_objectSpread({}, state.claimsTab.tableDetails), {}, {\n            query: initialState.claimsTab.tableDetails.query\n          })\n        })\n      });\n\n    case 'RESET_CLAIMS_TAB_TABLE_ITEMS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimsTab: _objectSpread(_objectSpread({}, state.claimsTab), {}, {\n          tableDetails: _objectSpread(_objectSpread({}, state.claimsTab.tableDetails), {}, {\n            items: initialState.claimsTab.tableDetails.items\n          })\n        })\n      });\n\n    case 'RESET_CLAIMS_TAB_FILTERS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimsTab: _objectSpread(_objectSpread({}, state.claimsTab), {}, {\n          tableDetails: _objectSpread(_objectSpread({}, state.claimsTab.tableDetails), {}, {\n            filters: initialState.claimsTab.tableDetails.filters\n          })\n        })\n      });\n\n    case 'RESET_CLAIMS_TAB_SEARCH':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        claimsTab: _objectSpread(_objectSpread({}, state.claimsTab), {}, {\n          tableDetails: _objectSpread(_objectSpread({}, state.claimsTab.tableDetails), {}, {\n            query: initialState.claimsTab.tableDetails.query\n          })\n        })\n      });\n\n    case 'RESET_CLAIMS_DMS_DOCUMENT_DETAILS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        dmsDocDetails: initialState.dmsDocDetails\n      });\n\n    case 'ADVANCE_SEARCH_DETAILS_REQUEST':\n      var advanceSearchRequestType = action === null || action === void 0 ? void 0 : (_action$payload39 = action.payload) === null || _action$payload39 === void 0 ? void 0 : (_action$payload39$par = _action$payload39.params) === null || _action$payload39$par === void 0 ? void 0 : _action$payload39$par.requestType;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        advanceTab: _objectSpread(_objectSpread({}, state.advanceTab), advanceSearchRequestType === constants.REQ_TYPES.filter ? {\n          isloadingFilters: true\n        } : {\n          isloadingTable: true\n        })\n      });\n\n    case 'ADVANCE_SEARCH_DETAILS_SUCCESS':\n      var advanceTabPagination = action.payload.pagination || {};\n      var advancePayloadData;\n      if (action.payload.requestType === constants.REQ_TYPES.search) advancePayloadData = {\n        items: action.payload.items,\n        isloadingTable: false\n      };else if (action.payload.requestType === constants.REQ_TYPES.filter) advancePayloadData = {\n        filters: action.payload.items,\n        isloadingFilters: false\n      };\n      return _objectSpread(_objectSpread({}, state), {}, {\n        advanceTab: _objectSpread(_objectSpread(_objectSpread({}, state.advanceTab), advancePayloadData), action.payload.requestType === constants.REQ_TYPES.search ? {\n          itemsTotal: get(advanceTabPagination, 'totalElements', 0),\n          page: get(advanceTabPagination, 'page', 1),\n          pageSize: get(advanceTabPagination, 'size', initialState.advanceTab.pageSize),\n          pageTotal: get(advanceTabPagination, 'totalPages', 0),\n          query: get(advanceTabPagination, 'query') || ''\n        } : null)\n      });\n\n    case 'ADVANCE_SEARCH_DETAILS_TABLE_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload,\n        advanceTab: _objectSpread(_objectSpread({}, state.advanceTab), {}, {\n          items: initialState.advanceTab.items,\n          isloadingTable: initialState.advanceTab.isloadingTable\n        })\n      });\n\n    case 'ADVANCE_SEARCH_DETAILS_FILTER_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload,\n        advanceTab: _objectSpread(_objectSpread({}, state.advanceTab), {}, {\n          filters: initialState.advanceTab.filters,\n          isloadingFilters: initialState.advanceTab.isloadingFilters\n        })\n      });\n\n    case 'SET_ADVANCE_SEARCH_TAB_SEARCH_DETAILS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        advanceTab: _objectSpread(_objectSpread({}, state.advanceTab), action.payload)\n      });\n\n    case 'SET_ADVANCE_SEARCH_TABLE_FILTER_VALUES':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        advanceTab: _objectSpread(_objectSpread({}, state.advanceTab), {}, {\n          filterValues: action.payload\n        })\n      });\n\n    case 'RESET_ADVANCE_SEARCH_TAB_DETAILS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        advanceTab: initialState.advanceTab\n      });\n\n    case 'SET_PULL_CLOSED_RECORDS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        advanceTab: _objectSpread(_objectSpread({}, state.advanceTab), {}, {\n          pullClosedRecords: action.payload\n        })\n      });\n\n    case 'RESET_RFI_DASHBOARD_DATA':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        lossInformation: initialState.lossInformation,\n        selectedClaimsDetails: initialState.selectedClaimsDetails,\n        sanctionCheckStatus: initialState.sanctionCheckStatus,\n        taskDashboard: _objectSpread(_objectSpread({}, state.taskDashboard), {}, {\n          taskDetails: initialState.taskDashboard.taskDetails\n        })\n      });\n\n    case 'CLAIMS_GET_RFI_HISTORY_DOCUMENTS_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        rfiHistoryDocuments: {\n          documentList: [],\n          isLoading: true\n        }\n      });\n\n    case 'CLAIMS_GET_RFI_HISTORY_DOCUMENTS_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        rfiHistoryDocuments: {\n          documentList: (_action$payload40 = action.payload) === null || _action$payload40 === void 0 ? void 0 : _action$payload40.documentList,\n          isLoading: false\n        }\n      });\n\n    case 'CLAIMS_GET_RFI_HISTORY_DOCUMENTS_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        rfiHistoryDocuments: {\n          documentList: initialState.rfiHistoryDocuments.documentList,\n          isLoading: action.payload\n        }\n      });\n\n    case 'GET_BPM_CLAIM_DETAILS_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        bpmClaimInformation: _objectSpread(_objectSpread({}, state === null || state === void 0 ? void 0 : state.bpmClaimInformation), {}, {\n          data: {},\n          isLoading: true\n        })\n      });\n\n    case 'GET_BPM_CLAIM_DETAILS_SUCCESS':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        bpmClaimInformation: {\n          data: action === null || action === void 0 ? void 0 : action.payload,\n          isLoading: false\n        }\n      });\n\n    case 'GET_BPM_CLAIM_DETAILS_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        bpmClaimInformation: _objectSpread(_objectSpread({}, state === null || state === void 0 ? void 0 : state.bpmClaimInformation), {}, {\n          data: {},\n          isLoading: false\n        }),\n        error: action.payload\n      });\n\n    case 'CLAIMS_EDIT_RE_OPENED_TASK_SUCCESS':\n    case 'CLAIMS_COMPLEXITY_VALUES_GET_FAILURE':\n    case 'CLAIMS_SAVE_COMPLEXITY_INSURED_POST_ERROR':\n    case 'CLAIMS_COMPLEXITY_SEARCH_POST_FAILURE':\n    case 'CLAIMS_PROCESSING_FILTER_POST_ERROR':\n    case 'CLAIMS_LOSS_FILTER_POST_ERROR':\n    case 'CLAIMS_LOSS_FILTER_GET_ERROR':\n    case 'CLAIMS_DETAILS_INFORMATION_POST_FAILURE':\n    case 'CLAIMS_GET_FAILURE':\n    case 'CLAIMS_DETAILS_ERROR':\n    case 'CLAIMS_SETTLEMENT_CURRENCY_GET_FAILURE':\n    case 'CLAIMS_LOSS_QUALIFIERS_GET_FAILURE':\n    case 'CLAIMS_COMPLEXITY_INSURED_GET_FAILURE':\n    case 'CLAIMS_BE_ADJUSTER_GET_FAILURE':\n    case 'CLAIMS_UNDERWRITING_GROUPS_GET_FAILURE':\n    case 'CLAIMS_STATUSES_GET_FAILURE':\n    case 'CLAIMS_COMPLEXITY_GET_FAILURE':\n    case 'CLAIMS_DETAILS_INFORMATION_SUBMIT_FAILURE':\n    case 'CLAIMS_COMPLEXITY_DIVISION_GET_FAILURE':\n    case 'CLAIMS_COMPLEXITY_DIVISION_SAVE_FAILURE':\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_COMPLEX_ID_GET_FAILURE':\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_COMPLEX_ID_SAVE_FAILURE':\n    case 'CLAIMS_ADD_COMPLEXITY_VALUES_FAILURE':\n    case 'CLAIMS_REMOVE_COMPLEXITY_VALUES_FAILURE':\n    case 'CLAIMS_COMPLEXITY_ADD_REFERRAL_FAILURE':\n    case 'CLAIMS_COMPLEXITY_FLAGGED_GET_FAILURE':\n    case 'CLAIMS_REMOVE_REFERRAL_VALUES_FAILURE':\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_REFERRAL_ID_GET_FAILURE':\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_REFERRAL_ID_SAVE_FAILURE':\n    case 'CLAIMS_COMPLEXITY_REFERRAL_VALUES_GET_FAILURE':\n    case 'CLAIMS_SAVE_COMPLEXITY_POLICY_POST_ERROR':\n    case 'CLAIMS_REFERRAL_VALUES_GET_FAILURE':\n    case 'CLAIMS_COMPLEXITY_BASIS_VALUE_GET_FAILURE':\n    case 'CLAIMS_REFERRAL_RESPONSE_GET_FAILURE':\n    case 'CLAIMS_COMPLEXITY_POLICY_REMOVE_FAILURE':\n    case 'CLAIMS_COMPLEXITY_INSURED_REMOVE_FAILURE':\n    case 'CLAIMS_SAVE_NOTES_POST_ERROR':\n    case 'CLAIM_NOTES_POST_FAILURE':\n    case 'CLAIM_TASK_NOTES_GET_FAILURE':\n    case 'CLAIMS_TASK_PRIORITY_POST_FAILURE':\n    case 'CLAIMS_TASK_SANCTIONS_CHECK_POST_FAILURE':\n    case 'CLAIMS_TASK_PROCESSING_SAVE_ASSIGNEES_ERROR':\n    case 'CLAIMS_TASK_PROCESSING_GET_CHECKLIST_FAILURE':\n    case 'CLAIMS_TASK_PROCESSING_GET_NEXT_TASKLIST_FAILURE':\n    case 'CLAIMS_TASK_PROCESSING_SAVE_CHECKLIST_ACTIONS_ERROR':\n    case 'CLAIMS_TASK_PROCESSING_SAVE_NEXT_ACTION_ERROR':\n    case 'CLAIMS_SET_PRIORITY_FAILURE':\n    case 'GET_ASSOCIATED_TASK_FAILURE':\n    case 'CLAIMREF_EDIT_NOTES_FAILURE':\n    case 'CURRENCY_PURCHASED_VALUE_GET_FAILURE':\n    case 'CLOSE_SANCTIONS_CHECK_FAILURE':\n    case 'CLAIM_RETURN_TO_TEAM_QUEUE_ERROR':\n    case 'CLAIMS_SEND_RFI_POST_FAILURE':\n    case 'CLAIMS_CLOSE_RFI_POST_FAILURE':\n    case 'CLOSE_CLAIMS_POST_ERROR':\n    case 'CLAIM_COMPLEXITY_TYPES_GET_FAILURE':\n    case 'CLAIMS_PROCESSING_SINGLE_ASSIGN_ERROR':\n    case 'CLAIMS_LOSS_ACTIONS_GET_FAILURE':\n    case 'LOSSES_TAB_POST_FAILURE':\n    case 'CLAIMS_CASE_INCIDENT_DETAILS_GET_FAILURE':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default claimsReducer;","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.reducers.js"],"names":["get","xorBy","config","constants","utils","initialState","isChoosing","isLossSubmitted","sectionEnabledUG","claimsStepper","catCodes","claimsAssociateWithLoss","claimantNames","lossQualifiers","lossInformation","selectedLossInformation","claimsInformation","selectedClaimsDetails","isClaimsInfoLoading","isLossInfoLoading","isPolicyInfoLoading","isPolicySectionsLoading","isClaimsAssociateWithLossLoading","isSanctionCheckStatusLoading","settlementCurrencies","queryCode","sendToList","policyData","policyID","policyInformation","claims","items","itemsTotal","page","pageSize","ui","pagination","default","pageTotal","query","sort","by","direction","searchBy","filters","processing","selected","CLAIMS_SEARCH_OPTION_CLAIM_REF","isloadingFilters","isUserClaim","isClosedClaim","isTeamClaim","tasksProcessing","selectedTaskType","rfiCount","appliedFilters","type","associatedTaskDetails","policies","CLAIMS_POLICY_SEARCH_OPTION","policyRef","isloadingTable","claimPoliciesSearchFilters","search","policyType","insured","reinsured","client","riskDetails","inceptionDate","expiryDate","division","policyStatus","sanctionsCheck","policySections","interest","selectedInterest","isLoading","notes","options","rfis","audits","taskNotes","rfiHistory","data","rfiInfo","documents","underWritingGroups","percentageOfSelected","allClaimDetails","claimBordereauPeriods","claimPolicyInsures","isClaimPolicyInsuresLoading","claimPolicyClients","isPolicyClientsLoading","claimDetailInformation","claimDetailInformationSuccess","beAdjuster","selectedbeAdjuster","priorities","isPrioritiesLoading","prioritiesLoaded","reopenTaskList","claimsProcessingData","dateAndTimeCreated","targetDueDate","team","assignedToDropdownList","priority","status","claimsRefData","claimStatus","claimant","lossDateFrom","lossDateTo","lossName","claimLossSearchFilters","claimsProcessingSearchFilters","statuses","complexityPolicies","selectedComplexityPolicies","savedComplexPolicies","checkedComplexity","complexityPoliciesFlagged","complexityBasisValues","loaded","complexityReferralValues","checkedComplexAddPolicies","claimData","complexityManagement","activeTab","divisionChanges","complexityBasisValueId","complexityBasisDivisionMatrix","complexityBasisDivisionMatrixChanges","complexityReferralValueId","complexityReferralDivisionMatrix","complexityReferralDivisionMatrixChanges","complexInsured","selectedComplexityInsured","savedComplexInsured","checkedComplexAddInsured","complexityValues","complexityValuesLoaded","complexityTypes","complexityTypesLoaded","referralValues","referralResponse","refTabTasks","isClaimsAssignedToUsersLoading","claimsAssignedToUsers","orgName","taskDashboard","taskDetails","checkList","nextActions","checkListChanges","checkListChangesPushed","nextActionChangesPushed","purchasedCurrencyRequired","setPriority","claimPriority","adhocTask","tasksClaimsReporting","isDataLoading","processingNavigation","navigationItem","CLAIMS_PROCESSING_TAB_SELECTION","selectedView","CLAIM_TEAM_TYPE","myClaims","lossDocDetails","dmsDocDetails","linkPolicyDocDetails","claimsDocDetails","manageDocument","lossDocumentDetails","claimDocumentDetails","linkPolicies","searchTerm","loader","fieldLoader","lossActions","lossesTab","searchText","filterValues","refreshLossesTab","advanceTab","refreshAdvanceTab","pullClosedRecords","claimsTab","isClaimsTabLoaded","view","tableDetails","CLAIMS_SEARCH_OPTION_INSURED","claimLossFromDate","claimStage","assignedTo","selectedFilters","tasksTab","isTableLoading","previousTaskType","pushBackRoute","fnolSelectedTab","caseIncidentDetails","sanctionCheckStatus","bpmClaimInformation","rfiHistoryDocuments","documentList","claimsReducer","state","action","payload","getNotesItems","filter","item","idx","caseIncidentNotesID","isArrayLargerThanPageSize","length","slice","createAdHocResp","error","editAdHocResp","editAdHocDetails","formattedResp","name","taskName","dueDate","claimsStatusObj","reduce","acc","id","toString","selectPolicyType","CLAIM_SECTION_ENABLED_UG","indexOf","lossObj","map","policyUnderWritingGroupDtoList","includes","groupRef","remained","initial","a","b","localeCompare","selectedPercentage","current","percentage","Math","floor","split","toFixed","sortedUnderwritingGroups","generic","isValidArray","Number","isDisabled","updatedStatus","claimID","claimStatusID","claimStatusId","updatedLoss","catCodesID","isActive","lossDescription","fromDate","toDate","firstContactDate","newRequestType","appliedParams","CLAIM_PROCESSING_REQ_TYPES","filterValue","searchValue","claimRequestType","requestType","isNonfilterTypCall","toLowerCase","isNonFilterTypeCall","updateClaimsIds","claim","claimId","updateClaimsValues","values","updateClaimsName","assignTo","fullName","updateClaimsEmail","email","updateClaimsComplexity","complexity","updateClaimsComplexityBasis","complexityBasis","complexityRulesValue","updateClaimsPriority","updateClaimsPriorityId","priorityId","updateClaimsTeam","priorityID","priorityDescription","assignedToEmail","forceSingleItem","claimObj","isTaskNotesArrayLargerThanPageSize","taskReqType","taskType","taskSortBy","sortBy","taskDir","dir","navigation","tasksFiltersValues","tasksSearchValues","taskRfiCount","rfiTasksCount","tasksPagination","tasksAppliedFilters","initTaskProcessing","initTaskProcessingSort","stateTaskProcessing","prevTaskProcessingSelected","isNonfilterTypeCall","taskProcessingError","taskSelectObj","taskObj","keepPreviousTasks","newTasksSelectedArray","newTasksSelectedList","isNonfilterCalls","initTaskProcessingList","initTaskProcessingListSort","stateTaskProcessingList","prevTaskProcessingListSelected","isNonfilterTypeCalls","requestTypes","isValidObject","selectedOption","loading","claimProcessingTaskTypeSelected","claimProcessingPreviousTaskTypeSelected","refTaskReqType","refTaskReqstType","claimRefSortBy","claimRefDir","claimRefQuery","refTasksFiltersValues","refTasksSearchValues","refTasksPagination","refTasksAppliedFilters","initRefTabTasks","initRefTabTasksSort","stateRefTabTasks","isNonfilterTypeReq","claimsPagination","newPolicyRequestType","CLAIM_POLICY_SEARCH_REQ_TYPES","policiesFiltersValues","policiesSearchValues","policiesPagination","policyRequestType","isPolicyNonfilterTypCall","size","claimsInsuredPagination","policyTypeCheck","checkedInsured","Object","keys","fromEntries","entries","key","value","title","defaultValue","code","complexityPoliciesPagination","complexityPoliciesFlaggedPagination","submitStatus","responseData","boolCheck","complexPoliciesData","checkedType","insuredBoolCheck","complexInsuredData","incomingFieldName","falseStateChange","applicablePayload","applicableDivisionChanges","complexityBasisValuePagination","initialComplexityBasisSort","newComplexityDivisionFieldName","falseComplexityDivisionMatrixFieldChange","newComplexityDivisionPayload","newComplexityDivisionChanges","complexityReferralValuesPagination","initialComplexityReferralSort","newReferralDivisionFieldName","falseReferralDivisionMatrixFieldChange","newReferralDivisionPayload","newReferralDivisionChanges","complexityInsuredPagination","newPriorityName","priorityName","isSameClaimId","isBordereauPeriodsLoading","lossesTabPagination","payloadData","newClaimsTabReqType","claimsFilterValue","claimsSearchValue","claimsPageSize","claimReqType","isClaimNonFilterTypeCall","advanceSearchRequestType","params","REQ_TYPES","advanceTabPagination","advancePayloadData"],"mappings":"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","sourcesContent":["import get from 'lodash/get';\r\nimport xorBy from 'lodash/xorBy';\r\n\r\n// app\r\nimport config from 'config';\r\nimport * as constants from 'consts';\r\nimport * as utils from 'utils';\r\n\r\nconst initialState = {\r\n  isChoosing: false,\r\n  isLossSubmitted: false,\r\n  sectionEnabledUG: false,\r\n  claimsStepper: 0,\r\n  catCodes: [],\r\n  claimsAssociateWithLoss: [],\r\n  claimantNames: [],\r\n  lossQualifiers: [],\r\n  lossInformation: {},\r\n  selectedLossInformation: {},\r\n  claimsInformation: {},\r\n  selectedClaimsDetails: {},\r\n  isClaimsInfoLoading: false,\r\n  isLossInfoLoading: false,\r\n  isPolicyInfoLoading: false,\r\n  isPolicySectionsLoading: false,\r\n  isClaimsAssociateWithLossLoading: false,\r\n  isSanctionCheckStatusLoading: false,\r\n  settlementCurrencies: [],\r\n  queryCode: [],\r\n  sendToList: [],\r\n  policyData: {\r\n    policyID: null,\r\n  },\r\n  policyInformation: {},\r\n  claims: {\r\n    items: [],\r\n    itemsTotal: 0,\r\n    page: 1,\r\n    pageSize: config.ui.pagination.default,\r\n    pageTotal: 0,\r\n    query: '',\r\n    sort: {\r\n      by: 'lossRef',\r\n      direction: 'desc',\r\n    },\r\n    searchBy: 'claimantName',\r\n    filters: {},\r\n  },\r\n  processing: {\r\n    selected: [],\r\n    items: [],\r\n    itemsTotal: 0,\r\n    page: 1,\r\n    pageSize: config.ui.pagination.default,\r\n    pageTotal: 0,\r\n    query: '',\r\n    sort: {\r\n      by: 'createdDate',\r\n      direction: 'desc',\r\n    },\r\n    searchBy: constants.CLAIMS_SEARCH_OPTION_CLAIM_REF,\r\n    filters: {},\r\n    isloadingFilters: false,\r\n    isUserClaim: false,\r\n    isClosedClaim: false,\r\n    isTeamClaim: false,\r\n  },\r\n  tasksProcessing: {\r\n    selectedTaskType: '',\r\n    selected: [],\r\n    items: [],\r\n    rfiCount: '',\r\n    itemsTotal: 0,\r\n    page: 1,\r\n    pageSize: config.ui.pagination.default,\r\n    pageTotal: 0,\r\n    query: '',\r\n    searchBy: 'taskRef',\r\n    isloadingFilters: false,\r\n    filters: {},\r\n    appliedFilters: [],\r\n    sort: {\r\n      by: 'targetDueDate, priority',\r\n      type: 'lexical',\r\n      direction: 'asc',\r\n    },\r\n    associatedTaskDetails: {},\r\n  },\r\n  policies: {\r\n    items: [],\r\n    itemsTotal: 0,\r\n    page: 0,\r\n    pageSize: config.ui.pagination.default,\r\n    pageTotal: 0,\r\n    query: '',\r\n    sort: {\r\n      by: 'policyRef',\r\n      direction: 'desc',\r\n    },\r\n    searchBy: constants.CLAIMS_POLICY_SEARCH_OPTION.policyRef,\r\n    filters: {},\r\n    isloadingFilters: false,\r\n    isloadingTable: false,\r\n  },\r\n  claimPoliciesSearchFilters: {\r\n    search: '',\r\n    filters: {\r\n      policyType: [],\r\n      insured: [],\r\n      reinsured: [],\r\n      client: [],\r\n      riskDetails: [],\r\n      inceptionDate: null,\r\n      expiryDate: null,\r\n      division: [],\r\n      policyStatus: [],\r\n      sanctionsCheck: [],\r\n    },\r\n  },\r\n  policySections: [],\r\n  interest: {\r\n    items: [],\r\n    selectedInterest: '',\r\n    isLoading: false,\r\n  },\r\n  insured: {\r\n    items: [],\r\n    itemsTotal: 0,\r\n    page: 0,\r\n    pageSize: config.ui.pagination.default,\r\n    pageTotal: 0,\r\n    query: '',\r\n    sort: {\r\n      by: 'sourceID',\r\n      direction: 'desc',\r\n    },\r\n  },\r\n  notes: {\r\n    items: [],\r\n    itemsTotal: 0,\r\n    page: 0,\r\n    pageSize: config.ui.pagination.options[0],\r\n    pageTotal: 0,\r\n    query: '',\r\n    sort: {\r\n      by: 'updatedDate',\r\n      direction: 'desc',\r\n      type: 'date',\r\n    },\r\n    filters: [],\r\n  },\r\n  rfis: {\r\n    items: [],\r\n    itemsTotal: 0,\r\n    page: 0,\r\n    pageSize: config.ui.pagination.options[1],\r\n    pageTotal: 0,\r\n    query: '',\r\n    sort: {\r\n      by: 'targetDueDate, priority',\r\n      direction: 'asc',\r\n      type: 'date',\r\n    },\r\n    filters: [],\r\n  },\r\n  audits: {\r\n    items: [],\r\n    itemsTotal: 0,\r\n    page: 0,\r\n    pageSize: config.ui.pagination.options[0],\r\n    pageTotal: 0,\r\n    query: '',\r\n    sort: {\r\n      by: 'createdBy',\r\n      direction: 'desc',\r\n    },\r\n    filters: [],\r\n  },\r\n  taskNotes: {\r\n    items: [],\r\n    itemsTotal: 0,\r\n    page: 0,\r\n    pageSize: config.ui.pagination.options[0],\r\n    pageTotal: 0,\r\n    query: '',\r\n    sort: {\r\n      by: 'updatedDate',\r\n      direction: 'desc',\r\n      type: 'date',\r\n    },\r\n    filters: [],\r\n  },\r\n  rfiHistory: {\r\n    data: [],\r\n    isLoading: false,\r\n  },\r\n  rfiInfo: {\r\n    data: {},\r\n    documents: []\r\n  },\r\n  underWritingGroups: {\r\n    items: [],\r\n    percentageOfSelected: 0,\r\n    sort: {\r\n      by: 'groupRef',\r\n      direction: 'asc',\r\n    },\r\n    isLoading: false,\r\n  },\r\n  allClaimDetails: {},\r\n  claimBordereauPeriods: [],\r\n  claimPolicyInsures: [],\r\n  isClaimPolicyInsuresLoading: false,\r\n  claimPolicyClients: [],\r\n  isPolicyClientsLoading: false,\r\n  claimDetailInformation: {},\r\n  claimDetailInformationSuccess: null,\r\n  beAdjuster: {\r\n    items: [],\r\n    selectedbeAdjuster: null,\r\n  },\r\n  priorities: [],\r\n  isPrioritiesLoading: false,\r\n  prioritiesLoaded: false,\r\n  reopenTaskList: [],\r\n  claimsProcessingData: {\r\n    search: '',\r\n    filters: {\r\n      dateAndTimeCreated: '',\r\n      targetDueDate: '',\r\n      team: [],\r\n      assignedToDropdownList: [],\r\n      priority: [],\r\n      status: [],\r\n    },\r\n  },\r\n  claimsRefData: {\r\n    claimStatus: [],\r\n    claimant: [],\r\n    lossDateFrom: [],\r\n    lossDateTo: [],\r\n    lossName: [],\r\n    insured: [],\r\n    priority: [],\r\n  },\r\n  claimLossSearchFilters: {\r\n    search: '',\r\n    filters: {\r\n      claimStatus: [],\r\n      claimant: [],\r\n      lossDateFrom: null,\r\n      lossDateTo: null,\r\n      lossName: [],\r\n      insured: [],\r\n      priority: [],\r\n    },\r\n  },\r\n  claimsProcessingSearchFilters: {\r\n    search: '',\r\n    filters: {\r\n      dateAndTimeCreated: [],\r\n      targetDueDate: [],\r\n      team: [],\r\n      assignedToDropdownList: [],\r\n      priority: [],\r\n      status: [],\r\n    },\r\n  },\r\n  statuses: [],\r\n  complexityPolicies: {\r\n    items: [],\r\n    itemsTotal: 0,\r\n    page: 1,\r\n    pageSize: config.ui.pagination.default,\r\n    pageTotal: 0,\r\n    query: '',\r\n    sort: {\r\n      by: 'policyRef',\r\n      direction: 'asc',\r\n    },\r\n    selectedComplexityPolicies: [],\r\n    savedComplexPolicies: [],\r\n    checkedComplexity: false,\r\n  },\r\n  complexityPoliciesFlagged: {\r\n    items: [],\r\n    itemsTotal: 0,\r\n    page: 1,\r\n    pageSize: config.ui.pagination.default,\r\n    pageTotal: 0,\r\n    query: null,\r\n    sort: {\r\n      by: 'policyRef',\r\n      direction: 'asc',\r\n    },\r\n  },\r\n  complexityBasisValues: {\r\n    type: '',\r\n    items: null,\r\n    itemsTotal: 0,\r\n    page: 1,\r\n    pageSize: 5,\r\n    pageTotal: 0,\r\n    query: '',\r\n    sort: {\r\n      by: 'createdDate',\r\n      direction: 'desc',\r\n    },\r\n    loaded: false,\r\n  },\r\n  complexityReferralValues: {\r\n    items: null,\r\n    itemsTotal: 0,\r\n    page: 1,\r\n    pageSize: 5,\r\n    pageTotal: 0,\r\n    query: '',\r\n    sort: {\r\n      by: 'createdDate',\r\n      direction: 'desc',\r\n    },\r\n  },\r\n  checkedComplexAddPolicies: [],\r\n  claimData: {},\r\n  complexityManagement: {\r\n    activeTab: '',\r\n    division: [],\r\n    divisionChanges: {},\r\n    complexityBasisValueId: {},\r\n    complexityBasisDivisionMatrix: [],\r\n    complexityBasisDivisionMatrixChanges: {},\r\n    complexityReferralValueId: {},\r\n    complexityReferralDivisionMatrix: [],\r\n    complexityReferralDivisionMatrixChanges: {},\r\n  },\r\n  complexInsured: {\r\n    items: null,\r\n    itemsTotal: 0,\r\n    page: 0,\r\n    pageSize: config.ui.pagination.default,\r\n    pageTotal: 0,\r\n    query: '',\r\n    sort: {\r\n      by: 'insured',\r\n      direction: 'asc',\r\n    },\r\n    selectedComplexityInsured: [],\r\n    savedComplexInsured: [],\r\n    checkedComplexity: false,\r\n  },\r\n  checkedComplexAddInsured: [],\r\n  complexityValues: [],\r\n  complexityValuesLoaded: false,\r\n  complexityTypes: [],\r\n  complexityTypesLoaded: false,\r\n  referralValues: [],\r\n  referralResponse: [],\r\n  refTabTasks: {\r\n    selected: [],\r\n    items: [],\r\n    itemsTotal: 0,\r\n    page: 1,\r\n    pageSize: config.ui.pagination.options[0],\r\n    pageTotal: 0,\r\n    query: '',\r\n    filters: [],\r\n    appliedFilters: [],\r\n    sort: {\r\n      by: 'taskRef',\r\n      type: 'lexical',\r\n      direction: 'desc',\r\n    },\r\n  },\r\n  isClaimsAssignedToUsersLoading: false,\r\n  claimsAssignedToUsers: {\r\n    type: '',\r\n    orgName: '',\r\n    items: [],\r\n    loaded: false,\r\n  },\r\n  taskDashboard: {\r\n    taskDetails: { items: {}, query: '' },\r\n    checkList: [],\r\n    nextActions: [],\r\n    checkListChanges: [],\r\n    checkListChangesPushed: [],\r\n    nextActionChangesPushed: [],\r\n    purchasedCurrencyRequired: '',\r\n    isLoading: false,\r\n  },\r\n  setPriority: {\r\n    claimPriority: {},\r\n  },\r\n  adhocTask: {\r\n    status: false,\r\n    data: {},\r\n    documents: [],\r\n  },\r\n  tasksClaimsReporting: {\r\n    data: {},\r\n    isDataLoading: false,\r\n  },\r\n  processingNavigation: {\r\n    navigationItem: constants.CLAIMS_PROCESSING_TAB_SELECTION,\r\n    selectedView: constants.CLAIM_TEAM_TYPE.myClaims,\r\n  },\r\n  lossDocDetails: [],\r\n  dmsDocDetails: {\r\n    lossDocDetails: [],\r\n    linkPolicyDocDetails: [],\r\n    claimsDocDetails: [],\r\n    manageDocument: {\r\n      lossDocumentDetails: [],\r\n      claimDocumentDetails: [],\r\n    },\r\n  },\r\n  linkPolicies: {\r\n    searchBy: 'clientName',\r\n    searchTerm: '',\r\n    data: {},\r\n    loader: false,\r\n    fieldLoader: false,\r\n  },\r\n  lossActions: {\r\n    items: [],\r\n    itemsTotal: 0,\r\n    page: 0,\r\n    pageSize: config.ui.pagination.default,\r\n    pageTotal: 0,\r\n    query: '',\r\n    sort: {\r\n      by: 'targetDueDate,priority',\r\n      direction: 'asc',\r\n      type: 'date',\r\n    },\r\n    filters: [],\r\n    fieldLoader: false,\r\n  },\r\n  lossesTab: {\r\n    isLoading: false,\r\n    searchText: '',\r\n    items: [],\r\n    itemsTotal: 0,\r\n    page: 0,\r\n    pageSize: config.ui.pagination.default,\r\n    pageTotal: 0,\r\n    query: '',\r\n    sort: {\r\n      by: 'createdDate,lossRef',\r\n      direction: 'desc',\r\n    },\r\n    searchBy: '',\r\n    filters: {},\r\n    filterValues: {},\r\n    refreshLossesTab: false,\r\n  },\r\n  advanceTab: {\r\n    searchText: '',\r\n    items: [],\r\n    itemsTotal: 0,\r\n    page: 1,\r\n    pageSize: config.ui.pagination.default,\r\n    pageTotal: 0,\r\n    query: '',\r\n    sort: {\r\n      by: 'lossRef,claimRef',\r\n      direction: 'desc',\r\n    },\r\n    searchBy: '',\r\n    filters: {},\r\n    filterValues: {},\r\n    refreshAdvanceTab: false,\r\n    pullClosedRecords: false,\r\n    isloadingFilters: false,\r\n    isloadingTable: false,\r\n  },\r\n  claimsTab: {\r\n    isClaimsTabLoaded: false,\r\n    searchBy: '',\r\n    searchText: '',\r\n    view: '',\r\n    tableDetails: {\r\n      selected: [],\r\n      items: [],\r\n      itemsTotal: 0,\r\n      page: 1,\r\n      pageSize: config.ui.pagination.default,\r\n      pageTotal: 0,\r\n      query: '',\r\n      sort: {\r\n        by: 'processRef',\r\n        direction: 'desc',\r\n      },\r\n      searchBy: constants.CLAIMS_SEARCH_OPTION_INSURED,\r\n      filters: {\r\n        claimLossFromDate: '',\r\n        insured: [],\r\n        division: [],\r\n        claimStatus: [],\r\n        claimStage: [],\r\n        assignedTo: [],\r\n        team: [],\r\n        priority: [],\r\n      },\r\n      isloadingFilters: false,\r\n      isloadingTable: false,\r\n      selectedFilters: [],\r\n    },\r\n  },\r\n  tasksTab: {\r\n    selectedTaskType: '',\r\n    selected: [],\r\n    items: [],\r\n    rfiCount: '',\r\n    itemsTotal: 0,\r\n    page: 1,\r\n    pageSize: config.ui.pagination.default,\r\n    pageTotal: 0,\r\n    query: '',\r\n    searchBy: 'taskRef',\r\n    isloadingFilters: false,\r\n    isTableLoading: false,\r\n    filters: {},\r\n    appliedFilters: {},\r\n    previousTaskType: '',\r\n    sort: {\r\n      by: 'targetDueDate',\r\n      type: 'lexical',\r\n      direction: 'asc',\r\n    },\r\n    associatedTaskDetails: {},\r\n  },\r\n  pushBackRoute: '',\r\n  fnolSelectedTab: '',\r\n  caseIncidentDetails: {},\r\n  sanctionCheckStatus: {},\r\n  bpmClaimInformation: {\r\n    data: {},\r\n    isLoading: false,\r\n  },\r\n  rfiHistoryDocuments: {\r\n    documentList: [],\r\n    isLoading: false,\r\n  },\r\n};\r\n\r\nconst claimsReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'CLAIMS_ASSOCIATE_WITH_LOSS_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        isClaimsAssociateWithLossLoading: true,\r\n      };\r\n    case 'CLAIMS_ASSOCIATE_WITH_LOSS_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        claimsAssociateWithLoss: action.payload,\r\n        isClaimsAssociateWithLossLoading: false,\r\n      };\r\n    case 'CLAIMREF_EDIT_NOTES_SUCCESS':\r\n      // eslint-disable-next-line array-callback-return\r\n      const getNotesItems = state.notes.items.filter((item, idx) =>\r\n        item.caseIncidentNotesID !== action.payload.caseIncidentNotesID ? item : null\r\n      );\r\n      return {\r\n        ...state,\r\n        notes: {\r\n          ...state.notes,\r\n          items: [action.payload, ...getNotesItems],\r\n        },\r\n      };\r\n    case 'CLAIMS_SAVE_NOTES_POST_SUCCESS':\r\n      const isArrayLargerThanPageSize = state.notes.items.length + 1 > state.notes.pageSize;\r\n      return {\r\n        ...state,\r\n        notes: {\r\n          ...state.notes,\r\n          items: isArrayLargerThanPageSize ? [action.payload, ...state.notes.items.slice(0, -1)] : [action.payload, ...state.notes.items],\r\n          itemsTotal: state.notes.itemsTotal + 1,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_ADHOC_TASK_RESET_STATUS':\r\n    case 'CLAIMS_SAVE_ADHOC_TASK_POST_REQUEST':\r\n    case 'CLAIMS_EDIT_ADHOC_TASK_POST_REQUEST':\r\n      return {\r\n        ...state,\r\n        adhocTask: { ...initialState.adhocTask },\r\n      };\r\n    case 'CLAIMS_SAVE_ADHOC_TASK_POST_SUCCESS':\r\n      const createAdHocResp = action?.payload;\r\n      return {\r\n        ...state,\r\n        adhocTask: {\r\n          status: createAdHocResp?.status === 'OK' || initialState.adhocTask.status,\r\n          data: createAdHocResp?.data,\r\n          documents: initialState.adhocTask.documents,\r\n        },\r\n      };\r\n    case 'CLAIMS_SAVE_ADHOC_TASK_POST_FAILURE':\r\n    case 'CLAIMS_EDIT_ADHOC_TASK_POST_FAILURE':\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        adhocTask: { ...initialState.rfiInfo },\r\n      };\r\n\r\n    case 'CLAIMS_EDIT_ADHOC_TASK_POST_SUCCESS':\r\n      const editAdHocResp = action?.payload;\r\n      const taskDetails = { ...action?.payload?.taskDetails };\r\n      const editAdHocDetails = { ...editAdHocResp?.data };\r\n      const formattedResp = { ...taskDetails, name: editAdHocDetails?.taskName, dueDate: editAdHocDetails?.targetDueDate };\r\n      return {\r\n        ...state,\r\n        adhocTask: {\r\n          status: editAdHocResp?.status === 'OK' || initialState.adhocTask.status,\r\n          data: { ...formattedResp, ...editAdHocDetails },\r\n          ...state.adhocTask,\r\n        },\r\n      };\r\n    case 'SET_ADHOC_TASK_DOCUMENTS':\r\n      return {\r\n        ...state,\r\n        adhocTask: {\r\n          ...state.adhocTask,\r\n          documents: action?.payload,\r\n        },\r\n      };\r\n    case 'CLAIMS_SAVE_RFI_POST_REQUEST':\r\n      return {\r\n        ...state,\r\n        rfiInfo: initialState.rfiInfo,\r\n      };\r\n    case 'CLAIMS_SAVE_RFI_POST_RESET':\r\n      return {\r\n        ...state,\r\n        rfiInfo: { ...initialState.rfiInfo },\r\n      };\r\n    case 'CLAIMS_SAVE_RFI_POST_SUCCESS':\r\n      return {\r\n        ...state,\r\n        rfiInfo: {\r\n          data: action.payload,\r\n          documents: initialState.rfiInfo.documents\r\n        }\r\n      };\r\n    case 'CLAIMS_SAVE_RFI_POST_FAILURE':\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        rfiInfo: initialState.rfiInfo,\r\n      };\r\n    case 'SET_RFI_DOCUMENTS':\r\n      return {\r\n        ...state,\r\n        rfiInfo: {\r\n          data: state.rfiInfo.data,\r\n          documents: action.payload\r\n        }\r\n      }\r\n\r\n    case 'CLOSE_SANCTIONS_CHECK_SUCCESS':\r\n    case 'CLOSE_CLAIMS_POST_SUCCESS':\r\n      return {\r\n        ...state,\r\n      };\r\n    case 'CLAIMS_CAT_CODES_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        catCodes: action.payload,\r\n      };\r\n    case 'CLAIMS_CASE_INCIDENT_DETAILS_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        caseIncidentDetails: action.payload,\r\n      };\r\n    case 'CLAIMS_CASE_INCIDENT_DETAILS_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        caseIncidentDetails: initialState.caseIncidentDetails,\r\n      };\r\n    case 'RESET_CASE_INCIDENT_DETAILS':\r\n      return {\r\n        ...state,\r\n        caseIncidentDetails: initialState.caseIncidentDetails,\r\n      };\r\n    case 'CLAIMS_STATUSES_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        statuses: action.payload,\r\n        claimsStatusObj: action.payload?.reduce((acc, status) => {\r\n          const { name, id } = status;\r\n          return { ...acc, [name]: id?.toString() };\r\n        }, {}),\r\n      };\r\n    case 'CLAIMS_CLAIMANT_NAMES_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        claimantNames: action.payload,\r\n      };\r\n    case 'CLAIMS_CLAIMANT_NAMES_UPDATE_SUCCESS':\r\n      return {\r\n        ...state,\r\n        claimantNames: [...state.claimantNames, { id: action.payload.id + 1, name: action.payload.name }],\r\n      };\r\n    case 'CLAIMS_LOSS_QUALIFIERS_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        lossQualifiers: action.payload,\r\n      };\r\n    case 'CLAIMS_POLICY_INFORMATION_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        isPolicyInfoLoading: true,\r\n      };\r\n    case 'CLAIMS_POLICY_INFORMATION_GET_SUCCESS':\r\n      const selectPolicyType = action.payload.policyType;\r\n      return {\r\n        ...state,\r\n        policyInformation: action.payload,\r\n        sectionEnabledUG: constants.CLAIM_SECTION_ENABLED_UG.indexOf(selectPolicyType) > -1 || false,\r\n        isPolicyInfoLoading: false,\r\n      };\r\n    case 'CLAIMS_POLICY_INFORMATION_GET_FAILURE':\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        isPolicyInfoLoading: false,\r\n      };\r\n    case 'GET_LOSS_INFORMATION_REQUEST':\r\n      return {\r\n        ...state,\r\n        lossInformation: action.payload,\r\n        isLossInfoLoading: true,\r\n      };\r\n    case 'LOSS_SELECT':\r\n      return {\r\n        ...state,\r\n        selectedLossInformation: action.payload.lossObj,\r\n      };\r\n    case 'RESET_SELECTED_LOSS_ITEM':\r\n      return {\r\n        ...state,\r\n        selectedLossInformation: initialState.selectedLossInformation,\r\n      };\r\n    case 'GET_LOSS_INFORMATION_FAILURE':\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        isLossInfoLoading: false,\r\n      };\r\n\r\n    case 'CLAIMS_UNDERWRITING_GROUPS_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        underWritingGroups: {\r\n          ...state.underWritingGroups,\r\n          items: action.payload.map((item) => ({ ...item, selected: false })),\r\n          percentageOfSelected: 0,\r\n        },\r\n      };\r\n    case 'RESET_CLAIMS_UNDERWRITING_GROUPS':\r\n      return {\r\n        ...state,\r\n        underWritingGroups: {\r\n          ...state.underWritingGroups,\r\n          items: [],\r\n          percentageOfSelected: 0,\r\n        },\r\n        claimsInformation: {\r\n          ...state.claimsInformation,\r\n          policyUnderWritingGroupDtoList: [],\r\n        },\r\n      };\r\n    case 'CLAIMS_UNDERWRITING_GROUPS_SORTING':\r\n      const selected = state.underWritingGroups.items\r\n        .filter((item) => action.payload.includes(item.groupRef))\r\n        .map((item) => ({ ...item, selected: true }));\r\n      const remained = state.underWritingGroups.items\r\n        .filter((item) => !action.payload.includes(item.groupRef))\r\n        .map((item) => ({ ...item, selected: false }));\r\n      const initial = state.underWritingGroups.items\r\n        .sort((a, b) => a.groupRef.localeCompare(b.groupRef))\r\n        .map((item) => ({ ...item, selected: false }));\r\n\r\n      let selectedPercentage = selected?.reduce((acc, current) => acc + current.percentage, 0);\r\n      if (Math.floor(selectedPercentage) !== selectedPercentage && selectedPercentage?.toString()?.split('.')[1]?.length > 5) {\r\n        selectedPercentage = selectedPercentage.toFixed(5);\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        underWritingGroups: {\r\n          ...state.underWritingGroups,\r\n          items: action.payload.length > 0 ? [...selected, ...remained] : initial,\r\n          percentageOfSelected: action.payload.length > 0 ? selectedPercentage : 0,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_UNDERWRITING_GROUPS_BY_SECTION_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        underWritingGroups: {\r\n          ...initialState.underWritingGroups,\r\n          isLoading: true,\r\n        },\r\n      };\r\n    case 'CLAIMS_UNDERWRITING_GROUPS_BY_SECTION_GET_SUCCESS':\r\n      const { sortedUnderwritingGroups } = action.payload;\r\n      return {\r\n        ...state,\r\n        underWritingGroups: {\r\n          ...state.underWritingGroups,\r\n          items: utils.generic.isValidArray(sortedUnderwritingGroups)\r\n            ? sortedUnderwritingGroups?.filter((item) => Number(item?.isDisabled) === 0)?.map((item) => ({ ...item, selected: false }))\r\n            : [],\r\n          percentageOfSelected: 0,\r\n          isLoading: false,\r\n        },\r\n      };\r\n    case 'CLAIMS_UNDERWRITING_GROUPS_BY_SECTION_GET_FAILURE':\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        underWritingGroups: {\r\n          ...initialState.underWritingGroups,\r\n        },\r\n      };\r\n\r\n    case 'CLAIM_STATUS_EDIT_SUCCESS':\r\n      const { data, id } = action.payload;\r\n      const updatedStatus = state.claims.items.map((item) => {\r\n        if (item.claimID === id) {\r\n          return {\r\n            ...item,\r\n            claimStatusID: data.claimStatusId,\r\n          };\r\n        } else {\r\n          return item;\r\n        }\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        claims: {\r\n          ...state.claims,\r\n          items: updatedStatus,\r\n        },\r\n      };\r\n    case 'LOSS_INFORMATION_EDIT_SUCCESS':\r\n      const updatedLoss = {\r\n        ...state.lossInformation,\r\n        catCodesID: action.payload.catCodesID,\r\n        isActive: action.payload.isActive,\r\n        lossDescription: action.payload.lossDescription,\r\n        lossName: action.payload.lossName,\r\n        fromDate: action.payload.fromDate,\r\n        toDate: action.payload.toDate,\r\n        firstContactDate: action.payload.firstContactDate,\r\n      };\r\n\r\n      return {\r\n        ...state,\r\n        lossInformation: updatedLoss,\r\n      };\r\n\r\n    case 'CLAIMS_PROCESSING_GET_REQUEST':\r\n      const { newRequestType } = action.payload.appliedParams;\r\n      return {\r\n        ...state,\r\n        processing: {\r\n          ...state.processing,\r\n          ...(newRequestType === constants.CLAIM_PROCESSING_REQ_TYPES.filter ? { isloadingFilters: true } : {}),\r\n        },\r\n      };\r\n    case 'CLAIMS_PROCESSING_GET_SUCCESS':\r\n      const { filterValue, searchValue } = action.payload.items;\r\n      const pageSize = get(action.payload.pagination, 'size', initialState.processing.pageSize);\r\n\r\n      const claimRequestType = action.payload.requestType;\r\n      const isNonfilterTypCall = claimRequestType !== constants.CLAIM_PROCESSING_REQ_TYPES.filter;\r\n\r\n      return {\r\n        ...state,\r\n        processing: {\r\n          ...state.processing,\r\n          ...(isNonfilterTypCall\r\n            ? {\r\n                items: [...(utils.generic.isValidArray(searchValue) ? searchValue : [])],\r\n                itemsTotal: get(action.payload.pagination, 'totalElements', 0),\r\n                page: get(action.payload.pagination, 'page', 0) + 1,\r\n                pageSize: pageSize !== 0 ? pageSize : initialState.processing.pageSize,\r\n                pageTotal: get(action.payload.pagination, 'totalPages', 0),\r\n                query: get(action.payload.pagination, 'search') || '',\r\n                searchBy: get(action.payload.pagination, 'searchBy') || '',\r\n              }\r\n            : {}),\r\n          sort: {\r\n            by: get(action.payload.pagination, 'orderBy') || '',\r\n            direction: (get(action.payload.pagination, 'direction') || '').toLowerCase(),\r\n          },\r\n          filters: !isNonfilterTypCall ? (filterValue ? filterValue : { ...state.processing.filters }) : { ...state.processing.filters },\r\n          isloadingFilters: isNonfilterTypCall ? state.processing.isloadingFilters : false,\r\n          selected: [],\r\n        },\r\n      };\r\n    case 'CLAIMS_PROCESSING_GET_FAILURE':\r\n      return {\r\n        ...state,\r\n        error: action.payload?.error,\r\n        processing: {\r\n          ...state.processing,\r\n          isloadingFilters: action.payload?.isNonFilterTypeCall ? state.processing.isloadingFilters : false,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_PROCESSING_UPDATE_CLAIM_SUCCESS':\r\n      const updateClaimsIds = action.payload.claims?.map((claim) => claim.claimId);\r\n      const updateClaimsValues = action.payload.values;\r\n      const updateClaimsName = updateClaimsValues?.assignTo?.fullName || '';\r\n      const updateClaimsEmail = updateClaimsValues?.assignTo?.email || '';\r\n      const updateClaimsComplexity = updateClaimsValues?.complexity;\r\n      const updateClaimsComplexityBasis = updateClaimsValues?.complexityBasis?.complexityRulesValue;\r\n      const updateClaimsPriority = updateClaimsValues?.priority;\r\n      const updateClaimsPriorityId = updateClaimsValues?.priorityId;\r\n      const updateClaimsTeam = updateClaimsValues?.team;\r\n\r\n      return {\r\n        ...state,\r\n        // this updates the claim data for the dashboard page\r\n        claimsInformation: {\r\n          ...state.claimsInformation,\r\n          complexity: updateClaimsComplexity || state.claimsInformation.complexity,\r\n          complexityBasis: updateClaimsComplexityBasis || state.claimsInformation.complexityBasis,\r\n          priorityID: updateClaimsPriorityId || state.claimsInformation.priorityID,\r\n          priorityDescription: updateClaimsPriority || state.claimsInformation.priorityDescription,\r\n        },\r\n        // this updates the claims data on the claims table tab\r\n        claimsTab: {\r\n          ...state.claimsTab,\r\n          tableDetails: {\r\n            ...state.claimsTab.tableDetails,\r\n            items: state.claimsTab.tableDetails.items?.map((claim) => {\r\n              if (updateClaimsIds.includes(claim.claimId)) {\r\n                return {\r\n                  ...claim,\r\n                  assignedTo: updateClaimsName,\r\n                  assignedToEmail: updateClaimsEmail,\r\n                  complexity: updateClaimsComplexity || claim.complexity,\r\n                  complexityBasis: updateClaimsComplexityBasis || claim.complexityBasis,\r\n                  priority: updateClaimsPriority || claim.priority,\r\n                  priorityId: updateClaimsPriorityId || claim.priorityId,\r\n                  team: updateClaimsTeam || claim.team,\r\n                };\r\n              } else {\r\n                return claim;\r\n              }\r\n            }),\r\n            selected: state.claimsTab.tableDetails.selected?.map((claim) => {\r\n              if (updateClaimsIds.includes(claim.claimId)) {\r\n                return {\r\n                  ...claim,\r\n                  assignedTo: updateClaimsName,\r\n                  assignedToEmail: updateClaimsEmail,\r\n                  complexity: updateClaimsComplexity || claim.complexity,\r\n                  complexityBasis: updateClaimsComplexityBasis || claim.complexityBasis,\r\n                  priority: updateClaimsPriority || claim.priority,\r\n                  priorityId: updateClaimsPriorityId || claim.priorityId,\r\n                  team: updateClaimsTeam || claim.team,\r\n                };\r\n              } else {\r\n                return claim;\r\n              }\r\n            }),\r\n          },\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_PROCESSING_FILTERS_RESET':\r\n      return {\r\n        ...state,\r\n        processing: {\r\n          ...state.processing,\r\n          filters: initialState.processing.filters,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_PROCESSING_SEARCH_RESET':\r\n      return {\r\n        ...state,\r\n        processing: {\r\n          ...state.processing,\r\n          query: initialState.processing.query,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_PROCESSING_ITEMS_RESET':\r\n      return {\r\n        ...state,\r\n        processing: {\r\n          ...state.processing,\r\n          items: initialState.processing.items,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_PROCESSING_SELECT':\r\n      return {\r\n        ...state,\r\n        processing: {\r\n          ...state.processing,\r\n          selected: action.payload.forceSingleItem\r\n            ? [action.payload.claimObj]\r\n            : xorBy(state.processing.selected || [], [action.payload.claimObj], 'processID'),\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_PROCESSING_SELECTED_RESET':\r\n      return {\r\n        ...state,\r\n        processing: {\r\n          ...state.processing,\r\n          selected: [],\r\n        },\r\n      };\r\n\r\n    case 'CLAIM_NOTES_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        notes: {\r\n          items: action.payload.items || [],\r\n          itemsTotal: get(action.payload.pagination, 'totalElements', 0),\r\n          page: get(action.payload.pagination, 'page', 0),\r\n          pageSize: get(action.payload.pagination, 'size', initialState.notes.pageSize),\r\n          pageTotal: get(action.payload.pagination, 'totalPages', 0),\r\n          query: get(action.payload.pagination, 'search') || '',\r\n          sort: {\r\n            ...state.notes.sort,\r\n          },\r\n          filters: action.payload.filters !== null ? action.payload.filters : state.notes.filters,\r\n        },\r\n      };\r\n\r\n    case 'CLAIM_RFIS_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        rfis: {\r\n          items: action.payload.items || [],\r\n          itemsTotal: get(action.payload.pagination, 'totalElements', 0),\r\n          page: get(action.payload.pagination, 'page', 0),\r\n          pageSize: get(action.payload.pagination, 'size', initialState.rfis.pageSize),\r\n          pageTotal: get(action.payload.pagination, 'totalPages', 0),\r\n          query: get(action.payload.pagination, 'search') || '',\r\n          sort: {\r\n            ...state.rfis.sort,\r\n          },\r\n          filters: action.payload.filters !== null ? action.payload.filters : state.rfis.filters,\r\n        },\r\n      };\r\n\r\n    case 'CLAIM_AUDIT_TRAIL_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        audits: {\r\n          items: action.payload.items || [],\r\n          itemsTotal: get(action.payload.pagination, 'totalElements', 0),\r\n          page: get(action.payload.pagination, 'page', 0),\r\n          pageSize: get(action.payload.pagination, 'size', initialState.audits.pageSize),\r\n          pageTotal: get(action.payload.pagination, 'totalPages', 0),\r\n          query: get(action.payload.pagination, 'search') || '',\r\n          sort: {\r\n            ...state.audits.sort,\r\n          },\r\n        },\r\n      };\r\n    case 'CLAIMS_LOSS_ACTIONS_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        lossActions: {\r\n          items: action.payload.data || [],\r\n          itemsTotal: get(action.payload.pagination, 'totalElements', 0),\r\n          page: get(action.payload.pagination, 'page', 0),\r\n          pageSize: get(action.payload.pagination, 'size', initialState.lossActions.pageSize),\r\n          pageTotal: get(action.payload.pagination, 'totalPages', 0),\r\n          query: get(action.payload.pagination, 'search') || '',\r\n          sort: {\r\n            ...state.lossActions.sort,\r\n          },\r\n          filters: action.payload.filters !== null ? action.payload.filters : state.lossActions.filters,\r\n        },\r\n      };\r\n    case 'CLAIM_AUDIT_TRAIL_FILTERS_RESET':\r\n      return {\r\n        ...state,\r\n        audits: {\r\n          ...state.audits,\r\n          filters: initialState.audits.filters,\r\n        },\r\n      };\r\n\r\n    case 'CLAIM_AUDIT_TRAIL_ITEMS_RESET':\r\n      return {\r\n        ...state,\r\n        audits: {\r\n          ...state.audits,\r\n          items: initialState.audits.items,\r\n        },\r\n      };\r\n\r\n    case 'CLAIM_AUDIT_TRAIL_SEARCH_RESET':\r\n      return {\r\n        ...state,\r\n        audits: {\r\n          ...state.audits,\r\n          query: initialState.audits.query,\r\n        },\r\n      };\r\n\r\n    case 'CLAIM_NOTES_RESET':\r\n      return {\r\n        ...state,\r\n        notes: initialState.notes,\r\n      };\r\n\r\n    case 'CLAIM_RFIS_RESET':\r\n      return {\r\n        ...state,\r\n        rfis: initialState.rfis,\r\n      };\r\n\r\n    case 'CLAIM_TASK_NOTES_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        taskNotes: {\r\n          items: action.payload.items || [],\r\n          itemsTotal: get(action.payload.pagination, 'totalElements', 0),\r\n          page: get(action.payload.pagination, 'page', 0),\r\n          pageSize: get(action.payload.pagination, 'size', initialState.taskNotes.pageSize),\r\n          pageTotal: get(action.payload.pagination, 'totalPages', 0),\r\n          query: get(action.payload.pagination, 'search') || '',\r\n          sort: {\r\n            ...state.taskNotes.sort,\r\n          },\r\n          filters: action.payload.filters ?? state.taskNotes.filters,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_TASK_ADD_NOTE_SUCCESS':\r\n      const isTaskNotesArrayLargerThanPageSize = state.taskNotes.items.length + 1 > state.taskNotes.pageSize;\r\n      return {\r\n        ...state,\r\n        taskNotes: {\r\n          items: isTaskNotesArrayLargerThanPageSize\r\n            ? [action.payload, ...state.taskNotes.items.slice(0, -1)]\r\n            : [action.payload, ...state.taskNotes.items],\r\n          itemsTotal: state.taskNotes.itemsTotal + 1,\r\n          page: get(action.payload.pagination, 'page', 0),\r\n          pageSize: get(action.payload.pagination, 'size', initialState.taskNotes.pageSize),\r\n          pageTotal: get(action.payload.pagination, 'totalPages', 0),\r\n          query: get(action.payload.pagination, 'search') || '',\r\n          sort: {\r\n            ...state.taskNotes.sort,\r\n          },\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_TASK_EDIT_NOTE_SUCCESS':\r\n      return {\r\n        ...state,\r\n        taskNotes: {\r\n          items: state.taskNotes.items.map((item) => {\r\n            if (item.caseIncidentNotesID === action.payload.caseIncidentNotesID) {\r\n              return {\r\n                ...action.payload,\r\n              };\r\n            }\r\n\r\n            return item;\r\n          }),\r\n          sort: {\r\n            ...state.taskNotes.sort,\r\n          },\r\n        },\r\n      };\r\n\r\n    case 'SET_CLAIMS_NOTES_TAB_FILTER_VALUES':\r\n      return {\r\n        ...state,\r\n        notes: {\r\n          ...state.notes,\r\n          filters: action.payload,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_TASKS_PROCESSING_GET_REQUEST':\r\n      const { newRequestType: taskReqType } = action.payload.appliedParams;\r\n      return {\r\n        ...state,\r\n        tasksProcessing: {\r\n          ...state.tasksProcessing,\r\n          ...(taskReqType === constants.CLAIM_PROCESSING_REQ_TYPES.filter ? { isloadingFilters: true } : {}),\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_TASKS_PROCESSING_GET_SUCCESS':\r\n      const {\r\n        requestType,\r\n        taskType,\r\n        sortBy: taskSortBy,\r\n        dir: taskDir,\r\n        query,\r\n        navigation,\r\n        items: { filterValue: tasksFiltersValues, searchValue: tasksSearchValues, rfiTasksCount: taskRfiCount },\r\n        pagination: tasksPagination,\r\n        appliedFilters: tasksAppliedFilters,\r\n      } = action.payload;\r\n\r\n      const initTaskProcessing = initialState.tasksProcessing;\r\n      const initTaskProcessingSort = initTaskProcessing.sort;\r\n      const stateTaskProcessing = state.tasksProcessing;\r\n      const prevTaskProcessingSelected = stateTaskProcessing.selected;\r\n      const isNonfilterTypeCall = requestType !== constants.CLAIM_PROCESSING_REQ_TYPES.filter;\r\n\r\n      return {\r\n        ...state,\r\n        tasksProcessing: {\r\n          ...stateTaskProcessing,\r\n          ...(isNonfilterTypeCall\r\n            ? {\r\n                itemsTotal: get(tasksPagination, 'totalElements', 0),\r\n                page: get(tasksPagination, 'page', 0) + 1,\r\n                pageSize: get(tasksPagination, 'size', initialState.tasksProcessing.pageSize),\r\n                pageTotal: get(tasksPagination, 'totalPages', 0),\r\n                query: get(tasksPagination, 'searchBy') || query || '',\r\n                items: tasksSearchValues || [],\r\n                rfiCount: taskRfiCount || 0,\r\n              }\r\n            : {}),\r\n          sort: {\r\n            by: taskSortBy || initTaskProcessingSort.by,\r\n            direction: taskDir || initTaskProcessingSort.direction,\r\n          },\r\n          filters: isNonfilterTypeCall ? stateTaskProcessing.filters : tasksFiltersValues ? tasksFiltersValues : {},\r\n          appliedFilters: tasksAppliedFilters?.length ? tasksAppliedFilters : initTaskProcessing.appliedFilters,\r\n          selected: navigation ? prevTaskProcessingSelected : [],\r\n          taskType: taskType || initTaskProcessing.taskType,\r\n          isloadingFilters: isNonfilterTypeCall ? stateTaskProcessing.isloadingFilters : false,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_TASKS_PROCESSING_GET_FAILURE':\r\n      const { error: taskProcessingError, isNonFilterTypeCall } = action.payload;\r\n      return {\r\n        ...state,\r\n        error: taskProcessingError,\r\n        tasksProcessing: {\r\n          ...state.tasksProcessing,\r\n          items: isNonFilterTypeCall ? initialState.tasksProcessing.items : state.tasksProcessing.items,\r\n          isloadingFilters: isNonFilterTypeCall ? state.processing.isloadingFilters : false,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_TASKS_PROCESSING_FILTERS_RESET':\r\n      return {\r\n        ...state,\r\n        tasksProcessing: {\r\n          ...state.tasksProcessing,\r\n          appliedFilters: initialState.tasksProcessing.appliedFilters,\r\n        },\r\n      };\r\n    case 'CLAIMS_TASKS_PROCESSING_LIST_FILTERS_RESET':\r\n      return {\r\n        ...state,\r\n        tasksTab: {\r\n          ...state.tasksTab,\r\n          appliedFilters: initialState.tasksTab.appliedFilters,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_TASKS_PROCESSING_SEARCH_RESET':\r\n      return {\r\n        ...state,\r\n        tasksProcessing: {\r\n          ...state.tasksProcessing,\r\n          query: initialState.tasksProcessing.query,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_TASKS_PROCESSING_LIST_SEARCH_RESET':\r\n      return {\r\n        ...state,\r\n        tasksTab: {\r\n          ...state.tasksTab,\r\n          query: initialState.tasksTab.query,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_TASKS_PROCESSING_SELECT':\r\n      const { taskObj: taskSelectObj, keepPreviousTasks } = action.payload;\r\n      const newTasksSelectedArray = keepPreviousTasks\r\n        ? xorBy(state.tasksProcessing.selected || [], [taskSelectObj], 'taskRef')\r\n        : [taskSelectObj];\r\n\r\n      return {\r\n        ...state,\r\n        tasksProcessing: {\r\n          ...state.tasksProcessing,\r\n          selected: newTasksSelectedArray,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_TASKS_PROCESSING_LIST_SELECT':\r\n      const newTasksSelectedList = action.payload?.keepPreviousTasks\r\n        ? xorBy(state.tasksTab.selected || [], [action.payload?.taskObj], 'taskRef')\r\n        : [action.payload?.taskObj];\r\n\r\n      return {\r\n        ...state,\r\n        tasksTab: {\r\n          ...state.tasksTab,\r\n          selected: newTasksSelectedList,\r\n        },\r\n      };\r\n    case 'CLAIMS_TASKS_PROCESSING_LIST_GET_REQUEST':\r\n      const isNonfilterCalls = action.payload?.requestType !== constants.CLAIM_PROCESSING_REQ_TYPES.filter;\r\n      return {\r\n        ...state,\r\n        tasksTab: {\r\n          ...state.tasksTab,\r\n          isTableLoading: isNonfilterCalls,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_TASKS_PROCESSING_LIST_GET_SUCCESS':\r\n      const initTaskProcessingList = initialState.tasksTab;\r\n      const initTaskProcessingListSort = initTaskProcessingList.sort;\r\n      const stateTaskProcessingList = state.tasksTab;\r\n      const prevTaskProcessingListSelected = stateTaskProcessingList.selected;\r\n      const isNonfilterTypeCalls = action.payload?.requestTypes !== constants.CLAIM_PROCESSING_REQ_TYPES.filter;\r\n      return {\r\n        ...state,\r\n        tasksTab: {\r\n          ...stateTaskProcessingList,\r\n          ...(isNonfilterTypeCalls\r\n            ? {\r\n                itemsTotal: get(action.payload?.pagination, 'totalElements', 0),\r\n                page: get(action.payload?.pagination, 'page', 0) + 1,\r\n                pageSize: get(action.payload?.pagination, 'size', initialState.tasksTab.pageSize),\r\n                pageTotal: get(action.payload?.pagination, 'totalPages', 0),\r\n                query: get(action.payload?.pagination, 'searchBy') || action.payload?.query || '',\r\n                items: action.payload?.items?.searchValue || [],\r\n                rfiCount: action.payload?.items?.rfiTasksCount || 0,\r\n                isTableLoading: false,\r\n              }\r\n            : {}),\r\n          sort: {\r\n            by: action.payload?.sortBy || initTaskProcessingListSort.by,\r\n            direction: action.payload?.dir || initTaskProcessingListSort.direction,\r\n          },\r\n          filters: isNonfilterTypeCalls\r\n            ? stateTaskProcessingList.filters\r\n            : action.payload?.items?.filterValue\r\n            ? action.payload?.items?.filterValue\r\n            : {},\r\n          appliedFilters: utils.generic.isValidObject(action.payload?.appliedFilters)\r\n            ? action.payload?.appliedFilters\r\n            : initTaskProcessingList.appliedFilters,\r\n          selected: action.payload?.navigation ? prevTaskProcessingListSelected : [],\r\n          taskType: action.payload?.taskType || initTaskProcessingList.taskType,\r\n          isloadingFilters: isNonfilterTypeCalls ? stateTaskProcessingList.isloadingFilters : false,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_TASKS_PROCESSING_LIST_GET_FAILURE':\r\n      return {\r\n        ...state,\r\n        error: action.payload?.error,\r\n        tasksTab: {\r\n          ...state.tasksTab,\r\n          items: action.payload?.isNonFilterTypeCall ? initialState.tasksTab.items : state.tasksTab.items,\r\n          isloadingFilters: action.payload?.isNonFilterTypeCall ? state.processing.isloadingFilters : false,\r\n          isTableLoading: false,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_TASK_DASHBOARD_DETAIL_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        taskDashboard: {\r\n          ...state.taskDashboard,\r\n          isLoading: true,\r\n        },\r\n      };\r\n    case 'CLAIMS_TASK_DASHBOARD_DETAIL_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        taskDashboard: {\r\n          ...state.taskDashboard,\r\n          taskDetails: { items: action.payload.items, query: action.payload.query },\r\n          isLoading: false,\r\n        },\r\n        tasksProcessing: {\r\n          ...state.tasksProcessing,\r\n          selected: action.payload.items || [],\r\n        },\r\n      };\r\n    case 'CLAIMS_TASK_DASHBOARD_DETAIL_GET_FAILURE':\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        taskDashboard: {\r\n          ...state.taskDashboard,\r\n          isLoading: false,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_TASK_DASHBOARD_DETAIL_RESET':\r\n      return {\r\n        ...state,\r\n        taskDashboard: {\r\n          ...state.taskDashboard,\r\n          taskDetails: initialState.taskDashboard.taskDetails,\r\n        },\r\n      };\r\n\r\n    case 'CURRENCY_PURCHASED_VALUE_GET_SUCCESS':\r\n      const selectedOption = action.payload?.data;\r\n      return {\r\n        ...state,\r\n        taskDashboard: {\r\n          ...state.taskDashboard,\r\n          purchasedCurrencyRequired: selectedOption,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_TASK_PRIORITY_POST_SUCCESS':\r\n      return {\r\n        ...state,\r\n        claimsRefData: action.payload,\r\n      };\r\n\r\n    case 'CLAIMS_TASKS_PROCESSING_RESET':\r\n      return {\r\n        ...state,\r\n        tasksProcessing: {\r\n          ...state.tasksProcessing,\r\n          items: initialState.tasksProcessing.items,\r\n        },\r\n      };\r\n    case 'CLAIMS_GET_RFI_HISTORY_REQUEST':\r\n      return {\r\n        ...state,\r\n        rfiHistory: { data: [], isLoading: true },\r\n      };\r\n    case 'CLAIMS_GET_RFI_HISTORY_SUCCESS':\r\n      return {\r\n        ...state,\r\n        rfiHistory: { data: action.payload, isLoading: false },\r\n      };\r\n    case 'CLAIMS_GET_RFI_HISTORY_FAILURE':\r\n      return {\r\n        ...state,\r\n        rfiHistory: initialState.rfiHistory,\r\n        error: action.payload,\r\n      };\r\n    case 'CLAIMS_TASK_SANCTIONS_CHECK_POST_SUCCESS':\r\n      return {\r\n        ...state,\r\n        sanctionsCheck: action.payload,\r\n        loading: false,\r\n      };\r\n    case 'CLAIM_PROCESSING_TASK_TYPE_SELECTED':\r\n      const claimProcessingTaskTypeSelected = action.payload;\r\n      return {\r\n        ...state,\r\n        tasksProcessing: {\r\n          ...state.tasksProcessing,\r\n          selectedTaskType: claimProcessingTaskTypeSelected,\r\n        },\r\n      };\r\n\r\n    case 'CLAIM_PROCESSING_PREVIOUS_TASK_TYPE_SELECTED':\r\n      const claimProcessingPreviousTaskTypeSelected = action.payload;\r\n      return {\r\n        ...state,\r\n        tasksTab: {\r\n          ...state.tasksTab,\r\n          previousTaskType: claimProcessingPreviousTaskTypeSelected,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_TASK_PROCESSING_GET_CHECKLIST_SUCCESS':\r\n      return {\r\n        ...state,\r\n        taskDashboard: {\r\n          ...state.taskDashboard,\r\n          checkList: action.payload,\r\n        },\r\n      };\r\n    case 'CLAIMS_TASK_PROCESSING_GET_NEXT_TASKLIST_SUCCESS':\r\n      return {\r\n        ...state,\r\n        taskDashboard: {\r\n          ...state.taskDashboard,\r\n          nextActions: action.payload,\r\n        },\r\n      };\r\n    case 'CLAIMS_TASK_PROCESSING_SET_CHECKLIST_CHANGES':\r\n      return {\r\n        ...state,\r\n        taskDashboard: {\r\n          ...state.taskDashboard,\r\n          checkListChanges: action.payload,\r\n        },\r\n      };\r\n    case 'CLAIMS_TASK_PROCESSING_SAVE_CHECKLIST_ACTIONS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        taskDashboard: {\r\n          ...state.taskDashboard,\r\n          checkListChangesPushed: action.payload,\r\n        },\r\n      };\r\n    case 'CLAIMS_TASK_PROCESSING_SAVE_NEXT_ACTION_SUCCESS':\r\n      return {\r\n        ...state,\r\n        taskDashboard: {\r\n          ...state.taskDashboard,\r\n          nextActionChangesPushed: action.payload,\r\n        },\r\n      };\r\n    case 'CLAIMS_TASK_PROCESSING_RESET_CHECKLIST_DATA':\r\n      return {\r\n        ...state,\r\n        taskDashboard: {\r\n          ...initialState.taskDashboard,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMREF_TASKS_REQUEST':\r\n      const { newRequestType: refTaskReqType } = action.payload.appliedParams;\r\n      return {\r\n        ...state,\r\n        refTabTasks: {\r\n          ...state.refTabTasks,\r\n          ...(refTaskReqType === constants.CLAIM_PROCESSING_REQ_TYPES.filter ? { isloadingFilters: true } : {}),\r\n        },\r\n      };\r\n\r\n    case 'CLAIMREF_TASKS_SUCCESS':\r\n      const {\r\n        requestType: refTaskReqstType,\r\n        sortBy: claimRefSortBy,\r\n        dir: claimRefDir,\r\n        query: claimRefQuery,\r\n        items: { filterValue: refTasksFiltersValues, searchValue: refTasksSearchValues },\r\n        pagination: refTasksPagination,\r\n        appliedFilters: refTasksAppliedFilters,\r\n      } = action.payload;\r\n\r\n      const initRefTabTasks = initialState.refTabTasks;\r\n      const initRefTabTasksSort = initRefTabTasks.sort;\r\n      const stateRefTabTasks = state.refTabTasks;\r\n      const isNonfilterTypeReq = refTaskReqstType !== constants.CLAIM_PROCESSING_REQ_TYPES.filter;\r\n\r\n      return {\r\n        ...state,\r\n        refTabTasks: {\r\n          ...stateRefTabTasks,\r\n          ...(isNonfilterTypeReq\r\n            ? {\r\n                itemsTotal: get(refTasksPagination, 'totalElements', 0),\r\n                page: get(refTasksPagination, 'page', 0) + 1,\r\n                pageSize: get(refTasksPagination, 'size', initRefTabTasks.pageSize),\r\n                pageTotal: get(refTasksPagination, 'totalPages', 0),\r\n                query: get(refTasksPagination, 'searchBy') || claimRefQuery || '',\r\n                items: refTasksSearchValues || [],\r\n              }\r\n            : {}),\r\n          sort: {\r\n            by: claimRefSortBy || initRefTabTasksSort.by,\r\n            direction: claimRefDir || initRefTabTasksSort.direction,\r\n          },\r\n          filters: isNonfilterTypeReq ? stateRefTabTasks.filters : refTasksFiltersValues ? refTasksFiltersValues : {},\r\n          appliedFilters: refTasksAppliedFilters?.length ? refTasksAppliedFilters : initRefTabTasks.appliedFilters,\r\n        },\r\n        loading: false,\r\n      };\r\n\r\n    case 'CLAIMREF_TASKS_FAILURE':\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        refTabTasks: {\r\n          ...state.refTabTasks,\r\n          isloadingFilters: false,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_GET_SUCCESS':\r\n      const claimsPagination = action.payload.pagination || {};\r\n\r\n      return {\r\n        ...state,\r\n        claims: {\r\n          ...state.claims,\r\n          itemsTotal: get(claimsPagination, 'totalElements', 0),\r\n          page: get(claimsPagination, 'page', 0),\r\n          pageSize: get(claimsPagination, 'size', initialState.claims.pageSize),\r\n          pageTotal: get(claimsPagination, 'totalPages', 0),\r\n          query: get(claimsPagination, 'query') || '',\r\n          items: action.payload.items || [],\r\n          searchBy: get(claimsPagination, 'searchBy') || initialState.claims.searchBy,\r\n          sort: {\r\n            ...state.claims.sort,\r\n          },\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_RESET':\r\n      return {\r\n        ...state,\r\n        claims: initialState.claims,\r\n      };\r\n    case 'CLAIMS_POLICIES_GET_REQUEST':\r\n      const { newRequestType: newPolicyRequestType } = action.payload.appliedParams;\r\n      return {\r\n        ...state,\r\n        policies: {\r\n          ...state.policies,\r\n          ...(newPolicyRequestType === constants.CLAIM_POLICY_SEARCH_REQ_TYPES.filter\r\n            ? { isloadingFilters: true }\r\n            : { isloadingTable: true }),\r\n        },\r\n      };\r\n    case 'CLAIMS_POLICIES_GET_SUCCESS':\r\n      const {\r\n        items: { filterValue: policiesFiltersValues, searchValue: policiesSearchValues },\r\n        pagination: policiesPagination,\r\n      } = action.payload;\r\n      const policyRequestType = action.payload.requestType;\r\n      const isPolicyNonfilterTypCall = policyRequestType !== constants.CLAIM_POLICY_SEARCH_REQ_TYPES.filter;\r\n\r\n      return {\r\n        ...state,\r\n        policies: {\r\n          ...state.policies,\r\n          ...(isPolicyNonfilterTypCall\r\n            ? {\r\n                items: [...(utils.generic.isValidArray(policiesSearchValues) ? policiesSearchValues : [])],\r\n                itemsTotal: get(action.payload.pagination, 'totalElements', 0),\r\n                page: get(policiesPagination, 'page', 0),\r\n                pageSize: policiesPagination !== 0 ? policiesPagination.size : initialState.policies.pageSize,\r\n                pageTotal: get(policiesPagination, 'totalPages', 0),\r\n                query: get(policiesPagination, 'searchBy') || '',\r\n                searchBy: get(action.payload.pagination, 'searchBy') || '',\r\n                isloadingTable: false,\r\n              }\r\n            : {}),\r\n          sort: {\r\n            ...state.policies.sort,\r\n          },\r\n          filters: !isPolicyNonfilterTypCall\r\n            ? policiesFiltersValues\r\n              ? policiesFiltersValues\r\n              : { ...state.policies.filters }\r\n            : { ...state.policies.filters },\r\n          isloadingFilters: isPolicyNonfilterTypCall ? state.policies.isloadingFilters : false,\r\n        },\r\n      };\r\n    case 'CLAIMS_POLICIES_GET_FAILURE':\r\n      return {\r\n        ...state,\r\n        error: action.payload.error,\r\n        policies: {\r\n          ...state.policies,\r\n          isloadingTable: false,\r\n          isloadingFilters: action.payload.isNonFilterTypeCall ? state.policies.isloadingFilters : false,\r\n        },\r\n      };\r\n    case 'CLAIMS_POLICIES_RESET':\r\n      return {\r\n        ...state,\r\n        policies: initialState.policies,\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_INSURED_GET_SUCCESS':\r\n      const claimsInsuredPagination = action.payload.pagination || {};\r\n\r\n      return {\r\n        ...state,\r\n        insured: {\r\n          ...state.insured,\r\n          items: action.payload.items || [],\r\n          itemsTotal: get(claimsInsuredPagination, 'totalElements', 0),\r\n          page: get(claimsInsuredPagination, 'page', 0),\r\n          pageSize: get(claimsInsuredPagination, 'size', initialState.insured.pageSize),\r\n          pageTotal: get(claimsInsuredPagination, 'totalPages', 0),\r\n          query: get(claimsInsuredPagination, 'query') || '',\r\n        },\r\n      };\r\n    case 'CLAIMS_POLICIES_RESET_TEMP':\r\n      return {\r\n        ...state,\r\n        policyData: initialState.policyData,\r\n        policyInformation: initialState.policyInformation,\r\n      };\r\n    case 'CLAIMS_POLICIES_REFERENCE':\r\n      const policyTypeCheck = action.payload.policyType;\r\n      return {\r\n        ...state,\r\n        policyData: action.payload,\r\n        sectionEnabledUG: constants.CLAIM_SECTION_ENABLED_UG.indexOf(policyTypeCheck) > -1 || false,\r\n        claimDetailInformationSuccess: initialState.claimDetailInformationSuccess,\r\n      };\r\n    case 'CLAIMS_POLICY_SECTIONS_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        isPolicySectionsLoading: true,\r\n      };\r\n    case 'CLAIMS_POLICY_SECTIONS_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        policySections: action.payload,\r\n        isPolicySectionsLoading: false,\r\n      };\r\n    case 'CLAIMS_POLICY_SECTIONS_GET_FAILURE':\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        isPolicySectionsLoading: false,\r\n      };\r\n    case 'CLAIMS_SETTLEMENT_CURRENCY_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        settlementCurrencies: action.payload,\r\n      };\r\n    case 'LOSS_INFORMATION_POST_SUCCESS':\r\n      return {\r\n        ...state,\r\n        lossInformation: action.payload,\r\n        isLossSubmitted: true,\r\n        isLossInfoLoading: false,\r\n      };\r\n    case 'RESET_LOSS_SUBMISSION':\r\n      return {\r\n        ...state,\r\n        isLossSubmitted: false,\r\n      };\r\n    case 'GET_LOSS_INFORMATION_SUCCESS':\r\n      return {\r\n        ...state,\r\n        lossInformation: action.payload,\r\n        isLossInfoLoading: false,\r\n      };\r\n    case 'CLAIMS_POST_SUCCESS':\r\n      return {\r\n        ...state,\r\n        claimsInformation: action.payload,\r\n      };\r\n    case 'CLAIMS_INSURED_REMOVE_SUCCESS':\r\n      const checkedInsured = Object.keys(Object.fromEntries(Object.entries(action.payload).filter(([key, value]) => value)));\r\n\r\n      return {\r\n        ...state,\r\n        insured: {\r\n          ...state.insured,\r\n          items: state.insured.items.filter((item) => item.title !== checkedInsured[0]),\r\n        },\r\n      };\r\n    case 'CLAIMS_SELECT_INTEREST_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        interest: {\r\n          ...state.interest,\r\n          isLoading: true,\r\n        },\r\n      };\r\n    case 'CLAIMS_SELECT_INTEREST_GET_SUCCESS':\r\n      const { payload } = action;\r\n      const defaultValue = payload.length === 1 ? payload[0].code : '';\r\n\r\n      return {\r\n        ...state,\r\n        interest: {\r\n          ...state.interest,\r\n          items: payload,\r\n          selectedInterest: defaultValue,\r\n          isLoading: false,\r\n        },\r\n      };\r\n    case 'CLAIMS_SELECT_INTEREST_GET_FAILURE':\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        interest: {\r\n          ...state.interest,\r\n          isLoading: false,\r\n        },\r\n      };\r\n\r\n    case 'CLAIMS_SELECT_INTEREST_VALUE':\r\n      return {\r\n        ...state,\r\n        interest: {\r\n          ...state.interest,\r\n          selectedInterest: action.payload,\r\n        },\r\n      };\r\n    case 'CLAIMS_DETAILS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        allClaimDetails: action.payload,\r\n      };\r\n    case 'UPDATE_CLAIMS_DETAILS_INFORMATION':\r\n      return {\r\n        ...state,\r\n        claimDetailInformation: action.payload,\r\n      };\r\n    case 'CLAIMS_DETAILS_INFORMATION_POST_SUCCESS':\r\n      return {\r\n        ...state,\r\n        claimDetailInformationSuccess: action.payload,\r\n        claimsInformation: action.payload,\r\n      };\r\n    case 'CLAIMS_DETAILS_INFORMATION_UPDATE_SUCCESS':\r\n      return {\r\n        ...state,\r\n        claimDetailInformationSuccess: action.payload,\r\n        claimsInformation: {\r\n          ...state.claimsInformation,\r\n          ...action.payload,\r\n        },\r\n      };\r\n    case 'CLAIMS_PRIORITY_LEVELS_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        prioritiesLoaded: false,\r\n        isPrioritiesLoading: true,\r\n      };\r\n    case 'CLAIMS_PRIORITY_LEVELS_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        priorities: action.payload,\r\n        prioritiesLoaded: true,\r\n        isPrioritiesLoading: false,\r\n      };\r\n    case 'CLAIMS_PRIORITY_LEVELS_GET_FAILURE':\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        isPrioritiesLoading: false,\r\n        prioritiesLoaded: true,\r\n      };\r\n    case 'CLAIMS_REOPEN_TASK_LIST_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        reopenTaskList: action.payload,\r\n      };\r\n    case 'CLAIMS_BE_ADJUSTER_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        beAdjuster: { ...state.beAdjuster, items: action.payload },\r\n      };\r\n    case 'SET_CLAIMS_BE_ADJUSTER_VALUE':\r\n      return {\r\n        ...state,\r\n        beAdjuster: { ...state.beAdjuster, selectedbeAdjuster: action.payload },\r\n      };\r\n    case 'CLAIMS_PREVIEW_INFORMATION_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        isClaimsInfoLoading: true,\r\n      };\r\n    case 'CLAIMS_BASIC_INFORMATION_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        isClaimsInfoLoading: true,\r\n      };\r\n    case 'CLAIMS_PREVIEW_INFORMATION_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        claimsInformation: action.payload,\r\n        isClaimsInfoLoading: false,\r\n      };\r\n    case 'CLAIMS_SELECTED_INFORMATION_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        selectedClaimsDetails: action.payload,\r\n      };\r\n    case 'CLAIMS_BASIC_INFORMATION_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        claimsInformation: action.payload,\r\n        isClaimsInfoLoading: false,\r\n      };\r\n    case 'CLAIMS_PREVIEW_INFORMATION_GET_FAILURE':\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        isClaimsInfoLoading: false,\r\n      };\r\n    case 'CLAIMS_BASIC_INFORMATION_GET_FAILURE':\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        isClaimsInfoLoading: false,\r\n      };\r\n    case 'SELECT_CLAIMS_COMPLEXITY':\r\n      return {\r\n        ...state,\r\n        complexityPolicies: {\r\n          ...state.complexityPolicies,\r\n          selectedComplexityPolicies: action.payload || [],\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_GET_SUCCESS':\r\n      const complexityPoliciesPagination = action.payload.pagination || {};\r\n\r\n      return {\r\n        ...state,\r\n        complexityPolicies: {\r\n          ...state.complexityPolicies,\r\n          items: action.payload.data || [],\r\n          itemsTotal: get(complexityPoliciesPagination, 'totalElements', 0),\r\n          page: get(complexityPoliciesPagination, 'page', 1),\r\n          pageSize: get(complexityPoliciesPagination, 'size', initialState.complexityPolicies.pageSize),\r\n          pageTotal: get(complexityPoliciesPagination, 'totalPages', 0),\r\n          query: get(complexityPoliciesPagination, 'query') || '',\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_FLAGGED_GET_SUCCESS':\r\n      const complexityPoliciesFlaggedPagination = action.payload.pagination || {};\r\n\r\n      return {\r\n        ...state,\r\n        complexityPoliciesFlagged: {\r\n          ...state.complexityPoliciesFlagged,\r\n          items: action.payload.items || [],\r\n          itemsTotal: get(complexityPoliciesFlaggedPagination, 'totalElements', 0),\r\n          page: get(complexityPoliciesFlaggedPagination, 'page', 1),\r\n          pageSize: get(complexityPoliciesFlaggedPagination, 'size', initialState.complexityPoliciesFlagged.pageSize),\r\n          pageTotal: get(complexityPoliciesFlaggedPagination, 'totalPages', 0),\r\n          query: get(complexityPoliciesFlaggedPagination, 'query') || '',\r\n        },\r\n      };\r\n    case 'CLAIMS_DETAILS_INFORMATION_SUBMIT_SUCCESS':\r\n      return {\r\n        ...state,\r\n        claimsInformation: {\r\n          ...state.claimsInformation,\r\n          claimStatus: action.payload.claimStatus,\r\n          submitStatus: action.payload.responseData,\r\n        },\r\n      };\r\n    case 'ADD_NEW_CLAIM_FOR_LOSS':\r\n      return {\r\n        ...state,\r\n        claimantNames: initialState.claimantNames,\r\n        claimsInformation: initialState.claimsInformation,\r\n        policyData: initialState.policyData,\r\n        policyInformation: initialState.policyInformation,\r\n        interest: initialState.interest,\r\n        policySections: initialState.underWritingGroups,\r\n        underWritingGroups: initialState.underWritingGroups,\r\n        allClaimDetails: initialState.allClaimDetails,\r\n        beAdjuster: initialState.beAdjuster,\r\n        claimDetailInformationSuccess: initialState.claimDetailInformationSuccess,\r\n        claimData: initialState.claimData,\r\n      };\r\n    case 'RESET_LOSS_DATA':\r\n      return {\r\n        ...state,\r\n        lossInformation: initialState.lossInformation,\r\n      };\r\n    case 'RESET_CLAIMS_INFORMATION':\r\n      return {\r\n        ...state,\r\n        claimsInformation: initialState.claimsInformation,\r\n      };\r\n    case 'RESET_LOSS_POLICY_CLAIM_DATA':\r\n      return {\r\n        ...state,\r\n        claimantNames: initialState.claimantNames,\r\n        claimsInformation: initialState.claimsInformation,\r\n        policyData: initialState.policyData,\r\n        policyInformation: initialState.policyInformation,\r\n        interest: initialState.interest,\r\n        policySections: initialState.underWritingGroups,\r\n        underWritingGroups: initialState.underWritingGroups,\r\n        allClaimDetails: initialState.allClaimDetails,\r\n        beAdjuster: initialState.beAdjuster,\r\n        claimDetailInformationSuccess: initialState.claimDetailInformationSuccess,\r\n        claimData: initialState.claimData,\r\n        lossInformation: initialState.lossInformation,\r\n        linkPolicies: initialState.linkPolicies,\r\n        policies: initialState.policies,\r\n      };\r\n    case 'UPDATE_CLAIMS_LOSS_FILTERS':\r\n      return {\r\n        ...state,\r\n        claimLossSearchFilters: action.payload,\r\n      };\r\n    case 'CLAIMS_INSURED_RESET':\r\n      return {\r\n        ...state,\r\n        insured: initialState.insured,\r\n      };\r\n    case 'RESET_CLAIMS_LOSS_FILTERS':\r\n      return {\r\n        ...state,\r\n        claimLossSearchFilters: initialState.claimLossSearchFilters,\r\n      };\r\n    case 'CLAIMS_LOSS_FILTERS_POST_SUCCESS':\r\n      return {\r\n        ...state,\r\n        claims: {\r\n          ...state.claims,\r\n          filters: action.payload,\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_RESET':\r\n      return {\r\n        ...state,\r\n        complexityPolicies: initialState.complexityPolicies,\r\n      };\r\n    case 'CHECKED_COMPLEX_ADD_POLICY':\r\n      let boolCheck = false;\r\n      const complexPoliciesData = state.complexityPolicies.selectedComplexityPolicies.map((item, idx) => {\r\n        if (item.id === action.payload.id) {\r\n          item.checkedType = !item.checkedType;\r\n          boolCheck = true;\r\n        }\r\n        return item;\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        complexityPolicies: {\r\n          ...state.complexityPolicies,\r\n          selectedComplexityPolicies: boolCheck\r\n            ? complexPoliciesData\r\n            : complexPoliciesData.length > 0\r\n            ? [...complexPoliciesData, action.payload]\r\n            : [action.payload],\r\n        },\r\n      };\r\n    case 'CHECKED_COMPLEX_ADD_INSURED':\r\n      let insuredBoolCheck = false;\r\n      const complexInsuredData = state.complexInsured.selectedComplexityInsured.map((item, idx) => {\r\n        if (item.id === action.payload.id) {\r\n          item.checkedType = !item.checkedType;\r\n          insuredBoolCheck = true;\r\n        }\r\n        return item;\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        complexInsured: {\r\n          ...state.complexInsured,\r\n          selectedComplexityInsured: insuredBoolCheck\r\n            ? complexInsuredData\r\n            : complexInsuredData.length > 0\r\n            ? [...complexInsuredData, action.payload]\r\n            : [action.payload],\r\n        },\r\n      };\r\n    case 'CLAIMS_SAVE_COMPLEXITY_POLICY_POST_SUCCESS':\r\n      return {\r\n        ...state,\r\n        complexityPolicies: {\r\n          ...state.complexityPolicies,\r\n          savedComplexPolicies: action.payload,\r\n          checkedComplexity: true,\r\n        },\r\n      };\r\n    case 'CLAIMS_SAVE_COMPLEXITY_INSURED_POST_SUCCESS':\r\n      return {\r\n        ...state,\r\n        complexInsured: {\r\n          ...state.complexInsured,\r\n          savedComplexInsured: action.payload,\r\n          checkedComplexity: true,\r\n        },\r\n      };\r\n    case 'SAVED_POLICIES_DATA':\r\n      return {\r\n        ...state,\r\n        checkedComplexAddPolicies: [...state.checkedComplexAddPolicies, ...action.payload],\r\n      };\r\n    case 'CLAIM_SET_DATA':\r\n      return {\r\n        ...state,\r\n        claimData: action.payload,\r\n      };\r\n    case 'CLAIM_RESET_DATA':\r\n      return {\r\n        ...initialState,\r\n      };\r\n    case 'CLAIMS_SET_STEPPER_CONTROL':\r\n      return {\r\n        ...state,\r\n        claimsStepper: action.payload,\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_TAB_SET':\r\n      return {\r\n        ...state,\r\n        complexityManagement: {\r\n          ...initialState.complexityManagement,\r\n          activeTab: action.payload,\r\n        },\r\n        complexityBasisValues: {\r\n          ...initialState.complexityBasisValues,\r\n        },\r\n        complexityReferralValues: {\r\n          ...initialState.complexityReferralValues,\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_DIVISION_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        complexityManagement: {\r\n          ...state.complexityManagement,\r\n          division: action.payload,\r\n          divisionChanges: initialState.complexityManagement.divisionChanges,\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_DIVISION_SET_CHANGE':\r\n      const incomingFieldName = Object.keys(action.payload)[0];\r\n      const falseStateChange = Object.keys(state.complexityManagement.divisionChanges).indexOf(incomingFieldName) > -1;\r\n      const applicablePayload = falseStateChange ? {} : action.payload;\r\n      const applicableDivisionChanges = { ...state.complexityManagement.divisionChanges };\r\n      if (falseStateChange) {\r\n        delete applicableDivisionChanges[incomingFieldName];\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        complexityManagement: {\r\n          ...state.complexityManagement,\r\n          divisionChanges: { ...applicableDivisionChanges, ...applicablePayload },\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_DIVISION_RESET':\r\n      return {\r\n        ...state,\r\n        complexityManagement: {\r\n          ...state.complexityManagement,\r\n          divisionChanges: initialState.complexityManagement.divisionChanges,\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_DIVISION_SAVE_SUCCESS':\r\n      return {\r\n        ...state,\r\n        complexityManagement: {\r\n          ...state.complexityManagement,\r\n          divisionChanges: initialState.complexityManagement.divisionChanges,\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_SET_COMPLEX_VALUE_ID':\r\n      return {\r\n        ...state,\r\n        complexityManagement: {\r\n          ...state.complexityManagement,\r\n          complexityBasisValueId: action.payload,\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_BASIS_VALUE_GET_SUCCESS':\r\n      const complexityBasisValuePagination = action.payload.pagination || {};\r\n      const initialComplexityBasisSort = initialState.complexityBasisValues.sort;\r\n\r\n      return {\r\n        ...state,\r\n        complexityBasisValues: {\r\n          type: action.payload.type || '',\r\n          items: action.payload.data || [],\r\n          itemsTotal: get(complexityBasisValuePagination, 'totalElements', 0),\r\n          page: get(complexityBasisValuePagination, 'page', 1),\r\n          pageSize: get(complexityBasisValuePagination, 'size', initialState.complexityBasisValues.pageSize),\r\n          pageTotal: get(complexityBasisValuePagination, 'totalPages', 0),\r\n          query: get(complexityBasisValuePagination, 'query') || '',\r\n          sort: {\r\n            by: get(complexityBasisValuePagination, 'orderBy', initialComplexityBasisSort.by),\r\n            direction: get(complexityBasisValuePagination, 'direction', initialComplexityBasisSort.direction),\r\n          },\r\n          loaded: true,\r\n        },\r\n        complexityManagement: {\r\n          ...initialState.complexityManagement,\r\n          activeTab: state.complexityManagement.activeTab,\r\n          complexityBasisValueId: state.complexityManagement.complexityBasisValueId,\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_BASIS_VALUE_GET_RESET':\r\n      return {\r\n        ...state,\r\n        complexityBasisValues: {\r\n          ...initialState.complexityBasisValues,\r\n        },\r\n      };\r\n    case 'CLAIMS_ADD_COMPLEXITY_VALUES_SUCCESS':\r\n      return {\r\n        ...state,\r\n        complexityManagement: {\r\n          ...initialState.complexityManagement,\r\n          activeTab: state.complexityManagement.activeTab,\r\n          complexityBasisValueId: state.complexityManagement.complexityBasisValueId,\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_COMPLEX_ID_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        complexityManagement: {\r\n          ...state.complexityManagement,\r\n          complexityBasisDivisionMatrix: initialState.complexityManagement.complexityBasisDivisionMatrix,\r\n          complexityBasisDivisionMatrixChanges: initialState.complexityManagement.complexityBasisDivisionMatrixChanges,\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_COMPLEX_ID_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        complexityManagement: {\r\n          ...state.complexityManagement,\r\n          complexityBasisDivisionMatrix: action.payload,\r\n          complexityBasisDivisionMatrixChanges: initialState.complexityManagement.complexityBasisDivisionMatrixChanges,\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_COMPLEX_ID_SET_CHANGE':\r\n      const newComplexityDivisionFieldName = Object.keys(action.payload)[0];\r\n      const falseComplexityDivisionMatrixFieldChange =\r\n        Object.keys(state.complexityManagement.complexityBasisDivisionMatrixChanges).indexOf(newComplexityDivisionFieldName) > -1;\r\n      const newComplexityDivisionPayload = falseComplexityDivisionMatrixFieldChange ? {} : action.payload;\r\n      const newComplexityDivisionChanges = {\r\n        ...state.complexityManagement.complexityBasisDivisionMatrixChanges,\r\n      };\r\n      if (falseComplexityDivisionMatrixFieldChange) {\r\n        delete newComplexityDivisionChanges[newComplexityDivisionFieldName];\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        complexityManagement: {\r\n          ...state.complexityManagement,\r\n          complexityBasisDivisionMatrixChanges: {\r\n            ...newComplexityDivisionChanges,\r\n            ...newComplexityDivisionPayload,\r\n          },\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_COMPLEX_ID_RESET':\r\n      return {\r\n        ...state,\r\n        complexityManagement: {\r\n          ...state.complexityManagement,\r\n          complexityBasisDivisionMatrixChanges: initialState.complexityManagement.complexityBasisDivisionMatrixChanges,\r\n        },\r\n      };\r\n    case 'CLAIMS_REMOVE_COMPLEXITY_VALUES_SUCCESS':\r\n      return {\r\n        ...state,\r\n        complexityManagement: {\r\n          ...initialState.complexityManagement,\r\n          activeTab: state.complexityManagement.activeTab,\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_SET_REFERRAL_VALUE_ID':\r\n      return {\r\n        ...state,\r\n        complexityManagement: {\r\n          ...state.complexityManagement,\r\n          complexityReferralValueId: action.payload,\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_REFERRAL_VALUES_GET_SUCCESS':\r\n      const complexityReferralValuesPagination = action.payload.pagination || {};\r\n      const initialComplexityReferralSort = initialState.complexityReferralValues.sort;\r\n\r\n      return {\r\n        ...state,\r\n        complexityReferralValues: {\r\n          items: action.payload.data || [],\r\n          itemsTotal: get(complexityReferralValuesPagination, 'totalElements', 0),\r\n          page: get(complexityReferralValuesPagination, 'page', 1),\r\n          pageSize: get(complexityReferralValuesPagination, 'size', initialState.complexityReferralValues.pageSize),\r\n          pageTotal: get(complexityReferralValuesPagination, 'totalPages', 0),\r\n          query: get(complexityReferralValuesPagination, 'query') || '',\r\n          sort: {\r\n            by: get(complexityReferralValuesPagination, 'orderBy', initialComplexityReferralSort.by),\r\n            direction: get(complexityReferralValuesPagination, 'direction', initialComplexityReferralSort.direction),\r\n          },\r\n        },\r\n        complexityManagement: {\r\n          ...initialState.complexityManagement,\r\n          activeTab: state.complexityManagement.activeTab,\r\n          complexityReferralValueId: state.complexityManagement.complexityReferralValueId,\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_ADD_REFERRAL_SUCCESS':\r\n      return {\r\n        ...state,\r\n        complexityManagement: {\r\n          ...initialState.complexityManagement,\r\n          activeTab: state.complexityManagement.activeTab,\r\n          complexityReferralValueId: state.complexityManagement.complexityReferralValueId,\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_REFERRAL_ID_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        complexityManagement: {\r\n          ...state.complexityManagement,\r\n          complexityReferralDivisionMatrix: initialState.complexityManagement.complexityReferralDivisionMatrix,\r\n          complexityReferralDivisionMatrixChanges: initialState.complexityManagement.complexityReferralDivisionMatrixChanges,\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_REFERRAL_ID_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        complexityManagement: {\r\n          ...state.complexityManagement,\r\n          complexityReferralDivisionMatrix: action.payload,\r\n          complexityReferralDivisionMatrixChanges: initialState.complexityManagement.complexityReferralDivisionMatrixChanges,\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_REFERRAL_ID_SET_CHANGE':\r\n      const newReferralDivisionFieldName = Object.keys(action.payload)[0];\r\n      const falseReferralDivisionMatrixFieldChange =\r\n        Object.keys(state.complexityManagement.complexityReferralDivisionMatrixChanges).indexOf(newReferralDivisionFieldName) > -1;\r\n      const newReferralDivisionPayload = falseReferralDivisionMatrixFieldChange ? {} : action.payload;\r\n      const newReferralDivisionChanges = {\r\n        ...state.complexityManagement.complexityReferralDivisionMatrixChanges,\r\n      };\r\n      if (falseReferralDivisionMatrixFieldChange) {\r\n        delete newReferralDivisionChanges[newReferralDivisionFieldName];\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        complexityManagement: {\r\n          ...state.complexityManagement,\r\n          complexityReferralDivisionMatrixChanges: {\r\n            ...newReferralDivisionChanges,\r\n            ...newReferralDivisionPayload,\r\n          },\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_REFERRAL_ID_RESET':\r\n      return {\r\n        ...state,\r\n        complexityManagement: {\r\n          ...state.complexityManagement,\r\n          complexityReferralDivisionMatrixChanges: initialState.complexityManagement.complexityReferralDivisionMatrixChanges,\r\n        },\r\n      };\r\n    case 'CLAIMS_REMOVE_REFERRAL_VALUES_SUCCESS':\r\n      return {\r\n        ...state,\r\n        complexityManagement: {\r\n          ...initialState.complexityManagement,\r\n          activeTab: state.complexityManagement.activeTab,\r\n        },\r\n      };\r\n    case 'UPDATE_CLAIMS_PROCESSING_FILTERS':\r\n      return {\r\n        ...state,\r\n        claimsProcessingData: action.payload,\r\n      };\r\n    case 'USER_GET_USERS_BY_ORG_REQUEST':\r\n      return {\r\n        ...state,\r\n        isClaimsAssignedToUsersLoading: true,\r\n      };\r\n    case 'USER_GET_USERS_BY_ORG_FAILURE':\r\n      return {\r\n        ...state,\r\n        isClaimsAssignedToUsersLoading: false,\r\n        error: action.payload,\r\n      };\r\n    case 'USER_GET_USERS_BY_ORG_SUCCESS':\r\n      return {\r\n        ...state,\r\n        claimsAssignedToUsers: {\r\n          ...action.payload,\r\n          loaded: true,\r\n        },\r\n        isClaimsAssignedToUsersLoading: false,\r\n      };\r\n    case 'CLAIMS_ASSIGNED_TO_USERS_RESET':\r\n      return {\r\n        ...state,\r\n        claimsAssignedToUsers: {\r\n          ...initialState.claimsAssignedToUsers,\r\n        },\r\n      };\r\n    case 'RESET_CLAIMS_PROCESSING_FILTERS':\r\n      return {\r\n        ...state,\r\n        claimsProcessingData: initialState.claimsProcessingData,\r\n      };\r\n    case 'CLAIM_UPDATE_COMPLEX_STATUS':\r\n      return {\r\n        ...state,\r\n        complexityPolicies: {\r\n          ...state.complexityPolicies,\r\n          ...action.payload,\r\n        },\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_SEARCH_POST_SUCCESS':\r\n      const complexityInsuredPagination = action.payload.pagination || {};\r\n      return {\r\n        ...state,\r\n        complexInsured: {\r\n          ...state.complexInsured,\r\n          items: action.payload.data || [],\r\n          itemsTotal: get(complexityInsuredPagination, 'totalElements', 0),\r\n          page: get(complexityInsuredPagination, 'page', 1),\r\n          pageSize: get(complexityInsuredPagination, 'size', initialState.complexInsured.pageSize),\r\n          pageTotal: get(complexityInsuredPagination, 'totalPages', 0),\r\n          query: get(complexityInsuredPagination, 'query') || '',\r\n        },\r\n      };\r\n    case 'CLAIMS_POPUP_INSURED_RESET':\r\n      return {\r\n        ...state,\r\n        complexInsured: initialState.complexInsured,\r\n      };\r\n    case 'SAVED_INSURED_DATA':\r\n      return {\r\n        ...state,\r\n        checkedComplexAddInsured: [...state.checkedComplexAddInsured, ...action.payload],\r\n      };\r\n    case 'CLAIMS_COMPLEXITY_VALUES_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        complexityValues: action.payload,\r\n        complexityValuesLoaded: true,\r\n      };\r\n    case 'CLAIM_COMPLEXITY_TYPES_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        complexityTypes: action.payload,\r\n        complexityTypesLoaded: true,\r\n      };\r\n    case 'CLAIMS_REFERRAL_VALUES_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        referralValues: action.payload,\r\n      };\r\n    case 'CLAIMS_REFERRAL_RESPONSE_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        referralResponse: action.payload,\r\n      };\r\n    case 'CLAIMS_QUERY_CODE_LIST_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        queryCode: action.payload,\r\n      };\r\n    case 'CLAIMS_SET_PRIORITY_SUCCESS':\r\n      return {\r\n        ...state,\r\n        processing: {\r\n          ...state.processing,\r\n          items: state.processing.items.map((claim) => {\r\n            const newPriorityName = action.payload.priorityName;\r\n            const isSameClaimId = claim.claimID?.toString() === action.payload.claimID?.toString();\r\n\r\n            if (newPriorityName && isSameClaimId) {\r\n              return {\r\n                ...claim,\r\n                priority: newPriorityName,\r\n              };\r\n            }\r\n\r\n            return claim;\r\n          }),\r\n        },\r\n      };\r\n    case 'GET_ASSOCIATED_TASK_SUCCESS':\r\n      return {\r\n        ...state,\r\n        tasksProcessing: {\r\n          ...state.tasksProcessing,\r\n          associatedTaskDetails: action.payload,\r\n        },\r\n      };\r\n    case 'TASKS_CLAIMS_REPORTING_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        tasksClaimsReporting: {\r\n          data: initialState.tasksClaimsReporting.data,\r\n          isDataLoading: true,\r\n        },\r\n      };\r\n    case 'TASKS_CLAIMS_REPORTING_GET_SUCCESS':\r\n      return {\r\n        ...state,\r\n        tasksClaimsReporting: { data: action.payload, isDataLoading: false },\r\n      };\r\n    case 'TASKS_CLAIMS_REPORTING_GET_FAILURE':\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        tasksClaimsReporting: {\r\n          data: initialState.tasksClaimsReporting.data,\r\n          isDataLoading: false,\r\n        },\r\n      };\r\n    case 'PROCESSING_NAVIGATION':\r\n      return {\r\n        ...state,\r\n        processingNavigation: {\r\n          ...state.processingNavigation,\r\n          navigationItem: action.payload,\r\n        },\r\n      };\r\n    case 'PROCESSING_CLAIM_VIEW_NAVIGATION':\r\n      return {\r\n        ...state,\r\n        processingNavigation: {\r\n          ...state.processingNavigation,\r\n          selectedView: action.payload,\r\n        },\r\n      };\r\n    case 'CLAIMS_BORDEREAU_REQUEST':\r\n      return {\r\n        ...state,\r\n        isBordereauPeriodsLoading: true,\r\n      };\r\n    case 'CLAIMS_BORDEREAU_SUCCESS':\r\n      return {\r\n        ...state,\r\n        claimBordereauPeriods: action.payload,\r\n        isBordereauPeriodsLoading: false,\r\n      };\r\n    case 'CLAIMS_BORDEREAU_ERROR':\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        isBordereauPeriodsLoading: false,\r\n      };\r\n    case 'CLAIMS_POLICY_INSURED_REQUEST':\r\n      return {\r\n        ...state,\r\n        isClaimPolicyInsuresLoading: true,\r\n      };\r\n    case 'CLAIMS_POLICY_INSURED_SUCCESS':\r\n      return {\r\n        ...state,\r\n        claimPolicyInsures: action.payload,\r\n        isClaimPolicyInsuresLoading: false,\r\n      };\r\n    case 'CLAIMS_POLICY_INSURED_ERROR':\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        isClaimPolicyInsuresLoading: false,\r\n      };\r\n    case 'CLAIMS_POLICY_CLIENTS_REQUEST':\r\n      return {\r\n        ...state,\r\n        isPolicyClientsLoading: true,\r\n      };\r\n    case 'CLAIMS_POLICY_CLIENTS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        claimPolicyClients: action.payload,\r\n        isPolicyClientsLoading: false,\r\n      };\r\n    case 'CLAIMS_POLICY_CLIENTS_ERROR':\r\n      return {\r\n        ...state,\r\n        isPolicyClientsLoading: false,\r\n        error: action.payload,\r\n      };\r\n    case 'CHECK_IS_USER_CLAIM':\r\n      return {\r\n        ...state,\r\n        processing: {\r\n          ...state.processing,\r\n          isUserClaim: action.payload,\r\n        },\r\n      };\r\n    case 'CHECK_IS_CLOSED_CLAIM':\r\n      return {\r\n        ...state,\r\n        processing: {\r\n          ...state.processing,\r\n          isClosedClaim: action.payload,\r\n        },\r\n      };\r\n    case 'CHECK_IS_TEAM_CLAIM':\r\n      return {\r\n        ...state,\r\n        processing: {\r\n          ...state.processing,\r\n          isTeamClaim: action.payload,\r\n        },\r\n      };\r\n    case 'RESET_POLICY_INFORMATION':\r\n      return {\r\n        ...state,\r\n        policyInformation: initialState.policyInformation,\r\n      };\r\n    case 'RESET_LINK_POLICY_DATA':\r\n      return {\r\n        ...state,\r\n        linkPolicies: initialState.linkPolicies,\r\n      };\r\n    case 'GET_LOSS_DOCUMENT_DETAILS':\r\n      return {\r\n        ...state,\r\n        dmsDocDetails: {\r\n          ...state.dmsDocDetails,\r\n          lossDocDetails: action.payload,\r\n        },\r\n      };\r\n    case 'GET_LINK_POLICY_DOCUEMENT_DETAILS':\r\n      return {\r\n        ...state,\r\n        dmsDocDetails: {\r\n          ...state.dmsDocDetails,\r\n          linkPolicyDocDetails: action.payload,\r\n        },\r\n      };\r\n    case 'GET_CLAIMS_DOCUEMENT_DETAILS':\r\n      return {\r\n        ...state,\r\n        dmsDocDetails: {\r\n          ...state.dmsDocDetails,\r\n          claimsDocDetails: action.payload,\r\n        },\r\n      };\r\n\r\n    case 'GET_MANAGE_DOC_LOSS_DOCUMENT_DETAILS':\r\n      return {\r\n        ...state,\r\n        dmsDocDetails: {\r\n          ...state.dmsDocDetails,\r\n          manageDocument: {\r\n            ...state.dmsDocDetails.manageDocument,\r\n            lossDocumentDetails: action.payload,\r\n          },\r\n        },\r\n      };\r\n    case 'GET_MANAGE_DOC_CLAIM_DOCUMENT_DETAILS':\r\n      return {\r\n        ...state,\r\n        dmsDocDetails: {\r\n          ...state.dmsDocDetails,\r\n          manageDocument: {\r\n            ...state.dmsDocDetails.manageDocument,\r\n            claimDocumentDetails: action.payload,\r\n          },\r\n        },\r\n      };\r\n    case 'GET_LINK_POLICIES_DATA':\r\n      return {\r\n        ...state,\r\n        linkPolicies: {\r\n          ...state.linkPolicies,\r\n          ...action.payload,\r\n        },\r\n      };\r\n    case 'RESET_LINK_POLICY_DOCUMENT_DETAILS':\r\n      return {\r\n        ...state,\r\n        dmsDocDetails: {\r\n          ...state.dmsDocDetails,\r\n          linkPolicyDocDetails: initialState.dmsDocDetails.linkPolicyDocDetails,\r\n        },\r\n      };\r\n    case 'GET_LOSSES_TAB_DATA':\r\n      return {\r\n        ...state,\r\n        lossesTab: {\r\n          ...state.lossesTab,\r\n          ...action.payload,\r\n        },\r\n      };\r\n    case 'GET_LOSSES_TABLE_FILTER_VALUES':\r\n      return {\r\n        ...state,\r\n        lossesTab: {\r\n          ...state.lossesTab,\r\n          filterValues: action.payload,\r\n        },\r\n      };\r\n    case 'RESET_LOSSES_TAB_DATA':\r\n      return {\r\n        ...state,\r\n        lossesTab: initialState.lossesTab,\r\n      };\r\n    case 'LOSSES_TAB_POST_SUCCESS':\r\n      const lossesTabPagination = action.payload.pagination || {};\r\n      let payloadData;\r\n      if (action.payload.requestType === 'search') payloadData = { items: action.payload.items };\r\n      else if (action.payload.requestType === 'filter') payloadData = { filters: action.payload.items };\r\n      return {\r\n        ...state,\r\n        lossesTab: {\r\n          ...state.lossesTab,\r\n          ...payloadData,\r\n          ...(action.payload.requestType === 'search'\r\n            ? {\r\n                itemsTotal: get(lossesTabPagination, 'totalElements', 0),\r\n                page: get(lossesTabPagination, 'page', 1),\r\n                pageSize: get(lossesTabPagination, 'size', initialState.lossesTab.pageSize),\r\n                pageTotal: get(lossesTabPagination, 'totalPages', 0),\r\n                query: get(lossesTabPagination, 'query') || '',\r\n              }\r\n            : null),\r\n        },\r\n      };\r\n    case 'GET_CLAIMS_TAB_DATA':\r\n      return {\r\n        ...state,\r\n        claimsTab: {\r\n          ...state.claimsTab,\r\n          isClaimsTabLoaded: action.payload.isClaimsTabLoaded,\r\n          searchBy: action.payload.searchBy,\r\n          searchText: action.payload.searchText,\r\n          view: action.payload.view,\r\n        },\r\n      };\r\n    case 'CLAIMS_TAB_DETAILS_GET_REQUEST':\r\n      const { newClaimsTabReqType } = action.payload.appliedParams;\r\n      return {\r\n        ...state,\r\n        claimsTab: {\r\n          ...state.claimsTab,\r\n          tableDetails: {\r\n            ...state.claimsTab.tableDetails,\r\n            ...(newClaimsTabReqType === constants.CLAIM_PROCESSING_REQ_TYPES.filter\r\n              ? { isloadingFilters: true }\r\n              : { isloadingTable: true }),\r\n          },\r\n        },\r\n      };\r\n    case 'CLAIMS_TAB_DETAILS_GET_SUCCESS':\r\n      const claimsFilterValue = action.payload?.items?.filterValue;\r\n      const claimsSearchValue = action.payload?.items?.searchValue;\r\n      const claimsPageSize = get(action.payload.pagination, 'size', initialState?.claimsTab?.tableDetails?.pageSize);\r\n\r\n      const claimReqType = action.payload.requestType;\r\n      const isClaimNonFilterTypeCall = claimReqType !== constants.CLAIM_PROCESSING_REQ_TYPES.filter;\r\n\r\n      return {\r\n        ...state,\r\n        claimsTab: {\r\n          ...state.claimsTab,\r\n          tableDetails: {\r\n            ...state.claimsTab.tableDetails,\r\n            ...(isClaimNonFilterTypeCall\r\n              ? {\r\n                  items: [...(utils.generic.isValidArray(claimsSearchValue) ? claimsSearchValue : [])],\r\n                  itemsTotal: get(action.payload.pagination, 'totalElements', 0),\r\n                  page: get(action.payload.pagination, 'page', 0) + 1,\r\n                  pageSize: claimsPageSize !== 0 ? claimsPageSize : initialState?.claimsTab?.tableDetails?.pageSize,\r\n                  pageTotal: get(action.payload.pagination, 'totalPages', 0),\r\n                  query: get(action.payload.pagination, 'search') || '',\r\n                  searchBy: get(action.payload.pagination, 'searchBy') || '',\r\n                  isloadingTable: false,\r\n                }\r\n              : {}),\r\n            sort: {\r\n              by: get(action.payload.pagination, 'orderBy') || '',\r\n              direction: (get(action.payload.pagination, 'direction') || '').toLowerCase(),\r\n            },\r\n            filters: !isClaimNonFilterTypeCall\r\n              ? claimsFilterValue\r\n                ? claimsFilterValue\r\n                : { ...state.claimsTab.tableDetails.filters }\r\n              : { ...state.claimsTab.tableDetails.filters },\r\n            isloadingFilters: !isClaimNonFilterTypeCall ? false : state.claimsTab.tableDetails.isloadingFilters,\r\n            selected: [],\r\n          },\r\n        },\r\n      };\r\n    case 'CLAIMS_TAB_TABLE_DETAILS_FAILURE':\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        claimsTab: {\r\n          ...state.claimsTab,\r\n          tableDetails: {\r\n            ...state.claimsTab.tableDetails,\r\n            items: initialState.claimsTab.tableDetails.items,\r\n            isloadingTable: false,\r\n          },\r\n        },\r\n      };\r\n    case 'CLAIMS_TAB_FILTER_DETAILS_FAILURE':\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        claimsTab: {\r\n          ...state.claimsTab,\r\n          tableDetails: {\r\n            ...state.claimsTab.tableDetails,\r\n            isloadingFilters: false,\r\n          },\r\n        },\r\n      };\r\n    case 'CLAIMS_TAB_TABLE_SELECT':\r\n      return {\r\n        ...state,\r\n        claimsTab: {\r\n          ...state?.claimsTab,\r\n          tableDetails: {\r\n            ...state.claimsTab.tableDetails,\r\n            selected: action.payload.forceSingleItem\r\n              ? [action.payload.claimObj]\r\n              : xorBy(state?.claimsTab?.tableDetails?.selected || [], [action.payload?.claimObj], 'processID'),\r\n          },\r\n        },\r\n      };\r\n    case 'CLAIMS_ASSOCIATE_WITH_LOSS_GET_FAILURE':\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        isClaimsAssociateWithLossLoading: false,\r\n      };\r\n    case 'CLAIMS_FNOL_PUSH_BACK_ROUTES':\r\n      return {\r\n        ...state,\r\n        pushBackRoute: action.payload,\r\n      };\r\n\r\n    case 'CLAIMS_FNOL_SELECT_TAB':\r\n      return {\r\n        ...state,\r\n        fnolSelectedTab: action.payload,\r\n      };\r\n\r\n    case 'GET_SANCTIONS_CHECK_STATUS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        sanctionCheckStatus: action.payload,\r\n      };\r\n    case 'GET_SANCTIONS_CHECK_STATUS_FAILURE':\r\n      return {\r\n        ...state,\r\n        sanctionCheckStatus: initialState.sanctionCheckStatus,\r\n        error: action.payload,\r\n      };\r\n\r\n    case 'CLAIMS_TAB_SEARCH_RESET':\r\n      return {\r\n        ...state,\r\n        claimsTab: {\r\n          ...state.claimsTab,\r\n          tableDetails: {\r\n            ...state.claimsTab.tableDetails,\r\n            query: initialState.claimsTab.tableDetails.query,\r\n          },\r\n        },\r\n      };\r\n    case 'RESET_CLAIMS_TAB_TABLE_ITEMS':\r\n      return {\r\n        ...state,\r\n        claimsTab: {\r\n          ...state.claimsTab,\r\n          tableDetails: {\r\n            ...state.claimsTab.tableDetails,\r\n            items: initialState.claimsTab.tableDetails.items,\r\n          },\r\n        },\r\n      };\r\n    case 'RESET_CLAIMS_TAB_FILTERS':\r\n      return {\r\n        ...state,\r\n        claimsTab: {\r\n          ...state.claimsTab,\r\n          tableDetails: {\r\n            ...state.claimsTab.tableDetails,\r\n            filters: initialState.claimsTab.tableDetails.filters,\r\n          },\r\n        },\r\n      };\r\n    case 'RESET_CLAIMS_TAB_SEARCH':\r\n      return {\r\n        ...state,\r\n        claimsTab: {\r\n          ...state.claimsTab,\r\n          tableDetails: {\r\n            ...state.claimsTab.tableDetails,\r\n            query: initialState.claimsTab.tableDetails.query,\r\n          },\r\n        },\r\n      };\r\n    case 'RESET_CLAIMS_DMS_DOCUMENT_DETAILS':\r\n      return {\r\n        ...state,\r\n        dmsDocDetails: initialState.dmsDocDetails,\r\n      };\r\n    case 'ADVANCE_SEARCH_DETAILS_REQUEST':\r\n      const advanceSearchRequestType = action?.payload?.params?.requestType;\r\n      return {\r\n        ...state,\r\n        advanceTab: {\r\n          ...state.advanceTab,\r\n          ...(advanceSearchRequestType === constants.REQ_TYPES.filter ? { isloadingFilters: true } : { isloadingTable: true }),\r\n        },\r\n      };\r\n    case 'ADVANCE_SEARCH_DETAILS_SUCCESS':\r\n      const advanceTabPagination = action.payload.pagination || {};\r\n      let advancePayloadData;\r\n      if (action.payload.requestType === constants.REQ_TYPES.search)\r\n        advancePayloadData = { items: action.payload.items, isloadingTable: false };\r\n      else if (action.payload.requestType === constants.REQ_TYPES.filter)\r\n        advancePayloadData = { filters: action.payload.items, isloadingFilters: false };\r\n      return {\r\n        ...state,\r\n        advanceTab: {\r\n          ...state.advanceTab,\r\n          ...advancePayloadData,\r\n          ...(action.payload.requestType === constants.REQ_TYPES.search\r\n            ? {\r\n                itemsTotal: get(advanceTabPagination, 'totalElements', 0),\r\n                page: get(advanceTabPagination, 'page', 1),\r\n                pageSize: get(advanceTabPagination, 'size', initialState.advanceTab.pageSize),\r\n                pageTotal: get(advanceTabPagination, 'totalPages', 0),\r\n                query: get(advanceTabPagination, 'query') || '',\r\n              }\r\n            : null),\r\n        },\r\n      };\r\n    case 'ADVANCE_SEARCH_DETAILS_TABLE_FAILURE':\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        advanceTab: {\r\n          ...state.advanceTab,\r\n          items: initialState.advanceTab.items,\r\n          isloadingTable: initialState.advanceTab.isloadingTable,\r\n        },\r\n      };\r\n\r\n    case 'ADVANCE_SEARCH_DETAILS_FILTER_FAILURE':\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        advanceTab: {\r\n          ...state.advanceTab,\r\n          filters: initialState.advanceTab.filters,\r\n          isloadingFilters: initialState.advanceTab.isloadingFilters,\r\n        },\r\n      };\r\n\r\n    case 'SET_ADVANCE_SEARCH_TAB_SEARCH_DETAILS':\r\n      return {\r\n        ...state,\r\n        advanceTab: {\r\n          ...state.advanceTab,\r\n          ...action.payload,\r\n        },\r\n      };\r\n    case 'SET_ADVANCE_SEARCH_TABLE_FILTER_VALUES':\r\n      return {\r\n        ...state,\r\n        advanceTab: {\r\n          ...state.advanceTab,\r\n          filterValues: action.payload,\r\n        },\r\n      };\r\n    case 'RESET_ADVANCE_SEARCH_TAB_DETAILS':\r\n      return {\r\n        ...state,\r\n        advanceTab: initialState.advanceTab,\r\n      };\r\n    case 'SET_PULL_CLOSED_RECORDS':\r\n      return {\r\n        ...state,\r\n        advanceTab: {\r\n          ...state.advanceTab,\r\n          pullClosedRecords: action.payload,\r\n        },\r\n      };\r\n    case 'RESET_RFI_DASHBOARD_DATA':\r\n      return {\r\n        ...state,\r\n        lossInformation: initialState.lossInformation,\r\n        selectedClaimsDetails: initialState.selectedClaimsDetails,\r\n        sanctionCheckStatus: initialState.sanctionCheckStatus,\r\n        taskDashboard: {\r\n          ...state.taskDashboard,\r\n          taskDetails: initialState.taskDashboard.taskDetails,\r\n        },\r\n      };\r\n    case 'CLAIMS_GET_RFI_HISTORY_DOCUMENTS_REQUEST':\r\n      return {\r\n        ...state,\r\n        rfiHistoryDocuments: {\r\n          documentList: [],\r\n          isLoading: true,\r\n        },\r\n      };\r\n    case 'CLAIMS_GET_RFI_HISTORY_DOCUMENTS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        rfiHistoryDocuments: {\r\n          documentList: action.payload?.documentList,\r\n          isLoading: false,\r\n        },\r\n      };\r\n    case 'CLAIMS_GET_RFI_HISTORY_DOCUMENTS_FAILURE':\r\n      return {\r\n        ...state,\r\n        rfiHistoryDocuments: {\r\n          documentList: initialState.rfiHistoryDocuments.documentList,\r\n          isLoading: action.payload,\r\n        },\r\n      };\r\n\r\n    case 'GET_BPM_CLAIM_DETAILS_REQUEST':\r\n      return {\r\n        ...state,\r\n        bpmClaimInformation: {\r\n          ...state?.bpmClaimInformation,\r\n          data: {},\r\n          isLoading: true,\r\n        },\r\n      };\r\n    case 'GET_BPM_CLAIM_DETAILS_SUCCESS':\r\n      return {\r\n        ...state,\r\n        bpmClaimInformation: {\r\n          data: action?.payload,\r\n          isLoading: false,\r\n        },\r\n      };\r\n    case 'GET_BPM_CLAIM_DETAILS_FAILURE':\r\n      return {\r\n        ...state,\r\n        bpmClaimInformation: {\r\n          ...state?.bpmClaimInformation,\r\n          data: {},\r\n          isLoading: false,\r\n        },\r\n        error: action.payload,\r\n      };\r\n    case 'CLAIMS_EDIT_RE_OPENED_TASK_SUCCESS':\r\n    case 'CLAIMS_COMPLEXITY_VALUES_GET_FAILURE':\r\n    case 'CLAIMS_SAVE_COMPLEXITY_INSURED_POST_ERROR':\r\n    case 'CLAIMS_COMPLEXITY_SEARCH_POST_FAILURE':\r\n    case 'CLAIMS_PROCESSING_FILTER_POST_ERROR':\r\n    case 'CLAIMS_LOSS_FILTER_POST_ERROR':\r\n    case 'CLAIMS_LOSS_FILTER_GET_ERROR':\r\n    case 'CLAIMS_DETAILS_INFORMATION_POST_FAILURE':\r\n    case 'CLAIMS_GET_FAILURE':\r\n    case 'CLAIMS_DETAILS_ERROR':\r\n    case 'CLAIMS_SETTLEMENT_CURRENCY_GET_FAILURE':\r\n    case 'CLAIMS_LOSS_QUALIFIERS_GET_FAILURE':\r\n    case 'CLAIMS_COMPLEXITY_INSURED_GET_FAILURE':\r\n    case 'CLAIMS_BE_ADJUSTER_GET_FAILURE':\r\n    case 'CLAIMS_UNDERWRITING_GROUPS_GET_FAILURE':\r\n    case 'CLAIMS_STATUSES_GET_FAILURE':\r\n    case 'CLAIMS_COMPLEXITY_GET_FAILURE':\r\n    case 'CLAIMS_DETAILS_INFORMATION_SUBMIT_FAILURE':\r\n    case 'CLAIMS_COMPLEXITY_DIVISION_GET_FAILURE':\r\n    case 'CLAIMS_COMPLEXITY_DIVISION_SAVE_FAILURE':\r\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_COMPLEX_ID_GET_FAILURE':\r\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_COMPLEX_ID_SAVE_FAILURE':\r\n    case 'CLAIMS_ADD_COMPLEXITY_VALUES_FAILURE':\r\n    case 'CLAIMS_REMOVE_COMPLEXITY_VALUES_FAILURE':\r\n    case 'CLAIMS_COMPLEXITY_ADD_REFERRAL_FAILURE':\r\n    case 'CLAIMS_COMPLEXITY_FLAGGED_GET_FAILURE':\r\n    case 'CLAIMS_REMOVE_REFERRAL_VALUES_FAILURE':\r\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_REFERRAL_ID_GET_FAILURE':\r\n    case 'CLAIMS_COMPLEXITY_DIVISION_BY_REFERRAL_ID_SAVE_FAILURE':\r\n    case 'CLAIMS_COMPLEXITY_REFERRAL_VALUES_GET_FAILURE':\r\n    case 'CLAIMS_SAVE_COMPLEXITY_POLICY_POST_ERROR':\r\n    case 'CLAIMS_REFERRAL_VALUES_GET_FAILURE':\r\n    case 'CLAIMS_COMPLEXITY_BASIS_VALUE_GET_FAILURE':\r\n    case 'CLAIMS_REFERRAL_RESPONSE_GET_FAILURE':\r\n    case 'CLAIMS_COMPLEXITY_POLICY_REMOVE_FAILURE':\r\n    case 'CLAIMS_COMPLEXITY_INSURED_REMOVE_FAILURE':\r\n    case 'CLAIMS_SAVE_NOTES_POST_ERROR':\r\n    case 'CLAIM_NOTES_POST_FAILURE':\r\n    case 'CLAIM_TASK_NOTES_GET_FAILURE':\r\n    case 'CLAIMS_TASK_PRIORITY_POST_FAILURE':\r\n    case 'CLAIMS_TASK_SANCTIONS_CHECK_POST_FAILURE':\r\n    case 'CLAIMS_TASK_PROCESSING_SAVE_ASSIGNEES_ERROR':\r\n    case 'CLAIMS_TASK_PROCESSING_GET_CHECKLIST_FAILURE':\r\n    case 'CLAIMS_TASK_PROCESSING_GET_NEXT_TASKLIST_FAILURE':\r\n    case 'CLAIMS_TASK_PROCESSING_SAVE_CHECKLIST_ACTIONS_ERROR':\r\n    case 'CLAIMS_TASK_PROCESSING_SAVE_NEXT_ACTION_ERROR':\r\n    case 'CLAIMS_SET_PRIORITY_FAILURE':\r\n    case 'GET_ASSOCIATED_TASK_FAILURE':\r\n    case 'CLAIMREF_EDIT_NOTES_FAILURE':\r\n    case 'CURRENCY_PURCHASED_VALUE_GET_FAILURE':\r\n    case 'CLOSE_SANCTIONS_CHECK_FAILURE':\r\n    case 'CLAIM_RETURN_TO_TEAM_QUEUE_ERROR':\r\n    case 'CLAIMS_SEND_RFI_POST_FAILURE':\r\n    case 'CLAIMS_CLOSE_RFI_POST_FAILURE':\r\n    case 'CLOSE_CLAIMS_POST_ERROR':\r\n    case 'CLAIM_COMPLEXITY_TYPES_GET_FAILURE':\r\n    case 'CLAIMS_PROCESSING_SINGLE_ASSIGN_ERROR':\r\n    case 'CLAIMS_LOSS_ACTIONS_GET_FAILURE':\r\n    case 'LOSSES_TAB_POST_FAILURE':\r\n    case 'CLAIMS_CASE_INCIDENT_DETAILS_GET_FAILURE':\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default claimsReducer;\r\n"]},"metadata":{},"sourceType":"module"}