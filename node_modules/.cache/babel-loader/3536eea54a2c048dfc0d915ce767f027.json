{"ast":null,"code":"var _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\components\\\\Loader\\\\Loader.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport get from 'lodash/get'; // app\n\nimport { LoaderView } from './Loader.view';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nLoader.propTypes = {\n  visible: PropTypes.bool.isRequired,\n  absolute: PropTypes.bool,\n  panel: PropTypes.bool,\n  label: PropTypes.string\n};\nLoader.defaultProps = {\n  visible: true\n};\nexport default function Loader(_ref) {\n  _s();\n\n  var visible = _ref.visible,\n      absolute = _ref.absolute,\n      panel = _ref.panel,\n      label = _ref.label,\n      inline = _ref.inline;\n  var uiLoaderQueue = useSelector(function (state) {\n    return get(state, 'ui.loader.queue', []);\n  });\n  var uiNavExpanded = useSelector(function (state) {\n    return get(state, 'ui.nav.expanded');\n  });\n  var uiSidebarExpanded = useSelector(function (state) {\n    return get(state, 'ui.sidebar.expanded');\n  });\n  var message = uiLoaderQueue.length > 0 ? uiLoaderQueue[0].message : label;\n  return /*#__PURE__*/_jsxDEV(LoaderView, {\n    message: message,\n    visible: visible,\n    absolute: absolute,\n    panel: absolute ? false : panel // making sure we don't have multiple props set to true\n    ,\n    navExpanded: uiNavExpanded,\n    sidebarExpanded: uiSidebarExpanded,\n    inline: inline\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Loader, \"EkOMDvFH8JCmNfm/b5iMtyiAXR0=\", false, function () {\n  return [useSelector, useSelector, useSelector];\n});\n\n_c = Loader;\n\nvar _c;\n\n$RefreshReg$(_c, \"Loader\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/Loader/Loader.js"],"names":["React","PropTypes","useSelector","get","LoaderView","Loader","propTypes","visible","bool","isRequired","absolute","panel","label","string","defaultProps","inline","uiLoaderQueue","state","uiNavExpanded","uiSidebarExpanded","message","length"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,GAAP,MAAgB,YAAhB,C,CAEA;;AACA,SAASC,UAAT,QAA2B,eAA3B;;AAEAC,MAAM,CAACC,SAAP,GAAmB;AACjBC,EAAAA,OAAO,EAAEN,SAAS,CAACO,IAAV,CAAeC,UADP;AAEjBC,EAAAA,QAAQ,EAAET,SAAS,CAACO,IAFH;AAGjBG,EAAAA,KAAK,EAAEV,SAAS,CAACO,IAHA;AAIjBI,EAAAA,KAAK,EAAEX,SAAS,CAACY;AAJA,CAAnB;AAOAR,MAAM,CAACS,YAAP,GAAsB;AACpBP,EAAAA,OAAO,EAAE;AADW,CAAtB;AAIA,eAAe,SAASF,MAAT,OAA6D;AAAA;;AAAA,MAA3CE,OAA2C,QAA3CA,OAA2C;AAAA,MAAlCG,QAAkC,QAAlCA,QAAkC;AAAA,MAAxBC,KAAwB,QAAxBA,KAAwB;AAAA,MAAjBC,KAAiB,QAAjBA,KAAiB;AAAA,MAAVG,MAAU,QAAVA,MAAU;AAC1E,MAAMC,aAAa,GAAGd,WAAW,CAAC,UAACe,KAAD;AAAA,WAAWd,GAAG,CAACc,KAAD,EAAQ,iBAAR,EAA2B,EAA3B,CAAd;AAAA,GAAD,CAAjC;AACA,MAAMC,aAAa,GAAGhB,WAAW,CAAC,UAACe,KAAD;AAAA,WAAWd,GAAG,CAACc,KAAD,EAAQ,iBAAR,CAAd;AAAA,GAAD,CAAjC;AACA,MAAME,iBAAiB,GAAGjB,WAAW,CAAC,UAACe,KAAD;AAAA,WAAWd,GAAG,CAACc,KAAD,EAAQ,qBAAR,CAAd;AAAA,GAAD,CAArC;AAEA,MAAMG,OAAO,GAAGJ,aAAa,CAACK,MAAd,GAAuB,CAAvB,GAA2BL,aAAa,CAAC,CAAD,CAAb,CAAiBI,OAA5C,GAAsDR,KAAtE;AAEA,sBACE,QAAC,UAAD;AACE,IAAA,OAAO,EAAEQ,OADX;AAEE,IAAA,OAAO,EAAEb,OAFX;AAGE,IAAA,QAAQ,EAAEG,QAHZ;AAIE,IAAA,KAAK,EAAEA,QAAQ,GAAG,KAAH,GAAWC,KAJ5B,CAImC;AAJnC;AAKE,IAAA,WAAW,EAAEO,aALf;AAME,IAAA,eAAe,EAAEC,iBANnB;AAOE,IAAA,MAAM,EAAEJ;AAPV;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GAlBuBV,M;UACAH,W,EACAA,W,EACIA,W;;;KAHJG,M","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector } from 'react-redux';\r\nimport get from 'lodash/get';\r\n\r\n// app\r\nimport { LoaderView } from './Loader.view';\r\n\r\nLoader.propTypes = {\r\n  visible: PropTypes.bool.isRequired,\r\n  absolute: PropTypes.bool,\r\n  panel: PropTypes.bool,\r\n  label: PropTypes.string,\r\n};\r\n\r\nLoader.defaultProps = {\r\n  visible: true,\r\n};\r\n\r\nexport default function Loader({ visible, absolute, panel, label, inline }) {\r\n  const uiLoaderQueue = useSelector((state) => get(state, 'ui.loader.queue', []));\r\n  const uiNavExpanded = useSelector((state) => get(state, 'ui.nav.expanded'));\r\n  const uiSidebarExpanded = useSelector((state) => get(state, 'ui.sidebar.expanded'));\r\n\r\n  const message = uiLoaderQueue.length > 0 ? uiLoaderQueue[0].message : label;\r\n\r\n  return (\r\n    <LoaderView\r\n      message={message}\r\n      visible={visible}\r\n      absolute={absolute}\r\n      panel={absolute ? false : panel} // making sure we don't have multiple props set to true\r\n      navExpanded={uiNavExpanded}\r\n      sidebarExpanded={uiSidebarExpanded}\r\n      inline={inline}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}