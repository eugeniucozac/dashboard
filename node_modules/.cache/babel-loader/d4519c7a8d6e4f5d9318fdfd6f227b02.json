{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { addLoader, authLogout, enqueueNotification, removeLoader, hideModal } from 'stores';\nimport * as utils from 'utils';\nimport isEmpty from 'lodash/isEmpty';\nexport var postPreBindInfo = function postPreBindInfo(riskId, body) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/risk.actions.postPreBindInfo',\n      message: 'Data missing for POST request'\n    };\n\n    if (!body || isEmpty(body) || !riskId) {\n      dispatch(postPreBindInfoFailure(defaultError));\n      dispatch(enqueueNotification('notification.generic.request', 'error'));\n      dispatch(removeLoader('postPreBindInfo'));\n      return;\n    }\n\n    var data = _objectSpread({}, body);\n\n    dispatch(postPreBindInfoRequest(data));\n    dispatch(addLoader('postPreBindInfo'));\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.auth,\n      path: \"api/v1/risks/\".concat(riskId, \"/pre-bind\"),\n      data: data\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (data) {\n      dispatch(postPreBindInfoSuccess(data));\n      dispatch(enqueueNotification('notification.preBindInfo.postSuccess', 'success'));\n      return data;\n    })[\"catch\"](function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API post error (risk.postPreBindInfo)'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(postPreBindInfoFailure(err));\n      dispatch(enqueueNotification(utils.api.getErrorMessage(err), 'error'));\n      return err;\n    })[\"finally\"](function () {\n      dispatch(hideModal());\n      dispatch(removeLoader('postPreBindInfo'));\n    });\n  };\n};\nexport var postPreBindInfoRequest = function postPreBindInfoRequest(formData) {\n  return {\n    type: 'RISK_PREBIND_POST_REQUEST',\n    payload: formData\n  };\n};\nexport var postPreBindInfoSuccess = function postPreBindInfoSuccess(responseData) {\n  return {\n    type: 'RISK_PREBIND_POST_SUCCESS',\n    payload: responseData\n  };\n};\nexport var postPreBindInfoFailure = function postPreBindInfoFailure(error) {\n  return {\n    type: 'RISK_PREBIND_POST_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/risk/risk.actions.post.preBindInfo.js"],"names":["addLoader","authLogout","enqueueNotification","removeLoader","hideModal","utils","isEmpty","postPreBindInfo","riskId","body","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","message","postPreBindInfoFailure","data","postPreBindInfoRequest","api","post","token","accessToken","path","then","response","handleResponse","postPreBindInfoSuccess","err","errorParams","handleError","handleUnauthorized","getErrorMessage","formData","type","payload","responseData","error"],"mappings":"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","sourcesContent":["import { addLoader, authLogout, enqueueNotification, removeLoader, hideModal } from 'stores';\r\nimport * as utils from 'utils';\r\nimport isEmpty from 'lodash/isEmpty';\r\n\r\nexport const postPreBindInfo = (riskId, body) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/risk.actions.postPreBindInfo',\r\n    message: 'Data missing for POST request',\r\n  };\r\n\r\n  if (!body || isEmpty(body) || !riskId) {\r\n    dispatch(postPreBindInfoFailure(defaultError));\r\n    dispatch(enqueueNotification('notification.generic.request', 'error'));\r\n    dispatch(removeLoader('postPreBindInfo'));\r\n    return;\r\n  }\r\n\r\n  const data = { ...body };\r\n\r\n  dispatch(postPreBindInfoRequest(data));\r\n  dispatch(addLoader('postPreBindInfo'));\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.auth,\r\n      path: `api/v1/risks/${riskId}/pre-bind`,\r\n      data,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((data) => {\r\n      dispatch(postPreBindInfoSuccess(data));\r\n      dispatch(enqueueNotification('notification.preBindInfo.postSuccess', 'success'));\r\n      return data;\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        ...defaultError,\r\n        message: 'API post error (risk.postPreBindInfo)',\r\n      };\r\n\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(postPreBindInfoFailure(err));\r\n      dispatch(enqueueNotification(utils.api.getErrorMessage(err), 'error'));\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(hideModal());\r\n      dispatch(removeLoader('postPreBindInfo'));\r\n    });\r\n};\r\n\r\nexport const postPreBindInfoRequest = (formData) => {\r\n  return {\r\n    type: 'RISK_PREBIND_POST_REQUEST',\r\n    payload: formData,\r\n  };\r\n};\r\n\r\nexport const postPreBindInfoSuccess = (responseData) => {\r\n  return {\r\n    type: 'RISK_PREBIND_POST_SUCCESS',\r\n    payload: responseData,\r\n  };\r\n};\r\n\r\nexport const postPreBindInfoFailure = (error) => {\r\n  return {\r\n    type: 'RISK_PREBIND_POST_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}