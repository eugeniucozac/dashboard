{"ast":null,"code":"import _defineProperty from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ClaimsSelectMatrix\\\\ClaimsSelectMatrix.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types'; //app\n\nimport { ClaimsSelectMatrixView } from './ClaimsSelectMatrix.view';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nClaimsSelectMatrix.prototypes = {\n  initMatrixData: PropTypes.array.isRequired,\n  matrixPrimaryKey: PropTypes.string.isRequired,\n  matrixCheckboxValueKey: PropTypes.string.isRequired,\n  matrixPrimaryKeyId: PropTypes.string.isRequired,\n  matrixExceptionColumns: PropTypes.array.isRequired,\n  resetMatrix: PropTypes.func.isRequired,\n  saveMatrix: PropTypes.func.isRequired,\n  saveEachMatrixChange: PropTypes.func.isRequired,\n  matrixDataDiff: PropTypes.object.isRequired\n};\nexport default function ClaimsSelectMatrix(_ref) {\n  var initMatrixData = _ref.initMatrixData,\n      matrixPrimaryKey = _ref.matrixPrimaryKey,\n      matrixCheckboxValueKey = _ref.matrixCheckboxValueKey,\n      matrixPrimaryKeyId = _ref.matrixPrimaryKeyId,\n      matrixExceptionColumns = _ref.matrixExceptionColumns,\n      resetMatrix = _ref.resetMatrix,\n      saveMatrix = _ref.saveMatrix,\n      saveEachMatrixChange = _ref.saveEachMatrixChange,\n      matrixDataDiff = _ref.matrixDataDiff;\n  var columns = [{\n    id: 'division',\n    label: utils.string.t('claims.complexityRulesManagementDetails.division')\n  }].concat(_toConsumableArray(Object.keys(initMatrixData[0]).filter(function (key) {\n    return key !== matrixPrimaryKey;\n  }).map(function (ins) {\n    return {\n      id: ins,\n      label: !matrixExceptionColumns.includes(ins.toUpperCase()) ? utils.string.capitalise(ins) : ins.toUpperCase()\n    };\n  })));\n  var matrixRowKeys = initMatrixData.map(function (div) {\n    var uniqId = '';\n    Object.keys(div).every(function (item) {\n      if (uniqId) return false;\n\n      if (div[item] && div[item] !== matrixPrimaryKey) {\n        uniqId = div[item][matrixPrimaryKeyId];\n      }\n\n      return true;\n    });\n    return div[matrixPrimaryKey].replaceAll(' ', '') + '-' + uniqId;\n  });\n  var matrixValues = initMatrixData.length && initMatrixData.map(function (div) {\n    var newData = _objectSpread({}, div);\n\n    delete newData[matrixPrimaryKey];\n    return newData;\n  });\n  var fields = matrixValues.length && matrixValues.map(function (matrixRow, ind) {\n    var rowValues = Object.entries(matrixRow).map(function (data) {\n      return {\n        instance: data[0],\n        instanceVal: data[1]\n      };\n    });\n    return rowValues.map(function (eachField, idx) {\n      return {\n        name: matrixRowKeys[ind] + '-' + eachField.instance + '-' + idx,\n        type: 'checkbox',\n        disabled: !(eachField === null || eachField === void 0 ? void 0 : eachField.instanceVal),\n        defaultValue: (eachField === null || eachField === void 0 ? void 0 : eachField.instanceVal) ? !!eachField.instanceVal[matrixCheckboxValueKey] : false,\n        muiComponentProps: {\n          onChange: function onChange(name, value) {\n            saveEachMatrixChange(_defineProperty({}, name, value));\n          }\n        }\n      };\n    });\n  });\n\n  var saveStateMatrix = function saveStateMatrix(matrixValues) {\n    var saveMatrixValues = constructSaveMatrix(matrixDataDiff, initMatrixData);\n    saveMatrix(saveMatrixValues);\n  };\n\n  var constructSaveMatrix = function constructSaveMatrix(dataDiff, matrixData) {\n    var result = [];\n    var groupedMatrixValues = groupMatrixValues(dataDiff);\n    groupedMatrixValues.forEach(function (item) {\n      var matchedVal = matrixData.filter(function (row) {\n        var rowCheck = row[matrixPrimaryKey].replaceAll(' ', '') === item.key;\n        var rowIdCheck = false;\n\n        if (rowCheck) {\n          var refData = _objectSpread({}, row);\n\n          delete refData[matrixPrimaryKey];\n          var nonNullData = Object.values(refData).find(function (val) {\n            return val;\n          });\n          rowIdCheck = nonNullData && nonNullData[matrixPrimaryKeyId] === item.id;\n        }\n\n        return rowCheck && rowIdCheck;\n      })[0];\n      item.values.forEach(function (col) {\n        var updatedVal = _objectSpread(_objectSpread({}, matchedVal[col.id]), {}, _defineProperty({}, matrixCheckboxValueKey, col.check));\n\n        result.push(updatedVal);\n      });\n    });\n    return result;\n  };\n\n  var groupMatrixValues = function groupMatrixValues(dataDiff) {\n    var saveMatrixValues = [];\n    var formatFieldsData = Object.entries(dataDiff).map(function (item) {\n      return _defineProperty({}, item[0], item[1]);\n    });\n    formatFieldsData.forEach(function (item) {\n      var matCoords = Object.keys(item)[0].split('-');\n      var currentRowLabel = matCoords[0];\n      var currentRowLabelId = Number(matCoords[1]);\n      var currentColLabel = matCoords[2];\n      var existingEntryInd = -1;\n      var currentMatrixVal = Object.values(item)[0] ? 1 : 0;\n\n      if (saveMatrixValues.length) {\n        saveMatrixValues.forEach(function (itr, idx) {\n          existingEntryInd = itr.key === currentRowLabel && itr.id === currentRowLabelId ? idx : existingEntryInd;\n        });\n      }\n\n      var isExistingEntry = existingEntryInd > -1;\n\n      if (isExistingEntry) {\n        saveMatrixValues[existingEntryInd].values = [].concat(_toConsumableArray(saveMatrixValues[existingEntryInd].values), [{\n          id: currentColLabel,\n          check: currentMatrixVal\n        }]);\n      } else {\n        saveMatrixValues.push({\n          id: currentRowLabelId,\n          key: currentRowLabel,\n          values: [{\n            id: currentColLabel,\n            check: currentMatrixVal\n          }]\n        });\n      }\n    });\n    return saveMatrixValues;\n  };\n\n  return /*#__PURE__*/_jsxDEV(ClaimsSelectMatrixView, {\n    cols: columns,\n    rows: initMatrixData,\n    matrixRowKeys: matrixRowKeys,\n    matrixPrimaryKey: matrixPrimaryKey,\n    fields: fields,\n    resetMatrix: resetMatrix,\n    saveMatrix: saveStateMatrix,\n    matrixDataDiff: matrixDataDiff\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n}\n_c = ClaimsSelectMatrix;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimsSelectMatrix\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ClaimsSelectMatrix/ClaimsSelectMatrix.js"],"names":["React","PropTypes","ClaimsSelectMatrixView","utils","ClaimsSelectMatrix","prototypes","initMatrixData","array","isRequired","matrixPrimaryKey","string","matrixCheckboxValueKey","matrixPrimaryKeyId","matrixExceptionColumns","resetMatrix","func","saveMatrix","saveEachMatrixChange","matrixDataDiff","object","columns","id","label","t","Object","keys","filter","key","map","ins","includes","toUpperCase","capitalise","matrixRowKeys","div","uniqId","every","item","replaceAll","matrixValues","length","newData","fields","matrixRow","ind","rowValues","entries","data","instance","instanceVal","eachField","idx","name","type","disabled","defaultValue","muiComponentProps","onChange","value","saveStateMatrix","saveMatrixValues","constructSaveMatrix","dataDiff","matrixData","result","groupedMatrixValues","groupMatrixValues","forEach","matchedVal","row","rowCheck","rowIdCheck","refData","nonNullData","values","find","val","col","updatedVal","check","push","formatFieldsData","matCoords","split","currentRowLabel","currentRowLabelId","Number","currentColLabel","existingEntryInd","currentMatrixVal","itr","isExistingEntry"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n//app\r\nimport { ClaimsSelectMatrixView } from './ClaimsSelectMatrix.view';\r\nimport * as utils from 'utils';\r\n\r\nClaimsSelectMatrix.prototypes = {\r\n  initMatrixData: PropTypes.array.isRequired,\r\n  matrixPrimaryKey: PropTypes.string.isRequired,\r\n  matrixCheckboxValueKey: PropTypes.string.isRequired,\r\n  matrixPrimaryKeyId: PropTypes.string.isRequired,\r\n  matrixExceptionColumns: PropTypes.array.isRequired,\r\n  resetMatrix: PropTypes.func.isRequired,\r\n  saveMatrix: PropTypes.func.isRequired,\r\n  saveEachMatrixChange: PropTypes.func.isRequired,\r\n  matrixDataDiff: PropTypes.object.isRequired,\r\n};\r\nexport default function ClaimsSelectMatrix({\r\n  initMatrixData,\r\n  matrixPrimaryKey,\r\n  matrixCheckboxValueKey,\r\n  matrixPrimaryKeyId,\r\n  matrixExceptionColumns,\r\n  resetMatrix,\r\n  saveMatrix,\r\n  saveEachMatrixChange,\r\n  matrixDataDiff,\r\n}) {\r\n  const columns = [\r\n    { id: 'division', label: utils.string.t('claims.complexityRulesManagementDetails.division') },\r\n    ...Object.keys(initMatrixData[0])\r\n      .filter((key) => key !== matrixPrimaryKey)\r\n      .map((ins) => ({\r\n        id: ins,\r\n        label: !matrixExceptionColumns.includes(ins.toUpperCase()) ? utils.string.capitalise(ins) : ins.toUpperCase(),\r\n      })),\r\n  ];\r\n\r\n  const matrixRowKeys = initMatrixData.map((div) => {\r\n    let uniqId = '';\r\n    Object.keys(div).every((item) => {\r\n      if (uniqId) return false;\r\n      if (div[item] && div[item] !== matrixPrimaryKey) {\r\n        uniqId = div[item][matrixPrimaryKeyId];\r\n      }\r\n      return true;\r\n    });\r\n    return div[matrixPrimaryKey].replaceAll(' ', '') + '-' + uniqId;\r\n  });\r\n  const matrixValues =\r\n    initMatrixData.length &&\r\n    initMatrixData.map((div) => {\r\n      const newData = { ...div };\r\n      delete newData[matrixPrimaryKey];\r\n      return newData;\r\n    });\r\n\r\n  const fields =\r\n    matrixValues.length &&\r\n    matrixValues.map((matrixRow, ind) => {\r\n      const rowValues = Object.entries(matrixRow).map((data) => ({ instance: data[0], instanceVal: data[1] }));\r\n      return rowValues.map((eachField, idx) => {\r\n        return {\r\n          name: matrixRowKeys[ind] + '-' + eachField.instance + '-' + idx,\r\n          type: 'checkbox',\r\n          disabled: !eachField?.instanceVal,\r\n          defaultValue: eachField?.instanceVal ? !!eachField.instanceVal[matrixCheckboxValueKey] : false,\r\n          muiComponentProps: {\r\n            onChange: (name, value) => {\r\n              saveEachMatrixChange({ [name]: value });\r\n            },\r\n          },\r\n        };\r\n      });\r\n    });\r\n\r\n  const saveStateMatrix = (matrixValues) => {\r\n    const saveMatrixValues = constructSaveMatrix(matrixDataDiff, initMatrixData);\r\n    saveMatrix(saveMatrixValues);\r\n  };\r\n\r\n  const constructSaveMatrix = (dataDiff, matrixData) => {\r\n    const result = [];\r\n    const groupedMatrixValues = groupMatrixValues(dataDiff);\r\n    groupedMatrixValues.forEach((item) => {\r\n      const matchedVal = matrixData.filter((row) => {\r\n        const rowCheck = row[matrixPrimaryKey].replaceAll(' ', '') === item.key;\r\n        let rowIdCheck = false;\r\n        if (rowCheck) {\r\n          const refData = { ...row };\r\n          delete refData[matrixPrimaryKey];\r\n          const nonNullData = Object.values(refData).find((val) => val);\r\n          rowIdCheck = nonNullData && nonNullData[matrixPrimaryKeyId] === item.id;\r\n        }\r\n        return rowCheck && rowIdCheck;\r\n      })[0];\r\n      item.values.forEach((col) => {\r\n        const updatedVal = { ...matchedVal[col.id], [matrixCheckboxValueKey]: col.check };\r\n        result.push(updatedVal);\r\n      });\r\n    });\r\n    return result;\r\n  };\r\n  const groupMatrixValues = (dataDiff) => {\r\n    let saveMatrixValues = [];\r\n    const formatFieldsData = Object.entries(dataDiff).map((item) => ({ [item[0]]: item[1] }));\r\n    formatFieldsData.forEach((item) => {\r\n      const matCoords = Object.keys(item)[0].split('-');\r\n      const currentRowLabel = matCoords[0];\r\n      const currentRowLabelId = Number(matCoords[1]);\r\n      const currentColLabel = matCoords[2];\r\n      let existingEntryInd = -1;\r\n      const currentMatrixVal = Object.values(item)[0] ? 1 : 0;\r\n      if (saveMatrixValues.length) {\r\n        saveMatrixValues.forEach((itr, idx) => {\r\n          existingEntryInd = itr.key === currentRowLabel && itr.id === currentRowLabelId ? idx : existingEntryInd;\r\n        });\r\n      }\r\n      const isExistingEntry = existingEntryInd > -1;\r\n      if (isExistingEntry) {\r\n        saveMatrixValues[existingEntryInd].values = [\r\n          ...saveMatrixValues[existingEntryInd].values,\r\n          { id: currentColLabel, check: currentMatrixVal },\r\n        ];\r\n      } else {\r\n        saveMatrixValues.push({ id: currentRowLabelId, key: currentRowLabel, values: [{ id: currentColLabel, check: currentMatrixVal }] });\r\n      }\r\n    });\r\n    return saveMatrixValues;\r\n  };\r\n\r\n  return (\r\n    <ClaimsSelectMatrixView\r\n      cols={columns}\r\n      rows={initMatrixData}\r\n      matrixRowKeys={matrixRowKeys}\r\n      matrixPrimaryKey={matrixPrimaryKey}\r\n      fields={fields}\r\n      resetMatrix={resetMatrix}\r\n      saveMatrix={saveStateMatrix}\r\n      matrixDataDiff={matrixDataDiff}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}