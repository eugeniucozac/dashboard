{"ast":null,"code":"var _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\components\\\\TreeView\\\\TreeView.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types'; //app\n\nimport { FilterBar, Tooltip } from 'components';\nimport * as utils from 'utils';\nimport styles from './TreeView.styles'; //mui\n\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { TreeView as TreeViewMui, TreeItem } from '@material-ui/lab';\nimport { Box, Typography, Divider, makeStyles } from \"@material-ui/core\";\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nTreeView.propTypes = {\n  rootRef: PropTypes.string.isRequired,\n  treeData: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    label: PropTypes.string.isRequired,\n    labelInfo: PropTypes.string,\n    children: PropTypes.array.isRequired\n  }),\n  handleSelect: PropTypes.func.isRequired,\n  widgetTitle: PropTypes.string,\n  columns: PropTypes.arrayOf(PropTypes.objectOf({\n    header: PropTypes.string,\n    flex: PropTypes.string\n  })),\n  defaultExpanded: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired\n};\nexport default function TreeView(_ref) {\n  var _this = this;\n\n  var treeData = _ref.treeData,\n      rootRef = _ref.rootRef,\n      handleAccordionClick = _ref.handleAccordionClick,\n      widgetTitle = _ref.widgetTitle,\n      columns = _ref.columns,\n      defaultExpanded = _ref.defaultExpanded;\n  var classes = makeStyles(styles, {\n    name: 'TreeView'\n  })();\n  var searchFields = [{\n    name: 'query',\n    type: 'text',\n    placeholder: utils.string.t('dms.search.searchDocuments'),\n    defaultValue: '',\n    gridSize: {\n      xs: 12\n    },\n    muiComponentProps: {\n      autoComplete: 'off'\n    }\n  }];\n  var searchActions = [{\n    name: 'filter',\n    label: utils.string.t('app.searchLabel'),\n    handler: function handler(values) {}\n  }, {\n    name: 'reset',\n    label: utils.string.t('app.reset'),\n    handler: {}\n  }];\n\n  var renderTree = function renderTree(nodes) {\n    var _nodes$children;\n\n    return /*#__PURE__*/_jsxDEV(TreeItem, {\n      nodeId: (nodes === null || nodes === void 0 ? void 0 : nodes.id) || (nodes === null || nodes === void 0 ? void 0 : nodes.referenceId),\n      label: /*#__PURE__*/_jsxDEV(Box, {\n        className: classes.rootTree,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          className: classes.labelCol,\n          children: /*#__PURE__*/_jsxDEV(Tooltip, {\n            title: 'Tooltip' //need to add tooltip data\n            ,\n            placement: 'top',\n            arrow: true,\n            children: nodes === null || nodes === void 0 ? void 0 : nodes.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(Typography, {\n          className: classes.lebelInfoCol,\n          variant: \"caption\",\n          color: \"inherit\",\n          children: nodes === null || nodes === void 0 ? void 0 : nodes.labelInfo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, _this),\n      children: utils.generic.isInvalidOrEmptyArray(nodes === null || nodes === void 0 ? void 0 : nodes.children) ? null : nodes === null || nodes === void 0 ? void 0 : (_nodes$children = nodes.children) === null || _nodes$children === void 0 ? void 0 : _nodes$children.map(function (node) {\n        return renderTree(node);\n      })\n    }, (nodes === null || nodes === void 0 ? void 0 : nodes.id) || (nodes === null || nodes === void 0 ? void 0 : nodes.referenceId), false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }, _this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    pt: 2,\n    display: \"flex\",\n    flexDirection: \"column\",\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      alignItems: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(DescriptionIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        children: widgetTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      pt: 2,\n      pl: 1,\n      pr: 1,\n      children: [/*#__PURE__*/_jsxDEV(FilterBar, {\n        id: \"userFilter\",\n        fields: searchFields,\n        actions: searchActions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        children: columns.map(function (_ref2) {\n          var header = _ref2.header,\n              flex = _ref2.flex;\n          return /*#__PURE__*/_jsxDEV(Box, {\n            flex: flex,\n            pl: 2,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              children: header\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 17\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, _this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TreeViewMui, {\n        \"aria-label\": \"rich object\",\n        defaultCollapseIcon: /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 32\n        }, this),\n        defaultExpanded: defaultExpanded,\n        defaultExpandIcon: /*#__PURE__*/_jsxDEV(ChevronRightIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 30\n        }, this),\n        sx: {\n          height: 110,\n          flexGrow: 1,\n          maxWidth: 400,\n          overflowY: 'auto'\n        },\n        onNodeSelect: handleAccordionClick,\n        children: rootRef ? renderTree(treeData) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n_c = TreeView;\n\nvar _c;\n\n$RefreshReg$(_c, \"TreeView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/TreeView/TreeView.js"],"names":["React","PropTypes","FilterBar","Tooltip","utils","styles","ExpandMoreIcon","TreeView","TreeViewMui","TreeItem","Box","Typography","Divider","makeStyles","ChevronRightIcon","DescriptionIcon","propTypes","rootRef","string","isRequired","treeData","shape","id","label","labelInfo","children","array","handleSelect","func","widgetTitle","columns","arrayOf","objectOf","header","flex","defaultExpanded","handleAccordionClick","classes","name","searchFields","type","placeholder","t","defaultValue","gridSize","xs","muiComponentProps","autoComplete","searchActions","handler","values","renderTree","nodes","referenceId","rootTree","labelCol","lebelInfoCol","generic","isInvalidOrEmptyArray","map","node","height","flexGrow","maxWidth","overflowY"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n//app\r\nimport { FilterBar, Tooltip } from 'components';\r\nimport * as utils from 'utils';\r\nimport styles from './TreeView.styles';\r\n\r\n//mui\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { TreeView as TreeViewMui, TreeItem } from '@material-ui/lab';\r\nimport { Box, Typography, Divider, makeStyles } from \"@material-ui/core\";\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\n\r\nTreeView.propTypes = {\r\n  rootRef: PropTypes.string.isRequired,\r\n  treeData: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    label: PropTypes.string.isRequired,\r\n    labelInfo: PropTypes.string,\r\n    children: PropTypes.array.isRequired\r\n  }),\r\n  handleSelect: PropTypes.func.isRequired,\r\n  widgetTitle: PropTypes.string,\r\n  columns: PropTypes.arrayOf(PropTypes.objectOf({ header: PropTypes.string, flex: PropTypes.string })),\r\n  defaultExpanded: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired\r\n}\r\n\r\nexport default function TreeView({ treeData, rootRef, handleAccordionClick, widgetTitle, columns, defaultExpanded }) {\r\n\r\n  const classes = makeStyles(styles, { name: 'TreeView' })();\r\n\r\n  const searchFields = [\r\n    {\r\n      name: 'query',\r\n      type: 'text',\r\n      placeholder: utils.string.t('dms.search.searchDocuments'),\r\n      defaultValue: '',\r\n      gridSize: { xs: 12 },\r\n      muiComponentProps: {\r\n        autoComplete: 'off'\r\n      },\r\n    },\r\n  ];\r\n  const searchActions = [\r\n    {\r\n      name: 'filter',\r\n      label: utils.string.t('app.searchLabel'),\r\n      handler: (values) => { },\r\n    },\r\n    {\r\n      name: 'reset',\r\n      label: utils.string.t('app.reset'),\r\n      handler: {},\r\n    },\r\n  ];\r\n\r\n  const renderTree = (nodes) => (\r\n    <TreeItem\r\n      key={nodes?.id || nodes?.referenceId}\r\n      nodeId={nodes?.id || nodes?.referenceId}\r\n      label={\r\n        <Box className={classes.rootTree}>\r\n          <Typography variant=\"body2\" className={classes.labelCol}>\r\n            <Tooltip\r\n              title={'Tooltip'} //need to add tooltip data\r\n              placement={'top'}\r\n              arrow\r\n            >\r\n              {nodes?.label}\r\n            </Tooltip>\r\n          </Typography>\r\n          <Typography className={classes.lebelInfoCol} variant=\"caption\" color=\"inherit\">\r\n            {nodes?.labelInfo}\r\n          </Typography>\r\n        </Box>\r\n      }\r\n    >\r\n      {utils.generic.isInvalidOrEmptyArray(nodes?.children) ? null : nodes?.children?.map((node) => renderTree(node))}\r\n    </TreeItem>\r\n  );\r\n\r\n  return (\r\n    <Box pt={2} display=\"flex\" flexDirection=\"column\">\r\n      <Box display=\"flex\" alignItems=\"center\">\r\n        <DescriptionIcon />\r\n        <Typography variant=\"body1\">{widgetTitle}</Typography>\r\n      </Box>\r\n      <Box pt={2} pl={1} pr={1}>\r\n        <FilterBar id=\"userFilter\" fields={searchFields} actions={searchActions} />\r\n        <Divider />\r\n        <Box display=\"flex\">\r\n          {columns.map(({ header, flex }) => {\r\n            return (\r\n              <Box flex={flex} pl={2}>\r\n                <Typography variant=\"body2\">{header}</Typography>\r\n              </Box>\r\n            )\r\n          })}\r\n        </Box>\r\n        <Divider />\r\n        <TreeViewMui\r\n          aria-label=\"rich object\"\r\n          defaultCollapseIcon={<ExpandMoreIcon />}\r\n          defaultExpanded={defaultExpanded}\r\n          defaultExpandIcon={<ChevronRightIcon />}\r\n          sx={{ height: 110, flexGrow: 1, maxWidth: 400, overflowY: 'auto' }}\r\n          onNodeSelect={handleAccordionClick}\r\n        >\r\n          {rootRef ? renderTree(treeData) : null}\r\n        </TreeViewMui>\r\n      </Box>\r\n    </Box>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}