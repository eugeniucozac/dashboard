{"ast":null,"code":"var _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\RiskPolicy\\\\RiskPolicy.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux'; // app\n\nimport RiskPolicyView from './RiskPolicy.view';\nimport { getRiskQuotes, selectRiskQuotes, selectRiskQuotesLoading, showModal, downloadRiskQuote, getRiskDetails } from 'stores';\nimport { RISK_QUOTE_STATUS_BOUND } from 'consts';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar RiskPolicy = function RiskPolicy(_ref) {\n  _s();\n\n  var risk = _ref.risk,\n      riskIsLoading = _ref.riskIsLoading;\n  var dispatch = useDispatch();\n  var quotes = useSelector(selectRiskQuotes);\n  var isLoading = useSelector(selectRiskQuotesLoading);\n  var hasBoundQuote = utils.generic.isValidArray(quotes, true) && quotes.some(function (q) {\n    return q.response && q.response.responseStatus === RISK_QUOTE_STATUS_BOUND;\n  });\n  var policy = quotes.find(function (q) {\n    return q.response && q.response.responseStatus === RISK_QUOTE_STATUS_BOUND;\n  }) || null;\n  useEffect(function () {\n    dispatch(getRiskQuotes(risk === null || risk === void 0 ? void 0 : risk.id));\n  }, [dispatch, risk === null || risk === void 0 ? void 0 : risk.id]);\n\n  var handleRiskRefresh = function handleRiskRefresh() {\n    dispatch(getRiskDetails(risk === null || risk === void 0 ? void 0 : risk.id, true));\n    dispatch(getRiskQuotes(risk === null || risk === void 0 ? void 0 : risk.id));\n  };\n\n  var executePreBind = function executePreBind(quote, isPreBind, isReqBind) {\n    var product = risk.riskType;\n    var modalTitle = isPreBind ? \"\".concat(utils.string.t('risks.preBind')) : \"\".concat(utils.string.t('risks.postBind'));\n    dispatch(showModal({\n      component: 'PRE_BIND_QUOTE',\n      props: {\n        title: modalTitle,\n        fullWidth: true,\n        disableBackdropClick: true,\n        enableFullScreen: true,\n        maxWidth: 'lg',\n        componentProps: {\n          product: product,\n          risk: risk,\n          quote: quote,\n          isPreBind: isPreBind,\n          isReqBind: isReqBind\n        }\n      }\n    }));\n  };\n\n  var handlePreBind = function handlePreBind(quote, isPreBind) {\n    return function (event) {\n      executePreBind(quote, isPreBind, false);\n    };\n  };\n\n  var handleDownloadQuote = function handleDownloadQuote(id) {\n    return function (event) {\n      dispatch(downloadRiskQuote(id));\n    };\n  };\n\n  var handleQuoteRefresh = function handleQuoteRefresh() {\n    dispatch(getRiskQuotes(risk === null || risk === void 0 ? void 0 : risk.id));\n    dispatch(getRiskDetails(risk === null || risk === void 0 ? void 0 : risk.id, true));\n  };\n\n  var handleAddEndorsement = function handleAddEndorsement() {\n    var _risk$insured;\n\n    var riskId = risk.id;\n    var riskData = risk.risk;\n    var riskType = risk.riskType;\n    var modalTitle = \"\".concat(utils.string.t('app.addEndorsement'), \" - \").concat(risk === null || risk === void 0 ? void 0 : (_risk$insured = risk.insured) === null || _risk$insured === void 0 ? void 0 : _risk$insured.name);\n    dispatch(showModal({\n      component: 'ADD_EDIT_QUOTE_BIND',\n      props: {\n        title: modalTitle,\n        fullWidth: true,\n        disableBackdropClick: true,\n        enableFullScreen: true,\n        maxWidth: 'xl',\n        componentProps: {\n          product: {\n            value: riskType\n          },\n          riskData: riskData,\n          riskId: riskId,\n          addEndorsement: true\n        }\n      }\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(RiskPolicyView, {\n    isLoading: isLoading,\n    riskIsLoading: riskIsLoading,\n    policy: policy,\n    hasBoundQuote: hasBoundQuote,\n    riskStatus: risk === null || risk === void 0 ? void 0 : risk.riskStatus,\n    riskInsuredId: risk === null || risk === void 0 ? void 0 : risk.insuredId,\n    handleDownloadQuote: handleDownloadQuote,\n    handleRiskRefresh: handleRiskRefresh,\n    handleQuoteRefresh: handleQuoteRefresh,\n    handlePreBind: handlePreBind,\n    handleAddEndorsement: handleAddEndorsement\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(RiskPolicy, \"sts8/WtPGX2gQg0Cg36D3z4fs2o=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = RiskPolicy;\nexport default RiskPolicy;\n\nvar _c;\n\n$RefreshReg$(_c, \"RiskPolicy\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/RiskPolicy/RiskPolicy.js"],"names":["useEffect","useSelector","useDispatch","RiskPolicyView","getRiskQuotes","selectRiskQuotes","selectRiskQuotesLoading","showModal","downloadRiskQuote","getRiskDetails","RISK_QUOTE_STATUS_BOUND","utils","RiskPolicy","risk","riskIsLoading","dispatch","quotes","isLoading","hasBoundQuote","generic","isValidArray","some","q","response","responseStatus","policy","find","id","handleRiskRefresh","executePreBind","quote","isPreBind","isReqBind","product","riskType","modalTitle","string","t","component","props","title","fullWidth","disableBackdropClick","enableFullScreen","maxWidth","componentProps","handlePreBind","event","handleDownloadQuote","handleQuoteRefresh","handleAddEndorsement","riskId","riskData","insured","name","value","addEndorsement","riskStatus","insuredId"],"mappings":"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","sourcesContent":["import { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\n// app\r\nimport RiskPolicyView from './RiskPolicy.view';\r\nimport { getRiskQuotes, selectRiskQuotes, selectRiskQuotesLoading, showModal, downloadRiskQuote, getRiskDetails } from 'stores';\r\nimport { RISK_QUOTE_STATUS_BOUND } from 'consts';\r\nimport * as utils from 'utils';\r\n\r\nconst RiskPolicy = ({ risk, riskIsLoading }) => {\r\n  const dispatch = useDispatch();\r\n  const quotes = useSelector(selectRiskQuotes);\r\n  const isLoading = useSelector(selectRiskQuotesLoading);\r\n  const hasBoundQuote =\r\n    utils.generic.isValidArray(quotes, true) && quotes.some((q) => q.response && q.response.responseStatus === RISK_QUOTE_STATUS_BOUND);\r\n\r\n  const policy = quotes.find((q) => q.response && q.response.responseStatus === RISK_QUOTE_STATUS_BOUND) || null;\r\n\r\n  useEffect(() => {\r\n    dispatch(getRiskQuotes(risk?.id));\r\n  }, [dispatch, risk?.id]);\r\n\r\n  const handleRiskRefresh = () => {\r\n    dispatch(getRiskDetails(risk?.id, true));\r\n    dispatch(getRiskQuotes(risk?.id));\r\n  };\r\n\r\n  const executePreBind = (quote, isPreBind, isReqBind) => {\r\n    const product = risk.riskType;\r\n    const modalTitle = isPreBind ? `${utils.string.t('risks.preBind')}` : `${utils.string.t('risks.postBind')}`;\r\n\r\n    dispatch(\r\n      showModal({\r\n        component: 'PRE_BIND_QUOTE',\r\n        props: {\r\n          title: modalTitle,\r\n          fullWidth: true,\r\n          disableBackdropClick: true,\r\n          enableFullScreen: true,\r\n          maxWidth: 'lg',\r\n          componentProps: {\r\n            product: product,\r\n            risk,\r\n            quote,\r\n            isPreBind,\r\n            isReqBind,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n  const handlePreBind = (quote, isPreBind) => (event) => {\r\n    executePreBind(quote, isPreBind, false);\r\n  };\r\n\r\n  const handleDownloadQuote = (id) => (event) => {\r\n    dispatch(downloadRiskQuote(id));\r\n  };\r\n\r\n  const handleQuoteRefresh = () => {\r\n    dispatch(getRiskQuotes(risk?.id));\r\n    dispatch(getRiskDetails(risk?.id, true));\r\n  };\r\n\r\n  const handleAddEndorsement = () => {\r\n    const riskId = risk.id;\r\n    const riskData = risk.risk;\r\n    const riskType = risk.riskType;\r\n    const modalTitle = `${utils.string.t('app.addEndorsement')} - ${risk?.insured?.name}`;\r\n\r\n    dispatch(\r\n      showModal({\r\n        component: 'ADD_EDIT_QUOTE_BIND',\r\n        props: {\r\n          title: modalTitle,\r\n          fullWidth: true,\r\n          disableBackdropClick: true,\r\n          enableFullScreen: true,\r\n          maxWidth: 'xl',\r\n          componentProps: {\r\n            product: { value: riskType },\r\n            riskData,\r\n            riskId,\r\n            addEndorsement: true,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <RiskPolicyView\r\n      isLoading={isLoading}\r\n      riskIsLoading={riskIsLoading}\r\n      policy={policy}\r\n      hasBoundQuote={hasBoundQuote}\r\n      riskStatus={risk?.riskStatus}\r\n      riskInsuredId={risk?.insuredId}\r\n      handleDownloadQuote={handleDownloadQuote}\r\n      handleRiskRefresh={handleRiskRefresh}\r\n      handleQuoteRefresh={handleQuoteRefresh}\r\n      handlePreBind={handlePreBind}\r\n      handleAddEndorsement={handleAddEndorsement}\r\n    />\r\n  );\r\n};\r\n\r\nexport default RiskPolicy;\r\n"]},"metadata":{},"sourceType":"module"}