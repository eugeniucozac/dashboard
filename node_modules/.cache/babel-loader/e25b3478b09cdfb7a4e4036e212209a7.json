{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as utils from 'utils';\nimport { authLogout } from 'stores';\nexport var searchInsuredCoverHolderNames = function searchInsuredCoverHolderNames(query) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/processingInstructions.actions.getInsuredCoverNames'\n    };\n    dispatch(searchInsuredCoverHolderNamesRequest(query));\n\n    if (!query) {\n      dispatch(searchInsuredCoverHolderNamesFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Missing insured or cover holder name search query'\n      })));\n      return;\n    }\n\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.ppService,\n      path: \"insured/search/\".concat(query)\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      if (json && json.status === 'OK' && json.data) {\n        // success\n        var insuredNames = json.data.map(function (insured) {\n          return {\n            id: insured.insuredId,\n            name: insured.insuredName\n          };\n        });\n        dispatch(searchInsuredCoverHolderNamesSuccess(insuredNames));\n        return insuredNames;\n      } else {\n        // fail\n        return Promise.reject(_objectSpread({\n          message: \"API data format error\".concat(json.status ? \" (\".concat(json.status, \")\") : '')\n        }, json && _objectSpread({}, json)));\n      }\n    }).catch(function (err) {\n      utils.api.handleError(err, _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API fetch error (processingInstructions.searchInsuredCoverNames)'\n      }));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(searchInsuredCoverHolderNamesFailure(err));\n      return err;\n    });\n  };\n};\nexport var searchInsuredCoverHolderNamesRequest = function searchInsuredCoverHolderNamesRequest(query) {\n  return {\n    type: 'PROCESSING_INSTRUCTIONS_SEARCH_INSURED_NAMES_REQUEST',\n    payload: query\n  };\n};\nexport var searchInsuredCoverHolderNamesSuccess = function searchInsuredCoverHolderNamesSuccess(responseData) {\n  return {\n    type: 'PROCESSING_INSTRUCTIONS_SEARCH_INSURED_NAMES_SUCCESS',\n    payload: responseData\n  };\n};\nexport var searchInsuredCoverHolderNamesFailure = function searchInsuredCoverHolderNamesFailure(error) {\n  return {\n    type: 'PROCESSING_INSTRUCTIONS_SEARCH_INSURED_NAMES_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/processingInstructions/processingInstructions.actions.getInsuredCoverNames.js"],"names":["utils","authLogout","searchInsuredCoverHolderNames","query","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","searchInsuredCoverHolderNamesRequest","searchInsuredCoverHolderNamesFailure","message","api","get","token","accessToken","ppService","path","then","response","handleResponse","json","status","data","insuredNames","map","insured","id","insuredId","name","insuredName","searchInsuredCoverHolderNamesSuccess","Promise","reject","catch","err","handleError","handleUnauthorized","type","payload","responseData","error"],"mappings":"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","sourcesContent":["import * as utils from 'utils';\r\nimport { authLogout } from 'stores';\r\n\r\nexport const searchInsuredCoverHolderNames = (query) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/processingInstructions.actions.getInsuredCoverNames',\r\n  };\r\n\r\n  dispatch(searchInsuredCoverHolderNamesRequest(query));\r\n\r\n  if (!query) {\r\n    dispatch(searchInsuredCoverHolderNamesFailure({ ...defaultError, message: 'Missing insured or cover holder name search query' }));\r\n    return;\r\n  }\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.ppService,\r\n      path: `insured/search/${query}`,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => {\r\n      if (json && json.status === 'OK' && json.data) {\r\n        // success\r\n        const insuredNames = json.data.map((insured) => ({ id: insured.insuredId, name: insured.insuredName }));\r\n        dispatch(searchInsuredCoverHolderNamesSuccess(insuredNames));\r\n        return insuredNames;\r\n      } else {\r\n        // fail\r\n        return Promise.reject({\r\n          message: `API data format error${json.status ? ` (${json.status})` : ''}`,\r\n          ...(json && { ...json }),\r\n        });\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      utils.api.handleError(err, { ...defaultError, message: 'API fetch error (processingInstructions.searchInsuredCoverNames)' });\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(searchInsuredCoverHolderNamesFailure(err));\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const searchInsuredCoverHolderNamesRequest = (query) => {\r\n  return {\r\n    type: 'PROCESSING_INSTRUCTIONS_SEARCH_INSURED_NAMES_REQUEST',\r\n    payload: query,\r\n  };\r\n};\r\n\r\nexport const searchInsuredCoverHolderNamesSuccess = (responseData) => {\r\n  return {\r\n    type: 'PROCESSING_INSTRUCTIONS_SEARCH_INSURED_NAMES_SUCCESS',\r\n    payload: responseData,\r\n  };\r\n};\r\n\r\nexport const searchInsuredCoverHolderNamesFailure = (error) => {\r\n  return {\r\n    type: 'PROCESSING_INSTRUCTIONS_SEARCH_INSURED_NAMES_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}