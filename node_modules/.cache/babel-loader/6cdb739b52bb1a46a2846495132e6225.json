{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport get from 'lodash/get'; // app\n\nimport { addLoader, authLogout, enqueueNotification, hideModal, removeLoader } from 'stores';\nimport * as utils from 'utils';\nexport var fileUploadDocuments = function fileUploadDocuments(formData) {\n  return function (dispatch, getState) {\n    var _formData$department, _formData$sectionType, _formData$sourceSyste, _formData$uploadBy, _formData$xbInstance, _formData$department2, _formData$sectionType2, _formData$xbInstance2, _formData$xbInstance3, _formData$sourceSyste2;\n\n    var state = getState(); // prettier-ignore\n\n    var user = state.user,\n        endpoint = state.config.vars.endpoint;\n    var defaultError = {\n      file: 'stores/fileUpload.actions.upload'\n    };\n    dispatch(fileUploadDocumentsPostRequest(formData));\n    dispatch(addLoader({\n      key: 'fileUploadDocuments',\n      message: utils.string.t('fileUpload.uploading')\n    }));\n    var validFormData = (formData === null || formData === void 0 ? void 0 : (_formData$department = formData.department) === null || _formData$department === void 0 ? void 0 : _formData$department.value) && (formData === null || formData === void 0 ? void 0 : formData.expiryDate) && utils.generic.isValidArray(formData === null || formData === void 0 ? void 0 : formData.files, true) && (formData === null || formData === void 0 ? void 0 : formData.inceptionDate) && (formData === null || formData === void 0 ? void 0 : formData.insuredName) && (formData === null || formData === void 0 ? void 0 : formData.policyRef) && (formData === null || formData === void 0 ? void 0 : (_formData$sectionType = formData.sectionType) === null || _formData$sectionType === void 0 ? void 0 : _formData$sectionType.label) && (formData === null || formData === void 0 ? void 0 : (_formData$sourceSyste = formData.sourceSystem) === null || _formData$sourceSyste === void 0 ? void 0 : _formData$sourceSyste.value) && (formData === null || formData === void 0 ? void 0 : formData.umr) && (formData === null || formData === void 0 ? void 0 : (_formData$uploadBy = formData.uploadBy) === null || _formData$uploadBy === void 0 ? void 0 : _formData$uploadBy.label) && (formData === null || formData === void 0 ? void 0 : formData.uploadDate) && (formData === null || formData === void 0 ? void 0 : (_formData$xbInstance = formData.xbInstance) === null || _formData$xbInstance === void 0 ? void 0 : _formData$xbInstance.value);\n\n    if (!formData || !validFormData) {\n      dispatch(fileUploadDocumentsPostFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Missing policy data parameters'\n      })));\n      dispatch(enqueueNotification('notification.fileUpload.upload.fail', 'error'));\n      dispatch(removeLoader('fileUploadDocuments'));\n      return;\n    }\n\n    var nowIsoString = utils.date.toISOString(new Date());\n    var files = get(formData, 'files', []);\n    var screenRequestDTOJson = {\n      createdBy: user.id,\n      createdByName: utils.user.fullname(user),\n      createdDate: nowIsoString,\n      departmentName: (_formData$department2 = formData.department) === null || _formData$department2 === void 0 ? void 0 : _formData$department2.value,\n      divisionName: 'Test1',\n      expiryDate: formData.expiryDate,\n      inceptionDate: formData.inceptionDate,\n      insuredId: formData.insuredID,\n      insuredName: formData.insuredName,\n      policyID: formData.policyID,\n      riskreference: formData.policyRef,\n      sectionType: (_formData$sectionType2 = formData.sectionType) === null || _formData$sectionType2 === void 0 ? void 0 : _formData$sectionType2.label,\n      sharepointInstance: (_formData$xbInstance2 = formData.xbInstance) === null || _formData$xbInstance2 === void 0 ? void 0 : _formData$xbInstance2.value,\n      sourceId: (_formData$xbInstance3 = formData.xbInstance) === null || _formData$xbInstance3 === void 0 ? void 0 : _formData$xbInstance3.id,\n      srcApplication: (_formData$sourceSyste2 = formData.sourceSystem) === null || _formData$sourceSyste2 === void 0 ? void 0 : _formData$sourceSyste2.value,\n      isActive: 1,\n      uniqueMarketRef: formData.umr,\n      year: utils.string.t('format.date', {\n        value: {\n          date: formData.inceptionDate,\n          format: 'YYYY'\n        }\n      })\n    };\n    var doctypes = [];\n    var form = new FormData();\n    files.forEach(function (fileObj, fileIndex) {\n      var _fileObj$type;\n\n      if (fileObj.file && ((_fileObj$type = fileObj.type) === null || _fileObj$type === void 0 ? void 0 : _fileObj$type.id)) {\n        doctypes.push(fileObj.type.id);\n        form.append('uploadFiles', fileObj.file);\n      }\n    });\n    form.append('screenRequestDTOJson', JSON.stringify(screenRequestDTOJson));\n    form.append('docTypeStr', doctypes.join(','));\n    return utils.api.multiPartPost({\n      // token: auth.accessToken,\n      endpoint: endpoint.dmsService,\n      path: 'dms/document/upload/multiple',\n      data: form\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (json) {\n      dispatch(fileUploadDocumentsPostSuccess(json.data));\n      dispatch(enqueueNotification('notification.fileUpload.upload.success', 'success'));\n      return json.data;\n    }).catch(function (err) {\n      var errorParams = {\n        file: 'stores/fileUpload.actions.upload',\n        message: 'API multipart post error (fileUploadDocuments)'\n      };\n      dispatch(fileUploadDocumentsPostFailure(err));\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(enqueueNotification('notification.fileUpload.upload.fail', 'error'));\n    }).finally(function () {\n      dispatch(removeLoader('fileUploadDocuments'));\n      dispatch(hideModal());\n      return;\n    });\n  };\n};\nexport var fileUploadDocumentsPostRequest = function fileUploadDocumentsPostRequest(payload) {\n  return {\n    type: 'FILE_UPLOAD_DOCUMENT_POST_REQUEST',\n    payload: payload\n  };\n};\nexport var fileUploadDocumentsPostSuccess = function fileUploadDocumentsPostSuccess(data) {\n  return {\n    type: 'FILE_UPLOAD_DOCUMENT_POST_SUCCESS',\n    payload: {\n      data: data\n    }\n  };\n};\nexport var fileUploadDocumentsPostFailure = function fileUploadDocumentsPostFailure(error) {\n  return {\n    type: 'FILE_UPLOAD_DOCUMENT_POST_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/fileUpload/fileUpload.actions.upload.js"],"names":["get","addLoader","authLogout","enqueueNotification","hideModal","removeLoader","utils","fileUploadDocuments","formData","dispatch","getState","state","user","endpoint","config","vars","defaultError","file","fileUploadDocumentsPostRequest","key","message","string","t","validFormData","department","value","expiryDate","generic","isValidArray","files","inceptionDate","insuredName","policyRef","sectionType","label","sourceSystem","umr","uploadBy","uploadDate","xbInstance","fileUploadDocumentsPostFailure","nowIsoString","date","toISOString","Date","screenRequestDTOJson","createdBy","id","createdByName","fullname","createdDate","departmentName","divisionName","insuredId","insuredID","policyID","riskreference","sharepointInstance","sourceId","srcApplication","isActive","uniqueMarketRef","year","format","doctypes","form","FormData","forEach","fileObj","fileIndex","type","push","append","JSON","stringify","join","api","multiPartPost","dmsService","path","data","then","response","handleResponse","json","handleNewData","fileUploadDocumentsPostSuccess","catch","err","errorParams","handleError","handleUnauthorized","finally","payload","error"],"mappings":"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","sourcesContent":["import get from 'lodash/get';\r\n\r\n// app\r\nimport { addLoader, authLogout, enqueueNotification, hideModal, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const fileUploadDocuments = (formData) => (dispatch, getState) => {\r\n  const state = getState();\r\n\r\n  // prettier-ignore\r\n  const { user, config: { vars: { endpoint }}} = state;\r\n\r\n  const defaultError = {\r\n    file: 'stores/fileUpload.actions.upload',\r\n  };\r\n\r\n  dispatch(fileUploadDocumentsPostRequest(formData));\r\n  dispatch(addLoader({ key: 'fileUploadDocuments', message: utils.string.t('fileUpload.uploading') }));\r\n\r\n  const validFormData =\r\n    formData?.department?.value &&\r\n    formData?.expiryDate &&\r\n    utils.generic.isValidArray(formData?.files, true) &&\r\n    formData?.inceptionDate &&\r\n    formData?.insuredName &&\r\n    formData?.policyRef &&\r\n    formData?.sectionType?.label &&\r\n    formData?.sourceSystem?.value &&\r\n    formData?.umr &&\r\n    formData?.uploadBy?.label &&\r\n    formData?.uploadDate &&\r\n    formData?.xbInstance?.value;\r\n\r\n  if (!formData || !validFormData) {\r\n    dispatch(fileUploadDocumentsPostFailure({ ...defaultError, message: 'Missing policy data parameters' }));\r\n    dispatch(enqueueNotification('notification.fileUpload.upload.fail', 'error'));\r\n    dispatch(removeLoader('fileUploadDocuments'));\r\n    return;\r\n  }\r\n\r\n  const nowIsoString = utils.date.toISOString(new Date());\r\n  const files = get(formData, 'files', []);\r\n\r\n  const screenRequestDTOJson = {\r\n    createdBy: user.id,\r\n    createdByName: utils.user.fullname(user),\r\n    createdDate: nowIsoString,\r\n    departmentName: formData.department?.value,\r\n    divisionName: 'Test1',\r\n    expiryDate: formData.expiryDate,\r\n    inceptionDate: formData.inceptionDate,\r\n    insuredId: formData.insuredID,\r\n    insuredName: formData.insuredName,\r\n    policyID: formData.policyID,\r\n    riskreference: formData.policyRef,\r\n    sectionType: formData.sectionType?.label,\r\n    sharepointInstance: formData.xbInstance?.value,\r\n    sourceId: formData.xbInstance?.id,\r\n    srcApplication: formData.sourceSystem?.value,\r\n    isActive: 1,\r\n    uniqueMarketRef: formData.umr,\r\n    year: utils.string.t('format.date', { value: { date: formData.inceptionDate, format: 'YYYY' } }),\r\n  };\r\n\r\n  const doctypes = [];\r\n  let form = new FormData();\r\n\r\n  files.forEach((fileObj, fileIndex) => {\r\n    if (fileObj.file && fileObj.type?.id) {\r\n      doctypes.push(fileObj.type.id);\r\n      form.append('uploadFiles', fileObj.file);\r\n    }\r\n  });\r\n\r\n  form.append('screenRequestDTOJson', JSON.stringify(screenRequestDTOJson));\r\n  form.append('docTypeStr', doctypes.join(','));\r\n\r\n  return utils.api\r\n    .multiPartPost({\r\n      // token: auth.accessToken,\r\n      endpoint: endpoint.dmsService,\r\n      path: 'dms/document/upload/multiple',\r\n      data: form,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((json) => {\r\n      dispatch(fileUploadDocumentsPostSuccess(json.data));\r\n      dispatch(enqueueNotification('notification.fileUpload.upload.success', 'success'));\r\n      return json.data;\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        file: 'stores/fileUpload.actions.upload',\r\n        message: 'API multipart post error (fileUploadDocuments)',\r\n      };\r\n\r\n      dispatch(fileUploadDocumentsPostFailure(err));\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(enqueueNotification('notification.fileUpload.upload.fail', 'error'));\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('fileUploadDocuments'));\r\n      dispatch(hideModal());\r\n      return;\r\n    });\r\n};\r\n\r\nexport const fileUploadDocumentsPostRequest = (payload) => {\r\n  return {\r\n    type: 'FILE_UPLOAD_DOCUMENT_POST_REQUEST',\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const fileUploadDocumentsPostSuccess = (data) => {\r\n  return {\r\n    type: 'FILE_UPLOAD_DOCUMENT_POST_SUCCESS',\r\n    payload: {\r\n      data,\r\n    },\r\n  };\r\n};\r\n\r\nexport const fileUploadDocumentsPostFailure = (error) => {\r\n  return {\r\n    type: 'FILE_UPLOAD_DOCUMENT_POST_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}