{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n// app\nimport { addLoader, authLogout, removeLoader, enqueueNotification } from 'stores';\nimport * as utils from 'utils';\nimport { API_STATUS_NOT_FOUND } from 'consts';\nexport var viewDocumentsMultiDownload = function viewDocumentsMultiDownload(docIds) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/dms.actions.viewDocumentsMultiDownload'\n    };\n    dispatch(addLoader('viewDocumentsMultiDownload'));\n    dispatch(viewDocumentsMultiDownloadRequest(docIds));\n\n    if (!docIds) {\n      dispatch(removeLoader('viewDocumentsMultiDownload'));\n      dispatch(viewDocumentsMultiDownloadFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Missing file parameters'\n      })));\n      return;\n    }\n\n    utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.dmsService,\n      path: \"dms/document/downloadZip/\".concat(docIds)\n    }).then(function (response) {\n      if (!response.ok) {\n        dispatch((response === null || response === void 0 ? void 0 : response.status) === API_STATUS_NOT_FOUND ? enqueueNotification('dms.fileDownload.fileNotFound', 'error') : enqueueNotification('dms.fileDownload.fail', 'error'));\n      } else {\n        return utils.api.handleResponseBlob(response);\n      }\n    }).then(function (blob) {\n      utils.file.download(blob, \"Documents-\".concat(docIds.join('-'), \".zip\"));\n    }).catch(function (err) {\n      var errorParams = {\n        file: 'stores/dms.actions',\n        message: 'API fetch error (viewDocumentsMultiDownload)'\n      };\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n    }).finally(function () {\n      dispatch(removeLoader('viewDocumentsMultiDownload'));\n    });\n  };\n};\nexport var viewDocumentsMultiDownloadRequest = function viewDocumentsMultiDownloadRequest(doc) {\n  return {\n    type: 'DMS_VIEW_DOCUMENTS_DOWNLOAD_MULTI_REQUEST',\n    payload: doc\n  };\n};\nexport var viewDocumentsMultiDownloadFailure = function viewDocumentsMultiDownloadFailure(error) {\n  return {\n    type: 'DMS_VIEW_DOCUMENTS_DOWNLOAD_MULTI_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/dms/dms.actions.viewDocumentsMultiDownload.js"],"names":["addLoader","authLogout","removeLoader","enqueueNotification","utils","API_STATUS_NOT_FOUND","viewDocumentsMultiDownload","docIds","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","viewDocumentsMultiDownloadRequest","viewDocumentsMultiDownloadFailure","message","api","get","token","accessToken","dmsService","path","then","response","ok","status","handleResponseBlob","blob","download","join","catch","err","errorParams","handleError","handleUnauthorized","finally","doc","type","payload","error"],"mappings":"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","sourcesContent":["// app\r\nimport { addLoader, authLogout, removeLoader, enqueueNotification } from 'stores';\r\nimport * as utils from 'utils';\r\nimport { API_STATUS_NOT_FOUND } from 'consts';\r\n\r\nexport const viewDocumentsMultiDownload = (docIds) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const {\r\n    user: { auth },\r\n    config: {\r\n      vars: { endpoint },\r\n    },\r\n  } = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/dms.actions.viewDocumentsMultiDownload',\r\n  };\r\n\r\n  dispatch(addLoader('viewDocumentsMultiDownload'));\r\n  dispatch(viewDocumentsMultiDownloadRequest(docIds));\r\n\r\n  if (!docIds) {\r\n    dispatch(removeLoader('viewDocumentsMultiDownload'));\r\n    dispatch(viewDocumentsMultiDownloadFailure({ ...defaultError, message: 'Missing file parameters' }));\r\n    return;\r\n  }\r\n\r\n  utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.dmsService,\r\n      path: `dms/document/downloadZip/${docIds}`,\r\n    })\r\n    .then((response) => {\r\n      if (!response.ok) {\r\n        dispatch(\r\n          response?.status === API_STATUS_NOT_FOUND\r\n            ? enqueueNotification('dms.fileDownload.fileNotFound', 'error')\r\n            : enqueueNotification('dms.fileDownload.fail', 'error')\r\n        );\r\n      } else {\r\n        return utils.api.handleResponseBlob(response);\r\n      }\r\n    })\r\n    .then((blob) => {\r\n      utils.file.download(blob, `Documents-${docIds.join('-')}.zip`);\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        file: 'stores/dms.actions',\r\n        message: 'API fetch error (viewDocumentsMultiDownload)',\r\n      };\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('viewDocumentsMultiDownload'));\r\n    });\r\n};\r\n\r\nexport const viewDocumentsMultiDownloadRequest = (doc) => {\r\n  return {\r\n    type: 'DMS_VIEW_DOCUMENTS_DOWNLOAD_MULTI_REQUEST',\r\n    payload: doc,\r\n  };\r\n};\r\n\r\nexport const viewDocumentsMultiDownloadFailure = (error) => {\r\n  return {\r\n    type: 'DMS_VIEW_DOCUMENTS_DOWNLOAD_MULTI_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}