{"ast":null,"code":"import _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\forms\\\\PreBindQuote\\\\PreBindQuote.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux'; // app\n\nimport { PreBindQuoteView } from './PreBindQuote.view';\nimport { getPreBindDefinitions, selectPreBindInfo, selectIsPreBindInfoLoading, postPreBindInfo, postRiskQuoteResponse, requestToBind } from 'stores';\nimport * as utils from 'utils';\nimport { RISK_QUOTE_PREBIND, RISK_QUOTE_STATUS_BOUND } from 'consts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nPreBindQuote.defaultProps = {\n  handleClose: function handleClose() {}\n};\nexport function PreBindQuote(_ref) {\n  _s();\n\n  var product = _ref.product,\n      risk = _ref.risk,\n      quote = _ref.quote,\n      isPreBind = _ref.isPreBind,\n      isReqBind = _ref.isReqBind,\n      handleClose = _ref.handleClose;\n  var dispatch = useDispatch();\n  var productName = product;\n  var preBindInfo = useSelector(selectPreBindInfo);\n  var isPreBindInfoLoading = useSelector(selectIsPreBindInfoLoading);\n  var type = RISK_QUOTE_PREBIND;\n  var riskData = risk === null || risk === void 0 ? void 0 : risk.risk;\n  var riskId = risk === null || risk === void 0 ? void 0 : risk.id;\n  var facilityId = quote === null || quote === void 0 ? void 0 : quote.facilityId;\n  useEffect(function () {\n    dispatch(getPreBindDefinitions(productName, type, facilityId));\n  }, [productName] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  var fields = utils.risk.parseFields(preBindInfo === null || preBindInfo === void 0 ? void 0 : preBindInfo.product, {});\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n      var requestPayload, res, bindInfo;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              requestPayload = _objectSpread(_objectSpread({}, data), {}, {\n                riskType: productName\n              });\n              _context.next = 3;\n              return dispatch(postPreBindInfo(riskId, requestPayload));\n\n            case 3:\n              res = _context.sent;\n\n              if (!isPreBind) {\n                _context.next = 14;\n                break;\n              }\n\n              bindInfo = {\n                quoteId: quote === null || quote === void 0 ? void 0 : quote.id,\n                effectiveFrom: risk === null || risk === void 0 ? void 0 : risk.inceptionDate,\n                effectiveTo: risk === null || risk === void 0 ? void 0 : risk.expiryDate,\n                riskId: riskId,\n                responseStatus: RISK_QUOTE_STATUS_BOUND\n              };\n\n              if (!res) {\n                _context.next = 12;\n                break;\n              }\n\n              if (!isReqBind) {\n                _context.next = 11;\n                break;\n              }\n\n              return _context.abrupt(\"return\", dispatch(requestToBind(quote)));\n\n            case 11:\n              return _context.abrupt(\"return\", dispatch(postRiskQuoteResponse(bindInfo)));\n\n            case 12:\n              _context.next = 15;\n              break;\n\n            case 14:\n              return _context.abrupt(\"return\", res);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleCancel = function handleCancel() {\n    if (utils.generic.isFunction(handleClose())) {\n      handleClose();\n    }\n  };\n\n  var actions = [{\n    name: 'submit',\n    label: utils.string.t('app.submit'),\n    handler: handleSubmit\n  }, {\n    name: 'cancel',\n    label: utils.string.t('app.cancel'),\n    handler: handleCancel\n  }];\n  return /*#__PURE__*/_jsxDEV(PreBindQuoteView, {\n    actions: actions,\n    fields: fields,\n    defaultValues: riskData ? utils.form.getFormattedValues(riskData, fields) : utils.form.getInitialValues(fields),\n    isLoading: isPreBindInfoLoading\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PreBindQuote, \"FqM4THcvMFmeEse4Ft5EOt1GADo=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = PreBindQuote;\nexport default PreBindQuote;\n\nvar _c;\n\n$RefreshReg$(_c, \"PreBindQuote\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/forms/PreBindQuote/PreBindQuote.js"],"names":["React","useEffect","useDispatch","useSelector","PreBindQuoteView","getPreBindDefinitions","selectPreBindInfo","selectIsPreBindInfoLoading","postPreBindInfo","postRiskQuoteResponse","requestToBind","utils","RISK_QUOTE_PREBIND","RISK_QUOTE_STATUS_BOUND","PreBindQuote","defaultProps","handleClose","product","risk","quote","isPreBind","isReqBind","dispatch","productName","preBindInfo","isPreBindInfoLoading","type","riskData","riskId","id","facilityId","fields","parseFields","handleSubmit","data","requestPayload","riskType","res","bindInfo","quoteId","effectiveFrom","inceptionDate","effectiveTo","expiryDate","responseStatus","handleCancel","generic","isFunction","actions","name","label","string","t","handler","form","getFormattedValues","getInitialValues"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n// app\r\nimport { PreBindQuoteView } from './PreBindQuote.view';\r\nimport {\r\n  getPreBindDefinitions,\r\n  selectPreBindInfo,\r\n  selectIsPreBindInfoLoading,\r\n  postPreBindInfo,\r\n  postRiskQuoteResponse,\r\n  requestToBind,\r\n} from 'stores';\r\nimport * as utils from 'utils';\r\nimport { RISK_QUOTE_PREBIND, RISK_QUOTE_STATUS_BOUND } from 'consts';\r\n\r\nPreBindQuote.defaultProps = {\r\n  handleClose: () => {},\r\n};\r\n\r\nexport function PreBindQuote({ product, risk, quote, isPreBind, isReqBind, handleClose }) {\r\n  const dispatch = useDispatch();\r\n  const productName = product;\r\n  const preBindInfo = useSelector(selectPreBindInfo);\r\n  const isPreBindInfoLoading = useSelector(selectIsPreBindInfoLoading);\r\n  const type = RISK_QUOTE_PREBIND;\r\n  const riskData = risk?.risk;\r\n  const riskId = risk?.id;\r\n  const facilityId = quote?.facilityId;\r\n\r\n  useEffect(\r\n    () => {\r\n      dispatch(getPreBindDefinitions(productName, type, facilityId));\r\n    },\r\n    [productName] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  const fields = utils.risk.parseFields(preBindInfo?.product, {});\r\n\r\n  const handleSubmit = async (data) => {\r\n    const requestPayload = { ...data, riskType: productName };\r\n    const res = await dispatch(postPreBindInfo(riskId, requestPayload));\r\n    if (isPreBind) {\r\n      const bindInfo = {\r\n        quoteId: quote?.id,\r\n        effectiveFrom: risk?.inceptionDate,\r\n        effectiveTo: risk?.expiryDate,\r\n        riskId,\r\n        responseStatus: RISK_QUOTE_STATUS_BOUND,\r\n      };\r\n      if (res) {\r\n        if (isReqBind) {\r\n          return dispatch(requestToBind(quote));\r\n        } else {\r\n          return dispatch(postRiskQuoteResponse(bindInfo));\r\n        }\r\n      }\r\n    } else {\r\n      return res;\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    if (utils.generic.isFunction(handleClose())) {\r\n      handleClose();\r\n    }\r\n  };\r\n  const actions = [\r\n    {\r\n      name: 'submit',\r\n      label: utils.string.t('app.submit'),\r\n      handler: handleSubmit,\r\n    },\r\n    {\r\n      name: 'cancel',\r\n      label: utils.string.t('app.cancel'),\r\n      handler: handleCancel,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <PreBindQuoteView\r\n      actions={actions}\r\n      fields={fields}\r\n      defaultValues={riskData ? utils.form.getFormattedValues(riskData, fields) : utils.form.getInitialValues(fields)}\r\n      isLoading={isPreBindInfoLoading}\r\n    />\r\n  );\r\n}\r\n\r\nexport default PreBindQuote;\r\n"]},"metadata":{},"sourceType":"module"}