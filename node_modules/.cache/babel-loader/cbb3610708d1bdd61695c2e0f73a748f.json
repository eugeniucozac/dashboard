{"ast":null,"code":"import * as utils from 'utils';\nimport { authLogout } from 'stores';\nexport var getRiskAddress = function getRiskAddress(searchTerm) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    dispatch(getRiskAddressRequest(searchTerm));\n    var body = {\n      address: searchTerm\n    };\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.location,\n      path: 'api/search',\n      data: body\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleData(json);\n    }).then(function (data) {\n      dispatch(getRiskAddressSuccess(data));\n      return data;\n    }).catch(function (err) {\n      var errorParams = {\n        file: 'stores/risk.actions.getRiskAddress',\n        message: 'API fetch error (risk.getRiskAddress)'\n      };\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(getRiskAddressFailure(err));\n      return err;\n    });\n  };\n};\nexport var getRiskAddressRequest = function getRiskAddressRequest(searchTerm) {\n  return {\n    type: 'RISK_ADDRESS_GET_REQUEST',\n    payload: searchTerm\n  };\n};\nexport var getRiskAddressSuccess = function getRiskAddressSuccess(responseData) {\n  return {\n    type: 'RISK_ADDRESS_GET_SUCCESS',\n    payload: responseData\n  };\n};\nexport var getRiskAddressFailure = function getRiskAddressFailure(error) {\n  return {\n    type: 'RISK_ADDRESS_GET_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/risk/risk.actions.getAddress.js"],"names":["utils","authLogout","getRiskAddress","searchTerm","dispatch","getState","auth","user","endpoint","config","vars","getRiskAddressRequest","body","address","api","post","token","accessToken","location","path","data","then","response","handleResponse","json","handleData","getRiskAddressSuccess","catch","err","errorParams","file","message","handleError","handleUnauthorized","getRiskAddressFailure","type","payload","responseData","error"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,QAA3B;AAEA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,UAAD;AAAA,SAAgB,UAACC,QAAD,EAAWC,QAAX,EAAwB;AACpE;AADoE,oBAEXA,QAAQ,EAFG;AAAA,QAEpDC,IAFoD,aAE5DC,IAF4D,CAEpDD,IAFoD;AAAA,QAE1BE,QAF0B,aAE5CC,MAF4C,CAElCC,IAFkC,CAE1BF,QAF0B;;AAIpEJ,IAAAA,QAAQ,CAACO,qBAAqB,CAACR,UAAD,CAAtB,CAAR;AAEA,QAAMS,IAAI,GAAG;AACXC,MAAAA,OAAO,EAAEV;AADE,KAAb;AAIA,WAAOH,KAAK,CAACc,GAAN,CACJC,IADI,CACC;AACJC,MAAAA,KAAK,EAAEV,IAAI,CAACW,WADR;AAEJT,MAAAA,QAAQ,EAAEA,QAAQ,CAACU,QAFf;AAGJC,MAAAA,IAAI,EAAE,YAHF;AAIJC,MAAAA,IAAI,EAAER;AAJF,KADD,EAOJS,IAPI,CAOC,UAACC,QAAD;AAAA,aAActB,KAAK,CAACc,GAAN,CAAUS,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAPD,EAQJD,IARI,CAQC,UAACG,IAAD;AAAA,aAAUxB,KAAK,CAACc,GAAN,CAAUW,UAAV,CAAqBD,IAArB,CAAV;AAAA,KARD,EASJH,IATI,CASC,UAACD,IAAD,EAAU;AACdhB,MAAAA,QAAQ,CAACsB,qBAAqB,CAACN,IAAD,CAAtB,CAAR;AACA,aAAOA,IAAP;AACD,KAZI,EAaJO,KAbI,CAaE,UAACC,GAAD,EAAS;AACd,UAAMC,WAAW,GAAG;AAClBC,QAAAA,IAAI,EAAE,oCADY;AAElBC,QAAAA,OAAO,EAAE;AAFS,OAApB;AAKA/B,MAAAA,KAAK,CAACc,GAAN,CAAUkB,WAAV,CAAsBJ,GAAtB,EAA2BC,WAA3B;AACA7B,MAAAA,KAAK,CAACc,GAAN,CAAUmB,kBAAV,CAA6BL,GAA7B,EAAkCxB,QAAlC,EAA4CH,UAA5C;AACAG,MAAAA,QAAQ,CAAC8B,qBAAqB,CAACN,GAAD,CAAtB,CAAR;AACA,aAAOA,GAAP;AACD,KAvBI,CAAP;AAwBD,GAlC6B;AAAA,CAAvB;AAoCP,OAAO,IAAMjB,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACR,UAAD,EAAgB;AACnD,SAAO;AACLgC,IAAAA,IAAI,EAAE,0BADD;AAELC,IAAAA,OAAO,EAAEjC;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMuB,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACW,YAAD,EAAkB;AACrD,SAAO;AACLF,IAAAA,IAAI,EAAE,0BADD;AAELC,IAAAA,OAAO,EAAEC;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMH,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACI,KAAD,EAAW;AAC9C,SAAO;AACLH,IAAAA,IAAI,EAAE,0BADD;AAELC,IAAAA,OAAO,EAAEE;AAFJ,GAAP;AAID,CALM","sourcesContent":["import * as utils from 'utils';\r\nimport { authLogout } from 'stores';\r\n\r\nexport const getRiskAddress = (searchTerm) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  dispatch(getRiskAddressRequest(searchTerm));\r\n\r\n  const body = {\r\n    address: searchTerm,\r\n  };\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.location,\r\n      path: 'api/search',\r\n      data: body,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleData(json))\r\n    .then((data) => {\r\n      dispatch(getRiskAddressSuccess(data));\r\n      return data;\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        file: 'stores/risk.actions.getRiskAddress',\r\n        message: 'API fetch error (risk.getRiskAddress)',\r\n      };\r\n\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(getRiskAddressFailure(err));\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const getRiskAddressRequest = (searchTerm) => {\r\n  return {\r\n    type: 'RISK_ADDRESS_GET_REQUEST',\r\n    payload: searchTerm,\r\n  };\r\n};\r\n\r\nexport const getRiskAddressSuccess = (responseData) => {\r\n  return {\r\n    type: 'RISK_ADDRESS_GET_SUCCESS',\r\n    payload: responseData,\r\n  };\r\n};\r\n\r\nexport const getRiskAddressFailure = (error) => {\r\n  return {\r\n    type: 'RISK_ADDRESS_GET_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}