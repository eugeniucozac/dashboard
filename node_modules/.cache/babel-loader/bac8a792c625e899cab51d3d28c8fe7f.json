{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types'; // app\n\nimport * as utils from 'utils';\nuseFlexiColumns.propTypes = {\n  columns: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n    visible: PropTypes.bool.isRequired\n  })).isRequired,\n  onToggleColumn: PropTypes.func\n};\nexport default function useFlexiColumns() {\n  _s();\n\n  var columns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var onToggleColumn = arguments.length > 1 ? arguments[1] : undefined;\n\n  var _useState = useState(columns.map(function (c) {\n    return _objectSpread(_objectSpread({}, c), {}, {\n      visible: c.menu ? true : Boolean(c.visible)\n    });\n  })),\n      _useState2 = _slicedToArray(_useState, 2),\n      columnsArray = _useState2[0],\n      setColumnsArray = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isTableHidden = _useState4[0],\n      setIsTableHidden = _useState4[1];\n\n  var hasColumns = utils.generic.isValidArray(columnsArray, true);\n\n  var getColumnById = function getColumnById(id) {\n    return hasColumns ? columnsArray.find(function (c) {\n      return c.id === id;\n    }) : {};\n  };\n\n  var toggleColumn = function toggleColumn(column) {\n    if (utils.generic.isFunction(onToggleColumn)) {\n      onToggleColumn(column);\n    }\n\n    setColumnsArray(columnsArray.map(function (c) {\n      return c.id === column.id ? _objectSpread(_objectSpread({}, c), {}, {\n        visible: !c.visible\n      }) : c;\n    }));\n  };\n\n  useEffect(function () {\n    // Update the value True/False based on the visable columns to hide entire Table\n    setIsTableHidden(columnsArray.every(function (colVal) {\n      return colVal.visible === false;\n    }));\n  }, [columnsArray]);\n\n  var isColumnVisible = function isColumnVisible(id) {\n    var _getColumnById;\n\n    return Boolean(hasColumns ? Boolean((_getColumnById = getColumnById(id)) === null || _getColumnById === void 0 ? void 0 : _getColumnById.visible) : false);\n  };\n\n  var isColumnHidden = function isColumnHidden(id) {\n    var _getColumnById2;\n\n    return Boolean(hasColumns ? !Boolean((_getColumnById2 = getColumnById(id)) === null || _getColumnById2 === void 0 ? void 0 : _getColumnById2.visible) : true);\n  };\n\n  var columnProps = function columnProps(id) {\n    var column = hasColumns ? getColumnById(id) : null;\n    return column ? _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, column.bold && {\n      bold: column.bold\n    }), column.borderless && {\n      borderless: column.borderless\n    }), column.center && {\n      center: column.center\n    }), column.compact && {\n      compact: column.compact\n    }), column.ellipsis && {\n      ellipsis: column.ellipsis\n    }), column.menu && {\n      menu: column.menu\n    }), column.minimal && {\n      minimal: column.minimal\n    }), column.narrow && {\n      narrow: column.narrow\n    }), column.nowrap && {\n      nowrap: column.nowrap\n    }), column.relative && {\n      relative: column.relative\n    }), column.right && {\n      right: column.right\n    }), {}, {\n      hidden: !column.visible\n    }) : {};\n  };\n\n  return {\n    columns: columnsArray,\n    isColumnVisible: isColumnVisible,\n    isColumnHidden: isColumnHidden,\n    columnProps: columnProps,\n    toggleColumn: toggleColumn,\n    isTableHidden: isTableHidden\n  };\n}\n\n_s(useFlexiColumns, \"k/9q16IGqwevFlEw4FTNKB1CKlo=\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/hooks/useFlexiColumns/useFlexiColumns.js"],"names":["useEffect","useState","PropTypes","utils","useFlexiColumns","propTypes","columns","arrayOf","shape","id","oneOfType","string","number","isRequired","visible","bool","onToggleColumn","func","map","c","menu","Boolean","columnsArray","setColumnsArray","isTableHidden","setIsTableHidden","hasColumns","generic","isValidArray","getColumnById","find","toggleColumn","column","isFunction","every","colVal","isColumnVisible","isColumnHidden","columnProps","bold","borderless","center","compact","ellipsis","minimal","narrow","nowrap","relative","right","hidden"],"mappings":";;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEAC,eAAe,CAACC,SAAhB,GAA4B;AAC1BC,EAAAA,OAAO,EAAEJ,SAAS,CAACK,OAAV,CACPL,SAAS,CAACM,KAAV,CAAgB;AACdC,IAAAA,EAAE,EAAEP,SAAS,CAACQ,SAAV,CAAoB,CAACR,SAAS,CAACS,MAAX,EAAmBT,SAAS,CAACU,MAA7B,CAApB,EAA0DC,UADhD;AAEdC,IAAAA,OAAO,EAAEZ,SAAS,CAACa,IAAV,CAAeF;AAFV,GAAhB,CADO,EAKPA,UANwB;AAO1BG,EAAAA,cAAc,EAAEd,SAAS,CAACe;AAPA,CAA5B;AAUA,eAAe,SAASb,eAAT,GAAuD;AAAA;;AAAA,MAA9BE,OAA8B,uEAApB,EAAoB;AAAA,MAAhBU,cAAgB;;AAAA,kBAC5Bf,QAAQ,CAACK,OAAO,CAACY,GAAR,CAAY,UAACC,CAAD;AAAA,2CAAaA,CAAb;AAAgBL,MAAAA,OAAO,EAAEK,CAAC,CAACC,IAAF,GAAS,IAAT,GAAgBC,OAAO,CAACF,CAAC,CAACL,OAAH;AAAhD;AAAA,GAAZ,CAAD,CADoB;AAAA;AAAA,MAC7DQ,YAD6D;AAAA,MAC/CC,eAD+C;;AAAA,mBAE1BtB,QAAQ,CAAC,KAAD,CAFkB;AAAA;AAAA,MAE7DuB,aAF6D;AAAA,MAE9CC,gBAF8C;;AAGpE,MAAMC,UAAU,GAAGvB,KAAK,CAACwB,OAAN,CAAcC,YAAd,CAA2BN,YAA3B,EAAyC,IAAzC,CAAnB;;AACA,MAAMO,aAAa,GAAG,SAAhBA,aAAgB,CAACpB,EAAD,EAAQ;AAC5B,WAAOiB,UAAU,GAAGJ,YAAY,CAACQ,IAAb,CAAkB,UAACX,CAAD;AAAA,aAAOA,CAAC,CAACV,EAAF,KAASA,EAAhB;AAAA,KAAlB,CAAH,GAA2C,EAA5D;AACD,GAFD;;AAIA,MAAMsB,YAAY,GAAG,SAAfA,YAAe,CAACC,MAAD,EAAY;AAC/B,QAAI7B,KAAK,CAACwB,OAAN,CAAcM,UAAd,CAAyBjB,cAAzB,CAAJ,EAA8C;AAC5CA,MAAAA,cAAc,CAACgB,MAAD,CAAd;AACD;;AAEDT,IAAAA,eAAe,CACbD,YAAY,CAACJ,GAAb,CAAiB,UAACC,CAAD,EAAO;AACtB,aAAOA,CAAC,CAACV,EAAF,KAASuB,MAAM,CAACvB,EAAhB,mCAA0BU,CAA1B;AAA6BL,QAAAA,OAAO,EAAE,CAACK,CAAC,CAACL;AAAzC,WAAqDK,CAA5D;AACD,KAFD,CADa,CAAf;AAKD,GAVD;;AAYAnB,EAAAA,SAAS,CAAC,YAAM;AACd;AACAyB,IAAAA,gBAAgB,CAACH,YAAY,CAACY,KAAb,CAAmB,UAACC,MAAD;AAAA,aAAYA,MAAM,CAACrB,OAAP,KAAmB,KAA/B;AAAA,KAAnB,CAAD,CAAhB;AACD,GAHQ,EAGN,CAACQ,YAAD,CAHM,CAAT;;AAKA,MAAMc,eAAe,GAAG,SAAlBA,eAAkB,CAAC3B,EAAD,EAAQ;AAAA;;AAC9B,WAAOY,OAAO,CAACK,UAAU,GAAGL,OAAO,mBAACQ,aAAa,CAACpB,EAAD,CAAd,mDAAC,eAAmBK,OAApB,CAAV,GAAyC,KAApD,CAAd;AACD,GAFD;;AAIA,MAAMuB,cAAc,GAAG,SAAjBA,cAAiB,CAAC5B,EAAD,EAAQ;AAAA;;AAC7B,WAAOY,OAAO,CAACK,UAAU,GAAG,CAACL,OAAO,oBAACQ,aAAa,CAACpB,EAAD,CAAd,oDAAC,gBAAmBK,OAApB,CAAX,GAA0C,IAArD,CAAd;AACD,GAFD;;AAIA,MAAMwB,WAAW,GAAG,SAAdA,WAAc,CAAC7B,EAAD,EAAQ;AAC1B,QAAMuB,MAAM,GAAGN,UAAU,GAAGG,aAAa,CAACpB,EAAD,CAAhB,GAAuB,IAAhD;AAEA,WAAOuB,MAAM,+KAEHA,MAAM,CAACO,IAAP,IAAe;AAAEA,MAAAA,IAAI,EAAEP,MAAM,CAACO;AAAf,KAFZ,GAGHP,MAAM,CAACQ,UAAP,IAAqB;AAAEA,MAAAA,UAAU,EAAER,MAAM,CAACQ;AAArB,KAHlB,GAIHR,MAAM,CAACS,MAAP,IAAiB;AAAEA,MAAAA,MAAM,EAAET,MAAM,CAACS;AAAjB,KAJd,GAKHT,MAAM,CAACU,OAAP,IAAkB;AAAEA,MAAAA,OAAO,EAAEV,MAAM,CAACU;AAAlB,KALf,GAMHV,MAAM,CAACW,QAAP,IAAmB;AAAEA,MAAAA,QAAQ,EAAEX,MAAM,CAACW;AAAnB,KANhB,GAOHX,MAAM,CAACZ,IAAP,IAAe;AAAEA,MAAAA,IAAI,EAAEY,MAAM,CAACZ;AAAf,KAPZ,GAQHY,MAAM,CAACY,OAAP,IAAkB;AAAEA,MAAAA,OAAO,EAAEZ,MAAM,CAACY;AAAlB,KARf,GASHZ,MAAM,CAACa,MAAP,IAAiB;AAAEA,MAAAA,MAAM,EAAEb,MAAM,CAACa;AAAjB,KATd,GAUHb,MAAM,CAACc,MAAP,IAAiB;AAAEA,MAAAA,MAAM,EAAEd,MAAM,CAACc;AAAjB,KAVd,GAWHd,MAAM,CAACe,QAAP,IAAmB;AAAEA,MAAAA,QAAQ,EAAEf,MAAM,CAACe;AAAnB,KAXhB,GAYHf,MAAM,CAACgB,KAAP,IAAgB;AAAEA,MAAAA,KAAK,EAAEhB,MAAM,CAACgB;AAAhB,KAZb;AAaPC,MAAAA,MAAM,EAAE,CAACjB,MAAM,CAAClB;AAbT,SAeT,EAfJ;AAgBD,GAnBD;;AAqBA,SAAO;AACLR,IAAAA,OAAO,EAAEgB,YADJ;AAELc,IAAAA,eAAe,EAAfA,eAFK;AAGLC,IAAAA,cAAc,EAAdA,cAHK;AAILC,IAAAA,WAAW,EAAXA,WAJK;AAKLP,IAAAA,YAAY,EAAZA,YALK;AAMLP,IAAAA,aAAa,EAAbA;AANK,GAAP;AAQD;;GA9DuBpB,e","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// app\r\nimport * as utils from 'utils';\r\n\r\nuseFlexiColumns.propTypes = {\r\n  columns: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\r\n      visible: PropTypes.bool.isRequired,\r\n    })\r\n  ).isRequired,\r\n  onToggleColumn: PropTypes.func,\r\n};\r\n\r\nexport default function useFlexiColumns(columns = [], onToggleColumn) {\r\n  const [columnsArray, setColumnsArray] = useState(columns.map((c) => ({ ...c, visible: c.menu ? true : Boolean(c.visible) })));\r\n  const [isTableHidden, setIsTableHidden] = useState(false);\r\n  const hasColumns = utils.generic.isValidArray(columnsArray, true);\r\n  const getColumnById = (id) => {\r\n    return hasColumns ? columnsArray.find((c) => c.id === id) : {};\r\n  };\r\n\r\n  const toggleColumn = (column) => {\r\n    if (utils.generic.isFunction(onToggleColumn)) {\r\n      onToggleColumn(column);\r\n    }\r\n\r\n    setColumnsArray(\r\n      columnsArray.map((c) => {\r\n        return c.id === column.id ? { ...c, visible: !c.visible } : c;\r\n      })\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Update the value True/False based on the visable columns to hide entire Table\r\n    setIsTableHidden(columnsArray.every((colVal) => colVal.visible === false));\r\n  }, [columnsArray]);\r\n\r\n  const isColumnVisible = (id) => {\r\n    return Boolean(hasColumns ? Boolean(getColumnById(id)?.visible) : false);\r\n  };\r\n\r\n  const isColumnHidden = (id) => {\r\n    return Boolean(hasColumns ? !Boolean(getColumnById(id)?.visible) : true);\r\n  };\r\n\r\n  const columnProps = (id) => {\r\n    const column = hasColumns ? getColumnById(id) : null;\r\n\r\n    return column\r\n      ? {\r\n          ...(column.bold && { bold: column.bold }),\r\n          ...(column.borderless && { borderless: column.borderless }),\r\n          ...(column.center && { center: column.center }),\r\n          ...(column.compact && { compact: column.compact }),\r\n          ...(column.ellipsis && { ellipsis: column.ellipsis }),\r\n          ...(column.menu && { menu: column.menu }),\r\n          ...(column.minimal && { minimal: column.minimal }),\r\n          ...(column.narrow && { narrow: column.narrow }),\r\n          ...(column.nowrap && { nowrap: column.nowrap }),\r\n          ...(column.relative && { relative: column.relative }),\r\n          ...(column.right && { right: column.right }),\r\n          hidden: !column.visible,\r\n        }\r\n      : {};\r\n  };\r\n\r\n  return {\r\n    columns: columnsArray,\r\n    isColumnVisible,\r\n    isColumnHidden,\r\n    columnProps,\r\n    toggleColumn,\r\n    isTableHidden,\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}