{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { authLogout, addLoader, removeLoader, enqueueNotification, hideModal } from 'stores';\nimport * as utils from 'utils';\nexport var addTaskNote = function addTaskNote(formData, taskObj) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/claims.actions.addTaskNote'\n    };\n    dispatch(addTaskNoteRequest(formData, taskObj));\n    dispatch(addLoader('addTaskNote'));\n\n    if (!(formData === null || formData === void 0 ? void 0 : formData.details) || !(taskObj === null || taskObj === void 0 ? void 0 : taskObj.taskId) || !(taskObj === null || taskObj === void 0 ? void 0 : taskObj.caseIncidentID)) {\n      dispatch(addTaskNoteFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Missing requests params'\n      })));\n      dispatch(removeLoader('addTaskNote'));\n      return;\n    }\n\n    var data = {\n      bpmTaskID: taskObj.taskId,\n      caseIncidentID: taskObj.caseIncidentID,\n      notesDescription: formData.details,\n      isActive: 1\n    };\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.bpmService,\n      path: 'notes/save',\n      data: data\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(addTaskNoteSuccess(data.data));\n      dispatch(enqueueNotification(utils.string.t('claims.notes.notifications.addNoteSuccess'), 'success'));\n      return data;\n    })[\"catch\"](function (error) {\n      dispatch(addTaskNoteFailure(error, defaultError));\n      dispatch(enqueueNotification(utils.string.t('claims.notes.notifications.addNoteFailure'), 'error'));\n      utils.api.handleUnauthorized(error, dispatch, authLogout);\n      return error;\n    })[\"finally\"](function () {\n      dispatch(removeLoader('addTaskNote'));\n      dispatch(hideModal());\n    });\n  };\n};\nexport var addTaskNoteRequest = function addTaskNoteRequest(formData, taskObj) {\n  return {\n    type: 'CLAIMS_TASK_ADD_NOTE_REQUEST',\n    payload: {\n      formData: formData,\n      taskObj: taskObj\n    }\n  };\n};\nexport var addTaskNoteSuccess = function addTaskNoteSuccess(data) {\n  return {\n    type: 'CLAIMS_TASK_ADD_NOTE_SUCCESS',\n    payload: data\n  };\n};\nexport var addTaskNoteFailure = function addTaskNoteFailure(error) {\n  return {\n    type: 'CLAIMS_TASK_ADD_NOTE_ERROR',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.addTaskNote.js"],"names":["authLogout","addLoader","removeLoader","enqueueNotification","hideModal","utils","addTaskNote","formData","taskObj","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","addTaskNoteRequest","details","taskId","caseIncidentID","addTaskNoteFailure","message","data","bpmTaskID","notesDescription","isActive","api","post","token","accessToken","bpmService","path","then","response","handleResponse","json","handleNewData","addTaskNoteSuccess","string","t","error","handleUnauthorized","type","payload"],"mappings":"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","sourcesContent":["import { authLogout, addLoader, removeLoader, enqueueNotification, hideModal } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const addTaskNote = (formData, taskObj) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.addTaskNote',\r\n  };\r\n\r\n  dispatch(addTaskNoteRequest(formData, taskObj));\r\n  dispatch(addLoader('addTaskNote'));\r\n\r\n  if (!formData?.details || !taskObj?.taskId || !taskObj?.caseIncidentID) {\r\n    dispatch(addTaskNoteFailure({ ...defaultError, message: 'Missing requests params' }));\r\n    dispatch(removeLoader('addTaskNote'));\r\n    return;\r\n  }\r\n\r\n  const data = {\r\n    bpmTaskID: taskObj.taskId,\r\n    caseIncidentID: taskObj.caseIncidentID,\r\n    notesDescription: formData.details,\r\n    isActive: 1,\r\n  };\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.bpmService,\r\n      path: 'notes/save',\r\n      data: data,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(addTaskNoteSuccess(data.data));\r\n      dispatch(enqueueNotification(utils.string.t('claims.notes.notifications.addNoteSuccess'), 'success'));\r\n      return data;\r\n    })\r\n    .catch((error) => {\r\n      dispatch(addTaskNoteFailure(error, defaultError));\r\n      dispatch(enqueueNotification(utils.string.t('claims.notes.notifications.addNoteFailure'), 'error'));\r\n      utils.api.handleUnauthorized(error, dispatch, authLogout);\r\n      return error;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('addTaskNote'));\r\n      dispatch(hideModal());\r\n    });\r\n};\r\n\r\nexport const addTaskNoteRequest = (formData, taskObj) => {\r\n  return {\r\n    type: 'CLAIMS_TASK_ADD_NOTE_REQUEST',\r\n    payload: { formData, taskObj },\r\n  };\r\n};\r\n\r\nexport const addTaskNoteSuccess = (data) => {\r\n  return {\r\n    type: 'CLAIMS_TASK_ADD_NOTE_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const addTaskNoteFailure = (error) => {\r\n  return {\r\n    type: 'CLAIMS_TASK_ADD_NOTE_ERROR',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}