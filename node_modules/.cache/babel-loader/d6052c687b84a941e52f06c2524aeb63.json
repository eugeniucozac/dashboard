{"ast":null,"code":"import \"core-js/modules/es.symbol\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n// app\nimport * as utils from 'utils';\nimport { authLogout, addLoader, enqueueNotification, hideModal, removeLoader } from 'stores';\nexport var reportingEdit = function reportingEdit(payload) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var id = payload.id;\n    var defaultError = {\n      file: 'stores/reporting.action.reportingEdit',\n      message: 'Data missing for PUT request'\n    };\n    dispatch(postEditReportRequest(payload));\n    dispatch(addLoader('reportingEdit'));\n\n    if (!payload || !payload.id) {\n      dispatch(postEditEditReportFailure(defaultError));\n      dispatch(enqueueNotification('notification.reporting.editReport.fail', 'error'));\n      dispatch(hideModal());\n      dispatch(removeLoader('reportingEdit'));\n      return;\n    } // get the data for PATCH\n\n\n    var body = {\n      title: payload.report,\n      description: payload.description,\n      powerbiReportId: payload.powerbiReportId\n    };\n    return utils.api.patch({\n      token: auth.accessToken,\n      endpoint: endpoint.edge,\n      path: \"api/report/\".concat(id),\n      data: body\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleData(json);\n    }).then(function (data) {\n      dispatch(postEditReportSuccess(data));\n      dispatch(enqueueNotification('notification.reporting.editReportGroup.success', 'success'));\n      dispatch(hideModal());\n      dispatch(removeLoader('reportingEdit'));\n      return data;\n    })[\"catch\"](function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API fetch error (reporting.reportingEdit)'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(postEditEditReportFailure(err));\n      dispatch(enqueueNotification('notification.reporting.editReportGroup.fail', 'error'));\n      dispatch(hideModal());\n      dispatch(removeLoader('reportingEdit'));\n      return err;\n    });\n  };\n};\nexport var postEditReportRequest = function postEditReportRequest(data) {\n  return {\n    type: 'REPORT_PATCH_REQUEST',\n    payload: data\n  };\n};\nexport var postEditReportSuccess = function postEditReportSuccess(data) {\n  return {\n    type: 'REPORT_PATCH_SUCCESS',\n    payload: data\n  };\n};\nexport var postEditEditReportFailure = function postEditEditReportFailure(error) {\n  return {\n    type: 'REPORT_PATCH_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/reporting/reporting.actions.report.patch.js"],"names":["utils","authLogout","addLoader","enqueueNotification","hideModal","removeLoader","reportingEdit","payload","dispatch","getState","auth","user","endpoint","config","vars","id","defaultError","file","message","postEditReportRequest","postEditEditReportFailure","body","title","report","description","powerbiReportId","api","patch","token","accessToken","edge","path","data","then","response","handleResponse","json","handleData","postEditReportSuccess","err","errorParams","handleError","handleUnauthorized","type","error"],"mappings":"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","sourcesContent":["// app\r\nimport * as utils from 'utils';\r\nimport { authLogout, addLoader, enqueueNotification, hideModal, removeLoader } from 'stores';\r\n\r\nexport const reportingEdit = (payload) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n  const id = payload.id;\r\n  const defaultError = {\r\n    file: 'stores/reporting.action.reportingEdit',\r\n    message: 'Data missing for PUT request',\r\n  };\r\n\r\n  dispatch(postEditReportRequest(payload));\r\n  dispatch(addLoader('reportingEdit'));\r\n\r\n  if (!payload || !payload.id) {\r\n    dispatch(postEditEditReportFailure(defaultError));\r\n    dispatch(enqueueNotification('notification.reporting.editReport.fail', 'error'));\r\n    dispatch(hideModal());\r\n    dispatch(removeLoader('reportingEdit'));\r\n    return;\r\n  }\r\n\r\n  // get the data for PATCH\r\n  const body = {\r\n    title: payload.report,\r\n    description: payload.description,\r\n    powerbiReportId: payload.powerbiReportId,\r\n  };\r\n\r\n  return utils.api\r\n    .patch({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.edge,\r\n      path: `api/report/${id}`,\r\n      data: body,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleData(json))\r\n    .then((data) => {\r\n      dispatch(postEditReportSuccess(data));\r\n      dispatch(enqueueNotification('notification.reporting.editReportGroup.success', 'success'));\r\n      dispatch(hideModal());\r\n      dispatch(removeLoader('reportingEdit'));\r\n      return data;\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        ...defaultError,\r\n        message: 'API fetch error (reporting.reportingEdit)',\r\n      };\r\n\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(postEditEditReportFailure(err));\r\n      dispatch(enqueueNotification('notification.reporting.editReportGroup.fail', 'error'));\r\n      dispatch(hideModal());\r\n      dispatch(removeLoader('reportingEdit'));\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const postEditReportRequest = (data) => {\r\n  return {\r\n    type: 'REPORT_PATCH_REQUEST',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const postEditReportSuccess = (data) => {\r\n  return {\r\n    type: 'REPORT_PATCH_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const postEditEditReportFailure = (error) => {\r\n  return {\r\n    type: 'REPORT_PATCH_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}