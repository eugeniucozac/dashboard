{"ast":null,"code":"// app\nimport { authLogout, addLoader, removeLoader } from 'stores';\nimport * as utils from 'utils';\nexport var getComplexityTypes = function getComplexityTypes() {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/claims.actions.getComplexityTypes'\n    };\n    dispatch(getComplexityTypesRequest());\n    dispatch(addLoader('getComplexityTypes'));\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.claimService,\n      path: \"api/workflow/claim/complex-type\"\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (data) {\n      return utils.api.handleNewData(data);\n    }).then(function (json) {\n      dispatch(getComplexityTypesSuccess(json));\n      return json;\n    }).catch(function (err) {\n      dispatch(getComplexityTypesFailure(err, defaultError));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      return err;\n    }).finally(function () {\n      dispatch(removeLoader('getComplexityTypes'));\n    });\n  };\n};\nexport var getComplexityTypesRequest = function getComplexityTypesRequest() {\n  return {\n    type: 'CLAIM_COMPLEXITY_TYPES_GET_REQUEST'\n  };\n};\nexport var getComplexityTypesSuccess = function getComplexityTypesSuccess(json) {\n  return {\n    type: 'CLAIM_COMPLEXITY_TYPES_GET_SUCCESS',\n    payload: json.data\n  };\n};\nexport var getComplexityTypesFailure = function getComplexityTypesFailure(err) {\n  return {\n    type: 'CLAIM_COMPLEXITY_TYPES_GET_FAILURE',\n    payload: err\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.getComplexityTypes.js"],"names":["authLogout","addLoader","removeLoader","utils","getComplexityTypes","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","getComplexityTypesRequest","api","get","token","accessToken","claimService","path","then","response","handleResponse","data","handleNewData","json","getComplexityTypesSuccess","catch","err","getComplexityTypesFailure","handleUnauthorized","finally","type","payload"],"mappings":"AAAA;AACA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,YAAhC,QAAoD,QAApD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA,SAAM,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC9D;AAD8D,oBAELA,QAAQ,EAFH;AAAA,QAE9CC,IAF8C,aAEtDC,IAFsD,CAE9CD,IAF8C;AAAA,QAEpBE,QAFoB,aAEtCC,MAFsC,CAE5BC,IAF4B,CAEpBF,QAFoB;;AAI9D,QAAMG,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE;AADa,KAArB;AAIAR,IAAAA,QAAQ,CAACS,yBAAyB,EAA1B,CAAR;AACAT,IAAAA,QAAQ,CAACJ,SAAS,CAAC,oBAAD,CAAV,CAAR;AAEA,WAAOE,KAAK,CAACY,GAAN,CACJC,GADI,CACA;AACHC,MAAAA,KAAK,EAAEV,IAAI,CAACW,WADT;AAEHT,MAAAA,QAAQ,EAAEA,QAAQ,CAACU,YAFhB;AAGHC,MAAAA,IAAI;AAHD,KADA,EAMJC,IANI,CAMC,UAACC,QAAD;AAAA,aAAcnB,KAAK,CAACY,GAAN,CAAUQ,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAND,EAOJD,IAPI,CAOC,UAACG,IAAD;AAAA,aAAUrB,KAAK,CAACY,GAAN,CAAUU,aAAV,CAAwBD,IAAxB,CAAV;AAAA,KAPD,EAQJH,IARI,CAQC,UAACK,IAAD,EAAU;AACdrB,MAAAA,QAAQ,CAACsB,yBAAyB,CAACD,IAAD,CAA1B,CAAR;AACA,aAAOA,IAAP;AACD,KAXI,EAYJE,KAZI,CAYE,UAACC,GAAD,EAAS;AACdxB,MAAAA,QAAQ,CAACyB,yBAAyB,CAACD,GAAD,EAAMjB,YAAN,CAA1B,CAAR;AACAT,MAAAA,KAAK,CAACY,GAAN,CAAUgB,kBAAV,CAA6BF,GAA7B,EAAkCxB,QAAlC,EAA4CL,UAA5C;AACA,aAAO6B,GAAP;AACD,KAhBI,EAiBJG,OAjBI,CAiBI,YAAM;AACb3B,MAAAA,QAAQ,CAACH,YAAY,CAAC,oBAAD,CAAb,CAAR;AACD,KAnBI,CAAP;AAoBD,GA/BiC;AAAA,CAA3B;AAiCP,OAAO,IAAMY,yBAAyB,GAAG,SAA5BA,yBAA4B,GAAM;AAC7C,SAAO;AACLmB,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,IAAMN,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACD,IAAD,EAAU;AACjD,SAAO;AACLO,IAAAA,IAAI,EAAE,oCADD;AAELC,IAAAA,OAAO,EAAER,IAAI,CAACF;AAFT,GAAP;AAID,CALM;AAOP,OAAO,IAAMM,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACD,GAAD,EAAS;AAChD,SAAO;AACLI,IAAAA,IAAI,EAAE,oCADD;AAELC,IAAAA,OAAO,EAAEL;AAFJ,GAAP;AAID,CALM","sourcesContent":["// app\r\nimport { authLogout, addLoader, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const getComplexityTypes = () => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.getComplexityTypes',\r\n  };\r\n\r\n  dispatch(getComplexityTypesRequest());\r\n  dispatch(addLoader('getComplexityTypes'));\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.claimService,\r\n      path: `api/workflow/claim/complex-type`,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((data) => utils.api.handleNewData(data))\r\n    .then((json) => {\r\n      dispatch(getComplexityTypesSuccess(json));\r\n      return json;\r\n    })\r\n    .catch((err) => {\r\n      dispatch(getComplexityTypesFailure(err, defaultError));\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('getComplexityTypes'));\r\n    });\r\n};\r\n\r\nexport const getComplexityTypesRequest = () => {\r\n  return {\r\n    type: 'CLAIM_COMPLEXITY_TYPES_GET_REQUEST',\r\n  };\r\n};\r\n\r\nexport const getComplexityTypesSuccess = (json) => {\r\n  return {\r\n    type: 'CLAIM_COMPLEXITY_TYPES_GET_SUCCESS',\r\n    payload: json.data,\r\n  };\r\n};\r\n\r\nexport const getComplexityTypesFailure = (err) => {\r\n  return {\r\n    type: 'CLAIM_COMPLEXITY_TYPES_GET_FAILURE',\r\n    payload: err,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}