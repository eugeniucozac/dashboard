{"ast":null,"code":"import _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\LinkClaimPolicy\\\\LinkClaimPolicy.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as Yup from 'yup';\nimport moment from 'moment'; //app\n\nimport { LinkClaimPolicyView } from './LinkClaimPolicy.view';\nimport styles from './LinkClaimPolicy.styles';\nimport { FormGrid } from 'components';\nimport { getInterest, getClaimDetails, getCountriesList, getPolicyInsures, getPolicyClients, getPolicySections, getPolicyInformation, getSettlementCurrency, selectClaimsPolicyInformation, selectClaimsPolicySections, selectClaimsInterest, selectClaimPolicyInsures, selectSectionEnabledUG, selectClaimsUnderwritingGroups, selectClaimPolicyClients, selectSettlementCurrency, selectAllClaimDetails, selectCountriesList, postClaimDetailsInformation, postEditClaimDetailsInformation } from 'stores';\nimport * as utils from 'utils';\nimport { CLAIM_SECTION_ENABLED_UG, CLAIM_POLICY_SECTION_DEFAULT } from 'consts'; //mui\n\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport { makeStyles } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SelectedClaimPolicy(_ref) {\n  _s();\n\n  var _currencies,\n      _currencies2,\n      _this = this;\n\n  var policyData = _ref.policyData,\n      selectedPolicyRender = _ref.selectedPolicyRender,\n      validation = _ref.validation,\n      setValidation = _ref.setValidation,\n      activeStep = _ref.activeStep,\n      setActiveStep = _ref.setActiveStep,\n      isAllStepsCompleted = _ref.isAllStepsCompleted,\n      handleBack = _ref.handleBack,\n      handleSave = _ref.handleSave,\n      handleNext = _ref.handleNext,\n      save = _ref.save,\n      index = _ref.index,\n      isFormsEdited = _ref.isFormsEdited,\n      setFormEditedStatus = _ref.setFormEditedStatus,\n      handlerPolicySave = _ref.handlerPolicySave,\n      saveStatus = _ref.saveStatus,\n      setSaveStatus = _ref.setSaveStatus;\n  var classes = makeStyles(styles, {\n    name: 'LinkClaimPolicy'\n  })();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isDataReady = _useState2[0],\n      setIsDataReady = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      type = _useState4[0],\n      setType = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      uwResetKey = _useState6[0],\n      setUWResetKey = _useState6[1];\n\n  var dispatch = useDispatch();\n  var currencies = useSelector(selectSettlementCurrency);\n  var policyInformation = useSelector(selectClaimsPolicyInformation);\n  currencies = (_currencies = currencies) === null || _currencies === void 0 ? void 0 : _currencies.map(function (currency) {\n    return _objectSpread(_objectSpread({}, currency), {}, {\n      name: \"\".concat(currency.id, \" - \").concat(currency.name)\n    });\n  });\n  var existingClaimOrPolicyCurrency = policyInformation === null || policyInformation === void 0 ? void 0 : policyInformation.originalCurrency;\n  var selectedCurrency = (_currencies2 = currencies) === null || _currencies2 === void 0 ? void 0 : _currencies2.find(function (c) {\n    return c.id === existingClaimOrPolicyCurrency;\n  });\n  var interest = useSelector(selectClaimsInterest);\n  var selectedInterest = (interest === null || interest === void 0 ? void 0 : interest.items[0]) || null;\n  var allClaimDetails = useSelector(selectAllClaimDetails);\n  var underWritingGroups = useSelector(selectClaimsUnderwritingGroups);\n  var policySections = useSelector(selectClaimsPolicySections);\n  var claimPolicyInsures = useSelector(selectClaimPolicyInsures);\n  var policyInsured = (claimPolicyInsures === null || claimPolicyInsures === void 0 ? void 0 : claimPolicyInsures[0]) || null;\n  var isSectionEnabled = useSelector(selectSectionEnabledUG);\n  var claimPolicyClients = useSelector(selectClaimPolicyClients);\n  var countriesList = useSelector(selectCountriesList);\n  var policyClients = (claimPolicyClients === null || claimPolicyClients === void 0 ? void 0 : claimPolicyClients[0]) || null;\n  var isBordereauFlag = (allClaimDetails === null || allClaimDetails === void 0 ? void 0 : allClaimDetails.isBordereau) === 1;\n  var sectionAllOption = (policyData === null || policyData === void 0 ? void 0 : policyData.policyType) === CLAIM_SECTION_ENABLED_UG[0] ? [] : [{\n    id: CLAIM_POLICY_SECTION_DEFAULT,\n    name: utils.string.t('app.all'),\n    description: null\n  }];\n  var policyInfo = [].concat(sectionAllOption, _toConsumableArray(utils.generic.isValidArray(policySections, true) ? policySections : []));\n\n  var postSaveHandler = function postSaveHandler(postData) {\n    dispatch(postClaimDetailsInformation(postData)).then(function (response) {\n      if (response) {\n        setValidation(false);\n      }\n    });\n  };\n\n  var postEditSaveHandler = function postEditSaveHandler(postData) {\n    dispatch(postEditClaimDetailsInformation(postData)).then(function (response) {\n      if (response) {\n        var formEdited = isFormsEdited.map(function (form) {\n          return _objectSpread({}, form);\n        });\n        formEdited[index][\"formEditedStatus\"] = false;\n        setFormEditedStatus(formEdited);\n        setActiveStep(index + 1);\n        setValidation(false);\n      } else {\n        setValidation(false);\n        setActiveStep(index + 1);\n      }\n    });\n  };\n\n  var fields = [{\n    name: 'insured',\n    type: 'autocompletemui',\n    options: claimPolicyInsures || [],\n    optionKey: 'id',\n    optionLabel: 'name',\n    value: policyInsured,\n    validation: Yup.object().nullable().required(utils.string.t('validation.required')).when('$validation', function (validation, schema) {\n      return validation ? schema : Yup.object().nullable();\n    })\n  }, {\n    name: 'client',\n    type: 'autocompletemui',\n    options: claimPolicyClients || [],\n    optionKey: 'id',\n    optionLabel: 'name',\n    value: policyClients,\n    validation: Yup.object().nullable().required(utils.string.t('validation.required')).when('$validation', function (validation, schema) {\n      return validation ? schema : Yup.object().nullable();\n    })\n  }, {\n    name: 'countryCode',\n    type: 'autocompletemui',\n    options: countriesList || [],\n    optionKey: 'id',\n    optionLabel: 'name',\n    value: countriesList[0] || null,\n    validation: Yup.object().nullable().required(utils.string.t('validation.required'))\n  }, {\n    name: 'originalCurrencyCode',\n    type: 'autocompletemui',\n    options: currencies || [],\n    optionKey: 'id',\n    optionLabel: 'name',\n    value: selectedCurrency || null,\n    validation: Yup.object().nullable().required(utils.string.t('validation.required'))\n  }, {\n    name: 'settlementCurrencyCode',\n    type: 'autocompletemui',\n    options: currencies || [],\n    optionKey: 'id',\n    optionLabel: 'name',\n    value: selectedCurrency || null,\n    validation: Yup.object().nullable().required(utils.string.t('validation.required'))\n  }, {\n    name: 'interest',\n    type: 'autocompletemui',\n    options: interest === null || interest === void 0 ? void 0 : interest.items,\n    value: selectedInterest,\n    optionKey: 'code',\n    optionLabel: 'description',\n    validation: Yup.object().nullable().required(utils.string.t('validation.required'))\n  }, {\n    name: 'movementType',\n    type: 'toggle',\n    label: '',\n    value: 'Advice',\n    options: [{\n      label: utils.string.t('claims.typeOfSettlement.advice'),\n      value: 'Advice'\n    }, {\n      label: utils.string.t('claims.typeOfSettlement.settlement'),\n      value: 'Settlement'\n    }]\n  }, {\n    name: 'order',\n    type: 'radio',\n    defaultValue: '100',\n    muiFormGroupProps: {\n      row: true,\n      classes: {\n        root: classes.radioLabel\n      }\n    },\n    options: [{\n      label: utils.string.t('claims.typeOfSettlement.oneHundredPercent'),\n      value: '100'\n    }, {\n      label: utils.string.t('claims.typeOfSettlement.ourShare'),\n      value: '0'\n    }]\n  }, {\n    name: 'orderPercentage',\n    type: 'number',\n    defaultValue: underWritingGroups.percentageOfSelected || '0',\n    value: underWritingGroups.percentageOfSelected || '0',\n    muiComponentProps: {\n      disabled: true\n    },\n    validation: Yup.number().min(0, utils.string.t('claims.typeOfSettlement.errorMin')).max(100, utils.string.t('claims.typeOfSettlement.error'))\n  }].concat(_toConsumableArray(isBordereauFlag ? [{\n    name: 'certificateNumber',\n    type: 'text',\n    value: (allClaimDetails === null || allClaimDetails === void 0 ? void 0 : allClaimDetails.certificateNumber) || '',\n    muiComponentProps: {\n      classes: {\n        root: classes.formInput\n      }\n    },\n    validation: Yup.string().nullable().required(utils.string.t('validation.required')).max(17, utils.string.t('claims.claimInformation.validation.maxCerficateNumber')).when('$validation', function (validation, schema) {\n      return validation ? schema : Yup.string();\n    })\n  }, {\n    type: 'datepicker',\n    name: 'certificateInceptionDate',\n    value: (allClaimDetails === null || allClaimDetails === void 0 ? void 0 : allClaimDetails.certificateInceptionDate) || null,\n    muiComponentProps: {\n      clearable: false,\n      variant: 'inline',\n      format: 'DD-MM-YYYY',\n      fullWidth: true,\n      classes: {\n        root: classes.datepicker\n      }\n    },\n    validation: Yup.date().nullable().required(utils.string.t('validation.required')).test('from', utils.string.t('claims.claimInformation.validation.greaterThenExpDate'), function (value) {\n      return value && this.options.parent.certificateExpiryDate ? moment(value).isSameOrBefore(this.options.parent.certificateExpiryDate) : true;\n    }).when('$validation', function (validation, schema) {\n      return validation ? schema : Yup.date().nullable();\n    }),\n    outputFormat: 'iso'\n  }, {\n    type: 'datepicker',\n    name: 'certificateExpiryDate',\n    value: (allClaimDetails === null || allClaimDetails === void 0 ? void 0 : allClaimDetails.certificateExpiryDate) || null,\n    muiComponentProps: {\n      clearable: false,\n      variant: 'inline',\n      format: 'DD-MM-YYYY',\n      fullWidth: true,\n      classes: {\n        root: classes.datepicker\n      }\n    },\n    validation: Yup.date().nullable().required(utils.string.t('validation.required')).test('from', utils.string.t('claims.claimInformation.validation.lesserThenIncDate'), function (value) {\n      return value && this.options.parent.certificateInceptionDate ? moment(value).isSameOrAfter(this.options.parent.certificateInceptionDate) : true;\n    }).when('$validation', function (validation, schema) {\n      return validation ? schema : Yup.date().nullable();\n    }),\n    outputFormat: 'iso'\n  }] : []), _toConsumableArray(isSectionEnabled ? [{\n    name: 'ugSections',\n    type: 'autocompletemui',\n    value: null,\n    options: policyInfo,\n    optionKey: 'id',\n    optionLabel: 'name',\n    validation: Yup.object().nullable().required(utils.string.t('validation.required')).when('$validation', function (validation, schema) {\n      return validation ? schema : Yup.object().nullable();\n    })\n  }] : []));\n  useEffect(function () {\n    dispatch(getInterest());\n    dispatch(getSettlementCurrency());\n    dispatch(getPolicyInsures()).then(function (response) {\n      if (utils.generic.isValidArray(response)) {\n        dispatch(getPolicyClients()).then(function (response) {\n          if (utils.generic.isValidArray(response)) {\n            dispatch(getPolicySections()).then(function (response) {\n              if (utils.generic.isValidArray(response)) {\n                setIsDataReady(true);\n                setUWResetKey(new Date().getTime());\n              }\n            });\n          }\n        });\n      }\n    });\n    dispatch(getPolicyInformation());\n    dispatch(getClaimDetails());\n    dispatch(getCountriesList());\n    setUWResetKey(new Date().getTime());\n  }, [selectedPolicyRender]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  if (!isDataReady) {\n    return /*#__PURE__*/_jsxDEV(FormGrid, {\n      container: true,\n      spacing: 4,\n      children: _toConsumableArray(new Array(3)).map(function (item, index) {\n        return /*#__PURE__*/_jsxDEV(Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(FormGrid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Skeleton, {\n              height: 30,\n              width: 100\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(FormGrid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(FormGrid, {\n              container: true,\n              spacing: 4,\n              children: [/*#__PURE__*/_jsxDEV(FormGrid, {\n                item: true,\n                xs: 12,\n                md: 4,\n                children: [/*#__PURE__*/_jsxDEV(Skeleton, {\n                  height: 16\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 340,\n                  columnNumber: 19\n                }, _this), /*#__PURE__*/_jsxDEV(Skeleton, {\n                  height: 30,\n                  variant: \"rect\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 341,\n                  columnNumber: 19\n                }, _this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 339,\n                columnNumber: 19\n              }, _this), /*#__PURE__*/_jsxDEV(FormGrid, {\n                item: true,\n                xs: 12,\n                md: 4,\n                children: [/*#__PURE__*/_jsxDEV(Skeleton, {\n                  height: 16\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 344,\n                  columnNumber: 19\n                }, _this), /*#__PURE__*/_jsxDEV(Skeleton, {\n                  height: 30,\n                  variant: \"rect\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 345,\n                  columnNumber: 19\n                }, _this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 343,\n                columnNumber: 19\n              }, _this), /*#__PURE__*/_jsxDEV(FormGrid, {\n                item: true,\n                xs: 12,\n                md: 4,\n                children: [/*#__PURE__*/_jsxDEV(Skeleton, {\n                  height: 16\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 348,\n                  columnNumber: 19\n                }, _this), /*#__PURE__*/_jsxDEV(Skeleton, {\n                  height: 30,\n                  variant: \"rect\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 349,\n                  columnNumber: 19\n                }, _this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 347,\n                columnNumber: 19\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 13\n          }, _this)]\n        }, \"skeleton-\".concat(index), true, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 11\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(LinkClaimPolicyView, {\n    fields: fields,\n    policyData: policyData,\n    claimPolicyInsures: claimPolicyInsures,\n    interest: interest,\n    uwResetKey: uwResetKey,\n    hasClaimRef: false,\n    underWritingGroups: underWritingGroups,\n    claimPolicyClients: claimPolicyClients,\n    isBordereauFlag: isBordereauFlag,\n    validation: validation,\n    setValidation: setValidation,\n    activeStep: activeStep,\n    isAllStepsCompleted: isAllStepsCompleted,\n    handleBack: handleBack,\n    handleSave: handleSave,\n    handleNext: handleNext,\n    save: save,\n    index: index,\n    isFormsEdited: isFormsEdited,\n    setFormEditedStatus: setFormEditedStatus,\n    handlerPolicySave: handlerPolicySave,\n    postSaveHandler: postSaveHandler,\n    postEditSaveHandler: postEditSaveHandler,\n    saveStatus: saveStatus,\n    setSaveStatus: setSaveStatus\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 360,\n    columnNumber: 7\n  }, this);\n}\n\n_s(SelectedClaimPolicy, \"ONEsM0vV7kh1nViA/huMDyc2rvQ=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = SelectedClaimPolicy;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectedClaimPolicy\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/LinkClaimPolicy/LinkClaimPolicy.js"],"names":["React","Fragment","useState","useEffect","useDispatch","useSelector","Yup","moment","LinkClaimPolicyView","styles","FormGrid","getInterest","getClaimDetails","getCountriesList","getPolicyInsures","getPolicyClients","getPolicySections","getPolicyInformation","getSettlementCurrency","selectClaimsPolicyInformation","selectClaimsPolicySections","selectClaimsInterest","selectClaimPolicyInsures","selectSectionEnabledUG","selectClaimsUnderwritingGroups","selectClaimPolicyClients","selectSettlementCurrency","selectAllClaimDetails","selectCountriesList","postClaimDetailsInformation","postEditClaimDetailsInformation","utils","CLAIM_SECTION_ENABLED_UG","CLAIM_POLICY_SECTION_DEFAULT","Skeleton","makeStyles","SelectedClaimPolicy","policyData","selectedPolicyRender","validation","setValidation","activeStep","setActiveStep","isAllStepsCompleted","handleBack","handleSave","handleNext","save","index","isFormsEdited","setFormEditedStatus","handlerPolicySave","saveStatus","setSaveStatus","classes","name","isDataReady","setIsDataReady","type","setType","uwResetKey","setUWResetKey","dispatch","currencies","policyInformation","map","currency","id","existingClaimOrPolicyCurrency","originalCurrency","selectedCurrency","find","c","interest","selectedInterest","items","allClaimDetails","underWritingGroups","policySections","claimPolicyInsures","policyInsured","isSectionEnabled","claimPolicyClients","countriesList","policyClients","isBordereauFlag","isBordereau","sectionAllOption","policyType","string","t","description","policyInfo","generic","isValidArray","postSaveHandler","postData","then","response","postEditSaveHandler","formEdited","form","fields","options","optionKey","optionLabel","value","object","nullable","required","when","schema","label","defaultValue","muiFormGroupProps","row","root","radioLabel","percentageOfSelected","muiComponentProps","disabled","number","min","max","certificateNumber","formInput","certificateInceptionDate","clearable","variant","format","fullWidth","datepicker","date","test","parent","certificateExpiryDate","isSameOrBefore","outputFormat","isSameOrAfter","Date","getTime","Array","item"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport * as Yup from 'yup';\r\nimport moment from 'moment';\r\n\r\n//app\r\nimport { LinkClaimPolicyView } from './LinkClaimPolicy.view';\r\nimport styles from './LinkClaimPolicy.styles';\r\nimport { FormGrid } from 'components';\r\nimport { \r\n    getInterest,\r\n    getClaimDetails,\r\n    getCountriesList,\r\n    getPolicyInsures,\r\n    getPolicyClients,\r\n    getPolicySections,\r\n    getPolicyInformation,\r\n    getSettlementCurrency,\r\n    selectClaimsPolicyInformation,\r\n    selectClaimsPolicySections,\r\n    selectClaimsInterest,\r\n    selectClaimPolicyInsures,\r\n    selectSectionEnabledUG,\r\n    selectClaimsUnderwritingGroups,\r\n    selectClaimPolicyClients,\r\n    selectSettlementCurrency,\r\n    selectAllClaimDetails,\r\n    selectCountriesList,\r\n    postClaimDetailsInformation,\r\n    postEditClaimDetailsInformation,\r\n} from 'stores';\r\nimport * as utils from 'utils';\r\nimport { CLAIM_SECTION_ENABLED_UG, CLAIM_POLICY_SECTION_DEFAULT } from 'consts';\r\n\r\n//mui\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nexport default function SelectedClaimPolicy({\r\n  policyData, \r\n  selectedPolicyRender, \r\n  validation, \r\n  setValidation,\r\n  activeStep,\r\n  setActiveStep,\r\n  isAllStepsCompleted,\r\n  handleBack,\r\n  handleSave,\r\n  handleNext,\r\n  save,\r\n  index,\r\n  isFormsEdited,\r\n  setFormEditedStatus,\r\n  handlerPolicySave,\r\n  saveStatus,\r\n  setSaveStatus,\r\n}){\r\n  const classes = makeStyles(styles, { name: 'LinkClaimPolicy' })();\r\n  const [isDataReady, setIsDataReady] = useState(false);\r\n  const [type, setType] = useState(false);\r\n  const [uwResetKey, setUWResetKey] = useState();\r\n  const dispatch = useDispatch();\r\n  let currencies = useSelector(selectSettlementCurrency);\r\n  const policyInformation = useSelector(selectClaimsPolicyInformation);\r\n  currencies = currencies?.map((currency) => ({ ...currency, name: `${currency.id} - ${currency.name}` }));\r\n  const existingClaimOrPolicyCurrency = policyInformation?.originalCurrency;\r\n  const selectedCurrency = currencies?.find((c) => c.id === existingClaimOrPolicyCurrency);\r\n  const interest = useSelector(selectClaimsInterest);\r\n  const selectedInterest = interest?.items[0] || null;\r\n  const allClaimDetails = useSelector(selectAllClaimDetails);\r\n  const underWritingGroups = useSelector(selectClaimsUnderwritingGroups);\r\n  const policySections = useSelector(selectClaimsPolicySections);\r\n  const claimPolicyInsures = useSelector(selectClaimPolicyInsures);\r\n  const policyInsured = claimPolicyInsures?.[0] || null;\r\n  const isSectionEnabled = useSelector(selectSectionEnabledUG);\r\n  const claimPolicyClients = useSelector(selectClaimPolicyClients);\r\n  const countriesList = useSelector(selectCountriesList);\r\n  const policyClients = claimPolicyClients?.[0] || null;\r\n\r\n  const isBordereauFlag = allClaimDetails?.isBordereau === 1;\r\n\r\n  const sectionAllOption =\r\n  policyData?.policyType === CLAIM_SECTION_ENABLED_UG[0]\r\n    ? []\r\n    : [{ id: CLAIM_POLICY_SECTION_DEFAULT, name: utils.string.t('app.all'), description: null }];\r\n\r\n  const policyInfo = [...sectionAllOption, ...(utils.generic.isValidArray(policySections, true) ? policySections : [])];\r\n\r\n  const postSaveHandler = (postData) => {\r\n    dispatch(postClaimDetailsInformation(postData)).then((response)=>{\r\n      if(response){\r\n        setValidation(false);\r\n      }\r\n    });\r\n  };\r\n\r\n  const postEditSaveHandler = (postData) => {\r\n    dispatch(postEditClaimDetailsInformation(postData)).then((response)=>{\r\n      if(response){\r\n        const formEdited = isFormsEdited.map((form) => ({ ...form }));\r\n        formEdited[index][\"formEditedStatus\"] = false;\r\n        setFormEditedStatus(formEdited);\r\n        setActiveStep(index + 1);\r\n        setValidation(false);\r\n      }else{\r\n        setValidation(false);\r\n        setActiveStep(index + 1);\r\n      }\r\n    });\r\n  };\r\n  const fields = [\r\n    {\r\n      name: 'insured',\r\n      type: 'autocompletemui',\r\n      options: claimPolicyInsures || [],\r\n      optionKey: 'id',\r\n      optionLabel: 'name',\r\n      value: policyInsured,\r\n      validation: Yup.object()\r\n        .nullable()\r\n        .required(utils.string.t('validation.required'))\r\n        .when('$validation', (validation, schema) => (validation ? schema : Yup.object().nullable())),\r\n    },\r\n    {\r\n      name: 'client',\r\n      type: 'autocompletemui',\r\n      options: claimPolicyClients || [],\r\n      optionKey: 'id',\r\n      optionLabel: 'name',\r\n      value: policyClients,\r\n      validation: Yup.object()\r\n        .nullable()\r\n        .required(utils.string.t('validation.required'))\r\n        .when('$validation', (validation, schema) => (validation ? schema : Yup.object().nullable())),\r\n    },\r\n    {\r\n      name: 'countryCode',\r\n      type: 'autocompletemui',\r\n      options: countriesList || [],\r\n      optionKey: 'id',\r\n      optionLabel: 'name',\r\n      value: countriesList[0] || null,\r\n      validation: Yup.object().nullable().required(utils.string.t('validation.required')),\r\n    },\r\n    {\r\n      name: 'originalCurrencyCode',\r\n      type: 'autocompletemui',\r\n      options: currencies || [],\r\n      optionKey: 'id',\r\n      optionLabel: 'name',\r\n      value: selectedCurrency || null,\r\n      validation: Yup.object().nullable().required(utils.string.t('validation.required')),\r\n    },\r\n    {\r\n      name: 'settlementCurrencyCode',\r\n      type: 'autocompletemui',\r\n      options: currencies || [],\r\n      optionKey: 'id',\r\n      optionLabel: 'name',\r\n      value: selectedCurrency || null,\r\n      validation: Yup.object().nullable().required(utils.string.t('validation.required')),\r\n    },\r\n    {\r\n      name: 'interest',\r\n      type: 'autocompletemui',\r\n      options: interest?.items,\r\n      value: selectedInterest,\r\n      optionKey: 'code',\r\n      optionLabel: 'description',\r\n      validation: Yup.object().nullable().required(utils.string.t('validation.required')),\r\n    },\r\n    {\r\n      name: 'movementType',\r\n      type: 'toggle',\r\n      label: '',\r\n      value: 'Advice',\r\n      options: [\r\n        {\r\n          label: utils.string.t('claims.typeOfSettlement.advice'),\r\n          value: 'Advice',\r\n        },\r\n        {\r\n          label: utils.string.t('claims.typeOfSettlement.settlement'),\r\n          value: 'Settlement',\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      name: 'order',\r\n      type: 'radio',\r\n      defaultValue: '100',\r\n      muiFormGroupProps: {\r\n        row: true,\r\n        classes: {\r\n          root: classes.radioLabel,\r\n        },\r\n      },\r\n      options: [\r\n        {\r\n          label: utils.string.t('claims.typeOfSettlement.oneHundredPercent'),\r\n          value: '100',\r\n        },\r\n        {\r\n          label: utils.string.t('claims.typeOfSettlement.ourShare'),\r\n          value: '0',\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      name: 'orderPercentage',\r\n      type: 'number',\r\n      defaultValue: underWritingGroups.percentageOfSelected || '0',\r\n      value: underWritingGroups.percentageOfSelected || '0',\r\n      muiComponentProps: {\r\n        disabled: true,\r\n      },\r\n      validation: Yup.number()\r\n        .min(0, utils.string.t('claims.typeOfSettlement.errorMin'))\r\n        .max(100, utils.string.t('claims.typeOfSettlement.error')),\r\n    },\r\n    ...(isBordereauFlag\r\n      ? [\r\n          {\r\n            name: 'certificateNumber',\r\n            type: 'text',\r\n            value: allClaimDetails?.certificateNumber || '',\r\n            muiComponentProps: {\r\n              classes: {\r\n                root: classes.formInput,\r\n              },\r\n            },\r\n            validation: Yup.string()\r\n              .nullable()\r\n              .required(utils.string.t('validation.required'))\r\n              .max(17, utils.string.t('claims.claimInformation.validation.maxCerficateNumber'))\r\n              .when('$validation', (validation, schema) => (validation ? schema : Yup.string())),\r\n          },\r\n          {\r\n            type: 'datepicker',\r\n            name: 'certificateInceptionDate',\r\n            value: allClaimDetails?.certificateInceptionDate || null,\r\n            muiComponentProps: {\r\n              clearable: false,\r\n              variant: 'inline',\r\n              format: 'DD-MM-YYYY',\r\n              fullWidth: true,\r\n              classes: {\r\n                root: classes.datepicker,\r\n              },\r\n            },\r\n            validation: Yup.date()\r\n              .nullable()\r\n              .required(utils.string.t('validation.required'))\r\n              .test('from', utils.string.t('claims.claimInformation.validation.greaterThenExpDate'), function (value) {\r\n                return value && this.options.parent.certificateExpiryDate\r\n                  ? moment(value).isSameOrBefore(this.options.parent.certificateExpiryDate)\r\n                  : true;\r\n              })\r\n              .when('$validation', (validation, schema) => (validation ? schema : Yup.date().nullable())),\r\n            outputFormat: 'iso',\r\n          },\r\n          {\r\n            type: 'datepicker',\r\n            name: 'certificateExpiryDate',\r\n            value: allClaimDetails?.certificateExpiryDate || null,\r\n            muiComponentProps: {\r\n              clearable: false,\r\n              variant: 'inline',\r\n              format: 'DD-MM-YYYY',\r\n              fullWidth: true,\r\n              classes: {\r\n                root: classes.datepicker,\r\n              },\r\n            },\r\n            validation: Yup.date()\r\n              .nullable()\r\n              .required(utils.string.t('validation.required'))\r\n              .test('from', utils.string.t('claims.claimInformation.validation.lesserThenIncDate'), function (value) {\r\n                return value && this.options.parent.certificateInceptionDate\r\n                  ? moment(value).isSameOrAfter(this.options.parent.certificateInceptionDate)\r\n                  : true;\r\n              })\r\n              .when('$validation', (validation, schema) => (validation ? schema : Yup.date().nullable())),\r\n            outputFormat: 'iso',\r\n          },\r\n        ]\r\n      : []),\r\n    ...(isSectionEnabled\r\n      ? [\r\n          {\r\n            name: 'ugSections',\r\n            type: 'autocompletemui',\r\n            value: null,\r\n            options: policyInfo,\r\n            optionKey: 'id',\r\n            optionLabel: 'name',\r\n            validation: Yup.object()\r\n              .nullable()\r\n              .required(utils.string.t('validation.required'))\r\n              .when('$validation', (validation, schema) => (validation ? schema : Yup.object().nullable())),\r\n          },\r\n        ]\r\n      : []),\r\n  ];\r\n\r\n    useEffect(()=>{\r\n        dispatch(getInterest());\r\n        dispatch(getSettlementCurrency());\r\n        dispatch(getPolicyInsures()).then((response) => {\r\n            if (utils.generic.isValidArray(response)) {\r\n              dispatch(getPolicyClients()).then((response) => {\r\n                if (utils.generic.isValidArray(response)) {\r\n                  dispatch(getPolicySections()).then((response)=>{\r\n                    if (utils.generic.isValidArray(response)) {\r\n                      setIsDataReady(true);\r\n                      setUWResetKey(new Date().getTime());\r\n                    }\r\n                  })\r\n                }\r\n              });\r\n            }\r\n          });\r\n        dispatch(getPolicyInformation());\r\n        dispatch(getClaimDetails());\r\n        dispatch(getCountriesList());\r\n        setUWResetKey(new Date().getTime());\r\n    }, [selectedPolicyRender]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    if (!isDataReady) {\r\n      return (\r\n      <FormGrid container spacing={4}>\r\n          {[...new Array(3)].map((item, index) => (\r\n          <Fragment key={`skeleton-${index}`}>\r\n            <FormGrid item xs={12}>\r\n              <Skeleton height={30} width={100} />\r\n            </FormGrid>\r\n            <FormGrid item xs={12}>\r\n              <FormGrid container spacing={4}>\r\n                  <FormGrid item xs={12} md={4}>\r\n                  <Skeleton height={16} />\r\n                  <Skeleton height={30} variant=\"rect\" />\r\n                  </FormGrid>\r\n                  <FormGrid item xs={12} md={4}>\r\n                  <Skeleton height={16} />\r\n                  <Skeleton height={30} variant=\"rect\" />\r\n                  </FormGrid>\r\n                  <FormGrid item xs={12} md={4}>\r\n                  <Skeleton height={16} />\r\n                  <Skeleton height={30} variant=\"rect\" />\r\n                  </FormGrid>\r\n              </FormGrid>\r\n            </FormGrid>\r\n          </Fragment>\r\n          ))}\r\n      </FormGrid>\r\n      );\r\n    }\r\n\r\n    return(\r\n      <LinkClaimPolicyView\r\n        fields={fields}\r\n        policyData={policyData}\r\n        claimPolicyInsures={claimPolicyInsures}\r\n        interest={interest}\r\n        uwResetKey={uwResetKey}\r\n        hasClaimRef={false}\r\n        underWritingGroups={underWritingGroups}\r\n        claimPolicyClients={claimPolicyClients}\r\n        isBordereauFlag={isBordereauFlag}\r\n        validation={validation}\r\n        setValidation={setValidation}\r\n        activeStep={activeStep}\r\n        isAllStepsCompleted={isAllStepsCompleted}\r\n        handleBack={handleBack}\r\n        handleSave={handleSave}\r\n        handleNext={handleNext}\r\n        save={save}\r\n        index={index}\r\n        isFormsEdited={isFormsEdited}\r\n        setFormEditedStatus={setFormEditedStatus}\r\n        handlerPolicySave={handlerPolicySave}\r\n        postSaveHandler={postSaveHandler}\r\n        postEditSaveHandler={postEditSaveHandler}\r\n        saveStatus={saveStatus}\r\n        setSaveStatus={setSaveStatus}\r\n      />\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}