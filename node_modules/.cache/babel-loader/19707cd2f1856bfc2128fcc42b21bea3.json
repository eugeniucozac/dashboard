{"ast":null,"code":"import \"core-js/modules/es.promise.finally\";\nimport { authLogout, addLoader, removeLoader } from 'stores';\nimport * as utils from 'utils';\nexport var getNextTaskList = function getNextTaskList() {\n  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var taskCode = params.taskCode;\n    var defaultError = {\n      file: 'stores/claims.actions.getNextTaskList'\n    };\n    dispatch(getNextTaskListRequest(params));\n    dispatch(addLoader('getNextTaskList'));\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.bpmService,\n      path: \"workflow/task/\".concat(taskCode, \"/nextTaskList\")\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (data) {\n      return utils.api.handleNewData(data);\n    }).then(function (json) {\n      dispatch(getNextTaskListSuccess(json));\n      return json;\n    })[\"catch\"](function (err) {\n      dispatch(getNextTaskListFailure(err, defaultError));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      return err;\n    })[\"finally\"](function () {\n      dispatch(removeLoader('getNextTaskList'));\n    });\n  };\n};\nexport var getNextTaskListRequest = function getNextTaskListRequest(params) {\n  return {\n    type: 'CLAIMS_TASK_PROCESSING_GET_NEXT_TASKLIST_REQUEST',\n    payload: params\n  };\n};\nexport var getNextTaskListSuccess = function getNextTaskListSuccess(json) {\n  return {\n    type: 'CLAIMS_TASK_PROCESSING_GET_NEXT_TASKLIST_SUCCESS',\n    payload: json.data\n  };\n};\nexport var getNextTaskListFailure = function getNextTaskListFailure(error) {\n  return {\n    type: 'CLAIMS_TASK_PROCESSING_GET_NEXT_TASKLIST_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.getNextTaskList.js"],"names":["authLogout","addLoader","removeLoader","utils","getNextTaskList","params","dispatch","getState","auth","user","endpoint","config","vars","taskCode","defaultError","file","getNextTaskListRequest","api","get","token","accessToken","bpmService","path","then","response","handleResponse","data","handleNewData","json","getNextTaskListSuccess","err","getNextTaskListFailure","handleUnauthorized","type","payload","error"],"mappings":";AAAA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,YAAhC,QAAoD,QAApD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAO,IAAMC,eAAe,GAC1B,SADWA,eACX;AAAA,MAACC,MAAD,uEAAU,EAAV;AAAA,SACA,UAACC,QAAD,EAAWC,QAAX,EAAwB;AACtB;AADsB,oBAEqCA,QAAQ,EAF7C;AAAA,QAENC,IAFM,aAEdC,IAFc,CAEND,IAFM;AAAA,QAEoBE,QAFpB,aAEEC,MAFF,CAEYC,IAFZ,CAEoBF,QAFpB;;AAAA,QAIdG,QAJc,GAIDR,MAJC,CAIdQ,QAJc;AAMtB,QAAMC,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE;AADa,KAArB;AAIAT,IAAAA,QAAQ,CAACU,sBAAsB,CAACX,MAAD,CAAvB,CAAR;AACAC,IAAAA,QAAQ,CAACL,SAAS,CAAC,iBAAD,CAAV,CAAR;AAEA,WAAOE,KAAK,CAACc,GAAN,CACJC,GADI,CACA;AACHC,MAAAA,KAAK,EAAEX,IAAI,CAACY,WADT;AAEHV,MAAAA,QAAQ,EAAEA,QAAQ,CAACW,UAFhB;AAGHC,MAAAA,IAAI,0BAAmBT,QAAnB;AAHD,KADA,EAMJU,IANI,CAMC,UAACC,QAAD;AAAA,aAAcrB,KAAK,CAACc,GAAN,CAAUQ,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAND,EAOJD,IAPI,CAOC,UAACG,IAAD;AAAA,aAAUvB,KAAK,CAACc,GAAN,CAAUU,aAAV,CAAwBD,IAAxB,CAAV;AAAA,KAPD,EAQJH,IARI,CAQC,UAACK,IAAD,EAAU;AACdtB,MAAAA,QAAQ,CAACuB,sBAAsB,CAACD,IAAD,CAAvB,CAAR;AACA,aAAOA,IAAP;AACD,KAXI,WAYE,UAACE,GAAD,EAAS;AACdxB,MAAAA,QAAQ,CAACyB,sBAAsB,CAACD,GAAD,EAAMhB,YAAN,CAAvB,CAAR;AACAX,MAAAA,KAAK,CAACc,GAAN,CAAUe,kBAAV,CAA6BF,GAA7B,EAAkCxB,QAAlC,EAA4CN,UAA5C;AACA,aAAO8B,GAAP;AACD,KAhBI,aAiBI,YAAM;AACbxB,MAAAA,QAAQ,CAACJ,YAAY,CAAC,iBAAD,CAAb,CAAR;AACD,KAnBI,CAAP;AAoBD,GAlCD;AAAA,CADK;AAqCP,OAAO,IAAMc,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACX,MAAD,EAAY;AAChD,SAAO;AACL4B,IAAAA,IAAI,EAAE,kDADD;AAELC,IAAAA,OAAO,EAAE7B;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMwB,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACD,IAAD,EAAU;AAC9C,SAAO;AACLK,IAAAA,IAAI,EAAE,kDADD;AAELC,IAAAA,OAAO,EAAEN,IAAI,CAACF;AAFT,GAAP;AAID,CALM;AAOP,OAAO,IAAMK,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACI,KAAD,EAAW;AAC/C,SAAO;AACLF,IAAAA,IAAI,EAAE,kDADD;AAELC,IAAAA,OAAO,EAAEC;AAFJ,GAAP;AAID,CALM","sourcesContent":["import { authLogout, addLoader, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const getNextTaskList =\r\n  (params = {}) =>\r\n  (dispatch, getState) => {\r\n    // prettier-ignore\r\n    const { user: { auth }, config: { vars: { endpoint } } } = getState();\r\n\r\n    const { taskCode } = params;\r\n\r\n    const defaultError = {\r\n      file: 'stores/claims.actions.getNextTaskList',\r\n    };\r\n\r\n    dispatch(getNextTaskListRequest(params));\r\n    dispatch(addLoader('getNextTaskList'));\r\n\r\n    return utils.api\r\n      .get({\r\n        token: auth.accessToken,\r\n        endpoint: endpoint.bpmService,\r\n        path: `workflow/task/${taskCode}/nextTaskList`,\r\n      })\r\n      .then((response) => utils.api.handleResponse(response))\r\n      .then((data) => utils.api.handleNewData(data))\r\n      .then((json) => {\r\n        dispatch(getNextTaskListSuccess(json));\r\n        return json;\r\n      })\r\n      .catch((err) => {\r\n        dispatch(getNextTaskListFailure(err, defaultError));\r\n        utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n        return err;\r\n      })\r\n      .finally(() => {\r\n        dispatch(removeLoader('getNextTaskList'));\r\n      });\r\n  };\r\n\r\nexport const getNextTaskListRequest = (params) => {\r\n  return {\r\n    type: 'CLAIMS_TASK_PROCESSING_GET_NEXT_TASKLIST_REQUEST',\r\n    payload: params,\r\n  };\r\n};\r\n\r\nexport const getNextTaskListSuccess = (json) => {\r\n  return {\r\n    type: 'CLAIMS_TASK_PROCESSING_GET_NEXT_TASKLIST_SUCCESS',\r\n    payload: json.data,\r\n  };\r\n};\r\n\r\nexport const getNextTaskListFailure = (error) => {\r\n  return {\r\n    type: 'CLAIMS_TASK_PROCESSING_GET_NEXT_TASKLIST_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}