{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\pages\\\\Authentication\\\\Authentication.js\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport { useHistory, useLocation } from 'react-router'; // app\n\nimport { AuthContext, Loader } from 'components';\nimport config from 'config';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Authentication(_ref) {\n  _s();\n\n  var context = _ref.context;\n  var history = useHistory();\n  var location = useLocation();\n  React.useEffect(function () {\n    // if we land on this page from Auth0 then handle callback and proceed to parse Auth0 hash\n    // if we're not authenticated and tried to manually go to /authentication then redirect /login\n    if (location.hash) {\n      context.handleCallback(location.hash);\n    } else {\n      history.push(config.routes.login.root);\n    }\n  }, [context, history, location.hash]);\n  return /*#__PURE__*/_jsxDEV(Loader, {\n    visible: true,\n    label: utils.string.t('app.authenticating')\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 10\n  }, this);\n}\n\n_s(Authentication, \"uVbAazkklq71LOlFxHFmZl5TowM=\", false, function () {\n  return [useHistory, useLocation];\n});\n\n_c = Authentication;\n\nfunction AuthenticationWithContext(props) {\n  var _this = this;\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Consumer, {\n    children: function children(context) {\n      return /*#__PURE__*/_jsxDEV(Authentication, _objectSpread(_objectSpread({}, props), {}, {\n        context: context\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 46\n      }, _this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 10\n  }, this);\n}\n\n_c2 = AuthenticationWithContext;\nexport default AuthenticationWithContext;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Authentication\");\n$RefreshReg$(_c2, \"AuthenticationWithContext\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/pages/Authentication/Authentication.js"],"names":["React","useHistory","useLocation","AuthContext","Loader","config","utils","Authentication","context","history","location","useEffect","hash","handleCallback","push","routes","login","root","string","t","AuthenticationWithContext","props"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,EAAqBC,WAArB,QAAwC,cAAxC,C,CAEA;;AACA,SAASC,WAAT,EAAsBC,MAAtB,QAAoC,YAApC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;AAEA,OAAO,SAASC,cAAT,OAAqC;AAAA;;AAAA,MAAXC,OAAW,QAAXA,OAAW;AAC1C,MAAMC,OAAO,GAAGR,UAAU,EAA1B;AACA,MAAMS,QAAQ,GAAGR,WAAW,EAA5B;AAEAF,EAAAA,KAAK,CAACW,SAAN,CAAgB,YAAM;AACpB;AACA;AACA,QAAID,QAAQ,CAACE,IAAb,EAAmB;AACjBJ,MAAAA,OAAO,CAACK,cAAR,CAAuBH,QAAQ,CAACE,IAAhC;AACD,KAFD,MAEO;AACLH,MAAAA,OAAO,CAACK,IAAR,CAAaT,MAAM,CAACU,MAAP,CAAcC,KAAd,CAAoBC,IAAjC;AACD;AACF,GARD,EAQG,CAACT,OAAD,EAAUC,OAAV,EAAmBC,QAAQ,CAACE,IAA5B,CARH;AAUA,sBAAO,QAAC,MAAD;AAAQ,IAAA,OAAO,MAAf;AAAgB,IAAA,KAAK,EAAEN,KAAK,CAACY,MAAN,CAAaC,CAAb,CAAe,oBAAf;AAAvB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GAfeZ,c;UACEN,U,EACCC,W;;;KAFHK,c;;AAiBhB,SAASa,yBAAT,CAAmCC,KAAnC,EAA0C;AAAA;;AACxC,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAA,cAAuB,kBAACb,OAAD;AAAA,0BAAa,QAAC,cAAD,kCAAoBa,KAApB;AAA2B,QAAA,OAAO,EAAEb;AAApC;AAAA;AAAA;AAAA;AAAA,eAAb;AAAA;AAAvB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;MAFQY,yB;AAIT,eAAeA,yBAAf","sourcesContent":["import * as React from 'react';\r\nimport { useHistory, useLocation } from 'react-router';\r\n\r\n// app\r\nimport { AuthContext, Loader } from 'components';\r\nimport config from 'config';\r\nimport * as utils from 'utils';\r\n\r\nexport function Authentication({ context }) {\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  React.useEffect(() => {\r\n    // if we land on this page from Auth0 then handle callback and proceed to parse Auth0 hash\r\n    // if we're not authenticated and tried to manually go to /authentication then redirect /login\r\n    if (location.hash) {\r\n      context.handleCallback(location.hash);\r\n    } else {\r\n      history.push(config.routes.login.root);\r\n    }\r\n  }, [context, history, location.hash]);\r\n\r\n  return <Loader visible label={utils.string.t('app.authenticating')} />;\r\n}\r\n\r\nfunction AuthenticationWithContext(props) {\r\n  return <AuthContext.Consumer>{(context) => <Authentication {...props} context={context} />}</AuthContext.Consumer>;\r\n}\r\n\r\nexport default AuthenticationWithContext;\r\n"]},"metadata":{},"sourceType":"module"}