{"ast":null,"code":"import _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\pages\\\\TaskDashboard\\\\TaskDashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { useHistory, useParams } from 'react-router'; // app\n\nimport { TaskDashboardView } from './TaskDashboard.view';\nimport { showModal, hideModal, selectClaimsTasksProcessingSelected, selectTaskDashboardTaskDetails, resetTaskProcessingTaskDetails, getClaimsTasksProcessing, getClaimsTaskDashboardDetail, postSanctionsCheck, getClaimsPreviewInformation, selectClaimsProcessingItem, selectedClaimsProcessingTaskType, getPolicyInformation, resetPolicyInformation, getLossInformation, getPolicySections, getCatCodes, selectIsTaskDashboardTaskDetailsLoading } from 'stores';\nimport * as utils from 'utils';\nimport config from 'config';\nimport { REASSIGN_ENABLED_TASK_STATUSES, TASK_TYPES_NATIVE, RFI_ON_TASKS, TASK_TAB_COMPLETED_STATUS, API_RESPONSE_OK, TASK_TEAM_TYPE, CLAIM_PROCESSING_REQ_TYPES } from 'consts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function TaskDashboard() {\n  _s();\n\n  var _user$emailId, _selectedTask$assigne, _user$organisation;\n\n  var dispatch = useDispatch();\n  var history = useHistory();\n  var params = useParams();\n  var brand = useSelector(function (state) {\n    return state.ui.brand;\n  }); // Redux management\n\n  var tasksProcessingSelected = useSelector(selectClaimsTasksProcessingSelected);\n\n  var _tasksProcessingSelec = _slicedToArray(tasksProcessingSelected, 1),\n      _tasksProcessingSelec2 = _tasksProcessingSelec[0],\n      taskSelected = _tasksProcessingSelec2 === void 0 ? {} : _tasksProcessingSelec2;\n\n  var processRef = taskSelected.processRef,\n      taskId = taskSelected.taskId,\n      sourceID = taskSelected.sourceID,\n      businessProcessID = taskSelected.businessProcessID,\n      processId = taskSelected.processId,\n      caseIncidentID = taskSelected.caseIncidentID,\n      departmentID = taskSelected.departmentID;\n  var claimData = {\n    claimReference: processRef,\n    taskID: taskId,\n    sourceID: sourceID,\n    claimID: businessProcessID,\n    departmentID: departmentID\n  };\n  var taskDashboardTaskDetails = useSelector(selectTaskDashboardTaskDetails); // State management\n\n  var _useState = useState((params === null || params === void 0 ? void 0 : params.tab) || 'taskDetails'),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedTab = _useState2[0],\n      setSelectedTab = _useState2[1];\n\n  var hasValidTaskDashboardDetails = utils.generic.isValidObject(taskDashboardTaskDetails, 'taskRef');\n  var selectedTask = hasValidTaskDashboardDetails ? taskDashboardTaskDetails : tasksProcessingSelected[0];\n  var isTaskClosed = (selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.status) === TASK_TAB_COMPLETED_STATUS;\n  var user = useSelector(function (state) {\n    return state.user;\n  });\n  var userHasAllTasksPermission = utils.app.access.feature('claimsProcessing.myTeamTasks', ['read', 'create', 'update'], user);\n  var isUsersTasks = ((_user$emailId = user.emailId) === null || _user$emailId === void 0 ? void 0 : _user$emailId.toLowerCase()) === (selectedTask === null || selectedTask === void 0 ? void 0 : (_selectedTask$assigne = selectedTask.assignee) === null || _selectedTask$assigne === void 0 ? void 0 : _selectedTask$assigne.toLowerCase());\n  var isTeamClaim = (user === null || user === void 0 ? void 0 : (_user$organisation = user.organisation) === null || _user$organisation === void 0 ? void 0 : _user$organisation.name) === (selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.team);\n  var taskType = isUsersTasks ? TASK_TEAM_TYPE.myTask : TASK_TEAM_TYPE.myTeam; // on load\n\n  useEffect(function () {\n    var currentTaskRef = selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.taskRef;\n\n    if (hasValidTaskDashboardDetails && currentTaskRef && !isTaskClosed) {\n      dispatch(selectedClaimsProcessingTaskType(taskType));\n      dispatch(getClaimsTaskDashboardDetail({\n        query: currentTaskRef,\n        claimID: businessProcessID,\n        viewLoader: false\n      }));\n    }\n\n    function storeClaimDetails() {\n      return _storeClaimDetails.apply(this, arguments);\n    }\n\n    function _storeClaimDetails() {\n      _storeClaimDetails = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var claimInfo, claimReference, lossDetailID, _sourceID, policyID, claimDetails;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return dispatch(getClaimsPreviewInformation({\n                  claimId: claimData === null || claimData === void 0 ? void 0 : claimData.claimID,\n                  claimRefParams: claimData === null || claimData === void 0 ? void 0 : claimData.claimReference,\n                  sourceIdParams: claimData === null || claimData === void 0 ? void 0 : claimData.sourceID,\n                  divisionIDParams: claimData === null || claimData === void 0 ? void 0 : claimData.departmentID,\n                  viewLoader: false\n                }));\n\n              case 2:\n                claimInfo = _context.sent;\n\n                if (!utils.generic.isValidObject(claimInfo)) {\n                  _context.next = 12;\n                  break;\n                }\n\n                claimReference = claimInfo.claimReference, lossDetailID = claimInfo.lossDetailID, _sourceID = claimInfo.sourceID, policyID = claimInfo.policyID;\n                claimDetails = _objectSpread(_objectSpread({}, claimInfo), {}, {\n                  claimRef: claimReference,\n                  lossRef: lossDetailID,\n                  sourceId: _sourceID,\n                  policyId: policyID,\n                  processID: processId,\n                  caseIncidentID: caseIncidentID\n                });\n                _context.next = 8;\n                return dispatch(selectClaimsProcessingItem(claimDetails, true));\n\n              case 8:\n                dispatch(getPolicyInformation({\n                  viewLoader: false\n                }));\n                dispatch(getLossInformation({\n                  lossDetailsId: taskSelected === null || taskSelected === void 0 ? void 0 : taskSelected.lossDetailID,\n                  sourceIdParams: taskSelected === null || taskSelected === void 0 ? void 0 : taskSelected.sourceID,\n                  divisionIdParam: taskSelected === null || taskSelected === void 0 ? void 0 : taskSelected.departmentID,\n                  claimRefParam: taskSelected === null || taskSelected === void 0 ? void 0 : taskSelected.processRef,\n                  viewLoader: false\n                }));\n                dispatch(getPolicySections({\n                  xbPolicyID: claimInfo === null || claimInfo === void 0 ? void 0 : claimInfo.policyID,\n                  xbInstanceID: claimInfo === null || claimInfo === void 0 ? void 0 : claimInfo.sourceID,\n                  viewLoader: false\n                }));\n                dispatch(getCatCodes(false));\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _storeClaimDetails.apply(this, arguments);\n    }\n\n    storeClaimDetails(); // cleanup\n\n    return function () {\n      dispatch(resetTaskProcessingTaskDetails());\n      dispatch(resetPolicyInformation());\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    var _tasksProcessingSelec3;\n\n    if ((tasksProcessingSelected === null || tasksProcessingSelected === void 0 ? void 0 : tasksProcessingSelected.length) !== 1 || !(tasksProcessingSelected === null || tasksProcessingSelected === void 0 ? void 0 : (_tasksProcessingSelec3 = tasksProcessingSelected[0]) === null || _tasksProcessingSelec3 === void 0 ? void 0 : _tasksProcessingSelec3.taskRef)) {// history.replace(config.routes.claimsProcessing.root);\n    }\n  }, [history, tasksProcessingSelected]);\n\n  var handleSelectTab = function handleSelectTab(tabName) {\n    setSelectedTab(tabName);\n  };\n\n  var handleUpdateTaskPriority = function handleUpdateTaskPriority(task) {\n    dispatch(showModal({\n      component: 'SET_PRIORITY',\n      props: {\n        title: utils.string.t('claims.modals.taskFunction.setTaskPriorityTitle'),\n        fullWidth: true,\n        maxWidth: 'sm',\n        disableAutoFocus: true,\n        componentProps: {\n          task: task,\n          handlers: {\n            cancel: function cancel() {\n              return dispatch(hideModal());\n            },\n            submit: function submit() {\n              return dispatch(hideModal());\n            }\n          }\n        }\n      }\n    }));\n  };\n\n  var handleCreateRFITaskLevel = function handleCreateRFITaskLevel(task) {\n    dispatch(showModal({\n      component: 'CREATE_RFI',\n      props: {\n        title: utils.string.t('claims.processing.taskFunction.createRFI'),\n        hideCompOnBlur: false,\n        fullWidth: true,\n        maxWidth: 'md',\n        disableAutoFocus: true,\n        componentProps: {\n          claim: task,\n          type: RFI_ON_TASKS,\n          cancelHandler: function cancelHandler() {\n            dispatch(hideModal());\n          }\n        }\n      }\n    }));\n  };\n\n  var handleEditTask = function handleEditTask(task) {\n    dispatch(showModal({\n      component: 'CREATE_AD_HOC_TASK',\n      props: {\n        title: utils.string.t('claims.processing.taskFunction.editTask'),\n        hideCompOnBlur: false,\n        fullWidth: true,\n        maxWidth: 'md',\n        disableAutoFocus: true,\n        componentProps: {\n          claim: task,\n          cancelHandler: function cancelHandler() {\n            dispatch(hideModal());\n          },\n          submitHandler: function submitHandler() {\n            refreshTasksData();\n          }\n        }\n      }\n    }));\n  };\n\n  var tabs = [{\n    value: 'taskDetails',\n    label: utils.string.t('claims.processing.taskFunctionalityTabs.taskDetails')\n  }, {\n    value: 'documents',\n    label: utils.string.t('claims.processing.taskFunctionalityTabs.documents')\n  }, {\n    value: 'notes',\n    label: utils.string.t('claims.processing.taskFunctionalityTabs.notes')\n  }];\n\n  var createSanctionsCheck = function createSanctionsCheck() {\n    if (selectedTask) {\n      dispatch(showModal({\n        component: 'CONFIRM',\n        props: {\n          title: utils.string.t('status.alert'),\n          hint: utils.string.t('claims.processing.sanctionsChecksNotification.conformationAlert'),\n          fullWidth: true,\n          maxWidth: 'xs',\n          componentProps: {\n            cancelLabel: utils.string.t('app.no'),\n            confirmLabel: utils.string.t('app.yes'),\n            submitHandler: function submitHandler() {\n              dispatch(postSanctionsCheck({\n                taskId: selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.taskId,\n                rootProcessId: selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.rootProcessId\n              })).then(function (response) {\n                dispatch(hideModal());\n\n                if (response.status === API_RESPONSE_OK) {\n                  dispatch(getClaimsTasksProcessing({\n                    requestType: CLAIM_PROCESSING_REQ_TYPES.search,\n                    taskType: TASK_TEAM_TYPE.myTask\n                  }));\n                }\n              });\n            },\n            cancelHandler: function cancelHandler() {}\n          }\n        }\n      }));\n    }\n  };\n\n  var isDisabled = isTaskClosed || !isUsersTasks;\n  var taskActions = [{\n    id: 'reAssignTask',\n    label: utils.string.t('claims.processing.taskFunction.reAssignTask'),\n    disabled: REASSIGN_ENABLED_TASK_STATUSES.indexOf(selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.status) === -1 || !(userHasAllTasksPermission && isTeamClaim) || isTaskClosed,\n    callback: function callback() {\n      if (utils.generic.isValidObject(selectedTask)) {\n        reAssignTask(selectedTask);\n      }\n    }\n  }, {\n    id: 'editTask',\n    label: utils.string.t('claims.processing.taskFunction.editTask'),\n    disabled: isDisabled,\n    callback: function callback() {\n      utils.generic.isValidObject(selectedTask) && handleEditTask(selectedTask);\n    }\n  }, {\n    id: 'setTaskPriority',\n    label: utils.string.t('claims.processing.taskFunction.setTaskPriority'),\n    disabled: isDisabled,\n    callback: function callback() {\n      handleUpdateTaskPriority(selectedTask);\n    }\n  }, {\n    id: 'createRFI',\n    label: utils.string.t('claims.processing.taskFunction.createRFI'),\n    disabled: !((selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.taskCategory) === TASK_TYPES_NATIVE) || isDisabled,\n    callback: function callback() {\n      utils.generic.isValidObject(selectedTask) && handleCreateRFITaskLevel(selectedTask);\n    }\n  }].concat(_toConsumableArray((selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.taskCategory) === TASK_TYPES_NATIVE ? [{\n    id: 'createSanctionsCheck',\n    label: utils.string.t('claims.processing.summary.buttons.createSanctionsChecks'),\n    disabled: isDisabled,\n    callback: function callback() {\n      createSanctionsCheck(selectedTask);\n    }\n  }] : []));\n  var breadcrumbs = [{\n    name: 'claimsProcessing',\n    label: utils.string.t('loss.title'),\n    link: config.routes.claimsProcessing.root\n  }, {\n    name: 'lossRef',\n    label: \"\".concat(utils.string.t('loss.text', {\n      lossRef: selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.lossRef\n    })),\n    link: \"\".concat(config.routes.claimsFNOL.loss, \"/\").concat(selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.lossRef)\n  }, {\n    name: 'claimRef',\n    label: \"\".concat(utils.string.t('claims.claimRef.text', {\n      claimRef: selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.processRef\n    })),\n    link: \"\".concat(config.routes.claimsProcessing.claim, \"/\").concat(selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.processRef)\n  }, {\n    name: 'taskRef',\n    label: \"\".concat(utils.string.t('claims.processing.task.title', {\n      id: selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.taskRef\n    })),\n    link: \"\".concat(config.routes.claimsProcessing.task, \"/\").concat(selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.taskRef),\n    active: true\n  }];\n\n  var reAssignTask = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(currentTaskDetails) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return dispatch(showModal({\n                component: 'ADD_ASSIGNEE',\n                props: {\n                  title: utils.string.t('app.assign'),\n                  hideCompOnBlur: false,\n                  fullWidth: true,\n                  maxWidth: 'sm',\n                  disableAutoFocus: true,\n                  componentProps: {\n                    taskDetails: [currentTaskDetails],\n                    submitHandler: function submitHandler() {\n                      refreshTasksData();\n                    }\n                  }\n                }\n              }));\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function reAssignTask(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var refreshTasksData = function refreshTasksData() {\n    dispatch(getClaimsTaskDashboardDetail({\n      query: selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.taskRef,\n      claimID: businessProcessID\n    }));\n  }; // abort\n\n\n  if (!selectedTask) return null;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"\".concat(utils.string.t('claims.processing.title'), \" - \").concat(utils.app.getAppName(brand))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskDashboardView, {\n      task: selectedTask,\n      tabs: tabs,\n      selectedTab: selectedTab,\n      breadcrumbs: breadcrumbs,\n      handleSelectTab: handleSelectTab,\n      reAssignTask: reAssignTask,\n      popoverActions: taskActions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(TaskDashboard, \"E7VidUL2WVMpX39v8kWkExKfu+g=\", false, function () {\n  return [useDispatch, useHistory, useParams, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = TaskDashboard;\nTaskDashboard.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"TaskDashboard\"\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\pages\\\\TaskDashboard\\\\TaskDashboard.js\"] = {\n    name: \"TaskDashboard\",\n    docgenInfo: TaskDashboard.__docgenInfo,\n    path: \"src\\\\pages\\\\TaskDashboard\\\\TaskDashboard.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskDashboard\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/pages/TaskDashboard/TaskDashboard.js"],"names":["React","useState","useEffect","useDispatch","useSelector","Helmet","useHistory","useParams","TaskDashboardView","showModal","hideModal","selectClaimsTasksProcessingSelected","selectTaskDashboardTaskDetails","resetTaskProcessingTaskDetails","getClaimsTasksProcessing","getClaimsTaskDashboardDetail","postSanctionsCheck","getClaimsPreviewInformation","selectClaimsProcessingItem","selectedClaimsProcessingTaskType","getPolicyInformation","resetPolicyInformation","getLossInformation","getPolicySections","getCatCodes","selectIsTaskDashboardTaskDetailsLoading","utils","config","REASSIGN_ENABLED_TASK_STATUSES","TASK_TYPES_NATIVE","RFI_ON_TASKS","TASK_TAB_COMPLETED_STATUS","API_RESPONSE_OK","TASK_TEAM_TYPE","CLAIM_PROCESSING_REQ_TYPES","TaskDashboard","dispatch","history","params","brand","state","ui","tasksProcessingSelected","taskSelected","processRef","taskId","sourceID","businessProcessID","processId","caseIncidentID","departmentID","claimData","claimReference","taskID","claimID","taskDashboardTaskDetails","tab","selectedTab","setSelectedTab","hasValidTaskDashboardDetails","generic","isValidObject","selectedTask","isTaskClosed","status","user","userHasAllTasksPermission","app","access","feature","isUsersTasks","emailId","toLowerCase","assignee","isTeamClaim","organisation","name","team","taskType","myTask","myTeam","currentTaskRef","taskRef","query","viewLoader","storeClaimDetails","claimId","claimRefParams","sourceIdParams","divisionIDParams","claimInfo","lossDetailID","policyID","claimDetails","claimRef","lossRef","sourceId","policyId","processID","lossDetailsId","divisionIdParam","claimRefParam","xbPolicyID","xbInstanceID","length","handleSelectTab","tabName","handleUpdateTaskPriority","task","component","props","title","string","t","fullWidth","maxWidth","disableAutoFocus","componentProps","handlers","cancel","submit","handleCreateRFITaskLevel","hideCompOnBlur","claim","type","cancelHandler","handleEditTask","submitHandler","refreshTasksData","tabs","value","label","createSanctionsCheck","hint","cancelLabel","confirmLabel","rootProcessId","then","response","requestType","search","isDisabled","taskActions","id","disabled","indexOf","callback","reAssignTask","taskCategory","breadcrumbs","link","routes","claimsProcessing","root","claimsFNOL","loss","active","currentTaskDetails","taskDetails","getAppName"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Helmet } from 'react-helmet';\r\nimport { useHistory, useParams } from 'react-router';\r\n\r\n// app\r\nimport { TaskDashboardView } from './TaskDashboard.view';\r\nimport {\r\n  showModal,\r\n  hideModal,\r\n  selectClaimsTasksProcessingSelected,\r\n  selectTaskDashboardTaskDetails,\r\n  resetTaskProcessingTaskDetails,\r\n  getClaimsTasksProcessing,\r\n  getClaimsTaskDashboardDetail,\r\n  postSanctionsCheck,\r\n  getClaimsPreviewInformation,\r\n  selectClaimsProcessingItem,\r\n  selectedClaimsProcessingTaskType,\r\n  getPolicyInformation,\r\n  resetPolicyInformation,\r\n  getLossInformation,\r\n  getPolicySections,\r\n  getCatCodes,\r\n  selectIsTaskDashboardTaskDetailsLoading\r\n\r\n} from 'stores';\r\nimport * as utils from 'utils';\r\nimport config from 'config';\r\nimport {\r\n  REASSIGN_ENABLED_TASK_STATUSES,\r\n  TASK_TYPES_NATIVE,\r\n  RFI_ON_TASKS,\r\n  TASK_TAB_COMPLETED_STATUS,\r\n  API_RESPONSE_OK,\r\n  TASK_TEAM_TYPE,\r\n  CLAIM_PROCESSING_REQ_TYPES,\r\n} from 'consts';\r\n\r\nexport default function TaskDashboard() {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const params = useParams();\r\n  const brand = useSelector((state) => state.ui.brand);\r\n\r\n  // Redux management\r\n  const tasksProcessingSelected = useSelector(selectClaimsTasksProcessingSelected);\r\n  const [taskSelected = {}] = tasksProcessingSelected;\r\n  const { processRef, taskId, sourceID, businessProcessID, processId, caseIncidentID, departmentID } = taskSelected;\r\n  const claimData = {\r\n    claimReference: processRef,\r\n    taskID: taskId,\r\n    sourceID,\r\n    claimID: businessProcessID,\r\n    departmentID,\r\n  };\r\n  const taskDashboardTaskDetails = useSelector(selectTaskDashboardTaskDetails);\r\n\r\n  // State management\r\n  const [selectedTab, setSelectedTab] = useState(params?.tab || 'taskDetails');\r\n\r\n  const hasValidTaskDashboardDetails = utils.generic.isValidObject(taskDashboardTaskDetails, 'taskRef');\r\n  const selectedTask = hasValidTaskDashboardDetails ? taskDashboardTaskDetails : tasksProcessingSelected[0];\r\n  const isTaskClosed = selectedTask?.status === TASK_TAB_COMPLETED_STATUS;\r\n\r\n  const user = useSelector((state) => state.user);\r\n  const userHasAllTasksPermission = utils.app.access.feature('claimsProcessing.myTeamTasks', ['read', 'create', 'update'], user);\r\n  const isUsersTasks = user.emailId?.toLowerCase() === selectedTask?.assignee?.toLowerCase();\r\n  const isTeamClaim = user?.organisation?.name === selectedTask?.team;\r\n  const taskType = isUsersTasks ? TASK_TEAM_TYPE.myTask : TASK_TEAM_TYPE.myTeam;\r\n\r\n  // on load\r\n  useEffect(() => {\r\n    const currentTaskRef = selectedTask?.taskRef;\r\n    if (hasValidTaskDashboardDetails && currentTaskRef && !isTaskClosed) {\r\n      dispatch(selectedClaimsProcessingTaskType(taskType));\r\n      dispatch(getClaimsTaskDashboardDetail({ query: currentTaskRef, claimID: businessProcessID, viewLoader: false }));\r\n    }\r\n\r\n    async function storeClaimDetails() {\r\n      const claimInfo = await dispatch(\r\n        getClaimsPreviewInformation({ claimId: claimData?.claimID, claimRefParams: claimData?.claimReference, sourceIdParams: claimData?.sourceID, divisionIDParams: claimData?.departmentID, viewLoader: false })\r\n      );\r\n      if (utils.generic.isValidObject(claimInfo)) {\r\n        const { claimReference, lossDetailID, sourceID, policyID } = claimInfo;\r\n        const claimDetails = {\r\n          ...claimInfo,\r\n          claimRef: claimReference,\r\n          lossRef: lossDetailID,\r\n          sourceId: sourceID,\r\n          policyId: policyID,\r\n          processID: processId,\r\n          caseIncidentID,\r\n        };\r\n        await dispatch(selectClaimsProcessingItem(claimDetails, true));\r\n        dispatch(getPolicyInformation({ viewLoader: false }));\r\n        dispatch(getLossInformation({ lossDetailsId: taskSelected?.lossDetailID, sourceIdParams: taskSelected?.sourceID, divisionIdParam: taskSelected?.departmentID, claimRefParam: taskSelected?.processRef, viewLoader: false }));\r\n        dispatch(getPolicySections({ xbPolicyID: claimInfo?.policyID, xbInstanceID: claimInfo?.sourceID, viewLoader: false }));\r\n        dispatch(getCatCodes(false));\r\n\r\n      }\r\n    }\r\n    storeClaimDetails();\r\n    // cleanup\r\n    return () => {\r\n      dispatch(resetTaskProcessingTaskDetails());\r\n      dispatch(resetPolicyInformation());\r\n    };\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    if (tasksProcessingSelected?.length !== 1 || !tasksProcessingSelected?.[0]?.taskRef) {\r\n      // history.replace(config.routes.claimsProcessing.root);\r\n    }\r\n  }, [history, tasksProcessingSelected]);\r\n\r\n  const handleSelectTab = (tabName) => {\r\n    setSelectedTab(tabName);\r\n  };\r\n\r\n  const handleUpdateTaskPriority = (task) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'SET_PRIORITY',\r\n        props: {\r\n          title: utils.string.t('claims.modals.taskFunction.setTaskPriorityTitle'),\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            task,\r\n            handlers: {\r\n              cancel: () => dispatch(hideModal()),\r\n              submit: () => dispatch(hideModal()),\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleCreateRFITaskLevel = (task) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CREATE_RFI',\r\n        props: {\r\n          title: utils.string.t('claims.processing.taskFunction.createRFI'),\r\n          hideCompOnBlur: false,\r\n          fullWidth: true,\r\n          maxWidth: 'md',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            claim: task,\r\n            type: RFI_ON_TASKS,\r\n            cancelHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleEditTask = (task) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CREATE_AD_HOC_TASK',\r\n        props: {\r\n          title: utils.string.t('claims.processing.taskFunction.editTask'),\r\n          hideCompOnBlur: false,\r\n          fullWidth: true,\r\n          maxWidth: 'md',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            claim: task,\r\n            cancelHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n            submitHandler: () => {\r\n              refreshTasksData();\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n  const tabs = [\r\n    { value: 'taskDetails', label: utils.string.t('claims.processing.taskFunctionalityTabs.taskDetails') },\r\n    { value: 'documents', label: utils.string.t('claims.processing.taskFunctionalityTabs.documents') },\r\n    { value: 'notes', label: utils.string.t('claims.processing.taskFunctionalityTabs.notes') },\r\n  ];\r\n\r\n  const createSanctionsCheck = () => {\r\n    if (selectedTask) {\r\n      dispatch(\r\n        showModal({\r\n          component: 'CONFIRM',\r\n          props: {\r\n            title: utils.string.t('status.alert'),\r\n            hint: utils.string.t('claims.processing.sanctionsChecksNotification.conformationAlert'),\r\n            fullWidth: true,\r\n            maxWidth: 'xs',\r\n            componentProps: {\r\n              cancelLabel: utils.string.t('app.no'),\r\n              confirmLabel: utils.string.t('app.yes'),\r\n              submitHandler: () => {\r\n                dispatch(postSanctionsCheck({ taskId: selectedTask?.taskId, rootProcessId: selectedTask?.rootProcessId })).then(\r\n                  (response) => {\r\n                    dispatch(hideModal());\r\n                    if (response.status === API_RESPONSE_OK) {\r\n                      dispatch(\r\n                        getClaimsTasksProcessing({ requestType: CLAIM_PROCESSING_REQ_TYPES.search, taskType: TASK_TEAM_TYPE.myTask })\r\n                      );\r\n                    }\r\n                  }\r\n                );\r\n              },\r\n              cancelHandler: () => { },\r\n            },\r\n          },\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const isDisabled = isTaskClosed || !isUsersTasks;\r\n\r\n  let taskActions = [\r\n    {\r\n      id: 'reAssignTask',\r\n      label: utils.string.t('claims.processing.taskFunction.reAssignTask'),\r\n      disabled:\r\n        REASSIGN_ENABLED_TASK_STATUSES.indexOf(selectedTask?.status) === -1 || !(userHasAllTasksPermission && isTeamClaim) || isTaskClosed,\r\n      callback: () => {\r\n        if (utils.generic.isValidObject(selectedTask)) {\r\n          reAssignTask(selectedTask);\r\n        }\r\n      },\r\n    },\r\n    {\r\n      id: 'editTask',\r\n      label: utils.string.t('claims.processing.taskFunction.editTask'),\r\n      disabled: isDisabled,\r\n      callback: () => {\r\n        utils.generic.isValidObject(selectedTask) && handleEditTask(selectedTask);\r\n      },\r\n    },\r\n    {\r\n      id: 'setTaskPriority',\r\n      label: utils.string.t('claims.processing.taskFunction.setTaskPriority'),\r\n      disabled: isDisabled,\r\n      callback: () => {\r\n        handleUpdateTaskPriority(selectedTask);\r\n      },\r\n    },\r\n    {\r\n      id: 'createRFI',\r\n      label: utils.string.t('claims.processing.taskFunction.createRFI'),\r\n      disabled: !(selectedTask?.taskCategory === TASK_TYPES_NATIVE) || isDisabled,\r\n      callback: () => {\r\n        utils.generic.isValidObject(selectedTask) && handleCreateRFITaskLevel(selectedTask);\r\n      },\r\n    },\r\n    ...(selectedTask?.taskCategory === TASK_TYPES_NATIVE\r\n      ? [\r\n        {\r\n          id: 'createSanctionsCheck',\r\n          label: utils.string.t('claims.processing.summary.buttons.createSanctionsChecks'),\r\n          disabled: isDisabled,\r\n          callback: () => {\r\n            createSanctionsCheck(selectedTask);\r\n          },\r\n        },\r\n      ]\r\n      : []),\r\n  ];\r\n  const breadcrumbs = [\r\n    {\r\n      name: 'claimsProcessing',\r\n      label: utils.string.t('loss.title'),\r\n      link: config.routes.claimsProcessing.root,\r\n    },\r\n    {\r\n      name: 'lossRef',\r\n      label: `${utils.string.t('loss.text', { lossRef: selectedTask?.lossRef })}`,\r\n      link: `${config.routes.claimsFNOL.loss}/${selectedTask?.lossRef}`,\r\n    },\r\n    {\r\n      name: 'claimRef',\r\n      label: `${utils.string.t('claims.claimRef.text', { claimRef: selectedTask?.processRef })}`,\r\n      link: `${config.routes.claimsProcessing.claim}/${selectedTask?.processRef}`,\r\n    },\r\n    {\r\n      name: 'taskRef',\r\n      label: `${utils.string.t('claims.processing.task.title', { id: selectedTask?.taskRef })}`,\r\n      link: `${config.routes.claimsProcessing.task}/${selectedTask?.taskRef}`,\r\n      active: true,\r\n    },\r\n  ];\r\n\r\n  const reAssignTask = async (currentTaskDetails) => {\r\n    await dispatch(\r\n      showModal({\r\n        component: 'ADD_ASSIGNEE',\r\n        props: {\r\n          title: utils.string.t('app.assign'),\r\n          hideCompOnBlur: false,\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            taskDetails: [currentTaskDetails],\r\n            submitHandler: () => {\r\n              refreshTasksData();\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const refreshTasksData = () => {\r\n    dispatch(getClaimsTaskDashboardDetail({ query: selectedTask?.taskRef, claimID: businessProcessID }));\r\n  };\r\n\r\n  // abort\r\n  if (!selectedTask) return null;\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>{`${utils.string.t('claims.processing.title')} - ${utils.app.getAppName(brand)}`}</title>\r\n      </Helmet>\r\n      <TaskDashboardView\r\n        task={selectedTask}\r\n        tabs={tabs}\r\n        selectedTab={selectedTab}\r\n        breadcrumbs={breadcrumbs}\r\n        handleSelectTab={handleSelectTab}\r\n        reAssignTask={reAssignTask}\r\n        popoverActions={taskActions}\r\n      />\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}