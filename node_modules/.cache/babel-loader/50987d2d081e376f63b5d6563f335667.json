{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport omit from 'lodash/omit';\nimport get from 'lodash/get'; // app\n\nimport { addLoader, authLogout, enqueueNotification, removeLoader } from 'stores';\nimport * as utils from 'utils';\nexport var postTrip = function postTrip() {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/trip.actions.postTrip',\n      message: 'Data missing for POST request'\n    };\n    var state = getState();\n    var tripSelected = get(state, 'trip.selected');\n    var tripEditingInProgress = get(state, 'trip.editingInProgress') || {};\n    var trip = tripSelected.editing ? _objectSpread(_objectSpread({}, tripSelected), tripEditingInProgress) : tripSelected;\n    var visits = trip.visits || [];\n    dispatch(postTripRequest(trip));\n    dispatch(addLoader('postTrip'));\n\n    if (!trip || !trip.title || !utils.generic.isValidArray(trip.visits, true)) {\n      dispatch(postTripFailure(defaultError));\n      dispatch(enqueueNotification('notification.saveTrip.fail', 'error'));\n      dispatch(removeLoader('postTrip'));\n      return;\n    } // get the data for POST\n\n\n    var body = _objectSpread(_objectSpread({}, omit(trip, ['visits'])), {}, {\n      visit: visits.map(function (visit) {\n        // if the visit is an existing visit (lead with a saved trip/visit already existing):\n        //   - keep the (visit) ID\n        //   - remove the isExistingLeadVisit property\n        //\n        // if the visit is new:\n        //   - remove the (lead) ID (not to be confused with a real visit ID)\n        return visit.isExistingLeadVisit ? omit(visit, ['isExistingLeadVisit']) : omit(visit, ['id']);\n      })\n    });\n\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.edge,\n      path: 'api/trip',\n      data: body\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleData(json);\n    }).then(function (data) {\n      dispatch(postTripSuccess(data));\n      dispatch(enqueueNotification('notification.saveTrip.success', 'success'));\n    }).catch(function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API post error (trip.postTrip)'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(postTripFailure(err));\n      dispatch(enqueueNotification('notification.saveTrip.fail', 'error'));\n      return err;\n    }).finally(function () {\n      dispatch(removeLoader('postTrip'));\n    });\n  };\n};\nexport var postTripRequest = function postTripRequest(formData) {\n  return {\n    type: 'TRIP_POST_REQUEST',\n    payload: formData\n  };\n};\nexport var postTripSuccess = function postTripSuccess(responseData) {\n  return {\n    type: 'TRIP_POST_SUCCESS',\n    payload: responseData\n  };\n};\nexport var postTripFailure = function postTripFailure(error) {\n  return {\n    type: 'TRIP_POST_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/trip/trip.actions.postTrip.js"],"names":["omit","get","addLoader","authLogout","enqueueNotification","removeLoader","utils","postTrip","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","message","state","tripSelected","tripEditingInProgress","trip","editing","visits","postTripRequest","title","generic","isValidArray","postTripFailure","body","visit","map","isExistingLeadVisit","api","post","token","accessToken","edge","path","data","then","response","handleResponse","json","handleData","postTripSuccess","catch","err","errorParams","handleError","handleUnauthorized","finally","formData","type","payload","responseData","error"],"mappings":";AAAA,OAAOA,IAAP,MAAiB,aAAjB;AACA,OAAOC,GAAP,MAAgB,YAAhB,C,CAEA;;AACA,SAASC,SAAT,EAAoBC,UAApB,EAAgCC,mBAAhC,EAAqDC,YAArD,QAAyE,QAAzE;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,SAAM,UAACC,QAAD,EAAWC,QAAX,EAAwB;AACpD;AADoD,oBAEKA,QAAQ,EAFb;AAAA,QAEpCC,IAFoC,aAE5CC,IAF4C,CAEpCD,IAFoC;AAAA,QAEVE,QAFU,aAE5BC,MAF4B,CAElBC,IAFkB,CAEVF,QAFU;;AAIpD,QAAMG,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE,8BADa;AAEnBC,MAAAA,OAAO,EAAE;AAFU,KAArB;AAKA,QAAMC,KAAK,GAAGT,QAAQ,EAAtB;AACA,QAAMU,YAAY,GAAGlB,GAAG,CAACiB,KAAD,EAAQ,eAAR,CAAxB;AACA,QAAME,qBAAqB,GAAGnB,GAAG,CAACiB,KAAD,EAAQ,wBAAR,CAAH,IAAwC,EAAtE;AACA,QAAMG,IAAI,GAAGF,YAAY,CAACG,OAAb,mCAA4BH,YAA5B,GAA6CC,qBAA7C,IAAuED,YAApF;AACA,QAAMI,MAAM,GAAGF,IAAI,CAACE,MAAL,IAAe,EAA9B;AAEAf,IAAAA,QAAQ,CAACgB,eAAe,CAACH,IAAD,CAAhB,CAAR;AACAb,IAAAA,QAAQ,CAACN,SAAS,CAAC,UAAD,CAAV,CAAR;;AAEA,QAAI,CAACmB,IAAD,IAAS,CAACA,IAAI,CAACI,KAAf,IAAwB,CAACnB,KAAK,CAACoB,OAAN,CAAcC,YAAd,CAA2BN,IAAI,CAACE,MAAhC,EAAwC,IAAxC,CAA7B,EAA4E;AAC1Ef,MAAAA,QAAQ,CAACoB,eAAe,CAACb,YAAD,CAAhB,CAAR;AACAP,MAAAA,QAAQ,CAACJ,mBAAmB,CAAC,4BAAD,EAA+B,OAA/B,CAApB,CAAR;AACAI,MAAAA,QAAQ,CAACH,YAAY,CAAC,UAAD,CAAb,CAAR;AACA;AACD,KAvBmD,CAyBpD;;;AACA,QAAMwB,IAAI,mCACL7B,IAAI,CAACqB,IAAD,EAAO,CAAC,QAAD,CAAP,CADC;AAERS,MAAAA,KAAK,EAAEP,MAAM,CAACQ,GAAP,CAAW,UAACD,KAAD,EAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,eAAOA,KAAK,CAACE,mBAAN,GAA4BhC,IAAI,CAAC8B,KAAD,EAAQ,CAAC,qBAAD,CAAR,CAAhC,GAAmE9B,IAAI,CAAC8B,KAAD,EAAQ,CAAC,IAAD,CAAR,CAA9E;AACD,OARM;AAFC,MAAV;;AAaA,WAAOxB,KAAK,CAAC2B,GAAN,CACJC,IADI,CACC;AACJC,MAAAA,KAAK,EAAEzB,IAAI,CAAC0B,WADR;AAEJxB,MAAAA,QAAQ,EAAEA,QAAQ,CAACyB,IAFf;AAGJC,MAAAA,IAAI,EAAE,UAHF;AAIJC,MAAAA,IAAI,EAAEV;AAJF,KADD,EAOJW,IAPI,CAOC,UAACC,QAAD;AAAA,aAAcnC,KAAK,CAAC2B,GAAN,CAAUS,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAPD,EAQJD,IARI,CAQC,UAACG,IAAD;AAAA,aAAUrC,KAAK,CAAC2B,GAAN,CAAUW,UAAV,CAAqBD,IAArB,CAAV;AAAA,KARD,EASJH,IATI,CASC,UAACD,IAAD,EAAU;AACd/B,MAAAA,QAAQ,CAACqC,eAAe,CAACN,IAAD,CAAhB,CAAR;AACA/B,MAAAA,QAAQ,CAACJ,mBAAmB,CAAC,+BAAD,EAAkC,SAAlC,CAApB,CAAR;AACD,KAZI,EAaJ0C,KAbI,CAaE,UAACC,GAAD,EAAS;AACd,UAAMC,WAAW,mCACZjC,YADY;AAEfE,QAAAA,OAAO,EAAE;AAFM,QAAjB;;AAKAX,MAAAA,KAAK,CAAC2B,GAAN,CAAUgB,WAAV,CAAsBF,GAAtB,EAA2BC,WAA3B;AACA1C,MAAAA,KAAK,CAAC2B,GAAN,CAAUiB,kBAAV,CAA6BH,GAA7B,EAAkCvC,QAAlC,EAA4CL,UAA5C;AACAK,MAAAA,QAAQ,CAACoB,eAAe,CAACmB,GAAD,CAAhB,CAAR;AACAvC,MAAAA,QAAQ,CAACJ,mBAAmB,CAAC,4BAAD,EAA+B,OAA/B,CAApB,CAAR;AACA,aAAO2C,GAAP;AACD,KAxBI,EAyBJI,OAzBI,CAyBI,YAAM;AACb3C,MAAAA,QAAQ,CAACH,YAAY,CAAC,UAAD,CAAb,CAAR;AACD,KA3BI,CAAP;AA4BD,GAnEuB;AAAA,CAAjB;AAqEP,OAAO,IAAMmB,eAAe,GAAG,SAAlBA,eAAkB,CAAC4B,QAAD,EAAc;AAC3C,SAAO;AACLC,IAAAA,IAAI,EAAE,mBADD;AAELC,IAAAA,OAAO,EAAEF;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMP,eAAe,GAAG,SAAlBA,eAAkB,CAACU,YAAD,EAAkB;AAC/C,SAAO;AACLF,IAAAA,IAAI,EAAE,mBADD;AAELC,IAAAA,OAAO,EAAEC;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAM3B,eAAe,GAAG,SAAlBA,eAAkB,CAAC4B,KAAD,EAAW;AACxC,SAAO;AACLH,IAAAA,IAAI,EAAE,mBADD;AAELC,IAAAA,OAAO,EAAEE;AAFJ,GAAP;AAID,CALM","sourcesContent":["import omit from 'lodash/omit';\r\nimport get from 'lodash/get';\r\n\r\n// app\r\nimport { addLoader, authLogout, enqueueNotification, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const postTrip = () => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/trip.actions.postTrip',\r\n    message: 'Data missing for POST request',\r\n  };\r\n\r\n  const state = getState();\r\n  const tripSelected = get(state, 'trip.selected');\r\n  const tripEditingInProgress = get(state, 'trip.editingInProgress') || {};\r\n  const trip = tripSelected.editing ? { ...tripSelected, ...tripEditingInProgress } : tripSelected;\r\n  const visits = trip.visits || [];\r\n\r\n  dispatch(postTripRequest(trip));\r\n  dispatch(addLoader('postTrip'));\r\n\r\n  if (!trip || !trip.title || !utils.generic.isValidArray(trip.visits, true)) {\r\n    dispatch(postTripFailure(defaultError));\r\n    dispatch(enqueueNotification('notification.saveTrip.fail', 'error'));\r\n    dispatch(removeLoader('postTrip'));\r\n    return;\r\n  }\r\n\r\n  // get the data for POST\r\n  const body = {\r\n    ...omit(trip, ['visits']),\r\n    visit: visits.map((visit) => {\r\n      // if the visit is an existing visit (lead with a saved trip/visit already existing):\r\n      //   - keep the (visit) ID\r\n      //   - remove the isExistingLeadVisit property\r\n      //\r\n      // if the visit is new:\r\n      //   - remove the (lead) ID (not to be confused with a real visit ID)\r\n      return visit.isExistingLeadVisit ? omit(visit, ['isExistingLeadVisit']) : omit(visit, ['id']);\r\n    }),\r\n  };\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.edge,\r\n      path: 'api/trip',\r\n      data: body,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleData(json))\r\n    .then((data) => {\r\n      dispatch(postTripSuccess(data));\r\n      dispatch(enqueueNotification('notification.saveTrip.success', 'success'));\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        ...defaultError,\r\n        message: 'API post error (trip.postTrip)',\r\n      };\r\n\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(postTripFailure(err));\r\n      dispatch(enqueueNotification('notification.saveTrip.fail', 'error'));\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('postTrip'));\r\n    });\r\n};\r\n\r\nexport const postTripRequest = (formData) => {\r\n  return {\r\n    type: 'TRIP_POST_REQUEST',\r\n    payload: formData,\r\n  };\r\n};\r\n\r\nexport const postTripSuccess = (responseData) => {\r\n  return {\r\n    type: 'TRIP_POST_SUCCESS',\r\n    payload: responseData,\r\n  };\r\n};\r\n\r\nexport const postTripFailure = (error) => {\r\n  return {\r\n    type: 'TRIP_POST_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}