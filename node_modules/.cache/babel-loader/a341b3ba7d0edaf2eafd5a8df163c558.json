{"ast":null,"code":"var _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\forms\\\\BulkUpdatePolicy\\\\BulkUpdatePolicy.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as Yup from 'yup'; // app\n\nimport { BulkUpdatePolicyView } from './BulkUpdatePolicy.view';\nimport { enqueueNotification, hideModal, postPlacementBulkPolicy, selectRefDataStatusesMarketQuote, selectPlacementBulkType, selectPlacementBulkItems } from 'stores';\nimport * as utils from 'utils';\nimport * as constants from 'consts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nBulkUpdatePolicy.propTypes = {\n  handleClose: PropTypes.func.isRequired\n};\nexport default function BulkUpdatePolicy(_ref) {\n  _s();\n\n  var handleClose = _ref.handleClose;\n  var dispatch = useDispatch();\n  var placementBulkType = useSelector(selectPlacementBulkType);\n  var placementBulkItems = useSelector(selectPlacementBulkItems);\n  var refDataStatusesMarketQuote = useSelector(selectRefDataStatusesMarketQuote);\n  var marketSpecificFields = ['status', 'premium'];\n  useEffect(function () {\n    if (!refDataStatusesMarketQuote || !refDataStatusesMarketQuote.length > 0) {\n      dispatch(hideModal());\n      dispatch(enqueueNotification('notification.generic.reload', 'error'));\n    }\n  }, [] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  var fields = [{\n    name: 'status',\n    type: 'select',\n    value: '',\n    options: refDataStatusesMarketQuote.filter(function (status) {\n      return status.code !== constants.STATUS_MARKET_QUOTED;\n    }),\n    optionKey: 'id',\n    optionLabel: 'code',\n    validation: Yup.string(),\n    label: utils.string.t('placement.form.status.label'),\n    muiComponentProps: {\n      'data-testid': 'bulk-update-policy-status'\n    }\n  }, {\n    name: 'premium',\n    type: 'number',\n    value: '',\n    validation: Yup.number().nullable().min(0).currency().transform(function (value, originalvalue) {\n      return this.isType(value) ? Number.isNaN(value) ? null : value : null;\n    }),\n    label: utils.string.t('placement.form.premium.label')\n  }, {\n    name: 'delete',\n    type: 'checkbox',\n    value: false,\n    label: utils.string.t('placement.form.delete.label', {\n      count: placementBulkItems.length,\n      type: \"placement.generic.\".concat(placementBulkType === 'policy' ? 'policy' : 'market')\n    })\n  }, {\n    name: 'deleteConfirm',\n    type: 'text',\n    value: '',\n    validation: Yup.string().test('deleteConfirm', utils.string.t('form.deleteConfirm.required'), function () {\n      var parent = this.options.parent;\n      return parent.delete ? parent.deleteConfirm === 'Delete' : true;\n    }),\n    label: utils.string.t('form.deleteConfirm.label'),\n    hint: utils.string.t('form.deleteConfirm.hint'),\n    muiComponentProps: {\n      autoComplete: 'off'\n    }\n  }]; // remove fields specific to market if bulk type is layer\n\n  var fieldsFiltered = fields.filter(function (field) {\n    return !(placementBulkType === 'policy' && marketSpecificFields.includes(field.name));\n  });\n  var actions = [{\n    name: 'cancel',\n    label: utils.string.t('app.cancel'),\n    handler: handleClose\n  }, {\n    name: 'submit',\n    label: utils.string.t('app.submit'),\n    handler: function handler(values) {\n      return dispatch(postPlacementBulkPolicy(values));\n    }\n  }];\n  return /*#__PURE__*/_jsxDEV(BulkUpdatePolicyView, {\n    fields: fieldsFiltered,\n    actions: actions,\n    isBulkPolicy: placementBulkType === 'policy',\n    isBulkMarket: placementBulkType === 'policyMarket'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n}\n\n_s(BulkUpdatePolicy, \"+nf+bENN9zez1GzFDuvNyYZBe/8=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = BulkUpdatePolicy;\n\nvar _c;\n\n$RefreshReg$(_c, \"BulkUpdatePolicy\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/forms/BulkUpdatePolicy/BulkUpdatePolicy.js"],"names":["React","useEffect","PropTypes","useDispatch","useSelector","Yup","BulkUpdatePolicyView","enqueueNotification","hideModal","postPlacementBulkPolicy","selectRefDataStatusesMarketQuote","selectPlacementBulkType","selectPlacementBulkItems","utils","constants","BulkUpdatePolicy","propTypes","handleClose","func","isRequired","dispatch","placementBulkType","placementBulkItems","refDataStatusesMarketQuote","marketSpecificFields","length","fields","name","type","value","options","filter","status","code","STATUS_MARKET_QUOTED","optionKey","optionLabel","validation","string","label","t","muiComponentProps","number","nullable","min","currency","transform","originalvalue","isType","Number","isNaN","count","test","parent","delete","deleteConfirm","hint","autoComplete","fieldsFiltered","field","includes","actions","handler","values"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport * as Yup from 'yup';\r\n\r\n// app\r\nimport { BulkUpdatePolicyView } from './BulkUpdatePolicy.view';\r\nimport {\r\n  enqueueNotification,\r\n  hideModal,\r\n  postPlacementBulkPolicy,\r\n  selectRefDataStatusesMarketQuote,\r\n  selectPlacementBulkType,\r\n  selectPlacementBulkItems,\r\n} from 'stores';\r\nimport * as utils from 'utils';\r\nimport * as constants from 'consts';\r\n\r\nBulkUpdatePolicy.propTypes = {\r\n  handleClose: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default function BulkUpdatePolicy({ handleClose }) {\r\n  const dispatch = useDispatch();\r\n  const placementBulkType = useSelector(selectPlacementBulkType);\r\n  const placementBulkItems = useSelector(selectPlacementBulkItems);\r\n  const refDataStatusesMarketQuote = useSelector(selectRefDataStatusesMarketQuote);\r\n  const marketSpecificFields = ['status', 'premium'];\r\n\r\n  useEffect(\r\n    () => {\r\n      if (!refDataStatusesMarketQuote || !refDataStatusesMarketQuote.length > 0) {\r\n        dispatch(hideModal());\r\n        dispatch(enqueueNotification('notification.generic.reload', 'error'));\r\n      }\r\n    },\r\n    [] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  const fields = [\r\n    {\r\n      name: 'status',\r\n      type: 'select',\r\n      value: '',\r\n      options: refDataStatusesMarketQuote.filter((status) => status.code !== constants.STATUS_MARKET_QUOTED),\r\n      optionKey: 'id',\r\n      optionLabel: 'code',\r\n      validation: Yup.string(),\r\n      label: utils.string.t('placement.form.status.label'),\r\n      muiComponentProps: {\r\n        'data-testid': 'bulk-update-policy-status',\r\n      },\r\n    },\r\n    {\r\n      name: 'premium',\r\n      type: 'number',\r\n      value: '',\r\n      validation: Yup.number()\r\n        .nullable()\r\n        .min(0)\r\n        .currency()\r\n        .transform(function (value, originalvalue) {\r\n          return this.isType(value) ? (Number.isNaN(value) ? null : value) : null;\r\n        }),\r\n      label: utils.string.t('placement.form.premium.label'),\r\n    },\r\n    {\r\n      name: 'delete',\r\n      type: 'checkbox',\r\n      value: false,\r\n      label: utils.string.t('placement.form.delete.label', {\r\n        count: placementBulkItems.length,\r\n        type: `placement.generic.${placementBulkType === 'policy' ? 'policy' : 'market'}`,\r\n      }),\r\n    },\r\n    {\r\n      name: 'deleteConfirm',\r\n      type: 'text',\r\n      value: '',\r\n      validation: Yup.string().test('deleteConfirm', utils.string.t('form.deleteConfirm.required'), function () {\r\n        const parent = this.options.parent;\r\n        return parent.delete ? parent.deleteConfirm === 'Delete' : true;\r\n      }),\r\n      label: utils.string.t('form.deleteConfirm.label'),\r\n      hint: utils.string.t('form.deleteConfirm.hint'),\r\n      muiComponentProps: {\r\n        autoComplete: 'off',\r\n      },\r\n    },\r\n  ];\r\n\r\n  // remove fields specific to market if bulk type is layer\r\n  const fieldsFiltered = fields.filter((field) => {\r\n    return !(placementBulkType === 'policy' && marketSpecificFields.includes(field.name));\r\n  });\r\n\r\n  const actions = [\r\n    {\r\n      name: 'cancel',\r\n      label: utils.string.t('app.cancel'),\r\n      handler: handleClose,\r\n    },\r\n    {\r\n      name: 'submit',\r\n      label: utils.string.t('app.submit'),\r\n      handler: (values) => dispatch(postPlacementBulkPolicy(values)),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <BulkUpdatePolicyView\r\n      fields={fieldsFiltered}\r\n      actions={actions}\r\n      isBulkPolicy={placementBulkType === 'policy'}\r\n      isBulkMarket={placementBulkType === 'policyMarket'}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}