{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { addLoader, authLogout, removeLoader } from 'stores';\nimport * as utils from 'utils';\nexport var getRfiHistory = function getRfiHistory(bpmTaskID) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/claims.actions.getRfiHistory'\n    };\n    dispatch(getRfiHistoryRequest(bpmTaskID));\n    dispatch(addLoader('getRfiHistory'));\n\n    if (!bpmTaskID) {\n      dispatch(getRfiHistoryFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Missing requests params'\n      })));\n      dispatch(removeLoader('getRfiHistory'));\n      return;\n    }\n\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.bpmService,\n      path: \"api/workflow/process/\".concat(bpmTaskID, \"/rfi-history\")\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(getRfiHistorySuccess(data.data));\n      return data;\n    }).catch(function (error) {\n      dispatch(getRfiHistoryFailure(error, defaultError));\n      utils.api.handleUnauthorized(error, dispatch, authLogout);\n      return error;\n    }).finally(function () {\n      dispatch(removeLoader('getRfiHistory'));\n    });\n  };\n};\nexport var getRfiHistoryRequest = function getRfiHistoryRequest(bpmTaskID) {\n  return {\n    type: 'CLAIMS_GET_RFI_HISTORY_REQUEST',\n    payload: {\n      bpmTaskID: bpmTaskID\n    }\n  };\n};\nexport var getRfiHistorySuccess = function getRfiHistorySuccess(data) {\n  return {\n    type: 'CLAIMS_GET_RFI_HISTORY_SUCCESS',\n    payload: data\n  };\n};\nexport var getRfiHistoryFailure = function getRfiHistoryFailure(error) {\n  return {\n    type: 'CLAIMS_GET_RFI_HISTORY_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.getRfiHistory.js"],"names":["addLoader","authLogout","removeLoader","utils","getRfiHistory","bpmTaskID","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","getRfiHistoryRequest","getRfiHistoryFailure","message","api","get","token","accessToken","bpmService","path","then","response","handleResponse","json","handleNewData","data","getRfiHistorySuccess","catch","error","handleUnauthorized","finally","type","payload"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,UAApB,EAAgCC,YAAhC,QAAoD,QAApD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,SAAD;AAAA,SAAe,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAClE;AADkE,oBAEPA,QAAQ,EAFD;AAAA,QAElDC,IAFkD,aAE1DC,IAF0D,CAElDD,IAFkD;AAAA,QAExBE,QAFwB,aAE1CC,MAF0C,CAEhCC,IAFgC,CAExBF,QAFwB;;AAIlE,QAAMG,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE;AADa,KAArB;AAIAR,IAAAA,QAAQ,CAACS,oBAAoB,CAACV,SAAD,CAArB,CAAR;AACAC,IAAAA,QAAQ,CAACN,SAAS,CAAC,eAAD,CAAV,CAAR;;AAEA,QAAI,CAACK,SAAL,EAAgB;AACdC,MAAAA,QAAQ,CAACU,oBAAoB,iCAAMH,YAAN;AAAoBI,QAAAA,OAAO,EAAE;AAA7B,SAArB,CAAR;AACAX,MAAAA,QAAQ,CAACJ,YAAY,CAAC,eAAD,CAAb,CAAR;AACA;AACD;;AAED,WAAOC,KAAK,CAACe,GAAN,CACJC,GADI,CACA;AACHC,MAAAA,KAAK,EAAEZ,IAAI,CAACa,WADT;AAEHX,MAAAA,QAAQ,EAAEA,QAAQ,CAACY,UAFhB;AAGHC,MAAAA,IAAI,iCAA0BlB,SAA1B;AAHD,KADA,EAMJmB,IANI,CAMC,UAACC,QAAD;AAAA,aAActB,KAAK,CAACe,GAAN,CAAUQ,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAND,EAOJD,IAPI,CAOC,UAACG,IAAD;AAAA,aAAUxB,KAAK,CAACe,GAAN,CAAUU,aAAV,CAAwBD,IAAxB,CAAV;AAAA,KAPD,EAQJH,IARI,CAQC,UAACK,IAAD,EAAU;AACdvB,MAAAA,QAAQ,CAACwB,oBAAoB,CAACD,IAAI,CAACA,IAAN,CAArB,CAAR;AACA,aAAOA,IAAP;AACD,KAXI,EAYJE,KAZI,CAYE,UAACC,KAAD,EAAW;AAChB1B,MAAAA,QAAQ,CAACU,oBAAoB,CAACgB,KAAD,EAAQnB,YAAR,CAArB,CAAR;AACAV,MAAAA,KAAK,CAACe,GAAN,CAAUe,kBAAV,CAA6BD,KAA7B,EAAoC1B,QAApC,EAA8CL,UAA9C;AACA,aAAO+B,KAAP;AACD,KAhBI,EAiBJE,OAjBI,CAiBI,YAAM;AACb5B,MAAAA,QAAQ,CAACJ,YAAY,CAAC,eAAD,CAAb,CAAR;AACD,KAnBI,CAAP;AAoBD,GArC4B;AAAA,CAAtB;AAuCP,OAAO,IAAMa,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACV,SAAD,EAAe;AACjD,SAAO;AACL8B,IAAAA,IAAI,EAAE,gCADD;AAELC,IAAAA,OAAO,EAAE;AAAE/B,MAAAA,SAAS,EAATA;AAAF;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMyB,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACD,IAAD,EAAU;AAC5C,SAAO;AACLM,IAAAA,IAAI,EAAE,gCADD;AAELC,IAAAA,OAAO,EAAEP;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMb,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACgB,KAAD,EAAW;AAC7C,SAAO;AACLG,IAAAA,IAAI,EAAE,gCADD;AAELC,IAAAA,OAAO,EAAEJ;AAFJ,GAAP;AAID,CALM","sourcesContent":["import { addLoader, authLogout, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const getRfiHistory = (bpmTaskID) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } } } = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.getRfiHistory',\r\n  };\r\n\r\n  dispatch(getRfiHistoryRequest(bpmTaskID));\r\n  dispatch(addLoader('getRfiHistory'));\r\n\r\n  if (!bpmTaskID) {\r\n    dispatch(getRfiHistoryFailure({ ...defaultError, message: 'Missing requests params' }));\r\n    dispatch(removeLoader('getRfiHistory'));\r\n    return;\r\n  }\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.bpmService,\r\n      path: `api/workflow/process/${bpmTaskID}/rfi-history`,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(getRfiHistorySuccess(data.data));\r\n      return data;\r\n    })\r\n    .catch((error) => {\r\n      dispatch(getRfiHistoryFailure(error, defaultError));\r\n      utils.api.handleUnauthorized(error, dispatch, authLogout);\r\n      return error;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('getRfiHistory'));\r\n    });\r\n};\r\n\r\nexport const getRfiHistoryRequest = (bpmTaskID) => {\r\n  return {\r\n    type: 'CLAIMS_GET_RFI_HISTORY_REQUEST',\r\n    payload: { bpmTaskID },\r\n  };\r\n};\r\n\r\nexport const getRfiHistorySuccess = (data) => {\r\n  return {\r\n    type: 'CLAIMS_GET_RFI_HISTORY_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const getRfiHistoryFailure = (error) => {\r\n  return {\r\n    type: 'CLAIMS_GET_RFI_HISTORY_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}