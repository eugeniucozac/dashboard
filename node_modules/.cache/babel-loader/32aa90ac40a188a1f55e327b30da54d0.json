{"ast":null,"code":"import \"core-js/modules/es.array.sort\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ProcessingInstructionsList\\\\ProcessingInstructionsList.view.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get'; //app\n\nimport styles from './ProcessingInstructionsList.styles';\nimport { AccessControl, Pagination, TableHead, TableCell, Warning, TableFilters, TableToolbar, TableActions, Status, Translate, Button, Skeleton } from 'components';\nimport { usePagination, useSort } from 'hooks';\nimport * as constants from 'consts';\nimport * as utils from 'utils';\nimport config from 'config'; // mui\n\nimport { Box, Grid, Table, TableBody, TableRow, Hidden, makeStyles, TableContainer, Typography, Divider } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nProcessingInstructionsListView.propTypes = {\n  rows: PropTypes.array.isRequired,\n  processTypes: PropTypes.arrayOf(PropTypes.shape({\n    processTypeID: PropTypes.number.isRequired,\n    processTypeDetails: PropTypes.string.isRequired\n  })).isRequired,\n  refDataXbInstances: PropTypes.arrayOf(PropTypes.shape({\n    sourceID: PropTypes.number.isRequired,\n    sourceName: PropTypes.string.isRequired\n  })).isRequired,\n  departmentList: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired\n  })).isRequired,\n  sort: PropTypes.shape({\n    by: PropTypes.string.isRequired,\n    direction: PropTypes.oneOf(['asc', 'desc']).isRequired,\n    type: PropTypes.oneOf(['lexical', 'date', 'number']).isRequired\n  }).isRequired,\n  pagination: PropTypes.shape({\n    page: PropTypes.number.isRequired,\n    rowsTotal: PropTypes.number.isRequired,\n    rowsPerPage: PropTypes.number.isRequired\n  }).isRequired,\n  columnsArray: PropTypes.array.isRequired,\n  columnProps: PropTypes.func.isRequired,\n  filtersArray: PropTypes.array.isRequired,\n  isTableHidden: PropTypes.bool.isRequired,\n  isPiGridDataLoading: PropTypes.bool.isRequired,\n  isPiHasNoGridData: PropTypes.bool.isRequired,\n  handlers: PropTypes.shape({\n    handleSort: PropTypes.func.isRequired,\n    handleChangePage: PropTypes.func.isRequired,\n    handleChangeRowsPerPage: PropTypes.func.isRequired,\n    handleProcessSelection: PropTypes.func.isRequired,\n    searchSubmit: PropTypes.func.isRequired,\n    toggleColumn: PropTypes.func.isRequired\n  }).isRequired\n};\nexport function ProcessingInstructionsListView(_ref) {\n  _s();\n\n  var _this = this;\n\n  var rows = _ref.rows,\n      processTypes = _ref.processTypes,\n      refDataXbInstances = _ref.refDataXbInstances,\n      departmentList = _ref.departmentList,\n      sortObj = _ref.sort,\n      pagination = _ref.pagination,\n      columnsArray = _ref.columnsArray,\n      columnProps = _ref.columnProps,\n      filtersArray = _ref.filtersArray,\n      isTableHidden = _ref.isTableHidden,\n      isPiGridDataLoading = _ref.isPiGridDataLoading,\n      isPiHasNoGridData = _ref.isPiHasNoGridData,\n      handlers = _ref.handlers;\n  var classes = makeStyles(styles, {\n    name: 'ProcessingInstructionsList'\n  })();\n  var paginationObj = usePagination(rows, pagination, handlers.handleChangePage, handlers.handleChangeRowsPerPage);\n\n  var _useSort = useSort(columnsArray, sortObj, handlers.handleSort),\n      cols = _useSort.cols,\n      sort = _useSort.sort;\n\n  var getStatus = function getStatus(statusId) {\n    if (utils.processingInstructions.status.isDraft(statusId)) {\n      return {\n        type: 'info',\n        id: \"processingInstructions.status.\".concat(constants.PI_STATUS_DRAFT)\n      };\n    } else if (utils.processingInstructions.status.isRejectedDraft(statusId)) {\n      return {\n        type: 'error',\n        id: \"processingInstructions.status.\".concat(constants.PI_STATUS_REJECTED_DRAFT)\n      };\n    } else if (utils.processingInstructions.status.isSubmittedAuthorisedSignatory(statusId)) {\n      return {\n        type: 'alert',\n        id: \"processingInstructions.status.\".concat(constants.PI_STATUS_SUBMITTED_AUTHORISED_SIGNATORY)\n      };\n    } else if (utils.processingInstructions.status.isSubmittedProcessing(statusId)) {\n      return {\n        type: 'success',\n        id: \"processingInstructions.status.\".concat(constants.PI_STATUS_SUBMITTED_PROCESSING)\n      };\n    } else if (utils.processingInstructions.status.isReopened(statusId)) {\n      return {\n        type: 'reopen',\n        id: \"processingInstructions.status.\".concat(constants.PI_STATUS_DRAFT_POST_SUBMISSION)\n      };\n    } else {\n      return {\n        type: '',\n        name: 'status.other'\n      };\n    }\n  };\n\n  var getProcessTypeName = function getProcessTypeName(processTypeId) {\n    var _processTypes$find;\n\n    return (_processTypes$find = processTypes.find(function (processType) {\n      var _processType$processT;\n\n      return (processType === null || processType === void 0 ? void 0 : (_processType$processT = processType.processTypeID) === null || _processType$processT === void 0 ? void 0 : _processType$processT.toString()) === (processTypeId === null || processTypeId === void 0 ? void 0 : processTypeId.toString());\n    })) === null || _processTypes$find === void 0 ? void 0 : _processTypes$find.processTypeDetails;\n  };\n\n  var getXbInstanceName = function getXbInstanceName(xbInstanceId) {\n    var _refDataXbInstances$f;\n\n    return (_refDataXbInstances$f = refDataXbInstances.find(function (xbInstance) {\n      var _xbInstance$sourceID;\n\n      return (xbInstance === null || xbInstance === void 0 ? void 0 : (_xbInstance$sourceID = xbInstance.sourceID) === null || _xbInstance$sourceID === void 0 ? void 0 : _xbInstance$sourceID.toString()) === (xbInstanceId === null || xbInstanceId === void 0 ? void 0 : xbInstanceId.toString());\n    })) === null || _refDataXbInstances$f === void 0 ? void 0 : _refDataXbInstances$f.sourceName;\n  };\n\n  var getDepartmentName = function getDepartmentName(departmentId) {\n    var _departmentList$find;\n\n    return (_departmentList$find = departmentList.find(function (dept) {\n      var _dept$id;\n\n      return (dept === null || dept === void 0 ? void 0 : (_dept$id = dept.id) === null || _dept$id === void 0 ? void 0 : _dept$id.toString()) === (departmentId === null || departmentId === void 0 ? void 0 : departmentId.toString());\n    })) === null || _departmentList$find === void 0 ? void 0 : _departmentList$find.deptName;\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    \"data-testid\": \"processing-instructions-search-table\",\n    children: [/*#__PURE__*/_jsxDEV(TableToolbar, {\n      nestedClasses: {\n        root: classes.toolbar\n      },\n      children: [/*#__PURE__*/_jsxDEV(AccessControl, {\n        feature: \"processingInstructions.processingInstructions\",\n        permissions: \"create\",\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          display: \"flex\",\n          flexDirection: \"column\",\n          width: \"100%\",\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              className: classes.subTitle,\n              children: utils.string.t('processingInstructions.chooseProcess')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            pt: 1,\n            pb: 3,\n            children: /*#__PURE__*/_jsxDEV(TableActions, {\n              nestedClasses: {\n                root: classes.actions\n              },\n              children: utils.generic.isValidArray(processTypes, true) && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.chips,\n                children: processTypes.filter(function (type) {\n                  return (type === null || type === void 0 ? void 0 : type.primary) && (type === null || type === void 0 ? void 0 : type.businessProcessID) === constants.BUSINESS_PROCESS_PREMIUM_PROCESSING_ID;\n                }).map(function (type) {\n                  return /*#__PURE__*/_jsxDEV(Button, {\n                    icon: AddIcon,\n                    text: utils.string.t(\"processingInstructions.type.\".concat(type.processTypeID)),\n                    color: 'primary',\n                    size: \"small\",\n                    onClick: function onClick() {\n                      return handlers.handleProcessSelection(type);\n                    }\n                  }, type.processTypeID, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 140,\n                    columnNumber: 25\n                  }, _this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Hidden, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          className: classes.tableTitle,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            className: classes.subTitle,\n            children: utils.string.t('processingInstructions.listOfPisCreated')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableFilters, {\n        searchPlaceholder: utils.string.t('processingInstructions.searchRiskReferences'),\n        columns: true,\n        columnsArray: cols,\n        filters: true,\n        filtersArray: filtersArray,\n        handlers: {\n          onSearch: handlers.searchSubmit,\n          onFilter: handlers.searchSubmit,\n          onResetFilter: handlers.resetSubmit,\n          onToggleColumn: handlers.toggleColumn\n        },\n        nestedClasses: {\n          root: classes.filters\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Hidden, {\n      only: ['sm', 'md', 'lg'],\n      xsUp: true,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        py: 1,\n        className: classes.tableTitle,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          className: classes.subTitle,\n          children: utils.string.t('processingInstructions.listOfPisCreated')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AccessControl, {\n      feature: \"processingInstructions.processingInstructions\",\n      permissions: \"read\",\n      children: !isTableHidden && /*#__PURE__*/_jsxDEV(TableContainer, {\n        children: [/*#__PURE__*/_jsxDEV(Table, {\n          size: \"small\",\n          \"data-testid\": \"processing-instructions-grid\",\n          children: [/*#__PURE__*/_jsxDEV(TableHead, {\n            columns: cols,\n            sorting: sort,\n            nestedClasses: {\n              tableHead: classes.tableHead\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: [(rows === null || rows === void 0 ? void 0 : rows.length) > 0 && !isPiGridDataLoading && rows.map(function (data) {\n              var status = getStatus(data.statusId);\n              var processTypeName = getProcessTypeName(data.processTypeId);\n              var xbInstanceName = getXbInstanceName(data.sourceID);\n              var departmentName = getDepartmentName(data.departmentXbInstanceId);\n              return /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, columnProps('instructionId')), {}, {\n                  children: /*#__PURE__*/_jsxDEV(Link, {\n                    to: \"\".concat(config.routes.processingInstructions.steps, \"/\").concat(data.instructionId),\n                    className: classes.link,\n                    children: \"PI\".concat(data.instructionId)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 201,\n                    columnNumber: 27\n                  }, _this)\n                }), void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 200,\n                  columnNumber: 25\n                }, _this), /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, columnProps('status')), {}, {\n                  children: /*#__PURE__*/_jsxDEV(Status, {\n                    size: \"sm\",\n                    text: /*#__PURE__*/_jsxDEV(Translate, {\n                      label: status.id\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 206,\n                      columnNumber: 51\n                    }, _this),\n                    status: status.type\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 206,\n                    columnNumber: 27\n                  }, _this)\n                }), void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 205,\n                  columnNumber: 25\n                }, _this), /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, columnProps('insuredName')), {}, {\n                  children: data.insuredName\n                }), void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 208,\n                  columnNumber: 25\n                }, _this), /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, columnProps('inceptionDate')), {}, {\n                  children: data.inceptionDate\n                }), void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 209,\n                  columnNumber: 25\n                }, _this), /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, columnProps('createdByDept')), {}, {\n                  children: departmentName\n                }), void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 210,\n                  columnNumber: 25\n                }, _this), /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, columnProps('gxbInstance')), {}, {\n                  children: xbInstanceName\n                }), void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 211,\n                  columnNumber: 25\n                }, _this), /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, columnProps('processType')), {}, {\n                  children: processTypeName\n                }), void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 212,\n                  columnNumber: 25\n                }, _this), /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, columnProps('frontEndContact')), {}, {\n                  children: data.frontEndContact\n                }), void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 213,\n                  columnNumber: 25\n                }, _this), /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, columnProps('createdDate')), {}, {\n                  children: data.createdDate\n                }), void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 214,\n                  columnNumber: 25\n                }, _this), /*#__PURE__*/_jsxDEV(AccessControl, {\n                  feature: \"processingInstructions.processingInstructions\",\n                  permissions: ['create', 'update'],\n                  children: /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, columnProps('update')), {}, {\n                    compact: true,\n                    narrow: true,\n                    center: true,\n                    children: utils.processingInstructions.status.isSubmittedProcessing(data.statusId) && /*#__PURE__*/_jsxDEV(Button, {\n                      icon: EditIcon,\n                      onClick: function onClick() {\n                        handlers.editPopup(data.instructionId);\n                      },\n                      size: \"xsmall\",\n                      tooltip: {\n                        title: utils.string.t('app.update')\n                      },\n                      variant: \"text\",\n                      color: \"default\",\n                      light: true\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 218,\n                      columnNumber: 31\n                    }, _this)\n                  }), void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 216,\n                    columnNumber: 27\n                  }, _this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 215,\n                  columnNumber: 25\n                }, _this)]\n              }, data.instructionId, true, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 23\n              }, _this);\n            }), isPiGridDataLoading && !isPiHasNoGridData && /*#__PURE__*/_jsxDEV(TableRow, {\n              children: /*#__PURE__*/_jsxDEV(TableCell, {\n                colSpan: cols.length,\n                children: /*#__PURE__*/_jsxDEV(Skeleton, {\n                  height: 40,\n                  animation: \"wave\",\n                  displayNumber: 10\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 238,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 13\n        }, this), (rows === null || rows === void 0 ? void 0 : rows.length) === 0 && isPiHasNoGridData && /*#__PURE__*/_jsxDEV(Box, {\n          p: 5,\n          children: /*#__PURE__*/_jsxDEV(Warning, {\n            text: utils.string.t('processingInstructions.gridDataEmptyWarning'),\n            type: \"info\",\n            align: \"center\",\n            size: \"large\",\n            icon: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Pagination, {\n              page: get(paginationObj, 'obj.page'),\n              count: get(paginationObj, 'obj.rowsTotal'),\n              rowsPerPage: get(paginationObj, 'obj.rowsPerPage'),\n              onChangePage: get(paginationObj, 'handlers.handleChangePage'),\n              onChangeRowsPerPage: get(paginationObj, 'handlers.handleChangeRowsPerPage')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ProcessingInstructionsListView, \"7Gxpp9DSvqaHuznY7Yj+jBG5ol8=\", false, function () {\n  return [usePagination, useSort];\n});\n\n_c = ProcessingInstructionsListView;\nProcessingInstructionsListView.displayName = \"ProcessingInstructionsListView\";\nProcessingInstructionsListView.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"ProcessingInstructionsListView\",\n  \"props\": {\n    \"rows\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"processTypes\": {\n      \"type\": {\n        \"name\": \"arrayOf\",\n        \"value\": {\n          \"name\": \"shape\",\n          \"value\": {\n            \"processTypeID\": {\n              \"name\": \"number\",\n              \"required\": true\n            },\n            \"processTypeDetails\": {\n              \"name\": \"string\",\n              \"required\": true\n            }\n          }\n        }\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"refDataXbInstances\": {\n      \"type\": {\n        \"name\": \"arrayOf\",\n        \"value\": {\n          \"name\": \"shape\",\n          \"value\": {\n            \"sourceID\": {\n              \"name\": \"number\",\n              \"required\": true\n            },\n            \"sourceName\": {\n              \"name\": \"string\",\n              \"required\": true\n            }\n          }\n        }\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"departmentList\": {\n      \"type\": {\n        \"name\": \"arrayOf\",\n        \"value\": {\n          \"name\": \"shape\",\n          \"value\": {\n            \"id\": {\n              \"name\": \"string\",\n              \"required\": true\n            },\n            \"name\": {\n              \"name\": \"string\",\n              \"required\": true\n            }\n          }\n        }\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"sort\": {\n      \"type\": {\n        \"name\": \"shape\",\n        \"value\": {\n          \"by\": {\n            \"name\": \"string\",\n            \"required\": true\n          },\n          \"direction\": {\n            \"name\": \"enum\",\n            \"value\": [{\n              \"value\": \"'asc'\",\n              \"computed\": false\n            }, {\n              \"value\": \"'desc'\",\n              \"computed\": false\n            }],\n            \"required\": true\n          },\n          \"type\": {\n            \"name\": \"enum\",\n            \"value\": [{\n              \"value\": \"'lexical'\",\n              \"computed\": false\n            }, {\n              \"value\": \"'date'\",\n              \"computed\": false\n            }, {\n              \"value\": \"'number'\",\n              \"computed\": false\n            }],\n            \"required\": true\n          }\n        }\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"pagination\": {\n      \"type\": {\n        \"name\": \"shape\",\n        \"value\": {\n          \"page\": {\n            \"name\": \"number\",\n            \"required\": true\n          },\n          \"rowsTotal\": {\n            \"name\": \"number\",\n            \"required\": true\n          },\n          \"rowsPerPage\": {\n            \"name\": \"number\",\n            \"required\": true\n          }\n        }\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"columnsArray\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"columnProps\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"filtersArray\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"isTableHidden\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"isPiGridDataLoading\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"isPiHasNoGridData\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"handlers\": {\n      \"type\": {\n        \"name\": \"shape\",\n        \"value\": {\n          \"handleSort\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"handleChangePage\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"handleChangeRowsPerPage\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"handleProcessSelection\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"searchSubmit\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"toggleColumn\": {\n            \"name\": \"func\",\n            \"required\": true\n          }\n        }\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\modules\\\\ProcessingInstructionsList\\\\ProcessingInstructionsList.view.js\"] = {\n    name: \"ProcessingInstructionsListView\",\n    docgenInfo: ProcessingInstructionsListView.__docgenInfo,\n    path: \"src\\\\modules\\\\ProcessingInstructionsList\\\\ProcessingInstructionsList.view.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ProcessingInstructionsListView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ProcessingInstructionsList/ProcessingInstructionsList.view.js"],"names":["React","Link","PropTypes","get","styles","AccessControl","Pagination","TableHead","TableCell","Warning","TableFilters","TableToolbar","TableActions","Status","Translate","Button","Skeleton","usePagination","useSort","constants","utils","config","Box","Grid","Table","TableBody","TableRow","Hidden","makeStyles","TableContainer","Typography","Divider","AddIcon","EditIcon","ProcessingInstructionsListView","propTypes","rows","array","isRequired","processTypes","arrayOf","shape","processTypeID","number","processTypeDetails","string","refDataXbInstances","sourceID","sourceName","departmentList","id","name","sort","by","direction","oneOf","type","pagination","page","rowsTotal","rowsPerPage","columnsArray","columnProps","func","filtersArray","isTableHidden","bool","isPiGridDataLoading","isPiHasNoGridData","handlers","handleSort","handleChangePage","handleChangeRowsPerPage","handleProcessSelection","searchSubmit","toggleColumn","sortObj","classes","paginationObj","cols","getStatus","statusId","processingInstructions","status","isDraft","PI_STATUS_DRAFT","isRejectedDraft","PI_STATUS_REJECTED_DRAFT","isSubmittedAuthorisedSignatory","PI_STATUS_SUBMITTED_AUTHORISED_SIGNATORY","isSubmittedProcessing","PI_STATUS_SUBMITTED_PROCESSING","isReopened","PI_STATUS_DRAFT_POST_SUBMISSION","getProcessTypeName","processTypeId","find","processType","toString","getXbInstanceName","xbInstanceId","xbInstance","getDepartmentName","departmentId","dept","deptName","root","toolbar","subTitle","t","actions","generic","isValidArray","chips","filter","primary","businessProcessID","BUSINESS_PROCESS_PREMIUM_PROCESSING_ID","map","tableTitle","onSearch","onFilter","onResetFilter","resetSubmit","onToggleColumn","filters","tableHead","length","data","processTypeName","xbInstanceName","departmentName","departmentXbInstanceId","routes","steps","instructionId","link","insuredName","inceptionDate","frontEndContact","createdDate","editPopup","title"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,GAAP,MAAgB,YAAhB,C,CAEA;;AACA,OAAOC,MAAP,MAAmB,qCAAnB;AACA,SACEC,aADF,EAEEC,UAFF,EAGEC,SAHF,EAIEC,SAJF,EAKEC,OALF,EAMEC,YANF,EAOEC,YAPF,EAQEC,YARF,EASEC,MATF,EAUEC,SAVF,EAWEC,MAXF,EAYEC,QAZF,QAaO,YAbP;AAcA,SAASC,aAAT,EAAwBC,OAAxB,QAAuC,OAAvC;AACA,OAAO,KAAKC,SAAZ,MAA2B,QAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,QAAnB,C,CAEA;;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,KAApB,EAA2BC,SAA3B,EAAsCC,QAAtC,EAAgDC,MAAhD,EAAwDC,UAAxD,EAAoEC,cAApE,EAAoFC,UAApF,EAAgGC,OAAhG,QAA+G,mBAA/G;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,QAAP,MAAqB,yBAArB;;AAEAC,8BAA8B,CAACC,SAA/B,GAA2C;AACzCC,EAAAA,IAAI,EAAElC,SAAS,CAACmC,KAAV,CAAgBC,UADmB;AAEzCC,EAAAA,YAAY,EAAErC,SAAS,CAACsC,OAAV,CACZtC,SAAS,CAACuC,KAAV,CAAgB;AACdC,IAAAA,aAAa,EAAExC,SAAS,CAACyC,MAAV,CAAiBL,UADlB;AAEdM,IAAAA,kBAAkB,EAAE1C,SAAS,CAAC2C,MAAV,CAAiBP;AAFvB,GAAhB,CADY,EAKZA,UAPuC;AAQzCQ,EAAAA,kBAAkB,EAAE5C,SAAS,CAACsC,OAAV,CAClBtC,SAAS,CAACuC,KAAV,CAAgB;AACdM,IAAAA,QAAQ,EAAE7C,SAAS,CAACyC,MAAV,CAAiBL,UADb;AAEdU,IAAAA,UAAU,EAAE9C,SAAS,CAAC2C,MAAV,CAAiBP;AAFf,GAAhB,CADkB,EAKlBA,UAbuC;AAczCW,EAAAA,cAAc,EAAE/C,SAAS,CAACsC,OAAV,CACdtC,SAAS,CAACuC,KAAV,CAAgB;AACdS,IAAAA,EAAE,EAAEhD,SAAS,CAAC2C,MAAV,CAAiBP,UADP;AAEda,IAAAA,IAAI,EAAEjD,SAAS,CAAC2C,MAAV,CAAiBP;AAFT,GAAhB,CADc,EAKdA,UAnBuC;AAoBzCc,EAAAA,IAAI,EAAElD,SAAS,CAACuC,KAAV,CAAgB;AACpBY,IAAAA,EAAE,EAAEnD,SAAS,CAAC2C,MAAV,CAAiBP,UADD;AAEpBgB,IAAAA,SAAS,EAAEpD,SAAS,CAACqD,KAAV,CAAgB,CAAC,KAAD,EAAQ,MAAR,CAAhB,EAAiCjB,UAFxB;AAGpBkB,IAAAA,IAAI,EAAEtD,SAAS,CAACqD,KAAV,CAAgB,CAAC,SAAD,EAAY,MAAZ,EAAoB,QAApB,CAAhB,EAA+CjB;AAHjC,GAAhB,EAIHA,UAxBsC;AAyBzCmB,EAAAA,UAAU,EAAEvD,SAAS,CAACuC,KAAV,CAAgB;AAC1BiB,IAAAA,IAAI,EAAExD,SAAS,CAACyC,MAAV,CAAiBL,UADG;AAE1BqB,IAAAA,SAAS,EAAEzD,SAAS,CAACyC,MAAV,CAAiBL,UAFF;AAG1BsB,IAAAA,WAAW,EAAE1D,SAAS,CAACyC,MAAV,CAAiBL;AAHJ,GAAhB,EAITA,UA7BsC;AA8BzCuB,EAAAA,YAAY,EAAE3D,SAAS,CAACmC,KAAV,CAAgBC,UA9BW;AA+BzCwB,EAAAA,WAAW,EAAE5D,SAAS,CAAC6D,IAAV,CAAezB,UA/Ba;AAgCzC0B,EAAAA,YAAY,EAAE9D,SAAS,CAACmC,KAAV,CAAgBC,UAhCW;AAiCzC2B,EAAAA,aAAa,EAAE/D,SAAS,CAACgE,IAAV,CAAe5B,UAjCW;AAkCzC6B,EAAAA,mBAAmB,EAAEjE,SAAS,CAACgE,IAAV,CAAe5B,UAlCK;AAmCzC8B,EAAAA,iBAAiB,EAAElE,SAAS,CAACgE,IAAV,CAAe5B,UAnCO;AAoCzC+B,EAAAA,QAAQ,EAAEnE,SAAS,CAACuC,KAAV,CAAgB;AACxB6B,IAAAA,UAAU,EAAEpE,SAAS,CAAC6D,IAAV,CAAezB,UADH;AAExBiC,IAAAA,gBAAgB,EAAErE,SAAS,CAAC6D,IAAV,CAAezB,UAFT;AAGxBkC,IAAAA,uBAAuB,EAAEtE,SAAS,CAAC6D,IAAV,CAAezB,UAHhB;AAIxBmC,IAAAA,sBAAsB,EAAEvE,SAAS,CAAC6D,IAAV,CAAezB,UAJf;AAKxBoC,IAAAA,YAAY,EAAExE,SAAS,CAAC6D,IAAV,CAAezB,UALL;AAMxBqC,IAAAA,YAAY,EAAEzE,SAAS,CAAC6D,IAAV,CAAezB;AANL,GAAhB,EAOPA;AA3CsC,CAA3C;AA8CA,OAAO,SAASJ,8BAAT,OAcJ;AAAA;;AAAA;;AAAA,MAbDE,IAaC,QAbDA,IAaC;AAAA,MAZDG,YAYC,QAZDA,YAYC;AAAA,MAXDO,kBAWC,QAXDA,kBAWC;AAAA,MAVDG,cAUC,QAVDA,cAUC;AAAA,MATK2B,OASL,QATDxB,IASC;AAAA,MARDK,UAQC,QARDA,UAQC;AAAA,MAPDI,YAOC,QAPDA,YAOC;AAAA,MANDC,WAMC,QANDA,WAMC;AAAA,MALDE,YAKC,QALDA,YAKC;AAAA,MAJDC,aAIC,QAJDA,aAIC;AAAA,MAHDE,mBAGC,QAHDA,mBAGC;AAAA,MAFDC,iBAEC,QAFDA,iBAEC;AAAA,MADDC,QACC,QADDA,QACC;AACD,MAAMQ,OAAO,GAAGjD,UAAU,CAACxB,MAAD,EAAS;AAAE+C,IAAAA,IAAI,EAAE;AAAR,GAAT,CAAV,EAAhB;AACA,MAAM2B,aAAa,GAAG7D,aAAa,CAACmB,IAAD,EAAOqB,UAAP,EAAmBY,QAAQ,CAACE,gBAA5B,EAA8CF,QAAQ,CAACG,uBAAvD,CAAnC;;AAFC,iBAGsBtD,OAAO,CAAC2C,YAAD,EAAee,OAAf,EAAwBP,QAAQ,CAACC,UAAjC,CAH7B;AAAA,MAGOS,IAHP,YAGOA,IAHP;AAAA,MAGa3B,IAHb,YAGaA,IAHb;;AAID,MAAM4B,SAAS,GAAG,SAAZA,SAAY,CAACC,QAAD,EAAc;AAC9B,QAAI7D,KAAK,CAAC8D,sBAAN,CAA6BC,MAA7B,CAAoCC,OAApC,CAA4CH,QAA5C,CAAJ,EAA2D;AACzD,aAAO;AAAEzB,QAAAA,IAAI,EAAE,MAAR;AAAgBN,QAAAA,EAAE,0CAAmC/B,SAAS,CAACkE,eAA7C;AAAlB,OAAP;AACD,KAFD,MAEO,IAAIjE,KAAK,CAAC8D,sBAAN,CAA6BC,MAA7B,CAAoCG,eAApC,CAAoDL,QAApD,CAAJ,EAAmE;AACxE,aAAO;AAAEzB,QAAAA,IAAI,EAAE,OAAR;AAAiBN,QAAAA,EAAE,0CAAmC/B,SAAS,CAACoE,wBAA7C;AAAnB,OAAP;AACD,KAFM,MAEA,IAAInE,KAAK,CAAC8D,sBAAN,CAA6BC,MAA7B,CAAoCK,8BAApC,CAAmEP,QAAnE,CAAJ,EAAkF;AACvF,aAAO;AAAEzB,QAAAA,IAAI,EAAE,OAAR;AAAiBN,QAAAA,EAAE,0CAAmC/B,SAAS,CAACsE,wCAA7C;AAAnB,OAAP;AACD,KAFM,MAEA,IAAIrE,KAAK,CAAC8D,sBAAN,CAA6BC,MAA7B,CAAoCO,qBAApC,CAA0DT,QAA1D,CAAJ,EAAyE;AAC9E,aAAO;AAAEzB,QAAAA,IAAI,EAAE,SAAR;AAAmBN,QAAAA,EAAE,0CAAmC/B,SAAS,CAACwE,8BAA7C;AAArB,OAAP;AACD,KAFM,MAEA,IAAIvE,KAAK,CAAC8D,sBAAN,CAA6BC,MAA7B,CAAoCS,UAApC,CAA+CX,QAA/C,CAAJ,EAA8D;AACnE,aAAO;AAAEzB,QAAAA,IAAI,EAAE,QAAR;AAAkBN,QAAAA,EAAE,0CAAmC/B,SAAS,CAAC0E,+BAA7C;AAApB,OAAP;AACD,KAFM,MAEA;AACL,aAAO;AAAErC,QAAAA,IAAI,EAAE,EAAR;AAAYL,QAAAA,IAAI,EAAE;AAAlB,OAAP;AACD;AACF,GAdD;;AAgBA,MAAM2C,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,aAAD,EAAmB;AAAA;;AAC5C,iCAAOxD,YAAY,CAACyD,IAAb,CAAkB,UAACC,WAAD;AAAA;;AAAA,aAAiB,CAAAA,WAAW,SAAX,IAAAA,WAAW,WAAX,qCAAAA,WAAW,CAAEvD,aAAb,gFAA4BwD,QAA5B,SAA2CH,aAA3C,aAA2CA,aAA3C,uBAA2CA,aAAa,CAAEG,QAAf,EAA3C,CAAjB;AAAA,KAAlB,CAAP,uDAAO,mBAA0GtD,kBAAjH;AACD,GAFD;;AAIA,MAAMuD,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,YAAD,EAAkB;AAAA;;AAC1C,oCAAOtD,kBAAkB,CAACkD,IAAnB,CAAwB,UAACK,UAAD;AAAA;;AAAA,aAAgB,CAAAA,UAAU,SAAV,IAAAA,UAAU,WAAV,oCAAAA,UAAU,CAAEtD,QAAZ,8EAAsBmD,QAAtB,SAAqCE,YAArC,aAAqCA,YAArC,uBAAqCA,YAAY,CAAEF,QAAd,EAArC,CAAhB;AAAA,KAAxB,CAAP,0DAAO,sBAAwGlD,UAA/G;AACD,GAFD;;AAIA,MAAMsD,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,YAAD,EAAkB;AAAA;;AAC1C,mCAAOtD,cAAc,CAAC+C,IAAf,CAAoB,UAACQ,IAAD;AAAA;;AAAA,aAAU,CAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,wBAAAA,IAAI,CAAEtD,EAAN,sDAAUgD,QAAV,SAAyBK,YAAzB,aAAyBA,YAAzB,uBAAyBA,YAAY,CAAEL,QAAd,EAAzB,CAAV;AAAA,KAApB,CAAP,yDAAO,qBAAkFO,QAAzF;AACD,GAFD;;AAIA,sBACE,QAAC,GAAD;AAAK,mBAAY,sCAAjB;AAAA,4BACE,QAAC,YAAD;AAAc,MAAA,aAAa,EAAE;AAAEC,QAAAA,IAAI,EAAE7B,OAAO,CAAC8B;AAAhB,OAA7B;AAAA,8BACE,QAAC,aAAD;AAAe,QAAA,OAAO,EAAC,+CAAvB;AAAuE,QAAA,WAAW,EAAC,QAAnF;AAAA,+BACE,QAAC,GAAD;AAAK,UAAA,OAAO,EAAC,MAAb;AAAoB,UAAA,aAAa,EAAC,QAAlC;AAA2C,UAAA,KAAK,EAAC,MAAjD;AAAA,kCACE,QAAC,GAAD;AAAA,oCACE,QAAC,UAAD;AAAY,cAAA,SAAS,EAAE9B,OAAO,CAAC+B,QAA/B;AAAA,wBAA0CxF,KAAK,CAACyB,MAAN,CAAagE,CAAb,CAAe,sCAAf;AAA1C;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAKE,QAAC,GAAD;AAAK,YAAA,EAAE,EAAE,CAAT;AAAY,YAAA,EAAE,EAAE,CAAhB;AAAA,mCACE,QAAC,YAAD;AAAc,cAAA,aAAa,EAAE;AAAEH,gBAAAA,IAAI,EAAE7B,OAAO,CAACiC;AAAhB,eAA7B;AAAA,wBACG1F,KAAK,CAAC2F,OAAN,CAAcC,YAAd,CAA2BzE,YAA3B,EAAyC,IAAzC,kBACC;AAAK,gBAAA,SAAS,EAAEsC,OAAO,CAACoC,KAAxB;AAAA,0BACG1E,YAAY,CACV2E,MADF,CACS,UAAC1D,IAAD;AAAA,yBAAU,CAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAE2D,OAAN,KAAiB,CAAA3D,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAE4D,iBAAN,MAA4BjG,SAAS,CAACkG,sCAAjE;AAAA,iBADT,EAEEC,GAFF,CAEM,UAAC9D,IAAD;AAAA,sCACH,QAAC,MAAD;AACE,oBAAA,IAAI,EAAExB,OADR;AAGE,oBAAA,IAAI,EAAEZ,KAAK,CAACyB,MAAN,CAAagE,CAAb,uCAA8CrD,IAAI,CAACd,aAAnD,EAHR;AAIE,oBAAA,KAAK,EAAE,SAJT;AAKE,oBAAA,IAAI,EAAC,OALP;AAME,oBAAA,OAAO,EAAE;AAAA,6BAAM2B,QAAQ,CAACI,sBAAT,CAAgCjB,IAAhC,CAAN;AAAA;AANX,qBAEOA,IAAI,CAACd,aAFZ;AAAA;AAAA;AAAA;AAAA,2BADG;AAAA,iBAFN;AADH;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBALF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eA8BE,QAAC,MAAD;AAAA,+BACE,QAAC,GAAD;AAAK,UAAA,SAAS,EAAEmC,OAAO,CAAC0C,UAAxB;AAAA,iCACE,QAAC,UAAD;AAAY,YAAA,SAAS,EAAE1C,OAAO,CAAC+B,QAA/B;AAAA,sBAA0CxF,KAAK,CAACyB,MAAN,CAAagE,CAAb,CAAe,yCAAf;AAA1C;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cA9BF,eAmCE,QAAC,YAAD;AACE,QAAA,iBAAiB,EAAEzF,KAAK,CAACyB,MAAN,CAAagE,CAAb,CAAe,6CAAf,CADrB;AAEE,QAAA,OAAO,MAFT;AAGE,QAAA,YAAY,EAAE9B,IAHhB;AAIE,QAAA,OAAO,MAJT;AAKE,QAAA,YAAY,EAAEf,YALhB;AAME,QAAA,QAAQ,EAAE;AACRwD,UAAAA,QAAQ,EAAEnD,QAAQ,CAACK,YADX;AAER+C,UAAAA,QAAQ,EAAEpD,QAAQ,CAACK,YAFX;AAGRgD,UAAAA,aAAa,EAAErD,QAAQ,CAACsD,WAHhB;AAIRC,UAAAA,cAAc,EAAEvD,QAAQ,CAACM;AAJjB,SANZ;AAYE,QAAA,aAAa,EAAE;AAAE+B,UAAAA,IAAI,EAAE7B,OAAO,CAACgD;AAAhB;AAZjB;AAAA;AAAA;AAAA;AAAA,cAnCF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAoDE,QAAC,MAAD;AAAQ,MAAA,IAAI,EAAE,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAAd;AAAkC,MAAA,IAAI,MAAtC;AAAA,6BACE,QAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAY,QAAA,SAAS,EAAEhD,OAAO,CAAC0C,UAA/B;AAAA,+BACE,QAAC,UAAD;AAAY,UAAA,SAAS,EAAE1C,OAAO,CAAC+B,QAA/B;AAAA,oBAA0CxF,KAAK,CAACyB,MAAN,CAAagE,CAAb,CAAe,yCAAf;AAA1C;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YApDF,eAyDE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAzDF,eA2DE,QAAC,aAAD;AAAe,MAAA,OAAO,EAAC,+CAAvB;AAAuE,MAAA,WAAW,EAAC,MAAnF;AAAA,gBACG,CAAC5C,aAAD,iBACC,QAAC,cAAD;AAAA,gCACE,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,OAAZ;AAAoB,yBAAY,8BAAhC;AAAA,kCACE,QAAC,SAAD;AAAW,YAAA,OAAO,EAAEc,IAApB;AAA0B,YAAA,OAAO,EAAE3B,IAAnC;AAAyC,YAAA,aAAa,EAAE;AAAE0E,cAAAA,SAAS,EAAEjD,OAAO,CAACiD;AAArB;AAAxD;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,SAAD;AAAA,uBACG,CAAA1F,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAE2F,MAAN,IAAe,CAAf,IACC,CAAC5D,mBADF,IAEC/B,IAAI,CAACkF,GAAL,CAAS,UAACU,IAAD,EAAU;AACjB,kBAAM7C,MAAM,GAAGH,SAAS,CAACgD,IAAI,CAAC/C,QAAN,CAAxB;AACA,kBAAMgD,eAAe,GAAGnC,kBAAkB,CAACkC,IAAI,CAACjC,aAAN,CAA1C;AACA,kBAAMmC,cAAc,GAAG/B,iBAAiB,CAAC6B,IAAI,CAACjF,QAAN,CAAxC;AACA,kBAAMoF,cAAc,GAAG7B,iBAAiB,CAAC0B,IAAI,CAACI,sBAAN,CAAxC;AAEA,kCACE,QAAC,QAAD;AAAA,wCACE,QAAC,SAAD,kCAAetE,WAAW,CAAC,eAAD,CAA1B;AAAA,yCACE,QAAC,IAAD;AAAM,oBAAA,EAAE,YAAKzC,MAAM,CAACgH,MAAP,CAAcnD,sBAAd,CAAqCoD,KAA1C,cAAmDN,IAAI,CAACO,aAAxD,CAAR;AAAiF,oBAAA,SAAS,EAAE1D,OAAO,CAAC2D,IAApG;AAAA,0CACQR,IAAI,CAACO,aADb;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,yBADF,eAME,QAAC,SAAD,kCAAezE,WAAW,CAAC,QAAD,CAA1B;AAAA,yCACE,QAAC,MAAD;AAAQ,oBAAA,IAAI,EAAC,IAAb;AAAkB,oBAAA,IAAI,eAAE,QAAC,SAAD;AAAW,sBAAA,KAAK,EAAEqB,MAAM,CAACjC;AAAzB;AAAA;AAAA;AAAA;AAAA,6BAAxB;AAAyD,oBAAA,MAAM,EAAEiC,MAAM,CAAC3B;AAAxE;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,yBANF,eASE,QAAC,SAAD,kCAAeM,WAAW,CAAC,aAAD,CAA1B;AAAA,4BAA4CkE,IAAI,CAACS;AAAjD;AAAA;AAAA;AAAA;AAAA,yBATF,eAUE,QAAC,SAAD,kCAAe3E,WAAW,CAAC,eAAD,CAA1B;AAAA,4BAA8CkE,IAAI,CAACU;AAAnD;AAAA;AAAA;AAAA;AAAA,yBAVF,eAWE,QAAC,SAAD,kCAAe5E,WAAW,CAAC,eAAD,CAA1B;AAAA,4BAA8CqE;AAA9C;AAAA;AAAA;AAAA;AAAA,yBAXF,eAYE,QAAC,SAAD,kCAAerE,WAAW,CAAC,aAAD,CAA1B;AAAA,4BAA4CoE;AAA5C;AAAA;AAAA;AAAA;AAAA,yBAZF,eAaE,QAAC,SAAD,kCAAepE,WAAW,CAAC,aAAD,CAA1B;AAAA,4BAA4CmE;AAA5C;AAAA;AAAA;AAAA;AAAA,yBAbF,eAcE,QAAC,SAAD,kCAAenE,WAAW,CAAC,iBAAD,CAA1B;AAAA,4BAAgDkE,IAAI,CAACW;AAArD;AAAA;AAAA;AAAA;AAAA,yBAdF,eAeE,QAAC,SAAD,kCAAe7E,WAAW,CAAC,aAAD,CAA1B;AAAA,4BAA4CkE,IAAI,CAACY;AAAjD;AAAA;AAAA;AAAA;AAAA,yBAfF,eAgBE,QAAC,aAAD;AAAe,kBAAA,OAAO,EAAC,+CAAvB;AAAuE,kBAAA,WAAW,EAAE,CAAC,QAAD,EAAW,QAAX,CAApF;AAAA,yCACE,QAAC,SAAD,kCAAe9E,WAAW,CAAC,QAAD,CAA1B;AAAsC,oBAAA,OAAO,MAA7C;AAA8C,oBAAA,MAAM,MAApD;AAAqD,oBAAA,MAAM,MAA3D;AAAA,8BACG1C,KAAK,CAAC8D,sBAAN,CAA6BC,MAA7B,CAAoCO,qBAApC,CAA0DsC,IAAI,CAAC/C,QAA/D,kBACC,QAAC,MAAD;AACE,sBAAA,IAAI,EAAEhD,QADR;AAEE,sBAAA,OAAO,EAAE,mBAAM;AACboC,wBAAAA,QAAQ,CAACwE,SAAT,CAAmBb,IAAI,CAACO,aAAxB;AACD,uBAJH;AAKE,sBAAA,IAAI,EAAC,QALP;AAME,sBAAA,OAAO,EAAE;AAAEO,wBAAAA,KAAK,EAAE1H,KAAK,CAACyB,MAAN,CAAagE,CAAb,CAAe,YAAf;AAAT,uBANX;AAOE,sBAAA,OAAO,EAAC,MAPV;AAQE,sBAAA,KAAK,EAAC,SARR;AASE,sBAAA,KAAK;AATP;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,yBAhBF;AAAA,iBAAemB,IAAI,CAACO,aAApB;AAAA;AAAA;AAAA;AAAA,uBADF;AAoCD,aA1CD,CAHJ,EA8CGpE,mBAAmB,IAAI,CAACC,iBAAxB,iBACC,QAAC,QAAD;AAAA,qCACE,QAAC,SAAD;AAAW,gBAAA,OAAO,EAAEW,IAAI,CAACgD,MAAzB;AAAA,uCACE,QAAC,QAAD;AAAU,kBAAA,MAAM,EAAE,EAAlB;AAAsB,kBAAA,SAAS,EAAC,MAAhC;AAAuC,kBAAA,aAAa,EAAE;AAAtD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBA/CJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EA2DG,CAAA3F,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAE2F,MAAN,MAAiB,CAAjB,IAAsB3D,iBAAtB,iBACC,QAAC,GAAD;AAAK,UAAA,CAAC,EAAE,CAAR;AAAA,iCACE,QAAC,OAAD;AACE,YAAA,IAAI,EAAEhD,KAAK,CAACyB,MAAN,CAAagE,CAAb,CAAe,6CAAf,CADR;AAEE,YAAA,IAAI,EAAC,MAFP;AAGE,YAAA,KAAK,EAAC,QAHR;AAIE,YAAA,IAAI,EAAC,OAJP;AAKE,YAAA,IAAI;AALN;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBA5DJ,eAsEE,QAAC,IAAD;AAAM,UAAA,SAAS,MAAf;AAAA,iCACE,QAAC,IAAD;AAAM,YAAA,IAAI,MAAV;AAAW,YAAA,EAAE,EAAE,EAAf;AAAA,mCACE,QAAC,UAAD;AACE,cAAA,IAAI,EAAE1G,GAAG,CAAC2E,aAAD,EAAgB,UAAhB,CADX;AAEE,cAAA,KAAK,EAAE3E,GAAG,CAAC2E,aAAD,EAAgB,eAAhB,CAFZ;AAGE,cAAA,WAAW,EAAE3E,GAAG,CAAC2E,aAAD,EAAgB,iBAAhB,CAHlB;AAIE,cAAA,YAAY,EAAE3E,GAAG,CAAC2E,aAAD,EAAgB,2BAAhB,CAJnB;AAKE,cAAA,mBAAmB,EAAE3E,GAAG,CAAC2E,aAAD,EAAgB,kCAAhB;AAL1B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAtEF;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YA3DF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoJD;;GAlMe5C,8B;UAgBQjB,a,EACCC,O;;;KAjBTgB,8B;AAAAA,8B","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport get from 'lodash/get';\r\n\r\n//app\r\nimport styles from './ProcessingInstructionsList.styles';\r\nimport {\r\n  AccessControl,\r\n  Pagination,\r\n  TableHead,\r\n  TableCell,\r\n  Warning,\r\n  TableFilters,\r\n  TableToolbar,\r\n  TableActions,\r\n  Status,\r\n  Translate,\r\n  Button,\r\n  Skeleton,\r\n} from 'components';\r\nimport { usePagination, useSort } from 'hooks';\r\nimport * as constants from 'consts';\r\nimport * as utils from 'utils';\r\nimport config from 'config';\r\n\r\n// mui\r\nimport { Box, Grid, Table, TableBody, TableRow, Hidden, makeStyles, TableContainer, Typography, Divider } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\nProcessingInstructionsListView.propTypes = {\r\n  rows: PropTypes.array.isRequired,\r\n  processTypes: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      processTypeID: PropTypes.number.isRequired,\r\n      processTypeDetails: PropTypes.string.isRequired,\r\n    })\r\n  ).isRequired,\r\n  refDataXbInstances: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      sourceID: PropTypes.number.isRequired,\r\n      sourceName: PropTypes.string.isRequired,\r\n    })\r\n  ).isRequired,\r\n  departmentList: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n    })\r\n  ).isRequired,\r\n  sort: PropTypes.shape({\r\n    by: PropTypes.string.isRequired,\r\n    direction: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n    type: PropTypes.oneOf(['lexical', 'date', 'number']).isRequired,\r\n  }).isRequired,\r\n  pagination: PropTypes.shape({\r\n    page: PropTypes.number.isRequired,\r\n    rowsTotal: PropTypes.number.isRequired,\r\n    rowsPerPage: PropTypes.number.isRequired,\r\n  }).isRequired,\r\n  columnsArray: PropTypes.array.isRequired,\r\n  columnProps: PropTypes.func.isRequired,\r\n  filtersArray: PropTypes.array.isRequired,\r\n  isTableHidden: PropTypes.bool.isRequired,\r\n  isPiGridDataLoading: PropTypes.bool.isRequired,\r\n  isPiHasNoGridData: PropTypes.bool.isRequired,\r\n  handlers: PropTypes.shape({\r\n    handleSort: PropTypes.func.isRequired,\r\n    handleChangePage: PropTypes.func.isRequired,\r\n    handleChangeRowsPerPage: PropTypes.func.isRequired,\r\n    handleProcessSelection: PropTypes.func.isRequired,\r\n    searchSubmit: PropTypes.func.isRequired,\r\n    toggleColumn: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport function ProcessingInstructionsListView({\r\n  rows,\r\n  processTypes,\r\n  refDataXbInstances,\r\n  departmentList,\r\n  sort: sortObj,\r\n  pagination,\r\n  columnsArray,\r\n  columnProps,\r\n  filtersArray,\r\n  isTableHidden,\r\n  isPiGridDataLoading,\r\n  isPiHasNoGridData,\r\n  handlers,\r\n}) {\r\n  const classes = makeStyles(styles, { name: 'ProcessingInstructionsList' })();\r\n  const paginationObj = usePagination(rows, pagination, handlers.handleChangePage, handlers.handleChangeRowsPerPage);\r\n  const { cols, sort } = useSort(columnsArray, sortObj, handlers.handleSort);\r\n  const getStatus = (statusId) => {\r\n    if (utils.processingInstructions.status.isDraft(statusId)) {\r\n      return { type: 'info', id: `processingInstructions.status.${constants.PI_STATUS_DRAFT}` };\r\n    } else if (utils.processingInstructions.status.isRejectedDraft(statusId)) {\r\n      return { type: 'error', id: `processingInstructions.status.${constants.PI_STATUS_REJECTED_DRAFT}` };\r\n    } else if (utils.processingInstructions.status.isSubmittedAuthorisedSignatory(statusId)) {\r\n      return { type: 'alert', id: `processingInstructions.status.${constants.PI_STATUS_SUBMITTED_AUTHORISED_SIGNATORY}` };\r\n    } else if (utils.processingInstructions.status.isSubmittedProcessing(statusId)) {\r\n      return { type: 'success', id: `processingInstructions.status.${constants.PI_STATUS_SUBMITTED_PROCESSING}` };\r\n    } else if (utils.processingInstructions.status.isReopened(statusId)) {\r\n      return { type: 'reopen', id: `processingInstructions.status.${constants.PI_STATUS_DRAFT_POST_SUBMISSION}` };\r\n    } else {\r\n      return { type: '', name: 'status.other' };\r\n    }\r\n  };\r\n\r\n  const getProcessTypeName = (processTypeId) => {\r\n    return processTypes.find((processType) => processType?.processTypeID?.toString() === processTypeId?.toString())?.processTypeDetails;\r\n  };\r\n\r\n  const getXbInstanceName = (xbInstanceId) => {\r\n    return refDataXbInstances.find((xbInstance) => xbInstance?.sourceID?.toString() === xbInstanceId?.toString())?.sourceName;\r\n  };\r\n\r\n  const getDepartmentName = (departmentId) => {\r\n    return departmentList.find((dept) => dept?.id?.toString() === departmentId?.toString())?.deptName;\r\n  };\r\n\r\n  return (\r\n    <Box data-testid=\"processing-instructions-search-table\">\r\n      <TableToolbar nestedClasses={{ root: classes.toolbar }}>\r\n        <AccessControl feature=\"processingInstructions.processingInstructions\" permissions=\"create\">\r\n          <Box display=\"flex\" flexDirection=\"column\" width=\"100%\">\r\n            <Box>\r\n              <Typography className={classes.subTitle}>{utils.string.t('processingInstructions.chooseProcess')}</Typography>\r\n              <Divider />\r\n            </Box>\r\n            <Box pt={1} pb={3}>\r\n              <TableActions nestedClasses={{ root: classes.actions }}>\r\n                {utils.generic.isValidArray(processTypes, true) && (\r\n                  <div className={classes.chips}>\r\n                    {processTypes\r\n                      .filter((type) => type?.primary && type?.businessProcessID === constants.BUSINESS_PROCESS_PREMIUM_PROCESSING_ID)\r\n                      .map((type) => (\r\n                        <Button\r\n                          icon={AddIcon}\r\n                          key={type.processTypeID}\r\n                          text={utils.string.t(`processingInstructions.type.${type.processTypeID}`)}\r\n                          color={'primary'}\r\n                          size=\"small\"\r\n                          onClick={() => handlers.handleProcessSelection(type)}\r\n                        />\r\n                      ))}\r\n                  </div>\r\n                )}\r\n              </TableActions>\r\n            </Box>\r\n          </Box>\r\n        </AccessControl>\r\n\r\n        <Hidden>\r\n          <Box className={classes.tableTitle}>\r\n            <Typography className={classes.subTitle}>{utils.string.t('processingInstructions.listOfPisCreated')}</Typography>\r\n          </Box>\r\n        </Hidden>\r\n        <TableFilters\r\n          searchPlaceholder={utils.string.t('processingInstructions.searchRiskReferences')}\r\n          columns\r\n          columnsArray={cols}\r\n          filters\r\n          filtersArray={filtersArray}\r\n          handlers={{\r\n            onSearch: handlers.searchSubmit,\r\n            onFilter: handlers.searchSubmit,\r\n            onResetFilter: handlers.resetSubmit,\r\n            onToggleColumn: handlers.toggleColumn,\r\n          }}\r\n          nestedClasses={{ root: classes.filters }}\r\n        />\r\n      </TableToolbar>\r\n\r\n      <Hidden only={['sm', 'md', 'lg']} xsUp>\r\n        <Box py={1} className={classes.tableTitle}>\r\n          <Typography className={classes.subTitle}>{utils.string.t('processingInstructions.listOfPisCreated')}</Typography>\r\n        </Box>\r\n      </Hidden>\r\n      <Divider />\r\n\r\n      <AccessControl feature=\"processingInstructions.processingInstructions\" permissions=\"read\">\r\n        {!isTableHidden && (\r\n          <TableContainer>\r\n            <Table size=\"small\" data-testid=\"processing-instructions-grid\">\r\n              <TableHead columns={cols} sorting={sort} nestedClasses={{ tableHead: classes.tableHead }} />\r\n              <TableBody>\r\n                {rows?.length > 0 &&\r\n                  !isPiGridDataLoading &&\r\n                  rows.map((data) => {\r\n                    const status = getStatus(data.statusId);\r\n                    const processTypeName = getProcessTypeName(data.processTypeId);\r\n                    const xbInstanceName = getXbInstanceName(data.sourceID);\r\n                    const departmentName = getDepartmentName(data.departmentXbInstanceId);\r\n\r\n                    return (\r\n                      <TableRow key={data.instructionId}>\r\n                        <TableCell {...columnProps('instructionId')}>\r\n                          <Link to={`${config.routes.processingInstructions.steps}/${data.instructionId}`} className={classes.link}>\r\n                            {`PI${data.instructionId}`}\r\n                          </Link>\r\n                        </TableCell>\r\n                        <TableCell {...columnProps('status')}>\r\n                          <Status size=\"sm\" text={<Translate label={status.id} />} status={status.type} />\r\n                        </TableCell>\r\n                        <TableCell {...columnProps('insuredName')}>{data.insuredName}</TableCell>\r\n                        <TableCell {...columnProps('inceptionDate')}>{data.inceptionDate}</TableCell>\r\n                        <TableCell {...columnProps('createdByDept')}>{departmentName}</TableCell>\r\n                        <TableCell {...columnProps('gxbInstance')}>{xbInstanceName}</TableCell>\r\n                        <TableCell {...columnProps('processType')}>{processTypeName}</TableCell>\r\n                        <TableCell {...columnProps('frontEndContact')}>{data.frontEndContact}</TableCell>\r\n                        <TableCell {...columnProps('createdDate')}>{data.createdDate}</TableCell>\r\n                        <AccessControl feature=\"processingInstructions.processingInstructions\" permissions={['create', 'update']}>\r\n                          <TableCell {...columnProps('update')} compact narrow center>\r\n                            {utils.processingInstructions.status.isSubmittedProcessing(data.statusId) && (\r\n                              <Button\r\n                                icon={EditIcon}\r\n                                onClick={() => {\r\n                                  handlers.editPopup(data.instructionId);\r\n                                }}\r\n                                size=\"xsmall\"\r\n                                tooltip={{ title: utils.string.t('app.update') }}\r\n                                variant=\"text\"\r\n                                color=\"default\"\r\n                                light\r\n                              />\r\n                            )}\r\n                          </TableCell>\r\n                        </AccessControl>\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                {isPiGridDataLoading && !isPiHasNoGridData && (\r\n                  <TableRow>\r\n                    <TableCell colSpan={cols.length}>\r\n                      <Skeleton height={40} animation=\"wave\" displayNumber={10} />\r\n                    </TableCell>\r\n                  </TableRow>\r\n                )}\r\n              </TableBody>\r\n            </Table>\r\n\r\n            {rows?.length === 0 && isPiHasNoGridData && (\r\n              <Box p={5}>\r\n                <Warning\r\n                  text={utils.string.t('processingInstructions.gridDataEmptyWarning')}\r\n                  type=\"info\"\r\n                  align=\"center\"\r\n                  size=\"large\"\r\n                  icon\r\n                />\r\n              </Box>\r\n            )}\r\n            <Grid container>\r\n              <Grid item xs={12}>\r\n                <Pagination\r\n                  page={get(paginationObj, 'obj.page')}\r\n                  count={get(paginationObj, 'obj.rowsTotal')}\r\n                  rowsPerPage={get(paginationObj, 'obj.rowsPerPage')}\r\n                  onChangePage={get(paginationObj, 'handlers.handleChangePage')}\r\n                  onChangeRowsPerPage={get(paginationObj, 'handlers.handleChangeRowsPerPage')}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </TableContainer>\r\n        )}\r\n      </AccessControl>\r\n    </Box>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}