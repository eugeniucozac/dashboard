{"ast":null,"code":"import _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ChartPremiumByAccount\\\\ChartPremiumByAccount.js\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport groupBy from 'lodash/groupBy'; // app\n\nimport { ChartPremium } from 'modules';\nimport * as utils from 'utils'; // state\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    referenceDataCurrencies: state.referenceData.currencies,\n    referenceDataDepartments: state.referenceData.departments\n  };\n};\n\nexport var ChartPremiumByAccount = /*#__PURE__*/function (_PureComponent) {\n  _inherits(ChartPremiumByAccount, _PureComponent);\n\n  var _super = _createSuper(ChartPremiumByAccount);\n\n  function ChartPremiumByAccount() {\n    var _this;\n\n    _classCallCheck(this, ChartPremiumByAccount);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.getTableColumns = function (currency) {\n      return [{\n        id: 'name',\n        label: utils.string.t('app.account'),\n        sort: {\n          type: 'lexical',\n          direction: 'asc'\n        }\n      }, {\n        id: 'department',\n        label: utils.string.t('app.department'),\n        sort: {\n          type: 'lexical',\n          direction: 'asc'\n        }\n      }, {\n        id: 'offices',\n        label: utils.string.t('app.office'),\n        sort: {\n          type: 'lexical',\n          direction: 'asc'\n        }\n      }, {\n        id: 'value',\n        label: utils.string.t('chart.legend.premium', {\n          currency: currency\n        }),\n        sort: {\n          type: 'numeric',\n          direction: 'desc'\n        }\n      }];\n    };\n\n    _this.formatData = function (placements) {\n      var referenceDataDepartments = _this.props.referenceDataDepartments;\n      var data = placements.reduce(function (list, placement) {\n        var placementId = placement.id;\n        var placementName = utils.placement.getInsureds(placement);\n        var placementPremiumByCurrency = utils.placement.getPremiumBySettlementCurrency(placement, true, true);\n        var placementOffices = utils.placement.getOffices(placement).join(', ');\n        var byCurrency = Object.keys(placementPremiumByCurrency).map(function (currency) {\n          return {\n            id: placementId,\n            currency: currency,\n            name: placementName,\n            department: utils.placement.getDepartmentName(placement, referenceDataDepartments),\n            offices: placementOffices,\n            label: utils.string.t('format.currency', {\n              value: {\n                number: placementPremiumByCurrency[currency],\n                currency: currency\n              }\n            }),\n            datasets: [{\n              id: placementId,\n              value: placementPremiumByCurrency[currency],\n              name: placementName,\n              object: [placement]\n            }]\n          };\n        });\n        return [].concat(_toConsumableArray(list), _toConsumableArray(byCurrency));\n      }, []);\n      var grouped = groupBy(data, function (item) {\n        return item.currency;\n      });\n      return Object.keys(grouped).map(function (currency) {\n        return {\n          currency: currency,\n          data: grouped[currency],\n          columns: _this.getTableColumns(currency)\n        };\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ChartPremiumByAccount, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          placements = _this$props.placements,\n          year = _this$props.year; // abort\n\n      if (!placements) return null;\n      var filteredPlacements = utils.placement.getByYear(placements, year);\n      var dataByCurrency = this.formatData(filteredPlacements);\n      return /*#__PURE__*/_jsxDEV(ChartPremium, {\n        id: \"byAccount\",\n        year: year,\n        dataByCurrency: dataByCurrency,\n        table: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 12\n      }, this);\n    }\n  }]);\n\n  return ChartPremiumByAccount;\n}(PureComponent);\nChartPremiumByAccount.propTypes = {\n  placements: PropTypes.array.isRequired,\n  year: PropTypes.number\n};\nexport default compose(connect(mapStateToProps, null))(ChartPremiumByAccount);","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ChartPremiumByAccount/ChartPremiumByAccount.js"],"names":["React","PureComponent","PropTypes","connect","compose","groupBy","ChartPremium","utils","mapStateToProps","state","referenceDataCurrencies","referenceData","currencies","referenceDataDepartments","departments","ChartPremiumByAccount","getTableColumns","currency","id","label","string","t","sort","type","direction","formatData","placements","props","data","reduce","list","placement","placementId","placementName","getInsureds","placementPremiumByCurrency","getPremiumBySettlementCurrency","placementOffices","getOffices","join","byCurrency","Object","keys","map","name","department","getDepartmentName","offices","value","number","datasets","object","grouped","item","columns","year","filteredPlacements","getByYear","dataByCurrency","propTypes","array","isRequired"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport groupBy from 'lodash/groupBy';\r\n\r\n// app\r\nimport { ChartPremium } from 'modules';\r\nimport * as utils from 'utils';\r\n\r\n// state\r\nconst mapStateToProps = (state) => ({\r\n  referenceDataCurrencies: state.referenceData.currencies,\r\n  referenceDataDepartments: state.referenceData.departments,\r\n});\r\n\r\nexport class ChartPremiumByAccount extends PureComponent {\r\n  static propTypes = {\r\n    placements: PropTypes.array.isRequired,\r\n    year: PropTypes.number,\r\n  };\r\n\r\n  getTableColumns = (currency) => [\r\n    {\r\n      id: 'name',\r\n      label: utils.string.t('app.account'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n    },\r\n    {\r\n      id: 'department',\r\n      label: utils.string.t('app.department'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n    },\r\n    {\r\n      id: 'offices',\r\n      label: utils.string.t('app.office'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n    },\r\n    {\r\n      id: 'value',\r\n      label: utils.string.t('chart.legend.premium', { currency }),\r\n      sort: { type: 'numeric', direction: 'desc' },\r\n    },\r\n  ];\r\n\r\n  formatData = (placements) => {\r\n    const { referenceDataDepartments } = this.props;\r\n\r\n    const data = placements.reduce((list, placement) => {\r\n      const placementId = placement.id;\r\n      const placementName = utils.placement.getInsureds(placement);\r\n      const placementPremiumByCurrency = utils.placement.getPremiumBySettlementCurrency(placement, true, true);\r\n      const placementOffices = utils.placement.getOffices(placement).join(', ');\r\n\r\n      const byCurrency = Object.keys(placementPremiumByCurrency).map((currency) => {\r\n        return {\r\n          id: placementId,\r\n          currency,\r\n          name: placementName,\r\n          department: utils.placement.getDepartmentName(placement, referenceDataDepartments),\r\n          offices: placementOffices,\r\n          label: utils.string.t('format.currency', { value: { number: placementPremiumByCurrency[currency], currency } }),\r\n          datasets: [\r\n            {\r\n              id: placementId,\r\n              value: placementPremiumByCurrency[currency],\r\n              name: placementName,\r\n              object: [placement],\r\n            },\r\n          ],\r\n        };\r\n      });\r\n\r\n      return [...list, ...byCurrency];\r\n    }, []);\r\n\r\n    const grouped = groupBy(data, (item) => item.currency);\r\n\r\n    return Object.keys(grouped).map((currency) => ({\r\n      currency,\r\n      data: grouped[currency],\r\n      columns: this.getTableColumns(currency),\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    const { placements, year } = this.props;\r\n\r\n    // abort\r\n    if (!placements) return null;\r\n\r\n    const filteredPlacements = utils.placement.getByYear(placements, year);\r\n    const dataByCurrency = this.formatData(filteredPlacements);\r\n\r\n    return <ChartPremium id=\"byAccount\" year={year} dataByCurrency={dataByCurrency} table />;\r\n  }\r\n}\r\n\r\nexport default compose(connect(mapStateToProps, null))(ChartPremiumByAccount);\r\n"]},"metadata":{},"sourceType":"module"}