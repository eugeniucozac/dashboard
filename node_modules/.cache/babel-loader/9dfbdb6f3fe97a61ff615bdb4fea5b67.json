{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { addLoader, authLogout, removeLoader, enqueueNotification } from 'stores';\nimport * as utils from 'utils';\nexport var linkMultipleDmsDocuments = function linkMultipleDmsDocuments(params) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/dms.actions.linkMultipleDmsDocuments'\n    };\n    dispatch(linkDmsDocumentsRequest(params));\n    dispatch(addLoader('linkMultipleDmsDocuments'));\n\n    if (!params) {\n      dispatch(linkDmsDocumentsFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Missing params'\n      })));\n      dispatch(removeLoader('linkMultipleDmsDocuments'));\n      return;\n    }\n\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.dmsService,\n      path: 'dms/documet/link',\n      data: params\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(enqueueNotification('dms.search.notifications.successLink', 'success'));\n      dispatch(linkDmsDocumentsSuccess(data));\n      return data;\n    }).catch(function (err) {\n      dispatch(enqueueNotification('dms.search.notifications.failedLink', 'error'));\n      utils.api.handleError(err, defaultError);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(linkDmsDocumentsFailure(err));\n      return err;\n    }).finally(function () {\n      dispatch(removeLoader('linkMultipleDmsDocuments'));\n    });\n  };\n};\nexport var linkDmsDocumentsRequest = function linkDmsDocumentsRequest(data) {\n  return {\n    type: 'DMS_LINK_MULTIPLE_DOCUMENTS_REQUEST',\n    payload: data\n  };\n};\nexport var linkDmsDocumentsSuccess = function linkDmsDocumentsSuccess(data) {\n  return {\n    type: 'DMS_LINK_MULTIPLE_DOCUMENTS_SUCCESS',\n    payload: data\n  };\n};\nexport var linkDmsDocumentsFailure = function linkDmsDocumentsFailure(error) {\n  return {\n    type: 'DMS_LINK_MULTIPLE_DOCUMENTS_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/dms/dms.actions.linkMultipleDmsDocuments.js"],"names":["addLoader","authLogout","removeLoader","enqueueNotification","utils","linkMultipleDmsDocuments","params","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","linkDmsDocumentsRequest","linkDmsDocumentsFailure","message","api","post","token","accessToken","dmsService","path","data","then","response","handleResponse","json","handleNewData","linkDmsDocumentsSuccess","catch","err","handleError","handleUnauthorized","finally","type","payload","error"],"mappings":"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","sourcesContent":["import { addLoader, authLogout, removeLoader, enqueueNotification } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const linkMultipleDmsDocuments = (params) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } } } = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/dms.actions.linkMultipleDmsDocuments',\r\n  };\r\n\r\n  dispatch(linkDmsDocumentsRequest(params));\r\n  dispatch(addLoader('linkMultipleDmsDocuments'));\r\n\r\n  if (!params) {\r\n    dispatch(linkDmsDocumentsFailure({ ...defaultError, message: 'Missing params' }));\r\n    dispatch(removeLoader('linkMultipleDmsDocuments'));\r\n    return;\r\n  }\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.dmsService,\r\n      path: 'dms/documet/link',\r\n      data: params,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(enqueueNotification('dms.search.notifications.successLink', 'success'));\r\n      dispatch(linkDmsDocumentsSuccess(data));\r\n      return data;\r\n    })\r\n    .catch((err) => {\r\n      dispatch(enqueueNotification('dms.search.notifications.failedLink', 'error'));\r\n      utils.api.handleError(err, defaultError);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(linkDmsDocumentsFailure(err));\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('linkMultipleDmsDocuments'));\r\n    });\r\n};\r\n\r\nexport const linkDmsDocumentsRequest = (data) => {\r\n  return {\r\n    type: 'DMS_LINK_MULTIPLE_DOCUMENTS_REQUEST',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const linkDmsDocumentsSuccess = (data) => {\r\n  return {\r\n    type: 'DMS_LINK_MULTIPLE_DOCUMENTS_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const linkDmsDocumentsFailure = (error) => {\r\n  return {\r\n    type: 'DMS_LINK_MULTIPLE_DOCUMENTS_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}