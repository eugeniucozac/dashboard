{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\components\\\\FormCheckbox\\\\FormCheckbox.view.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { Controller } from 'react-hook-form'; // app\n\nimport styles from './FormCheckbox.styles';\nimport { ErrorMessage } from 'components';\nimport * as utils from 'utils'; // mui\n\nimport { Checkbox, FormControlLabel, makeStyles, FormLabel, FormGroup } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nFormCheckboxView.propTypes = {\n  control: PropTypes.object,\n  register: PropTypes.func,\n  value: PropTypes.oneOfType([PropTypes.array, PropTypes.string, PropTypes.number, PropTypes.bool]),\n  name: PropTypes.string.isRequired,\n  options: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    name: PropTypes.string,\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool]).isRequired\n  })),\n  label: PropTypes.string,\n  title: PropTypes.string,\n  hint: PropTypes.string,\n  error: PropTypes.object,\n  disabled: PropTypes.bool,\n  color: PropTypes.oneOf(['primary', 'secondary']),\n  muiComponentProps: PropTypes.object,\n  muiFormGroupProps: PropTypes.object,\n  nestedClasses: PropTypes.shape({\n    root: PropTypes.string,\n    title: PropTypes.string\n  })\n};\nFormCheckboxView.defaultProps = {\n  color: 'primary',\n  muiComponentProps: {},\n  muiFormGroupProps: {},\n  nestedClasses: {}\n};\nexport function FormCheckboxView(_ref) {\n  var _this = this;\n\n  var control = _ref.control,\n      register = _ref.register,\n      value = _ref.value,\n      defaultValue = _ref.defaultValue,\n      name = _ref.name,\n      options = _ref.options,\n      label = _ref.label,\n      title = _ref.title,\n      hint = _ref.hint,\n      error = _ref.error,\n      disabled = _ref.disabled,\n      color = _ref.color,\n      muiComponentProps = _ref.muiComponentProps,\n      muiFormGroupProps = _ref.muiFormGroupProps,\n      nestedClasses = _ref.nestedClasses;\n  var classes = makeStyles(styles, {\n    name: 'FormCheckbox'\n  })();\n  var hasOptions = Boolean(options && utils.generic.isValidArray(options));\n  var hasMultipleOptions = Boolean(hasOptions && options.length >= 2);\n  var hasSingleOption = Boolean(hasOptions && options.length === 1);\n  var hasNoOption = !hasOptions;\n\n  var isCheckedWithoutControl = function isCheckedWithoutControl(option) {\n    return utils.generic.isValidArray(value) && value.includes(option.name);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classnames(classes.checkboxGroup, nestedClasses.root),\n    children: [title && /*#__PURE__*/_jsxDEV(FormLabel, {\n      component: \"legend\",\n      error: Boolean(error),\n      className: classnames(classes.title, nestedClasses.title),\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this), hasMultipleOptions && /*#__PURE__*/_jsxDEV(FormGroup, _objectSpread(_objectSpread({}, muiFormGroupProps), {}, {\n      children: options.map(function (option) {\n        return control && register ? /*#__PURE__*/_jsxDEV(Controller, {\n          control: control,\n          id: option.name,\n          name: option.name,\n          defaultValue: option.value,\n          render: function render(renderProps) {\n            return /*#__PURE__*/_jsxDEV(FormControlLabel, _objectSpread(_objectSpread({}, renderProps), {}, {\n              control: /*#__PURE__*/_jsxDEV(Checkbox, _objectSpread(_objectSpread({\n                color: color\n              }, muiComponentProps), {}, {\n                disabled: disabled || option.disabled,\n                className: classes.checkbox,\n                onChange: function onChange(e) {\n                  renderProps.onChange(e.target.checked);\n\n                  if (utils.generic.isFunction(muiComponentProps === null || muiComponentProps === void 0 ? void 0 : muiComponentProps.onChange)) {\n                    muiComponentProps.onChange(name, e.target.name, e.target.checked);\n                  }\n                },\n                checked: renderProps.value\n              }), void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 23\n              }, _this),\n              disabled: option.disabled,\n              label: option.label\n            }), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 19\n            }, _this);\n          }\n        }, \"\".concat(option.name, \"_\").concat(option.value), false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 15\n        }, _this) : /*#__PURE__*/_jsxDEV(FormControlLabel, {\n          value: option.name,\n          control: /*#__PURE__*/_jsxDEV(Checkbox, _objectSpread(_objectSpread({\n            name: option.name,\n            color: color,\n            disabled: option.disabled\n          }, muiComponentProps), {}, {\n            onChange: function onChange(e) {\n              if (utils.generic.isFunction(muiComponentProps === null || muiComponentProps === void 0 ? void 0 : muiComponentProps.onChange)) {\n                muiComponentProps.onChange(name, e.target.name, e.target.checked);\n              }\n            },\n            className: classes.checkbox,\n            checked: isCheckedWithoutControl(option)\n          }), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 19\n          }, _this),\n          label: option.label\n        }, \"\".concat(name, \"_\").concat(option.name), false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 15\n        }, _this);\n      })\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this), hasSingleOption && (control ? /*#__PURE__*/_jsxDEV(Controller, {\n      control: control,\n      id: \"\".concat(options[0].name),\n      name: options[0].name,\n      disabled: disabled,\n      defaultValue: options[0].value,\n      render: function render(renderProps) {\n        return /*#__PURE__*/_jsxDEV(FormControlLabel, _objectSpread(_objectSpread({}, renderProps), {}, {\n          control: /*#__PURE__*/_jsxDEV(Checkbox, _objectSpread(_objectSpread({\n            color: color\n          }, muiComponentProps), {}, {\n            onChange: function onChange(e) {\n              renderProps.onChange(e.target.checked);\n\n              if (utils.generic.isFunction(muiComponentProps === null || muiComponentProps === void 0 ? void 0 : muiComponentProps.onChange)) {\n                muiComponentProps.onChange(name, e.target.name, e.target.checked);\n              }\n            },\n            checked: renderProps.value,\n            className: classes.checkbox\n          }), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 19\n          }, _this),\n          label: options[0].label\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 15\n        }, _this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(FormControlLabel, {\n      value: options[0].value,\n      control: /*#__PURE__*/_jsxDEV(Checkbox, _objectSpread(_objectSpread({\n        name: options[0].name,\n        color: color\n      }, muiComponentProps), {}, {\n        onChange: function onChange(e) {\n          if (utils.generic.isFunction(muiComponentProps === null || muiComponentProps === void 0 ? void 0 : muiComponentProps.onChange)) {\n            muiComponentProps.onChange(name, e.target.name, e.target.checked);\n          }\n        },\n        className: classes.checkbox,\n        checked: isCheckedWithoutControl(options[0])\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 15\n      }, this),\n      label: options[0].label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 11\n    }, this)), hasNoOption && (control ? /*#__PURE__*/_jsxDEV(Controller, {\n      control: control,\n      id: name,\n      name: name,\n      defaultValue: defaultValue,\n      render: function render(renderProps) {\n        return /*#__PURE__*/_jsxDEV(FormControlLabel, _objectSpread(_objectSpread({}, renderProps), {}, {\n          disabled: disabled,\n          control: /*#__PURE__*/_jsxDEV(Checkbox, _objectSpread(_objectSpread({\n            name: name,\n            checked: renderProps.value || false,\n            color: color\n          }, muiComponentProps), {}, {\n            onChange: function onChange(e) {\n              renderProps.onChange(e.target.checked);\n\n              if (utils.generic.isFunction(muiComponentProps === null || muiComponentProps === void 0 ? void 0 : muiComponentProps.onChange)) {\n                muiComponentProps.onChange(e.target.name, e.target.checked);\n              }\n            },\n            className: classes.checkbox\n          }), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 19\n          }, _this),\n          label: label\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 15\n        }, _this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(FormControlLabel, {\n      control: /*#__PURE__*/_jsxDEV(Checkbox, _objectSpread(_objectSpread({\n        name: name,\n        checked: value,\n        color: color\n      }, muiComponentProps), {}, {\n        onChange: function onChange(e) {\n          if (utils.generic.isFunction(muiComponentProps === null || muiComponentProps === void 0 ? void 0 : muiComponentProps.onChange)) {\n            muiComponentProps.onChange(e.target.name, e.target.checked);\n          }\n        },\n        className: classes.checkbox\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 15\n      }, this),\n      label: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 11\n    }, this)), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      className: classes.errorMessage,\n      error: error,\n      hint: hint\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n_c = FormCheckboxView;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormCheckboxView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/FormCheckbox/FormCheckbox.view.js"],"names":["React","PropTypes","classnames","Controller","styles","ErrorMessage","utils","Checkbox","FormControlLabel","makeStyles","FormLabel","FormGroup","FormCheckboxView","propTypes","control","object","register","func","value","oneOfType","array","string","number","bool","name","isRequired","options","arrayOf","shape","label","title","hint","error","disabled","color","oneOf","muiComponentProps","muiFormGroupProps","nestedClasses","root","defaultProps","defaultValue","classes","hasOptions","Boolean","generic","isValidArray","hasMultipleOptions","length","hasSingleOption","hasNoOption","isCheckedWithoutControl","option","includes","checkboxGroup","map","renderProps","checkbox","e","onChange","target","checked","isFunction","errorMessage"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames';\r\nimport { Controller } from 'react-hook-form';\r\n\r\n// app\r\nimport styles from './FormCheckbox.styles';\r\nimport { ErrorMessage } from 'components';\r\nimport * as utils from 'utils';\r\n\r\n// mui\r\nimport { Checkbox, FormControlLabel, makeStyles, FormLabel, FormGroup } from '@material-ui/core';\r\n\r\nFormCheckboxView.propTypes = {\r\n  control: PropTypes.object,\r\n  register: PropTypes.func,\r\n  value: PropTypes.oneOfType([PropTypes.array, PropTypes.string, PropTypes.number, PropTypes.bool]),\r\n  name: PropTypes.string.isRequired,\r\n  options: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      label: PropTypes.string.isRequired,\r\n      name: PropTypes.string,\r\n      value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool]).isRequired,\r\n    })\r\n  ),\r\n  label: PropTypes.string,\r\n  title: PropTypes.string,\r\n  hint: PropTypes.string,\r\n  error: PropTypes.object,\r\n  disabled: PropTypes.bool,\r\n  color: PropTypes.oneOf(['primary', 'secondary']),\r\n  muiComponentProps: PropTypes.object,\r\n  muiFormGroupProps: PropTypes.object,\r\n  nestedClasses: PropTypes.shape({\r\n    root: PropTypes.string,\r\n    title: PropTypes.string,\r\n  }),\r\n};\r\n\r\nFormCheckboxView.defaultProps = {\r\n  color: 'primary',\r\n  muiComponentProps: {},\r\n  muiFormGroupProps: {},\r\n  nestedClasses: {},\r\n};\r\n\r\nexport function FormCheckboxView({\r\n  control,\r\n  register,\r\n  value,\r\n  defaultValue,\r\n  name,\r\n  options,\r\n  label,\r\n  title,\r\n  hint,\r\n  error,\r\n  disabled,\r\n  color,\r\n  muiComponentProps,\r\n  muiFormGroupProps,\r\n  nestedClasses,\r\n}) {\r\n  const classes = makeStyles(styles, { name: 'FormCheckbox' })();\r\n\r\n  const hasOptions = Boolean(options && utils.generic.isValidArray(options));\r\n  const hasMultipleOptions = Boolean(hasOptions && options.length >= 2);\r\n  const hasSingleOption = Boolean(hasOptions && options.length === 1);\r\n  const hasNoOption = !hasOptions;\r\n\r\n  const isCheckedWithoutControl = (option) => {\r\n    return utils.generic.isValidArray(value) && value.includes(option.name);\r\n  };\r\n\r\n  return (\r\n    <div className={classnames(classes.checkboxGroup, nestedClasses.root)}>\r\n      {title && (\r\n        <FormLabel component=\"legend\" error={Boolean(error)} className={classnames(classes.title, nestedClasses.title)}>\r\n          {title}\r\n        </FormLabel>\r\n      )}\r\n\r\n      {hasMultipleOptions && (\r\n        <FormGroup {...muiFormGroupProps}>\r\n          {options.map((option) =>\r\n            control && register ? (\r\n              <Controller\r\n                control={control}\r\n                id={option.name}\r\n                name={option.name}\r\n                defaultValue={option.value}\r\n                key={`${option.name}_${option.value}`}\r\n                render={(renderProps) => (\r\n                  <FormControlLabel\r\n                    {...renderProps}\r\n                    control={\r\n                      <Checkbox\r\n                        color={color}\r\n                        {...muiComponentProps}\r\n                        disabled={disabled || option.disabled}\r\n                        className={classes.checkbox}\r\n                        onChange={(e) => {\r\n                          renderProps.onChange(e.target.checked);\r\n\r\n                          if (utils.generic.isFunction(muiComponentProps?.onChange)) {\r\n                            muiComponentProps.onChange(name, e.target.name, e.target.checked);\r\n                          }\r\n                        }}\r\n                        checked={renderProps.value}\r\n                      />\r\n                    }\r\n                    disabled={option.disabled}\r\n                    label={option.label}\r\n                  />\r\n                )}\r\n              />\r\n            ) : (\r\n              <FormControlLabel\r\n                key={`${name}_${option.name}`}\r\n                value={option.name}\r\n                control={\r\n                  <Checkbox\r\n                    name={option.name}\r\n                    color={color}\r\n                    disabled={option.disabled}\r\n                    {...muiComponentProps}\r\n                    onChange={(e) => {\r\n                      if (utils.generic.isFunction(muiComponentProps?.onChange)) {\r\n                        muiComponentProps.onChange(name, e.target.name, e.target.checked);\r\n                      }\r\n                    }}\r\n                    className={classes.checkbox}\r\n                    checked={isCheckedWithoutControl(option)}\r\n                  />\r\n                }\r\n                label={option.label}\r\n              />\r\n            )\r\n          )}\r\n        </FormGroup>\r\n      )}\r\n\r\n      {hasSingleOption &&\r\n        (control ? (\r\n          <Controller\r\n            control={control}\r\n            id={`${options[0].name}`}\r\n            name={options[0].name}\r\n            disabled={disabled}\r\n            defaultValue={options[0].value}\r\n            render={(renderProps) => (\r\n              <FormControlLabel\r\n                {...renderProps}\r\n                control={\r\n                  <Checkbox\r\n                    color={color}\r\n                    {...muiComponentProps}\r\n                    onChange={(e) => {\r\n                      renderProps.onChange(e.target.checked);\r\n\r\n                      if (utils.generic.isFunction(muiComponentProps?.onChange)) {\r\n                        muiComponentProps.onChange(name, e.target.name, e.target.checked);\r\n                      }\r\n                    }}\r\n                    checked={renderProps.value}\r\n                    className={classes.checkbox}\r\n                  />\r\n                }\r\n                label={options[0].label}\r\n              />\r\n            )}\r\n          />\r\n        ) : (\r\n          <FormControlLabel\r\n            value={options[0].value}\r\n            control={\r\n              <Checkbox\r\n                name={options[0].name}\r\n                color={color}\r\n                {...muiComponentProps}\r\n                onChange={(e) => {\r\n                  if (utils.generic.isFunction(muiComponentProps?.onChange)) {\r\n                    muiComponentProps.onChange(name, e.target.name, e.target.checked);\r\n                  }\r\n                }}\r\n                className={classes.checkbox}\r\n                checked={isCheckedWithoutControl(options[0])}\r\n              />\r\n            }\r\n            label={options[0].label}\r\n          />\r\n        ))}\r\n\r\n      {hasNoOption &&\r\n        (control ? (\r\n          <Controller\r\n            control={control}\r\n            id={name}\r\n            name={name}\r\n            defaultValue={defaultValue}\r\n            render={(renderProps) => (\r\n              <FormControlLabel\r\n                {...renderProps}\r\n                disabled={disabled}\r\n                control={\r\n                  <Checkbox\r\n                    name={name}\r\n                    checked={renderProps.value || false}\r\n                    color={color}\r\n                    {...muiComponentProps}\r\n                    onChange={(e) => {\r\n                      renderProps.onChange(e.target.checked);\r\n\r\n                      if (utils.generic.isFunction(muiComponentProps?.onChange)) {\r\n                        muiComponentProps.onChange(e.target.name, e.target.checked);\r\n                      }\r\n                    }}\r\n                    className={classes.checkbox}\r\n                  />\r\n                }\r\n                label={label}\r\n              />\r\n            )}\r\n          />\r\n        ) : (\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                name={name}\r\n                checked={value}\r\n                color={color}\r\n                {...muiComponentProps}\r\n                onChange={(e) => {\r\n                  if (utils.generic.isFunction(muiComponentProps?.onChange)) {\r\n                    muiComponentProps.onChange(e.target.name, e.target.checked);\r\n                  }\r\n                }}\r\n                className={classes.checkbox}\r\n              />\r\n            }\r\n            label={label}\r\n          />\r\n        ))}\r\n\r\n      <ErrorMessage className={classes.errorMessage} error={error} hint={hint} />\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}