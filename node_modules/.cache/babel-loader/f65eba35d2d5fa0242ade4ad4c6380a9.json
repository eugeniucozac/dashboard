{"ast":null,"code":"import \"core-js/modules/es.promise.finally\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { addLoader, authLogout, enqueueNotification, removeLoader, hideModal } from 'stores';\nimport * as utils from 'utils';\nimport isEmpty from 'lodash/isEmpty';\nimport get from 'lodash/get';\nexport var postClient = function postClient(body, isCreateClientModal) {\n  var isEdit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/risk.actions.postClient',\n      message: 'Data missing for POST request'\n    };\n    dispatch(postClientRequest(body));\n    dispatch(addLoader('postClient'));\n    var success = isEdit ? 'postEditSuccess' : 'postSuccess';\n    var successNotification = \"notification.client.\".concat(success);\n\n    if (!body || isEmpty(body)) {\n      dispatch(postClientFailure(defaultError));\n      dispatch(enqueueNotification('notification.generic.request', 'error'));\n      dispatch(removeLoader('postClient'));\n      return;\n    }\n\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.auth,\n      path: 'api/v1/clients',\n      data: _objectSpread(_objectSpread({}, (body === null || body === void 0 ? void 0 : body.id) && {\n        id: body.id\n      }), {}, {\n        name: body.name || '',\n        address: {\n          street: body.street || '',\n          city: body.city || '',\n          zipCode: body.zipCode || '',\n          county: body.county || '',\n          state: body.state || '',\n          country: get(body, 'country.value', ''),\n          distanceToCoast: ''\n        }\n      })\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (data) {\n      dispatch(postClientSuccess(data, isEdit));\n      dispatch(enqueueNotification(successNotification, 'success'));\n      return data;\n    })[\"catch\"](function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API post error (risk.postClient)'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(postClientFailure(err));\n      dispatch(enqueueNotification(utils.api.getErrorMessage(err), 'error'));\n      return err;\n    })[\"finally\"](function () {\n      dispatch(hideModal(isCreateClientModal ? isEdit ? 'EDIT_PRODUCTS_CLIENT' : 'ADD_PRODUCTS_CLIENT' : undefined));\n      dispatch(removeLoader('postClient'));\n    });\n  };\n};\nexport var postClientRequest = function postClientRequest(formData) {\n  return {\n    type: 'CLIENT_POST_REQUEST',\n    payload: formData\n  };\n};\nexport var postClientSuccess = function postClientSuccess(responseData, isEdit) {\n  return {\n    type: isEdit ? 'CLIENT_POST_EDIT_SUCCESS' : 'CLIENT_POST_SUCCESS',\n    payload: responseData\n  };\n};\nexport var postClientFailure = function postClientFailure(error) {\n  return {\n    type: 'CLIENT_POST_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/party/party.actions.postClient.js"],"names":["addLoader","authLogout","enqueueNotification","removeLoader","hideModal","utils","isEmpty","get","postClient","body","isCreateClientModal","isEdit","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","message","postClientRequest","success","successNotification","postClientFailure","api","post","token","accessToken","path","data","id","name","address","street","city","zipCode","county","state","country","distanceToCoast","then","response","handleResponse","postClientSuccess","err","errorParams","handleError","handleUnauthorized","getErrorMessage","undefined","formData","type","payload","responseData","error"],"mappings":"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","sourcesContent":["import { addLoader, authLogout, enqueueNotification, removeLoader, hideModal } from 'stores';\r\nimport * as utils from 'utils';\r\nimport isEmpty from 'lodash/isEmpty';\r\nimport get from 'lodash/get';\r\n\r\nexport const postClient =\r\n  (body, isCreateClientModal, isEdit = false) =>\r\n  (dispatch, getState) => {\r\n    // prettier-ignore\r\n    const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n    const defaultError = {\r\n      file: 'stores/risk.actions.postClient',\r\n      message: 'Data missing for POST request',\r\n    };\r\n\r\n    dispatch(postClientRequest(body));\r\n    dispatch(addLoader('postClient'));\r\n\r\n    const success = isEdit ? 'postEditSuccess' : 'postSuccess';\r\n    const successNotification = `notification.client.${success}`;\r\n\r\n    if (!body || isEmpty(body)) {\r\n      dispatch(postClientFailure(defaultError));\r\n      dispatch(enqueueNotification('notification.generic.request', 'error'));\r\n      dispatch(removeLoader('postClient'));\r\n      return;\r\n    }\r\n\r\n    return utils.api\r\n      .post({\r\n        token: auth.accessToken,\r\n        endpoint: endpoint.auth,\r\n        path: 'api/v1/clients',\r\n        data: {\r\n          ...(body?.id && { id: body.id }),\r\n          name: body.name || '',\r\n          address: {\r\n            street: body.street || '',\r\n            city: body.city || '',\r\n            zipCode: body.zipCode || '',\r\n            county: body.county || '',\r\n            state: body.state || '',\r\n            country: get(body, 'country.value', ''),\r\n            distanceToCoast: '',\r\n          },\r\n        },\r\n      })\r\n      .then((response) => utils.api.handleResponse(response))\r\n      .then((data) => {\r\n        dispatch(postClientSuccess(data, isEdit));\r\n        dispatch(enqueueNotification(successNotification, 'success'));\r\n        return data;\r\n      })\r\n      .catch((err) => {\r\n        const errorParams = {\r\n          ...defaultError,\r\n          message: 'API post error (risk.postClient)',\r\n        };\r\n\r\n        utils.api.handleError(err, errorParams);\r\n        utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n        dispatch(postClientFailure(err));\r\n        dispatch(enqueueNotification(utils.api.getErrorMessage(err), 'error'));\r\n        return err;\r\n      })\r\n      .finally(() => {\r\n        dispatch(hideModal(isCreateClientModal ? (isEdit ? 'EDIT_PRODUCTS_CLIENT' : 'ADD_PRODUCTS_CLIENT') : undefined));\r\n        dispatch(removeLoader('postClient'));\r\n      });\r\n  };\r\n\r\nexport const postClientRequest = (formData) => {\r\n  return {\r\n    type: 'CLIENT_POST_REQUEST',\r\n    payload: formData,\r\n  };\r\n};\r\n\r\nexport const postClientSuccess = (responseData, isEdit) => {\r\n  return {\r\n    type: isEdit ? 'CLIENT_POST_EDIT_SUCCESS' : 'CLIENT_POST_SUCCESS',\r\n    payload: responseData,\r\n  };\r\n};\r\n\r\nexport const postClientFailure = (error) => {\r\n  return {\r\n    type: 'CLIENT_POST_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}