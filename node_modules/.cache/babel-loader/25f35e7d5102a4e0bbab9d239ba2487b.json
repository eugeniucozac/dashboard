{"ast":null,"code":"// app\nimport { addLoader, authLogout, enqueueNotification, removeLoader } from 'stores';\nimport * as utils from 'utils';\nexport var uploadReportingFolders = function uploadReportingFolders(_ref) {\n  var payload = _ref.payload,\n      reportGroupId = _ref.reportGroupId;\n  return function (dispatch, getState) {\n    var state = getState(); // prettier-ignore\n\n    var auth = state.user.auth,\n        endpoint = state.config.vars.endpoint;\n    dispatch(postFolderUploadRequest({\n      payload: payload,\n      reportGroupId: reportGroupId\n    }));\n    dispatch(addLoader('uploadReportingFolders'));\n\n    if (!(payload === null || payload === void 0 ? void 0 : payload.value) || !reportGroupId) {\n      dispatch(enqueueNotification('notification.folder.fail', 'error'));\n      dispatch(removeLoader('uploadReportingFolders'));\n      return;\n    }\n\n    var data = {\n      folderName: payload === null || payload === void 0 ? void 0 : payload.value\n    };\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.document,\n      path: \"api/report-group/\".concat(reportGroupId, \"/folder\"),\n      data: data\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleData(json);\n    }).then(function (data) {\n      dispatch({\n        type: 'DOCUMENT_UPLOAD_SUCCESS_REPORTING',\n        payload: data\n      });\n    }).catch(function (err) {\n      var errorParams = {\n        file: 'stores/document.actions',\n        message: 'API multipart post error (document)'\n      };\n      dispatch(postFolderUploadFailure(err));\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(enqueueNotification('notification.folder.fail', 'error'));\n    }).finally(function () {\n      dispatch(removeLoader('uploadReportingFolders'));\n      return;\n    });\n  };\n};\nexport var postFolderUploadRequest = function postFolderUploadRequest(payload) {\n  return {\n    type: 'RERPORTING_FOLDERS_UPLOAD_POST_REQUEST',\n    payload: payload\n  };\n};\nexport var postFolderUploadFailure = function postFolderUploadFailure(error) {\n  return {\n    type: 'RERPORTING_FOLDERS_UPLOAD_POST_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/reporting/reporting.actions.uploadFolders.js"],"names":["addLoader","authLogout","enqueueNotification","removeLoader","utils","uploadReportingFolders","payload","reportGroupId","dispatch","getState","state","auth","user","endpoint","config","vars","postFolderUploadRequest","value","data","folderName","api","post","token","accessToken","document","path","then","response","handleResponse","json","handleData","type","catch","err","errorParams","file","message","postFolderUploadFailure","handleError","handleUnauthorized","finally","error"],"mappings":"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","sourcesContent":["// app\r\nimport { addLoader, authLogout, enqueueNotification, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const uploadReportingFolders =\r\n  ({ payload, reportGroupId }) =>\r\n  (dispatch, getState) => {\r\n    const state = getState();\r\n\r\n    // prettier-ignore\r\n    const { user: { auth }, config: { vars: { endpoint } } } = state;\r\n\r\n    dispatch(postFolderUploadRequest({ payload, reportGroupId }));\r\n    dispatch(addLoader('uploadReportingFolders'));\r\n\r\n    if (!payload?.value || !reportGroupId) {\r\n      dispatch(enqueueNotification('notification.folder.fail', 'error'));\r\n      dispatch(removeLoader('uploadReportingFolders'));\r\n      return;\r\n    }\r\n\r\n    const data = {\r\n      folderName: payload?.value,\r\n    };\r\n\r\n    return utils.api\r\n      .post({\r\n        token: auth.accessToken,\r\n        endpoint: endpoint.document,\r\n        path: `api/report-group/${reportGroupId}/folder`,\r\n        data,\r\n      })\r\n      .then((response) => utils.api.handleResponse(response))\r\n      .then((json) => utils.api.handleData(json))\r\n      .then((data) => {\r\n        dispatch({ type: 'DOCUMENT_UPLOAD_SUCCESS_REPORTING', payload: data });\r\n      })\r\n      .catch((err) => {\r\n        const errorParams = {\r\n          file: 'stores/document.actions',\r\n          message: 'API multipart post error (document)',\r\n        };\r\n        dispatch(postFolderUploadFailure(err));\r\n        utils.api.handleError(err, errorParams);\r\n        utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n        dispatch(enqueueNotification('notification.folder.fail', 'error'));\r\n      })\r\n      .finally(() => {\r\n        dispatch(removeLoader('uploadReportingFolders'));\r\n        return;\r\n      });\r\n  };\r\n\r\nexport const postFolderUploadRequest = (payload) => {\r\n  return {\r\n    type: 'RERPORTING_FOLDERS_UPLOAD_POST_REQUEST',\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const postFolderUploadFailure = (error) => {\r\n  return {\r\n    type: 'RERPORTING_FOLDERS_UPLOAD_POST_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}