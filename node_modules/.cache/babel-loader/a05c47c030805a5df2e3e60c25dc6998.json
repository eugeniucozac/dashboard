{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ClaimsUploadViewSearchDocs\\\\ClaimsUploadViewSearchDocs.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport merge from 'lodash/merge'; // app\n\nimport ClaimsUploadViewSearchDocsView from './ClaimsUploadViewSearchDocs.view';\nimport * as constants from 'consts';\nimport * as utils from 'utils';\nimport { getViewTableDocuments, selectorDmsViewFiles, selectContextSubType, showModal } from 'stores';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nClaimsUploadViewSearchDocs.propTypes = {\n  viewOptions: PropTypes.shape({\n    disabled: PropTypes.bool,\n    canUpload: PropTypes.bool,\n    canSearch: PropTypes.bool,\n    canUnlink: PropTypes.bool,\n    canDelete: PropTypes.bool,\n    canEditMetaData: PropTypes.bool,\n    canMultiSelect: PropTypes.bool\n  }).isRequired,\n  searchOptions: PropTypes.shape({\n    disabled: PropTypes.bool\n  }).isRequired,\n  defaultTab: PropTypes.string,\n  isTabView: PropTypes.bool,\n  fnolViewOptions: PropTypes.shape({\n    isClaimsFNOL: PropTypes.bool,\n    isClaimsUploadDisabled: PropTypes.bool,\n    isDmsDocumentMenuDisabled: PropTypes.bool,\n    claimsUploadWarningMsg: PropTypes.string,\n    claimsSearchDocumentsTxt: PropTypes.string,\n    uploadDocumentsTitle: PropTypes.string\n  }),\n  refData: PropTypes.object.isRequired,\n  refIdName: PropTypes.string.isRequired,\n  dmsContext: PropTypes.string.isRequired,\n  documentTypeKey: PropTypes.oneOf(Object.values(constants.DMS_DOCUMENT_TYPE_SECTION_KEYS)),\n  sourceId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  parentLossRef: PropTypes.string,\n  handlers: PropTypes.shape({\n    onClosingUploadModal: PropTypes.func\n  }),\n  docList: PropTypes.array\n};\nClaimsUploadViewSearchDocs.defaultProps = {\n  viewOptions: {},\n  searchOptions: {},\n  isTabView: true,\n  defaultTab: constants.DMS_VIEW_TAB_VIEW,\n  fnolViewOptions: {\n    isClaimsFNOL: false,\n    isClaimsUploadDisabled: false,\n    isDmsDocumentMenuDisabled: false,\n    claimsSearchDocumentsTxt: utils.string.t('dms.view.searchDocuments')\n  },\n  docList: [],\n  handlers: {\n    onClosingUploadModal: function onClosingUploadModal() {}\n  }\n};\nexport default function ClaimsUploadViewSearchDocs(_ref) {\n  _s();\n\n  var viewOptions = _ref.viewOptions,\n      searchOptions = _ref.searchOptions,\n      isTabView = _ref.isTabView,\n      defaultTab = _ref.defaultTab,\n      fnolViewOptions = _ref.fnolViewOptions,\n      refData = _ref.refData,\n      refIdName = _ref.refIdName,\n      dmsContext = _ref.dmsContext,\n      documentTypeKey = _ref.documentTypeKey,\n      sourceId = _ref.sourceId,\n      parentLossRef = _ref.parentLossRef,\n      docList = _ref.docList,\n      handlers = _ref.handlers;\n  var dispatch = useDispatch();\n  var viewOptionsMerged = merge({\n    disabled: false,\n    upload: true,\n    search: true,\n    unlink: true,\n    delete: true,\n    editMetaData: true,\n    multiSelect: true\n  }, viewOptions);\n  var searchOptionsMerged = merge({\n    disabled: false\n  }, searchOptions);\n\n  var _useState = useState(defaultTab),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedTab = _useState2[0],\n      setSelectedTab = _useState2[1];\n\n  var viewDocumentList = useSelector(selectorDmsViewFiles);\n  var contextSubType = useSelector(selectContextSubType); // pp details\n\n  var policyRef = refData === null || refData === void 0 ? void 0 : refData.policyRef;\n  var instructionId = refData === null || refData === void 0 ? void 0 : refData.instructionId;\n  var referenceId = refData === null || refData === void 0 ? void 0 : refData[refIdName];\n  var sectionType = dmsContext;\n  var isAutoSearchScreen = defaultTab === constants.DMS_VIEW_TAB_SEARCH;\n  useEffect(function () {\n    if (checkisSubContext()) {\n      getViewTableDocsForSubContext();\n    } else if (referenceId && sectionType && (docList === null || docList === void 0 ? void 0 : docList.length) === 0) {\n      dispatch(getViewTableDocuments(_objectSpread({\n        referenceId: referenceId,\n        sectionType: sectionType,\n        documentTypeKey: documentTypeKey,\n        parentLossRef: parentLossRef\n      }, policyRef && instructionId && {\n        policyRef: policyRef,\n        instructionId: instructionId\n      })));\n    }\n  }, [referenceId, sectionType, contextSubType === null || contextSubType === void 0 ? void 0 : contextSubType.caseIncidentNotesID]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    // Cleanup\n    return function () {\n      utils.dms.resetDmsFiles(dispatch);\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var onUnlinkorDeleteSuccess = function onUnlinkorDeleteSuccess() {\n    dispatch(getViewTableDocuments(_objectSpread({\n      referenceId: referenceId,\n      sectionType: sectionType,\n      documentTypeKey: documentTypeKey,\n      parentLossRef: parentLossRef\n    }, policyRef && instructionId && {\n      policyRef: policyRef,\n      instructionId: instructionId\n    })));\n  };\n\n  var tabs = [{\n    value: constants.DMS_VIEW_TAB_VIEW,\n    label: utils.string.t('dms.wrapper.tabs.viewDocuments'),\n    disabled: viewOptionsMerged.disabled\n  }, {\n    value: constants.DMS_VIEW_TAB_SEARCH,\n    label: utils.string.t('dms.wrapper.tabs.search'),\n    disabled: searchOptionsMerged.disabled\n  }];\n\n  var selectTab = function selectTab(tabName) {\n    setSelectedTab(tabName);\n\n    if (tabName === constants.DMS_VIEW_TAB_VIEW) {\n      if (referenceId && sectionType) {\n        dispatch(getViewTableDocuments(_objectSpread({\n          referenceId: referenceId,\n          sectionType: sectionType,\n          documentTypeKey: documentTypeKey\n        }, policyRef && instructionId && {\n          policyRef: policyRef,\n          instructionId: instructionId\n        })));\n      }\n    }\n  };\n\n  var checkisSubContext = function checkisSubContext() {\n    var type = contextSubType.type;\n    return type && constants.DMS_TASK_CONTEXT_ALL_TYPES.includes(type);\n  };\n\n  var getViewTableDocsForSubContext = function getViewTableDocsForSubContext() {\n    var caseIncidentNotesID = contextSubType.caseIncidentNotesID,\n        refId = contextSubType.refId;\n\n    if (caseIncidentNotesID) {\n      var refIdForSubContext = refId + '-' + caseIncidentNotesID;\n      dispatch(getViewTableDocuments(_objectSpread({\n        referenceId: refIdForSubContext,\n        sectionType: sectionType,\n        documentTypeKey: documentTypeKey\n      }, policyRef && instructionId && {\n        policyRef: policyRef,\n        instructionId: instructionId\n      })));\n    } else {\n      dispatch(getViewTableDocuments(_objectSpread({\n        referenceId: refId,\n        sectionType: sectionType,\n        documentTypeKey: documentTypeKey\n      }, policyRef && instructionId && {\n        policyRef: policyRef,\n        instructionId: instructionId\n      })));\n    }\n  };\n\n  var onLink = function onLink() {\n    var docData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var resetToDefaultValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\n    dispatch(showModal({\n      component: 'DMS_LINK_TO_LOSS_AND_CLAIM',\n      props: {\n        fullWidth: true,\n        title: utils.string.t('dms.view.linkToLossAndClaim.title'),\n        maxWidth: 'xs',\n        componentProps: {\n          docData: docData,\n          resetToDefaultValues: resetToDefaultValues\n        }\n      }\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(ClaimsUploadViewSearchDocsView, {\n    isTabView: isTabView,\n    tabs: tabs,\n    selectedTab: selectedTab,\n    isAutoSearchScreen: isAutoSearchScreen,\n    viewOptions: viewOptionsMerged,\n    fnolViewOptions: fnolViewOptions,\n    context: dmsContext,\n    documentTypeKey: documentTypeKey,\n    referenceId: referenceId,\n    sourceId: sourceId,\n    parentLossRef: parentLossRef,\n    viewDocumentList: (docList === null || docList === void 0 ? void 0 : docList.length) > 0 ? docList : viewDocumentList,\n    handlers: {\n      selectTab: selectTab,\n      onUnlinkorDeleteSuccess: onUnlinkorDeleteSuccess,\n      onClosingUploadModal: handlers.onClosingUploadModal,\n      onLink: onLink\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 224,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ClaimsUploadViewSearchDocs, \"iTAkqbLt37Du+IV5IAWqxvPe+ZE=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = ClaimsUploadViewSearchDocs;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimsUploadViewSearchDocs\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ClaimsUploadViewSearchDocs/ClaimsUploadViewSearchDocs.js"],"names":["React","useState","useEffect","PropTypes","useDispatch","useSelector","merge","ClaimsUploadViewSearchDocsView","constants","utils","getViewTableDocuments","selectorDmsViewFiles","selectContextSubType","showModal","ClaimsUploadViewSearchDocs","propTypes","viewOptions","shape","disabled","bool","canUpload","canSearch","canUnlink","canDelete","canEditMetaData","canMultiSelect","isRequired","searchOptions","defaultTab","string","isTabView","fnolViewOptions","isClaimsFNOL","isClaimsUploadDisabled","isDmsDocumentMenuDisabled","claimsUploadWarningMsg","claimsSearchDocumentsTxt","uploadDocumentsTitle","refData","object","refIdName","dmsContext","documentTypeKey","oneOf","Object","values","DMS_DOCUMENT_TYPE_SECTION_KEYS","sourceId","oneOfType","number","parentLossRef","handlers","onClosingUploadModal","func","docList","array","defaultProps","DMS_VIEW_TAB_VIEW","t","dispatch","viewOptionsMerged","upload","search","unlink","delete","editMetaData","multiSelect","searchOptionsMerged","selectedTab","setSelectedTab","viewDocumentList","contextSubType","policyRef","instructionId","referenceId","sectionType","isAutoSearchScreen","DMS_VIEW_TAB_SEARCH","checkisSubContext","getViewTableDocsForSubContext","length","caseIncidentNotesID","dms","resetDmsFiles","onUnlinkorDeleteSuccess","tabs","value","label","selectTab","tabName","type","DMS_TASK_CONTEXT_ALL_TYPES","includes","refId","refIdForSubContext","onLink","docData","resetToDefaultValues","component","props","fullWidth","title","maxWidth","componentProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport merge from 'lodash/merge';\r\n\r\n// app\r\nimport ClaimsUploadViewSearchDocsView from './ClaimsUploadViewSearchDocs.view';\r\nimport * as constants from 'consts';\r\nimport * as utils from 'utils';\r\nimport { getViewTableDocuments, selectorDmsViewFiles, selectContextSubType, showModal } from 'stores';\r\n\r\nClaimsUploadViewSearchDocs.propTypes = {\r\n  viewOptions: PropTypes.shape({\r\n    disabled: PropTypes.bool,\r\n    canUpload: PropTypes.bool,\r\n    canSearch: PropTypes.bool,\r\n    canUnlink: PropTypes.bool,\r\n    canDelete: PropTypes.bool,\r\n    canEditMetaData: PropTypes.bool,\r\n    canMultiSelect: PropTypes.bool,\r\n  }).isRequired,\r\n  searchOptions: PropTypes.shape({\r\n    disabled: PropTypes.bool,\r\n  }).isRequired,\r\n  defaultTab: PropTypes.string,\r\n  isTabView: PropTypes.bool,\r\n  fnolViewOptions: PropTypes.shape({\r\n    isClaimsFNOL: PropTypes.bool,\r\n    isClaimsUploadDisabled: PropTypes.bool,\r\n    isDmsDocumentMenuDisabled: PropTypes.bool,\r\n    claimsUploadWarningMsg: PropTypes.string,\r\n    claimsSearchDocumentsTxt: PropTypes.string,\r\n    uploadDocumentsTitle: PropTypes.string,\r\n  }),\r\n  refData: PropTypes.object.isRequired,\r\n  refIdName: PropTypes.string.isRequired,\r\n  dmsContext: PropTypes.string.isRequired,\r\n  documentTypeKey: PropTypes.oneOf(Object.values(constants.DMS_DOCUMENT_TYPE_SECTION_KEYS)),\r\n  sourceId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n  parentLossRef: PropTypes.string,\r\n  handlers: PropTypes.shape({\r\n    onClosingUploadModal: PropTypes.func,\r\n  }),\r\n  docList: PropTypes.array,\r\n};\r\n\r\nClaimsUploadViewSearchDocs.defaultProps = {\r\n  viewOptions: {},\r\n  searchOptions: {},\r\n  isTabView: true,\r\n  defaultTab: constants.DMS_VIEW_TAB_VIEW,\r\n  fnolViewOptions: {\r\n    isClaimsFNOL: false,\r\n    isClaimsUploadDisabled: false,\r\n    isDmsDocumentMenuDisabled: false,\r\n    claimsSearchDocumentsTxt: utils.string.t('dms.view.searchDocuments'),\r\n  },\r\n  docList: [],\r\n  handlers: {\r\n    onClosingUploadModal: () => {},\r\n  },\r\n};\r\n\r\nexport default function ClaimsUploadViewSearchDocs({\r\n  viewOptions,\r\n  searchOptions,\r\n  isTabView,\r\n  defaultTab,\r\n  fnolViewOptions,\r\n  refData,\r\n  refIdName,\r\n  dmsContext,\r\n  documentTypeKey,\r\n  sourceId,\r\n  parentLossRef,\r\n  docList,\r\n  handlers,\r\n}) {\r\n  const dispatch = useDispatch();\r\n\r\n  const viewOptionsMerged = merge(\r\n    {\r\n      disabled: false,\r\n      upload: true,\r\n      search: true,\r\n      unlink: true,\r\n      delete: true,\r\n      editMetaData: true,\r\n      multiSelect: true,\r\n    },\r\n    viewOptions\r\n  );\r\n\r\n  const searchOptionsMerged = merge(\r\n    {\r\n      disabled: false,\r\n    },\r\n    searchOptions\r\n  );\r\n\r\n  const [selectedTab, setSelectedTab] = useState(defaultTab);\r\n\r\n  const viewDocumentList = useSelector(selectorDmsViewFiles);\r\n  const contextSubType = useSelector(selectContextSubType);\r\n\r\n  // pp details\r\n  const policyRef = refData?.policyRef;\r\n  const instructionId = refData?.instructionId;\r\n\r\n  const referenceId = refData?.[refIdName];\r\n  const sectionType = dmsContext;\r\n  const isAutoSearchScreen = defaultTab === constants.DMS_VIEW_TAB_SEARCH;\r\n\r\n  useEffect(() => {\r\n    if (checkisSubContext()) {\r\n      getViewTableDocsForSubContext();\r\n    } else if (referenceId && sectionType && docList?.length === 0) {\r\n      dispatch(\r\n        getViewTableDocuments({\r\n          referenceId,\r\n          sectionType,\r\n          documentTypeKey,\r\n          parentLossRef,\r\n          ...(policyRef && instructionId && { policyRef, instructionId }),\r\n        })\r\n      );\r\n    }\r\n  }, [referenceId, sectionType, contextSubType?.caseIncidentNotesID]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    // Cleanup\r\n    return () => {\r\n      utils.dms.resetDmsFiles(dispatch);\r\n    };\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const onUnlinkorDeleteSuccess = () => {\r\n    dispatch(\r\n      getViewTableDocuments({\r\n        referenceId,\r\n        sectionType,\r\n        documentTypeKey,\r\n        parentLossRef,\r\n        ...(policyRef && instructionId && { policyRef, instructionId }),\r\n      })\r\n    );\r\n  };\r\n\r\n  const tabs = [\r\n    {\r\n      value: constants.DMS_VIEW_TAB_VIEW,\r\n      label: utils.string.t('dms.wrapper.tabs.viewDocuments'),\r\n      disabled: viewOptionsMerged.disabled,\r\n    },\r\n    {\r\n      value: constants.DMS_VIEW_TAB_SEARCH,\r\n      label: utils.string.t('dms.wrapper.tabs.search'),\r\n      disabled: searchOptionsMerged.disabled,\r\n    },\r\n  ];\r\n\r\n  const selectTab = (tabName) => {\r\n    setSelectedTab(tabName);\r\n\r\n    if (tabName === constants.DMS_VIEW_TAB_VIEW) {\r\n      if (referenceId && sectionType) {\r\n        dispatch(\r\n          getViewTableDocuments({\r\n            referenceId,\r\n            sectionType,\r\n            documentTypeKey,\r\n            ...(policyRef && instructionId && { policyRef, instructionId }),\r\n          })\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  const checkisSubContext = () => {\r\n    const { type } = contextSubType;\r\n    return type && constants.DMS_TASK_CONTEXT_ALL_TYPES.includes(type);\r\n  };\r\n\r\n  const getViewTableDocsForSubContext = () => {\r\n    const { caseIncidentNotesID, refId } = contextSubType;\r\n    if (caseIncidentNotesID) {\r\n      const refIdForSubContext = refId + '-' + caseIncidentNotesID;\r\n      dispatch(\r\n        getViewTableDocuments({\r\n          referenceId: refIdForSubContext,\r\n          sectionType,\r\n          documentTypeKey,\r\n          ...(policyRef && instructionId && { policyRef, instructionId }),\r\n        })\r\n      );\r\n    } else {\r\n      dispatch(\r\n        getViewTableDocuments({\r\n          referenceId: refId,\r\n          sectionType,\r\n          documentTypeKey,\r\n          ...(policyRef && instructionId && { policyRef, instructionId }),\r\n        })\r\n      );\r\n    }\r\n  };\r\n  const onLink = (docData = {}, resetToDefaultValues = () => {}) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'DMS_LINK_TO_LOSS_AND_CLAIM',\r\n        props: {\r\n          fullWidth: true,\r\n          title: utils.string.t('dms.view.linkToLossAndClaim.title'),\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            docData,\r\n            resetToDefaultValues,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n  return (\r\n    <ClaimsUploadViewSearchDocsView\r\n      isTabView={isTabView}\r\n      tabs={tabs}\r\n      selectedTab={selectedTab}\r\n      isAutoSearchScreen={isAutoSearchScreen}\r\n      viewOptions={viewOptionsMerged}\r\n      fnolViewOptions={fnolViewOptions}\r\n      context={dmsContext}\r\n      documentTypeKey={documentTypeKey}\r\n      referenceId={referenceId}\r\n      sourceId={sourceId}\r\n      parentLossRef={parentLossRef}\r\n      viewDocumentList={docList?.length > 0 ? docList : viewDocumentList}\r\n      handlers={{ selectTab, onUnlinkorDeleteSuccess, onClosingUploadModal: handlers.onClosingUploadModal, onLink }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}