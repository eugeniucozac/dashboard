{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as constants from 'consts'; // app\n\nimport * as utils from 'utils';\nimport { authLogout, addLoader, enqueueNotification, hideModal, removeLoader } from 'stores';\nexport var editReOpenedClaimTask = function editReOpenedClaimTask(taskObj, formData, priorities) {\n  return function (dispatch, getState) {\n    var _priorities$find;\n\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/claims.actions.editReOpenedClaimTask'\n    };\n    var data = {\n      taskListID: taskObj === null || taskObj === void 0 ? void 0 : taskObj.taskListID,\n      processTypeID: taskObj === null || taskObj === void 0 ? void 0 : taskObj.processTypeID,\n      taskCode: taskObj === null || taskObj === void 0 ? void 0 : taskObj.taskCode,\n      taskLabel: taskObj === null || taskObj === void 0 ? void 0 : taskObj.taskLabel,\n      actionListValues: taskObj === null || taskObj === void 0 ? void 0 : taskObj.actionListValues,\n      priority: priorities === null || priorities === void 0 ? void 0 : (_priorities$find = priorities.find(function (item) {\n        return item.description === constants.CREATE_ADHOC_TASK_PRIORITY_MEDIUM;\n      })) === null || _priorities$find === void 0 ? void 0 : _priorities$find.id\n    };\n    dispatch(editReOpenedClaimTaskRequest(data));\n    dispatch(addLoader('editReOpenedClaimTask'));\n\n    if (!formData || !formData.taskListID && !formData.processID) {\n      dispatch(editReOpenedClaimTaskFailure(defaultError));\n      dispatch(enqueueNotification('notification.setReOpenedTask.fail', 'error'));\n      dispatch(removeLoader('editReOpenedClaimTask'));\n      return;\n    }\n\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.bpmService,\n      path: \"/workflow/process/claim/\".concat(formData === null || formData === void 0 ? void 0 : formData.processID, \"/reopen\"),\n      data: data\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (data) {\n      dispatch(editReOpenedClaimTaskSuccess(data === null || data === void 0 ? void 0 : data.data));\n      dispatch(enqueueNotification('notification.claimReOpened.success', 'success'));\n      dispatch(hideModal());\n      return data.data;\n    }).catch(function (err) {\n      var _err$json;\n\n      var errorMessage = (err === null || err === void 0 ? void 0 : (_err$json = err.json) === null || _err$json === void 0 ? void 0 : _err$json.message) || 'notification.claimReOpened.fail';\n\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API fetch error (claims.actions.editReOpenedClaimTask)'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(editReOpenedClaimTaskFailure(err));\n      dispatch(enqueueNotification(errorMessage, 'error'));\n      return err;\n    }).finally(function () {\n      dispatch(removeLoader('editReOpenedClaimTask'));\n    });\n  };\n};\nexport var editReOpenedClaimTaskRequest = function editReOpenedClaimTaskRequest(params) {\n  return {\n    type: 'CLAIMS_EDIT_RE_OPENED_TASK_REQUEST',\n    payload: params\n  };\n};\nexport var editReOpenedClaimTaskSuccess = function editReOpenedClaimTaskSuccess(data) {\n  return {\n    type: 'CLAIMS_EDIT_RE_OPENED_TASK_SUCCESS',\n    payload: data\n  };\n};\nexport var editReOpenedClaimTaskFailure = function editReOpenedClaimTaskFailure(error) {\n  return {\n    type: 'CLAIMS_EDIT_RE_OPENED_TASK_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.editReOpenedClaimTask.js"],"names":["constants","utils","authLogout","addLoader","enqueueNotification","hideModal","removeLoader","editReOpenedClaimTask","taskObj","formData","priorities","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","data","taskListID","processTypeID","taskCode","taskLabel","actionListValues","priority","find","item","description","CREATE_ADHOC_TASK_PRIORITY_MEDIUM","id","editReOpenedClaimTaskRequest","processID","editReOpenedClaimTaskFailure","api","post","token","accessToken","bpmService","path","then","response","handleResponse","editReOpenedClaimTaskSuccess","catch","err","errorMessage","json","message","errorParams","handleError","handleUnauthorized","finally","params","type","payload","error"],"mappings":"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","sourcesContent":["import * as constants from 'consts';\r\n\r\n// app\r\nimport * as utils from 'utils';\r\nimport { authLogout, addLoader, enqueueNotification, hideModal, removeLoader } from 'stores';\r\n\r\nexport const editReOpenedClaimTask = (taskObj, formData, priorities) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } } } = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.editReOpenedClaimTask',\r\n  };\r\n\r\n  const data = {\r\n    taskListID: taskObj?.taskListID,\r\n    processTypeID: taskObj?.processTypeID,\r\n    taskCode: taskObj?.taskCode,\r\n    taskLabel: taskObj?.taskLabel,\r\n    actionListValues: taskObj?.actionListValues,\r\n    priority: priorities?.find((item) => item.description === constants.CREATE_ADHOC_TASK_PRIORITY_MEDIUM)?.id,\r\n  };\r\n\r\n  dispatch(editReOpenedClaimTaskRequest(data));\r\n  dispatch(addLoader('editReOpenedClaimTask'));\r\n\r\n  if (!formData || (!formData.taskListID && !formData.processID)) {\r\n    dispatch(editReOpenedClaimTaskFailure(defaultError));\r\n    dispatch(enqueueNotification('notification.setReOpenedTask.fail', 'error'));\r\n    dispatch(removeLoader('editReOpenedClaimTask'));\r\n    return;\r\n  }\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.bpmService,\r\n      path: `/workflow/process/claim/${formData?.processID}/reopen`,\r\n      data: data,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((data) => {\r\n      dispatch(editReOpenedClaimTaskSuccess(data?.data));\r\n      dispatch(enqueueNotification('notification.claimReOpened.success', 'success'));\r\n      dispatch(hideModal());\r\n      return data.data;\r\n    })\r\n    .catch((err) => {\r\n      const errorMessage = err?.json?.message || 'notification.claimReOpened.fail';\r\n      const errorParams = {\r\n        ...defaultError,\r\n        message: 'API fetch error (claims.actions.editReOpenedClaimTask)',\r\n      };\r\n\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(editReOpenedClaimTaskFailure(err));\r\n      dispatch(enqueueNotification(errorMessage, 'error'));\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('editReOpenedClaimTask'));\r\n    });\r\n};\r\n\r\nexport const editReOpenedClaimTaskRequest = (params) => {\r\n  return {\r\n    type: 'CLAIMS_EDIT_RE_OPENED_TASK_REQUEST',\r\n    payload: params,\r\n  };\r\n};\r\n\r\nexport const editReOpenedClaimTaskSuccess = (data) => {\r\n  return {\r\n    type: 'CLAIMS_EDIT_RE_OPENED_TASK_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const editReOpenedClaimTaskFailure = (error) => {\r\n  return {\r\n    type: 'CLAIMS_EDIT_RE_OPENED_TASK_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}