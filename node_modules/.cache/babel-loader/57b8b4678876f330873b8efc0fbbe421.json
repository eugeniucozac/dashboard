{"ast":null,"code":"import _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\forms\\\\ChangeComplexityPriorityAssignment\\\\ChangeComplexityPriorityAssignment.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as Yup from 'yup';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport uniq from 'lodash/uniq'; // app\n\nimport { ChangeComplexityPriorityAssignmentView } from './ChangeComplexityPriorityAssignment.view';\nimport { Loader } from 'components';\nimport { getClaimsBasicInformation, getComplexityTypes, getComplexityValues, getPriorityLevels, getUsersByOrg, resetComplexityBasisValues, selectClaimsAssignedToUsers, selectComplexityTypes, selectComplexityTypesLoaded, selectComplexityValues, selectComplexityValuesLoaded, selectPriorities, selectPrioritiesLoaded, selectUserOrganisation, selectClaimsInformation, hideModal, showModal, enqueueNotification, updateClaim } from 'stores';\nimport { useFormActions } from 'hooks';\nimport * as constants from 'consts';\nimport * as utils from 'utils'; // mui\n\nimport { Box } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChangeComplexityPriorityAssignment.propTypes = {\n  claims: PropTypes.array.isRequired,\n  setIsDirty: PropTypes.func,\n  handleClose: PropTypes.func.isRequired\n};\nexport default function ChangeComplexityPriorityAssignment(_ref) {\n  _s();\n\n  var _getTeam, _getComplexity, _getPriority, _getPriority2, _getTeam2, _getTeam3;\n\n  var claims = _ref.claims,\n      setIsDirty = _ref.setIsDirty,\n      handleClose = _ref.handleClose;\n  var dispatch = useDispatch();\n  var userOrganisation = useSelector(selectUserOrganisation);\n  var complexitiesBasisValues = useSelector(selectComplexityValues) || [];\n  var complexitiesBasisValuesLoaded = useSelector(selectComplexityValuesLoaded);\n  var complexityTypes = useSelector(selectComplexityTypes) || [];\n  var complexityTypesLoaded = useSelector(selectComplexityTypesLoaded);\n  var assignToUsersObj = useSelector(selectClaimsAssignedToUsers);\n  var priorities = useSelector(selectPriorities);\n  var prioritiesLoaded = useSelector(selectPrioritiesLoaded);\n  var singleClaimDetails = useSelector(selectClaimsInformation);\n  var teams = Object.values(constants.ORGANIZATIONS) || [];\n  var assignToUsersItems = (assignToUsersObj === null || assignToUsersObj === void 0 ? void 0 : assignToUsersObj.items) || [];\n  var assignToUsersLoaded = assignToUsersObj === null || assignToUsersObj === void 0 ? void 0 : assignToUsersObj.loaded;\n  var isAllClaimsComplexityUnsure = claims.every(function (claim) {\n    return claim.complexity === constants.CLAIM_COMPLEXITY_UNSURE;\n  });\n  var isSingleClaim = (claims === null || claims === void 0 ? void 0 : claims.length) === 1;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isSameTeamAssignTo = _useState2[0],\n      setSameTeamAssignTo = _useState2[1];\n\n  var isCrossTeamAssignTo = !isSameTeamAssignTo;\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isComplexityBasisAvailable = _useState4[0],\n      setIsComplexityBasisAvailable = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isLoading = _useState6[0],\n      setIsLoading = _useState6[1];\n\n  var _useState7 = useState(!isSingleClaim),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isBasicDetailLoaded = _useState8[0],\n      setIsBasicDetailLoaded = _useState8[1];\n\n  var singleClaim = _objectSpread(_objectSpread({}, claims === null || claims === void 0 ? void 0 : claims[0]), {}, {\n    complexityValueID: singleClaimDetails === null || singleClaimDetails === void 0 ? void 0 : singleClaimDetails.complexityValueID,\n    complexityBasis: singleClaimDetails === null || singleClaimDetails === void 0 ? void 0 : singleClaimDetails.complexityBasis\n  });\n\n  var getAssignedUser = function getAssignedUser() {\n    return assignToUsersItems.find(function (user) {\n      return claims.every(function (claim) {\n        return user.fullName === (claim === null || claim === void 0 ? void 0 : claim.assignedTo);\n      });\n    }) || null;\n  };\n\n  var getComplexity = function getComplexity() {\n    return complexityTypes.find(function (type) {\n      return claims.every(function (claim) {\n        return type.complextityType === (claim === null || claim === void 0 ? void 0 : claim.complexity);\n      });\n    }) || null;\n  };\n\n  var getComplexityBasis = function getComplexityBasis() {\n    if (isSingleClaim) {\n      return (complexitiesBasisValues === null || complexitiesBasisValues === void 0 ? void 0 : complexitiesBasisValues.find(function (_ref2) {\n        var complexityRulesID = _ref2.complexityRulesID;\n        return complexityRulesID === singleClaim.complexityValueID;\n      })) || null;\n    } else {\n      return null;\n    }\n  };\n\n  var getPriority = function getPriority() {\n    return (priorities === null || priorities === void 0 ? void 0 : priorities.find(function (priority) {\n      return claims.every(function (claim) {\n        return (priority === null || priority === void 0 ? void 0 : priority.description) === (claim === null || claim === void 0 ? void 0 : claim.priority);\n      });\n    })) || null;\n  };\n\n  var getTeam = function getTeam() {\n    return teams.find(function (team) {\n      return claims.every(function (claim) {\n        return team.label === (claim === null || claim === void 0 ? void 0 : claim.team);\n      });\n    }) || null;\n  };\n\n  var getTeamBy = function getTeamBy(prop, label) {\n    return (teams === null || teams === void 0 ? void 0 : teams.find(function (team) {\n      return team[prop] === label;\n    })) || null;\n  };\n\n  var usersFetchRequired = Boolean((_getTeam = getTeam()) === null || _getTeam === void 0 ? void 0 : _getTeam.label);\n  var fields = [{\n    name: 'complexity',\n    type: 'select',\n    label: \"\".concat(utils.string.t('claims.processing.bulkAssign.fields.complexityType.label'), \" *\"),\n    value: ((_getComplexity = getComplexity()) === null || _getComplexity === void 0 ? void 0 : _getComplexity.complextityType) || '',\n    options: isAllClaimsComplexityUnsure ? complexityTypes : complexityTypes.filter(function (item) {\n      return item.complextityType !== constants.CLAIM_COMPLEXITY_UNSURE;\n    }),\n    optionKey: 'complextityType',\n    optionLabel: 'complextityType',\n    validation: Yup.string().required(utils.string.t('validation.required')),\n    handleUpdate: function handleUpdate(name, value) {\n      var _getTeamBy;\n\n      var complexityObj = complexityTypes.find(function (c) {\n        return c.complextityType === value;\n      });\n      setValue('team', ((_getTeamBy = getTeamBy('label', complexityObj === null || complexityObj === void 0 ? void 0 : complexityObj.organizationName)) === null || _getTeamBy === void 0 ? void 0 : _getTeamBy.label) || '');\n      setValue('assignTo', null);\n      setIsComplexityBasisAvailable((complexityObj === null || complexityObj === void 0 ? void 0 : complexityObj.complextityType) === constants.ORGANIZATIONS.ardonagh.complexity);\n      setSameTeamAssignTo((complexityObj === null || complexityObj === void 0 ? void 0 : complexityObj.organizationName) === (userOrganisation === null || userOrganisation === void 0 ? void 0 : userOrganisation.name));\n    }\n  }, {\n    name: 'complexityBasis',\n    type: 'autocompletemui',\n    label: \"\".concat(utils.string.t('claims.processing.bulkAssign.fields.complexity.label'), \" *\"),\n    value: getComplexityBasis(),\n    options: complexitiesBasisValues,\n    optionKey: 'complexityRulesID',\n    optionLabel: 'complexityRulesValue',\n    validation: isComplexityBasisAvailable && Yup.object().nullable().required(utils.string.t('validation.required'))\n  }, {\n    name: 'priority',\n    type: 'select',\n    label: \"\".concat(utils.string.t('claims.processing.bulkAssign.fields.priority.label'), \" *\"),\n    value: ((_getPriority = getPriority()) === null || _getPriority === void 0 ? void 0 : _getPriority.description) || '',\n    options: priorities,\n    optionKey: 'description',\n    optionLabel: 'description',\n    validation: Yup.string().required(utils.string.t('validation.required'))\n  }, {\n    name: 'priorityId',\n    type: 'hidden',\n    value: ((_getPriority2 = getPriority()) === null || _getPriority2 === void 0 ? void 0 : _getPriority2.id) || ''\n  }, {\n    name: 'team',\n    type: 'select',\n    label: \"\".concat(utils.string.t('claims.processing.bulkAssign.fields.team.label'), \" *\"),\n    value: ((_getTeam2 = getTeam()) === null || _getTeam2 === void 0 ? void 0 : _getTeam2.label) || '',\n    options: teams,\n    optionKey: 'label',\n    optionLabel: 'label',\n    validation: Yup.string().required(utils.string.t('validation.required')),\n    handleUpdate: function handleUpdate(name, value) {\n      var teamObj = getTeamBy('label', value);\n      setSameTeamAssignTo((teamObj === null || teamObj === void 0 ? void 0 : teamObj.label) === (userOrganisation === null || userOrganisation === void 0 ? void 0 : userOrganisation.name));\n    }\n  }, {\n    name: 'teamId',\n    type: 'hidden',\n    value: ((_getTeam3 = getTeam()) === null || _getTeam3 === void 0 ? void 0 : _getTeam3.id) || ''\n  }, {\n    name: 'assignTo',\n    type: 'autocompletemui',\n    label: \"\".concat(utils.string.t('claims.processing.bulkAssign.fields.assignTo.label')).concat(isSameTeamAssignTo ? ' *' : ''),\n    value: getAssignedUser(),\n    options: assignToUsersItems,\n    optionKey: 'id',\n    optionLabel: 'fullName',\n    validation: isSameTeamAssignTo && Yup.object().nullable().required(utils.string.t('claims.processing.bulkAssign.validation.chooseAssignee'))\n  }, {\n    name: 'notes',\n    type: 'textarea',\n    label: \"\".concat(utils.string.t('claims.processing.bulkAssign.fields.notes.label')).concat(isCrossTeamAssignTo ? ' *' : ''),\n    value: '',\n    muiComponentProps: {\n      multiline: true,\n      minRows: 3,\n      maxRows: 6\n    },\n    validation: isCrossTeamAssignTo && Yup.string().min(1, utils.string.t('validation.required')).max(1000, utils.string.t('validation.string.max')).required(utils.string.t('validation.required'))\n  }];\n  var defaultValues = utils.form.getInitialValues(fields);\n  var validationSchema = utils.form.getValidationSchema(fields);\n\n  var _useForm = useForm(_objectSpread({\n    defaultValues: defaultValues\n  }, validationSchema && {\n    resolver: yupResolver(validationSchema)\n  })),\n      control = _useForm.control,\n      watch = _useForm.watch,\n      errors = _useForm.errors,\n      setValue = _useForm.setValue,\n      handleSubmit = _useForm.handleSubmit,\n      formState = _useForm.formState;\n\n  var formValues = watch();\n  var formIsDirty = formState.isDirty;\n  var actions = [{\n    name: 'cancel',\n    label: utils.string.t('app.cancel'),\n    handler: function handler() {\n      if (formIsDirty) {\n        dispatch(showModal({\n          component: 'CONFIRM',\n          props: {\n            title: utils.string.t('navigation.form.subtitle'),\n            hint: utils.string.t('navigation.form.title'),\n            fullWidth: true,\n            maxWidth: 'xs',\n            componentProps: {\n              cancelLabel: utils.string.t('app.no'),\n              confirmLabel: utils.string.t('app.yes'),\n              submitHandler: function submitHandler() {\n                handleClose();\n              }\n            }\n          }\n        }));\n      } else {\n        handleClose();\n      }\n    }\n  }, {\n    name: 'submit',\n    label: utils.string.t('app.assign'),\n    handler: function handler(values) {\n      onSubmit(values);\n    }\n  }];\n\n  var _useFormActions = useFormActions(actions),\n      cancel = _useFormActions.cancel,\n      submit = _useFormActions.submit;\n\n  var isDataReady = function isDataReady() {\n    var complexityReady = complexityTypesLoaded && utils.generic.isValidArray(complexityTypes, true);\n    var complexityBasisReady = complexitiesBasisValuesLoaded && utils.generic.isValidArray(complexitiesBasisValues, true);\n    var priorityReady = prioritiesLoaded && utils.generic.isValidArray(priorities, true);\n    var userReady = usersFetchRequired ? assignToUsersLoaded && utils.generic.isValidArray(assignToUsersItems, true) : true;\n    return isBasicDetailLoaded && priorityReady && userReady && complexityReady && complexityBasisReady;\n  };\n\n  var isDataMissing = function isDataMissing() {\n    var allDataLoaded = complexityTypesLoaded && complexitiesBasisValuesLoaded && prioritiesLoaded && (usersFetchRequired ? assignToUsersLoaded : true);\n    var missingComplexities = complexityTypesLoaded && utils.generic.isInvalidOrEmptyArray(complexityTypes);\n    var missingComplexitiesBasis = complexitiesBasisValuesLoaded && utils.generic.isInvalidOrEmptyArray(complexitiesBasisValues);\n    var missingPriorities = prioritiesLoaded && utils.generic.isInvalidOrEmptyArray(priorities);\n    var missingUsers = usersFetchRequired ? assignToUsersLoaded && utils.generic.isInvalidOrEmptyArray(assignToUsersItems) : false;\n    return allDataLoaded && (missingPriorities || missingUsers || missingComplexities || missingComplexitiesBasis);\n  };\n\n  var dataReady = isDataReady();\n  var dataMissing = isDataMissing();\n\n  var setComplexityBasisAvailability = function setComplexityBasisAvailability() {\n    var _getComplexity2;\n\n    setIsComplexityBasisAvailable(((_getComplexity2 = getComplexity()) === null || _getComplexity2 === void 0 ? void 0 : _getComplexity2.complextityType) === constants.ORGANIZATIONS.ardonagh.complexity);\n  };\n\n  var onSubmit = function onSubmit(values) {\n    dispatch(updateClaim(claims, values));\n  };\n\n  useEffect(function () {\n    dispatch(getPriorityLevels());\n    dispatch(getComplexityTypes());\n    dispatch(resetComplexityBasisValues());\n\n    if (isSingleClaim) {\n      dispatch(getClaimsBasicInformation(singleClaim.claimId, singleClaim.claimReference, singleClaim.sourceId, singleClaim.divisionId)).then(function () {\n        setIsBasicDetailLoaded(true);\n      });\n      dispatch(getComplexityValues(singleClaim.divisionId, singleClaim.sourceId, false));\n    } else {\n      dispatch(getComplexityValues(null, null, false, uniq(claims.reduce(function (acc, _ref3) {\n        var sourceId = _ref3.sourceId,\n            divisionId = _ref3.divisionId;\n        return sourceId && divisionId ? [].concat(_toConsumableArray(acc), [\"\".concat(sourceId, \"-\").concat(divisionId)]) : acc;\n      }, []))));\n    }\n\n    setComplexityBasisAvailability();\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n  // fetch list of users when team is changed\n\n  useEffect(function () {\n    var teamName = formValues === null || formValues === void 0 ? void 0 : formValues.team;\n\n    if (teamName) {\n      setIsLoading(true);\n      setValue('assignTo', null); // fetch users\n\n      dispatch(getUsersByOrg(teamName, claims, 'bulkAssignClaims', false)).then(function () {\n        setIsLoading(false);\n      });\n    }\n  }, [formValues === null || formValues === void 0 ? void 0 : formValues.team]); // eslint-disable-line react-hooks/exhaustive-deps\n  // make the form dirty if any values are changed\n\n  useEffect(function () {\n    setIsDirty(formIsDirty);\n  }, [formValues]); // eslint-disable-line react-hooks/exhaustive-deps\n  // populate form values when all data is ready\n\n  useEffect(function () {\n    var complexity = getComplexity();\n    var team = getTeam();\n\n    if (dataReady) {\n      var _getPriority3;\n\n      setComplexityBasisAvailability();\n      setValue('assignTo', getAssignedUser());\n      setValue('complexity', (complexity === null || complexity === void 0 ? void 0 : complexity.complextityType) || '');\n      setValue('complexityBasis', getComplexityBasis());\n      setValue('priority', ((_getPriority3 = getPriority()) === null || _getPriority3 === void 0 ? void 0 : _getPriority3.description) || '');\n      setSameTeamAssignTo((team === null || team === void 0 ? void 0 : team.label) === (userOrganisation === null || userOrganisation === void 0 ? void 0 : userOrganisation.name));\n    }\n  }, [dataReady]); // eslint-disable-line react-hooks/exhaustive-deps\n  // hide modal and show warning if necessary data is missing\n\n  useEffect(function () {\n    if (dataMissing) {\n      dispatch(hideModal());\n      dispatch(enqueueNotification(utils.string.t('claims.processing.bulkAssign.notifications.data.failure'), 'warning'));\n    }\n  }, [dataMissing]); // eslint-disable-line react-hooks/exhaustive-deps\n  // data is still loading...\n\n  if (!dataReady) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      height: \"300px\",\n      children: /*#__PURE__*/_jsxDEV(Loader, {\n        visible: true,\n        absolute: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChangeComplexityPriorityAssignmentView, {\n    fields: fields,\n    buttons: {\n      cancel: cancel,\n      submit: submit\n    },\n    formProps: {\n      control: control,\n      errors: errors,\n      handleSubmit: handleSubmit,\n      formState: formState\n    },\n    isComplexityBasisAvailable: isComplexityBasisAvailable,\n    isLoading: isLoading\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 387,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChangeComplexityPriorityAssignment, \"hgYjoypu/h8k0+Gv8kx2rrr+vvs=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useForm, useFormActions];\n});\n\n_c = ChangeComplexityPriorityAssignment;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChangeComplexityPriorityAssignment\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/forms/ChangeComplexityPriorityAssignment/ChangeComplexityPriorityAssignment.js"],"names":["React","useEffect","useState","useDispatch","useSelector","PropTypes","Yup","useForm","yupResolver","uniq","ChangeComplexityPriorityAssignmentView","Loader","getClaimsBasicInformation","getComplexityTypes","getComplexityValues","getPriorityLevels","getUsersByOrg","resetComplexityBasisValues","selectClaimsAssignedToUsers","selectComplexityTypes","selectComplexityTypesLoaded","selectComplexityValues","selectComplexityValuesLoaded","selectPriorities","selectPrioritiesLoaded","selectUserOrganisation","selectClaimsInformation","hideModal","showModal","enqueueNotification","updateClaim","useFormActions","constants","utils","Box","ChangeComplexityPriorityAssignment","propTypes","claims","array","isRequired","setIsDirty","func","handleClose","dispatch","userOrganisation","complexitiesBasisValues","complexitiesBasisValuesLoaded","complexityTypes","complexityTypesLoaded","assignToUsersObj","priorities","prioritiesLoaded","singleClaimDetails","teams","Object","values","ORGANIZATIONS","assignToUsersItems","items","assignToUsersLoaded","loaded","isAllClaimsComplexityUnsure","every","claim","complexity","CLAIM_COMPLEXITY_UNSURE","isSingleClaim","length","isSameTeamAssignTo","setSameTeamAssignTo","isCrossTeamAssignTo","isComplexityBasisAvailable","setIsComplexityBasisAvailable","isLoading","setIsLoading","isBasicDetailLoaded","setIsBasicDetailLoaded","singleClaim","complexityValueID","complexityBasis","getAssignedUser","find","user","fullName","assignedTo","getComplexity","type","complextityType","getComplexityBasis","complexityRulesID","getPriority","priority","description","getTeam","team","label","getTeamBy","prop","usersFetchRequired","Boolean","fields","name","string","t","value","options","filter","item","optionKey","optionLabel","validation","required","handleUpdate","complexityObj","c","setValue","organizationName","ardonagh","object","nullable","id","teamObj","muiComponentProps","multiline","minRows","maxRows","min","max","defaultValues","form","getInitialValues","validationSchema","getValidationSchema","resolver","control","watch","errors","handleSubmit","formState","formValues","formIsDirty","isDirty","actions","handler","component","props","title","hint","fullWidth","maxWidth","componentProps","cancelLabel","confirmLabel","submitHandler","onSubmit","cancel","submit","isDataReady","complexityReady","generic","isValidArray","complexityBasisReady","priorityReady","userReady","isDataMissing","allDataLoaded","missingComplexities","isInvalidOrEmptyArray","missingComplexitiesBasis","missingPriorities","missingUsers","dataReady","dataMissing","setComplexityBasisAvailability","claimId","claimReference","sourceId","divisionId","then","reduce","acc","teamName"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport * as Yup from 'yup';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport uniq from 'lodash/uniq';\r\n\r\n// app\r\nimport { ChangeComplexityPriorityAssignmentView } from './ChangeComplexityPriorityAssignment.view';\r\nimport { Loader } from 'components';\r\nimport {\r\n  getClaimsBasicInformation,\r\n  getComplexityTypes,\r\n  getComplexityValues,\r\n  getPriorityLevels,\r\n  getUsersByOrg,\r\n  resetComplexityBasisValues,\r\n  selectClaimsAssignedToUsers,\r\n  selectComplexityTypes,\r\n  selectComplexityTypesLoaded,\r\n  selectComplexityValues,\r\n  selectComplexityValuesLoaded,\r\n  selectPriorities,\r\n  selectPrioritiesLoaded,\r\n  selectUserOrganisation,\r\n  selectClaimsInformation,\r\n  hideModal,\r\n  showModal,\r\n  enqueueNotification,\r\n  updateClaim,\r\n} from 'stores';\r\nimport { useFormActions } from 'hooks';\r\nimport * as constants from 'consts';\r\nimport * as utils from 'utils';\r\n\r\n// mui\r\nimport { Box } from '@material-ui/core';\r\n\r\nChangeComplexityPriorityAssignment.propTypes = {\r\n  claims: PropTypes.array.isRequired,\r\n  setIsDirty: PropTypes.func,\r\n  handleClose: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default function ChangeComplexityPriorityAssignment({ claims, setIsDirty, handleClose }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const userOrganisation = useSelector(selectUserOrganisation);\r\n  const complexitiesBasisValues = useSelector(selectComplexityValues) || [];\r\n  const complexitiesBasisValuesLoaded = useSelector(selectComplexityValuesLoaded);\r\n  const complexityTypes = useSelector(selectComplexityTypes) || [];\r\n  const complexityTypesLoaded = useSelector(selectComplexityTypesLoaded);\r\n  const assignToUsersObj = useSelector(selectClaimsAssignedToUsers);\r\n  const priorities = useSelector(selectPriorities);\r\n  const prioritiesLoaded = useSelector(selectPrioritiesLoaded);\r\n  const singleClaimDetails = useSelector(selectClaimsInformation);\r\n\r\n  const teams = Object.values(constants.ORGANIZATIONS) || [];\r\n  const assignToUsersItems = assignToUsersObj?.items || [];\r\n  const assignToUsersLoaded = assignToUsersObj?.loaded;\r\n  const isAllClaimsComplexityUnsure = claims.every((claim) => claim.complexity === constants.CLAIM_COMPLEXITY_UNSURE);\r\n  const isSingleClaim = claims?.length === 1;\r\n\r\n  const [isSameTeamAssignTo, setSameTeamAssignTo] = useState(false);\r\n  const isCrossTeamAssignTo = !isSameTeamAssignTo;\r\n  const [isComplexityBasisAvailable, setIsComplexityBasisAvailable] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isBasicDetailLoaded, setIsBasicDetailLoaded] = useState(!isSingleClaim);\r\n\r\n  const singleClaim = {\r\n    ...claims?.[0],\r\n    complexityValueID: singleClaimDetails?.complexityValueID,\r\n    complexityBasis: singleClaimDetails?.complexityBasis,\r\n  };\r\n\r\n  const getAssignedUser = () => {\r\n    return (\r\n      assignToUsersItems.find((user) => {\r\n        return claims.every((claim) => user.fullName === claim?.assignedTo);\r\n      }) || null\r\n    );\r\n  };\r\n\r\n  const getComplexity = () => {\r\n    return (\r\n      complexityTypes.find((type) => {\r\n        return claims.every((claim) => type.complextityType === claim?.complexity);\r\n      }) || null\r\n    );\r\n  };\r\n\r\n  const getComplexityBasis = () => {\r\n    if (isSingleClaim) {\r\n      return (\r\n        complexitiesBasisValues?.find(({ complexityRulesID }) => {\r\n          return complexityRulesID === singleClaim.complexityValueID;\r\n        }) || null\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const getPriority = () => {\r\n    return (\r\n      priorities?.find((priority) => {\r\n        return claims.every((claim) => priority?.description === claim?.priority);\r\n      }) || null\r\n    );\r\n  };\r\n\r\n  const getTeam = () => {\r\n    return (\r\n      teams.find((team) => {\r\n        return claims.every((claim) => team.label === claim?.team);\r\n      }) || null\r\n    );\r\n  };\r\n\r\n  const getTeamBy = (prop, label) => {\r\n    return teams?.find((team) => team[prop] === label) || null;\r\n  };\r\n\r\n  const usersFetchRequired = Boolean(getTeam()?.label);\r\n\r\n  const fields = [\r\n    {\r\n      name: 'complexity',\r\n      type: 'select',\r\n      label: `${utils.string.t('claims.processing.bulkAssign.fields.complexityType.label')} *`,\r\n      value: getComplexity()?.complextityType || '',\r\n      options: isAllClaimsComplexityUnsure\r\n        ? complexityTypes\r\n        : complexityTypes.filter((item) => item.complextityType !== constants.CLAIM_COMPLEXITY_UNSURE),\r\n      optionKey: 'complextityType',\r\n      optionLabel: 'complextityType',\r\n      validation: Yup.string().required(utils.string.t('validation.required')),\r\n      handleUpdate: (name, value) => {\r\n        const complexityObj = complexityTypes.find((c) => c.complextityType === value);\r\n        setValue('team', getTeamBy('label', complexityObj?.organizationName)?.label || '');\r\n        setValue('assignTo', null);\r\n        setIsComplexityBasisAvailable(complexityObj?.complextityType === constants.ORGANIZATIONS.ardonagh.complexity);\r\n        setSameTeamAssignTo(complexityObj?.organizationName === userOrganisation?.name);\r\n      },\r\n    },\r\n    {\r\n      name: 'complexityBasis',\r\n      type: 'autocompletemui',\r\n      label: `${utils.string.t('claims.processing.bulkAssign.fields.complexity.label')} *`,\r\n      value: getComplexityBasis(),\r\n      options: complexitiesBasisValues,\r\n      optionKey: 'complexityRulesID',\r\n      optionLabel: 'complexityRulesValue',\r\n      validation: isComplexityBasisAvailable && Yup.object().nullable().required(utils.string.t('validation.required')),\r\n    },\r\n    {\r\n      name: 'priority',\r\n      type: 'select',\r\n      label: `${utils.string.t('claims.processing.bulkAssign.fields.priority.label')} *`,\r\n      value: getPriority()?.description || '',\r\n      options: priorities,\r\n      optionKey: 'description',\r\n      optionLabel: 'description',\r\n      validation: Yup.string().required(utils.string.t('validation.required')),\r\n    },\r\n    {\r\n      name: 'priorityId',\r\n      type: 'hidden',\r\n      value: getPriority()?.id || '',\r\n    },\r\n    {\r\n      name: 'team',\r\n      type: 'select',\r\n      label: `${utils.string.t('claims.processing.bulkAssign.fields.team.label')} *`,\r\n      value: getTeam()?.label || '',\r\n      options: teams,\r\n      optionKey: 'label',\r\n      optionLabel: 'label',\r\n      validation: Yup.string().required(utils.string.t('validation.required')),\r\n      handleUpdate: (name, value) => {\r\n        const teamObj = getTeamBy('label', value);\r\n        setSameTeamAssignTo(teamObj?.label === userOrganisation?.name);\r\n      },\r\n    },\r\n    {\r\n      name: 'teamId',\r\n      type: 'hidden',\r\n      value: getTeam()?.id || '',\r\n    },\r\n    {\r\n      name: 'assignTo',\r\n      type: 'autocompletemui',\r\n      label: `${utils.string.t('claims.processing.bulkAssign.fields.assignTo.label')}${isSameTeamAssignTo ? ' *' : ''}`,\r\n      value: getAssignedUser(),\r\n      options: assignToUsersItems,\r\n      optionKey: 'id',\r\n      optionLabel: 'fullName',\r\n      validation:\r\n        isSameTeamAssignTo && Yup.object().nullable().required(utils.string.t('claims.processing.bulkAssign.validation.chooseAssignee')),\r\n    },\r\n    {\r\n      name: 'notes',\r\n      type: 'textarea',\r\n      label: `${utils.string.t('claims.processing.bulkAssign.fields.notes.label')}${isCrossTeamAssignTo ? ' *' : ''}`,\r\n      value: '',\r\n      muiComponentProps: {\r\n        multiline: true,\r\n        minRows: 3,\r\n        maxRows: 6,\r\n      },\r\n      validation:\r\n        isCrossTeamAssignTo &&\r\n        Yup.string()\r\n          .min(1, utils.string.t('validation.required'))\r\n          .max(1000, utils.string.t('validation.string.max'))\r\n          .required(utils.string.t('validation.required')),\r\n    },\r\n  ];\r\n\r\n  const defaultValues = utils.form.getInitialValues(fields);\r\n  const validationSchema = utils.form.getValidationSchema(fields);\r\n\r\n  const { control, watch, errors, setValue, handleSubmit, formState } = useForm({\r\n    defaultValues,\r\n    ...(validationSchema && { resolver: yupResolver(validationSchema) }),\r\n  });\r\n\r\n  const formValues = watch();\r\n  const formIsDirty = formState.isDirty;\r\n\r\n  const actions = [\r\n    {\r\n      name: 'cancel',\r\n      label: utils.string.t('app.cancel'),\r\n      handler: () => {\r\n        if (formIsDirty) {\r\n          dispatch(\r\n            showModal({\r\n              component: 'CONFIRM',\r\n              props: {\r\n                title: utils.string.t('navigation.form.subtitle'),\r\n                hint: utils.string.t('navigation.form.title'),\r\n                fullWidth: true,\r\n                maxWidth: 'xs',\r\n                componentProps: {\r\n                  cancelLabel: utils.string.t('app.no'),\r\n                  confirmLabel: utils.string.t('app.yes'),\r\n                  submitHandler: () => {\r\n                    handleClose();\r\n                  },\r\n                },\r\n              },\r\n            })\r\n          );\r\n        } else {\r\n          handleClose();\r\n        }\r\n      },\r\n    },\r\n    {\r\n      name: 'submit',\r\n      label: utils.string.t('app.assign'),\r\n      handler: (values) => {\r\n        onSubmit(values);\r\n      },\r\n    },\r\n  ];\r\n\r\n  const { cancel, submit } = useFormActions(actions);\r\n\r\n  const isDataReady = () => {\r\n    const complexityReady = complexityTypesLoaded && utils.generic.isValidArray(complexityTypes, true);\r\n    const complexityBasisReady = complexitiesBasisValuesLoaded && utils.generic.isValidArray(complexitiesBasisValues, true);\r\n    const priorityReady = prioritiesLoaded && utils.generic.isValidArray(priorities, true);\r\n    const userReady = usersFetchRequired ? assignToUsersLoaded && utils.generic.isValidArray(assignToUsersItems, true) : true;\r\n\r\n    return isBasicDetailLoaded && priorityReady && userReady && complexityReady && complexityBasisReady;\r\n  };\r\n\r\n  const isDataMissing = () => {\r\n    const allDataLoaded =\r\n      complexityTypesLoaded && complexitiesBasisValuesLoaded && prioritiesLoaded && (usersFetchRequired ? assignToUsersLoaded : true);\r\n\r\n    const missingComplexities = complexityTypesLoaded && utils.generic.isInvalidOrEmptyArray(complexityTypes);\r\n    const missingComplexitiesBasis = complexitiesBasisValuesLoaded && utils.generic.isInvalidOrEmptyArray(complexitiesBasisValues);\r\n    const missingPriorities = prioritiesLoaded && utils.generic.isInvalidOrEmptyArray(priorities);\r\n    const missingUsers = usersFetchRequired ? assignToUsersLoaded && utils.generic.isInvalidOrEmptyArray(assignToUsersItems) : false;\r\n\r\n    return allDataLoaded && (missingPriorities || missingUsers || missingComplexities || missingComplexitiesBasis);\r\n  };\r\n\r\n  const dataReady = isDataReady();\r\n  const dataMissing = isDataMissing();\r\n\r\n  const setComplexityBasisAvailability = () => {\r\n    setIsComplexityBasisAvailable(getComplexity()?.complextityType === constants.ORGANIZATIONS.ardonagh.complexity);\r\n  };\r\n\r\n  const onSubmit = (values) => {\r\n    dispatch(updateClaim(claims, values));\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(getPriorityLevels());\r\n    dispatch(getComplexityTypes());\r\n    dispatch(resetComplexityBasisValues());\r\n\r\n    if (isSingleClaim) {\r\n      dispatch(\r\n        getClaimsBasicInformation(singleClaim.claimId, singleClaim.claimReference, singleClaim.sourceId, singleClaim.divisionId)\r\n      ).then(() => {\r\n        setIsBasicDetailLoaded(true);\r\n      });\r\n      dispatch(getComplexityValues(singleClaim.divisionId, singleClaim.sourceId, false));\r\n    } else {\r\n      dispatch(\r\n        getComplexityValues(\r\n          null,\r\n          null,\r\n          false,\r\n          uniq(\r\n            claims.reduce((acc, { sourceId, divisionId }) => {\r\n              return sourceId && divisionId ? [...acc, `${sourceId}-${divisionId}`] : acc;\r\n            }, [])\r\n          )\r\n        )\r\n      );\r\n    }\r\n\r\n    setComplexityBasisAvailability();\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  // fetch list of users when team is changed\r\n  useEffect(() => {\r\n    const teamName = formValues?.team;\r\n\r\n    if (teamName) {\r\n      setIsLoading(true);\r\n      setValue('assignTo', null);\r\n\r\n      // fetch users\r\n      dispatch(getUsersByOrg(teamName, claims, 'bulkAssignClaims', false)).then(() => {\r\n        setIsLoading(false);\r\n      });\r\n    }\r\n  }, [formValues?.team]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  // make the form dirty if any values are changed\r\n  useEffect(() => {\r\n    setIsDirty(formIsDirty);\r\n  }, [formValues]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  // populate form values when all data is ready\r\n  useEffect(() => {\r\n    const complexity = getComplexity();\r\n    const team = getTeam();\r\n\r\n    if (dataReady) {\r\n      setComplexityBasisAvailability();\r\n      setValue('assignTo', getAssignedUser());\r\n      setValue('complexity', complexity?.complextityType || '');\r\n      setValue('complexityBasis', getComplexityBasis());\r\n      setValue('priority', getPriority()?.description || '');\r\n      setSameTeamAssignTo(team?.label === userOrganisation?.name);\r\n    }\r\n  }, [dataReady]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  // hide modal and show warning if necessary data is missing\r\n  useEffect(() => {\r\n    if (dataMissing) {\r\n      dispatch(hideModal());\r\n      dispatch(enqueueNotification(utils.string.t('claims.processing.bulkAssign.notifications.data.failure'), 'warning'));\r\n    }\r\n  }, [dataMissing]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  // data is still loading...\r\n  if (!dataReady) {\r\n    return (\r\n      <Box height=\"300px\">\r\n        <Loader visible absolute />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <ChangeComplexityPriorityAssignmentView\r\n      fields={fields}\r\n      buttons={{ cancel, submit }}\r\n      formProps={{ control, errors, handleSubmit, formState }}\r\n      isComplexityBasisAvailable={isComplexityBasisAvailable}\r\n      isLoading={isLoading}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}