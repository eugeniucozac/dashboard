{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ClaimsTab\\\\ClaimsTabTableRow.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory, useLocation } from 'react-router';\nimport PropTypes from 'prop-types'; // app\n\nimport { ClaimsTabTableRowView } from './ClaimsTabTableRow.view';\nimport { showModal, hideModal, setClaimsStepperControl } from 'stores';\nimport { STATUS_CLAIMS_DRAFT, STATUS_CLAIMS_IN_PROCESS } from 'consts';\nimport { Breadcrumb } from 'components';\nimport * as utils from 'utils';\nimport config from 'config';\nimport * as constants from 'consts'; // mui\n\nimport { Typography } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nClaimsTabTableRow.prototype = {\n  claim: PropTypes.object.isRequired,\n  isSelected: PropTypes.bool,\n  isMultiSelect: PropTypes.bool,\n  columnProps: PropTypes.object.isRequired,\n  handlers: PropTypes.shape({\n    clickClaim: PropTypes.func.isRequired,\n    selectClaim: PropTypes.func.isRequired\n  }).isRequired\n};\nexport function ClaimsTabTableRow(_ref) {\n  _s();\n\n  var _this = this;\n\n  var claim = _ref.claim,\n      handlers = _ref.handlers,\n      rest = _objectWithoutProperties(_ref, [\"claim\", \"handlers\"]);\n\n  var dispatch = useDispatch();\n  var history = useHistory();\n  var location = useLocation();\n  var isFormDirtyRef = useRef(false);\n  var pathname = history.location.pathname;\n\n  var setFormDirty = function setFormDirty(isDirty) {\n    isFormDirtyRef.current = isDirty;\n  };\n\n  var confirmHideModal = function confirmHideModal(modalName) {\n    if (isFormDirtyRef.current) {\n      dispatch(showModal({\n        component: 'CONFIRM',\n        props: {\n          title: utils.string.t('navigation.form.subtitle'),\n          hint: utils.string.t('navigation.form.title'),\n          fullWidth: true,\n          maxWidth: 'xs',\n          componentProps: {\n            cancelLabel: utils.string.t('app.no'),\n            confirmLabel: utils.string.t('app.yes'),\n            submitHandler: function submitHandler() {\n              dispatch(hideModal(modalName));\n            }\n          }\n        }\n      }));\n    } else {\n      dispatch(hideModal(modalName));\n    }\n  };\n\n  var handleChangeComplexityPriorityAssignmentClaim = function handleChangeComplexityPriorityAssignmentClaim(claim) {\n    dispatch(showModal({\n      component: 'CHANGE_COMPLEXITY_PRIORITY_ASSIGNMENT',\n      props: {\n        title: 'claims.processing.summary.buttons.changeComplexityPriorityAssignment',\n        fullWidth: true,\n        maxWidth: 'sm',\n        hideCompOnBlur: false,\n        componentProps: {\n          claimsProcessingSelected: [claim],\n          fetchClaimDetails: true,\n          setIsDirty: setFormDirty,\n          clickXHandler: function clickXHandler() {\n            confirmHideModal('CHANGE_COMPLEXITY_PRIORITY_ASSIGNMENT');\n          },\n          cancelHandler: function cancelHandler() {\n            confirmHideModal('CHANGE_COMPLEXITY_PRIORITY_ASSIGNMENT');\n          }\n        }\n      }\n    }));\n  };\n\n  var handleEditClaim = function handleEditClaim(claim) {\n    dispatch(setClaimsStepperControl(1));\n    history.push({\n      pathname: \"\".concat(config.routes.claimsFNOL.newLoss),\n      state: {\n        linkPolicy: {\n          isSearchTerm: true,\n          claimObj: claim\n        },\n        redirectUrl: location === null || location === void 0 ? void 0 : location.pathname\n      }\n    });\n  };\n\n  var handleCreateAdhoctask = function handleCreateAdhoctask(claim) {\n    dispatch(showModal({\n      component: 'CREATE_AD_HOC_TASK_WIZARD',\n      props: {\n        title: 'claims.processing.taskFunction.createAdhocTask',\n        fullWidth: true,\n        maxWidth: 'xl',\n        hideCompOnBlur: false,\n        componentProps: {\n          claim: claim\n        }\n      }\n    }));\n  };\n\n  var breadcrumbs = [{\n    name: 'lossRef',\n    label: utils.string.t('claims.loss.text', {\n      lossRef: claim === null || claim === void 0 ? void 0 : claim.lossRef\n    }),\n    link: pathname,\n    active: true\n  }, {\n    name: 'claimRef',\n    label: \"\".concat(utils.string.t('claims.rfiDashboard.breadCrumbs.claimRef', {\n      claimRef: claim === null || claim === void 0 ? void 0 : claim.claimReference\n    })),\n    link: pathname,\n    active: true,\n    largeFont: true\n  }];\n\n  var TitleWBreadCrumb = function TitleWBreadCrumb() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Breadcrumb, {\n        links: breadcrumbs\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h2\",\n        style: {\n          paddingLeft: '1.2rem'\n        },\n        children: utils.string.t('claims.processing.taskFunction.createRFI')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true);\n  };\n\n  var handleCreateRFIClaimLevel = function handleCreateRFIClaimLevel() {\n    dispatch(showModal({\n      component: 'CLAIMS_CREATE_RFI_STEPPER',\n      props: {\n        titleChildren: /*#__PURE__*/_jsxDEV(TitleWBreadCrumb, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 26\n        }, _this),\n        hideCompOnBlur: false,\n        fullWidth: true,\n        maxWidth: 'lg',\n        disableAutoFocus: true,\n        componentProps: {\n          claim: claim,\n          type: constants.RFI_ON_CLAIMS,\n          cancelHandler: function cancelHandler() {\n            dispatch(hideModal());\n          }\n        }\n      }\n    }));\n  };\n\n  var rowActions = [{\n    id: 'editClaim',\n    label: utils.string.t('claims.claimsTab.popOverButtonItems.editClaim'),\n    disabled: claim.status !== STATUS_CLAIMS_DRAFT,\n    callback: function callback() {\n      return handleEditClaim(claim);\n    }\n  }, {\n    id: 'changeItems',\n    label: utils.string.t('claims.claimsTab.popOverButtonItems.changeItems'),\n    callback: function callback() {\n      return handleChangeComplexityPriorityAssignmentClaim(claim);\n    }\n  }, {\n    id: 'createRFI',\n    label: utils.string.t('claims.claimsTab.popOverButtonItems.createRFI'),\n    callback: function callback() {\n      return handleCreateRFIClaimLevel(claim);\n    }\n  }, {\n    id: 'createAdhocTask',\n    label: utils.string.t('claims.claimsTab.popOverButtonItems.createAdhocTask'),\n    disabled: (claim === null || claim === void 0 ? void 0 : claim.status) !== STATUS_CLAIMS_IN_PROCESS,\n    callback: function callback() {\n      return handleCreateAdhoctask(claim);\n    }\n  }];\n  return /*#__PURE__*/_jsxDEV(ClaimsTabTableRowView, _objectSpread({\n    claim: claim,\n    rowActions: rowActions,\n    handlers: {\n      selectClaim: handlers.selectClaim,\n      clickClaim: handlers.clickClaim\n    }\n  }, rest), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ClaimsTabTableRow, \"47DqBeGAMZxqCY+9MpKGBxuMJr8=\", false, function () {\n  return [useDispatch, useHistory, useLocation];\n});\n\n_c = ClaimsTabTableRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimsTabTableRow\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ClaimsTab/ClaimsTabTableRow.js"],"names":["React","useRef","useDispatch","useHistory","useLocation","PropTypes","ClaimsTabTableRowView","showModal","hideModal","setClaimsStepperControl","STATUS_CLAIMS_DRAFT","STATUS_CLAIMS_IN_PROCESS","Breadcrumb","utils","config","constants","Typography","ClaimsTabTableRow","prototype","claim","object","isRequired","isSelected","bool","isMultiSelect","columnProps","handlers","shape","clickClaim","func","selectClaim","rest","dispatch","history","location","isFormDirtyRef","pathname","setFormDirty","isDirty","current","confirmHideModal","modalName","component","props","title","string","t","hint","fullWidth","maxWidth","componentProps","cancelLabel","confirmLabel","submitHandler","handleChangeComplexityPriorityAssignmentClaim","hideCompOnBlur","claimsProcessingSelected","fetchClaimDetails","setIsDirty","clickXHandler","cancelHandler","handleEditClaim","push","routes","claimsFNOL","newLoss","state","linkPolicy","isSearchTerm","claimObj","redirectUrl","handleCreateAdhoctask","breadcrumbs","name","label","lossRef","link","active","claimRef","claimReference","largeFont","TitleWBreadCrumb","paddingLeft","handleCreateRFIClaimLevel","titleChildren","disableAutoFocus","type","RFI_ON_CLAIMS","rowActions","id","disabled","status","callback"],"mappings":"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","sourcesContent":["import React, { useRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory, useLocation } from 'react-router';\r\nimport PropTypes from 'prop-types';\r\n// app\r\nimport { ClaimsTabTableRowView } from './ClaimsTabTableRow.view';\r\nimport { showModal, hideModal, setClaimsStepperControl } from 'stores';\r\nimport { STATUS_CLAIMS_DRAFT, STATUS_CLAIMS_IN_PROCESS } from 'consts';\r\nimport { Breadcrumb } from 'components';\r\n\r\nimport * as utils from 'utils';\r\nimport config from 'config';\r\nimport * as constants from 'consts';\r\n\r\n// mui\r\nimport { Typography } from '@material-ui/core';\r\n\r\nClaimsTabTableRow.prototype = {\r\n  claim: PropTypes.object.isRequired,\r\n  isSelected: PropTypes.bool,\r\n  isMultiSelect: PropTypes.bool,\r\n  columnProps: PropTypes.object.isRequired,\r\n  handlers: PropTypes.shape({\r\n    clickClaim: PropTypes.func.isRequired,\r\n    selectClaim: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport function ClaimsTabTableRow({ claim, handlers, ...rest }) {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n  const isFormDirtyRef = useRef(false);\r\n  const { pathname } = history.location;\r\n\r\n  const setFormDirty = (isDirty) => {\r\n    isFormDirtyRef.current = isDirty;\r\n  };\r\n\r\n  const confirmHideModal = (modalName) => {\r\n    if (isFormDirtyRef.current) {\r\n      dispatch(\r\n        showModal({\r\n          component: 'CONFIRM',\r\n          props: {\r\n            title: utils.string.t('navigation.form.subtitle'),\r\n            hint: utils.string.t('navigation.form.title'),\r\n            fullWidth: true,\r\n            maxWidth: 'xs',\r\n            componentProps: {\r\n              cancelLabel: utils.string.t('app.no'),\r\n              confirmLabel: utils.string.t('app.yes'),\r\n              submitHandler: () => {\r\n                dispatch(hideModal(modalName));\r\n              },\r\n            },\r\n          },\r\n        })\r\n      );\r\n    } else {\r\n      dispatch(hideModal(modalName));\r\n    }\r\n  };\r\n\r\n  const handleChangeComplexityPriorityAssignmentClaim = (claim) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CHANGE_COMPLEXITY_PRIORITY_ASSIGNMENT',\r\n        props: {\r\n          title: 'claims.processing.summary.buttons.changeComplexityPriorityAssignment',\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          hideCompOnBlur: false,\r\n          componentProps: {\r\n            claimsProcessingSelected: [claim],\r\n            fetchClaimDetails: true,\r\n            setIsDirty: setFormDirty,\r\n            clickXHandler: () => {\r\n              confirmHideModal('CHANGE_COMPLEXITY_PRIORITY_ASSIGNMENT');\r\n            },\r\n            cancelHandler: () => {\r\n              confirmHideModal('CHANGE_COMPLEXITY_PRIORITY_ASSIGNMENT');\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleEditClaim = (claim) => {\r\n    dispatch(setClaimsStepperControl(1));\r\n    history.push({\r\n      pathname: `${config.routes.claimsFNOL.newLoss}`,\r\n      state: {\r\n        linkPolicy: {\r\n          isSearchTerm: true,\r\n          claimObj: claim,\r\n        },\r\n        redirectUrl: location?.pathname,\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleCreateAdhoctask = (claim) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CREATE_AD_HOC_TASK_WIZARD',\r\n        props: {\r\n          title: 'claims.processing.taskFunction.createAdhocTask',\r\n          fullWidth: true,\r\n          maxWidth: 'xl',\r\n          hideCompOnBlur: false,\r\n          componentProps: {\r\n            claim: claim,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const breadcrumbs = [\r\n    {\r\n      name: 'lossRef',\r\n      label: utils.string.t('claims.loss.text', { lossRef: claim?.lossRef }),\r\n      link: pathname,\r\n      active: true,\r\n    },\r\n    {\r\n      name: 'claimRef',\r\n      label: `${utils.string.t('claims.rfiDashboard.breadCrumbs.claimRef', { claimRef: claim?.claimReference })}`,\r\n      link: pathname,\r\n      active: true,\r\n      largeFont: true,\r\n    },\r\n  ];\r\n\r\n  const TitleWBreadCrumb = () => {\r\n    return (\r\n      <>\r\n        <Breadcrumb links={breadcrumbs} />\r\n        <Typography variant=\"h2\" style={{ paddingLeft: '1.2rem' }}>\r\n          {utils.string.t('claims.processing.taskFunction.createRFI')}\r\n        </Typography>\r\n      </>\r\n    );\r\n  };\r\n  const handleCreateRFIClaimLevel = () => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CLAIMS_CREATE_RFI_STEPPER',\r\n        props: {\r\n          titleChildren: <TitleWBreadCrumb />,\r\n          hideCompOnBlur: false,\r\n          fullWidth: true,\r\n          maxWidth: 'lg',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            claim: claim,\r\n            type: constants.RFI_ON_CLAIMS,\r\n            cancelHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const rowActions = [\r\n    {\r\n      id: 'editClaim',\r\n      label: utils.string.t('claims.claimsTab.popOverButtonItems.editClaim'),\r\n      disabled: claim.status !== STATUS_CLAIMS_DRAFT,\r\n      callback: () => handleEditClaim(claim),\r\n    },\r\n    {\r\n      id: 'changeItems',\r\n      label: utils.string.t('claims.claimsTab.popOverButtonItems.changeItems'),\r\n      callback: () => handleChangeComplexityPriorityAssignmentClaim(claim),\r\n    },\r\n    {\r\n      id: 'createRFI',\r\n      label: utils.string.t('claims.claimsTab.popOverButtonItems.createRFI'),\r\n      callback: () => handleCreateRFIClaimLevel(claim),\r\n    },\r\n    {\r\n      id: 'createAdhocTask',\r\n      label: utils.string.t('claims.claimsTab.popOverButtonItems.createAdhocTask'),\r\n      disabled: claim?.status !== STATUS_CLAIMS_IN_PROCESS,\r\n      callback: () => handleCreateAdhoctask(claim),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <ClaimsTabTableRowView\r\n      claim={claim}\r\n      rowActions={rowActions}\r\n      handlers={{\r\n        selectClaim: handlers.selectClaim,\r\n        clickClaim: handlers.clickClaim,\r\n      }}\r\n      {...rest}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}