{"ast":null,"code":"import { addLoader, authLogout, removeLoader } from 'stores';\nimport * as utils from 'utils';\nimport get from 'lodash/get';\nexport var postClaimsLossFilters = function postClaimsLossFilters(params) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint,\n        claims = _getState.claims;\n\n    var defaultError = {\n      file: 'stores/claims.actions.postClaimsLossFilters'\n    };\n    dispatch(postClaimsLossFiltersRequest());\n    dispatch(addLoader('postClaimsLossFilters'));\n    var prevDirection = get(claims, 'claims.sort.direction') || '';\n    var newDirection = params.hasOwnProperty('direction') ? params.direction : prevDirection;\n    var prevQuery = get(claims, 'claims.query') || '';\n    var newQuery = params.hasOwnProperty('term') ? params.term : prevQuery;\n    var prevSortBy = get(claims, 'claims.sort.by') || '';\n    var newSortBy = params.hasOwnProperty('sortBy') ? params.sortBy : prevSortBy;\n    var prevSearchBy = get(claims, 'claims.searchBy') || '';\n    var newSearchBy = params.hasOwnProperty('searchBy') ? params.searchBy : prevSearchBy;\n    var data = {\n      direction: newDirection,\n      page: params && params.page || 0,\n      pageSize: params && params.size || claims.claims.pageSize,\n      search: newQuery,\n      sortBy: newSortBy,\n      searchBy: newSearchBy\n    };\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.claimService,\n      path: 'api/data/claims/search/filter-values',\n      data: data\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (data) {\n      dispatch(postClaimsLossFiltersSuccess(data.data));\n      dispatch(removeLoader('postClaimsLossFilters'));\n      return data;\n    })[\"catch\"](function (err) {\n      dispatch(postClaimsLossFiltersFailure(err, defaultError));\n      dispatch(removeLoader('postClaimsLossFilters'));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      return err;\n    });\n  };\n};\nexport var postClaimsLossFiltersRequest = function postClaimsLossFiltersRequest(data) {\n  return {\n    type: 'CLAIMS_LOSS_FILTERS_POST_REQUEST',\n    payload: data\n  };\n};\nexport var postClaimsLossFiltersSuccess = function postClaimsLossFiltersSuccess(data) {\n  return {\n    type: 'CLAIMS_LOSS_FILTERS_POST_SUCCESS',\n    payload: data\n  };\n};\nexport var postClaimsLossFiltersFailure = function postClaimsLossFiltersFailure(data) {\n  return {\n    type: 'CLAIMS_LOSS_FILTER_POST_ERROR',\n    payload: data\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.postClaimsLossFilters.js"],"names":["addLoader","authLogout","removeLoader","utils","get","postClaimsLossFilters","params","dispatch","getState","auth","user","endpoint","config","vars","claims","defaultError","file","postClaimsLossFiltersRequest","prevDirection","newDirection","hasOwnProperty","direction","prevQuery","newQuery","term","prevSortBy","newSortBy","sortBy","prevSearchBy","newSearchBy","searchBy","data","page","pageSize","size","search","api","post","token","accessToken","claimService","path","then","response","handleResponse","postClaimsLossFiltersSuccess","err","postClaimsLossFiltersFailure","handleUnauthorized","type","payload"],"mappings":"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","sourcesContent":["import { addLoader, authLogout, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\nimport get from 'lodash/get';\r\n\r\nexport const postClaimsLossFilters = (params) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}, claims} = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.postClaimsLossFilters',\r\n  };\r\n\r\n  dispatch(postClaimsLossFiltersRequest());\r\n  dispatch(addLoader('postClaimsLossFilters'));\r\n\r\n  const prevDirection = get(claims, 'claims.sort.direction') || '';\r\n  const newDirection = params.hasOwnProperty('direction') ? params.direction : prevDirection;\r\n\r\n  const prevQuery = get(claims, 'claims.query') || '';\r\n  const newQuery = params.hasOwnProperty('term') ? params.term : prevQuery;\r\n\r\n  const prevSortBy = get(claims, 'claims.sort.by') || '';\r\n  const newSortBy = params.hasOwnProperty('sortBy') ? params.sortBy : prevSortBy;\r\n\r\n  const prevSearchBy = get(claims, 'claims.searchBy') || '';\r\n  const newSearchBy = params.hasOwnProperty('searchBy') ? params.searchBy : prevSearchBy;\r\n\r\n  const data = {\r\n    direction: newDirection,\r\n    page: (params && params.page) || 0,\r\n    pageSize: (params && params.size) || claims.claims.pageSize,\r\n    search: newQuery,\r\n    sortBy: newSortBy,\r\n    searchBy: newSearchBy,\r\n  };\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.claimService,\r\n      path: 'api/data/claims/search/filter-values',\r\n      data,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((data) => {\r\n      dispatch(postClaimsLossFiltersSuccess(data.data));\r\n      dispatch(removeLoader('postClaimsLossFilters'));\r\n      return data;\r\n    })\r\n    .catch((err) => {\r\n      dispatch(postClaimsLossFiltersFailure(err, defaultError));\r\n      dispatch(removeLoader('postClaimsLossFilters'));\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const postClaimsLossFiltersRequest = (data) => {\r\n  return {\r\n    type: 'CLAIMS_LOSS_FILTERS_POST_REQUEST',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const postClaimsLossFiltersSuccess = (data) => {\r\n  return {\r\n    type: 'CLAIMS_LOSS_FILTERS_POST_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const postClaimsLossFiltersFailure = (data) => {\r\n  return {\r\n    type: 'CLAIMS_LOSS_FILTER_POST_ERROR',\r\n    payload: data,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}