{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n// app\nimport { addLoader, authLogout, removeLoader } from 'stores';\nimport * as utils from 'utils';\nexport var fileUploadLinkDownload = function fileUploadLinkDownload(doc) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var documentPath = doc.documentPath,\n        documentName = doc.documentName,\n        xbinstance = doc.xbinstance;\n    var defaultError = {\n      file: 'stores/fileUpload.actions.download'\n    };\n    dispatch(addLoader('fileUploadLinkDownload'));\n    dispatch(fileUploadLinkDownloadRequest(doc));\n\n    if (!documentPath || !documentName || !xbinstance) {\n      dispatch(removeLoader('fileUploadLinkDownload'));\n      dispatch(fileUploadLinkDownloadFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Missing file parameters'\n      })));\n      return;\n    }\n\n    utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.dmsService,\n      path: \"dms/document/download?documentPath=\".concat(documentPath, \"&instance=\").concat(xbinstance)\n    }).then(function (response) {\n      return response.blob();\n    }).then(function (blob) {\n      return utils.file.download(blob, documentName);\n    }).catch(function (err) {\n      var errorParams = {\n        file: 'stores/document.actions',\n        message: 'API fetch error (fileUploadLinkDownload)'\n      };\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n    }).finally(function () {\n      dispatch(removeLoader('fileUploadLinkDownload'));\n    });\n  };\n};\nexport var fileUploadLinkDownloadRequest = function fileUploadLinkDownloadRequest(doc) {\n  return {\n    type: 'FILE_UPLOAD_LINK_DOWNLOAD_REQUEST',\n    payload: doc\n  };\n};\nexport var fileUploadLinkDownloadFailure = function fileUploadLinkDownloadFailure(error) {\n  return {\n    type: 'FILE_UPLOAD_LINK_DOWNLOAD_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/fileUpload/fileUpload.actions.download.js"],"names":["addLoader","authLogout","removeLoader","utils","fileUploadLinkDownload","doc","dispatch","getState","auth","user","endpoint","config","vars","documentPath","documentName","xbinstance","defaultError","file","fileUploadLinkDownloadRequest","fileUploadLinkDownloadFailure","message","api","post","token","accessToken","dmsService","path","then","response","blob","download","catch","err","errorParams","handleError","handleUnauthorized","finally","type","payload","error"],"mappings":";AAAA;AACA,SAASA,SAAT,EAAoBC,UAApB,EAAgCC,YAAhC,QAAoD,QAApD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAO,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,GAAD;AAAA,SAAS,UAACC,QAAD,EAAWC,QAAX,EAAwB;AACrE;AADqE,oBAEdA,QAAQ,EAFM;AAAA,QAEtDC,IAFsD,aAE7DC,IAF6D,CAEtDD,IAFsD;AAAA,QAE7BE,QAF6B,aAE/CC,MAF+C,CAErCC,IAFqC,CAE7BF,QAF6B;;AAAA,QAG7DG,YAH6D,GAGlBR,GAHkB,CAG7DQ,YAH6D;AAAA,QAG/CC,YAH+C,GAGlBT,GAHkB,CAG/CS,YAH+C;AAAA,QAGjCC,UAHiC,GAGlBV,GAHkB,CAGjCU,UAHiC;AAKrE,QAAMC,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE;AADa,KAArB;AAIAX,IAAAA,QAAQ,CAACN,SAAS,CAAC,wBAAD,CAAV,CAAR;AACAM,IAAAA,QAAQ,CAACY,6BAA6B,CAACb,GAAD,CAA9B,CAAR;;AAEA,QAAI,CAACQ,YAAD,IAAiB,CAACC,YAAlB,IAAkC,CAACC,UAAvC,EAAmD;AACjDT,MAAAA,QAAQ,CAACJ,YAAY,CAAC,wBAAD,CAAb,CAAR;AACAI,MAAAA,QAAQ,CAACa,6BAA6B,iCAAMH,YAAN;AAAoBI,QAAAA,OAAO,EAAE;AAA7B,SAA9B,CAAR;AACA;AACD;;AAEDjB,IAAAA,KAAK,CAACkB,GAAN,CACGC,IADH,CACQ;AACJC,MAAAA,KAAK,EAAEf,IAAI,CAACgB,WADR;AAEJd,MAAAA,QAAQ,EAAEA,QAAQ,CAACe,UAFf;AAGJC,MAAAA,IAAI,+CAAwCb,YAAxC,uBAAiEE,UAAjE;AAHA,KADR,EAMGY,IANH,CAMQ,UAACC,QAAD;AAAA,aAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,KANR,EAOGF,IAPH,CAOQ,UAACE,IAAD;AAAA,aAAU1B,KAAK,CAACc,IAAN,CAAWa,QAAX,CAAoBD,IAApB,EAA0Bf,YAA1B,CAAV;AAAA,KAPR,EAQGiB,KARH,CAQS,UAACC,GAAD,EAAS;AACd,UAAMC,WAAW,GAAG;AAClBhB,QAAAA,IAAI,EAAE,yBADY;AAElBG,QAAAA,OAAO,EAAE;AAFS,OAApB;AAIAjB,MAAAA,KAAK,CAACkB,GAAN,CAAUa,WAAV,CAAsBF,GAAtB,EAA2BC,WAA3B;AACA9B,MAAAA,KAAK,CAACkB,GAAN,CAAUc,kBAAV,CAA6BH,GAA7B,EAAkC1B,QAAlC,EAA4CL,UAA5C;AACD,KAfH,EAgBGmC,OAhBH,CAgBW,YAAM;AACb9B,MAAAA,QAAQ,CAACJ,YAAY,CAAC,wBAAD,CAAb,CAAR;AACD,KAlBH;AAmBD,GArCqC;AAAA,CAA/B;AAuCP,OAAO,IAAMgB,6BAA6B,GAAG,SAAhCA,6BAAgC,CAACb,GAAD,EAAS;AACpD,SAAO;AACLgC,IAAAA,IAAI,EAAE,mCADD;AAELC,IAAAA,OAAO,EAAEjC;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMc,6BAA6B,GAAG,SAAhCA,6BAAgC,CAACoB,KAAD,EAAW;AACtD,SAAO;AACLF,IAAAA,IAAI,EAAE,mCADD;AAELC,IAAAA,OAAO,EAAEC;AAFJ,GAAP;AAID,CALM","sourcesContent":["// app\r\nimport { addLoader, authLogout, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const fileUploadLinkDownload = (doc) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: {auth}, config: { vars: { endpoint }}} = getState();\r\n  const { documentPath, documentName, xbinstance } = doc;\r\n\r\n  const defaultError = {\r\n    file: 'stores/fileUpload.actions.download',\r\n  };\r\n\r\n  dispatch(addLoader('fileUploadLinkDownload'));\r\n  dispatch(fileUploadLinkDownloadRequest(doc));\r\n\r\n  if (!documentPath || !documentName || !xbinstance) {\r\n    dispatch(removeLoader('fileUploadLinkDownload'));\r\n    dispatch(fileUploadLinkDownloadFailure({ ...defaultError, message: 'Missing file parameters' }));\r\n    return;\r\n  }\r\n\r\n  utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.dmsService,\r\n      path: `dms/document/download?documentPath=${documentPath}&instance=${xbinstance}`,\r\n    })\r\n    .then((response) => response.blob())\r\n    .then((blob) => utils.file.download(blob, documentName))\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        file: 'stores/document.actions',\r\n        message: 'API fetch error (fileUploadLinkDownload)',\r\n      };\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('fileUploadLinkDownload'));\r\n    });\r\n};\r\n\r\nexport const fileUploadLinkDownloadRequest = (doc) => {\r\n  return {\r\n    type: 'FILE_UPLOAD_LINK_DOWNLOAD_REQUEST',\r\n    payload: doc,\r\n  };\r\n};\r\n\r\nexport const fileUploadLinkDownloadFailure = (error) => {\r\n  return {\r\n    type: 'FILE_UPLOAD_LINK_DOWNLOAD_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}