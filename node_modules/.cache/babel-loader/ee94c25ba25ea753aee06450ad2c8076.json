{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as utils from 'utils';\nimport types from './types';\nimport { enqueueNotification, addLoader, removeLoader } from 'stores';\nexport var fetchDocumentMetaData = function fetchDocumentMetaData(selectedSourceId, metaDataSectionRef) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint,\n        dmsContext = _getState.ui.dmsContext; // eslint-disable-next-line\n\n\n    var _utils$dmsFormatter$g = utils.dmsFormatter.getMetaDataParams(getState(), dmsContext, selectedSourceId, metaDataSectionRef),\n        sectionType = _utils$dmsFormatter$g.sectionType,\n        sourceId = _utils$dmsFormatter$g.sourceId,\n        divisionId = _utils$dmsFormatter$g.divisionId,\n        sectionRef = _utils$dmsFormatter$g.sectionRef,\n        referenceId = _utils$dmsFormatter$g.referenceId;\n\n    var params = _objectSpread(_objectSpread({\n      sectionType: sectionType,\n      // corresponds to contexts: Loss, Claims, Tasks, Case\n      sourceId: sourceId\n    }, divisionId ? {\n      divisionId: divisionId\n    } : {}), {}, {\n      // is needed for Claims and Loss contexts\n      referenceId: referenceId,\n      // corresponds to ClaimId, lossDetailID, policyId etc\n      sectionRef: sectionRef // corresponds to ClaimRef, lossDetailRef, policyRef etc\n\n    });\n\n    dispatch({\n      type: types.GET_DOCUMENT_META_DATA_PENDING\n    });\n    dispatch(addLoader('fetchDocumentMetaData'));\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.dmsService,\n      path: 'data/context/details',\n      params: params\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch({\n        type: types.GET_DOCUMENT_META_DATA_SUCCESS,\n        payload: data === null || data === void 0 ? void 0 : data.data\n      });\n      return data;\n    }).catch(function (err) {\n      var defaultError = {\n        file: 'stores/dms.actions.getMetaData'\n      };\n      dispatch(enqueueNotification('dms.upload.notifications.getMetaDataFailed', 'error'));\n      utils.api.handleError(err, defaultError);\n      return dispatch({\n        type: types.GET_DOCUMENT_META_DATA_REJECTED,\n        payload: err\n      });\n    }).finally(function () {\n      dispatch(removeLoader('fetchDocumentMetaData'));\n    });\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/dms/dms.actions.getMetaData.js"],"names":["utils","types","enqueueNotification","addLoader","removeLoader","fetchDocumentMetaData","selectedSourceId","metaDataSectionRef","dispatch","getState","auth","user","endpoint","config","vars","dmsContext","ui","dmsFormatter","getMetaDataParams","sectionType","sourceId","divisionId","sectionRef","referenceId","params","type","GET_DOCUMENT_META_DATA_PENDING","api","get","token","accessToken","dmsService","path","then","response","handleResponse","json","handleNewData","data","GET_DOCUMENT_META_DATA_SUCCESS","payload","catch","err","defaultError","file","handleError","GET_DOCUMENT_META_DATA_REJECTED","finally"],"mappings":"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","sourcesContent":["import * as utils from 'utils';\r\nimport types from './types';\r\nimport { enqueueNotification, addLoader, removeLoader } from 'stores';\r\n\r\nexport const fetchDocumentMetaData = (selectedSourceId, metaDataSectionRef) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }, }, ui: { dmsContext }, } = getState();\r\n\r\n  // eslint-disable-next-line\r\n  const { sectionType, sourceId, divisionId, sectionRef, referenceId } = utils.dmsFormatter.getMetaDataParams(\r\n    getState(),\r\n    dmsContext,\r\n    selectedSourceId,\r\n    metaDataSectionRef\r\n  );\r\n\r\n  const params = {\r\n    sectionType, // corresponds to contexts: Loss, Claims, Tasks, Case\r\n    sourceId, // is non-mandatory for Loss context\r\n    ...(divisionId ? { divisionId } : {}), // is needed for Claims and Loss contexts\r\n    referenceId, // corresponds to ClaimId, lossDetailID, policyId etc\r\n    sectionRef, // corresponds to ClaimRef, lossDetailRef, policyRef etc\r\n  };\r\n\r\n  dispatch({ type: types.GET_DOCUMENT_META_DATA_PENDING });\r\n  dispatch(addLoader('fetchDocumentMetaData'));\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.dmsService,\r\n      path: 'data/context/details',\r\n      params,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch({\r\n        type: types.GET_DOCUMENT_META_DATA_SUCCESS,\r\n        payload: data?.data,\r\n      });\r\n      return data;\r\n    })\r\n    .catch((err) => {\r\n      const defaultError = {\r\n        file: 'stores/dms.actions.getMetaData',\r\n      };\r\n\r\n      dispatch(enqueueNotification('dms.upload.notifications.getMetaDataFailed', 'error'));\r\n      utils.api.handleError(err, defaultError);\r\n      return dispatch({\r\n        type: types.GET_DOCUMENT_META_DATA_REJECTED,\r\n        payload: err,\r\n      });\r\n    }).finally(() => {\r\n      dispatch(removeLoader('fetchDocumentMetaData'));\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}