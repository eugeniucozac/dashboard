{"ast":null,"code":"import \"core-js/modules/es.promise.finally\";\nimport * as utils from 'utils';\nimport { authLogout, addLoader, removeLoader } from 'stores';\nexport var getRfiResolutionCodes = function getRfiResolutionCodes() {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    dispatch(getRfiResolutionCodesRequest());\n    dispatch(addLoader('getRfiResolutionCodes'));\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.odsService,\n      path: 'referenceData/RESOLUTIONCODE',\n      params: {\n        referenceDataType: 'RESOLUTIONCODE'\n      }\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(getRfiResolutionCodesSuccess(data.data));\n      return data;\n    })[\"catch\"](function (err) {\n      var errorParams = {\n        file: 'stores/premiumProcessing.actions.getRfiResolutionCode',\n        message: 'API fetch error (premiumProcessing.getRfiResolutionCode)'\n      };\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(getRfiResolutionCodesFailure(err));\n      return err;\n    })[\"finally\"](function () {\n      dispatch(removeLoader('getRfiResolutionCodes'));\n    });\n  };\n};\nexport var getRfiResolutionCodesRequest = function getRfiResolutionCodesRequest() {\n  return {\n    type: 'RFI_RESOLUTION_CODE_GET_REQUEST'\n  };\n};\nexport var getRfiResolutionCodesSuccess = function getRfiResolutionCodesSuccess(data) {\n  return {\n    type: 'RFI_RESOLUTION_CODE_GET_SUCCESS',\n    payload: data === null || data === void 0 ? void 0 : data.resolutionCode\n  };\n};\nexport var getRfiResolutionCodesFailure = function getRfiResolutionCodesFailure(error) {\n  return {\n    type: 'RFI_RESOLUTION_CODE_GET_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/premiumProcessing/premiumProcessing.actions.getRfiResolutionCodes.js"],"names":["utils","authLogout","addLoader","removeLoader","getRfiResolutionCodes","dispatch","getState","auth","user","endpoint","config","vars","getRfiResolutionCodesRequest","api","get","token","accessToken","odsService","path","params","referenceDataType","then","response","handleResponse","json","handleNewData","data","getRfiResolutionCodesSuccess","err","errorParams","file","message","handleError","handleUnauthorized","getRfiResolutionCodesFailure","type","payload","resolutionCode","error"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,YAAhC,QAAoD,QAApD;AAEA,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB;AAAA,SAAM,UAACC,QAAD,EAAWC,QAAX,EAAwB;AACjE;AADiE,oBAERA,QAAQ,EAFA;AAAA,QAEjDC,IAFiD,aAEzDC,IAFyD,CAEjDD,IAFiD;AAAA,QAEvBE,QAFuB,aAEzCC,MAFyC,CAE/BC,IAF+B,CAEvBF,QAFuB;;AAIjEJ,IAAAA,QAAQ,CAACO,4BAA4B,EAA7B,CAAR;AACAP,IAAAA,QAAQ,CAACH,SAAS,CAAC,uBAAD,CAAV,CAAR;AAEA,WAAOF,KAAK,CAACa,GAAN,CACJC,GADI,CACA;AACHC,MAAAA,KAAK,EAAER,IAAI,CAACS,WADT;AAEHP,MAAAA,QAAQ,EAAEA,QAAQ,CAACQ,UAFhB;AAGHC,MAAAA,IAAI,EAAE,8BAHH;AAIHC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,iBAAiB,EAAE;AAArB;AAJL,KADA,EAOJC,IAPI,CAOC,UAACC,QAAD;AAAA,aAActB,KAAK,CAACa,GAAN,CAAUU,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAPD,EAQJD,IARI,CAQC,UAACG,IAAD;AAAA,aAAUxB,KAAK,CAACa,GAAN,CAAUY,aAAV,CAAwBD,IAAxB,CAAV;AAAA,KARD,EASJH,IATI,CASC,UAACK,IAAD,EAAU;AACdrB,MAAAA,QAAQ,CAACsB,4BAA4B,CAACD,IAAI,CAACA,IAAN,CAA7B,CAAR;AACA,aAAOA,IAAP;AACD,KAZI,WAaE,UAACE,GAAD,EAAS;AACd,UAAMC,WAAW,GAAG;AAClBC,QAAAA,IAAI,EAAE,uDADY;AAElBC,QAAAA,OAAO,EAAE;AAFS,OAApB;AAKA/B,MAAAA,KAAK,CAACa,GAAN,CAAUmB,WAAV,CAAsBJ,GAAtB,EAA2BC,WAA3B;AACA7B,MAAAA,KAAK,CAACa,GAAN,CAAUoB,kBAAV,CAA6BL,GAA7B,EAAkCvB,QAAlC,EAA4CJ,UAA5C;AACAI,MAAAA,QAAQ,CAAC6B,4BAA4B,CAACN,GAAD,CAA7B,CAAR;AACA,aAAOA,GAAP;AACD,KAvBI,aAwBI,YAAM;AACbvB,MAAAA,QAAQ,CAACF,YAAY,CAAC,uBAAD,CAAb,CAAR;AACD,KA1BI,CAAP;AA2BD,GAlCoC;AAAA,CAA9B;AAoCP,OAAO,IAAMS,4BAA4B,GAAG,SAA/BA,4BAA+B,GAAM;AAChD,SAAO;AACLuB,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,IAAMR,4BAA4B,GAAG,SAA/BA,4BAA+B,CAACD,IAAD,EAAU;AACpD,SAAO;AACLS,IAAAA,IAAI,EAAE,iCADD;AAELC,IAAAA,OAAO,EAAEV,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEW;AAFV,GAAP;AAID,CALM;AAOP,OAAO,IAAMH,4BAA4B,GAAG,SAA/BA,4BAA+B,CAACI,KAAD,EAAW;AACrD,SAAO;AACLH,IAAAA,IAAI,EAAE,iCADD;AAELC,IAAAA,OAAO,EAAEE;AAFJ,GAAP;AAID,CALM","sourcesContent":["import * as utils from 'utils';\r\nimport { authLogout, addLoader, removeLoader } from 'stores';\r\n\r\nexport const getRfiResolutionCodes = () => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  dispatch(getRfiResolutionCodesRequest());\r\n  dispatch(addLoader('getRfiResolutionCodes'));\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.odsService,\r\n      path: 'referenceData/RESOLUTIONCODE',\r\n      params: { referenceDataType: 'RESOLUTIONCODE' },\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(getRfiResolutionCodesSuccess(data.data));\r\n      return data;\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        file: 'stores/premiumProcessing.actions.getRfiResolutionCode',\r\n        message: 'API fetch error (premiumProcessing.getRfiResolutionCode)',\r\n      };\r\n\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(getRfiResolutionCodesFailure(err));\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('getRfiResolutionCodes'));\r\n    });\r\n};\r\n\r\nexport const getRfiResolutionCodesRequest = () => {\r\n  return {\r\n    type: 'RFI_RESOLUTION_CODE_GET_REQUEST',\r\n  };\r\n};\r\n\r\nexport const getRfiResolutionCodesSuccess = (data) => {\r\n  return {\r\n    type: 'RFI_RESOLUTION_CODE_GET_SUCCESS',\r\n    payload: data?.resolutionCode,\r\n  };\r\n};\r\n\r\nexport const getRfiResolutionCodesFailure = (error) => {\r\n  return {\r\n    type: 'RFI_RESOLUTION_CODE_GET_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}