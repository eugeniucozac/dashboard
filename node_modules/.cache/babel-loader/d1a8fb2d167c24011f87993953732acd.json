{"ast":null,"code":"import _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport kebabCase from 'lodash/kebabCase';\nimport moment from 'moment'; // app\n\nimport { addLoader, authLogout, removeLoader } from 'stores';\nimport * as utils from 'utils';\nimport config from 'config';\nexport var downloadRiskQuote = function downloadRiskQuote(_ref) {\n  var _ref$quote = _ref.quote,\n      quote = _ref$quote === void 0 ? {} : _ref$quote,\n      _ref$insureds = _ref.insureds,\n      insureds = _ref$insureds === void 0 ? [] : _ref$insureds;\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/risk.actions.downloadQuote'\n    };\n    dispatch({\n      type: 'RISK_DOWNLOAD_QUOTE',\n      payload: {\n        quote: quote,\n        insureds: insureds\n      }\n    });\n\n    if (!quote.id) {\n      return _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Data missing'\n      });\n    }\n\n    var insuredsName = insureds.map(function (i) {\n      return kebabCase(i.name);\n    }).join('-') || quote.riskId;\n    var date = quote.validUntil ? moment(quote.validUntil).format(config.ui.format.date.numeric) : '';\n    var defaultFilename = \"quote\".concat(insuredsName ? \"_\".concat(insuredsName) : '').concat(date ? \"_\".concat(date) : '');\n    var responseFilename = '';\n    dispatch(addLoader({\n      key: 'downloadRiskQuote',\n      message: utils.string.t('app.downloadFile')\n    }));\n    utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.auth,\n      path: \"api/v1/quotes/\".concat(quote.id, \"/documents?renew=true\")\n    }).then( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(response) {\n        var blob;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!response.ok) {\n                  _context.next = 8;\n                  break;\n                }\n\n                _context.next = 3;\n                return response.blob();\n\n              case 3:\n                blob = _context.sent;\n                responseFilename = utils.file.getFilenameFromHeadersBlob(response.headers, blob, defaultFilename);\n                return _context.abrupt(\"return\", blob);\n\n              case 8:\n                return _context.abrupt(\"return\", Promise.reject({}));\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }()).then(function (blob) {\n      utils.file.download(blob, responseFilename);\n      return responseFilename;\n    }).catch(function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API fetch error (blob)'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n    }).finally(function () {\n      dispatch(removeLoader('downloadRiskQuote'));\n    });\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/risk/risk.actions.downloadQuote.js"],"names":["kebabCase","moment","addLoader","authLogout","removeLoader","utils","config","downloadRiskQuote","quote","insureds","dispatch","getState","auth","user","endpoint","vars","defaultError","file","type","payload","id","message","insuredsName","map","i","name","join","riskId","date","validUntil","format","ui","numeric","defaultFilename","responseFilename","key","string","t","api","get","token","accessToken","path","then","response","ok","blob","getFilenameFromHeadersBlob","headers","Promise","reject","download","catch","err","errorParams","handleError","handleUnauthorized","finally"],"mappings":"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","sourcesContent":["import kebabCase from 'lodash/kebabCase';\r\nimport moment from 'moment';\r\n\r\n// app\r\nimport { addLoader, authLogout, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\nimport config from 'config';\r\n\r\nexport const downloadRiskQuote =\r\n  ({ quote = {}, insureds = [] }) =>\r\n  (dispatch, getState) => {\r\n    // prettier-ignore\r\n    const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n    const defaultError = {\r\n      file: 'stores/risk.actions.downloadQuote',\r\n    };\r\n\r\n    dispatch({\r\n      type: 'RISK_DOWNLOAD_QUOTE',\r\n      payload: { quote, insureds },\r\n    });\r\n\r\n    if (!quote.id) {\r\n      return { ...defaultError, message: 'Data missing' };\r\n    }\r\n\r\n    const insuredsName = insureds.map((i) => kebabCase(i.name)).join('-') || quote.riskId;\r\n    const date = quote.validUntil ? moment(quote.validUntil).format(config.ui.format.date.numeric) : '';\r\n    const defaultFilename = `quote${insuredsName ? `_${insuredsName}` : ''}${date ? `_${date}` : ''}`;\r\n    let responseFilename = '';\r\n\r\n    dispatch(addLoader({ key: 'downloadRiskQuote', message: utils.string.t('app.downloadFile') }));\r\n\r\n    utils.api\r\n      .get({\r\n        token: auth.accessToken,\r\n        endpoint: endpoint.auth,\r\n        path: `api/v1/quotes/${quote.id}/documents?renew=true`,\r\n      })\r\n      .then(async (response) => {\r\n        if (response.ok) {\r\n          const blob = await response.blob();\r\n          responseFilename = utils.file.getFilenameFromHeadersBlob(response.headers, blob, defaultFilename);\r\n          return blob;\r\n        } else {\r\n          return Promise.reject({});\r\n        }\r\n      })\r\n      .then((blob) => {\r\n        utils.file.download(blob, responseFilename);\r\n        return responseFilename;\r\n      })\r\n      .catch((err) => {\r\n        const errorParams = {\r\n          ...defaultError,\r\n          message: 'API fetch error (blob)',\r\n        };\r\n        utils.api.handleError(err, errorParams);\r\n        utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      })\r\n      .finally(() => {\r\n        dispatch(removeLoader('downloadRiskQuote'));\r\n      });\r\n  };\r\n"]},"metadata":{},"sourceType":"module"}