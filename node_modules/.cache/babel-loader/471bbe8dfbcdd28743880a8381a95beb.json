{"ast":null,"code":"import \"core-js/modules/es.array.sort\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\LinkClaimSelectPolicy\\\\LinkClaimSelectPolicy.view.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport get from 'lodash/get';\nimport PropTypes from 'prop-types'; //app\n\nimport styles from './LinkClaimSelectPolicy.styles';\nimport * as utils from 'utils';\nimport config from 'config';\nimport { TableCell, TableHead, Pagination, Empty, Tooltip, TableFilters, TableToolbar, FormAutocompleteMui, Skeleton } from 'components';\nimport { ReactComponent as IconSearchFile } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/svg/line-icon-search-file.svg\";\nimport { usePagination, useSort } from 'hooks'; //components\n\nimport { LinkClaimPolicy } from 'modules'; //mui\n\nimport { makeStyles, Grid, TableContainer, Table, TableRow, TableBody, Typography, Box, RadioGroup, Radio } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nLinkClaimSelectPolicyView.propTypes = {\n  columnsArray: PropTypes.array.isRequired,\n  rows: PropTypes.array.isRequired,\n  sort: PropTypes.object.isRequired,\n  policyData: PropTypes.object.isRequired,\n  selectedPolicy: PropTypes.bool,\n  pagination: PropTypes.object.isRequired,\n  viewControl: PropTypes.object.isRequired,\n  isFetchingFilters: PropTypes.bool,\n  isTableLoading: PropTypes.bool,\n  tableFilterFields: PropTypes.array.isRequired,\n  viewFields: PropTypes.array.isRequired,\n  handlers: PropTypes.shape({\n    handleSort: PropTypes.func.isRequired,\n    handleSearch: PropTypes.func.isRequired,\n    handleSearchFilter: PropTypes.func.isRequired,\n    onResetFilter: PropTypes.func.isRequired,\n    onResetSearch: PropTypes.func.isRequired,\n    handlePolicyData: PropTypes.func.isRequired,\n    handleChangePage: PropTypes.func.isRequired,\n    handleChangeRowsPerPage: PropTypes.func.isRequired,\n    columnProps: PropTypes.func.isRequired,\n    toggleColumn: PropTypes.func.isRequired,\n    onSelectSearchBy: PropTypes.func.isRequired\n  }).isRequired\n};\nexport function LinkClaimSelectPolicyView(_ref) {\n  _s();\n\n  var _this = this;\n\n  var columnsArray = _ref.columnsArray,\n      _ref$rows = _ref.rows,\n      rows = _ref$rows === void 0 ? [] : _ref$rows,\n      sortObj = _ref.sort,\n      policyData = _ref.policyData,\n      selectedPolicyRender = _ref.selectedPolicyRender,\n      setSelectedPolicyRender = _ref.setSelectedPolicyRender,\n      pagination = _ref.pagination,\n      tableFilterFields = _ref.tableFilterFields,\n      handlers = _ref.handlers,\n      viewControl = _ref.viewControl,\n      viewFields = _ref.viewFields,\n      isFetchingFilters = _ref.isFetchingFilters,\n      confirm = _ref.confirm,\n      validation = _ref.validation,\n      setValidation = _ref.setValidation,\n      sectionEnabledValidationFlag = _ref.sectionEnabledValidationFlag,\n      setActiveStep = _ref.setActiveStep,\n      index = _ref.index,\n      isFormsEdited = _ref.isFormsEdited,\n      setFormEditedStatus = _ref.setFormEditedStatus,\n      saveStatus = _ref.saveStatus,\n      policyInformation = _ref.policyInformation,\n      claimInfo = _ref.claimInfo,\n      handleFormStatus = _ref.handleFormStatus,\n      isTableLoading = _ref.isTableLoading,\n      selectNextPolicy = _ref.selectNextPolicy,\n      setSelectNextPolicy = _ref.setSelectNextPolicy;\n  var classes = makeStyles(styles, {\n    name: 'LinkClaimSelectPolicy'\n  })();\n\n  var _useSort = useSort(columnsArray, sortObj, handlers.handleSort),\n      cols = _useSort.cols,\n      sort = _useSort.sort;\n\n  var paginationObj = usePagination(rows, pagination, handlers.handleChangePage, handlers.handleChangeRowsPerPage);\n  var cellLength = 25;\n  return /*#__PURE__*/_jsxDEV(Box, {\n    mt: 2,\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body2\",\n      className: classes.title,\n      children: utils.string.t('claims.searchPolicy.claimRef')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      children: (claimInfo === null || claimInfo === void 0 ? void 0 : claimInfo.claimReference) || ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body2\",\n      className: classes.searchPolicyTitleBorder,\n      children: utils.string.t('claims.searchPolicy.searchPolicies')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      my: 1,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        children: utils.string.t('claims.searchPolicy.linkPolicySearchInputLabel')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableToolbar, {\n        children: /*#__PURE__*/_jsxDEV(TableFilters, {\n          search: true,\n          searchBy: /*#__PURE__*/_jsxDEV(Box, {\n            className: classes.filterBox,\n            children: /*#__PURE__*/_jsxDEV(FormAutocompleteMui, _objectSpread(_objectSpread({}, utils.form.getFieldProps(viewFields, 'searchBy')), {}, {\n              control: viewControl,\n              nestedClasses: {\n                root: classes.selectAutocomplete\n              },\n              callback: function callback(event, obj) {\n                handlers.onSelectSearchBy(obj === null || obj === void 0 ? void 0 : obj.value, obj === null || obj === void 0 ? void 0 : obj.label);\n              }\n            }), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this),\n          searchPlaceholder: utils.string.t('claims.searchPolicy.minimumCharacters'),\n          searchMinChars: 4,\n          filtersArray: tableFilterFields,\n          isFetchingFilters: isFetchingFilters,\n          columns: true,\n          searchTerm: policyData.searchTerm,\n          columnsArray: cols,\n          handlers: {\n            onSearch: handlers.handleSearch,\n            onFilter: handlers.handleSearchFilter,\n            onResetFilter: handlers.onResetFilter,\n            onResetSearch: handlers.onResetSearch,\n            onToggleColumn: handlers.toggleColumn\n          },\n          nestedClasses: {\n            searchMaxWidth: classes.searchMaxWidth\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      children: [utils.generic.isValidArray(rows) && /*#__PURE__*/_jsxDEV(Box, {\n        mb: 4,\n        children: [/*#__PURE__*/_jsxDEV(TableContainer, {\n          children: /*#__PURE__*/_jsxDEV(RadioGroup, {\n            name: \"policyRef\",\n            value: policyData.xbPolicyID,\n            onChange: handlers.handlePolicyData,\n            children: /*#__PURE__*/_jsxDEV(Table, {\n              \"data-testid\": \"claims-policy-search-table\",\n              children: [utils.generic.isValidArray(rows, true) && /*#__PURE__*/_jsxDEV(TableHead, {\n                columns: cols,\n                sorting: sort,\n                nestedClasses: {\n                  tableHead: classes.tableHead\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n                \"data-testid\": \"claims-list\",\n                children: isTableLoading ? /*#__PURE__*/_jsxDEV(TableRow, {\n                  children: /*#__PURE__*/_jsxDEV(TableCell, {\n                    colSpan: cols === null || cols === void 0 ? void 0 : cols.length,\n                    children: /*#__PURE__*/_jsxDEV(Skeleton, {\n                      height: 50,\n                      animation: \"wave\",\n                      displayNumber: 5\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 137,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 136,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 135,\n                  columnNumber: 23\n                }, this) : rows === null || rows === void 0 ? void 0 : rows.map(function (policy) {\n                  return /*#__PURE__*/_jsxDEV(TableRow, {\n                    selected: Number(policyData.xbPolicyID) === policy.xbPolicyID,\n                    children: [/*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, handlers.columnProps('policyRef')), {}, {\n                      className: classes.tableCell,\n                      \"data-testid\": \"row-col-\".concat(policy.policyNumber),\n                      children: /*#__PURE__*/_jsxDEV(Grid, {\n                        container: true,\n                        children: [/*#__PURE__*/_jsxDEV(Grid, {\n                          item: true,\n                          children: /*#__PURE__*/_jsxDEV(Radio, {\n                            checked: Number(policyData.xbPolicyID) === policy.xbPolicyID,\n                            onChange: handlers.handlePolicyData,\n                            value: policy.xbPolicyID,\n                            name: \"policyRef\",\n                            color: \"primary\",\n                            className: classes.radio\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 150,\n                            columnNumber: 33\n                          }, _this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 149,\n                          columnNumber: 31\n                        }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n                          item: true,\n                          children: policy.policyNumber\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 159,\n                          columnNumber: 31\n                        }, _this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 148,\n                        columnNumber: 29\n                      }, _this)\n                    }), void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 143,\n                      columnNumber: 27\n                    }, _this), /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, handlers.columnProps('statusCode')), {}, {\n                      \"data-testid\": \"row-col-\".concat(policy.statusCode),\n                      children: policy.statusCode\n                    }), void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 162,\n                      columnNumber: 27\n                    }, _this), /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, handlers.columnProps('policyType')), {}, {\n                      \"data-testid\": \"row-col-\".concat(policy.policyType),\n                      children: policy.policyType\n                    }), void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 165,\n                      columnNumber: 27\n                    }, _this), /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, handlers.columnProps('umr')), {}, {\n                      \"data-testid\": \"row-col-\".concat(policy.umr),\n                      children: policy.umr\n                    }), void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 168,\n                      columnNumber: 27\n                    }, _this), /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, handlers.columnProps('insured')), {}, {\n                      \"data-testid\": \"row-col-\".concat(policy.insured),\n                      children: policy.insured\n                    }), void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 171,\n                      columnNumber: 27\n                    }, _this), /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, handlers.columnProps('reInsured')), {}, {\n                      \"data-testid\": \"row-col-\".concat(policy.reInsured),\n                      children: policy.reInsured || utils.string.t('app.na')\n                    }), void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 174,\n                      columnNumber: 27\n                    }, _this), /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, handlers.columnProps('coverHolder')), {}, {\n                      \"data-testid\": \"row-col-\".concat(policy.coverHolder),\n                      children: policy.coverHolder\n                    }), void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 177,\n                      columnNumber: 27\n                    }, _this), /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, handlers.columnProps('clientName')), {}, {\n                      \"data-testid\": \"row-col-\".concat(policy.clientName),\n                      children: policy.clientName\n                    }), void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 180,\n                      columnNumber: 27\n                    }, _this), /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, handlers.columnProps('riskDetails')), {}, {\n                      \"data-testid\": \"row-col-\".concat(policy.riskDetails),\n                      children: policy.riskDetails.length > cellLength ? /*#__PURE__*/_jsxDEV(Tooltip, {\n                        block: true,\n                        title: policy.riskDetails,\n                        children: [policy.riskDetails.slice(0, cellLength), \"...\"]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 185,\n                        columnNumber: 31\n                      }, _this) : policy.riskDetails\n                    }), void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 183,\n                      columnNumber: 27\n                    }, _this), /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, handlers.columnProps('inceptionDate')), {}, {\n                      \"data-testid\": \"row-col-\".concat(policy.inceptionDate),\n                      children: utils.string.t('format.date', {\n                        value: {\n                          date: policy === null || policy === void 0 ? void 0 : policy.inceptionDate,\n                          format: config.ui.format.date.text\n                        }\n                      })\n                    }), void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 192,\n                      columnNumber: 27\n                    }, _this), /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, handlers.columnProps('expiryDate')), {}, {\n                      \"data-testid\": \"row-col-\".concat(policy.expiryDate),\n                      children: utils.string.t('format.date', {\n                        value: {\n                          date: policy === null || policy === void 0 ? void 0 : policy.expiryDate,\n                          format: config.ui.format.date.text\n                        }\n                      })\n                    }), void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 197,\n                      columnNumber: 27\n                    }, _this), /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, handlers.columnProps('company')), {}, {\n                      \"data-testid\": \"row-col-\".concat(policy.company),\n                      children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: policy.company\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 203,\n                        columnNumber: 29\n                      }, _this)\n                    }), void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 202,\n                      columnNumber: 27\n                    }, _this), /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, handlers.columnProps('division')), {}, {\n                      \"data-testid\": \"row-col-\".concat(policy.division),\n                      children: policy.division\n                    }), void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 205,\n                      columnNumber: 27\n                    }, _this), /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, handlers.columnProps('businessTypeCode')), {}, {\n                      \"data-testid\": \"row-col-\".concat(policy.businessTypeCode),\n                      children: policy.businessTypeCode\n                    }), void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 208,\n                      columnNumber: 27\n                    }, _this)]\n                  }, policy.policyNumber, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 142,\n                    columnNumber: 25\n                  }, _this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this), utils.generic.isValidArray(rows, true) && /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Pagination, {\n              page: get(paginationObj, 'obj.page'),\n              count: get(paginationObj, 'obj.rowsTotal'),\n              rowsPerPage: get(paginationObj, 'obj.rowsPerPage'),\n              onChangePage: get(paginationObj, 'handlers.handleChangePage'),\n              onChangeRowsPerPage: get(paginationObj, 'handlers.handleChangeRowsPerPage')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this), !utils.generic.isValidArray(rows, true) && /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Empty, {\n            title: utils.string.t('claims.noMatchFound'),\n            text: utils.string.t('claims.noMatchDetails'),\n            icon: /*#__PURE__*/_jsxDEV(IconSearchFile, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 23\n            }, this),\n            padding: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }, this), (confirm || selectedPolicyRender === '') && utils.generic.isValidArray(rows, true) && /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(LinkClaimPolicy, {\n            policyData: policyData,\n            selectedPolicyRender: selectedPolicyRender,\n            setSelectedPolicyRender: setSelectedPolicyRender,\n            validation: validation,\n            setValidation: setValidation,\n            setActiveStep: setActiveStep,\n            index: index,\n            isFormsEdited: isFormsEdited,\n            setFormEditedStatus: setFormEditedStatus,\n            saveStatus: saveStatus,\n            sectionEnabledValidationFlag: sectionEnabledValidationFlag,\n            policyInformation: policyInformation,\n            claimInfo: claimInfo,\n            handleFormStatus: handleFormStatus,\n            selectNextPolicy: selectNextPolicy,\n            setSelectNextPolicy: setSelectNextPolicy\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LinkClaimSelectPolicyView, \"r9oCVsFugBvUAXABi3SRi+4GYfU=\", false, function () {\n  return [useSort, usePagination];\n});\n\n_c = LinkClaimSelectPolicyView;\nLinkClaimSelectPolicyView.displayName = \"LinkClaimSelectPolicyView\";\nLinkClaimSelectPolicyView.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"LinkClaimSelectPolicyView\",\n  \"props\": {\n    \"rows\": {\n      \"defaultValue\": {\n        \"value\": \"[]\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"columnsArray\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"sort\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"policyData\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"selectedPolicy\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"pagination\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"viewControl\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"isFetchingFilters\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"isTableLoading\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"tableFilterFields\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"viewFields\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"handlers\": {\n      \"type\": {\n        \"name\": \"shape\",\n        \"value\": {\n          \"handleSort\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"handleSearch\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"handleSearchFilter\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"onResetFilter\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"onResetSearch\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"handlePolicyData\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"handleChangePage\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"handleChangeRowsPerPage\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"columnProps\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"toggleColumn\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"onSelectSearchBy\": {\n            \"name\": \"func\",\n            \"required\": true\n          }\n        }\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\modules\\\\LinkClaimSelectPolicy\\\\LinkClaimSelectPolicy.view.js\"] = {\n    name: \"LinkClaimSelectPolicyView\",\n    docgenInfo: LinkClaimSelectPolicyView.__docgenInfo,\n    path: \"src\\\\modules\\\\LinkClaimSelectPolicy\\\\LinkClaimSelectPolicy.view.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"LinkClaimSelectPolicyView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/LinkClaimSelectPolicy/LinkClaimSelectPolicy.view.js"],"names":["React","get","PropTypes","styles","utils","config","TableCell","TableHead","Pagination","Empty","Tooltip","TableFilters","TableToolbar","FormAutocompleteMui","Skeleton","usePagination","useSort","LinkClaimPolicy","makeStyles","Grid","TableContainer","Table","TableRow","TableBody","Typography","Box","RadioGroup","Radio","LinkClaimSelectPolicyView","propTypes","columnsArray","array","isRequired","rows","sort","object","policyData","selectedPolicy","bool","pagination","viewControl","isFetchingFilters","isTableLoading","tableFilterFields","viewFields","handlers","shape","handleSort","func","handleSearch","handleSearchFilter","onResetFilter","onResetSearch","handlePolicyData","handleChangePage","handleChangeRowsPerPage","columnProps","toggleColumn","onSelectSearchBy","sortObj","selectedPolicyRender","setSelectedPolicyRender","confirm","validation","setValidation","sectionEnabledValidationFlag","setActiveStep","index","isFormsEdited","setFormEditedStatus","saveStatus","policyInformation","claimInfo","handleFormStatus","selectNextPolicy","setSelectNextPolicy","classes","name","cols","paginationObj","cellLength","title","string","t","claimReference","searchPolicyTitleBorder","filterBox","form","getFieldProps","root","selectAutocomplete","event","obj","value","label","searchTerm","onSearch","onFilter","onToggleColumn","searchMaxWidth","generic","isValidArray","xbPolicyID","tableHead","length","map","policy","Number","tableCell","policyNumber","radio","statusCode","policyType","umr","insured","reInsured","coverHolder","clientName","riskDetails","slice","inceptionDate","date","format","ui","text","expiryDate","company","division","businessTypeCode"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport get from 'lodash/get';\r\nimport PropTypes from 'prop-types';\r\n\r\n//app\r\nimport styles from './LinkClaimSelectPolicy.styles';\r\nimport * as utils from 'utils';\r\nimport config from 'config';\r\nimport { TableCell, TableHead, Pagination, Empty, Tooltip, TableFilters, TableToolbar, FormAutocompleteMui, Skeleton } from 'components';\r\nimport { ReactComponent as IconSearchFile } from '../../assets/svg/line-icon-search-file.svg';\r\nimport { usePagination, useSort } from 'hooks';\r\n\r\n//components\r\nimport { LinkClaimPolicy } from 'modules';\r\n\r\n//mui\r\nimport { makeStyles, Grid, TableContainer, Table, TableRow, TableBody, Typography, Box, RadioGroup, Radio } from '@material-ui/core';\r\n\r\nLinkClaimSelectPolicyView.propTypes = {\r\n  columnsArray: PropTypes.array.isRequired,\r\n  rows: PropTypes.array.isRequired,\r\n  sort: PropTypes.object.isRequired,\r\n  policyData: PropTypes.object.isRequired,\r\n  selectedPolicy: PropTypes.bool,\r\n  pagination: PropTypes.object.isRequired,\r\n  viewControl: PropTypes.object.isRequired,\r\n  isFetchingFilters: PropTypes.bool,\r\n  isTableLoading: PropTypes.bool,\r\n  tableFilterFields: PropTypes.array.isRequired,\r\n  viewFields: PropTypes.array.isRequired,\r\n  handlers: PropTypes.shape({\r\n    handleSort: PropTypes.func.isRequired,\r\n    handleSearch: PropTypes.func.isRequired,\r\n    handleSearchFilter: PropTypes.func.isRequired,\r\n    onResetFilter: PropTypes.func.isRequired,\r\n    onResetSearch: PropTypes.func.isRequired,\r\n    handlePolicyData: PropTypes.func.isRequired,\r\n    handleChangePage: PropTypes.func.isRequired,\r\n    handleChangeRowsPerPage: PropTypes.func.isRequired,\r\n    columnProps: PropTypes.func.isRequired,\r\n    toggleColumn: PropTypes.func.isRequired,\r\n    onSelectSearchBy: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport function LinkClaimSelectPolicyView({\r\n  columnsArray,\r\n  rows = [],\r\n  sort: sortObj,\r\n  policyData,\r\n  selectedPolicyRender,\r\n  setSelectedPolicyRender,\r\n  pagination,\r\n  tableFilterFields,\r\n  handlers,\r\n  viewControl,\r\n  viewFields,\r\n  isFetchingFilters,\r\n  confirm,\r\n  validation,\r\n  setValidation,\r\n  sectionEnabledValidationFlag,\r\n  setActiveStep,\r\n  index,\r\n  isFormsEdited,\r\n  setFormEditedStatus,\r\n  saveStatus,\r\n  policyInformation,\r\n  claimInfo,\r\n  handleFormStatus,\r\n  isTableLoading,\r\n  selectNextPolicy,\r\n  setSelectNextPolicy,\r\n}) {\r\n  const classes = makeStyles(styles, { name: 'LinkClaimSelectPolicy' })();\r\n  const { cols, sort } = useSort(columnsArray, sortObj, handlers.handleSort);\r\n  const paginationObj = usePagination(rows, pagination, handlers.handleChangePage, handlers.handleChangeRowsPerPage);\r\n  const cellLength = 25;\r\n\r\n  return (\r\n    <Box mt={2}>\r\n      <Typography variant=\"body2\" className={classes.title}>\r\n        {utils.string.t('claims.searchPolicy.claimRef')}\r\n      </Typography>\r\n      <Typography variant=\"h5\">{claimInfo?.claimReference || ''}</Typography>\r\n      <Typography variant=\"body2\" className={classes.searchPolicyTitleBorder}>\r\n        {utils.string.t('claims.searchPolicy.searchPolicies')}\r\n      </Typography>\r\n      <Box my={1}>\r\n        <Typography variant=\"h5\">{utils.string.t('claims.searchPolicy.linkPolicySearchInputLabel')}</Typography>\r\n        <TableToolbar>\r\n          <TableFilters\r\n            search\r\n            searchBy={\r\n              <Box className={classes.filterBox}>\r\n                <FormAutocompleteMui\r\n                  {...utils.form.getFieldProps(viewFields, 'searchBy')}\r\n                  control={viewControl}\r\n                  nestedClasses={{ root: classes.selectAutocomplete }}\r\n                  callback={(event, obj) => {\r\n                    handlers.onSelectSearchBy(obj?.value, obj?.label);\r\n                  }}\r\n                />\r\n              </Box>\r\n            }\r\n            searchPlaceholder={utils.string.t('claims.searchPolicy.minimumCharacters')}\r\n            searchMinChars={4}\r\n            filtersArray={tableFilterFields}\r\n            isFetchingFilters={isFetchingFilters}\r\n            columns\r\n            searchTerm={policyData.searchTerm}\r\n            columnsArray={cols}\r\n            handlers={{\r\n              onSearch: handlers.handleSearch,\r\n              onFilter: handlers.handleSearchFilter,\r\n              onResetFilter: handlers.onResetFilter,\r\n              onResetSearch: handlers.onResetSearch,\r\n              onToggleColumn: handlers.toggleColumn,\r\n            }}\r\n            nestedClasses={{ searchMaxWidth: classes.searchMaxWidth }}\r\n          />\r\n        </TableToolbar>\r\n      </Box>\r\n      <Box>\r\n        {utils.generic.isValidArray(rows) && (\r\n          <Box mb={4}>\r\n            <TableContainer>\r\n              <RadioGroup name=\"policyRef\" value={policyData.xbPolicyID} onChange={handlers.handlePolicyData}>\r\n                <Table data-testid=\"claims-policy-search-table\">\r\n                  {utils.generic.isValidArray(rows, true) && (\r\n                    <TableHead columns={cols} sorting={sort} nestedClasses={{ tableHead: classes.tableHead }} />\r\n                  )}\r\n                  <TableBody data-testid=\"claims-list\">\r\n                    {isTableLoading ? (\r\n                      <TableRow>\r\n                        <TableCell colSpan={cols?.length}>\r\n                          <Skeleton height={50} animation=\"wave\" displayNumber={5} />\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ) : (\r\n                      rows?.map((policy) => (\r\n                        <TableRow key={policy.policyNumber} selected={Number(policyData.xbPolicyID) === policy.xbPolicyID}>\r\n                          <TableCell\r\n                            {...handlers.columnProps('policyRef')}\r\n                            className={classes.tableCell}\r\n                            data-testid={`row-col-${policy.policyNumber}`}\r\n                          >\r\n                            <Grid container>\r\n                              <Grid item>\r\n                                <Radio\r\n                                  checked={Number(policyData.xbPolicyID) === policy.xbPolicyID}\r\n                                  onChange={handlers.handlePolicyData}\r\n                                  value={policy.xbPolicyID}\r\n                                  name=\"policyRef\"\r\n                                  color=\"primary\"\r\n                                  className={classes.radio}\r\n                                />\r\n                              </Grid>\r\n                              <Grid item>{policy.policyNumber}</Grid>\r\n                            </Grid>\r\n                          </TableCell>\r\n                          <TableCell {...handlers.columnProps('statusCode')} data-testid={`row-col-${policy.statusCode}`}>\r\n                            {policy.statusCode}\r\n                          </TableCell>\r\n                          <TableCell {...handlers.columnProps('policyType')} data-testid={`row-col-${policy.policyType}`}>\r\n                            {policy.policyType}\r\n                          </TableCell>\r\n                          <TableCell {...handlers.columnProps('umr')} data-testid={`row-col-${policy.umr}`}>\r\n                            {policy.umr}\r\n                          </TableCell>\r\n                          <TableCell {...handlers.columnProps('insured')} data-testid={`row-col-${policy.insured}`}>\r\n                            {policy.insured}\r\n                          </TableCell>\r\n                          <TableCell {...handlers.columnProps('reInsured')} data-testid={`row-col-${policy.reInsured}`}>\r\n                            {policy.reInsured || utils.string.t('app.na')}\r\n                          </TableCell>\r\n                          <TableCell {...handlers.columnProps('coverHolder')} data-testid={`row-col-${policy.coverHolder}`}>\r\n                            {policy.coverHolder}\r\n                          </TableCell>\r\n                          <TableCell {...handlers.columnProps('clientName')} data-testid={`row-col-${policy.clientName}`}>\r\n                            {policy.clientName}\r\n                          </TableCell>\r\n                          <TableCell {...handlers.columnProps('riskDetails')} data-testid={`row-col-${policy.riskDetails}`}>\r\n                            {policy.riskDetails.length > cellLength ? (\r\n                              <Tooltip block title={policy.riskDetails}>\r\n                                {policy.riskDetails.slice(0, cellLength)}...\r\n                              </Tooltip>\r\n                            ) : (\r\n                              policy.riskDetails\r\n                            )}\r\n                          </TableCell>\r\n                          <TableCell {...handlers.columnProps('inceptionDate')} data-testid={`row-col-${policy.inceptionDate}`}>\r\n                            {utils.string.t('format.date', {\r\n                              value: { date: policy?.inceptionDate, format: config.ui.format.date.text },\r\n                            })}\r\n                          </TableCell>\r\n                          <TableCell {...handlers.columnProps('expiryDate')} data-testid={`row-col-${policy.expiryDate}`}>\r\n                            {utils.string.t('format.date', {\r\n                              value: { date: policy?.expiryDate, format: config.ui.format.date.text },\r\n                            })}\r\n                          </TableCell>\r\n                          <TableCell {...handlers.columnProps('company')} data-testid={`row-col-${policy.company}`}>\r\n                            <strong>{policy.company}</strong>\r\n                          </TableCell>\r\n                          <TableCell {...handlers.columnProps('division')} data-testid={`row-col-${policy.division}`}>\r\n                            {policy.division}\r\n                          </TableCell>\r\n                          <TableCell {...handlers.columnProps('businessTypeCode')} data-testid={`row-col-${policy.businessTypeCode}`}>\r\n                            {policy.businessTypeCode}\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      ))\r\n                    )}\r\n                  </TableBody>\r\n                </Table>\r\n              </RadioGroup>\r\n            </TableContainer>\r\n            {utils.generic.isValidArray(rows, true) && (\r\n              <Grid container>\r\n                <Grid item xs={12}>\r\n                  <Pagination\r\n                    page={get(paginationObj, 'obj.page')}\r\n                    count={get(paginationObj, 'obj.rowsTotal')}\r\n                    rowsPerPage={get(paginationObj, 'obj.rowsPerPage')}\r\n                    onChangePage={get(paginationObj, 'handlers.handleChangePage')}\r\n                    onChangeRowsPerPage={get(paginationObj, 'handlers.handleChangeRowsPerPage')}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            )}\r\n          </Box>\r\n        )}\r\n\r\n        {!utils.generic.isValidArray(rows, true) && (\r\n          <Grid container>\r\n            <Grid item xs={12}>\r\n              <Empty\r\n                title={utils.string.t('claims.noMatchFound')}\r\n                text={utils.string.t('claims.noMatchDetails')}\r\n                icon={<IconSearchFile />}\r\n                padding\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n        {(confirm || selectedPolicyRender === '') && utils.generic.isValidArray(rows, true) && (\r\n          <Grid container>\r\n            <Grid item xs={12}>\r\n              <LinkClaimPolicy\r\n                policyData={policyData}\r\n                selectedPolicyRender={selectedPolicyRender}\r\n                setSelectedPolicyRender={setSelectedPolicyRender}\r\n                validation={validation}\r\n                setValidation={setValidation}\r\n                setActiveStep={setActiveStep}\r\n                index={index}\r\n                isFormsEdited={isFormsEdited}\r\n                setFormEditedStatus={setFormEditedStatus}\r\n                saveStatus={saveStatus}\r\n                sectionEnabledValidationFlag={sectionEnabledValidationFlag}\r\n                policyInformation={policyInformation}\r\n                claimInfo={claimInfo}\r\n                handleFormStatus={handleFormStatus}\r\n                selectNextPolicy={selectNextPolicy}\r\n                setSelectNextPolicy={setSelectNextPolicy}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}