{"ast":null,"code":"import \"core-js/modules/es.array.reduce\";\nimport _objectWithoutProperties from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport groupBy from 'lodash/groupBy';\nimport flatten from 'lodash/flatten';\nimport sortBy from 'lodash/sortBy';\nimport sumBy from 'lodash/sumBy';\nimport sum from 'lodash/sum';\nimport get from 'lodash/get';\nimport keyBy from 'lodash/keyBy';\nimport moment from 'moment'; // app\n\nimport * as utils from 'utils';\nimport config from 'config';\nexport var getEarliestInceptionDate = function getEarliestInceptionDate(placement) {\n  return placement.policies.reduce(function (date, policy) {\n    if (!date) return policy.inceptionDate;\n    return moment(policy.inceptionDate).isBefore(date, 'day') ? policy.inceptionDate : date;\n  }, null);\n};\nexport var getLatestExpiryDate = function getLatestExpiryDate(placement) {\n  return placement.policies.reduce(function (date, policy) {\n    if (!date) return policy.expiryDate;\n    return moment(policy.expiryDate).isAfter(date, 'day') ? policy.expiryDate : date;\n  }, null);\n};\nexport var getWithValidDate = function getWithValidDate(placement) {\n  if (!placement.policies.length) return false;\n  var earliestInceptionDate = getEarliestInceptionDate(placement);\n  var latestExpiryDate = getLatestExpiryDate(placement);\n  var today = utils.date.today();\n  if (!earliestInceptionDate && !latestExpiryDate) return true;\n  if (!earliestInceptionDate && latestExpiryDate) return moment(today).isBefore(latestExpiryDate, 'day');\n  if (earliestInceptionDate && !latestExpiryDate) return moment(today).isSameOrAfter(earliestInceptionDate, 'day');\n  return moment(today).isBetween(earliestInceptionDate, latestExpiryDate, undefined, '[)');\n};\nexport var getFilteredPlacements = function getFilteredPlacements(placements) {\n  var physicalLossDepartments = config.departments.physicalLoss.map(function (dep) {\n    return dep.id;\n  });\n  var physicalLossPlacements = placements.filter(function (placement) {\n    return physicalLossDepartments.includes(placement.departmentId);\n  });\n  return physicalLossPlacements.filter(function (placement) {\n    return getWithValidDate(placement);\n  });\n}; // Returns filtered account list to populate map key\n\nexport var filterAccounts = function filterAccounts(filteredPlacementIds, allAccounts, existingFilteredAccounts) {\n  var accountsMapped = keyBy(existingFilteredAccounts, 'id');\n  return sortBy(allAccounts.map(function (account) {\n    return _objectSpread(_objectSpread({}, account), {}, {\n      checked: accountsMapped[account.id] ? accountsMapped[account.id].checked : true,\n      placements: account.placements.filter(function (placement) {\n        return filteredPlacementIds.includes(placement.id.toString());\n      })\n    });\n  }).filter(function (account) {\n    return account.placements.length;\n  }), 'label');\n};\nexport var groupAccounts = function groupAccounts(placements, departments) {\n  var filteredPlacements = placements.filter(function (placement) {\n    return placement.insureds && placement.insureds.length;\n  });\n  var groupedByAccount = groupBy(filteredPlacements, function (placement) {\n    return placement.insureds[0].id;\n  });\n  return Object.keys(groupedByAccount).map(function (id, index) {\n    var label = get(groupedByAccount[id], '[0].insureds[0].name');\n    return {\n      id: id,\n      checked: true,\n      label: label,\n      color: utils.color.random(label, 'bright'),\n      placements: groupedByAccount[id].map(function (placement) {\n        return {\n          id: placement.id,\n          departmentId: placement.departmentId,\n          label: utils.placement.getDepartmentName(placement, departments)\n        };\n      })\n    };\n  });\n};\nexport var addMapData = function addMapData(locations, filteredAccounts, filteredDepartments) {\n  if (!utils.generic.isValidArray(locations) || !utils.generic.isValidArray(filteredAccounts) || !utils.generic.isValidArray(filteredDepartments)) return;\n  var selectedAccounts = filteredAccounts.filter(function (item) {\n    return item.checked;\n  });\n  var selectedPlacementIds = flatten(selectedAccounts.map(function (item) {\n    return item.placements.filter(function (placement) {\n      return filteredDepartments.includes(placement.departmentId);\n    }).map(function (placement) {\n      return placement.id.toString();\n    });\n  }));\n  return locations.map(function (location) {\n    var filteredPlacements = location.placements.filter(function (placement) {\n      return selectedPlacementIds.includes(placement.placementId.toString());\n    });\n    if (!filteredPlacements.length) return null;\n    var address = location.address,\n        lat = location.lat,\n        lng = location.lng,\n        count = location.count;\n    var accounts = hydrateAccounts(filteredPlacements, filteredAccounts);\n    var data = accounts.map(function (account) {\n      return sumBy(account.placements, 'amount');\n    });\n    return {\n      address: address,\n      lat: lat,\n      lng: lng,\n      locationsFound: count,\n      tivTotal: sum(data),\n      accounts: accounts,\n      properties: {\n        data: data,\n        backgroundColor: accounts.map(function (account) {\n          return account.color;\n        })\n      }\n    };\n  }).filter(function (account) {\n    return !!account;\n  });\n};\nexport var hydratePlacements = function hydratePlacements(filteredPlacements, filteredAccounts) {\n  if (!utils.generic.isValidArray(filteredPlacements) || !utils.generic.isValidArray(filteredAccounts)) return;\n  return filteredPlacements.map(function (placement) {\n    var foundAccount = filteredAccounts.map(function (account) {\n      var foundPlacement = account.placements.find(function (p) {\n        return p.id.toString() === placement.placementId.toString();\n      });\n      return foundPlacement ? _objectSpread(_objectSpread({}, account), {}, {\n        foundPlacement: foundPlacement\n      }) : null;\n    }).filter(function (acc) {\n      return !!acc;\n    });\n    if (!foundAccount.length) return null;\n    var _foundAccount$ = foundAccount[0],\n        color = _foundAccount$.color,\n        id = _foundAccount$.id,\n        label = _foundAccount$.label,\n        foundPlacement = _foundAccount$.foundPlacement;\n    return {\n      color: color,\n      id: id,\n      label: label,\n      placement: _objectSpread(_objectSpread({}, foundPlacement), {}, {\n        amount: placement.tiv\n      })\n    };\n  }).filter(function (loc) {\n    return !!loc;\n  });\n};\nexport var hydrateAccounts = function hydrateAccounts(filteredPlacements, filteredAccounts) {\n  if (!utils.generic.isValidArray(filteredPlacements)) return;\n  var hydratedPlacements = hydratePlacements(filteredPlacements, filteredAccounts);\n  var groupedAccounts = groupBy(hydratedPlacements, function (placement) {\n    return placement.id;\n  });\n  return Object.keys(groupedAccounts).map(function (id, index) {\n    var _groupedAccounts$id$ = groupedAccounts[id][0],\n        placement = _groupedAccounts$id$.placement,\n        rest = _objectWithoutProperties(_groupedAccounts$id$, [\"placement\"]);\n\n    return _objectSpread(_objectSpread({}, rest), {}, {\n      placements: groupedAccounts[id].map(function (account) {\n        return account.placement;\n      })\n    });\n  });\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/PortfolioMap/PortfolioMap.utils.js"],"names":["groupBy","flatten","sortBy","sumBy","sum","get","keyBy","moment","utils","config","getEarliestInceptionDate","placement","policies","reduce","date","policy","inceptionDate","isBefore","getLatestExpiryDate","expiryDate","isAfter","getWithValidDate","length","earliestInceptionDate","latestExpiryDate","today","isSameOrAfter","isBetween","undefined","getFilteredPlacements","placements","physicalLossDepartments","departments","physicalLoss","map","dep","id","physicalLossPlacements","filter","includes","departmentId","filterAccounts","filteredPlacementIds","allAccounts","existingFilteredAccounts","accountsMapped","account","checked","toString","groupAccounts","filteredPlacements","insureds","groupedByAccount","Object","keys","index","label","color","random","getDepartmentName","addMapData","locations","filteredAccounts","filteredDepartments","generic","isValidArray","selectedAccounts","item","selectedPlacementIds","location","placementId","address","lat","lng","count","accounts","hydrateAccounts","data","locationsFound","tivTotal","properties","backgroundColor","hydratePlacements","foundAccount","foundPlacement","find","p","acc","amount","tiv","loc","hydratedPlacements","groupedAccounts","rest"],"mappings":";;;AAAA,OAAOA,OAAP,MAAoB,gBAApB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB,C,CAEA;;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,OAAO,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACC,SAAD;AAAA,SACtCA,SAAS,CAACC,QAAV,CAAmBC,MAAnB,CAA0B,UAACC,IAAD,EAAOC,MAAP,EAAkB;AAC1C,QAAI,CAACD,IAAL,EAAW,OAAOC,MAAM,CAACC,aAAd;AACX,WAAOT,MAAM,CAACQ,MAAM,CAACC,aAAR,CAAN,CAA6BC,QAA7B,CAAsCH,IAAtC,EAA4C,KAA5C,IAAqDC,MAAM,CAACC,aAA5D,GAA4EF,IAAnF;AACD,GAHD,EAGG,IAHH,CADsC;AAAA,CAAjC;AAMP,OAAO,IAAMI,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACP,SAAD;AAAA,SACjCA,SAAS,CAACC,QAAV,CAAmBC,MAAnB,CAA0B,UAACC,IAAD,EAAOC,MAAP,EAAkB;AAC1C,QAAI,CAACD,IAAL,EAAW,OAAOC,MAAM,CAACI,UAAd;AACX,WAAOZ,MAAM,CAACQ,MAAM,CAACI,UAAR,CAAN,CAA0BC,OAA1B,CAAkCN,IAAlC,EAAwC,KAAxC,IAAiDC,MAAM,CAACI,UAAxD,GAAqEL,IAA5E;AACD,GAHD,EAGG,IAHH,CADiC;AAAA,CAA5B;AAMP,OAAO,IAAMO,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACV,SAAD,EAAe;AAC7C,MAAI,CAACA,SAAS,CAACC,QAAV,CAAmBU,MAAxB,EAAgC,OAAO,KAAP;AAEhC,MAAMC,qBAAqB,GAAGb,wBAAwB,CAACC,SAAD,CAAtD;AACA,MAAMa,gBAAgB,GAAGN,mBAAmB,CAACP,SAAD,CAA5C;AACA,MAAMc,KAAK,GAAGjB,KAAK,CAACM,IAAN,CAAWW,KAAX,EAAd;AAEA,MAAI,CAACF,qBAAD,IAA0B,CAACC,gBAA/B,EAAiD,OAAO,IAAP;AACjD,MAAI,CAACD,qBAAD,IAA0BC,gBAA9B,EAAgD,OAAOjB,MAAM,CAACkB,KAAD,CAAN,CAAcR,QAAd,CAAuBO,gBAAvB,EAAyC,KAAzC,CAAP;AAChD,MAAID,qBAAqB,IAAI,CAACC,gBAA9B,EAAgD,OAAOjB,MAAM,CAACkB,KAAD,CAAN,CAAcC,aAAd,CAA4BH,qBAA5B,EAAmD,KAAnD,CAAP;AAEhD,SAAOhB,MAAM,CAACkB,KAAD,CAAN,CAAcE,SAAd,CAAwBJ,qBAAxB,EAA+CC,gBAA/C,EAAiEI,SAAjE,EAA4E,IAA5E,CAAP;AACD,CAZM;AAcP,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,UAAD,EAAgB;AACnD,MAAMC,uBAAuB,GAAGtB,MAAM,CAACuB,WAAP,CAAmBC,YAAnB,CAAgCC,GAAhC,CAAoC,UAACC,GAAD;AAAA,WAASA,GAAG,CAACC,EAAb;AAAA,GAApC,CAAhC;AACA,MAAMC,sBAAsB,GAAGP,UAAU,CAACQ,MAAX,CAAkB,UAAC3B,SAAD;AAAA,WAAeoB,uBAAuB,CAACQ,QAAxB,CAAiC5B,SAAS,CAAC6B,YAA3C,CAAf;AAAA,GAAlB,CAA/B;AAEA,SAAOH,sBAAsB,CAACC,MAAvB,CAA8B,UAAC3B,SAAD;AAAA,WAAeU,gBAAgB,CAACV,SAAD,CAA/B;AAAA,GAA9B,CAAP;AACD,CALM,C,CAOP;;AACA,OAAO,IAAM8B,cAAc,GAAG,SAAjBA,cAAiB,CAACC,oBAAD,EAAuBC,WAAvB,EAAoCC,wBAApC,EAAiE;AAC7F,MAAMC,cAAc,GAAGvC,KAAK,CAACsC,wBAAD,EAA2B,IAA3B,CAA5B;AACA,SAAO1C,MAAM,CACXyC,WAAW,CACRT,GADH,CACO,UAACY,OAAD;AAAA,2CACAA,OADA;AAEHC,MAAAA,OAAO,EAAEF,cAAc,CAACC,OAAO,CAACV,EAAT,CAAd,GAA6BS,cAAc,CAACC,OAAO,CAACV,EAAT,CAAd,CAA2BW,OAAxD,GAAkE,IAFxE;AAGHjB,MAAAA,UAAU,EAAEgB,OAAO,CAAChB,UAAR,CAAmBQ,MAAnB,CAA0B,UAAC3B,SAAD;AAAA,eAAe+B,oBAAoB,CAACH,QAArB,CAA8B5B,SAAS,CAACyB,EAAV,CAAaY,QAAb,EAA9B,CAAf;AAAA,OAA1B;AAHT;AAAA,GADP,EAMGV,MANH,CAMU,UAACQ,OAAD;AAAA,WAAaA,OAAO,CAAChB,UAAR,CAAmBR,MAAhC;AAAA,GANV,CADW,EAQX,OARW,CAAb;AAUD,CAZM;AAcP,OAAO,IAAM2B,aAAa,GAAG,SAAhBA,aAAgB,CAACnB,UAAD,EAAaE,WAAb,EAA6B;AACxD,MAAMkB,kBAAkB,GAAGpB,UAAU,CAACQ,MAAX,CAAkB,UAAC3B,SAAD;AAAA,WAAeA,SAAS,CAACwC,QAAV,IAAsBxC,SAAS,CAACwC,QAAV,CAAmB7B,MAAxD;AAAA,GAAlB,CAA3B;AACA,MAAM8B,gBAAgB,GAAGpD,OAAO,CAACkD,kBAAD,EAAqB,UAACvC,SAAD;AAAA,WAAeA,SAAS,CAACwC,QAAV,CAAmB,CAAnB,EAAsBf,EAArC;AAAA,GAArB,CAAhC;AACA,SAAOiB,MAAM,CAACC,IAAP,CAAYF,gBAAZ,EAA8BlB,GAA9B,CAAkC,UAACE,EAAD,EAAKmB,KAAL,EAAe;AACtD,QAAMC,KAAK,GAAGnD,GAAG,CAAC+C,gBAAgB,CAAChB,EAAD,CAAjB,EAAuB,sBAAvB,CAAjB;AACA,WAAO;AACLA,MAAAA,EAAE,EAAFA,EADK;AAELW,MAAAA,OAAO,EAAE,IAFJ;AAGLS,MAAAA,KAAK,EAALA,KAHK;AAILC,MAAAA,KAAK,EAAEjD,KAAK,CAACiD,KAAN,CAAYC,MAAZ,CAAmBF,KAAnB,EAA0B,QAA1B,CAJF;AAKL1B,MAAAA,UAAU,EAAEsB,gBAAgB,CAAChB,EAAD,CAAhB,CAAqBF,GAArB,CAAyB,UAACvB,SAAD;AAAA,eAAgB;AACnDyB,UAAAA,EAAE,EAAEzB,SAAS,CAACyB,EADqC;AAEnDI,UAAAA,YAAY,EAAE7B,SAAS,CAAC6B,YAF2B;AAGnDgB,UAAAA,KAAK,EAAEhD,KAAK,CAACG,SAAN,CAAgBgD,iBAAhB,CAAkChD,SAAlC,EAA6CqB,WAA7C;AAH4C,SAAhB;AAAA,OAAzB;AALP,KAAP;AAWD,GAbM,CAAP;AAcD,CAjBM;AAmBP,OAAO,IAAM4B,UAAU,GAAG,SAAbA,UAAa,CAACC,SAAD,EAAYC,gBAAZ,EAA8BC,mBAA9B,EAAsD;AAC9E,MACE,CAACvD,KAAK,CAACwD,OAAN,CAAcC,YAAd,CAA2BJ,SAA3B,CAAD,IACA,CAACrD,KAAK,CAACwD,OAAN,CAAcC,YAAd,CAA2BH,gBAA3B,CADD,IAEA,CAACtD,KAAK,CAACwD,OAAN,CAAcC,YAAd,CAA2BF,mBAA3B,CAHH,EAKE;AAEF,MAAMG,gBAAgB,GAAGJ,gBAAgB,CAACxB,MAAjB,CAAwB,UAAC6B,IAAD;AAAA,WAAUA,IAAI,CAACpB,OAAf;AAAA,GAAxB,CAAzB;AACA,MAAMqB,oBAAoB,GAAGnE,OAAO,CAClCiE,gBAAgB,CAAChC,GAAjB,CAAqB,UAACiC,IAAD;AAAA,WACnBA,IAAI,CAACrC,UAAL,CACGQ,MADH,CACU,UAAC3B,SAAD;AAAA,aAAeoD,mBAAmB,CAACxB,QAApB,CAA6B5B,SAAS,CAAC6B,YAAvC,CAAf;AAAA,KADV,EAEGN,GAFH,CAEO,UAACvB,SAAD;AAAA,aAAeA,SAAS,CAACyB,EAAV,CAAaY,QAAb,EAAf;AAAA,KAFP,CADmB;AAAA,GAArB,CADkC,CAApC;AAQA,SAAOa,SAAS,CACb3B,GADI,CACA,UAACmC,QAAD,EAAc;AACjB,QAAMnB,kBAAkB,GAAGmB,QAAQ,CAACvC,UAAT,CAAoBQ,MAApB,CAA2B,UAAC3B,SAAD;AAAA,aAAeyD,oBAAoB,CAAC7B,QAArB,CAA8B5B,SAAS,CAAC2D,WAAV,CAAsBtB,QAAtB,EAA9B,CAAf;AAAA,KAA3B,CAA3B;AAEA,QAAI,CAACE,kBAAkB,CAAC5B,MAAxB,EAAgC,OAAO,IAAP;AAHf,QAKTiD,OALS,GAKoBF,QALpB,CAKTE,OALS;AAAA,QAKAC,GALA,GAKoBH,QALpB,CAKAG,GALA;AAAA,QAKKC,GALL,GAKoBJ,QALpB,CAKKI,GALL;AAAA,QAKUC,KALV,GAKoBL,QALpB,CAKUK,KALV;AAMjB,QAAMC,QAAQ,GAAGC,eAAe,CAAC1B,kBAAD,EAAqBY,gBAArB,CAAhC;AACA,QAAMe,IAAI,GAAGF,QAAQ,CAACzC,GAAT,CAAa,UAACY,OAAD;AAAA,aAAa3C,KAAK,CAAC2C,OAAO,CAAChB,UAAT,EAAqB,QAArB,CAAlB;AAAA,KAAb,CAAb;AACA,WAAO;AACLyC,MAAAA,OAAO,EAAPA,OADK;AAELC,MAAAA,GAAG,EAAHA,GAFK;AAGLC,MAAAA,GAAG,EAAHA,GAHK;AAILK,MAAAA,cAAc,EAAEJ,KAJX;AAKLK,MAAAA,QAAQ,EAAE3E,GAAG,CAACyE,IAAD,CALR;AAMLF,MAAAA,QAAQ,EAARA,QANK;AAOLK,MAAAA,UAAU,EAAE;AACVH,QAAAA,IAAI,EAAJA,IADU;AAEVI,QAAAA,eAAe,EAAEN,QAAQ,CAACzC,GAAT,CAAa,UAACY,OAAD;AAAA,iBAAaA,OAAO,CAACW,KAArB;AAAA,SAAb;AAFP;AAPP,KAAP;AAYD,GArBI,EAsBJnB,MAtBI,CAsBG,UAACQ,OAAD;AAAA,WAAa,CAAC,CAACA,OAAf;AAAA,GAtBH,CAAP;AAuBD,CAxCM;AA0CP,OAAO,IAAMoC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAChC,kBAAD,EAAqBY,gBAArB,EAA0C;AACzE,MAAI,CAACtD,KAAK,CAACwD,OAAN,CAAcC,YAAd,CAA2Bf,kBAA3B,CAAD,IAAmD,CAAC1C,KAAK,CAACwD,OAAN,CAAcC,YAAd,CAA2BH,gBAA3B,CAAxD,EAAsG;AAEtG,SAAOZ,kBAAkB,CACtBhB,GADI,CACA,UAACvB,SAAD,EAAe;AAClB,QAAMwE,YAAY,GAAGrB,gBAAgB,CAClC5B,GADkB,CACd,UAACY,OAAD,EAAa;AAChB,UAAMsC,cAAc,GAAGtC,OAAO,CAAChB,UAAR,CAAmBuD,IAAnB,CAAwB,UAACC,CAAD;AAAA,eAAOA,CAAC,CAAClD,EAAF,CAAKY,QAAL,OAAoBrC,SAAS,CAAC2D,WAAV,CAAsBtB,QAAtB,EAA3B;AAAA,OAAxB,CAAvB;AACA,aAAOoC,cAAc,mCAAQtC,OAAR;AAAiBsC,QAAAA,cAAc,EAAdA;AAAjB,WAAoC,IAAzD;AACD,KAJkB,EAKlB9C,MALkB,CAKX,UAACiD,GAAD;AAAA,aAAS,CAAC,CAACA,GAAX;AAAA,KALW,CAArB;AAOA,QAAI,CAACJ,YAAY,CAAC7D,MAAlB,EAA0B,OAAO,IAAP;AARR,yBAU2B6D,YAAY,CAAC,CAAD,CAVvC;AAAA,QAUV1B,KAVU,kBAUVA,KAVU;AAAA,QAUHrB,EAVG,kBAUHA,EAVG;AAAA,QAUCoB,KAVD,kBAUCA,KAVD;AAAA,QAUQ4B,cAVR,kBAUQA,cAVR;AAWlB,WAAO;AAAE3B,MAAAA,KAAK,EAALA,KAAF;AAASrB,MAAAA,EAAE,EAAFA,EAAT;AAAaoB,MAAAA,KAAK,EAALA,KAAb;AAAoB7C,MAAAA,SAAS,kCAAOyE,cAAP;AAAuBI,QAAAA,MAAM,EAAE7E,SAAS,CAAC8E;AAAzC;AAA7B,KAAP;AACD,GAbI,EAcJnD,MAdI,CAcG,UAACoD,GAAD;AAAA,WAAS,CAAC,CAACA,GAAX;AAAA,GAdH,CAAP;AAeD,CAlBM;AAoBP,OAAO,IAAMd,eAAe,GAAG,SAAlBA,eAAkB,CAAC1B,kBAAD,EAAqBY,gBAArB,EAA0C;AACvE,MAAI,CAACtD,KAAK,CAACwD,OAAN,CAAcC,YAAd,CAA2Bf,kBAA3B,CAAL,EAAqD;AAErD,MAAMyC,kBAAkB,GAAGT,iBAAiB,CAAChC,kBAAD,EAAqBY,gBAArB,CAA5C;AACA,MAAM8B,eAAe,GAAG5F,OAAO,CAAC2F,kBAAD,EAAqB,UAAChF,SAAD;AAAA,WAAeA,SAAS,CAACyB,EAAzB;AAAA,GAArB,CAA/B;AAEA,SAAOiB,MAAM,CAACC,IAAP,CAAYsC,eAAZ,EAA6B1D,GAA7B,CAAiC,UAACE,EAAD,EAAKmB,KAAL,EAAe;AAAA,+BACtBqC,eAAe,CAACxD,EAAD,CAAf,CAAoB,CAApB,CADsB;AAAA,QAC7CzB,SAD6C,wBAC7CA,SAD6C;AAAA,QAC/BkF,IAD+B;;AAErD,2CACKA,IADL;AAEE/D,MAAAA,UAAU,EAAE8D,eAAe,CAACxD,EAAD,CAAf,CAAoBF,GAApB,CAAwB,UAACY,OAAD;AAAA,eAAaA,OAAO,CAACnC,SAArB;AAAA,OAAxB;AAFd;AAID,GANM,CAAP;AAOD,CAbM","sourcesContent":["import groupBy from 'lodash/groupBy';\r\nimport flatten from 'lodash/flatten';\r\nimport sortBy from 'lodash/sortBy';\r\nimport sumBy from 'lodash/sumBy';\r\nimport sum from 'lodash/sum';\r\nimport get from 'lodash/get';\r\nimport keyBy from 'lodash/keyBy';\r\nimport moment from 'moment';\r\n\r\n// app\r\nimport * as utils from 'utils';\r\nimport config from 'config';\r\n\r\nexport const getEarliestInceptionDate = (placement) =>\r\n  placement.policies.reduce((date, policy) => {\r\n    if (!date) return policy.inceptionDate;\r\n    return moment(policy.inceptionDate).isBefore(date, 'day') ? policy.inceptionDate : date;\r\n  }, null);\r\n\r\nexport const getLatestExpiryDate = (placement) =>\r\n  placement.policies.reduce((date, policy) => {\r\n    if (!date) return policy.expiryDate;\r\n    return moment(policy.expiryDate).isAfter(date, 'day') ? policy.expiryDate : date;\r\n  }, null);\r\n\r\nexport const getWithValidDate = (placement) => {\r\n  if (!placement.policies.length) return false;\r\n\r\n  const earliestInceptionDate = getEarliestInceptionDate(placement);\r\n  const latestExpiryDate = getLatestExpiryDate(placement);\r\n  const today = utils.date.today();\r\n\r\n  if (!earliestInceptionDate && !latestExpiryDate) return true;\r\n  if (!earliestInceptionDate && latestExpiryDate) return moment(today).isBefore(latestExpiryDate, 'day');\r\n  if (earliestInceptionDate && !latestExpiryDate) return moment(today).isSameOrAfter(earliestInceptionDate, 'day');\r\n\r\n  return moment(today).isBetween(earliestInceptionDate, latestExpiryDate, undefined, '[)');\r\n};\r\n\r\nexport const getFilteredPlacements = (placements) => {\r\n  const physicalLossDepartments = config.departments.physicalLoss.map((dep) => dep.id);\r\n  const physicalLossPlacements = placements.filter((placement) => physicalLossDepartments.includes(placement.departmentId));\r\n\r\n  return physicalLossPlacements.filter((placement) => getWithValidDate(placement));\r\n};\r\n\r\n// Returns filtered account list to populate map key\r\nexport const filterAccounts = (filteredPlacementIds, allAccounts, existingFilteredAccounts) => {\r\n  const accountsMapped = keyBy(existingFilteredAccounts, 'id');\r\n  return sortBy(\r\n    allAccounts\r\n      .map((account) => ({\r\n        ...account,\r\n        checked: accountsMapped[account.id] ? accountsMapped[account.id].checked : true,\r\n        placements: account.placements.filter((placement) => filteredPlacementIds.includes(placement.id.toString())),\r\n      }))\r\n      .filter((account) => account.placements.length),\r\n    'label'\r\n  );\r\n};\r\n\r\nexport const groupAccounts = (placements, departments) => {\r\n  const filteredPlacements = placements.filter((placement) => placement.insureds && placement.insureds.length);\r\n  const groupedByAccount = groupBy(filteredPlacements, (placement) => placement.insureds[0].id);\r\n  return Object.keys(groupedByAccount).map((id, index) => {\r\n    const label = get(groupedByAccount[id], '[0].insureds[0].name');\r\n    return {\r\n      id,\r\n      checked: true,\r\n      label,\r\n      color: utils.color.random(label, 'bright'),\r\n      placements: groupedByAccount[id].map((placement) => ({\r\n        id: placement.id,\r\n        departmentId: placement.departmentId,\r\n        label: utils.placement.getDepartmentName(placement, departments),\r\n      })),\r\n    };\r\n  });\r\n};\r\n\r\nexport const addMapData = (locations, filteredAccounts, filteredDepartments) => {\r\n  if (\r\n    !utils.generic.isValidArray(locations) ||\r\n    !utils.generic.isValidArray(filteredAccounts) ||\r\n    !utils.generic.isValidArray(filteredDepartments)\r\n  )\r\n    return;\r\n\r\n  const selectedAccounts = filteredAccounts.filter((item) => item.checked);\r\n  const selectedPlacementIds = flatten(\r\n    selectedAccounts.map((item) =>\r\n      item.placements\r\n        .filter((placement) => filteredDepartments.includes(placement.departmentId))\r\n        .map((placement) => placement.id.toString())\r\n    )\r\n  );\r\n\r\n  return locations\r\n    .map((location) => {\r\n      const filteredPlacements = location.placements.filter((placement) => selectedPlacementIds.includes(placement.placementId.toString()));\r\n\r\n      if (!filteredPlacements.length) return null;\r\n\r\n      const { address, lat, lng, count } = location;\r\n      const accounts = hydrateAccounts(filteredPlacements, filteredAccounts);\r\n      const data = accounts.map((account) => sumBy(account.placements, 'amount'));\r\n      return {\r\n        address,\r\n        lat,\r\n        lng,\r\n        locationsFound: count,\r\n        tivTotal: sum(data),\r\n        accounts,\r\n        properties: {\r\n          data,\r\n          backgroundColor: accounts.map((account) => account.color),\r\n        },\r\n      };\r\n    })\r\n    .filter((account) => !!account);\r\n};\r\n\r\nexport const hydratePlacements = (filteredPlacements, filteredAccounts) => {\r\n  if (!utils.generic.isValidArray(filteredPlacements) || !utils.generic.isValidArray(filteredAccounts)) return;\r\n\r\n  return filteredPlacements\r\n    .map((placement) => {\r\n      const foundAccount = filteredAccounts\r\n        .map((account) => {\r\n          const foundPlacement = account.placements.find((p) => p.id.toString() === placement.placementId.toString());\r\n          return foundPlacement ? { ...account, foundPlacement } : null;\r\n        })\r\n        .filter((acc) => !!acc);\r\n\r\n      if (!foundAccount.length) return null;\r\n\r\n      const { color, id, label, foundPlacement } = foundAccount[0];\r\n      return { color, id, label, placement: { ...foundPlacement, amount: placement.tiv } };\r\n    })\r\n    .filter((loc) => !!loc);\r\n};\r\n\r\nexport const hydrateAccounts = (filteredPlacements, filteredAccounts) => {\r\n  if (!utils.generic.isValidArray(filteredPlacements)) return;\r\n\r\n  const hydratedPlacements = hydratePlacements(filteredPlacements, filteredAccounts);\r\n  const groupedAccounts = groupBy(hydratedPlacements, (placement) => placement.id);\r\n\r\n  return Object.keys(groupedAccounts).map((id, index) => {\r\n    const { placement, ...rest } = groupedAccounts[id][0];\r\n    return {\r\n      ...rest,\r\n      placements: groupedAccounts[id].map((account) => account.placement),\r\n    };\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}