{"ast":null,"code":"import _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as utils from 'utils';\nvar initialState = {\n  term: '',\n  queue: [],\n  results: {},\n  resultsTerm: '',\n  isLoading: false,\n  error: ''\n};\n\nvar searchReducers = function searchReducers() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'SEARCH_GET_REQUEST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        term: action.payload,\n        queue: [].concat(_toConsumableArray(state.queue), [action.payload]),\n        isLoading: true\n      });\n\n    case 'SEARCH_GET_SUCCESS':\n      // this is to make sure this response matches the last query that was triggered\n      var searchSuccessTermMatch = action.payload.term && state.term === action.payload.term;\n      var searchSuccessQueue = state.queue.filter(function (q) {\n        return q !== action.payload.term;\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        queue: searchSuccessQueue,\n        results: searchSuccessTermMatch ? action.payload.results : state.results,\n        resultsTerm: searchSuccessTermMatch ? action.payload.term : state.resultsTerm,\n        isLoading: searchSuccessQueue.length > 0\n      });\n\n    case 'SEARCH_GET_FAILURE':\n      var searchFailureTermMatch = action.payload.term && state.term === action.payload.term;\n      var searchFailureQueue = state.queue.filter(function (q) {\n        return q !== action.payload.term;\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        queue: searchFailureQueue,\n        results: searchFailureTermMatch ? {} : state.results,\n        isLoading: searchFailureQueue.length > 0,\n        error: searchFailureTermMatch ? utils.string.t('advancedSearch.fetchError') : state.error\n      });\n\n    case 'SEARCH_RESET':\n      return _objectSpread({}, initialState);\n\n    default:\n      return state;\n  }\n};\n\nexport default searchReducers;","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/search/search.reducers.js"],"names":["utils","initialState","term","queue","results","resultsTerm","isLoading","error","searchReducers","state","action","type","payload","searchSuccessTermMatch","searchSuccessQueue","filter","q","length","searchFailureTermMatch","searchFailureQueue","string","t"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,EADa;AAEnBC,EAAAA,KAAK,EAAE,EAFY;AAGnBC,EAAAA,OAAO,EAAE,EAHU;AAInBC,EAAAA,WAAW,EAAE,EAJM;AAKnBC,EAAAA,SAAS,EAAE,KALQ;AAMnBC,EAAAA,KAAK,EAAE;AANY,CAArB;;AASA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBR,YAAyB;AAAA,MAAXS,MAAW;;AACvD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,oBAAL;AACE,6CACKF,KADL;AAEEP,QAAAA,IAAI,EAAEQ,MAAM,CAACE,OAFf;AAGET,QAAAA,KAAK,+BAAMM,KAAK,CAACN,KAAZ,IAAmBO,MAAM,CAACE,OAA1B,EAHP;AAIEN,QAAAA,SAAS,EAAE;AAJb;;AAOF,SAAK,oBAAL;AACE;AACA,UAAMO,sBAAsB,GAAGH,MAAM,CAACE,OAAP,CAAeV,IAAf,IAAuBO,KAAK,CAACP,IAAN,KAAeQ,MAAM,CAACE,OAAP,CAAeV,IAApF;AACA,UAAMY,kBAAkB,GAAGL,KAAK,CAACN,KAAN,CAAYY,MAAZ,CAAmB,UAACC,CAAD;AAAA,eAAOA,CAAC,KAAKN,MAAM,CAACE,OAAP,CAAeV,IAA5B;AAAA,OAAnB,CAA3B;AAEA,6CACKO,KADL;AAEEN,QAAAA,KAAK,EAAEW,kBAFT;AAGEV,QAAAA,OAAO,EAAES,sBAAsB,GAAGH,MAAM,CAACE,OAAP,CAAeR,OAAlB,GAA4BK,KAAK,CAACL,OAHnE;AAIEC,QAAAA,WAAW,EAAEQ,sBAAsB,GAAGH,MAAM,CAACE,OAAP,CAAeV,IAAlB,GAAyBO,KAAK,CAACJ,WAJpE;AAKEC,QAAAA,SAAS,EAAEQ,kBAAkB,CAACG,MAAnB,GAA4B;AALzC;;AAQF,SAAK,oBAAL;AACE,UAAMC,sBAAsB,GAAGR,MAAM,CAACE,OAAP,CAAeV,IAAf,IAAuBO,KAAK,CAACP,IAAN,KAAeQ,MAAM,CAACE,OAAP,CAAeV,IAApF;AACA,UAAMiB,kBAAkB,GAAGV,KAAK,CAACN,KAAN,CAAYY,MAAZ,CAAmB,UAACC,CAAD;AAAA,eAAOA,CAAC,KAAKN,MAAM,CAACE,OAAP,CAAeV,IAA5B;AAAA,OAAnB,CAA3B;AAEA,6CACKO,KADL;AAEEN,QAAAA,KAAK,EAAEgB,kBAFT;AAGEf,QAAAA,OAAO,EAAEc,sBAAsB,GAAG,EAAH,GAAQT,KAAK,CAACL,OAH/C;AAIEE,QAAAA,SAAS,EAAEa,kBAAkB,CAACF,MAAnB,GAA4B,CAJzC;AAKEV,QAAAA,KAAK,EAAEW,sBAAsB,GAAGlB,KAAK,CAACoB,MAAN,CAAaC,CAAb,CAAe,2BAAf,CAAH,GAAiDZ,KAAK,CAACF;AALtF;;AAQF,SAAK,cAAL;AACE,+BACKN,YADL;;AAIF;AACE,aAAOQ,KAAP;AAxCJ;AA0CD,CA3CD;;AA6CA,eAAeD,cAAf","sourcesContent":["import * as utils from 'utils';\r\n\r\nconst initialState = {\r\n  term: '',\r\n  queue: [],\r\n  results: {},\r\n  resultsTerm: '',\r\n  isLoading: false,\r\n  error: '',\r\n};\r\n\r\nconst searchReducers = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'SEARCH_GET_REQUEST':\r\n      return {\r\n        ...state,\r\n        term: action.payload,\r\n        queue: [...state.queue, action.payload],\r\n        isLoading: true,\r\n      };\r\n\r\n    case 'SEARCH_GET_SUCCESS':\r\n      // this is to make sure this response matches the last query that was triggered\r\n      const searchSuccessTermMatch = action.payload.term && state.term === action.payload.term;\r\n      const searchSuccessQueue = state.queue.filter((q) => q !== action.payload.term);\r\n\r\n      return {\r\n        ...state,\r\n        queue: searchSuccessQueue,\r\n        results: searchSuccessTermMatch ? action.payload.results : state.results,\r\n        resultsTerm: searchSuccessTermMatch ? action.payload.term : state.resultsTerm,\r\n        isLoading: searchSuccessQueue.length > 0,\r\n      };\r\n\r\n    case 'SEARCH_GET_FAILURE':\r\n      const searchFailureTermMatch = action.payload.term && state.term === action.payload.term;\r\n      const searchFailureQueue = state.queue.filter((q) => q !== action.payload.term);\r\n\r\n      return {\r\n        ...state,\r\n        queue: searchFailureQueue,\r\n        results: searchFailureTermMatch ? {} : state.results,\r\n        isLoading: searchFailureQueue.length > 0,\r\n        error: searchFailureTermMatch ? utils.string.t('advancedSearch.fetchError') : state.error,\r\n      };\r\n\r\n    case 'SEARCH_RESET':\r\n      return {\r\n        ...initialState,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default searchReducers;\r\n"]},"metadata":{},"sourceType":"module"}