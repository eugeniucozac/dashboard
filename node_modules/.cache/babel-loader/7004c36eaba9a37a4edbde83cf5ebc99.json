{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n//app\nimport { authLogout } from 'stores';\nimport * as utils from 'utils';\nexport var getDmsMetaData = function getDmsMetaData(context, selectedSourceId, metaDataSectionRef) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/claims.actions.getDmsMetaData'\n    }; // eslint-disable-next-line\n\n    var _utils$dmsFormatter$g = utils.dmsFormatter.getMetaDataParams(getState(), context, selectedSourceId, metaDataSectionRef),\n        sectionType = _utils$dmsFormatter$g.sectionType,\n        sourceId = _utils$dmsFormatter$g.sourceId,\n        divisionId = _utils$dmsFormatter$g.divisionId,\n        sectionRef = _utils$dmsFormatter$g.sectionRef,\n        referenceId = _utils$dmsFormatter$g.referenceId; // TODO once it is converted to prop approach, we can get rid of this function\n    // abort invalid call\n\n\n    if (!sectionType || !sourceId || !referenceId) {\n      dispatch(getDmsMetaDataFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Missing requests params'\n      })));\n      return;\n    }\n\n    var params = _objectSpread(_objectSpread({\n      sectionType: sectionType,\n      // corresponds to contexts: Loss, Claims, Tasks, Case\n      sourceId: sourceId\n    }, divisionId ? {\n      divisionId: divisionId\n    } : {}), {}, {\n      // is needed for Claims and Loss contexts\n      referenceId: referenceId,\n      // corresponds to ClaimId, lossDetailID, policyId etc\n      sectionRef: sectionRef // corresponds to ClaimRef, lossDetailRef, policyRef etc\n\n    });\n\n    dispatch(getDmsMetaDataRequest({\n      context: context,\n      referenceId: referenceId,\n      sectionRef: sectionRef\n    })); // In future referenceId, sectionRef will be passed as params\n\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.dmsService,\n      path: 'data/context/details',\n      params: params\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(getDmsMetaDataSuccess(data === null || data === void 0 ? void 0 : data.data));\n      return data;\n    })[\"catch\"](function (err) {\n      var defaultError = {\n        file: 'stores/dms.actions.getMetaData'\n      };\n      utils.api.handleError(err, defaultError);\n      dispatch(getDmsMetaDataFailure(err));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      return err;\n    });\n  };\n};\nexport var getDmsMetaDataRequest = function getDmsMetaDataRequest(params) {\n  return {\n    type: 'DMS_METADATA_GET_REQUEST',\n    payload: params\n  };\n};\nexport var getDmsMetaDataSuccess = function getDmsMetaDataSuccess(data) {\n  return {\n    type: 'DMS_METADATA_GET_SUCCESS',\n    payload: data\n  };\n};\nexport var getDmsMetaDataFailure = function getDmsMetaDataFailure(err) {\n  return {\n    type: 'DMS_METADATA_GET_ERROR',\n    payload: err\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/dms/dms.actions.getDmsMetaData.js"],"names":["authLogout","utils","getDmsMetaData","context","selectedSourceId","metaDataSectionRef","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","dmsFormatter","getMetaDataParams","sectionType","sourceId","divisionId","sectionRef","referenceId","getDmsMetaDataFailure","message","params","getDmsMetaDataRequest","api","get","token","accessToken","dmsService","path","then","response","handleResponse","json","handleNewData","data","getDmsMetaDataSuccess","err","handleError","handleUnauthorized","type","payload"],"mappings":"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","sourcesContent":["//app\r\nimport { authLogout } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const getDmsMetaData = (context, selectedSourceId, metaDataSectionRef) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } } } = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.getDmsMetaData',\r\n  };\r\n\r\n  // eslint-disable-next-line\r\n  const { sectionType, sourceId, divisionId, sectionRef, referenceId } = utils.dmsFormatter.getMetaDataParams(\r\n    getState(),\r\n    context,\r\n    selectedSourceId,\r\n    metaDataSectionRef\r\n  ); // TODO once it is converted to prop approach, we can get rid of this function\r\n\r\n  // abort invalid call\r\n  if (!sectionType || !sourceId || !referenceId) {\r\n    dispatch(getDmsMetaDataFailure({ ...defaultError, message: 'Missing requests params' }));\r\n    return;\r\n  }\r\n\r\n  const params = {\r\n    sectionType, // corresponds to contexts: Loss, Claims, Tasks, Case\r\n    sourceId, // is non-mandatory for Loss context\r\n    ...(divisionId ? { divisionId } : {}), // is needed for Claims and Loss contexts\r\n    referenceId, // corresponds to ClaimId, lossDetailID, policyId etc\r\n    sectionRef, // corresponds to ClaimRef, lossDetailRef, policyRef etc\r\n  };\r\n\r\n  dispatch(getDmsMetaDataRequest({ context, referenceId, sectionRef })); // In future referenceId, sectionRef will be passed as params\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.dmsService,\r\n      path: 'data/context/details',\r\n      params,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(getDmsMetaDataSuccess(data?.data));\r\n      return data;\r\n    })\r\n    .catch((err) => {\r\n      const defaultError = {\r\n        file: 'stores/dms.actions.getMetaData',\r\n      };\r\n\r\n      utils.api.handleError(err, defaultError);\r\n      dispatch(getDmsMetaDataFailure(err));\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const getDmsMetaDataRequest = (params) => {\r\n  return {\r\n    type: 'DMS_METADATA_GET_REQUEST',\r\n    payload: params,\r\n  };\r\n};\r\n\r\nexport const getDmsMetaDataSuccess = (data) => {\r\n  return {\r\n    type: 'DMS_METADATA_GET_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const getDmsMetaDataFailure = (err) => {\r\n  return {\r\n    type: 'DMS_METADATA_GET_ERROR',\r\n    payload: err,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}