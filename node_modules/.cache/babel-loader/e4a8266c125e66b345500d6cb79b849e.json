{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\components\\\\FormAutocompleteMuiAsync\\\\FormAutocompleteMuiAsync.view.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { Controller, useFormContext } from 'react-hook-form';\nimport { TextField } from '@material-ui/core';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport get from 'lodash/get';\nimport parse from 'autosuggest-highlight/parse';\nimport match from 'autosuggest-highlight/match';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar FormAutocompleteMuiAsyncView = function FormAutocompleteMuiAsyncView(_ref) {\n  _s();\n\n  var name = _ref.name,\n      value = _ref.value,\n      defaultValue = _ref.defaultValue,\n      componentOptions = _ref.componentOptions,\n      optionKey = _ref.optionKey,\n      optionLabel = _ref.optionLabel,\n      label = _ref.label,\n      placeholder = _ref.placeholder,\n      hint = _ref.hint,\n      error = _ref.error,\n      disabled = _ref.disabled,\n      muiComponentProps = _ref.muiComponentProps,\n      callback = _ref.callback;\n  var fieldProps = {\n    optionLabel: optionLabel,\n    label: label,\n    placeholder: placeholder,\n    error: error,\n    disabled: disabled,\n    helperText: hint,\n    muiComponentProps: muiComponentProps,\n    callback: callback\n  };\n\n  var _useFormContext = useFormContext(),\n      control = _useFormContext.control,\n      setValue = _useFormContext.setValue;\n\n  var errorMsg = get(fieldProps, 'error.message', '');\n  var isMultiple = get(fieldProps, 'muiComponentProps.multiple', false);\n\n  var getValue = function getValue(value) {\n    var optionKey = fieldProps.optionKey || 'value';\n    var result = componentOptions.filter(function (option) {\n      return option[optionKey] === value;\n    });\n    return result[0] ? result[0] : null;\n  };\n\n  var getMultipleValues = function getMultipleValues(values) {\n    var optionKey = fieldProps.optionKey || 'value';\n    var result = values === null || values === void 0 ? void 0 : values.map(function (value) {\n      return componentOptions.find(function (option) {\n        return option[optionKey] === value;\n      });\n    }).filter(function (value) {\n      return utils.generic.isValidObject(value, optionKey);\n    });\n    return result ? result : [];\n  };\n\n  return /*#__PURE__*/_jsxDEV(Controller, {\n    name: name,\n    control: control,\n    value: value,\n    render: function render(_ref2) {\n      var _onChange = _ref2.onChange,\n          props = _objectWithoutProperties(_ref2, [\"onChange\"]);\n\n      var value = props.value;\n\n      if (typeof value === 'string') {\n        var parsedValue = getValue(value);\n        parsedValue && setValue(name, parsedValue);\n      } else if (isMultiple && value.every(function (val) {\n        return typeof val === 'string';\n      })) {\n        var parsedValues = getMultipleValues(value);\n        utils.generic.isValidArray(parsedValues, true) && setValue(name, parsedValues);\n      }\n\n      return /*#__PURE__*/_jsxDEV(Autocomplete, _objectSpread(_objectSpread({\n        value: props.value,\n        onChange: function onChange(e, data) {\n          return _onChange(data);\n        },\n        options: componentOptions,\n        getOptionLabel: function getOptionLabel(option) {\n          return option && option[fieldProps.optionLabel] ? option[fieldProps.optionLabel] : '';\n        },\n        disableClearable: true,\n        multiple: isMultiple,\n        ChipProps: {\n          size: 'small',\n          variant: 'outlined'\n        },\n        autoComplete: true,\n        autoHighlight: true,\n        renderOption: function renderOption(option, _ref3) {\n          var inputValue = _ref3.inputValue;\n          var title = option[fieldProps.optionLabel];\n          var matches = match(title, inputValue);\n          var parts = parse(title, matches);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: parts.map(function (part, index) {\n              return /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  fontWeight: part.highlight ? 700 : 400\n                },\n                children: part.text\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 21\n              }, _this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 17\n          }, _this);\n        },\n        renderInput: function renderInput(params) {\n          return /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n            fullWidth: true,\n            variant: \"outlined\",\n            margin: \"normal\",\n            name: name,\n            label: fieldProps.label,\n            error: !!errorMsg,\n            helperText: !!errorMsg ? errorMsg : fieldProps.helperText,\n            placeholder: fieldProps.placeholder,\n            \"data-form-type\": \"autocomplete\",\n            inputProps: _objectSpread({}, params.inputProps)\n          }), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, _this);\n        }\n      }, fieldProps.muiComponentProps), {}, {\n        disabled: fieldProps.disabled || (componentOptions === null || componentOptions === void 0 ? void 0 : componentOptions.length) === 0\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, _this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(FormAutocompleteMuiAsyncView, \"fr87GsMgSkQFtPVx8heK5iB2AU4=\", false, function () {\n  return [useFormContext];\n});\n\n_c = FormAutocompleteMuiAsyncView;\nexport default FormAutocompleteMuiAsyncView;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormAutocompleteMuiAsyncView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/FormAutocompleteMuiAsync/FormAutocompleteMuiAsync.view.js"],"names":["Controller","useFormContext","TextField","Autocomplete","get","parse","match","utils","FormAutocompleteMuiAsyncView","name","value","defaultValue","componentOptions","optionKey","optionLabel","label","placeholder","hint","error","disabled","muiComponentProps","callback","fieldProps","helperText","control","setValue","errorMsg","isMultiple","getValue","result","filter","option","getMultipleValues","values","map","find","generic","isValidObject","onChange","props","parsedValue","every","val","parsedValues","isValidArray","e","data","size","variant","inputValue","title","matches","parts","part","index","fontWeight","highlight","text","params","inputProps","length"],"mappings":"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","sourcesContent":["import { Controller, useFormContext } from 'react-hook-form';\r\nimport { TextField } from '@material-ui/core';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport get from 'lodash/get';\r\nimport parse from 'autosuggest-highlight/parse';\r\nimport match from 'autosuggest-highlight/match';\r\n\r\nimport * as utils from 'utils';\r\n\r\nconst FormAutocompleteMuiAsyncView = ({\r\n  name,\r\n  value,\r\n  defaultValue,\r\n  componentOptions,\r\n  optionKey,\r\n  optionLabel,\r\n  label,\r\n  placeholder,\r\n  hint,\r\n  error,\r\n  disabled,\r\n  muiComponentProps,\r\n  callback,\r\n}) => {\r\n  const fieldProps = {\r\n    optionLabel,\r\n    label,\r\n    placeholder,\r\n    error,\r\n    disabled,\r\n    helperText: hint,\r\n    muiComponentProps,\r\n    callback,\r\n  };\r\n  const { control, setValue } = useFormContext();\r\n  const errorMsg = get(fieldProps, 'error.message', '');\r\n  const isMultiple = get(fieldProps, 'muiComponentProps.multiple', false);\r\n\r\n  const getValue = (value) => {\r\n    const optionKey = fieldProps.optionKey || 'value';\r\n    const result = componentOptions.filter((option) => option[optionKey] === value);\r\n\r\n    return result[0] ? result[0] : null;\r\n  };\r\n\r\n  const getMultipleValues = (values) => {\r\n    const optionKey = fieldProps.optionKey || 'value';\r\n    const result = values\r\n      ?.map((value) => componentOptions.find((option) => option[optionKey] === value))\r\n      .filter((value) => utils.generic.isValidObject(value, optionKey));\r\n\r\n    return result ? result : [];\r\n  };\r\n\r\n  return (\r\n    <Controller\r\n      name={name}\r\n      control={control}\r\n      value={value}\r\n      render={({ onChange, ...props }) => {\r\n        let { value } = props;\r\n\r\n        if (typeof value === 'string') {\r\n          const parsedValue = getValue(value);\r\n          parsedValue && setValue(name, parsedValue);\r\n        } else if (isMultiple && value.every((val) => typeof val === 'string')) {\r\n          const parsedValues = getMultipleValues(value);\r\n          utils.generic.isValidArray(parsedValues, true) && setValue(name, parsedValues);\r\n        }\r\n\r\n        return (\r\n          <Autocomplete\r\n            value={props.value}\r\n            onChange={(e, data) => onChange(data)}\r\n            options={componentOptions}\r\n            getOptionLabel={(option) => (option && option[fieldProps.optionLabel] ? option[fieldProps.optionLabel] : '')}\r\n            disableClearable\r\n            multiple={isMultiple}\r\n            ChipProps={{\r\n              size: 'small',\r\n              variant: 'outlined',\r\n            }}\r\n            autoComplete\r\n            autoHighlight\r\n            renderOption={(option, { inputValue }) => {\r\n              const title = option[fieldProps.optionLabel];\r\n              const matches = match(title, inputValue);\r\n              const parts = parse(title, matches);\r\n\r\n              return (\r\n                <div>\r\n                  {parts.map((part, index) => (\r\n                    <span key={index} style={{ fontWeight: part.highlight ? 700 : 400 }}>\r\n                      {part.text}\r\n                    </span>\r\n                  ))}\r\n                </div>\r\n              );\r\n            }}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                fullWidth\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                name={name}\r\n                label={fieldProps.label}\r\n                error={!!errorMsg}\r\n                helperText={!!errorMsg ? errorMsg : fieldProps.helperText}\r\n                placeholder={fieldProps.placeholder}\r\n                data-form-type=\"autocomplete\"\r\n                inputProps={{\r\n                  ...params.inputProps,\r\n                }}\r\n              />\r\n            )}\r\n            {...fieldProps.muiComponentProps}\r\n            disabled={fieldProps.disabled || componentOptions?.length === 0}\r\n          />\r\n        );\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default FormAutocompleteMuiAsyncView;\r\n"]},"metadata":{},"sourceType":"module"}