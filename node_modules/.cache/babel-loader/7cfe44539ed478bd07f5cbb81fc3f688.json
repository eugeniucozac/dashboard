{"ast":null,"code":"import _defineProperty from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ProcessingInstructionsChecklist\\\\ProcessingInstructionsChecklist.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory, useParams } from 'react-router';\nimport get from 'lodash/get';\nimport * as Yup from 'yup'; // app\n\nimport ProcessingInstructionsChecklistView from './ProcessingInstructionsChecklist.view';\nimport { processingInstructionsSchema } from 'schemas';\nimport { enqueueNotification, checkListUpdate, selectUser, selectPiProducingBrokers, selectPiAccountExecutives, selectPiFacilityTypes, selectAccountExecutivesForRiskReference, selectProducingBrokerNamesForRiskReference, updateReferenceDocumentCountLoading, getRiskReferenceDocumentsCount, getRiskReferencesDocumentsCountList, getIsRiskReferenceDocumentCountLoading } from 'stores';\nimport * as utils from 'utils';\nimport config from 'config';\nimport * as constants from 'consts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nProcessingInstructionsChecklist.propTypes = {\n  instruction: PropTypes.object.isRequired,\n  handlers: PropTypes.shape({\n    back: PropTypes.func.isRequired,\n    next: PropTypes.func.isRequired\n  }).isRequired\n};\nexport default function ProcessingInstructionsChecklist(_ref) {\n  _s();\n\n  var _instruction$riskRefe, _instruction$details7, _instruction$details8, _instruction$details9, _instruction$details10;\n\n  var instruction = _ref.instruction,\n      handlers = _ref.handlers,\n      childRef = _ref.childRef;\n  var dispatch = useDispatch();\n  var history = useHistory();\n\n  var _useParams = useParams(),\n      id = _useParams.id,\n      step = _useParams.step,\n      tab = _useParams.tab;\n\n  var piProducingBrokers = useSelector(selectProducingBrokerNamesForRiskReference);\n  var piAccountExecutives = useSelector(selectAccountExecutivesForRiskReference);\n  var riskReferencesDocumentsCountList = useSelector(getRiskReferencesDocumentsCountList);\n  var isRiskReferenceDocumentCountLoading = useSelector(getIsRiskReferenceDocumentCountLoading);\n  var documents = useSelector(function (state) {\n    return get(state, 'processingInstructions.documents');\n  }) || {};\n  var producingBrokersFromRoles = useSelector(selectPiProducingBrokers);\n  var accountExecutivesFromRoles = useSelector(selectPiAccountExecutives);\n  var producingBrokers = utils.generic.isValidArray(piProducingBrokers, true) ? piProducingBrokers : producingBrokersFromRoles;\n  var accountExecutives = utils.generic.isValidArray(piAccountExecutives, true) ? piAccountExecutives : accountExecutivesFromRoles;\n  var facilityTypes = useSelector(selectPiFacilityTypes);\n  var user = useSelector(selectUser);\n  var columns = [{\n    id: 'detail',\n    label: utils.string.t('processingInstructions.checklist.cols.detail')\n  }, {\n    id: 'frontEndContact',\n    label: utils.string.t('processingInstructions.checklist.cols.frontEndContact'),\n    align: 'center'\n  }, {\n    id: 'authorisedSignatory',\n    label: utils.string.t('processingInstructions.checklist.cols.authorisedSignatory'),\n    align: 'center'\n  }];\n  var checklistTabs = [{\n    value: constants.GENERAL,\n    label: utils.string.t('processingInstructions.checklist.tabs.general.title')\n  }, {\n    value: constants.PRE_PLACING,\n    label: utils.string.t('processingInstructions.checklist.tabs.prePlacing.title')\n  }, {\n    value: constants.MRC,\n    label: utils.string.t('processingInstructions.checklist.tabs.mrc.title')\n  }, {\n    value: constants.OTHER_DETAILS,\n    label: utils.string.t('processingInstructions.checklist.tabs.otherDetails.title')\n  }, {\n    value: constants.RISK_REFERENCES,\n    label: utils.string.t('processingInstructions.checklist.tabs.riskRefs.title')\n  }];\n\n  var _useState = useState(checklistTabs),\n      _useState2 = _slicedToArray(_useState, 2),\n      tabs = _useState2[0],\n      setTabs = _useState2[1];\n\n  var isValidTab = tabs.map(function (item) {\n    return item.value;\n  }).includes(tab);\n\n  var _useState3 = useState(isValidTab ? tab : 'general'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selectedTab = _useState4[0],\n      setSelectedTab = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      defaultValues = _useState6[0],\n      setDefaultValues = _useState6[1];\n\n  var _useState7 = useState({}),\n      _useState8 = _slicedToArray(_useState7, 2),\n      schemaData = _useState8[0],\n      setSchemaData = _useState8[1];\n\n  var _useState9 = useState(),\n      _useState10 = _slicedToArray(_useState9, 2),\n      resetKey = _useState10[0],\n      setResetKey = _useState10[1];\n\n  var _useState11 = useState(processingInstructionsSchema),\n      _useState12 = _slicedToArray(_useState11, 2),\n      piSchema = _useState12[0],\n      setPiSchema = _useState12[1];\n\n  var leadRef = instruction === null || instruction === void 0 ? void 0 : (_instruction$riskRefe = instruction.riskReferences) === null || _instruction$riskRefe === void 0 ? void 0 : _instruction$riskRefe.find(function (r) {\n    return r.leadPolicy;\n  });\n  var leadRefProducingBrokerName = leadRef === null || leadRef === void 0 ? void 0 : leadRef.producingBrokerName;\n  var leadRefAccountExecutiveName = leadRef === null || leadRef === void 0 ? void 0 : leadRef.accountExecutive;\n  var isFdo = utils.processingInstructions.isFdo(instruction === null || instruction === void 0 ? void 0 : instruction.processTypeId);\n  var isDraft = utils.processingInstructions.status.isDraft(instruction === null || instruction === void 0 ? void 0 : instruction.statusId);\n  var isRejectedDraft = utils.processingInstructions.status.isRejectedDraft(instruction === null || instruction === void 0 ? void 0 : instruction.statusId);\n  var isSubmittedAuthorisedSignatory = utils.processingInstructions.status.isSubmittedAuthorisedSignatory(instruction === null || instruction === void 0 ? void 0 : instruction.statusId);\n  var isReopened = utils.processingInstructions.status.isReopened(instruction === null || instruction === void 0 ? void 0 : instruction.statusId);\n  var userHasWritePermission = utils.app.access.feature('processingInstructions.processingInstructions', ['create', 'update'], user);\n  var userHasApproverAccess = utils.app.access.feature('processingInstructions.approverChecklist', ['create', 'update'], user);\n  var isCheckboxesEditable = userHasApproverAccess && isSubmittedAuthorisedSignatory;\n  var isEditable = userHasWritePermission && (isDraft || isRejectedDraft || isReopened);\n  var isReadOnly = !isEditable;\n  var isEndorsement = utils.processingInstructions.isEndorsement(instruction === null || instruction === void 0 ? void 0 : instruction.processTypeId);\n  var isFeeAndAmendment = utils.processingInstructions.isFeeAndAmendment(instruction === null || instruction === void 0 ? void 0 : instruction.processTypeId);\n  var isBordereau = utils.processingInstructions.isBordereau(instruction === null || instruction === void 0 ? void 0 : instruction.processTypeId);\n  var faBorderProcessType = isBordereau || isFeeAndAmendment;\n\n  var getFacilityTypeId = function getFacilityTypeId() {\n    var _instruction$details;\n\n    var facilityTypeId = instruction === null || instruction === void 0 ? void 0 : (_instruction$details = instruction.details) === null || _instruction$details === void 0 ? void 0 : _instruction$details.facilityTypeId;\n\n    if (!facilityTypeId && utils.generic.isValidArray(facilityTypes, true)) {\n      var item = facilityTypes.find(function (type) {\n        var _instruction$details2;\n\n        return type.facilityTypeID === (instruction === null || instruction === void 0 ? void 0 : (_instruction$details2 = instruction.details) === null || _instruction$details2 === void 0 ? void 0 : _instruction$details2.facilityTypeId);\n      });\n      facilityTypeId = item === null || item === void 0 ? void 0 : item.facilityTypeID;\n    }\n\n    return facilityTypeId || '';\n  };\n\n  var getRiskReferenceDocumentCount = function getRiskReferenceDocumentCount() {\n    if (utils.generic.isValidArray(documents === null || documents === void 0 ? void 0 : documents.riskReferences, true)) {\n      var _documents$riskRefere;\n\n      dispatch(updateReferenceDocumentCountLoading(true));\n      var referenceList = documents === null || documents === void 0 ? void 0 : (_documents$riskRefere = documents.riskReferences) === null || _documents$riskRefere === void 0 ? void 0 : _documents$riskRefere.map(function (refData) {\n        return {\n          endorsementId: refData.endorsementId,\n          endorsementNumber: refData.endorsementNumber,\n          riskRefId: refData.riskRefId,\n          xbInstanceId: refData.xbInstanceId,\n          xbPolicyId: refData.xbPolicyId\n        };\n      });\n      var documentTypeValue = isEndorsement ? constants.PI_ENDORSEMENT_TYPE_DOCUMENT.documentTypeDescription : faBorderProcessType ? constants.PI_FABORDER_TYPE_DOCUMENT.documentTypeDescription : constants.PI_CLOSING_FDO_TYPE_DOCUMENT.documentTypeDescription;\n      dispatch(getRiskReferenceDocumentsCount(referenceList, documentTypeValue));\n    }\n  };\n\n  useEffect(function () {\n    getRiskReferenceDocumentCount();\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var getProducingBrokerId = function getProducingBrokerId() {\n    var _instruction$details3;\n\n    var producingBrokerId = instruction === null || instruction === void 0 ? void 0 : (_instruction$details3 = instruction.details) === null || _instruction$details3 === void 0 ? void 0 : _instruction$details3.producingBrokerId;\n    var item;\n\n    if (utils.generic.isValidArray(piProducingBrokers, true)) {\n      if (producingBrokerId) {\n        var _item;\n\n        item = piProducingBrokers.find(function (type) {\n          return type.id === producingBrokerId;\n        });\n        producingBrokerId = (_item = item) === null || _item === void 0 ? void 0 : _item.id;\n      } else if (leadRefProducingBrokerName) {\n        var leadProducingBroker = piProducingBrokers === null || piProducingBrokers === void 0 ? void 0 : piProducingBrokers.find(function (type) {\n          var _type$value;\n\n          return (type === null || type === void 0 ? void 0 : (_type$value = type.value) === null || _type$value === void 0 ? void 0 : _type$value.toLowerCase()) === (leadRefProducingBrokerName === null || leadRefProducingBrokerName === void 0 ? void 0 : leadRefProducingBrokerName.toLowerCase());\n        });\n        producingBrokerId = leadProducingBroker === null || leadProducingBroker === void 0 ? void 0 : leadProducingBroker.id;\n      }\n    } else if (!producingBrokerId && utils.generic.isValidArray(producingBrokers, true)) {\n      var _item2;\n\n      item = producingBrokers.find(function (type) {\n        var _instruction$details4;\n\n        return type.id === (instruction === null || instruction === void 0 ? void 0 : (_instruction$details4 = instruction.details) === null || _instruction$details4 === void 0 ? void 0 : _instruction$details4.producingBrokerId);\n      });\n      producingBrokerId = (_item2 = item) === null || _item2 === void 0 ? void 0 : _item2.id;\n    }\n\n    return producingBrokerId || '';\n  };\n\n  var getSelectedProducingBrokerName = function getSelectedProducingBrokerName(producingBrokerId) {\n    var _piProducingBrokers$f;\n\n    var selectedProducingBrokerName = piProducingBrokers === null || piProducingBrokers === void 0 ? void 0 : (_piProducingBrokers$f = piProducingBrokers.find(function (producingBroker) {\n      return (producingBroker === null || producingBroker === void 0 ? void 0 : producingBroker.id) === producingBrokerId;\n    })) === null || _piProducingBrokers$f === void 0 ? void 0 : _piProducingBrokers$f.value;\n    return selectedProducingBrokerName;\n  };\n\n  var getAccountExecutiveId = function getAccountExecutiveId() {\n    var _instruction$details5;\n\n    var accountExecutiveId = instruction === null || instruction === void 0 ? void 0 : (_instruction$details5 = instruction.details) === null || _instruction$details5 === void 0 ? void 0 : _instruction$details5.accountExecutiveId;\n    var item;\n\n    if (utils.generic.isValidArray(piAccountExecutives, true)) {\n      if (accountExecutiveId) {\n        var _item3;\n\n        item = piAccountExecutives.find(function (type) {\n          return type.id === accountExecutiveId;\n        });\n        accountExecutiveId = (_item3 = item) === null || _item3 === void 0 ? void 0 : _item3.id;\n      } else if (leadRefAccountExecutiveName) {\n        var leadAccountExecutive = piAccountExecutives === null || piAccountExecutives === void 0 ? void 0 : piAccountExecutives.find(function (type) {\n          return type.value.toLowerCase() === (leadRefAccountExecutiveName === null || leadRefAccountExecutiveName === void 0 ? void 0 : leadRefAccountExecutiveName.toLowerCase());\n        });\n        accountExecutiveId = leadAccountExecutive === null || leadAccountExecutive === void 0 ? void 0 : leadAccountExecutive.id;\n      }\n    } else if (!accountExecutiveId && utils.generic.isValidArray(accountExecutives, true)) {\n      var _item4;\n\n      item = accountExecutives.find(function (type) {\n        var _instruction$details6;\n\n        return type.id === (instruction === null || instruction === void 0 ? void 0 : (_instruction$details6 = instruction.details) === null || _instruction$details6 === void 0 ? void 0 : _instruction$details6.accountExecutiveId);\n      });\n      accountExecutiveId = (_item4 = item) === null || _item4 === void 0 ? void 0 : _item4.id;\n    }\n\n    return accountExecutiveId || '';\n  };\n\n  var getSelectedAccountExecutiveName = function getSelectedAccountExecutiveName(accountExecutiveId) {\n    var _piAccountExecutives$;\n\n    var selectedAccountExecutiveName = piAccountExecutives === null || piAccountExecutives === void 0 ? void 0 : (_piAccountExecutives$ = piAccountExecutives.find(function (accountExec) {\n      return (accountExec === null || accountExec === void 0 ? void 0 : accountExec.id) === accountExecutiveId;\n    })) === null || _piAccountExecutives$ === void 0 ? void 0 : _piAccountExecutives$.value;\n    return selectedAccountExecutiveName;\n  };\n\n  var fields = [{\n    name: 'invoicingClient',\n    group: 'general',\n    type: 'text',\n    label: utils.string.t('processingInstructions.checklist.fields.invoicingClient'),\n    value: (leadRef === null || leadRef === void 0 ? void 0 : leadRef.clientName) || '',\n    muiComponentProps: {\n      InputProps: {\n        readOnly: true,\n        disabled: true\n      }\n    }\n  }, {\n    name: 'contactName',\n    group: 'general',\n    type: 'text',\n    label: utils.string.t('processingInstructions.checklist.fields.contactName'),\n    value: (instruction === null || instruction === void 0 ? void 0 : (_instruction$details7 = instruction.details) === null || _instruction$details7 === void 0 ? void 0 : _instruction$details7.contactName) || '',\n    validation: Yup.string().required(utils.string.t('validation.required')),\n    muiComponentProps: {\n      inputProps: {\n        maxLength: 50\n      },\n      InputProps: {\n        readOnly: isReadOnly,\n        disabled: isReadOnly\n      }\n    }\n  }, {\n    name: 'clientEmail',\n    group: 'general',\n    type: 'text',\n    label: utils.string.t('processingInstructions.checklist.fields.clientEmail'),\n    value: (instruction === null || instruction === void 0 ? void 0 : (_instruction$details8 = instruction.details) === null || _instruction$details8 === void 0 ? void 0 : _instruction$details8.clientEmail) || '',\n    validation: Yup.string().email(utils.string.t('validation.email')).required(utils.string.t('validation.required')),\n    muiComponentProps: {\n      inputProps: {\n        maxLength: 50\n      },\n      InputProps: {\n        readOnly: isReadOnly,\n        disabled: isReadOnly\n      }\n    }\n  }, {\n    name: 'eocInvoiceContactName',\n    group: 'general',\n    type: 'text',\n    label: utils.string.t('processingInstructions.checklist.fields.eocInvoiceContactName'),\n    value: (instruction === null || instruction === void 0 ? void 0 : (_instruction$details9 = instruction.details) === null || _instruction$details9 === void 0 ? void 0 : _instruction$details9.eocInvoiceContactName) || '',\n    muiComponentProps: {\n      inputProps: {\n        maxLength: 50\n      },\n      InputProps: {\n        readOnly: isReadOnly,\n        disabled: isReadOnly\n      }\n    }\n  }, {\n    name: 'eocInvoiceMail',\n    group: 'general',\n    type: 'text',\n    label: utils.string.t('processingInstructions.checklist.fields.eocInvoiceMail'),\n    validation: Yup.string().email(utils.string.t('validation.email')),\n    value: (instruction === null || instruction === void 0 ? void 0 : (_instruction$details10 = instruction.details) === null || _instruction$details10 === void 0 ? void 0 : _instruction$details10.eocInvoiceMail) || '',\n    muiComponentProps: {\n      inputProps: {\n        maxLength: 50\n      },\n      InputProps: {\n        readOnly: isReadOnly,\n        disabled: isReadOnly\n      }\n    }\n  }, {\n    name: 'producingBroker',\n    group: 'general',\n    type: 'select',\n    label: utils.string.t('processingInstructions.checklist.fields.producingBroker'),\n    value: getProducingBrokerId(),\n    options: producingBrokers,\n    optionKey: 'id',\n    optionLabel: 'value',\n    validation: Yup.string().required(utils.string.t('validation.required')),\n    muiComponentProps: {\n      disabled: isReadOnly || utils.generic.isInvalidOrEmptyArray(producingBrokers)\n    }\n  }, {\n    name: 'accountExecutive',\n    group: 'general',\n    type: 'select',\n    label: utils.string.t('processingInstructions.checklist.fields.accountExecutive'),\n    value: getAccountExecutiveId(),\n    options: accountExecutives,\n    optionKey: 'id',\n    optionLabel: 'value',\n    validation: Yup.string().required(utils.string.t('validation.required')),\n    muiComponentProps: {\n      disabled: isReadOnly || utils.generic.isInvalidOrEmptyArray(accountExecutives)\n    }\n  }].concat(_toConsumableArray(isFdo ? [{\n    name: 'businessType',\n    group: 'general',\n    type: 'text',\n    label: utils.string.t('processingInstructions.checklist.fields.businessType'),\n    value: (leadRef === null || leadRef === void 0 ? void 0 : leadRef.businessType) || '',\n    muiComponentProps: {\n      InputProps: {\n        readOnly: true,\n        disabled: true\n      }\n    }\n  }, {\n    name: 'facilityType',\n    group: 'general',\n    type: 'select',\n    label: utils.string.t('processingInstructions.checklist.fields.facilityType'),\n    value: getFacilityTypeId(),\n    validation: Yup.string().required(utils.string.t('validation.required')),\n    options: facilityTypes,\n    optionKey: 'facilityTypeID',\n    optionLabel: 'facilityTypeDetails',\n    disabled: isReadOnly || utils.generic.isInvalidOrEmptyArray(facilityTypes)\n  }] : []));\n  useEffect(function () {\n    var _childRef$current, _childRef$current$pro;\n\n    var reset = childRef === null || childRef === void 0 ? void 0 : (_childRef$current = childRef.current) === null || _childRef$current === void 0 ? void 0 : (_childRef$current$pro = _childRef$current.props) === null || _childRef$current$pro === void 0 ? void 0 : _childRef$current$pro.resetFunc;\n    var schema = utils.schemas.parsePiChecklist(piSchema, instruction);\n\n    var updatedDefaultValues = _objectSpread({\n      checklist: utils.form.getNestedInitialValues(schema === null || schema === void 0 ? void 0 : schema.rows, 'columnName')\n    }, utils.form.getInitialValues(fields));\n\n    setSchemaData(schema);\n    setDefaultValues(updatedDefaultValues);\n\n    if (utils.generic.isFunction(reset)) {\n      reset(updatedDefaultValues, {\n        keepDirty: false\n      });\n    }\n  }, [instruction] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  var validateChecklistDates = function validateChecklistDates(valuesChecklist) {\n    var _valuesChecklist$quot, _valuesChecklist$quot2, _valuesChecklist$duty, _valuesChecklist$duty2, _valuesChecklist$evid, _valuesChecklist$evid2;\n\n    if ((valuesChecklist === null || valuesChecklist === void 0 ? void 0 : (_valuesChecklist$quot = valuesChecklist.quotesPutUp) === null || _valuesChecklist$quot === void 0 ? void 0 : _valuesChecklist$quot.accountHandler) === 'YES' && (valuesChecklist === null || valuesChecklist === void 0 ? void 0 : (_valuesChecklist$quot2 = valuesChecklist.quotesPutUp) === null || _valuesChecklist$quot2 === void 0 ? void 0 : _valuesChecklist$quot2.signedDate) === null) {\n      return false;\n    }\n\n    if ((valuesChecklist === null || valuesChecklist === void 0 ? void 0 : (_valuesChecklist$duty = valuesChecklist.dutyOfDisclosure) === null || _valuesChecklist$duty === void 0 ? void 0 : _valuesChecklist$duty.accountHandler) === 'YES' && (valuesChecklist === null || valuesChecklist === void 0 ? void 0 : (_valuesChecklist$duty2 = valuesChecklist.dutyOfDisclosure) === null || _valuesChecklist$duty2 === void 0 ? void 0 : _valuesChecklist$duty2.signedDate) === null) {\n      return false;\n    }\n\n    if ((valuesChecklist === null || valuesChecklist === void 0 ? void 0 : (_valuesChecklist$evid = valuesChecklist.evidence) === null || _valuesChecklist$evid === void 0 ? void 0 : _valuesChecklist$evid.accountHandler) === 'YES' && (valuesChecklist === null || valuesChecklist === void 0 ? void 0 : (_valuesChecklist$evid2 = valuesChecklist.evidence) === null || _valuesChecklist$evid2 === void 0 ? void 0 : _valuesChecklist$evid2.signedDate) === null) {\n      return false;\n    }\n\n    return true;\n  };\n\n  var validateYesNoNaToggle = function validateYesNoNaToggle(valuesChecklist) {\n    return Object.values(valuesChecklist).every(function (c) {\n      return ['YES', 'NO', 'NA'].includes(c.accountHandler);\n    });\n  };\n\n  var validateChecklistTabs = function validateChecklistTabs(valuesChecklist) {\n    return validateYesNoNaToggle(valuesChecklist) && validateChecklistDates(valuesChecklist);\n  };\n\n  var validateAllChecklistSelected = function validateAllChecklistSelected(valuesChecklist) {\n    return validateYesNoNaToggle(valuesChecklist);\n  };\n\n  var validateMandateChecklistDates = function validateMandateChecklistDates(checklistRow) {\n    if ((checklistRow === null || checklistRow === void 0 ? void 0 : checklistRow.accountHandler) === 'YES' && (checklistRow === null || checklistRow === void 0 ? void 0 : checklistRow.signedDate) === null) {\n      return true;\n    }\n\n    return false;\n  };\n\n  var saveChecklist = function saveChecklist(_ref2) {\n    var _childRef$current$pro2;\n\n    var isNext = _ref2.isNext,\n        isSave = _ref2.isSave,\n        isSaveNext = _ref2.isSaveNext;\n    var formValues = (_childRef$current$pro2 = childRef.current.props) === null || _childRef$current$pro2 === void 0 ? void 0 : _childRef$current$pro2.values;\n\n    var updatedInstruction = _objectSpread(_objectSpread({}, instruction), {}, {\n      details: _objectSpread(_objectSpread({}, instruction.details), {}, {\n        accountExecutive: getSelectedAccountExecutiveName(formValues.accountExecutive),\n        producingBrokerName: getSelectedProducingBrokerName(formValues.producingBroker)\n      })\n    });\n\n    if (isSaveNext || isSave) {\n      dispatch(checkListUpdate(formValues, updatedInstruction)).then(function (data) {\n        if (isSaveNext) {\n          if ((data === null || data === void 0 ? void 0 : data.status) === constants.API_RESPONSE_OK) {\n            handlers.next();\n          } else {\n            dispatch(enqueueNotification('app.somethingWentWrong', 'warning'));\n          }\n        }\n      });\n    } else if (isNext) {\n      handlers.next();\n    }\n  };\n\n  var handleSave = function handleSave(type) {\n    saveChecklist(type);\n  };\n\n  var handleNext = function handleNext(generalTabErrors, type) {\n    var _childRef$current$pro3, _Object$entries, _Object$entries2, _Object$entries3, _Object$entries4;\n\n    var formValues = (_childRef$current$pro3 = childRef.current.props) === null || _childRef$current$pro3 === void 0 ? void 0 : _childRef$current$pro3.values;\n    var isChecklistDatesSelected = validateChecklistDates(formValues === null || formValues === void 0 ? void 0 : formValues.checklist);\n    var updatedContent = (_Object$entries = Object.entries(piSchema === null || piSchema === void 0 ? void 0 : piSchema.content)) === null || _Object$entries === void 0 ? void 0 : _Object$entries.reduce(function (acc, _ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n          key = _ref4[0],\n          value = _ref4[1];\n\n      var newValue = value === null || value === void 0 ? void 0 : value.map(function (contentValue) {\n        var _formValues$checklist;\n\n        contentValue.cells[0].isError = !Boolean(formValues === null || formValues === void 0 ? void 0 : (_formValues$checklist = formValues.checklist[contentValue === null || contentValue === void 0 ? void 0 : contentValue.rowKey]) === null || _formValues$checklist === void 0 ? void 0 : _formValues$checklist.accountHandler) || ['quotesPutUp', 'dutyOfDisclosure', 'evidence'].includes(contentValue === null || contentValue === void 0 ? void 0 : contentValue.rowKey) && validateMandateChecklistDates(formValues === null || formValues === void 0 ? void 0 : formValues.checklist[contentValue === null || contentValue === void 0 ? void 0 : contentValue.rowKey]);\n        return contentValue;\n      });\n      return _objectSpread(_objectSpread({}, acc), _defineProperty({}, key, newValue));\n    }, {});\n\n    var updatePiSchema = _objectSpread(_objectSpread({}, piSchema), {}, {\n      content: updatedContent\n    });\n\n    setPiSchema(updatePiSchema);\n    var schema = utils.schemas.parsePiChecklist(updatePiSchema, instruction);\n    setSchemaData(schema);\n    var prePlacingChcklist = (_Object$entries2 = Object.entries(formValues === null || formValues === void 0 ? void 0 : formValues.checklist)) === null || _Object$entries2 === void 0 ? void 0 : _Object$entries2.reduce(function (acc, _ref5) {\n      var _ref6 = _slicedToArray(_ref5, 2),\n          key = _ref6[0],\n          value = _ref6[1];\n\n      return _objectSpread(_objectSpread({}, acc), ['quotesPutUp', 'dutyOfDisclosure', 'demandsNeeds', 'slipsSigned', 'evidence', 'atlas', 'bars'].includes(key) && _defineProperty({}, key, value));\n    }, {});\n    var mrcChcklist = (_Object$entries3 = Object.entries(formValues === null || formValues === void 0 ? void 0 : formValues.checklist)) === null || _Object$entries3 === void 0 ? void 0 : _Object$entries3.reduce(function (acc, _ref8) {\n      var _ref9 = _slicedToArray(_ref8, 2),\n          key = _ref9[0],\n          value = _ref9[1];\n\n      return _objectSpread(_objectSpread({}, acc), ['allWrittenLines', 'allUnderwriter', 'informationClearlyStated', 'allMarketsApproved', 'paymentTerms', 'subscriptionAgreement', 'riskCodes'].includes(key) && _defineProperty({}, key, value));\n    }, {});\n    var otherDetailsChcklist = (_Object$entries4 = Object.entries(formValues === null || formValues === void 0 ? void 0 : formValues.checklist)) === null || _Object$entries4 === void 0 ? void 0 : _Object$entries4.reduce(function (acc, _ref11) {\n      var _ref12 = _slicedToArray(_ref11, 2),\n          key = _ref12[0],\n          value = _ref12[1];\n\n      return _objectSpread(_objectSpread({}, acc), ['marketSheet', 'confirmSanctioned', 'thirdParty', 'contractCertainty'].includes(key) && _defineProperty({}, key, value));\n    }, {});\n    var isChecklistCompleted = validateAllChecklistSelected(formValues === null || formValues === void 0 ? void 0 : formValues.checklist);\n    var isPrePlacingChecklistCompleted = validateChecklistTabs(prePlacingChcklist);\n    var isMrcChecklistCompleted = validateChecklistTabs(mrcChcklist);\n    var isOtherDetailsChecklistCompleted = validateChecklistTabs(otherDetailsChcklist);\n    var isAllRiskRefsHavingAtLeastADoc = !(utils.generic.isValidArray(riskReferencesDocumentsCountList, true) && (riskReferencesDocumentsCountList === null || riskReferencesDocumentsCountList === void 0 ? void 0 : riskReferencesDocumentsCountList.some(function (a) {\n      return Number(a === null || a === void 0 ? void 0 : a.documentCount) === 0;\n    })));\n    var updatedTabs = tabs === null || tabs === void 0 ? void 0 : tabs.map(function (tab) {\n      switch (tab.value) {\n        case constants.GENERAL:\n          return _objectSpread(_objectSpread({}, tab), {}, {\n            errors: generalTabErrors\n          });\n\n        case constants.PRE_PLACING:\n          return _objectSpread(_objectSpread({}, tab), {}, {\n            errors: Number(!isPrePlacingChecklistCompleted)\n          });\n\n        case constants.MRC:\n          return _objectSpread(_objectSpread({}, tab), {}, {\n            errors: Number(!isMrcChecklistCompleted)\n          });\n\n        case constants.OTHER_DETAILS:\n          return _objectSpread(_objectSpread({}, tab), {}, {\n            errors: Number(!isOtherDetailsChecklistCompleted)\n          });\n\n        case constants.RISK_REFERENCES:\n          return _objectSpread(_objectSpread({}, tab), {}, {\n            errors: Number(!isAllRiskRefsHavingAtLeastADoc)\n          });\n\n        default:\n          return {};\n      }\n    });\n    setTabs(updatedTabs);\n    var isAllMandatoryFieldsCompleted = !Boolean(generalTabErrors) && isChecklistCompleted;\n\n    if (isAllRiskRefsHavingAtLeastADoc && isAllMandatoryFieldsCompleted && isChecklistDatesSelected) {\n      saveChecklist(type);\n    } else if (!isAllMandatoryFieldsCompleted && !isAllRiskRefsHavingAtLeastADoc && !isChecklistDatesSelected) {\n      dispatch(enqueueNotification('processingInstructions.checklist.missingRequiredFieldsDatesDocs', 'error'));\n    } else if (!isAllRiskRefsHavingAtLeastADoc && !isChecklistDatesSelected) {\n      dispatch(enqueueNotification('processingInstructions.checklist.missingRequiredDatesDocs', 'error'));\n    } else if (!isAllMandatoryFieldsCompleted && !isChecklistDatesSelected) {\n      dispatch(enqueueNotification('processingInstructions.checklist.missingRequiredFieldsDates', 'error'));\n    } else if (!isAllMandatoryFieldsCompleted && !isAllRiskRefsHavingAtLeastADoc) {\n      dispatch(enqueueNotification('processingInstructions.checklist.missingRequiredFieldsDocs', 'error'));\n    } else if (!isAllMandatoryFieldsCompleted) {\n      dispatch(enqueueNotification('processingInstructions.checklist.missingRequiredFields', 'error'));\n    } else if (!isAllRiskRefsHavingAtLeastADoc) {\n      dispatch(enqueueNotification('processingInstructions.checklist.missingRequiredDocs', 'error'));\n    } else if (!isChecklistDatesSelected) {\n      dispatch(enqueueNotification('processingInstructions.checklist.missingRequiredDates', 'error'));\n    }\n  };\n\n  var handleCancel = function handleCancel() {\n    var _childRef$current2, _childRef$current2$pr, _Object$entries5;\n\n    var reset = childRef === null || childRef === void 0 ? void 0 : (_childRef$current2 = childRef.current) === null || _childRef$current2 === void 0 ? void 0 : (_childRef$current2$pr = _childRef$current2.props) === null || _childRef$current2$pr === void 0 ? void 0 : _childRef$current2$pr.resetFunc;\n    setResetKey(new Date().getTime());\n    setTabs(checklistTabs);\n    var updatedContent = (_Object$entries5 = Object.entries(piSchema === null || piSchema === void 0 ? void 0 : piSchema.content)) === null || _Object$entries5 === void 0 ? void 0 : _Object$entries5.reduce(function (acc, _ref14) {\n      var _ref15 = _slicedToArray(_ref14, 2),\n          key = _ref15[0],\n          value = _ref15[1];\n\n      var newValue = value === null || value === void 0 ? void 0 : value.map(function (contentValue) {\n        contentValue.cells[0].isError = false;\n        return contentValue;\n      });\n      return _objectSpread(_objectSpread({}, acc), _defineProperty({}, key, newValue));\n    }, {});\n\n    var updatePiSchema = _objectSpread(_objectSpread({}, piSchema), {}, {\n      content: updatedContent\n    });\n\n    setPiSchema(updatePiSchema);\n    var schema = utils.schemas.parsePiChecklist(updatePiSchema, instruction);\n    setSchemaData(schema);\n\n    if (utils.generic.isFunction(reset)) {\n      reset(defaultValues, {\n        keepDirty: false\n      });\n    }\n  };\n\n  var toggleTab = function toggleTab(tab) {\n    setSelectedTab(tab);\n    history.replace(\"\".concat(config.routes.processingInstructions.steps, \"/\").concat(id).concat(step ? \"/\".concat(step) : '').concat(tab ? \"/\".concat(tab) : ''));\n  }; // abort if data is not ready/available\n\n\n  if (!defaultValues || !instruction) return null;\n  return /*#__PURE__*/_jsxDEV(ProcessingInstructionsChecklistView, {\n    instruction: instruction,\n    leadRef: leadRef,\n    defaultValues: defaultValues,\n    columns: columns,\n    tabs: tabs,\n    selectedTab: selectedTab,\n    fields: fields,\n    schemaData: schemaData,\n    isRiskReferenceDocumentCountLoading: isRiskReferenceDocumentCountLoading,\n    isFdo: isFdo,\n    isReadOnly: isReadOnly,\n    isEditable: isEditable,\n    isCheckboxesEditable: isCheckboxesEditable,\n    resetKey: resetKey,\n    handlers: _objectSpread(_objectSpread({}, handlers), {}, {\n      cancel: handleCancel,\n      save: handleSave,\n      next: handleNext,\n      toggleTab: toggleTab,\n      setTabs: setTabs\n    }),\n    ref: childRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 555,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ProcessingInstructionsChecklist, \"AUX+9gqhKW0gm22Hzljfx2vUL2A=\", false, function () {\n  return [useDispatch, useHistory, useParams, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = ProcessingInstructionsChecklist;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProcessingInstructionsChecklist\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ProcessingInstructionsChecklist/ProcessingInstructionsChecklist.js"],"names":["React","useEffect","useState","PropTypes","useSelector","useDispatch","useHistory","useParams","get","Yup","ProcessingInstructionsChecklistView","processingInstructionsSchema","enqueueNotification","checkListUpdate","selectUser","selectPiProducingBrokers","selectPiAccountExecutives","selectPiFacilityTypes","selectAccountExecutivesForRiskReference","selectProducingBrokerNamesForRiskReference","updateReferenceDocumentCountLoading","getRiskReferenceDocumentsCount","getRiskReferencesDocumentsCountList","getIsRiskReferenceDocumentCountLoading","utils","config","constants","ProcessingInstructionsChecklist","propTypes","instruction","object","isRequired","handlers","shape","back","func","next","childRef","dispatch","history","id","step","tab","piProducingBrokers","piAccountExecutives","riskReferencesDocumentsCountList","isRiskReferenceDocumentCountLoading","documents","state","producingBrokersFromRoles","accountExecutivesFromRoles","producingBrokers","generic","isValidArray","accountExecutives","facilityTypes","user","columns","label","string","t","align","checklistTabs","value","GENERAL","PRE_PLACING","MRC","OTHER_DETAILS","RISK_REFERENCES","tabs","setTabs","isValidTab","map","item","includes","selectedTab","setSelectedTab","defaultValues","setDefaultValues","schemaData","setSchemaData","resetKey","setResetKey","piSchema","setPiSchema","leadRef","riskReferences","find","r","leadPolicy","leadRefProducingBrokerName","producingBrokerName","leadRefAccountExecutiveName","accountExecutive","isFdo","processingInstructions","processTypeId","isDraft","status","statusId","isRejectedDraft","isSubmittedAuthorisedSignatory","isReopened","userHasWritePermission","app","access","feature","userHasApproverAccess","isCheckboxesEditable","isEditable","isReadOnly","isEndorsement","isFeeAndAmendment","isBordereau","faBorderProcessType","getFacilityTypeId","facilityTypeId","details","type","facilityTypeID","getRiskReferenceDocumentCount","referenceList","refData","endorsementId","endorsementNumber","riskRefId","xbInstanceId","xbPolicyId","documentTypeValue","PI_ENDORSEMENT_TYPE_DOCUMENT","documentTypeDescription","PI_FABORDER_TYPE_DOCUMENT","PI_CLOSING_FDO_TYPE_DOCUMENT","getProducingBrokerId","producingBrokerId","leadProducingBroker","toLowerCase","getSelectedProducingBrokerName","selectedProducingBrokerName","producingBroker","getAccountExecutiveId","accountExecutiveId","leadAccountExecutive","getSelectedAccountExecutiveName","selectedAccountExecutiveName","accountExec","fields","name","group","clientName","muiComponentProps","InputProps","readOnly","disabled","contactName","validation","required","inputProps","maxLength","clientEmail","email","eocInvoiceContactName","eocInvoiceMail","options","optionKey","optionLabel","isInvalidOrEmptyArray","businessType","reset","current","props","resetFunc","schema","schemas","parsePiChecklist","updatedDefaultValues","checklist","form","getNestedInitialValues","rows","getInitialValues","isFunction","keepDirty","validateChecklistDates","valuesChecklist","quotesPutUp","accountHandler","signedDate","dutyOfDisclosure","evidence","validateYesNoNaToggle","Object","values","every","c","validateChecklistTabs","validateAllChecklistSelected","validateMandateChecklistDates","checklistRow","saveChecklist","isNext","isSave","isSaveNext","formValues","updatedInstruction","then","data","API_RESPONSE_OK","handleSave","handleNext","generalTabErrors","isChecklistDatesSelected","updatedContent","entries","content","reduce","acc","key","newValue","contentValue","cells","isError","Boolean","rowKey","updatePiSchema","prePlacingChcklist","mrcChcklist","otherDetailsChcklist","isChecklistCompleted","isPrePlacingChecklistCompleted","isMrcChecklistCompleted","isOtherDetailsChecklistCompleted","isAllRiskRefsHavingAtLeastADoc","some","a","Number","documentCount","updatedTabs","errors","isAllMandatoryFieldsCompleted","handleCancel","Date","getTime","toggleTab","replace","routes","steps","cancel","save"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useHistory, useParams } from 'react-router';\r\nimport get from 'lodash/get';\r\nimport * as Yup from 'yup';\r\n\r\n// app\r\nimport ProcessingInstructionsChecklistView from './ProcessingInstructionsChecklist.view';\r\nimport { processingInstructionsSchema } from 'schemas';\r\nimport {\r\n  enqueueNotification,\r\n  checkListUpdate,\r\n  selectUser,\r\n  selectPiProducingBrokers,\r\n  selectPiAccountExecutives,\r\n  selectPiFacilityTypes,\r\n  selectAccountExecutivesForRiskReference,\r\n  selectProducingBrokerNamesForRiskReference,\r\n  updateReferenceDocumentCountLoading,\r\n  getRiskReferenceDocumentsCount,\r\n  getRiskReferencesDocumentsCountList,\r\n  getIsRiskReferenceDocumentCountLoading,\r\n} from 'stores';\r\nimport * as utils from 'utils';\r\nimport config from 'config';\r\nimport * as constants from 'consts';\r\n\r\nProcessingInstructionsChecklist.propTypes = {\r\n  instruction: PropTypes.object.isRequired,\r\n  handlers: PropTypes.shape({\r\n    back: PropTypes.func.isRequired,\r\n    next: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default function ProcessingInstructionsChecklist({ instruction, handlers, childRef }) {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const { id, step, tab } = useParams();\r\n  const piProducingBrokers = useSelector(selectProducingBrokerNamesForRiskReference);\r\n  const piAccountExecutives = useSelector(selectAccountExecutivesForRiskReference);\r\n  const riskReferencesDocumentsCountList = useSelector(getRiskReferencesDocumentsCountList);\r\n  const isRiskReferenceDocumentCountLoading = useSelector(getIsRiskReferenceDocumentCountLoading);\r\n  const documents = useSelector((state) => get(state, 'processingInstructions.documents')) || {};\r\n  const producingBrokersFromRoles = useSelector(selectPiProducingBrokers);\r\n  const accountExecutivesFromRoles = useSelector(selectPiAccountExecutives);\r\n  const producingBrokers = utils.generic.isValidArray(piProducingBrokers, true) ? piProducingBrokers : producingBrokersFromRoles;\r\n  const accountExecutives = utils.generic.isValidArray(piAccountExecutives, true) ? piAccountExecutives : accountExecutivesFromRoles;\r\n  const facilityTypes = useSelector(selectPiFacilityTypes);\r\n  const user = useSelector(selectUser);\r\n\r\n  const columns = [\r\n    { id: 'detail', label: utils.string.t('processingInstructions.checklist.cols.detail') },\r\n    { id: 'frontEndContact', label: utils.string.t('processingInstructions.checklist.cols.frontEndContact'), align: 'center' },\r\n    { id: 'authorisedSignatory', label: utils.string.t('processingInstructions.checklist.cols.authorisedSignatory'), align: 'center' },\r\n  ];\r\n\r\n  const checklistTabs = [\r\n    { value: constants.GENERAL, label: utils.string.t('processingInstructions.checklist.tabs.general.title') },\r\n    { value: constants.PRE_PLACING, label: utils.string.t('processingInstructions.checklist.tabs.prePlacing.title') },\r\n    { value: constants.MRC, label: utils.string.t('processingInstructions.checklist.tabs.mrc.title') },\r\n    { value: constants.OTHER_DETAILS, label: utils.string.t('processingInstructions.checklist.tabs.otherDetails.title') },\r\n    { value: constants.RISK_REFERENCES, label: utils.string.t('processingInstructions.checklist.tabs.riskRefs.title') },\r\n  ];\r\n\r\n  const [tabs, setTabs] = useState(checklistTabs);\r\n\r\n  const isValidTab = tabs.map((item) => item.value).includes(tab);\r\n\r\n  const [selectedTab, setSelectedTab] = useState(isValidTab ? tab : 'general');\r\n  const [defaultValues, setDefaultValues] = useState();\r\n  const [schemaData, setSchemaData] = useState({});\r\n  const [resetKey, setResetKey] = useState();\r\n  const [piSchema, setPiSchema] = useState(processingInstructionsSchema);\r\n\r\n  const leadRef = instruction?.riskReferences?.find((r) => r.leadPolicy);\r\n  const leadRefProducingBrokerName = leadRef?.producingBrokerName;\r\n  const leadRefAccountExecutiveName = leadRef?.accountExecutive;\r\n  const isFdo = utils.processingInstructions.isFdo(instruction?.processTypeId);\r\n  const isDraft = utils.processingInstructions.status.isDraft(instruction?.statusId);\r\n  const isRejectedDraft = utils.processingInstructions.status.isRejectedDraft(instruction?.statusId);\r\n  const isSubmittedAuthorisedSignatory = utils.processingInstructions.status.isSubmittedAuthorisedSignatory(instruction?.statusId);\r\n  const isReopened = utils.processingInstructions.status.isReopened(instruction?.statusId);\r\n  const userHasWritePermission = utils.app.access.feature('processingInstructions.processingInstructions', ['create', 'update'], user);\r\n  const userHasApproverAccess = utils.app.access.feature('processingInstructions.approverChecklist', ['create', 'update'], user);\r\n  const isCheckboxesEditable = userHasApproverAccess && isSubmittedAuthorisedSignatory;\r\n  const isEditable = userHasWritePermission && (isDraft || isRejectedDraft || isReopened);\r\n  const isReadOnly = !isEditable;\r\n\r\n  const isEndorsement = utils.processingInstructions.isEndorsement(instruction?.processTypeId);\r\n  const isFeeAndAmendment = utils.processingInstructions.isFeeAndAmendment(instruction?.processTypeId);\r\n  const isBordereau = utils.processingInstructions.isBordereau(instruction?.processTypeId);\r\n  const faBorderProcessType = isBordereau || isFeeAndAmendment;\r\n  const getFacilityTypeId = () => {\r\n    let facilityTypeId = instruction?.details?.facilityTypeId;\r\n\r\n    if (!facilityTypeId && utils.generic.isValidArray(facilityTypes, true)) {\r\n      const item = facilityTypes.find((type) => type.facilityTypeID === instruction?.details?.facilityTypeId);\r\n      facilityTypeId = item?.facilityTypeID;\r\n    }\r\n\r\n    return facilityTypeId || '';\r\n  };\r\n\r\n  const getRiskReferenceDocumentCount = () => {\r\n    if (utils.generic.isValidArray(documents?.riskReferences, true)) {\r\n      dispatch(updateReferenceDocumentCountLoading(true));\r\n      const referenceList = documents?.riskReferences?.map((refData) => {\r\n        return {\r\n          endorsementId: refData.endorsementId,\r\n          endorsementNumber: refData.endorsementNumber,\r\n          riskRefId: refData.riskRefId,\r\n          xbInstanceId: refData.xbInstanceId,\r\n          xbPolicyId: refData.xbPolicyId,\r\n        };\r\n      });\r\n      const documentTypeValue = isEndorsement\r\n        ? constants.PI_ENDORSEMENT_TYPE_DOCUMENT.documentTypeDescription\r\n        : faBorderProcessType\r\n        ? constants.PI_FABORDER_TYPE_DOCUMENT.documentTypeDescription\r\n        : constants.PI_CLOSING_FDO_TYPE_DOCUMENT.documentTypeDescription;\r\n      dispatch(getRiskReferenceDocumentsCount(referenceList, documentTypeValue));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getRiskReferenceDocumentCount();\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const getProducingBrokerId = () => {\r\n    let producingBrokerId = instruction?.details?.producingBrokerId;\r\n    let item;\r\n\r\n    if (utils.generic.isValidArray(piProducingBrokers, true)) {\r\n      if (producingBrokerId) {\r\n        item = piProducingBrokers.find((type) => type.id === producingBrokerId);\r\n        producingBrokerId = item?.id;\r\n      } else if (leadRefProducingBrokerName) {\r\n        const leadProducingBroker = piProducingBrokers?.find(\r\n          (type) => type?.value?.toLowerCase() === leadRefProducingBrokerName?.toLowerCase()\r\n        );\r\n        producingBrokerId = leadProducingBroker?.id;\r\n      }\r\n    } else if (!producingBrokerId && utils.generic.isValidArray(producingBrokers, true)) {\r\n      item = producingBrokers.find((type) => type.id === instruction?.details?.producingBrokerId);\r\n      producingBrokerId = item?.id;\r\n    }\r\n\r\n    return producingBrokerId || '';\r\n  };\r\n\r\n  const getSelectedProducingBrokerName = (producingBrokerId) => {\r\n    const selectedProducingBrokerName = piProducingBrokers?.find((producingBroker) => producingBroker?.id === producingBrokerId)?.value;\r\n    return selectedProducingBrokerName;\r\n  };\r\n\r\n  const getAccountExecutiveId = () => {\r\n    let accountExecutiveId = instruction?.details?.accountExecutiveId;\r\n    let item;\r\n    if (utils.generic.isValidArray(piAccountExecutives, true)) {\r\n      if (accountExecutiveId) {\r\n        item = piAccountExecutives.find((type) => type.id === accountExecutiveId);\r\n        accountExecutiveId = item?.id;\r\n      } else if (leadRefAccountExecutiveName) {\r\n        const leadAccountExecutive = piAccountExecutives?.find(\r\n          (type) => type.value.toLowerCase() === leadRefAccountExecutiveName?.toLowerCase()\r\n        );\r\n        accountExecutiveId = leadAccountExecutive?.id;\r\n      }\r\n    } else if (!accountExecutiveId && utils.generic.isValidArray(accountExecutives, true)) {\r\n      item = accountExecutives.find((type) => type.id === instruction?.details?.accountExecutiveId);\r\n      accountExecutiveId = item?.id;\r\n    }\r\n\r\n    return accountExecutiveId || '';\r\n  };\r\n\r\n  const getSelectedAccountExecutiveName = (accountExecutiveId) => {\r\n    const selectedAccountExecutiveName = piAccountExecutives?.find((accountExec) => accountExec?.id === accountExecutiveId)?.value;\r\n    return selectedAccountExecutiveName;\r\n  };\r\n\r\n  const fields = [\r\n    {\r\n      name: 'invoicingClient',\r\n      group: 'general',\r\n      type: 'text',\r\n      label: utils.string.t('processingInstructions.checklist.fields.invoicingClient'),\r\n      value: leadRef?.clientName || '',\r\n      muiComponentProps: {\r\n        InputProps: {\r\n          readOnly: true,\r\n          disabled: true,\r\n        },\r\n      },\r\n    },\r\n    {\r\n      name: 'contactName',\r\n      group: 'general',\r\n      type: 'text',\r\n      label: utils.string.t('processingInstructions.checklist.fields.contactName'),\r\n      value: instruction?.details?.contactName || '',\r\n      validation: Yup.string().required(utils.string.t('validation.required')),\r\n      muiComponentProps: {\r\n        inputProps: {\r\n          maxLength: 50,\r\n        },\r\n        InputProps: {\r\n          readOnly: isReadOnly,\r\n          disabled: isReadOnly,\r\n        },\r\n      },\r\n    },\r\n    {\r\n      name: 'clientEmail',\r\n      group: 'general',\r\n      type: 'text',\r\n      label: utils.string.t('processingInstructions.checklist.fields.clientEmail'),\r\n      value: instruction?.details?.clientEmail || '',\r\n      validation: Yup.string().email(utils.string.t('validation.email')).required(utils.string.t('validation.required')),\r\n      muiComponentProps: {\r\n        inputProps: {\r\n          maxLength: 50,\r\n        },\r\n        InputProps: {\r\n          readOnly: isReadOnly,\r\n          disabled: isReadOnly,\r\n        },\r\n      },\r\n    },\r\n    {\r\n      name: 'eocInvoiceContactName',\r\n      group: 'general',\r\n      type: 'text',\r\n      label: utils.string.t('processingInstructions.checklist.fields.eocInvoiceContactName'),\r\n      value: instruction?.details?.eocInvoiceContactName || '',\r\n      muiComponentProps: {\r\n        inputProps: {\r\n          maxLength: 50,\r\n        },\r\n        InputProps: {\r\n          readOnly: isReadOnly,\r\n          disabled: isReadOnly,\r\n        },\r\n      },\r\n    },\r\n    {\r\n      name: 'eocInvoiceMail',\r\n      group: 'general',\r\n      type: 'text',\r\n      label: utils.string.t('processingInstructions.checklist.fields.eocInvoiceMail'),\r\n      validation: Yup.string().email(utils.string.t('validation.email')),\r\n      value: instruction?.details?.eocInvoiceMail || '',\r\n      muiComponentProps: {\r\n        inputProps: {\r\n          maxLength: 50,\r\n        },\r\n        InputProps: {\r\n          readOnly: isReadOnly,\r\n          disabled: isReadOnly,\r\n        },\r\n      },\r\n    },\r\n    {\r\n      name: 'producingBroker',\r\n      group: 'general',\r\n      type: 'select',\r\n      label: utils.string.t('processingInstructions.checklist.fields.producingBroker'),\r\n      value: getProducingBrokerId(),\r\n      options: producingBrokers,\r\n      optionKey: 'id',\r\n      optionLabel: 'value',\r\n      validation: Yup.string().required(utils.string.t('validation.required')),\r\n      muiComponentProps: {\r\n        disabled: isReadOnly || utils.generic.isInvalidOrEmptyArray(producingBrokers),\r\n      },\r\n    },\r\n    {\r\n      name: 'accountExecutive',\r\n      group: 'general',\r\n      type: 'select',\r\n      label: utils.string.t('processingInstructions.checklist.fields.accountExecutive'),\r\n      value: getAccountExecutiveId(),\r\n      options: accountExecutives,\r\n      optionKey: 'id',\r\n      optionLabel: 'value',\r\n      validation: Yup.string().required(utils.string.t('validation.required')),\r\n      muiComponentProps: {\r\n        disabled: isReadOnly || utils.generic.isInvalidOrEmptyArray(accountExecutives),\r\n      },\r\n    },\r\n    ...(isFdo\r\n      ? [\r\n          {\r\n            name: 'businessType',\r\n            group: 'general',\r\n            type: 'text',\r\n            label: utils.string.t('processingInstructions.checklist.fields.businessType'),\r\n            value: leadRef?.businessType || '',\r\n            muiComponentProps: {\r\n              InputProps: {\r\n                readOnly: true,\r\n                disabled: true,\r\n              },\r\n            },\r\n          },\r\n          {\r\n            name: 'facilityType',\r\n            group: 'general',\r\n            type: 'select',\r\n            label: utils.string.t('processingInstructions.checklist.fields.facilityType'),\r\n            value: getFacilityTypeId(),\r\n            validation: Yup.string().required(utils.string.t('validation.required')),\r\n            options: facilityTypes,\r\n            optionKey: 'facilityTypeID',\r\n            optionLabel: 'facilityTypeDetails',\r\n            disabled: isReadOnly || utils.generic.isInvalidOrEmptyArray(facilityTypes),\r\n          },\r\n        ]\r\n      : []),\r\n  ];\r\n\r\n  useEffect(\r\n    () => {\r\n      const reset = childRef?.current?.props?.resetFunc;\r\n      const schema = utils.schemas.parsePiChecklist(piSchema, instruction);\r\n      const updatedDefaultValues = {\r\n        checklist: utils.form.getNestedInitialValues(schema?.rows, 'columnName'),\r\n        ...utils.form.getInitialValues(fields),\r\n      };\r\n\r\n      setSchemaData(schema);\r\n      setDefaultValues(updatedDefaultValues);\r\n\r\n      if (utils.generic.isFunction(reset)) {\r\n        reset(updatedDefaultValues, {\r\n          keepDirty: false,\r\n        });\r\n      }\r\n    },\r\n    [instruction] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  const validateChecklistDates = (valuesChecklist) => {\r\n    if (valuesChecklist?.quotesPutUp?.accountHandler === 'YES' && valuesChecklist?.quotesPutUp?.signedDate === null) {\r\n      return false;\r\n    }\r\n\r\n    if (valuesChecklist?.dutyOfDisclosure?.accountHandler === 'YES' && valuesChecklist?.dutyOfDisclosure?.signedDate === null) {\r\n      return false;\r\n    }\r\n\r\n    if (valuesChecklist?.evidence?.accountHandler === 'YES' && valuesChecklist?.evidence?.signedDate === null) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  const validateYesNoNaToggle = (valuesChecklist) => {\r\n    return Object.values(valuesChecklist).every((c) => ['YES', 'NO', 'NA'].includes(c.accountHandler));\r\n  };\r\n\r\n  const validateChecklistTabs = (valuesChecklist) => {\r\n    return validateYesNoNaToggle(valuesChecklist) && validateChecklistDates(valuesChecklist);\r\n  };\r\n\r\n  const validateAllChecklistSelected = (valuesChecklist) => {\r\n    return validateYesNoNaToggle(valuesChecklist);\r\n  };\r\n\r\n  const validateMandateChecklistDates = (checklistRow) => {\r\n    if (checklistRow?.accountHandler === 'YES' && checklistRow?.signedDate === null) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const saveChecklist = ({ isNext, isSave, isSaveNext }) => {\r\n    const formValues = childRef.current.props?.values;\r\n    const updatedInstruction = {\r\n      ...instruction,\r\n      details: {\r\n        ...instruction.details,\r\n        accountExecutive: getSelectedAccountExecutiveName(formValues.accountExecutive),\r\n        producingBrokerName: getSelectedProducingBrokerName(formValues.producingBroker),\r\n      },\r\n    };\r\n\r\n    if (isSaveNext || isSave) {\r\n      dispatch(checkListUpdate(formValues, updatedInstruction)).then((data) => {\r\n        if (isSaveNext) {\r\n          if (data?.status === constants.API_RESPONSE_OK) {\r\n            handlers.next();\r\n          } else {\r\n            dispatch(enqueueNotification('app.somethingWentWrong', 'warning'));\r\n          }\r\n        }\r\n      });\r\n    } else if (isNext) {\r\n      handlers.next();\r\n    }\r\n  };\r\n\r\n  const handleSave = (type) => {\r\n    saveChecklist(type);\r\n  };\r\n\r\n  const handleNext = (generalTabErrors, type) => {\r\n    const formValues = childRef.current.props?.values;\r\n    const isChecklistDatesSelected = validateChecklistDates(formValues?.checklist);\r\n\r\n    const updatedContent = Object.entries(piSchema?.content)?.reduce((acc, [key, value]) => {\r\n      const newValue = value?.map((contentValue) => {\r\n        contentValue.cells[0].isError =\r\n          !Boolean(formValues?.checklist[contentValue?.rowKey]?.accountHandler) ||\r\n          (['quotesPutUp', 'dutyOfDisclosure', 'evidence'].includes(contentValue?.rowKey) &&\r\n            validateMandateChecklistDates(formValues?.checklist[contentValue?.rowKey]));\r\n\r\n        return contentValue;\r\n      });\r\n\r\n      return {\r\n        ...acc,\r\n        ...{\r\n          [key]: newValue,\r\n        },\r\n      };\r\n    }, {});\r\n\r\n    const updatePiSchema = { ...piSchema, content: updatedContent };\r\n    setPiSchema(updatePiSchema);\r\n    const schema = utils.schemas.parsePiChecklist(updatePiSchema, instruction);\r\n    setSchemaData(schema);\r\n\r\n    const prePlacingChcklist = Object.entries(formValues?.checklist)?.reduce((acc, [key, value]) => {\r\n      return {\r\n        ...acc,\r\n        ...(['quotesPutUp', 'dutyOfDisclosure', 'demandsNeeds', 'slipsSigned', 'evidence', 'atlas', 'bars'].includes(key) && {\r\n          [key]: value,\r\n        }),\r\n      };\r\n    }, {});\r\n    const mrcChcklist = Object.entries(formValues?.checklist)?.reduce((acc, [key, value]) => {\r\n      return {\r\n        ...acc,\r\n        ...([\r\n          'allWrittenLines',\r\n          'allUnderwriter',\r\n          'informationClearlyStated',\r\n          'allMarketsApproved',\r\n          'paymentTerms',\r\n          'subscriptionAgreement',\r\n          'riskCodes',\r\n        ].includes(key) && {\r\n          [key]: value,\r\n        }),\r\n      };\r\n    }, {});\r\n    const otherDetailsChcklist = Object.entries(formValues?.checklist)?.reduce((acc, [key, value]) => {\r\n      return {\r\n        ...acc,\r\n        ...(['marketSheet', 'confirmSanctioned', 'thirdParty', 'contractCertainty'].includes(key) && {\r\n          [key]: value,\r\n        }),\r\n      };\r\n    }, {});\r\n\r\n    const isChecklistCompleted = validateAllChecklistSelected(formValues?.checklist);\r\n    const isPrePlacingChecklistCompleted = validateChecklistTabs(prePlacingChcklist);\r\n    const isMrcChecklistCompleted = validateChecklistTabs(mrcChcklist);\r\n    const isOtherDetailsChecklistCompleted = validateChecklistTabs(otherDetailsChcklist);\r\n    const isAllRiskRefsHavingAtLeastADoc = !(\r\n      utils.generic.isValidArray(riskReferencesDocumentsCountList, true) &&\r\n      riskReferencesDocumentsCountList?.some((a) => Number(a?.documentCount) === 0)\r\n    );\r\n    const updatedTabs = tabs?.map((tab) => {\r\n      switch (tab.value) {\r\n        case constants.GENERAL:\r\n          return { ...tab, errors: generalTabErrors };\r\n        case constants.PRE_PLACING:\r\n          return { ...tab, errors: Number(!isPrePlacingChecklistCompleted) };\r\n        case constants.MRC:\r\n          return { ...tab, errors: Number(!isMrcChecklistCompleted) };\r\n        case constants.OTHER_DETAILS:\r\n          return { ...tab, errors: Number(!isOtherDetailsChecklistCompleted) };\r\n        case constants.RISK_REFERENCES:\r\n          return { ...tab, errors: Number(!isAllRiskRefsHavingAtLeastADoc) };\r\n        default:\r\n          return {};\r\n      }\r\n    });\r\n    setTabs(updatedTabs);\r\n\r\n    const isAllMandatoryFieldsCompleted = !Boolean(generalTabErrors) && isChecklistCompleted;\r\n\r\n    if (isAllRiskRefsHavingAtLeastADoc && isAllMandatoryFieldsCompleted && isChecklistDatesSelected) {\r\n      saveChecklist(type);\r\n    } else if (!isAllMandatoryFieldsCompleted && !isAllRiskRefsHavingAtLeastADoc && !isChecklistDatesSelected) {\r\n      dispatch(enqueueNotification('processingInstructions.checklist.missingRequiredFieldsDatesDocs', 'error'));\r\n    } else if (!isAllRiskRefsHavingAtLeastADoc && !isChecklistDatesSelected) {\r\n      dispatch(enqueueNotification('processingInstructions.checklist.missingRequiredDatesDocs', 'error'));\r\n    } else if (!isAllMandatoryFieldsCompleted && !isChecklistDatesSelected) {\r\n      dispatch(enqueueNotification('processingInstructions.checklist.missingRequiredFieldsDates', 'error'));\r\n    } else if (!isAllMandatoryFieldsCompleted && !isAllRiskRefsHavingAtLeastADoc) {\r\n      dispatch(enqueueNotification('processingInstructions.checklist.missingRequiredFieldsDocs', 'error'));\r\n    } else if (!isAllMandatoryFieldsCompleted) {\r\n      dispatch(enqueueNotification('processingInstructions.checklist.missingRequiredFields', 'error'));\r\n    } else if (!isAllRiskRefsHavingAtLeastADoc) {\r\n      dispatch(enqueueNotification('processingInstructions.checklist.missingRequiredDocs', 'error'));\r\n    } else if (!isChecklistDatesSelected) {\r\n      dispatch(enqueueNotification('processingInstructions.checklist.missingRequiredDates', 'error'));\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    const reset = childRef?.current?.props?.resetFunc;\r\n\r\n    setResetKey(new Date().getTime());\r\n    setTabs(checklistTabs);\r\n\r\n    const updatedContent = Object.entries(piSchema?.content)?.reduce((acc, [key, value]) => {\r\n      const newValue = value?.map((contentValue) => {\r\n        contentValue.cells[0].isError = false;\r\n        return contentValue;\r\n      });\r\n\r\n      return {\r\n        ...acc,\r\n        ...{\r\n          [key]: newValue,\r\n        },\r\n      };\r\n    }, {});\r\n\r\n    const updatePiSchema = { ...piSchema, content: updatedContent };\r\n    setPiSchema(updatePiSchema);\r\n    const schema = utils.schemas.parsePiChecklist(updatePiSchema, instruction);\r\n    setSchemaData(schema);\r\n    if (utils.generic.isFunction(reset)) {\r\n      reset(defaultValues, { keepDirty: false });\r\n    }\r\n  };\r\n\r\n  const toggleTab = (tab) => {\r\n    setSelectedTab(tab);\r\n    history.replace(`${config.routes.processingInstructions.steps}/${id}${step ? `/${step}` : ''}${tab ? `/${tab}` : ''}`);\r\n  };\r\n\r\n  // abort if data is not ready/available\r\n  if (!defaultValues || !instruction) return null;\r\n\r\n  return (\r\n    <ProcessingInstructionsChecklistView\r\n      instruction={instruction}\r\n      leadRef={leadRef}\r\n      defaultValues={defaultValues}\r\n      columns={columns}\r\n      tabs={tabs}\r\n      selectedTab={selectedTab}\r\n      fields={fields}\r\n      schemaData={schemaData}\r\n      isRiskReferenceDocumentCountLoading={isRiskReferenceDocumentCountLoading}\r\n      isFdo={isFdo}\r\n      isReadOnly={isReadOnly}\r\n      isEditable={isEditable}\r\n      isCheckboxesEditable={isCheckboxesEditable}\r\n      resetKey={resetKey}\r\n      handlers={{\r\n        ...handlers,\r\n        cancel: handleCancel,\r\n        save: handleSave,\r\n        next: handleNext,\r\n        toggleTab,\r\n        setTabs,\r\n      }}\r\n      ref={childRef}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}