{"ast":null,"code":"import _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\DmsAttachDocuments\\\\DmsAttachDocuments.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types'; // app\n\nimport { DmsAttachDocumentsView } from './DmsAttachDocuments.view';\nimport { showModal, addLoader, selectContextSubType } from 'stores';\nimport * as utils from 'utils';\nimport * as constants from 'consts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nDmsAttachDocuments.propTypes = {\n  referenceId: PropTypes.string,\n  sourceId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  documentTypeKey: PropTypes.string\n};\nexport default function DmsAttachDocuments(_ref) {\n  _s();\n\n  var referenceId = _ref.referenceId,\n      sourceId = _ref.sourceId,\n      documentTypeKey = _ref.documentTypeKey;\n  var dispatch = useDispatch();\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      search = _useState2[0],\n      setSearch = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      resetKey = _useState4[0],\n      setResetKey = _useState4[1];\n\n  var contextSubType = useSelector(selectContextSubType);\n\n  var launchDmsUpload = function launchDmsUpload() {\n    return function (files) {\n      dispatch(addLoader('DmsUploadFiles'));\n      var refinedReferenceId = getRefIdForContext();\n      dispatch(showModal({\n        component: 'DMS_UPLOAD_FILES',\n        props: {\n          fullWidth: true,\n          title: utils.string.t('dms.upload.modalItems.uploadDocuments'),\n          hideCompOnBlur: false,\n          maxWidth: 'lg',\n          componentProps: {\n            files: files,\n            context: constants.DMS_CONTEXT_TASK,\n            referenceId: refinedReferenceId,\n            sourceId: sourceId,\n            documentTypeKey: documentTypeKey,\n            confirmLabel: utils.string.t('app.ok'),\n            cancelLabel: utils.string.t('app.goBack'),\n            confirmMessage: utils.string.t('processingInstructions.documentsWillNotBeSaved'),\n            buttonColors: {\n              confirm: 'secondary',\n              cancel: 'primary'\n            },\n            isClientSideUpload: true\n          }\n        }\n      }));\n    };\n  };\n\n  var getRefIdForContext = function getRefIdForContext() {\n    var type = contextSubType.type,\n        caseIncidentNotesID = contextSubType.caseIncidentNotesID,\n        refId = contextSubType.refId;\n\n    if (type === constants.DMS_TASK_CONTEXT_TYPE_RFI_RESPONSE) {\n      return caseIncidentNotesID ? \"\".concat(refId, \"-\").concat(caseIncidentNotesID) : refId;\n    } else if (type === constants.DMS_TASK_CONTEXT_TYPE_RFI || type === constants.DMS_TASK_CONTEXT_TYPE_ADHOC) {\n      return refId;\n    } else {\n      return referenceId;\n    }\n  };\n\n  var resetSearch = function resetSearch() {\n    setResetKey(new Date().getTime());\n    setSearch('');\n  };\n\n  var submitSearch = function submitSearch(query) {\n    setSearch(query);\n  };\n\n  return /*#__PURE__*/_jsxDEV(DmsAttachDocumentsView, {\n    search: search,\n    resetKey: resetKey,\n    handlers: {\n      uploadModal: launchDmsUpload,\n      resetSearch: resetSearch,\n      submitSearch: submitSearch\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DmsAttachDocuments, \"6aYJ0Q+Lu5urjSs6HoUDLvdfq2c=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = DmsAttachDocuments;\n\nvar _c;\n\n$RefreshReg$(_c, \"DmsAttachDocuments\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/DmsAttachDocuments/DmsAttachDocuments.js"],"names":["useState","useDispatch","useSelector","PropTypes","DmsAttachDocumentsView","showModal","addLoader","selectContextSubType","utils","constants","DmsAttachDocuments","propTypes","referenceId","string","sourceId","oneOfType","number","documentTypeKey","dispatch","search","setSearch","resetKey","setResetKey","contextSubType","launchDmsUpload","files","refinedReferenceId","getRefIdForContext","component","props","fullWidth","title","t","hideCompOnBlur","maxWidth","componentProps","context","DMS_CONTEXT_TASK","confirmLabel","cancelLabel","confirmMessage","buttonColors","confirm","cancel","isClientSideUpload","type","caseIncidentNotesID","refId","DMS_TASK_CONTEXT_TYPE_RFI_RESPONSE","DMS_TASK_CONTEXT_TYPE_RFI","DMS_TASK_CONTEXT_TYPE_ADHOC","resetSearch","Date","getTime","submitSearch","query","uploadModal"],"mappings":";;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;;AACA,SAASC,sBAAT,QAAuC,2BAAvC;AACA,SAASC,SAAT,EAAoBC,SAApB,EAA+BC,oBAA/B,QAA2D,QAA3D;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,SAAZ,MAA2B,QAA3B;;AAEAC,kBAAkB,CAACC,SAAnB,GAA+B;AAC7BC,EAAAA,WAAW,EAAET,SAAS,CAACU,MADM;AAE7BC,EAAAA,QAAQ,EAAEX,SAAS,CAACY,SAAV,CAAoB,CAACZ,SAAS,CAACU,MAAX,EAAmBV,SAAS,CAACa,MAA7B,CAApB,CAFmB;AAG7BC,EAAAA,eAAe,EAAEd,SAAS,CAACU;AAHE,CAA/B;AAMA,eAAe,SAASH,kBAAT,OAAwE;AAAA;;AAAA,MAA1CE,WAA0C,QAA1CA,WAA0C;AAAA,MAA7BE,QAA6B,QAA7BA,QAA6B;AAAA,MAAnBG,eAAmB,QAAnBA,eAAmB;AACrF,MAAMC,QAAQ,GAAGjB,WAAW,EAA5B;;AADqF,kBAEzDD,QAAQ,CAAC,EAAD,CAFiD;AAAA;AAAA,MAE9EmB,MAF8E;AAAA,MAEtEC,SAFsE;;AAAA,mBAGrDpB,QAAQ,EAH6C;AAAA;AAAA,MAG9EqB,QAH8E;AAAA,MAGpEC,WAHoE;;AAKrF,MAAMC,cAAc,GAAGrB,WAAW,CAACK,oBAAD,CAAlC;;AAEA,MAAMiB,eAAe,GAAG,SAAlBA,eAAkB;AAAA,WAAM,UAACC,KAAD,EAAW;AACvCP,MAAAA,QAAQ,CAACZ,SAAS,CAAC,gBAAD,CAAV,CAAR;AACA,UAAMoB,kBAAkB,GAAGC,kBAAkB,EAA7C;AAEAT,MAAAA,QAAQ,CACNb,SAAS,CAAC;AACRuB,QAAAA,SAAS,EAAE,kBADH;AAERC,QAAAA,KAAK,EAAE;AACLC,UAAAA,SAAS,EAAE,IADN;AAELC,UAAAA,KAAK,EAAEvB,KAAK,CAACK,MAAN,CAAamB,CAAb,CAAe,uCAAf,CAFF;AAGLC,UAAAA,cAAc,EAAE,KAHX;AAILC,UAAAA,QAAQ,EAAE,IAJL;AAKLC,UAAAA,cAAc,EAAE;AACdV,YAAAA,KAAK,EAALA,KADc;AAEdW,YAAAA,OAAO,EAAE3B,SAAS,CAAC4B,gBAFL;AAGdzB,YAAAA,WAAW,EAAEc,kBAHC;AAIdZ,YAAAA,QAAQ,EAARA,QAJc;AAKdG,YAAAA,eAAe,EAAfA,eALc;AAMdqB,YAAAA,YAAY,EAAE9B,KAAK,CAACK,MAAN,CAAamB,CAAb,CAAe,QAAf,CANA;AAOdO,YAAAA,WAAW,EAAE/B,KAAK,CAACK,MAAN,CAAamB,CAAb,CAAe,YAAf,CAPC;AAQdQ,YAAAA,cAAc,EAAEhC,KAAK,CAACK,MAAN,CAAamB,CAAb,CAAe,gDAAf,CARF;AASdS,YAAAA,YAAY,EAAE;AAAEC,cAAAA,OAAO,EAAE,WAAX;AAAwBC,cAAAA,MAAM,EAAE;AAAhC,aATA;AAUdC,YAAAA,kBAAkB,EAAE;AAVN;AALX;AAFC,OAAD,CADH,CAAR;AAuBD,KA3BuB;AAAA,GAAxB;;AA6BA,MAAMjB,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAAA,QACvBkB,IADuB,GACctB,cADd,CACvBsB,IADuB;AAAA,QACjBC,mBADiB,GACcvB,cADd,CACjBuB,mBADiB;AAAA,QACIC,KADJ,GACcxB,cADd,CACIwB,KADJ;;AAE/B,QAAIF,IAAI,KAAKpC,SAAS,CAACuC,kCAAvB,EAA2D;AACzD,aAAOF,mBAAmB,aAAMC,KAAN,cAAeD,mBAAf,IAAuCC,KAAjE;AACD,KAFD,MAEO,IAAIF,IAAI,KAAKpC,SAAS,CAACwC,yBAAnB,IAAgDJ,IAAI,KAAKpC,SAAS,CAACyC,2BAAvE,EAAoG;AACzG,aAAOH,KAAP;AACD,KAFM,MAEA;AACL,aAAOnC,WAAP;AACD;AACF,GATD;;AAWA,MAAMuC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB7B,IAAAA,WAAW,CAAC,IAAI8B,IAAJ,GAAWC,OAAX,EAAD,CAAX;AACAjC,IAAAA,SAAS,CAAC,EAAD,CAAT;AACD,GAHD;;AAKA,MAAMkC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAW;AAC9BnC,IAAAA,SAAS,CAACmC,KAAD,CAAT;AACD,GAFD;;AAIA,sBACE,QAAC,sBAAD;AACE,IAAA,MAAM,EAAEpC,MADV;AAEE,IAAA,QAAQ,EAAEE,QAFZ;AAGE,IAAA,QAAQ,EAAE;AACRmC,MAAAA,WAAW,EAAEhC,eADL;AAER2B,MAAAA,WAAW,EAAEA,WAFL;AAGRG,MAAAA,YAAY,EAAEA;AAHN;AAHZ;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GAnEuB5C,kB;UACLT,W,EAIMC,W;;;KALDQ,kB","sourcesContent":["import { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\n// app\r\nimport { DmsAttachDocumentsView } from './DmsAttachDocuments.view';\r\nimport { showModal, addLoader, selectContextSubType } from 'stores';\r\nimport * as utils from 'utils';\r\nimport * as constants from 'consts';\r\n\r\nDmsAttachDocuments.propTypes = {\r\n  referenceId: PropTypes.string,\r\n  sourceId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n  documentTypeKey: PropTypes.string,\r\n};\r\n\r\nexport default function DmsAttachDocuments({ referenceId, sourceId, documentTypeKey }) {\r\n  const dispatch = useDispatch();\r\n  const [search, setSearch] = useState('');\r\n  const [resetKey, setResetKey] = useState();\r\n\r\n  const contextSubType = useSelector(selectContextSubType);\r\n\r\n  const launchDmsUpload = () => (files) => {\r\n    dispatch(addLoader('DmsUploadFiles'));\r\n    const refinedReferenceId = getRefIdForContext();\r\n\r\n    dispatch(\r\n      showModal({\r\n        component: 'DMS_UPLOAD_FILES',\r\n        props: {\r\n          fullWidth: true,\r\n          title: utils.string.t('dms.upload.modalItems.uploadDocuments'),\r\n          hideCompOnBlur: false,\r\n          maxWidth: 'lg',\r\n          componentProps: {\r\n            files,\r\n            context: constants.DMS_CONTEXT_TASK,\r\n            referenceId: refinedReferenceId,\r\n            sourceId,\r\n            documentTypeKey,\r\n            confirmLabel: utils.string.t('app.ok'),\r\n            cancelLabel: utils.string.t('app.goBack'),\r\n            confirmMessage: utils.string.t('processingInstructions.documentsWillNotBeSaved'),\r\n            buttonColors: { confirm: 'secondary', cancel: 'primary' },\r\n            isClientSideUpload: true,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const getRefIdForContext = () => {\r\n    const { type, caseIncidentNotesID, refId } = contextSubType;\r\n    if (type === constants.DMS_TASK_CONTEXT_TYPE_RFI_RESPONSE) {\r\n      return caseIncidentNotesID ? `${refId}-${caseIncidentNotesID}` : refId;\r\n    } else if (type === constants.DMS_TASK_CONTEXT_TYPE_RFI || type === constants.DMS_TASK_CONTEXT_TYPE_ADHOC) {\r\n      return refId;\r\n    } else {\r\n      return referenceId;\r\n    }\r\n  };\r\n\r\n  const resetSearch = () => {\r\n    setResetKey(new Date().getTime());\r\n    setSearch('');\r\n  };\r\n\r\n  const submitSearch = (query) => {\r\n    setSearch(query);\r\n  };\r\n\r\n  return (\r\n    <DmsAttachDocumentsView\r\n      search={search}\r\n      resetKey={resetKey}\r\n      handlers={{\r\n        uploadModal: launchDmsUpload,\r\n        resetSearch: resetSearch,\r\n        submitSearch: submitSearch,\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}