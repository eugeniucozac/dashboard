{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as utils from 'utils'; //app\n\nimport { authLogout, addLoader, removeLoader, enqueueNotification, getEndorsementValues } from 'stores';\nexport var getRiskReferenceDetails = function getRiskReferenceDetails(referenceId, selectedProcess) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/fileUpload.actions.getRiskRefDetails'\n    };\n    var endpointParams = {\n      processType: selectedProcess.split(' ').join('')\n    };\n    dispatch(getRiskReferenceDetailsRequest(referenceId));\n    dispatch(addLoader('getRiskReferenceDetails'));\n\n    if (!referenceId) {\n      dispatch(getRiskReferenceDetailsFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Missing parameters'\n      })));\n      return;\n    }\n\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.ppService,\n      path: \"risk/reference/details/\".concat(referenceId),\n      params: endpointParams\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      var _data$data$, _data$data$2;\n\n      dispatch(getRiskReferenceDetailsSuccess(data.data[0]));\n      var isEndorsement = utils.processingInstructions.isEndorsement((_data$data$ = data.data[0]) === null || _data$data$ === void 0 ? void 0 : _data$data$.processTypeId);\n      var isFeeAndAmendment = utils.processingInstructions.isEndorsement((_data$data$2 = data.data[0]) === null || _data$data$2 === void 0 ? void 0 : _data$data$2.processTypeId);\n\n      if (data.data[0]) {\n        if (isEndorsement || isFeeAndAmendment) {\n          dispatch(getEndorsementValues(data.data[0].xbPolicyId, data.data[0].xbInstanceId));\n        }\n\n        dispatch(enqueueNotification('processingInstructions.successfulRiskRefAdded', 'success'));\n        return data.data[0];\n      } else {\n        dispatch(enqueueNotification(utils.string.t('processingInstructions.addRiskReference.noEndorsementValueAssociatedWithRiskRef', {\n          riskRefId: referenceId\n        }), 'warning'));\n      }\n    }).catch(function (err) {\n      utils.api.handleError(err, _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API fetch error (processingInstructions.getRiskRefDetails)'\n      }));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(getRiskReferenceDetailsFailure(err));\n      return err;\n    }).finally(function () {\n      dispatch(removeLoader('getRiskReferenceDetails'));\n    });\n  };\n};\nexport var getRiskReferenceDetailsRequest = function getRiskReferenceDetailsRequest(referenceId) {\n  return {\n    type: 'PROCESSING_INSTRUCTIONS_GET_RISK_REF_DETAILS_REQUEST',\n    payload: referenceId\n  };\n};\nexport var getRiskReferenceDetailsSuccess = function getRiskReferenceDetailsSuccess(guiResponseList) {\n  return {\n    type: 'PROCESSING_INSTRUCTIONS_GET_RISK_REF_DETAILS_SUCCESS',\n    payload: guiResponseList\n  };\n};\nexport var getRiskReferenceDetailsFailure = function getRiskReferenceDetailsFailure(error) {\n  return {\n    type: 'PROCESSING_INSTRUCTIONS_GET_RISK_REF_DETAILS_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/processingInstructions/processingInstructions.actions.getRiskRefDetails.js"],"names":["utils","authLogout","addLoader","removeLoader","enqueueNotification","getEndorsementValues","getRiskReferenceDetails","referenceId","selectedProcess","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","endpointParams","processType","split","join","getRiskReferenceDetailsRequest","getRiskReferenceDetailsFailure","message","api","get","token","accessToken","ppService","path","params","then","response","handleResponse","json","handleNewData","data","getRiskReferenceDetailsSuccess","isEndorsement","processingInstructions","processTypeId","isFeeAndAmendment","xbPolicyId","xbInstanceId","string","t","riskRefId","catch","err","handleError","handleUnauthorized","finally","type","payload","guiResponseList","error"],"mappings":"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","sourcesContent":["import * as utils from 'utils';\r\n\r\n//app\r\nimport { authLogout, addLoader, removeLoader, enqueueNotification, getEndorsementValues } from 'stores';\r\n\r\nexport const getRiskReferenceDetails = (referenceId, selectedProcess) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/fileUpload.actions.getRiskRefDetails',\r\n  };\r\n  const endpointParams = {\r\n    processType: selectedProcess.split(' ').join(''),\r\n  };\r\n\r\n  dispatch(getRiskReferenceDetailsRequest(referenceId));\r\n  dispatch(addLoader('getRiskReferenceDetails'));\r\n\r\n  if (!referenceId) {\r\n    dispatch(getRiskReferenceDetailsFailure({ ...defaultError, message: 'Missing parameters' }));\r\n    return;\r\n  }\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.ppService,\r\n      path: `risk/reference/details/${referenceId}`,\r\n      params: endpointParams,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(getRiskReferenceDetailsSuccess(data.data[0]));\r\n      const isEndorsement = utils.processingInstructions.isEndorsement(data.data[0]?.processTypeId);\r\n      const isFeeAndAmendment = utils.processingInstructions.isEndorsement(data.data[0]?.processTypeId);\r\n      if (data.data[0]) {\r\n        if (isEndorsement || isFeeAndAmendment) {\r\n          dispatch(getEndorsementValues(data.data[0].xbPolicyId, data.data[0].xbInstanceId));\r\n        }\r\n        dispatch(enqueueNotification('processingInstructions.successfulRiskRefAdded', 'success'));\r\n        return data.data[0];\r\n      } else {\r\n        dispatch(\r\n          enqueueNotification(\r\n            utils.string.t('processingInstructions.addRiskReference.noEndorsementValueAssociatedWithRiskRef', {\r\n              riskRefId: referenceId,\r\n            }),\r\n            'warning'\r\n          )\r\n        );\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      utils.api.handleError(err, { ...defaultError, message: 'API fetch error (processingInstructions.getRiskRefDetails)' });\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(getRiskReferenceDetailsFailure(err));\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('getRiskReferenceDetails'));\r\n    });\r\n};\r\n\r\nexport const getRiskReferenceDetailsRequest = (referenceId) => {\r\n  return {\r\n    type: 'PROCESSING_INSTRUCTIONS_GET_RISK_REF_DETAILS_REQUEST',\r\n    payload: referenceId,\r\n  };\r\n};\r\n\r\nexport const getRiskReferenceDetailsSuccess = (guiResponseList) => {\r\n  return {\r\n    type: 'PROCESSING_INSTRUCTIONS_GET_RISK_REF_DETAILS_SUCCESS',\r\n    payload: guiResponseList,\r\n  };\r\n};\r\n\r\nexport const getRiskReferenceDetailsFailure = (error) => {\r\n  return {\r\n    type: 'PROCESSING_INSTRUCTIONS_GET_RISK_REF_DETAILS_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}