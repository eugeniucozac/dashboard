{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ClaimsTab\\\\ClaimsTab.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as Yup from 'yup';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup'; // app\n\nimport styles from './ClaimsTab.styles';\nimport { selectUser, selectClaimsTabData, getClaimsTabData, getClaimsTabDetails, resetClaimsTabSearch, resetClaimsTabFilters } from 'stores';\nimport * as constants from 'consts';\nimport * as utils from 'utils';\nimport { useFlexiColumns } from 'hooks';\nimport { MultiSelect, FormDate } from 'components';\nimport ClaimsTabView from './ClaimsTab.view'; // mui\n\nimport { makeStyles } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ClaimsTab() {\n  _s();\n\n  var _claimsTabData$tableD, _claimsTabData$tableD2, _claimsTabData$tableD3, _claimsTabData$tableD4;\n\n  var classes = makeStyles(styles, {\n    name: 'ClaimsTab'\n  })();\n  var dispatch = useDispatch();\n  var user = useSelector(selectUser);\n  var userHasMyClaimsPermission = utils.app.access.feature('claimsProcessing.myClaims', ['read', 'create', 'update'], user);\n  var userHasMyTeamClaimsPermission = utils.app.access.feature('claimsProcessing.myTeamClaims', ['read', 'create', 'update'], user);\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      searchTerm = _useState2[0],\n      setSearchTerm = _useState2[1];\n\n  var _useState3 = useState(constants.CLAIMS_SEARCH_OPTION_INSURED),\n      _useState4 = _slicedToArray(_useState3, 2),\n      searchBy = _useState4[0],\n      setSearchBy = _useState4[1];\n\n  var _useState5 = useState(utils.string.t('claims.searchByClaims.options.ClaimRef')),\n      _useState6 = _slicedToArray(_useState5, 2),\n      searchByText = _useState6[0],\n      setSearchByText = _useState6[1];\n\n  var _useState7 = useState(true),\n      _useState8 = _slicedToArray(_useState7, 2),\n      myClaimsFirstTimeLoad = _useState8[0],\n      setMyClaimsFirstTimeLoad = _useState8[1];\n\n  var _useState9 = useState(true),\n      _useState10 = _slicedToArray(_useState9, 2),\n      myTeamClaimsFirstTimeLoad = _useState10[0],\n      setMyTeamClaimsFirstTimeLoad = _useState10[1];\n\n  var firstTimeSortColumns = 'lastUpdatedDate';\n  var searchTypeCall = constants.CLAIMS_TAB_REQ_TYPES.search;\n  var filterTypeCall = constants.CLAIMS_TAB_REQ_TYPES.filter;\n\n  var _useState11 = useState(),\n      _useState12 = _slicedToArray(_useState11, 2),\n      resetKey = _useState12[0],\n      setResetKey = _useState12[1];\n\n  var claimsTabData = useSelector(selectClaimsTabData);\n  var claimsTabTableRowDetails = claimsTabData === null || claimsTabData === void 0 ? void 0 : (_claimsTabData$tableD = claimsTabData.tableDetails) === null || _claimsTabData$tableD === void 0 ? void 0 : _claimsTabData$tableD.items;\n  var claimsTabFilterDropDown = claimsTabData === null || claimsTabData === void 0 ? void 0 : (_claimsTabData$tableD2 = claimsTabData.tableDetails) === null || _claimsTabData$tableD2 === void 0 ? void 0 : _claimsTabData$tableD2.filters;\n  var isFetchingFilters = claimsTabData === null || claimsTabData === void 0 ? void 0 : (_claimsTabData$tableD3 = claimsTabData.tableDetails) === null || _claimsTabData$tableD3 === void 0 ? void 0 : _claimsTabData$tableD3.isloadingFilters;\n\n  var _useState13 = useState((claimsTabData === null || claimsTabData === void 0 ? void 0 : claimsTabData.view) || constants.CLAIM_TEAM_TYPE.myClaims),\n      _useState14 = _slicedToArray(_useState13, 2),\n      claimsType = _useState14[0],\n      setClaimsType = _useState14[1];\n\n  var selectOptions = [{\n    label: utils.string.t('claims.searchByClaims.options.Insured'),\n    value: constants.CLAIMS_SEARCH_OPTION_INSURED\n  }, {\n    label: utils.string.t('claims.searchByClaims.options.ClaimRef'),\n    value: constants.CLAIMS_SEARCH_OPTION_CLAIM_REF\n  }, {\n    label: utils.string.t('claims.searchByClaims.options.LossRef'),\n    value: constants.CLAIMS_SEARCH_OPTION_LOSS_REF\n  }, {\n    label: utils.string.t('claims.searchByClaims.options.PolicyRef'),\n    value: constants.CLAIMS_SEARCH_OPTION_POLICY_REF\n  }, {\n    label: utils.string.t('claims.searchByClaims.options.Division'),\n    value: constants.CLAIMS_SEARCH_OPTION_DIVISION\n  }];\n  var viewFields = [{\n    name: 'views',\n    type: 'radio',\n    value: claimsType,\n    defaultValue: claimsType,\n    muiFormGroupProps: {\n      row: true,\n      classes: {\n        root: classes.radioLabel\n      },\n      onChange: function onChange(value) {\n        setClaimsType(value);\n        setValue('includeClosedClaims', false);\n      }\n    },\n    options: [].concat(_toConsumableArray(userHasMyClaimsPermission ? [{\n      value: constants.CLAIM_TEAM_TYPE.myClaims,\n      label: utils.string.t('claims.claimsTab.myClaims')\n    }] : []), _toConsumableArray(userHasMyTeamClaimsPermission ? [{\n      value: constants.CLAIM_TEAM_TYPE.myTeamClaims,\n      label: utils.string.t('claims.claimsTab.myTeamClaims')\n    }] : []))\n  }, {\n    name: 'searchBy',\n    type: 'autocompletemui',\n    options: selectOptions,\n    value: (claimsTabData === null || claimsTabData === void 0 ? void 0 : claimsTabData.searchBy) === '' ? (selectOptions === null || selectOptions === void 0 ? void 0 : selectOptions.find(function (item) {\n      return (item === null || item === void 0 ? void 0 : item.value) === constants.CLAIMS_SEARCH_OPTION_INSURED;\n    })) || null : selectOptions === null || selectOptions === void 0 ? void 0 : selectOptions.find(function (item) {\n      return (item === null || item === void 0 ? void 0 : item.value) === (claimsTabData === null || claimsTabData === void 0 ? void 0 : claimsTabData.searchBy);\n    }),\n    validation: Yup.object().nullable().required(utils.string.t('validation.required')),\n    muiComponentProps: {\n      inputProps: {\n        title: searchByText || ''\n      }\n    }\n  }, {\n    name: 'claimLossFromDate',\n    type: 'datepicker',\n    value: null\n  }, {\n    name: 'multiSelect',\n    type: 'switch',\n    value: false\n  }];\n  var defaultValues = utils.form.getInitialValues(viewFields);\n  var validationSchema = utils.form.getValidationSchema(viewFields);\n\n  var _useForm = useForm(_objectSpread({\n    defaultValues: defaultValues\n  }, validationSchema && {\n    resolver: yupResolver(validationSchema)\n  })),\n      control = _useForm.control,\n      setValue = _useForm.setValue;\n\n  var tableFilterFields = [{\n    id: 'claimLossFromDate',\n    type: 'datepicker',\n    label: utils.string.t('claims.claimsTab.filtercolumns.lossDateFrom'),\n    value: '',\n    content: /*#__PURE__*/_jsxDEV(FormDate, _objectSpread(_objectSpread({\n      control: control\n    }, utils.form.getFieldProps(defaultValues, 'claimLossFromDate')), {}, {\n      id: \"lossFromDatedatepicker\",\n      name: \"claimLossFromDate\",\n      type: \"datepicker\",\n      value: '',\n      label: '',\n      plainText: true,\n      plainTextIcon: true,\n      placeholder: utils.string.t('app.selectDate'),\n      muiComponentProps: {\n        fullWidth: false,\n        margin: 'dense'\n      },\n      muiPickerProps: {\n        clearable: false,\n        variant: 'inline',\n        format: 'DD-MM-YYYY'\n      }\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }, this)\n  }, {\n    id: 'insured',\n    type: 'multiSelect',\n    label: utils.string.t('claims.claimsTab.filtercolumns.insured'),\n    placeholder: utils.string.t('claims.filterPlaceHolderText'),\n    value: [],\n    options: claimsTabFilterDropDown === null || claimsTabFilterDropDown === void 0 ? void 0 : claimsTabFilterDropDown.insured,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"insured\",\n      search: true,\n      options: claimsTabFilterDropDown === null || claimsTabFilterDropDown === void 0 ? void 0 : claimsTabFilterDropDown.insured\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 16\n    }, this)\n  }, {\n    id: 'division',\n    type: 'multiSelect',\n    label: utils.string.t('claims.claimsTab.filtercolumns.division'),\n    placeholder: utils.string.t('claims.filterPlaceHolderText'),\n    value: [],\n    options: claimsTabFilterDropDown === null || claimsTabFilterDropDown === void 0 ? void 0 : claimsTabFilterDropDown.division,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"division\",\n      search: true,\n      options: claimsTabFilterDropDown === null || claimsTabFilterDropDown === void 0 ? void 0 : claimsTabFilterDropDown.division\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 16\n    }, this)\n  }, {\n    id: 'claimStatus',\n    type: 'multiSelect',\n    label: utils.string.t('claims.claimsTab.filtercolumns.claimStatus'),\n    placeholder: utils.string.t('claims.filterPlaceHolderText'),\n    value: [],\n    options: claimsTabFilterDropDown === null || claimsTabFilterDropDown === void 0 ? void 0 : claimsTabFilterDropDown.claimStatus,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"claimStage\",\n      search: true,\n      options: claimsTabFilterDropDown === null || claimsTabFilterDropDown === void 0 ? void 0 : claimsTabFilterDropDown.claimStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 16\n    }, this)\n  }, {\n    id: 'claimStage',\n    type: 'multiSelect',\n    label: utils.string.t('claims.claimsTab.filtercolumns.claimStage'),\n    placeholder: utils.string.t('claims.filterPlaceHolderText'),\n    value: [],\n    options: claimsTabFilterDropDown === null || claimsTabFilterDropDown === void 0 ? void 0 : claimsTabFilterDropDown.claimStage,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"claimStage\",\n      search: true,\n      options: claimsTabFilterDropDown === null || claimsTabFilterDropDown === void 0 ? void 0 : claimsTabFilterDropDown.claimStage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 16\n    }, this)\n  }].concat(_toConsumableArray(claimsType === constants.CLAIM_TEAM_TYPE.myTeamClaims ? [{\n    id: 'assignedTo',\n    type: 'multiSelect',\n    label: utils.string.t('claims.claimsTab.filtercolumns.assignedTo'),\n    placeholder: utils.string.t('claims.filterPlaceHolderText'),\n    value: [],\n    options: claimsTabFilterDropDown === null || claimsTabFilterDropDown === void 0 ? void 0 : claimsTabFilterDropDown.assignedTo,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"assignedTo\",\n      search: true,\n      options: claimsTabFilterDropDown === null || claimsTabFilterDropDown === void 0 ? void 0 : claimsTabFilterDropDown.assignedTo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 22\n    }, this)\n  }] : []), [{\n    id: 'team',\n    type: 'multiSelect',\n    label: utils.string.t('claims.claimsTab.filtercolumns.team'),\n    placeholder: utils.string.t('claims.filterPlaceHolderText'),\n    value: [],\n    options: claimsTabFilterDropDown === null || claimsTabFilterDropDown === void 0 ? void 0 : claimsTabFilterDropDown.team,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"team\",\n      search: true,\n      options: claimsTabFilterDropDown === null || claimsTabFilterDropDown === void 0 ? void 0 : claimsTabFilterDropDown.team\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 16\n    }, this)\n  }, {\n    id: 'priority',\n    type: 'multiSelect',\n    label: utils.string.t('claims.claimsTab.filtercolumns.priority'),\n    placeholder: utils.string.t('claims.filterPlaceHolderText'),\n    value: [],\n    options: claimsTabFilterDropDown === null || claimsTabFilterDropDown === void 0 ? void 0 : claimsTabFilterDropDown.priority,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"priority\",\n      search: true,\n      options: claimsTabFilterDropDown === null || claimsTabFilterDropDown === void 0 ? void 0 : claimsTabFilterDropDown.priority\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 16\n    }, this)\n  }]);\n  useEffect(function () {\n    if (!(claimsTabData === null || claimsTabData === void 0 ? void 0 : claimsTabData.isClaimsTabLoaded)) {\n      getClaimsData();\n\n      var claimsData = _objectSpread({}, claimsTabData);\n\n      claimsData.isClaimsTabLoaded = true;\n      claimsData.view = claimsType;\n      dispatch(getClaimsTabData(claimsData));\n    } else if ((claimsTabData === null || claimsTabData === void 0 ? void 0 : claimsTabData.isClaimsTabLoaded) && (claimsTabData === null || claimsTabData === void 0 ? void 0 : claimsTabData.view) !== claimsType) {\n      getClaimsData();\n\n      var _claimsData = _objectSpread({}, claimsTabData);\n\n      _claimsData.view = claimsType;\n      dispatch(getClaimsTabData(_claimsData));\n    }\n\n    return function () {\n      setSearchTerm('');\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [claimsType]);\n\n  var getClaimsData = function getClaimsData() {\n    if (claimsType) {\n      setValue('lastUpdatedDate', null); // defect - 14469 - Default sorting is not applying on Date &Time created and Priority columns\n      // First Time Table Grid load for MyClaims, MyTeamClaims, All Claims passing createdDate and Priority columns from UI.\n\n      if (myClaimsFirstTimeLoad && claimsType === constants.CLAIM_TEAM_TYPE.myClaims || myTeamClaimsFirstTimeLoad && claimsType === constants.CLAIM_TEAM_TYPE.myTeamClaims) {\n        if (claimsType === constants.CLAIM_TEAM_TYPE.myClaims) setMyClaimsFirstTimeLoad(!myClaimsFirstTimeLoad);\n        if (claimsType === constants.CLAIM_TEAM_TYPE.myTeamClaims) setMyTeamClaimsFirstTimeLoad(!myTeamClaimsFirstTimeLoad);\n        dispatch(getClaimsTabDetails({\n          requestType: searchTypeCall,\n          claimsType: claimsType,\n          filterTerm: [],\n          searchBy: searchBy,\n          firstTimeSort: firstTimeSortColumns\n        }));\n        dispatch(getClaimsTabDetails({\n          requestType: filterTypeCall,\n          claimsType: claimsType,\n          filterTerm: [],\n          searchBy: searchBy,\n          firstTimeSort: firstTimeSortColumns\n        }));\n      } else {\n        // From second time onwards, table grid load from else part for single column sorting.\n        dispatch(getClaimsTabDetails({\n          requestType: searchTypeCall,\n          claimsType: claimsType,\n          filterTerm: [],\n          searchBy: searchBy\n        }));\n        dispatch(getClaimsTabDetails({\n          requestType: filterTypeCall,\n          claimsType: claimsType,\n          filterTerm: [],\n          searchBy: searchBy\n        }));\n      }\n    }\n  };\n\n  var handleSearch = function handleSearch(queryObject) {\n    setResetKey(new Date().getTime());\n    dispatch(resetClaimsTabFilters());\n    setValue('lastUpdatedDate', null);\n    setSearchTerm(queryObject.search);\n\n    var claimsData = _objectSpread({}, claimsTabData);\n\n    claimsData.searchText = queryObject === null || queryObject === void 0 ? void 0 : queryObject.search;\n    dispatch(getClaimsTabData(claimsData));\n\n    if (queryObject === null || queryObject === void 0 ? void 0 : queryObject.search) {\n      dispatch(getClaimsTabDetails({\n        requestType: searchTypeCall,\n        claimsType: claimsType,\n        term: queryObject.search,\n        direction: 'desc',\n        searchBy: searchBy\n      }));\n      dispatch(getClaimsTabDetails({\n        requestType: filterTypeCall,\n        claimsType: claimsType,\n        term: queryObject.search,\n        direction: 'desc',\n        searchBy: searchBy,\n        filterTerm: queryObject.filters\n      }));\n    }\n  };\n\n  var handleResetFilter = function handleResetFilter() {\n    setValue('lastUpdatedDate', null);\n    dispatch(resetClaimsTabFilters());\n    dispatch(getClaimsTabDetails({\n      requestType: searchTypeCall,\n      claimsType: claimsType,\n      term: searchTerm,\n      filterTerm: '',\n      direction: 'desc',\n      searchBy: searchBy\n    }));\n    dispatch(getClaimsTabDetails({\n      requestType: filterTypeCall,\n      claimsType: claimsType,\n      term: searchTerm,\n      filterTerm: '',\n      direction: 'desc',\n      searchBy: searchBy\n    }));\n  };\n\n  var handleSearchFilter = function handleSearchFilter(data) {\n    return dispatch(getClaimsTabDetails({\n      requestType: searchTypeCall,\n      claimsType: claimsType,\n      term: data.search,\n      filterTerm: data.filters,\n      searchBy: searchBy\n    }));\n  };\n\n  var handleSort = function handleSort(by, dir) {\n    dispatch(getClaimsTabDetails({\n      requestType: searchTypeCall,\n      claimsType: claimsType,\n      sortBy: by,\n      direction: dir.toUpperCase(),\n      term: searchTerm,\n      searchBy: searchBy\n    }));\n  };\n\n  var handleChangePage = function handleChangePage(newPage) {\n    dispatch(getClaimsTabDetails({\n      requestType: searchTypeCall,\n      claimsType: claimsType,\n      page: newPage,\n      term: searchTerm,\n      searchBy: searchBy\n    }));\n  };\n\n  var handleChangeRowsPerPage = function handleChangeRowsPerPage(rowsPerPage) {\n    dispatch(getClaimsTabDetails({\n      requestType: searchTypeCall,\n      claimsType: claimsType,\n      size: rowsPerPage,\n      term: searchTerm,\n      searchBy: searchBy\n    }));\n  };\n\n  var handleResetSearch = function handleResetSearch() {\n    setResetKey(new Date().getTime());\n    dispatch(resetClaimsTabSearch());\n    dispatch(resetClaimsTabFilters());\n    setValue('lastUpdatedDate', null);\n    dispatch(getClaimsTabDetails({\n      requestType: searchTypeCall,\n      claimsType: claimsType,\n      filterTerm: [],\n      searchBy: searchBy\n    }));\n    dispatch(getClaimsTabDetails({\n      requestType: filterTypeCall,\n      claimsType: claimsType,\n      filterTerm: [],\n      searchBy: searchBy\n    }));\n  };\n\n  var onSelectSearchBy = function onSelectSearchBy(searchByValue, searchByLabel) {\n    setSearchByText(searchByLabel);\n    setSearchBy(searchByValue);\n\n    var claimsData = _objectSpread({}, claimsTabData);\n\n    claimsData.searchBy = searchByValue;\n    dispatch(getClaimsTabData(claimsData));\n  };\n\n  var columns = [{\n    id: 'claimRef',\n    label: utils.string.t('claims.claimsTab.tablecolumns.claimRef'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    narrow: true,\n    nowrap: true,\n    visible: true,\n    mandatory: true\n  }, {\n    id: 'lossRef',\n    label: utils.string.t('claims.claimsTab.tablecolumns.lossRef'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    narrow: true,\n    nowrap: true,\n    visible: true,\n    mandatory: true\n  }, {\n    id: 'lossDateFrom',\n    label: utils.string.t('claims.claimsTab.tablecolumns.lossDateFrom'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    ellipsis: true,\n    visible: true\n  }, {\n    id: 'assured',\n    label: utils.string.t('claims.claimsTab.tablecolumns.insured'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    ellipsis: true,\n    visible: true\n  }, {\n    id: 'policyRef',\n    label: utils.string.t('claims.claimsTab.tablecolumns.policyRef'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }, {\n    id: 'division',\n    label: utils.string.t('claims.claimsTab.tablecolumns.division'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }, {\n    id: 'claimStatus',\n    label: utils.string.t('claims.claimsTab.tablecolumns.claimStatus'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }, {\n    id: 'claimStage',\n    label: utils.string.t('claims.claimsTab.tablecolumns.claimStage'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }, {\n    id: 'assignedTo',\n    label: utils.string.t('claims.claimsTab.tablecolumns.assignedTo'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true,\n    mandatory: true,\n    nowrap: true\n  }, {\n    id: 'team',\n    label: utils.string.t('claims.claimsTab.tablecolumns.team'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true,\n    mandatory: true\n  }, {\n    id: 'lastUpdated',\n    label: utils.string.t('claims.claimsTab.tablecolumns.lastUpdated'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true,\n    mandatory: true\n  }, {\n    id: 'priority',\n    label: utils.string.t('claims.claimsTab.tablecolumns.priority'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }, {\n    id: 'catCodesID',\n    label: utils.string.t('claims.claimsTab.tablecolumns.catCode'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    ellipsis: true\n  }, {\n    id: 'claimReceivedDateTime',\n    label: utils.string.t('claims.claimsTab.tablecolumns.claimReceivedDateTime'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    narrow: true,\n    nowrap: true\n  }, {\n    id: 'createdDate',\n    label: utils.string.t('claims.claimsTab.tablecolumns.createdDate'),\n    sort: {\n      type: 'date',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: false\n  }, {\n    id: 'closedDate',\n    label: utils.string.t('claims.claimsTab.tablecolumns.closedDate'),\n    sort: {\n      type: 'date',\n      direction: 'asc'\n    },\n    nowrap: true\n  }, {\n    id: 'complexity',\n    label: utils.string.t('claims.claimsTab.tablecolumns.complexity'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: false\n  }, {\n    id: 'ucr',\n    label: utils.string.t('claims.claimsTab.tablecolumns.ucr'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: false\n  }, {\n    id: 'policyType',\n    label: utils.string.t('claims.claimsTab.tablecolumns.policyType'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: false\n  }, {\n    id: 'claimantName',\n    label: utils.string.t('claims.claimsTab.tablecolumns.claimant'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: false,\n    ellipsis: true\n  }, {\n    id: 'reinsured',\n    label: utils.string.t('claims.claimsTab.tablecolumns.reinsured'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: false\n  }, {\n    id: 'client',\n    label: utils.string.t('claims.claimsTab.tablecolumns.client'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    }\n  }, {\n    id: 'interest',\n    label: utils.string.t('claims.claimsTab.tablecolumns.interest'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: false\n  }, {\n    id: 'createdBy',\n    label: utils.string.t('claims.claimsTab.tablecolumns.createdBy'),\n    sort: {\n      type: 'numeric',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: false\n  }, {\n    id: 'company',\n    label: utils.string.t('claims.claimsTab.tablecolumns.company'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    }\n  }, {\n    id: 'coverholder',\n    label: utils.string.t('claims.claimsTab.tablecolumns.coverholder'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: false\n  }, {\n    id: 'lossToDate',\n    label: utils.string.t('claims.claimsTab.tablecolumns.lossDateTo'),\n    sort: {\n      type: 'date',\n      direction: 'asc'\n    },\n    nowrap: true\n  }, {\n    id: 'lossDateQualifier',\n    label: utils.string.t('claims.claimsTab.tablecolumns.lossDateQualifier'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true\n  }, {\n    id: 'lossDetails',\n    label: utils.string.t('claims.claimsTab.tablecolumns.lossDetails'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    ellipsis: true\n  }, {\n    id: 'pasClaimRef',\n    label: utils.string.t('claims.claimsTab.tablecolumns.pasClaimRef'),\n    sort: {\n      type: 'numeric',\n      direction: 'asc'\n    },\n    nowrap: true\n  }, {\n    id: 'pasStatus',\n    label: utils.string.t('claims.claimsTab.tablecolumns.pasStatus'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true\n  }];\n\n  var _useFlexiColumns = useFlexiColumns(columns),\n      columnsArray = _useFlexiColumns.columns,\n      columnProps = _useFlexiColumns.columnProps,\n      toggleColumn = _useFlexiColumns.toggleColumn;\n\n  return /*#__PURE__*/_jsxDEV(ClaimsTabView, {\n    claims: claimsTabTableRowDetails,\n    searchTerm: (claimsTabData === null || claimsTabData === void 0 ? void 0 : claimsTabData.searchText) || '',\n    sort: _objectSpread({}, claimsTabData === null || claimsTabData === void 0 ? void 0 : (_claimsTabData$tableD4 = claimsTabData.tableDetails) === null || _claimsTabData$tableD4 === void 0 ? void 0 : _claimsTabData$tableD4.sort),\n    columnsArray: columnsArray,\n    columnProps: columnProps,\n    viewFields: viewFields,\n    tableFilterFields: tableFilterFields,\n    isFetchingFilters: isFetchingFilters,\n    control: control,\n    resetKey: resetKey,\n    handlers: {\n      search: handleSearch,\n      searchFilter: handleSearchFilter,\n      resetFilter: handleResetFilter,\n      sort: handleSort,\n      changePage: handleChangePage,\n      changeRowsPerPage: handleChangeRowsPerPage,\n      toggleColumn: toggleColumn,\n      resetSearch: handleResetSearch,\n      onSelectSearchBy: onSelectSearchBy\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 647,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ClaimsTab, \"XW1zaUUhKFJSYGzgsCFRTI1Qtfk=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useForm, useFlexiColumns];\n});\n\n_c = ClaimsTab;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimsTab\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ClaimsTab/ClaimsTab.js"],"names":["React","useState","useEffect","useDispatch","useSelector","Yup","useForm","yupResolver","styles","selectUser","selectClaimsTabData","getClaimsTabData","getClaimsTabDetails","resetClaimsTabSearch","resetClaimsTabFilters","constants","utils","useFlexiColumns","MultiSelect","FormDate","ClaimsTabView","makeStyles","ClaimsTab","classes","name","dispatch","user","userHasMyClaimsPermission","app","access","feature","userHasMyTeamClaimsPermission","searchTerm","setSearchTerm","CLAIMS_SEARCH_OPTION_INSURED","searchBy","setSearchBy","string","t","searchByText","setSearchByText","myClaimsFirstTimeLoad","setMyClaimsFirstTimeLoad","myTeamClaimsFirstTimeLoad","setMyTeamClaimsFirstTimeLoad","firstTimeSortColumns","searchTypeCall","CLAIMS_TAB_REQ_TYPES","search","filterTypeCall","filter","resetKey","setResetKey","claimsTabData","claimsTabTableRowDetails","tableDetails","items","claimsTabFilterDropDown","filters","isFetchingFilters","isloadingFilters","view","CLAIM_TEAM_TYPE","myClaims","claimsType","setClaimsType","selectOptions","label","value","CLAIMS_SEARCH_OPTION_CLAIM_REF","CLAIMS_SEARCH_OPTION_LOSS_REF","CLAIMS_SEARCH_OPTION_POLICY_REF","CLAIMS_SEARCH_OPTION_DIVISION","viewFields","type","defaultValue","muiFormGroupProps","row","root","radioLabel","onChange","setValue","options","myTeamClaims","find","item","validation","object","nullable","required","muiComponentProps","inputProps","title","defaultValues","form","getInitialValues","validationSchema","getValidationSchema","resolver","control","tableFilterFields","id","content","getFieldProps","fullWidth","margin","clearable","variant","format","placeholder","insured","division","claimStatus","claimStage","assignedTo","team","priority","isClaimsTabLoaded","getClaimsData","claimsData","requestType","filterTerm","firstTimeSort","handleSearch","queryObject","Date","getTime","searchText","term","direction","handleResetFilter","handleSearchFilter","data","handleSort","by","dir","sortBy","toUpperCase","handleChangePage","newPage","page","handleChangeRowsPerPage","rowsPerPage","size","handleResetSearch","onSelectSearchBy","searchByValue","searchByLabel","columns","sort","narrow","nowrap","visible","mandatory","ellipsis","columnsArray","columnProps","toggleColumn","searchFilter","resetFilter","changePage","changeRowsPerPage","resetSearch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport * as Yup from 'yup';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n\r\n// app\r\nimport styles from './ClaimsTab.styles';\r\nimport {\r\n  selectUser,\r\n  selectClaimsTabData,\r\n  getClaimsTabData,\r\n  getClaimsTabDetails,\r\n  resetClaimsTabSearch,\r\n  resetClaimsTabFilters,\r\n} from 'stores';\r\nimport * as constants from 'consts';\r\nimport * as utils from 'utils';\r\nimport { useFlexiColumns } from 'hooks';\r\nimport { MultiSelect, FormDate } from 'components';\r\nimport ClaimsTabView from './ClaimsTab.view';\r\n\r\n// mui\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nexport default function ClaimsTab() {\r\n  const classes = makeStyles(styles, { name: 'ClaimsTab' })();\r\n  const dispatch = useDispatch();\r\n\r\n  const user = useSelector(selectUser);\r\n  const userHasMyClaimsPermission = utils.app.access.feature('claimsProcessing.myClaims', ['read', 'create', 'update'], user);\r\n  const userHasMyTeamClaimsPermission = utils.app.access.feature('claimsProcessing.myTeamClaims', ['read', 'create', 'update'], user);\r\n\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [searchBy, setSearchBy] = useState(constants.CLAIMS_SEARCH_OPTION_INSURED);\r\n\r\n  const [searchByText, setSearchByText] = useState(utils.string.t('claims.searchByClaims.options.ClaimRef'));\r\n\r\n  const [myClaimsFirstTimeLoad, setMyClaimsFirstTimeLoad] = useState(true);\r\n  const [myTeamClaimsFirstTimeLoad, setMyTeamClaimsFirstTimeLoad] = useState(true);\r\n  const firstTimeSortColumns = 'lastUpdatedDate';\r\n\r\n  const searchTypeCall = constants.CLAIMS_TAB_REQ_TYPES.search;\r\n  const filterTypeCall = constants.CLAIMS_TAB_REQ_TYPES.filter;\r\n  const [resetKey, setResetKey] = useState();\r\n\r\n  const claimsTabData = useSelector(selectClaimsTabData);\r\n  const claimsTabTableRowDetails = claimsTabData?.tableDetails?.items;\r\n  const claimsTabFilterDropDown = claimsTabData?.tableDetails?.filters;\r\n  const isFetchingFilters = claimsTabData?.tableDetails?.isloadingFilters;\r\n\r\n  const [claimsType, setClaimsType] = useState(claimsTabData?.view || constants.CLAIM_TEAM_TYPE.myClaims);\r\n\r\n  const selectOptions = [\r\n    { label: utils.string.t('claims.searchByClaims.options.Insured'), value: constants.CLAIMS_SEARCH_OPTION_INSURED },\r\n    { label: utils.string.t('claims.searchByClaims.options.ClaimRef'), value: constants.CLAIMS_SEARCH_OPTION_CLAIM_REF },\r\n    { label: utils.string.t('claims.searchByClaims.options.LossRef'), value: constants.CLAIMS_SEARCH_OPTION_LOSS_REF },\r\n    { label: utils.string.t('claims.searchByClaims.options.PolicyRef'), value: constants.CLAIMS_SEARCH_OPTION_POLICY_REF },\r\n    { label: utils.string.t('claims.searchByClaims.options.Division'), value: constants.CLAIMS_SEARCH_OPTION_DIVISION },\r\n  ];\r\n\r\n  const viewFields = [\r\n    {\r\n      name: 'views',\r\n      type: 'radio',\r\n      value: claimsType,\r\n      defaultValue: claimsType,\r\n      muiFormGroupProps: {\r\n        row: true,\r\n        classes: {\r\n          root: classes.radioLabel,\r\n        },\r\n        onChange: (value) => {\r\n          setClaimsType(value);\r\n          setValue('includeClosedClaims', false);\r\n        },\r\n      },\r\n      options: [\r\n        ...(userHasMyClaimsPermission\r\n          ? [\r\n              {\r\n                value: constants.CLAIM_TEAM_TYPE.myClaims,\r\n                label: utils.string.t('claims.claimsTab.myClaims'),\r\n              },\r\n            ]\r\n          : []),\r\n        ...(userHasMyTeamClaimsPermission\r\n          ? [\r\n              {\r\n                value: constants.CLAIM_TEAM_TYPE.myTeamClaims,\r\n                label: utils.string.t('claims.claimsTab.myTeamClaims'),\r\n              },\r\n            ]\r\n          : []),\r\n      ],\r\n    },\r\n    {\r\n      name: 'searchBy',\r\n      type: 'autocompletemui',\r\n      options: selectOptions,\r\n      value:\r\n        claimsTabData?.searchBy === ''\r\n          ? selectOptions?.find((item) => item?.value === constants.CLAIMS_SEARCH_OPTION_INSURED) || null\r\n          : selectOptions?.find((item) => item?.value === claimsTabData?.searchBy),\r\n      validation: Yup.object().nullable().required(utils.string.t('validation.required')),\r\n      muiComponentProps: {\r\n        inputProps: {\r\n          title: searchByText || '',\r\n        },\r\n      },\r\n    },\r\n    { name: 'claimLossFromDate', type: 'datepicker', value: null },\r\n    {\r\n      name: 'multiSelect',\r\n      type: 'switch',\r\n      value: false,\r\n    },\r\n  ];\r\n\r\n  const defaultValues = utils.form.getInitialValues(viewFields);\r\n  const validationSchema = utils.form.getValidationSchema(viewFields);\r\n\r\n  const { control, setValue } = useForm({\r\n    defaultValues,\r\n    ...(validationSchema && { resolver: yupResolver(validationSchema) }),\r\n  });\r\n\r\n  const tableFilterFields = [\r\n    {\r\n      id: 'claimLossFromDate',\r\n      type: 'datepicker',\r\n      label: utils.string.t('claims.claimsTab.filtercolumns.lossDateFrom'),\r\n      value: '',\r\n      content: (\r\n        <FormDate\r\n          control={control}\r\n          {...utils.form.getFieldProps(defaultValues, 'claimLossFromDate')}\r\n          id=\"lossFromDatedatepicker\"\r\n          name=\"claimLossFromDate\"\r\n          type=\"datepicker\"\r\n          value={''}\r\n          label={''}\r\n          plainText\r\n          plainTextIcon\r\n          placeholder={utils.string.t('app.selectDate')}\r\n          muiComponentProps={{\r\n            fullWidth: false,\r\n            margin: 'dense',\r\n          }}\r\n          muiPickerProps={{\r\n            clearable: false,\r\n            variant: 'inline',\r\n            format: 'DD-MM-YYYY',\r\n          }}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      id: 'insured',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('claims.claimsTab.filtercolumns.insured'),\r\n      placeholder: utils.string.t('claims.filterPlaceHolderText'),\r\n      value: [],\r\n      options: claimsTabFilterDropDown?.insured,\r\n      content: <MultiSelect id=\"insured\" search options={claimsTabFilterDropDown?.insured} />,\r\n    },\r\n\r\n    {\r\n      id: 'division',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('claims.claimsTab.filtercolumns.division'),\r\n      placeholder: utils.string.t('claims.filterPlaceHolderText'),\r\n      value: [],\r\n      options: claimsTabFilterDropDown?.division,\r\n      content: <MultiSelect id=\"division\" search options={claimsTabFilterDropDown?.division} />,\r\n    },\r\n    {\r\n      id: 'claimStatus',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('claims.claimsTab.filtercolumns.claimStatus'),\r\n      placeholder: utils.string.t('claims.filterPlaceHolderText'),\r\n      value: [],\r\n      options: claimsTabFilterDropDown?.claimStatus,\r\n      content: <MultiSelect id=\"claimStage\" search options={claimsTabFilterDropDown?.claimStatus} />,\r\n    },\r\n    {\r\n      id: 'claimStage',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('claims.claimsTab.filtercolumns.claimStage'),\r\n      placeholder: utils.string.t('claims.filterPlaceHolderText'),\r\n      value: [],\r\n      options: claimsTabFilterDropDown?.claimStage,\r\n      content: <MultiSelect id=\"claimStage\" search options={claimsTabFilterDropDown?.claimStage} />,\r\n    },\r\n    ...(claimsType === constants.CLAIM_TEAM_TYPE.myTeamClaims\r\n      ? [\r\n          {\r\n            id: 'assignedTo',\r\n            type: 'multiSelect',\r\n            label: utils.string.t('claims.claimsTab.filtercolumns.assignedTo'),\r\n            placeholder: utils.string.t('claims.filterPlaceHolderText'),\r\n            value: [],\r\n            options: claimsTabFilterDropDown?.assignedTo,\r\n            content: <MultiSelect id=\"assignedTo\" search options={claimsTabFilterDropDown?.assignedTo} />,\r\n          },\r\n        ]\r\n      : []),\r\n    {\r\n      id: 'team',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('claims.claimsTab.filtercolumns.team'),\r\n      placeholder: utils.string.t('claims.filterPlaceHolderText'),\r\n      value: [],\r\n      options: claimsTabFilterDropDown?.team,\r\n      content: <MultiSelect id=\"team\" search options={claimsTabFilterDropDown?.team} />,\r\n    },\r\n    {\r\n      id: 'priority',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('claims.claimsTab.filtercolumns.priority'),\r\n      placeholder: utils.string.t('claims.filterPlaceHolderText'),\r\n      value: [],\r\n      options: claimsTabFilterDropDown?.priority,\r\n      content: <MultiSelect id=\"priority\" search options={claimsTabFilterDropDown?.priority} />,\r\n    },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    if (!claimsTabData?.isClaimsTabLoaded) {\r\n      getClaimsData();\r\n      const claimsData = { ...claimsTabData };\r\n      claimsData.isClaimsTabLoaded = true;\r\n      claimsData.view = claimsType;\r\n      dispatch(getClaimsTabData(claimsData));\r\n    } else if (claimsTabData?.isClaimsTabLoaded && claimsTabData?.view !== claimsType) {\r\n      getClaimsData();\r\n      const claimsData = { ...claimsTabData };\r\n      claimsData.view = claimsType;\r\n      dispatch(getClaimsTabData(claimsData));\r\n    }\r\n    return () => {\r\n      setSearchTerm('');\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [claimsType]);\r\n\r\n  const getClaimsData = () => {\r\n    if (claimsType) {\r\n      setValue('lastUpdatedDate', null);\r\n\r\n      // defect - 14469 - Default sorting is not applying on Date &Time created and Priority columns\r\n      // First Time Table Grid load for MyClaims, MyTeamClaims, All Claims passing createdDate and Priority columns from UI.\r\n      if (\r\n        (myClaimsFirstTimeLoad && claimsType === constants.CLAIM_TEAM_TYPE.myClaims) ||\r\n        (myTeamClaimsFirstTimeLoad && claimsType === constants.CLAIM_TEAM_TYPE.myTeamClaims)\r\n      ) {\r\n        if (claimsType === constants.CLAIM_TEAM_TYPE.myClaims) setMyClaimsFirstTimeLoad(!myClaimsFirstTimeLoad);\r\n        if (claimsType === constants.CLAIM_TEAM_TYPE.myTeamClaims) setMyTeamClaimsFirstTimeLoad(!myTeamClaimsFirstTimeLoad);\r\n\r\n        dispatch(\r\n          getClaimsTabDetails({\r\n            requestType: searchTypeCall,\r\n            claimsType,\r\n            filterTerm: [],\r\n            searchBy,\r\n            firstTimeSort: firstTimeSortColumns,\r\n          })\r\n        );\r\n        dispatch(\r\n          getClaimsTabDetails({\r\n            requestType: filterTypeCall,\r\n            claimsType,\r\n            filterTerm: [],\r\n            searchBy,\r\n            firstTimeSort: firstTimeSortColumns,\r\n          })\r\n        );\r\n      } else {\r\n        // From second time onwards, table grid load from else part for single column sorting.\r\n        dispatch(\r\n          getClaimsTabDetails({\r\n            requestType: searchTypeCall,\r\n            claimsType,\r\n            filterTerm: [],\r\n            searchBy,\r\n          })\r\n        );\r\n        dispatch(\r\n          getClaimsTabDetails({\r\n            requestType: filterTypeCall,\r\n            claimsType,\r\n            filterTerm: [],\r\n            searchBy,\r\n          })\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleSearch = (queryObject) => {\r\n    setResetKey(new Date().getTime());\r\n    dispatch(resetClaimsTabFilters());\r\n    setValue('lastUpdatedDate', null);\r\n    setSearchTerm(queryObject.search);\r\n    const claimsData = { ...claimsTabData };\r\n    claimsData.searchText = queryObject?.search;\r\n    dispatch(getClaimsTabData(claimsData));\r\n    if (queryObject?.search) {\r\n      dispatch(\r\n        getClaimsTabDetails({\r\n          requestType: searchTypeCall,\r\n          claimsType,\r\n          term: queryObject.search,\r\n          direction: 'desc',\r\n          searchBy,\r\n        })\r\n      );\r\n      dispatch(\r\n        getClaimsTabDetails({\r\n          requestType: filterTypeCall,\r\n          claimsType,\r\n          term: queryObject.search,\r\n          direction: 'desc',\r\n          searchBy,\r\n          filterTerm: queryObject.filters,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleResetFilter = () => {\r\n    setValue('lastUpdatedDate', null);\r\n    dispatch(resetClaimsTabFilters());\r\n    dispatch(\r\n      getClaimsTabDetails({\r\n        requestType: searchTypeCall,\r\n        claimsType,\r\n        term: searchTerm,\r\n        filterTerm: '',\r\n        direction: 'desc',\r\n        searchBy,\r\n      })\r\n    );\r\n    dispatch(\r\n      getClaimsTabDetails({\r\n        requestType: filterTypeCall,\r\n        claimsType,\r\n        term: searchTerm,\r\n        filterTerm: '',\r\n        direction: 'desc',\r\n        searchBy,\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleSearchFilter = (data) => {\r\n    return dispatch(\r\n      getClaimsTabDetails({\r\n        requestType: searchTypeCall,\r\n        claimsType,\r\n        term: data.search,\r\n        filterTerm: data.filters,\r\n        searchBy,\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleSort = (by, dir) => {\r\n    dispatch(\r\n      getClaimsTabDetails({\r\n        requestType: searchTypeCall,\r\n        claimsType,\r\n        sortBy: by,\r\n        direction: dir.toUpperCase(),\r\n        term: searchTerm,\r\n        searchBy,\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleChangePage = (newPage) => {\r\n    dispatch(\r\n      getClaimsTabDetails({\r\n        requestType: searchTypeCall,\r\n        claimsType,\r\n        page: newPage,\r\n        term: searchTerm,\r\n        searchBy,\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (rowsPerPage) => {\r\n    dispatch(\r\n      getClaimsTabDetails({\r\n        requestType: searchTypeCall,\r\n        claimsType,\r\n        size: rowsPerPage,\r\n        term: searchTerm,\r\n        searchBy,\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleResetSearch = () => {\r\n    setResetKey(new Date().getTime());\r\n    dispatch(resetClaimsTabSearch());\r\n    dispatch(resetClaimsTabFilters());\r\n    setValue('lastUpdatedDate', null);\r\n    dispatch(getClaimsTabDetails({ requestType: searchTypeCall, claimsType, filterTerm: [], searchBy }));\r\n    dispatch(\r\n      getClaimsTabDetails({\r\n        requestType: filterTypeCall,\r\n        claimsType,\r\n        filterTerm: [],\r\n        searchBy,\r\n      })\r\n    );\r\n  };\r\n\r\n  const onSelectSearchBy = (searchByValue, searchByLabel) => {\r\n    setSearchByText(searchByLabel);\r\n    setSearchBy(searchByValue);\r\n    const claimsData = { ...claimsTabData };\r\n    claimsData.searchBy = searchByValue;\r\n    dispatch(getClaimsTabData(claimsData));\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      id: 'claimRef',\r\n      label: utils.string.t('claims.claimsTab.tablecolumns.claimRef'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      narrow: true,\r\n      nowrap: true,\r\n      visible: true,\r\n      mandatory: true,\r\n    },\r\n    {\r\n      id: 'lossRef',\r\n      label: utils.string.t('claims.claimsTab.tablecolumns.lossRef'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      narrow: true,\r\n      nowrap: true,\r\n      visible: true,\r\n      mandatory: true,\r\n    },\r\n    {\r\n      id: 'lossDateFrom',\r\n      label: utils.string.t('claims.claimsTab.tablecolumns.lossDateFrom'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      ellipsis: true,\r\n      visible: true,\r\n    },\r\n    {\r\n      id: 'assured',\r\n      label: utils.string.t('claims.claimsTab.tablecolumns.insured'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      ellipsis: true,\r\n      visible: true,\r\n    },\r\n    {\r\n      id: 'policyRef',\r\n      label: utils.string.t('claims.claimsTab.tablecolumns.policyRef'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n    },\r\n    {\r\n      id: 'division',\r\n      label: utils.string.t('claims.claimsTab.tablecolumns.division'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n    },\r\n    {\r\n      id: 'claimStatus',\r\n      label: utils.string.t('claims.claimsTab.tablecolumns.claimStatus'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n    },\r\n    {\r\n      id: 'claimStage',\r\n      label: utils.string.t('claims.claimsTab.tablecolumns.claimStage'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n    },\r\n    {\r\n      id: 'assignedTo',\r\n      label: utils.string.t('claims.claimsTab.tablecolumns.assignedTo'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: true,\r\n      mandatory: true,\r\n      nowrap: true,\r\n    },\r\n    {\r\n      id: 'team',\r\n      label: utils.string.t('claims.claimsTab.tablecolumns.team'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: true,\r\n      mandatory: true,\r\n    },\r\n    {\r\n      id: 'lastUpdated',\r\n      label: utils.string.t('claims.claimsTab.tablecolumns.lastUpdated'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: true,\r\n      mandatory: true,\r\n    },\r\n    {\r\n      id: 'priority',\r\n      label: utils.string.t('claims.claimsTab.tablecolumns.priority'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: true,\r\n    },\r\n    {\r\n      id: 'catCodesID',\r\n      label: utils.string.t('claims.claimsTab.tablecolumns.catCode'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      ellipsis: true,\r\n    },\r\n    {\r\n      id: 'claimReceivedDateTime',\r\n      label: utils.string.t('claims.claimsTab.tablecolumns.claimReceivedDateTime'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      narrow: true,\r\n      nowrap: true,\r\n    },\r\n    {\r\n      id: 'createdDate',\r\n      label: utils.string.t('claims.claimsTab.tablecolumns.createdDate'),\r\n      sort: { type: 'date', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: false,\r\n    },\r\n    {\r\n      id: 'closedDate',\r\n      label: utils.string.t('claims.claimsTab.tablecolumns.closedDate'),\r\n      sort: { type: 'date', direction: 'asc' },\r\n      nowrap: true,\r\n    },\r\n    {\r\n      id: 'complexity',\r\n      label: utils.string.t('claims.claimsTab.tablecolumns.complexity'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: false,\r\n    },\r\n    {\r\n      id: 'ucr',\r\n      label: utils.string.t('claims.claimsTab.tablecolumns.ucr'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: false,\r\n    },\r\n    {\r\n      id: 'policyType',\r\n      label: utils.string.t('claims.claimsTab.tablecolumns.policyType'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: false,\r\n    },\r\n    {\r\n      id: 'claimantName',\r\n      label: utils.string.t('claims.claimsTab.tablecolumns.claimant'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: false,\r\n      ellipsis: true,\r\n    },\r\n    {\r\n      id: 'reinsured',\r\n      label: utils.string.t('claims.claimsTab.tablecolumns.reinsured'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: false,\r\n    },\r\n    {\r\n      id: 'client',\r\n      label: utils.string.t('claims.claimsTab.tablecolumns.client'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n    },\r\n    {\r\n      id: 'interest',\r\n      label: utils.string.t('claims.claimsTab.tablecolumns.interest'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: false,\r\n    },\r\n    {\r\n      id: 'createdBy',\r\n      label: utils.string.t('claims.claimsTab.tablecolumns.createdBy'),\r\n      sort: { type: 'numeric', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: false,\r\n    },\r\n    {\r\n      id: 'company',\r\n      label: utils.string.t('claims.claimsTab.tablecolumns.company'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n    },\r\n    {\r\n      id: 'coverholder',\r\n      label: utils.string.t('claims.claimsTab.tablecolumns.coverholder'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n      visible: false,\r\n    },\r\n    {\r\n      id: 'lossToDate',\r\n      label: utils.string.t('claims.claimsTab.tablecolumns.lossDateTo'),\r\n      sort: { type: 'date', direction: 'asc' },\r\n      nowrap: true,\r\n    },\r\n    {\r\n      id: 'lossDateQualifier',\r\n      label: utils.string.t('claims.claimsTab.tablecolumns.lossDateQualifier'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n    },\r\n    {\r\n      id: 'lossDetails',\r\n      label: utils.string.t('claims.claimsTab.tablecolumns.lossDetails'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n      ellipsis: true,\r\n    },\r\n    {\r\n      id: 'pasClaimRef',\r\n      label: utils.string.t('claims.claimsTab.tablecolumns.pasClaimRef'),\r\n      sort: { type: 'numeric', direction: 'asc' },\r\n      nowrap: true,\r\n    },\r\n\r\n    {\r\n      id: 'pasStatus',\r\n      label: utils.string.t('claims.claimsTab.tablecolumns.pasStatus'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      nowrap: true,\r\n    },\r\n  ];\r\n\r\n  const { columns: columnsArray, columnProps, toggleColumn } = useFlexiColumns(columns);\r\n\r\n  return (\r\n    <ClaimsTabView\r\n      claims={claimsTabTableRowDetails}\r\n      searchTerm={claimsTabData?.searchText || ''}\r\n      sort={{\r\n        ...claimsTabData?.tableDetails?.sort,\r\n      }}\r\n      columnsArray={columnsArray}\r\n      columnProps={columnProps}\r\n      viewFields={viewFields}\r\n      tableFilterFields={tableFilterFields}\r\n      isFetchingFilters={isFetchingFilters}\r\n      control={control}\r\n      resetKey={resetKey}\r\n      handlers={{\r\n        search: handleSearch,\r\n        searchFilter: handleSearchFilter,\r\n        resetFilter: handleResetFilter,\r\n        sort: handleSort,\r\n        changePage: handleChangePage,\r\n        changeRowsPerPage: handleChangeRowsPerPage,\r\n        toggleColumn,\r\n        resetSearch: handleResetSearch,\r\n        onSelectSearchBy,\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}