{"ast":null,"code":"import _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\components\\\\DmsWidget\\\\DmsFnolWidget.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport get from 'lodash/get'; //app\n\nimport { TreeView } from 'components';\nimport { selectDmsDocDetails, selectClaimData, selectLossId, selectClaimAssociateWithLoss, getClaimsAssociateWithLoss, getViewTableDocuments, selectDmsWidgetClaimDocs } from 'stores';\nimport config from 'config';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DmsWidget() {\n  _s();\n\n  var _associatedClaims$map, _dmsWidgetClaimDocs$c, _claimRefsArray$, _data$children;\n\n  var dispatch = useDispatch();\n  var lossInformation = useSelector(selectLossId);\n  var savedDmsDocList = useSelector(selectDmsDocDetails);\n  var claimData = useSelector(selectClaimData);\n  var associatedClaims = useSelector(selectClaimAssociateWithLoss);\n  var dmsWidgetClaimDocs = useSelector(selectDmsWidgetClaimDocs);\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      filteredData = _useState2[0],\n      setFilteredData = _useState2[1];\n\n  var currentLossDetailId = get(lossInformation, 'lossDetailID');\n  var currentLossRef = get(lossInformation, 'lossRef');\n  var lossDocDetails = get(savedDmsDocList, 'lossDocDetails');\n  var currentClaimRef = get(claimData, 'claimRef') || get(claimData, 'claimReference');\n  useEffect(function () {\n    if (currentLossDetailId) {\n      dispatch(getClaimsAssociateWithLoss(currentLossDetailId));\n    }\n  }, [currentLossDetailId]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    if (currentClaimRef) {\n      dispatch(getViewTableDocuments({\n        referenceId: currentClaimRef,\n        sectionType: \"Claim\",\n        isFromDmsWidget: true\n      }));\n    }\n  }, [currentClaimRef]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var claimRefsArray = associatedClaims === null || associatedClaims === void 0 ? void 0 : (_associatedClaims$map = associatedClaims.map(function (item) {\n    return item.claimReference;\n  })) === null || _associatedClaims$map === void 0 ? void 0 : _associatedClaims$map.filter(function (claimref) {\n    return claimref !== currentClaimRef;\n  });\n\n  var createSortedDocs = function createSortedDocs(docs) {\n    return docs === null || docs === void 0 ? void 0 : docs.sort(function (doc1, doc2) {\n      return new Date(doc1 === null || doc1 === void 0 ? void 0 : doc1.updatedDate) - new Date(doc2 === null || doc2 === void 0 ? void 0 : doc2.updatedDate);\n    });\n  };\n\n  var lossDocuments = createSortedDocs(lossDocDetails === null || lossDocDetails === void 0 ? void 0 : lossDocDetails.map(function (doc) {\n    return _objectSpread(_objectSpread({}, doc), {}, {\n      id: doc.documentId,\n      label: doc.documentName,\n      labelInfo: utils.string.t('format.date', {\n        value: {\n          date: doc === null || doc === void 0 ? void 0 : doc.updatedDate,\n          format: config.ui.format.date.text\n        }\n      })\n    });\n  }));\n  var currentClaimDocuments = createSortedDocs((_dmsWidgetClaimDocs$c = dmsWidgetClaimDocs[currentClaimRef]) === null || _dmsWidgetClaimDocs$c === void 0 ? void 0 : _dmsWidgetClaimDocs$c.map(function (doc) {\n    return _objectSpread(_objectSpread({}, doc), {}, {\n      id: doc.documentId,\n      label: doc.documentName,\n      labelInfo: utils.string.t('format.date', {\n        value: {\n          date: doc === null || doc === void 0 ? void 0 : doc.updatedDate,\n          format: config.ui.format.date.text\n        }\n      })\n    });\n  }));\n  var openedChild = [].concat(_toConsumableArray(lossDocuments), _toConsumableArray(currentClaimRef ? [{\n    id: 'child1',\n    label: (currentClaimDocuments === null || currentClaimDocuments === void 0 ? void 0 : currentClaimDocuments.length) ? \"Claim \".concat(currentClaimRef) : '',\n    labelInfo: '',\n    children: currentClaimDocuments\n  }] : []));\n  var closedChild = (claimRefsArray === null || claimRefsArray === void 0 ? void 0 : (_claimRefsArray$ = claimRefsArray[0]) === null || _claimRefsArray$ === void 0 ? void 0 : _claimRefsArray$.claimId) ? claimRefsArray === null || claimRefsArray === void 0 ? void 0 : claimRefsArray.map(function (item) {\n    return {\n      id: item,\n      label: item ? \"Claim \".concat(item) : '',\n      labelInfo: '',\n      children: createSortedDocs([dmsWidgetClaimDocs[item]])\n    };\n  }) : [];\n  var rootChildren = [].concat(_toConsumableArray(openedChild), _toConsumableArray(closedChild));\n  var data = {\n    id: 'root',\n    label: (rootChildren === null || rootChildren === void 0 ? void 0 : rootChildren.length) ? \"Loss Reference \".concat(currentLossRef) : '',\n    labelInfo: '',\n    children: rootChildren\n  };\n  var arr = [];\n  data === null || data === void 0 ? void 0 : (_data$children = data.children) === null || _data$children === void 0 ? void 0 : _data$children.forEach(function (child) {\n    if (child.labelInfo) {\n      arr.push(child);\n    } else {\n      var _child$children;\n\n      child === null || child === void 0 ? void 0 : (_child$children = child.children) === null || _child$children === void 0 ? void 0 : _child$children.forEach(function (child) {\n        if (child) {\n          arr.push(child);\n        }\n      });\n    }\n  });\n\n  var handleSelect = function handleSelect(_, nodeIds) {\n    if (nodeIds !== 'root' && nodeIds !== 'child1') {\n      dispatch(getViewTableDocuments({\n        referenceId: nodeIds,\n        sectionType: 'Claim',\n        isFromDmsWidget: true\n      }));\n    }\n  };\n\n  var submitSearch = function submitSearch(query) {\n    var filteredData = createSortedDocs(arr === null || arr === void 0 ? void 0 : arr.filter(function (doc) {\n      return doc.documentName.includes(query);\n    }));\n    setFilteredData(filteredData);\n  };\n\n  var resetSearch = function resetSearch() {\n    setFilteredData([]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(TreeView, {\n    handleAccordionClick: handleSelect,\n    treeData: data,\n    rootRef: currentLossRef,\n    widgetTitle: utils.string.t('dms.view.documents.title'),\n    columns: [{\n      header: utils.string.t('dms.upload.file'),\n      flex: '0.8',\n      ml: '8px'\n    }, {\n      header: utils.string.t('dms.upload.uploadedOn'),\n      flex: '0.375'\n    }],\n    defaultExpanded: ['child1', 'root'],\n    filteredData: filteredData,\n    handlers: {\n      submitSearch: submitSearch,\n      resetSearch: resetSearch\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DmsWidget, \"UyOswdezUEKF1PgoNqY9LKb8KVc=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = DmsWidget;\n\nvar _c;\n\n$RefreshReg$(_c, \"DmsWidget\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/DmsWidget/DmsFnolWidget.js"],"names":["React","useEffect","useState","useSelector","useDispatch","get","TreeView","selectDmsDocDetails","selectClaimData","selectLossId","selectClaimAssociateWithLoss","getClaimsAssociateWithLoss","getViewTableDocuments","selectDmsWidgetClaimDocs","config","utils","DmsWidget","dispatch","lossInformation","savedDmsDocList","claimData","associatedClaims","dmsWidgetClaimDocs","filteredData","setFilteredData","currentLossDetailId","currentLossRef","lossDocDetails","currentClaimRef","referenceId","sectionType","isFromDmsWidget","claimRefsArray","map","item","claimReference","filter","claimref","createSortedDocs","docs","sort","doc1","doc2","Date","updatedDate","lossDocuments","doc","id","documentId","label","documentName","labelInfo","string","t","value","date","format","ui","text","currentClaimDocuments","openedChild","length","children","closedChild","claimId","rootChildren","data","arr","forEach","child","push","handleSelect","_","nodeIds","submitSearch","query","includes","resetSearch","header","flex","ml"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport get from 'lodash/get';\r\n\r\n//app\r\nimport { TreeView } from 'components';\r\nimport {\r\n  selectDmsDocDetails,\r\n  selectClaimData,\r\n  selectLossId,\r\n  selectClaimAssociateWithLoss,\r\n  getClaimsAssociateWithLoss,\r\n  getViewTableDocuments,\r\n  selectDmsWidgetClaimDocs\r\n} from 'stores';\r\nimport config from 'config';\r\nimport * as utils from 'utils';\r\n\r\nexport default function DmsWidget() {\r\n  const dispatch = useDispatch();\r\n  const lossInformation = useSelector(selectLossId);\r\n  const savedDmsDocList = useSelector(selectDmsDocDetails);\r\n  const claimData = useSelector(selectClaimData);\r\n  const associatedClaims = useSelector(selectClaimAssociateWithLoss);\r\n  const dmsWidgetClaimDocs = useSelector(selectDmsWidgetClaimDocs);\r\n  const [filteredData, setFilteredData] = useState([]);\r\n  const currentLossDetailId = get(lossInformation, 'lossDetailID');\r\n  const currentLossRef = get(lossInformation, 'lossRef');\r\n  const lossDocDetails = get(savedDmsDocList, 'lossDocDetails');\r\n  const currentClaimRef = get(claimData, 'claimRef') || get(claimData, 'claimReference');\r\n\r\n  useEffect(() => {\r\n    if (currentLossDetailId) {\r\n      dispatch(getClaimsAssociateWithLoss(currentLossDetailId))\r\n    }\r\n  }, [currentLossDetailId]) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    if (currentClaimRef) {\r\n      dispatch(getViewTableDocuments({ referenceId: currentClaimRef, sectionType: \"Claim\", isFromDmsWidget: true }))\r\n    }\r\n  }, [currentClaimRef]) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const claimRefsArray = associatedClaims?.map((item) => item.claimReference)?.filter((claimref) => claimref !== currentClaimRef);\r\n\r\n  const createSortedDocs = (docs) => (\r\n    docs?.sort((doc1, doc2) => new Date(doc1?.updatedDate) - new Date(doc2?.updatedDate))\r\n  )\r\n\r\n  const lossDocuments = createSortedDocs(lossDocDetails?.map((doc) => {\r\n    return {\r\n      ...doc,\r\n      id: doc.documentId,\r\n      label: doc.documentName,\r\n      labelInfo: utils.string.t('format.date', { value: { date: doc?.updatedDate, format: config.ui.format.date.text } })\r\n    }\r\n  }));\r\n\r\n  const currentClaimDocuments = createSortedDocs(dmsWidgetClaimDocs[currentClaimRef]?.map((doc) => {\r\n    return {\r\n      ...doc,\r\n      id: doc.documentId,\r\n      label: doc.documentName,\r\n      labelInfo: utils.string.t('format.date', { value: { date: doc?.updatedDate, format: config.ui.format.date.text } })\r\n    }\r\n  }));\r\n\r\n  const openedChild = [\r\n    ...lossDocuments,\r\n    ...(currentClaimRef ? [{\r\n      id: 'child1',\r\n      label: currentClaimDocuments?.length ? `Claim ${currentClaimRef}` : '',\r\n      labelInfo: '',\r\n      children: currentClaimDocuments\r\n    }] : [])\r\n  ]\r\n\r\n  const closedChild = claimRefsArray?.[0]?.claimId\r\n    ? claimRefsArray?.map((item) => {\r\n      return {\r\n        id: item, label: item ? `Claim ${item}` : '',\r\n        labelInfo: '',\r\n        children: createSortedDocs([dmsWidgetClaimDocs[item]])\r\n      }\r\n    })\r\n    : [];\r\n\r\n  const rootChildren = [...openedChild, ...closedChild];\r\n\r\n  const data = {\r\n    id: 'root',\r\n    label: rootChildren?.length ? `Loss Reference ${currentLossRef}` : '',\r\n    labelInfo: '',\r\n    children: rootChildren\r\n  };\r\n\r\n  let arr = [];\r\n\r\n  data?.children?.forEach(child => {\r\n    if (child.labelInfo) {\r\n      arr.push(child)\r\n    } else {\r\n      child?.children?.forEach(child => {\r\n        if (child) {\r\n          arr.push(child)\r\n        }\r\n      })\r\n    }\r\n  });\r\n  \r\n  const handleSelect = (_, nodeIds) => {\r\n    if (nodeIds !== 'root' && nodeIds !== 'child1') {\r\n      dispatch(getViewTableDocuments({ referenceId: nodeIds, sectionType: 'Claim', isFromDmsWidget: true }));\r\n    }\r\n  }\r\n\r\n  const submitSearch = (query) => {\r\n    const filteredData = createSortedDocs(arr?.filter(doc => doc.documentName.includes(query)));\r\n    setFilteredData(filteredData);\r\n  }\r\n\r\n  const resetSearch = () => {\r\n    setFilteredData([]);\r\n  }\r\n\r\n  return (\r\n    <TreeView\r\n      handleAccordionClick={handleSelect}\r\n      treeData={data}\r\n      rootRef={currentLossRef}\r\n      widgetTitle={utils.string.t('dms.view.documents.title')}\r\n      columns={[\r\n        { header: utils.string.t('dms.upload.file'), flex: '0.8', ml: '8px' },\r\n        { header: utils.string.t('dms.upload.uploadedOn'), flex: '0.375' }\r\n      ]}\r\n      defaultExpanded={['child1', 'root']}\r\n      filteredData={filteredData}\r\n      handlers={{\r\n        submitSearch,\r\n        resetSearch\r\n      }}\r\n    />\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}