{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ClaimsComplexityContractPolicyRef\\\\ClaimsComplexityContractPolicyRef.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport moment from 'moment'; // app\n\nimport { ClaimsComplexityContractPolicyRefView } from './ClaimsComplexityContractPolicyRef.view';\nimport { selectComplexityPoliciesFlagged, hideModal, getComplexityPoliciesFlagged, selectComplexityPoliciesAdded, removeComplexityPolicy, showModal } from 'stores';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nClaimsComplexityContractPolicyRef.propTypes = {\n  setIsSelectedTabDirty: PropTypes.func.isRequired\n};\nexport default function ClaimsComplexityContractPolicyRef(_ref) {\n  _s();\n\n  var setIsSelectedTabDirty = _ref.setIsSelectedTabDirty;\n  var dispatch = useDispatch();\n  var complexityPoliciesFlagged = useSelector(selectComplexityPoliciesFlagged);\n  var complexityPoliciesAdded = useSelector(selectComplexityPoliciesAdded);\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      searchTerm = _useState2[0],\n      setSearchTerm = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      resetKey = _useState4[0],\n      setResetKey = _useState4[1];\n\n  var addPolicy = function addPolicy() {\n    dispatch(showModal({\n      component: 'COMPLEXITY_MANAGEMENT_ADD_POLICY',\n      props: {\n        title: utils.string.t('claims.complexityRulesManagementDetails.selectPolicy'),\n        fullWidth: true,\n        hideCompOnBlur: false,\n        maxWidth: 'xl',\n        disableAutoFocus: true,\n        disable: false,\n        componentProps: {\n          clickOutSideHandler: function clickOutSideHandler() {\n            return _clickOutSideHandler();\n          }\n        }\n      }\n    }));\n  };\n\n  var _clickOutSideHandler = function _clickOutSideHandler() {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        title: utils.string.t('status.alert'),\n        hint: utils.string.t('navigation.title'),\n        fullWidth: true,\n        maxWidth: 'xs',\n        componentProps: {\n          cancelLabel: utils.string.t('app.no'),\n          confirmLabel: utils.string.t('app.yes'),\n          submitHandler: function submitHandler() {\n            dispatch(hideModal());\n          }\n        }\n      }\n    }));\n  };\n\n  var removingPolicy = function removingPolicy(selectedPolicies) {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        title: utils.string.t('status.alert'),\n        subtitle: utils.string.t('claims.modals.confirmInsured.title'),\n        fullWidth: true,\n        maxWidth: 'sm',\n        componentProps: {\n          cancelLabel: utils.string.t('app.no'),\n          confirmLabel: utils.string.t('app.yes'),\n          submitHandler: function () {\n            var _submitHandler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n              return _regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      _context.next = 2;\n                      return dispatch(removeComplexityPolicy(selectedPolicies));\n\n                    case 2:\n                      _context.next = 4;\n                      return dispatch(getComplexityPoliciesFlagged({\n                        term: null,\n                        sortBy: '',\n                        direction: ''\n                      }));\n\n                    case 4:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, _callee);\n            }));\n\n            function submitHandler() {\n              return _submitHandler.apply(this, arguments);\n            }\n\n            return submitHandler;\n          }(),\n          cancelHandler: function cancelHandler() {\n            dispatch(hideModal());\n          }\n        }\n      }\n    }));\n  };\n\n  var columns = [{\n    id: 'actions',\n    empty: true\n  }, {\n    id: 'policyNumber',\n    label: utils.string.t('claims.complexityContractPolicy.tableColumns.contractOrPolicyRef'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    }\n  }, {\n    id: 'policyType',\n    label: utils.string.t('claims.complexityContractPolicy.tableColumns.policyType'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    }\n  }, {\n    id: 'insured',\n    label: utils.string.t('claims.complexityContractPolicy.tableColumns.insured'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    }\n  }, {\n    id: 'claimant',\n    label: utils.string.t('claims.complexityContractPolicy.tableColumns.claimant'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    }\n  }, {\n    id: 'riskDetails',\n    label: utils.string.t('claims.complexityContractPolicy.tableColumns.riskDetails'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    }\n  }, {\n    id: 'inceptionDate',\n    label: utils.string.t('claims.complexityContractPolicy.tableColumns.inceptionDate'),\n    sort: {\n      type: 'date',\n      direction: 'asc'\n    }\n  }, {\n    id: 'expiryDate',\n    label: utils.string.t('claims.complexityContractPolicy.tableColumns.expiryDate'),\n    sort: {\n      type: 'date',\n      direction: 'asc'\n    }\n  }, {\n    id: 'company',\n    label: utils.string.t('claims.complexityContractPolicy.tableColumns.company'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    }\n  }, {\n    id: 'division',\n    label: utils.string.t('claims.complexityContractPolicy.tableColumns.division'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    }\n  }];\n\n  var handleReset = function handleReset() {\n    setSearchTerm('');\n    setResetKey(moment().format());\n    dispatch(getComplexityPoliciesFlagged({\n      term: null,\n      sortBy: '',\n      direction: ''\n    }));\n  };\n\n  var handleSearch = function handleSearch(query) {\n    setSearchTerm(query);\n    return dispatch(getComplexityPoliciesFlagged({\n      term: query\n    }));\n  };\n\n  var handleChangePage = function handleChangePage(newPage) {\n    dispatch(getComplexityPoliciesFlagged({\n      page: newPage,\n      term: searchTerm,\n      sortBy: '',\n      direction: ''\n    }));\n  };\n\n  var handleChangeRowsPerPage = function handleChangeRowsPerPage(rowsPerPage) {\n    dispatch(getComplexityPoliciesFlagged({\n      size: rowsPerPage,\n      term: searchTerm,\n      sortBy: '',\n      direction: ''\n    }));\n  };\n\n  var handleSort = function handleSort(by, dir) {\n    dispatch(getComplexityPoliciesFlagged({\n      sortBy: by,\n      direction: dir.toUpperCase(),\n      term: searchTerm\n    }));\n  };\n\n  useEffect(function () {\n    dispatch(getComplexityPoliciesFlagged({\n      term: null,\n      sortBy: '',\n      direction: ''\n    }));\n  }, [complexityPoliciesAdded] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  return /*#__PURE__*/_jsxDEV(ClaimsComplexityContractPolicyRefView, {\n    cols: columns,\n    rows: complexityPoliciesFlagged === null || complexityPoliciesFlagged === void 0 ? void 0 : complexityPoliciesFlagged.items,\n    sort: _objectSpread(_objectSpread({}, complexityPoliciesFlagged.sort), {}, {\n      type: ''\n    }),\n    pagination: {\n      page: complexityPoliciesFlagged.page,\n      rowsTotal: complexityPoliciesFlagged.itemsTotal,\n      rowsPerPage: complexityPoliciesFlagged.pageSize\n    },\n    setIsSelectedTabDirty: setIsSelectedTabDirty,\n    handlers: {\n      handleSort: handleSort,\n      handleSearch: handleSearch,\n      handleReset: handleReset,\n      handleChangePage: handleChangePage,\n      handleChangeRowsPerPage: handleChangeRowsPerPage,\n      addPolicy: addPolicy,\n      removingPolicy: removingPolicy\n    },\n    resetKey: resetKey\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ClaimsComplexityContractPolicyRef, \"CnxHA9vc3S4WGn03ouGkS06Jqts=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = ClaimsComplexityContractPolicyRef;\nClaimsComplexityContractPolicyRef.displayName = \"ClaimsComplexityContractPolicyRef\";\nClaimsComplexityContractPolicyRef.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"ClaimsComplexityContractPolicyRef\",\n  \"props\": {\n    \"setIsSelectedTabDirty\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\modules\\\\ClaimsComplexityContractPolicyRef\\\\ClaimsComplexityContractPolicyRef.js\"] = {\n    name: \"ClaimsComplexityContractPolicyRef\",\n    docgenInfo: ClaimsComplexityContractPolicyRef.__docgenInfo,\n    path: \"src\\\\modules\\\\ClaimsComplexityContractPolicyRef\\\\ClaimsComplexityContractPolicyRef.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimsComplexityContractPolicyRef\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ClaimsComplexityContractPolicyRef/ClaimsComplexityContractPolicyRef.js"],"names":["React","useState","useEffect","useDispatch","useSelector","PropTypes","moment","ClaimsComplexityContractPolicyRefView","selectComplexityPoliciesFlagged","hideModal","getComplexityPoliciesFlagged","selectComplexityPoliciesAdded","removeComplexityPolicy","showModal","utils","ClaimsComplexityContractPolicyRef","propTypes","setIsSelectedTabDirty","func","isRequired","dispatch","complexityPoliciesFlagged","complexityPoliciesAdded","searchTerm","setSearchTerm","resetKey","setResetKey","addPolicy","component","props","title","string","t","fullWidth","hideCompOnBlur","maxWidth","disableAutoFocus","disable","componentProps","clickOutSideHandler","hint","cancelLabel","confirmLabel","submitHandler","removingPolicy","selectedPolicies","subtitle","term","sortBy","direction","cancelHandler","columns","id","empty","label","sort","type","handleReset","format","handleSearch","query","handleChangePage","newPage","page","handleChangeRowsPerPage","rowsPerPage","size","handleSort","by","dir","toUpperCase","items","rowsTotal","itemsTotal","pageSize"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport moment from 'moment';\r\n\r\n// app\r\nimport { ClaimsComplexityContractPolicyRefView } from './ClaimsComplexityContractPolicyRef.view';\r\nimport {\r\n  selectComplexityPoliciesFlagged,\r\n  hideModal,\r\n  getComplexityPoliciesFlagged,\r\n  selectComplexityPoliciesAdded,\r\n  removeComplexityPolicy,\r\n  showModal,\r\n} from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nClaimsComplexityContractPolicyRef.propTypes = {\r\n  setIsSelectedTabDirty: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default function ClaimsComplexityContractPolicyRef({ setIsSelectedTabDirty }) {\r\n  const dispatch = useDispatch();\r\n  const complexityPoliciesFlagged = useSelector(selectComplexityPoliciesFlagged);\r\n  const complexityPoliciesAdded = useSelector(selectComplexityPoliciesAdded);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [resetKey, setResetKey] = useState();\r\n\r\n  const addPolicy = () => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'COMPLEXITY_MANAGEMENT_ADD_POLICY',\r\n        props: {\r\n          title: utils.string.t('claims.complexityRulesManagementDetails.selectPolicy'),\r\n          fullWidth: true,\r\n          hideCompOnBlur: false,\r\n          maxWidth: 'xl',\r\n          disableAutoFocus: true,\r\n          disable: false,\r\n          componentProps: {\r\n            clickOutSideHandler: () => clickOutSideHandler(),\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const clickOutSideHandler = () => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          title: utils.string.t('status.alert'),\r\n          hint: utils.string.t('navigation.title'),\r\n          fullWidth: true,\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            cancelLabel: utils.string.t('app.no'),\r\n            confirmLabel: utils.string.t('app.yes'),\r\n            submitHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const removingPolicy = (selectedPolicies) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          title: utils.string.t('status.alert'),\r\n          subtitle: utils.string.t('claims.modals.confirmInsured.title'),\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          componentProps: {\r\n            cancelLabel: utils.string.t('app.no'),\r\n            confirmLabel: utils.string.t('app.yes'),\r\n            submitHandler: async () => {\r\n              await dispatch(removeComplexityPolicy(selectedPolicies));\r\n              await dispatch(getComplexityPoliciesFlagged({ term: null, sortBy: '', direction: '' }));\r\n            },\r\n            cancelHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const columns = [\r\n    { id: 'actions', empty: true },\r\n    {\r\n      id: 'policyNumber',\r\n      label: utils.string.t('claims.complexityContractPolicy.tableColumns.contractOrPolicyRef'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n    },\r\n    {\r\n      id: 'policyType',\r\n      label: utils.string.t('claims.complexityContractPolicy.tableColumns.policyType'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n    },\r\n    {\r\n      id: 'insured',\r\n      label: utils.string.t('claims.complexityContractPolicy.tableColumns.insured'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n    },\r\n    {\r\n      id: 'claimant',\r\n      label: utils.string.t('claims.complexityContractPolicy.tableColumns.claimant'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n    },\r\n    {\r\n      id: 'riskDetails',\r\n      label: utils.string.t('claims.complexityContractPolicy.tableColumns.riskDetails'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n    },\r\n    {\r\n      id: 'inceptionDate',\r\n      label: utils.string.t('claims.complexityContractPolicy.tableColumns.inceptionDate'),\r\n      sort: { type: 'date', direction: 'asc' },\r\n    },\r\n    {\r\n      id: 'expiryDate',\r\n      label: utils.string.t('claims.complexityContractPolicy.tableColumns.expiryDate'),\r\n      sort: { type: 'date', direction: 'asc' },\r\n    },\r\n    {\r\n      id: 'company',\r\n      label: utils.string.t('claims.complexityContractPolicy.tableColumns.company'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n    },\r\n    {\r\n      id: 'division',\r\n      label: utils.string.t('claims.complexityContractPolicy.tableColumns.division'),\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n    },\r\n  ];\r\n\r\n  const handleReset = () => {\r\n    setSearchTerm('');\r\n    setResetKey(moment().format());\r\n    dispatch(getComplexityPoliciesFlagged({ term: null, sortBy: '', direction: '' }));\r\n  };\r\n\r\n  const handleSearch = (query) => {\r\n    setSearchTerm(query);\r\n    return dispatch(getComplexityPoliciesFlagged({ term: query }));\r\n  };\r\n\r\n  const handleChangePage = (newPage) => {\r\n    dispatch(getComplexityPoliciesFlagged({ page: newPage, term: searchTerm, sortBy: '', direction: '' }));\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (rowsPerPage) => {\r\n    dispatch(getComplexityPoliciesFlagged({ size: rowsPerPage, term: searchTerm, sortBy: '', direction: '' }));\r\n  };\r\n\r\n  const handleSort = (by, dir) => {\r\n    dispatch(getComplexityPoliciesFlagged({ sortBy: by, direction: dir.toUpperCase(), term: searchTerm }));\r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n      dispatch(getComplexityPoliciesFlagged({ term: null, sortBy: '', direction: '' }));\r\n    },\r\n    [complexityPoliciesAdded] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  return (\r\n    <ClaimsComplexityContractPolicyRefView\r\n      cols={columns}\r\n      rows={complexityPoliciesFlagged?.items}\r\n      sort={{\r\n        ...complexityPoliciesFlagged.sort,\r\n        type: '',\r\n      }}\r\n      pagination={{\r\n        page: complexityPoliciesFlagged.page,\r\n        rowsTotal: complexityPoliciesFlagged.itemsTotal,\r\n        rowsPerPage: complexityPoliciesFlagged.pageSize,\r\n      }}\r\n      setIsSelectedTabDirty={setIsSelectedTabDirty}\r\n      handlers={{\r\n        handleSort,\r\n        handleSearch,\r\n        handleReset,\r\n        handleChangePage,\r\n        handleChangeRowsPerPage,\r\n        addPolicy,\r\n        removingPolicy,\r\n      }}\r\n      resetKey={resetKey}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}