{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport compact from 'lodash/compact';\nimport get from 'lodash/get'; // app\n\nimport * as utils from 'utils';\nimport { authLogout, addLoader, enqueueNotification, hideModal, removeLoader, updateSelectedLayerMarket } from 'stores';\nexport var editPlacementMarketsLayers = function editPlacementMarketsLayers(formData, dirtyFields) {\n  var closeModal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return function (dispatch, getState) {\n    var _formData$market_rati, _formData$market_decl, _formData$layerMarket, _formData$layerMarket2;\n\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/placement.actions.editPlacementMarketsLayers',\n      message: 'Data missing for PUT request'\n    };\n    dispatch(editPlacementMarketRequest(formData));\n    dispatch(addLoader('editPlacementMarketsLayers')); // || !formData.market?.id\n\n    if (!formData) {\n      dispatch(editPlacementMarketFailure(defaultError));\n      dispatch(enqueueNotification('notification.editPlacementMarketsLayers.fail', 'error'));\n\n      if (closeModal) {\n        dispatch(hideModal());\n      }\n\n      dispatch(removeLoader('editPlacementMarketsLayers'));\n      return;\n    }\n\n    var marketId = get(formData, 'market.id');\n    var layerMarketId = get(formData, 'layerMarket.id');\n    var isMarketEdited = ['market_notes', 'market_statusId', 'market_rationales', 'market_declinatures', 'market_underwriter'].some(function (field) {\n      return Object.keys(dirtyFields).includes(field);\n    });\n    var isLayerMarketEdited = ['layerMarket_statusId', 'layerMarket_isLeader', 'layerMarket_lineToStand', 'layerMarket_declinatures', 'layerMarket_uniqueMarketReference', 'layerMarket_section', 'layerMarket_subjectivities', 'layerMarket_currency', 'layerMarket_premium', 'layerMarket_writtenLinePercentage', 'layerMarket_quoteDate', 'layerMarket_validUntilDate'].some(function (field) {\n      return Object.keys(dirtyFields).includes(field);\n    });\n    return Promise.all(compact([isMarketEdited && marketId ? utils.api.put({\n      token: auth.accessToken,\n      endpoint: endpoint.edge,\n      path: \"api/placementMarket/\".concat(marketId),\n      data: {\n        notes: formData.market_notes || '',\n        statusId: formData.market_statusId || null,\n        rationaleIds: ((_formData$market_rati = formData.market_rationales) === null || _formData$market_rati === void 0 ? void 0 : _formData$market_rati.length) > 0 ? formData.market_rationales.map(function (r) {\n          return r.id;\n        }) : [],\n        declinatureIds: ((_formData$market_decl = formData.market_declinatures) === null || _formData$market_decl === void 0 ? void 0 : _formData$market_decl.length) > 0 ? formData.market_declinatures.map(function (d) {\n          return d.id;\n        }) : [],\n        underwriterId: get(formData, 'market_underwriter.id', null)\n      }\n    }) : null, isLayerMarketEdited && layerMarketId ? utils.api.patch({\n      token: auth.accessToken,\n      endpoint: endpoint.edge,\n      path: \"api/placementlayerMarket/\".concat(layerMarketId),\n      data: {\n        statusId: formData.layerMarket_statusId,\n        isLeader: formData.layerMarket_isLeader,\n        lineToStand: formData.layerMarket_lineToStand,\n        declinatureIds: ((_formData$layerMarket = formData.layerMarket_declinatures) === null || _formData$layerMarket === void 0 ? void 0 : _formData$layerMarket.length) > 0 ? formData.layerMarket_declinatures.map(function (d) {\n          return d.id;\n        }) : [],\n        uniqueMarketReference: get(formData, 'layerMarket_uniqueMarketReference.id', ''),\n        section: (_formData$layerMarket2 = formData.layerMarket_section) === null || _formData$layerMarket2 === void 0 ? void 0 : _formData$layerMarket2.toUpperCase(),\n        subjectivities: formData.layerMarket_subjectivities,\n        isoCode: formData.layerMarket_currency,\n        premium: formData.layerMarket_premium,\n        writtenLinePercentage: formData.layerMarket_writtenLinePercentage,\n        quoteDate: formData.layerMarket_quoteDate,\n        validUntilDate: formData.layerMarket_validUntilDate\n      }\n    }) : null])).then(function (response) {\n      return Promise.all(response.map(function (r) {\n        return utils.api.handleResponse(r);\n      }));\n    }).then(function (json) {\n      return Promise.all(json.map(function (j) {\n        return utils.api.handleData(j);\n      }));\n    }).then(function (data) {\n      var marketData = isMarketEdited ? data[0] : null;\n      var layerMarketData = isLayerMarketEdited ? isMarketEdited ? data[1] : data[0] : null; // success placementMarket update\n\n      if (isMarketEdited && marketData) {\n        dispatch(editPlacementMarketSuccess(marketData));\n      } // success placementLayerMarket update\n\n\n      if (isLayerMarketEdited) {\n        dispatch(editPlacementLayerMarketSuccess(layerMarketData));\n        dispatch(updateSelectedLayerMarket());\n      }\n\n      dispatch(enqueueNotification('notification.editPlacementMarketsLayers.success', 'success'));\n\n      if (closeModal) {\n        dispatch(hideModal());\n      }\n\n      dispatch(removeLoader('editPlacementMarketsLayers'));\n      return _objectSpread(_objectSpread({}, marketData && {\n        market: marketData\n      }), layerMarketData && {\n        layerMarket: layerMarketData\n      });\n    })[\"catch\"](function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API put error (placement.editPlacementMarketsLayers)'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(editPlacementMarketFailure(err));\n      dispatch(enqueueNotification('notification.editPlacementMarketsLayers.fail', 'error'));\n\n      if (closeModal) {\n        dispatch(hideModal());\n      }\n\n      dispatch(removeLoader('editPlacementMarketsLayers'));\n      return err;\n    });\n  };\n};\nexport var editPlacementMarketRequest = function editPlacementMarketRequest(data) {\n  return {\n    type: 'PLACEMENT_MARKET_EDIT_REQUEST',\n    payload: data\n  };\n};\nexport var editPlacementMarketSuccess = function editPlacementMarketSuccess(data) {\n  return {\n    type: 'PLACEMENT_MARKET_EDIT_SUCCESS',\n    payload: data\n  };\n};\nexport var editPlacementMarketFailure = function editPlacementMarketFailure(error) {\n  return {\n    type: 'PLACEMENT_MARKET_EDIT_FAILURE',\n    payload: error\n  };\n};\nexport var editPlacementLayerMarketSuccess = function editPlacementLayerMarketSuccess(responseData) {\n  return {\n    type: 'PLACEMENT_LAYER_MARKET_EDIT_SUCCESS',\n    payload: responseData\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/placement/placement.actions.editPlacementMarketsLayers.js"],"names":["compact","get","utils","authLogout","addLoader","enqueueNotification","hideModal","removeLoader","updateSelectedLayerMarket","editPlacementMarketsLayers","formData","dirtyFields","closeModal","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","message","editPlacementMarketRequest","editPlacementMarketFailure","marketId","layerMarketId","isMarketEdited","some","field","Object","keys","includes","isLayerMarketEdited","Promise","all","api","put","token","accessToken","edge","path","data","notes","market_notes","statusId","market_statusId","rationaleIds","market_rationales","length","map","r","id","declinatureIds","market_declinatures","d","underwriterId","patch","layerMarket_statusId","isLeader","layerMarket_isLeader","lineToStand","layerMarket_lineToStand","layerMarket_declinatures","uniqueMarketReference","section","layerMarket_section","toUpperCase","subjectivities","layerMarket_subjectivities","isoCode","layerMarket_currency","premium","layerMarket_premium","writtenLinePercentage","layerMarket_writtenLinePercentage","quoteDate","layerMarket_quoteDate","validUntilDate","layerMarket_validUntilDate","then","response","handleResponse","json","j","handleData","marketData","layerMarketData","editPlacementMarketSuccess","editPlacementLayerMarketSuccess","market","layerMarket","err","errorParams","handleError","handleUnauthorized","type","payload","error","responseData"],"mappings":"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","sourcesContent":["import compact from 'lodash/compact';\r\nimport get from 'lodash/get';\r\n\r\n// app\r\nimport * as utils from 'utils';\r\nimport { authLogout, addLoader, enqueueNotification, hideModal, removeLoader, updateSelectedLayerMarket } from 'stores';\r\n\r\nexport const editPlacementMarketsLayers =\r\n  (formData, dirtyFields, closeModal = true) =>\r\n  (dispatch, getState) => {\r\n    // prettier-ignore\r\n    const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n    const defaultError = {\r\n      file: 'stores/placement.actions.editPlacementMarketsLayers',\r\n      message: 'Data missing for PUT request',\r\n    };\r\n\r\n    dispatch(editPlacementMarketRequest(formData));\r\n    dispatch(addLoader('editPlacementMarketsLayers'));\r\n\r\n    // || !formData.market?.id\r\n    if (!formData) {\r\n      dispatch(editPlacementMarketFailure(defaultError));\r\n      dispatch(enqueueNotification('notification.editPlacementMarketsLayers.fail', 'error'));\r\n      if (closeModal) {\r\n        dispatch(hideModal());\r\n      }\r\n      dispatch(removeLoader('editPlacementMarketsLayers'));\r\n      return;\r\n    }\r\n\r\n    const marketId = get(formData, 'market.id');\r\n    const layerMarketId = get(formData, 'layerMarket.id');\r\n\r\n    const isMarketEdited = ['market_notes', 'market_statusId', 'market_rationales', 'market_declinatures', 'market_underwriter'].some(\r\n      (field) => Object.keys(dirtyFields).includes(field)\r\n    );\r\n\r\n    const isLayerMarketEdited = [\r\n      'layerMarket_statusId',\r\n      'layerMarket_isLeader',\r\n      'layerMarket_lineToStand',\r\n      'layerMarket_declinatures',\r\n      'layerMarket_uniqueMarketReference',\r\n      'layerMarket_section',\r\n      'layerMarket_subjectivities',\r\n      'layerMarket_currency',\r\n      'layerMarket_premium',\r\n      'layerMarket_writtenLinePercentage',\r\n      'layerMarket_quoteDate',\r\n      'layerMarket_validUntilDate',\r\n    ].some((field) => Object.keys(dirtyFields).includes(field));\r\n\r\n    return Promise.all(\r\n      compact([\r\n        isMarketEdited && marketId\r\n          ? utils.api.put({\r\n              token: auth.accessToken,\r\n              endpoint: endpoint.edge,\r\n              path: `api/placementMarket/${marketId}`,\r\n              data: {\r\n                notes: formData.market_notes || '',\r\n                statusId: formData.market_statusId || null,\r\n                rationaleIds: formData.market_rationales?.length > 0 ? formData.market_rationales.map((r) => r.id) : [],\r\n                declinatureIds: formData.market_declinatures?.length > 0 ? formData.market_declinatures.map((d) => d.id) : [],\r\n                underwriterId: get(formData, 'market_underwriter.id', null),\r\n              },\r\n            })\r\n          : null,\r\n        isLayerMarketEdited && layerMarketId\r\n          ? utils.api.patch({\r\n              token: auth.accessToken,\r\n              endpoint: endpoint.edge,\r\n              path: `api/placementlayerMarket/${layerMarketId}`,\r\n              data: {\r\n                statusId: formData.layerMarket_statusId,\r\n                isLeader: formData.layerMarket_isLeader,\r\n                lineToStand: formData.layerMarket_lineToStand,\r\n                declinatureIds: formData.layerMarket_declinatures?.length > 0 ? formData.layerMarket_declinatures.map((d) => d.id) : [],\r\n                uniqueMarketReference: get(formData, 'layerMarket_uniqueMarketReference.id', ''),\r\n                section: formData.layerMarket_section?.toUpperCase(),\r\n                subjectivities: formData.layerMarket_subjectivities,\r\n                isoCode: formData.layerMarket_currency,\r\n                premium: formData.layerMarket_premium,\r\n                writtenLinePercentage: formData.layerMarket_writtenLinePercentage,\r\n                quoteDate: formData.layerMarket_quoteDate,\r\n                validUntilDate: formData.layerMarket_validUntilDate,\r\n              },\r\n            })\r\n          : null,\r\n      ])\r\n    )\r\n      .then((response) => Promise.all(response.map((r) => utils.api.handleResponse(r))))\r\n      .then((json) => Promise.all(json.map((j) => utils.api.handleData(j))))\r\n      .then((data) => {\r\n        const marketData = isMarketEdited ? data[0] : null;\r\n        const layerMarketData = isLayerMarketEdited ? (isMarketEdited ? data[1] : data[0]) : null;\r\n\r\n        // success placementMarket update\r\n        if (isMarketEdited && marketData) {\r\n          dispatch(editPlacementMarketSuccess(marketData));\r\n        }\r\n\r\n        // success placementLayerMarket update\r\n        if (isLayerMarketEdited) {\r\n          dispatch(editPlacementLayerMarketSuccess(layerMarketData));\r\n          dispatch(updateSelectedLayerMarket());\r\n        }\r\n\r\n        dispatch(enqueueNotification('notification.editPlacementMarketsLayers.success', 'success'));\r\n\r\n        if (closeModal) {\r\n          dispatch(hideModal());\r\n        }\r\n\r\n        dispatch(removeLoader('editPlacementMarketsLayers'));\r\n\r\n        return {\r\n          ...(marketData && { market: marketData }),\r\n          ...(layerMarketData && { layerMarket: layerMarketData }),\r\n        };\r\n      })\r\n      .catch((err) => {\r\n        const errorParams = {\r\n          ...defaultError,\r\n          message: 'API put error (placement.editPlacementMarketsLayers)',\r\n        };\r\n\r\n        utils.api.handleError(err, errorParams);\r\n        utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n        dispatch(editPlacementMarketFailure(err));\r\n        dispatch(enqueueNotification('notification.editPlacementMarketsLayers.fail', 'error'));\r\n        if (closeModal) {\r\n          dispatch(hideModal());\r\n        }\r\n        dispatch(removeLoader('editPlacementMarketsLayers'));\r\n        return err;\r\n      });\r\n  };\r\n\r\nexport const editPlacementMarketRequest = (data) => {\r\n  return {\r\n    type: 'PLACEMENT_MARKET_EDIT_REQUEST',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const editPlacementMarketSuccess = (data) => {\r\n  return {\r\n    type: 'PLACEMENT_MARKET_EDIT_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const editPlacementMarketFailure = (error) => {\r\n  return {\r\n    type: 'PLACEMENT_MARKET_EDIT_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n\r\nexport const editPlacementLayerMarketSuccess = (responseData) => {\r\n  return {\r\n    type: 'PLACEMENT_LAYER_MARKET_EDIT_SUCCESS',\r\n    payload: responseData,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}