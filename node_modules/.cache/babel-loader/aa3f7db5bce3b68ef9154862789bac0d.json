{"ast":null,"code":"import distance from \"@turf/distance\";\nimport { segmentReduce } from \"@turf/meta\";\n/**\n * Takes a {@link GeoJSON} and measures its length in the specified units, {@link (Multi)Point}'s distance are ignored.\n *\n * @name length\n * @param {Feature<LineString|MultiLineString>} geojson GeoJSON to measure\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units=kilometers] can be degrees, radians, miles, or kilometers\n * @returns {number} length of GeoJSON\n * @example\n * var line = turf.lineString([[115, -32], [131, -22], [143, -25], [150, -34]]);\n * var length = turf.length(line, {units: 'miles'});\n *\n * //addToMap\n * var addToMap = [line];\n * line.properties.distance = length;\n */\n\nexport default function length(geojson, options) {\n  if (options === void 0) {\n    options = {};\n  } // Calculate distance from 2-vertex line segments\n\n\n  return segmentReduce(geojson, function (previousValue, segment) {\n    var coords = segment.geometry.coordinates;\n    return previousValue + distance(coords[0], coords[1], options);\n  }, 0);\n}","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/@turf/length/dist/es/index.js"],"names":["distance","segmentReduce","length","geojson","options","previousValue","segment","coords","geometry","coordinates"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,gBAArB;AACA,SAASC,aAAT,QAA8B,YAA9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,MAAT,CAAgBC,OAAhB,EAAyBC,OAAzB,EAAkC;AAC7C,MAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,IAAAA,OAAO,GAAG,EAAV;AAAe,GADI,CAE7C;;;AACA,SAAOH,aAAa,CAACE,OAAD,EAAU,UAAUE,aAAV,EAAyBC,OAAzB,EAAkC;AAC5D,QAAIC,MAAM,GAAGD,OAAO,CAACE,QAAR,CAAiBC,WAA9B;AACA,WAAOJ,aAAa,GAAGL,QAAQ,CAACO,MAAM,CAAC,CAAD,CAAP,EAAYA,MAAM,CAAC,CAAD,CAAlB,EAAuBH,OAAvB,CAA/B;AACH,GAHmB,EAGjB,CAHiB,CAApB;AAIH","sourcesContent":["import distance from \"@turf/distance\";\nimport { segmentReduce } from \"@turf/meta\";\n/**\n * Takes a {@link GeoJSON} and measures its length in the specified units, {@link (Multi)Point}'s distance are ignored.\n *\n * @name length\n * @param {Feature<LineString|MultiLineString>} geojson GeoJSON to measure\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units=kilometers] can be degrees, radians, miles, or kilometers\n * @returns {number} length of GeoJSON\n * @example\n * var line = turf.lineString([[115, -32], [131, -22], [143, -25], [150, -34]]);\n * var length = turf.length(line, {units: 'miles'});\n *\n * //addToMap\n * var addToMap = [line];\n * line.properties.distance = length;\n */\nexport default function length(geojson, options) {\n    if (options === void 0) { options = {}; }\n    // Calculate distance from 2-vertex line segments\n    return segmentReduce(geojson, function (previousValue, segment) {\n        var coords = segment.geometry.coordinates;\n        return previousValue + distance(coords[0], coords[1], options);\n    }, 0);\n}\n"]},"metadata":{},"sourceType":"module"}