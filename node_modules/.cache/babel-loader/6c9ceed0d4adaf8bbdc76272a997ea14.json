{"ast":null,"code":"import \"core-js/modules/es.array.find\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\forms\\\\AddManageSetting\\\\AddManageSetting.view.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useForm, useFieldArray } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useDispatch } from 'react-redux'; // app\n\nimport styles from './AddManageSetting.styles';\nimport * as utils from 'utils';\nimport { showModal, hideModal } from 'stores';\nimport { FormFileDrop, FormGrid, FormFields, Button, TableHead, TableCell, FormText, FormHidden, FormContainer, FormActions, Warning, FormAutocompleteMui, Overflow } from 'components';\nimport get from 'lodash/get'; // mui\n\nimport { makeStyles, Box, Table, TableBody, TableRow, Typography, Divider } from '@material-ui/core';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nAddManageSettingView.propTypes = {\n  riskRef: PropTypes.object.isRequired,\n  cols: PropTypes.array.isRequired,\n  actions: PropTypes.array.isRequired,\n  warnings: PropTypes.object.isRequired,\n  fields: PropTypes.array.isRequired,\n  endorseFaBorderProcessType: PropTypes.bool,\n  handlers: PropTypes.shape({\n    getFileKey: PropTypes.func.isRequired,\n    onFilesAdded: PropTypes.func.isRequired,\n    onFilesRemoved: PropTypes.func.isRequired\n  }).isRequired\n};\nexport function AddManageSettingView(_ref) {\n  _s();\n\n  var _warnings$tooManyFile,\n      _this = this;\n\n  var riskRef = _ref.riskRef,\n      cols = _ref.cols,\n      actions = _ref.actions,\n      warnings = _ref.warnings,\n      handlers = _ref.handlers,\n      fields = _ref.fields,\n      documentTypeField = _ref.documentTypeField,\n      endorseFaBorderProcessType = _ref.endorseFaBorderProcessType;\n  var classes = makeStyles(styles, {\n    name: 'AddManageSetting'\n  })();\n  var dispatch = useDispatch();\n  var defaultValues = utils.form.getInitialValues(fields);\n  var cancel = actions && actions.find(function (action) {\n    return action.name === 'cancel' && action.handler;\n  });\n  var submit = actions && actions.find(function (action) {\n    return action.name === 'submit' && action.handler;\n  });\n  var validationSchema = utils.form.getValidationSchema(fields);\n  var hasTooManyFilesErrors = Boolean(warnings === null || warnings === void 0 ? void 0 : (_warnings$tooManyFile = warnings.tooManyFiles) === null || _warnings$tooManyFile === void 0 ? void 0 : _warnings$tooManyFile.message);\n  var hasWarnings = Boolean(Object.values(warnings).some(function (w) {\n    return w.message;\n  }));\n\n  var _useForm = useForm(_objectSpread({\n    defaultValues: defaultValues\n  }, validationSchema && {\n    resolver: yupResolver(validationSchema)\n  })),\n      control = _useForm.control,\n      reset = _useForm.reset,\n      errors = _useForm.errors,\n      handleSubmit = _useForm.handleSubmit,\n      formState = _useForm.formState;\n\n  var _useFieldArray = useFieldArray({\n    control: control,\n    name: 'files'\n  }),\n      fieldsArray = _useFieldArray.fields,\n      appendFieldArray = _useFieldArray.append,\n      removeFieldArray = _useFieldArray.remove;\n\n  var cancelModal = function cancelModal() {\n    if (utils.generic.isValidArray(fieldsArray, true)) {\n      dispatch(showModal({\n        component: 'CONFIRM',\n        props: {\n          fullWidth: true,\n          title: utils.string.t('app.confirmation'),\n          maxWidth: 'xs',\n          componentProps: {\n            confirmLabel: utils.string.t('app.ok'),\n            cancelLabel: utils.string.t('app.goBack'),\n            confirmMessage: utils.string.t('processingInstructions.documentsWillNotBeSaved'),\n            buttonColors: {\n              confirm: 'secondary',\n              cancel: 'primary'\n            },\n            submitHandler: function submitHandler() {\n              dispatch(hideModal());\n            },\n            cancelHandler: function cancelHandler() {},\n            handleClose: function handleClose() {}\n          }\n        }\n      }));\n    } else {\n      dispatch(hideModal());\n    }\n  };\n\n  useEffect(function () {\n    reset(defaultValues);\n  }, [] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(Overflow, {\n      children: /*#__PURE__*/_jsxDEV(FormContainer, {\n        onSubmit: handleSubmit(submit.handler),\n        nestedClasses: {\n          root: classes.margin0\n        },\n        children: [/*#__PURE__*/_jsxDEV(FormFields, {\n          nestedClasses: {\n            root: classes.padding_0_30\n          },\n          children: [/*#__PURE__*/_jsxDEV(FormGrid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              my: 2,\n              children: /*#__PURE__*/_jsxDEV(FormFileDrop, _objectSpread(_objectSpread({}, utils.form.getFieldProps(fields, 'filesUpload')), {}, {\n                onChange: function onChange(files, rejectedFiles) {\n                  var hasDuplicates = false;\n                  var uniqueFiles = files.reduce(function (acc, cur) {\n                    var isDuplicate = fieldsArray.find(function (f) {\n                      return handlers.getFileKey(f.file) === handlers.getFileKey(cur);\n                    });\n\n                    if (isDuplicate) {\n                      hasDuplicates = true;\n                    }\n\n                    return isDuplicate ? acc : [].concat(_toConsumableArray(acc), [cur]);\n                  }, []).map(function (f) {\n                    return {\n                      file: f,\n                      name: f.name,\n                      type: null\n                    };\n                  });\n                  handlers.onFilesAdded([].concat(_toConsumableArray(fieldsArray), _toConsumableArray(uniqueFiles)), rejectedFiles, hasDuplicates);\n\n                  if (utils.generic.isValidArray(uniqueFiles, true)) {\n                    appendFieldArray(uniqueFiles);\n                  }\n                }\n              }), void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormGrid, {\n            item: true,\n            xs: 12,\n            children: [hasWarnings && /*#__PURE__*/_jsxDEV(FormGrid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxDEV(Box, {\n                mb: -3,\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                flexDirection: \"column\",\n                children: Object.entries(warnings).filter(function (_ref2) {\n                  var _ref3 = _slicedToArray(_ref2, 2),\n                      type = _ref3[0],\n                      obj = _ref3[1];\n\n                  return Boolean(obj.message);\n                }).map(function (_ref4) {\n                  var _ref5 = _slicedToArray(_ref4, 2),\n                      type = _ref5[0],\n                      obj = _ref5[1];\n\n                  return /*#__PURE__*/_jsxDEV(Box, {\n                    mb: 1,\n                    children: /*#__PURE__*/_jsxDEV(Warning, {\n                      icon: true,\n                      border: true,\n                      type: obj.type,\n                      text: obj.message\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 152,\n                      columnNumber: 29\n                    }, _this)\n                  }, type, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 151,\n                    columnNumber: 27\n                  }, _this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 17\n            }, this), utils.generic.isValidArray(fieldsArray, true) && /*#__PURE__*/_jsxDEV(Box, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                className: classes.subTitle,\n                children: utils.string.t('processingInstructions.manageDocuments.documentsAddedGxbForRiskRef', {\n                  riskRefId: riskRef === null || riskRef === void 0 ? void 0 : riskRef.riskRefId\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.enableScroll,\n                children: /*#__PURE__*/_jsxDEV(Table, {\n                  children: [/*#__PURE__*/_jsxDEV(TableHead, {\n                    columns: cols,\n                    nestedClasses: {\n                      tableHead: classes.tableHead\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 170,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n                    children: fieldsArray.map(function (_ref6, index) {\n                      var file = _ref6.file,\n                          name = _ref6.name,\n                          type = _ref6.type;\n                      return /*#__PURE__*/_jsxDEV(TableRow, {\n                        children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                          compact: true,\n                          children: [/*#__PURE__*/_jsxDEV(FormText, {\n                            control: control,\n                            type: \"text\",\n                            name: \"files.\".concat(index, \".name\"),\n                            defaultValue: name,\n                            muiComponentProps: {\n                              size: 'small',\n                              classes: {\n                                root: classes.filenameRoot\n                              },\n                              InputProps: {\n                                readOnly: true,\n                                disabled: true,\n                                classes: {\n                                  root: classes.filenameBase,\n                                  input: classes.filenameInput\n                                }\n                              }\n                            },\n                            errors: errors\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 176,\n                            columnNumber: 33\n                          }, _this), /*#__PURE__*/_jsxDEV(FormHidden, {\n                            type: \"hidden\",\n                            control: control,\n                            name: \"files.\".concat(index, \".file\"),\n                            defaultValue: file\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 192,\n                            columnNumber: 33\n                          }, _this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 175,\n                          columnNumber: 31\n                        }, _this), endorseFaBorderProcessType && /*#__PURE__*/_jsxDEV(TableCell, {\n                          compact: true,\n                          children: /*#__PURE__*/_jsxDEV(FormAutocompleteMui, _objectSpread(_objectSpread({}, documentTypeField), {}, {\n                            control: control,\n                            name: \"files.\".concat(index, \".type\"),\n                            error: get(errors, \"files[\".concat(index, \"].type\"))\n                          }), void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 196,\n                            columnNumber: 35\n                          }, _this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 195,\n                          columnNumber: 33\n                        }, _this), /*#__PURE__*/_jsxDEV(TableCell, {\n                          menu: true,\n                          children: /*#__PURE__*/_jsxDEV(Button, {\n                            icon: HighlightOffIcon,\n                            variant: \"text\",\n                            danger: true,\n                            size: \"small\",\n                            onClick: function onClick() {\n                              var updatedFilesArray = fieldsArray.filter(function (file, fileIndex) {\n                                return fileIndex !== index;\n                              });\n                              handlers.onFilesRemoved(updatedFilesArray);\n                              removeFieldArray(index);\n                            }\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 205,\n                            columnNumber: 33\n                          }, _this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 204,\n                          columnNumber: 31\n                        }, _this)]\n                      }, handlers.getFileKey(file), true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 174,\n                        columnNumber: 29\n                      }, _this);\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 171,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 169,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormActions, {\n          type: \"dialog\",\n          children: [cancel && /*#__PURE__*/_jsxDEV(Button, {\n            text: cancel.label,\n            variant: \"text\",\n            disabled: formState.isSubmitting,\n            onClick: function onClick() {\n              cancelModal();\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 15\n          }, this), submit && /*#__PURE__*/_jsxDEV(Button, {\n            text: submit.label,\n            type: \"submit\",\n            disabled: fieldsArray.length === 0 || formState.isSubmitting || hasTooManyFilesErrors,\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddManageSettingView, \"8yVB1PDYlXW2Z+VdyFEZPdcaP60=\", false, function () {\n  return [useDispatch, useForm, useFieldArray];\n});\n\n_c = AddManageSettingView;\nAddManageSettingView.displayName = \"AddManageSettingView\";\nAddManageSettingView.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"AddManageSettingView\",\n  \"props\": {\n    \"riskRef\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"cols\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"actions\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"warnings\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"fields\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"endorseFaBorderProcessType\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"handlers\": {\n      \"type\": {\n        \"name\": \"shape\",\n        \"value\": {\n          \"getFileKey\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"onFilesAdded\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"onFilesRemoved\": {\n            \"name\": \"func\",\n            \"required\": true\n          }\n        }\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\forms\\\\AddManageSetting\\\\AddManageSetting.view.js\"] = {\n    name: \"AddManageSettingView\",\n    docgenInfo: AddManageSettingView.__docgenInfo,\n    path: \"src\\\\forms\\\\AddManageSetting\\\\AddManageSetting.view.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"AddManageSettingView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/forms/AddManageSetting/AddManageSetting.view.js"],"names":["React","useEffect","PropTypes","useForm","useFieldArray","yupResolver","useDispatch","styles","utils","showModal","hideModal","FormFileDrop","FormGrid","FormFields","Button","TableHead","TableCell","FormText","FormHidden","FormContainer","FormActions","Warning","FormAutocompleteMui","Overflow","get","makeStyles","Box","Table","TableBody","TableRow","Typography","Divider","HighlightOffIcon","AddManageSettingView","propTypes","riskRef","object","isRequired","cols","array","actions","warnings","fields","endorseFaBorderProcessType","bool","handlers","shape","getFileKey","func","onFilesAdded","onFilesRemoved","documentTypeField","classes","name","dispatch","defaultValues","form","getInitialValues","cancel","find","action","handler","submit","validationSchema","getValidationSchema","hasTooManyFilesErrors","Boolean","tooManyFiles","message","hasWarnings","Object","values","some","w","resolver","control","reset","errors","handleSubmit","formState","fieldsArray","appendFieldArray","append","removeFieldArray","remove","cancelModal","generic","isValidArray","component","props","fullWidth","title","string","t","maxWidth","componentProps","confirmLabel","cancelLabel","confirmMessage","buttonColors","confirm","submitHandler","cancelHandler","handleClose","root","margin0","padding_0_30","getFieldProps","files","rejectedFiles","hasDuplicates","uniqueFiles","reduce","acc","cur","isDuplicate","f","file","map","type","entries","filter","obj","subTitle","riskRefId","enableScroll","tableHead","index","size","filenameRoot","InputProps","readOnly","disabled","filenameBase","input","filenameInput","updatedFilesArray","fileIndex","label","isSubmitting","length"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useForm, useFieldArray } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useDispatch } from 'react-redux';\r\n\r\n// app\r\nimport styles from './AddManageSetting.styles';\r\nimport * as utils from 'utils';\r\nimport { showModal, hideModal } from 'stores';\r\nimport {\r\n  FormFileDrop,\r\n  FormGrid,\r\n  FormFields,\r\n  Button,\r\n  TableHead,\r\n  TableCell,\r\n  FormText,\r\n  FormHidden,\r\n  FormContainer,\r\n  FormActions,\r\n  Warning,\r\n  FormAutocompleteMui,\r\n  Overflow,\r\n} from 'components';\r\nimport get from 'lodash/get';\r\n\r\n// mui\r\nimport { makeStyles, Box, Table, TableBody, TableRow, Typography, Divider } from '@material-ui/core';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\n\r\nAddManageSettingView.propTypes = {\r\n  riskRef: PropTypes.object.isRequired,\r\n  cols: PropTypes.array.isRequired,\r\n  actions: PropTypes.array.isRequired,\r\n  warnings: PropTypes.object.isRequired,\r\n  fields: PropTypes.array.isRequired,\r\n  endorseFaBorderProcessType: PropTypes.bool,\r\n  handlers: PropTypes.shape({\r\n    getFileKey: PropTypes.func.isRequired,\r\n    onFilesAdded: PropTypes.func.isRequired,\r\n    onFilesRemoved: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport function AddManageSettingView({\r\n  riskRef,\r\n  cols,\r\n  actions,\r\n  warnings,\r\n  handlers,\r\n  fields,\r\n  documentTypeField,\r\n  endorseFaBorderProcessType,\r\n}) {\r\n  const classes = makeStyles(styles, { name: 'AddManageSetting' })();\r\n  const dispatch = useDispatch();\r\n  const defaultValues = utils.form.getInitialValues(fields);\r\n  const cancel = actions && actions.find((action) => action.name === 'cancel' && action.handler);\r\n  const submit = actions && actions.find((action) => action.name === 'submit' && action.handler);\r\n  const validationSchema = utils.form.getValidationSchema(fields);\r\n  const hasTooManyFilesErrors = Boolean(warnings?.tooManyFiles?.message);\r\n  const hasWarnings = Boolean(Object.values(warnings).some((w) => w.message));\r\n  const { control, reset, errors, handleSubmit, formState } = useForm({\r\n    defaultValues,\r\n    ...(validationSchema && { resolver: yupResolver(validationSchema) }),\r\n  });\r\n  const {\r\n    fields: fieldsArray,\r\n    append: appendFieldArray,\r\n    remove: removeFieldArray,\r\n  } = useFieldArray({\r\n    control,\r\n    name: 'files',\r\n  });\r\n\r\n  const cancelModal = () => {\r\n    if (utils.generic.isValidArray(fieldsArray, true)) {\r\n      dispatch(\r\n        showModal({\r\n          component: 'CONFIRM',\r\n          props: {\r\n            fullWidth: true,\r\n            title: utils.string.t('app.confirmation'),\r\n            maxWidth: 'xs',\r\n            componentProps: {\r\n              confirmLabel: utils.string.t('app.ok'),\r\n              cancelLabel: utils.string.t('app.goBack'),\r\n              confirmMessage: utils.string.t('processingInstructions.documentsWillNotBeSaved'),\r\n              buttonColors: { confirm: 'secondary', cancel: 'primary' },\r\n              submitHandler: () => {\r\n                dispatch(hideModal());\r\n              },\r\n              cancelHandler: () => {},\r\n              handleClose: () => {},\r\n            },\r\n          },\r\n        })\r\n      );\r\n    } else {\r\n      dispatch(hideModal());\r\n    }\r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n      reset(defaultValues);\r\n    },\r\n    [] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Overflow>\r\n        <FormContainer onSubmit={handleSubmit(submit.handler)} nestedClasses={{ root: classes.margin0 }}>\r\n          <FormFields nestedClasses={{ root: classes.padding_0_30 }}>\r\n            <FormGrid item xs={12}>\r\n              <Box my={2}>\r\n                <FormFileDrop\r\n                  {...utils.form.getFieldProps(fields, 'filesUpload')}\r\n                  onChange={(files, rejectedFiles) => {\r\n                    let hasDuplicates = false;\r\n                    const uniqueFiles = files\r\n                      .reduce((acc, cur) => {\r\n                        const isDuplicate = fieldsArray.find((f) => {\r\n                          return handlers.getFileKey(f.file) === handlers.getFileKey(cur);\r\n                        });\r\n\r\n                        if (isDuplicate) {\r\n                          hasDuplicates = true;\r\n                        }\r\n                        return isDuplicate ? acc : [...acc, cur];\r\n                      }, [])\r\n                      .map((f) => ({ file: f, name: f.name, type: null }));\r\n                    handlers.onFilesAdded([...fieldsArray, ...uniqueFiles], rejectedFiles, hasDuplicates);\r\n                    if (utils.generic.isValidArray(uniqueFiles, true)) {\r\n                      appendFieldArray(uniqueFiles);\r\n                    }\r\n                  }}\r\n                />\r\n              </Box>\r\n            </FormGrid>\r\n            <FormGrid item xs={12}>\r\n              {hasWarnings && (\r\n                <FormGrid item xs={12}>\r\n                  <Box mb={-3} display=\"flex\" justifyContent=\"center\" alignItems=\"center\" flexDirection=\"column\">\r\n                    {Object.entries(warnings)\r\n                      .filter(([type, obj]) => Boolean(obj.message))\r\n                      .map(([type, obj]) => {\r\n                        return (\r\n                          <Box key={type} mb={1}>\r\n                            <Warning icon border type={obj.type} text={obj.message} />\r\n                          </Box>\r\n                        );\r\n                      })}\r\n                  </Box>\r\n                </FormGrid>\r\n              )}\r\n\r\n              {utils.generic.isValidArray(fieldsArray, true) && (\r\n                <Box>\r\n                  <Typography className={classes.subTitle}>\r\n                    {utils.string.t('processingInstructions.manageDocuments.documentsAddedGxbForRiskRef', {\r\n                      riskRefId: riskRef?.riskRefId,\r\n                    })}\r\n                  </Typography>\r\n                  <Divider />\r\n                  <div className={classes.enableScroll}>\r\n                    <Table>\r\n                      <TableHead columns={cols} nestedClasses={{ tableHead: classes.tableHead }} />\r\n                      <TableBody>\r\n                        {fieldsArray.map(({ file, name, type }, index) => {\r\n                          return (\r\n                            <TableRow key={handlers.getFileKey(file)}>\r\n                              <TableCell compact>\r\n                                <FormText\r\n                                  control={control}\r\n                                  type=\"text\"\r\n                                  name={`files.${index}.name`}\r\n                                  defaultValue={name}\r\n                                  muiComponentProps={{\r\n                                    size: 'small',\r\n                                    classes: { root: classes.filenameRoot },\r\n                                    InputProps: {\r\n                                      readOnly: true,\r\n                                      disabled: true,\r\n                                      classes: { root: classes.filenameBase, input: classes.filenameInput },\r\n                                    },\r\n                                  }}\r\n                                  errors={errors}\r\n                                />\r\n                                <FormHidden type=\"hidden\" control={control} name={`files.${index}.file`} defaultValue={file} />\r\n                              </TableCell>\r\n                              {endorseFaBorderProcessType && (\r\n                                <TableCell compact>\r\n                                  <FormAutocompleteMui\r\n                                    {...documentTypeField}\r\n                                    control={control}\r\n                                    name={`files.${index}.type`}\r\n                                    error={get(errors, `files[${index}].type`)}\r\n                                  />\r\n                                </TableCell>\r\n                              )}\r\n                              <TableCell menu>\r\n                                <Button\r\n                                  icon={HighlightOffIcon}\r\n                                  variant=\"text\"\r\n                                  danger\r\n                                  size=\"small\"\r\n                                  onClick={() => {\r\n                                    const updatedFilesArray = fieldsArray.filter((file, fileIndex) => {\r\n                                      return fileIndex !== index;\r\n                                    });\r\n                                    handlers.onFilesRemoved(updatedFilesArray);\r\n                                    removeFieldArray(index);\r\n                                  }}\r\n                                />\r\n                              </TableCell>\r\n                            </TableRow>\r\n                          );\r\n                        })}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </div>\r\n                </Box>\r\n              )}\r\n            </FormGrid>\r\n          </FormFields>\r\n          <FormActions type=\"dialog\">\r\n            {cancel && (\r\n              <Button\r\n                text={cancel.label}\r\n                variant=\"text\"\r\n                disabled={formState.isSubmitting}\r\n                onClick={() => {\r\n                  cancelModal();\r\n                }}\r\n              />\r\n            )}\r\n            {submit && (\r\n              <Button\r\n                text={submit.label}\r\n                type=\"submit\"\r\n                disabled={fieldsArray.length === 0 || formState.isSubmitting || hasTooManyFilesErrors}\r\n                color=\"primary\"\r\n              />\r\n            )}\r\n          </FormActions>\r\n        </FormContainer>\r\n      </Overflow>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}