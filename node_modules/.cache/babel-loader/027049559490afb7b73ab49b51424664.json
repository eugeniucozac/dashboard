{"ast":null,"code":"import _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\AdministrationUser\\\\AdministrationUser.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux'; // app\n\nimport { getUsers, selectRefDataXbInstances, selectAdministrationUsers, selectAdministrationUsersPagination, selectAdministrationUsersSort, selectAdministrationUsersFilters, resetUsers, selectRefDataNewBusinessProcess } from 'stores';\nimport { AccessControl, Button, TableToolbar, TableActions, TableFilters, MultiSelect } from 'components';\nimport { AdministrationUserGrid } from 'modules';\nimport { showModal, userDelete } from 'stores';\nimport * as utils from 'utils';\nimport * as constants from 'consts'; // mui\n\nimport AddIcon from '@material-ui/icons/Add';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AdministrationUser() {\n  _s();\n\n  var dispatch = useDispatch();\n  var users = useSelector(selectAdministrationUsers);\n  var usersPagination = useSelector(selectAdministrationUsersPagination);\n  var usersSort = useSelector(selectAdministrationUsersSort);\n  var usersFilters = useSelector(selectAdministrationUsersFilters);\n  var refDataXbInstances = useSelector(selectRefDataXbInstances);\n  var refDataBusinessProcesses = useSelector(selectRefDataNewBusinessProcess);\n\n  var _useState = useState(1),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentPage = _useState2[0],\n      setCurrentPage = _useState2[1];\n\n  useEffect(function () {\n    dispatch(getUsers());\n    return function () {\n      dispatch(resetUsers());\n    };\n  }, [] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  var handleChangePage = function handleChangePage(newPage) {\n    dispatch(getUsers({\n      page: newPage + 1\n    }));\n    setCurrentPage(newPage + 1);\n  };\n\n  var handleChangeRowsPerPage = function handleChangeRowsPerPage(rowsPerPage) {\n    dispatch(getUsers({\n      size: rowsPerPage\n    }));\n  };\n\n  var onSortColumn = function onSortColumn(by, dir, type) {\n    dispatch(getUsers({\n      sortBy: by,\n      direction: dir,\n      sortType: type\n    }));\n  };\n\n  var searchSubmit = function searchSubmit(_ref) {\n    var search = _ref.search,\n        filters = _ref.filters;\n    dispatch(getUsers({\n      searchBy: search,\n      filters: filters\n    }));\n  };\n\n  var resetSubmit = function resetSubmit() {\n    dispatch(getUsers({\n      filters: {}\n    }));\n  };\n\n  var onCreateUserClick = function onCreateUserClick() {\n    var user = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    dispatch(showModal({\n      component: 'CREATE_EDIT_USER',\n      props: {\n        title: user.id ? 'administration.users.edit.title' : 'administration.users.create.title',\n        fullWidth: true,\n        maxWidth: 'md',\n        componentProps: {\n          user: user\n        }\n      }\n    }));\n  };\n\n  var confirmUserDelete = function confirmUserDelete(user) {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        fullWidth: true,\n        title: 'administration.users.delete.title',\n        maxWidth: 'xs',\n        componentProps: {\n          confirmMessage: utils.string.t('administration.users.delete.confirmText', {\n            name: user.fullName\n          }),\n          submitHandler: function () {\n            var _submitHandler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n              return _regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      _context.next = 2;\n                      return dispatch(userDelete(user));\n\n                    case 2:\n                      dispatch(getUsers({\n                        page: currentPage\n                      }));\n\n                    case 3:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, _callee);\n            }));\n\n            function submitHandler() {\n              return _submitHandler.apply(this, arguments);\n            }\n\n            return submitHandler;\n          }()\n        }\n      }\n    }));\n  };\n\n  var optionsBusinessProcess = refDataBusinessProcesses.map(function (bp) {\n    return {\n      id: bp.businessProcessID,\n      name: bp.businessProcessName\n    };\n  });\n  var optionsXbInstance = refDataXbInstances.filter(function (id) {\n    var _id$sourceID, _constants$EDGE_XB_IN;\n\n    return (id === null || id === void 0 ? void 0 : (_id$sourceID = id.sourceID) === null || _id$sourceID === void 0 ? void 0 : _id$sourceID.toString()) !== ((_constants$EDGE_XB_IN = constants.EDGE_XB_INSTANCE) === null || _constants$EDGE_XB_IN === void 0 ? void 0 : _constants$EDGE_XB_IN.toString());\n  }).map(function (xbi) {\n    return {\n      id: xbi.sourceID,\n      name: xbi.sourceName\n    };\n  });\n  var filters = [{\n    id: 'businessProcessIds',\n    type: 'multiSelect',\n    label: utils.string.t('administration.users.table.cols.businessProcess'),\n    value: (usersFilters === null || usersFilters === void 0 ? void 0 : usersFilters.businessProcessIds) || [],\n    options: optionsBusinessProcess,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"businessProcessIds\",\n      search: true,\n      options: optionsBusinessProcess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 16\n    }, this)\n  }, {\n    id: 'xbInstanceIds',\n    type: 'multiSelect',\n    label: utils.string.t('administration.users.table.cols.xbInstance'),\n    value: (usersFilters === null || usersFilters === void 0 ? void 0 : usersFilters.xbInstanceIds) || [],\n    options: optionsXbInstance,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"xbInstanceIds\",\n      search: true,\n      options: optionsXbInstance\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 16\n    }, this)\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-testid\": \"administration-user\",\n    children: [/*#__PURE__*/_jsxDEV(TableToolbar, {\n      children: [/*#__PURE__*/_jsxDEV(TableActions, {\n        children: /*#__PURE__*/_jsxDEV(AccessControl, {\n          feature: \"admin.user\",\n          permissions: \"create\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            icon: AddIcon,\n            color: \"primary\",\n            variant: \"contained\",\n            size: \"small\",\n            text: utils.string.t('administration.users.create.createButton'),\n            \"data-testid\": \"admin-create-button\",\n            onClick: onCreateUserClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableFilters, {\n        search: true,\n        searchPlaceholder: utils.string.t('administration.users.searchPlaceholder'),\n        filters: true,\n        filtersArray: filters,\n        handlers: {\n          onSearch: searchSubmit,\n          onFilter: searchSubmit,\n          onResetFilter: resetSubmit\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AdministrationUserGrid, {\n      onCreateUser: onCreateUserClick,\n      confirmUserDelete: confirmUserDelete,\n      users: users,\n      usersPagination: usersPagination,\n      usersSort: usersSort,\n      handleChangePage: handleChangePage,\n      handleChangeRowsPerPage: handleChangeRowsPerPage,\n      onSortColumn: onSortColumn,\n      refDataXbInstances: refDataXbInstances\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AdministrationUser, \"TDkY+SsFE8nTmNzEBIk7Wrp+uBg=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = AdministrationUser;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdministrationUser\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/AdministrationUser/AdministrationUser.js"],"names":["React","useEffect","useState","useDispatch","useSelector","getUsers","selectRefDataXbInstances","selectAdministrationUsers","selectAdministrationUsersPagination","selectAdministrationUsersSort","selectAdministrationUsersFilters","resetUsers","selectRefDataNewBusinessProcess","AccessControl","Button","TableToolbar","TableActions","TableFilters","MultiSelect","AdministrationUserGrid","showModal","userDelete","utils","constants","AddIcon","AdministrationUser","dispatch","users","usersPagination","usersSort","usersFilters","refDataXbInstances","refDataBusinessProcesses","currentPage","setCurrentPage","handleChangePage","newPage","page","handleChangeRowsPerPage","rowsPerPage","size","onSortColumn","by","dir","type","sortBy","direction","sortType","searchSubmit","search","filters","searchBy","resetSubmit","onCreateUserClick","user","component","props","title","id","fullWidth","maxWidth","componentProps","confirmUserDelete","confirmMessage","string","t","name","fullName","submitHandler","optionsBusinessProcess","map","bp","businessProcessID","businessProcessName","optionsXbInstance","filter","sourceID","toString","EDGE_XB_INSTANCE","xbi","sourceName","label","value","businessProcessIds","options","content","xbInstanceIds","onSearch","onFilter","onResetFilter"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC,C,CAEA;;AACA,SACEC,QADF,EAEEC,wBAFF,EAGEC,yBAHF,EAIEC,mCAJF,EAKEC,6BALF,EAMEC,gCANF,EAOEC,UAPF,EAQEC,+BARF,QASO,QATP;AAUA,SAASC,aAAT,EAAwBC,MAAxB,EAAgCC,YAAhC,EAA8CC,YAA9C,EAA4DC,YAA5D,EAA0EC,WAA1E,QAA6F,YAA7F;AACA,SAASC,sBAAT,QAAuC,SAAvC;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,QAAtC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,SAAZ,MAA2B,QAA3B,C,CAEA;;AACA,OAAOC,OAAP,MAAoB,wBAApB;;AAEA,eAAe,SAASC,kBAAT,GAA8B;AAAA;;AAC3C,MAAMC,QAAQ,GAAGvB,WAAW,EAA5B;AAEA,MAAMwB,KAAK,GAAGvB,WAAW,CAACG,yBAAD,CAAzB;AACA,MAAMqB,eAAe,GAAGxB,WAAW,CAACI,mCAAD,CAAnC;AACA,MAAMqB,SAAS,GAAGzB,WAAW,CAACK,6BAAD,CAA7B;AACA,MAAMqB,YAAY,GAAG1B,WAAW,CAACM,gCAAD,CAAhC;AACA,MAAMqB,kBAAkB,GAAG3B,WAAW,CAACE,wBAAD,CAAtC;AACA,MAAM0B,wBAAwB,GAAG5B,WAAW,CAACQ,+BAAD,CAA5C;;AAR2C,kBASLV,QAAQ,CAAC,CAAD,CATH;AAAA;AAAA,MASpC+B,WAToC;AAAA,MASvBC,cATuB;;AAW3CjC,EAAAA,SAAS,CACP,YAAM;AACJyB,IAAAA,QAAQ,CAACrB,QAAQ,EAAT,CAAR;AAEA,WAAO,YAAM;AACXqB,MAAAA,QAAQ,CAACf,UAAU,EAAX,CAAR;AACD,KAFD;AAGD,GAPM,EAQP,EARO,CAQJ;AARI,GAAT;;AAWA,MAAMwB,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,OAAD,EAAa;AACpCV,IAAAA,QAAQ,CAACrB,QAAQ,CAAC;AAAEgC,MAAAA,IAAI,EAAED,OAAO,GAAG;AAAlB,KAAD,CAAT,CAAR;AACAF,IAAAA,cAAc,CAACE,OAAO,GAAG,CAAX,CAAd;AACD,GAHD;;AAKA,MAAME,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,WAAD,EAAiB;AAC/Cb,IAAAA,QAAQ,CAACrB,QAAQ,CAAC;AAAEmC,MAAAA,IAAI,EAAED;AAAR,KAAD,CAAT,CAAR;AACD,GAFD;;AAIA,MAAME,YAAY,GAAG,SAAfA,YAAe,CAACC,EAAD,EAAKC,GAAL,EAAUC,IAAV,EAAmB;AACtClB,IAAAA,QAAQ,CAACrB,QAAQ,CAAC;AAAEwC,MAAAA,MAAM,EAAEH,EAAV;AAAcI,MAAAA,SAAS,EAAEH,GAAzB;AAA8BI,MAAAA,QAAQ,EAAEH;AAAxC,KAAD,CAAT,CAAR;AACD,GAFD;;AAIA,MAAMI,YAAY,GAAG,SAAfA,YAAe,OAAyB;AAAA,QAAtBC,MAAsB,QAAtBA,MAAsB;AAAA,QAAdC,OAAc,QAAdA,OAAc;AAC5CxB,IAAAA,QAAQ,CAACrB,QAAQ,CAAC;AAAE8C,MAAAA,QAAQ,EAAEF,MAAZ;AAAoBC,MAAAA,OAAO,EAAPA;AAApB,KAAD,CAAT,CAAR;AACD,GAFD;;AAIA,MAAME,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB1B,IAAAA,QAAQ,CAACrB,QAAQ,CAAC;AAAE6C,MAAAA,OAAO,EAAE;AAAX,KAAD,CAAT,CAAR;AACD,GAFD;;AAIA,MAAMG,iBAAiB,GAAG,SAApBA,iBAAoB,GAAe;AAAA,QAAdC,IAAc,uEAAP,EAAO;AACvC5B,IAAAA,QAAQ,CACNN,SAAS,CAAC;AACRmC,MAAAA,SAAS,EAAE,kBADH;AAERC,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAEH,IAAI,CAACI,EAAL,GAAU,iCAAV,GAA8C,mCADhD;AAELC,QAAAA,SAAS,EAAE,IAFN;AAGLC,QAAAA,QAAQ,EAAE,IAHL;AAILC,QAAAA,cAAc,EAAE;AAAEP,UAAAA,IAAI,EAAJA;AAAF;AAJX;AAFC,KAAD,CADH,CAAR;AAWD,GAZD;;AAcA,MAAMQ,iBAAiB,GAAG,SAApBA,iBAAoB,CAACR,IAAD,EAAU;AAClC5B,IAAAA,QAAQ,CACNN,SAAS,CAAC;AACRmC,MAAAA,SAAS,EAAE,SADH;AAERC,MAAAA,KAAK,EAAE;AACLG,QAAAA,SAAS,EAAE,IADN;AAELF,QAAAA,KAAK,EAAE,mCAFF;AAGLG,QAAAA,QAAQ,EAAE,IAHL;AAILC,QAAAA,cAAc,EAAE;AACdE,UAAAA,cAAc,EAAEzC,KAAK,CAAC0C,MAAN,CAAaC,CAAb,CAAe,yCAAf,EAA0D;AAAEC,YAAAA,IAAI,EAAEZ,IAAI,CAACa;AAAb,WAA1D,CADF;AAEdC,UAAAA,aAAa;AAAA,0FAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BACP1C,QAAQ,CAACL,UAAU,CAACiC,IAAD,CAAX,CADD;;AAAA;AAEb5B,sBAAAA,QAAQ,CAACrB,QAAQ,CAAC;AAAEgC,wBAAAA,IAAI,EAAEJ;AAAR,uBAAD,CAAT,CAAR;;AAFa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAFC;AAJX;AAFC,KAAD,CADH,CAAR;AAiBD,GAlBD;;AAoBA,MAAMoC,sBAAsB,GAAGrC,wBAAwB,CAACsC,GAAzB,CAA6B,UAACC,EAAD;AAAA,WAAS;AAAEb,MAAAA,EAAE,EAAEa,EAAE,CAACC,iBAAT;AAA4BN,MAAAA,IAAI,EAAEK,EAAE,CAACE;AAArC,KAAT;AAAA,GAA7B,CAA/B;AACA,MAAMC,iBAAiB,GAAG3C,kBAAkB,CACzC4C,MADuB,CAChB,UAACjB,EAAD;AAAA;;AAAA,WAAQ,CAAAA,EAAE,SAAF,IAAAA,EAAE,WAAF,4BAAAA,EAAE,CAAEkB,QAAJ,8DAAcC,QAAd,kCAA6BtD,SAAS,CAACuD,gBAAvC,0DAA6B,sBAA4BD,QAA5B,EAA7B,CAAR;AAAA,GADgB,EAEvBP,GAFuB,CAEnB,UAACS,GAAD;AAAA,WAAU;AAAErB,MAAAA,EAAE,EAAEqB,GAAG,CAACH,QAAV;AAAoBV,MAAAA,IAAI,EAAEa,GAAG,CAACC;AAA9B,KAAV;AAAA,GAFmB,CAA1B;AAIA,MAAM9B,OAAO,GAAG,CACd;AACEQ,IAAAA,EAAE,EAAE,oBADN;AAEEd,IAAAA,IAAI,EAAE,aAFR;AAGEqC,IAAAA,KAAK,EAAE3D,KAAK,CAAC0C,MAAN,CAAaC,CAAb,CAAe,iDAAf,CAHT;AAIEiB,IAAAA,KAAK,EAAE,CAAApD,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAEqD,kBAAd,KAAoC,EAJ7C;AAKEC,IAAAA,OAAO,EAAEf,sBALX;AAMEgB,IAAAA,OAAO,eAAE,QAAC,WAAD;AAAa,MAAA,EAAE,EAAC,oBAAhB;AAAqC,MAAA,MAAM,MAA3C;AAA4C,MAAA,OAAO,EAAEhB;AAArD;AAAA;AAAA;AAAA;AAAA;AANX,GADc,EASd;AACEX,IAAAA,EAAE,EAAE,eADN;AAEEd,IAAAA,IAAI,EAAE,aAFR;AAGEqC,IAAAA,KAAK,EAAE3D,KAAK,CAAC0C,MAAN,CAAaC,CAAb,CAAe,4CAAf,CAHT;AAIEiB,IAAAA,KAAK,EAAE,CAAApD,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAEwD,aAAd,KAA+B,EAJxC;AAKEF,IAAAA,OAAO,EAAEV,iBALX;AAMEW,IAAAA,OAAO,eAAE,QAAC,WAAD;AAAa,MAAA,EAAE,EAAC,eAAhB;AAAgC,MAAA,MAAM,MAAtC;AAAuC,MAAA,OAAO,EAAEX;AAAhD;AAAA;AAAA;AAAA;AAAA;AANX,GATc,CAAhB;AAmBA,sBACE;AAAK,mBAAY,qBAAjB;AAAA,4BACE,QAAC,YAAD;AAAA,8BACE,QAAC,YAAD;AAAA,+BACE,QAAC,aAAD;AAAe,UAAA,OAAO,EAAC,YAAvB;AAAoC,UAAA,WAAW,EAAC,QAAhD;AAAA,iCACE,QAAC,MAAD;AACE,YAAA,IAAI,EAAElD,OADR;AAEE,YAAA,KAAK,EAAC,SAFR;AAGE,YAAA,OAAO,EAAC,WAHV;AAIE,YAAA,IAAI,EAAC,OAJP;AAKE,YAAA,IAAI,EAAEF,KAAK,CAAC0C,MAAN,CAAaC,CAAb,CAAe,0CAAf,CALR;AAME,2BAAY,qBANd;AAOE,YAAA,OAAO,EAAEZ;AAPX;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAcE,QAAC,YAAD;AACE,QAAA,MAAM,MADR;AAEE,QAAA,iBAAiB,EAAE/B,KAAK,CAAC0C,MAAN,CAAaC,CAAb,CAAe,wCAAf,CAFrB;AAGE,QAAA,OAAO,MAHT;AAIE,QAAA,YAAY,EAAEf,OAJhB;AAKE,QAAA,QAAQ,EAAE;AACRqC,UAAAA,QAAQ,EAAEvC,YADF;AAERwC,UAAAA,QAAQ,EAAExC,YAFF;AAGRyC,UAAAA,aAAa,EAAErC;AAHP;AALZ;AAAA;AAAA;AAAA;AAAA,cAdF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eA4BE,QAAC,sBAAD;AACE,MAAA,YAAY,EAAEC,iBADhB;AAEE,MAAA,iBAAiB,EAAES,iBAFrB;AAGE,MAAA,KAAK,EAAEnC,KAHT;AAIE,MAAA,eAAe,EAAEC,eAJnB;AAKE,MAAA,SAAS,EAAEC,SALb;AAME,MAAA,gBAAgB,EAAEM,gBANpB;AAOE,MAAA,uBAAuB,EAAEG,uBAP3B;AAQE,MAAA,YAAY,EAAEG,YARhB;AASE,MAAA,kBAAkB,EAAEV;AATtB;AAAA;AAAA;AAAA;AAAA,YA5BF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA0CD;;GA/IuBN,kB;UACLtB,W,EAEHC,W,EACUA,W,EACNA,W,EACGA,W,EACMA,W,EACMA,W;;;KARXqB,kB","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n// app\r\nimport {\r\n  getUsers,\r\n  selectRefDataXbInstances,\r\n  selectAdministrationUsers,\r\n  selectAdministrationUsersPagination,\r\n  selectAdministrationUsersSort,\r\n  selectAdministrationUsersFilters,\r\n  resetUsers,\r\n  selectRefDataNewBusinessProcess,\r\n} from 'stores';\r\nimport { AccessControl, Button, TableToolbar, TableActions, TableFilters, MultiSelect } from 'components';\r\nimport { AdministrationUserGrid } from 'modules';\r\nimport { showModal, userDelete } from 'stores';\r\nimport * as utils from 'utils';\r\nimport * as constants from 'consts';\r\n\r\n// mui\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nexport default function AdministrationUser() {\r\n  const dispatch = useDispatch();\r\n\r\n  const users = useSelector(selectAdministrationUsers);\r\n  const usersPagination = useSelector(selectAdministrationUsersPagination);\r\n  const usersSort = useSelector(selectAdministrationUsersSort);\r\n  const usersFilters = useSelector(selectAdministrationUsersFilters);\r\n  const refDataXbInstances = useSelector(selectRefDataXbInstances);\r\n  const refDataBusinessProcesses = useSelector(selectRefDataNewBusinessProcess);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  useEffect(\r\n    () => {\r\n      dispatch(getUsers());\r\n\r\n      return () => {\r\n        dispatch(resetUsers());\r\n      };\r\n    },\r\n    [] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  const handleChangePage = (newPage) => {\r\n    dispatch(getUsers({ page: newPage + 1 }));\r\n    setCurrentPage(newPage + 1);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (rowsPerPage) => {\r\n    dispatch(getUsers({ size: rowsPerPage }));\r\n  };\r\n\r\n  const onSortColumn = (by, dir, type) => {\r\n    dispatch(getUsers({ sortBy: by, direction: dir, sortType: type }));\r\n  };\r\n\r\n  const searchSubmit = ({ search, filters }) => {\r\n    dispatch(getUsers({ searchBy: search, filters }));\r\n  };\r\n\r\n  const resetSubmit = () => {\r\n    dispatch(getUsers({ filters: {} }));\r\n  };\r\n\r\n  const onCreateUserClick = (user = {}) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CREATE_EDIT_USER',\r\n        props: {\r\n          title: user.id ? 'administration.users.edit.title' : 'administration.users.create.title',\r\n          fullWidth: true,\r\n          maxWidth: 'md',\r\n          componentProps: { user },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const confirmUserDelete = (user) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          fullWidth: true,\r\n          title: 'administration.users.delete.title',\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            confirmMessage: utils.string.t('administration.users.delete.confirmText', { name: user.fullName }),\r\n            submitHandler: async () => {\r\n              await dispatch(userDelete(user));\r\n              dispatch(getUsers({ page: currentPage }));\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const optionsBusinessProcess = refDataBusinessProcesses.map((bp) => ({ id: bp.businessProcessID, name: bp.businessProcessName }));\r\n  const optionsXbInstance = refDataXbInstances\r\n    .filter((id) => id?.sourceID?.toString() !== constants.EDGE_XB_INSTANCE?.toString())\r\n    .map((xbi) => ({ id: xbi.sourceID, name: xbi.sourceName }));\r\n\r\n  const filters = [\r\n    {\r\n      id: 'businessProcessIds',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('administration.users.table.cols.businessProcess'),\r\n      value: usersFilters?.businessProcessIds || [],\r\n      options: optionsBusinessProcess,\r\n      content: <MultiSelect id=\"businessProcessIds\" search options={optionsBusinessProcess} />,\r\n    },\r\n    {\r\n      id: 'xbInstanceIds',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('administration.users.table.cols.xbInstance'),\r\n      value: usersFilters?.xbInstanceIds || [],\r\n      options: optionsXbInstance,\r\n      content: <MultiSelect id=\"xbInstanceIds\" search options={optionsXbInstance} />,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div data-testid=\"administration-user\">\r\n      <TableToolbar>\r\n        <TableActions>\r\n          <AccessControl feature=\"admin.user\" permissions=\"create\">\r\n            <Button\r\n              icon={AddIcon}\r\n              color=\"primary\"\r\n              variant=\"contained\"\r\n              size=\"small\"\r\n              text={utils.string.t('administration.users.create.createButton')}\r\n              data-testid=\"admin-create-button\"\r\n              onClick={onCreateUserClick}\r\n            />\r\n          </AccessControl>\r\n        </TableActions>\r\n        <TableFilters\r\n          search\r\n          searchPlaceholder={utils.string.t('administration.users.searchPlaceholder')}\r\n          filters\r\n          filtersArray={filters}\r\n          handlers={{\r\n            onSearch: searchSubmit,\r\n            onFilter: searchSubmit,\r\n            onResetFilter: resetSubmit,\r\n          }}\r\n        />\r\n      </TableToolbar>\r\n\r\n      <AdministrationUserGrid\r\n        onCreateUser={onCreateUserClick}\r\n        confirmUserDelete={confirmUserDelete}\r\n        users={users}\r\n        usersPagination={usersPagination}\r\n        usersSort={usersSort}\r\n        handleChangePage={handleChangePage}\r\n        handleChangeRowsPerPage={handleChangeRowsPerPage}\r\n        onSortColumn={onSortColumn}\r\n        refDataXbInstances={refDataXbInstances}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}