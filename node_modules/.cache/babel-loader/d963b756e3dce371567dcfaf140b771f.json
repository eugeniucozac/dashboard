{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as utils from 'utils';\nimport * as constants from 'consts';\nexport var getMetaDataForPdf = function getMetaDataForPdf(params) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var leadRef = params.leadRef,\n        instruction = params.instruction;\n    var defaultError = {\n      file: 'stores/processingInstructions.actions.getMetaDataForPdf'\n    };\n    dispatch(getMetaDataForPdfRequest(params));\n    var queryParams = {\n      sectionType: constants.DMS_CONTEXT_POLICY,\n      sourceId: leadRef === null || leadRef === void 0 ? void 0 : leadRef.xbInstanceId,\n      referenceId: leadRef === null || leadRef === void 0 ? void 0 : leadRef.xbPolicyId,\n      sectionRef: instruction === null || instruction === void 0 ? void 0 : instruction.id\n    };\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.dmsService,\n      path: 'data/context/details',\n      params: queryParams\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(getMetaDataForPdfSuccess(data.data));\n      return data;\n    })[\"catch\"](function (err) {\n      utils.api.handleError(err, _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API fetch error (processingInstructions.getMetaDataForPdf)'\n      }));\n      dispatch(getMetaDataForPdfFailure(err));\n      return err;\n    });\n  };\n};\nexport var getMetaDataForPdfRequest = function getMetaDataForPdfRequest(params) {\n  return {\n    type: 'PROCESSING_INSTRUCTIONS_GET_META_DATA_REQUEST',\n    payload: params\n  };\n};\nexport var getMetaDataForPdfSuccess = function getMetaDataForPdfSuccess(data) {\n  return {\n    type: 'PROCESSING_INSTRUCTIONS_GET_META_DATA_SUCCESS',\n    payload: data\n  };\n};\nexport var getMetaDataForPdfFailure = function getMetaDataForPdfFailure(error) {\n  return {\n    type: 'PROCESSING_INSTRUCTIONS_GET_META_DATA_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/processingInstructions/processingInstructions.actions.getMetaDataForPdf.js"],"names":["utils","constants","getMetaDataForPdf","params","dispatch","getState","auth","user","endpoint","config","vars","leadRef","instruction","defaultError","file","getMetaDataForPdfRequest","queryParams","sectionType","DMS_CONTEXT_POLICY","sourceId","xbInstanceId","referenceId","xbPolicyId","sectionRef","id","api","get","token","accessToken","dmsService","path","then","response","handleResponse","json","handleNewData","data","getMetaDataForPdfSuccess","err","handleError","message","getMetaDataForPdfFailure","type","payload","error"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,SAAZ,MAA2B,QAA3B;AAEA,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,MAAD;AAAA,SAAY,UAACC,QAAD,EAAWC,QAAX,EAAwB;AACnE;AADmE,oBAEPA,QAAQ,EAFD;AAAA,QAEnDC,IAFmD,aAE3DC,IAF2D,CAEnDD,IAFmD;AAAA,QAEzBE,QAFyB,aAE3CC,MAF2C,CAEjCC,IAFiC,CAEzBF,QAFyB;;AAAA,QAI3DG,OAJ2D,GAIlCR,MAJkC,CAI3DQ,OAJ2D;AAAA,QAIlDC,WAJkD,GAIlCT,MAJkC,CAIlDS,WAJkD;AAMnE,QAAMC,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE;AADa,KAArB;AAIAV,IAAAA,QAAQ,CAACW,wBAAwB,CAACZ,MAAD,CAAzB,CAAR;AAEA,QAAMa,WAAW,GAAG;AAClBC,MAAAA,WAAW,EAAEhB,SAAS,CAACiB,kBADL;AAElBC,MAAAA,QAAQ,EAAER,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAES,YAFD;AAGlBC,MAAAA,WAAW,EAAEV,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEW,UAHJ;AAIlBC,MAAAA,UAAU,EAAEX,WAAF,aAAEA,WAAF,uBAAEA,WAAW,CAAEY;AAJP,KAApB;AAOA,WAAOxB,KAAK,CAACyB,GAAN,CACJC,GADI,CACA;AACHC,MAAAA,KAAK,EAAErB,IAAI,CAACsB,WADT;AAEHpB,MAAAA,QAAQ,EAAEA,QAAQ,CAACqB,UAFhB;AAGHC,MAAAA,IAAI,EAAE,sBAHH;AAIH3B,MAAAA,MAAM,EAAEa;AAJL,KADA,EAOJe,IAPI,CAOC,UAACC,QAAD;AAAA,aAAchC,KAAK,CAACyB,GAAN,CAAUQ,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAPD,EAQJD,IARI,CAQC,UAACG,IAAD;AAAA,aAAUlC,KAAK,CAACyB,GAAN,CAAUU,aAAV,CAAwBD,IAAxB,CAAV;AAAA,KARD,EASJH,IATI,CASC,UAACK,IAAD,EAAU;AACdhC,MAAAA,QAAQ,CAACiC,wBAAwB,CAACD,IAAI,CAACA,IAAN,CAAzB,CAAR;AACA,aAAOA,IAAP;AACD,KAZI,WAaE,UAACE,GAAD,EAAS;AACdtC,MAAAA,KAAK,CAACyB,GAAN,CAAUc,WAAV,CAAsBD,GAAtB,kCAAgCzB,YAAhC;AAA8C2B,QAAAA,OAAO,EAAE;AAAvD;AACApC,MAAAA,QAAQ,CAACqC,wBAAwB,CAACH,GAAD,CAAzB,CAAR;AACA,aAAOA,GAAP;AACD,KAjBI,CAAP;AAkBD,GArCgC;AAAA,CAA1B;AAuCP,OAAO,IAAMvB,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACZ,MAAD,EAAY;AAClD,SAAO;AACLuC,IAAAA,IAAI,EAAE,+CADD;AAELC,IAAAA,OAAO,EAAExC;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMkC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACD,IAAD,EAAU;AAChD,SAAO;AACLM,IAAAA,IAAI,EAAE,+CADD;AAELC,IAAAA,OAAO,EAAEP;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMK,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACG,KAAD,EAAW;AACjD,SAAO;AACLF,IAAAA,IAAI,EAAE,+CADD;AAELC,IAAAA,OAAO,EAAEC;AAFJ,GAAP;AAID,CALM","sourcesContent":["import * as utils from 'utils';\r\nimport * as constants from 'consts';\r\n\r\nexport const getMetaDataForPdf = (params) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }, } } = getState();\r\n\r\n  const { leadRef, instruction } = params;\r\n\r\n  const defaultError = {\r\n    file: 'stores/processingInstructions.actions.getMetaDataForPdf',\r\n  };\r\n\r\n  dispatch(getMetaDataForPdfRequest(params));\r\n\r\n  const queryParams = {\r\n    sectionType: constants.DMS_CONTEXT_POLICY,\r\n    sourceId: leadRef?.xbInstanceId,\r\n    referenceId: leadRef?.xbPolicyId,\r\n    sectionRef: instruction?.id,\r\n  };\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.dmsService,\r\n      path: 'data/context/details',\r\n      params: queryParams,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(getMetaDataForPdfSuccess(data.data));\r\n      return data;\r\n    })\r\n    .catch((err) => {\r\n      utils.api.handleError(err, { ...defaultError, message: 'API fetch error (processingInstructions.getMetaDataForPdf)' });\r\n      dispatch(getMetaDataForPdfFailure(err));\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const getMetaDataForPdfRequest = (params) => {\r\n  return {\r\n    type: 'PROCESSING_INSTRUCTIONS_GET_META_DATA_REQUEST',\r\n    payload: params,\r\n  };\r\n};\r\n\r\nexport const getMetaDataForPdfSuccess = (data) => {\r\n  return {\r\n    type: 'PROCESSING_INSTRUCTIONS_GET_META_DATA_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const getMetaDataForPdfFailure = (error) => {\r\n  return {\r\n    type: 'PROCESSING_INSTRUCTIONS_GET_META_DATA_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}