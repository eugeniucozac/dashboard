{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\pages\\\\RiskDetails\\\\RiskDetails.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport isEmpty from 'lodash/isEmpty'; // app\n\nimport { getRiskDetails, getRiskDefinitions, getCoverageDefinition, getCoverages, selectRiskSelected, selectRiskSelectedLoading, getRiskCountries, selectRiskCountries, selectRiskDefinitionsFieldsByType, selectCoverageDefinitionsFieldsByType, selectCoverageDefinitionsLoading, getRiskProducts, selectProductsSorted } from 'stores';\nimport * as utils from 'utils';\nimport config from 'config';\nimport RiskDetailsView from './RiskDetailsView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar RiskDetails = function RiskDetails() {\n  _s();\n\n  var _risk$insured, _Object$values, _Object$keys, _risk$insured2;\n\n  var dispatch = useDispatch();\n\n  var _useParams = useParams(),\n      id = _useParams.id;\n\n  var brand = useSelector(function (state) {\n    return state.ui.brand;\n  });\n  var risk = useSelector(selectRiskSelected);\n  var riskIsLoading = useSelector(selectRiskSelectedLoading);\n  var riskProducts = useSelector(selectProductsSorted);\n  var countries = useSelector(selectRiskCountries);\n  var definitionsFieldsWithLabel = useSelector(selectRiskDefinitionsFieldsByType(risk && risk.riskType));\n  var coverageDefinitionLoading = useSelector(selectCoverageDefinitionsLoading);\n  var definitionsFields = definitionsFieldsWithLabel.filter(function (definition) {\n    return definition.type !== 'LABEL';\n  });\n  var countryOfOrigin = countries === null || countries === void 0 ? void 0 : countries.filter(function (country) {\n    var _risk$risk;\n\n    return country.value === (risk === null || risk === void 0 ? void 0 : (_risk$risk = risk.risk) === null || _risk$risk === void 0 ? void 0 : _risk$risk.countryOfOrigin);\n  });\n  var coverageDefinition = useSelector(selectCoverageDefinitionsFieldsByType(risk === null || risk === void 0 ? void 0 : risk.riskType));\n  var pageTitle = (risk === null || risk === void 0 ? void 0 : (_risk$insured = risk.insured) === null || _risk$insured === void 0 ? void 0 : _risk$insured.name) ? risk.insured.name : '';\n  useEffect(function () {\n    if (!utils.generic.isValidObject(risk, 'id') || (risk === null || risk === void 0 ? void 0 : risk.id) !== id) dispatch(getRiskDetails(id)); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(function () {\n    if (risk.riskType) {\n      dispatch(getRiskDefinitions(risk.riskType));\n    }\n  }, [dispatch, risk.riskType]);\n  useEffect(function () {\n    if (isEmpty(riskProducts)) {\n      dispatch(getRiskProducts());\n    }\n  }, [dispatch, riskProducts]);\n  useEffect(function () {\n    if (risk.riskType && isEmpty(countries)) {\n      dispatch(getRiskCountries());\n    }\n  }, [countries, dispatch, risk.riskType]);\n  useEffect(function () {\n    if (!coverageDefinitionLoading && risk.riskType && utils.generic.isInvalidOrEmptyArray(coverageDefinition)) {\n      dispatch(getCoverageDefinition(risk.riskType, 'COVERAGE_COMPARISON'));\n    }\n  }, [coverageDefinition, dispatch, risk.riskType, coverageDefinitionLoading]);\n  useEffect(function () {\n    if (risk.id) {\n      dispatch(getCoverages(risk.id));\n    }\n  }, [risk.id, dispatch]);\n  var groups = Object.keys(utils.risk.getGroups(definitionsFields)) || [];\n  var locations = ((_Object$values = Object.values((risk === null || risk === void 0 ? void 0 : risk.risk) || {})) === null || _Object$values === void 0 ? void 0 : _Object$values.find(function (item) {\n    return utils.generic.isValidArray(item, true) && (item === null || item === void 0 ? void 0 : item.every(function (l) {\n      return Boolean(l === null || l === void 0 ? void 0 : l.latitude) && Boolean(l === null || l === void 0 ? void 0 : l.longitude);\n    }));\n  })) || [];\n  var locationKey = ((_Object$keys = Object.keys((risk === null || risk === void 0 ? void 0 : risk.risk) || {})) === null || _Object$keys === void 0 ? void 0 : _Object$keys.find(function (key) {\n    var _risk$risk$key;\n\n    return utils.generic.isValidArray(risk.risk[key], true) && ((_risk$risk$key = risk.risk[key]) === null || _risk$risk$key === void 0 ? void 0 : _risk$risk$key.every(function (l) {\n      return Boolean(l === null || l === void 0 ? void 0 : l.latitude) && Boolean(l === null || l === void 0 ? void 0 : l.longitude);\n    }));\n  })) || [];\n  var locationDefinitions = definitionsFields.find(function (definition) {\n    return definition.name === locationKey;\n  });\n  var formattedLocations = locations === null || locations === void 0 ? void 0 : locations.map(function (location, index) {\n    return _objectSpread({\n      id: index + 1,\n      lat: location.latitude,\n      lng: location.longitude,\n      locationsFound: 1\n    }, location);\n  });\n  var breadcrumbs = [{\n    name: 'quote-bind',\n    label: utils.string.t('admin.quoteBindTitle'),\n    link: \"\".concat(config.routes.quoteBind.root)\n  }, {\n    name: 'risk',\n    label: risk === null || risk === void 0 ? void 0 : (_risk$insured2 = risk.insured) === null || _risk$insured2 === void 0 ? void 0 : _risk$insured2.name,\n    link: \"\".concat(config.routes.quoteBind.riskDetails, \"/\").concat(id),\n    active: true,\n    largeFont: true\n  }];\n  return id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"\".concat(pageTitle, \" - \").concat(utils.app.getAppName(brand))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(RiskDetailsView, {\n      breadcrumbs: breadcrumbs,\n      riskIsLoading: riskIsLoading,\n      risk: risk,\n      riskProducts: riskProducts,\n      countries: countries,\n      countryOfOrigin: countryOfOrigin,\n      groups: groups,\n      definitionsFields: definitionsFields,\n      coverageDefinition: coverageDefinition,\n      locations: formattedLocations,\n      locationDefinitions: locationDefinitions,\n      locationKey: locationKey\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true) : null;\n};\n\n_s(RiskDetails, \"s3m0vMD11h1ZqQynLnN9Xw9SgX4=\", false, function () {\n  return [useDispatch, useParams, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = RiskDetails;\nexport default RiskDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"RiskDetails\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/pages/RiskDetails/RiskDetails.js"],"names":["useEffect","useParams","useDispatch","useSelector","Helmet","isEmpty","getRiskDetails","getRiskDefinitions","getCoverageDefinition","getCoverages","selectRiskSelected","selectRiskSelectedLoading","getRiskCountries","selectRiskCountries","selectRiskDefinitionsFieldsByType","selectCoverageDefinitionsFieldsByType","selectCoverageDefinitionsLoading","getRiskProducts","selectProductsSorted","utils","config","RiskDetailsView","RiskDetails","dispatch","id","brand","state","ui","risk","riskIsLoading","riskProducts","countries","definitionsFieldsWithLabel","riskType","coverageDefinitionLoading","definitionsFields","filter","definition","type","countryOfOrigin","country","value","coverageDefinition","pageTitle","insured","name","generic","isValidObject","isInvalidOrEmptyArray","groups","Object","keys","getGroups","locations","values","find","item","isValidArray","every","l","Boolean","latitude","longitude","locationKey","key","locationDefinitions","formattedLocations","map","location","index","lat","lng","locationsFound","breadcrumbs","label","string","t","link","routes","quoteBind","root","riskDetails","active","largeFont","app","getAppName"],"mappings":"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","sourcesContent":["import { useEffect } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Helmet } from 'react-helmet';\r\nimport isEmpty from 'lodash/isEmpty';\r\n\r\n// app\r\nimport {\r\n  getRiskDetails,\r\n  getRiskDefinitions,\r\n  getCoverageDefinition,\r\n  getCoverages,\r\n  selectRiskSelected,\r\n  selectRiskSelectedLoading,\r\n  getRiskCountries,\r\n  selectRiskCountries,\r\n  selectRiskDefinitionsFieldsByType,\r\n  selectCoverageDefinitionsFieldsByType,\r\n  selectCoverageDefinitionsLoading,\r\n  getRiskProducts,\r\n  selectProductsSorted,\r\n} from 'stores';\r\nimport * as utils from 'utils';\r\nimport config from 'config';\r\n\r\nimport RiskDetailsView from './RiskDetailsView';\r\n\r\nconst RiskDetails = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { id } = useParams();\r\n\r\n  const brand = useSelector((state) => state.ui.brand);\r\n  const risk = useSelector(selectRiskSelected);\r\n  const riskIsLoading = useSelector(selectRiskSelectedLoading);\r\n  const riskProducts = useSelector(selectProductsSorted);\r\n  const countries = useSelector(selectRiskCountries);\r\n  const definitionsFieldsWithLabel = useSelector(selectRiskDefinitionsFieldsByType(risk && risk.riskType));\r\n  const coverageDefinitionLoading = useSelector(selectCoverageDefinitionsLoading);\r\n  const definitionsFields = definitionsFieldsWithLabel.filter((definition) => definition.type !== 'LABEL');\r\n\r\n  const countryOfOrigin = countries?.filter((country) => country.value === risk?.risk?.countryOfOrigin);\r\n  const coverageDefinition = useSelector(selectCoverageDefinitionsFieldsByType(risk?.riskType));\r\n  const pageTitle = risk?.insured?.name ? risk.insured.name : '';\r\n\r\n  useEffect(() => {\r\n    if (!utils.generic.isValidObject(risk, 'id') || risk?.id !== id) dispatch(getRiskDetails(id));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (risk.riskType) {\r\n      dispatch(getRiskDefinitions(risk.riskType));\r\n    }\r\n  }, [dispatch, risk.riskType]);\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(riskProducts)) {\r\n      dispatch(getRiskProducts());\r\n    }\r\n  }, [dispatch, riskProducts]);\r\n\r\n  useEffect(() => {\r\n    if (risk.riskType && isEmpty(countries)) {\r\n      dispatch(getRiskCountries());\r\n    }\r\n  }, [countries, dispatch, risk.riskType]);\r\n\r\n  useEffect(() => {\r\n    if (!coverageDefinitionLoading && risk.riskType && utils.generic.isInvalidOrEmptyArray(coverageDefinition)) {\r\n      dispatch(getCoverageDefinition(risk.riskType, 'COVERAGE_COMPARISON'));\r\n    }\r\n  }, [coverageDefinition, dispatch, risk.riskType, coverageDefinitionLoading]);\r\n\r\n  useEffect(() => {\r\n    if (risk.id) {\r\n      dispatch(getCoverages(risk.id));\r\n    }\r\n  }, [risk.id, dispatch]);\r\n\r\n  const groups = Object.keys(utils.risk.getGroups(definitionsFields)) || [];\r\n\r\n  const locations =\r\n    Object.values(risk?.risk || {})?.find((item) => {\r\n      return utils.generic.isValidArray(item, true) && item?.every((l) => Boolean(l?.latitude) && Boolean(l?.longitude));\r\n    }) || [];\r\n\r\n  const locationKey =\r\n    Object.keys(risk?.risk || {})?.find((key) => {\r\n      return (\r\n        utils.generic.isValidArray(risk.risk[key], true) && risk.risk[key]?.every((l) => Boolean(l?.latitude) && Boolean(l?.longitude))\r\n      );\r\n    }) || [];\r\n  const locationDefinitions = definitionsFields.find((definition) => definition.name === locationKey);\r\n\r\n  const formattedLocations = locations?.map((location, index) => {\r\n    return {\r\n      id: index + 1,\r\n      lat: location.latitude,\r\n      lng: location.longitude,\r\n      locationsFound: 1,\r\n      ...location,\r\n    };\r\n  });\r\n\r\n  const breadcrumbs = [\r\n    {\r\n      name: 'quote-bind',\r\n      label: utils.string.t('admin.quoteBindTitle'),\r\n      link: `${config.routes.quoteBind.root}`,\r\n    },\r\n    {\r\n      name: 'risk',\r\n      label: risk?.insured?.name,\r\n      link: `${config.routes.quoteBind.riskDetails}/${id}`,\r\n      active: true,\r\n      largeFont: true,\r\n    },\r\n  ];\r\n\r\n  return id ? (\r\n    <>\r\n      <Helmet>\r\n        <title>{`${pageTitle} - ${utils.app.getAppName(brand)}`}</title>\r\n      </Helmet>\r\n      <RiskDetailsView\r\n        breadcrumbs={breadcrumbs}\r\n        riskIsLoading={riskIsLoading}\r\n        risk={risk}\r\n        riskProducts={riskProducts}\r\n        countries={countries}\r\n        countryOfOrigin={countryOfOrigin}\r\n        groups={groups}\r\n        definitionsFields={definitionsFields}\r\n        coverageDefinition={coverageDefinition}\r\n        locations={formattedLocations}\r\n        locationDefinitions={locationDefinitions}\r\n        locationKey={locationKey}\r\n      />\r\n    </>\r\n  ) : null;\r\n};\r\n\r\nexport default RiskDetails;\r\n"]},"metadata":{},"sourceType":"module"}