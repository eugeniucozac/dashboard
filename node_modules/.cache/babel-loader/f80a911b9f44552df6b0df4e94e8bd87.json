{"ast":null,"code":"import * as utils from 'utils';\nimport camelCase from 'lodash/camelCase';\nvar utilsExcel = {\n  removeLineBreaksWithinCell: function removeLineBreaksWithinCell(string) {\n    var output = [];\n    string.split('\"').forEach(function (s, i) {\n      if (utils.number.isOdd(i)) {\n        output.push(s.split('\\n').join(''));\n      } else {\n        output.push(s);\n      }\n    });\n    return output.join('');\n  },\n  splitCellsByRow: function splitCellsByRow(string) {\n    var rowArr = string.trim().split('\\n');\n    return rowArr.map(function (r) {\n      return r.split('\\t');\n    });\n  },\n  getColumns: function getColumns(cellsByRow) {\n    if (!cellsByRow || !utils.generic.isValidArray(cellsByRow, true)) return [];\n    var rowHeaders = cellsByRow[0];\n    return utils.generic.isValidArray(rowHeaders, true) ? rowHeaders.map(function (h) {\n      return camelCase(h);\n    }) : [];\n  },\n  getObjects: function getObjects(cellsByRow) {\n    if (!cellsByRow || !utils.generic.isValidArray(cellsByRow, true)) return [];\n    var headers = cellsByRow[0] || [];\n    return cellsByRow.slice(1).map(function (row) {\n      var obj = {};\n      headers.forEach(function (h, i) {\n        obj[camelCase(headers[i])] = row[i];\n      });\n      return obj;\n    });\n  }\n};\nexport default utilsExcel;","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/utils/excel/excel.js"],"names":["utils","camelCase","utilsExcel","removeLineBreaksWithinCell","string","output","split","forEach","s","i","number","isOdd","push","join","splitCellsByRow","rowArr","trim","map","r","getColumns","cellsByRow","generic","isValidArray","rowHeaders","h","getObjects","headers","slice","row","obj"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AAEA,IAAMC,UAAU,GAAG;AACjBC,EAAAA,0BAA0B,EAAE,oCAACC,MAAD,EAAY;AACtC,QAAMC,MAAM,GAAG,EAAf;AAEAD,IAAAA,MAAM,CAACE,KAAP,CAAa,GAAb,EAAkBC,OAAlB,CAA0B,UAACC,CAAD,EAAIC,CAAJ,EAAU;AAClC,UAAIT,KAAK,CAACU,MAAN,CAAaC,KAAb,CAAmBF,CAAnB,CAAJ,EAA2B;AACzBJ,QAAAA,MAAM,CAACO,IAAP,CAAYJ,CAAC,CAACF,KAAF,CAAQ,IAAR,EAAcO,IAAd,CAAmB,EAAnB,CAAZ;AACD,OAFD,MAEO;AACLR,QAAAA,MAAM,CAACO,IAAP,CAAYJ,CAAZ;AACD;AACF,KAND;AAQA,WAAOH,MAAM,CAACQ,IAAP,CAAY,EAAZ,CAAP;AACD,GAbgB;AAejBC,EAAAA,eAAe,EAAE,yBAACV,MAAD,EAAY;AAC3B,QAAMW,MAAM,GAAGX,MAAM,CAACY,IAAP,GAAcV,KAAd,CAAoB,IAApB,CAAf;AAEA,WAAOS,MAAM,CAACE,GAAP,CAAW,UAACC,CAAD;AAAA,aAAOA,CAAC,CAACZ,KAAF,CAAQ,IAAR,CAAP;AAAA,KAAX,CAAP;AACD,GAnBgB;AAqBjBa,EAAAA,UAAU,EAAE,oBAACC,UAAD,EAAgB;AAC1B,QAAI,CAACA,UAAD,IAAe,CAACpB,KAAK,CAACqB,OAAN,CAAcC,YAAd,CAA2BF,UAA3B,EAAuC,IAAvC,CAApB,EAAkE,OAAO,EAAP;AAElE,QAAMG,UAAU,GAAGH,UAAU,CAAC,CAAD,CAA7B;AACA,WAAOpB,KAAK,CAACqB,OAAN,CAAcC,YAAd,CAA2BC,UAA3B,EAAuC,IAAvC,IAA+CA,UAAU,CAACN,GAAX,CAAe,UAACO,CAAD;AAAA,aAAOvB,SAAS,CAACuB,CAAD,CAAhB;AAAA,KAAf,CAA/C,GAAqF,EAA5F;AACD,GA1BgB;AA4BjBC,EAAAA,UAAU,EAAE,oBAACL,UAAD,EAAgB;AAC1B,QAAI,CAACA,UAAD,IAAe,CAACpB,KAAK,CAACqB,OAAN,CAAcC,YAAd,CAA2BF,UAA3B,EAAuC,IAAvC,CAApB,EAAkE,OAAO,EAAP;AAElE,QAAMM,OAAO,GAAGN,UAAU,CAAC,CAAD,CAAV,IAAiB,EAAjC;AAEA,WAAOA,UAAU,CAACO,KAAX,CAAiB,CAAjB,EAAoBV,GAApB,CAAwB,UAACW,GAAD,EAAS;AACtC,UAAMC,GAAG,GAAG,EAAZ;AAEAH,MAAAA,OAAO,CAACnB,OAAR,CAAgB,UAACiB,CAAD,EAAIf,CAAJ,EAAU;AACxBoB,QAAAA,GAAG,CAAC5B,SAAS,CAACyB,OAAO,CAACjB,CAAD,CAAR,CAAV,CAAH,GAA6BmB,GAAG,CAACnB,CAAD,CAAhC;AACD,OAFD;AAIA,aAAOoB,GAAP;AACD,KARM,CAAP;AASD;AA1CgB,CAAnB;AA6CA,eAAe3B,UAAf","sourcesContent":["import * as utils from 'utils';\r\nimport camelCase from 'lodash/camelCase';\r\n\r\nconst utilsExcel = {\r\n  removeLineBreaksWithinCell: (string) => {\r\n    const output = [];\r\n\r\n    string.split('\"').forEach((s, i) => {\r\n      if (utils.number.isOdd(i)) {\r\n        output.push(s.split('\\n').join(''));\r\n      } else {\r\n        output.push(s);\r\n      }\r\n    });\r\n\r\n    return output.join('');\r\n  },\r\n\r\n  splitCellsByRow: (string) => {\r\n    const rowArr = string.trim().split('\\n');\r\n\r\n    return rowArr.map((r) => r.split('\\t'));\r\n  },\r\n\r\n  getColumns: (cellsByRow) => {\r\n    if (!cellsByRow || !utils.generic.isValidArray(cellsByRow, true)) return [];\r\n\r\n    const rowHeaders = cellsByRow[0];\r\n    return utils.generic.isValidArray(rowHeaders, true) ? rowHeaders.map((h) => camelCase(h)) : [];\r\n  },\r\n\r\n  getObjects: (cellsByRow) => {\r\n    if (!cellsByRow || !utils.generic.isValidArray(cellsByRow, true)) return [];\r\n\r\n    const headers = cellsByRow[0] || [];\r\n\r\n    return cellsByRow.slice(1).map((row) => {\r\n      const obj = {};\r\n\r\n      headers.forEach((h, i) => {\r\n        obj[camelCase(headers[i])] = row[i];\r\n      });\r\n\r\n      return obj;\r\n    });\r\n  },\r\n};\r\n\r\nexport default utilsExcel;\r\n"]},"metadata":{},"sourceType":"module"}