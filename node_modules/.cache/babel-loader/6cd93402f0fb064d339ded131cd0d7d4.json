{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\RiskQuotes\\\\RiskQuotes.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux'; // app\n\nimport RiskQuotesView from './RiskQuotes.view';\nimport { getRiskQuotes, selectRiskQuotes, selectRiskQuotesLoading, showModal, acceptRiskQuote, declineRiskQuote, downloadRiskQuote, getRiskDetails, selectPartyOptions, selectRefDataCountriesIso2, requestToBind, requestDismissIssues, postRiskQuoteResponse } from 'stores';\nimport { RISK_QUOTE_STATUS_BOUND, RISK_ISSUE_SANCTIONS_BLOCKED } from 'consts';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar RiskQuotes = function RiskQuotes(_ref) {\n  _s();\n\n  var _risk$insured, _risk$reinsured;\n\n  var risk = _ref.risk,\n      riskIsLoading = _ref.riskIsLoading;\n  var dispatch = useDispatch();\n  var quotes = useSelector(selectRiskQuotes);\n  var isLoading = useSelector(selectRiskQuotesLoading);\n  var partyOptions = useSelector(selectPartyOptions);\n  var refDataCountries = useSelector(selectRefDataCountriesIso2);\n  var hasBoundQuote = utils.generic.isValidArray(quotes, true) && quotes.some(function (q) {\n    return q.response && q.response.responseStatus === RISK_QUOTE_STATUS_BOUND;\n  });\n  var insuredSanctionsCheckResult = (risk === null || risk === void 0 ? void 0 : (_risk$insured = risk.insured) === null || _risk$insured === void 0 ? void 0 : _risk$insured.sanctionsCheckResult) || {};\n  var reInsuredSanctionsCheckResult = (risk === null || risk === void 0 ? void 0 : (_risk$reinsured = risk.reinsured) === null || _risk$reinsured === void 0 ? void 0 : _risk$reinsured.sanctionsCheckResult) || {};\n  var issues = (risk === null || risk === void 0 ? void 0 : risk.issues) || [];\n  var hasIssues = (issues === null || issues === void 0 ? void 0 : issues.length) || false; // dont'render Re-Quote if there is a issueType: \"SANCTIONS_BLOCKED\" (RISK_ISSUE_SANCTIONS_BLOCKED)\n\n  var isSanctionsBlocked = issues.some(function (issue) {\n    return issue.issueType === RISK_ISSUE_SANCTIONS_BLOCKED;\n  });\n  var issuesData = {\n    insuredSanctionsCheckResult: insuredSanctionsCheckResult,\n    reInsuredSanctionsCheckResult: reInsuredSanctionsCheckResult,\n    issues: issues,\n    hasIssues: hasIssues\n  };\n  useEffect(function () {\n    dispatch(getRiskQuotes(risk === null || risk === void 0 ? void 0 : risk.id));\n  }, [dispatch, risk === null || risk === void 0 ? void 0 : risk.id]);\n\n  var handlePatchRiskQuote = function handlePatchRiskQuote(_ref2) {\n    var quote = _ref2.quote;\n    return function (event) {\n      dispatch(showModal({\n        component: 'EDIT_RISK_QUOTE',\n        props: {\n          title: 'risks.updateQuote',\n          fullWidth: true,\n          maxWidth: 'xs',\n          componentProps: {\n            quote: quote\n          }\n        }\n      }));\n    };\n  };\n\n  var handleBindRiskQuote = function handleBindRiskQuote(quote) {\n    return function (event) {\n      var bindInfo = {\n        quoteId: quote === null || quote === void 0 ? void 0 : quote.id,\n        effectiveFrom: risk === null || risk === void 0 ? void 0 : risk.inceptionDate,\n        effectiveTo: risk === null || risk === void 0 ? void 0 : risk.expiryDate,\n        riskId: risk === null || risk === void 0 ? void 0 : risk.id,\n        responseStatus: RISK_QUOTE_STATUS_BOUND\n      };\n      dispatch(postRiskQuoteResponse(bindInfo));\n    };\n  };\n\n  var executePreBind = function executePreBind(quote, isPreBind, isReqBind) {\n    var product = risk.riskType;\n    var modalTitle = isPreBind ? \"\".concat(utils.string.t('risks.preBind')) : \"\".concat(utils.string.t('risks.postBind'));\n    dispatch(showModal({\n      component: 'PRE_BIND_QUOTE',\n      props: {\n        title: modalTitle,\n        fullWidth: true,\n        disableBackdropClick: true,\n        enableFullScreen: true,\n        maxWidth: 'lg',\n        componentProps: {\n          product: product,\n          risk: risk,\n          quote: quote,\n          isPreBind: isPreBind,\n          isReqBind: isReqBind\n        }\n      }\n    }));\n  };\n\n  var handlePreBind = function handlePreBind(quote, isPreBind) {\n    return function (event) {\n      executePreBind(quote, isPreBind, false);\n    };\n  };\n\n  var handleRequestToBind = function handleRequestToBind(quote, displayPreBind) {\n    return function (event) {\n      if (displayPreBind) {\n        executePreBind(quote, true, true);\n      } else {\n        dispatch(requestToBind(quote));\n      }\n    };\n  };\n\n  var handleAcceptRiskQuote = function handleAcceptRiskQuote(id) {\n    return function (event) {\n      dispatch(acceptRiskQuote(id));\n    };\n  };\n\n  var handleDownloadQuote = function handleDownloadQuote(id) {\n    return function (event) {\n      dispatch(downloadRiskQuote(id));\n    };\n  };\n\n  var handleDeclineRiskQuote = function handleDeclineRiskQuote(id) {\n    return function (event) {\n      dispatch(showModal({\n        component: 'CONFIRM_DECLINE_RISK',\n        props: {\n          modalProps: {\n            fullWidth: true,\n            maxWidth: 'md'\n          },\n          title: 'risks.declineQuote',\n          maxWidth: 'xs',\n          componentProps: {\n            submitHandler: function submitHandler() {\n              dispatch(declineRiskQuote(id));\n            }\n          }\n        }\n      }));\n    };\n  };\n\n  var handleQuoteRefresh = function handleQuoteRefresh() {\n    dispatch(getRiskDetails(risk === null || risk === void 0 ? void 0 : risk.id, true));\n    dispatch(getRiskQuotes(risk === null || risk === void 0 ? void 0 : risk.id));\n  };\n\n  var handleRequestDismissIssues = function handleRequestDismissIssues(quote) {\n    return function (event) {\n      dispatch(requestDismissIssues(quote));\n    };\n  };\n\n  var handleReQuoteRisk = function handleReQuoteRisk() {\n    var _risk$insured2;\n\n    var riskId = risk.id;\n    var riskData = risk.risk;\n    var riskType = risk.riskType;\n    var modalTitle = \"\".concat(utils.string.t('app.reQuote'), \" - \").concat(risk === null || risk === void 0 ? void 0 : (_risk$insured2 = risk.insured) === null || _risk$insured2 === void 0 ? void 0 : _risk$insured2.name);\n    dispatch(showModal({\n      component: 'ADD_EDIT_QUOTE_BIND',\n      props: {\n        title: modalTitle,\n        fullWidth: true,\n        disableBackdropClick: true,\n        enableFullScreen: true,\n        maxWidth: 'xl',\n        componentProps: {\n          product: {\n            value: riskType\n          },\n          riskData: riskData,\n          riskId: riskId\n        }\n      }\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(RiskQuotesView, {\n    isLoading: isLoading,\n    riskIsLoading: riskIsLoading,\n    quotes: quotes,\n    hasBoundQuote: hasBoundQuote,\n    riskStatus: risk === null || risk === void 0 ? void 0 : risk.riskStatus,\n    riskInsuredId: risk === null || risk === void 0 ? void 0 : risk.insuredId,\n    isSanctionsBlocked: isSanctionsBlocked,\n    issuesData: issuesData,\n    parties: _objectSpread(_objectSpread({}, partyOptions), {}, {\n      countries: refDataCountries\n    }),\n    handlePatchRiskQuote: handlePatchRiskQuote,\n    handleDeclineRiskQuote: handleDeclineRiskQuote,\n    handleAcceptRiskQuote: handleAcceptRiskQuote,\n    handleBindRiskQuote: handleBindRiskQuote,\n    handleDownloadQuote: handleDownloadQuote,\n    handleRiskRefresh: handleQuoteRefresh,\n    handleRequestToBind: handleRequestToBind,\n    handleReQuoteRisk: handleReQuoteRisk,\n    handleQuoteRefresh: handleQuoteRefresh,\n    handlePreBind: handlePreBind,\n    handleRequestDismissIssues: handleRequestDismissIssues\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(RiskQuotes, \"+qFQM4cvnrQdEjjTjw1wtYexWKs=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = RiskQuotes;\nexport default RiskQuotes;\n\nvar _c;\n\n$RefreshReg$(_c, \"RiskQuotes\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/RiskQuotes/RiskQuotes.js"],"names":["useEffect","useSelector","useDispatch","RiskQuotesView","getRiskQuotes","selectRiskQuotes","selectRiskQuotesLoading","showModal","acceptRiskQuote","declineRiskQuote","downloadRiskQuote","getRiskDetails","selectPartyOptions","selectRefDataCountriesIso2","requestToBind","requestDismissIssues","postRiskQuoteResponse","RISK_QUOTE_STATUS_BOUND","RISK_ISSUE_SANCTIONS_BLOCKED","utils","RiskQuotes","risk","riskIsLoading","dispatch","quotes","isLoading","partyOptions","refDataCountries","hasBoundQuote","generic","isValidArray","some","q","response","responseStatus","insuredSanctionsCheckResult","insured","sanctionsCheckResult","reInsuredSanctionsCheckResult","reinsured","issues","hasIssues","length","isSanctionsBlocked","issue","issueType","issuesData","id","handlePatchRiskQuote","quote","event","component","props","title","fullWidth","maxWidth","componentProps","handleBindRiskQuote","bindInfo","quoteId","effectiveFrom","inceptionDate","effectiveTo","expiryDate","riskId","executePreBind","isPreBind","isReqBind","product","riskType","modalTitle","string","t","disableBackdropClick","enableFullScreen","handlePreBind","handleRequestToBind","displayPreBind","handleAcceptRiskQuote","handleDownloadQuote","handleDeclineRiskQuote","modalProps","submitHandler","handleQuoteRefresh","handleRequestDismissIssues","handleReQuoteRisk","riskData","name","value","riskStatus","insuredId","countries"],"mappings":"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","sourcesContent":["import { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\n// app\r\nimport RiskQuotesView from './RiskQuotes.view';\r\nimport {\r\n  getRiskQuotes,\r\n  selectRiskQuotes,\r\n  selectRiskQuotesLoading,\r\n  showModal,\r\n  acceptRiskQuote,\r\n  declineRiskQuote,\r\n  downloadRiskQuote,\r\n  getRiskDetails,\r\n  selectPartyOptions,\r\n  selectRefDataCountriesIso2,\r\n  requestToBind,\r\n  requestDismissIssues,\r\n  postRiskQuoteResponse,\r\n} from 'stores';\r\nimport { RISK_QUOTE_STATUS_BOUND, RISK_ISSUE_SANCTIONS_BLOCKED } from 'consts';\r\nimport * as utils from 'utils';\r\n\r\nconst RiskQuotes = ({ risk, riskIsLoading }) => {\r\n  const dispatch = useDispatch();\r\n  const quotes = useSelector(selectRiskQuotes);\r\n  const isLoading = useSelector(selectRiskQuotesLoading);\r\n  const partyOptions = useSelector(selectPartyOptions);\r\n  const refDataCountries = useSelector(selectRefDataCountriesIso2);\r\n  const hasBoundQuote =\r\n    utils.generic.isValidArray(quotes, true) && quotes.some((q) => q.response && q.response.responseStatus === RISK_QUOTE_STATUS_BOUND);\r\n\r\n  const insuredSanctionsCheckResult = risk?.insured?.sanctionsCheckResult || {};\r\n  const reInsuredSanctionsCheckResult = risk?.reinsured?.sanctionsCheckResult || {};\r\n  const issues = risk?.issues || [];\r\n  const hasIssues = issues?.length || false;\r\n\r\n  // dont'render Re-Quote if there is a issueType: \"SANCTIONS_BLOCKED\" (RISK_ISSUE_SANCTIONS_BLOCKED)\r\n  const isSanctionsBlocked = issues.some((issue) => issue.issueType === RISK_ISSUE_SANCTIONS_BLOCKED);\r\n\r\n  const issuesData = {\r\n    insuredSanctionsCheckResult,\r\n    reInsuredSanctionsCheckResult,\r\n    issues,\r\n    hasIssues,\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(getRiskQuotes(risk?.id));\r\n  }, [dispatch, risk?.id]);\r\n\r\n  const handlePatchRiskQuote =\r\n    ({ quote }) =>\r\n    (event) => {\r\n      dispatch(\r\n        showModal({\r\n          component: 'EDIT_RISK_QUOTE',\r\n          props: {\r\n            title: 'risks.updateQuote',\r\n            fullWidth: true,\r\n            maxWidth: 'xs',\r\n            componentProps: {\r\n              quote,\r\n            },\r\n          },\r\n        })\r\n      );\r\n    };\r\n\r\n  const handleBindRiskQuote = (quote) => (event) => {\r\n    const bindInfo = {\r\n      quoteId: quote?.id,\r\n      effectiveFrom: risk?.inceptionDate,\r\n      effectiveTo: risk?.expiryDate,\r\n      riskId: risk?.id,\r\n      responseStatus: RISK_QUOTE_STATUS_BOUND,\r\n    };\r\n    dispatch(postRiskQuoteResponse(bindInfo));\r\n  };\r\n\r\n  const executePreBind = (quote, isPreBind, isReqBind) => {\r\n    const product = risk.riskType;\r\n    const modalTitle = isPreBind ? `${utils.string.t('risks.preBind')}` : `${utils.string.t('risks.postBind')}`;\r\n\r\n    dispatch(\r\n      showModal({\r\n        component: 'PRE_BIND_QUOTE',\r\n        props: {\r\n          title: modalTitle,\r\n          fullWidth: true,\r\n          disableBackdropClick: true,\r\n          enableFullScreen: true,\r\n          maxWidth: 'lg',\r\n          componentProps: {\r\n            product: product,\r\n            risk,\r\n            quote,\r\n            isPreBind,\r\n            isReqBind,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handlePreBind = (quote, isPreBind) => (event) => {\r\n    executePreBind(quote, isPreBind, false);\r\n  };\r\n  const handleRequestToBind = (quote, displayPreBind) => (event) => {\r\n    if (displayPreBind) {\r\n      executePreBind(quote, true, true);\r\n    } else {\r\n      dispatch(requestToBind(quote));\r\n    }\r\n  };\r\n\r\n  const handleAcceptRiskQuote = (id) => (event) => {\r\n    dispatch(acceptRiskQuote(id));\r\n  };\r\n\r\n  const handleDownloadQuote = (id) => (event) => {\r\n    dispatch(downloadRiskQuote(id));\r\n  };\r\n\r\n  const handleDeclineRiskQuote = (id) => (event) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM_DECLINE_RISK',\r\n        props: {\r\n          modalProps: { fullWidth: true, maxWidth: 'md' },\r\n          title: 'risks.declineQuote',\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            submitHandler: () => {\r\n              dispatch(declineRiskQuote(id));\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleQuoteRefresh = () => {\r\n    dispatch(getRiskDetails(risk?.id, true));\r\n    dispatch(getRiskQuotes(risk?.id));\r\n  };\r\n\r\n  const handleRequestDismissIssues = (quote) => (event) => {\r\n    dispatch(requestDismissIssues(quote));\r\n  };\r\n\r\n  const handleReQuoteRisk = () => {\r\n    const riskId = risk.id;\r\n    const riskData = risk.risk;\r\n    const riskType = risk.riskType;\r\n    const modalTitle = `${utils.string.t('app.reQuote')} - ${risk?.insured?.name}`;\r\n\r\n    dispatch(\r\n      showModal({\r\n        component: 'ADD_EDIT_QUOTE_BIND',\r\n        props: {\r\n          title: modalTitle,\r\n          fullWidth: true,\r\n          disableBackdropClick: true,\r\n          enableFullScreen: true,\r\n          maxWidth: 'xl',\r\n          componentProps: {\r\n            product: { value: riskType },\r\n            riskData,\r\n            riskId,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <RiskQuotesView\r\n      isLoading={isLoading}\r\n      riskIsLoading={riskIsLoading}\r\n      quotes={quotes}\r\n      hasBoundQuote={hasBoundQuote}\r\n      riskStatus={risk?.riskStatus}\r\n      riskInsuredId={risk?.insuredId}\r\n      isSanctionsBlocked={isSanctionsBlocked}\r\n      issuesData={issuesData}\r\n      parties={{ ...partyOptions, countries: refDataCountries }}\r\n      handlePatchRiskQuote={handlePatchRiskQuote}\r\n      handleDeclineRiskQuote={handleDeclineRiskQuote}\r\n      handleAcceptRiskQuote={handleAcceptRiskQuote}\r\n      handleBindRiskQuote={handleBindRiskQuote}\r\n      handleDownloadQuote={handleDownloadQuote}\r\n      handleRiskRefresh={handleQuoteRefresh}\r\n      handleRequestToBind={handleRequestToBind}\r\n      handleReQuoteRisk={handleReQuoteRisk}\r\n      handleQuoteRefresh={handleQuoteRefresh}\r\n      handlePreBind={handlePreBind}\r\n      handleRequestDismissIssues={handleRequestDismissIssues}\r\n    />\r\n  );\r\n};\r\n\r\nexport default RiskQuotes;\r\n"]},"metadata":{},"sourceType":"module"}