{"ast":null,"code":"import _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as utils from 'utils';\nimport { addLoader, removeLoader } from 'stores';\nimport { ORGANIZATIONS, CREATE_RFI_FORM } from 'consts';\nexport var getUsersByOrg = function getUsersByOrg(org, selectedWorkItem, type) {\n  var showLoader = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  return function (dispatch, getState) {\n    var _ORGANIZATIONS$newTea, _businessProcess$, _businessProcess$$id;\n\n    // prettier-ignore\n    var _getState = getState(),\n        _getState$user = _getState.user,\n        auth = _getState$user.auth,\n        businessProcess = _getState$user.businessProcess,\n        endpoint = _getState.config.vars.endpoint;\n\n    var newTeam = (org === null || org === void 0 ? void 0 : org.toLowerCase()) || ORGANIZATIONS.mphasis.name;\n    var orgId = ((_ORGANIZATIONS$newTea = ORGANIZATIONS[newTeam]) === null || _ORGANIZATIONS$newTea === void 0 ? void 0 : _ORGANIZATIONS$newTea.id) || ORGANIZATIONS.mphasis.id;\n    if (!utils.generic.isValidArray(selectedWorkItem, true)) return null;\n    var departmentSourceId = [];\n    (selectedWorkItem || []).forEach(function (item) {\n      departmentSourceId = [].concat(_toConsumableArray(departmentSourceId), [\"\".concat(item.departmentID || item.divisionID, \"-\").concat(item.sourceID || item.sourceId)]);\n    });\n    dispatch(getClaimsAssignedToUsersListRequest(org, 'businessProcess'));\n    if (showLoader) dispatch(addLoader('getAssignedToUsersList'));\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.authService,\n      path: 'api/users/genericUserSearch',\n      data: {\n        organisationId: type === CREATE_RFI_FORM ? [] : [\"\".concat(orgId)],\n        businessProcessId: [businessProcess === null || businessProcess === void 0 ? void 0 : (_businessProcess$ = businessProcess[0]) === null || _businessProcess$ === void 0 ? void 0 : (_businessProcess$$id = _businessProcess$.id) === null || _businessProcess$$id === void 0 ? void 0 : _businessProcess$$id.toString()],\n        departmentSourceId: type === CREATE_RFI_FORM ? [] : departmentSourceId\n      }\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(getClaimsAssignedToUsersListSuccess(newTeam, type, data === null || data === void 0 ? void 0 : data.data));\n      return data.data;\n    })[\"catch\"](function (error) {\n      dispatch(getClaimsAssignedToUsersListFailure(error, {\n        file: 'stores/claims.actions.getAssignedToUsersList'\n      }));\n      return error;\n    })[\"finally\"](function () {\n      if (showLoader) dispatch(removeLoader('getAssignedToUsersList'));\n    });\n  };\n};\nexport var getClaimsAssignedToUsersListRequest = function getClaimsAssignedToUsersListRequest(org, businessProcess) {\n  return {\n    type: 'USER_GET_USERS_BY_ORG_REQUEST',\n    payload: {\n      org: org,\n      businessProcess: businessProcess\n    }\n  };\n};\nexport var getClaimsAssignedToUsersListSuccess = function getClaimsAssignedToUsersListSuccess(orgName, type, data) {\n  return {\n    type: 'USER_GET_USERS_BY_ORG_SUCCESS',\n    payload: {\n      type: type,\n      orgName: orgName,\n      items: data\n    }\n  };\n};\nexport var getClaimsAssignedToUsersListFailure = function getClaimsAssignedToUsersListFailure(error) {\n  return {\n    type: 'USER_GET_USERS_BY_ORG_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/user/user.actions.getUsersByOrg.js"],"names":["utils","addLoader","removeLoader","ORGANIZATIONS","CREATE_RFI_FORM","getUsersByOrg","org","selectedWorkItem","type","showLoader","dispatch","getState","user","auth","businessProcess","endpoint","config","vars","newTeam","toLowerCase","mphasis","name","orgId","id","generic","isValidArray","departmentSourceId","forEach","item","departmentID","divisionID","sourceID","sourceId","getClaimsAssignedToUsersListRequest","api","post","token","accessToken","authService","path","data","organisationId","businessProcessId","toString","then","response","handleResponse","json","handleNewData","getClaimsAssignedToUsersListSuccess","error","getClaimsAssignedToUsersListFailure","file","payload","orgName","items"],"mappings":"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","sourcesContent":["import * as utils from 'utils';\r\nimport { addLoader, removeLoader } from 'stores';\r\nimport { ORGANIZATIONS, CREATE_RFI_FORM } from 'consts';\r\n\r\nexport const getUsersByOrg =\r\n  (org, selectedWorkItem, type, showLoader = true) =>\r\n  (dispatch, getState) => {\r\n    // prettier-ignore\r\n    const { user: { auth, businessProcess }, config: { vars: { endpoint } } } = getState();\r\n\r\n    const newTeam = org?.toLowerCase() || ORGANIZATIONS.mphasis.name;\r\n    const orgId = ORGANIZATIONS[newTeam]?.id || ORGANIZATIONS.mphasis.id;\r\n\r\n    if (!utils.generic.isValidArray(selectedWorkItem, true)) return null;\r\n\r\n    let departmentSourceId = [];\r\n    (selectedWorkItem || []).forEach((item) => {\r\n      departmentSourceId = [...departmentSourceId, `${item.departmentID || item.divisionID}-${item.sourceID || item.sourceId}`];\r\n    });\r\n\r\n    dispatch(getClaimsAssignedToUsersListRequest(org, 'businessProcess'));\r\n    if (showLoader) dispatch(addLoader('getAssignedToUsersList'));\r\n\r\n    return utils.api\r\n      .post({\r\n        token: auth.accessToken,\r\n        endpoint: endpoint.authService,\r\n        path: 'api/users/genericUserSearch',\r\n        data: {\r\n          organisationId: type === CREATE_RFI_FORM ? [] : [`${orgId}`],\r\n          businessProcessId: [businessProcess?.[0]?.id?.toString()],\r\n          departmentSourceId: type === CREATE_RFI_FORM ? [] : departmentSourceId,\r\n        },\r\n      })\r\n      .then((response) => utils.api.handleResponse(response))\r\n      .then((json) => utils.api.handleNewData(json))\r\n      .then((data) => {\r\n        dispatch(getClaimsAssignedToUsersListSuccess(newTeam, type, data?.data));\r\n        return data.data;\r\n      })\r\n      .catch((error) => {\r\n        dispatch(\r\n          getClaimsAssignedToUsersListFailure(error, {\r\n            file: 'stores/claims.actions.getAssignedToUsersList',\r\n          })\r\n        );\r\n        return error;\r\n      })\r\n      .finally(() => {\r\n        if (showLoader) dispatch(removeLoader('getAssignedToUsersList'));\r\n      });\r\n  };\r\n\r\nexport const getClaimsAssignedToUsersListRequest = (org, businessProcess) => {\r\n  return {\r\n    type: 'USER_GET_USERS_BY_ORG_REQUEST',\r\n    payload: { org, businessProcess },\r\n  };\r\n};\r\n\r\nexport const getClaimsAssignedToUsersListSuccess = (orgName, type, data) => {\r\n  return {\r\n    type: 'USER_GET_USERS_BY_ORG_SUCCESS',\r\n    payload: { type, orgName, items: data },\r\n  };\r\n};\r\n\r\nexport const getClaimsAssignedToUsersListFailure = (error) => {\r\n  return {\r\n    type: 'USER_GET_USERS_BY_ORG_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}