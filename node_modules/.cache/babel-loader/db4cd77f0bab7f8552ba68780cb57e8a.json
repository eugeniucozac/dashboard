{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\PortfolioMap\\\\PortfolioMap.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport get from 'lodash/get';\nimport uniq from 'lodash/uniq';\nimport isEqual from 'lodash/isEqual';\nimport PropTypes from 'prop-types'; // app\n\nimport * as portfolioMapUtils from './PortfolioMap.utils';\nimport { getLocationSummary, updatePortfolioMapLevel, resetPortfolioMapLocations, updatePortfolioMapLevelOverride, resetPortfolioMapLevelOverride } from 'stores';\nimport { PortfolioMapView } from './PortfolioMap.view';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nPortfolioMap.propTypes = {\n  parent: PropTypes.object.isRequired\n};\nexport function PortfolioMap(_ref) {\n  _s();\n\n  var parent = _ref.parent;\n  var allAccountsRef = useRef([]);\n  var dispatch = useDispatch();\n  var userAccessToken = useSelector(function (state) {\n    return get(state, 'user.auth.accessToken');\n  });\n  var departments = useSelector(function (state) {\n    return get(state, 'referenceData.departments');\n  });\n\n  var _useSelector = useSelector(function (state) {\n    return state.portfolioMap.tiv;\n  }),\n      loading = _useSelector.loading,\n      level = _useSelector.level,\n      levels = _useSelector.levels,\n      placementIds = _useSelector.placementIds,\n      levelOverride = _useSelector.levelOverride,\n      filteredDepartments = _useSelector.filteredDepartments;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      filteredLocations = _useState2[0],\n      setFilteredLocations = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      center = _useState4[0],\n      setCenter = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      mapKey = _useState6[0],\n      setMapKey = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      placements = _useState8[0],\n      setPlacements = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      showTable = _useState10[0],\n      setShowTable = _useState10[1];\n  /*\r\n    Retrieve placement location data by level (default level = 'state')\r\n  */\n\n\n  useEffect(function () {\n    // filter out placements that are not phyical loss and with current date between inception and expiration\n    var placements = portfolioMapUtils.getFilteredPlacements(parent.placements);\n    setPlacements(placements);\n    allAccountsRef.current = portfolioMapUtils.groupAccounts(placements, departments); // fetch location data for ALL placements\n\n    dispatch(getLocationSummary({\n      placementIds: placements.map(function (placement) {\n        return placement.id;\n      })\n    }));\n  }, [] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  useEffect(function () {\n    if (!utils.generic.isValidArray(filteredDepartments)) return;\n    setFilteredLocations(portfolioMapUtils.addMapData(levels[levelOverride || level], mapKey, getFilteredDeps(filteredDepartments)));\n  }, [filteredDepartments] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  /*\r\n    Update mapKey and locations when a level has been changed\r\n  */\n\n  useEffect(function () {\n    if (!levels[levelOverride || level]) return; // Get all locations from state by the requested level, and return their placementIds\n\n    var populatedPlacementIds = uniq(levels[levelOverride || level].map(function (location) {\n      return location.placements.map(function (placement) {\n        return placement.placementId;\n      });\n    }).flat()); // Retains checked/unchecked map key after appyling new placementIds\n\n    var updatedMapKey = portfolioMapUtils.filterAccounts(populatedPlacementIds, allAccountsRef.current, mapKey); // Set the data required for the map key\n\n    setMapKey(updatedMapKey); // Hydrate new placements with mapKey data (ie, color)\n\n    setFilteredLocations(portfolioMapUtils.addMapData(levels[levelOverride || level], updatedMapKey, getFilteredDeps(filteredDepartments)) || []);\n  }, [levels[levelOverride || level]] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  var mapKeyFilter = function mapKeyFilter(id, checked) {\n    var updatedMapKey = mapKey.map(function (item) {\n      return _objectSpread(_objectSpread({}, item), {}, {\n        checked: id === item.id ? checked : item.checked\n      });\n    });\n    setMapKey(updatedMapKey);\n    setFilteredLocations(portfolioMapUtils.addMapData(levels[levelOverride || level], updatedMapKey, getFilteredDeps(filteredDepartments)));\n  };\n\n  var mapKeyFilterAll = function mapKeyFilterAll(checked) {\n    var updatedMapKey = mapKey.map(function (item) {\n      return _objectSpread(_objectSpread({}, item), {}, {\n        checked: checked\n      });\n    });\n    setMapKey(updatedMapKey);\n    setFilteredLocations(portfolioMapUtils.addMapData(levels[levelOverride || level], updatedMapKey, getFilteredDeps(filteredDepartments)));\n  };\n\n  var getFilteredDeps = function getFilteredDeps() {\n    return filteredDepartments.filter(function (dep) {\n      return dep.active;\n    }).map(function (dep) {\n      return dep.rawId;\n    });\n  };\n\n  var getLocations = function getLocations(props) {\n    if (props.resetLevelOverride) {\n      dispatch(resetPortfolioMapLevelOverride());\n    }\n\n    var newLevel = props.levelOverride || props.level;\n    var filteredPlacementIds = placements.map(function (placement) {\n      return placement.id;\n    });\n\n    if (!filteredPlacementIds.length) {\n      dispatch(resetPortfolioMapLocations());\n      if (props.level) dispatch(updatePortfolioMapLevel({\n        level: props.level\n      }));\n      if (props.levelOverride) dispatch(updatePortfolioMapLevelOverride({\n        levelOverride: props.levelOverride\n      }));\n      return;\n    }\n\n    var dataAlreadyFetched = isEqual(filteredPlacementIds, placementIds) && utils.generic.isValidArray(levels[newLevel], true);\n\n    if (dataAlreadyFetched || levelOverride && props.level) {\n      if (props.level) dispatch(updatePortfolioMapLevel({\n        level: props.level\n      }));\n      if (props.levelOverride) dispatch(updatePortfolioMapLevelOverride({\n        levelOverride: props.levelOverride\n      }));\n    } else {\n      dispatch(getLocationSummary(_objectSpread(_objectSpread({\n        placementIds: filteredPlacementIds\n      }, props.level && {\n        level: props.level\n      }), props.levelOverride && {\n        levelOverride: props.levelOverride\n      })));\n    }\n  };\n\n  var handleUpdateCenter = function handleUpdateCenter(coords) {\n    setCenter(coords);\n  };\n\n  var handleToggleTable = function handleToggleTable() {\n    setShowTable(!showTable);\n  };\n\n  return /*#__PURE__*/_jsxDEV(PortfolioMapView, {\n    center: center,\n    handleUpdateCenter: handleUpdateCenter,\n    mapKeyFilter: mapKeyFilter,\n    mapKeyFilterAll: mapKeyFilterAll,\n    mapKey: mapKey,\n    isLoading: loading,\n    getLocations: getLocations,\n    token: userAccessToken,\n    locations: filteredLocations,\n    level: level,\n    levelOverride: levelOverride,\n    handleToggleTable: handleToggleTable,\n    showTable: showTable\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PortfolioMap, \"QXQml/Puz21V22PNPJvL0/8Cbp0=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = PortfolioMap;\nPortfolioMap.displayName = \"PortfolioMap\";\nPortfolioMap.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"PortfolioMap\",\n  \"props\": {\n    \"parent\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\nexport default PortfolioMap;\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\modules\\\\PortfolioMap\\\\PortfolioMap.js\"] = {\n    name: \"PortfolioMap\",\n    docgenInfo: PortfolioMap.__docgenInfo,\n    path: \"src\\\\modules\\\\PortfolioMap\\\\PortfolioMap.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"PortfolioMap\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/PortfolioMap/PortfolioMap.js"],"names":["React","useEffect","useState","useRef","useDispatch","useSelector","get","uniq","isEqual","PropTypes","portfolioMapUtils","getLocationSummary","updatePortfolioMapLevel","resetPortfolioMapLocations","updatePortfolioMapLevelOverride","resetPortfolioMapLevelOverride","PortfolioMapView","utils","PortfolioMap","propTypes","parent","object","isRequired","allAccountsRef","dispatch","userAccessToken","state","departments","portfolioMap","tiv","loading","level","levels","placementIds","levelOverride","filteredDepartments","filteredLocations","setFilteredLocations","center","setCenter","mapKey","setMapKey","placements","setPlacements","showTable","setShowTable","getFilteredPlacements","current","groupAccounts","map","placement","id","generic","isValidArray","addMapData","getFilteredDeps","populatedPlacementIds","location","placementId","flat","updatedMapKey","filterAccounts","mapKeyFilter","checked","item","mapKeyFilterAll","filter","dep","active","rawId","getLocations","props","resetLevelOverride","newLevel","filteredPlacementIds","length","dataAlreadyFetched","handleUpdateCenter","coords","handleToggleTable"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport get from 'lodash/get';\r\nimport uniq from 'lodash/uniq';\r\nimport isEqual from 'lodash/isEqual';\r\nimport PropTypes from 'prop-types';\r\n\r\n// app\r\nimport * as portfolioMapUtils from './PortfolioMap.utils';\r\nimport {\r\n  getLocationSummary,\r\n  updatePortfolioMapLevel,\r\n  resetPortfolioMapLocations,\r\n  updatePortfolioMapLevelOverride,\r\n  resetPortfolioMapLevelOverride,\r\n} from 'stores';\r\nimport { PortfolioMapView } from './PortfolioMap.view';\r\nimport * as utils from 'utils';\r\n\r\nPortfolioMap.propTypes = {\r\n  parent: PropTypes.object.isRequired,\r\n};\r\n\r\nexport function PortfolioMap({ parent }) {\r\n  const allAccountsRef = useRef([]);\r\n\r\n  const dispatch = useDispatch();\r\n  const userAccessToken = useSelector((state) => get(state, 'user.auth.accessToken'));\r\n  const departments = useSelector((state) => get(state, 'referenceData.departments'));\r\n  const { loading, level, levels, placementIds, levelOverride, filteredDepartments } = useSelector((state) => state.portfolioMap.tiv);\r\n\r\n  const [filteredLocations, setFilteredLocations] = useState([]);\r\n  const [center, setCenter] = useState();\r\n  const [mapKey, setMapKey] = useState([]);\r\n  const [placements, setPlacements] = useState([]);\r\n  const [showTable, setShowTable] = useState(false);\r\n\r\n  /*\r\n    Retrieve placement location data by level (default level = 'state')\r\n  */\r\n  useEffect(\r\n    () => {\r\n      // filter out placements that are not phyical loss and with current date between inception and expiration\r\n      const placements = portfolioMapUtils.getFilteredPlacements(parent.placements);\r\n\r\n      setPlacements(placements);\r\n      allAccountsRef.current = portfolioMapUtils.groupAccounts(placements, departments);\r\n\r\n      // fetch location data for ALL placements\r\n      dispatch(getLocationSummary({ placementIds: placements.map((placement) => placement.id) }));\r\n    },\r\n    [] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  useEffect(\r\n    () => {\r\n      if (!utils.generic.isValidArray(filteredDepartments)) return;\r\n\r\n      setFilteredLocations(portfolioMapUtils.addMapData(levels[levelOverride || level], mapKey, getFilteredDeps(filteredDepartments)));\r\n    },\r\n    [filteredDepartments] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  /*\r\n    Update mapKey and locations when a level has been changed\r\n  */\r\n  useEffect(\r\n    () => {\r\n      if (!levels[levelOverride || level]) return;\r\n\r\n      // Get all locations from state by the requested level, and return their placementIds\r\n      const populatedPlacementIds = uniq(\r\n        levels[levelOverride || level].map((location) => location.placements.map((placement) => placement.placementId)).flat()\r\n      );\r\n\r\n      // Retains checked/unchecked map key after appyling new placementIds\r\n      const updatedMapKey = portfolioMapUtils.filterAccounts(populatedPlacementIds, allAccountsRef.current, mapKey);\r\n\r\n      // Set the data required for the map key\r\n      setMapKey(updatedMapKey);\r\n\r\n      // Hydrate new placements with mapKey data (ie, color)\r\n      setFilteredLocations(\r\n        portfolioMapUtils.addMapData(levels[levelOverride || level], updatedMapKey, getFilteredDeps(filteredDepartments)) || []\r\n      );\r\n    },\r\n    [levels[levelOverride || level]] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  const mapKeyFilter = (id, checked) => {\r\n    const updatedMapKey = mapKey.map((item) => ({\r\n      ...item,\r\n      checked: id === item.id ? checked : item.checked,\r\n    }));\r\n    setMapKey(updatedMapKey);\r\n    setFilteredLocations(portfolioMapUtils.addMapData(levels[levelOverride || level], updatedMapKey, getFilteredDeps(filteredDepartments)));\r\n  };\r\n\r\n  const mapKeyFilterAll = (checked) => {\r\n    const updatedMapKey = mapKey.map((item) => ({ ...item, checked }));\r\n    setMapKey(updatedMapKey);\r\n    setFilteredLocations(portfolioMapUtils.addMapData(levels[levelOverride || level], updatedMapKey, getFilteredDeps(filteredDepartments)));\r\n  };\r\n\r\n  const getFilteredDeps = () => {\r\n    return filteredDepartments.filter((dep) => dep.active).map((dep) => dep.rawId);\r\n  };\r\n\r\n  const getLocations = (props) => {\r\n    if (props.resetLevelOverride) {\r\n      dispatch(resetPortfolioMapLevelOverride());\r\n    }\r\n\r\n    const newLevel = props.levelOverride || props.level;\r\n    const filteredPlacementIds = placements.map((placement) => placement.id);\r\n\r\n    if (!filteredPlacementIds.length) {\r\n      dispatch(resetPortfolioMapLocations());\r\n      if (props.level) dispatch(updatePortfolioMapLevel({ level: props.level }));\r\n      if (props.levelOverride) dispatch(updatePortfolioMapLevelOverride({ levelOverride: props.levelOverride }));\r\n      return;\r\n    }\r\n\r\n    const dataAlreadyFetched = isEqual(filteredPlacementIds, placementIds) && utils.generic.isValidArray(levels[newLevel], true);\r\n\r\n    if (dataAlreadyFetched || (levelOverride && props.level)) {\r\n      if (props.level) dispatch(updatePortfolioMapLevel({ level: props.level }));\r\n      if (props.levelOverride) dispatch(updatePortfolioMapLevelOverride({ levelOverride: props.levelOverride }));\r\n    } else {\r\n      dispatch(\r\n        getLocationSummary({\r\n          placementIds: filteredPlacementIds,\r\n          ...(props.level && { level: props.level }),\r\n          ...(props.levelOverride && { levelOverride: props.levelOverride }),\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleUpdateCenter = (coords) => {\r\n    setCenter(coords);\r\n  };\r\n\r\n  const handleToggleTable = () => {\r\n    setShowTable(!showTable);\r\n  };\r\n\r\n  return (\r\n    <PortfolioMapView\r\n      center={center}\r\n      handleUpdateCenter={handleUpdateCenter}\r\n      mapKeyFilter={mapKeyFilter}\r\n      mapKeyFilterAll={mapKeyFilterAll}\r\n      mapKey={mapKey}\r\n      isLoading={loading}\r\n      getLocations={getLocations}\r\n      token={userAccessToken}\r\n      locations={filteredLocations}\r\n      level={level}\r\n      levelOverride={levelOverride}\r\n      handleToggleTable={handleToggleTable}\r\n      showTable={showTable}\r\n    />\r\n  );\r\n}\r\n\r\nexport default PortfolioMap;\r\n"]},"metadata":{},"sourceType":"module"}