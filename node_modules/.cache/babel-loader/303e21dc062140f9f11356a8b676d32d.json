{"ast":null,"code":"import _defineProperty from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\components\\\\EditableTable\\\\EditableTable.view.js\";\nimport React, { Fragment } from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types'; //app\n\nimport styles from './EditableTable.styles';\nimport { TableHead, TableCell, Button, Overflow } from 'components';\nimport * as utils from 'utils'; //mui\n\nimport { makeStyles, Box, Typography, Table, TableBody, TableRow, Checkbox, TextField, TableContainer } from '@material-ui/core';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nEditableTableView.propTypes = {\n  fields: PropTypes.shape({\n    arrayItemDef: PropTypes.array,\n    fieldData: PropTypes.array\n  }),\n  tableRows: PropTypes.array,\n  handlers: PropTypes.shape({\n    handleTextboxChange: PropTypes.func,\n    handleCheckboxClick: PropTypes.func\n  })\n};\nexport function EditableTableView(_ref) {\n  var _this = this;\n\n  var fields = _ref.fields,\n      handlers = _ref.handlers,\n      tableRows = _ref.tableRows;\n  var classes = makeStyles(styles, {\n    name: 'EditableTable'\n  })();\n  return /*#__PURE__*/_jsxDEV(Box, {\n    display: \"inline-block\",\n    width: \"100%\",\n    children: /*#__PURE__*/_jsxDEV(Overflow, {\n      children: /*#__PURE__*/_jsxDEV(TableContainer, {\n        style: {\n          maxHeight: 440\n        },\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          stickyHeader: true,\n          className: classes.dataTable,\n          size: \"small\",\n          children: [/*#__PURE__*/_jsxDEV(TableHead, {\n            nestedClasses: {\n              tableHead: classes.tableHead\n            },\n            columns: fields === null || fields === void 0 ? void 0 : fields.arrayItemDef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            className: classes.tableBody,\n            children: tableRows === null || tableRows === void 0 ? void 0 : tableRows.map(function (row, index) {\n              var _classnames;\n\n              return /*#__PURE__*/_jsxDEV(Fragment, {\n                children: /*#__PURE__*/_jsxDEV(TableRow, {\n                  hover: true,\n                  onClick: function onClick(e) {\n                    return handlers.handleCheckboxClick(e, row);\n                  },\n                  className: classnames((_classnames = {}, _defineProperty(_classnames, classes.tableRow, true), _defineProperty(_classnames, classes.selectedRow, row.isRowSelected), _classnames)),\n                  children: fields === null || fields === void 0 ? void 0 : fields.arrayItemDef.map(function (column, defIndex) {\n                    return row.isRowSelected ? /*#__PURE__*/_jsxDEV(TableCell, {\n                      width: row[column === null || column === void 0 ? void 0 : column.width],\n                      children: [(column === null || column === void 0 ? void 0 : column.type) === 'text' && /*#__PURE__*/_jsxDEV(TextField, {\n                        width: row[column === null || column === void 0 ? void 0 : column.width],\n                        name: \"fieldText\",\n                        type: \"text\",\n                        disabled: column === null || column === void 0 ? void 0 : column.disabled,\n                        size: \"small\",\n                        value: row[column === null || column === void 0 ? void 0 : column.id],\n                        variant: \"outlined\",\n                        onChange: function onChange(e) {\n                          return handlers.handleTextboxChange(e, column, row, column.id);\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 48,\n                        columnNumber: 31\n                      }, _this), (column === null || column === void 0 ? void 0 : column.type) === 'checkbox' && /*#__PURE__*/_jsxDEV(Checkbox, {\n                        checked: row[column === null || column === void 0 ? void 0 : column.id],\n                        size: \"small\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 59,\n                        columnNumber: 61\n                      }, _this), (column === null || column === void 0 ? void 0 : column.type) === 'label' && row[column === null || column === void 0 ? void 0 : column.id], (column === null || column === void 0 ? void 0 : column.type) === 'copyIcon' && /*#__PURE__*/_jsxDEV(Button, {\n                        icon: FileCopyIcon,\n                        size: \"medium\",\n                        variant: \"text\",\n                        color: \"default\",\n                        tooltip: {\n                          title: utils.string.t('Copy data from above line')\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 62,\n                        columnNumber: 31\n                      }, _this)]\n                    }, defIndex, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 46,\n                      columnNumber: 27\n                    }, _this) : /*#__PURE__*/_jsxDEV(TableCell, {\n                      width: row[column === null || column === void 0 ? void 0 : column.width],\n                      children: [(column === null || column === void 0 ? void 0 : column.type) === 'checkbox' && /*#__PURE__*/_jsxDEV(Checkbox, {\n                        checked: row[column === null || column === void 0 ? void 0 : column.id],\n                        size: \"small\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 73,\n                        columnNumber: 61\n                      }, _this), (column === null || column === void 0 ? void 0 : column.type) !== 'checkbox' && (column === null || column === void 0 ? void 0 : column.type) !== 'copyIcon' && /*#__PURE__*/_jsxDEV(Typography, {\n                        className: classes.tableCellLabel,\n                        style: {\n                          width: \"\".concat(row[column === null || column === void 0 ? void 0 : column.width])\n                        },\n                        children: row[column === null || column === void 0 ? void 0 : column.id] || '-'\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 75,\n                        columnNumber: 31\n                      }, _this), (column === null || column === void 0 ? void 0 : column.type) === 'copyIcon' && /*#__PURE__*/_jsxDEV(Button, {\n                        icon: FileCopyIcon,\n                        size: \"medium\",\n                        variant: \"text\",\n                        color: \"default\",\n                        tooltip: {\n                          title: utils.string.t('Copy data from above line')\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 80,\n                        columnNumber: 31\n                      }, _this)]\n                    }, defIndex, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 72,\n                      columnNumber: 27\n                    }, _this);\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 39,\n                  columnNumber: 21\n                }, _this)\n              }, row.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 38,\n                columnNumber: 19\n              }, _this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_c = EditableTableView;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditableTableView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/EditableTable/EditableTable.view.js"],"names":["React","Fragment","classnames","PropTypes","styles","TableHead","TableCell","Button","Overflow","utils","makeStyles","Box","Typography","Table","TableBody","TableRow","Checkbox","TextField","TableContainer","FileCopyIcon","EditableTableView","propTypes","fields","shape","arrayItemDef","array","fieldData","tableRows","handlers","handleTextboxChange","func","handleCheckboxClick","classes","name","maxHeight","dataTable","tableHead","tableBody","map","row","index","e","tableRow","selectedRow","isRowSelected","column","defIndex","width","type","disabled","id","title","string","t","tableCellLabel"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\r\nimport classnames from 'classnames';\r\nimport PropTypes from 'prop-types';\r\n\r\n//app\r\nimport styles from './EditableTable.styles';\r\nimport { TableHead, TableCell, Button, Overflow } from 'components';\r\nimport * as utils from 'utils';\r\n\r\n//mui\r\nimport { makeStyles, Box, Typography, Table, TableBody, TableRow, Checkbox, TextField, TableContainer } from '@material-ui/core';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\n\r\nEditableTableView.propTypes = {\r\n  fields: PropTypes.shape({\r\n    arrayItemDef: PropTypes.array,\r\n    fieldData: PropTypes.array,\r\n  }),\r\n  tableRows: PropTypes.array,\r\n  handlers: PropTypes.shape({\r\n    handleTextboxChange: PropTypes.func,\r\n    handleCheckboxClick: PropTypes.func,\r\n  }),\r\n};\r\n\r\nexport function EditableTableView({ fields, handlers, tableRows }) {\r\n  const classes = makeStyles(styles, { name: 'EditableTable' })();\r\n\r\n  return (\r\n    <Box display=\"inline-block\" width=\"100%\">\r\n      <Overflow>\r\n        <TableContainer style={{ maxHeight: 440 }}>\r\n          <Table stickyHeader className={classes.dataTable} size=\"small\">\r\n            <TableHead nestedClasses={{ tableHead: classes.tableHead }} columns={fields?.arrayItemDef} />\r\n            <TableBody className={classes.tableBody}>\r\n              {tableRows?.map((row, index) => {\r\n                return (\r\n                  <Fragment key={row.id}>\r\n                    <TableRow\r\n                      hover\r\n                      onClick={(e) => handlers.handleCheckboxClick(e, row)}\r\n                      className={classnames({ [classes.tableRow]: true, [classes.selectedRow]: row.isRowSelected })}\r\n                    >\r\n                      {fields?.arrayItemDef.map((column, defIndex) => {\r\n                        return row.isRowSelected ? (\r\n                          <TableCell key={defIndex} width={row[column?.width]}>\r\n                            {column?.type === 'text' && (\r\n                              <TextField\r\n                                width={row[column?.width]}\r\n                                name=\"fieldText\"\r\n                                type=\"text\"\r\n                                disabled={column?.disabled}\r\n                                size=\"small\"\r\n                                value={row[column?.id]}\r\n                                variant=\"outlined\"\r\n                                onChange={(e) => handlers.handleTextboxChange(e, column, row, column.id)}\r\n                              />\r\n                            )}\r\n                            {column?.type === 'checkbox' && <Checkbox checked={row[column?.id]} size=\"small\" />}\r\n                            {column?.type === 'label' && row[column?.id]}\r\n                            {column?.type === 'copyIcon' && (\r\n                              <Button\r\n                                icon={FileCopyIcon}\r\n                                size=\"medium\"\r\n                                variant=\"text\"\r\n                                color=\"default\"\r\n                                tooltip={{ title: utils.string.t('Copy data from above line') }}\r\n                              />\r\n                            )}\r\n                          </TableCell>\r\n                        ) : (\r\n                          <TableCell key={defIndex} width={row[column?.width]}>\r\n                            {column?.type === 'checkbox' && <Checkbox checked={row[column?.id]} size=\"small\" />}\r\n                            {column?.type !== 'checkbox' && column?.type !== 'copyIcon' && (\r\n                              <Typography className={classes.tableCellLabel} style={{ width: `${row[column?.width]}` }}>\r\n                                {row[column?.id] || '-'}\r\n                              </Typography>\r\n                            )}\r\n                            {column?.type === 'copyIcon' && (\r\n                              <Button\r\n                                icon={FileCopyIcon}\r\n                                size=\"medium\"\r\n                                variant=\"text\"\r\n                                color=\"default\"\r\n                                tooltip={{ title: utils.string.t('Copy data from above line') }}\r\n                              />\r\n                            )}\r\n                          </TableCell>\r\n                        );\r\n                      })}\r\n                    </TableRow>\r\n                  </Fragment>\r\n                );\r\n              })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Overflow>\r\n    </Box>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}