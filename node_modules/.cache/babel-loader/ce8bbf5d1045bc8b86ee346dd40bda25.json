{"ast":null,"code":"import _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\pages\\\\Claims\\\\Claims.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport { Helmet } from 'react-helmet'; // app\n\nimport { ClaimsView } from './Claims.view';\nimport { postClaimDetailsInformationSuccess, getLossInformation, getClaimsPreviewInformation, selectCatCodes, selectLossQualifiers, selectPriorities, selectSettlementCurrency, selectReferralResponse, selectClaimData, setClaimData, claimsPolicyData, getPolicyInformation, getClaimantNames, getInterest, getBEAdjuster, getLossQualifiers, getCatCodes, getPriorityLevels, getSettlementCurrency, selectClaimsPolicyData, getClaimDetailsSuccess, setClaimsStepperControl, getComplexityValues, getReferralValues, getReferralResponse, getViewTableDocuments, getQueryCodeList, resetLossSubmission, resetLossData } from 'stores';\nimport * as utils from 'utils';\nimport config from 'config';\nimport * as constants from 'consts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Claims() {\n  _s();\n\n  var dispatch = useDispatch();\n  var history = useHistory();\n  var brand = useSelector(function (state) {\n    return state.ui.brand;\n  });\n  var claimData = useSelector(selectClaimData);\n  var claimCurrentPolicyData = useSelector(selectClaimsPolicyData);\n  var catCodes = useSelector(selectCatCodes);\n  var priorities = useSelector(selectPriorities);\n  var lossQualifiers = useSelector(selectLossQualifiers);\n  var settlementCurrency = useSelector(selectSettlementCurrency);\n  var referralResponse = useSelector(selectReferralResponse);\n\n  var handleRegisterNewLoss = function handleRegisterNewLoss() {\n    dispatch(resetLossSubmission());\n    history.push(config.routes.claimsFNOL.newLoss);\n    dispatch(setClaimData({}));\n  };\n\n  var handleComplexityRulesManagement = function handleComplexityRulesManagement() {\n    history.push(config.routes.claimsFNOL.complexityRules);\n  };\n\n  var handleClaimsProcessing = function handleClaimsProcessing() {\n    history.push(config.routes.claimsProcessing.root);\n  };\n\n  var handleCreateClaim = function handleCreateClaim(data) {\n    dispatch(setClaimsStepperControl(1));\n    dispatch(getLossInformation({\n      lossDetailsId: data.lossDetailID,\n      sourceIdParams: data.sourceID\n    }));\n    dispatch(getViewTableDocuments({\n      referenceId: data === null || data === void 0 ? void 0 : data.lossRef,\n      sectionType: constants.DMS_CONTEXT_LOSS\n    }));\n    history.push(config.routes.claimsFNOL.newLoss);\n  };\n\n  useEffect(function () {\n    dispatch(setClaimData({}));\n    dispatch(getQueryCodeList());\n    dispatch(setClaimsStepperControl(0));\n    return function () {\n      console.log('resetLossData');\n      dispatch(resetLossData());\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    if (claimData === null || claimData === void 0 ? void 0 : claimData.claimId) {\n      if (utils.generic.isInvalidOrEmptyArray(catCodes)) {\n        dispatch(getCatCodes());\n      }\n\n      if (utils.generic.isInvalidOrEmptyArray(priorities)) {\n        dispatch(getPriorityLevels());\n      }\n\n      if (utils.generic.isInvalidOrEmptyArray(lossQualifiers)) {\n        dispatch(getLossQualifiers());\n      }\n\n      if (utils.generic.isInvalidOrEmptyArray(settlementCurrency)) {\n        dispatch(getSettlementCurrency());\n      }\n\n      if (utils.generic.isInvalidOrEmptyArray(referralResponse)) {\n        dispatch(getReferralResponse());\n      }\n\n      dispatch(getLossInformation({\n        lossDetailsId: claimData.lossId,\n        sourceIdParams: claimData.sourceID\n      }));\n      dispatch(claimsPolicyData({\n        xbInstanceID: claimData.xbInstanceID,\n        xbPolicyID: claimData.xbPolicyID,\n        policyNumber: claimData.policyNumber,\n        divisionID: claimData.divisionID\n      }));\n    }\n  }, [claimData]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    if ((claimData === null || claimData === void 0 ? void 0 : claimData.claimId) && (claimCurrentPolicyData === null || claimCurrentPolicyData === void 0 ? void 0 : claimCurrentPolicyData.xbInstanceID)) {\n      var fetchData = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var claimDetails;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  dispatch(getPolicyInformation());\n                  dispatch(getInterest());\n                  dispatch(getBEAdjuster());\n                  dispatch(getClaimantNames());\n                  dispatch(postClaimDetailsInformationSuccess(claimData.claimId));\n                  _context.next = 7;\n                  return dispatch(getClaimsPreviewInformation({\n                    claimId: claimData === null || claimData === void 0 ? void 0 : claimData.claimId,\n                    claimRefParams: claimData === null || claimData === void 0 ? void 0 : claimData.claimReference,\n                    sourceIdParams: claimData === null || claimData === void 0 ? void 0 : claimData.sourceID,\n                    divisionIDParams: claimData === null || claimData === void 0 ? void 0 : claimData.divisionID\n                  }));\n\n                case 7:\n                  claimDetails = _context.sent;\n                  dispatch(getClaimDetailsSuccess(claimDetails));\n                  dispatch(getComplexityValues());\n                  dispatch(getReferralValues());\n\n                case 11:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function fetchData() {\n          return _ref.apply(this, arguments);\n        };\n      }();\n\n      fetchData();\n    }\n  }, [claimCurrentPolicyData]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"\".concat(utils.string.t('claims.title'), \" - \").concat(utils.app.getAppName(brand))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ClaimsView, {\n      handleClaimsProcessing: handleClaimsProcessing,\n      handleComplexityRulesManagement: handleComplexityRulesManagement,\n      handleCreateClaim: handleCreateClaim,\n      handleRegisterNewLoss: handleRegisterNewLoss\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Claims, \"Sb4R5Yxqj0Uk/gxJujDlD4OTQT4=\", false, function () {\n  return [useDispatch, useHistory, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Claims;\n\nvar _c;\n\n$RefreshReg$(_c, \"Claims\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/pages/Claims/Claims.js"],"names":["React","useEffect","useSelector","useDispatch","useHistory","Helmet","ClaimsView","postClaimDetailsInformationSuccess","getLossInformation","getClaimsPreviewInformation","selectCatCodes","selectLossQualifiers","selectPriorities","selectSettlementCurrency","selectReferralResponse","selectClaimData","setClaimData","claimsPolicyData","getPolicyInformation","getClaimantNames","getInterest","getBEAdjuster","getLossQualifiers","getCatCodes","getPriorityLevels","getSettlementCurrency","selectClaimsPolicyData","getClaimDetailsSuccess","setClaimsStepperControl","getComplexityValues","getReferralValues","getReferralResponse","getViewTableDocuments","getQueryCodeList","resetLossSubmission","resetLossData","utils","config","constants","Claims","dispatch","history","brand","state","ui","claimData","claimCurrentPolicyData","catCodes","priorities","lossQualifiers","settlementCurrency","referralResponse","handleRegisterNewLoss","push","routes","claimsFNOL","newLoss","handleComplexityRulesManagement","complexityRules","handleClaimsProcessing","claimsProcessing","root","handleCreateClaim","data","lossDetailsId","lossDetailID","sourceIdParams","sourceID","referenceId","lossRef","sectionType","DMS_CONTEXT_LOSS","console","log","claimId","generic","isInvalidOrEmptyArray","lossId","xbInstanceID","xbPolicyID","policyNumber","divisionID","fetchData","claimRefParams","claimReference","divisionIDParams","claimDetails","string","t","app","getAppName"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport { Helmet } from 'react-helmet';\r\n\r\n// app\r\nimport { ClaimsView } from './Claims.view';\r\nimport {\r\n  postClaimDetailsInformationSuccess,\r\n  getLossInformation,\r\n  getClaimsPreviewInformation,\r\n  selectCatCodes,\r\n  selectLossQualifiers,\r\n  selectPriorities,\r\n  selectSettlementCurrency,\r\n  selectReferralResponse,\r\n  selectClaimData,\r\n  setClaimData,\r\n  claimsPolicyData,\r\n  getPolicyInformation,\r\n  getClaimantNames,\r\n  getInterest,\r\n  getBEAdjuster,\r\n  getLossQualifiers,\r\n  getCatCodes,\r\n  getPriorityLevels,\r\n  getSettlementCurrency,\r\n  selectClaimsPolicyData,\r\n  getClaimDetailsSuccess,\r\n  setClaimsStepperControl,\r\n  getComplexityValues,\r\n  getReferralValues,\r\n  getReferralResponse,\r\n  getViewTableDocuments,\r\n  getQueryCodeList,\r\n  resetLossSubmission,\r\n  resetLossData,\r\n} from 'stores';\r\nimport * as utils from 'utils';\r\nimport config from 'config';\r\nimport * as constants from 'consts';\r\n\r\nexport default function Claims() {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const brand = useSelector((state) => state.ui.brand);\r\n  const claimData = useSelector(selectClaimData);\r\n  const claimCurrentPolicyData = useSelector(selectClaimsPolicyData);\r\n  const catCodes = useSelector(selectCatCodes);\r\n  const priorities = useSelector(selectPriorities);\r\n  const lossQualifiers = useSelector(selectLossQualifiers);\r\n  const settlementCurrency = useSelector(selectSettlementCurrency);\r\n  const referralResponse = useSelector(selectReferralResponse);\r\n\r\n  const handleRegisterNewLoss = () => {\r\n    dispatch(resetLossSubmission());\r\n    history.push(config.routes.claimsFNOL.newLoss);\r\n    dispatch(setClaimData({}));\r\n  };\r\n\r\n  const handleComplexityRulesManagement = () => {\r\n    history.push(config.routes.claimsFNOL.complexityRules);\r\n  };\r\n\r\n  const handleClaimsProcessing = () => {\r\n    history.push(config.routes.claimsProcessing.root);\r\n  };\r\n\r\n  const handleCreateClaim = (data) => {\r\n    dispatch(setClaimsStepperControl(1));\r\n    dispatch(getLossInformation({ lossDetailsId: data.lossDetailID, sourceIdParams: data.sourceID }));\r\n    dispatch(getViewTableDocuments({ referenceId: data?.lossRef, sectionType: constants.DMS_CONTEXT_LOSS }));\r\n    history.push(config.routes.claimsFNOL.newLoss);\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(setClaimData({}));\r\n    dispatch(getQueryCodeList());\r\n    dispatch(setClaimsStepperControl(0));\r\n    return () => {\r\n      console.log('resetLossData');\r\n      dispatch(resetLossData());\r\n    };\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    if (claimData?.claimId) {\r\n      if (utils.generic.isInvalidOrEmptyArray(catCodes)) {\r\n        dispatch(getCatCodes());\r\n      }\r\n      if (utils.generic.isInvalidOrEmptyArray(priorities)) {\r\n        dispatch(getPriorityLevels());\r\n      }\r\n      if (utils.generic.isInvalidOrEmptyArray(lossQualifiers)) {\r\n        dispatch(getLossQualifiers());\r\n      }\r\n      if (utils.generic.isInvalidOrEmptyArray(settlementCurrency)) {\r\n        dispatch(getSettlementCurrency());\r\n      }\r\n      if (utils.generic.isInvalidOrEmptyArray(referralResponse)) {\r\n        dispatch(getReferralResponse());\r\n      }\r\n      dispatch(getLossInformation({ lossDetailsId: claimData.lossId, sourceIdParams: claimData.sourceID }));\r\n      dispatch(\r\n        claimsPolicyData({\r\n          xbInstanceID: claimData.xbInstanceID,\r\n          xbPolicyID: claimData.xbPolicyID,\r\n          policyNumber: claimData.policyNumber,\r\n          divisionID: claimData.divisionID,\r\n        })\r\n      );\r\n    }\r\n  }, [claimData]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    if (claimData?.claimId && claimCurrentPolicyData?.xbInstanceID) {\r\n      async function fetchData() {\r\n        dispatch(getPolicyInformation());\r\n        dispatch(getInterest());\r\n        dispatch(getBEAdjuster());\r\n        dispatch(getClaimantNames());\r\n\r\n        dispatch(postClaimDetailsInformationSuccess(claimData.claimId));\r\n        const claimDetails = await dispatch(\r\n          getClaimsPreviewInformation({\r\n            claimId: claimData?.claimId,\r\n            claimRefParams: claimData?.claimReference,\r\n            sourceIdParams: claimData?.sourceID,\r\n            divisionIDParams: claimData?.divisionID,\r\n          })\r\n        );\r\n        dispatch(getClaimDetailsSuccess(claimDetails));\r\n        dispatch(getComplexityValues());\r\n        dispatch(getReferralValues());\r\n      }\r\n      fetchData();\r\n    }\r\n  }, [claimCurrentPolicyData]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>{`${utils.string.t('claims.title')} - ${utils.app.getAppName(brand)}`}</title>\r\n      </Helmet>\r\n      <ClaimsView\r\n        handleClaimsProcessing={handleClaimsProcessing}\r\n        handleComplexityRulesManagement={handleComplexityRulesManagement}\r\n        handleCreateClaim={handleCreateClaim}\r\n        handleRegisterNewLoss={handleRegisterNewLoss}\r\n      />\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}