{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { addLoader, authLogout, enqueueNotification, getRiskDetails, getRiskQuotes, hideModal, removeLoader } from 'stores';\nimport * as utils from 'utils';\nimport isEmpty from 'lodash/isEmpty';\nexport var patchRiskQuote = function patchRiskQuote(formData, quote) {\n  var accept = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/risk.actions.patchQuote',\n      message: 'Data missing for POST request'\n    };\n    dispatch(patchQuoteRequest(formData));\n    dispatch(addLoader('patchQuote'));\n\n    if (!formData || isEmpty(formData) || isEmpty(quote) || !quote.id) {\n      dispatch(patchQuoteFailure(defaultError));\n      dispatch(enqueueNotification('notification.generic.request', 'error'));\n      dispatch(hideModal());\n      dispatch(removeLoader('patchQuote'));\n      return;\n    }\n\n    var body = _objectSpread(_objectSpread({}, quote), {}, {\n      premium: formData.premium,\n      grossPremium: formData.premium,\n      validUntil: formData.validUntil\n    });\n\n    var path = accept ? \"api/v1/quotes/\".concat(quote.id, \"/patch?acceptQuote=true\") : \"api/v1/quotes/\".concat(quote.id, \"/patch\");\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.auth,\n      path: path,\n      data: body\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleResponseJsonObject(json);\n    }).then(function (data) {\n      dispatch(patchQuoteSuccess(data));\n      return data;\n    }).then(function (data) {\n      dispatch(getRiskDetails(data.riskId));\n      return data.riskId;\n    }).then(function (riskId) {\n      return dispatch(getRiskQuotes(riskId));\n    }).then(function () {\n      dispatch(enqueueNotification('notification.patchRiskQuote.success', 'success'));\n    }).catch(function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API post error (risk.patchQuote)'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(patchQuoteFailure(err));\n      dispatch(enqueueNotification(utils.api.getErrorMessage(err), 'error'));\n      return err;\n    }).finally(function () {\n      dispatch(hideModal());\n      dispatch(removeLoader('patchQuote'));\n      return;\n    });\n  };\n};\nexport var patchQuoteRequest = function patchQuoteRequest(formData) {\n  return {\n    type: 'RISK_PATCH_QUOTE_REQUEST',\n    payload: formData\n  };\n};\nexport var patchQuoteSuccess = function patchQuoteSuccess(responseData) {\n  return {\n    type: 'RISK_PATCH_QUOTE_SUCCESS',\n    payload: responseData\n  };\n};\nexport var patchQuoteFailure = function patchQuoteFailure(error) {\n  return {\n    type: 'RISK_PATCH_QUOTE_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/risk/risk.actions.patchQuote.js"],"names":["addLoader","authLogout","enqueueNotification","getRiskDetails","getRiskQuotes","hideModal","removeLoader","utils","isEmpty","patchRiskQuote","formData","quote","accept","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","message","patchQuoteRequest","id","patchQuoteFailure","body","premium","grossPremium","validUntil","path","api","post","token","accessToken","data","then","response","handleResponse","json","handleResponseJsonObject","patchQuoteSuccess","riskId","catch","err","errorParams","handleError","handleUnauthorized","getErrorMessage","finally","type","payload","responseData","error"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,UAApB,EAAgCC,mBAAhC,EAAqDC,cAArD,EAAqEC,aAArE,EAAoFC,SAApF,EAA+FC,YAA/F,QAAmH,QAAnH;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AAEA,OAAO,IAAMC,cAAc,GACzB,SADWA,cACX,CAACC,QAAD,EAAWC,KAAX;AAAA,MAAkBC,MAAlB,uEAA2B,KAA3B;AAAA,SACA,UAACC,QAAD,EAAWC,QAAX,EAAwB;AACtB;AADsB,oBAEmCA,QAAQ,EAF3C;AAAA,QAENC,IAFM,aAEdC,IAFc,CAEND,IAFM;AAAA,QAEoBE,QAFpB,aAEEC,MAFF,CAEYC,IAFZ,CAEoBF,QAFpB;;AAItB,QAAMG,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE,gCADa;AAEnBC,MAAAA,OAAO,EAAE;AAFU,KAArB;AAKAT,IAAAA,QAAQ,CAACU,iBAAiB,CAACb,QAAD,CAAlB,CAAR;AACAG,IAAAA,QAAQ,CAACb,SAAS,CAAC,YAAD,CAAV,CAAR;;AAEA,QAAI,CAACU,QAAD,IAAaF,OAAO,CAACE,QAAD,CAApB,IAAkCF,OAAO,CAACG,KAAD,CAAzC,IAAoD,CAACA,KAAK,CAACa,EAA/D,EAAmE;AACjEX,MAAAA,QAAQ,CAACY,iBAAiB,CAACL,YAAD,CAAlB,CAAR;AACAP,MAAAA,QAAQ,CAACX,mBAAmB,CAAC,8BAAD,EAAiC,OAAjC,CAApB,CAAR;AACAW,MAAAA,QAAQ,CAACR,SAAS,EAAV,CAAR;AACAQ,MAAAA,QAAQ,CAACP,YAAY,CAAC,YAAD,CAAb,CAAR;AACA;AACD;;AAED,QAAMoB,IAAI,mCACLf,KADK;AAERgB,MAAAA,OAAO,EAAEjB,QAAQ,CAACiB,OAFV;AAGRC,MAAAA,YAAY,EAAElB,QAAQ,CAACiB,OAHf;AAIRE,MAAAA,UAAU,EAAEnB,QAAQ,CAACmB;AAJb,MAAV;;AAOA,QAAMC,IAAI,GAAGlB,MAAM,2BAAoBD,KAAK,CAACa,EAA1B,uDAAyEb,KAAK,CAACa,EAA/E,WAAnB;AAEA,WAAOjB,KAAK,CAACwB,GAAN,CACJC,IADI,CACC;AACJC,MAAAA,KAAK,EAAElB,IAAI,CAACmB,WADR;AAEJjB,MAAAA,QAAQ,EAAEA,QAAQ,CAACF,IAFf;AAGJe,MAAAA,IAAI,EAAJA,IAHI;AAIJK,MAAAA,IAAI,EAAET;AAJF,KADD,EAOJU,IAPI,CAOC,UAACC,QAAD;AAAA,aAAc9B,KAAK,CAACwB,GAAN,CAAUO,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAPD,EAQJD,IARI,CAQC,UAACG,IAAD;AAAA,aAAUhC,KAAK,CAACwB,GAAN,CAAUS,wBAAV,CAAmCD,IAAnC,CAAV;AAAA,KARD,EASJH,IATI,CASC,UAACD,IAAD,EAAU;AACdtB,MAAAA,QAAQ,CAAC4B,iBAAiB,CAACN,IAAD,CAAlB,CAAR;AACA,aAAOA,IAAP;AACD,KAZI,EAaJC,IAbI,CAaC,UAACD,IAAD,EAAU;AACdtB,MAAAA,QAAQ,CAACV,cAAc,CAACgC,IAAI,CAACO,MAAN,CAAf,CAAR;AACA,aAAOP,IAAI,CAACO,MAAZ;AACD,KAhBI,EAiBJN,IAjBI,CAiBC,UAACM,MAAD,EAAY;AAChB,aAAO7B,QAAQ,CAACT,aAAa,CAACsC,MAAD,CAAd,CAAf;AACD,KAnBI,EAoBJN,IApBI,CAoBC,YAAM;AACVvB,MAAAA,QAAQ,CAACX,mBAAmB,CAAC,qCAAD,EAAwC,SAAxC,CAApB,CAAR;AACD,KAtBI,EAuBJyC,KAvBI,CAuBE,UAACC,GAAD,EAAS;AACd,UAAMC,WAAW,mCACZzB,YADY;AAEfE,QAAAA,OAAO,EAAE;AAFM,QAAjB;;AAKAf,MAAAA,KAAK,CAACwB,GAAN,CAAUe,WAAV,CAAsBF,GAAtB,EAA2BC,WAA3B;AACAtC,MAAAA,KAAK,CAACwB,GAAN,CAAUgB,kBAAV,CAA6BH,GAA7B,EAAkC/B,QAAlC,EAA4CZ,UAA5C;AACAY,MAAAA,QAAQ,CAACY,iBAAiB,CAACmB,GAAD,CAAlB,CAAR;AACA/B,MAAAA,QAAQ,CAACX,mBAAmB,CAACK,KAAK,CAACwB,GAAN,CAAUiB,eAAV,CAA0BJ,GAA1B,CAAD,EAAiC,OAAjC,CAApB,CAAR;AACA,aAAOA,GAAP;AACD,KAlCI,EAmCJK,OAnCI,CAmCI,YAAM;AACbpC,MAAAA,QAAQ,CAACR,SAAS,EAAV,CAAR;AACAQ,MAAAA,QAAQ,CAACP,YAAY,CAAC,YAAD,CAAb,CAAR;AACA;AACD,KAvCI,CAAP;AAwCD,GAtED;AAAA,CADK;AAyEP,OAAO,IAAMiB,iBAAiB,GAAG,SAApBA,iBAAoB,CAACb,QAAD,EAAc;AAC7C,SAAO;AACLwC,IAAAA,IAAI,EAAE,0BADD;AAELC,IAAAA,OAAO,EAAEzC;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAM+B,iBAAiB,GAAG,SAApBA,iBAAoB,CAACW,YAAD,EAAkB;AACjD,SAAO;AACLF,IAAAA,IAAI,EAAE,0BADD;AAELC,IAAAA,OAAO,EAAEC;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAM3B,iBAAiB,GAAG,SAApBA,iBAAoB,CAAC4B,KAAD,EAAW;AAC1C,SAAO;AACLH,IAAAA,IAAI,EAAE,0BADD;AAELC,IAAAA,OAAO,EAAEE;AAFJ,GAAP;AAID,CALM","sourcesContent":["import { addLoader, authLogout, enqueueNotification, getRiskDetails, getRiskQuotes, hideModal, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\nimport isEmpty from 'lodash/isEmpty';\r\n\r\nexport const patchRiskQuote =\r\n  (formData, quote, accept = false) =>\r\n  (dispatch, getState) => {\r\n    // prettier-ignore\r\n    const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n    const defaultError = {\r\n      file: 'stores/risk.actions.patchQuote',\r\n      message: 'Data missing for POST request',\r\n    };\r\n\r\n    dispatch(patchQuoteRequest(formData));\r\n    dispatch(addLoader('patchQuote'));\r\n\r\n    if (!formData || isEmpty(formData) || isEmpty(quote) || !quote.id) {\r\n      dispatch(patchQuoteFailure(defaultError));\r\n      dispatch(enqueueNotification('notification.generic.request', 'error'));\r\n      dispatch(hideModal());\r\n      dispatch(removeLoader('patchQuote'));\r\n      return;\r\n    }\r\n\r\n    const body = {\r\n      ...quote,\r\n      premium: formData.premium,\r\n      grossPremium: formData.premium,\r\n      validUntil: formData.validUntil,\r\n    };\r\n\r\n    const path = accept ? `api/v1/quotes/${quote.id}/patch?acceptQuote=true` : `api/v1/quotes/${quote.id}/patch`;\r\n\r\n    return utils.api\r\n      .post({\r\n        token: auth.accessToken,\r\n        endpoint: endpoint.auth,\r\n        path,\r\n        data: body,\r\n      })\r\n      .then((response) => utils.api.handleResponse(response))\r\n      .then((json) => utils.api.handleResponseJsonObject(json))\r\n      .then((data) => {\r\n        dispatch(patchQuoteSuccess(data));\r\n        return data;\r\n      })\r\n      .then((data) => {\r\n        dispatch(getRiskDetails(data.riskId));\r\n        return data.riskId;\r\n      })\r\n      .then((riskId) => {\r\n        return dispatch(getRiskQuotes(riskId));\r\n      })\r\n      .then(() => {\r\n        dispatch(enqueueNotification('notification.patchRiskQuote.success', 'success'));\r\n      })\r\n      .catch((err) => {\r\n        const errorParams = {\r\n          ...defaultError,\r\n          message: 'API post error (risk.patchQuote)',\r\n        };\r\n\r\n        utils.api.handleError(err, errorParams);\r\n        utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n        dispatch(patchQuoteFailure(err));\r\n        dispatch(enqueueNotification(utils.api.getErrorMessage(err), 'error'));\r\n        return err;\r\n      })\r\n      .finally(() => {\r\n        dispatch(hideModal());\r\n        dispatch(removeLoader('patchQuote'));\r\n        return;\r\n      });\r\n  };\r\n\r\nexport const patchQuoteRequest = (formData) => {\r\n  return {\r\n    type: 'RISK_PATCH_QUOTE_REQUEST',\r\n    payload: formData,\r\n  };\r\n};\r\n\r\nexport const patchQuoteSuccess = (responseData) => {\r\n  return {\r\n    type: 'RISK_PATCH_QUOTE_SUCCESS',\r\n    payload: responseData,\r\n  };\r\n};\r\n\r\nexport const patchQuoteFailure = (error) => {\r\n  return {\r\n    type: 'RISK_PATCH_QUOTE_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}