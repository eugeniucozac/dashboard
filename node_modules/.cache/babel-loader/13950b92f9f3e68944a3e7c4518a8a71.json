{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ClaimsTab\\\\ClaimsTab.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as Yup from 'yup';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup'; // app\n\nimport styles from './ClaimsTab.styles';\nimport { resetClaimProcessingFilters, resetClaimsProcessingSearch, selectUser, updateClaimProcessingFilters, selectClaimsTabData, getClaimsTabData, getClaimsTabDetails } from 'stores';\nimport * as constants from 'consts';\nimport * as utils from 'utils';\nimport { useFlexiColumns } from 'hooks';\nimport { MultiSelect, FormDate } from 'components';\nimport ClaimsTabView from './ClaimsTab.view'; // mui\n\nimport { makeStyles } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ClaimsTab() {\n  _s();\n\n  var _claimsTabData$tableD, _claimsTabData$tableD2, _claimsTabData$tableD3, _claimsTabData$tableD4;\n\n  var classes = makeStyles(styles, {\n    name: 'ClaimsManagement'\n  })();\n  var dispatch = useDispatch();\n  var user = useSelector(selectUser);\n  var userHasMyClaimsPermission = utils.app.access.feature('claimsProcessing.myClaims', ['read', 'create', 'update'], user);\n  var userHasMyTeamClaimsPermission = utils.app.access.feature('claimsProcessing.myTeamClaims', ['read', 'create', 'update'], user);\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      searchTerm = _useState2[0],\n      setSearchTerm = _useState2[1];\n\n  var _useState3 = useState(constants.CLAIMS_SEARCH_OPTION_INSURED),\n      _useState4 = _slicedToArray(_useState3, 2),\n      searchBy = _useState4[0],\n      setSearchBy = _useState4[1];\n\n  var _useState5 = useState(utils.string.t('claims.searchByClaims.options.ClaimRef')),\n      _useState6 = _slicedToArray(_useState5, 2),\n      searchByText = _useState6[0],\n      setSearchByText = _useState6[1];\n\n  var _useState7 = useState(true),\n      _useState8 = _slicedToArray(_useState7, 2),\n      myClaimsFirstTimeLoad = _useState8[0],\n      setMyClaimsFirstTimeLoad = _useState8[1];\n\n  var _useState9 = useState(true),\n      _useState10 = _slicedToArray(_useState9, 2),\n      myTeamClaimsFirstTimeLoad = _useState10[0],\n      setMyTeamClaimsFirstTimeLoad = _useState10[1];\n\n  var firstTimeSortColumns = 'lastUpdatedDate';\n  var searchTypeCall = constants.CLAIM_PROCESSING_REQ_TYPES.search;\n  var filterTypeCall = constants.CLAIM_PROCESSING_REQ_TYPES.filter;\n\n  var _useState11 = useState(),\n      _useState12 = _slicedToArray(_useState11, 2),\n      resetKey = _useState12[0],\n      setResetKey = _useState12[1];\n\n  var claimsTabData = useSelector(selectClaimsTabData);\n  var claimsTabTableRowDetails = claimsTabData === null || claimsTabData === void 0 ? void 0 : (_claimsTabData$tableD = claimsTabData.tableDetails) === null || _claimsTabData$tableD === void 0 ? void 0 : _claimsTabData$tableD.items;\n  var claimsTabFilterDropDown = claimsTabData === null || claimsTabData === void 0 ? void 0 : (_claimsTabData$tableD2 = claimsTabData.tableDetails) === null || _claimsTabData$tableD2 === void 0 ? void 0 : _claimsTabData$tableD2.filters;\n  var isFetchingFilters = claimsTabData === null || claimsTabData === void 0 ? void 0 : (_claimsTabData$tableD3 = claimsTabData.tableDetails) === null || _claimsTabData$tableD3 === void 0 ? void 0 : _claimsTabData$tableD3.isloadingFilters;\n\n  var _useState13 = useState((claimsTabData === null || claimsTabData === void 0 ? void 0 : claimsTabData.view) || constants.CLAIM_TEAM_TYPE.myClaims),\n      _useState14 = _slicedToArray(_useState13, 2),\n      claimsType = _useState14[0],\n      setClaimsType = _useState14[1];\n\n  var selectOptions = [{\n    label: utils.string.t('claims.searchByClaims.options.Insured'),\n    value: constants.CLAIMS_SEARCH_OPTION_INSURED\n  }, {\n    label: utils.string.t('claims.searchByClaims.options.ClaimRef'),\n    value: constants.CLAIMS_SEARCH_OPTION_CLAIM_REF\n  }, {\n    label: utils.string.t('claims.searchByClaims.options.LossRef'),\n    value: constants.CLAIMS_SEARCH_OPTION_LOSS_REF\n  }, {\n    label: utils.string.t('claims.searchByClaims.options.PolicyRef'),\n    value: constants.CLAIMS_SEARCH_OPTION_POLICY_REF\n  }, {\n    label: utils.string.t('claims.searchByClaims.options.Division'),\n    value: constants.CLAIMS_SEARCH_OPTION_DIVISION\n  }];\n  var viewFields = [{\n    name: 'views',\n    type: 'radio',\n    value: claimsType,\n    defaultValue: claimsType,\n    muiFormGroupProps: {\n      row: true,\n      nestedClasses: {\n        root: classes.adjusterRadioGroup\n      },\n      classes: {\n        root: classes.radioLabel\n      },\n      onChange: function onChange(value) {\n        setClaimsType(value);\n        setValue('includeClosedClaims', false); // setIsClosedClaimsEnabled(false);\n      }\n    },\n    options: [].concat(_toConsumableArray(userHasMyClaimsPermission ? [{\n      value: constants.CLAIM_TEAM_TYPE.myClaims,\n      label: utils.string.t('claims.processing.myClaims')\n    }] : []), _toConsumableArray(userHasMyTeamClaimsPermission ? [{\n      value: constants.CLAIM_TEAM_TYPE.myTeamClaims,\n      label: utils.string.t('claims.processing.myTeamClaims')\n    }] : []))\n  }, {\n    name: 'searchBy',\n    type: 'autocompletemui',\n    options: selectOptions,\n    value: (claimsTabData === null || claimsTabData === void 0 ? void 0 : claimsTabData.searchBy) === '' ? (selectOptions === null || selectOptions === void 0 ? void 0 : selectOptions.find(function (item) {\n      return (item === null || item === void 0 ? void 0 : item.value) === constants.CLAIMS_SEARCH_OPTION_INSURED;\n    })) || null : selectOptions === null || selectOptions === void 0 ? void 0 : selectOptions.find(function (item) {\n      return (item === null || item === void 0 ? void 0 : item.value) === (claimsTabData === null || claimsTabData === void 0 ? void 0 : claimsTabData.searchBy);\n    }),\n    validation: Yup.object().nullable().required(utils.string.t('validation.required')),\n    muiComponentProps: {\n      inputProps: {\n        title: searchByText || ''\n      }\n    }\n  }, {\n    name: 'createdDate',\n    type: 'datepicker',\n    value: null\n  }];\n  var defaultValues = utils.form.getInitialValues(viewFields);\n  var validationSchema = utils.form.getValidationSchema(viewFields);\n\n  var _useForm = useForm(_objectSpread({\n    defaultValues: defaultValues\n  }, validationSchema && {\n    resolver: yupResolver(validationSchema)\n  })),\n      control = _useForm.control,\n      setValue = _useForm.setValue;\n\n  var tableFilterFields = [{\n    id: 'claimStage',\n    type: 'multiSelect',\n    label: utils.string.t('claims.claimsTab.filtercolumns.claimStage'),\n    placeholder: utils.string.t('claims.filterPlaceHolderText'),\n    value: [],\n    options: claimsTabFilterDropDown === null || claimsTabFilterDropDown === void 0 ? void 0 : claimsTabFilterDropDown.claimStage,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"claimStage\",\n      search: true,\n      options: claimsTabFilterDropDown === null || claimsTabFilterDropDown === void 0 ? void 0 : claimsTabFilterDropDown.claimStage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 20\n    }, this)\n  }, {\n    id: 'lossFromDate',\n    type: 'datepicker',\n    label: utils.string.t('claims.claimsTab.filtercolumns.lossDateFrom'),\n    value: '',\n    content: /*#__PURE__*/_jsxDEV(FormDate, _objectSpread(_objectSpread({\n      control: control\n    }, utils.form.getFieldProps(defaultValues, 'lossFromDate')), {}, {\n      id: \"lossFromDatedatepicker\",\n      name: \"lossFromDate\",\n      type: \"datepicker\",\n      value: '',\n      label: '',\n      plainText: true,\n      plainTextIcon: true,\n      placeholder: utils.string.t('app.selectDate'),\n      muiComponentProps: {\n        fullWidth: false,\n        margin: 'dense'\n      },\n      muiPickerProps: {\n        clearable: false,\n        variant: 'inline',\n        format: 'DD-MM-YYYY'\n      }\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this)\n  }, {\n    id: 'insured',\n    type: 'multiSelect',\n    label: utils.string.t('claims.claimsTab.filtercolumns.insured'),\n    placeholder: utils.string.t('claims.filterPlaceHolderText'),\n    value: [],\n    options: claimsTabFilterDropDown === null || claimsTabFilterDropDown === void 0 ? void 0 : claimsTabFilterDropDown.insured,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"insured\",\n      search: true,\n      options: claimsTabFilterDropDown === null || claimsTabFilterDropDown === void 0 ? void 0 : claimsTabFilterDropDown.insured\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 20\n    }, this)\n  }].concat(_toConsumableArray(claimsType === constants.CLAIM_TEAM_TYPE.myTeamClaims ? [{\n    id: 'assignedTo',\n    type: 'multiSelect',\n    label: utils.string.t('claims.claimsTab.filtercolumns.assignedTo'),\n    value: [],\n    options: claimsTabFilterDropDown === null || claimsTabFilterDropDown === void 0 ? void 0 : claimsTabFilterDropDown.assignedTo,\n    nestedClasses: {\n      root: classes.fieldWidth\n    },\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"assignedTo\",\n      search: true,\n      options: claimsTabFilterDropDown === null || claimsTabFilterDropDown === void 0 ? void 0 : claimsTabFilterDropDown.assignedTo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 26\n    }, this)\n  }] : []), [{\n    id: 'lastUpdated',\n    type: 'datepicker',\n    label: utils.string.t('claims.claimsTab.filtercolumns.lastUpdated'),\n    value: '',\n    content: /*#__PURE__*/_jsxDEV(FormDate, _objectSpread(_objectSpread({\n      control: control\n    }, utils.form.getFieldProps(defaultValues, 'lastUpdated')), {}, {\n      id: \"lastUpdateddatepicker\",\n      name: \"lastUpdated\",\n      type: \"datepicker\",\n      value: '',\n      label: '',\n      plainText: true,\n      plainTextIcon: true,\n      placeholder: utils.string.t('app.selectDate'),\n      muiComponentProps: {\n        fullWidth: false,\n        margin: 'dense'\n      },\n      muiPickerProps: {\n        clearable: false,\n        variant: 'inline',\n        format: 'DD-MM-YYYY'\n      }\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 15\n    }, this)\n  }, {\n    id: 'priority',\n    type: 'multiSelect',\n    label: utils.string.t('claims.claimsTab.filtercolumns.priority'),\n    placeholder: utils.string.t('claims.filterPlaceHolderText'),\n    value: [],\n    options: claimsTabFilterDropDown === null || claimsTabFilterDropDown === void 0 ? void 0 : claimsTabFilterDropDown.priority,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"priority\",\n      search: true,\n      options: claimsTabFilterDropDown === null || claimsTabFilterDropDown === void 0 ? void 0 : claimsTabFilterDropDown.priority\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 20\n    }, this)\n  }, {\n    id: 'division',\n    type: 'multiSelect',\n    label: utils.string.t('claims.claimsTab.filtercolumns.division'),\n    placeholder: utils.string.t('claims.filterPlaceHolderText'),\n    value: [],\n    options: claimsTabFilterDropDown === null || claimsTabFilterDropDown === void 0 ? void 0 : claimsTabFilterDropDown.division,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"division\",\n      search: true,\n      options: claimsTabFilterDropDown === null || claimsTabFilterDropDown === void 0 ? void 0 : claimsTabFilterDropDown.division\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 20\n    }, this)\n  }]);\n  useEffect(function () {\n    if (!(claimsTabData === null || claimsTabData === void 0 ? void 0 : claimsTabData.isClaimsTabLoaded)) {\n      getClaimsData();\n\n      var claimsData = _objectSpread({}, claimsTabData);\n\n      claimsData.isClaimsTabLoaded = true;\n      dispatch(getClaimsTabData(claimsData));\n    } else if ((claimsTabData === null || claimsTabData === void 0 ? void 0 : claimsTabData.isClaimsTabLoaded) && (claimsTabData === null || claimsTabData === void 0 ? void 0 : claimsTabData.view) !== claimsType) {\n      getClaimsData();\n\n      var _claimsData = _objectSpread({}, claimsTabData);\n\n      _claimsData.view = claimsType;\n      dispatch(getClaimsTabData(_claimsData));\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [claimsType]);\n\n  var getClaimsData = function getClaimsData() {\n    if (claimsType) {\n      setValue('createdDate', null); // defect - 14469 - Default sorting is not applying on Date &Time created and Priority columns\n      // First Time Table Grid load for MyClaims, MyTeamClaims, All Claims passing createdDate and Priority columns from UI.\n\n      if (myClaimsFirstTimeLoad && claimsType === constants.CLAIM_TEAM_TYPE.myClaims || myTeamClaimsFirstTimeLoad && claimsType === constants.CLAIM_TEAM_TYPE.myTeamClaims) {\n        if (claimsType === constants.CLAIM_TEAM_TYPE.myClaims) setMyClaimsFirstTimeLoad(!myClaimsFirstTimeLoad);\n        if (claimsType === constants.CLAIM_TEAM_TYPE.myTeamClaims) setMyTeamClaimsFirstTimeLoad(!myTeamClaimsFirstTimeLoad);\n        dispatch(getClaimsTabDetails({\n          requestType: searchTypeCall,\n          claimsType: claimsType,\n          filterTerm: [],\n          searchBy: searchBy,\n          firstTimeSort: firstTimeSortColumns\n        }));\n        dispatch(getClaimsTabDetails({\n          requestType: filterTypeCall,\n          claimsType: claimsType,\n          filterTerm: [],\n          searchBy: searchBy,\n          firstTimeSort: firstTimeSortColumns\n        }));\n      } else {\n        // From second time onwards, table grid load from else part for single column sorting.\n        dispatch(getClaimsTabDetails({\n          requestType: searchTypeCall,\n          claimsType: claimsType,\n          filterTerm: [],\n          searchBy: searchBy\n        }));\n        dispatch(getClaimsTabDetails({\n          requestType: filterTypeCall,\n          claimsType: claimsType,\n          filterTerm: [],\n          searchBy: searchBy\n        }));\n      }\n    }\n  };\n\n  var handleSearch = function handleSearch(queryObject) {\n    setResetKey(new Date().getTime());\n    dispatch(resetClaimProcessingFilters());\n    setValue('createdDate', null);\n\n    if (queryObject === null || queryObject === void 0 ? void 0 : queryObject.search) {\n      setSearchTerm(queryObject.search);\n\n      var claimsData = _objectSpread({}, claimsTabData);\n\n      claimsData.searchText = queryObject === null || queryObject === void 0 ? void 0 : queryObject.search;\n      dispatch(getClaimsTabData(claimsData));\n      dispatch(getClaimsTabDetails({\n        requestType: searchTypeCall,\n        claimsType: claimsType,\n        term: queryObject.search,\n        direction: 'desc',\n        searchBy: searchBy\n      }));\n      dispatch(getClaimsTabDetails({\n        requestType: filterTypeCall,\n        claimsType: claimsType,\n        term: queryObject.search,\n        direction: 'desc',\n        searchBy: searchBy,\n        filterTerm: queryObject.filters\n      }));\n    }\n  };\n\n  var handleResetFilter = function handleResetFilter() {\n    setValue('createdDate', null);\n    dispatch(resetClaimProcessingFilters());\n    dispatch(getClaimsTabDetails({\n      requestType: searchTypeCall,\n      claimsType: claimsType,\n      term: searchTerm,\n      filterTerm: '',\n      direction: 'desc',\n      searchBy: searchBy\n    }));\n    dispatch(getClaimsTabDetails({\n      requestType: filterTypeCall,\n      claimsType: claimsType,\n      term: searchTerm,\n      filterTerm: '',\n      direction: 'desc',\n      searchBy: searchBy\n    }));\n  };\n\n  var handleSearchFilter = function handleSearchFilter(data) {\n    dispatch(updateClaimProcessingFilters({\n      claimsType: claimsType,\n      search: data === null || data === void 0 ? void 0 : data.search,\n      filters: data.filters\n    }));\n    return dispatch(getClaimsTabDetails({\n      requestType: searchTypeCall,\n      claimsType: claimsType,\n      term: data.search,\n      filterTerm: data.filters,\n      searchBy: searchBy\n    }));\n  };\n\n  var handleSort = function handleSort(by, dir) {\n    dispatch(getClaimsTabDetails({\n      requestType: searchTypeCall,\n      claimsType: claimsType,\n      sortBy: by,\n      direction: dir.toUpperCase(),\n      term: searchTerm,\n      searchBy: searchBy\n    }));\n  };\n\n  var handleChangePage = function handleChangePage(newPage) {\n    dispatch(getClaimsTabDetails({\n      requestType: searchTypeCall,\n      claimsType: claimsType,\n      page: newPage,\n      term: searchTerm,\n      searchBy: searchBy\n    }));\n  };\n\n  var handleChangeRowsPerPage = function handleChangeRowsPerPage(rowsPerPage) {\n    dispatch(getClaimsTabDetails({\n      requestType: searchTypeCall,\n      claimsType: claimsType,\n      size: rowsPerPage,\n      term: searchTerm,\n      searchBy: searchBy\n    }));\n  };\n\n  var handleResetSearch = function handleResetSearch() {\n    setResetKey(new Date().getTime());\n    dispatch(resetClaimsProcessingSearch());\n    dispatch(resetClaimProcessingFilters());\n    setValue('createdDate', null);\n    dispatch(getClaimsTabDetails({\n      requestType: searchTypeCall,\n      claimsType: claimsType,\n      filterTerm: [],\n      searchBy: searchBy\n    }));\n    dispatch(getClaimsTabDetails({\n      requestType: filterTypeCall,\n      claimsType: claimsType,\n      filterTerm: [],\n      searchBy: searchBy\n    }));\n  };\n\n  var onSelectSearchBy = function onSelectSearchBy(searchByValue, searchByLabel) {\n    setSearchByText(searchByLabel);\n    setSearchBy(searchByValue);\n\n    var claimsData = _objectSpread({}, claimsTabData);\n\n    claimsData.searchBy = searchByValue;\n    dispatch(getClaimsTabData(claimsData));\n    dispatch(getClaimsTabDetails({\n      requestType: searchTypeCall,\n      claimsType: claimsType,\n      searchBy: searchByValue,\n      term: searchTerm\n    }));\n    dispatch(getClaimsTabDetails({\n      requestType: filterTypeCall,\n      claimsType: claimsType,\n      searchBy: searchByValue,\n      term: searchTerm\n    }));\n  };\n\n  var columns = [{\n    id: 'claimRef',\n    label: utils.string.t('claims.claimsTab.tablecolumns.claimRef'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    narrow: true,\n    nowrap: true,\n    visible: true,\n    mandatory: true\n  }, {\n    id: 'lossRef',\n    label: utils.string.t('claims.claimsTab.tablecolumns.lossRef'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    narrow: true,\n    nowrap: true,\n    visible: true,\n    mandatory: true\n  }, {\n    id: 'lossDateFrom',\n    label: utils.string.t('claims.claimsTab.tablecolumns.lossDateFrom'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    ellipsis: true,\n    visible: true\n  }, {\n    id: 'assured',\n    label: utils.string.t('claims.claimsTab.tablecolumns.insured'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    ellipsis: true,\n    visible: true\n  }, {\n    id: 'policyRef',\n    label: utils.string.t('claims.claimsTab.tablecolumns.policyRef'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }, {\n    id: 'division',\n    label: utils.string.t('claims.claimsTab.tablecolumns.division'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }, {\n    id: 'claimStatus',\n    label: utils.string.t('claims.claimsTab.tablecolumns.claimStatus'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }, {\n    id: 'claimStage',\n    label: utils.string.t('claims.claimsTab.tablecolumns.claimStage'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }, {\n    id: 'assignedTo',\n    label: utils.string.t('claims.claimsTab.tablecolumns.assignedTo'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true,\n    mandatory: true,\n    nowrap: true\n  }, {\n    id: 'team',\n    label: utils.string.t('claims.claimsTab.tablecolumns.team'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true,\n    mandatory: true\n  }, {\n    id: 'lastUpdated',\n    label: utils.string.t('claims.claimsTab.tablecolumns.lastUpdated'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true,\n    mandatory: true\n  }, {\n    id: 'priority',\n    label: utils.string.t('claims.claimsTab.tablecolumns.priority'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }, {\n    id: 'catCodesID',\n    label: utils.string.t('claims.claimsTab.tablecolumns.catCode'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    ellipsis: true\n  }, {\n    id: 'claimReceivedDateTime',\n    label: utils.string.t('claims.claimsTab.tablecolumns.claimReceivedDateTime'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    narrow: true,\n    nowrap: true\n  }, {\n    id: 'createdDate',\n    label: utils.string.t('claims.claimsTab.tablecolumns.createdDate'),\n    sort: {\n      type: 'date',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: false\n  }, {\n    id: 'closedDate',\n    label: utils.string.t('claims.claimsTab.tablecolumns.closedDate'),\n    sort: {\n      type: 'date',\n      direction: 'asc'\n    },\n    nowrap: true\n  }, {\n    id: 'complexity',\n    label: utils.string.t('claims.claimsTab.tablecolumns.complexity'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: false\n  }, {\n    id: 'ucr',\n    label: utils.string.t('claims.claimsTab.tablecolumns.ucr'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: false\n  }, {\n    id: 'policyType',\n    label: utils.string.t('claims.claimsTab.tablecolumns.policyType'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: false\n  }, {\n    id: 'claimantName',\n    label: utils.string.t('claims.claimsTab.tablecolumns.claimant'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: false,\n    ellipsis: true\n  }, {\n    id: 'reinsured',\n    label: utils.string.t('claims.claimsTab.tablecolumns.reinsured'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: false\n  }, {\n    id: 'client',\n    label: utils.string.t('claims.claimsTab.tablecolumns.client'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    }\n  }, {\n    id: 'interest',\n    label: utils.string.t('claims.claimsTab.tablecolumns.interest'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: false\n  }, {\n    id: 'createdBy',\n    label: utils.string.t('claims.claimsTab.tablecolumns.createdBy'),\n    sort: {\n      type: 'numeric',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: false\n  }, {\n    id: 'company',\n    label: utils.string.t('claims.claimsTab.tablecolumns.company'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    }\n  }, {\n    id: 'coverholder',\n    label: utils.string.t('claims.claimsTab.tablecolumns.coverholder'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: false\n  }, {\n    id: 'lossToDate',\n    label: utils.string.t('claims.claimsTab.tablecolumns.lossDateTo'),\n    sort: {\n      type: 'date',\n      direction: 'asc'\n    },\n    nowrap: true\n  }, {\n    id: 'lossDateQualifier',\n    label: utils.string.t('claims.claimsTab.tablecolumns.lossDateQualifier'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true\n  }, {\n    id: 'lossDetails',\n    label: utils.string.t('claims.claimsTab.tablecolumns.lossDetails'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    ellipsis: true\n  }, {\n    id: 'pasClaimRef',\n    label: utils.string.t('claims.claimsTab.tablecolumns.pasClaimRef'),\n    sort: {\n      type: 'numeric',\n      direction: 'asc'\n    },\n    nowrap: true\n  }, {\n    id: 'pasStatus',\n    label: utils.string.t('claims.claimsTab.tablecolumns.pasStatus'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true\n  }];\n\n  var _useFlexiColumns = useFlexiColumns(columns),\n      columnsArray = _useFlexiColumns.columns,\n      columnProps = _useFlexiColumns.columnProps,\n      toggleColumn = _useFlexiColumns.toggleColumn;\n\n  return /*#__PURE__*/_jsxDEV(ClaimsTabView, {\n    claims: claimsTabTableRowDetails,\n    searchTerm: (claimsTabData === null || claimsTabData === void 0 ? void 0 : claimsTabData.searchText) || '',\n    sort: _objectSpread({}, claimsTabData === null || claimsTabData === void 0 ? void 0 : (_claimsTabData$tableD4 = claimsTabData.tableDetails) === null || _claimsTabData$tableD4 === void 0 ? void 0 : _claimsTabData$tableD4.sort),\n    columnsArray: columnsArray,\n    columnProps: columnProps,\n    viewFields: viewFields,\n    tableFilterFields: tableFilterFields,\n    isFetchingFilters: isFetchingFilters,\n    claimsType: 'myClaims',\n    control: control,\n    resetKey: resetKey,\n    handlers: {\n      search: handleSearch,\n      searchFilter: handleSearchFilter,\n      resetFilter: handleResetFilter,\n      sort: handleSort,\n      changePage: handleChangePage,\n      changeRowsPerPage: handleChangeRowsPerPage,\n      toggleColumn: toggleColumn,\n      resetSearch: handleResetSearch,\n      onSelectSearchBy: onSelectSearchBy\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 674,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ClaimsTab, \"XW1zaUUhKFJSYGzgsCFRTI1Qtfk=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useForm, useFlexiColumns];\n});\n\n_c = ClaimsTab;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimsTab\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ClaimsTab/ClaimsTab.js"],"names":["React","useState","useEffect","useDispatch","useSelector","Yup","useForm","yupResolver","styles","resetClaimProcessingFilters","resetClaimsProcessingSearch","selectUser","updateClaimProcessingFilters","selectClaimsTabData","getClaimsTabData","getClaimsTabDetails","constants","utils","useFlexiColumns","MultiSelect","FormDate","ClaimsTabView","makeStyles","ClaimsTab","classes","name","dispatch","user","userHasMyClaimsPermission","app","access","feature","userHasMyTeamClaimsPermission","searchTerm","setSearchTerm","CLAIMS_SEARCH_OPTION_INSURED","searchBy","setSearchBy","string","t","searchByText","setSearchByText","myClaimsFirstTimeLoad","setMyClaimsFirstTimeLoad","myTeamClaimsFirstTimeLoad","setMyTeamClaimsFirstTimeLoad","firstTimeSortColumns","searchTypeCall","CLAIM_PROCESSING_REQ_TYPES","search","filterTypeCall","filter","resetKey","setResetKey","claimsTabData","claimsTabTableRowDetails","tableDetails","items","claimsTabFilterDropDown","filters","isFetchingFilters","isloadingFilters","view","CLAIM_TEAM_TYPE","myClaims","claimsType","setClaimsType","selectOptions","label","value","CLAIMS_SEARCH_OPTION_CLAIM_REF","CLAIMS_SEARCH_OPTION_LOSS_REF","CLAIMS_SEARCH_OPTION_POLICY_REF","CLAIMS_SEARCH_OPTION_DIVISION","viewFields","type","defaultValue","muiFormGroupProps","row","nestedClasses","root","adjusterRadioGroup","radioLabel","onChange","setValue","options","myTeamClaims","find","item","validation","object","nullable","required","muiComponentProps","inputProps","title","defaultValues","form","getInitialValues","validationSchema","getValidationSchema","resolver","control","tableFilterFields","id","placeholder","claimStage","content","getFieldProps","fullWidth","margin","clearable","variant","format","insured","assignedTo","fieldWidth","priority","division","isClaimsTabLoaded","getClaimsData","claimsData","requestType","filterTerm","firstTimeSort","handleSearch","queryObject","Date","getTime","searchText","term","direction","handleResetFilter","handleSearchFilter","data","handleSort","by","dir","sortBy","toUpperCase","handleChangePage","newPage","page","handleChangeRowsPerPage","rowsPerPage","size","handleResetSearch","onSelectSearchBy","searchByValue","searchByLabel","columns","sort","narrow","nowrap","visible","mandatory","ellipsis","columnsArray","columnProps","toggleColumn","searchFilter","resetFilter","changePage","changeRowsPerPage","resetSearch"],"mappings":"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","sourcesContent":["import React, {  useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport * as Yup from 'yup';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n\r\n// app\r\nimport styles from './ClaimsTab.styles';\r\nimport {\r\n  resetClaimProcessingFilters,\r\n  resetClaimsProcessingSearch,\r\n  selectUser,\r\n  updateClaimProcessingFilters,\r\n  selectClaimsTabData,\r\n  getClaimsTabData,\r\n  getClaimsTabDetails\r\n} from 'stores';\r\nimport * as constants from 'consts';\r\nimport * as utils from 'utils';\r\nimport { useFlexiColumns } from 'hooks';\r\nimport { MultiSelect, FormDate } from 'components';\r\nimport ClaimsTabView from './ClaimsTab.view';\r\n\r\n// mui\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nexport default function ClaimsTab(){\r\n  const classes = makeStyles(styles, { name: 'ClaimsManagement' })();\r\n  const dispatch = useDispatch();\r\n\r\n  const user = useSelector(selectUser);\r\n  const userHasMyClaimsPermission = utils.app.access.feature('claimsProcessing.myClaims', ['read', 'create', 'update'], user);\r\n  const userHasMyTeamClaimsPermission = utils.app.access.feature('claimsProcessing.myTeamClaims', ['read', 'create', 'update'], user);\r\n\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [searchBy, setSearchBy] = useState(constants.CLAIMS_SEARCH_OPTION_INSURED);\r\n\r\n  const [searchByText, setSearchByText] = useState(utils.string.t('claims.searchByClaims.options.ClaimRef'));\r\n\r\n  const [myClaimsFirstTimeLoad, setMyClaimsFirstTimeLoad] = useState(true);\r\n  const [myTeamClaimsFirstTimeLoad, setMyTeamClaimsFirstTimeLoad] = useState(true);\r\n  const firstTimeSortColumns = 'lastUpdatedDate';\r\n\r\n  const searchTypeCall = constants.CLAIM_PROCESSING_REQ_TYPES.search;\r\n  const filterTypeCall = constants.CLAIM_PROCESSING_REQ_TYPES.filter;\r\n  const [resetKey, setResetKey] = useState();\r\n\r\n  const claimsTabData = useSelector(selectClaimsTabData);\r\n  const claimsTabTableRowDetails = claimsTabData?.tableDetails?.items;\r\n  const claimsTabFilterDropDown = claimsTabData?.tableDetails?.filters;\r\n  const isFetchingFilters = claimsTabData?.tableDetails?.isloadingFilters;\r\n  \r\n  const [claimsType, setClaimsType] = useState(claimsTabData?.view || constants.CLAIM_TEAM_TYPE.myClaims);\r\n\r\n  const selectOptions = [\r\n    { label: utils.string.t('claims.searchByClaims.options.Insured'), value: constants.CLAIMS_SEARCH_OPTION_INSURED },\r\n    { label: utils.string.t('claims.searchByClaims.options.ClaimRef'), value: constants.CLAIMS_SEARCH_OPTION_CLAIM_REF },\r\n    { label: utils.string.t('claims.searchByClaims.options.LossRef'), value: constants.CLAIMS_SEARCH_OPTION_LOSS_REF },\r\n    { label: utils.string.t('claims.searchByClaims.options.PolicyRef'), value: constants.CLAIMS_SEARCH_OPTION_POLICY_REF },\r\n    { label: utils.string.t('claims.searchByClaims.options.Division'), value: constants.CLAIMS_SEARCH_OPTION_DIVISION }\r\n\r\n  ];\r\n\r\n  const viewFields = [\r\n    {\r\n          name: 'views',\r\n          type: 'radio',\r\n          value: claimsType,\r\n          defaultValue: claimsType,\r\n          muiFormGroupProps: {\r\n            row: true,\r\n            nestedClasses: { root: classes.adjusterRadioGroup },\r\n            classes: {\r\n              root: classes.radioLabel,\r\n            },\r\n            onChange: (value) => {\r\n              setClaimsType(value);\r\n              setValue('includeClosedClaims', false);\r\n              // setIsClosedClaimsEnabled(false);\r\n            },\r\n          },\r\n          options: [\r\n            ...(userHasMyClaimsPermission\r\n              ? [\r\n                  {\r\n                    value: constants.CLAIM_TEAM_TYPE.myClaims,\r\n                    label: utils.string.t('claims.processing.myClaims'),\r\n                  },\r\n                ]\r\n              : []),\r\n            ...(userHasMyTeamClaimsPermission\r\n              ? [\r\n                  {\r\n                    value: constants.CLAIM_TEAM_TYPE.myTeamClaims,\r\n                    label: utils.string.t('claims.processing.myTeamClaims'),\r\n                  },\r\n                ]\r\n              : [])\r\n          ],\r\n        },\r\n        {\r\n          name: 'searchBy',\r\n          type: 'autocompletemui',\r\n          options: selectOptions,\r\n          value: (claimsTabData?.searchBy === '') ?\r\n                 (selectOptions?.find((item) => item?.value === constants.CLAIMS_SEARCH_OPTION_INSURED) || null) :\r\n                 (selectOptions?.find((item) => item?.value === claimsTabData?.searchBy)),\r\n          validation: Yup.object().nullable().required(utils.string.t('validation.required')),\r\n          muiComponentProps: {\r\n            inputProps: {\r\n              title: searchByText || '',\r\n            },\r\n          },\r\n        },\r\n        { name: 'createdDate', type: 'datepicker', value: null }\r\n      ];\r\n\r\n    const defaultValues = utils.form.getInitialValues(viewFields);\r\n    const validationSchema = utils.form.getValidationSchema(viewFields);\r\n\r\n    const { control, setValue } = useForm({\r\n        defaultValues,\r\n        ...(validationSchema && { resolver: yupResolver(validationSchema) }),\r\n      });\r\n\r\n    const tableFilterFields = [\r\n        {\r\n          id: 'claimStage',\r\n          type: 'multiSelect',\r\n          label: utils.string.t('claims.claimsTab.filtercolumns.claimStage'),\r\n          placeholder: utils.string.t('claims.filterPlaceHolderText'),\r\n          value: [],\r\n          options: claimsTabFilterDropDown?.claimStage,\r\n          content: <MultiSelect id=\"claimStage\" search options={claimsTabFilterDropDown?.claimStage} />,\r\n        },\r\n        {\r\n          id: 'lossFromDate',\r\n          type: 'datepicker',\r\n          label: utils.string.t('claims.claimsTab.filtercolumns.lossDateFrom'),\r\n          value: '',\r\n          content: (\r\n            <FormDate\r\n              control={control}\r\n              {...utils.form.getFieldProps(defaultValues, 'lossFromDate')}\r\n              id=\"lossFromDatedatepicker\"\r\n              name=\"lossFromDate\"\r\n              type=\"datepicker\"\r\n              value={''}\r\n              label={''}\r\n              plainText\r\n              plainTextIcon\r\n              placeholder={utils.string.t('app.selectDate')}\r\n              muiComponentProps={{\r\n                fullWidth: false,\r\n                margin: 'dense',\r\n              }}\r\n              muiPickerProps={{\r\n                clearable: false,\r\n                variant: 'inline',\r\n                format: 'DD-MM-YYYY',\r\n              }}\r\n            />\r\n          ),\r\n        },\r\n        {\r\n          id: 'insured',\r\n          type: 'multiSelect',\r\n          label: utils.string.t('claims.claimsTab.filtercolumns.insured'),\r\n          placeholder: utils.string.t('claims.filterPlaceHolderText'),\r\n          value: [],\r\n          options: claimsTabFilterDropDown?.insured,\r\n          content: <MultiSelect id=\"insured\" search options={claimsTabFilterDropDown?.insured} />,\r\n        },\r\n        ...(claimsType === constants.CLAIM_TEAM_TYPE.myTeamClaims\r\n          ? [\r\n              {\r\n                id: 'assignedTo',\r\n                type: 'multiSelect',\r\n                label: utils.string.t('claims.claimsTab.filtercolumns.assignedTo'),\r\n                value: [],\r\n                options: claimsTabFilterDropDown?.assignedTo,\r\n                nestedClasses: { root: classes.fieldWidth },\r\n                content: <MultiSelect id=\"assignedTo\" search options={claimsTabFilterDropDown?.assignedTo} />,\r\n              },\r\n            ]\r\n          : []),\r\n          {\r\n            id: 'lastUpdated',\r\n            type: 'datepicker',\r\n            label: utils.string.t('claims.claimsTab.filtercolumns.lastUpdated'),\r\n            value: '',\r\n            content: (\r\n              <FormDate\r\n                control={control}\r\n                {...utils.form.getFieldProps(defaultValues, 'lastUpdated')}\r\n                id=\"lastUpdateddatepicker\"\r\n                name=\"lastUpdated\"\r\n                type=\"datepicker\"\r\n                value={''}\r\n                label={''}\r\n                plainText\r\n                plainTextIcon\r\n                placeholder={utils.string.t('app.selectDate')}\r\n                muiComponentProps={{\r\n                  fullWidth: false,\r\n                  margin: 'dense',\r\n                }}\r\n                muiPickerProps={{\r\n                  clearable: false,\r\n                  variant: 'inline',\r\n                  format: 'DD-MM-YYYY',\r\n                }}\r\n              />\r\n            ),\r\n          },\r\n        {\r\n          id: 'priority',\r\n          type: 'multiSelect',\r\n          label: utils.string.t('claims.claimsTab.filtercolumns.priority'),\r\n          placeholder: utils.string.t('claims.filterPlaceHolderText'),\r\n          value: [],\r\n          options: claimsTabFilterDropDown?.priority,\r\n          content: <MultiSelect id=\"priority\" search options={claimsTabFilterDropDown?.priority} />,\r\n        },\r\n        {\r\n          id: 'division',\r\n          type: 'multiSelect',\r\n          label: utils.string.t('claims.claimsTab.filtercolumns.division'),\r\n          placeholder: utils.string.t('claims.filterPlaceHolderText'),\r\n          value: [],\r\n          options: claimsTabFilterDropDown?.division,\r\n          content: <MultiSelect id=\"division\" search options={claimsTabFilterDropDown?.division} />,\r\n        }\r\n      ];\r\n\r\n    useEffect(() => {\r\n      if(!claimsTabData?.isClaimsTabLoaded) {\r\n          getClaimsData();\r\n          const claimsData = {...claimsTabData};\r\n          claimsData.isClaimsTabLoaded = true;\r\n          dispatch(getClaimsTabData(claimsData));\r\n        } \r\n        else if (claimsTabData?.isClaimsTabLoaded && (claimsTabData?.view !== claimsType)) {\r\n          getClaimsData();\r\n          const claimsData = {...claimsTabData};\r\n          claimsData.view = claimsType;\r\n          dispatch(getClaimsTabData(claimsData));\r\n        }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [claimsType]);\r\n\r\n    const getClaimsData = () => {\r\n        if (claimsType) {\r\n            setValue('createdDate', null);\r\n      \r\n            // defect - 14469 - Default sorting is not applying on Date &Time created and Priority columns\r\n            // First Time Table Grid load for MyClaims, MyTeamClaims, All Claims passing createdDate and Priority columns from UI.\r\n            if (\r\n              (myClaimsFirstTimeLoad && claimsType === constants.CLAIM_TEAM_TYPE.myClaims) ||\r\n              (myTeamClaimsFirstTimeLoad && claimsType === constants.CLAIM_TEAM_TYPE.myTeamClaims)\r\n            ) {\r\n              if (claimsType === constants.CLAIM_TEAM_TYPE.myClaims) setMyClaimsFirstTimeLoad(!myClaimsFirstTimeLoad);\r\n              if (claimsType === constants.CLAIM_TEAM_TYPE.myTeamClaims) setMyTeamClaimsFirstTimeLoad(!myTeamClaimsFirstTimeLoad);\r\n      \r\n              dispatch(\r\n                getClaimsTabDetails({\r\n                  requestType: searchTypeCall,\r\n                  claimsType,\r\n                  filterTerm: [],\r\n                  searchBy,\r\n                  firstTimeSort: firstTimeSortColumns,\r\n                })\r\n              );\r\n              dispatch(\r\n                getClaimsTabDetails({\r\n                  requestType: filterTypeCall,\r\n                  claimsType,\r\n                  filterTerm: [],\r\n                  searchBy,\r\n                  firstTimeSort: firstTimeSortColumns,\r\n                })\r\n              );\r\n            } else {\r\n              // From second time onwards, table grid load from else part for single column sorting.\r\n              dispatch(\r\n                getClaimsTabDetails({\r\n                  requestType: searchTypeCall,\r\n                  claimsType,\r\n                  filterTerm: [],\r\n                  searchBy\r\n                })\r\n              );\r\n              dispatch(\r\n                getClaimsTabDetails({\r\n                  requestType: filterTypeCall,\r\n                  claimsType,\r\n                  filterTerm: [],\r\n                  searchBy\r\n                })\r\n              );\r\n            }\r\n          }  \r\n    }\r\n    \r\n\r\n    const handleSearch = (queryObject) => {\r\n        setResetKey(new Date().getTime());\r\n        dispatch(resetClaimProcessingFilters());\r\n        setValue('createdDate', null);\r\n        if (queryObject?.search) {\r\n          setSearchTerm(queryObject.search);\r\n          const claimsData = {...claimsTabData};\r\n          claimsData.searchText = queryObject?.search;\r\n          dispatch(getClaimsTabData(claimsData));\r\n          dispatch(\r\n            getClaimsTabDetails({\r\n              requestType: searchTypeCall,\r\n              claimsType,\r\n              term: queryObject.search,\r\n              direction: 'desc',\r\n              searchBy,\r\n            })\r\n          );\r\n          dispatch(\r\n            getClaimsTabDetails({\r\n              requestType: filterTypeCall,\r\n              claimsType,\r\n              term: queryObject.search,\r\n              direction: 'desc',\r\n              searchBy,\r\n              filterTerm: queryObject.filters,\r\n            })\r\n          );\r\n        }\r\n      };\r\n\r\n    const handleResetFilter = () => {\r\n        setValue('createdDate', null);\r\n        dispatch(resetClaimProcessingFilters());\r\n        dispatch(\r\n          getClaimsTabDetails({\r\n            requestType: searchTypeCall,\r\n            claimsType,\r\n            term: searchTerm,\r\n            filterTerm: '',\r\n            direction: 'desc',\r\n            searchBy\r\n          })\r\n        );\r\n        dispatch(\r\n          getClaimsTabDetails({\r\n            requestType: filterTypeCall,\r\n            claimsType,\r\n            term: searchTerm,\r\n            filterTerm: '',\r\n            direction: 'desc',\r\n            searchBy\r\n          })\r\n        );\r\n      };\r\n\r\n    const handleSearchFilter = (data) => {\r\n        dispatch(\r\n          updateClaimProcessingFilters({ claimsType, search: data?.search, filters: data.filters })\r\n        );\r\n        return dispatch(\r\n          getClaimsTabDetails({\r\n            requestType: searchTypeCall,\r\n            claimsType,\r\n            term: data.search,\r\n            filterTerm: data.filters,\r\n            searchBy\r\n          })\r\n        );\r\n      };\r\n\r\n    const handleSort = (by, dir) => {\r\n        dispatch(\r\n          getClaimsTabDetails({\r\n            requestType: searchTypeCall,\r\n            claimsType,\r\n            sortBy: by,\r\n            direction: dir.toUpperCase(),\r\n            term: searchTerm,\r\n            searchBy\r\n          })\r\n        );\r\n      };\r\n\r\n    const handleChangePage = (newPage) => {\r\n        dispatch(\r\n          getClaimsTabDetails({\r\n            requestType: searchTypeCall,\r\n            claimsType,\r\n            page: newPage,\r\n            term: searchTerm,\r\n            searchBy,\r\n          })\r\n        );\r\n      };\r\n\r\n    const handleChangeRowsPerPage = (rowsPerPage) => {\r\n        dispatch(\r\n          getClaimsTabDetails({\r\n            requestType: searchTypeCall,\r\n            claimsType,\r\n            size: rowsPerPage,\r\n            term: searchTerm,\r\n            searchBy\r\n          })\r\n        );\r\n      };\r\n\r\n    const handleResetSearch = () => {\r\n        setResetKey(new Date().getTime());\r\n        dispatch(resetClaimsProcessingSearch());\r\n        dispatch(resetClaimProcessingFilters());\r\n        setValue('createdDate', null);\r\n        dispatch(\r\n          getClaimsTabDetails({ requestType: searchTypeCall, claimsType, filterTerm: [], searchBy})\r\n        );\r\n        dispatch(\r\n          getClaimsTabDetails({\r\n            requestType: filterTypeCall,\r\n            claimsType,\r\n            filterTerm: [],\r\n            searchBy\r\n          })\r\n        );\r\n      };\r\n\r\n    const onSelectSearchBy = (searchByValue, searchByLabel) => {\r\n        setSearchByText(searchByLabel);\r\n        setSearchBy(searchByValue);\r\n        const claimsData = {...claimsTabData};\r\n        claimsData.searchBy = searchByValue;\r\n        dispatch(getClaimsTabData(claimsData));\r\n        dispatch(\r\n          getClaimsTabDetails({\r\n            requestType: searchTypeCall,\r\n            claimsType,\r\n            searchBy: searchByValue,\r\n            term: searchTerm\r\n          })\r\n        );\r\n        dispatch(\r\n          getClaimsTabDetails({\r\n            requestType: filterTypeCall,\r\n            claimsType,\r\n            searchBy: searchByValue,\r\n            term: searchTerm\r\n          })\r\n        );\r\n      };\r\n\r\n    const columns = [\r\n        {\r\n          id: 'claimRef',\r\n          label: utils.string.t('claims.claimsTab.tablecolumns.claimRef'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          narrow: true,\r\n          nowrap: true,\r\n          visible: true,\r\n          mandatory: true,\r\n        },\r\n        {\r\n          id: 'lossRef',\r\n          label: utils.string.t('claims.claimsTab.tablecolumns.lossRef'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          narrow: true,\r\n          nowrap: true,\r\n          visible: true,\r\n          mandatory: true,\r\n        },\r\n        {\r\n          id: 'lossDateFrom',\r\n          label: utils.string.t('claims.claimsTab.tablecolumns.lossDateFrom'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          ellipsis: true,\r\n          visible: true,\r\n        },\r\n        {\r\n          id: 'assured',\r\n          label: utils.string.t('claims.claimsTab.tablecolumns.insured'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          ellipsis: true,\r\n          visible: true,\r\n        },\r\n        {\r\n          id: 'policyRef',\r\n          label: utils.string.t('claims.claimsTab.tablecolumns.policyRef'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          nowrap: true,\r\n          visible: true,\r\n        },\r\n        {\r\n          id: 'division',\r\n          label: utils.string.t('claims.claimsTab.tablecolumns.division'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          nowrap: true,\r\n          visible: true\r\n        },\r\n        {\r\n          id: 'claimStatus',\r\n          label: utils.string.t('claims.claimsTab.tablecolumns.claimStatus'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          nowrap: true,\r\n          visible: true,\r\n        },\r\n        {\r\n          id: 'claimStage',\r\n          label: utils.string.t('claims.claimsTab.tablecolumns.claimStage'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          nowrap: true,\r\n          visible: true,\r\n        },\r\n        {\r\n          id: 'assignedTo',\r\n          label: utils.string.t('claims.claimsTab.tablecolumns.assignedTo'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          visible: true,\r\n          mandatory: true,\r\n          nowrap: true,\r\n        },\r\n        {\r\n          id: 'team',\r\n          label: utils.string.t('claims.claimsTab.tablecolumns.team'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          visible: true,\r\n          mandatory: true,\r\n        },\r\n        {\r\n          id: 'lastUpdated',\r\n          label: utils.string.t('claims.claimsTab.tablecolumns.lastUpdated'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          visible: true,\r\n          mandatory: true,\r\n        },\r\n        {\r\n          id: 'priority',\r\n          label: utils.string.t('claims.claimsTab.tablecolumns.priority'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          nowrap: true,\r\n          visible: true,\r\n        },\r\n        {\r\n          id: 'catCodesID',\r\n          label: utils.string.t('claims.claimsTab.tablecolumns.catCode'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          ellipsis: true\r\n        },\r\n        {\r\n          id: 'claimReceivedDateTime',\r\n          label: utils.string.t('claims.claimsTab.tablecolumns.claimReceivedDateTime'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          narrow: true,\r\n          nowrap: true,\r\n        },\r\n        {\r\n          id: 'createdDate',\r\n          label: utils.string.t('claims.claimsTab.tablecolumns.createdDate'),\r\n          sort: { type: 'date', direction: 'asc' },\r\n          nowrap: true,\r\n          visible: false,\r\n        },\r\n        {\r\n          id: 'closedDate',\r\n          label: utils.string.t('claims.claimsTab.tablecolumns.closedDate'),\r\n          sort: { type: 'date', direction: 'asc' },\r\n          nowrap: true,\r\n        },\r\n        {\r\n          id: 'complexity',\r\n          label: utils.string.t('claims.claimsTab.tablecolumns.complexity'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          visible: false,\r\n        },\r\n        {\r\n          id: 'ucr',\r\n          label: utils.string.t('claims.claimsTab.tablecolumns.ucr'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          nowrap: true,\r\n          visible: false,\r\n        },\r\n        {\r\n          id: 'policyType',\r\n          label: utils.string.t('claims.claimsTab.tablecolumns.policyType'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          nowrap: true,\r\n          visible: false,\r\n        },\r\n        {\r\n          id: 'claimantName',\r\n          label: utils.string.t('claims.claimsTab.tablecolumns.claimant'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          visible: false,\r\n          ellipsis: true,\r\n        },\r\n        {\r\n          id: 'reinsured',\r\n          label: utils.string.t('claims.claimsTab.tablecolumns.reinsured'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          nowrap: true,\r\n          visible: false\r\n        },\r\n        {\r\n          id: 'client',\r\n          label: utils.string.t('claims.claimsTab.tablecolumns.client'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n        },\r\n        {\r\n          id: 'interest',\r\n          label: utils.string.t('claims.claimsTab.tablecolumns.interest'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          nowrap: true,\r\n          visible: false,\r\n        },\r\n        {\r\n          id: 'createdBy',\r\n          label: utils.string.t('claims.claimsTab.tablecolumns.createdBy'),\r\n          sort: { type: 'numeric', direction: 'asc' },\r\n          nowrap: true,\r\n          visible: false,\r\n        },\r\n        {\r\n          id: 'company',\r\n          label: utils.string.t('claims.claimsTab.tablecolumns.company'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n        },\r\n        {\r\n          id: 'coverholder',\r\n          label: utils.string.t('claims.claimsTab.tablecolumns.coverholder'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          nowrap: true,\r\n          visible: false,\r\n        },\r\n        {\r\n          id: 'lossToDate',\r\n          label: utils.string.t('claims.claimsTab.tablecolumns.lossDateTo'),\r\n          sort: { type: 'date', direction: 'asc' },\r\n          nowrap: true,\r\n        },\r\n        {\r\n          id: 'lossDateQualifier',\r\n          label: utils.string.t('claims.claimsTab.tablecolumns.lossDateQualifier'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          nowrap: true,\r\n        },\r\n        {\r\n          id: 'lossDetails',\r\n          label: utils.string.t('claims.claimsTab.tablecolumns.lossDetails'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          nowrap: true,\r\n          ellipsis: true,\r\n        },\r\n        {\r\n          id: 'pasClaimRef',\r\n          label: utils.string.t('claims.claimsTab.tablecolumns.pasClaimRef'),\r\n          sort: { type: 'numeric', direction: 'asc' },\r\n          nowrap: true,\r\n        },\r\n    \r\n        {\r\n          id: 'pasStatus',\r\n          label: utils.string.t('claims.claimsTab.tablecolumns.pasStatus'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          nowrap: true,\r\n        }\r\n      ];\r\n\r\n    const { columns: columnsArray, columnProps, toggleColumn } = useFlexiColumns(columns);\r\n\r\n    return (\r\n        <ClaimsTabView \r\n            claims={claimsTabTableRowDetails}\r\n            searchTerm = {claimsTabData?.searchText || ''}\r\n            sort={{\r\n              ...claimsTabData?.tableDetails?.sort,\r\n            }}\r\n            columnsArray={columnsArray}\r\n            columnProps={columnProps}\r\n            viewFields={viewFields}\r\n            tableFilterFields={tableFilterFields}\r\n            isFetchingFilters={isFetchingFilters}\r\n            claimsType={'myClaims'}\r\n            control={control}\r\n            resetKey={resetKey}\r\n            handlers={{\r\n              search: handleSearch,\r\n              searchFilter: handleSearchFilter,\r\n              resetFilter: handleResetFilter,\r\n              sort: handleSort,\r\n              changePage: handleChangePage,\r\n              changeRowsPerPage: handleChangeRowsPerPage,\r\n              toggleColumn,\r\n              resetSearch: handleResetSearch,\r\n              onSelectSearchBy\r\n            }}\r\n        />\r\n    );\r\n};"]},"metadata":{},"sourceType":"module"}