{"ast":null,"code":"import _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\pages\\\\DmsDocViewer\\\\DmsDocViewer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router';\nimport { Helmet } from 'react-helmet'; // app\n\nimport { DmsDocViewerView } from './DmsDocViewer.view';\nimport { viewDocumentsDownload, setDmsDocViewerState, viewDmsFileCheckDownload, enqueueNotification } from 'stores';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function DmsDocViewer() {\n  _s();\n\n  var dispatch = useDispatch();\n  var docViewParams = useParams();\n  var brand = useSelector(function (state) {\n    return state.ui.brand;\n  });\n  var dmsDocViewerData = {\n    documentId: docViewParams === null || docViewParams === void 0 ? void 0 : docViewParams.id,\n    documentName: docViewParams === null || docViewParams === void 0 ? void 0 : docViewParams.name\n  };\n\n  var _useState = useState({\n    url: '',\n    ext: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      fileProps = _useState2[0],\n      setFileProps = _useState2[1];\n\n  useEffect(function () {\n    if (dmsDocViewerData === null || dmsDocViewerData === void 0 ? void 0 : dmsDocViewerData.documentId) {\n      fetchDmsDocViewContent(dmsDocViewerData);\n    } // cleanup\n\n\n    return function () {\n      dispatch(setDmsDocViewerState(false));\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var analyzeFormat = function analyzeFormat(documentName) {\n    var currentFileExt = utils.file.getFileExtensionFromFilename(documentName);\n    return {\n      isUnSupported: utils.dms.checkDmsDocumentViewForbidden(currentFileExt),\n      isMsOfficeType: utils.dms.checkIsMsOfficeType(currentFileExt)\n    };\n  };\n\n  var fetchDmsDocViewContent = function fetchDmsDocViewContent(dmsDocViewerData) {\n    var documentId = dmsDocViewerData.documentId,\n        documentName = dmsDocViewerData.documentName;\n    dispatch(setDmsDocViewerState(true));\n\n    var _analyzeFormat = analyzeFormat(documentName),\n        isUnSupported = _analyzeFormat.isUnSupported;\n\n    getDocToRender(documentId, documentName, isUnSupported);\n  };\n\n  var getDocToRender = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(documentId, documentName, isUnSupported) {\n      var downloadable;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return dispatch(viewDmsFileCheckDownload({\n                documentId: documentId,\n                documentName: documentName\n              }));\n\n            case 2:\n              downloadable = _context.sent;\n\n              if (downloadable) {\n                if (!isUnSupported) {\n                  dispatch(viewDocumentsDownload({\n                    documentId: documentId,\n                    documentName: documentName\n                  }, true)).then(function (_ref2) {\n                    var url = _ref2.url,\n                        ext = _ref2.ext,\n                        mimeType = _ref2.mimeType;\n                    setFileProps({\n                      url: url,\n                      ext: ext,\n                      mimeType: mimeType,\n                      isUnSupported: isUnSupported,\n                      isFetchable: true\n                    });\n                  });\n                } else {\n                  dispatch(viewDocumentsDownload({\n                    documentId: documentId,\n                    documentName: documentName\n                  })).then(function () {\n                    setFileProps({\n                      isUnSupported: isUnSupported,\n                      isFetchable: true\n                    });\n                  });\n                }\n              } else {\n                dispatch(enqueueNotification(utils.string.t('dms.fileDownload.fileNotFound'), 'error'));\n                setFileProps({\n                  isUnSupported: true,\n                  isFetchable: false\n                });\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getDocToRender(_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"\".concat(utils.string.t('dms.docViewer.title'), \" - \").concat(utils.app.getAppName(brand))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DmsDocViewerView, {\n      fileProps: fileProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(DmsDocViewer, \"tkTxTz87KMSWd1l5Gv/dDtTyXRE=\", false, function () {\n  return [useDispatch, useParams, useSelector];\n});\n\n_c = DmsDocViewer;\n\nvar _c;\n\n$RefreshReg$(_c, \"DmsDocViewer\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/pages/DmsDocViewer/DmsDocViewer.js"],"names":["React","useState","useEffect","useDispatch","useSelector","useParams","Helmet","DmsDocViewerView","viewDocumentsDownload","setDmsDocViewerState","viewDmsFileCheckDownload","enqueueNotification","utils","DmsDocViewer","dispatch","docViewParams","brand","state","ui","dmsDocViewerData","documentId","id","documentName","name","url","ext","fileProps","setFileProps","fetchDmsDocViewContent","analyzeFormat","currentFileExt","file","getFileExtensionFromFilename","isUnSupported","dms","checkDmsDocumentViewForbidden","isMsOfficeType","checkIsMsOfficeType","getDocToRender","downloadable","then","mimeType","isFetchable","string","t","app","getAppName"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router';\r\nimport { Helmet } from 'react-helmet';\r\n\r\n// app\r\nimport { DmsDocViewerView } from './DmsDocViewer.view';\r\nimport { viewDocumentsDownload, setDmsDocViewerState, viewDmsFileCheckDownload, enqueueNotification } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport default function DmsDocViewer() {\r\n  const dispatch = useDispatch();\r\n  const docViewParams = useParams();\r\n\r\n  const brand = useSelector((state) => state.ui.brand);\r\n\r\n  const dmsDocViewerData = { documentId: docViewParams?.id, documentName: docViewParams?.name };\r\n\r\n  const [fileProps, setFileProps] = useState({ url: '', ext: '' });\r\n\r\n  useEffect(() => {\r\n    if (dmsDocViewerData?.documentId) {\r\n      fetchDmsDocViewContent(dmsDocViewerData);\r\n    }\r\n\r\n    // cleanup\r\n    return () => {\r\n      dispatch(setDmsDocViewerState(false));\r\n    };\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const analyzeFormat = (documentName) => {\r\n    const currentFileExt = utils.file.getFileExtensionFromFilename(documentName);\r\n    return {\r\n      isUnSupported: utils.dms.checkDmsDocumentViewForbidden(currentFileExt),\r\n      isMsOfficeType: utils.dms.checkIsMsOfficeType(currentFileExt),\r\n    };\r\n  };\r\n\r\n  const fetchDmsDocViewContent = (dmsDocViewerData) => {\r\n    const { documentId, documentName } = dmsDocViewerData;\r\n    dispatch(setDmsDocViewerState(true));\r\n    const { isUnSupported } = analyzeFormat(documentName);\r\n    getDocToRender(documentId, documentName, isUnSupported);\r\n  };\r\n\r\n  const getDocToRender = async (documentId, documentName, isUnSupported) => {\r\n    const downloadable = await dispatch(viewDmsFileCheckDownload({ documentId, documentName }));\r\n    if (downloadable) {\r\n      if (!isUnSupported) {\r\n        dispatch(viewDocumentsDownload({ documentId, documentName }, true)).then(({ url, ext, mimeType }) => {\r\n          setFileProps({ url, ext, mimeType, isUnSupported, isFetchable: true });\r\n        });\r\n      } else {\r\n        dispatch(viewDocumentsDownload({ documentId, documentName })).then(() => {\r\n          setFileProps({ isUnSupported, isFetchable: true });\r\n        });\r\n      }\r\n    } else {\r\n      dispatch(enqueueNotification(utils.string.t('dms.fileDownload.fileNotFound'), 'error'));\r\n      setFileProps({ isUnSupported: true, isFetchable: false });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>{`${utils.string.t('dms.docViewer.title')} - ${utils.app.getAppName(brand)}`}</title>\r\n      </Helmet>\r\n      <DmsDocViewerView fileProps={fileProps} />\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}