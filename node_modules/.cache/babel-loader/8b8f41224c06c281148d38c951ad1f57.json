{"ast":null,"code":"import _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\forms\\\\DmsUpload\\\\DmsUpload.view.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, Fragment, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux'; // app\n\nimport useDmsUpload from './useDmsUpload';\nimport styles from './DmsUpload.styles';\nimport { Button, FormContainer, FormActions, FormText, Accordion, PopoverMenu, FormFields, TableHead, TableCell, FormGrid, Info, Warning, Loader, FormDate, FormSelect, FormAutocompleteMui, FormLabel } from 'components';\nimport * as utils from 'utils';\nimport { resetFilesUploaded, getViewTableDocuments, selectCaseDetails } from 'stores';\nimport * as constants from 'consts';\nimport config from 'config'; // mui\n\nimport { Table, TableBody, TableRow, Box, Typography, makeStyles, Collapse } from '@material-ui/core';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nDmsUploadView.propTypes = {\n  context: PropTypes.string.isRequired,\n  referenceId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  sourceId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  documentTypeKey: PropTypes.oneOf([constants.DMS_DOCUMENT_TYPE_SECTION_KEYS]),\n  searchParamsAfterUpload: PropTypes.shape({\n    referenceId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n    sectionType: PropTypes.string.isRequired\n  }),\n  postDmsDocumentsSuccess: PropTypes.func\n};\nDmsUploadView.defaultProps = {\n  documentTypeKey: constants.DMS_DOCUMENT_TYPE_SECTION_KEYS.type.policy,\n  postDmsDocumentsSuccess: function postDmsDocumentsSuccess() {}\n};\nexport default function DmsUploadView(_ref) {\n  _s();\n\n  var _this = this;\n\n  var context = _ref.context,\n      referenceId = _ref.referenceId,\n      sourceId = _ref.sourceId,\n      documentTypeKey = _ref.documentTypeKey,\n      searchParamsAfterUpload = _ref.searchParamsAfterUpload,\n      postDmsDocumentsSuccess = _ref.postDmsDocumentsSuccess;\n\n  var _useDmsUpload = useDmsUpload(documentTypeKey, sourceId, referenceId, postDmsDocumentsSuccess),\n      getFileKey = _useDmsUpload.getFileKey,\n      fieldsArray = _useDmsUpload.fieldsArray,\n      control = _useDmsUpload.control,\n      handleRemoveFiles = _useDmsUpload.handleRemoveFiles,\n      cols = _useDmsUpload.cols,\n      commonInfo = _useDmsUpload.commonInfo,\n      lossInfo = _useDmsUpload.lossInfo,\n      claimInfo = _useDmsUpload.claimInfo,\n      policyInfo = _useDmsUpload.policyInfo,\n      handleSubmit = _useDmsUpload.handleSubmit,\n      handleSubmitUpload = _useDmsUpload.handleSubmitUpload,\n      isPending = _useDmsUpload.isPending,\n      isFulfilled = _useDmsUpload.isFulfilled,\n      isRejected = _useDmsUpload.isRejected,\n      getIcons = _useDmsUpload.getIcons,\n      dmsContext = _useDmsUpload.dmsContext,\n      handleCancel = _useDmsUpload.handleCancel,\n      documentTypes = _useDmsUpload.documentTypes,\n      handleSelectedItem = _useDmsUpload.handleSelectedItem,\n      documentDto = _useDmsUpload.documentDto,\n      register = _useDmsUpload.register,\n      getValues = _useDmsUpload.getValues,\n      formState = _useDmsUpload.formState,\n      duplicateIndex = _useDmsUpload.duplicateIndex,\n      handleSelectDocClassification = _useDmsUpload.handleSelectDocClassification,\n      docClassificationTypes = _useDmsUpload.docClassificationTypes,\n      indexDocTypeUnfilled = _useDmsUpload.indexDocTypeUnfilled,\n      setValue = _useDmsUpload.setValue,\n      currencies = _useDmsUpload.currencies,\n      handleInputChange = _useDmsUpload.handleInputChange,\n      resetPostStatus = _useDmsUpload.resetPostStatus,\n      handleSingleFileSubmission = _useDmsUpload.handleSingleFileSubmission,\n      isActionDispatched = _useDmsUpload.isActionDispatched,\n      postSubmissionRowIndex = _useDmsUpload.postSubmissionRowIndex,\n      handleResetFilter = _useDmsUpload.handleResetFilter,\n      refDocumentDto = _useDmsUpload.refDocumentDto,\n      isDmsFromPi = _useDmsUpload.isDmsFromPi,\n      isMetaDataLoaded = _useDmsUpload.isMetaDataLoaded;\n\n  var classes = makeStyles(styles, {\n    name: 'DmsUpload'\n  })();\n  var dispatch = useDispatch();\n  var isDmsFromPiInstruction = utils.dmsFormatter.isDmsFromPiInstruction(documentTypeKey);\n  var ppCaseDetails = useSelector(selectCaseDetails);\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      folderName = _useState2[0],\n      setFolderName = _useState2[1];\n\n  var handleGetList = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(formValues) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return handleSubmitUpload(formValues);\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleGetList(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // Premium Processing Case Details\n\n\n  var policyRef = ppCaseDetails === null || ppCaseDetails === void 0 ? void 0 : ppCaseDetails.policyRef;\n  var instructionId = ppCaseDetails === null || ppCaseDetails === void 0 ? void 0 : ppCaseDetails.instructionId;\n  useEffect(function () {\n    return function () {\n      dispatch(resetFilesUploaded());\n      dispatch(resetPostStatus());\n\n      if (!isDmsFromPiInstruction) {\n        dispatch(getViewTableDocuments(_objectSpread({}, searchParamsAfterUpload ? searchParamsAfterUpload : _objectSpread({\n          referenceId: referenceId,\n          sectionType: context,\n          documentTypeKey: documentTypeKey\n        }, policyRef && instructionId && {\n          policyRef: policyRef,\n          instructionId: instructionId\n        }))));\n      }\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  var documentTypesItems = folderName !== null ? documentTypes === null || documentTypes === void 0 ? void 0 : documentTypes.filter(function (selectedItem) {\n    return (selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.folderName) === folderName;\n  }) : documentTypes;\n\n  var folderTypesItems = _toConsumableArray(new Set(documentTypes === null || documentTypes === void 0 ? void 0 : documentTypes.filter(function (type) {\n    return (type === null || type === void 0 ? void 0 : type.folderName) !== null;\n  }).map(function (type) {\n    return type === null || type === void 0 ? void 0 : type.folderName;\n  }))).sort().map(function (name) {\n    return {\n      id: name,\n      label: name\n    };\n  });\n\n  var filterDocumentType = function filterDocumentType(event, value) {\n    if (value === null) {\n      setFolderName(null);\n      handleResetFilter();\n    } else {\n      handleResetFilter();\n      setFolderName(value === null || value === void 0 ? void 0 : value.label);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(FormContainer, {\n    type: \"dialog\",\n    onSubmit: handleSubmit(handleGetList),\n    children: [/*#__PURE__*/_jsxDEV(FormFields, {\n      type: \"dialog\",\n      children: [!isDmsFromPi && /*#__PURE__*/_jsxDEV(Box, {\n        mx: 1,\n        children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n          className: classes.selectText,\n          label: utils.string.t('dms.upload.modalItems.selectFolder')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          className: classes.formAuto,\n          children: /*#__PURE__*/_jsxDEV(FormAutocompleteMui, {\n            options: folderTypesItems,\n            defaultValue: null,\n            optionKey: \"id\",\n            optionLabel: \"label\",\n            callback: function callback(event, value) {\n              return filterDocumentType(event, value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mx: 1,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          className: classes.subTitle,\n          children: \"\".concat(fieldsArray === null || fieldsArray === void 0 ? void 0 : fieldsArray.length, \" \").concat(utils.string.t('dms.upload.modalItems.uploads'))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          columns: cols\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: fieldsArray === null || fieldsArray === void 0 ? void 0 : fieldsArray.map(function (_ref3, index) {\n            var _getValues, _documentDto$index, _getValues2, _documentDto$index2, _documentDto$index3, _documentDto$index4, _documentDto$index5, _documentDto$index6, _getValues3;\n\n            var file = _ref3.file,\n                name = _ref3.name,\n                type = _ref3.type;\n            return /*#__PURE__*/_jsxDEV(Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(TableRow, {\n                className: classes.root,\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  className: classes.cellWidth,\n                  children: [/*#__PURE__*/_jsxDEV(FormText, {\n                    control: control,\n                    type: \"textarea\",\n                    name: \"files\".concat(index, \"name\"),\n                    defaultValue: name,\n                    errors: formState.errors,\n                    muiComponentProps: {\n                      onChange: handleInputChange(\"files\".concat(index, \"name\"), index),\n                      size: 'small',\n                      multiline: true,\n                      rows: 1,\n                      rowsMax: 6\n                    },\n                    compact: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 189,\n                    columnNumber: 23\n                  }, _this), (\"files\".concat(duplicateIndex, \"name\").includes(index) || formState.errors[\"files\".concat(index, \"name\")]) && /*#__PURE__*/_jsxDEV(Warning, {\n                    text: \"files\".concat(duplicateIndex, \"name\").includes(index) ? utils.string.t('dms.upload.warning.duplicateDocumentWarning') : formState.errors[\"files\".concat(index, \"name\")].message,\n                    type: \"error\",\n                    size: \"small\",\n                    align: \"left\",\n                    icon: ErrorOutlineIcon\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 206,\n                    columnNumber: 25\n                  }, _this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 188,\n                  columnNumber: 21\n                }, _this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  className: classes.cellWidth,\n                  children: [/*#__PURE__*/_jsxDEV(PopoverMenu, _objectSpread(_objectSpread({}, register(\"files\".concat(index))), {}, {\n                    text: ((_getValues = getValues(\"files\".concat(index))) === null || _getValues === void 0 ? void 0 : _getValues.documentTypeDescription) || utils.string.t('dms.upload.modalItems.selectDocumentType'),\n                    size: \"small\",\n                    id: \"files\".concat(index),\n                    icon: ArrowDropDownIcon,\n                    iconPosition: \"right\",\n                    anchorOrigin: {\n                      vertical: 'bottom',\n                      horizontal: 'left'\n                    },\n                    transformOrigin: {\n                      vertical: 'top',\n                      horizontal: 'center'\n                    },\n                    items: documentTypesItems.map(function (selectedItem, i) {\n                      return {\n                        id: i,\n                        label: selectedItem.documentTypeDescription,\n                        callback: function callback() {\n                          return handleSelectedItem(selectedItem, index);\n                        }\n                      };\n                    })\n                  }), void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 220,\n                    columnNumber: 23\n                  }, _this), indexDocTypeUnfilled.includes(index) && !((_documentDto$index = documentDto[index]) === null || _documentDto$index === void 0 ? void 0 : _documentDto$index.documentUploaded) && isActionDispatched && /*#__PURE__*/_jsxDEV(Warning, {\n                    text: utils.string.t('dms.upload.warning.emptyDocumentType'),\n                    type: \"error\",\n                    size: \"small\",\n                    align: \"left\",\n                    icon: ErrorOutlineIcon\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 244,\n                    columnNumber: 25\n                  }, _this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 219,\n                  columnNumber: 21\n                }, _this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  className: classes.cellWidth,\n                  children: /*#__PURE__*/_jsxDEV(PopoverMenu, _objectSpread(_objectSpread({}, register(\"filesClassification\".concat(index))), {}, {\n                    text: ((_getValues2 = getValues(\"filesClassification\".concat(index))) === null || _getValues2 === void 0 ? void 0 : _getValues2.value) || utils.string.t('dms.upload.modalItems.classificationType.high'),\n                    size: \"small\",\n                    id: \"filesClassification\".concat(index),\n                    icon: ArrowDropDownIcon,\n                    iconPosition: \"right\",\n                    disabled: false,\n                    anchorOrigin: {\n                      vertical: 'bottom',\n                      horizontal: 'left'\n                    },\n                    transformOrigin: {\n                      vertical: 'top',\n                      horizontal: 'center'\n                    },\n                    items: docClassificationTypes.map(function (selectedItem, i) {\n                      return {\n                        id: i,\n                        label: selectedItem.value,\n                        callback: function callback() {\n                          return handleSelectDocClassification(selectedItem, index);\n                        }\n                      };\n                    })\n                  }), void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 254,\n                    columnNumber: 23\n                  }, _this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 253,\n                  columnNumber: 21\n                }, _this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  className: classes.cellWidth,\n                  children: /*#__PURE__*/_jsxDEV(PopoverMenu, {\n                    text: utils.string.t('dms.upload.modalItems.addTag'),\n                    size: \"small\",\n                    id: \"document-tags\",\n                    icon: ArrowDropDownIcon,\n                    iconPosition: \"right\",\n                    disabled: false,\n                    anchorOrigin: {\n                      vertical: 'bottom',\n                      horizontal: 'left'\n                    },\n                    transformOrigin: {\n                      vertical: 'top',\n                      horizontal: 'center'\n                    },\n                    items: []\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 280,\n                    columnNumber: 23\n                  }, _this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 279,\n                  columnNumber: 21\n                }, _this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  className: classes.cellWidth,\n                  children: [!isPending && /*#__PURE__*/_jsxDEV(Button, {\n                    icon: getIcons(isFulfilled, isRejected, (_documentDto$index2 = documentDto[index]) === null || _documentDto$index2 === void 0 ? void 0 : _documentDto$index2.documentUploaded),\n                    variant: \"text\",\n                    danger: isRejected || isFulfilled && !((_documentDto$index3 = documentDto[index]) === null || _documentDto$index3 === void 0 ? void 0 : _documentDto$index3.documentUploaded),\n                    nestedClasses: {\n                      btn: isFulfilled && ((_documentDto$index4 = documentDto[index]) === null || _documentDto$index4 === void 0 ? void 0 : _documentDto$index4.documentUploaded) ? classes.iconSuccess : ''\n                    },\n                    size: \"small\",\n                    onClick: handleRemoveFiles(name)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 300,\n                    columnNumber: 25\n                  }, _this), isFulfilled && !((_documentDto$index5 = documentDto[index]) === null || _documentDto$index5 === void 0 ? void 0 : _documentDto$index5.documentUploaded) && /*#__PURE__*/_jsxDEV(Button, {\n                    text: utils.string.t('dms.upload.modalItems.retryUpload'),\n                    variant: \"text\",\n                    size: \"small\",\n                    color: \"secondary\",\n                    nestedClasses: {\n                      btn: classes.btnRetry\n                    },\n                    onClick: function onClick() {\n                      return handleGetList(handleSingleFileSubmission(index));\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 312,\n                    columnNumber: 25\n                  }, _this), /*#__PURE__*/_jsxDEV(Loader, {\n                    visible: isPending && !Boolean(documentDto.length) || isPending && \"files\".concat(index, \"name\").includes(postSubmissionRowIndex),\n                    inline: isPending && !((_documentDto$index6 = documentDto[index]) === null || _documentDto$index6 === void 0 ? void 0 : _documentDto$index6.documentUploaded) || isPending && \"files\".concat(index, \"name\").includes(postSubmissionRowIndex)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 321,\n                    columnNumber: 23\n                  }, _this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 298,\n                  columnNumber: 21\n                }, _this)]\n              }, getFileKey(file), true, {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 19\n              }, _this), /*#__PURE__*/_jsxDEV(TableRow, {\n                children: /*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    paddingBottom: 0,\n                    paddingTop: 0\n                  },\n                  colSpan: 6,\n                  children: /*#__PURE__*/_jsxDEV(Collapse, {\n                    in: ((_getValues3 = getValues(\"files\".concat(index))) === null || _getValues3 === void 0 ? void 0 : _getValues3.documentTypeDescription) === constants.DMS_DOCUMENT_TYPE_PAYMENT,\n                    timeout: \"auto\",\n                    children: /*#__PURE__*/_jsxDEV(Box, {\n                      my: 2,\n                      children: /*#__PURE__*/_jsxDEV(FormGrid, {\n                        container: true,\n                        spacing: 2,\n                        children: [/*#__PURE__*/_jsxDEV(FormGrid, {\n                          item: true,\n                          xs: 12,\n                          sm: 2,\n                          md: 2,\n                          children: /*#__PURE__*/_jsxDEV(FormDate, _objectSpread(_objectSpread({\n                            control: control\n                          }, register(\"\".concat(constants.DMS_DOCUMENT_TYPE_PAYMENT, \"[\").concat(index, \"].Payment date\"))), {}, {\n                            label: utils.string.t('dms.upload.paymentDetails.paymentDate'),\n                            name: \"\".concat(constants.DMS_DOCUMENT_TYPE_PAYMENT, \"[\").concat(index, \"].Payment date\"),\n                            value: getValues(\"\".concat(constants.DMS_DOCUMENT_TYPE_PAYMENT, \"[\").concat(index, \"].Payment date\")),\n                            type: \"datepicker\",\n                            defaultValue: null,\n                            handleUpdate: function handleUpdate(name, value) {\n                              return setValue(\"\".concat(constants.DMS_DOCUMENT_TYPE_PAYMENT, \"[\").concat(index, \"].Payment date\"), value);\n                            },\n                            outputFormat: \"iso\",\n                            muiComponentProps: {\n                              classes: {\n                                root: classes.datepicker\n                              }\n                            }\n                          }), void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 341,\n                            columnNumber: 31\n                          }, _this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 340,\n                          columnNumber: 29\n                        }, _this), /*#__PURE__*/_jsxDEV(FormGrid, {\n                          item: true,\n                          xs: 12,\n                          sm: 2,\n                          md: 2,\n                          children: /*#__PURE__*/_jsxDEV(FormText, _objectSpread(_objectSpread({\n                            control: control\n                          }, register(\"\".concat(constants.DMS_DOCUMENT_TYPE_PAYMENT, \"[\").concat(index, \"].Payment Reference\"))), {}, {\n                            label: utils.string.t('dms.upload.paymentDetails.enterReference'),\n                            value: getValues(\"\".concat(constants.DMS_DOCUMENT_TYPE_PAYMENT, \"[\").concat(index, \"].Payment Reference\")),\n                            name: \"\".concat(constants.DMS_DOCUMENT_TYPE_PAYMENT, \"[\").concat(index, \"].Payment Reference\"),\n                            defaultValue: \"\"\n                          }), void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 361,\n                            columnNumber: 31\n                          }, _this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 360,\n                          columnNumber: 29\n                        }, _this), /*#__PURE__*/_jsxDEV(FormGrid, {\n                          item: true,\n                          xs: 12,\n                          sm: 2,\n                          md: 2,\n                          children: /*#__PURE__*/_jsxDEV(FormText, _objectSpread(_objectSpread({\n                            control: control\n                          }, register(\"\".concat(constants.DMS_DOCUMENT_TYPE_PAYMENT, \"[\").concat(index, \"].Loss Payee\"))), {}, {\n                            value: getValues(\"\".concat(constants.DMS_DOCUMENT_TYPE_PAYMENT, \"[\").concat(index, \"].Loss Payee\")),\n                            name: \"\".concat(constants.DMS_DOCUMENT_TYPE_PAYMENT, \"[\").concat(index, \"].Loss Payee\"),\n                            label: utils.string.t('dms.upload.paymentDetails.enterName'),\n                            defaultValue: \"\"\n                          }), void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 371,\n                            columnNumber: 31\n                          }, _this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 370,\n                          columnNumber: 29\n                        }, _this), /*#__PURE__*/_jsxDEV(FormGrid, {\n                          item: true,\n                          xs: 12,\n                          sm: 2,\n                          md: 2,\n                          children: /*#__PURE__*/_jsxDEV(FormText, _objectSpread({\n                            type: \"number\",\n                            control: control,\n                            value: getValues(\"\".concat(constants.DMS_DOCUMENT_TYPE_PAYMENT, \"[\").concat(index, \"].Amount\")),\n                            name: \"\".concat(constants.DMS_DOCUMENT_TYPE_PAYMENT, \"[\").concat(index, \"].Amount\"),\n                            label: utils.string.t('dms.upload.paymentDetails.enterAmount'),\n                            defaultValue: \"\"\n                          }, register(\"\".concat(constants.DMS_DOCUMENT_TYPE_PAYMENT, \"[\").concat(index, \"].Amount\"))), void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 381,\n                            columnNumber: 31\n                          }, _this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 380,\n                          columnNumber: 29\n                        }, _this), /*#__PURE__*/_jsxDEV(FormGrid, {\n                          item: true,\n                          xs: 12,\n                          sm: 2,\n                          md: 2,\n                          children: /*#__PURE__*/_jsxDEV(FormSelect, _objectSpread(_objectSpread({\n                            control: control\n                          }, register(\"\".concat(constants.DMS_DOCUMENT_TYPE_PAYMENT, \"[\").concat(index, \"].Currency\"))), {}, {\n                            label: utils.string.t('dms.upload.paymentDetails.selectCurrency'),\n                            name: \"\".concat(constants.DMS_DOCUMENT_TYPE_PAYMENT, \"[\").concat(index, \"].Currency\"),\n                            options: currencies,\n                            optionKey: \"id\",\n                            optionLabel: \"name\",\n                            defaultValue: \"\",\n                            handleUpdate: function handleUpdate(name, value) {\n                              return setValue(\"\".concat(constants.DMS_DOCUMENT_TYPE_PAYMENT, \"[\").concat(index, \"].Currency\"), value);\n                            }\n                          }), void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 392,\n                            columnNumber: 31\n                          }, _this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 391,\n                          columnNumber: 29\n                        }, _this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 339,\n                        columnNumber: 27\n                      }, _this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 338,\n                      columnNumber: 25\n                    }, _this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 334,\n                    columnNumber: 23\n                  }, _this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 333,\n                  columnNumber: 21\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 332,\n                columnNumber: 19\n              }, _this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 17\n            }, _this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Accordion, {\n        title: /*#__PURE__*/_jsxDEV(Typography, {\n          children: utils.string.t('dms.upload.modalItems.viewData')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 27\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          width: \"100%\",\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            className: classes.boxView,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              className: classes.subTitle,\n              children: utils.string.t('dms.upload.commonInfoSection.commonInfo')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 417,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormGrid, {\n              container: true,\n              spacing: 3,\n              children: [commonInfo === null || commonInfo === void 0 ? void 0 : commonInfo.map(function (_ref4) {\n                var name = _ref4.name,\n                    value = _ref4.value,\n                    id = _ref4.id;\n                return /*#__PURE__*/_jsxDEV(FormGrid, {\n                  item: true,\n                  xs: 12,\n                  sm: 4,\n                  md: 3,\n                  children: /*#__PURE__*/_jsxDEV(Info, {\n                    title: name,\n                    description: value,\n                    nestedClasses: {\n                      root: classes.info\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 421,\n                    columnNumber: 21\n                  }, _this)\n                }, id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 420,\n                  columnNumber: 19\n                }, _this);\n              }), isFulfilled && formState.isSubmitSuccessful && (refDocumentDto === null || refDocumentDto === void 0 ? void 0 : refDocumentDto.map(function (doc, i) {\n                return /*#__PURE__*/_jsxDEV(Fragment, {\n                  children: doc.documentUploaded && /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(FormGrid, {\n                      item: true,\n                      xs: 12,\n                      sm: 4,\n                      md: 3,\n                      children: /*#__PURE__*/_jsxDEV(Info, {\n                        title: utils.string.t('dms.upload.commonUploadInfoSection.documentCreatedOn'),\n                        description: \"\".concat(utils.string.t('format.date', {\n                          value: {\n                            date: doc.createdDate,\n                            format: config.ui.format.date.text\n                          }\n                        })),\n                        nestedClasses: {\n                          root: classes.info\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 431,\n                        columnNumber: 29\n                      }, _this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 430,\n                      columnNumber: 27\n                    }, _this), /*#__PURE__*/_jsxDEV(FormGrid, {\n                      item: true,\n                      xs: 12,\n                      sm: 4,\n                      md: 3,\n                      children: /*#__PURE__*/_jsxDEV(Info, {\n                        title: utils.string.t('dms.upload.commonUploadInfoSection.documentVersion'),\n                        description: doc.documentVersion,\n                        nestedClasses: {\n                          root: classes.info\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 440,\n                        columnNumber: 29\n                      }, _this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 439,\n                      columnNumber: 27\n                    }, _this), /*#__PURE__*/_jsxDEV(FormGrid, {\n                      item: true,\n                      xs: 12,\n                      sm: 4,\n                      md: 3,\n                      children: /*#__PURE__*/_jsxDEV(Info, {\n                        title: utils.string.t('dms.upload.commonUploadInfoSection.documentUploadedBy'),\n                        description: doc.createdByName,\n                        nestedClasses: {\n                          root: classes.info\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 447,\n                        columnNumber: 29\n                      }, _this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 446,\n                      columnNumber: 27\n                    }, _this), /*#__PURE__*/_jsxDEV(FormGrid, {\n                      item: true,\n                      xs: 12,\n                      sm: 4,\n                      md: 3,\n                      children: /*#__PURE__*/_jsxDEV(Info, {\n                        title: utils.string.t('dms.upload.commonUploadInfoSection.documentModifiedOn'),\n                        description: \"\".concat(utils.string.t('format.date', {\n                          value: {\n                            date: doc.fileLastModifiedDate,\n                            format: config.ui.format.date.text\n                          }\n                        })),\n                        nestedClasses: {\n                          root: classes.info\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 454,\n                        columnNumber: 29\n                      }, _this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 453,\n                      columnNumber: 27\n                    }, _this)]\n                  }, void 0, true)\n                }, i, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 427,\n                  columnNumber: 21\n                }, _this);\n              }))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 418,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 13\n          }, this), dmsContext === constants.DMS_CONTEXT_CLAIM && /*#__PURE__*/_jsxDEV(Box, {\n            className: classes.boxView,\n            mt: 2,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              className: classes.subTitle,\n              children: utils.string.t('dms.upload.claimInfoSection.claimDetails')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 470,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(FormGrid, {\n              container: true,\n              spacing: 3,\n              children: claimInfo === null || claimInfo === void 0 ? void 0 : claimInfo.map(function (_ref5) {\n                var name = _ref5.name,\n                    value = _ref5.value,\n                    id = _ref5.id;\n                return /*#__PURE__*/_jsxDEV(FormGrid, {\n                  item: true,\n                  xs: 12,\n                  sm: 4,\n                  md: 3,\n                  children: /*#__PURE__*/_jsxDEV(Info, {\n                    title: name,\n                    description: value,\n                    nestedClasses: {\n                      root: classes.info\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 474,\n                    columnNumber: 23\n                  }, _this)\n                }, id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 473,\n                  columnNumber: 21\n                }, _this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 471,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 15\n          }, this), (dmsContext === constants.DMS_CONTEXT_CLAIM || dmsContext === constants.DMS_CONTEXT_LOSS) && /*#__PURE__*/_jsxDEV(Box, {\n            className: classes.boxView,\n            mt: 2,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              className: classes.subTitle,\n              children: utils.string.t('dms.upload.lossInfoSection.lossDetails')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 482,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(FormGrid, {\n              container: true,\n              spacing: 3,\n              children: lossInfo === null || lossInfo === void 0 ? void 0 : lossInfo.map(function (_ref6) {\n                var name = _ref6.name,\n                    value = _ref6.value,\n                    id = _ref6.id;\n                return /*#__PURE__*/_jsxDEV(FormGrid, {\n                  item: true,\n                  xs: 12,\n                  sm: 4,\n                  md: 3,\n                  children: /*#__PURE__*/_jsxDEV(Info, {\n                    title: name,\n                    description: value,\n                    nestedClasses: {\n                      root: classes.info\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 486,\n                    columnNumber: 23\n                  }, _this)\n                }, id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 485,\n                  columnNumber: 21\n                }, _this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 483,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 15\n          }, this), (dmsContext === constants.DMS_CONTEXT_PROCESSING_INSTRUCTION || dmsContext === constants.DMS_CONTEXT_POLICY || dmsContext === constants.DMS_CONTEXT_CASE) && /*#__PURE__*/_jsxDEV(Box, {\n            className: classes.boxView,\n            mt: 2,\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              className: classes.subTitle,\n              children: utils.string.t('dms.upload.policyInfoSection.policyDetails')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 496,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(FormGrid, {\n              container: true,\n              spacing: 3,\n              children: policyInfo === null || policyInfo === void 0 ? void 0 : policyInfo.map(function (_ref7) {\n                var name = _ref7.name,\n                    value = _ref7.value,\n                    id = _ref7.id;\n                return /*#__PURE__*/_jsxDEV(FormGrid, {\n                  item: true,\n                  xs: 12,\n                  sm: 4,\n                  md: 3,\n                  children: /*#__PURE__*/_jsxDEV(Info, {\n                    title: name,\n                    description: value,\n                    nestedClasses: {\n                      root: classes.info\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 500,\n                    columnNumber: 25\n                  }, _this)\n                }, id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 499,\n                  columnNumber: 23\n                }, _this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 497,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 495,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormActions, {\n      type: \"dialog\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        text: utils.string.t('dms.upload.modalItems.cancel'),\n        variant: \"text\",\n        onClick: handleCancel()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        text: utils.string.t('dms.upload.modalItems.saveUpload'),\n        disabled: !isMetaDataLoaded || isFulfilled && formState.isSubmitSuccessful || (isPending || isRejected) && formState.isSubmitSuccessful,\n        type: \"submit\",\n        color: \"primary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 509,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DmsUploadView, \"c7lBZrF5PdU/JLoAil/nzRNjZHw=\", false, function () {\n  return [useDmsUpload, useDispatch, useSelector];\n});\n\n_c = DmsUploadView;\n\nvar _c;\n\n$RefreshReg$(_c, \"DmsUploadView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/forms/DmsUpload/DmsUpload.view.js"],"names":["React","useEffect","Fragment","useState","PropTypes","useDispatch","useSelector","useDmsUpload","styles","Button","FormContainer","FormActions","FormText","Accordion","PopoverMenu","FormFields","TableHead","TableCell","FormGrid","Info","Warning","Loader","FormDate","FormSelect","FormAutocompleteMui","FormLabel","utils","resetFilesUploaded","getViewTableDocuments","selectCaseDetails","constants","config","Table","TableBody","TableRow","Box","Typography","makeStyles","Collapse","ArrowDropDownIcon","ErrorOutlineIcon","DmsUploadView","propTypes","context","string","isRequired","referenceId","oneOfType","number","sourceId","documentTypeKey","oneOf","DMS_DOCUMENT_TYPE_SECTION_KEYS","searchParamsAfterUpload","shape","sectionType","postDmsDocumentsSuccess","func","defaultProps","type","policy","getFileKey","fieldsArray","control","handleRemoveFiles","cols","commonInfo","lossInfo","claimInfo","policyInfo","handleSubmit","handleSubmitUpload","isPending","isFulfilled","isRejected","getIcons","dmsContext","handleCancel","documentTypes","handleSelectedItem","documentDto","register","getValues","formState","duplicateIndex","handleSelectDocClassification","docClassificationTypes","indexDocTypeUnfilled","setValue","currencies","handleInputChange","resetPostStatus","handleSingleFileSubmission","isActionDispatched","postSubmissionRowIndex","handleResetFilter","refDocumentDto","isDmsFromPi","isMetaDataLoaded","classes","name","dispatch","isDmsFromPiInstruction","dmsFormatter","ppCaseDetails","folderName","setFolderName","handleGetList","formValues","policyRef","instructionId","documentTypesItems","filter","selectedItem","folderTypesItems","Set","map","sort","id","label","filterDocumentType","event","value","selectText","t","formAuto","subTitle","length","index","file","root","cellWidth","errors","onChange","size","multiline","rows","rowsMax","includes","message","documentTypeDescription","vertical","horizontal","i","callback","documentUploaded","btn","iconSuccess","btnRetry","Boolean","paddingBottom","paddingTop","DMS_DOCUMENT_TYPE_PAYMENT","datepicker","boxView","info","isSubmitSuccessful","doc","date","createdDate","format","ui","text","documentVersion","createdByName","fileLastModifiedDate","DMS_CONTEXT_CLAIM","DMS_CONTEXT_LOSS","DMS_CONTEXT_PROCESSING_INSTRUCTION","DMS_CONTEXT_POLICY","DMS_CONTEXT_CASE"],"mappings":"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","sourcesContent":["import React, { useEffect, Fragment, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n// app\r\nimport useDmsUpload from './useDmsUpload';\r\nimport styles from './DmsUpload.styles';\r\nimport {\r\n  Button,\r\n  FormContainer,\r\n  FormActions,\r\n  FormText,\r\n  Accordion,\r\n  PopoverMenu,\r\n  FormFields,\r\n  TableHead,\r\n  TableCell,\r\n  FormGrid,\r\n  Info,\r\n  Warning,\r\n  Loader,\r\n  FormDate,\r\n  FormSelect,\r\n  FormAutocompleteMui,\r\n  FormLabel,\r\n} from 'components';\r\nimport * as utils from 'utils';\r\nimport { resetFilesUploaded, getViewTableDocuments, selectCaseDetails } from 'stores';\r\nimport * as constants from 'consts';\r\nimport config from 'config';\r\n\r\n// mui\r\nimport { Table, TableBody, TableRow, Box, Typography, makeStyles, Collapse } from '@material-ui/core';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\r\n\r\nDmsUploadView.propTypes = {\r\n  context: PropTypes.string.isRequired,\r\n  referenceId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\r\n  sourceId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n  documentTypeKey: PropTypes.oneOf([constants.DMS_DOCUMENT_TYPE_SECTION_KEYS]),\r\n  searchParamsAfterUpload: PropTypes.shape({\r\n    referenceId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\r\n    sectionType: PropTypes.string.isRequired,\r\n  }),\r\n  postDmsDocumentsSuccess: PropTypes.func,\r\n};\r\n\r\nDmsUploadView.defaultProps = {\r\n  documentTypeKey: constants.DMS_DOCUMENT_TYPE_SECTION_KEYS.type.policy,\r\n  postDmsDocumentsSuccess: () => { },\r\n};\r\n\r\nexport default function DmsUploadView({\r\n  context,\r\n  referenceId,\r\n  sourceId,\r\n  documentTypeKey,\r\n  searchParamsAfterUpload,\r\n  postDmsDocumentsSuccess,\r\n}) {\r\n  const {\r\n    getFileKey,\r\n    fieldsArray,\r\n    control,\r\n    handleRemoveFiles,\r\n    cols,\r\n    commonInfo,\r\n    lossInfo,\r\n    claimInfo,\r\n    policyInfo,\r\n    handleSubmit,\r\n    handleSubmitUpload,\r\n    isPending,\r\n    isFulfilled,\r\n    isRejected,\r\n    getIcons,\r\n    dmsContext,\r\n    handleCancel,\r\n    documentTypes,\r\n    handleSelectedItem,\r\n    documentDto,\r\n    register,\r\n    getValues,\r\n    formState,\r\n    duplicateIndex,\r\n    handleSelectDocClassification,\r\n    docClassificationTypes,\r\n    indexDocTypeUnfilled,\r\n    setValue,\r\n    currencies,\r\n    handleInputChange,\r\n    resetPostStatus,\r\n    handleSingleFileSubmission,\r\n    isActionDispatched,\r\n    postSubmissionRowIndex,\r\n    handleResetFilter,\r\n    refDocumentDto,\r\n    isDmsFromPi,\r\n    isMetaDataLoaded,\r\n  } = useDmsUpload(documentTypeKey, sourceId, referenceId, postDmsDocumentsSuccess);\r\n  const classes = makeStyles(styles, { name: 'DmsUpload' })();\r\n  const dispatch = useDispatch();\r\n\r\n  const isDmsFromPiInstruction = utils.dmsFormatter.isDmsFromPiInstruction(documentTypeKey);\r\n\r\n  const ppCaseDetails = useSelector(selectCaseDetails);\r\n  const [folderName, setFolderName] = useState(null);\r\n  const handleGetList = async (formValues) => {\r\n    await handleSubmitUpload(formValues);\r\n  };\r\n\r\n  // Premium Processing Case Details\r\n  const policyRef = ppCaseDetails?.policyRef;\r\n  const instructionId = ppCaseDetails?.instructionId;\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      dispatch(resetFilesUploaded());\r\n      dispatch(resetPostStatus());\r\n      if (!isDmsFromPiInstruction) {\r\n        dispatch(\r\n          getViewTableDocuments({\r\n            ...(searchParamsAfterUpload\r\n              ? searchParamsAfterUpload\r\n              : {\r\n                referenceId,\r\n                sectionType: context,\r\n                documentTypeKey,\r\n                ...(policyRef && instructionId && { policyRef, instructionId }),\r\n              }),\r\n          })\r\n        );\r\n      }\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const documentTypesItems =\r\n    folderName !== null ? documentTypes?.filter((selectedItem) => selectedItem?.folderName === folderName) : documentTypes;\r\n\r\n  const folderTypesItems = [...new Set(documentTypes?.filter((type) => type?.folderName !== null).map((type) => type?.folderName))]\r\n    .sort()\r\n    .map((name) => ({\r\n      id: name,\r\n      label: name,\r\n    }));\r\n\r\n  const filterDocumentType = (event, value) => {\r\n    if (value === null) {\r\n      setFolderName(null);\r\n      handleResetFilter();\r\n    } else {\r\n      handleResetFilter();\r\n      setFolderName(value?.label);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FormContainer type=\"dialog\" onSubmit={handleSubmit(handleGetList)}>\r\n      <FormFields type=\"dialog\">\r\n        {!isDmsFromPi && (\r\n          <Box mx={1}>\r\n            <FormLabel className={classes.selectText} label={utils.string.t('dms.upload.modalItems.selectFolder')} />\r\n            <Box className={classes.formAuto}>\r\n              <FormAutocompleteMui\r\n                options={folderTypesItems}\r\n                defaultValue={null}\r\n                optionKey=\"id\"\r\n                optionLabel=\"label\"\r\n                callback={(event, value) => filterDocumentType(event, value)}\r\n              />\r\n            </Box>\r\n          </Box>\r\n        )}\r\n        <Box mx={1}>\r\n          <Typography className={classes.subTitle}>{`${fieldsArray?.length} ${utils.string.t(\r\n            'dms.upload.modalItems.uploads'\r\n          )}`}</Typography>\r\n        </Box>\r\n        <Table>\r\n          <TableHead columns={cols} />\r\n          <TableBody>\r\n            {fieldsArray?.map(({ file, name, type }, index) => {\r\n              return (\r\n                <Fragment key={index}>\r\n                  <TableRow key={getFileKey(file)} className={classes.root}>\r\n                    <TableCell className={classes.cellWidth}>\r\n                      <FormText\r\n                        control={control}\r\n                        type=\"textarea\"\r\n                        name={`files${index}name`}\r\n                        defaultValue={name}\r\n                        errors={formState.errors}\r\n                        muiComponentProps={{\r\n                          onChange: handleInputChange(`files${index}name`, index),\r\n                          size: 'small',\r\n                          multiline: true,\r\n                          rows: 1,\r\n                          rowsMax: 6,\r\n                        }}\r\n                        compact={true}\r\n                      />\r\n\r\n                      {(`files${duplicateIndex}name`.includes(index) || formState.errors[`files${index}name`]) && (\r\n                        <Warning\r\n                          text={\r\n                            `files${duplicateIndex}name`.includes(index)\r\n                              ? utils.string.t('dms.upload.warning.duplicateDocumentWarning')\r\n                              : formState.errors[`files${index}name`].message\r\n                          }\r\n                          type=\"error\"\r\n                          size=\"small\"\r\n                          align=\"left\"\r\n                          icon={ErrorOutlineIcon}\r\n                        />\r\n                      )}\r\n                    </TableCell>\r\n                    <TableCell className={classes.cellWidth}>\r\n                      <PopoverMenu\r\n                        {...register(`files${index}`)}\r\n                        text={\r\n                          getValues(`files${index}`)?.documentTypeDescription || utils.string.t('dms.upload.modalItems.selectDocumentType')\r\n                        }\r\n                        size=\"small\"\r\n                        id={`files${index}`}\r\n                        icon={ArrowDropDownIcon}\r\n                        iconPosition=\"right\"\r\n                        anchorOrigin={{\r\n                          vertical: 'bottom',\r\n                          horizontal: 'left',\r\n                        }}\r\n                        transformOrigin={{\r\n                          vertical: 'top',\r\n                          horizontal: 'center',\r\n                        }}\r\n                        items={documentTypesItems.map((selectedItem, i) => ({\r\n                          id: i,\r\n                          label: selectedItem.documentTypeDescription,\r\n                          callback: () => handleSelectedItem(selectedItem, index),\r\n                        }))}\r\n                      />\r\n                      {indexDocTypeUnfilled.includes(index) && !documentDto[index]?.documentUploaded && isActionDispatched && (\r\n                        <Warning\r\n                          text={utils.string.t('dms.upload.warning.emptyDocumentType')}\r\n                          type=\"error\"\r\n                          size=\"small\"\r\n                          align=\"left\"\r\n                          icon={ErrorOutlineIcon}\r\n                        />\r\n                      )}\r\n                    </TableCell>\r\n                    <TableCell className={classes.cellWidth}>\r\n                      <PopoverMenu\r\n                        {...register(`filesClassification${index}`)}\r\n                        text={\r\n                          getValues(`filesClassification${index}`)?.value || utils.string.t('dms.upload.modalItems.classificationType.high')\r\n                        }\r\n                        size=\"small\"\r\n                        id={`filesClassification${index}`}\r\n                        icon={ArrowDropDownIcon}\r\n                        iconPosition=\"right\"\r\n                        disabled={false}\r\n                        anchorOrigin={{\r\n                          vertical: 'bottom',\r\n                          horizontal: 'left',\r\n                        }}\r\n                        transformOrigin={{\r\n                          vertical: 'top',\r\n                          horizontal: 'center',\r\n                        }}\r\n                        items={docClassificationTypes.map((selectedItem, i) => ({\r\n                          id: i,\r\n                          label: selectedItem.value,\r\n                          callback: () => handleSelectDocClassification(selectedItem, index),\r\n                        }))}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell className={classes.cellWidth}>\r\n                      <PopoverMenu\r\n                        text={utils.string.t('dms.upload.modalItems.addTag')}\r\n                        size=\"small\"\r\n                        id=\"document-tags\"\r\n                        icon={ArrowDropDownIcon}\r\n                        iconPosition=\"right\"\r\n                        disabled={false}\r\n                        anchorOrigin={{\r\n                          vertical: 'bottom',\r\n                          horizontal: 'left',\r\n                        }}\r\n                        transformOrigin={{\r\n                          vertical: 'top',\r\n                          horizontal: 'center',\r\n                        }}\r\n                        items={[]}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell className={classes.cellWidth}>\r\n                      {!isPending && (\r\n                        <Button\r\n                          icon={getIcons(isFulfilled, isRejected, documentDto[index]?.documentUploaded)}\r\n                          variant=\"text\"\r\n                          danger={isRejected || (isFulfilled && !documentDto[index]?.documentUploaded)}\r\n                          nestedClasses={{\r\n                            btn: isFulfilled && documentDto[index]?.documentUploaded ? classes.iconSuccess : '',\r\n                          }}\r\n                          size=\"small\"\r\n                          onClick={handleRemoveFiles(name)}\r\n                        />\r\n                      )}\r\n                      {isFulfilled && !documentDto[index]?.documentUploaded && (\r\n                        <Button\r\n                          text={utils.string.t('dms.upload.modalItems.retryUpload')}\r\n                          variant=\"text\"\r\n                          size=\"small\"\r\n                          color=\"secondary\"\r\n                          nestedClasses={{ btn: classes.btnRetry }}\r\n                          onClick={() => handleGetList(handleSingleFileSubmission(index))}\r\n                        />\r\n                      )}\r\n                      <Loader\r\n                        visible={\r\n                          (isPending && !Boolean(documentDto.length)) || (isPending && `files${index}name`.includes(postSubmissionRowIndex))\r\n                        }\r\n                        inline={\r\n                          (isPending && !documentDto[index]?.documentUploaded) ||\r\n                          (isPending && `files${index}name`.includes(postSubmissionRowIndex))\r\n                        }\r\n                      />\r\n                    </TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\r\n                      <Collapse\r\n                        in={getValues(`files${index}`)?.documentTypeDescription === constants.DMS_DOCUMENT_TYPE_PAYMENT}\r\n                        timeout=\"auto\"\r\n                      >\r\n                        <Box my={2}>\r\n                          <FormGrid container spacing={2}>\r\n                            <FormGrid item xs={12} sm={2} md={2}>\r\n                              <FormDate\r\n                                control={control}\r\n                                {...register(`${constants.DMS_DOCUMENT_TYPE_PAYMENT}[${index}].Payment date`)}\r\n                                label={utils.string.t('dms.upload.paymentDetails.paymentDate')}\r\n                                name={`${constants.DMS_DOCUMENT_TYPE_PAYMENT}[${index}].Payment date`}\r\n                                value={getValues(`${constants.DMS_DOCUMENT_TYPE_PAYMENT}[${index}].Payment date`)}\r\n                                type=\"datepicker\"\r\n                                defaultValue={null}\r\n                                handleUpdate={(name, value) =>\r\n                                  setValue(`${constants.DMS_DOCUMENT_TYPE_PAYMENT}[${index}].Payment date`, value)\r\n                                }\r\n                                outputFormat=\"iso\"\r\n                                muiComponentProps={{\r\n                                  classes: {\r\n                                    root: classes.datepicker,\r\n                                  },\r\n                                }}\r\n                              />\r\n                            </FormGrid>\r\n                            <FormGrid item xs={12} sm={2} md={2}>\r\n                              <FormText\r\n                                control={control}\r\n                                {...register(`${constants.DMS_DOCUMENT_TYPE_PAYMENT}[${index}].Payment Reference`)}\r\n                                label={utils.string.t('dms.upload.paymentDetails.enterReference')}\r\n                                value={getValues(`${constants.DMS_DOCUMENT_TYPE_PAYMENT}[${index}].Payment Reference`)}\r\n                                name={`${constants.DMS_DOCUMENT_TYPE_PAYMENT}[${index}].Payment Reference`}\r\n                                defaultValue=\"\"\r\n                              />\r\n                            </FormGrid>\r\n                            <FormGrid item xs={12} sm={2} md={2}>\r\n                              <FormText\r\n                                control={control}\r\n                                {...register(`${constants.DMS_DOCUMENT_TYPE_PAYMENT}[${index}].Loss Payee`)}\r\n                                value={getValues(`${constants.DMS_DOCUMENT_TYPE_PAYMENT}[${index}].Loss Payee`)}\r\n                                name={`${constants.DMS_DOCUMENT_TYPE_PAYMENT}[${index}].Loss Payee`}\r\n                                label={utils.string.t('dms.upload.paymentDetails.enterName')}\r\n                                defaultValue=\"\"\r\n                              />\r\n                            </FormGrid>\r\n                            <FormGrid item xs={12} sm={2} md={2}>\r\n                              <FormText\r\n                                type=\"number\"\r\n                                control={control}\r\n                                value={getValues(`${constants.DMS_DOCUMENT_TYPE_PAYMENT}[${index}].Amount`)}\r\n                                name={`${constants.DMS_DOCUMENT_TYPE_PAYMENT}[${index}].Amount`}\r\n                                label={utils.string.t('dms.upload.paymentDetails.enterAmount')}\r\n                                defaultValue=\"\"\r\n                                {...register(`${constants.DMS_DOCUMENT_TYPE_PAYMENT}[${index}].Amount`)}\r\n                              />\r\n                            </FormGrid>\r\n                            <FormGrid item xs={12} sm={2} md={2}>\r\n                              <FormSelect\r\n                                control={control}\r\n                                {...register(`${constants.DMS_DOCUMENT_TYPE_PAYMENT}[${index}].Currency`)}\r\n                                label={utils.string.t('dms.upload.paymentDetails.selectCurrency')}\r\n                                name={`${constants.DMS_DOCUMENT_TYPE_PAYMENT}[${index}].Currency`}\r\n                                options={currencies}\r\n                                optionKey=\"id\"\r\n                                optionLabel=\"name\"\r\n                                defaultValue=\"\"\r\n                                handleUpdate={(name, value) => setValue(`${constants.DMS_DOCUMENT_TYPE_PAYMENT}[${index}].Currency`, value)}\r\n                              />\r\n                            </FormGrid>\r\n                          </FormGrid>\r\n                        </Box>\r\n                      </Collapse>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                </Fragment>\r\n              );\r\n            })}\r\n          </TableBody>\r\n        </Table>\r\n        <Accordion title={<Typography>{utils.string.t('dms.upload.modalItems.viewData')}</Typography>}>\r\n          <Box width=\"100%\">\r\n            <Box className={classes.boxView}>\r\n              <Typography className={classes.subTitle}>{utils.string.t('dms.upload.commonInfoSection.commonInfo')}</Typography>\r\n              <FormGrid container spacing={3}>\r\n                {commonInfo?.map(({ name, value, id }) => (\r\n                  <FormGrid key={id} item xs={12} sm={4} md={3}>\r\n                    <Info title={name} description={value} nestedClasses={{ root: classes.info }} />\r\n                  </FormGrid>\r\n                ))}\r\n                {isFulfilled &&\r\n                  formState.isSubmitSuccessful &&\r\n                  refDocumentDto?.map((doc, i) => (\r\n                    <Fragment key={i}>\r\n                      {doc.documentUploaded && (\r\n                        <>\r\n                          <FormGrid item xs={12} sm={4} md={3}>\r\n                            <Info\r\n                              title={utils.string.t('dms.upload.commonUploadInfoSection.documentCreatedOn')}\r\n                              description={`${utils.string.t('format.date', {\r\n                                value: { date: doc.createdDate, format: config.ui.format.date.text },\r\n                              })}`}\r\n                              nestedClasses={{ root: classes.info }}\r\n                            />\r\n                          </FormGrid>\r\n                          <FormGrid item xs={12} sm={4} md={3}>\r\n                            <Info\r\n                              title={utils.string.t('dms.upload.commonUploadInfoSection.documentVersion')}\r\n                              description={doc.documentVersion}\r\n                              nestedClasses={{ root: classes.info }}\r\n                            />\r\n                          </FormGrid>\r\n                          <FormGrid item xs={12} sm={4} md={3}>\r\n                            <Info\r\n                              title={utils.string.t('dms.upload.commonUploadInfoSection.documentUploadedBy')}\r\n                              description={doc.createdByName}\r\n                              nestedClasses={{ root: classes.info }}\r\n                            />\r\n                          </FormGrid>\r\n                          <FormGrid item xs={12} sm={4} md={3}>\r\n                            <Info\r\n                              title={utils.string.t('dms.upload.commonUploadInfoSection.documentModifiedOn')}\r\n                              description={`${utils.string.t('format.date', {\r\n                                value: { date: doc.fileLastModifiedDate, format: config.ui.format.date.text },\r\n                              })}`}\r\n                              nestedClasses={{ root: classes.info }}\r\n                            />\r\n                          </FormGrid>\r\n                        </>\r\n                      )}\r\n                    </Fragment>\r\n                  ))}\r\n              </FormGrid>\r\n            </Box>\r\n            {dmsContext === constants.DMS_CONTEXT_CLAIM && (\r\n              <Box className={classes.boxView} mt={2}>\r\n                <Typography className={classes.subTitle}>{utils.string.t('dms.upload.claimInfoSection.claimDetails')}</Typography>\r\n                <FormGrid container spacing={3}>\r\n                  {claimInfo?.map(({ name, value, id }) => (\r\n                    <FormGrid key={id} item xs={12} sm={4} md={3}>\r\n                      <Info title={name} description={value} nestedClasses={{ root: classes.info }} />\r\n                    </FormGrid>\r\n                  ))}\r\n                </FormGrid>\r\n              </Box>\r\n            )}\r\n            {(dmsContext === constants.DMS_CONTEXT_CLAIM || dmsContext === constants.DMS_CONTEXT_LOSS) && (\r\n              <Box className={classes.boxView} mt={2}>\r\n                <Typography className={classes.subTitle}>{utils.string.t('dms.upload.lossInfoSection.lossDetails')}</Typography>\r\n                <FormGrid container spacing={3}>\r\n                  {lossInfo?.map(({ name, value, id }) => (\r\n                    <FormGrid key={id} item xs={12} sm={4} md={3}>\r\n                      <Info title={name} description={value} nestedClasses={{ root: classes.info }} />\r\n                    </FormGrid>\r\n                  ))}\r\n                </FormGrid>\r\n              </Box>\r\n            )}\r\n            {(dmsContext === constants.DMS_CONTEXT_PROCESSING_INSTRUCTION ||\r\n              dmsContext === constants.DMS_CONTEXT_POLICY ||\r\n              dmsContext === constants.DMS_CONTEXT_CASE) && (\r\n                <Box className={classes.boxView} mt={2}>\r\n                  <Typography className={classes.subTitle}>{utils.string.t('dms.upload.policyInfoSection.policyDetails')}</Typography>\r\n                  <FormGrid container spacing={3}>\r\n                    {policyInfo?.map(({ name, value, id }) => (\r\n                      <FormGrid key={id} item xs={12} sm={4} md={3}>\r\n                        <Info title={name} description={value} nestedClasses={{ root: classes.info }} />\r\n                      </FormGrid>\r\n                    ))}\r\n                  </FormGrid>\r\n                </Box>\r\n              )}\r\n          </Box>\r\n        </Accordion>\r\n      </FormFields>\r\n      <FormActions type=\"dialog\">\r\n        <Button text={utils.string.t('dms.upload.modalItems.cancel')} variant=\"text\" onClick={handleCancel()} />\r\n        <Button\r\n          text={utils.string.t('dms.upload.modalItems.saveUpload')}\r\n          disabled={\r\n            !isMetaDataLoaded ||\r\n            (isFulfilled && formState.isSubmitSuccessful) ||\r\n            ((isPending || isRejected) && formState.isSubmitSuccessful)\r\n          }\r\n          type=\"submit\"\r\n          color=\"primary\"\r\n        />\r\n      </FormActions>\r\n    </FormContainer>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}