{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\AdminOffices\\\\AdminOffices.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport get from 'lodash/get'; // app\n\nimport { getParentOfficeList, showModal } from 'stores';\nimport { AdminOfficesView } from './AdminOffices.view';\nimport { usePagination } from 'hooks';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function AdminOffices() {\n  _s();\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedId = _useState2[0],\n      setSelectedId = _useState2[1];\n\n  var parentList = useSelector(function (state) {\n    return state.parent.list;\n  }) || [];\n  var parentOfficeList = useSelector(function (state) {\n    return state.admin.parentOfficeList;\n  }) || {};\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      params = _useState4[0],\n      setParams = _useState4[1];\n\n  var dispatch = useDispatch();\n  var paginationObj = {\n    page: parentOfficeList.page - 1,\n    rowsTotal: parentOfficeList.itemsTotal,\n    rowsPerPage: parentOfficeList.pageSize\n  };\n  useEffect(function () {\n    dispatch(getParentOfficeList());\n  }, [] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  useEffect(function () {\n    if (parentOfficeList.items.length === 1) {\n      setSelectedId(parentOfficeList.items[0].id);\n    }\n  }, [parentOfficeList.items] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  var handleClickRow = function handleClickRow(id) {\n    setSelectedId(id === selectedId ? null : id);\n  };\n\n  var handleChangePage = function handleChangePage(newPage) {\n    dispatch(getParentOfficeList(_objectSpread(_objectSpread({}, params), {}, {\n      page: newPage + 1\n    })));\n  };\n\n  var handleChangeRowsPerPage = function handleChangeRowsPerPage(rowsPerPage) {\n    dispatch(getParentOfficeList(_objectSpread(_objectSpread({}, params), {}, {\n      size: rowsPerPage\n    })));\n  };\n\n  var pagination = usePagination(parentOfficeList.items, paginationObj, handleChangePage, handleChangeRowsPerPage);\n  var fields = [{\n    gridSize: {\n      xs: 12\n    },\n    name: 'client',\n    type: 'autocomplete',\n    placeholder: utils.string.t('admin.searchByClient'),\n    value: [],\n    options: parentList,\n    optionKey: 'id',\n    optionLabel: 'name',\n    muiComponentProps: {\n      'data-testid': 'client'\n    }\n  }];\n  var actions = [{\n    name: 'filter',\n    label: utils.string.t('app.filter'),\n    handler: function handler(values) {\n      var client = values.client;\n      if (!get(client, '[0].name')) return;\n      var name = get(client, '[0].name').toLowerCase();\n      setParams({\n        name: name\n      });\n      dispatch(getParentOfficeList({\n        name: name\n      }));\n    }\n  }, {\n    name: 'reset',\n    label: utils.string.t('app.reset'),\n    handler: function handler() {\n      dispatch(getParentOfficeList());\n      setParams({});\n    }\n  }];\n\n  var handleCreateClientOffice = function handleCreateClientOffice() {\n    var office = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    dispatch(showModal({\n      component: 'ADD_EDIT_CLIENT_OFFICE',\n      props: {\n        title: office.id ? 'admin.editOffice' : 'admin.createOffice',\n        fullWidth: true,\n        maxWidth: 'md',\n        componentProps: {\n          office: office\n        }\n      }\n    }));\n  };\n\n  var popoverActions = [{\n    id: 'admin-edit-office',\n    label: 'admin.editOffice',\n    callback: function callback(_ref) {\n      var office = _ref.office;\n      return handleCreateClientOffice(office);\n    }\n  }];\n  return /*#__PURE__*/_jsxDEV(AdminOfficesView, {\n    parents: parentOfficeList.items,\n    sort: {\n      by: 'name',\n      type: 'text',\n      direction: 'asc'\n    },\n    fields: fields,\n    actions: actions,\n    handleClickRow: handleClickRow,\n    selectedId: selectedId,\n    handleChangeRowsPerPage: pagination.handlers.handleChangeRowsPerPage,\n    handleChangePage: pagination.handlers.handleChangePage,\n    pagination: pagination.obj,\n    handleCreateClientOffice: handleCreateClientOffice,\n    popoverActions: popoverActions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AdminOffices, \"lsZmN6H60EqUrPky6ulT/ytsCps=\", false, function () {\n  return [useSelector, useSelector, useDispatch, usePagination];\n});\n\n_c = AdminOffices;\nexport default AdminOffices;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdminOffices\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/AdminOffices/AdminOffices.js"],"names":["React","useState","useEffect","useDispatch","useSelector","get","getParentOfficeList","showModal","AdminOfficesView","usePagination","utils","AdminOffices","selectedId","setSelectedId","parentList","state","parent","list","parentOfficeList","admin","params","setParams","dispatch","paginationObj","page","rowsTotal","itemsTotal","rowsPerPage","pageSize","items","length","id","handleClickRow","handleChangePage","newPage","handleChangeRowsPerPage","size","pagination","fields","gridSize","xs","name","type","placeholder","string","t","value","options","optionKey","optionLabel","muiComponentProps","actions","label","handler","values","client","toLowerCase","handleCreateClientOffice","office","component","props","title","fullWidth","maxWidth","componentProps","popoverActions","callback","by","direction","handlers","obj"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport get from 'lodash/get';\r\n\r\n// app\r\nimport { getParentOfficeList, showModal } from 'stores';\r\nimport { AdminOfficesView } from './AdminOffices.view';\r\nimport { usePagination } from 'hooks';\r\nimport * as utils from 'utils';\r\n\r\nexport function AdminOffices() {\r\n  const [selectedId, setSelectedId] = useState();\r\n  const parentList = useSelector((state) => state.parent.list) || [];\r\n  const parentOfficeList = useSelector((state) => state.admin.parentOfficeList) || {};\r\n  const [params, setParams] = useState({});\r\n  const dispatch = useDispatch();\r\n\r\n  const paginationObj = {\r\n    page: parentOfficeList.page - 1,\r\n    rowsTotal: parentOfficeList.itemsTotal,\r\n    rowsPerPage: parentOfficeList.pageSize,\r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n      dispatch(getParentOfficeList());\r\n    },\r\n    [] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  useEffect(\r\n    () => {\r\n      if (parentOfficeList.items.length === 1) {\r\n        setSelectedId(parentOfficeList.items[0].id);\r\n      }\r\n    },\r\n    [parentOfficeList.items] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  const handleClickRow = (id) => {\r\n    setSelectedId(id === selectedId ? null : id);\r\n  };\r\n\r\n  const handleChangePage = (newPage) => {\r\n    dispatch(getParentOfficeList({ ...params, page: newPage + 1 }));\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (rowsPerPage) => {\r\n    dispatch(getParentOfficeList({ ...params, size: rowsPerPage }));\r\n  };\r\n\r\n  const pagination = usePagination(parentOfficeList.items, paginationObj, handleChangePage, handleChangeRowsPerPage);\r\n\r\n  const fields = [\r\n    {\r\n      gridSize: { xs: 12 },\r\n      name: 'client',\r\n      type: 'autocomplete',\r\n      placeholder: utils.string.t('admin.searchByClient'),\r\n      value: [],\r\n      options: parentList,\r\n      optionKey: 'id',\r\n      optionLabel: 'name',\r\n      muiComponentProps: {\r\n        'data-testid': 'client',\r\n      },\r\n    },\r\n  ];\r\n\r\n  const actions = [\r\n    {\r\n      name: 'filter',\r\n      label: utils.string.t('app.filter'),\r\n      handler: (values) => {\r\n        const { client } = values;\r\n        if (!get(client, '[0].name')) return;\r\n\r\n        const name = get(client, '[0].name').toLowerCase();\r\n        setParams({ name });\r\n        dispatch(getParentOfficeList({ name }));\r\n      },\r\n    },\r\n    {\r\n      name: 'reset',\r\n      label: utils.string.t('app.reset'),\r\n      handler: () => {\r\n        dispatch(getParentOfficeList());\r\n        setParams({});\r\n      },\r\n    },\r\n  ];\r\n\r\n  const handleCreateClientOffice = (office = {}) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'ADD_EDIT_CLIENT_OFFICE',\r\n        props: {\r\n          title: office.id ? 'admin.editOffice' : 'admin.createOffice',\r\n          fullWidth: true,\r\n          maxWidth: 'md',\r\n          componentProps: {\r\n            office,\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const popoverActions = [\r\n    {\r\n      id: 'admin-edit-office',\r\n      label: 'admin.editOffice',\r\n      callback: ({ office }) => handleCreateClientOffice(office),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <AdminOfficesView\r\n      parents={parentOfficeList.items}\r\n      sort={{\r\n        by: 'name',\r\n        type: 'text',\r\n        direction: 'asc',\r\n      }}\r\n      fields={fields}\r\n      actions={actions}\r\n      handleClickRow={handleClickRow}\r\n      selectedId={selectedId}\r\n      handleChangeRowsPerPage={pagination.handlers.handleChangeRowsPerPage}\r\n      handleChangePage={pagination.handlers.handleChangePage}\r\n      pagination={pagination.obj}\r\n      handleCreateClientOffice={handleCreateClientOffice}\r\n      popoverActions={popoverActions}\r\n    />\r\n  );\r\n}\r\n\r\nexport default AdminOffices;\r\n"]},"metadata":{},"sourceType":"module"}