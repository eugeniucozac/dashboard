{"ast":null,"code":"import _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ClaimActionTable\\\\ClaimActionLevelTwo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types'; //app\n\nimport { ClaimActionRow } from './ClaimActionRow';\nimport { ClaimActionLevelClaim } from './ClaimActionLevelClaim';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nClaimActionLevelTwo.prototype = {\n  data: PropTypes.array.isRequired,\n  columnProps: PropTypes.array.isRequired\n};\nexport function ClaimActionLevelTwo(_ref) {\n  _s();\n\n  var _this = this;\n\n  var data = _ref.data,\n      columnProps = _ref.columnProps;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isOpen = _useState2[0],\n      setIsOpen = _useState2[1];\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ClaimActionRow, {\n      columnProps: columnProps,\n      data: data,\n      isOpen: isOpen,\n      onClick: function onClick() {\n        return setIsOpen(!isOpen);\n      },\n      level: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), isOpen && data.actionChildItemList.map(function (itemLevelTwo, index) {\n      return itemLevelTwo.isClaim ? /*#__PURE__*/_jsxDEV(ClaimActionLevelClaim, {\n        data: itemLevelTwo,\n        columnProps: columnProps\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }, _this) : /*#__PURE__*/_jsxDEV(ClaimActionRow, {\n        columnProps: columnProps,\n        data: itemLevelTwo,\n        level: 2\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, _this);\n    })]\n  }, void 0, true);\n}\n\n_s(ClaimActionLevelTwo, \"mEi83NlPXQzy/XIDfTYWzOSvaHw=\");\n\n_c = ClaimActionLevelTwo;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimActionLevelTwo\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ClaimActionTable/ClaimActionLevelTwo.js"],"names":["React","useState","PropTypes","ClaimActionRow","ClaimActionLevelClaim","ClaimActionLevelTwo","prototype","data","array","isRequired","columnProps","isOpen","setIsOpen","actionChildItemList","map","itemLevelTwo","index","isClaim"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,qBAAT,QAAsC,yBAAtC;;;AAEAC,mBAAmB,CAACC,SAApB,GAAgC;AAC9BC,EAAAA,IAAI,EAAEL,SAAS,CAACM,KAAV,CAAgBC,UADQ;AAE9BC,EAAAA,WAAW,EAAER,SAAS,CAACM,KAAV,CAAgBC;AAFC,CAAhC;AAKA,OAAO,SAASJ,mBAAT,OAAoD;AAAA;;AAAA;;AAAA,MAArBE,IAAqB,QAArBA,IAAqB;AAAA,MAAfG,WAAe,QAAfA,WAAe;;AAAA,kBAC7BT,QAAQ,CAAC,IAAD,CADqB;AAAA;AAAA,MAClDU,MADkD;AAAA,MAC1CC,SAD0C;;AAGzD,sBACE;AAAA,4BACE,QAAC,cAAD;AAAgB,MAAA,WAAW,EAAEF,WAA7B;AAA0C,MAAA,IAAI,EAAEH,IAAhD;AAAsD,MAAA,MAAM,EAAEI,MAA9D;AAAsE,MAAA,OAAO,EAAE;AAAA,eAAMC,SAAS,CAAC,CAACD,MAAF,CAAf;AAAA,OAA/E;AAAyG,MAAA,KAAK,EAAE;AAAhH;AAAA;AAAA;AAAA;AAAA,YADF,EAEGA,MAAM,IACLJ,IAAI,CAACM,mBAAL,CAAyBC,GAAzB,CAA6B,UAACC,YAAD,EAAeC,KAAf,EAAyB;AACpD,aAAOD,YAAY,CAACE,OAAb,gBACL,QAAC,qBAAD;AAAmC,QAAA,IAAI,EAAEF,YAAzC;AAAuD,QAAA,WAAW,EAAEL;AAApE,SAA4BM,KAA5B;AAAA;AAAA;AAAA;AAAA,eADK,gBAGL,QAAC,cAAD;AAA4B,QAAA,WAAW,EAAEN,WAAzC;AAAsD,QAAA,IAAI,EAAEK,YAA5D;AAA0E,QAAA,KAAK,EAAE;AAAjF,SAAqBC,KAArB;AAAA;AAAA;AAAA;AAAA,eAHF;AAKD,KAND,CAHJ;AAAA,kBADF;AAaD;;GAhBeX,mB;;KAAAA,mB","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n//app\r\nimport { ClaimActionRow } from './ClaimActionRow';\r\nimport { ClaimActionLevelClaim } from './ClaimActionLevelClaim';\r\n\r\nClaimActionLevelTwo.prototype = {\r\n  data: PropTypes.array.isRequired,\r\n  columnProps: PropTypes.array.isRequired,\r\n};\r\n\r\nexport function ClaimActionLevelTwo({ data, columnProps }) {\r\n  const [isOpen, setIsOpen] = useState(true);\r\n\r\n  return (\r\n    <>\r\n      <ClaimActionRow columnProps={columnProps} data={data} isOpen={isOpen} onClick={() => setIsOpen(!isOpen)} level={1} />\r\n      {isOpen &&\r\n        data.actionChildItemList.map((itemLevelTwo, index) => {\r\n          return itemLevelTwo.isClaim ? (\r\n            <ClaimActionLevelClaim key={index} data={itemLevelTwo} columnProps={columnProps} />\r\n          ) : (\r\n            <ClaimActionRow key={index} columnProps={columnProps} data={itemLevelTwo} level={2} />\r\n          );\r\n        })}\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}