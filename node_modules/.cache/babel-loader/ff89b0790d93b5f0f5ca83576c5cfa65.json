{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as utils from 'utils';\nimport { enqueueNotification } from 'stores';\nimport * as constants from 'consts';\nexport var postDmsDocumentsV2 = function postDmsDocumentsV2(params) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint,\n        type = _getState.dms.contextSubType.type,\n        selectedRiskRef = _getState.processingInstructions.selectedRiskRef; // prettier-ignore\n\n\n    var context = params.context,\n        documentTypeKey = params.documentTypeKey,\n        filesFormData = params.submitData,\n        uploadFiles = params.submitFiles; // eslint-disable-next-line\n\n    var referenceId = utils.dmsFormatter.getContextReferenceId(getState(), context, type);\n\n    var _utils$dmsFormatter$g = utils.dmsFormatter.getUploadMetaDataParams(getState(), context, referenceId),\n        claimRef = _utils$dmsFormatter$g.claimRef,\n        lossRef = _utils$dmsFormatter$g.lossRef,\n        expiryDate = _utils$dmsFormatter$g.expiryDate;\n\n    var endorsementId = selectedRiskRef.endorsementId,\n        endorsementUid = selectedRiskRef.bulkEndorsementUid; // TODO to come as props rather than from metaData API\n\n    var formData = new FormData(); // Construct File's Byte Array request\n\n    uploadFiles.forEach(function (eachFile) {\n      if (eachFile === null || eachFile === void 0 ? void 0 : eachFile.name) {\n        formData.append('uploadFiles', eachFile);\n      }\n    }); // Construct Files's Upload Data Request\n\n    formData.append('fileUploadRequestPayload', JSON.stringify(_objectSpread(_objectSpread({\n      sectionType: context,\n      srcApplication: \"EDGE\",\n      referenceId: referenceId,\n      // TODO to come as props rather than from metaData API\n      claimRef: claimRef,\n      lossRef: lossRef,\n      expiryDate: expiryDate\n    }, documentTypeKey === constants.DMS_DOCUMENT_TYPE_SECTION_KEYS.type.piEndorsement && endorsementId && endorsementUid && {\n      endorsementId: endorsementId,\n      endorsementUid: endorsementUid\n    }), filesFormData)));\n    dispatch(postDmsDocumentsV2Request(params));\n    return utils.api.multiPartPost({\n      token: auth.accessToken,\n      endpoint: endpoint.dmsService,\n      path: 'dms/document/upload',\n      data: formData\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(enqueueNotification(data === null || data === void 0 ? void 0 : data.message, 'success'));\n      dispatch(postDmsDocumentsV2Success(data === null || data === void 0 ? void 0 : data.data));\n      return data;\n    }).catch(function (err) {\n      var defaultError = {\n        file: 'stores/dms.actions.postDmsDocuments'\n      };\n      dispatch(enqueueNotification('notification.uploadDmsFile.fail', 'error'));\n      utils.api.handleError(err, defaultError);\n      return dispatch(postDmsDocumentsV2Failure(err));\n    });\n  };\n};\nexport var postDmsDocumentsV2Request = function postDmsDocumentsV2Request(params) {\n  return {\n    type: 'DMS_POST_DOCUMENTS_REQUEST',\n    payload: params\n  };\n};\nexport var postDmsDocumentsV2Success = function postDmsDocumentsV2Success(data) {\n  return {\n    type: 'DMS_POST_DOCUMENTS_SUCCESS',\n    payload: data\n  };\n};\nexport var postDmsDocumentsV2Failure = function postDmsDocumentsV2Failure(err) {\n  return {\n    type: 'DMS_POST_DOCUMENTS_ERROR',\n    payload: err\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/dms/dms.actions.postDmsDocumentsV2.js"],"names":["utils","enqueueNotification","constants","postDmsDocumentsV2","params","dispatch","getState","auth","user","endpoint","config","vars","type","dms","contextSubType","selectedRiskRef","processingInstructions","context","documentTypeKey","filesFormData","submitData","uploadFiles","submitFiles","referenceId","dmsFormatter","getContextReferenceId","getUploadMetaDataParams","claimRef","lossRef","expiryDate","endorsementId","endorsementUid","bulkEndorsementUid","formData","FormData","forEach","eachFile","name","append","JSON","stringify","sectionType","srcApplication","DMS_DOCUMENT_TYPE_SECTION_KEYS","piEndorsement","postDmsDocumentsV2Request","api","multiPartPost","token","accessToken","dmsService","path","data","then","response","handleResponse","json","handleNewData","message","postDmsDocumentsV2Success","catch","err","defaultError","file","handleError","postDmsDocumentsV2Failure","payload"],"mappings":"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","sourcesContent":["import * as utils from 'utils';\r\nimport { enqueueNotification } from 'stores';\r\nimport * as constants from 'consts';\r\n\r\nexport const postDmsDocumentsV2 = (params) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } }, dms: { contextSubType: { type } }, processingInstructions: { selectedRiskRef } } = getState();\r\n  // prettier-ignore\r\n  const { context, documentTypeKey, submitData: filesFormData, submitFiles: uploadFiles } = params;\r\n\r\n  // eslint-disable-next-line\r\n  const referenceId = utils.dmsFormatter.getContextReferenceId(getState(), context, type);\r\n  const { claimRef, lossRef, expiryDate } = utils.dmsFormatter.getUploadMetaDataParams(getState(), context, referenceId);\r\n  const { endorsementId, bulkEndorsementUid: endorsementUid } = selectedRiskRef; // TODO to come as props rather than from metaData API\r\n\r\n  let formData = new FormData();\r\n\r\n  // Construct File's Byte Array request\r\n  uploadFiles.forEach((eachFile) => {\r\n    if (eachFile?.name) {\r\n      formData.append('uploadFiles', eachFile);\r\n    }\r\n  });\r\n\r\n  // Construct Files's Upload Data Request\r\n  formData.append(\r\n    'fileUploadRequestPayload',\r\n    JSON.stringify({\r\n      sectionType: context,\r\n      srcApplication: \"EDGE\",\r\n      referenceId,\r\n\r\n      // TODO to come as props rather than from metaData API\r\n      claimRef, lossRef, expiryDate,\r\n\r\n      ...(documentTypeKey === constants.DMS_DOCUMENT_TYPE_SECTION_KEYS.type.piEndorsement &&\r\n        endorsementId &&\r\n        endorsementUid && {\r\n        endorsementId,\r\n        endorsementUid,\r\n      }),\r\n\r\n      ...filesFormData\r\n    })\r\n  );\r\n\r\n  dispatch(postDmsDocumentsV2Request(params));\r\n\r\n  return utils.api\r\n    .multiPartPost({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.dmsService,\r\n      path: 'dms/document/upload',\r\n      data: formData,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(enqueueNotification(data?.message, 'success'));\r\n      dispatch(postDmsDocumentsV2Success(data?.data));\r\n      return data;\r\n    })\r\n\r\n    .catch((err) => {\r\n      const defaultError = {\r\n        file: 'stores/dms.actions.postDmsDocuments',\r\n      };\r\n      dispatch(enqueueNotification('notification.uploadDmsFile.fail', 'error'));\r\n      utils.api.handleError(err, defaultError);\r\n      return dispatch(postDmsDocumentsV2Failure(err));\r\n    });\r\n};\r\n\r\nexport const postDmsDocumentsV2Request = (params) => {\r\n  return {\r\n    type: 'DMS_POST_DOCUMENTS_REQUEST',\r\n    payload: params,\r\n  };\r\n};\r\n\r\nexport const postDmsDocumentsV2Success = (data) => {\r\n  return {\r\n    type: 'DMS_POST_DOCUMENTS_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const postDmsDocumentsV2Failure = (err) => {\r\n  return {\r\n    type: 'DMS_POST_DOCUMENTS_ERROR',\r\n    payload: err,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}