{"ast":null,"code":"import _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ClaimRefRfis\\\\ClaimRefRfis.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router'; // app\n\nimport ClaimRefRfisView from './ClaimRefRfis.view';\nimport { selectClaimRfisSort, selectClaimRefRfiPagination, getClaimRfis, resetClaimRfis, selectClaimRefRfis, selectClaimRefRfiFilters, selectClaimsProcessingTasksSelected, getPriorityLevels, selectPriorities } from 'stores';\nimport { MultiSelect } from 'components';\nimport { useFlexiColumns, useSort, usePagination } from 'hooks';\nimport * as utils from 'utils';\nimport config from 'config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nClaimRefRfis.propTypes = {\n  claim: PropTypes.object.isRequired\n};\nexport default function ClaimRefRfis(_ref) {\n  _s();\n\n  var claim = _ref.claim;\n  var dispatch = useDispatch();\n  var claimRef = claim.claimRef,\n      claimID = claim.claimID;\n  var history = useHistory();\n  var claimRfis = useSelector(selectClaimRefRfis);\n  var claimRfisFilters = useSelector(selectClaimRefRfiFilters);\n  var claimRfisSort = useSelector(selectClaimRfisSort);\n  var claimRfisPagination = useSelector(selectClaimRefRfiPagination);\n  var prioritiesList = useSelector(selectPriorities);\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      searchText = _useState2[0],\n      setSearchText = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      resetKey = _useState4[0],\n      setResetKey = _useState4[1];\n\n  useEffect(function () {\n    if (claimID) {\n      dispatch(getClaimRfis({\n        claimID: claimID\n      }));\n    } // eslint-disable-line react-hooks/exhaustive-deps\n    // cleanup\n\n\n    return function () {\n      dispatch(resetClaimRfis());\n    };\n  }, [claimRef]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    if (utils.generic.isInvalidOrEmptyArray(prioritiesList)) dispatch(getPriorityLevels());\n  }, [dispatch, prioritiesList]);\n  var cols = [{\n    id: 'queryId',\n    visible: true,\n    label: utils.string.t('claims.rfis.columns.queryID')\n  }, {\n    id: 'rfiSentTo',\n    visible: true,\n    label: utils.string.t('claims.rfis.columns.to')\n  }, {\n    id: 'queryCode',\n    visible: true,\n    label: utils.string.t('claims.rfis.columns.queryCode')\n  }, {\n    id: 'queryCreatedOn',\n    sort: {\n      type: 'date',\n      direction: 'asc'\n    },\n    visible: true,\n    label: utils.string.t('claims.rfis.columns.dateOfQuery')\n  }, {\n    id: 'targetDueDate',\n    sort: {\n      type: 'date',\n      direction: 'asc'\n    },\n    visible: true,\n    label: utils.string.t('claims.rfis.columns.targetDueDate')\n  }, {\n    id: 'priority',\n    visible: true,\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    label: utils.string.t('claims.rfis.columns.priority')\n  }, {\n    id: 'status',\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true,\n    label: utils.string.t('claims.rfis.columns.status')\n  }, {\n    id: 'description',\n    visible: true,\n    label: utils.string.t('claims.rfis.columns.description')\n  }];\n  var filtersArray = [{\n    id: 'queryCode',\n    type: 'multiSelect',\n    label: utils.string.t('claims.rfis.columns.queryCode'),\n    value: [],\n    options: (claimRfisFilters === null || claimRfisFilters === void 0 ? void 0 : claimRfisFilters.queryCode) || [],\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"queryCode\",\n      search: true,\n      options: (claimRfisFilters === null || claimRfisFilters === void 0 ? void 0 : claimRfisFilters.queryCode) || []\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 16\n    }, this)\n  }, {\n    id: 'status',\n    type: 'multiSelect',\n    label: utils.string.t('claims.rfis.columns.status'),\n    value: [],\n    options: (claimRfisFilters === null || claimRfisFilters === void 0 ? void 0 : claimRfisFilters.status) || [],\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"status\",\n      search: true,\n      options: (claimRfisFilters === null || claimRfisFilters === void 0 ? void 0 : claimRfisFilters.status) || []\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 16\n    }, this)\n  }];\n\n  var searchSubmit = function searchSubmit(_ref2) {\n    var search = _ref2.search;\n    setResetKey(new Date().getTime());\n    setSearchText(search);\n    dispatch(getClaimRfis({\n      claimID: claimID,\n      query: search\n    }));\n  };\n\n  var filterSearchSubmit = function filterSearchSubmit(_ref3) {\n    var search = _ref3.search,\n        filters = _ref3.filters;\n    dispatch(getClaimRfis({\n      claimID: claimID,\n      query: search,\n      filters: filters\n    }));\n  };\n\n  var resetSubmit = function resetSubmit() {\n    dispatch(getClaimRfis({\n      claimID: claimID,\n      filters: {}\n    }));\n  };\n\n  var sortColumn = function sortColumn(by, dir) {\n    dispatch(getClaimRfis({\n      claimID: claimID,\n      sortBy: by,\n      direction: dir,\n      query: searchText\n    }));\n  };\n\n  var changePage = function changePage(newPage) {\n    dispatch(getClaimRfis({\n      claimID: claimID,\n      page: newPage,\n      query: searchText\n    }));\n  };\n\n  var changeRowsPerPage = function changeRowsPerPage(rowsPerPage) {\n    dispatch(getClaimRfis({\n      claimID: claimID,\n      size: rowsPerPage,\n      query: searchText\n    }));\n  };\n\n  var clickRfiTask = function clickRfiTask(rfi) {\n    var selectedTask = {\n      assigneeFullName: rfi === null || rfi === void 0 ? void 0 : rfi.assigeeFullName,\n      createdOn: claim === null || claim === void 0 ? void 0 : claim.createdDate,\n      description: rfi === null || rfi === void 0 ? void 0 : rfi.description,\n      targetDueDate: rfi === null || rfi === void 0 ? void 0 : rfi.targetDueDate,\n      taskRef: rfi === null || rfi === void 0 ? void 0 : rfi.queryId,\n      taskId: rfi === null || rfi === void 0 ? void 0 : rfi.bpmTaskId,\n      processDefKey: rfi === null || rfi === void 0 ? void 0 : rfi.processId,\n      processRef: claim === null || claim === void 0 ? void 0 : claim.claimRef,\n      policyRef: claim === null || claim === void 0 ? void 0 : claim.policyRef,\n      queryCode: rfi === null || rfi === void 0 ? void 0 : rfi.queryCode,\n      businessProcessID: rfi === null || rfi === void 0 ? void 0 : rfi.businessProcessID,\n      sourceID: rfi === null || rfi === void 0 ? void 0 : rfi.sourceID,\n      policyId: rfi === null || rfi === void 0 ? void 0 : rfi.policyId,\n      insured: claim === null || claim === void 0 ? void 0 : claim.assured,\n      lossDetails: claim === null || claim === void 0 ? void 0 : claim.lossDetails,\n      lossFromDate: claim === null || claim === void 0 ? void 0 : claim.lossFromDate,\n      lossToDate: claim === null || claim === void 0 ? void 0 : claim.lossToDate,\n      lossDetailID: claim === null || claim === void 0 ? void 0 : claim.lossDetailID,\n      lossRef: claim === null || claim === void 0 ? void 0 : claim.lossRef,\n      caseIncidentID: claim === null || claim === void 0 ? void 0 : claim.caseIncidentID,\n      requestedByFullName: rfi === null || rfi === void 0 ? void 0 : rfi.requestedByFullName,\n      requestedBy: rfi === null || rfi === void 0 ? void 0 : rfi.requestedBy,\n      rfiSentTo: rfi === null || rfi === void 0 ? void 0 : rfi.rfiSentTo,\n      departmentID: claim === null || claim === void 0 ? void 0 : claim.divisionID,\n      status: rfi === null || rfi === void 0 ? void 0 : rfi.status\n    };\n    dispatch(selectClaimsProcessingTasksSelected(selectedTask));\n    (rfi === null || rfi === void 0 ? void 0 : rfi.queryId) && history.push(\"\".concat(config.routes.claimsProcessing.rfi, \"/\").concat(rfi.queryId));\n  };\n\n  var _useFlexiColumns = useFlexiColumns(cols),\n      columnsArray = _useFlexiColumns.columns,\n      columnProps = _useFlexiColumns.columnProps;\n\n  var _useSort = useSort(columnsArray, claimRfisSort, sortColumn),\n      colsSorted = _useSort.cols,\n      sort = _useSort.sort;\n\n  var pagination = usePagination(claimRfis, claimRfisPagination, changePage, changeRowsPerPage);\n  return /*#__PURE__*/_jsxDEV(ClaimRefRfisView, {\n    rfis: claimRfis,\n    cols: colsSorted,\n    sort: sort,\n    pagination: pagination,\n    columnProps: columnProps,\n    filtersArray: filtersArray,\n    prioritiesList: prioritiesList,\n    resetKey: resetKey,\n    handlers: {\n      searchSubmit: searchSubmit,\n      filterSearchSubmit: filterSearchSubmit,\n      resetSubmit: resetSubmit,\n      clickRfiTask: clickRfiTask\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ClaimRefRfis, \"rMTTF26FKdvwgA49Q2Ua2lw7RkQ=\", false, function () {\n  return [useDispatch, useHistory, useSelector, useSelector, useSelector, useSelector, useSelector, useFlexiColumns, useSort, usePagination];\n});\n\n_c = ClaimRefRfis;\nClaimRefRfis.displayName = \"ClaimRefRfis\";\nClaimRefRfis.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"ClaimRefRfis\",\n  \"props\": {\n    \"claim\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\modules\\\\ClaimRefRfis\\\\ClaimRefRfis.js\"] = {\n    name: \"ClaimRefRfis\",\n    docgenInfo: ClaimRefRfis.__docgenInfo,\n    path: \"src\\\\modules\\\\ClaimRefRfis\\\\ClaimRefRfis.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimRefRfis\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ClaimRefRfis/ClaimRefRfis.js"],"names":["React","useEffect","useState","PropTypes","useDispatch","useSelector","useHistory","ClaimRefRfisView","selectClaimRfisSort","selectClaimRefRfiPagination","getClaimRfis","resetClaimRfis","selectClaimRefRfis","selectClaimRefRfiFilters","selectClaimsProcessingTasksSelected","getPriorityLevels","selectPriorities","MultiSelect","useFlexiColumns","useSort","usePagination","utils","config","ClaimRefRfis","propTypes","claim","object","isRequired","dispatch","claimRef","claimID","history","claimRfis","claimRfisFilters","claimRfisSort","claimRfisPagination","prioritiesList","searchText","setSearchText","resetKey","setResetKey","generic","isInvalidOrEmptyArray","cols","id","visible","label","string","t","sort","type","direction","filtersArray","value","options","queryCode","content","status","searchSubmit","search","Date","getTime","query","filterSearchSubmit","filters","resetSubmit","sortColumn","by","dir","sortBy","changePage","newPage","page","changeRowsPerPage","rowsPerPage","size","clickRfiTask","rfi","selectedTask","assigneeFullName","assigeeFullName","createdOn","createdDate","description","targetDueDate","taskRef","queryId","taskId","bpmTaskId","processDefKey","processId","processRef","policyRef","businessProcessID","sourceID","policyId","insured","assured","lossDetails","lossFromDate","lossToDate","lossDetailID","lossRef","caseIncidentID","requestedByFullName","requestedBy","rfiSentTo","departmentID","divisionID","push","routes","claimsProcessing","columnsArray","columns","columnProps","colsSorted","pagination"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\n\r\n// app\r\nimport ClaimRefRfisView from './ClaimRefRfis.view';\r\nimport {\r\n  selectClaimRfisSort,\r\n  selectClaimRefRfiPagination,\r\n  getClaimRfis,\r\n  resetClaimRfis,\r\n  selectClaimRefRfis,\r\n  selectClaimRefRfiFilters,\r\n  selectClaimsProcessingTasksSelected,\r\n  getPriorityLevels,\r\n  selectPriorities,\r\n} from 'stores';\r\nimport { MultiSelect } from 'components';\r\nimport { useFlexiColumns, useSort, usePagination } from 'hooks';\r\nimport * as utils from 'utils';\r\nimport config from 'config';\r\n\r\nClaimRefRfis.propTypes = {\r\n  claim: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default function ClaimRefRfis({ claim }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const { claimRef, claimID } = claim;\r\n  const history = useHistory();\r\n\r\n  const claimRfis = useSelector(selectClaimRefRfis);\r\n  const claimRfisFilters = useSelector(selectClaimRefRfiFilters);\r\n  const claimRfisSort = useSelector(selectClaimRfisSort);\r\n  const claimRfisPagination = useSelector(selectClaimRefRfiPagination);\r\n  const prioritiesList = useSelector(selectPriorities);\r\n\r\n  const [searchText, setSearchText] = useState('');\r\n  const [resetKey, setResetKey] = useState();\r\n  useEffect(() => {\r\n    if (claimID) {\r\n      dispatch(getClaimRfis({ claimID }));\r\n    } // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    // cleanup\r\n    return () => {\r\n      dispatch(resetClaimRfis());\r\n    };\r\n  }, [claimRef]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    if (utils.generic.isInvalidOrEmptyArray(prioritiesList)) dispatch(getPriorityLevels());\r\n  }, [dispatch, prioritiesList]);\r\n\r\n  const cols = [\r\n    {\r\n      id: 'queryId',\r\n      visible: true,\r\n      label: utils.string.t('claims.rfis.columns.queryID'),\r\n    },\r\n    {\r\n      id: 'rfiSentTo',\r\n      visible: true,\r\n      label: utils.string.t('claims.rfis.columns.to'),\r\n    },\r\n    {\r\n      id: 'queryCode',\r\n      visible: true,\r\n      label: utils.string.t('claims.rfis.columns.queryCode'),\r\n    },\r\n    {\r\n      id: 'queryCreatedOn',\r\n      sort: { type: 'date', direction: 'asc' },\r\n      visible: true,\r\n      label: utils.string.t('claims.rfis.columns.dateOfQuery'),\r\n    },\r\n    {\r\n      id: 'targetDueDate',\r\n      sort: { type: 'date', direction: 'asc' },\r\n      visible: true,\r\n      label: utils.string.t('claims.rfis.columns.targetDueDate'),\r\n    },\r\n    {\r\n      id: 'priority',\r\n      visible: true,\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      label: utils.string.t('claims.rfis.columns.priority'),\r\n    },\r\n    {\r\n      id: 'status',\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: true,\r\n      label: utils.string.t('claims.rfis.columns.status'),\r\n    },\r\n    {\r\n      id: 'description',\r\n      visible: true,\r\n      label: utils.string.t('claims.rfis.columns.description'),\r\n    },\r\n  ];\r\n\r\n  const filtersArray = [\r\n    {\r\n      id: 'queryCode',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('claims.rfis.columns.queryCode'),\r\n      value: [],\r\n      options: claimRfisFilters?.queryCode || [],\r\n      content: <MultiSelect id=\"queryCode\" search options={claimRfisFilters?.queryCode || []} />,\r\n    },\r\n    {\r\n      id: 'status',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('claims.rfis.columns.status'),\r\n      value: [],\r\n      options: claimRfisFilters?.status || [],\r\n      content: <MultiSelect id=\"status\" search options={claimRfisFilters?.status || []} />,\r\n    },\r\n  ];\r\n\r\n  const searchSubmit = ({ search }) => {\r\n    setResetKey(new Date().getTime());\r\n    setSearchText(search);\r\n    dispatch(getClaimRfis({ claimID, query: search }));\r\n  };\r\n\r\n  const filterSearchSubmit = ({ search, filters }) => {\r\n    dispatch(getClaimRfis({ claimID, query: search, filters }));\r\n  };\r\n\r\n  const resetSubmit = () => {\r\n    dispatch(getClaimRfis({ claimID, filters: {} }));\r\n  };\r\n\r\n  const sortColumn = (by, dir) => {\r\n    dispatch(getClaimRfis({ claimID, sortBy: by, direction: dir, query: searchText }));\r\n  };\r\n\r\n  const changePage = (newPage) => {\r\n    dispatch(getClaimRfis({ claimID, page: newPage, query: searchText }));\r\n  };\r\n\r\n  const changeRowsPerPage = (rowsPerPage) => {\r\n    dispatch(getClaimRfis({ claimID, size: rowsPerPage, query: searchText }));\r\n  };\r\n\r\n  const clickRfiTask = (rfi) => {\r\n    const selectedTask = {\r\n      assigneeFullName: rfi?.assigeeFullName,\r\n      createdOn: claim?.createdDate,\r\n      description: rfi?.description,\r\n      targetDueDate: rfi?.targetDueDate,\r\n      taskRef: rfi?.queryId,\r\n      taskId: rfi?.bpmTaskId,\r\n      processDefKey: rfi?.processId,\r\n      processRef: claim?.claimRef,\r\n      policyRef: claim?.policyRef,\r\n      queryCode: rfi?.queryCode,\r\n      businessProcessID: rfi?.businessProcessID,\r\n      sourceID: rfi?.sourceID,\r\n      policyId: rfi?.policyId,\r\n      insured: claim?.assured,\r\n      lossDetails: claim?.lossDetails,\r\n      lossFromDate: claim?.lossFromDate,\r\n      lossToDate: claim?.lossToDate,\r\n      lossDetailID: claim?.lossDetailID,\r\n      lossRef: claim?.lossRef,\r\n      caseIncidentID: claim?.caseIncidentID,\r\n      requestedByFullName: rfi?.requestedByFullName,\r\n      requestedBy: rfi?.requestedBy,\r\n      rfiSentTo: rfi?.rfiSentTo,\r\n      departmentID: claim?.divisionID,\r\n      status: rfi?.status\r\n    };\r\n    dispatch(selectClaimsProcessingTasksSelected(selectedTask));\r\n    rfi?.queryId && history.push(`${config.routes.claimsProcessing.rfi}/${rfi.queryId}`);\r\n  };\r\n\r\n  const { columns: columnsArray, columnProps } = useFlexiColumns(cols);\r\n  const { cols: colsSorted, sort } = useSort(columnsArray, claimRfisSort, sortColumn);\r\n  const pagination = usePagination(claimRfis, claimRfisPagination, changePage, changeRowsPerPage);\r\n\r\n  return (\r\n    <ClaimRefRfisView\r\n      rfis={claimRfis}\r\n      cols={colsSorted}\r\n      sort={sort}\r\n      pagination={pagination}\r\n      columnProps={columnProps}\r\n      filtersArray={filtersArray}\r\n      prioritiesList={prioritiesList}\r\n      resetKey={resetKey}\r\n      handlers={{\r\n        searchSubmit,\r\n        filterSearchSubmit,\r\n        resetSubmit,\r\n        clickRfiTask,\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}