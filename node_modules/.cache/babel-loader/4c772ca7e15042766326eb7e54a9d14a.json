{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ClaimsTasksTabTableRow\\\\ClaimsTasksTabTableRow.view.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames'; // app\n\nimport styles from './ClaimsTasksTabTableRow.style';\nimport { FormCheckbox, Link, TableCell, PopoverMenu } from 'components';\nimport * as utils from 'utils';\nimport { TASK_TAB_COMPLETED_STATUS, TASK_TAB_INPROGRESS_STATUS } from 'consts';\nimport config from 'config'; // mui\n\nimport { makeStyles, Box, TableRow } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function ClaimsTasksTabTableRowView(_ref) {\n  var _classesRow, _getStatus, _task$assigneeFullNam;\n\n  var caseTaskTypeView = _ref.caseTaskTypeView,\n      isTaskTeam = _ref.isTaskTeam,\n      task = _ref.task,\n      isSelected = _ref.isSelected,\n      columnProps = _ref.columnProps,\n      taskActionItems = _ref.taskActionItems,\n      handlers = _ref.handlers;\n  var classes = makeStyles(styles, {\n    name: 'ClaimsTasksTabTableRow'\n  })();\n  var classesRow = (_classesRow = {}, _defineProperty(_classesRow, classes.row, true), _defineProperty(_classesRow, classes.rowSelected, isSelected), _classesRow);\n\n  var getStatus = function getStatus(task) {\n    var _task$status, _task$status2, _task$status3;\n\n    var targetDate = new Date(task === null || task === void 0 ? void 0 : task.targetDueDate).getTime();\n    var createdDate = new Date(task === null || task === void 0 ? void 0 : task.createdOn).getTime();\n    var dateNow = new Date().getTime();\n    var targetDDMMYY = utils.string.t('format.date', {\n      value: {\n        date: task === null || task === void 0 ? void 0 : task.targetDueDate,\n        format: config.ui.format.date.slashNumeric\n      }\n    });\n    var dateNowDDMMYY = utils.string.t('format.date', {\n      value: {\n        date: new Date(),\n        format: config.ui.format.date.slashNumeric\n      }\n    });\n    if (targetDate > createdDate && (task === null || task === void 0 ? void 0 : (_task$status = task.status) === null || _task$status === void 0 ? void 0 : _task$status.toLowerCase()) === TASK_TAB_COMPLETED_STATUS.toLowerCase()) return {\n      type: 'success'\n    };else if (targetDate >= createdDate && targetDate > dateNow && targetDate !== dateNow && targetDDMMYY !== dateNowDDMMYY && (task === null || task === void 0 ? void 0 : (_task$status2 = task.status) === null || _task$status2 === void 0 ? void 0 : _task$status2.toLowerCase()) === TASK_TAB_INPROGRESS_STATUS.toLowerCase()) return {\n      type: 'success'\n    };else if (targetDate === dateNow || targetDDMMYY === dateNowDDMMYY) {\n      return {\n        type: 'alert'\n      };\n    } else if (targetDate <= dateNow && (task === null || task === void 0 ? void 0 : (_task$status3 = task.status) === null || _task$status3 === void 0 ? void 0 : _task$status3.toLowerCase()) === TASK_TAB_INPROGRESS_STATUS.toLowerCase()) return {\n      type: 'error',\n      dateAlert: true\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(TableRow, {\n    hover: true,\n    onClick: handlers.selectTask(task),\n    className: classnames(classesRow),\n    children: [/*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, columnProps('id')), {}, {\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        alignItems: \"center\",\n        children: /*#__PURE__*/_jsxDEV(FormCheckbox, {\n          name: \"checkbox-\".concat((task === null || task === void 0 ? void 0 : task.taskId) || (task === null || task === void 0 ? void 0 : task.processId)),\n          type: \"checkbox\",\n          value: isSelected,\n          nestedClasses: {\n            root: classes.checkbox\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, columnProps('taskRef')), {}, {\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        text: task === null || task === void 0 ? void 0 : task.taskRef,\n        color: \"secondary\",\n        onClick: handlers.clickTask(task)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, columnProps('createdOn')), {}, {\n      children: utils.string.t('format.date', {\n        value: {\n          date: task.createdOn,\n          format: config.ui.format.date.text\n        }\n      })\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, columnProps('taskType')), {}, {\n      children: task === null || task === void 0 ? void 0 : task.taskType\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, columnProps('description')), {}, {\n      title: task === null || task === void 0 ? void 0 : task.description,\n      nestedClasses: {\n        root: classes.description\n      },\n      children: task === null || task === void 0 ? void 0 : task.description\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, columnProps('targetDueDate')), {}, {\n      className: ((_getStatus = getStatus(task)) === null || _getStatus === void 0 ? void 0 : _getStatus.dateAlert) ? classes.dateAlert : '',\n      children: utils.string.t('format.date', {\n        value: {\n          date: task.targetDueDate,\n          format: config.ui.format.date.text\n        }\n      })\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, columnProps('assignee')), {}, {\n      children: task === null || task === void 0 ? void 0 : (_task$assigneeFullNam = task.assigneeFullName) === null || _task$assigneeFullNam === void 0 ? void 0 : _task$assigneeFullNam.trim()\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, columnProps('processRef')), {}, {\n      children: task === null || task === void 0 ? void 0 : task.processRef\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, columnProps('priority')), {}, {\n      children: task === null || task === void 0 ? void 0 : task.priority\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({}, columnProps('actions')), {}, {\n      children: /*#__PURE__*/_jsxDEV(PopoverMenu, {\n        id: \"search-menu-list\",\n        anchorOrigin: {\n          vertical: 'bottom',\n          horizontal: 'left'\n        },\n        transformOrigin: {\n          vertical: 'top',\n          horizontal: 'right'\n        },\n        items: taskActionItems\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_c = ClaimsTasksTabTableRowView;\nClaimsTasksTabTableRowView.displayName = \"ClaimsTasksTabTableRowView\";\nClaimsTasksTabTableRowView.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"ClaimsTasksTabTableRowView\"\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\modules\\\\ClaimsTasksTabTableRow\\\\ClaimsTasksTabTableRow.view.js\"] = {\n    name: \"ClaimsTasksTabTableRowView\",\n    docgenInfo: ClaimsTasksTabTableRowView.__docgenInfo,\n    path: \"src\\\\modules\\\\ClaimsTasksTabTableRow\\\\ClaimsTasksTabTableRow.view.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimsTasksTabTableRowView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ClaimsTasksTabTableRow/ClaimsTasksTabTableRow.view.js"],"names":["React","PropTypes","classnames","styles","FormCheckbox","Link","TableCell","PopoverMenu","utils","TASK_TAB_COMPLETED_STATUS","TASK_TAB_INPROGRESS_STATUS","config","makeStyles","Box","TableRow","ClaimsTasksTabTableRowView","caseTaskTypeView","isTaskTeam","task","isSelected","columnProps","taskActionItems","handlers","classes","name","classesRow","row","rowSelected","getStatus","targetDate","Date","targetDueDate","getTime","createdDate","createdOn","dateNow","targetDDMMYY","string","t","value","date","format","ui","slashNumeric","dateNowDDMMYY","status","toLowerCase","type","dateAlert","selectTask","taskId","processId","root","checkbox","taskRef","clickTask","text","taskType","description","assigneeFullName","trim","processRef","priority","vertical","horizontal"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CAEA;;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,SAASC,YAAT,EAAuBC,IAAvB,EAA6BC,SAA7B,EAAwCC,WAAxC,QAA4D,YAA5D;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,yBAAT,EAAoCC,0BAApC,QAAsE,QAAtE;AACA,OAAOC,MAAP,MAAmB,QAAnB,C,CAEA;;AACA,SAASC,UAAT,EAAqBC,GAArB,EAA0BC,QAA1B,QAA0C,mBAA1C;;AAGA,OAAO,SAASC,0BAAT,OAQJ;AAAA;;AAAA,MAPDC,gBAOC,QAPDA,gBAOC;AAAA,MANDC,UAMC,QANDA,UAMC;AAAA,MALDC,IAKC,QALDA,IAKC;AAAA,MAJDC,UAIC,QAJDA,UAIC;AAAA,MAHDC,WAGC,QAHDA,WAGC;AAAA,MAFDC,eAEC,QAFDA,eAEC;AAAA,MADDC,QACC,QADDA,QACC;AACD,MAAMC,OAAO,GAAGX,UAAU,CAACT,MAAD,EAAS;AAAEqB,IAAAA,IAAI,EAAE;AAAR,GAAT,CAAV,EAAhB;AAEA,MAAMC,UAAU,mDACbF,OAAO,CAACG,GADK,EACC,IADD,gCAEbH,OAAO,CAACI,WAFK,EAESR,UAFT,eAAhB;;AAKA,MAAMS,SAAS,GAAG,SAAZA,SAAY,CAACV,IAAD,EAAU;AAAA;;AAE1B,QAAMW,UAAU,GAAG,IAAIC,IAAJ,CAASZ,IAAT,aAASA,IAAT,uBAASA,IAAI,CAAEa,aAAf,EAA8BC,OAA9B,EAAnB;AACA,QAAMC,WAAW,GAAG,IAAIH,IAAJ,CAASZ,IAAT,aAASA,IAAT,uBAASA,IAAI,CAAEgB,SAAf,EAA0BF,OAA1B,EAApB;AACA,QAAMG,OAAO,GAAG,IAAIL,IAAJ,GAAWE,OAAX,EAAhB;AACA,QAAMI,YAAY,GAAG5B,KAAK,CAAC6B,MAAN,CAAaC,CAAb,CAAe,aAAf,EAA8B;AACjDC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,IAAI,EAAEtB,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEa,aAAd;AAA6BU,QAAAA,MAAM,EAAE9B,MAAM,CAAC+B,EAAP,CAAUD,MAAV,CAAiBD,IAAjB,CAAsBG;AAA3D;AAD0C,KAA9B,CAArB;AAGA,QAAMC,aAAa,GAAGpC,KAAK,CAAC6B,MAAN,CAAaC,CAAb,CAAe,aAAf,EAA8B;AAAEC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,IAAI,EAAE,IAAIV,IAAJ,EAAR;AAAoBW,QAAAA,MAAM,EAAE9B,MAAM,CAAC+B,EAAP,CAAUD,MAAV,CAAiBD,IAAjB,CAAsBG;AAAlD;AAAT,KAA9B,CAAtB;AACE,QAAId,UAAU,GAAGI,WAAb,IAA4B,CAAAf,IAAI,SAAJ,IAAAA,IAAI,WAAJ,4BAAAA,IAAI,CAAE2B,MAAN,8DAAcC,WAAd,QAAgCrC,yBAAyB,CAACqC,WAA1B,EAAhE,EAAyG,OAAO;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAP,CAAzG,KACK,IACHlB,UAAU,IAAII,WAAd,IACAJ,UAAU,GAAGM,OADb,IAEAN,UAAU,KAAKM,OAFf,IAGAC,YAAY,KAAKQ,aAHjB,IAIA,CAAA1B,IAAI,SAAJ,IAAAA,IAAI,WAAJ,6BAAAA,IAAI,CAAE2B,MAAN,gEAAcC,WAAd,QAAgCpC,0BAA0B,CAACoC,WAA3B,EAL7B,EAOH,OAAO;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAP,CAPG,KAQA,IAAIlB,UAAU,KAAKM,OAAf,IAA0BC,YAAY,KAAKQ,aAA/C,EAA8D;AACjE,aAAO;AAAEG,QAAAA,IAAI,EAAE;AAAR,OAAP;AACD,KAFI,MAEE,IAAIlB,UAAU,IAAIM,OAAd,IAAyB,CAAAjB,IAAI,SAAJ,IAAAA,IAAI,WAAJ,6BAAAA,IAAI,CAAE2B,MAAN,gEAAcC,WAAd,QAAgCpC,0BAA0B,CAACoC,WAA3B,EAA7D,EACL,OAAO;AAAEC,MAAAA,IAAI,EAAE,OAAR;AAAiBC,MAAAA,SAAS,EAAE;AAA5B,KAAP;AACL,GAtBD;;AAwBA,sBACE,QAAC,QAAD;AAAU,IAAA,KAAK,MAAf;AAAgB,IAAA,OAAO,EAAE1B,QAAQ,CAAC2B,UAAT,CAAoB/B,IAApB,CAAzB;AAAoD,IAAA,SAAS,EAAEhB,UAAU,CAACuB,UAAD,CAAzE;AAAA,4BACI,QAAC,SAAD,kCAAeL,WAAW,CAAC,IAAD,CAA1B;AAAA,6BACE,QAAC,GAAD;AAAK,QAAA,OAAO,EAAC,MAAb;AAAoB,QAAA,UAAU,EAAC,QAA/B;AAAA,+BACE,QAAC,YAAD;AACE,UAAA,IAAI,qBAAc,CAAAF,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEgC,MAAN,MAAgBhC,IAAhB,aAAgBA,IAAhB,uBAAgBA,IAAI,CAAEiC,SAAtB,CAAd,CADN;AAEE,UAAA,IAAI,EAAC,UAFP;AAGE,UAAA,KAAK,EAAEhC,UAHT;AAIE,UAAA,aAAa,EAAE;AAAEiC,YAAAA,IAAI,EAAE7B,OAAO,CAAC8B;AAAhB;AAJjB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADJ,eAWE,QAAC,SAAD,kCAAejC,WAAW,CAAC,SAAD,CAA1B;AAAA,6BACE,QAAC,IAAD;AAAM,QAAA,IAAI,EAAEF,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEoC,OAAlB;AAA2B,QAAA,KAAK,EAAC,WAAjC;AAA6C,QAAA,OAAO,EAAEhC,QAAQ,CAACiC,SAAT,CAAmBrC,IAAnB;AAAtD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAXF,eAcE,QAAC,SAAD,kCAAeE,WAAW,CAAC,WAAD,CAA1B;AAAA,gBACGZ,KAAK,CAAC6B,MAAN,CAAaC,CAAb,CAAe,aAAf,EAA8B;AAAEC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,IAAI,EAAEtB,IAAI,CAACgB,SAAb;AAAwBO,UAAAA,MAAM,EAAE9B,MAAM,CAAC+B,EAAP,CAAUD,MAAV,CAAiBD,IAAjB,CAAsBgB;AAAtD;AAAT,OAA9B;AADH;AAAA;AAAA;AAAA;AAAA,YAdF,eAiBE,QAAC,SAAD,kCAAepC,WAAW,CAAC,UAAD,CAA1B;AAAA,gBACGF,IADH,aACGA,IADH,uBACGA,IAAI,CAAEuC;AADT;AAAA;AAAA;AAAA;AAAA,YAjBF,eAqBE,QAAC,SAAD,kCAAerC,WAAW,CAAC,aAAD,CAA1B;AAA2C,MAAA,KAAK,EAAEF,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEwC,WAAxD;AAAqE,MAAA,aAAa,EAAE;AAAEN,QAAAA,IAAI,EAAE7B,OAAO,CAACmC;AAAhB,OAApF;AAAA,gBACGxC,IADH,aACGA,IADH,uBACGA,IAAI,CAAEwC;AADT;AAAA;AAAA;AAAA;AAAA,YArBF,eAyBE,QAAC,SAAD,kCAAetC,WAAW,CAAC,eAAD,CAA1B;AAA6C,MAAA,SAAS,EAAE,eAAAQ,SAAS,CAACV,IAAD,CAAT,0DAAiB8B,SAAjB,IAA6BzB,OAAO,CAACyB,SAArC,GAAiD,EAAzG;AAAA,gBACGxC,KAAK,CAAC6B,MAAN,CAAaC,CAAb,CAAe,aAAf,EAA8B;AAAEC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,IAAI,EAAEtB,IAAI,CAACa,aAAb;AAA4BU,UAAAA,MAAM,EAAE9B,MAAM,CAAC+B,EAAP,CAAUD,MAAV,CAAiBD,IAAjB,CAAsBgB;AAA1D;AAAT,OAA9B;AADH;AAAA;AAAA;AAAA;AAAA,YAzBF,eA4BE,QAAC,SAAD,kCAAepC,WAAW,CAAC,UAAD,CAA1B;AAAA,gBAAyCF,IAAzC,aAAyCA,IAAzC,gDAAyCA,IAAI,CAAEyC,gBAA/C,0DAAyC,sBAAwBC,IAAxB;AAAzC;AAAA;AAAA;AAAA;AAAA,YA5BF,eA6BE,QAAC,SAAD,kCAAexC,WAAW,CAAC,YAAD,CAA1B;AAAA,gBAA2CF,IAA3C,aAA2CA,IAA3C,uBAA2CA,IAAI,CAAE2C;AAAjD;AAAA;AAAA;AAAA;AAAA,YA7BF,eA8BE,QAAC,SAAD,kCAAezC,WAAW,CAAC,UAAD,CAA1B;AAAA,gBAAyCF,IAAzC,aAAyCA,IAAzC,uBAAyCA,IAAI,CAAE4C;AAA/C;AAAA;AAAA;AAAA;AAAA,YA9BF,eA+BI,QAAC,SAAD,kCAAe1C,WAAW,CAAC,SAAD,CAA1B;AAAA,6BACE,QAAC,WAAD;AACE,QAAA,EAAE,EAAC,kBADL;AAEE,QAAA,YAAY,EAAE;AACZ2C,UAAAA,QAAQ,EAAE,QADE;AAEZC,UAAAA,UAAU,EAAE;AAFA,SAFhB;AAME,QAAA,eAAe,EAAE;AACfD,UAAAA,QAAQ,EAAE,KADK;AAEfC,UAAAA,UAAU,EAAE;AAFG,SANnB;AAUE,QAAA,KAAK,EAAE3C;AAVT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YA/BJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgDD;KAxFeN,0B;AAAAA,0B","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames';\r\n\r\n// app\r\nimport styles from './ClaimsTasksTabTableRow.style';\r\nimport { FormCheckbox, Link, TableCell, PopoverMenu, } from 'components';\r\nimport * as utils from 'utils';\r\nimport { TASK_TAB_COMPLETED_STATUS, TASK_TAB_INPROGRESS_STATUS } from 'consts';\r\nimport config from 'config';\r\n\r\n// mui\r\nimport { makeStyles, Box, TableRow } from '@material-ui/core';\r\n\r\n\r\nexport function ClaimsTasksTabTableRowView({\r\n  caseTaskTypeView,\r\n  isTaskTeam,\r\n  task,\r\n  isSelected,\r\n  columnProps,\r\n  taskActionItems,\r\n  handlers,\r\n}) {\r\n  const classes = makeStyles(styles, { name: 'ClaimsTasksTabTableRow' })();\r\n\r\n  const classesRow = {\r\n    [classes.row]: true,\r\n    [classes.rowSelected]: isSelected,\r\n  };\r\n\r\n  const getStatus = (task) => {\r\n\r\n    const targetDate = new Date(task?.targetDueDate).getTime();\r\n    const createdDate = new Date(task?.createdOn).getTime();\r\n    const dateNow = new Date().getTime();\r\n    const targetDDMMYY = utils.string.t('format.date', {\r\n      value: { date: task?.targetDueDate, format: config.ui.format.date.slashNumeric },\r\n    });\r\n    const dateNowDDMMYY = utils.string.t('format.date', { value: { date: new Date(), format: config.ui.format.date.slashNumeric } });\r\n      if (targetDate > createdDate && task?.status?.toLowerCase() === TASK_TAB_COMPLETED_STATUS.toLowerCase()) return { type: 'success' };\r\n      else if (\r\n        targetDate >= createdDate &&\r\n        targetDate > dateNow &&\r\n        targetDate !== dateNow &&\r\n        targetDDMMYY !== dateNowDDMMYY &&\r\n        task?.status?.toLowerCase() === TASK_TAB_INPROGRESS_STATUS.toLowerCase()\r\n      )\r\n        return { type: 'success' };\r\n      else if (targetDate === dateNow || targetDDMMYY === dateNowDDMMYY) {\r\n        return { type: 'alert' };\r\n      } else if (targetDate <= dateNow && task?.status?.toLowerCase() === TASK_TAB_INPROGRESS_STATUS.toLowerCase())\r\n        return { type: 'error', dateAlert: true };\r\n  };\r\n\r\n  return (\r\n    <TableRow hover onClick={handlers.selectTask(task)} className={classnames(classesRow)}>\r\n        <TableCell {...columnProps('id')}>\r\n          <Box display=\"flex\" alignItems=\"center\">\r\n            <FormCheckbox\r\n              name={`checkbox-${task?.taskId || task?.processId}`}\r\n              type=\"checkbox\"\r\n              value={isSelected}\r\n              nestedClasses={{ root: classes.checkbox }}\r\n            />\r\n          </Box>\r\n        </TableCell>\r\n      <TableCell {...columnProps('taskRef')}>\r\n        <Link text={task?.taskRef} color=\"secondary\" onClick={handlers.clickTask(task)} />\r\n      </TableCell>\r\n      <TableCell {...columnProps('createdOn')}>\r\n        {utils.string.t('format.date', { value: { date: task.createdOn, format: config.ui.format.date.text } })}\r\n      </TableCell>\r\n      <TableCell {...columnProps('taskType')}>\r\n        {task?.taskType}\r\n      </TableCell>\r\n\r\n      <TableCell {...columnProps('description')} title={task?.description} nestedClasses={{ root: classes.description }}>\r\n        {task?.description}\r\n      </TableCell>\r\n\r\n      <TableCell {...columnProps('targetDueDate')} className={getStatus(task)?.dateAlert ? classes.dateAlert : ''}>\r\n        {utils.string.t('format.date', { value: { date: task.targetDueDate, format: config.ui.format.date.text } })}\r\n      </TableCell>\r\n      <TableCell {...columnProps('assignee')}>{task?.assigneeFullName?.trim()}</TableCell>\r\n      <TableCell {...columnProps('processRef')}>{task?.processRef}</TableCell>\r\n      <TableCell {...columnProps('priority')}>{task?.priority}</TableCell>\r\n        <TableCell {...columnProps('actions')}>\r\n          <PopoverMenu\r\n            id=\"search-menu-list\"\r\n            anchorOrigin={{\r\n              vertical: 'bottom',\r\n              horizontal: 'left',\r\n            }}\r\n            transformOrigin={{\r\n              vertical: 'top',\r\n              horizontal: 'right',\r\n            }}\r\n            items={taskActionItems}\r\n          />\r\n        </TableCell>\r\n    </TableRow>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}