{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport get from 'lodash/get';\nimport has from 'lodash/has';\nimport compact from 'lodash/compact'; // app\n\nimport { addLoader, authLogout, enqueueNotification, hideModal, removeLoader, updateSelectedPolicyMarket } from 'stores';\nimport * as utils from 'utils';\nexport var postPlacementEditQuote = function postPlacementEditQuote(data) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var policies = get(getState(), 'placement.selected.policies', []);\n    var policyMarket = utils.policies.getMarketById(policies, data.policyMarketId);\n    var market = get(policyMarket, 'market', {});\n    var isMarketUpdated = data.capacityTypeId && data.capacityTypeId !== market.capacityTypeId;\n    var defaultError = {\n      file: 'stores/placement.actions.editQuote',\n      message: 'Data missing for PUT request'\n    };\n    dispatch(postPlacementEditQuoteRequest(data));\n    dispatch(addLoader('postPlacementEditQuote'));\n\n    if (!data || !policyMarket || !policyMarket.id) {\n      dispatch(postPlacementEditQuoteFailure(defaultError));\n      dispatch(enqueueNotification('notification.editQuote.fail', 'error'));\n      dispatch(hideModal());\n      dispatch(removeLoader('postPlacementEditQuote'));\n      return;\n    } // create the body for PUT\n    // update the policyMarket object with edited data\n\n\n    var body = _objectSpread(_objectSpread({}, policyMarket), {}, {\n      statusId: has(data, 'statusId') ? data.statusId : policyMarket.statusId,\n      isLeader: data.isLeader,\n      lineToStand: data.lineToStand,\n      subjectivities: has(data, 'subjectivities') ? data.subjectivities : policyMarket.subjectivities,\n      quoteDate: has(data, 'quoteDate') ? data.quoteDate : policyMarket.quoteDate,\n      validUntilDate: has(data, 'validUntilDate') ? data.validUntilDate : policyMarket.validUntilDate,\n      premium: has(data, 'premium') ? data.premium === '' ? null : parseFloat(data.premium) : parseFloat(policyMarket.premium),\n      writtenLinePercentage: has(data, 'writtenLinePercentage') ? data.writtenLinePercentage === '' ? null : parseFloat(data.writtenLinePercentage) : parseFloat(policyMarket.writtenLinePercentage)\n    });\n\n    return Promise.all(compact([utils.api.put({\n      token: auth.accessToken,\n      endpoint: endpoint.edge,\n      path: \"api/policy/market/\".concat(policyMarket.id),\n      data: body\n    }), isMarketUpdated ? utils.api.patch({\n      token: auth.accessToken,\n      endpoint: endpoint.edge,\n      path: \"api/market/\".concat(market.id),\n      data: {\n        capacityTypeId: data.capacityTypeId\n      }\n    }) : null])).then(function (response) {\n      return Promise.all(response.map(function (r) {\n        return utils.api.handleResponse(r);\n      }));\n    }).then(function (json) {\n      return Promise.all(json.map(function (j) {\n        return utils.api.handleData(j);\n      }));\n    }).then(function (data) {\n      dispatch(postPlacementEditQuoteSuccess(_objectSpread(_objectSpread({}, data[0]), data[1] && {\n        market: data[1]\n      })));\n      dispatch(updateSelectedPolicyMarket());\n      dispatch(enqueueNotification('notification.editQuote.success', 'success'));\n      dispatch(hideModal());\n      dispatch(removeLoader('postPlacementEditQuote'));\n    })[\"catch\"](function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API put error (placement.editQuote)'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(postPlacementEditQuoteFailure(err));\n      dispatch(enqueueNotification('notification.editQuote.fail', 'error'));\n      dispatch(hideModal());\n      dispatch(removeLoader('postPlacementEditQuote'));\n      return err;\n    });\n  };\n};\nexport var postPlacementEditQuoteRequest = function postPlacementEditQuoteRequest(formData) {\n  return {\n    type: 'PLACEMENT_EDIT_QUOTE_POST_REQUEST',\n    payload: formData\n  };\n};\nexport var postPlacementEditQuoteSuccess = function postPlacementEditQuoteSuccess(responseData) {\n  return {\n    type: 'PLACEMENT_POLICY_MARKET_EDIT_POST_SUCCESS',\n    payload: responseData\n  };\n};\nexport var postPlacementEditQuoteFailure = function postPlacementEditQuoteFailure(error) {\n  return {\n    type: 'PLACEMENT_EDIT_QUOTE_POST_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/placement/placement.actions.editQuote.js"],"names":["get","has","compact","addLoader","authLogout","enqueueNotification","hideModal","removeLoader","updateSelectedPolicyMarket","utils","postPlacementEditQuote","data","dispatch","getState","auth","user","endpoint","config","vars","policies","policyMarket","getMarketById","policyMarketId","market","isMarketUpdated","capacityTypeId","defaultError","file","message","postPlacementEditQuoteRequest","id","postPlacementEditQuoteFailure","body","statusId","isLeader","lineToStand","subjectivities","quoteDate","validUntilDate","premium","parseFloat","writtenLinePercentage","Promise","all","api","put","token","accessToken","edge","path","patch","then","response","map","r","handleResponse","json","j","handleData","postPlacementEditQuoteSuccess","err","errorParams","handleError","handleUnauthorized","formData","type","payload","responseData","error"],"mappings":"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","sourcesContent":["import get from 'lodash/get';\r\nimport has from 'lodash/has';\r\nimport compact from 'lodash/compact';\r\n\r\n// app\r\nimport { addLoader, authLogout, enqueueNotification, hideModal, removeLoader, updateSelectedPolicyMarket } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const postPlacementEditQuote = (data) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  const policies = get(getState(), 'placement.selected.policies', []);\r\n  const policyMarket = utils.policies.getMarketById(policies, data.policyMarketId);\r\n  const market = get(policyMarket, 'market', {});\r\n  const isMarketUpdated = data.capacityTypeId && data.capacityTypeId !== market.capacityTypeId;\r\n\r\n  const defaultError = {\r\n    file: 'stores/placement.actions.editQuote',\r\n    message: 'Data missing for PUT request',\r\n  };\r\n\r\n  dispatch(postPlacementEditQuoteRequest(data));\r\n  dispatch(addLoader('postPlacementEditQuote'));\r\n\r\n  if (!data || !policyMarket || !policyMarket.id) {\r\n    dispatch(postPlacementEditQuoteFailure(defaultError));\r\n    dispatch(enqueueNotification('notification.editQuote.fail', 'error'));\r\n    dispatch(hideModal());\r\n    dispatch(removeLoader('postPlacementEditQuote'));\r\n    return;\r\n  }\r\n\r\n  // create the body for PUT\r\n  // update the policyMarket object with edited data\r\n  const body = {\r\n    ...policyMarket,\r\n    statusId: has(data, 'statusId') ? data.statusId : policyMarket.statusId,\r\n    isLeader: data.isLeader,\r\n    lineToStand: data.lineToStand,\r\n    subjectivities: has(data, 'subjectivities') ? data.subjectivities : policyMarket.subjectivities,\r\n    quoteDate: has(data, 'quoteDate') ? data.quoteDate : policyMarket.quoteDate,\r\n    validUntilDate: has(data, 'validUntilDate') ? data.validUntilDate : policyMarket.validUntilDate,\r\n    premium: has(data, 'premium') ? (data.premium === '' ? null : parseFloat(data.premium)) : parseFloat(policyMarket.premium),\r\n    writtenLinePercentage: has(data, 'writtenLinePercentage')\r\n      ? data.writtenLinePercentage === ''\r\n        ? null\r\n        : parseFloat(data.writtenLinePercentage)\r\n      : parseFloat(policyMarket.writtenLinePercentage),\r\n  };\r\n\r\n  return Promise.all(\r\n    compact([\r\n      utils.api.put({\r\n        token: auth.accessToken,\r\n        endpoint: endpoint.edge,\r\n        path: `api/policy/market/${policyMarket.id}`,\r\n        data: body,\r\n      }),\r\n      isMarketUpdated\r\n        ? utils.api.patch({\r\n            token: auth.accessToken,\r\n            endpoint: endpoint.edge,\r\n            path: `api/market/${market.id}`,\r\n            data: {\r\n              capacityTypeId: data.capacityTypeId,\r\n            },\r\n          })\r\n        : null,\r\n    ])\r\n  )\r\n    .then((response) => Promise.all(response.map((r) => utils.api.handleResponse(r))))\r\n    .then((json) => Promise.all(json.map((j) => utils.api.handleData(j))))\r\n    .then((data) => {\r\n      dispatch(\r\n        postPlacementEditQuoteSuccess({\r\n          ...data[0],\r\n          ...(data[1] && { market: data[1] }),\r\n        })\r\n      );\r\n      dispatch(updateSelectedPolicyMarket());\r\n      dispatch(enqueueNotification('notification.editQuote.success', 'success'));\r\n      dispatch(hideModal());\r\n      dispatch(removeLoader('postPlacementEditQuote'));\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        ...defaultError,\r\n        message: 'API put error (placement.editQuote)',\r\n      };\r\n\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(postPlacementEditQuoteFailure(err));\r\n      dispatch(enqueueNotification('notification.editQuote.fail', 'error'));\r\n      dispatch(hideModal());\r\n      dispatch(removeLoader('postPlacementEditQuote'));\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const postPlacementEditQuoteRequest = (formData) => {\r\n  return {\r\n    type: 'PLACEMENT_EDIT_QUOTE_POST_REQUEST',\r\n    payload: formData,\r\n  };\r\n};\r\n\r\nexport const postPlacementEditQuoteSuccess = (responseData) => {\r\n  return {\r\n    type: 'PLACEMENT_POLICY_MARKET_EDIT_POST_SUCCESS',\r\n    payload: responseData,\r\n  };\r\n};\r\n\r\nexport const postPlacementEditQuoteFailure = (error) => {\r\n  return {\r\n    type: 'PLACEMENT_EDIT_QUOTE_POST_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}