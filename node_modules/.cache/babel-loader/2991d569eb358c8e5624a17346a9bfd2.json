{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ClaimRefAuditTrail\\\\ClaimRefAuditTrail.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useForm } from 'react-hook-form'; // app\n\nimport ClaimRefAuditTrailView from './ClaimRefAuditTrail.view';\nimport { FormDate } from 'components';\nimport { getClaimAudits, resetClaimAuditsFilters, resetClaimAuditsItems, resetClaimAuditsSearch, selectClaimAudits, selectClaimAuditsPagination, selectClaimAuditsSort } from 'stores';\nimport { useFlexiColumns, usePagination, useSort } from 'hooks';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nClaimRefAuditTrail.propTypes = {\n  claim: PropTypes.object.isRequired\n};\nexport default function ClaimRefAuditTrail(_ref) {\n  _s();\n\n  var claim = _ref.claim;\n  var dispatch = useDispatch();\n  var claimAudits = useSelector(selectClaimAudits);\n  var claimAuditsSort = useSelector(selectClaimAuditsSort);\n  var claimAuditsPagination = useSelector(selectClaimAuditsPagination);\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      searchText = _useState2[0],\n      setSearchText = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      filterData = _useState4[0],\n      setFilterData = _useState4[1];\n\n  var claimID = claim.claimID;\n  useEffect(function () {\n    // cleanup\n    return function () {\n      dispatch(resetClaimAuditsSearch());\n      dispatch(resetClaimAuditsFilters());\n      dispatch(resetClaimAuditsItems());\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    if (claimID) {\n      dispatch(getClaimAudits({\n        claimID: claimID\n      }));\n    }\n  }, [claimID]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var searchSubmit = function searchSubmit(_ref2) {\n    var search = _ref2.search;\n    setSearchText(search);\n    dispatch(getClaimAudits({\n      claimID: claimID,\n      query: search,\n      filterTerm: filterData\n    }));\n  };\n\n  var onResetFilter = function onResetFilter() {\n    dispatch(getClaimAudits({\n      claimID: claimID,\n      query: searchText,\n      filterTerm: {}\n    }));\n    setFilterData([]);\n    reset();\n  };\n\n  var onResetSearch = function onResetSearch() {\n    dispatch(getClaimAudits({\n      claimID: claimID,\n      filterTerm: filterData\n    }));\n  };\n\n  var handleSearchFilter = function handleSearchFilter(_ref3) {\n    var search = _ref3.search,\n        filters = _ref3.filters;\n    setFilterData(filters);\n    dispatch(getClaimAudits({\n      claimID: claimID,\n      query: search,\n      filterTerm: filters\n    }));\n  };\n\n  var sortColumn = function sortColumn(by, dir) {\n    dispatch(getClaimAudits({\n      claimID: claimID,\n      sortBy: by,\n      direction: dir,\n      query: searchText\n    }));\n  };\n\n  var changePage = function changePage(newPage) {\n    dispatch(getClaimAudits({\n      claimID: claimID,\n      page: newPage,\n      query: searchText\n    }));\n  };\n\n  var changeRowsPerPage = function changeRowsPerPage(rowsPerPage) {\n    dispatch(getClaimAudits({\n      claimID: claimID,\n      size: rowsPerPage,\n      query: searchText\n    }));\n  };\n\n  var cols = [{\n    id: 'createdDate',\n    sort: {\n      type: 'date',\n      direction: 'desc'\n    },\n    visible: true,\n    label: utils.string.t('claims.audits.columns.changedDateTime')\n  }, {\n    id: 'eventName',\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true,\n    label: utils.string.t('claims.audits.columns.event')\n  }, {\n    id: 'createdBy',\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true,\n    label: utils.string.t('claims.audits.columns.changedBy')\n  }, {\n    id: 'oldValue',\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true,\n    label: utils.string.t('claims.audits.columns.oldValue')\n  }, {\n    id: 'newValue',\n    sort: {\n      type: 'date',\n      direction: 'asc'\n    },\n    visible: true,\n    label: utils.string.t('claims.audits.columns.newValue')\n  }];\n  var defaultFormFields = [{\n    name: 'createdDate',\n    type: 'datepicker',\n    value: null\n  }];\n  var defaultValues = utils.form.getInitialValues(defaultFormFields);\n\n  var _useForm = useForm({\n    defaultValues: defaultValues\n  }),\n      control = _useForm.control,\n      reset = _useForm.reset;\n\n  var filtersArray = [{\n    id: 'createdDate',\n    type: 'datepicker',\n    label: utils.string.t('claims.audits.columns.changedDateTime'),\n    value: '',\n    content: /*#__PURE__*/_jsxDEV(FormDate, _objectSpread(_objectSpread({\n      control: control\n    }, utils.form.getFieldProps(defaultFormFields, 'createdDate')), {}, {\n      id: \"datepicker\",\n      label: '',\n      plainText: true,\n      plainTextIcon: true,\n      placeholder: utils.string.t('app.selectDate'),\n      muiComponentProps: {\n        fullWidth: false,\n        margin: 'dense'\n      },\n      muiPickerProps: {\n        clearable: false,\n        variant: 'inline',\n        format: 'DD-MM-YYYY'\n      }\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }, this)\n  }];\n\n  var _useFlexiColumns = useFlexiColumns(cols),\n      columnsArray = _useFlexiColumns.columns,\n      columnProps = _useFlexiColumns.columnProps;\n\n  var _useSort = useSort(columnsArray, claimAuditsSort, sortColumn),\n      colsSorted = _useSort.cols,\n      sort = _useSort.sort;\n\n  var pagination = usePagination(claimAudits, claimAuditsPagination, changePage, changeRowsPerPage);\n  return /*#__PURE__*/_jsxDEV(ClaimRefAuditTrailView, {\n    audits: claimAudits,\n    cols: colsSorted,\n    columnProps: columnProps,\n    filtersArray: filtersArray,\n    sort: sort,\n    pagination: pagination,\n    handlers: {\n      searchSubmit: searchSubmit,\n      onResetSearch: onResetSearch,\n      onResetFilter: onResetFilter,\n      handleSearchFilter: handleSearchFilter\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ClaimRefAuditTrail, \"VU47WDjTkTMHLQ1ZAJdrvoCP3SI=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useForm, useFlexiColumns, useSort, usePagination];\n});\n\n_c = ClaimRefAuditTrail;\nClaimRefAuditTrail.displayName = \"ClaimRefAuditTrail\";\nClaimRefAuditTrail.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"ClaimRefAuditTrail\",\n  \"props\": {\n    \"claim\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\modules\\\\ClaimRefAuditTrail\\\\ClaimRefAuditTrail.js\"] = {\n    name: \"ClaimRefAuditTrail\",\n    docgenInfo: ClaimRefAuditTrail.__docgenInfo,\n    path: \"src\\\\modules\\\\ClaimRefAuditTrail\\\\ClaimRefAuditTrail.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimRefAuditTrail\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ClaimRefAuditTrail/ClaimRefAuditTrail.js"],"names":["React","useState","useEffect","PropTypes","useDispatch","useSelector","useForm","ClaimRefAuditTrailView","FormDate","getClaimAudits","resetClaimAuditsFilters","resetClaimAuditsItems","resetClaimAuditsSearch","selectClaimAudits","selectClaimAuditsPagination","selectClaimAuditsSort","useFlexiColumns","usePagination","useSort","utils","ClaimRefAuditTrail","propTypes","claim","object","isRequired","dispatch","claimAudits","claimAuditsSort","claimAuditsPagination","searchText","setSearchText","filterData","setFilterData","claimID","searchSubmit","search","query","filterTerm","onResetFilter","reset","onResetSearch","handleSearchFilter","filters","sortColumn","by","dir","sortBy","direction","changePage","newPage","page","changeRowsPerPage","rowsPerPage","size","cols","id","sort","type","visible","label","string","t","defaultFormFields","name","value","defaultValues","form","getInitialValues","control","filtersArray","content","getFieldProps","fullWidth","margin","clearable","variant","format","columnsArray","columns","columnProps","colsSorted","pagination"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useForm } from 'react-hook-form';\r\n\r\n// app\r\nimport ClaimRefAuditTrailView from './ClaimRefAuditTrail.view';\r\nimport { FormDate } from 'components';\r\nimport {\r\n  getClaimAudits,\r\n  resetClaimAuditsFilters,\r\n  resetClaimAuditsItems,\r\n  resetClaimAuditsSearch,\r\n  selectClaimAudits,\r\n  selectClaimAuditsPagination,\r\n  selectClaimAuditsSort,\r\n} from 'stores';\r\nimport { useFlexiColumns, usePagination, useSort } from 'hooks';\r\nimport * as utils from 'utils';\r\n\r\nClaimRefAuditTrail.propTypes = {\r\n  claim: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default function ClaimRefAuditTrail({ claim }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const claimAudits = useSelector(selectClaimAudits);\r\n  const claimAuditsSort = useSelector(selectClaimAuditsSort);\r\n  const claimAuditsPagination = useSelector(selectClaimAuditsPagination);\r\n\r\n  const [searchText, setSearchText] = useState('');\r\n  const [filterData, setFilterData] = useState([]);\r\n\r\n  const { claimID } = claim;\r\n\r\n  useEffect(() => {\r\n    // cleanup\r\n    return () => {\r\n      dispatch(resetClaimAuditsSearch());\r\n      dispatch(resetClaimAuditsFilters());\r\n      dispatch(resetClaimAuditsItems());\r\n    };\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {\r\n    if (claimID) {\r\n      dispatch(getClaimAudits({ claimID }));\r\n    }\r\n  }, [claimID]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const searchSubmit = ({ search }) => {\r\n    setSearchText(search);\r\n    dispatch(getClaimAudits({ claimID, query: search, filterTerm: filterData }));\r\n  };\r\n\r\n  const onResetFilter = () => {\r\n    dispatch(getClaimAudits({ claimID, query: searchText, filterTerm: {} }));\r\n    setFilterData([]);\r\n    reset();\r\n  };\r\n\r\n  const onResetSearch = () => {\r\n    dispatch(getClaimAudits({ claimID, filterTerm: filterData }));\r\n  };\r\n\r\n  const handleSearchFilter = ({ search, filters }) => {\r\n    setFilterData(filters);\r\n    dispatch(getClaimAudits({ claimID, query: search, filterTerm: filters }));\r\n  };\r\n\r\n  const sortColumn = (by, dir) => {\r\n    dispatch(getClaimAudits({ claimID, sortBy: by, direction: dir, query: searchText }));\r\n  };\r\n\r\n  const changePage = (newPage) => {\r\n    dispatch(getClaimAudits({ claimID, page: newPage, query: searchText }));\r\n  };\r\n\r\n  const changeRowsPerPage = (rowsPerPage) => {\r\n    dispatch(getClaimAudits({ claimID, size: rowsPerPage, query: searchText }));\r\n  };\r\n\r\n  const cols = [\r\n    {\r\n      id: 'createdDate',\r\n      sort: { type: 'date', direction: 'desc' },\r\n      visible: true,\r\n      label: utils.string.t('claims.audits.columns.changedDateTime'),\r\n    },\r\n    {\r\n      id: 'eventName',\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: true,\r\n      label: utils.string.t('claims.audits.columns.event'),\r\n    },\r\n    {\r\n      id: 'createdBy',\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: true,\r\n      label: utils.string.t('claims.audits.columns.changedBy'),\r\n    },\r\n    {\r\n      id: 'oldValue',\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: true,\r\n      label: utils.string.t('claims.audits.columns.oldValue'),\r\n    },\r\n    {\r\n      id: 'newValue',\r\n      sort: { type: 'date', direction: 'asc' },\r\n      visible: true,\r\n      label: utils.string.t('claims.audits.columns.newValue'),\r\n    },\r\n  ];\r\n\r\n  const defaultFormFields = [\r\n    {\r\n      name: 'createdDate',\r\n      type: 'datepicker',\r\n      value: null,\r\n    },\r\n  ];\r\n\r\n  const defaultValues = utils.form.getInitialValues(defaultFormFields);\r\n  const { control, reset } = useForm({ defaultValues });\r\n\r\n  const filtersArray = [\r\n    {\r\n      id: 'createdDate',\r\n      type: 'datepicker',\r\n      label: utils.string.t('claims.audits.columns.changedDateTime'),\r\n      value: '',\r\n      content: (\r\n        <FormDate\r\n          control={control}\r\n          {...utils.form.getFieldProps(defaultFormFields, 'createdDate')}\r\n          id=\"datepicker\"\r\n          label={''}\r\n          plainText\r\n          plainTextIcon\r\n          placeholder={utils.string.t('app.selectDate')}\r\n          muiComponentProps={{\r\n            fullWidth: false,\r\n            margin: 'dense',\r\n          }}\r\n          muiPickerProps={{\r\n            clearable: false,\r\n            variant: 'inline',\r\n            format: 'DD-MM-YYYY',\r\n          }}\r\n        />\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const { columns: columnsArray, columnProps } = useFlexiColumns(cols);\r\n  const { cols: colsSorted, sort } = useSort(columnsArray, claimAuditsSort, sortColumn);\r\n  const pagination = usePagination(claimAudits, claimAuditsPagination, changePage, changeRowsPerPage);\r\n\r\n  return (\r\n    <ClaimRefAuditTrailView\r\n      audits={claimAudits}\r\n      cols={colsSorted}\r\n      columnProps={columnProps}\r\n      filtersArray={filtersArray}\r\n      sort={sort}\r\n      pagination={pagination}\r\n      handlers={{\r\n        searchSubmit,\r\n        onResetSearch,\r\n        onResetFilter,\r\n        handleSearchFilter,\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}