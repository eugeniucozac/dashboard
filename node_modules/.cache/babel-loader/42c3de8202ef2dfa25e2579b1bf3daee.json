{"ast":null,"code":"import { authLogout, addLoader, removeLoader } from 'stores';\nimport * as utils from 'utils';\nexport var getCurrencyPurchasedValue = function getCurrencyPurchasedValue(taskID) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/claims.actions.getCurrencyPurchased'\n    };\n    dispatch(getCurrencyPurchasedValueRequest());\n    dispatch(addLoader('getCurrencyPurchasedValue'));\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.bpmService,\n      path: \"/workflow/process/task/\".concat(taskID, \"/purchaseCurrency\")\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(getCurrencyPurchasedValueSuccess(data));\n      return data;\n    }).catch(function (err) {\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(getCurrencyPurchasedValueFailure(err, defaultError));\n      return err;\n    }).finally(function () {\n      dispatch(removeLoader('getCurrencyPurchasedValue'));\n    });\n  };\n};\nexport var getCurrencyPurchasedValueRequest = function getCurrencyPurchasedValueRequest(data) {\n  return {\n    type: 'CURRENCY_PURCHASED_VALUE_GET_REQUEST',\n    payload: data\n  };\n};\nexport var getCurrencyPurchasedValueSuccess = function getCurrencyPurchasedValueSuccess(data) {\n  return {\n    type: 'CURRENCY_PURCHASED_VALUE_GET_SUCCESS',\n    payload: data\n  };\n};\nexport var getCurrencyPurchasedValueFailure = function getCurrencyPurchasedValueFailure(error) {\n  return {\n    type: 'CURRENCY_PURCHASED_VALUE_GET_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.getCurrencyPurchased.js"],"names":["authLogout","addLoader","removeLoader","utils","getCurrencyPurchasedValue","taskID","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","getCurrencyPurchasedValueRequest","api","get","token","accessToken","bpmService","path","then","response","handleResponse","json","handleNewData","data","getCurrencyPurchasedValueSuccess","catch","err","handleUnauthorized","getCurrencyPurchasedValueFailure","finally","type","payload","error"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,YAAhC,QAAoD,QAApD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAO,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACC,MAAD;AAAA,SAAY,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC3E;AAD2E,oBAEnBA,QAAQ,EAFW;AAAA,QAE5DC,IAF4D,aAEpEC,IAFoE,CAE5DD,IAF4D;AAAA,QAElCE,QAFkC,aAEpDC,MAFoD,CAE1CC,IAF0C,CAElCF,QAFkC;;AAI3E,QAAMG,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE;AADa,KAArB;AAIAR,IAAAA,QAAQ,CAACS,gCAAgC,EAAjC,CAAR;AACAT,IAAAA,QAAQ,CAACL,SAAS,CAAC,2BAAD,CAAV,CAAR;AAEA,WAAOE,KAAK,CAACa,GAAN,CACJC,GADI,CACA;AACHC,MAAAA,KAAK,EAAEV,IAAI,CAACW,WADT;AAEHT,MAAAA,QAAQ,EAAEA,QAAQ,CAACU,UAFhB;AAGHC,MAAAA,IAAI,mCAA4BhB,MAA5B;AAHD,KADA,EAMJiB,IANI,CAMC,UAACC,QAAD;AAAA,aAAcpB,KAAK,CAACa,GAAN,CAAUQ,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAND,EAOJD,IAPI,CAOC,UAACG,IAAD;AAAA,aAAUtB,KAAK,CAACa,GAAN,CAAUU,aAAV,CAAwBD,IAAxB,CAAV;AAAA,KAPD,EAQJH,IARI,CAQC,UAACK,IAAD,EAAU;AACdrB,MAAAA,QAAQ,CAACsB,gCAAgC,CAACD,IAAD,CAAjC,CAAR;AACA,aAAOA,IAAP;AACD,KAXI,EAYJE,KAZI,CAYE,UAACC,GAAD,EAAS;AACd3B,MAAAA,KAAK,CAACa,GAAN,CAAUe,kBAAV,CAA6BD,GAA7B,EAAkCxB,QAAlC,EAA4CN,UAA5C;AACAM,MAAAA,QAAQ,CAAC0B,gCAAgC,CAACF,GAAD,EAAMjB,YAAN,CAAjC,CAAR;AACA,aAAOiB,GAAP;AACD,KAhBI,EAiBJG,OAjBI,CAiBI,YAAM;AACb3B,MAAAA,QAAQ,CAACJ,YAAY,CAAC,2BAAD,CAAb,CAAR;AACD,KAnBI,CAAP;AAoBD,GA/BwC;AAAA,CAAlC;AAiCP,OAAO,IAAMa,gCAAgC,GAAG,SAAnCA,gCAAmC,CAACY,IAAD,EAAU;AACxD,SAAO;AACLO,IAAAA,IAAI,EAAE,sCADD;AAELC,IAAAA,OAAO,EAAER;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMC,gCAAgC,GAAG,SAAnCA,gCAAmC,CAACD,IAAD,EAAU;AACxD,SAAO;AACLO,IAAAA,IAAI,EAAE,sCADD;AAELC,IAAAA,OAAO,EAAER;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMK,gCAAgC,GAAG,SAAnCA,gCAAmC,CAACI,KAAD,EAAW;AACzD,SAAO;AACLF,IAAAA,IAAI,EAAE,sCADD;AAELC,IAAAA,OAAO,EAAEC;AAFJ,GAAP;AAID,CALM","sourcesContent":["import { authLogout, addLoader, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const getCurrencyPurchasedValue = (taskID) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const {user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.getCurrencyPurchased',\r\n  };\r\n\r\n  dispatch(getCurrencyPurchasedValueRequest());\r\n  dispatch(addLoader('getCurrencyPurchasedValue'));\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.bpmService,\r\n      path: `/workflow/process/task/${taskID}/purchaseCurrency`,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(getCurrencyPurchasedValueSuccess(data));\r\n      return data;\r\n    })\r\n    .catch((err) => {\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(getCurrencyPurchasedValueFailure(err, defaultError));\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('getCurrencyPurchasedValue'));\r\n    });\r\n};\r\n\r\nexport const getCurrencyPurchasedValueRequest = (data) => {\r\n  return {\r\n    type: 'CURRENCY_PURCHASED_VALUE_GET_REQUEST',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const getCurrencyPurchasedValueSuccess = (data) => {\r\n  return {\r\n    type: 'CURRENCY_PURCHASED_VALUE_GET_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const getCurrencyPurchasedValueFailure = (error) => {\r\n  return {\r\n    type: 'CURRENCY_PURCHASED_VALUE_GET_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}