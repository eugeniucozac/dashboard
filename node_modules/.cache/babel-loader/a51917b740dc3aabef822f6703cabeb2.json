{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { authLogout, addLoader, removeLoader, enqueueNotification, hideModal } from 'stores';\nimport * as constants from 'consts';\nimport * as utils from 'utils';\nexport var bulkAssignClaims = function bulkAssignClaims(claims, teams, formData) {\n  return function (dispatch, getState) {\n    var _formData$assignTo, _formData$assignTo$or, _organisation$id;\n\n    // prettier-ignore\n    var _getState = getState(),\n        _getState$user = _getState.user,\n        auth = _getState$user.auth,\n        organisation = _getState$user.organisation,\n        endpoint = _getState.config.vars.endpoint;\n\n    var assignTo = formData.assignTo,\n        notes = formData.notes,\n        team = formData.team,\n        complexity = formData.complexity;\n    var defaultError = {\n      file: 'stores/claims.actions.bulkAssignClaims'\n    };\n    dispatch(bulkAssignClaimsRequest(claims, teams, formData));\n    dispatch(addLoader('bulkAssignClaims'));\n\n    if (utils.generic.isInvalidOrEmptyArray(claims) || utils.generic.isInvalidOrEmptyArray(teams) || !team) {\n      dispatch(bulkAssignClaimsFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Missing request params'\n      })));\n    }\n\n    var isAssigneeOnSameTeam = (formData === null || formData === void 0 ? void 0 : (_formData$assignTo = formData.assignTo) === null || _formData$assignTo === void 0 ? void 0 : (_formData$assignTo$or = _formData$assignTo.organisationId) === null || _formData$assignTo$or === void 0 ? void 0 : _formData$assignTo$or.toString()) === (organisation === null || organisation === void 0 ? void 0 : (_organisation$id = organisation.id) === null || _organisation$id === void 0 ? void 0 : _organisation$id.toString());\n    var postPayload = {\n      note: notes,\n      assignTo: (assignTo === null || assignTo === void 0 ? void 0 : assignTo.email) || null,\n      organizationId: isAssigneeOnSameTeam ? null : constants.ORGANIZATIONS[team].id,\n      organizationName: isAssigneeOnSameTeam ? null : constants.ORGANIZATIONS[team].label,\n      complexityRuleId: (complexity === null || complexity === void 0 ? void 0 : complexity.complexityRulesID) || null,\n      processDetail: claims.map(function (claim) {\n        return {\n          claimID: claim.claimID,\n          caseIncidentID: claim.caseIncidentID,\n          processId: claim.processID\n        };\n      })\n    };\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.bpmService,\n      path: 'workflow/process/claim/updateAssignee',\n      data: postPayload\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(bulkAssignClaimsSuccess(data.data));\n      dispatch(enqueueNotification(utils.string.t('claims.processing.bulkAssign.notifications.claims.success'), 'success'));\n      return data;\n    })[\"catch\"](function (error) {\n      dispatch(bulkAssignClaimsFailure(error, defaultError));\n      dispatch(enqueueNotification(utils.string.t('claims.processing.bulkAssign.notifications.claims.failure'), 'error'));\n      utils.api.handleUnauthorized(error, dispatch, authLogout);\n      return error;\n    })[\"finally\"](function () {\n      dispatch(hideModal());\n      dispatch(removeLoader('bulkAssignClaims'));\n    });\n  };\n};\nexport var bulkAssignClaimsRequest = function bulkAssignClaimsRequest(claims, teams, formData) {\n  return {\n    type: 'CLAIMS_PROCESSING_BULK_ASSIGN_REQUEST',\n    payload: {\n      claims: claims,\n      teams: teams,\n      formData: formData\n    }\n  };\n};\nexport var bulkAssignClaimsSuccess = function bulkAssignClaimsSuccess(data) {\n  return {\n    type: 'CLAIMS_PROCESSING_BULK_ASSIGN_SUCCESS',\n    payload: data\n  };\n};\nexport var bulkAssignClaimsFailure = function bulkAssignClaimsFailure(error) {\n  return {\n    type: 'CLAIMS_PROCESSING_BULK_ASSIGN_ERROR',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.bulkAssignClaims.js"],"names":["authLogout","addLoader","removeLoader","enqueueNotification","hideModal","constants","utils","bulkAssignClaims","claims","teams","formData","dispatch","getState","user","auth","organisation","endpoint","config","vars","assignTo","notes","team","complexity","defaultError","file","bulkAssignClaimsRequest","generic","isInvalidOrEmptyArray","bulkAssignClaimsFailure","message","isAssigneeOnSameTeam","organisationId","toString","id","postPayload","note","email","organizationId","ORGANIZATIONS","organizationName","label","complexityRuleId","complexityRulesID","processDetail","map","claim","claimID","caseIncidentID","processId","processID","api","post","token","accessToken","bpmService","path","data","then","response","handleResponse","json","handleNewData","bulkAssignClaimsSuccess","string","t","error","handleUnauthorized","type","payload"],"mappings":"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","sourcesContent":["import { authLogout, addLoader, removeLoader, enqueueNotification, hideModal } from 'stores';\r\nimport * as constants from 'consts';\r\nimport * as utils from 'utils';\r\n\r\nexport const bulkAssignClaims = (claims, teams, formData) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth, organisation }, config: { vars: { endpoint }}} = getState();\r\n\r\n  const { assignTo, notes, team, complexity } = formData;\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.bulkAssignClaims',\r\n  };\r\n\r\n  dispatch(bulkAssignClaimsRequest(claims, teams, formData));\r\n  dispatch(addLoader('bulkAssignClaims'));\r\n\r\n  if (utils.generic.isInvalidOrEmptyArray(claims) || utils.generic.isInvalidOrEmptyArray(teams) || !team) {\r\n    dispatch(bulkAssignClaimsFailure({ ...defaultError, message: 'Missing request params' }));\r\n  }\r\n\r\n  const isAssigneeOnSameTeam = formData?.assignTo?.organisationId?.toString() === organisation?.id?.toString();\r\n\r\n  const postPayload = {\r\n    note: notes,\r\n    assignTo: assignTo?.email || null,\r\n    organizationId: isAssigneeOnSameTeam ? null : constants.ORGANIZATIONS[team].id,\r\n    organizationName: isAssigneeOnSameTeam ? null : constants.ORGANIZATIONS[team].label,\r\n    complexityRuleId: complexity?.complexityRulesID || null,\r\n    processDetail: claims.map((claim) => ({\r\n      claimID: claim.claimID,\r\n      caseIncidentID: claim.caseIncidentID,\r\n      processId: claim.processID,\r\n    })),\r\n  };\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.bpmService,\r\n      path: 'workflow/process/claim/updateAssignee',\r\n      data: postPayload,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(bulkAssignClaimsSuccess(data.data));\r\n      dispatch(enqueueNotification(utils.string.t('claims.processing.bulkAssign.notifications.claims.success'), 'success'));\r\n      return data;\r\n    })\r\n    .catch((error) => {\r\n      dispatch(bulkAssignClaimsFailure(error, defaultError));\r\n      dispatch(enqueueNotification(utils.string.t('claims.processing.bulkAssign.notifications.claims.failure'), 'error'));\r\n      utils.api.handleUnauthorized(error, dispatch, authLogout);\r\n      return error;\r\n    })\r\n    .finally(() => {\r\n      dispatch(hideModal());\r\n      dispatch(removeLoader('bulkAssignClaims'));\r\n    });\r\n};\r\n\r\nexport const bulkAssignClaimsRequest = (claims, teams, formData) => {\r\n  return {\r\n    type: 'CLAIMS_PROCESSING_BULK_ASSIGN_REQUEST',\r\n    payload: { claims, teams, formData },\r\n  };\r\n};\r\n\r\nexport const bulkAssignClaimsSuccess = (data) => {\r\n  return {\r\n    type: 'CLAIMS_PROCESSING_BULK_ASSIGN_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const bulkAssignClaimsFailure = (error) => {\r\n  return {\r\n    type: 'CLAIMS_PROCESSING_BULK_ASSIGN_ERROR',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}