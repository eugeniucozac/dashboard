{"ast":null,"code":"import _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\forms\\\\ChangeComplexityPriorityAssignment\\\\ChangeComplexityPriorityAssignment.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as Yup from 'yup';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport uniq from 'lodash/uniq'; // app\n\nimport { ChangeComplexityPriorityAssignmentView } from './ChangeComplexityPriorityAssignment.view';\nimport { Loader } from 'components';\nimport { getComplexityTypes, getComplexityValues, getPriorityLevels, getUsersByOrg, resetComplexityBasisValues, selectClaimsAssignedToUsers, selectComplexityTypes, selectComplexityTypesLoaded, selectComplexityValues, selectComplexityValuesLoaded, selectPriorities, selectPrioritiesLoaded, selectUserOrganisation, hideModal, showModal, enqueueNotification, updateClaim } from 'stores';\nimport { useFormActions } from 'hooks';\nimport * as constants from 'consts';\nimport * as utils from 'utils'; // mui\n\nimport { Box } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChangeComplexityPriorityAssignment.propTypes = {\n  claims: PropTypes.array.isRequired,\n  setIsDirty: PropTypes.func,\n  handleClose: PropTypes.func.isRequired\n};\nexport default function ChangeComplexityPriorityAssignment(_ref) {\n  _s();\n\n  var _getComplexity, _getPriority, _getPriority2, _getTeam, _getTeam2;\n\n  var claims = _ref.claims,\n      setIsDirty = _ref.setIsDirty,\n      handleClose = _ref.handleClose;\n  var dispatch = useDispatch();\n  var userOrganisation = useSelector(selectUserOrganisation);\n  var complexitiesBasisValues = useSelector(selectComplexityValues) || [];\n  var complexitiesBasisValuesLoaded = useSelector(selectComplexityValuesLoaded);\n  var complexityTypes = useSelector(selectComplexityTypes) || [];\n  var complexityTypesLoaded = useSelector(selectComplexityTypesLoaded);\n  var assignToUsersObj = useSelector(selectClaimsAssignedToUsers);\n  var priorities = useSelector(selectPriorities);\n  var prioritiesLoaded = useSelector(selectPrioritiesLoaded);\n  var teams = Object.values(constants.ORGANIZATIONS) || [];\n  var singleClaim = claims === null || claims === void 0 ? void 0 : claims[0];\n  var isSingleClaim = (claims === null || claims === void 0 ? void 0 : claims.length) === 1;\n  var assignToUsersItems = (assignToUsersObj === null || assignToUsersObj === void 0 ? void 0 : assignToUsersObj.items) || [];\n  var assignToUsersLoaded = assignToUsersObj === null || assignToUsersObj === void 0 ? void 0 : assignToUsersObj.loaded;\n  var isAllClaimsComplexityUnsure = claims.every(function (claim) {\n    return claim.complexity === constants.CLAIM_COMPLEXITY_UNSURE;\n  });\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isCrossTeamAssignTo = _useState2[0],\n      setCrossTeamAssignTo = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isComplexityBasisAvailable = _useState4[0],\n      setIsComplexityBasisAvailable = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isLoading = _useState6[0],\n      setIsLoading = _useState6[1];\n\n  var getAssignedUser = function getAssignedUser() {\n    return assignToUsersItems.find(function (user) {\n      return claims.every(function (claim) {\n        return user.fullName === (claim === null || claim === void 0 ? void 0 : claim.assignedTo);\n      });\n    }) || null;\n  };\n\n  var getComplexity = function getComplexity() {\n    return complexityTypes.find(function (type) {\n      return claims.every(function (claim) {\n        return type.complextityType === (claim === null || claim === void 0 ? void 0 : claim.complexity);\n      });\n    }) || null;\n  };\n\n  var getComplexityBasis = function getComplexityBasis() {\n    return (complexitiesBasisValues === null || complexitiesBasisValues === void 0 ? void 0 : complexitiesBasisValues.find(function (item) {\n      return claims.every(function (claim) {\n        return (item === null || item === void 0 ? void 0 : item.complexityRulesID) === (claim === null || claim === void 0 ? void 0 : claim.complexityValueID);\n      });\n    })) || null;\n  };\n\n  var getPriority = function getPriority() {\n    return (priorities === null || priorities === void 0 ? void 0 : priorities.find(function (priority) {\n      return claims.every(function (claim) {\n        return (priority === null || priority === void 0 ? void 0 : priority.description) === (claim === null || claim === void 0 ? void 0 : claim.priority);\n      });\n    })) || null;\n  };\n\n  var getTeam = function getTeam() {\n    return teams.find(function (team) {\n      return claims.every(function (claim) {\n        return team.label === (claim === null || claim === void 0 ? void 0 : claim.team);\n      });\n    }) || null;\n  };\n\n  var getTeamByLabel = function getTeamByLabel(label) {\n    return (teams === null || teams === void 0 ? void 0 : teams.find(function (team) {\n      return team.label === label;\n    })) || null;\n  };\n\n  var isRequired = !isCrossTeamAssignTo;\n  var fields = [{\n    name: 'complexity',\n    type: 'select',\n    label: \"\".concat(utils.string.t('claims.processing.bulkAssign.fields.complexityType.label'), \" *\"),\n    value: ((_getComplexity = getComplexity()) === null || _getComplexity === void 0 ? void 0 : _getComplexity.complextityType) || '',\n    options: isAllClaimsComplexityUnsure ? complexityTypes : complexityTypes.filter(function (item) {\n      return item.complextityType !== constants.CLAIM_COMPLEXITY_UNSURE;\n    }),\n    optionKey: 'complextityType',\n    optionLabel: 'complextityType',\n    validation: Yup.string().required(utils.string.t('validation.required')),\n    callback: function callback(event, value) {\n      setValue('team', getTeamByLabel(value === null || value === void 0 ? void 0 : value.organizationName));\n      setValue('assignTo', null);\n      setIsComplexityBasisAvailable((value === null || value === void 0 ? void 0 : value.complextityType) === constants.ORGANIZATIONS.ardonagh.complexity);\n      setCrossTeamAssignTo((value === null || value === void 0 ? void 0 : value.organizationName) !== (userOrganisation === null || userOrganisation === void 0 ? void 0 : userOrganisation.name));\n    }\n  }, {\n    name: 'complexityBasis',\n    type: 'autocompletemui',\n    label: \"\".concat(utils.string.t('claims.processing.bulkAssign.fields.complexity.label'), \" *\"),\n    value: getComplexityBasis(),\n    options: complexitiesBasisValues,\n    optionKey: 'complexityRulesID',\n    optionLabel: 'complexityRulesValue',\n    validation: isComplexityBasisAvailable && Yup.object().nullable().required(utils.string.t('validation.required'))\n  }, {\n    name: 'priority',\n    type: 'select',\n    label: \"\".concat(utils.string.t('claims.processing.bulkAssign.fields.priority.label'), \" *\"),\n    value: ((_getPriority = getPriority()) === null || _getPriority === void 0 ? void 0 : _getPriority.description) || '',\n    options: priorities,\n    optionKey: 'description',\n    optionLabel: 'description',\n    validation: Yup.string().required(utils.string.t('validation.required'))\n  }, {\n    name: 'priorityId',\n    type: 'hidden',\n    value: ((_getPriority2 = getPriority()) === null || _getPriority2 === void 0 ? void 0 : _getPriority2.id) || ''\n  }, {\n    name: 'team',\n    type: 'select',\n    label: \"\".concat(utils.string.t('claims.processing.bulkAssign.fields.team.label'), \" *\"),\n    value: ((_getTeam = getTeam()) === null || _getTeam === void 0 ? void 0 : _getTeam.name) || '',\n    options: [_objectSpread({}, constants.ORGANIZATIONS.mphasis), _objectSpread({}, constants.ORGANIZATIONS.ardonagh)],\n    optionKey: 'name',\n    optionLabel: 'label',\n    validation: Yup.string().required(utils.string.t('validation.required')),\n    callback: function callback(event, value) {\n      setCrossTeamAssignTo((value === null || value === void 0 ? void 0 : value.label) !== (userOrganisation === null || userOrganisation === void 0 ? void 0 : userOrganisation.name));\n    }\n  }, {\n    name: 'teamId',\n    type: 'hidden',\n    value: ((_getTeam2 = getTeam()) === null || _getTeam2 === void 0 ? void 0 : _getTeam2.id) || ''\n  }, {\n    name: 'assignTo',\n    type: 'autocompletemui',\n    label: \"\".concat(utils.string.t('claims.processing.bulkAssign.fields.assignTo.label')).concat(isRequired ? ' *' : ''),\n    value: getAssignedUser(),\n    options: assignToUsersItems,\n    optionKey: 'id',\n    optionLabel: 'fullName',\n    validation: !isCrossTeamAssignTo && Yup.object().nullable().required(utils.string.t('claims.processing.bulkAssign.validation.chooseAssignee'))\n  }, {\n    name: 'notes',\n    type: 'textarea',\n    label: \"\".concat(utils.string.t('claims.processing.bulkAssign.fields.notes.label')).concat(isRequired ? ' *' : ''),\n    value: '',\n    muiComponentProps: {\n      multiline: true,\n      minRows: 3,\n      maxRows: 6\n    },\n    validation: !isCrossTeamAssignTo && Yup.string().min(1, utils.string.t('validation.required')).max(1000, utils.string.t('validation.string.max')).required(utils.string.t('validation.required'))\n  }];\n  var defaultValues = utils.form.getInitialValues(fields);\n  var validationSchema = utils.form.getValidationSchema(fields);\n\n  var _useForm = useForm(_objectSpread({\n    defaultValues: defaultValues\n  }, validationSchema && {\n    resolver: yupResolver(validationSchema)\n  })),\n      control = _useForm.control,\n      watch = _useForm.watch,\n      errors = _useForm.errors,\n      setValue = _useForm.setValue,\n      handleSubmit = _useForm.handleSubmit,\n      formState = _useForm.formState;\n\n  var formValues = watch();\n  var formIsDirty = formState.isDirty;\n  var actions = [{\n    name: 'cancel',\n    label: utils.string.t('app.cancel'),\n    handler: function handler() {\n      if (formIsDirty) {\n        dispatch(showModal({\n          component: 'CONFIRM',\n          props: {\n            title: utils.string.t('navigation.form.subtitle'),\n            hint: utils.string.t('navigation.form.title'),\n            fullWidth: true,\n            maxWidth: 'xs',\n            componentProps: {\n              cancelLabel: utils.string.t('app.no'),\n              confirmLabel: utils.string.t('app.yes'),\n              submitHandler: function submitHandler() {\n                handleClose();\n              }\n            }\n          }\n        }));\n      } else {\n        handleClose();\n      }\n    }\n  }, {\n    name: 'submit',\n    label: utils.string.t('app.assign'),\n    handler: function handler(values) {\n      onSubmit(values);\n    }\n  }];\n\n  var _useFormActions = useFormActions(actions),\n      cancel = _useFormActions.cancel,\n      submit = _useFormActions.submit;\n\n  var isDataReady = function isDataReady() {\n    return prioritiesLoaded && utils.generic.isValidArray(priorities, true) && assignToUsersLoaded && utils.generic.isValidArray(assignToUsersItems, true) && complexityTypesLoaded && utils.generic.isValidArray(complexityTypes, true) && complexitiesBasisValuesLoaded && utils.generic.isValidArray(complexitiesBasisValues, true);\n  };\n\n  var isDataMissing = function isDataMissing() {\n    var missingPriorities = prioritiesLoaded && utils.generic.isInvalidOrEmptyArray(priorities);\n    var missingUsers = assignToUsersLoaded && utils.generic.isValidArray(assignToUsersItems, true);\n    var missingComplexities = complexityTypesLoaded && utils.generic.isValidArray(complexityTypes, true);\n    var missingComplexitiesBasis = complexitiesBasisValuesLoaded && utils.generic.isValidArray(complexitiesBasisValues, true);\n    return missingPriorities || missingUsers || missingComplexities || missingComplexitiesBasis;\n  };\n\n  var setComplexityBasisAvailability = function setComplexityBasisAvailability() {\n    var _getComplexity2;\n\n    setIsComplexityBasisAvailable(((_getComplexity2 = getComplexity()) === null || _getComplexity2 === void 0 ? void 0 : _getComplexity2.complextityType) === constants.ORGANIZATIONS.ardonagh.complexity);\n  };\n\n  var onSubmit = function onSubmit(values) {\n    dispatch(updateClaim(claims, values));\n  };\n\n  useEffect(function () {\n    dispatch(getPriorityLevels());\n    dispatch(getComplexityTypes());\n    dispatch(resetComplexityBasisValues());\n\n    if (isSingleClaim) {\n      dispatch(getComplexityValues(singleClaim === null || singleClaim === void 0 ? void 0 : singleClaim.divisionId, singleClaim === null || singleClaim === void 0 ? void 0 : singleClaim.sourceId, false));\n    } else {\n      dispatch(getComplexityValues(null, null, false, uniq(claims.reduce(function (acc, _ref2) {\n        var sourceId = _ref2.sourceId,\n            divisionId = _ref2.divisionId;\n        return sourceId && divisionId ? [].concat(_toConsumableArray(acc), [\"\".concat(sourceId, \"-\").concat(divisionId)]) : acc;\n      }, []))));\n    }\n\n    setComplexityBasisAvailability();\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n  // fetch list of users when team is changed\n\n  useEffect(function () {\n    var teamName = formValues === null || formValues === void 0 ? void 0 : formValues.team;\n\n    if (teamName) {\n      setIsLoading(true);\n      setValue('assignTo', null); // fetch users\n\n      dispatch(getUsersByOrg(teamName, claims, 'bulkAssignClaims', false)).then(function () {\n        setIsLoading(false);\n      });\n    }\n  }, [formValues === null || formValues === void 0 ? void 0 : formValues.team]); // eslint-disable-line react-hooks/exhaustive-deps\n  // make the form dirty if any values are changed\n\n  useEffect(function () {\n    setIsDirty(formIsDirty);\n  }, [formValues]); // eslint-disable-line react-hooks/exhaustive-deps\n  // populate form values when all data is ready\n\n  useEffect(function () {\n    var complexity = getComplexity();\n\n    if (isDataReady()) {\n      var _getPriority3;\n\n      setValue('assignTo', getAssignedUser());\n      setValue('complexity', (complexity === null || complexity === void 0 ? void 0 : complexity.complextityType) || '');\n      setValue('complexityBasis', getComplexityBasis());\n      setValue('priority', ((_getPriority3 = getPriority()) === null || _getPriority3 === void 0 ? void 0 : _getPriority3.description) || '');\n      setCrossTeamAssignTo((complexity === null || complexity === void 0 ? void 0 : complexity.organizationName) !== (userOrganisation === null || userOrganisation === void 0 ? void 0 : userOrganisation.name));\n      setComplexityBasisAvailability();\n    }\n  }, [isDataReady()]); // eslint-disable-line react-hooks/exhaustive-deps\n  // hide modal and show warning if necessary data is missing\n\n  useEffect(function () {\n    if (isDataMissing()) {\n      dispatch(hideModal());\n      dispatch(enqueueNotification(utils.string.t('claims.processing.bulkAssign.notifications.data.failure'), 'warning'));\n    }\n  }, [isDataMissing()]); // eslint-disable-line react-hooks/exhaustive-deps\n  // data is still loading...\n\n  if (!isDataReady()) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      height: \"300px\",\n      children: /*#__PURE__*/_jsxDEV(Loader, {\n        visible: true,\n        absolute: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChangeComplexityPriorityAssignmentView, {\n    fields: fields,\n    buttons: {\n      cancel: cancel,\n      submit: submit\n    },\n    formProps: {\n      control: control,\n      errors: errors,\n      handleSubmit: handleSubmit,\n      formState: formState\n    },\n    isComplexityBasisAvailable: isComplexityBasisAvailable,\n    isLoading: isLoading\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 363,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChangeComplexityPriorityAssignment, \"q7TG1S+jm2lGfg1AOpg+WuHzyUw=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useForm, useFormActions];\n});\n\n_c = ChangeComplexityPriorityAssignment;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChangeComplexityPriorityAssignment\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/forms/ChangeComplexityPriorityAssignment/ChangeComplexityPriorityAssignment.js"],"names":["React","useEffect","useState","useDispatch","useSelector","PropTypes","Yup","useForm","yupResolver","uniq","ChangeComplexityPriorityAssignmentView","Loader","getComplexityTypes","getComplexityValues","getPriorityLevels","getUsersByOrg","resetComplexityBasisValues","selectClaimsAssignedToUsers","selectComplexityTypes","selectComplexityTypesLoaded","selectComplexityValues","selectComplexityValuesLoaded","selectPriorities","selectPrioritiesLoaded","selectUserOrganisation","hideModal","showModal","enqueueNotification","updateClaim","useFormActions","constants","utils","Box","ChangeComplexityPriorityAssignment","propTypes","claims","array","isRequired","setIsDirty","func","handleClose","dispatch","userOrganisation","complexitiesBasisValues","complexitiesBasisValuesLoaded","complexityTypes","complexityTypesLoaded","assignToUsersObj","priorities","prioritiesLoaded","teams","Object","values","ORGANIZATIONS","singleClaim","isSingleClaim","length","assignToUsersItems","items","assignToUsersLoaded","loaded","isAllClaimsComplexityUnsure","every","claim","complexity","CLAIM_COMPLEXITY_UNSURE","isCrossTeamAssignTo","setCrossTeamAssignTo","isComplexityBasisAvailable","setIsComplexityBasisAvailable","isLoading","setIsLoading","getAssignedUser","find","user","fullName","assignedTo","getComplexity","type","complextityType","getComplexityBasis","item","complexityRulesID","complexityValueID","getPriority","priority","description","getTeam","team","label","getTeamByLabel","fields","name","string","t","value","options","filter","optionKey","optionLabel","validation","required","callback","event","setValue","organizationName","ardonagh","object","nullable","id","mphasis","muiComponentProps","multiline","minRows","maxRows","min","max","defaultValues","form","getInitialValues","validationSchema","getValidationSchema","resolver","control","watch","errors","handleSubmit","formState","formValues","formIsDirty","isDirty","actions","handler","component","props","title","hint","fullWidth","maxWidth","componentProps","cancelLabel","confirmLabel","submitHandler","onSubmit","cancel","submit","isDataReady","generic","isValidArray","isDataMissing","missingPriorities","isInvalidOrEmptyArray","missingUsers","missingComplexities","missingComplexitiesBasis","setComplexityBasisAvailability","divisionId","sourceId","reduce","acc","teamName","then"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport * as Yup from 'yup';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport uniq from 'lodash/uniq';\r\n\r\n// app\r\nimport { ChangeComplexityPriorityAssignmentView } from './ChangeComplexityPriorityAssignment.view';\r\nimport { Loader } from 'components';\r\nimport {\r\n  getComplexityTypes,\r\n  getComplexityValues,\r\n  getPriorityLevels,\r\n  getUsersByOrg,\r\n  resetComplexityBasisValues,\r\n  selectClaimsAssignedToUsers,\r\n  selectComplexityTypes,\r\n  selectComplexityTypesLoaded,\r\n  selectComplexityValues,\r\n  selectComplexityValuesLoaded,\r\n  selectPriorities,\r\n  selectPrioritiesLoaded,\r\n  selectUserOrganisation,\r\n  hideModal,\r\n  showModal,\r\n  enqueueNotification,\r\n  updateClaim,\r\n} from 'stores';\r\nimport { useFormActions } from 'hooks';\r\nimport * as constants from 'consts';\r\nimport * as utils from 'utils';\r\n\r\n// mui\r\nimport { Box } from '@material-ui/core';\r\n\r\nChangeComplexityPriorityAssignment.propTypes = {\r\n  claims: PropTypes.array.isRequired,\r\n  setIsDirty: PropTypes.func,\r\n  handleClose: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default function ChangeComplexityPriorityAssignment({ claims, setIsDirty, handleClose }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const userOrganisation = useSelector(selectUserOrganisation);\r\n  const complexitiesBasisValues = useSelector(selectComplexityValues) || [];\r\n  const complexitiesBasisValuesLoaded = useSelector(selectComplexityValuesLoaded);\r\n  const complexityTypes = useSelector(selectComplexityTypes) || [];\r\n  const complexityTypesLoaded = useSelector(selectComplexityTypesLoaded);\r\n  const assignToUsersObj = useSelector(selectClaimsAssignedToUsers);\r\n  const priorities = useSelector(selectPriorities);\r\n  const prioritiesLoaded = useSelector(selectPrioritiesLoaded);\r\n\r\n  const teams = Object.values(constants.ORGANIZATIONS) || [];\r\n  const singleClaim = claims?.[0];\r\n  const isSingleClaim = claims?.length === 1;\r\n  const assignToUsersItems = assignToUsersObj?.items || [];\r\n  const assignToUsersLoaded = assignToUsersObj?.loaded;\r\n  const isAllClaimsComplexityUnsure = claims.every((claim) => claim.complexity === constants.CLAIM_COMPLEXITY_UNSURE);\r\n\r\n  const [isCrossTeamAssignTo, setCrossTeamAssignTo] = useState(false);\r\n  const [isComplexityBasisAvailable, setIsComplexityBasisAvailable] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const getAssignedUser = () => {\r\n    return (\r\n      assignToUsersItems.find((user) => {\r\n        return claims.every((claim) => user.fullName === claim?.assignedTo);\r\n      }) || null\r\n    );\r\n  };\r\n\r\n  const getComplexity = () => {\r\n    return (\r\n      complexityTypes.find((type) => {\r\n        return claims.every((claim) => type.complextityType === claim?.complexity);\r\n      }) || null\r\n    );\r\n  };\r\n\r\n  const getComplexityBasis = () => {\r\n    return (\r\n      complexitiesBasisValues?.find((item) => {\r\n        return claims.every((claim) => item?.complexityRulesID === claim?.complexityValueID);\r\n      }) || null\r\n    );\r\n  };\r\n\r\n  const getPriority = () => {\r\n    return (\r\n      priorities?.find((priority) => {\r\n        return claims.every((claim) => priority?.description === claim?.priority);\r\n      }) || null\r\n    );\r\n  };\r\n\r\n  const getTeam = () => {\r\n    return (\r\n      teams.find((team) => {\r\n        return claims.every((claim) => team.label === claim?.team);\r\n      }) || null\r\n    );\r\n  };\r\n\r\n  const getTeamByLabel = (label) => {\r\n    return teams?.find((team) => team.label === label) || null;\r\n  };\r\n\r\n  const isRequired = !isCrossTeamAssignTo;\r\n\r\n  const fields = [\r\n    {\r\n      name: 'complexity',\r\n      type: 'select',\r\n      label: `${utils.string.t('claims.processing.bulkAssign.fields.complexityType.label')} *`,\r\n      value: getComplexity()?.complextityType || '',\r\n      options: isAllClaimsComplexityUnsure\r\n        ? complexityTypes\r\n        : complexityTypes.filter((item) => item.complextityType !== constants.CLAIM_COMPLEXITY_UNSURE),\r\n      optionKey: 'complextityType',\r\n      optionLabel: 'complextityType',\r\n      validation: Yup.string().required(utils.string.t('validation.required')),\r\n      callback: (event, value) => {\r\n        setValue('team', getTeamByLabel(value?.organizationName));\r\n        setValue('assignTo', null);\r\n        setIsComplexityBasisAvailable(value?.complextityType === constants.ORGANIZATIONS.ardonagh.complexity);\r\n        setCrossTeamAssignTo(value?.organizationName !== userOrganisation?.name);\r\n      },\r\n    },\r\n    {\r\n      name: 'complexityBasis',\r\n      type: 'autocompletemui',\r\n      label: `${utils.string.t('claims.processing.bulkAssign.fields.complexity.label')} *`,\r\n      value: getComplexityBasis(),\r\n      options: complexitiesBasisValues,\r\n      optionKey: 'complexityRulesID',\r\n      optionLabel: 'complexityRulesValue',\r\n      validation: isComplexityBasisAvailable && Yup.object().nullable().required(utils.string.t('validation.required')),\r\n    },\r\n    {\r\n      name: 'priority',\r\n      type: 'select',\r\n      label: `${utils.string.t('claims.processing.bulkAssign.fields.priority.label')} *`,\r\n      value: getPriority()?.description || '',\r\n      options: priorities,\r\n      optionKey: 'description',\r\n      optionLabel: 'description',\r\n      validation: Yup.string().required(utils.string.t('validation.required')),\r\n    },\r\n    {\r\n      name: 'priorityId',\r\n      type: 'hidden',\r\n      value: getPriority()?.id || '',\r\n    },\r\n    {\r\n      name: 'team',\r\n      type: 'select',\r\n      label: `${utils.string.t('claims.processing.bulkAssign.fields.team.label')} *`,\r\n      value: getTeam()?.name || '',\r\n      options: [{ ...constants.ORGANIZATIONS.mphasis }, { ...constants.ORGANIZATIONS.ardonagh }],\r\n      optionKey: 'name',\r\n      optionLabel: 'label',\r\n      validation: Yup.string().required(utils.string.t('validation.required')),\r\n      callback: (event, value) => {\r\n        setCrossTeamAssignTo(value?.label !== userOrganisation?.name);\r\n      },\r\n    },\r\n    {\r\n      name: 'teamId',\r\n      type: 'hidden',\r\n      value: getTeam()?.id || '',\r\n    },\r\n    {\r\n      name: 'assignTo',\r\n      type: 'autocompletemui',\r\n      label: `${utils.string.t('claims.processing.bulkAssign.fields.assignTo.label')}${isRequired ? ' *' : ''}`,\r\n      value: getAssignedUser(),\r\n      options: assignToUsersItems,\r\n      optionKey: 'id',\r\n      optionLabel: 'fullName',\r\n      validation:\r\n        !isCrossTeamAssignTo && Yup.object().nullable().required(utils.string.t('claims.processing.bulkAssign.validation.chooseAssignee')),\r\n    },\r\n    {\r\n      name: 'notes',\r\n      type: 'textarea',\r\n      label: `${utils.string.t('claims.processing.bulkAssign.fields.notes.label')}${isRequired ? ' *' : ''}`,\r\n      value: '',\r\n      muiComponentProps: {\r\n        multiline: true,\r\n        minRows: 3,\r\n        maxRows: 6,\r\n      },\r\n      validation:\r\n        !isCrossTeamAssignTo &&\r\n        Yup.string()\r\n          .min(1, utils.string.t('validation.required'))\r\n          .max(1000, utils.string.t('validation.string.max'))\r\n          .required(utils.string.t('validation.required')),\r\n    },\r\n  ];\r\n\r\n  const defaultValues = utils.form.getInitialValues(fields);\r\n  const validationSchema = utils.form.getValidationSchema(fields);\r\n\r\n  const { control, watch, errors, setValue, handleSubmit, formState } = useForm({\r\n    defaultValues,\r\n    ...(validationSchema && { resolver: yupResolver(validationSchema) }),\r\n  });\r\n\r\n  const formValues = watch();\r\n  const formIsDirty = formState.isDirty;\r\n\r\n  const actions = [\r\n    {\r\n      name: 'cancel',\r\n      label: utils.string.t('app.cancel'),\r\n      handler: () => {\r\n        if (formIsDirty) {\r\n          dispatch(\r\n            showModal({\r\n              component: 'CONFIRM',\r\n              props: {\r\n                title: utils.string.t('navigation.form.subtitle'),\r\n                hint: utils.string.t('navigation.form.title'),\r\n                fullWidth: true,\r\n                maxWidth: 'xs',\r\n                componentProps: {\r\n                  cancelLabel: utils.string.t('app.no'),\r\n                  confirmLabel: utils.string.t('app.yes'),\r\n                  submitHandler: () => {\r\n                    handleClose();\r\n                  },\r\n                },\r\n              },\r\n            })\r\n          );\r\n        } else {\r\n          handleClose();\r\n        }\r\n      },\r\n    },\r\n    {\r\n      name: 'submit',\r\n      label: utils.string.t('app.assign'),\r\n      handler: (values) => {\r\n        onSubmit(values);\r\n      },\r\n    },\r\n  ];\r\n\r\n  const { cancel, submit } = useFormActions(actions);\r\n\r\n  const isDataReady = () => {\r\n    return (\r\n      prioritiesLoaded &&\r\n      utils.generic.isValidArray(priorities, true) &&\r\n      assignToUsersLoaded &&\r\n      utils.generic.isValidArray(assignToUsersItems, true) &&\r\n      complexityTypesLoaded &&\r\n      utils.generic.isValidArray(complexityTypes, true) &&\r\n      complexitiesBasisValuesLoaded &&\r\n      utils.generic.isValidArray(complexitiesBasisValues, true)\r\n    );\r\n  };\r\n\r\n  const isDataMissing = () => {\r\n    const missingPriorities = prioritiesLoaded && utils.generic.isInvalidOrEmptyArray(priorities);\r\n    const missingUsers = assignToUsersLoaded && utils.generic.isValidArray(assignToUsersItems, true);\r\n    const missingComplexities = complexityTypesLoaded && utils.generic.isValidArray(complexityTypes, true);\r\n    const missingComplexitiesBasis = complexitiesBasisValuesLoaded && utils.generic.isValidArray(complexitiesBasisValues, true);\r\n\r\n    return missingPriorities || missingUsers || missingComplexities || missingComplexitiesBasis;\r\n  };\r\n\r\n  const setComplexityBasisAvailability = () => {\r\n    setIsComplexityBasisAvailable(getComplexity()?.complextityType === constants.ORGANIZATIONS.ardonagh.complexity);\r\n  };\r\n\r\n  const onSubmit = (values) => {\r\n    dispatch(updateClaim(claims, values));\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(getPriorityLevels());\r\n    dispatch(getComplexityTypes());\r\n    dispatch(resetComplexityBasisValues());\r\n\r\n    if (isSingleClaim) {\r\n      dispatch(getComplexityValues(singleClaim?.divisionId, singleClaim?.sourceId, false));\r\n    } else {\r\n      dispatch(\r\n        getComplexityValues(\r\n          null,\r\n          null,\r\n          false,\r\n          uniq(\r\n            claims.reduce((acc, { sourceId, divisionId }) => {\r\n              return sourceId && divisionId ? [...acc, `${sourceId}-${divisionId}`] : acc;\r\n            }, [])\r\n          )\r\n        )\r\n      );\r\n    }\r\n\r\n    setComplexityBasisAvailability();\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  // fetch list of users when team is changed\r\n  useEffect(() => {\r\n    const teamName = formValues?.team;\r\n\r\n    if (teamName) {\r\n      setIsLoading(true);\r\n      setValue('assignTo', null);\r\n\r\n      // fetch users\r\n      dispatch(getUsersByOrg(teamName, claims, 'bulkAssignClaims', false)).then(() => {\r\n        setIsLoading(false);\r\n      });\r\n    }\r\n  }, [formValues?.team]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  // make the form dirty if any values are changed\r\n  useEffect(() => {\r\n    setIsDirty(formIsDirty);\r\n  }, [formValues]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  // populate form values when all data is ready\r\n  useEffect(() => {\r\n    const complexity = getComplexity();\r\n\r\n    if (isDataReady()) {\r\n      setValue('assignTo', getAssignedUser());\r\n      setValue('complexity', complexity?.complextityType || '');\r\n      setValue('complexityBasis', getComplexityBasis());\r\n      setValue('priority', getPriority()?.description || '');\r\n      setCrossTeamAssignTo(complexity?.organizationName !== userOrganisation?.name);\r\n      setComplexityBasisAvailability();\r\n    }\r\n  }, [isDataReady()]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  // hide modal and show warning if necessary data is missing\r\n  useEffect(() => {\r\n    if (isDataMissing()) {\r\n      dispatch(hideModal());\r\n      dispatch(enqueueNotification(utils.string.t('claims.processing.bulkAssign.notifications.data.failure'), 'warning'));\r\n    }\r\n  }, [isDataMissing()]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  // data is still loading...\r\n  if (!isDataReady()) {\r\n    return (\r\n      <Box height=\"300px\">\r\n        <Loader visible absolute />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <ChangeComplexityPriorityAssignmentView\r\n      fields={fields}\r\n      buttons={{ cancel, submit }}\r\n      formProps={{ control, errors, handleSubmit, formState }}\r\n      isComplexityBasisAvailable={isComplexityBasisAvailable}\r\n      isLoading={isLoading}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}