{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\PremiumProcessingCaseRhsAccordions\\\\PremiumProcessingCaseRhsAccordions.view.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport isEmpty from 'lodash/isEmpty'; //app\n\nimport * as utils from 'utils';\nimport styles from './PremiumProcessingCaseRhsAccordions.styles';\nimport { Button, FormText, FormCheckbox, FormRadio } from 'components';\nimport { PremiumProcessingCreateActionAccordion, PremiumProcessingPendingActionAccordion } from 'modules';\nimport { premiumProcessingNoteSave, enqueueNotification, showModal, getRejectCloseCase, postNewWorkflowStage, getPremiumProcessingTasksDetails, selectCaseRfiDetails } from 'stores';\nimport * as constants from 'consts'; //mui\n\nimport { makeStyles, Grid, Box, Typography, Link } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nPremiumProcessingCaseRhsAccordionsView.propTypes = {\n  currentUser: PropTypes.array.isRequired,\n  selectedCases: PropTypes.array,\n  fields: PropTypes.array.isRequired,\n  caseType: PropTypes.string,\n  notesTextFieldProps: PropTypes.object,\n  isTransactionCommited: PropTypes.bool.isRequired,\n  isWorkBasket: PropTypes.bool.isRequired,\n  isAllCases: PropTypes.bool.isRequired,\n  isUnassignedStage: PropTypes.bool.isRequired,\n  isIssueDocumentStage: PropTypes.bool.isRequired,\n  taskId: PropTypes.string.isRequired,\n  isCheckSigningCase: PropTypes.bool.isRequired,\n  caseTaskTypeView: PropTypes.string.isRequired,\n  isRejectPendingActionStage: PropTypes.bool,\n  handlers: PropTypes.shape({\n    handleMoveToNextStage: PropTypes.func.isRequired,\n    viewMoreNotesHandler: PropTypes.func.isRequired,\n    qcSubmit: PropTypes.func.isRequired,\n    checkSigningComplete: PropTypes.func,\n    checkSigningCancel: PropTypes.func,\n    checkSigningReject: PropTypes.func,\n    caseRfiHandler: PropTypes.func.isRequired\n  })\n};\nexport default function PremiumProcessingCaseRhsAccordionsView(_ref) {\n  _s();\n\n  var _selectedCases$, _selectedCases$2, _selectedCases$3;\n\n  var caseType = _ref.caseType,\n      handlers = _ref.handlers,\n      fields = _ref.fields,\n      notesTextFieldProps = _ref.notesTextFieldProps,\n      isTransactionCommited = _ref.isTransactionCommited,\n      isWorkBasket = _ref.isWorkBasket,\n      isAllCases = _ref.isAllCases,\n      currentUser = _ref.currentUser,\n      selectedCases = _ref.selectedCases,\n      taskId = _ref.taskId,\n      isIssueDocumentStage = _ref.isIssueDocumentStage,\n      isUnassignedStage = _ref.isUnassignedStage,\n      isCheckSigningCase = _ref.isCheckSigningCase,\n      caseTaskTypeView = _ref.caseTaskTypeView,\n      isRejectPendingActionStage = _ref.isRejectPendingActionStage;\n  var defaultValues = utils.form.getInitialValues(fields);\n  var classes = makeStyles(styles, {\n    name: 'PremiumProcessingCaseRhsAccordions'\n  })();\n  var dispatch = useDispatch();\n\n  var _useForm = useForm({\n    defaultValues: defaultValues\n  }),\n      control = _useForm.control,\n      watch = _useForm.watch,\n      reset = _useForm.reset;\n\n  var transactionCommitedField = watch('transactionCommited');\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      enableMoveToNext = _useState2[0],\n      setEnableMoveToNext = _useState2[1];\n\n  var notesFieldValue = watch('notesField');\n  var enableSaveNotes = notesFieldValue ? true : false;\n  var caseId = selectedCases === null || selectedCases === void 0 ? void 0 : (_selectedCases$ = selectedCases[0]) === null || _selectedCases$ === void 0 ? void 0 : _selectedCases$.caseId;\n  var caseFlagType = selectedCases === null || selectedCases === void 0 ? void 0 : (_selectedCases$2 = selectedCases[0]) === null || _selectedCases$2 === void 0 ? void 0 : _selectedCases$2.type;\n  var policyRef = selectedCases === null || selectedCases === void 0 ? void 0 : (_selectedCases$3 = selectedCases[0]) === null || _selectedCases$3 === void 0 ? void 0 : _selectedCases$3.policyRef;\n  var caseRfiDetails = useSelector(selectCaseRfiDetails);\n  var caseRFIBureau = (caseRfiDetails === null || caseRfiDetails === void 0 ? void 0 : caseRfiDetails.rfiType) === constants.BUREAU_RFITYPE && (caseRfiDetails === null || caseRfiDetails === void 0 ? void 0 : caseRfiDetails.status) === constants.BUREAU_RESPONSE_RECEIVED;\n  var fieldsValue = watch();\n  useEffect(function () {\n    setEnableMoveToNext(isTransactionCommited);\n    reset('', 'notesField');\n  }, [isTransactionCommited, caseId]); //eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {}, [transactionCommitedField, notesFieldValue]); //eslint-disable-line react-hooks/exhaustive-deps\n\n  var isRfiCase = utils.generic.isValidArray(selectedCases, true) && utils.premiumProcessing.isRfi(selectedCases === null || selectedCases === void 0 ? void 0 : selectedCases[0]);\n  var selectedCasesType = caseFlagType === null || caseFlagType === void 0 ? void 0 : caseFlagType.split(',');\n  var isQcCase = Boolean(selectedCasesType === null || selectedCasesType === void 0 ? void 0 : selectedCasesType.some(function (flag) {\n    return flag === constants.QC_FLAG;\n  }));\n  var isRpCase = Boolean(selectedCasesType === null || selectedCasesType === void 0 ? void 0 : selectedCasesType.some(function (flag) {\n    return flag === constants.RP_FLAG;\n  }));\n  var isValidQCSection = utils.generic.isValidArray(currentUser, true) && currentUser.some(function (item) {\n    return [constants.ROLE_SENIOR_TECHNICIAN.toLowerCase(), constants.ROLE_TECHNICIAN_MANAGER.toLowerCase()].includes(item.name.toLowerCase());\n  });\n  var isWorkList = caseType === constants.WORKLIST;\n  var isMyTask = caseTaskTypeView === constants.TASK_TEAM_TYPE.myTask;\n  var isValidRPSection = utils.generic.isValidArray(currentUser, true) && currentUser.some(function (item) {\n    return [constants.FRONT_END_CONTACT.toLowerCase(), constants.OPERATIONS_LEAD.toLowerCase()].includes(item.name.toLowerCase());\n  });\n\n  var saveNotes = function saveNotes(noteComments) {\n    if (noteComments) {\n      dispatch(premiumProcessingNoteSave({\n        comments: noteComments,\n        taskId: taskId\n      })).then(function (response) {\n        if ((response === null || response === void 0 ? void 0 : response.status) === constants.NOTES_API_SUCCESS_STATUS) {\n          reset('', 'notesField');\n        }\n      });\n    } else {\n      dispatch(enqueueNotification(utils.string.t('premiumProcessing.notes.notesMandatory'), 'warning'));\n    }\n  };\n\n  var rejectStageModal = function rejectStageModal() {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        fullWidth: true,\n        title: utils.string.t('premiumProcessing.rejectingCase.rejectCase'),\n        maxWidth: 'xs',\n        componentProps: {\n          confirmLabel: utils.string.t('premiumProcessing.rejectingCase.rejectClose'),\n          cancelLabel: utils.string.t('premiumProcessing.rejectingCase.cancel'),\n          confirmMessage: utils.string.t('premiumProcessing.rejectingCase.rejectPopUpMessage'),\n          buttonColors: {\n            confirm: 'secondary',\n            cancel: 'primary'\n          },\n          submitHandler: function submitHandler() {\n            dispatch(getRejectCloseCase({\n              taskId: taskId,\n              notesFieldValue: notesFieldValue,\n              policyRef: policyRef\n            })).then(function (response) {\n              var _response$message;\n\n              if ((response === null || response === void 0 ? void 0 : response.status) === constants.NOTES_API_SUCCESS_STATUS || (response === null || response === void 0 ? void 0 : (_response$message = response.message) === null || _response$message === void 0 ? void 0 : _response$message.toUpperCase()) === null) {\n                dispatch(getPremiumProcessingTasksDetails({\n                  requestType: 'search',\n                  taskType: caseTaskTypeView,\n                  filterTerm: []\n                }));\n                dispatch(getPremiumProcessingTasksDetails({\n                  requestType: 'filter',\n                  taskType: caseTaskTypeView,\n                  filterTerm: []\n                }));\n              } else {\n                dispatch(enqueueNotification('premiumProcessing.checkSigningReject.rejectCloseErrorMessage', 'error'));\n                dispatch(getPremiumProcessingTasksDetails({\n                  requestType: 'search',\n                  taskType: caseTaskTypeView,\n                  filterTerm: []\n                }));\n                dispatch(getPremiumProcessingTasksDetails({\n                  requestType: 'filter',\n                  taskType: caseTaskTypeView,\n                  filterTerm: []\n                }));\n              }\n            });\n          },\n          cancelHandler: function cancelHandler() {},\n          handleClose: function handleClose() {}\n        }\n      }\n    }));\n  };\n\n  var reSubmitStageModal = function reSubmitStageModal() {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        fullWidth: true,\n        title: utils.string.t('premiumProcessing.reSubmitCases.reSubmitCase'),\n        maxWidth: 'xs',\n        componentProps: {\n          confirmLabel: utils.string.t('premiumProcessing.reSubmitCases.reSubmit'),\n          cancelLabel: utils.string.t('premiumProcessing.reSubmitCases.cancel'),\n          confirmMessage: utils.string.t('premiumProcessing.reSubmitCases.resubmitPopUpMessage'),\n          buttonColors: {\n            confirm: 'secondary',\n            cancel: 'primary'\n          },\n          submitHandler: function submitHandler() {\n            var isReSubmitted = true;\n            var notes = notesFieldValue;\n            dispatch(postNewWorkflowStage({\n              taskId: taskId,\n              notes: notes,\n              isReSubmitted: isReSubmitted,\n              policyRef: policyRef\n            })).then(function (response) {\n              if ((response === null || response === void 0 ? void 0 : response.message.toUpperCase()) === constants.API_RESPONSE_SUCCESS || (response === null || response === void 0 ? void 0 : response.message.toUpperCase()) === null) {\n                dispatch(getPremiumProcessingTasksDetails({\n                  requestType: 'search',\n                  taskType: caseTaskTypeView,\n                  filterTerm: []\n                }));\n                dispatch(getPremiumProcessingTasksDetails({\n                  requestType: 'filter',\n                  taskType: caseTaskTypeView,\n                  filterTerm: []\n                }));\n              }\n            });\n          },\n          cancelHandler: function cancelHandler() {},\n          handleClose: function handleClose() {}\n        }\n      }\n    }));\n  };\n\n  var rejectStage = function rejectStage() {\n    if (isEmpty(fieldsValue === null || fieldsValue === void 0 ? void 0 : fieldsValue.notesField)) {\n      dispatch(enqueueNotification('premiumProcessing.rejectingCase.rejectCloseNotes', 'warning'));\n      return;\n    }\n\n    rejectStageModal();\n  };\n\n  var reSubmitStage = function reSubmitStage() {\n    if (isEmpty(fieldsValue === null || fieldsValue === void 0 ? void 0 : fieldsValue.notesField)) {\n      dispatch(enqueueNotification('premiumProcessing.reSubmitCases.reSubmitNotes', 'warning'));\n      return;\n    }\n\n    reSubmitStageModal();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      children: [isWorkList && isMyTask && isValidQCSection && isQcCase && !isRfiCase && /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(FormRadio, _objectSpread(_objectSpread({}, utils.form.getFieldProps(fields, 'qualityControl', control)), {}, {\n          muiFormGroupProps: {\n            row: true\n          }\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          text: utils.string.t('app.submit'),\n          onClick: function onClick() {\n            handlers.qcSubmit(watch());\n          },\n          color: \"primary\",\n          variant: \"outlined\",\n          size: \"xsmall\",\n          styles: {\n            paddingleft: '20px'\n          },\n          nestedClasses: {\n            btn: classes.submitButton\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 11\n      }, this), !isRfiCase && /*#__PURE__*/_jsxDEV(PremiumProcessingCreateActionAccordion, {\n        taskId: taskId,\n        currentUser: currentUser,\n        selectedCases: selectedCases,\n        isUnassignedStage: isUnassignedStage,\n        fieldsValue: fieldsValue,\n        isWorkBasket: isWorkBasket,\n        isAllCases: isAllCases,\n        isIssueDocumentStage: isIssueDocumentStage,\n        isValidRPSection: isValidRPSection,\n        isCheckSigningCase: isCheckSigningCase,\n        isRejectPendingActionStage: isRejectPendingActionStage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 11\n      }, this), !isRfiCase && /*#__PURE__*/_jsxDEV(PremiumProcessingPendingActionAccordion, {\n        isCheckSigningCase: isCheckSigningCase,\n        taskId: taskId,\n        isValidRPSection: isValidRPSection,\n        isWorkBasket: isWorkBasket,\n        isAllCases: isAllCases,\n        isUnassignedStage: isUnassignedStage,\n        isIssueDocumentStage: isIssueDocumentStage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }, this), isTransactionCommited && !isRfiCase && /*#__PURE__*/_jsxDEV(FormCheckbox, _objectSpread(_objectSpread({}, utils.form.getFieldProps(fields, 'transactionCommited', control)), {}, {\n        nestedClasses: {\n          root: classes.checkboxAlignment\n        },\n        muiComponentProps: {\n          onChange: function onChange() {\n            if (isTransactionCommited) {\n              setEnableMoveToNext(!enableMoveToNext);\n            }\n          }\n        }\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 11\n      }, this), !isRfiCase && /*#__PURE__*/_jsxDEV(Box, {\n        className: classes.premiumNotes,\n        \"data-testid\": notesTextFieldProps.id,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            sm: 12,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              justify: \"space-between\",\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  className: classes.notes,\n                  \"data-testid\": \"\".concat(notesTextFieldProps.id + '-label'),\n                  children: utils.string.t('premiumProcessing.notes.notes')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 263,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 262,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  children: /*#__PURE__*/_jsxDEV(Link, {\n                    underline: \"always\",\n                    className: classes.notesHistory,\n                    onClick: function onClick() {\n                      return handlers.viewMoreNotesHandler();\n                    },\n                    \"data-testid\": \"\".concat(notesTextFieldProps.id + '-history-link'),\n                    children: utils.string.t('premiumProcessing.notes.viewNotes')\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 269,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 268,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: /*#__PURE__*/_jsxDEV(FormText, _objectSpread(_objectSpread(_objectSpread({}, notesTextFieldProps), utils.form.getFieldProps(fields, 'notesField')), {}, {\n              control: control\n            }), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            justify: \"flex-end\",\n            direction: \"column\",\n            alignItems: \"flex-end\",\n            className: classes.rejectSubmitButtons,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              text: utils.string.t('premiumProcessing.caseSummary.saveNote'),\n              onClick: function onClick() {\n                saveNotes(notesFieldValue);\n              },\n              disabled: isWorkBasket || isAllCases || isUnassignedStage || !enableSaveNotes,\n              color: 'default',\n              variant: 'outlined',\n              size: 'xsmall',\n              \"data-testid\": \"PremiumprocessingSummaryRejectButton\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          justify: \"flex-end\",\n          direction: \"column\",\n          alignItems: \"flex-end\",\n          spacing: 2,\n          className: classes.saveNotesButtons,\n          children: [!isCheckSigningCase && !isRfiCase && !isRpCase && /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              color: \"primary\",\n              size: \"medium\",\n              text: utils.string.t('premiumProcessing.caseSummary.moveToNextStage'),\n              onClick: function onClick() {\n                return handlers.handleMoveToNextStage();\n              },\n              disabled: isWorkBasket || isAllCases || enableMoveToNext || isValidQCSection && isQcCase || isValidRPSection && !isIssueDocumentStage,\n              \"data-testid\": \"PremiumprocessingSummarySubmitButton\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 15\n          }, this), isRfiCase && /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              nestedClasses: {\n                btn: classes.button\n              },\n              color: \"primary\",\n              size: \"medium\",\n              text: caseRFIBureau ? utils.string.t('premiumProcessing.respondingCase.resolve') : utils.string.t('premiumProcessing.respondingCase.respond'),\n              onClick: function onClick() {\n                return handlers.caseRfiHandler();\n              },\n              disabled: isWorkBasket || isAllCases\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 15\n          }, this), isRpCase && !isCheckSigningCase && !isRfiCase && /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              nestedClasses: {\n                btn: classes.button\n              },\n              color: \"primary\",\n              size: \"medium\",\n              text: utils.string.t('premiumProcessing.rejectingCase.reject'),\n              onClick: function onClick() {\n                return rejectStage();\n              },\n              disabled: isWorkBasket || isAllCases\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              nestedClasses: {\n                btn: classes.button\n              },\n              color: \"primary\",\n              size: \"medium\",\n              text: utils.string.t('premiumProcessing.reSubmitCases.reSubmit'),\n              onClick: function onClick() {\n                return reSubmitStage();\n              },\n              disabled: isWorkBasket || isAllCases\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 15\n          }, this), isCheckSigningCase && !isRpCase && !isRfiCase && /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              nestedClasses: {\n                btn: classes.singleRowButton\n              },\n              color: \"primary\",\n              size: \"medium\",\n              text: utils.string.t('premiumProcessing.checkSigningCase.cancel'),\n              onClick: function onClick() {\n                return handlers.checkSigningCancel(fieldsValue);\n              },\n              disabled: isWorkBasket || isAllCases || isRejectPendingActionStage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              nestedClasses: {\n                btn: classes.singleRowButton\n              },\n              color: \"primary\",\n              size: \"medium\",\n              text: utils.string.t('premiumProcessing.checkSigningCase.reject'),\n              onClick: function onClick() {\n                return handlers.checkSigningReject(fieldsValue);\n              },\n              disabled: isWorkBasket || isAllCases\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 366,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              nestedClasses: {\n                btn: classes.singleRowButton\n              },\n              color: \"primary\",\n              size: \"medium\",\n              text: utils.string.t('premiumProcessing.checkSigningCase.complete'),\n              onClick: function onClick() {\n                return handlers.checkSigningComplete(fieldsValue);\n              },\n              disabled: isWorkBasket || isAllCases || isRejectPendingActionStage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 374,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(PremiumProcessingCaseRhsAccordionsView, \"dieIJSOFKILDtlAfe7PZC4uUnaI=\", false, function () {\n  return [useDispatch, useForm, useSelector];\n});\n\n_c = PremiumProcessingCaseRhsAccordionsView;\n\nvar _c;\n\n$RefreshReg$(_c, \"PremiumProcessingCaseRhsAccordionsView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/PremiumProcessingCaseRhsAccordions/PremiumProcessingCaseRhsAccordions.view.js"],"names":["React","useState","useEffect","PropTypes","useForm","useDispatch","useSelector","isEmpty","utils","styles","Button","FormText","FormCheckbox","FormRadio","PremiumProcessingCreateActionAccordion","PremiumProcessingPendingActionAccordion","premiumProcessingNoteSave","enqueueNotification","showModal","getRejectCloseCase","postNewWorkflowStage","getPremiumProcessingTasksDetails","selectCaseRfiDetails","constants","makeStyles","Grid","Box","Typography","Link","PremiumProcessingCaseRhsAccordionsView","propTypes","currentUser","array","isRequired","selectedCases","fields","caseType","string","notesTextFieldProps","object","isTransactionCommited","bool","isWorkBasket","isAllCases","isUnassignedStage","isIssueDocumentStage","taskId","isCheckSigningCase","caseTaskTypeView","isRejectPendingActionStage","handlers","shape","handleMoveToNextStage","func","viewMoreNotesHandler","qcSubmit","checkSigningComplete","checkSigningCancel","checkSigningReject","caseRfiHandler","defaultValues","form","getInitialValues","classes","name","dispatch","control","watch","reset","transactionCommitedField","enableMoveToNext","setEnableMoveToNext","notesFieldValue","enableSaveNotes","caseId","caseFlagType","type","policyRef","caseRfiDetails","caseRFIBureau","rfiType","BUREAU_RFITYPE","status","BUREAU_RESPONSE_RECEIVED","fieldsValue","isRfiCase","generic","isValidArray","premiumProcessing","isRfi","selectedCasesType","split","isQcCase","Boolean","some","flag","QC_FLAG","isRpCase","RP_FLAG","isValidQCSection","item","ROLE_SENIOR_TECHNICIAN","toLowerCase","ROLE_TECHNICIAN_MANAGER","includes","isWorkList","WORKLIST","isMyTask","TASK_TEAM_TYPE","myTask","isValidRPSection","FRONT_END_CONTACT","OPERATIONS_LEAD","saveNotes","noteComments","comments","then","response","NOTES_API_SUCCESS_STATUS","t","rejectStageModal","component","props","fullWidth","title","maxWidth","componentProps","confirmLabel","cancelLabel","confirmMessage","buttonColors","confirm","cancel","submitHandler","message","toUpperCase","requestType","taskType","filterTerm","cancelHandler","handleClose","reSubmitStageModal","isReSubmitted","notes","API_RESPONSE_SUCCESS","rejectStage","notesField","reSubmitStage","getFieldProps","row","paddingleft","btn","submitButton","root","checkboxAlignment","onChange","premiumNotes","id","notesHistory","rejectSubmitButtons","saveNotesButtons","button","singleRowButton"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport isEmpty from 'lodash/isEmpty';\r\n\r\n//app\r\nimport * as utils from 'utils';\r\nimport styles from './PremiumProcessingCaseRhsAccordions.styles';\r\nimport { Button, FormText, FormCheckbox, FormRadio } from 'components';\r\nimport { PremiumProcessingCreateActionAccordion, PremiumProcessingPendingActionAccordion } from 'modules';\r\nimport {\r\n  premiumProcessingNoteSave,\r\n  enqueueNotification,\r\n  showModal,\r\n  getRejectCloseCase,\r\n  postNewWorkflowStage,\r\n  getPremiumProcessingTasksDetails,\r\n  selectCaseRfiDetails,\r\n} from 'stores';\r\nimport * as constants from 'consts';\r\n\r\n//mui\r\nimport { makeStyles, Grid, Box, Typography, Link } from '@material-ui/core';\r\n\r\nPremiumProcessingCaseRhsAccordionsView.propTypes = {\r\n  currentUser: PropTypes.array.isRequired,\r\n  selectedCases: PropTypes.array,\r\n  fields: PropTypes.array.isRequired,\r\n  caseType: PropTypes.string,\r\n  notesTextFieldProps: PropTypes.object,\r\n  isTransactionCommited: PropTypes.bool.isRequired,\r\n  isWorkBasket: PropTypes.bool.isRequired,\r\n  isAllCases: PropTypes.bool.isRequired,\r\n  isUnassignedStage: PropTypes.bool.isRequired,\r\n  isIssueDocumentStage: PropTypes.bool.isRequired,\r\n  taskId: PropTypes.string.isRequired,\r\n  isCheckSigningCase: PropTypes.bool.isRequired,\r\n  caseTaskTypeView: PropTypes.string.isRequired,\r\n  isRejectPendingActionStage: PropTypes.bool,\r\n  handlers: PropTypes.shape({\r\n    handleMoveToNextStage: PropTypes.func.isRequired,\r\n    viewMoreNotesHandler: PropTypes.func.isRequired,\r\n    qcSubmit: PropTypes.func.isRequired,\r\n    checkSigningComplete: PropTypes.func,\r\n    checkSigningCancel: PropTypes.func,\r\n    checkSigningReject: PropTypes.func,\r\n    caseRfiHandler: PropTypes.func.isRequired,\r\n  }),\r\n};\r\n\r\nexport default function PremiumProcessingCaseRhsAccordionsView({\r\n  caseType,\r\n  handlers,\r\n  fields,\r\n  notesTextFieldProps,\r\n  isTransactionCommited,\r\n  isWorkBasket,\r\n  isAllCases,\r\n  currentUser,\r\n  selectedCases,\r\n  taskId,\r\n  isIssueDocumentStage,\r\n  isUnassignedStage,\r\n  isCheckSigningCase,\r\n  caseTaskTypeView,\r\n  isRejectPendingActionStage,\r\n}) {\r\n  const defaultValues = utils.form.getInitialValues(fields);\r\n  const classes = makeStyles(styles, { name: 'PremiumProcessingCaseRhsAccordions' })();\r\n  const dispatch = useDispatch();\r\n  const { control, watch, reset } = useForm({ defaultValues });\r\n  const transactionCommitedField = watch('transactionCommited');\r\n  const [enableMoveToNext, setEnableMoveToNext] = useState(false);\r\n  const notesFieldValue = watch('notesField');\r\n  const enableSaveNotes = notesFieldValue ? true : false;\r\n  const caseId = selectedCases?.[0]?.caseId;\r\n  const caseFlagType = selectedCases?.[0]?.type;\r\n  const policyRef = selectedCases?.[0]?.policyRef;\r\n  const caseRfiDetails = useSelector(selectCaseRfiDetails);\r\n  const caseRFIBureau =\r\n    caseRfiDetails?.rfiType === constants.BUREAU_RFITYPE && caseRfiDetails?.status === constants.BUREAU_RESPONSE_RECEIVED;\r\n  const fieldsValue = watch();\r\n  useEffect(() => {\r\n    setEnableMoveToNext(isTransactionCommited);\r\n    reset('', 'notesField');\r\n  }, [isTransactionCommited, caseId]); //eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {}, [transactionCommitedField, notesFieldValue]); //eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const isRfiCase = utils.generic.isValidArray(selectedCases, true) && utils.premiumProcessing.isRfi(selectedCases?.[0]);\r\n  const selectedCasesType = caseFlagType?.split(',');\r\n  const isQcCase = Boolean(selectedCasesType?.some((flag) => flag === constants.QC_FLAG));\r\n  const isRpCase = Boolean(selectedCasesType?.some((flag) => flag === constants.RP_FLAG));\r\n  const isValidQCSection =\r\n    utils.generic.isValidArray(currentUser, true) &&\r\n    currentUser.some((item) =>\r\n      [constants.ROLE_SENIOR_TECHNICIAN.toLowerCase(), constants.ROLE_TECHNICIAN_MANAGER.toLowerCase()].includes(item.name.toLowerCase())\r\n    );\r\n  const isWorkList = caseType === constants.WORKLIST;\r\n  const isMyTask = caseTaskTypeView === constants.TASK_TEAM_TYPE.myTask;\r\n  const isValidRPSection =\r\n    utils.generic.isValidArray(currentUser, true) &&\r\n    currentUser.some((item) =>\r\n      [constants.FRONT_END_CONTACT.toLowerCase(), constants.OPERATIONS_LEAD.toLowerCase()].includes(item.name.toLowerCase())\r\n    );\r\n\r\n  const saveNotes = (noteComments) => {\r\n    if (noteComments) {\r\n      dispatch(premiumProcessingNoteSave({ comments: noteComments, taskId: taskId })).then((response) => {\r\n        if (response?.status === constants.NOTES_API_SUCCESS_STATUS) {\r\n          reset('', 'notesField');\r\n        }\r\n      });\r\n    } else {\r\n      dispatch(enqueueNotification(utils.string.t('premiumProcessing.notes.notesMandatory'), 'warning'));\r\n    }\r\n  };\r\n\r\n  const rejectStageModal = () => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          fullWidth: true,\r\n          title: utils.string.t('premiumProcessing.rejectingCase.rejectCase'),\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            confirmLabel: utils.string.t('premiumProcessing.rejectingCase.rejectClose'),\r\n            cancelLabel: utils.string.t('premiumProcessing.rejectingCase.cancel'),\r\n            confirmMessage: utils.string.t('premiumProcessing.rejectingCase.rejectPopUpMessage'),\r\n            buttonColors: { confirm: 'secondary', cancel: 'primary' },\r\n            submitHandler: () => {\r\n              dispatch(getRejectCloseCase({ taskId, notesFieldValue, policyRef })).then((response) => {\r\n                if (response?.status === constants.NOTES_API_SUCCESS_STATUS || response?.message?.toUpperCase() === null) {\r\n                  dispatch(getPremiumProcessingTasksDetails({ requestType: 'search', taskType: caseTaskTypeView, filterTerm: [] }));\r\n                  dispatch(getPremiumProcessingTasksDetails({ requestType: 'filter', taskType: caseTaskTypeView, filterTerm: [] }));\r\n                }\r\n                else{\r\n                  dispatch(enqueueNotification('premiumProcessing.checkSigningReject.rejectCloseErrorMessage', 'error'));\r\n                  dispatch(getPremiumProcessingTasksDetails({ requestType: 'search', taskType: caseTaskTypeView, filterTerm: [] }));\r\n                  dispatch(getPremiumProcessingTasksDetails({ requestType: 'filter', taskType: caseTaskTypeView, filterTerm: [] }));\r\n                }\r\n              });\r\n            },\r\n            cancelHandler: () => {},\r\n            handleClose: () => {},\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const reSubmitStageModal = () => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          fullWidth: true,\r\n          title: utils.string.t('premiumProcessing.reSubmitCases.reSubmitCase'),\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            confirmLabel: utils.string.t('premiumProcessing.reSubmitCases.reSubmit'),\r\n            cancelLabel: utils.string.t('premiumProcessing.reSubmitCases.cancel'),\r\n            confirmMessage: utils.string.t('premiumProcessing.reSubmitCases.resubmitPopUpMessage'),\r\n            buttonColors: { confirm: 'secondary', cancel: 'primary' },\r\n            submitHandler: () => {\r\n              const isReSubmitted = true;\r\n              const notes = notesFieldValue;\r\n              dispatch(postNewWorkflowStage({ taskId, notes, isReSubmitted, policyRef })).then((response) => {\r\n                if (response?.message.toUpperCase() === constants.API_RESPONSE_SUCCESS || response?.message.toUpperCase() === null) {\r\n                  dispatch(getPremiumProcessingTasksDetails({ requestType: 'search', taskType: caseTaskTypeView, filterTerm: [] }));\r\n                  dispatch(getPremiumProcessingTasksDetails({ requestType: 'filter', taskType: caseTaskTypeView, filterTerm: [] }));\r\n                }\r\n              });\r\n            },\r\n            cancelHandler: () => {},\r\n            handleClose: () => {},\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n  const rejectStage = () => {\r\n    if (isEmpty(fieldsValue?.notesField)) {\r\n      dispatch(enqueueNotification('premiumProcessing.rejectingCase.rejectCloseNotes', 'warning'));\r\n      return;\r\n    }\r\n    rejectStageModal();\r\n  };\r\n  const reSubmitStage = () => {\r\n    if (isEmpty(fieldsValue?.notesField)) {\r\n      dispatch(enqueueNotification('premiumProcessing.reSubmitCases.reSubmitNotes', 'warning'));\r\n      return;\r\n    }\r\n    reSubmitStageModal();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box>\r\n        {isWorkList && isMyTask && isValidQCSection && isQcCase && !isRfiCase && (\r\n          <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n            <FormRadio {...utils.form.getFieldProps(fields, 'qualityControl', control)} muiFormGroupProps={{ row: true }} />\r\n            <Button\r\n              text={utils.string.t('app.submit')}\r\n              onClick={() => {\r\n                handlers.qcSubmit(watch());\r\n              }}\r\n              color=\"primary\"\r\n              variant=\"outlined\"\r\n              size=\"xsmall\"\r\n              styles={{ paddingleft: '20px' }}\r\n              nestedClasses={{ btn: classes.submitButton }}\r\n            />\r\n          </Box>\r\n        )}\r\n        {!isRfiCase && (\r\n          <PremiumProcessingCreateActionAccordion\r\n            taskId={taskId}\r\n            currentUser={currentUser}\r\n            selectedCases={selectedCases}\r\n            isUnassignedStage={isUnassignedStage}\r\n            fieldsValue={fieldsValue}\r\n            isWorkBasket={isWorkBasket}\r\n            isAllCases={isAllCases}\r\n            isIssueDocumentStage={isIssueDocumentStage}\r\n            isValidRPSection={isValidRPSection}\r\n            isCheckSigningCase={isCheckSigningCase}\r\n            isRejectPendingActionStage={isRejectPendingActionStage}\r\n          />\r\n        )}\r\n        {!isRfiCase && (\r\n          <PremiumProcessingPendingActionAccordion\r\n            isCheckSigningCase={isCheckSigningCase}\r\n            taskId={taskId}\r\n            isValidRPSection={isValidRPSection}\r\n            isWorkBasket={isWorkBasket}\r\n            isAllCases={isAllCases}\r\n            isUnassignedStage={isUnassignedStage}\r\n            isIssueDocumentStage={isIssueDocumentStage}\r\n          />\r\n        )}\r\n        {isTransactionCommited && !isRfiCase && (\r\n          <FormCheckbox\r\n            {...utils.form.getFieldProps(fields, 'transactionCommited', control)}\r\n            nestedClasses={{ root: classes.checkboxAlignment }}\r\n            muiComponentProps={{\r\n              onChange: () => {\r\n                if (isTransactionCommited) {\r\n                  setEnableMoveToNext(!enableMoveToNext);\r\n                }\r\n              },\r\n            }}\r\n          />\r\n        )}\r\n        {!isRfiCase && (\r\n          <Box className={classes.premiumNotes} data-testid={notesTextFieldProps.id}>\r\n            <Grid container>\r\n              <Grid item xs={12} sm={12}>\r\n                <Grid container justify=\"space-between\">\r\n                  <Grid item>\r\n                    <Typography className={classes.notes} data-testid={`${notesTextFieldProps.id + '-label'}`}>\r\n                      {utils.string.t('premiumProcessing.notes.notes')}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Typography>\r\n                      <Link\r\n                        underline=\"always\"\r\n                        className={classes.notesHistory}\r\n                        onClick={() => handlers.viewMoreNotesHandler()}\r\n                        data-testid={`${notesTextFieldProps.id + '-history-link'}`}\r\n                      >\r\n                        {utils.string.t('premiumProcessing.notes.viewNotes')}\r\n                      </Link>\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormText {...notesTextFieldProps} {...utils.form.getFieldProps(fields, 'notesField')} control={control} />\r\n              </Grid>\r\n              <Grid container justify=\"flex-end\" direction=\"column\" alignItems=\"flex-end\" className={classes.rejectSubmitButtons}>\r\n                <Button\r\n                  text={utils.string.t('premiumProcessing.caseSummary.saveNote')}\r\n                  onClick={() => {\r\n                    saveNotes(notesFieldValue);\r\n                  }}\r\n                  disabled={isWorkBasket || isAllCases || isUnassignedStage || !enableSaveNotes}\r\n                  color={'default'}\r\n                  variant={'outlined'}\r\n                  size={'xsmall'}\r\n                  data-testid=\"PremiumprocessingSummaryRejectButton\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        )}\r\n        <Box>\r\n          <Grid container justify=\"flex-end\" direction=\"column\" alignItems=\"flex-end\" spacing={2} className={classes.saveNotesButtons}>\r\n            {!isCheckSigningCase && !isRfiCase && !isRpCase && (\r\n              <Grid item>\r\n                <Button\r\n                  color=\"primary\"\r\n                  size=\"medium\"\r\n                  text={utils.string.t('premiumProcessing.caseSummary.moveToNextStage')}\r\n                  onClick={() => handlers.handleMoveToNextStage()}\r\n                  disabled={\r\n                    isWorkBasket ||\r\n                    isAllCases ||\r\n                    enableMoveToNext ||\r\n                    (isValidQCSection && isQcCase) ||\r\n                    (isValidRPSection && !isIssueDocumentStage)\r\n                  }\r\n                  data-testid=\"PremiumprocessingSummarySubmitButton\"\r\n                />\r\n              </Grid>\r\n            )}\r\n            {isRfiCase && (\r\n              <Grid item>\r\n                <Button\r\n                  nestedClasses={{ btn: classes.button }}\r\n                  color=\"primary\"\r\n                  size=\"medium\"\r\n                  text={\r\n                    caseRFIBureau\r\n                      ? utils.string.t('premiumProcessing.respondingCase.resolve')\r\n                      : utils.string.t('premiumProcessing.respondingCase.respond')\r\n                  }\r\n                  onClick={() => handlers.caseRfiHandler()}\r\n                  disabled={isWorkBasket || isAllCases}\r\n                />\r\n              </Grid>\r\n            )}\r\n            {isRpCase && !isCheckSigningCase && !isRfiCase && (\r\n              <Grid item>\r\n                <Button\r\n                  nestedClasses={{ btn: classes.button }}\r\n                  color=\"primary\"\r\n                  size=\"medium\"\r\n                  text={utils.string.t('premiumProcessing.rejectingCase.reject')}\r\n                  onClick={() => rejectStage()}\r\n                  disabled={isWorkBasket || isAllCases}\r\n                />\r\n                <Button\r\n                  nestedClasses={{ btn: classes.button }}\r\n                  color=\"primary\"\r\n                  size=\"medium\"\r\n                  text={utils.string.t('premiumProcessing.reSubmitCases.reSubmit')}\r\n                  onClick={() => reSubmitStage()}\r\n                  disabled={isWorkBasket || isAllCases}\r\n                />\r\n              </Grid>\r\n            )}\r\n            {isCheckSigningCase && !isRpCase && !isRfiCase && (\r\n              <Grid item>\r\n                <Button\r\n                  nestedClasses={{ btn: classes.singleRowButton }}\r\n                  color=\"primary\"\r\n                  size=\"medium\"\r\n                  text={utils.string.t('premiumProcessing.checkSigningCase.cancel')}\r\n                  onClick={() => handlers.checkSigningCancel(fieldsValue)}\r\n                  disabled={isWorkBasket || isAllCases || isRejectPendingActionStage}\r\n                />\r\n                <Button\r\n                  nestedClasses={{ btn: classes.singleRowButton }}\r\n                  color=\"primary\"\r\n                  size=\"medium\"\r\n                  text={utils.string.t('premiumProcessing.checkSigningCase.reject')}\r\n                  onClick={() => handlers.checkSigningReject(fieldsValue)}\r\n                  disabled={isWorkBasket || isAllCases}\r\n                />\r\n                <Button\r\n                  nestedClasses={{ btn: classes.singleRowButton }}\r\n                  color=\"primary\"\r\n                  size=\"medium\"\r\n                  text={utils.string.t('premiumProcessing.checkSigningCase.complete')}\r\n                  onClick={() => handlers.checkSigningComplete(fieldsValue)}\r\n                  disabled={isWorkBasket || isAllCases || isRejectPendingActionStage}\r\n                />\r\n              </Grid>\r\n            )}\r\n          </Grid>\r\n        </Box>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}