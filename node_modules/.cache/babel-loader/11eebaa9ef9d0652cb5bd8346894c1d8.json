{"ast":null,"code":"import _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { firstBy } from 'thenby';\nimport toPairs from 'lodash/toPairs';\nimport groupBy from 'lodash/groupBy';\nimport get from 'lodash/get';\nimport orderBy from 'lodash/orderBy'; // app\n\nimport * as utils from 'utils';\nvar utilsPolicies = {\n  getByBusinessType: function getByBusinessType(policies) {\n    if (!utils.generic.isValidArray(policies, true)) return [];\n    return toPairs(groupBy(policies, function (policy) {\n      return policy.businessTypeId;\n    }));\n  },\n  getById: function getById(policies, id) {\n    if (!utils.generic.isValidArray(policies, true) || !id) return;\n    return policies.find(function (policy) {\n      return policy.id === id;\n    });\n  },\n  getMarketById: function getMarketById(policies, marketId) {\n    if (!utils.generic.isValidArray(policies, true) || !marketId) return;\n    var policy = policies.find(function (policy) {\n      return utils.generic.isValidArray(policy.markets, true) && policy.markets.some(function (market) {\n        return market.id === marketId;\n      });\n    });\n    var marketsArray = utils.policy.getMarkets(policy);\n    return marketsArray.find(function (marketObj) {\n      return marketObj.id === marketId;\n    });\n  },\n  orderPolicies: function orderPolicies(policies) {\n    if (!utils.generic.isValidArray(policies, true)) return [];\n    var primaryPolicies = orderBy(policies.filter(function (policy) {\n      return utils.policy.isPrimary(policy);\n    }), ['amount'], ['desc']);\n    var excessPolicies = orderBy(policies.filter(function (policy) {\n      return !utils.policy.isPrimary(policy);\n    }), ['excess', 'amount'], ['asc', 'desc']);\n    return [].concat(_toConsumableArray(primaryPolicies), _toConsumableArray(excessPolicies));\n  },\n  getMudmap: function getMudmap(policies, config, statusMarketQuoted) {\n    var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'written';\n    if (!utils.generic.isValidArray(policies, true)) return [];\n    var isWritten = type === 'written';\n    var isSigned = type === 'signed';\n    return policies.reduce(function (arr, policy) {\n      var marketsGroups = groupBy(get(policy, 'markets', []), function (market) {\n        return get(market, 'market.capacityTypeId');\n      });\n      Object.entries(marketsGroups).forEach(function (marketGroup) {\n        var capacityTypeId = marketGroup[0];\n        var markets = marketGroup[1];\n        var marketsQuoted = utils.markets.getByStatusIds(markets, [statusMarketQuoted]);\n        var policyId = \"\".concat(policy.id, \"-\").concat(marketsQuoted.map(function (m) {\n          return m.id;\n        }).join('-'));\n        var policyCurrency = utils.policy.getCurrency(policy);\n        var policyMultiplePrices = utils.markets.hasMultiplePremiums(marketsQuoted);\n        var isBound = utils.policy.isOriginGxb(policy);\n        var policyPremiumByCurrency = isBound ? utils.markets.getPremiumBySettlementCurrency(marketsQuoted, false, false) : utils.markets.getPremiumByCurrency(marketsQuoted, policyCurrency, false, false);\n        var policyWritten = utils.markets.getLineSize(marketsQuoted);\n        var policySigned = utils.markets.getLineSize(marketsQuoted, true);\n        var policyConfig = config.find(function (p) {\n          return p.id === policyId;\n        }) || {}; // only keep policies with enough/valid data\n\n        if (policy.amount && (isWritten && policyWritten || isSigned && policySigned)) {\n          arr.push({\n            id: policyId,\n            order: policyConfig && policyConfig.order ? policyConfig.order : null,\n            capacityId: parseInt(capacityTypeId),\n            currency: utils.policy.getCurrency(policy),\n            market: utils.policy.getName(policy),\n            leads: marketsQuoted.reduce(function (leads, m) {\n              var id = utils.market.getId(m);\n              var name = utils.market.getName(m);\n              var notes = utils.market.getNotes(m);\n              return name ? [].concat(_toConsumableArray(leads), [{\n                id: id,\n                name: name,\n                notes: notes\n              }]) : leads;\n            }, []),\n            amount: policy.amount,\n            xs: policy.excess || 0,\n            premium: policyMultiplePrices ? utils.string.t('app.various') : policyPremiumByCurrency[policyCurrency] || 0,\n            written: policyWritten ? policyWritten / 100 : 0,\n            signed: policySigned ? policySigned / 100 : 0\n          });\n        }\n      });\n      return arr;\n    }, []).sort(firstBy(utils.sort.array('numeric', 'order')).thenBy(utils.sort.array('numeric', 'amount', 'desc')).thenBy(utils.sort.array('numeric', 'excess', 'desc')));\n  }\n};\nexport default utilsPolicies;","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/utils/policies/policies.js"],"names":["firstBy","toPairs","groupBy","get","orderBy","utils","utilsPolicies","getByBusinessType","policies","generic","isValidArray","policy","businessTypeId","getById","id","find","getMarketById","marketId","markets","some","market","marketsArray","getMarkets","marketObj","orderPolicies","primaryPolicies","filter","isPrimary","excessPolicies","getMudmap","config","statusMarketQuoted","type","isWritten","isSigned","reduce","arr","marketsGroups","Object","entries","forEach","marketGroup","capacityTypeId","marketsQuoted","getByStatusIds","policyId","map","m","join","policyCurrency","getCurrency","policyMultiplePrices","hasMultiplePremiums","isBound","isOriginGxb","policyPremiumByCurrency","getPremiumBySettlementCurrency","getPremiumByCurrency","policyWritten","getLineSize","policySigned","policyConfig","p","amount","push","order","capacityId","parseInt","currency","getName","leads","getId","name","notes","getNotes","xs","excess","premium","string","t","written","signed","sort","array","thenBy"],"mappings":"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","sourcesContent":["import { firstBy } from 'thenby';\r\nimport toPairs from 'lodash/toPairs';\r\nimport groupBy from 'lodash/groupBy';\r\nimport get from 'lodash/get';\r\nimport orderBy from 'lodash/orderBy';\r\n\r\n// app\r\nimport * as utils from 'utils';\r\n\r\nconst utilsPolicies = {\r\n  getByBusinessType: (policies) => {\r\n    if (!utils.generic.isValidArray(policies, true)) return [];\r\n\r\n    return toPairs(groupBy(policies, (policy) => policy.businessTypeId));\r\n  },\r\n\r\n  getById: (policies, id) => {\r\n    if (!utils.generic.isValidArray(policies, true) || !id) return;\r\n\r\n    return policies.find((policy) => policy.id === id);\r\n  },\r\n\r\n  getMarketById: (policies, marketId) => {\r\n    if (!utils.generic.isValidArray(policies, true) || !marketId) return;\r\n\r\n    const policy = policies.find((policy) => {\r\n      return (\r\n        utils.generic.isValidArray(policy.markets, true) &&\r\n        policy.markets.some((market) => {\r\n          return market.id === marketId;\r\n        })\r\n      );\r\n    });\r\n\r\n    const marketsArray = utils.policy.getMarkets(policy);\r\n\r\n    return marketsArray.find((marketObj) => marketObj.id === marketId);\r\n  },\r\n\r\n  orderPolicies: (policies) => {\r\n    if (!utils.generic.isValidArray(policies, true)) return [];\r\n\r\n    const primaryPolicies = orderBy(\r\n      policies.filter((policy) => utils.policy.isPrimary(policy)),\r\n      ['amount'],\r\n      ['desc']\r\n    );\r\n    const excessPolicies = orderBy(\r\n      policies.filter((policy) => !utils.policy.isPrimary(policy)),\r\n      ['excess', 'amount'],\r\n      ['asc', 'desc']\r\n    );\r\n\r\n    return [...primaryPolicies, ...excessPolicies];\r\n  },\r\n\r\n  getMudmap: (policies, config, statusMarketQuoted, type = 'written') => {\r\n    if (!utils.generic.isValidArray(policies, true)) return [];\r\n\r\n    const isWritten = type === 'written';\r\n    const isSigned = type === 'signed';\r\n\r\n    return policies\r\n      .reduce((arr, policy) => {\r\n        const marketsGroups = groupBy(get(policy, 'markets', []), (market) => get(market, 'market.capacityTypeId'));\r\n\r\n        Object.entries(marketsGroups).forEach((marketGroup) => {\r\n          const capacityTypeId = marketGroup[0];\r\n          const markets = marketGroup[1];\r\n          const marketsQuoted = utils.markets.getByStatusIds(markets, [statusMarketQuoted]);\r\n\r\n          const policyId = `${policy.id}-${marketsQuoted.map((m) => m.id).join('-')}`;\r\n          const policyCurrency = utils.policy.getCurrency(policy);\r\n          const policyMultiplePrices = utils.markets.hasMultiplePremiums(marketsQuoted);\r\n\r\n          const isBound = utils.policy.isOriginGxb(policy);\r\n          const policyPremiumByCurrency = isBound\r\n            ? utils.markets.getPremiumBySettlementCurrency(marketsQuoted, false, false)\r\n            : utils.markets.getPremiumByCurrency(marketsQuoted, policyCurrency, false, false);\r\n\r\n          const policyWritten = utils.markets.getLineSize(marketsQuoted);\r\n          const policySigned = utils.markets.getLineSize(marketsQuoted, true);\r\n          const policyConfig = config.find((p) => p.id === policyId) || {};\r\n\r\n          // only keep policies with enough/valid data\r\n          if (policy.amount && ((isWritten && policyWritten) || (isSigned && policySigned))) {\r\n            arr.push({\r\n              id: policyId,\r\n              order: policyConfig && policyConfig.order ? policyConfig.order : null,\r\n              capacityId: parseInt(capacityTypeId),\r\n              currency: utils.policy.getCurrency(policy),\r\n              market: utils.policy.getName(policy),\r\n              leads: marketsQuoted.reduce((leads, m) => {\r\n                const id = utils.market.getId(m);\r\n                const name = utils.market.getName(m);\r\n                const notes = utils.market.getNotes(m);\r\n\r\n                return name ? [...leads, { id, name, notes }] : leads;\r\n              }, []),\r\n              amount: policy.amount,\r\n              xs: policy.excess || 0,\r\n              premium: policyMultiplePrices ? utils.string.t('app.various') : policyPremiumByCurrency[policyCurrency] || 0,\r\n              written: policyWritten ? policyWritten / 100 : 0,\r\n              signed: policySigned ? policySigned / 100 : 0,\r\n            });\r\n          }\r\n        });\r\n\r\n        return arr;\r\n      }, [])\r\n      .sort(\r\n        firstBy(utils.sort.array('numeric', 'order'))\r\n          .thenBy(utils.sort.array('numeric', 'amount', 'desc'))\r\n          .thenBy(utils.sort.array('numeric', 'excess', 'desc'))\r\n      );\r\n  },\r\n};\r\n\r\nexport default utilsPolicies;\r\n"]},"metadata":{},"sourceType":"module"}