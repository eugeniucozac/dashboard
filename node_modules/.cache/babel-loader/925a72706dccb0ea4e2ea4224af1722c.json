{"ast":null,"code":"var _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\pages\\\\TaskDashboard\\\\TaskDashboard.view.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types'; // app\n\nimport { Breadcrumb, Layout, PopoverMenu, SectionHeader, Tabs } from 'components';\nimport { TaskDetails, TaskNotes, ClaimsUploadViewSearchDocs } from 'modules';\nimport * as utils from 'utils';\nimport * as constants from 'consts'; // mui\n\nimport { Divider } from '@material-ui/core';\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nTaskDashboardView.propTypes = {\n  task: PropTypes.object.isRequired,\n  tabs: PropTypes.array.isRequired,\n  selectedTab: PropTypes.string.isRequired,\n  breadcrumbs: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    label: PropTypes.string.isRequired,\n    link: PropTypes.string\n  })).isRequired,\n  handleSelectTab: PropTypes.func.isRequired,\n  popoverActions: PropTypes.array.isRequired\n};\nexport function TaskDashboardView(_ref) {\n  var task = _ref.task,\n      tabs = _ref.tabs,\n      selectedTab = _ref.selectedTab,\n      breadcrumbs = _ref.breadcrumbs,\n      handleSelectTab = _ref.handleSelectTab,\n      popoverActions = _ref.popoverActions;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Breadcrumb, {\n      links: breadcrumbs,\n      testid: \"task-dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Layout, {\n      testid: \"task-dashboard\",\n      children: /*#__PURE__*/_jsxDEV(Layout, {\n        main: true,\n        children: [/*#__PURE__*/_jsxDEV(SectionHeader, {\n          title: utils.string.t('claims.processing.task.title', {\n            id: task.taskRef\n          }),\n          icon: DescriptionIcon,\n          testid: \"task-ref-header\",\n          children: /*#__PURE__*/_jsxDEV(PopoverMenu, {\n            variant: \"outlined\",\n            id: \"task-functions\",\n            size: \"small\",\n            color: \"primary\",\n            text: utils.string.t('claims.processing.taskFunctions'),\n            isButton: true,\n            anchorOrigin: {\n              vertical: 'bottom',\n              horizontal: 'right'\n            },\n            transformOrigin: {\n              vertical: 'top',\n              horizontal: 'right'\n            },\n            items: popoverActions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n          tabs: tabs,\n          value: selectedTab,\n          onChange: function onChange(tabName) {\n            return handleSelectTab(tabName);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), selectedTab === 'taskDetails' && /*#__PURE__*/_jsxDEV(TaskDetails, {\n          taskObj: task\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 45\n        }, this), selectedTab === 'documents' && /*#__PURE__*/_jsxDEV(ClaimsUploadViewSearchDocs, {\n          refData: task,\n          refIdName: constants.DMS_CONTEXT_TASK_ID,\n          dmsContext: constants.DMS_CONTEXT_TASK,\n          documentTypeKey: constants.DMS_DOCUMENT_TYPE_SECTION_KEYS.type.claims\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this), selectedTab === 'notes' && /*#__PURE__*/_jsxDEV(TaskNotes, {\n          taskObj: task\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 39\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_c = TaskDashboardView;\nTaskDashboardView.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"TaskDashboardView\",\n  \"props\": {\n    \"task\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"tabs\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"selectedTab\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"breadcrumbs\": {\n      \"type\": {\n        \"name\": \"arrayOf\",\n        \"value\": {\n          \"name\": \"shape\",\n          \"value\": {\n            \"name\": {\n              \"name\": \"string\",\n              \"required\": true\n            },\n            \"label\": {\n              \"name\": \"string\",\n              \"required\": true\n            },\n            \"link\": {\n              \"name\": \"string\",\n              \"required\": false\n            }\n          }\n        }\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"handleSelectTab\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"popoverActions\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\pages\\\\TaskDashboard\\\\TaskDashboard.view.js\"] = {\n    name: \"TaskDashboardView\",\n    docgenInfo: TaskDashboardView.__docgenInfo,\n    path: \"src\\\\pages\\\\TaskDashboard\\\\TaskDashboard.view.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskDashboardView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/pages/TaskDashboard/TaskDashboard.view.js"],"names":["React","PropTypes","Breadcrumb","Layout","PopoverMenu","SectionHeader","Tabs","TaskDetails","TaskNotes","ClaimsUploadViewSearchDocs","utils","constants","Divider","DescriptionIcon","TaskDashboardView","propTypes","task","object","isRequired","tabs","array","selectedTab","string","breadcrumbs","arrayOf","shape","name","label","link","handleSelectTab","func","popoverActions","t","id","taskRef","vertical","horizontal","tabName","DMS_CONTEXT_TASK_ID","DMS_CONTEXT_TASK","DMS_DOCUMENT_TYPE_SECTION_KEYS","type","claims"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// app\r\nimport { Breadcrumb, Layout, PopoverMenu, SectionHeader, Tabs } from 'components';\r\nimport { TaskDetails, TaskNotes, ClaimsUploadViewSearchDocs } from 'modules';\r\nimport * as utils from 'utils';\r\nimport * as constants from 'consts';\r\n\r\n// mui\r\nimport { Divider } from '@material-ui/core';\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\n\r\nTaskDashboardView.propTypes = {\r\n  task: PropTypes.object.isRequired,\r\n  tabs: PropTypes.array.isRequired,\r\n  selectedTab: PropTypes.string.isRequired,\r\n  breadcrumbs: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      label: PropTypes.string.isRequired,\r\n      link: PropTypes.string,\r\n    })\r\n  ).isRequired,\r\n  handleSelectTab: PropTypes.func.isRequired,\r\n  popoverActions: PropTypes.array.isRequired,\r\n};\r\nexport function TaskDashboardView({ task, tabs, selectedTab, breadcrumbs, handleSelectTab, popoverActions }) {\r\n  return (\r\n    <>\r\n      <Breadcrumb links={breadcrumbs} testid=\"task-dashboard\" />\r\n      <Divider />\r\n\r\n      <Layout testid=\"task-dashboard\">\r\n        <Layout main>\r\n          <SectionHeader\r\n            title={utils.string.t('claims.processing.task.title', { id: task.taskRef })}\r\n            icon={DescriptionIcon}\r\n            testid=\"task-ref-header\"\r\n          >\r\n            <PopoverMenu\r\n              variant=\"outlined\"\r\n              id=\"task-functions\"\r\n              size=\"small\"\r\n              color=\"primary\"\r\n              text={utils.string.t('claims.processing.taskFunctions')}\r\n              isButton\r\n              anchorOrigin={{\r\n                vertical: 'bottom',\r\n                horizontal: 'right',\r\n              }}\r\n              transformOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'right',\r\n              }}\r\n              items={popoverActions}\r\n            />\r\n          </SectionHeader>\r\n          <Tabs tabs={tabs} value={selectedTab} onChange={(tabName) => handleSelectTab(tabName)} />\r\n\r\n          {/* tabs content */}\r\n          {selectedTab === 'taskDetails' && <TaskDetails taskObj={task} />}\r\n          {selectedTab === 'documents' && (\r\n            <ClaimsUploadViewSearchDocs\r\n              refData={task}\r\n              refIdName={constants.DMS_CONTEXT_TASK_ID}\r\n              dmsContext={constants.DMS_CONTEXT_TASK}\r\n              documentTypeKey={constants.DMS_DOCUMENT_TYPE_SECTION_KEYS.type.claims}\r\n            />\r\n          )}\r\n          {selectedTab === 'notes' && <TaskNotes taskObj={task} />}\r\n        </Layout>\r\n      </Layout>\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}