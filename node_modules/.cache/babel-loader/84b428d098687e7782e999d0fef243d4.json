{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport get from 'lodash/get'; // app\n\nimport { addLoader, authLogout, enqueueNotification, hideModal, removeLoader } from 'stores';\nimport * as utils from 'utils';\nexport var postPlacementAddLayerMarket = function postPlacementAddLayerMarket(formData) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/placement.actions.addLayerMarket',\n      message: 'Data missing for POST request'\n    };\n    dispatch(postPlacementAddLayerMarketRequest(formData));\n    dispatch(addLoader('postPlacementAddLayerMarket'));\n\n    if (!formData || !get(formData, 'market.market.id') || !formData.placementlayerId) {\n      dispatch(postPlacementAddLayerMarketFailure(defaultError));\n      dispatch(enqueueNotification('notification.addMarket.fail', 'error'));\n      dispatch(hideModal());\n      dispatch(removeLoader('postPlacementAddLayerMarket'));\n      return;\n    } // get the data for POST\n\n\n    var body = {\n      marketId: get(formData, 'market.market.id'),\n      placementlayerId: formData.placementlayerId\n    };\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.edge,\n      path: 'api/placementlayerMarket',\n      data: body\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleData(json);\n    }).then(function (data) {\n      dispatch(postPlacementAddLayerMarketSuccess(data));\n      dispatch(enqueueNotification('notification.addMarket.success', 'success'));\n      dispatch(hideModal());\n      dispatch(removeLoader('postPlacementAddLayerMarket'));\n      return data;\n    }).catch(function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API post error (placement.addLayerMarket)'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(postPlacementAddLayerMarketFailure(err));\n      dispatch(enqueueNotification('notification.addMarket.fail', 'error'));\n      dispatch(hideModal());\n      dispatch(removeLoader('postPlacementAddLayerMarket'));\n      return err;\n    });\n  };\n};\nexport var postPlacementAddLayerMarketRequest = function postPlacementAddLayerMarketRequest(data) {\n  return {\n    type: 'PLACEMENT_LAYER_MARKET_POST_REQUEST',\n    payload: data\n  };\n};\nexport var postPlacementAddLayerMarketSuccess = function postPlacementAddLayerMarketSuccess(data) {\n  return {\n    type: 'PLACEMENT_LAYER_MARKET_POST_SUCCESS',\n    payload: data\n  };\n};\nexport var postPlacementAddLayerMarketFailure = function postPlacementAddLayerMarketFailure(error) {\n  return {\n    type: 'PLACEMENT_LAYER_MARKET_POST_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/placement/placement.actions.addPlacementLayerMarket.js"],"names":["get","addLoader","authLogout","enqueueNotification","hideModal","removeLoader","utils","postPlacementAddLayerMarket","formData","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","message","postPlacementAddLayerMarketRequest","placementlayerId","postPlacementAddLayerMarketFailure","body","marketId","api","post","token","accessToken","edge","path","data","then","response","handleResponse","json","handleData","postPlacementAddLayerMarketSuccess","catch","err","errorParams","handleError","handleUnauthorized","type","payload","error"],"mappings":"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","sourcesContent":["import get from 'lodash/get';\r\n\r\n// app\r\nimport { addLoader, authLogout, enqueueNotification, hideModal, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const postPlacementAddLayerMarket = (formData) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/placement.actions.addLayerMarket',\r\n    message: 'Data missing for POST request',\r\n  };\r\n\r\n  dispatch(postPlacementAddLayerMarketRequest(formData));\r\n  dispatch(addLoader('postPlacementAddLayerMarket'));\r\n\r\n  if (!formData || !get(formData, 'market.market.id') || !formData.placementlayerId) {\r\n    dispatch(postPlacementAddLayerMarketFailure(defaultError));\r\n    dispatch(enqueueNotification('notification.addMarket.fail', 'error'));\r\n    dispatch(hideModal());\r\n    dispatch(removeLoader('postPlacementAddLayerMarket'));\r\n    return;\r\n  }\r\n\r\n  // get the data for POST\r\n  const body = {\r\n    marketId: get(formData, 'market.market.id'),\r\n    placementlayerId: formData.placementlayerId,\r\n  };\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.edge,\r\n      path: 'api/placementlayerMarket',\r\n      data: body,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleData(json))\r\n    .then((data) => {\r\n      dispatch(postPlacementAddLayerMarketSuccess(data));\r\n      dispatch(enqueueNotification('notification.addMarket.success', 'success'));\r\n      dispatch(hideModal());\r\n      dispatch(removeLoader('postPlacementAddLayerMarket'));\r\n      return data;\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        ...defaultError,\r\n        message: 'API post error (placement.addLayerMarket)',\r\n      };\r\n\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(postPlacementAddLayerMarketFailure(err));\r\n      dispatch(enqueueNotification('notification.addMarket.fail', 'error'));\r\n      dispatch(hideModal());\r\n      dispatch(removeLoader('postPlacementAddLayerMarket'));\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const postPlacementAddLayerMarketRequest = (data) => {\r\n  return {\r\n    type: 'PLACEMENT_LAYER_MARKET_POST_REQUEST',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const postPlacementAddLayerMarketSuccess = (data) => {\r\n  return {\r\n    type: 'PLACEMENT_LAYER_MARKET_POST_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const postPlacementAddLayerMarketFailure = (error) => {\r\n  return {\r\n    type: 'PLACEMENT_LAYER_MARKET_POST_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}