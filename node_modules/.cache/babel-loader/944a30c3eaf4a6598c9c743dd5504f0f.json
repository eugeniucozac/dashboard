{"ast":null,"code":"import \"core-js/modules/es.promise.finally\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { addLoader, authLogout, enqueueNotification, removeLoader, hideModal } from 'stores';\nimport * as utils from 'utils';\nimport isEmpty from 'lodash/isEmpty';\nimport get from 'lodash/get';\nexport var postInsured = function postInsured(body, isCreateInsuredModal, reInsured) {\n  var isEdit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/risk.actions.postInsured',\n      message: 'Data missing for POST request'\n    };\n    var success = isEdit ? 'postEditSuccess' : 'postSuccess';\n    var successNotification = reInsured ? \"notification.reInsured.\".concat(success) : \"notification.insured.\".concat(success);\n    dispatch(postInsuredRequest(body));\n    dispatch(addLoader('postInsured'));\n\n    if (!body || isEmpty(body)) {\n      dispatch(postInsuredFailure(defaultError));\n      dispatch(enqueueNotification('notification.generic.request', 'error'));\n      dispatch(removeLoader('postInsured'));\n      return;\n    }\n\n    var path = reInsured ? 'api/v1/reinsured' : 'api/v1/insured';\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.auth,\n      path: path,\n      data: _objectSpread(_objectSpread({}, (body === null || body === void 0 ? void 0 : body.id) && {\n        id: body.id\n      }), {}, {\n        name: body.name || '',\n        clientId: get(body, 'clientId.value', ''),\n        partyType: get(body, 'partyType.value', ''),\n        genderType: get(body, 'genderType.value', null),\n        dateOfBirth: body.dateOfBirth ? utils.date.toISOString(body.dateOfBirth) : null,\n        address: {\n          street: body.street || '',\n          city: body.city || '',\n          zipCode: body.zipCode || '',\n          county: body.county || '',\n          state: body.state || '',\n          country: get(body, 'country.value', ''),\n          distanceToCoast: ''\n        }\n      })\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (data) {\n      reInsured ? dispatch(postReInsuredSuccess(data, isEdit)) : dispatch(postInsuredSuccess(data, isEdit));\n      dispatch(enqueueNotification(successNotification, 'success'));\n      return data;\n    })[\"catch\"](function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API post error (risk.postInsured)'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(postInsuredFailure(err));\n      dispatch(enqueueNotification(utils.api.getErrorMessage(err), 'error'));\n      return err;\n    })[\"finally\"](function () {\n      dispatch(hideModal(isCreateInsuredModal ? isEdit ? 'EDIT_PRODUCTS_INSURED' : 'ADD_INSURED' : undefined));\n      dispatch(removeLoader('postInsured'));\n    });\n  };\n};\nexport var postInsuredRequest = function postInsuredRequest(formData) {\n  return {\n    type: 'INSURED_POST_REQUEST',\n    payload: formData\n  };\n};\nexport var postInsuredSuccess = function postInsuredSuccess(responseData, isEdit) {\n  return {\n    type: isEdit ? 'INSURED_POST_EDIT_SUCCESS' : 'INSURED_POST_SUCCESS',\n    payload: responseData\n  };\n};\nexport var postReInsuredSuccess = function postReInsuredSuccess(responseData, isEdit) {\n  return {\n    type: isEdit ? 'REINSURED_POST_EDIT_SUCCESS' : 'REINSURED_POST_SUCCESS',\n    payload: responseData\n  };\n};\nexport var postInsuredFailure = function postInsuredFailure(error) {\n  return {\n    type: 'INSURED_POST_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/party/party.actions.postInsured.js"],"names":["addLoader","authLogout","enqueueNotification","removeLoader","hideModal","utils","isEmpty","get","postInsured","body","isCreateInsuredModal","reInsured","isEdit","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","message","success","successNotification","postInsuredRequest","postInsuredFailure","path","api","post","token","accessToken","data","id","name","clientId","partyType","genderType","dateOfBirth","date","toISOString","address","street","city","zipCode","county","state","country","distanceToCoast","then","response","handleResponse","postReInsuredSuccess","postInsuredSuccess","err","errorParams","handleError","handleUnauthorized","getErrorMessage","undefined","formData","type","payload","responseData","error"],"mappings":"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","sourcesContent":["import { addLoader, authLogout, enqueueNotification, removeLoader, hideModal } from 'stores';\r\nimport * as utils from 'utils';\r\nimport isEmpty from 'lodash/isEmpty';\r\nimport get from 'lodash/get';\r\n\r\nexport const postInsured =\r\n  (body, isCreateInsuredModal, reInsured, isEdit = false) =>\r\n  (dispatch, getState) => {\r\n    // prettier-ignore\r\n    const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n    const defaultError = {\r\n      file: 'stores/risk.actions.postInsured',\r\n      message: 'Data missing for POST request',\r\n    };\r\n    const success = isEdit ? 'postEditSuccess' : 'postSuccess';\r\n    const successNotification = reInsured ? `notification.reInsured.${success}` : `notification.insured.${success}`;\r\n\r\n    dispatch(postInsuredRequest(body));\r\n    dispatch(addLoader('postInsured'));\r\n\r\n    if (!body || isEmpty(body)) {\r\n      dispatch(postInsuredFailure(defaultError));\r\n      dispatch(enqueueNotification('notification.generic.request', 'error'));\r\n      dispatch(removeLoader('postInsured'));\r\n      return;\r\n    }\r\n\r\n    const path = reInsured ? 'api/v1/reinsured' : 'api/v1/insured';\r\n\r\n    return utils.api\r\n      .post({\r\n        token: auth.accessToken,\r\n        endpoint: endpoint.auth,\r\n        path,\r\n        data: {\r\n          ...(body?.id && { id: body.id }),\r\n          name: body.name || '',\r\n          clientId: get(body, 'clientId.value', ''),\r\n          partyType: get(body, 'partyType.value', ''),\r\n          genderType: get(body, 'genderType.value', null),\r\n          dateOfBirth: body.dateOfBirth ? utils.date.toISOString(body.dateOfBirth) : null,\r\n          address: {\r\n            street: body.street || '',\r\n            city: body.city || '',\r\n            zipCode: body.zipCode || '',\r\n            county: body.county || '',\r\n            state: body.state || '',\r\n            country: get(body, 'country.value', ''),\r\n            distanceToCoast: '',\r\n          },\r\n        },\r\n      })\r\n      .then((response) => utils.api.handleResponse(response))\r\n      .then((data) => {\r\n        reInsured ? dispatch(postReInsuredSuccess(data, isEdit)) : dispatch(postInsuredSuccess(data, isEdit));\r\n        dispatch(enqueueNotification(successNotification, 'success'));\r\n        return data;\r\n      })\r\n      .catch((err) => {\r\n        const errorParams = {\r\n          ...defaultError,\r\n          message: 'API post error (risk.postInsured)',\r\n        };\r\n\r\n        utils.api.handleError(err, errorParams);\r\n        utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n        dispatch(postInsuredFailure(err));\r\n        dispatch(enqueueNotification(utils.api.getErrorMessage(err), 'error'));\r\n        return err;\r\n      })\r\n      .finally(() => {\r\n        dispatch(hideModal(isCreateInsuredModal ? (isEdit ? 'EDIT_PRODUCTS_INSURED' : 'ADD_INSURED') : undefined));\r\n        dispatch(removeLoader('postInsured'));\r\n      });\r\n  };\r\n\r\nexport const postInsuredRequest = (formData) => {\r\n  return {\r\n    type: 'INSURED_POST_REQUEST',\r\n    payload: formData,\r\n  };\r\n};\r\n\r\nexport const postInsuredSuccess = (responseData, isEdit) => {\r\n  return {\r\n    type: isEdit ? 'INSURED_POST_EDIT_SUCCESS' : 'INSURED_POST_SUCCESS',\r\n    payload: responseData,\r\n  };\r\n};\r\n\r\nexport const postReInsuredSuccess = (responseData, isEdit) => {\r\n  return {\r\n    type: isEdit ? 'REINSURED_POST_EDIT_SUCCESS' : 'REINSURED_POST_SUCCESS',\r\n    payload: responseData,\r\n  };\r\n};\r\n\r\nexport const postInsuredFailure = (error) => {\r\n  return {\r\n    type: 'INSURED_POST_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}