{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { addLoader, authLogout, enqueueNotification, getRiskDetails, hideModal, removeLoader } from 'stores';\nimport * as utils from 'utils';\nexport var postRiskQuoteResponse = function postRiskQuoteResponse(_ref) {\n  var quoteId = _ref.quoteId,\n      riskId = _ref.riskId,\n      formData = _objectWithoutProperties(_ref, [\"quoteId\", \"riskId\"]);\n\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/risk.actions.postQuoteResponse',\n      message: 'Data missing for POST request'\n    };\n    dispatch(postQuoteResponseRequest(_objectSpread({\n      quoteId: quoteId,\n      riskId: riskId\n    }, formData)));\n    dispatch(addLoader('postQuoteResponse'));\n\n    if (!formData || !riskId || !quoteId || !formData.effectiveFrom || !formData.effectiveTo) {\n      dispatch(postQuoteResponseFailure(defaultError));\n      dispatch(enqueueNotification('notification.generic.request', 'error'));\n      dispatch(hideModal());\n      dispatch(removeLoader('postQuoteResponse'));\n      return;\n    }\n\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.auth,\n      path: \"api/v1/quotes/\".concat(quoteId, \"/response\"),\n      data: formData\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleResponseJsonObject(json);\n    }).then(function (data) {\n      dispatch(postQuoteResponseSuccess(data));\n      return data;\n    }).then(function (data) {\n      return dispatch(getRiskDetails(data.riskId));\n    }).then(function () {\n      dispatch(enqueueNotification('notification.postRiskQuoteBind.success', 'success'));\n    }).catch(function (err) {\n      var errorParams = _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API post error (risk.postQuoteResponse)'\n      });\n\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(postQuoteResponseFailure(err));\n      dispatch(enqueueNotification(utils.api.getErrorMessage(err), 'error'));\n      return err;\n    }).finally(function () {\n      dispatch(hideModal());\n      dispatch(removeLoader('postQuoteResponse'));\n    });\n  };\n};\nexport var postQuoteResponseRequest = function postQuoteResponseRequest(formData) {\n  return {\n    type: 'RISK_POST_QUOTE_RESPONSE_REQUEST',\n    payload: formData\n  };\n};\nexport var postQuoteResponseSuccess = function postQuoteResponseSuccess(responseData) {\n  return {\n    type: 'RISK_POST_QUOTE_RESPONSE_SUCCESS',\n    payload: responseData\n  };\n};\nexport var postQuoteResponseFailure = function postQuoteResponseFailure(error) {\n  return {\n    type: 'RISK_POST_QUOTE_RESPONSE_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/risk/risk.actions.postQuoteResponse.js"],"names":["addLoader","authLogout","enqueueNotification","getRiskDetails","hideModal","removeLoader","utils","postRiskQuoteResponse","quoteId","riskId","formData","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","message","postQuoteResponseRequest","effectiveFrom","effectiveTo","postQuoteResponseFailure","api","post","token","accessToken","path","data","then","response","handleResponse","json","handleResponseJsonObject","postQuoteResponseSuccess","catch","err","errorParams","handleError","handleUnauthorized","getErrorMessage","finally","type","payload","responseData","error"],"mappings":"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","sourcesContent":["import { addLoader, authLogout, enqueueNotification, getRiskDetails, hideModal, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const postRiskQuoteResponse =\r\n  ({ quoteId, riskId, ...formData }) =>\r\n  (dispatch, getState) => {\r\n    // prettier-ignore\r\n    const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n    const defaultError = {\r\n      file: 'stores/risk.actions.postQuoteResponse',\r\n      message: 'Data missing for POST request',\r\n    };\r\n\r\n    dispatch(postQuoteResponseRequest({ quoteId, riskId, ...formData }));\r\n    dispatch(addLoader('postQuoteResponse'));\r\n\r\n    if (!formData || !riskId || !quoteId || !formData.effectiveFrom || !formData.effectiveTo) {\r\n      dispatch(postQuoteResponseFailure(defaultError));\r\n      dispatch(enqueueNotification('notification.generic.request', 'error'));\r\n      dispatch(hideModal());\r\n      dispatch(removeLoader('postQuoteResponse'));\r\n      return;\r\n    }\r\n\r\n    return utils.api\r\n      .post({\r\n        token: auth.accessToken,\r\n        endpoint: endpoint.auth,\r\n        path: `api/v1/quotes/${quoteId}/response`,\r\n        data: formData,\r\n      })\r\n      .then((response) => utils.api.handleResponse(response))\r\n      .then((json) => utils.api.handleResponseJsonObject(json))\r\n      .then((data) => {\r\n        dispatch(postQuoteResponseSuccess(data));\r\n        return data;\r\n      })\r\n      .then((data) => {\r\n        return dispatch(getRiskDetails(data.riskId));\r\n      })\r\n      .then(() => {\r\n        dispatch(enqueueNotification('notification.postRiskQuoteBind.success', 'success'));\r\n      })\r\n      .catch((err) => {\r\n        const errorParams = {\r\n          ...defaultError,\r\n          message: 'API post error (risk.postQuoteResponse)',\r\n        };\r\n\r\n        utils.api.handleError(err, errorParams);\r\n        utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n        dispatch(postQuoteResponseFailure(err));\r\n        dispatch(enqueueNotification(utils.api.getErrorMessage(err), 'error'));\r\n        return err;\r\n      })\r\n      .finally(() => {\r\n        dispatch(hideModal());\r\n        dispatch(removeLoader('postQuoteResponse'));\r\n      });\r\n  };\r\n\r\nexport const postQuoteResponseRequest = (formData) => {\r\n  return {\r\n    type: 'RISK_POST_QUOTE_RESPONSE_REQUEST',\r\n    payload: formData,\r\n  };\r\n};\r\n\r\nexport const postQuoteResponseSuccess = (responseData) => {\r\n  return {\r\n    type: 'RISK_POST_QUOTE_RESPONSE_SUCCESS',\r\n    payload: responseData,\r\n  };\r\n};\r\n\r\nexport const postQuoteResponseFailure = (error) => {\r\n  return {\r\n    type: 'RISK_POST_QUOTE_RESPONSE_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}