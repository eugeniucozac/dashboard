{"ast":null,"code":"import _defineProperty from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\MarketingMudmap\\\\MarketingMudmap.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport debounce from 'lodash/debounce';\nimport get from 'lodash/get'; // app\n\nimport { MarketingMudmapView } from './MarketingMudmap.view';\nimport { editPlacementConfig, selectPlacementLayers, selectPlacementDepartmentId, selectPlacementConfig, selectRefDataDepartmentById, selectRefDataStatusIdByCode, selectRefDataCapacityTypes, resetMarket } from 'stores';\nimport * as utils from 'utils';\nimport { KEYCODE, STATUS_MARKET_QUOTED, STATUS_POLICY_NTU } from 'consts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nMarketingMudmap.propTypes = {\n  placementId: PropTypes.string.isRequired\n};\nexport default function MarketingMudmap(_ref) {\n  _s();\n\n  var _placementConfig$mudm;\n\n  var placementId = _ref.placementId;\n  var dispatch = useDispatch();\n  var placementLayers = useSelector(selectPlacementLayers);\n  var placementDepartmentId = useSelector(selectPlacementDepartmentId);\n  var placementConfig = useSelector(selectPlacementConfig);\n  var department = useSelector(selectRefDataDepartmentById(placementDepartmentId));\n  var refDataCapacityTypes = useSelector(selectRefDataCapacityTypes);\n  var statusMarketQuoted = useSelector(selectRefDataStatusIdByCode('market', STATUS_MARKET_QUOTED));\n  var statusPolicyNtu = useSelector(selectRefDataStatusIdByCode('policy', STATUS_POLICY_NTU));\n  var isFullscreen = useRef(false);\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      tab = _useState2[0],\n      setTab = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      capacity = _useState4[0],\n      setCapacity = _useState4[1];\n\n  var _useState5 = useState((placementConfig === null || placementConfig === void 0 ? void 0 : placementConfig.capacity) || refDataCapacityTypes),\n      _useState6 = _slicedToArray(_useState5, 2),\n      capacityTypes = _useState6[0],\n      setCapacityTypes = _useState6[1];\n\n  var _useState7 = useState({\n    w: 0,\n    h: 0\n  }),\n      _useState8 = _slicedToArray(_useState7, 2),\n      dimensions = _useState8[0],\n      setDimensions = _useState8[1]; // TODO added on 17/06/2020: try to get currency from layers\n\n\n  var _useState9 = useState({\n    // currency: '$',\n    fullscreen: false,\n    layers: []\n  }),\n      _useState10 = _slicedToArray(_useState9, 2),\n      mudmap = _useState10[0],\n      setMudmap = _useState10[1];\n\n  var tabs = utils.placement.getTabsByBusinessTypeId(placementLayers, department);\n  var selectedTab = tab && tabs.map(function (tab) {\n    return tab.value;\n  }).includes(tab) ? tab : tabs && tabs.length && get(tabs, '[0].value'); // first render\n\n  useEffect(function () {\n    dispatch(resetMarket());\n    windowResize();\n    window.addEventListener('resize', windowResize);\n    document.addEventListener('keydown', keyDownEscape); // cleanup\n\n    return function () {\n      dispatch(resetMarket());\n      window.removeEventListener('resize', windowResize);\n      document.removeEventListener('keydown', keyDownEscape);\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(function () {\n    if (!(placementConfig === null || placementConfig === void 0 ? void 0 : placementConfig.capacity) && utils.generic.isValidArray(refDataCapacityTypes, true)) {\n      setCapacityTypes(refDataCapacityTypes);\n    }\n  }, [refDataCapacityTypes] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n  var windowResize = debounce(function () {\n    setDimensions({\n      w: window.innerWidth,\n      h: window.innerHeight\n    });\n  }, 200);\n\n  var keyDownEscape = function keyDownEscape(event) {\n    if (isFullscreen.current && event.keyCode === KEYCODE.Escape) {\n      event.preventDefault();\n      setFullscreen(false);\n    }\n  };\n\n  var setFullscreen = function setFullscreen(bool) {\n    isFullscreen.current = bool;\n    setMudmap(_objectSpread(_objectSpread({}, mudmap), {}, {\n      fullscreen: bool\n    }));\n  };\n\n  var handleToggleMudmapFullscreen = function handleToggleMudmapFullscreen(event) {\n    setFullscreen(!isFullscreen.current);\n  };\n\n  var handleOpenColorPicker = function handleOpenColorPicker(e, item) {\n    setCapacity({\n      target: e.target,\n      item: item\n    });\n  };\n\n  var handleChangeColorPicker = function handleChangeColorPicker(styles) {\n    if (!styles) {\n      setCapacity({});\n      return;\n    }\n\n    var updatedTypes = capacityTypes.map(function (type) {\n      var isMatch = type.id === styles.id;\n      var obj = isMatch ? styles : type;\n      return {\n        id: obj.id,\n        color: obj.color,\n        name: isMatch ? styles.label : obj.name\n      };\n    });\n    setCapacity({});\n    setCapacityTypes(updatedTypes);\n    dispatch(editPlacementConfig({\n      capacity: updatedTypes\n    }));\n  };\n\n  var handleToggleTab = function handleToggleTab(tabSelected) {\n    setTab(tabSelected);\n  };\n\n  var handleReorderMudmap = function handleReorderMudmap(layersObj) {\n    var layers = Object.values(layersObj);\n    dispatch(editPlacementConfig({\n      mudmap: _objectSpread(_objectSpread({}, placementConfig === null || placementConfig === void 0 ? void 0 : placementConfig.mudmap), {}, _defineProperty({}, selectedTab, layers.map(function (layer) {\n        return {\n          id: layer.id,\n          order: layer.order,\n          capacityId: layer.capacityId\n        };\n      })))\n    }));\n  };\n\n  var handleToggleMudmapForCobrokers = function handleToggleMudmapForCobrokers(value) {\n    return function (event) {\n      dispatch(editPlacementConfig({\n        visibleToCobrokers: value\n      }));\n    };\n  };\n\n  var getMudmapLayers = function getMudmapLayers(layers) {\n    if (utils.generic.isInvalidOrEmptyArray(layers)) return [];\n    return layers.filter(function (layer) {\n      var isValidStatus = layer.statusId !== statusPolicyNtu;\n      var isSelectedGroup = layer.businessTypeId === selectedTab;\n      return isValidStatus && isSelectedGroup;\n    });\n  }; // abort\n\n\n  if (!placementId) return null;\n  var mudmapConfig = (placementConfig === null || placementConfig === void 0 ? void 0 : (_placementConfig$mudm = placementConfig.mudmap) === null || _placementConfig$mudm === void 0 ? void 0 : _placementConfig$mudm[selectedTab]) || [];\n  var mudmapLayers = utils.layers.getMudmap(getMudmapLayers(placementLayers), mudmapConfig, statusMarketQuoted, 'written');\n  return /*#__PURE__*/_jsxDEV(MarketingMudmapView, {\n    mudmap: _objectSpread(_objectSpread({}, mudmap), {}, {\n      capacities: capacityTypes,\n      dimensions: dimensions,\n      layers: mudmapLayers,\n      visibleToCobrokers: (placementConfig === null || placementConfig === void 0 ? void 0 : placementConfig.visibleToCobrokers) || false\n    }),\n    capacity: capacity,\n    tabs: tabs,\n    selectedTab: selectedTab,\n    handlers: {\n      toggleTab: handleToggleTab,\n      toggleMudmapFullscreen: handleToggleMudmapFullscreen,\n      toggleMudmapForCobrokers: handleToggleMudmapForCobrokers,\n      reorderMudmap: handleReorderMudmap,\n      openColorPicker: handleOpenColorPicker,\n      changeColorPicker: handleChangeColorPicker\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MarketingMudmap, \"oKlyRFl7mi5d/vAylwR5ZFzfam8=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = MarketingMudmap;\n\nvar _c;\n\n$RefreshReg$(_c, \"MarketingMudmap\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/MarketingMudmap/MarketingMudmap.js"],"names":["React","useEffect","useState","useRef","PropTypes","useSelector","useDispatch","debounce","get","MarketingMudmapView","editPlacementConfig","selectPlacementLayers","selectPlacementDepartmentId","selectPlacementConfig","selectRefDataDepartmentById","selectRefDataStatusIdByCode","selectRefDataCapacityTypes","resetMarket","utils","KEYCODE","STATUS_MARKET_QUOTED","STATUS_POLICY_NTU","MarketingMudmap","propTypes","placementId","string","isRequired","dispatch","placementLayers","placementDepartmentId","placementConfig","department","refDataCapacityTypes","statusMarketQuoted","statusPolicyNtu","isFullscreen","tab","setTab","capacity","setCapacity","capacityTypes","setCapacityTypes","w","h","dimensions","setDimensions","fullscreen","layers","mudmap","setMudmap","tabs","placement","getTabsByBusinessTypeId","selectedTab","map","value","includes","length","windowResize","window","addEventListener","document","keyDownEscape","removeEventListener","generic","isValidArray","innerWidth","innerHeight","event","current","keyCode","Escape","preventDefault","setFullscreen","bool","handleToggleMudmapFullscreen","handleOpenColorPicker","e","item","target","handleChangeColorPicker","styles","updatedTypes","type","isMatch","id","obj","color","name","label","handleToggleTab","tabSelected","handleReorderMudmap","layersObj","Object","values","layer","order","capacityId","handleToggleMudmapForCobrokers","visibleToCobrokers","getMudmapLayers","isInvalidOrEmptyArray","filter","isValidStatus","statusId","isSelectedGroup","businessTypeId","mudmapConfig","mudmapLayers","getMudmap","capacities","toggleTab","toggleMudmapFullscreen","toggleMudmapForCobrokers","reorderMudmap","openColorPicker","changeColorPicker"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport debounce from 'lodash/debounce';\r\nimport get from 'lodash/get';\r\n\r\n// app\r\nimport { MarketingMudmapView } from './MarketingMudmap.view';\r\nimport {\r\n  editPlacementConfig,\r\n  selectPlacementLayers,\r\n  selectPlacementDepartmentId,\r\n  selectPlacementConfig,\r\n  selectRefDataDepartmentById,\r\n  selectRefDataStatusIdByCode,\r\n  selectRefDataCapacityTypes,\r\n  resetMarket,\r\n} from 'stores';\r\nimport * as utils from 'utils';\r\nimport { KEYCODE, STATUS_MARKET_QUOTED, STATUS_POLICY_NTU } from 'consts';\r\n\r\nMarketingMudmap.propTypes = {\r\n  placementId: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default function MarketingMudmap({ placementId }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const placementLayers = useSelector(selectPlacementLayers);\r\n  const placementDepartmentId = useSelector(selectPlacementDepartmentId);\r\n  const placementConfig = useSelector(selectPlacementConfig);\r\n  const department = useSelector(selectRefDataDepartmentById(placementDepartmentId));\r\n  const refDataCapacityTypes = useSelector(selectRefDataCapacityTypes);\r\n  const statusMarketQuoted = useSelector(selectRefDataStatusIdByCode('market', STATUS_MARKET_QUOTED));\r\n  const statusPolicyNtu = useSelector(selectRefDataStatusIdByCode('policy', STATUS_POLICY_NTU));\r\n\r\n  const isFullscreen = useRef(false);\r\n  const [tab, setTab] = useState();\r\n  const [capacity, setCapacity] = useState({});\r\n  const [capacityTypes, setCapacityTypes] = useState(placementConfig?.capacity || refDataCapacityTypes);\r\n  const [dimensions, setDimensions] = useState({ w: 0, h: 0 });\r\n\r\n  // TODO added on 17/06/2020: try to get currency from layers\r\n  const [mudmap, setMudmap] = useState({\r\n    // currency: '$',\r\n    fullscreen: false,\r\n    layers: [],\r\n  });\r\n\r\n  const tabs = utils.placement.getTabsByBusinessTypeId(placementLayers, department);\r\n\r\n  const selectedTab = tab && tabs.map((tab) => tab.value).includes(tab) ? tab : tabs && tabs.length && get(tabs, '[0].value');\r\n\r\n  // first render\r\n  useEffect(() => {\r\n    dispatch(resetMarket());\r\n    windowResize();\r\n    window.addEventListener('resize', windowResize);\r\n    document.addEventListener('keydown', keyDownEscape);\r\n\r\n    // cleanup\r\n    return () => {\r\n      dispatch(resetMarket());\r\n      window.removeEventListener('resize', windowResize);\r\n      document.removeEventListener('keydown', keyDownEscape);\r\n    };\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(\r\n    () => {\r\n      if (!placementConfig?.capacity && utils.generic.isValidArray(refDataCapacityTypes, true)) {\r\n        setCapacityTypes(refDataCapacityTypes);\r\n      }\r\n    },\r\n    [refDataCapacityTypes] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  const windowResize = debounce(() => {\r\n    setDimensions({ w: window.innerWidth, h: window.innerHeight });\r\n  }, 200);\r\n\r\n  const keyDownEscape = (event) => {\r\n    if (isFullscreen.current && event.keyCode === KEYCODE.Escape) {\r\n      event.preventDefault();\r\n      setFullscreen(false);\r\n    }\r\n  };\r\n\r\n  const setFullscreen = (bool) => {\r\n    isFullscreen.current = bool;\r\n    setMudmap({\r\n      ...mudmap,\r\n      fullscreen: bool,\r\n    });\r\n  };\r\n\r\n  const handleToggleMudmapFullscreen = (event) => {\r\n    setFullscreen(!isFullscreen.current);\r\n  };\r\n\r\n  const handleOpenColorPicker = (e, item) => {\r\n    setCapacity({ target: e.target, item });\r\n  };\r\n\r\n  const handleChangeColorPicker = (styles) => {\r\n    if (!styles) {\r\n      setCapacity({});\r\n      return;\r\n    }\r\n\r\n    const updatedTypes = capacityTypes.map((type) => {\r\n      const isMatch = type.id === styles.id;\r\n      const obj = isMatch ? styles : type;\r\n\r\n      return {\r\n        id: obj.id,\r\n        color: obj.color,\r\n        name: isMatch ? styles.label : obj.name,\r\n      };\r\n    });\r\n\r\n    setCapacity({});\r\n    setCapacityTypes(updatedTypes);\r\n\r\n    dispatch(editPlacementConfig({ capacity: updatedTypes }));\r\n  };\r\n\r\n  const handleToggleTab = (tabSelected) => {\r\n    setTab(tabSelected);\r\n  };\r\n\r\n  const handleReorderMudmap = (layersObj) => {\r\n    const layers = Object.values(layersObj);\r\n\r\n    dispatch(\r\n      editPlacementConfig({\r\n        mudmap: {\r\n          ...placementConfig?.mudmap,\r\n          [selectedTab]: layers.map((layer) => {\r\n            return {\r\n              id: layer.id,\r\n              order: layer.order,\r\n              capacityId: layer.capacityId,\r\n            };\r\n          }),\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleToggleMudmapForCobrokers = (value) => (event) => {\r\n    dispatch(\r\n      editPlacementConfig({\r\n        visibleToCobrokers: value,\r\n      })\r\n    );\r\n  };\r\n\r\n  const getMudmapLayers = (layers) => {\r\n    if (utils.generic.isInvalidOrEmptyArray(layers)) return [];\r\n\r\n    return layers.filter((layer) => {\r\n      const isValidStatus = layer.statusId !== statusPolicyNtu;\r\n      const isSelectedGroup = layer.businessTypeId === selectedTab;\r\n      return isValidStatus && isSelectedGroup;\r\n    });\r\n  };\r\n\r\n  // abort\r\n  if (!placementId) return null;\r\n\r\n  const mudmapConfig = placementConfig?.mudmap?.[selectedTab] || [];\r\n  const mudmapLayers = utils.layers.getMudmap(getMudmapLayers(placementLayers), mudmapConfig, statusMarketQuoted, 'written');\r\n\r\n  return (\r\n    <MarketingMudmapView\r\n      mudmap={{\r\n        ...mudmap,\r\n        capacities: capacityTypes,\r\n        dimensions,\r\n        layers: mudmapLayers,\r\n        visibleToCobrokers: placementConfig?.visibleToCobrokers || false,\r\n      }}\r\n      capacity={capacity}\r\n      tabs={tabs}\r\n      selectedTab={selectedTab}\r\n      handlers={{\r\n        toggleTab: handleToggleTab,\r\n        toggleMudmapFullscreen: handleToggleMudmapFullscreen,\r\n        toggleMudmapForCobrokers: handleToggleMudmapForCobrokers,\r\n        reorderMudmap: handleReorderMudmap,\r\n        openColorPicker: handleOpenColorPicker,\r\n        changeColorPicker: handleChangeColorPicker,\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}