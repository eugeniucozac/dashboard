{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n//app\nimport { authLogout, addLoader, removeLoader } from 'stores';\nimport * as utils from 'utils';\nimport { CLAIM_PROCESSING_REQ_TYPES, TASK_TEAM_TYPE } from 'consts';\nexport var getClaimsTaskDashboardDetail = function getClaimsTaskDashboardDetail() {\n  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return function (dispatch, getState) {\n    var _params$viewLoader;\n\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint,\n        claims = _getState.claims;\n\n    var defaultError = {\n      file: 'stores/claims.actions.getClaimsTaskDashboardDetail'\n    };\n    var newRequestType = CLAIM_PROCESSING_REQ_TYPES.search;\n    var newQuery = params === null || params === void 0 ? void 0 : params.query;\n    var taskType = claims.tasksTab.taskType || TASK_TEAM_TYPE.myTask;\n    var viewLoader = (_params$viewLoader = params === null || params === void 0 ? void 0 : params.viewLoader) !== null && _params$viewLoader !== void 0 ? _params$viewLoader : true;\n    var isRfiTask = (params === null || params === void 0 ? void 0 : params.isRfiTask) || false;\n    dispatch(getClaimsTaskDashboardDetailRequest(params));\n    viewLoader && dispatch(addLoader('getClaimsTaskDashboardDetail'));\n\n    if (!newQuery) {\n      dispatch(getClaimsTaskDashboardDetailFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Missing query param'\n      })));\n      dispatch(removeLoader('getClaimsTaskDashboardDetail'));\n      return;\n    }\n\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.claimService,\n      path: \"api/workflow/claims/task/claims/search/\".concat(taskType),\n      data: {\n        requestType: newRequestType,\n        direction: 'asc',\n        page: 0,\n        pageSize: claims.tasksTab.pageSize,\n        sortBy: claims.tasksTab.sort.by,\n        search: newQuery,\n        searchBy: claims.tasksTab.searchBy,\n        filterSearch: []\n      }\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (data) {\n      return utils.api.handleNewData(data);\n    }).then(function (json) {\n      dispatch(getClaimsTaskDashboardDetailSuccess(json, params.taskType, newQuery, isRfiTask));\n      return json;\n    }).catch(function (err) {\n      dispatch(getClaimsTaskDashboardDetailFailure(err, defaultError, isRfiTask));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      return err;\n    }).finally(function () {\n      viewLoader && dispatch(removeLoader('getClaimsTaskDashboardDetail'));\n    });\n  };\n};\nexport var getClaimsTaskDashboardDetailRequest = function getClaimsTaskDashboardDetailRequest(params) {\n  return {\n    type: 'CLAIMS_TASK_DASHBOARD_DETAIL_GET_REQUEST',\n    payload: params\n  };\n};\nexport var getClaimsTaskDashboardDetailSuccess = function getClaimsTaskDashboardDetailSuccess(json, taskType, newQuery, isRfiTask) {\n  return {\n    type: 'CLAIMS_TASK_DASHBOARD_DETAIL_GET_SUCCESS',\n    payload: {\n      taskType: taskType,\n      items: json.data.searchValue,\n      query: newQuery,\n      isRfiTask: isRfiTask\n    }\n  };\n};\nexport var getClaimsTaskDashboardDetailFailure = function getClaimsTaskDashboardDetailFailure(error, defaultError, isRfiTask) {\n  return {\n    type: 'CLAIMS_TASK_DASHBOARD_DETAIL_GET_FAILURE',\n    payload: {\n      error: error,\n      defaultError: defaultError,\n      isRfiTask: isRfiTask\n    }\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.getClaimsTaskDashboardDetail.js"],"names":["authLogout","addLoader","removeLoader","utils","CLAIM_PROCESSING_REQ_TYPES","TASK_TEAM_TYPE","getClaimsTaskDashboardDetail","params","dispatch","getState","auth","user","endpoint","config","vars","claims","defaultError","file","newRequestType","search","newQuery","query","taskType","tasksTab","myTask","viewLoader","isRfiTask","getClaimsTaskDashboardDetailRequest","getClaimsTaskDashboardDetailFailure","message","api","post","token","accessToken","claimService","path","data","requestType","direction","page","pageSize","sortBy","sort","by","searchBy","filterSearch","then","response","handleResponse","handleNewData","json","getClaimsTaskDashboardDetailSuccess","catch","err","handleUnauthorized","finally","type","payload","items","searchValue","error"],"mappings":";AAAA;AACA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,YAAhC,QAAoD,QAApD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,0BAAT,EAAqCC,cAArC,QAA2D,QAA3D;AAEA,OAAO,IAAMC,4BAA4B,GACvC,SADWA,4BACX;AAAA,MAACC,MAAD,uEAAU,EAAV;AAAA,SACA,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAAA;;AACtB;AADsB,oBAE6CA,QAAQ,EAFrD;AAAA,QAENC,IAFM,aAEdC,IAFc,CAEND,IAFM;AAAA,QAEoBE,QAFpB,aAEEC,MAFF,CAEYC,IAFZ,CAEoBF,QAFpB;AAAA,QAEkCG,MAFlC,aAEkCA,MAFlC;;AAItB,QAAMC,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE;AADa,KAArB;AAIA,QAAMC,cAAc,GAAGd,0BAA0B,CAACe,MAAlD;AACA,QAAMC,QAAQ,GAAGb,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAEc,KAAzB;AACA,QAAMC,QAAQ,GAAGP,MAAM,CAACQ,QAAP,CAAgBD,QAAhB,IAA4BjB,cAAc,CAACmB,MAA5D;AACA,QAAMC,UAAU,yBAAGlB,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAEkB,UAAX,mEAAyB,IAAzC;AACA,QAAMC,SAAS,GAAG,CAAAnB,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEmB,SAAR,KAAqB,KAAvC;AAEAlB,IAAAA,QAAQ,CAACmB,mCAAmC,CAACpB,MAAD,CAApC,CAAR;AACAkB,IAAAA,UAAU,IAAIjB,QAAQ,CAACP,SAAS,CAAC,8BAAD,CAAV,CAAtB;;AAEA,QAAI,CAACmB,QAAL,EAAe;AACbZ,MAAAA,QAAQ,CAACoB,mCAAmC,iCAAMZ,YAAN;AAAoBa,QAAAA,OAAO,EAAE;AAA7B,SAApC,CAAR;AACArB,MAAAA,QAAQ,CAACN,YAAY,CAAC,8BAAD,CAAb,CAAR;AACA;AACD;;AAED,WAAOC,KAAK,CAAC2B,GAAN,CACJC,IADI,CACC;AACJC,MAAAA,KAAK,EAAEtB,IAAI,CAACuB,WADR;AAEJrB,MAAAA,QAAQ,EAAEA,QAAQ,CAACsB,YAFf;AAGJC,MAAAA,IAAI,mDAA4Cb,QAA5C,CAHA;AAIJc,MAAAA,IAAI,EAAE;AACJC,QAAAA,WAAW,EAAEnB,cADT;AAEJoB,QAAAA,SAAS,EAAE,KAFP;AAGJC,QAAAA,IAAI,EAAE,CAHF;AAIJC,QAAAA,QAAQ,EAAEzB,MAAM,CAACQ,QAAP,CAAgBiB,QAJtB;AAKJC,QAAAA,MAAM,EAAE1B,MAAM,CAACQ,QAAP,CAAgBmB,IAAhB,CAAqBC,EALzB;AAMJxB,QAAAA,MAAM,EAAEC,QANJ;AAOJwB,QAAAA,QAAQ,EAAE7B,MAAM,CAACQ,QAAP,CAAgBqB,QAPtB;AAQJC,QAAAA,YAAY,EAAE;AARV;AAJF,KADD,EAgBJC,IAhBI,CAgBC,UAACC,QAAD;AAAA,aAAc5C,KAAK,CAAC2B,GAAN,CAAUkB,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAhBD,EAiBJD,IAjBI,CAiBC,UAACV,IAAD;AAAA,aAAUjC,KAAK,CAAC2B,GAAN,CAAUmB,aAAV,CAAwBb,IAAxB,CAAV;AAAA,KAjBD,EAkBJU,IAlBI,CAkBC,UAACI,IAAD,EAAU;AACd1C,MAAAA,QAAQ,CAAC2C,mCAAmC,CAACD,IAAD,EAAO3C,MAAM,CAACe,QAAd,EAAwBF,QAAxB,EAAkCM,SAAlC,CAApC,CAAR;AACA,aAAOwB,IAAP;AACD,KArBI,EAsBJE,KAtBI,CAsBE,UAACC,GAAD,EAAS;AACd7C,MAAAA,QAAQ,CAACoB,mCAAmC,CAACyB,GAAD,EAAMrC,YAAN,EAAoBU,SAApB,CAApC,CAAR;AACAvB,MAAAA,KAAK,CAAC2B,GAAN,CAAUwB,kBAAV,CAA6BD,GAA7B,EAAkC7C,QAAlC,EAA4CR,UAA5C;AACA,aAAOqD,GAAP;AACD,KA1BI,EA2BJE,OA3BI,CA2BI,YAAM;AACb9B,MAAAA,UAAU,IAAIjB,QAAQ,CAACN,YAAY,CAAC,8BAAD,CAAb,CAAtB;AACD,KA7BI,CAAP;AA8BD,GAtDD;AAAA,CADK;AAyDP,OAAO,IAAMyB,mCAAmC,GAAG,SAAtCA,mCAAsC,CAACpB,MAAD,EAAY;AAC7D,SAAO;AACLiD,IAAAA,IAAI,EAAE,0CADD;AAELC,IAAAA,OAAO,EAAElD;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAM4C,mCAAmC,GAAG,SAAtCA,mCAAsC,CAACD,IAAD,EAAO5B,QAAP,EAAiBF,QAAjB,EAA2BM,SAA3B,EAAyC;AAC1F,SAAO;AACL8B,IAAAA,IAAI,EAAE,0CADD;AAELC,IAAAA,OAAO,EAAE;AACPnC,MAAAA,QAAQ,EAARA,QADO;AAEPoC,MAAAA,KAAK,EAAER,IAAI,CAACd,IAAL,CAAUuB,WAFV;AAGPtC,MAAAA,KAAK,EAAED,QAHA;AAIPM,MAAAA,SAAS,EAATA;AAJO;AAFJ,GAAP;AASD,CAVM;AAYP,OAAO,IAAME,mCAAmC,GAAG,SAAtCA,mCAAsC,CAACgC,KAAD,EAAQ5C,YAAR,EAAsBU,SAAtB,EAAoC;AACrF,SAAO;AACL8B,IAAAA,IAAI,EAAE,0CADD;AAELC,IAAAA,OAAO,EAAE;AAAEG,MAAAA,KAAK,EAALA,KAAF;AAAS5C,MAAAA,YAAY,EAAZA,YAAT;AAAuBU,MAAAA,SAAS,EAATA;AAAvB;AAFJ,GAAP;AAID,CALM","sourcesContent":["//app\r\nimport { authLogout, addLoader, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\nimport { CLAIM_PROCESSING_REQ_TYPES, TASK_TEAM_TYPE } from 'consts';\r\n\r\nexport const getClaimsTaskDashboardDetail =\r\n  (params = {}) =>\r\n  (dispatch, getState) => {\r\n    // prettier-ignore\r\n    const { user: { auth }, config: { vars: { endpoint } }, claims } = getState();\r\n\r\n    const defaultError = {\r\n      file: 'stores/claims.actions.getClaimsTaskDashboardDetail',\r\n    };\r\n\r\n    const newRequestType = CLAIM_PROCESSING_REQ_TYPES.search;\r\n    const newQuery = params?.query;\r\n    const taskType = claims.tasksTab.taskType || TASK_TEAM_TYPE.myTask;\r\n    const viewLoader = params?.viewLoader ?? true;\r\n    const isRfiTask = params?.isRfiTask || false;\r\n\r\n    dispatch(getClaimsTaskDashboardDetailRequest(params));\r\n    viewLoader && dispatch(addLoader('getClaimsTaskDashboardDetail'));\r\n\r\n    if (!newQuery) {\r\n      dispatch(getClaimsTaskDashboardDetailFailure({ ...defaultError, message: 'Missing query param' }));\r\n      dispatch(removeLoader('getClaimsTaskDashboardDetail'));\r\n      return;\r\n    }\r\n\r\n    return utils.api\r\n      .post({\r\n        token: auth.accessToken,\r\n        endpoint: endpoint.claimService,\r\n        path: `api/workflow/claims/task/claims/search/${taskType}`,\r\n        data: {\r\n          requestType: newRequestType,\r\n          direction: 'asc',\r\n          page: 0,\r\n          pageSize: claims.tasksTab.pageSize,\r\n          sortBy: claims.tasksTab.sort.by,\r\n          search: newQuery,\r\n          searchBy: claims.tasksTab.searchBy,\r\n          filterSearch: [],\r\n        },\r\n      })\r\n      .then((response) => utils.api.handleResponse(response))\r\n      .then((data) => utils.api.handleNewData(data))\r\n      .then((json) => {\r\n        dispatch(getClaimsTaskDashboardDetailSuccess(json, params.taskType, newQuery, isRfiTask));\r\n        return json;\r\n      })\r\n      .catch((err) => {\r\n        dispatch(getClaimsTaskDashboardDetailFailure(err, defaultError, isRfiTask));\r\n        utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n        return err;\r\n      })\r\n      .finally(() => {\r\n        viewLoader && dispatch(removeLoader('getClaimsTaskDashboardDetail'));\r\n      });\r\n  };\r\n\r\nexport const getClaimsTaskDashboardDetailRequest = (params) => {\r\n  return {\r\n    type: 'CLAIMS_TASK_DASHBOARD_DETAIL_GET_REQUEST',\r\n    payload: params,\r\n  };\r\n};\r\n\r\nexport const getClaimsTaskDashboardDetailSuccess = (json, taskType, newQuery, isRfiTask) => {\r\n  return {\r\n    type: 'CLAIMS_TASK_DASHBOARD_DETAIL_GET_SUCCESS',\r\n    payload: {\r\n      taskType,\r\n      items: json.data.searchValue,\r\n      query: newQuery,\r\n      isRfiTask,\r\n    },\r\n  };\r\n};\r\n\r\nexport const getClaimsTaskDashboardDetailFailure = (error, defaultError, isRfiTask) => {\r\n  return {\r\n    type: 'CLAIMS_TASK_DASHBOARD_DETAIL_GET_FAILURE',\r\n    payload: { error, defaultError, isRfiTask },\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}