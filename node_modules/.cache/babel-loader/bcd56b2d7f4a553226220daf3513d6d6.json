{"ast":null,"code":"import _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as constants from 'consts';\nimport sectionMappings from './openingMemo.mappings.json';\n\nvar transformOpeningMemoOutPOST = function transformOpeningMemoOutPOST(openingMemo) {\n  return _objectSpread({\n    placementType: null,\n    notes: null,\n    listOfRisks: null,\n    policyId: null,\n    authorisedSignatory: null,\n    authorisedSignatoryApprovalDate: null,\n    isAuthorisedSignatoryApproved: null,\n    accountHandler: null,\n    accountHandlerApprovalDate: null,\n    isAccountHandlerApproved: null,\n    producingBroker: null,\n    accountExecutive: null,\n    originator: null,\n    placingBroker: null,\n    lineItems: null,\n    status: null,\n    newRenewalBusinessId: null,\n    reInsured: null,\n    clientEmail: null,\n    invoicingClient: null,\n    clientContactName: null,\n    eocInvoiceContactName: null,\n    eocInvoiceEmail: null,\n    inceptionDate: null,\n    expiryDate: null\n  }, openingMemo);\n};\n\nvar transformOpeningMemoInPUT = function transformOpeningMemoInPUT() {\n  var openingMemo = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var premiumCurrency = openingMemo.premiumCurrency;\n  delete openingMemo.premiumCurrency;\n  return _objectSpread(_objectSpread({\n    status: 'NOT_STARTED'\n  }, openingMemo), {}, {\n    lineItems: addTabKeyToListItems([].concat(_toConsumableArray(openingMemo.lineItems || []), _toConsumableArray(premiumCurrency ? [{\n      itemKey: 'retainedBrokerageAmount',\n      premiumCurrency: premiumCurrency\n    }] : [])))\n  });\n};\n\nvar transformOpeningMemoOutPUT = function transformOpeningMemoOutPUT(changes) {\n  var openingMemo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var lineItems = mergeLineItemChanges(changes.lineItems, openingMemo.lineItems); // we reset the value of attachedTo unless we have a placementType DECLARATION\n\n  var omAttachedTo = changes.placementType === constants.PLACEMENT_DECLARATION ? changes.attachedTo : ''; // if changes don't includes lineItems (ex: only approvals are changed)\n  // then the premiumCurrency wouldn't be retrieved from the changes.lineItems\n  // so we get it from the current OM state as a fallback\n\n  var omPremiumCurrency = getPremiumCurrencyFromLineItems(openingMemo.lineItems);\n  return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, openingMemo), changes), typeof changes.placementType !== 'undefined' && {\n    attachedTo: omAttachedTo\n  }), {}, {\n    premiumCurrency: getPremiumCurrencyFromLineItems(lineItems) || omPremiumCurrency,\n    lineItems: lineItems.filter(function (item) {\n      return item.itemKey !== 'retainedBrokerageAmount';\n    })\n  });\n};\n\nvar mergeLineItemChanges = function mergeLineItemChanges() {\n  var lineItemObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var lineItemArr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var mergedLineItems = Object.keys(lineItemObj).map(function (lineItemKey) {\n    return _objectSpread(_objectSpread({\n      itemKey: lineItemKey\n    }, lineItemArr.find(function (item) {\n      return item.itemKey === lineItemKey;\n    })), lineItemObj[lineItemKey]);\n  }); // Remove rows that are just presentational\n\n  return mergedLineItems.filter(function (row) {\n    return !['total', 'splitAsFollows'].includes(row.itemKey);\n  });\n};\n\nvar getPremiumCurrencyFromLineItems = function getPremiumCurrencyFromLineItems() {\n  var lineItems = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return (lineItems.find(function (item) {\n    return item.itemKey === 'retainedBrokerageAmount';\n  }) || {}).premiumCurrency;\n};\n\nvar addTabKeyToListItems = function addTabKeyToListItems(lineItems) {\n  return lineItems.map(function (item) {\n    return _objectSpread(_objectSpread({}, item), {}, {\n      tabKey: sectionMappings[item.itemKey]\n    });\n  });\n};\n\nexport { transformOpeningMemoInPUT, transformOpeningMemoOutPUT, transformOpeningMemoOutPOST };","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/openingMemo/openingMemo.transform.js"],"names":["constants","sectionMappings","transformOpeningMemoOutPOST","openingMemo","placementType","notes","listOfRisks","policyId","authorisedSignatory","authorisedSignatoryApprovalDate","isAuthorisedSignatoryApproved","accountHandler","accountHandlerApprovalDate","isAccountHandlerApproved","producingBroker","accountExecutive","originator","placingBroker","lineItems","status","newRenewalBusinessId","reInsured","clientEmail","invoicingClient","clientContactName","eocInvoiceContactName","eocInvoiceEmail","inceptionDate","expiryDate","transformOpeningMemoInPUT","premiumCurrency","addTabKeyToListItems","itemKey","transformOpeningMemoOutPUT","changes","mergeLineItemChanges","omAttachedTo","PLACEMENT_DECLARATION","attachedTo","omPremiumCurrency","getPremiumCurrencyFromLineItems","filter","item","lineItemObj","lineItemArr","mergedLineItems","Object","keys","map","lineItemKey","find","row","includes","tabKey"],"mappings":"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","sourcesContent":["import * as constants from 'consts';\r\nimport sectionMappings from './openingMemo.mappings.json';\r\n\r\nconst transformOpeningMemoOutPOST = (openingMemo) => {\r\n  return {\r\n    placementType: null,\r\n    notes: null,\r\n    listOfRisks: null,\r\n    policyId: null,\r\n    authorisedSignatory: null,\r\n    authorisedSignatoryApprovalDate: null,\r\n    isAuthorisedSignatoryApproved: null,\r\n    accountHandler: null,\r\n    accountHandlerApprovalDate: null,\r\n    isAccountHandlerApproved: null,\r\n    producingBroker: null,\r\n    accountExecutive: null,\r\n    originator: null,\r\n    placingBroker: null,\r\n    lineItems: null,\r\n    status: null,\r\n    newRenewalBusinessId: null,\r\n    reInsured: null,\r\n    clientEmail: null,\r\n    invoicingClient: null,\r\n    clientContactName: null,\r\n    eocInvoiceContactName: null,\r\n    eocInvoiceEmail: null,\r\n    inceptionDate: null,\r\n    expiryDate: null,\r\n    ...openingMemo,\r\n  };\r\n};\r\n\r\nconst transformOpeningMemoInPUT = (openingMemo = {}) => {\r\n  const premiumCurrency = openingMemo.premiumCurrency;\r\n  delete openingMemo.premiumCurrency;\r\n\r\n  return {\r\n    status: 'NOT_STARTED',\r\n    ...openingMemo,\r\n    lineItems: addTabKeyToListItems([\r\n      ...(openingMemo.lineItems || []),\r\n      ...(premiumCurrency ? [{ itemKey: 'retainedBrokerageAmount', premiumCurrency }] : []),\r\n    ]),\r\n  };\r\n};\r\n\r\nconst transformOpeningMemoOutPUT = (changes, openingMemo = {}) => {\r\n  const lineItems = mergeLineItemChanges(changes.lineItems, openingMemo.lineItems);\r\n\r\n  // we reset the value of attachedTo unless we have a placementType DECLARATION\r\n  const omAttachedTo = changes.placementType === constants.PLACEMENT_DECLARATION ? changes.attachedTo : '';\r\n\r\n  // if changes don't includes lineItems (ex: only approvals are changed)\r\n  // then the premiumCurrency wouldn't be retrieved from the changes.lineItems\r\n  // so we get it from the current OM state as a fallback\r\n  const omPremiumCurrency = getPremiumCurrencyFromLineItems(openingMemo.lineItems);\r\n\r\n  return {\r\n    ...openingMemo,\r\n    ...changes,\r\n    ...(typeof changes.placementType !== 'undefined' && { attachedTo: omAttachedTo }),\r\n    premiumCurrency: getPremiumCurrencyFromLineItems(lineItems) || omPremiumCurrency,\r\n    lineItems: lineItems.filter((item) => item.itemKey !== 'retainedBrokerageAmount'),\r\n  };\r\n};\r\n\r\nconst mergeLineItemChanges = (lineItemObj = {}, lineItemArr = []) => {\r\n  const mergedLineItems = Object.keys(lineItemObj).map((lineItemKey) => {\r\n    return {\r\n      itemKey: lineItemKey,\r\n      ...lineItemArr.find((item) => item.itemKey === lineItemKey),\r\n      ...lineItemObj[lineItemKey],\r\n    };\r\n  });\r\n\r\n  // Remove rows that are just presentational\r\n  return mergedLineItems.filter((row) => !['total', 'splitAsFollows'].includes(row.itemKey));\r\n};\r\n\r\nconst getPremiumCurrencyFromLineItems = (lineItems = []) => {\r\n  return (lineItems.find((item) => item.itemKey === 'retainedBrokerageAmount') || {}).premiumCurrency;\r\n};\r\n\r\nconst addTabKeyToListItems = (lineItems) => lineItems.map((item) => ({ ...item, tabKey: sectionMappings[item.itemKey] }));\r\n\r\nexport { transformOpeningMemoInPUT, transformOpeningMemoOutPUT, transformOpeningMemoOutPOST };\r\n"]},"metadata":{},"sourceType":"module"}