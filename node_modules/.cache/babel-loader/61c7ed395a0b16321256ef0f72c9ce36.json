{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\components\\\\EditableTable\\\\EditableTable.view.js\";\nimport React, { Fragment } from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport moment from 'moment'; //app\n\nimport styles from './EditableTable.styles';\nimport { TableHead, TableCell, Button, Overflow, Translate } from 'components';\nimport * as utils from 'utils';\nimport * as constants from 'consts'; //mui\n\nimport { makeStyles, Box, Typography, Table, TableBody, MenuItem, TableRow, Select, Checkbox, TextField, TableContainer } from '@material-ui/core';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport { KeyboardDatePicker } from '@material-ui/pickers';\nimport TodayIcon from '@material-ui/icons/Today';\nimport EventIcon from '@material-ui/icons/Event';\nimport NumberFormat from 'react-number-format';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { createElement as _createElement } from \"react\";\nEditableTableView.propTypes = {\n  fields: PropTypes.shape({\n    arrayItemDef: PropTypes.array,\n    fieldData: PropTypes.array\n  }),\n  tableRows: PropTypes.array,\n  handlers: PropTypes.shape({\n    handleTextboxChange: PropTypes.func,\n    handleCheckboxClick: PropTypes.func,\n    handleDatePicker: PropTypes.func,\n    handleCopyTableRowData: PropTypes.func\n  })\n};\nexport function EditableTableView(_ref) {\n  var _this = this;\n\n  var fields = _ref.fields,\n      handlers = _ref.handlers,\n      tableRows = _ref.tableRows;\n  var classes = makeStyles(styles, {\n    name: 'EditableTable'\n  })();\n\n  var copyIcon = function copyIcon(index) {\n    return /*#__PURE__*/_jsxDEV(Button, {\n      icon: FileCopyIcon,\n      onClick: function onClick() {\n        return handlers.handleCopyTableRowData(index);\n      },\n      size: \"medium\",\n      variant: \"text\",\n      color: \"default\",\n      tooltip: {\n        title: utils.string.t('Copy data from above line')\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, _this);\n  };\n\n  var retainBrokerAmountDetails = function retainBrokerAmountDetails(row) {\n    var _row$retainedBrokerag;\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Translate, {\n        label: \"format.currency\",\n        options: {\n          value: {\n            number: row === null || row === void 0 ? void 0 : row.retainedBrokerageAmount,\n            currency: ((_row$retainedBrokerag = row.retainedBrokerageDetails) === null || _row$retainedBrokerag === void 0 ? void 0 : _row$retainedBrokerag.value) || constants.CURRENCY_USD\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, _this), (row === null || row === void 0 ? void 0 : row.convertedBrokerage) && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, _this), /*#__PURE__*/_jsxDEV(Translate, {\n          label: \"format.currency\",\n          options: {\n            value: {\n              number: row === null || row === void 0 ? void 0 : row.convertedBrokerage.value,\n              currency: 'GBP'\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, _this), \" @\", /*#__PURE__*/_jsxDEV(Translate, {\n          label: \"format.number\",\n          options: {\n            value: {\n              number: row === null || row === void 0 ? void 0 : row.convertedBrokerage.rate,\n              format: {\n                trimMantissa: false\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true)]\n    }, void 0, true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    display: \"inline-block\",\n    width: \"100%\",\n    children: /*#__PURE__*/_jsxDEV(Overflow, {\n      children: /*#__PURE__*/_jsxDEV(TableContainer, {\n        style: {\n          maxHeight: 440\n        },\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          className: classes.dataTable,\n          size: \"small\",\n          children: [/*#__PURE__*/_jsxDEV(TableHead, {\n            nestedClasses: {\n              tableHead: classes.tableHead\n            },\n            columns: fields === null || fields === void 0 ? void 0 : fields.arrayItemDef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            className: classes.tableBody,\n            children: tableRows === null || tableRows === void 0 ? void 0 : tableRows.map(function (row, index) {\n              var _classnames;\n\n              return /*#__PURE__*/_jsxDEV(Fragment, {\n                children: /*#__PURE__*/_jsxDEV(TableRow, {\n                  hover: true,\n                  className: classnames((_classnames = {}, _defineProperty(_classnames, classes.tableRow, true), _defineProperty(_classnames, classes.selectedRow, row.isRowSelected), _classnames)),\n                  children: fields === null || fields === void 0 ? void 0 : fields.arrayItemDef.map(function (column, defIndex) {\n                    var _column$options, _row$column$id;\n\n                    var ppwOrPpcDateValue = column.type === 'datepicker' ? moment(row.ppwOrPpcDate).format(column.format) : '';\n                    return column.visible ? row.isRowSelected ? /*#__PURE__*/_createElement(TableCell, _objectSpread(_objectSpread({\n                      onClick: function onClick(e) {\n                        return (column === null || column === void 0 ? void 0 : column.type) !== 'copyIcon' && handlers.handleCheckboxClick(e, row);\n                      }\n                    }, row[column]), {}, {\n                      key: defIndex,\n                      width: row[column === null || column === void 0 ? void 0 : column.width],\n                      __self: _this,\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 102,\n                        columnNumber: 29\n                      }\n                    }), column.type === 'numericText' ? /*#__PURE__*/_jsxDEV(NumberFormat, {\n                      value: row[column === null || column === void 0 ? void 0 : column.id],\n                      customInput: TextField,\n                      variant: 'outlined',\n                      fullWidth: true,\n                      isNumericString: true,\n                      thousandSeparator: false,\n                      onValueChange: function onValueChange(v) {\n                        handlers.handleTextboxChange(v, column, row);\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 109,\n                      columnNumber: 33\n                    }, _this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), column.type === 'text' && /*#__PURE__*/_jsxDEV(TextField, {\n                      width: row[column === null || column === void 0 ? void 0 : column.width],\n                      name: \"fieldText\",\n                      type: \"numeric\",\n                      fullWidth: true,\n                      error: row[column === null || column === void 0 ? void 0 : column.error],\n                      disabled: column === null || column === void 0 ? void 0 : column.disabled,\n                      size: \"small\",\n                      inputProps: {\n                        inputMode: 'numeric',\n                        pattern: '[0-9]*'\n                      },\n                      value: row[column === null || column === void 0 ? void 0 : column.id],\n                      variant: \"outlined\",\n                      onChange: function onChange(e) {\n                        return handlers.handleTextboxChange(e, column, row);\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 124,\n                      columnNumber: 33\n                    }, _this), column.type === 'datepicker' && /*#__PURE__*/_jsxDEV(_Fragment, {\n                      children: /*#__PURE__*/_jsxDEV(KeyboardDatePicker, {\n                        value: row[column === null || column === void 0 ? void 0 : column.id],\n                        inputVariant: \"outlined\",\n                        name: column === null || column === void 0 ? void 0 : column.id,\n                        format: column.format,\n                        renderInput: function renderInput(params) {\n                          return /*#__PURE__*/_jsxDEV(TextField, _objectSpread({}, params), void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 145,\n                            columnNumber: 62\n                          }, _this);\n                        },\n                        placeholder: utils.string.t('app.selectDate'),\n                        onChange: function onChange(newValue) {\n                          if (utils.generic.isFunction(handlers.handleDatePicker)) {\n                            handlers.handleDatePicker(column === null || column === void 0 ? void 0 : column.id, newValue === null || newValue === void 0 ? void 0 : newValue.toISOString(), row);\n                          }\n                        },\n                        keyboardIcon: false ? /*#__PURE__*/_jsxDEV(TodayIcon, {\n                          className: classes.dateIcon\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 153,\n                          columnNumber: 47\n                        }, _this) : /*#__PURE__*/_jsxDEV(EventIcon, {\n                          className: classes.dateIcon\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 153,\n                          columnNumber: 92\n                        }, _this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 140,\n                        columnNumber: 35\n                      }, _this)\n                    }, void 0, false), (column === null || column === void 0 ? void 0 : column.type) === 'select' && /*#__PURE__*/_jsxDEV(Box, {\n                      children: /*#__PURE__*/_jsxDEV(Select, {\n                        fullWidth: true,\n                        variant: \"outlined\",\n                        onChange: function onChange(e, data) {\n                          var selectedValue = {\n                            name: data === null || data === void 0 ? void 0 : data.props.name,\n                            value: data === null || data === void 0 ? void 0 : data.props.value\n                          };\n                          handlers.handleSelectChange(e, selectedValue, column, row);\n                        },\n                        value: row[column === null || column === void 0 ? void 0 : column.id],\n                        children: column === null || column === void 0 ? void 0 : (_column$options = column.options) === null || _column$options === void 0 ? void 0 : _column$options.map(function (option) {\n                          return /*#__PURE__*/_jsxDEV(MenuItem, {\n                            disabled: option.disabled,\n                            name: option[column === null || column === void 0 ? void 0 : column.optionLabel],\n                            value: option[column === null || column === void 0 ? void 0 : column.optionKey],\n                            children: option[column === null || column === void 0 ? void 0 : column.optionLabel]\n                          }, \"\".concat(option[column === null || column === void 0 ? void 0 : column.optionLabel], \"-\").concat(option[column === null || column === void 0 ? void 0 : column.optionKey]), false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 174,\n                            columnNumber: 41\n                          }, _this);\n                        })\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 160,\n                        columnNumber: 35\n                      }, _this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 159,\n                      columnNumber: 33\n                    }, _this), (column === null || column === void 0 ? void 0 : column.type) === 'checkbox' && /*#__PURE__*/_jsxDEV(Checkbox, {\n                      checked: row[column === null || column === void 0 ? void 0 : column.id],\n                      size: \"small\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 187,\n                      columnNumber: 63\n                    }, _this), (column === null || column === void 0 ? void 0 : column.type) === 'label' && /*#__PURE__*/_jsxDEV(Box, {\n                      children: row[column === null || column === void 0 ? void 0 : column.id]\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 188,\n                      columnNumber: 60\n                    }, _this), (column === null || column === void 0 ? void 0 : column.type) === 'retainedBrokeragelabel' && /*#__PURE__*/_jsxDEV(Box, {\n                      pl: 1,\n                      className: classes.brokerageLabel,\n                      children: retainBrokerAmountDetails(row)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 190,\n                      columnNumber: 33\n                    }, _this), (column === null || column === void 0 ? void 0 : column.type) === 'copyIcon' && row.id > 0 && /*#__PURE__*/_jsxDEV(Box, {\n                      pl: 1,\n                      children: copyIcon(row.id)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 195,\n                      columnNumber: 77\n                    }, _this)) : /*#__PURE__*/_jsxDEV(TableCell, _objectSpread(_objectSpread({\n                      title: (column === null || column === void 0 ? void 0 : column.type) !== 'copyIcon' && 'Click here to edit',\n                      onClick: function onClick(e) {\n                        return (column === null || column === void 0 ? void 0 : column.type) !== 'copyIcon' && handlers.handleCheckboxClick(e, row);\n                      }\n                    }, row[column]), {}, {\n                      width: row[column === null || column === void 0 ? void 0 : column.width],\n                      children: /*#__PURE__*/_jsxDEV(Box, {\n                        pl: 1,\n                        children: [(column === null || column === void 0 ? void 0 : column.type) === 'checkbox' && /*#__PURE__*/_jsxDEV(Checkbox, {\n                          checked: row[column === null || column === void 0 ? void 0 : column.id],\n                          size: \"small\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 206,\n                          columnNumber: 65\n                        }, _this), (column === null || column === void 0 ? void 0 : column.type) !== 'checkbox' && (column === null || column === void 0 ? void 0 : column.type) !== 'copyIcon' && (column === null || column === void 0 ? void 0 : column.type) !== 'datepicker' && (column === null || column === void 0 ? void 0 : column.type) !== 'select' && (column === null || column === void 0 ? void 0 : column.type) !== 'retainedBrokeragelabel' && /*#__PURE__*/_jsxDEV(Typography, {\n                          className: classes.tableCellLabel,\n                          children: row[column === null || column === void 0 ? void 0 : column.id] || '-'\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 212,\n                          columnNumber: 37\n                        }, _this), (column === null || column === void 0 ? void 0 : column.type) === 'retainedBrokeragelabel' && /*#__PURE__*/_jsxDEV(Box, {\n                          className: classes.brokerageLabel,\n                          children: retainBrokerAmountDetails(row)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 215,\n                          columnNumber: 35\n                        }, _this), (column === null || column === void 0 ? void 0 : column.type) === 'select' && /*#__PURE__*/_jsxDEV(Typography, {\n                          className: classes.tableCellLabel,\n                          children: ((_row$column$id = row[column === null || column === void 0 ? void 0 : column.id]) === null || _row$column$id === void 0 ? void 0 : _row$column$id.value) || row[column === null || column === void 0 ? void 0 : column.displayName] || '-'\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 218,\n                          columnNumber: 35\n                        }, _this), (column === null || column === void 0 ? void 0 : column.type) === 'datepicker' && /*#__PURE__*/_jsxDEV(_Fragment, {\n                          children: column.id === 'ppwOrPpcDate' ? /*#__PURE__*/_jsxDEV(Typography, {\n                            className: classes.tableCellLabel,\n                            children: ppwOrPpcDateValue || '-'\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 225,\n                            columnNumber: 39\n                          }, _this) : /*#__PURE__*/_jsxDEV(Typography, {\n                            className: classes.tableCellLabel,\n                            children: row[column === null || column === void 0 ? void 0 : column.id] || '-'\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 227,\n                            columnNumber: 39\n                          }, _this)\n                        }, void 0, false), (column === null || column === void 0 ? void 0 : column.type) === 'copyIcon' && row.id > 0 && copyIcon(row.id)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 205,\n                        columnNumber: 31\n                      }, _this)\n                    }), defIndex, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 198,\n                      columnNumber: 29\n                    }, _this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 97,\n                  columnNumber: 21\n                }, _this)\n              }, row.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 19\n              }, _this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n_c = EditableTableView;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditableTableView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/EditableTable/EditableTable.view.js"],"names":["React","Fragment","classnames","PropTypes","moment","styles","TableHead","TableCell","Button","Overflow","Translate","utils","constants","makeStyles","Box","Typography","Table","TableBody","MenuItem","TableRow","Select","Checkbox","TextField","TableContainer","FileCopyIcon","KeyboardDatePicker","TodayIcon","EventIcon","NumberFormat","EditableTableView","propTypes","fields","shape","arrayItemDef","array","fieldData","tableRows","handlers","handleTextboxChange","func","handleCheckboxClick","handleDatePicker","handleCopyTableRowData","classes","name","copyIcon","index","title","string","t","retainBrokerAmountDetails","row","value","number","retainedBrokerageAmount","currency","retainedBrokerageDetails","CURRENCY_USD","convertedBrokerage","rate","format","trimMantissa","maxHeight","dataTable","tableHead","tableBody","map","tableRow","selectedRow","isRowSelected","column","defIndex","ppwOrPpcDateValue","type","ppwOrPpcDate","visible","e","width","id","v","error","disabled","inputMode","pattern","params","newValue","generic","isFunction","toISOString","dateIcon","data","selectedValue","props","handleSelectChange","options","option","optionLabel","optionKey","brokerageLabel","tableCellLabel","displayName"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\r\nimport classnames from 'classnames';\r\nimport PropTypes from 'prop-types';\r\nimport moment from 'moment';\r\n\r\n//app\r\nimport styles from './EditableTable.styles';\r\nimport { TableHead, TableCell, Button, Overflow, Translate } from 'components';\r\nimport * as utils from 'utils';\r\nimport * as constants from 'consts';\r\n\r\n//mui\r\nimport {\r\n  makeStyles,\r\n  Box,\r\n  Typography,\r\n  Table,\r\n  TableBody,\r\n  MenuItem,\r\n  TableRow,\r\n  Select,\r\n  Checkbox,\r\n  TextField,\r\n  TableContainer,\r\n} from '@material-ui/core';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport { KeyboardDatePicker } from '@material-ui/pickers';\r\nimport TodayIcon from '@material-ui/icons/Today';\r\nimport EventIcon from '@material-ui/icons/Event';\r\nimport NumberFormat from 'react-number-format';\r\n\r\nEditableTableView.propTypes = {\r\n  fields: PropTypes.shape({\r\n    arrayItemDef: PropTypes.array,\r\n    fieldData: PropTypes.array,\r\n  }),\r\n  tableRows: PropTypes.array,\r\n  handlers: PropTypes.shape({\r\n    handleTextboxChange: PropTypes.func,\r\n    handleCheckboxClick: PropTypes.func,\r\n    handleDatePicker: PropTypes.func,\r\n    handleCopyTableRowData: PropTypes.func,\r\n  }),\r\n};\r\n\r\nexport function EditableTableView({ fields, handlers, tableRows }) {\r\n  const classes = makeStyles(styles, { name: 'EditableTable' })();\r\n  const copyIcon = (index) => {\r\n    return (\r\n      <Button\r\n        icon={FileCopyIcon}\r\n        onClick={() => handlers.handleCopyTableRowData(index)}\r\n        size=\"medium\"\r\n        variant=\"text\"\r\n        color=\"default\"\r\n        tooltip={{ title: utils.string.t('Copy data from above line') }}\r\n      />\r\n    );\r\n  };\r\n  const retainBrokerAmountDetails = (row) => {\r\n    return (\r\n      <>\r\n        <Translate\r\n          label=\"format.currency\"\r\n          options={{\r\n            value: {\r\n              number: row?.retainedBrokerageAmount,\r\n              currency: row.retainedBrokerageDetails?.value || constants.CURRENCY_USD,\r\n            },\r\n          }}\r\n        />\r\n        {row?.convertedBrokerage && (\r\n          <>\r\n            <br />\r\n            <Translate label=\"format.currency\" options={{ value: { number: row?.convertedBrokerage.value, currency: 'GBP' } }} /> @\r\n            <Translate\r\n              label=\"format.number\"\r\n              options={{\r\n                value: { number: row?.convertedBrokerage.rate, format: { trimMantissa: false } },\r\n              }}\r\n            />\r\n          </>\r\n        )}\r\n      </>\r\n    );\r\n  };\r\n  return (\r\n    <Box display=\"inline-block\" width=\"100%\">\r\n      <Overflow>\r\n        <TableContainer style={{ maxHeight: 440 }}>\r\n          <Table className={classes.dataTable} size=\"small\">\r\n            <TableHead nestedClasses={{ tableHead: classes.tableHead }} columns={fields?.arrayItemDef} />\r\n            <TableBody className={classes.tableBody}>\r\n              {tableRows?.map((row, index) => {\r\n                return (\r\n                  <Fragment key={row.id}>\r\n                    <TableRow hover className={classnames({ [classes.tableRow]: true, [classes.selectedRow]: row.isRowSelected })}>\r\n                      {fields?.arrayItemDef.map((column, defIndex) => {\r\n                        const ppwOrPpcDateValue = column.type === 'datepicker' ? moment(row.ppwOrPpcDate).format(column.format) : '';\r\n                        return column.visible ? (\r\n                          row.isRowSelected ? (\r\n                            <TableCell\r\n                              onClick={(e) => column?.type !== 'copyIcon' && handlers.handleCheckboxClick(e, row)}\r\n                              {...row[column]}\r\n                              key={defIndex}\r\n                              width={row[column?.width]}\r\n                            >\r\n                              {column.type === 'numericText' ? (\r\n                                <NumberFormat\r\n                                  value={row[column?.id]}\r\n                                  customInput={TextField}\r\n                                  variant={'outlined'}\r\n                                  fullWidth={true}\r\n                                  isNumericString\r\n                                  thousandSeparator={false}\r\n                                  onValueChange={(v) => {\r\n                                    handlers.handleTextboxChange(v, column, row);\r\n                                  }}\r\n                                />\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                              {column.type === 'text' && (\r\n                                <TextField\r\n                                  width={row[column?.width]}\r\n                                  name=\"fieldText\"\r\n                                  type=\"numeric\"\r\n                                  fullWidth\r\n                                  error={row[column?.error]}\r\n                                  disabled={column?.disabled}\r\n                                  size=\"small\"\r\n                                  inputProps={{ inputMode: 'numeric', pattern: '[0-9]*' }}\r\n                                  value={row[column?.id]}\r\n                                  variant=\"outlined\"\r\n                                  onChange={(e) => handlers.handleTextboxChange(e, column, row)}\r\n                                />\r\n                              )}\r\n                              {column.type === 'datepicker' && (\r\n                                <>\r\n                                  <KeyboardDatePicker\r\n                                    value={row[column?.id]}\r\n                                    inputVariant=\"outlined\"\r\n                                    name={column?.id}\r\n                                    format={column.format}\r\n                                    renderInput={(params) => <TextField {...params} />}\r\n                                    placeholder={utils.string.t('app.selectDate')}\r\n                                    onChange={(newValue) => {\r\n                                      if (utils.generic.isFunction(handlers.handleDatePicker)) {\r\n                                        handlers.handleDatePicker(column?.id, newValue?.toISOString(), row);\r\n                                      }\r\n                                    }}\r\n                                    keyboardIcon={\r\n                                      false ? <TodayIcon className={classes.dateIcon} /> : <EventIcon className={classes.dateIcon} />\r\n                                    }\r\n                                  />\r\n                                </>\r\n                              )}\r\n                              {column?.type === 'select' && (\r\n                                <Box>\r\n                                  <Select\r\n                                    fullWidth\r\n                                    variant=\"outlined\"\r\n                                    onChange={(e, data) => {\r\n                                      const selectedValue = {\r\n                                        name: data?.props.name,\r\n                                        value: data?.props.value,\r\n                                      };\r\n                                      handlers.handleSelectChange(e, selectedValue, column, row);\r\n                                    }}\r\n                                    value={row[column?.id]}\r\n                                  >\r\n                                    {column?.options?.map((option) => {\r\n                                      return (\r\n                                        <MenuItem\r\n                                          key={`${option[column?.optionLabel]}-${option[column?.optionKey]}`}\r\n                                          disabled={option.disabled}\r\n                                          name={option[column?.optionLabel]}\r\n                                          value={option[column?.optionKey]}\r\n                                        >\r\n                                          {option[column?.optionLabel]}\r\n                                        </MenuItem>\r\n                                      );\r\n                                    })}\r\n                                  </Select>\r\n                                </Box>\r\n                              )}\r\n                              {column?.type === 'checkbox' && <Checkbox checked={row[column?.id]} size=\"small\" />}\r\n                              {column?.type === 'label' && <Box>{row[column?.id]}</Box>}\r\n                              {column?.type === 'retainedBrokeragelabel' && (\r\n                                <Box pl={1} className={classes.brokerageLabel}>\r\n                                  {retainBrokerAmountDetails(row)}\r\n                                </Box>\r\n                              )}\r\n\r\n                              {column?.type === 'copyIcon' && row.id > 0 && <Box pl={1}>{copyIcon(row.id)}</Box>}\r\n                            </TableCell>\r\n                          ) : (\r\n                            <TableCell\r\n                              title={column?.type !== 'copyIcon' && 'Click here to edit'}\r\n                              onClick={(e) => column?.type !== 'copyIcon' && handlers.handleCheckboxClick(e, row)}\r\n                              key={defIndex}\r\n                              {...row[column]}\r\n                              width={row[column?.width]}\r\n                            >\r\n                              <Box pl={1}>\r\n                                {column?.type === 'checkbox' && <Checkbox checked={row[column?.id]} size=\"small\" />}\r\n                                {column?.type !== 'checkbox' &&\r\n                                  column?.type !== 'copyIcon' &&\r\n                                  column?.type !== 'datepicker' &&\r\n                                  column?.type !== 'select' &&\r\n                                  column?.type !== 'retainedBrokeragelabel' && (\r\n                                    <Typography className={classes.tableCellLabel}>{row[column?.id] || '-'}</Typography>\r\n                                  )}\r\n                                {column?.type === 'retainedBrokeragelabel' && (\r\n                                  <Box className={classes.brokerageLabel}>{retainBrokerAmountDetails(row)}</Box>\r\n                                )}\r\n                                {column?.type === 'select' && (\r\n                                  <Typography className={classes.tableCellLabel}>\r\n                                    {row[column?.id]?.value || row[column?.displayName] || '-'}\r\n                                  </Typography>\r\n                                )}\r\n                                {column?.type === 'datepicker' && (\r\n                                  <>\r\n                                    {column.id === 'ppwOrPpcDate' ? (\r\n                                      <Typography className={classes.tableCellLabel}>{ppwOrPpcDateValue || '-'}</Typography>\r\n                                    ) : (\r\n                                      <Typography className={classes.tableCellLabel}>{row[column?.id] || '-'}</Typography>\r\n                                    )}\r\n                                  </>\r\n                                )}\r\n\r\n                                {column?.type === 'copyIcon' && row.id > 0 && copyIcon(row.id)}\r\n                              </Box>\r\n                            </TableCell>\r\n                          )\r\n                        ) : (\r\n                          <></>\r\n                        );\r\n                      })}\r\n                    </TableRow>\r\n                  </Fragment>\r\n                );\r\n              })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Overflow>\r\n    </Box>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}