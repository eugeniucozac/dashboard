{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\forms\\\\PreBindQuote\\\\PreBindQuote.view.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport { useFormActions } from 'hooks';\nimport { yupResolver } from '@hookform/resolvers/yup'; // app\n\nimport styles from './PreBindQuote.styles';\nimport * as utils from 'utils'; // mui\n\nimport { makeStyles } from '@material-ui/core';\nimport { Button, Empty, FormFields, FormActions } from 'components';\nimport RenderStep from '../AddEditQuoteBind/RenderStep';\nimport { ReactComponent as Loading } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/svg/loading.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nPreBindQuoteView.propTypes = {\n  actions: PropTypes.array.isRequired,\n  fields: PropTypes.array.isRequired\n};\nexport function PreBindQuoteView(_ref) {\n  _s();\n\n  var actions = _ref.actions,\n      fields = _ref.fields,\n      defaultValues = _ref.defaultValues,\n      isLoading = _ref.isLoading;\n  var classes = makeStyles(styles, {\n    name: 'PreBindQuote'\n  })();\n  var validationSchema = utils.form.getValidationSchema(fields);\n  var hasValidFields = utils.generic.isValidArray(fields, true);\n  var methods = useForm(_objectSpread(_objectSpread({\n    shouldUnregister: false,\n    defaultValues: defaultValues\n  }, validationSchema && {\n    resolver: yupResolver(validationSchema)\n  }), {}, {\n    mode: 'onChange'\n  }));\n\n  var _useFormActions = useFormActions(actions, methods.reset),\n      cancel = _useFormActions.cancel,\n      submit = _useFormActions.submit;\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(FormProvider, _objectSpread(_objectSpread({}, methods), {}, {\n      children: [/*#__PURE__*/_jsxDEV(FormFields, {\n        type: \"dialog\",\n        children: !isLoading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: hasValidFields ? /*#__PURE__*/_jsxDEV(RenderStep, {\n            fieldsArray: fields,\n            fields: fields,\n            classes: classes,\n            options: {\n              gridSize: {\n                xs: 6,\n                md: 4,\n                xl: 4\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(Empty, {\n            width: 400,\n            title: utils.string.t('products.preBindLoadError'),\n            icon: /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 94\n            }, this),\n            padding: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 17\n          }, this)\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(Empty, {\n          width: 400,\n          title: utils.string.t('products.loadInProgress'),\n          icon: /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 88\n          }, this),\n          padding: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), !isLoading && hasValidFields ? /*#__PURE__*/_jsxDEV(FormActions, {\n        type: \"dialog\",\n        children: [cancel && /*#__PURE__*/_jsxDEV(Button, {\n          text: cancel.label,\n          variant: \"text\",\n          disabled: methods.formState.isSubmitting,\n          onClick: cancel.handler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 24\n        }, this), submit && /*#__PURE__*/_jsxDEV(Button, {\n          text: submit.label,\n          type: \"submit\",\n          disabled: methods.formState.isSubmitting,\n          onClick: methods.handleSubmit(submit.handler),\n          color: \"primary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this) : null]\n    }), void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PreBindQuoteView, \"WpViuMf9h/t/Ofu1tWAHQID5EMY=\", false, function () {\n  return [useForm, useFormActions];\n});\n\n_c = PreBindQuoteView;\nPreBindQuoteView.displayName = \"PreBindQuoteView\";\nPreBindQuoteView.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"PreBindQuoteView\",\n  \"props\": {\n    \"actions\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"fields\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\forms\\\\PreBindQuote\\\\PreBindQuote.view.js\"] = {\n    name: \"PreBindQuoteView\",\n    docgenInfo: PreBindQuoteView.__docgenInfo,\n    path: \"src\\\\forms\\\\PreBindQuote\\\\PreBindQuote.view.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"PreBindQuoteView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/forms/PreBindQuote/PreBindQuote.view.js"],"names":["React","PropTypes","FormProvider","useForm","useFormActions","yupResolver","styles","utils","makeStyles","Button","Empty","FormFields","FormActions","RenderStep","PreBindQuoteView","propTypes","actions","array","isRequired","fields","defaultValues","isLoading","classes","name","validationSchema","form","getValidationSchema","hasValidFields","generic","isValidArray","methods","shouldUnregister","resolver","mode","reset","cancel","submit","root","gridSize","xs","md","xl","string","t","label","formState","isSubmitting","handler","handleSubmit"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { FormProvider, useForm } from 'react-hook-form';\r\nimport { useFormActions } from 'hooks';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n\r\n// app\r\nimport styles from './PreBindQuote.styles';\r\nimport * as utils from 'utils';\r\n\r\n// mui\r\nimport { makeStyles } from '@material-ui/core';\r\nimport { Button, Empty, FormFields, FormActions } from 'components';\r\n\r\nimport RenderStep from '../AddEditQuoteBind/RenderStep';\r\nimport { ReactComponent as Loading } from '../../assets/svg/loading.svg';\r\n\r\nPreBindQuoteView.propTypes = {\r\n  actions: PropTypes.array.isRequired,\r\n  fields: PropTypes.array.isRequired,\r\n};\r\n\r\nexport function PreBindQuoteView({ actions, fields, defaultValues, isLoading }) {\r\n  const classes = makeStyles(styles, { name: 'PreBindQuote' })();\r\n\r\n  const validationSchema = utils.form.getValidationSchema(fields);\r\n  const hasValidFields = utils.generic.isValidArray(fields, true);\r\n\r\n  const methods = useForm({\r\n    shouldUnregister: false,\r\n    defaultValues,\r\n    ...(validationSchema && { resolver: yupResolver(validationSchema) }),\r\n    mode: 'onChange',\r\n  });\r\n  const { cancel, submit } = useFormActions(actions, methods.reset);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <FormProvider {...methods}>\r\n        <FormFields type=\"dialog\">\r\n          {!isLoading ? (\r\n            <>\r\n              {hasValidFields ? (\r\n                <RenderStep fieldsArray={fields} fields={fields} classes={classes} options={{ gridSize: { xs: 6, md: 4, xl: 4 } }} />\r\n              ) : (\r\n                <Empty width={400} title={utils.string.t('products.preBindLoadError')} icon={<Loading />} padding />\r\n              )}\r\n            </>\r\n          ) : (\r\n            <Empty width={400} title={utils.string.t('products.loadInProgress')} icon={<Loading />} padding />\r\n          )}\r\n        </FormFields>\r\n        {!isLoading && hasValidFields ? (\r\n          <FormActions type=\"dialog\">\r\n            {cancel && <Button text={cancel.label} variant=\"text\" disabled={methods.formState.isSubmitting} onClick={cancel.handler} />}\r\n            {submit && (\r\n              <Button\r\n                text={submit.label}\r\n                type=\"submit\"\r\n                disabled={methods.formState.isSubmitting}\r\n                onClick={methods.handleSubmit(submit.handler)}\r\n                color=\"primary\"\r\n              />\r\n            )}\r\n          </FormActions>\r\n        ) : null}\r\n      </FormProvider>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}