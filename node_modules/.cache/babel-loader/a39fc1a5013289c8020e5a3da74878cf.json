{"ast":null,"code":"import \"core-js/modules/es.array.filter\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\pages\\\\RiskDetails\\\\RiskDetails.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport isEmpty from 'lodash/isEmpty'; // app\n\nimport { getRiskDetails, getRiskDefinitions, selectRiskSelected, selectRiskSelectedLoading, getRiskCountries, selectRiskCountries, selectRiskDefinitionsFieldsByType, getRiskProducts, selectProductsSorted } from 'stores';\nimport * as utils from 'utils';\nimport RiskDetailsView from './RiskDetailsView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar RiskDetails = function RiskDetails() {\n  _s();\n\n  var _risk$insured;\n\n  var dispatch = useDispatch();\n\n  var _useParams = useParams(),\n      id = _useParams.id;\n\n  var brand = useSelector(function (state) {\n    return state.ui.brand;\n  });\n  var risk = useSelector(selectRiskSelected);\n  var riskIsLoading = useSelector(selectRiskSelectedLoading);\n  var riskProducts = useSelector(selectProductsSorted);\n  var countries = useSelector(selectRiskCountries);\n  var definitionsFieldsWithLabel = useSelector(selectRiskDefinitionsFieldsByType(risk && risk.riskType));\n  var definitionsFields = definitionsFieldsWithLabel.filter(function (definition) {\n    return definition.type !== 'LABEL';\n  });\n  var countryOfOrigin = countries === null || countries === void 0 ? void 0 : countries.filter(function (country) {\n    var _risk$risk;\n\n    return country.value === (risk === null || risk === void 0 ? void 0 : (_risk$risk = risk.risk) === null || _risk$risk === void 0 ? void 0 : _risk$risk.countryOfOrigin);\n  });\n  var pageTitle = (risk === null || risk === void 0 ? void 0 : (_risk$insured = risk.insured) === null || _risk$insured === void 0 ? void 0 : _risk$insured.name) ? risk.insured.name : '';\n  useEffect(function () {\n    if (!utils.generic.isValidObject(risk, 'id') || (risk === null || risk === void 0 ? void 0 : risk.id) !== id) dispatch(getRiskDetails(id)); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(function () {\n    if (risk.riskType) {\n      dispatch(getRiskDefinitions(risk.riskType));\n    }\n  }, [dispatch, risk.riskType]);\n  useEffect(function () {\n    if (isEmpty(riskProducts)) {\n      dispatch(getRiskProducts());\n    }\n  }, [dispatch, riskProducts]);\n  useEffect(function () {\n    if (risk.riskType && isEmpty(countries)) {\n      dispatch(getRiskCountries());\n    }\n  }, [countries, dispatch, risk.riskType]);\n  var groups = Object.keys(utils.risk.getGroups(definitionsFields)) || [];\n  return id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"\".concat(pageTitle, \" - \").concat(utils.app.getAppName(brand))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(RiskDetailsView, {\n      riskIsLoading: riskIsLoading,\n      risk: risk,\n      riskProducts: riskProducts,\n      countries: countries,\n      countryOfOrigin: countryOfOrigin,\n      groups: groups,\n      definitionsFields: definitionsFields\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true) : null;\n};\n\n_s(RiskDetails, \"xTtHKGpdpa9QO5qcCbA8J87aqzc=\", false, function () {\n  return [useDispatch, useParams, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = RiskDetails;\nRiskDetails.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"RiskDetails\"\n};\nexport default RiskDetails;\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\pages\\\\RiskDetails\\\\RiskDetails.js\"] = {\n    name: \"RiskDetails\",\n    docgenInfo: RiskDetails.__docgenInfo,\n    path: \"src\\\\pages\\\\RiskDetails\\\\RiskDetails.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"RiskDetails\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/pages/RiskDetails/RiskDetails.js"],"names":["useEffect","useParams","useDispatch","useSelector","Helmet","isEmpty","getRiskDetails","getRiskDefinitions","selectRiskSelected","selectRiskSelectedLoading","getRiskCountries","selectRiskCountries","selectRiskDefinitionsFieldsByType","getRiskProducts","selectProductsSorted","utils","RiskDetailsView","RiskDetails","dispatch","id","brand","state","ui","risk","riskIsLoading","riskProducts","countries","definitionsFieldsWithLabel","riskType","definitionsFields","filter","definition","type","countryOfOrigin","country","value","pageTitle","insured","name","generic","isValidObject","groups","Object","keys","getGroups","app","getAppName"],"mappings":"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","sourcesContent":["import { useEffect } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Helmet } from 'react-helmet';\r\nimport isEmpty from 'lodash/isEmpty';\r\n\r\n// app\r\nimport {\r\n  getRiskDetails,\r\n  getRiskDefinitions,\r\n  selectRiskSelected,\r\n  selectRiskSelectedLoading,\r\n  getRiskCountries,\r\n  selectRiskCountries,\r\n  selectRiskDefinitionsFieldsByType,\r\n  getRiskProducts,\r\n  selectProductsSorted,\r\n} from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nimport RiskDetailsView from './RiskDetailsView';\r\n\r\nconst RiskDetails = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { id } = useParams();\r\n\r\n  const brand = useSelector((state) => state.ui.brand);\r\n  const risk = useSelector(selectRiskSelected);\r\n  const riskIsLoading = useSelector(selectRiskSelectedLoading);\r\n  const riskProducts = useSelector(selectProductsSorted);\r\n  const countries = useSelector(selectRiskCountries);\r\n  const definitionsFieldsWithLabel = useSelector(selectRiskDefinitionsFieldsByType(risk && risk.riskType));\r\n  const definitionsFields = definitionsFieldsWithLabel.filter((definition) => definition.type !== 'LABEL');\r\n  const countryOfOrigin = countries?.filter((country) => country.value === risk?.risk?.countryOfOrigin);\r\n  const pageTitle = risk?.insured?.name ? risk.insured.name : '';\r\n\r\n  useEffect(() => {\r\n    if (!utils.generic.isValidObject(risk, 'id') || risk?.id !== id) dispatch(getRiskDetails(id));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (risk.riskType) {\r\n      dispatch(getRiskDefinitions(risk.riskType));\r\n    }\r\n  }, [dispatch, risk.riskType]);\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(riskProducts)) {\r\n      dispatch(getRiskProducts());\r\n    }\r\n  }, [dispatch, riskProducts]);\r\n\r\n  useEffect(() => {\r\n    if (risk.riskType && isEmpty(countries)) {\r\n      dispatch(getRiskCountries());\r\n    }\r\n  }, [countries, dispatch, risk.riskType]);\r\n\r\n  const groups = Object.keys(utils.risk.getGroups(definitionsFields)) || [];\r\n\r\n  return id ? (\r\n    <>\r\n      <Helmet>\r\n        <title>{`${pageTitle} - ${utils.app.getAppName(brand)}`}</title>\r\n      </Helmet>\r\n      <RiskDetailsView\r\n        riskIsLoading={riskIsLoading}\r\n        risk={risk}\r\n        riskProducts={riskProducts}\r\n        countries={countries}\r\n        countryOfOrigin={countryOfOrigin}\r\n        groups={groups}\r\n        definitionsFields={definitionsFields}\r\n      />\r\n    </>\r\n  ) : null;\r\n};\r\n\r\nexport default RiskDetails;\r\n"]},"metadata":{},"sourceType":"module"}