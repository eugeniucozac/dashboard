{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { addLoader, removeLoader, enqueueNotification, hideModal, authLogout } from 'stores';\nimport * as utils from 'utils';\nimport * as constants from 'consts';\nexport var updateClaim = function updateClaim(claims, formData) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var assignTo = formData.assignTo,\n        complexity = formData.complexity,\n        complexityBasis = formData.complexityBasis,\n        notes = formData.notes,\n        priority = formData.priority,\n        priorityId = formData.priorityId,\n        team = formData.team,\n        teamId = formData.teamId;\n    var defaultError = {\n      file: 'stores/claims.actions.updateClaim'\n    };\n    dispatch(updateClaimRequest({\n      claims: claims,\n      formData: formData\n    }));\n    dispatch(addLoader('updateClaim'));\n\n    if (!team || !teamId || !complexity || !priority || !priorityId || utils.generic.isInvalidOrEmptyArray(claims)) {\n      dispatch(updateClaimFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Missing request params'\n      })));\n    }\n\n    var payload = {\n      assignTo: (assignTo === null || assignTo === void 0 ? void 0 : assignTo.email) || '',\n      complexityRuleId: complexity === constants.CLAIM_COMPLEXITY_COMPLEX ? (complexityBasis === null || complexityBasis === void 0 ? void 0 : complexityBasis.complexityRulesID) || '' : null,\n      complexityType: complexity,\n      note: notes || '',\n      organizationId: teamId,\n      organizationName: team,\n      priority: priority,\n      priorityId: priorityId,\n      processDetail: claims.map(function (claim) {\n        return {\n          claimID: claim.claimID || claim.claimId,\n          caseIncidentID: claim.caseIncidentID || claim.caseIncidentId,\n          processId: claim.processID || claim.processId\n        };\n      })\n    };\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.claimService,\n      path: 'api/workflow/claim/updateAssignee',\n      data: payload\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(updateClaimSuccess(claims, formData));\n      dispatch(enqueueNotification(utils.string.t('claims.processing.notification.updateClaimSuccess'), 'success'));\n      return data;\n    }).catch(function (error) {\n      dispatch(updateClaimFailure(error));\n      dispatch(enqueueNotification(utils.string.t('claims.processing.notification.updateClaimFailure'), 'error'));\n      utils.api.handleUnauthorized(error, dispatch, authLogout);\n      return error;\n    }).finally(function () {\n      dispatch(hideModal());\n      dispatch(removeLoader('updateClaim'));\n    });\n  };\n};\nexport var updateClaimRequest = function updateClaimRequest(params) {\n  return {\n    type: 'CLAIMS_PROCESSING_UPDATE_CLAIM_REQUEST',\n    payload: params\n  };\n};\nexport var updateClaimSuccess = function updateClaimSuccess(claims, values) {\n  return {\n    type: 'CLAIMS_PROCESSING_UPDATE_CLAIM_SUCCESS',\n    payload: {\n      claims: claims,\n      values: values\n    }\n  };\n};\nexport var updateClaimFailure = function updateClaimFailure(error) {\n  return {\n    type: 'CLAIMS_PROCESSING_UPDATE_CLAIM_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.updateClaim.js"],"names":["addLoader","removeLoader","enqueueNotification","hideModal","authLogout","utils","constants","updateClaim","claims","formData","dispatch","getState","auth","user","endpoint","config","vars","assignTo","complexity","complexityBasis","notes","priority","priorityId","team","teamId","defaultError","file","updateClaimRequest","generic","isInvalidOrEmptyArray","updateClaimFailure","message","payload","email","complexityRuleId","CLAIM_COMPLEXITY_COMPLEX","complexityRulesID","complexityType","note","organizationId","organizationName","processDetail","map","claim","claimID","claimId","caseIncidentID","caseIncidentId","processId","processID","api","post","token","accessToken","claimService","path","data","then","response","handleResponse","json","handleNewData","updateClaimSuccess","string","t","catch","error","handleUnauthorized","finally","params","type","values"],"mappings":"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","sourcesContent":["import { addLoader, removeLoader, enqueueNotification, hideModal, authLogout } from 'stores';\r\nimport * as utils from 'utils';\r\nimport * as constants from 'consts';\r\n\r\nexport const updateClaim = (claims, formData) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } } } = getState();\r\n\r\n  const { assignTo, complexity, complexityBasis, notes, priority, priorityId, team, teamId } = formData;\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.updateClaim',\r\n  };\r\n\r\n  dispatch(updateClaimRequest({ claims, formData }));\r\n  dispatch(addLoader('updateClaim'));\r\n\r\n  if (!team || !teamId || !complexity || !priority || !priorityId || utils.generic.isInvalidOrEmptyArray(claims)) {\r\n    dispatch(updateClaimFailure({ ...defaultError, message: 'Missing request params' }));\r\n  }\r\n\r\n  const payload = {\r\n    assignTo: assignTo?.email || '',\r\n    complexityRuleId: complexity === constants.CLAIM_COMPLEXITY_COMPLEX ? complexityBasis?.complexityRulesID || '' : null,\r\n    complexityType: complexity,\r\n    note: notes || '',\r\n    organizationId: teamId,\r\n    organizationName: team,\r\n    priority: priority,\r\n    priorityId: priorityId,\r\n    processDetail: claims.map((claim) => ({\r\n      claimID: claim.claimID || claim.claimId,\r\n      caseIncidentID: claim.caseIncidentID || claim.caseIncidentId,\r\n      processId: claim.processID || claim.processId,\r\n    })),\r\n  };\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.claimService,\r\n      path: 'api/workflow/claim/updateAssignee',\r\n      data: payload,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(updateClaimSuccess(claims, formData));\r\n      dispatch(enqueueNotification(utils.string.t('claims.processing.notification.updateClaimSuccess'), 'success'));\r\n      return data;\r\n    })\r\n    .catch((error) => {\r\n      dispatch(updateClaimFailure(error));\r\n      dispatch(enqueueNotification(utils.string.t('claims.processing.notification.updateClaimFailure'), 'error'));\r\n      utils.api.handleUnauthorized(error, dispatch, authLogout);\r\n      return error;\r\n    })\r\n    .finally(() => {\r\n      dispatch(hideModal());\r\n      dispatch(removeLoader('updateClaim'));\r\n    });\r\n};\r\n\r\nexport const updateClaimRequest = (params) => {\r\n  return {\r\n    type: 'CLAIMS_PROCESSING_UPDATE_CLAIM_REQUEST',\r\n    payload: params,\r\n  };\r\n};\r\n\r\nexport const updateClaimSuccess = (claims, values) => {\r\n  return {\r\n    type: 'CLAIMS_PROCESSING_UPDATE_CLAIM_SUCCESS',\r\n    payload: { claims, values },\r\n  };\r\n};\r\n\r\nexport const updateClaimFailure = (error) => {\r\n  return {\r\n    type: 'CLAIMS_PROCESSING_UPDATE_CLAIM_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}