{"ast":null,"code":"import _toConsumableArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ClaimsTab\\\\ClaimsTab.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as Yup from 'yup';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup'; // app\n\nimport styles from './ClaimsTab.styles';\nimport { getClaimsProcessing, resetClaimProcessingFilters, resetClaimsProcessingSearch, selectUser, selectClaimsProcessing, selectClaimsProcessingItems, selectClaimProcessingFilterValues, selectClaimsProcessingFilterLoading, updateClaimProcessingFilters, processingClaimViewNavigation, selectClaimsTabData, getClaimsTabData } from 'stores';\nimport * as constants from 'consts';\nimport * as utils from 'utils';\nimport { useFlexiColumns } from 'hooks';\nimport { MultiSelect, FormDate } from 'components';\nimport ClaimsTabView from './ClaimsTab.view'; // mui\n\nimport { makeStyles } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ClaimsTab() {\n  _s();\n\n  var classes = makeStyles(styles, {\n    name: 'ClaimsManagement'\n  })();\n  var dispatch = useDispatch();\n  var user = useSelector(selectUser);\n  var userHasMyClaimsPermission = utils.app.access.feature('claimsProcessing.myClaims', ['read', 'create', 'update'], user);\n  var userHasMyTeamClaimsPermission = utils.app.access.feature('claimsProcessing.myTeamClaims', ['read', 'create', 'update'], user);\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      searchTerm = _useState2[0],\n      setSearchTerm = _useState2[1];\n\n  var _useState3 = useState(constants.CLAIMS_SEARCH_OPTION_INSURED),\n      _useState4 = _slicedToArray(_useState3, 2),\n      searchBy = _useState4[0],\n      setSearchBy = _useState4[1];\n\n  var claimProcessingFilterDropDown = useSelector(selectClaimProcessingFilterValues);\n  var isFetchingFilters = useSelector(selectClaimsProcessingFilterLoading);\n\n  var _useState5 = useState(utils.string.t('claims.searchByClaims.options.ClaimRef')),\n      _useState6 = _slicedToArray(_useState5, 2),\n      searchByText = _useState6[0],\n      setSearchByText = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isClosedClaimsEnabled = _useState8[0],\n      setIsClosedClaimsEnabled = _useState8[1];\n\n  var _useState9 = useState(true),\n      _useState10 = _slicedToArray(_useState9, 2),\n      myClaimsFirstTimeLoad = _useState10[0],\n      setMyClaimsFirstTimeLoad = _useState10[1];\n\n  var _useState11 = useState(true),\n      _useState12 = _slicedToArray(_useState11, 2),\n      myTeamClaimsFirstTimeLoad = _useState12[0],\n      setMyTeamClaimsFirstTimeLoad = _useState12[1];\n\n  var firstTimeSortColumns = 'createdDate, priority';\n  var claimsProcessing = useSelector(selectClaimsProcessing);\n  var claimsProcessingItems = useSelector(selectClaimsProcessingItems);\n  var searchTypeCall = constants.CLAIM_PROCESSING_REQ_TYPES.search;\n  var filterTypeCall = constants.CLAIM_PROCESSING_REQ_TYPES.filter;\n\n  var _useState13 = useState(),\n      _useState14 = _slicedToArray(_useState13, 2),\n      resetKey = _useState14[0],\n      setResetKey = _useState14[1];\n\n  var claimsTabData = useSelector(selectClaimsTabData);\n\n  var _useState15 = useState((claimsTabData === null || claimsTabData === void 0 ? void 0 : claimsTabData.view) || constants.CLAIM_TEAM_TYPE.myClaims),\n      _useState16 = _slicedToArray(_useState15, 2),\n      claimsType = _useState16[0],\n      setClaimsType = _useState16[1];\n\n  var selectOptions = [{\n    label: utils.string.t('claims.searchByClaims.options.Insured'),\n    value: constants.CLAIMS_SEARCH_OPTION_INSURED\n  }, {\n    label: utils.string.t('claims.searchByClaims.options.ClaimRef'),\n    value: constants.CLAIMS_SEARCH_OPTION_CLAIM_REF\n  }, {\n    label: utils.string.t('claims.searchByClaims.options.LossRef'),\n    value: constants.CLAIMS_SEARCH_OPTION_LOSS_REF\n  }, {\n    label: utils.string.t('claims.searchByClaims.options.PolicyRef'),\n    value: constants.CLAIMS_SEARCH_OPTION_POLICY_REF\n  }, {\n    label: utils.string.t('claims.searchByClaims.options.Division'),\n    value: constants.CLAIMS_SEARCH_OPTION_DIVISION\n  }];\n  var viewFields = [{\n    name: 'views',\n    type: 'radio',\n    value: claimsType,\n    defaultValue: claimsType,\n    muiFormGroupProps: {\n      row: true,\n      nestedClasses: {\n        root: classes.adjusterRadioGroup\n      },\n      classes: {\n        root: classes.radioLabel\n      },\n      onChange: function onChange(value) {\n        setClaimsType(value);\n        dispatch(processingClaimViewNavigation(value));\n        setValue('includeClosedClaims', false);\n        setIsClosedClaimsEnabled(false);\n        getClaimsData();\n\n        var claimsData = _objectSpread({}, claimsTabData);\n\n        claimsData.view = value;\n        dispatch(getClaimsTabData(claimsData));\n      }\n    },\n    options: [].concat(_toConsumableArray(userHasMyClaimsPermission ? [{\n      value: constants.CLAIM_TEAM_TYPE.myClaims,\n      label: utils.string.t('claims.processing.myClaims')\n    }] : []), _toConsumableArray(userHasMyTeamClaimsPermission ? [{\n      value: constants.CLAIM_TEAM_TYPE.myTeamClaims,\n      label: utils.string.t('claims.processing.myTeamClaims')\n    }] : []))\n  }, {\n    name: 'searchBy',\n    type: 'autocompletemui',\n    options: selectOptions,\n    value: (claimsTabData === null || claimsTabData === void 0 ? void 0 : claimsTabData.searchBy) === '' ? (selectOptions === null || selectOptions === void 0 ? void 0 : selectOptions.find(function (item) {\n      return (item === null || item === void 0 ? void 0 : item.value) === constants.CLAIMS_SEARCH_OPTION_INSURED;\n    })) || null : selectOptions === null || selectOptions === void 0 ? void 0 : selectOptions.find(function (item) {\n      return (item === null || item === void 0 ? void 0 : item.value) === (claimsTabData === null || claimsTabData === void 0 ? void 0 : claimsTabData.searchBy);\n    }),\n    validation: Yup.object().nullable().required(utils.string.t('validation.required')),\n    muiComponentProps: {\n      inputProps: {\n        title: searchByText || ''\n      }\n    }\n  }, {\n    name: 'createdDate',\n    type: 'datepicker',\n    value: null\n  }, {\n    name: 'includeClosedClaims',\n    type: 'switch',\n    value: false,\n    muiComponentProps: {\n      onChange: function onChange(name, checked) {\n        setIsClosedClaimsEnabled(checked);\n        getClaimsData();\n\n        var claimsData = _objectSpread({}, claimsTabData);\n\n        claimsData.includedCloseClaims = checked;\n        dispatch(getClaimsTabData(claimsData));\n      }\n    }\n  }];\n  var defaultValues = utils.form.getInitialValues(viewFields);\n  var validationSchema = utils.form.getValidationSchema(viewFields);\n\n  var _useForm = useForm(_objectSpread({\n    defaultValues: defaultValues\n  }, validationSchema && {\n    resolver: yupResolver(validationSchema)\n  })),\n      control = _useForm.control,\n      setValue = _useForm.setValue;\n\n  var tableFilterFields = [{\n    id: 'claimStage',\n    type: 'multiSelect',\n    label: utils.string.t('claims.columns.claimsList.claimStage'),\n    placeholder: utils.string.t('claims.filterPlaceHolderText'),\n    value: [],\n    options: claimProcessingFilterDropDown === null || claimProcessingFilterDropDown === void 0 ? void 0 : claimProcessingFilterDropDown.team,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"claimStage\",\n      search: true,\n      options: claimProcessingFilterDropDown === null || claimProcessingFilterDropDown === void 0 ? void 0 : claimProcessingFilterDropDown.team\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 20\n    }, this)\n  }, {\n    id: 'lossFromDate',\n    type: 'datepicker',\n    label: utils.string.t('claims.columns.claimsList.lossFromDate'),\n    value: '',\n    content: /*#__PURE__*/_jsxDEV(FormDate, _objectSpread(_objectSpread({\n      control: control\n    }, utils.form.getFieldProps(defaultValues, 'lossFromDate')), {}, {\n      id: \"lossFromDatedatepicker\",\n      name: \"lossFromDate\",\n      type: \"datepicker\",\n      value: '',\n      label: '',\n      plainText: true,\n      plainTextIcon: true,\n      placeholder: utils.string.t('app.selectDate'),\n      muiComponentProps: {\n        fullWidth: false,\n        margin: 'dense'\n      },\n      muiPickerProps: {\n        clearable: false,\n        variant: 'inline',\n        format: 'DD-MM-YYYY'\n      }\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this)\n  }, {\n    id: 'insured',\n    type: 'multiSelect',\n    label: utils.string.t('claims.columns.claimsList.insured'),\n    placeholder: utils.string.t('claims.filterPlaceHolderText'),\n    value: [],\n    options: claimProcessingFilterDropDown === null || claimProcessingFilterDropDown === void 0 ? void 0 : claimProcessingFilterDropDown.team,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"team\",\n      search: true,\n      options: claimProcessingFilterDropDown === null || claimProcessingFilterDropDown === void 0 ? void 0 : claimProcessingFilterDropDown.team\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 20\n    }, this)\n  }].concat(_toConsumableArray(claimsType === constants.CLAIM_TEAM_TYPE.myTeamClaims ? [{\n    id: 'assignedTo',\n    type: 'multiSelect',\n    label: utils.string.t('claims.columns.claimsList.assignedTo'),\n    value: [],\n    options: claimProcessingFilterDropDown === null || claimProcessingFilterDropDown === void 0 ? void 0 : claimProcessingFilterDropDown.assignedTo,\n    nestedClasses: {\n      root: classes.fieldWidth\n    },\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"assignedTo\",\n      search: true,\n      options: claimProcessingFilterDropDown === null || claimProcessingFilterDropDown === void 0 ? void 0 : claimProcessingFilterDropDown.assignedTo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 26\n    }, this)\n  }] : []), [{\n    id: 'lastUpdated',\n    type: 'datepicker',\n    label: utils.string.t('claims.columns.claimsList.lastUpdated'),\n    value: '',\n    content: /*#__PURE__*/_jsxDEV(FormDate, _objectSpread(_objectSpread({\n      control: control\n    }, utils.form.getFieldProps(defaultValues, 'lastUpdated')), {}, {\n      id: \"lastUpdateddatepicker\",\n      name: \"lastUpdated\",\n      type: \"datepicker\",\n      value: '',\n      label: '',\n      plainText: true,\n      plainTextIcon: true,\n      placeholder: utils.string.t('app.selectDate'),\n      muiComponentProps: {\n        fullWidth: false,\n        margin: 'dense'\n      },\n      muiPickerProps: {\n        clearable: false,\n        variant: 'inline',\n        format: 'DD-MM-YYYY'\n      }\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 15\n    }, this)\n  }, {\n    id: 'priority',\n    type: 'multiSelect',\n    label: utils.string.t('claims.claimInformation.priority'),\n    placeholder: utils.string.t('claims.filterPlaceHolderText'),\n    value: [],\n    options: claimProcessingFilterDropDown === null || claimProcessingFilterDropDown === void 0 ? void 0 : claimProcessingFilterDropDown.priority,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"priority\",\n      search: true,\n      options: claimProcessingFilterDropDown === null || claimProcessingFilterDropDown === void 0 ? void 0 : claimProcessingFilterDropDown.priority\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 20\n    }, this)\n  }, {\n    id: 'division',\n    type: 'multiSelect',\n    label: utils.string.t('claims.columns.claimsList.division'),\n    placeholder: utils.string.t('claims.filterPlaceHolderText'),\n    value: [],\n    options: claimProcessingFilterDropDown === null || claimProcessingFilterDropDown === void 0 ? void 0 : claimProcessingFilterDropDown.processState,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"division\",\n      search: true,\n      options: claimProcessingFilterDropDown === null || claimProcessingFilterDropDown === void 0 ? void 0 : claimProcessingFilterDropDown.processState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 20\n    }, this)\n  }]);\n  useEffect(function () {\n    if (!(claimsTabData === null || claimsTabData === void 0 ? void 0 : claimsTabData.isClaimsTabLoaded)) {\n      getClaimsData();\n\n      var claimsData = _objectSpread({}, claimsTabData);\n\n      claimsData.isClaimsTabLoaded = true;\n      dispatch(getClaimsTabData(claimsData));\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n\n  var getClaimsData = function getClaimsData() {\n    if (claimsType) {\n      setValue('createdDate', null);\n\n      if (claimsType === constants.CLAIM_TEAM_TYPE.allClaims) {\n        setIsClosedClaimsEnabled(false);\n      } // defect - 14469 - Default sorting is not applying on Date &Time created and Priority columns\n      // First Time Table Grid load for MyClaims, MyTeamClaims, All Claims passing createdDate and Priority columns from UI.\n\n\n      if (myClaimsFirstTimeLoad && claimsType === constants.CLAIM_TEAM_TYPE.myClaims || myTeamClaimsFirstTimeLoad && claimsType === constants.CLAIM_TEAM_TYPE.myTeamClaims) {\n        if (claimsType === constants.CLAIM_TEAM_TYPE.myClaims) setMyClaimsFirstTimeLoad(!myClaimsFirstTimeLoad);\n        if (claimsType === constants.CLAIM_TEAM_TYPE.myTeamClaims) setMyTeamClaimsFirstTimeLoad(!myTeamClaimsFirstTimeLoad);\n        dispatch(getClaimsProcessing({\n          requestType: searchTypeCall,\n          claimsType: claimsType,\n          filterTerm: [],\n          searchBy: searchBy,\n          pullClosedRecords: isClosedClaimsEnabled,\n          firstTimeSort: firstTimeSortColumns\n        }));\n        dispatch(getClaimsProcessing({\n          requestType: filterTypeCall,\n          claimsType: claimsType,\n          filterTerm: [],\n          searchBy: searchBy,\n          pullClosedRecords: isClosedClaimsEnabled,\n          firstTimeSort: firstTimeSortColumns\n        }));\n      } else {\n        // From second time onwards, table grid load from else part for single column sorting.\n        dispatch(getClaimsProcessing({\n          requestType: searchTypeCall,\n          claimsType: claimsType,\n          filterTerm: [],\n          searchBy: searchBy,\n          pullClosedRecords: isClosedClaimsEnabled\n        }));\n        dispatch(getClaimsProcessing({\n          requestType: filterTypeCall,\n          claimsType: claimsType,\n          filterTerm: [],\n          searchBy: searchBy,\n          pullClosedRecords: isClosedClaimsEnabled\n        }));\n      }\n    }\n  };\n\n  var handleSearch = function handleSearch(queryObject) {\n    setResetKey(new Date().getTime());\n    dispatch(resetClaimProcessingFilters());\n    setValue('createdDate', null);\n\n    if (queryObject === null || queryObject === void 0 ? void 0 : queryObject.search) {\n      setSearchTerm(queryObject.search);\n\n      var claimsData = _objectSpread({}, claimsTabData);\n\n      claimsData.searchText = queryObject === null || queryObject === void 0 ? void 0 : queryObject.search;\n      dispatch(getClaimsTabData(claimsData));\n      dispatch(getClaimsProcessing({\n        requestType: searchTypeCall,\n        claimsType: claimsType,\n        term: queryObject.search,\n        direction: 'desc',\n        searchBy: searchBy,\n        pullClosedRecords: isClosedClaimsEnabled\n      }));\n      dispatch(getClaimsProcessing({\n        requestType: filterTypeCall,\n        claimsType: claimsType,\n        term: queryObject.search,\n        direction: 'desc',\n        searchBy: searchBy,\n        filterTerm: queryObject.filters,\n        pullClosedRecords: isClosedClaimsEnabled\n      }));\n    }\n  };\n\n  var handleResetFilter = function handleResetFilter() {\n    setValue('createdDate', null);\n    dispatch(resetClaimProcessingFilters());\n    dispatch(getClaimsProcessing({\n      requestType: searchTypeCall,\n      claimsType: claimsType,\n      term: searchTerm,\n      filterTerm: '',\n      direction: 'desc',\n      searchBy: searchBy,\n      pullClosedRecords: isClosedClaimsEnabled\n    }));\n    dispatch(getClaimsProcessing({\n      requestType: filterTypeCall,\n      claimsType: claimsType,\n      term: searchTerm,\n      filterTerm: '',\n      direction: 'desc',\n      searchBy: searchBy,\n      pullClosedRecords: isClosedClaimsEnabled\n    }));\n  };\n\n  var handleSearchFilter = function handleSearchFilter(data) {\n    dispatch(updateClaimProcessingFilters({\n      claimsType: claimsType,\n      search: data === null || data === void 0 ? void 0 : data.search,\n      filters: data.filters,\n      pullClosedRecords: isClosedClaimsEnabled\n    }));\n    return dispatch(getClaimsProcessing({\n      requestType: searchTypeCall,\n      claimsType: claimsType,\n      term: data.search,\n      filterTerm: data.filters,\n      searchBy: searchBy,\n      pullClosedRecords: isClosedClaimsEnabled\n    }));\n  };\n\n  var handleSort = function handleSort(by, dir) {\n    dispatch(getClaimsProcessing({\n      requestType: searchTypeCall,\n      claimsType: claimsType,\n      sortBy: by,\n      direction: dir.toUpperCase(),\n      term: searchTerm,\n      searchBy: searchBy,\n      pullClosedRecords: isClosedClaimsEnabled\n    }));\n  };\n\n  var handleChangePage = function handleChangePage(newPage) {\n    dispatch(getClaimsProcessing({\n      requestType: searchTypeCall,\n      claimsType: claimsType,\n      page: newPage,\n      term: searchTerm,\n      searchBy: searchBy,\n      pullClosedRecords: isClosedClaimsEnabled\n    }));\n  };\n\n  var handleChangeRowsPerPage = function handleChangeRowsPerPage(rowsPerPage) {\n    dispatch(getClaimsProcessing({\n      requestType: searchTypeCall,\n      claimsType: claimsType,\n      size: rowsPerPage,\n      term: searchTerm,\n      searchBy: searchBy,\n      pullClosedRecords: isClosedClaimsEnabled\n    }));\n  };\n\n  var handleResetSearch = function handleResetSearch() {\n    setResetKey(new Date().getTime());\n    dispatch(resetClaimsProcessingSearch());\n    dispatch(resetClaimProcessingFilters());\n    setValue('createdDate', null);\n    dispatch(getClaimsProcessing({\n      requestType: searchTypeCall,\n      claimsType: claimsType,\n      filterTerm: [],\n      searchBy: searchBy,\n      pullClosedRecords: isClosedClaimsEnabled\n    }));\n    dispatch(getClaimsProcessing({\n      requestType: filterTypeCall,\n      claimsType: claimsType,\n      filterTerm: [],\n      searchBy: searchBy,\n      pullClosedRecords: isClosedClaimsEnabled\n    }));\n  };\n\n  var onSelectSearchBy = function onSelectSearchBy(searchByValue, searchByLabel) {\n    setSearchByText(searchByLabel);\n    setSearchBy(searchByValue);\n\n    var claimsData = _objectSpread({}, claimsTabData);\n\n    claimsData.searchBy = searchByValue;\n    dispatch(getClaimsTabData(claimsData));\n    dispatch(getClaimsProcessing({\n      requestType: searchTypeCall,\n      claimsType: claimsType,\n      searchBy: searchByValue,\n      term: searchTerm,\n      pullClosedRecords: isClosedClaimsEnabled\n    }));\n    dispatch(getClaimsProcessing({\n      requestType: filterTypeCall,\n      claimsType: claimsType,\n      searchBy: searchByValue,\n      term: searchTerm,\n      pullClosedRecords: isClosedClaimsEnabled\n    }));\n  };\n\n  var columns = [{\n    id: 'claimRef',\n    label: utils.string.t('claims.columns.claimsManagement.ref'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    narrow: true,\n    nowrap: true,\n    visible: true,\n    mandatory: true\n  }, {\n    id: 'lossRef',\n    label: utils.string.t('claims.columns.claimsManagement.lossRef'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    narrow: true,\n    nowrap: true,\n    visible: true,\n    mandatory: true\n  }, {\n    id: 'lossDateFrom',\n    label: utils.string.t('claims.columns.claimsManagement.lossDateFrom'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    ellipsis: true,\n    visible: true\n  }, {\n    id: 'assured',\n    label: utils.string.t('claims.columns.claimsManagement.insured'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    ellipsis: true,\n    visible: true\n  }, {\n    id: 'policyRef',\n    label: utils.string.t('claims.columns.claimsManagement.policyRef'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }, {\n    id: 'division',\n    label: utils.string.t('claims.columns.claimsManagement.division'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }, {\n    id: 'processState',\n    label: utils.string.t('claims.columns.claimsList.claimStatus'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }, {\n    id: 'claimStage',\n    label: utils.string.t('claims.columns.claimsList.claimStage'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }, {\n    id: 'assignedTo',\n    label: utils.string.t('claims.columns.claimsManagement.assignedTo'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true,\n    mandatory: true,\n    nowrap: true\n  }, {\n    id: 'team',\n    label: utils.string.t('claims.columns.claimsManagement.team'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true,\n    mandatory: true\n  }, {\n    id: 'lastUpdated',\n    label: utils.string.t('claims.columns.claimsList.lastUpdated'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true,\n    mandatory: true\n  }, {\n    id: 'priority',\n    label: utils.string.t('claims.columns.claimsManagement.priority'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: true\n  }, {\n    id: 'catCodesID',\n    label: utils.string.t('claims.columns.claimsManagement.catCode'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    ellipsis: true\n  }, {\n    id: 'claimReceivedDateTime',\n    label: utils.string.t('claims.columns.claimsManagement.claimReceivedDateTime'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    narrow: true,\n    nowrap: true\n  }, {\n    id: 'createdDate',\n    label: utils.string.t('claims.columns.claimsManagement.createdDate'),\n    sort: {\n      type: 'date',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: false\n  }, {\n    id: 'closedDate',\n    label: utils.string.t('claims.columns.claimsManagement.closedDate'),\n    sort: {\n      type: 'date',\n      direction: 'asc'\n    },\n    nowrap: true\n  }, {\n    id: 'complexity',\n    label: utils.string.t('claims.columns.claimsManagement.complexity'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: false\n  }, {\n    id: 'ucr',\n    label: utils.string.t('claims.columns.claimsManagement.ucr'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: false\n  }, {\n    id: 'policyType',\n    label: utils.string.t('claims.columns.claimsManagement.policyType'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: false\n  }, {\n    id: 'claimantName',\n    label: utils.string.t('claims.columns.claimsManagement.claimant'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: false,\n    ellipsis: true\n  }, {\n    id: 'reinsured',\n    label: utils.string.t('claims.columns.claimsManagement.reinsured'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: false\n  }, {\n    id: 'client',\n    label: utils.string.t('claims.columns.claimsManagement.client'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    }\n  }, {\n    id: 'interest',\n    label: utils.string.t('claims.columns.claimsManagement.interest'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: false\n  }, {\n    id: 'createdBy',\n    label: utils.string.t('claims.columns.claimsManagement.createdBy'),\n    sort: {\n      type: 'numeric',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: false\n  }, {\n    id: 'company',\n    label: utils.string.t('claims.columns.claimsManagement.company'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    }\n  }, {\n    id: 'coverholder',\n    label: utils.string.t('claims.columns.claimsManagement.coverholder'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    visible: false\n  }, {\n    id: 'lossFromDate',\n    label: utils.string.t('claims.columns.claimsManagement.lossDateFrom'),\n    sort: {\n      type: 'date',\n      direction: 'asc'\n    },\n    nowrap: true\n  }, {\n    id: 'lossToDate',\n    label: utils.string.t('claims.columns.claimsManagement.lossDateTo'),\n    sort: {\n      type: 'date',\n      direction: 'asc'\n    },\n    nowrap: true\n  }, {\n    id: 'lossDateQualifier',\n    label: utils.string.t('claims.columns.claimsManagement.lossDateQualifier'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true\n  }, {\n    id: 'lossDetails',\n    label: utils.string.t('claims.columns.claimsManagement.lossDetails'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true,\n    ellipsis: true\n  }, {\n    id: 'pasClaimRef',\n    label: utils.string.t('claims.columns.claimsManagement.pasClaimRef'),\n    sort: {\n      type: 'numeric',\n      direction: 'asc'\n    },\n    nowrap: true\n  }, {\n    id: 'pasStatus',\n    label: utils.string.t('claims.columns.claimsManagement.pasStatus'),\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    nowrap: true\n  }];\n\n  var _useFlexiColumns = useFlexiColumns(columns),\n      columnsArray = _useFlexiColumns.columns,\n      columnProps = _useFlexiColumns.columnProps,\n      toggleColumn = _useFlexiColumns.toggleColumn;\n\n  return /*#__PURE__*/_jsxDEV(ClaimsTabView, {\n    claims: claimsProcessingItems,\n    claimsProcessing: claimsProcessing,\n    searchTerm: (claimsTabData === null || claimsTabData === void 0 ? void 0 : claimsTabData.searchText) || '',\n    sort: _objectSpread({}, claimsProcessing.sort),\n    columnsArray: columnsArray,\n    columnProps: columnProps,\n    viewFields: viewFields,\n    tableFilterFields: tableFilterFields,\n    isFetchingFilters: isFetchingFilters,\n    claimsType: 'myClaims',\n    control: control,\n    resetKey: resetKey,\n    handlers: {\n      search: handleSearch,\n      searchFilter: handleSearchFilter,\n      resetFilter: handleResetFilter,\n      sort: handleSort,\n      changePage: handleChangePage,\n      changeRowsPerPage: handleChangeRowsPerPage,\n      toggleColumn: toggleColumn,\n      resetSearch: handleResetSearch,\n      onSelectSearchBy: onSelectSearchBy\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 720,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ClaimsTab, \"iNlb0gN5pAx6so0G6GffuKg5Nw8=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useForm, useFlexiColumns];\n});\n\n_c = ClaimsTab;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimsTab\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ClaimsTab/ClaimsTab.js"],"names":["React","useState","useEffect","useDispatch","useSelector","Yup","useForm","yupResolver","styles","getClaimsProcessing","resetClaimProcessingFilters","resetClaimsProcessingSearch","selectUser","selectClaimsProcessing","selectClaimsProcessingItems","selectClaimProcessingFilterValues","selectClaimsProcessingFilterLoading","updateClaimProcessingFilters","processingClaimViewNavigation","selectClaimsTabData","getClaimsTabData","constants","utils","useFlexiColumns","MultiSelect","FormDate","ClaimsTabView","makeStyles","ClaimsTab","classes","name","dispatch","user","userHasMyClaimsPermission","app","access","feature","userHasMyTeamClaimsPermission","searchTerm","setSearchTerm","CLAIMS_SEARCH_OPTION_INSURED","searchBy","setSearchBy","claimProcessingFilterDropDown","isFetchingFilters","string","t","searchByText","setSearchByText","isClosedClaimsEnabled","setIsClosedClaimsEnabled","myClaimsFirstTimeLoad","setMyClaimsFirstTimeLoad","myTeamClaimsFirstTimeLoad","setMyTeamClaimsFirstTimeLoad","firstTimeSortColumns","claimsProcessing","claimsProcessingItems","searchTypeCall","CLAIM_PROCESSING_REQ_TYPES","search","filterTypeCall","filter","resetKey","setResetKey","claimsTabData","view","CLAIM_TEAM_TYPE","myClaims","claimsType","setClaimsType","selectOptions","label","value","CLAIMS_SEARCH_OPTION_CLAIM_REF","CLAIMS_SEARCH_OPTION_LOSS_REF","CLAIMS_SEARCH_OPTION_POLICY_REF","CLAIMS_SEARCH_OPTION_DIVISION","viewFields","type","defaultValue","muiFormGroupProps","row","nestedClasses","root","adjusterRadioGroup","radioLabel","onChange","setValue","getClaimsData","claimsData","options","myTeamClaims","find","item","validation","object","nullable","required","muiComponentProps","inputProps","title","checked","includedCloseClaims","defaultValues","form","getInitialValues","validationSchema","getValidationSchema","resolver","control","tableFilterFields","id","placeholder","team","content","getFieldProps","fullWidth","margin","clearable","variant","format","assignedTo","fieldWidth","priority","processState","isClaimsTabLoaded","allClaims","requestType","filterTerm","pullClosedRecords","firstTimeSort","handleSearch","queryObject","Date","getTime","searchText","term","direction","filters","handleResetFilter","handleSearchFilter","data","handleSort","by","dir","sortBy","toUpperCase","handleChangePage","newPage","page","handleChangeRowsPerPage","rowsPerPage","size","handleResetSearch","onSelectSearchBy","searchByValue","searchByLabel","columns","sort","narrow","nowrap","visible","mandatory","ellipsis","columnsArray","columnProps","toggleColumn","searchFilter","resetFilter","changePage","changeRowsPerPage","resetSearch"],"mappings":"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","sourcesContent":["import React, {  useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport * as Yup from 'yup';\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n\r\n// app\r\nimport styles from './ClaimsTab.styles';\r\nimport {\r\n  getClaimsProcessing,\r\n  resetClaimProcessingFilters,\r\n  resetClaimsProcessingSearch,\r\n  selectUser,\r\n  selectClaimsProcessing,\r\n  selectClaimsProcessingItems,\r\n  selectClaimProcessingFilterValues,\r\n  selectClaimsProcessingFilterLoading,\r\n  updateClaimProcessingFilters,\r\n  processingClaimViewNavigation,\r\n  selectClaimsTabData,\r\n  getClaimsTabData\r\n} from 'stores';\r\nimport * as constants from 'consts';\r\nimport * as utils from 'utils';\r\nimport { useFlexiColumns } from 'hooks';\r\nimport { MultiSelect, FormDate } from 'components';\r\nimport ClaimsTabView from './ClaimsTab.view';\r\n\r\n// mui\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nexport default function ClaimsTab(){\r\n  const classes = makeStyles(styles, { name: 'ClaimsManagement' })();\r\n  const dispatch = useDispatch();\r\n\r\n  const user = useSelector(selectUser);\r\n  const userHasMyClaimsPermission = utils.app.access.feature('claimsProcessing.myClaims', ['read', 'create', 'update'], user);\r\n  const userHasMyTeamClaimsPermission = utils.app.access.feature('claimsProcessing.myTeamClaims', ['read', 'create', 'update'], user);\r\n\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [searchBy, setSearchBy] = useState(constants.CLAIMS_SEARCH_OPTION_INSURED);\r\n  const claimProcessingFilterDropDown = useSelector(selectClaimProcessingFilterValues);\r\n  const isFetchingFilters = useSelector(selectClaimsProcessingFilterLoading);\r\n\r\n  const [searchByText, setSearchByText] = useState(utils.string.t('claims.searchByClaims.options.ClaimRef'));\r\n  const [isClosedClaimsEnabled, setIsClosedClaimsEnabled] = useState(false);\r\n\r\n  const [myClaimsFirstTimeLoad, setMyClaimsFirstTimeLoad] = useState(true);\r\n  const [myTeamClaimsFirstTimeLoad, setMyTeamClaimsFirstTimeLoad] = useState(true);\r\n  const firstTimeSortColumns = 'createdDate, priority';\r\n\r\n  const claimsProcessing = useSelector(selectClaimsProcessing);\r\n  const claimsProcessingItems = useSelector(selectClaimsProcessingItems);\r\n\r\n  const searchTypeCall = constants.CLAIM_PROCESSING_REQ_TYPES.search;\r\n  const filterTypeCall = constants.CLAIM_PROCESSING_REQ_TYPES.filter;\r\n  const [resetKey, setResetKey] = useState();\r\n\r\n  const claimsTabData = useSelector(selectClaimsTabData);\r\n  const [claimsType, setClaimsType] = useState(claimsTabData?.view || constants.CLAIM_TEAM_TYPE.myClaims);\r\n\r\n  const selectOptions = [\r\n    { label: utils.string.t('claims.searchByClaims.options.Insured'), value: constants.CLAIMS_SEARCH_OPTION_INSURED },\r\n    { label: utils.string.t('claims.searchByClaims.options.ClaimRef'), value: constants.CLAIMS_SEARCH_OPTION_CLAIM_REF },\r\n    { label: utils.string.t('claims.searchByClaims.options.LossRef'), value: constants.CLAIMS_SEARCH_OPTION_LOSS_REF },\r\n    { label: utils.string.t('claims.searchByClaims.options.PolicyRef'), value: constants.CLAIMS_SEARCH_OPTION_POLICY_REF },\r\n    { label: utils.string.t('claims.searchByClaims.options.Division'), value: constants.CLAIMS_SEARCH_OPTION_DIVISION }\r\n\r\n  ];\r\n\r\n  const viewFields = [\r\n    {\r\n          name: 'views',\r\n          type: 'radio',\r\n          value: claimsType,\r\n          defaultValue: claimsType,\r\n          muiFormGroupProps: {\r\n            row: true,\r\n            nestedClasses: { root: classes.adjusterRadioGroup },\r\n            classes: {\r\n              root: classes.radioLabel,\r\n            },\r\n            onChange: (value) => {\r\n              setClaimsType(value);\r\n              dispatch(processingClaimViewNavigation(value));\r\n              setValue('includeClosedClaims', false);\r\n              setIsClosedClaimsEnabled(false);\r\n              getClaimsData();\r\n              const claimsData = {...claimsTabData};\r\n              claimsData.view = value;\r\n              dispatch(getClaimsTabData(claimsData));\r\n            },\r\n          },\r\n          options: [\r\n            ...(userHasMyClaimsPermission\r\n              ? [\r\n                  {\r\n                    value: constants.CLAIM_TEAM_TYPE.myClaims,\r\n                    label: utils.string.t('claims.processing.myClaims'),\r\n                  },\r\n                ]\r\n              : []),\r\n            ...(userHasMyTeamClaimsPermission\r\n              ? [\r\n                  {\r\n                    value: constants.CLAIM_TEAM_TYPE.myTeamClaims,\r\n                    label: utils.string.t('claims.processing.myTeamClaims'),\r\n                  },\r\n                ]\r\n              : [])\r\n          ],\r\n        },\r\n        {\r\n          name: 'searchBy',\r\n          type: 'autocompletemui',\r\n          options: selectOptions,\r\n          value: (claimsTabData?.searchBy === '') ?\r\n                 (selectOptions?.find((item) => item?.value === constants.CLAIMS_SEARCH_OPTION_INSURED) || null) :\r\n                 (selectOptions?.find((item) => item?.value === claimsTabData?.searchBy)),\r\n          validation: Yup.object().nullable().required(utils.string.t('validation.required')),\r\n          muiComponentProps: {\r\n            inputProps: {\r\n              title: searchByText || '',\r\n            },\r\n          },\r\n        },\r\n        { name: 'createdDate', type: 'datepicker', value: null },\r\n        {\r\n          name: 'includeClosedClaims',\r\n          type: 'switch',\r\n          value: false,\r\n          muiComponentProps: {\r\n            onChange: (name, checked) => {\r\n              setIsClosedClaimsEnabled(checked);\r\n              getClaimsData();\r\n              const claimsData = {...claimsTabData};\r\n              claimsData.includedCloseClaims = checked;\r\n              dispatch(getClaimsTabData(claimsData));\r\n            },\r\n          },\r\n        },\r\n      ];\r\n\r\n    const defaultValues = utils.form.getInitialValues(viewFields);\r\n    const validationSchema = utils.form.getValidationSchema(viewFields);\r\n\r\n    const { control, setValue } = useForm({\r\n        defaultValues,\r\n        ...(validationSchema && { resolver: yupResolver(validationSchema) }),\r\n      });\r\n\r\n    const tableFilterFields = [\r\n        {\r\n          id: 'claimStage',\r\n          type: 'multiSelect',\r\n          label: utils.string.t('claims.columns.claimsList.claimStage'),\r\n          placeholder: utils.string.t('claims.filterPlaceHolderText'),\r\n          value: [],\r\n          options: claimProcessingFilterDropDown?.team,\r\n          content: <MultiSelect id=\"claimStage\" search options={claimProcessingFilterDropDown?.team} />,\r\n        },\r\n        {\r\n          id: 'lossFromDate',\r\n          type: 'datepicker',\r\n          label: utils.string.t('claims.columns.claimsList.lossFromDate'),\r\n          value: '',\r\n          content: (\r\n            <FormDate\r\n              control={control}\r\n              {...utils.form.getFieldProps(defaultValues, 'lossFromDate')}\r\n              id=\"lossFromDatedatepicker\"\r\n              name=\"lossFromDate\"\r\n              type=\"datepicker\"\r\n              value={''}\r\n              label={''}\r\n              plainText\r\n              plainTextIcon\r\n              placeholder={utils.string.t('app.selectDate')}\r\n              muiComponentProps={{\r\n                fullWidth: false,\r\n                margin: 'dense',\r\n              }}\r\n              muiPickerProps={{\r\n                clearable: false,\r\n                variant: 'inline',\r\n                format: 'DD-MM-YYYY',\r\n              }}\r\n            />\r\n          ),\r\n        },\r\n        {\r\n          id: 'insured',\r\n          type: 'multiSelect',\r\n          label: utils.string.t('claims.columns.claimsList.insured'),\r\n          placeholder: utils.string.t('claims.filterPlaceHolderText'),\r\n          value: [],\r\n          options: claimProcessingFilterDropDown?.team,\r\n          content: <MultiSelect id=\"team\" search options={claimProcessingFilterDropDown?.team} />,\r\n        },\r\n        ...(claimsType === constants.CLAIM_TEAM_TYPE.myTeamClaims\r\n          ? [\r\n              {\r\n                id: 'assignedTo',\r\n                type: 'multiSelect',\r\n                label: utils.string.t('claims.columns.claimsList.assignedTo'),\r\n                value: [],\r\n                options: claimProcessingFilterDropDown?.assignedTo,\r\n                nestedClasses: { root: classes.fieldWidth },\r\n                content: <MultiSelect id=\"assignedTo\" search options={claimProcessingFilterDropDown?.assignedTo} />,\r\n              },\r\n            ]\r\n          : []),\r\n          {\r\n            id: 'lastUpdated',\r\n            type: 'datepicker',\r\n            label: utils.string.t('claims.columns.claimsList.lastUpdated'),\r\n            value: '',\r\n            content: (\r\n              <FormDate\r\n                control={control}\r\n                {...utils.form.getFieldProps(defaultValues, 'lastUpdated')}\r\n                id=\"lastUpdateddatepicker\"\r\n                name=\"lastUpdated\"\r\n                type=\"datepicker\"\r\n                value={''}\r\n                label={''}\r\n                plainText\r\n                plainTextIcon\r\n                placeholder={utils.string.t('app.selectDate')}\r\n                muiComponentProps={{\r\n                  fullWidth: false,\r\n                  margin: 'dense',\r\n                }}\r\n                muiPickerProps={{\r\n                  clearable: false,\r\n                  variant: 'inline',\r\n                  format: 'DD-MM-YYYY',\r\n                }}\r\n              />\r\n            ),\r\n          },\r\n        {\r\n          id: 'priority',\r\n          type: 'multiSelect',\r\n          label: utils.string.t('claims.claimInformation.priority'),\r\n          placeholder: utils.string.t('claims.filterPlaceHolderText'),\r\n          value: [],\r\n          options: claimProcessingFilterDropDown?.priority,\r\n          content: <MultiSelect id=\"priority\" search options={claimProcessingFilterDropDown?.priority} />,\r\n        },\r\n        {\r\n          id: 'division',\r\n          type: 'multiSelect',\r\n          label: utils.string.t('claims.columns.claimsList.division'),\r\n          placeholder: utils.string.t('claims.filterPlaceHolderText'),\r\n          value: [],\r\n          options: claimProcessingFilterDropDown?.processState,\r\n          content: <MultiSelect id=\"division\" search options={claimProcessingFilterDropDown?.processState} />,\r\n        }\r\n      ];\r\n\r\n    useEffect(() => {\r\n        if(!claimsTabData?.isClaimsTabLoaded) {\r\n            getClaimsData();\r\n            const claimsData = {...claimsTabData};\r\n            claimsData.isClaimsTabLoaded = true;\r\n            dispatch(getClaimsTabData(claimsData));\r\n        }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const getClaimsData = () => {\r\n        if (claimsType) {\r\n            setValue('createdDate', null);\r\n      \r\n            if (claimsType === constants.CLAIM_TEAM_TYPE.allClaims) {\r\n              setIsClosedClaimsEnabled(false);\r\n            }\r\n      \r\n            // defect - 14469 - Default sorting is not applying on Date &Time created and Priority columns\r\n            // First Time Table Grid load for MyClaims, MyTeamClaims, All Claims passing createdDate and Priority columns from UI.\r\n            if (\r\n              (myClaimsFirstTimeLoad && claimsType === constants.CLAIM_TEAM_TYPE.myClaims) ||\r\n              (myTeamClaimsFirstTimeLoad && claimsType === constants.CLAIM_TEAM_TYPE.myTeamClaims)\r\n            ) {\r\n              if (claimsType === constants.CLAIM_TEAM_TYPE.myClaims) setMyClaimsFirstTimeLoad(!myClaimsFirstTimeLoad);\r\n              if (claimsType === constants.CLAIM_TEAM_TYPE.myTeamClaims) setMyTeamClaimsFirstTimeLoad(!myTeamClaimsFirstTimeLoad);\r\n      \r\n              dispatch(\r\n                getClaimsProcessing({\r\n                  requestType: searchTypeCall,\r\n                  claimsType,\r\n                  filterTerm: [],\r\n                  searchBy,\r\n                  pullClosedRecords: isClosedClaimsEnabled,\r\n                  firstTimeSort: firstTimeSortColumns,\r\n                })\r\n              );\r\n              dispatch(\r\n                getClaimsProcessing({\r\n                  requestType: filterTypeCall,\r\n                  claimsType,\r\n                  filterTerm: [],\r\n                  searchBy,\r\n                  pullClosedRecords: isClosedClaimsEnabled,\r\n                  firstTimeSort: firstTimeSortColumns,\r\n                })\r\n              );\r\n            } else {\r\n              // From second time onwards, table grid load from else part for single column sorting.\r\n              dispatch(\r\n                getClaimsProcessing({\r\n                  requestType: searchTypeCall,\r\n                  claimsType,\r\n                  filterTerm: [],\r\n                  searchBy,\r\n                  pullClosedRecords: isClosedClaimsEnabled,\r\n                })\r\n              );\r\n              dispatch(\r\n                getClaimsProcessing({\r\n                  requestType: filterTypeCall,\r\n                  claimsType,\r\n                  filterTerm: [],\r\n                  searchBy,\r\n                  pullClosedRecords: isClosedClaimsEnabled,\r\n                })\r\n              );\r\n            }\r\n          }  \r\n    }\r\n    \r\n\r\n    const handleSearch = (queryObject) => {\r\n        setResetKey(new Date().getTime());\r\n        dispatch(resetClaimProcessingFilters());\r\n        setValue('createdDate', null);\r\n        if (queryObject?.search) {\r\n          setSearchTerm(queryObject.search);\r\n          const claimsData = {...claimsTabData};\r\n          claimsData.searchText = queryObject?.search;\r\n          dispatch(getClaimsTabData(claimsData));\r\n          dispatch(\r\n            getClaimsProcessing({\r\n              requestType: searchTypeCall,\r\n              claimsType,\r\n              term: queryObject.search,\r\n              direction: 'desc',\r\n              searchBy,\r\n              pullClosedRecords: isClosedClaimsEnabled,\r\n            })\r\n          );\r\n          dispatch(\r\n            getClaimsProcessing({\r\n              requestType: filterTypeCall,\r\n              claimsType,\r\n              term: queryObject.search,\r\n              direction: 'desc',\r\n              searchBy,\r\n              filterTerm: queryObject.filters,\r\n              pullClosedRecords: isClosedClaimsEnabled,\r\n            })\r\n          );\r\n        }\r\n      };\r\n\r\n    const handleResetFilter = () => {\r\n        setValue('createdDate', null);\r\n        dispatch(resetClaimProcessingFilters());\r\n        dispatch(\r\n          getClaimsProcessing({\r\n            requestType: searchTypeCall,\r\n            claimsType,\r\n            term: searchTerm,\r\n            filterTerm: '',\r\n            direction: 'desc',\r\n            searchBy,\r\n            pullClosedRecords: isClosedClaimsEnabled,\r\n          })\r\n        );\r\n        dispatch(\r\n          getClaimsProcessing({\r\n            requestType: filterTypeCall,\r\n            claimsType,\r\n            term: searchTerm,\r\n            filterTerm: '',\r\n            direction: 'desc',\r\n            searchBy,\r\n            pullClosedRecords: isClosedClaimsEnabled,\r\n          })\r\n        );\r\n      };\r\n\r\n    const handleSearchFilter = (data) => {\r\n        dispatch(\r\n          updateClaimProcessingFilters({ claimsType, search: data?.search, filters: data.filters, pullClosedRecords: isClosedClaimsEnabled })\r\n        );\r\n        return dispatch(\r\n          getClaimsProcessing({\r\n            requestType: searchTypeCall,\r\n            claimsType,\r\n            term: data.search,\r\n            filterTerm: data.filters,\r\n            searchBy,\r\n            pullClosedRecords: isClosedClaimsEnabled,\r\n          })\r\n        );\r\n      };\r\n\r\n    const handleSort = (by, dir) => {\r\n        dispatch(\r\n          getClaimsProcessing({\r\n            requestType: searchTypeCall,\r\n            claimsType,\r\n            sortBy: by,\r\n            direction: dir.toUpperCase(),\r\n            term: searchTerm,\r\n            searchBy,\r\n            pullClosedRecords: isClosedClaimsEnabled,\r\n          })\r\n        );\r\n      };\r\n\r\n    const handleChangePage = (newPage) => {\r\n        dispatch(\r\n          getClaimsProcessing({\r\n            requestType: searchTypeCall,\r\n            claimsType,\r\n            page: newPage,\r\n            term: searchTerm,\r\n            searchBy,\r\n            pullClosedRecords: isClosedClaimsEnabled,\r\n          })\r\n        );\r\n      };\r\n\r\n    const handleChangeRowsPerPage = (rowsPerPage) => {\r\n        dispatch(\r\n          getClaimsProcessing({\r\n            requestType: searchTypeCall,\r\n            claimsType,\r\n            size: rowsPerPage,\r\n            term: searchTerm,\r\n            searchBy,\r\n            pullClosedRecords: isClosedClaimsEnabled,\r\n          })\r\n        );\r\n      };\r\n\r\n    const handleResetSearch = () => {\r\n        setResetKey(new Date().getTime());\r\n        dispatch(resetClaimsProcessingSearch());\r\n        dispatch(resetClaimProcessingFilters());\r\n        setValue('createdDate', null);\r\n        dispatch(\r\n          getClaimsProcessing({ requestType: searchTypeCall, claimsType, filterTerm: [], searchBy, pullClosedRecords: isClosedClaimsEnabled })\r\n        );\r\n        dispatch(\r\n          getClaimsProcessing({\r\n            requestType: filterTypeCall,\r\n            claimsType,\r\n            filterTerm: [],\r\n            searchBy,\r\n            pullClosedRecords: isClosedClaimsEnabled,\r\n          })\r\n        );\r\n      };\r\n\r\n    const onSelectSearchBy = (searchByValue, searchByLabel) => {\r\n        setSearchByText(searchByLabel);\r\n        setSearchBy(searchByValue);\r\n        const claimsData = {...claimsTabData};\r\n        claimsData.searchBy = searchByValue;\r\n        dispatch(getClaimsTabData(claimsData));\r\n        dispatch(\r\n          getClaimsProcessing({\r\n            requestType: searchTypeCall,\r\n            claimsType,\r\n            searchBy: searchByValue,\r\n            term: searchTerm,\r\n            pullClosedRecords: isClosedClaimsEnabled,\r\n          })\r\n        );\r\n        dispatch(\r\n          getClaimsProcessing({\r\n            requestType: filterTypeCall,\r\n            claimsType,\r\n            searchBy: searchByValue,\r\n            term: searchTerm,\r\n            pullClosedRecords: isClosedClaimsEnabled,\r\n          })\r\n        );\r\n      };\r\n\r\n    const columns = [\r\n        {\r\n          id: 'claimRef',\r\n          label: utils.string.t('claims.columns.claimsManagement.ref'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          narrow: true,\r\n          nowrap: true,\r\n          visible: true,\r\n          mandatory: true,\r\n        },\r\n        {\r\n          id: 'lossRef',\r\n          label: utils.string.t('claims.columns.claimsManagement.lossRef'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          narrow: true,\r\n          nowrap: true,\r\n          visible: true,\r\n          mandatory: true,\r\n        },\r\n        {\r\n          id: 'lossDateFrom',\r\n          label: utils.string.t('claims.columns.claimsManagement.lossDateFrom'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          ellipsis: true,\r\n          visible: true,\r\n        },\r\n        {\r\n          id: 'assured',\r\n          label: utils.string.t('claims.columns.claimsManagement.insured'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          ellipsis: true,\r\n          visible: true,\r\n        },\r\n        {\r\n          id: 'policyRef',\r\n          label: utils.string.t('claims.columns.claimsManagement.policyRef'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          nowrap: true,\r\n          visible: true,\r\n        },\r\n        {\r\n          id: 'division',\r\n          label: utils.string.t('claims.columns.claimsManagement.division'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          nowrap: true,\r\n          visible: true\r\n        },\r\n        {\r\n          id: 'processState',\r\n          label: utils.string.t('claims.columns.claimsList.claimStatus'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          nowrap: true,\r\n          visible: true,\r\n        },\r\n        {\r\n          id: 'claimStage',\r\n          label: utils.string.t('claims.columns.claimsList.claimStage'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          nowrap: true,\r\n          visible: true,\r\n        },\r\n        {\r\n          id: 'assignedTo',\r\n          label: utils.string.t('claims.columns.claimsManagement.assignedTo'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          visible: true,\r\n          mandatory: true,\r\n          nowrap: true,\r\n        },\r\n        {\r\n          id: 'team',\r\n          label: utils.string.t('claims.columns.claimsManagement.team'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          visible: true,\r\n          mandatory: true,\r\n        },\r\n        {\r\n          id: 'lastUpdated',\r\n          label: utils.string.t('claims.columns.claimsList.lastUpdated'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          visible: true,\r\n          mandatory: true,\r\n        },\r\n        {\r\n          id: 'priority',\r\n          label: utils.string.t('claims.columns.claimsManagement.priority'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          nowrap: true,\r\n          visible: true,\r\n        },\r\n        {\r\n          id: 'catCodesID',\r\n          label: utils.string.t('claims.columns.claimsManagement.catCode'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          ellipsis: true\r\n        },\r\n        {\r\n          id: 'claimReceivedDateTime',\r\n          label: utils.string.t('claims.columns.claimsManagement.claimReceivedDateTime'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          narrow: true,\r\n          nowrap: true,\r\n        },\r\n        {\r\n          id: 'createdDate',\r\n          label: utils.string.t('claims.columns.claimsManagement.createdDate'),\r\n          sort: { type: 'date', direction: 'asc' },\r\n          nowrap: true,\r\n          visible: false,\r\n        },\r\n        {\r\n          id: 'closedDate',\r\n          label: utils.string.t('claims.columns.claimsManagement.closedDate'),\r\n          sort: { type: 'date', direction: 'asc' },\r\n          nowrap: true,\r\n        },\r\n        {\r\n          id: 'complexity',\r\n          label: utils.string.t('claims.columns.claimsManagement.complexity'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          visible: false,\r\n        },\r\n        {\r\n          id: 'ucr',\r\n          label: utils.string.t('claims.columns.claimsManagement.ucr'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          nowrap: true,\r\n          visible: false,\r\n        },\r\n        {\r\n          id: 'policyType',\r\n          label: utils.string.t('claims.columns.claimsManagement.policyType'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          nowrap: true,\r\n          visible: false,\r\n        },\r\n        {\r\n          id: 'claimantName',\r\n          label: utils.string.t('claims.columns.claimsManagement.claimant'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          visible: false,\r\n          ellipsis: true,\r\n        },\r\n        {\r\n          id: 'reinsured',\r\n          label: utils.string.t('claims.columns.claimsManagement.reinsured'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          nowrap: true,\r\n          visible: false\r\n        },\r\n        {\r\n          id: 'client',\r\n          label: utils.string.t('claims.columns.claimsManagement.client'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n        },\r\n        {\r\n          id: 'interest',\r\n          label: utils.string.t('claims.columns.claimsManagement.interest'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          nowrap: true,\r\n          visible: false,\r\n        },\r\n        {\r\n          id: 'createdBy',\r\n          label: utils.string.t('claims.columns.claimsManagement.createdBy'),\r\n          sort: { type: 'numeric', direction: 'asc' },\r\n          nowrap: true,\r\n          visible: false,\r\n        },\r\n        {\r\n          id: 'company',\r\n          label: utils.string.t('claims.columns.claimsManagement.company'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n        },\r\n        {\r\n          id: 'coverholder',\r\n          label: utils.string.t('claims.columns.claimsManagement.coverholder'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          nowrap: true,\r\n          visible: false,\r\n        },\r\n    \r\n        {\r\n          id: 'lossFromDate',\r\n          label: utils.string.t('claims.columns.claimsManagement.lossDateFrom'),\r\n          sort: { type: 'date', direction: 'asc' },\r\n          nowrap: true,\r\n        },\r\n        {\r\n          id: 'lossToDate',\r\n          label: utils.string.t('claims.columns.claimsManagement.lossDateTo'),\r\n          sort: { type: 'date', direction: 'asc' },\r\n          nowrap: true,\r\n        },\r\n        {\r\n          id: 'lossDateQualifier',\r\n          label: utils.string.t('claims.columns.claimsManagement.lossDateQualifier'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          nowrap: true,\r\n        },\r\n        {\r\n          id: 'lossDetails',\r\n          label: utils.string.t('claims.columns.claimsManagement.lossDetails'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          nowrap: true,\r\n          ellipsis: true,\r\n        },\r\n        {\r\n          id: 'pasClaimRef',\r\n          label: utils.string.t('claims.columns.claimsManagement.pasClaimRef'),\r\n          sort: { type: 'numeric', direction: 'asc' },\r\n          nowrap: true,\r\n        },\r\n    \r\n        {\r\n          id: 'pasStatus',\r\n          label: utils.string.t('claims.columns.claimsManagement.pasStatus'),\r\n          sort: { type: 'lexical', direction: 'asc' },\r\n          nowrap: true,\r\n        }\r\n      ];\r\n\r\n    const { columns: columnsArray, columnProps, toggleColumn } = useFlexiColumns(columns);\r\n\r\n    return (\r\n        <ClaimsTabView \r\n            claims={claimsProcessingItems}\r\n            claimsProcessing={claimsProcessing}\r\n            searchTerm = {claimsTabData?.searchText || ''}\r\n            sort={{\r\n              ...claimsProcessing.sort,\r\n            }}\r\n            columnsArray={columnsArray}\r\n            columnProps={columnProps}\r\n            viewFields={viewFields}\r\n            tableFilterFields={tableFilterFields}\r\n            isFetchingFilters={isFetchingFilters}\r\n            claimsType={'myClaims'}\r\n            control={control}\r\n            resetKey={resetKey}\r\n            handlers={{\r\n              search: handleSearch,\r\n              searchFilter: handleSearchFilter,\r\n              resetFilter: handleResetFilter,\r\n              sort: handleSort,\r\n              changePage: handleChangePage,\r\n              changeRowsPerPage: handleChangeRowsPerPage,\r\n              toggleColumn,\r\n              resetSearch: handleResetSearch,\r\n              onSelectSearchBy\r\n            }}\r\n        />\r\n    );\r\n};"]},"metadata":{},"sourceType":"module"}