{"ast":null,"code":"// app\nimport { addLoader, authLogout, enqueueNotification, hideModal, removeLoader, postUploadRequest, postUploadSuccess, postUploadFailure } from 'stores';\nimport * as utils from 'utils';\nexport var uploadReportingDocument = function uploadReportingDocument(_ref) {\n  var data = _ref.data,\n      reportGroupId = _ref.reportGroupId,\n      reportingFolder = _ref.reportingFolder;\n  return function (dispatch, getState) {\n    var _data$file;\n\n    var state = getState(); // prettier-ignore\n\n    var auth = state.user.auth,\n        endpoint = state.config.vars.endpoint;\n    dispatch(postUploadRequest({\n      data: data,\n      reportGroupId: reportGroupId\n    }));\n    dispatch(addLoader('uploadDocument'));\n\n    if (!data.file || !reportGroupId) {\n      dispatch(enqueueNotification('notification.document.fail', 'error'));\n      dispatch(removeLoader('uploadDocument'));\n      return;\n    }\n\n    var form = new FormData();\n    form.append('uploaderEmail', state.user.emailId);\n    form.append('uploaderFullName', state.user.fullName);\n    form.append('teamId', 'unknown');\n    /*TODO*/\n\n    form.append('teamName', 'unknown');\n    /*TODO*/\n\n    form.append('reportGroupFolderId', reportingFolder === null || reportingFolder === void 0 ? void 0 : reportingFolder.id);\n    form.append('folder', reportingFolder === null || reportingFolder === void 0 ? void 0 : reportingFolder.label);\n    data === null || data === void 0 ? void 0 : (_data$file = data.file) === null || _data$file === void 0 ? void 0 : _data$file.forEach(function (file) {\n      return form.append('file', file);\n    });\n    return utils.api.multiPartPost({\n      token: auth.accessToken,\n      endpoint: endpoint.document,\n      path: 'api/document',\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      },\n      data: form\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleData(json);\n    }).then(function (data) {\n      dispatch(postUploadSuccess(data));\n      dispatch(enqueueNotification('notification.document.success', 'success'));\n    })[\"catch\"](function (err) {\n      var errorParams = {\n        file: 'stores/document.actions',\n        message: 'API multipart post error (document)'\n      };\n      dispatch(postUploadFailure(err));\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(enqueueNotification('notification.document.fail', 'error'));\n    })[\"finally\"](function () {\n      dispatch(removeLoader('uploadDocument'));\n      dispatch(hideModal());\n      return;\n    });\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/reporting/reporting.actions.documents.upload.js"],"names":["addLoader","authLogout","enqueueNotification","hideModal","removeLoader","postUploadRequest","postUploadSuccess","postUploadFailure","utils","uploadReportingDocument","data","reportGroupId","reportingFolder","dispatch","getState","state","auth","user","endpoint","config","vars","file","form","FormData","append","emailId","fullName","id","label","forEach","api","multiPartPost","token","accessToken","document","path","headers","then","response","handleResponse","json","handleData","err","errorParams","message","handleError","handleUnauthorized"],"mappings":"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","sourcesContent":["// app\r\nimport {\r\n  addLoader,\r\n  authLogout,\r\n  enqueueNotification,\r\n  hideModal,\r\n  removeLoader,\r\n  postUploadRequest,\r\n  postUploadSuccess,\r\n  postUploadFailure,\r\n} from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nexport const uploadReportingDocument =\r\n  ({ data, reportGroupId, reportingFolder }) =>\r\n  (dispatch, getState) => {\r\n    const state = getState();\r\n\r\n    // prettier-ignore\r\n    const { user: { auth }, config: { vars: { endpoint } } } = state;\r\n\r\n    dispatch(postUploadRequest({ data, reportGroupId }));\r\n    dispatch(addLoader('uploadDocument'));\r\n\r\n    if (!data.file || !reportGroupId) {\r\n      dispatch(enqueueNotification('notification.document.fail', 'error'));\r\n      dispatch(removeLoader('uploadDocument'));\r\n      return;\r\n    }\r\n\r\n    let form = new FormData();\r\n    form.append('uploaderEmail', state.user.emailId);\r\n    form.append('uploaderFullName', state.user.fullName);\r\n    form.append('teamId', 'unknown'); /*TODO*/\r\n    form.append('teamName', 'unknown'); /*TODO*/\r\n    form.append('reportGroupFolderId', reportingFolder?.id);\r\n    form.append('folder', reportingFolder?.label);\r\n    data?.file?.forEach((file) => form.append('file', file));\r\n\r\n    return utils.api\r\n      .multiPartPost({\r\n        token: auth.accessToken,\r\n        endpoint: endpoint.document,\r\n        path: 'api/document',\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n\r\n        data: form,\r\n      })\r\n      .then((response) => utils.api.handleResponse(response))\r\n      .then((json) => utils.api.handleData(json))\r\n      .then((data) => {\r\n        dispatch(postUploadSuccess(data));\r\n        dispatch(enqueueNotification('notification.document.success', 'success'));\r\n      })\r\n      .catch((err) => {\r\n        const errorParams = {\r\n          file: 'stores/document.actions',\r\n          message: 'API multipart post error (document)',\r\n        };\r\n        dispatch(postUploadFailure(err));\r\n        utils.api.handleError(err, errorParams);\r\n        utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n        dispatch(enqueueNotification('notification.document.fail', 'error'));\r\n      })\r\n      .finally(() => {\r\n        dispatch(removeLoader('uploadDocument'));\r\n        dispatch(hideModal());\r\n\r\n        return;\r\n      });\r\n  };\r\n"]},"metadata":{},"sourceType":"module"}