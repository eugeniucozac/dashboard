{"ast":null,"code":"import \"core-js/modules/es.array.map\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\components\\\\FormToggle\\\\FormToggle.stories.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { FormToggle } from 'components';\nimport { withKnobs, text, object } from '@storybook/addon-knobs';\nimport { Box } from '@material-ui/core';\nimport { createElement as _createElement } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default {\n  title: 'FormToggle',\n  component: FormToggle,\n  decorators: [withKnobs]\n};\nexport var Default = function Default() {\n  _s();\n\n  var _useForm = useForm({\n    defaultValues: []\n  }),\n      control = _useForm.control,\n      errors = _useForm.errors;\n\n  var fields = [{\n    indicative: false,\n    label: 'Inbox',\n    name: 'inbox',\n    type: 'TOGGLE',\n    placeholder: 'Type Street address',\n    validation: {},\n    options: [{\n      label: 'Send Email',\n      id: 'EMAIL'\n    }, {\n      label: 'Drafts',\n      id: 'DRAFTS'\n    }, {\n      label: 'Inbox',\n      id: 'INBOX'\n    }],\n    gridSize: {\n      xs: 5,\n      sm: 4,\n      md: 4,\n      lg: 4,\n      xl: 4\n    }\n  }];\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: fields.map(function (field, index) {\n      var gridSize = field.gridSize,\n          props = _objectWithoutProperties(field, [\"gridSize\"]);\n\n      return /*#__PURE__*/_createElement(FormToggle, _objectSpread(_objectSpread({}, props), {}, {\n        key: \"toggle-button-\".concat(field.name),\n        control: control,\n        name: field.name,\n        label: text('Label', field.label),\n        options: object('Options', field.options),\n        error: text('Error', errors[field.name]),\n        hint: text('Hint', field.hint),\n        handleChange: function handleChange(value) {\n          return alert(value);\n        },\n        buttonGroupProps: object('ButtonGroupProps', {\n          exclusive: true,\n          size: 'small'\n        }),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }\n      }));\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Default, \"D/xH2ndvuqycOkEMxkOjNbReqHQ=\", false, function () {\n  return [useForm];\n});\n\nDefault.displayName = \"Default\";\n_c = Default;\nDefault.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"Default\"\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\components\\\\FormToggle\\\\FormToggle.stories.js\"] = {\n    name: \"Default\",\n    docgenInfo: Default.__docgenInfo,\n    path: \"src\\\\components\\\\FormToggle\\\\FormToggle.stories.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Default\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/FormToggle/FormToggle.stories.js"],"names":["React","useForm","FormToggle","withKnobs","text","object","Box","title","component","decorators","Default","defaultValues","control","errors","fields","indicative","label","name","type","placeholder","validation","options","id","gridSize","xs","sm","md","lg","xl","map","field","index","props","hint","value","alert","exclusive","size"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AAEA,SAASC,UAAT,QAA2B,YAA3B;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,MAA1B,QAAwC,wBAAxC;AACA,SAASC,GAAT,QAAoB,mBAApB;;;AAEA,eAAe;AACbC,EAAAA,KAAK,EAAE,YADM;AAEbC,EAAAA,SAAS,EAAEN,UAFE;AAGbO,EAAAA,UAAU,EAAE,CAACN,SAAD;AAHC,CAAf;AAMA,OAAO,IAAMO,OAAO,GAAG,SAAVA,OAAU,GAAM;AAAA;;AAAA,iBACCT,OAAO,CAAC;AAClCU,IAAAA,aAAa,EAAE;AADmB,GAAD,CADR;AAAA,MACnBC,OADmB,YACnBA,OADmB;AAAA,MACVC,MADU,YACVA,MADU;;AAK3B,MAAMC,MAAM,GAAG,CACb;AACEC,IAAAA,UAAU,EAAE,KADd;AAEEC,IAAAA,KAAK,EAAE,OAFT;AAGEC,IAAAA,IAAI,EAAE,OAHR;AAIEC,IAAAA,IAAI,EAAE,QAJR;AAKEC,IAAAA,WAAW,EAAE,qBALf;AAMEC,IAAAA,UAAU,EAAE,EANd;AAOEC,IAAAA,OAAO,EAAE,CACP;AACEL,MAAAA,KAAK,EAAE,YADT;AAEEM,MAAAA,EAAE,EAAE;AAFN,KADO,EAKP;AACEN,MAAAA,KAAK,EAAE,QADT;AAEEM,MAAAA,EAAE,EAAE;AAFN,KALO,EASP;AACEN,MAAAA,KAAK,EAAE,OADT;AAEEM,MAAAA,EAAE,EAAE;AAFN,KATO,CAPX;AAqBEC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,EAAE,EAAE,CADI;AAERC,MAAAA,EAAE,EAAE,CAFI;AAGRC,MAAAA,EAAE,EAAE,CAHI;AAIRC,MAAAA,EAAE,EAAE,CAJI;AAKRC,MAAAA,EAAE,EAAE;AALI;AArBZ,GADa,CAAf;AAgCA,sBACE,QAAC,GAAD;AAAA,cACGd,MAAM,CAACe,GAAP,CAAW,UAACC,KAAD,EAAQC,KAAR,EAAkB;AAAA,UACpBR,QADoB,GACGO,KADH,CACpBP,QADoB;AAAA,UACPS,KADO,4BACGF,KADH;;AAE5B,0BACE,eAAC,UAAD,kCACME,KADN;AAEE,QAAA,GAAG,0BAAmBF,KAAK,CAACb,IAAzB,CAFL;AAGE,QAAA,OAAO,EAAEL,OAHX;AAIE,QAAA,IAAI,EAAEkB,KAAK,CAACb,IAJd;AAKE,QAAA,KAAK,EAAEb,IAAI,CAAC,OAAD,EAAU0B,KAAK,CAACd,KAAhB,CALb;AAME,QAAA,OAAO,EAAEX,MAAM,CAAC,SAAD,EAAYyB,KAAK,CAACT,OAAlB,CANjB;AAOE,QAAA,KAAK,EAAEjB,IAAI,CAAC,OAAD,EAAUS,MAAM,CAACiB,KAAK,CAACb,IAAP,CAAhB,CAPb;AAQE,QAAA,IAAI,EAAEb,IAAI,CAAC,MAAD,EAAS0B,KAAK,CAACG,IAAf,CARZ;AASE,QAAA,YAAY,EAAE,sBAACC,KAAD;AAAA,iBAAWC,KAAK,CAACD,KAAD,CAAhB;AAAA,SAThB;AAUE,QAAA,gBAAgB,EAAE7B,MAAM,CAAC,kBAAD,EAAqB;AAC3C+B,UAAAA,SAAS,EAAE,IADgC;AAE3CC,UAAAA,IAAI,EAAE;AAFqC,SAArB,CAV1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AAiBD,KAnBA;AADH;AAAA;AAAA;AAAA;AAAA,WADF;AAwBD,CA7DM;;GAAM3B,O;UACiBT,O;;;AADjBS,O;KAAAA,O","sourcesContent":["import React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\n\r\nimport { FormToggle } from 'components';\r\nimport { withKnobs, text, object } from '@storybook/addon-knobs';\r\nimport { Box } from '@material-ui/core';\r\n\r\nexport default {\r\n  title: 'FormToggle',\r\n  component: FormToggle,\r\n  decorators: [withKnobs],\r\n};\r\n\r\nexport const Default = () => {\r\n  const { control, errors } = useForm({\r\n    defaultValues: [],\r\n  });\r\n\r\n  const fields = [\r\n    {\r\n      indicative: false,\r\n      label: 'Inbox',\r\n      name: 'inbox',\r\n      type: 'TOGGLE',\r\n      placeholder: 'Type Street address',\r\n      validation: {},\r\n      options: [\r\n        {\r\n          label: 'Send Email',\r\n          id: 'EMAIL',\r\n        },\r\n        {\r\n          label: 'Drafts',\r\n          id: 'DRAFTS',\r\n        },\r\n        {\r\n          label: 'Inbox',\r\n          id: 'INBOX',\r\n        },\r\n      ],\r\n      gridSize: {\r\n        xs: 5,\r\n        sm: 4,\r\n        md: 4,\r\n        lg: 4,\r\n        xl: 4,\r\n      },\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Box>\r\n      {fields.map((field, index) => {\r\n        const { gridSize, ...props } = field;\r\n        return (\r\n          <FormToggle\r\n            {...props}\r\n            key={`toggle-button-${field.name}`}\r\n            control={control}\r\n            name={field.name}\r\n            label={text('Label', field.label)}\r\n            options={object('Options', field.options)}\r\n            error={text('Error', errors[field.name])}\r\n            hint={text('Hint', field.hint)}\r\n            handleChange={(value) => alert(value)}\r\n            buttonGroupProps={object('ButtonGroupProps', {\r\n              exclusive: true,\r\n              size: 'small',\r\n            })}\r\n          />\r\n        );\r\n      })}\r\n    </Box>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}