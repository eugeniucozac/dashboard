{"ast":null,"code":"import * as utils from 'utils';\nimport { authLogout, addLoader, removeLoader } from 'stores';\nexport var getCaseFilters = function getCaseFilters(params) {\n  return function (dispatch, getState) {\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    dispatch(getCaseFiltersRequest());\n    dispatch(addLoader('getCaseFilters'));\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.odsService,\n      path: \"referenceData/\".concat(params.filters)\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      if (data && (data === null || data === void 0 ? void 0 : data.status) === 'OK' && (data === null || data === void 0 ? void 0 : data.data)) {\n        dispatch(getCaseFiltersSuccess(data === null || data === void 0 ? void 0 : data.data));\n      }\n    }).catch(function (err) {\n      var errorParams = {\n        file: 'stores/premiumProcessing.actions.getCaseFilters',\n        message: 'API fetch error (premiumProcessing.actions.getCaseFilters)'\n      };\n      utils.api.handleError(err, errorParams);\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(getCaseFiltersFailure(err));\n      return err;\n    }).finally(function () {\n      dispatch(removeLoader('getCaseFilters'));\n    });\n  };\n};\nexport var getCaseFiltersRequest = function getCaseFiltersRequest() {\n  return {\n    type: 'PREMIUM_PROCESSING_CASE_FILTERS_REQUEST'\n  };\n};\nexport var getCaseFiltersSuccess = function getCaseFiltersSuccess(data) {\n  return {\n    type: 'PREMIUM_PROCESSING_CASE_FILTERS_SUCCESS',\n    payload: data\n  };\n};\nexport var getCaseFiltersFailure = function getCaseFiltersFailure(error) {\n  return {\n    type: 'PREMIUM_PROCESSING_CASE_FILTERS_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/premiumProcessing/premiumProcessing.actions.getCaseFilters.js"],"names":["utils","authLogout","addLoader","removeLoader","getCaseFilters","params","dispatch","getState","auth","user","endpoint","config","vars","getCaseFiltersRequest","api","get","token","accessToken","odsService","path","filters","then","response","handleResponse","json","handleNewData","data","status","getCaseFiltersSuccess","catch","err","errorParams","file","message","handleError","handleUnauthorized","getCaseFiltersFailure","finally","type","payload","error"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,YAAhC,QAAoD,QAApD;AAEA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,MAAD;AAAA,SAAY,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAAA,oBAM5DA,QAAQ,EANoD;AAAA,QAEtDC,IAFsD,aAE9DC,IAF8D,CAEtDD,IAFsD;AAAA,QAIpDE,QAJoD,aAG9DC,MAH8D,CAI5DC,IAJ4D,CAIpDF,QAJoD;;AAQhEJ,IAAAA,QAAQ,CAACO,qBAAqB,EAAtB,CAAR;AACAP,IAAAA,QAAQ,CAACJ,SAAS,CAAC,gBAAD,CAAV,CAAR;AAEA,WAAOF,KAAK,CAACc,GAAN,CACJC,GADI,CACA;AACHC,MAAAA,KAAK,EAAER,IAAI,CAACS,WADT;AAEHP,MAAAA,QAAQ,EAAEA,QAAQ,CAACQ,UAFhB;AAGHC,MAAAA,IAAI,0BAAmBd,MAAM,CAACe,OAA1B;AAHD,KADA,EAMJC,IANI,CAMC,UAACC,QAAD;AAAA,aAActB,KAAK,CAACc,GAAN,CAAUS,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAND,EAOJD,IAPI,CAOC,UAACG,IAAD;AAAA,aAAUxB,KAAK,CAACc,GAAN,CAAUW,aAAV,CAAwBD,IAAxB,CAAV;AAAA,KAPD,EAQJH,IARI,CAQC,UAACK,IAAD,EAAU;AACd,UAAIA,IAAI,IAAI,CAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEC,MAAN,MAAiB,IAAzB,KAAiCD,IAAjC,aAAiCA,IAAjC,uBAAiCA,IAAI,CAAEA,IAAvC,CAAJ,EAAiD;AAC/CpB,QAAAA,QAAQ,CAACsB,qBAAqB,CAACF,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEA,IAAP,CAAtB,CAAR;AACD;AACF,KAZI,EAaJG,KAbI,CAaE,UAACC,GAAD,EAAS;AACd,UAAMC,WAAW,GAAG;AAClBC,QAAAA,IAAI,EAAE,iDADY;AAElBC,QAAAA,OAAO,EAAE;AAFS,OAApB;AAKAjC,MAAAA,KAAK,CAACc,GAAN,CAAUoB,WAAV,CAAsBJ,GAAtB,EAA2BC,WAA3B;AACA/B,MAAAA,KAAK,CAACc,GAAN,CAAUqB,kBAAV,CAA6BL,GAA7B,EAAkCxB,QAAlC,EAA4CL,UAA5C;AACAK,MAAAA,QAAQ,CAAC8B,qBAAqB,CAACN,GAAD,CAAtB,CAAR;AACA,aAAOA,GAAP;AACD,KAvBI,EAwBJO,OAxBI,CAwBI,YAAM;AACb/B,MAAAA,QAAQ,CAACH,YAAY,CAAC,gBAAD,CAAb,CAAR;AACD,KA1BI,CAAP;AA2BD,GAtC6B;AAAA,CAAvB;AAwCP,OAAO,IAAMU,qBAAqB,GAAG,SAAxBA,qBAAwB,GAAM;AACzC,SAAO;AACLyB,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,IAAMV,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACF,IAAD,EAAU;AAC7C,SAAO;AACLY,IAAAA,IAAI,EAAE,yCADD;AAELC,IAAAA,OAAO,EAAEb;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMU,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACI,KAAD,EAAW;AAC9C,SAAO;AACLF,IAAAA,IAAI,EAAE,yCADD;AAELC,IAAAA,OAAO,EAAEC;AAFJ,GAAP;AAID,CALM","sourcesContent":["import * as utils from 'utils';\r\nimport { authLogout, addLoader, removeLoader } from 'stores';\r\n\r\nexport const getCaseFilters = (params) => (dispatch, getState) => {\r\n  const {\r\n    user: { auth },\r\n    config: {\r\n      vars: { endpoint },\r\n    },\r\n  } = getState();\r\n\r\n  dispatch(getCaseFiltersRequest());\r\n  dispatch(addLoader('getCaseFilters'));\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.odsService,\r\n      path: `referenceData/${params.filters}`,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      if (data && data?.status === 'OK' && data?.data) {\r\n        dispatch(getCaseFiltersSuccess(data?.data));\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      const errorParams = {\r\n        file: 'stores/premiumProcessing.actions.getCaseFilters',\r\n        message: 'API fetch error (premiumProcessing.actions.getCaseFilters)',\r\n      };\r\n\r\n      utils.api.handleError(err, errorParams);\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(getCaseFiltersFailure(err));\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('getCaseFilters'));\r\n    });\r\n};\r\n\r\nexport const getCaseFiltersRequest = () => {\r\n  return {\r\n    type: 'PREMIUM_PROCESSING_CASE_FILTERS_REQUEST',\r\n  };\r\n};\r\n\r\nexport const getCaseFiltersSuccess = (data) => {\r\n  return {\r\n    type: 'PREMIUM_PROCESSING_CASE_FILTERS_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const getCaseFiltersFailure = (error) => {\r\n  return {\r\n    type: 'PREMIUM_PROCESSING_CASE_FILTERS_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}