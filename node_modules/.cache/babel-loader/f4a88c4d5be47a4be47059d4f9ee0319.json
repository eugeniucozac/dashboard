{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\forms\\\\EditClaimRefNotesRow\\\\EditClaimRefNotesRow.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport * as Yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup'; //app\n\nimport { useFormActions } from 'hooks';\nimport { EditClaimRefNotesRowView } from './EditClaimRefNotesRow.view';\nimport { hideModal, showModal, getEditClaimRefNotes } from 'stores';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nEditClaimRefNotesRow.propTypes = {\n  claim: PropTypes.object\n};\nexport default function EditClaimRefNotesRow(_ref) {\n  _s();\n\n  var note = _ref.note;\n  var dispatch = useDispatch();\n  var fields = [{\n    name: 'caseIncidentNotesID',\n    type: 'hidden',\n    value: note === null || note === void 0 ? void 0 : note.caseIncidentNotesID\n  }, {\n    name: 'notesDescription',\n    type: 'textarea',\n    value: note === null || note === void 0 ? void 0 : note.notesDescription,\n    validation: Yup.string().max(1000, utils.string.t('validation.string.max')).required(utils.string.t('validation.required')),\n    muiComponentProps: {\n      multiline: true,\n      rows: 3,\n      rowsMax: 6\n    }\n  }];\n  var actions = [{\n    name: 'cancel',\n    label: utils.string.t('app.cancel'),\n    handler: function handler() {\n      dispatch(showModal({\n        component: 'CONFIRM',\n        props: {\n          title: utils.string.t('status.alert'),\n          hint: utils.string.t('claims.notes.notifications.alertPopup'),\n          fullWidth: true,\n          hideCompOnBlur: false,\n          maxWidth: 'xs',\n          componentProps: {\n            cancelLabel: utils.string.t('app.no'),\n            confirmLabel: utils.string.t('app.yes'),\n            submitHandler: function submitHandler() {\n              dispatch(hideModal());\n            }\n          }\n        }\n      }));\n    }\n  }, {\n    name: 'submit',\n    label: utils.string.t('app.save'),\n    handler: function handler(values) {\n      dispatch(getEditClaimRefNotes(values));\n    }\n  }];\n  var defaultValues = utils.form.getInitialValues(fields);\n  var validationSchema = utils.form.getValidationSchema(fields);\n  var formProps = useForm(_objectSpread({\n    defaultValues: defaultValues\n  }, validationSchema && {\n    resolver: yupResolver(validationSchema)\n  }));\n\n  var _useFormActions = useFormActions(actions),\n      cancel = _useFormActions.cancel,\n      submit = _useFormActions.submit;\n\n  return /*#__PURE__*/_jsxDEV(EditClaimRefNotesRowView, {\n    fields: fields,\n    buttons: {\n      cancel: cancel,\n      submit: submit\n    },\n    formProps: formProps,\n    note: note\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 10\n  }, this);\n}\n\n_s(EditClaimRefNotesRow, \"86xMP+NqO3OXlMfhAviS899Gkjg=\", false, function () {\n  return [useDispatch, useForm, useFormActions];\n});\n\n_c = EditClaimRefNotesRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditClaimRefNotesRow\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/forms/EditClaimRefNotesRow/EditClaimRefNotesRow.js"],"names":["React","PropTypes","useDispatch","useForm","Yup","yupResolver","useFormActions","EditClaimRefNotesRowView","hideModal","showModal","getEditClaimRefNotes","utils","EditClaimRefNotesRow","propTypes","claim","object","note","dispatch","fields","name","type","value","caseIncidentNotesID","notesDescription","validation","string","max","t","required","muiComponentProps","multiline","rows","rowsMax","actions","label","handler","component","props","title","hint","fullWidth","hideCompOnBlur","maxWidth","componentProps","cancelLabel","confirmLabel","submitHandler","values","defaultValues","form","getInitialValues","validationSchema","getValidationSchema","formProps","resolver","cancel","submit"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useForm } from 'react-hook-form';\r\nimport * as Yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n\r\n//app\r\nimport { useFormActions } from 'hooks';\r\nimport { EditClaimRefNotesRowView } from './EditClaimRefNotesRow.view';\r\nimport { hideModal, showModal, getEditClaimRefNotes } from 'stores';\r\nimport * as utils from 'utils';\r\n\r\nEditClaimRefNotesRow.propTypes = {\r\n  claim: PropTypes.object,\r\n};\r\nexport default function EditClaimRefNotesRow({ note }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const fields = [\r\n    {\r\n      name: 'caseIncidentNotesID',\r\n      type: 'hidden',\r\n      value: note?.caseIncidentNotesID,\r\n    },\r\n    {\r\n      name: 'notesDescription',\r\n      type: 'textarea',\r\n      value: note?.notesDescription,\r\n      validation: Yup.string().max(1000, utils.string.t('validation.string.max')).required(utils.string.t('validation.required')),\r\n      muiComponentProps: {\r\n        multiline: true,\r\n        rows: 3,\r\n        rowsMax: 6,\r\n      },\r\n    },\r\n  ];\r\n\r\n  const actions = [\r\n    {\r\n      name: 'cancel',\r\n      label: utils.string.t('app.cancel'),\r\n      handler: () => {\r\n        dispatch(\r\n          showModal({\r\n            component: 'CONFIRM',\r\n            props: {\r\n              title: utils.string.t('status.alert'),\r\n              hint: utils.string.t('claims.notes.notifications.alertPopup'),\r\n              fullWidth: true,\r\n              hideCompOnBlur: false,\r\n              maxWidth: 'xs',\r\n              componentProps: {\r\n                cancelLabel: utils.string.t('app.no'),\r\n                confirmLabel: utils.string.t('app.yes'),\r\n                submitHandler: () => {\r\n                  dispatch(hideModal());\r\n                },\r\n              },\r\n            },\r\n          })\r\n        );\r\n      },\r\n    },\r\n    {\r\n      name: 'submit',\r\n      label: utils.string.t('app.save'),\r\n      handler: (values) => {\r\n        dispatch(getEditClaimRefNotes(values));\r\n      },\r\n    },\r\n  ];\r\n\r\n  const defaultValues = utils.form.getInitialValues(fields);\r\n  const validationSchema = utils.form.getValidationSchema(fields);\r\n\r\n  const formProps = useForm({\r\n    defaultValues,\r\n    ...(validationSchema && { resolver: yupResolver(validationSchema) }),\r\n  });\r\n\r\n  const { cancel, submit } = useFormActions(actions);\r\n\r\n  return <EditClaimRefNotesRowView fields={fields} buttons={{ cancel, submit }} formProps={formProps} note={note} />;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}