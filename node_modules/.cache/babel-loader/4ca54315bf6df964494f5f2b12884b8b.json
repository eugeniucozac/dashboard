{"ast":null,"code":"import * as utils from 'utils';\nimport { authLogout, addLoader, enqueueNotification, removeLoader } from 'stores';\nexport var premiumProcessingNoteSave = function premiumProcessingNoteSave(params) {\n  return function (dispatch, getState) {\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    dispatch(addLoader('premiumProcessingNoteSave'));\n    var saveNotesRequest = {\n      bpmTaskId: params.taskId,\n      notes: params.comments\n    };\n    return utils.api.post({\n      token: auth.accessToken,\n      endpoint: endpoint.bpmService,\n      path: 'notes/addNotes',\n      data: saveNotesRequest\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(premiumProcessingNoteSaveSuccess(data === null || data === void 0 ? void 0 : data.data));\n      dispatch(enqueueNotification(data.message, 'success'));\n      return data;\n    }).catch(function (error) {\n      dispatch(premiumProcessingNoteSaveError(error, {\n        file: 'stores/premiumProcessing.actions.getSaveNote'\n      }));\n      dispatch(enqueueNotification('premiumProcessing.saveNotes.fail', 'error'));\n      utils.api.handleUnauthorized(error, dispatch, authLogout);\n      return error;\n    }).finally(function () {\n      dispatch(removeLoader('premiumProcessingNoteSave'));\n    });\n  };\n};\nexport var premiumProcessingNoteSaveSuccess = function premiumProcessingNoteSaveSuccess(data) {\n  return {\n    type: 'PREMIUM_PROCESSING_SAVE_NOTE_GET_SUCCESS',\n    payload: data\n  };\n};\nexport var premiumProcessingNoteSaveError = function premiumProcessingNoteSaveError(error) {\n  return {\n    type: 'PREMIUM_PROCESSING_SAVE_NOTE_GET_ERROR',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/premiumProcessing/premiumProcessing.actions.getSaveNote.js"],"names":["utils","authLogout","addLoader","enqueueNotification","removeLoader","premiumProcessingNoteSave","params","dispatch","getState","auth","user","endpoint","config","vars","saveNotesRequest","bpmTaskId","taskId","notes","comments","api","post","token","accessToken","bpmService","path","data","then","response","handleResponse","json","handleNewData","premiumProcessingNoteSaveSuccess","message","catch","error","premiumProcessingNoteSaveError","file","handleUnauthorized","finally","type","payload"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,mBAAhC,EAAqDC,YAArD,QAAyE,QAAzE;AAEA,OAAO,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACC,MAAD;AAAA,SAAY,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAAA,oBAMvEA,QAAQ,EAN+D;AAAA,QAEjEC,IAFiE,aAEzEC,IAFyE,CAEjED,IAFiE;AAAA,QAI/DE,QAJ+D,aAGzEC,MAHyE,CAIvEC,IAJuE,CAI/DF,QAJ+D;;AAQ3EJ,IAAAA,QAAQ,CAACL,SAAS,CAAC,2BAAD,CAAV,CAAR;AAEA,QAAMY,gBAAgB,GAAG;AACvBC,MAAAA,SAAS,EAAET,MAAM,CAACU,MADK;AAEvBC,MAAAA,KAAK,EAAEX,MAAM,CAACY;AAFS,KAAzB;AAKA,WAAOlB,KAAK,CAACmB,GAAN,CACJC,IADI,CACC;AACJC,MAAAA,KAAK,EAAEZ,IAAI,CAACa,WADR;AAEJX,MAAAA,QAAQ,EAAEA,QAAQ,CAACY,UAFf;AAGJC,MAAAA,IAAI,EAAE,gBAHF;AAIJC,MAAAA,IAAI,EAAEX;AAJF,KADD,EAOJY,IAPI,CAOC,UAACC,QAAD;AAAA,aAAc3B,KAAK,CAACmB,GAAN,CAAUS,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAPD,EAQJD,IARI,CAQC,UAACG,IAAD;AAAA,aAAU7B,KAAK,CAACmB,GAAN,CAAUW,aAAV,CAAwBD,IAAxB,CAAV;AAAA,KARD,EASJH,IATI,CASC,UAACD,IAAD,EAAU;AACdlB,MAAAA,QAAQ,CAACwB,gCAAgC,CAACN,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEA,IAAP,CAAjC,CAAR;AACAlB,MAAAA,QAAQ,CAACJ,mBAAmB,CAACsB,IAAI,CAACO,OAAN,EAAe,SAAf,CAApB,CAAR;AACA,aAAOP,IAAP;AACD,KAbI,EAcJQ,KAdI,CAcE,UAACC,KAAD,EAAW;AAChB3B,MAAAA,QAAQ,CACN4B,8BAA8B,CAACD,KAAD,EAAQ;AACpCE,QAAAA,IAAI,EAAE;AAD8B,OAAR,CADxB,CAAR;AAKA7B,MAAAA,QAAQ,CAACJ,mBAAmB,CAAC,kCAAD,EAAqC,OAArC,CAApB,CAAR;AACAH,MAAAA,KAAK,CAACmB,GAAN,CAAUkB,kBAAV,CAA6BH,KAA7B,EAAoC3B,QAApC,EAA8CN,UAA9C;AACA,aAAOiC,KAAP;AACD,KAvBI,EAwBJI,OAxBI,CAwBI,YAAM;AACb/B,MAAAA,QAAQ,CAACH,YAAY,CAAC,2BAAD,CAAb,CAAR;AACD,KA1BI,CAAP;AA2BD,GA1CwC;AAAA,CAAlC;AA4CP,OAAO,IAAM2B,gCAAgC,GAAG,SAAnCA,gCAAmC,CAACN,IAAD,EAAU;AACxD,SAAO;AACLc,IAAAA,IAAI,EAAE,0CADD;AAELC,IAAAA,OAAO,EAAEf;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMU,8BAA8B,GAAG,SAAjCA,8BAAiC,CAACD,KAAD,EAAW;AACvD,SAAO;AACLK,IAAAA,IAAI,EAAE,wCADD;AAELC,IAAAA,OAAO,EAAEN;AAFJ,GAAP;AAID,CALM","sourcesContent":["import * as utils from 'utils';\r\nimport { authLogout, addLoader, enqueueNotification, removeLoader } from 'stores';\r\n\r\nexport const premiumProcessingNoteSave = (params) => (dispatch, getState) => {\r\n  const {\r\n    user: { auth },\r\n    config: {\r\n      vars: { endpoint },\r\n    },\r\n  } = getState();\r\n\r\n  dispatch(addLoader('premiumProcessingNoteSave'));\r\n\r\n  const saveNotesRequest = {\r\n    bpmTaskId: params.taskId,\r\n    notes: params.comments,\r\n  };\r\n\r\n  return utils.api\r\n    .post({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.bpmService,\r\n      path: 'notes/addNotes',\r\n      data: saveNotesRequest,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(premiumProcessingNoteSaveSuccess(data?.data));\r\n      dispatch(enqueueNotification(data.message, 'success'));\r\n      return data;\r\n    })\r\n    .catch((error) => {\r\n      dispatch(\r\n        premiumProcessingNoteSaveError(error, {\r\n          file: 'stores/premiumProcessing.actions.getSaveNote',\r\n        })\r\n      );\r\n      dispatch(enqueueNotification('premiumProcessing.saveNotes.fail', 'error'));\r\n      utils.api.handleUnauthorized(error, dispatch, authLogout);\r\n      return error;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('premiumProcessingNoteSave'));\r\n    });\r\n};\r\n\r\nexport const premiumProcessingNoteSaveSuccess = (data) => {\r\n  return {\r\n    type: 'PREMIUM_PROCESSING_SAVE_NOTE_GET_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const premiumProcessingNoteSaveError = (error) => {\r\n  return {\r\n    type: 'PREMIUM_PROCESSING_SAVE_NOTE_GET_ERROR',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}