{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { authLogout, addLoader, removeLoader } from 'stores';\nimport * as utils from 'utils';\nimport get from 'lodash/get';\nexport var getPolicyInformation = function getPolicyInformation(params) {\n  return function (dispatch, getState) {\n    var _params$viewLoader;\n\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/claims.actions.getPolicyInformation'\n    };\n    var state = getState();\n    var policyData = get(state, 'claims.policyData') || {};\n    var claimInformation = get(state, 'claims.claimsInformation') || {};\n    var policyId = (params === null || params === void 0 ? void 0 : params.xbPolicyID) || (policyData === null || policyData === void 0 ? void 0 : policyData.xbPolicyID) || (claimInformation === null || claimInformation === void 0 ? void 0 : claimInformation.policyID) || '';\n    var instanceId = (params === null || params === void 0 ? void 0 : params.xbInstanceID) || (policyData === null || policyData === void 0 ? void 0 : policyData.xbInstanceID) || (claimInformation === null || claimInformation === void 0 ? void 0 : claimInformation.sourceID) || '';\n    var viewLoader = (_params$viewLoader = params === null || params === void 0 ? void 0 : params.viewLoader) !== null && _params$viewLoader !== void 0 ? _params$viewLoader : false;\n    dispatch(getPolicyInformationRequest());\n    viewLoader && dispatch(addLoader('getPolicyInformation'));\n\n    if (!policyId || !instanceId) {\n      dispatch(getPolicyInformationFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Missing requests params'\n      })));\n      dispatch(removeLoader('getPolicyInformation'));\n      return;\n    }\n\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.claimService,\n      path: \"api/data/policy/\".concat(policyId, \"/source/\").concat(instanceId, \"/details\")\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (data) {\n      dispatch(getPolicyInformationSuccess(data.data));\n      return data.data;\n    })[\"catch\"](function (err) {\n      dispatch(getPolicyInformationFailure(err, defaultError));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      return err;\n    })[\"finally\"](function () {\n      viewLoader && dispatch(removeLoader('getPolicyInformation'));\n    });\n  };\n};\nexport var getPolicyInformationRequest = function getPolicyInformationRequest() {\n  return {\n    type: 'CLAIMS_POLICY_INFORMATION_GET_REQUEST'\n  };\n};\nexport var getPolicyInformationSuccess = function getPolicyInformationSuccess(data) {\n  return {\n    type: 'CLAIMS_POLICY_INFORMATION_GET_SUCCESS',\n    payload: data\n  };\n};\nexport var getPolicyInformationFailure = function getPolicyInformationFailure(error) {\n  return {\n    type: 'CLAIMS_POLICY_INFORMATION_GET_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.getPolicyInformation.js"],"names":["authLogout","addLoader","removeLoader","utils","get","getPolicyInformation","params","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","state","policyData","claimInformation","policyId","xbPolicyID","policyID","instanceId","xbInstanceID","sourceID","viewLoader","getPolicyInformationRequest","getPolicyInformationFailure","message","api","token","accessToken","claimService","path","then","response","handleResponse","data","getPolicyInformationSuccess","err","handleUnauthorized","type","payload","error"],"mappings":";AAAA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,YAAhC,QAAoD,QAApD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AAEA,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,MAAD;AAAA,SAAY,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAAA;;AACtE;AADsE,oBAEXA,QAAQ,EAFG;AAAA,QAEtDC,IAFsD,aAE9DC,IAF8D,CAEtDD,IAFsD;AAAA,QAE5BE,QAF4B,aAE9CC,MAF8C,CAEpCC,IAFoC,CAE5BF,QAF4B;;AAItE,QAAMG,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE;AADa,KAArB;AAIA,QAAMC,KAAK,GAAGR,QAAQ,EAAtB;AACA,QAAMS,UAAU,GAAGb,GAAG,CAACY,KAAD,EAAQ,mBAAR,CAAH,IAAmC,EAAtD;AACA,QAAME,gBAAgB,GAAGd,GAAG,CAACY,KAAD,EAAQ,0BAAR,CAAH,IAA0C,EAAnE;AACA,QAAMG,QAAQ,GAAG,CAAAb,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEc,UAAR,MAAsBH,UAAtB,aAAsBA,UAAtB,uBAAsBA,UAAU,CAAEG,UAAlC,MAAgDF,gBAAhD,aAAgDA,gBAAhD,uBAAgDA,gBAAgB,CAAEG,QAAlE,KAA8E,EAA/F;AACA,QAAMC,UAAU,GAAG,CAAAhB,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEiB,YAAR,MAAwBN,UAAxB,aAAwBA,UAAxB,uBAAwBA,UAAU,CAAEM,YAApC,MAAoDL,gBAApD,aAAoDA,gBAApD,uBAAoDA,gBAAgB,CAAEM,QAAtE,KAAkF,EAArG;AACA,QAAMC,UAAU,yBAAGnB,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAEmB,UAAX,mEAAyB,KAAzC;AACAlB,IAAAA,QAAQ,CAACmB,2BAA2B,EAA5B,CAAR;AACAD,IAAAA,UAAU,IAAIlB,QAAQ,CAACN,SAAS,CAAC,sBAAD,CAAV,CAAtB;;AAEA,QAAI,CAACkB,QAAD,IAAa,CAACG,UAAlB,EAA8B;AAC5Bf,MAAAA,QAAQ,CAACoB,2BAA2B,iCAAMb,YAAN;AAAoBc,QAAAA,OAAO,EAAE;AAA7B,SAA5B,CAAR;AACArB,MAAAA,QAAQ,CAACL,YAAY,CAAC,sBAAD,CAAb,CAAR;AACA;AACD;;AAED,WAAOC,KAAK,CAAC0B,GAAN,CACJzB,GADI,CACA;AACH0B,MAAAA,KAAK,EAAErB,IAAI,CAACsB,WADT;AAEHpB,MAAAA,QAAQ,EAAEA,QAAQ,CAACqB,YAFhB;AAGHC,MAAAA,IAAI,4BAAqBd,QAArB,qBAAwCG,UAAxC;AAHD,KADA,EAMJY,IANI,CAMC,UAACC,QAAD;AAAA,aAAchC,KAAK,CAAC0B,GAAN,CAAUO,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAND,EAOJD,IAPI,CAOC,UAACG,IAAD,EAAU;AACd9B,MAAAA,QAAQ,CAAC+B,2BAA2B,CAACD,IAAI,CAACA,IAAN,CAA5B,CAAR;AACA,aAAOA,IAAI,CAACA,IAAZ;AACD,KAVI,WAWE,UAACE,GAAD,EAAS;AACdhC,MAAAA,QAAQ,CAACoB,2BAA2B,CAACY,GAAD,EAAMzB,YAAN,CAA5B,CAAR;AACAX,MAAAA,KAAK,CAAC0B,GAAN,CAAUW,kBAAV,CAA6BD,GAA7B,EAAkChC,QAAlC,EAA4CP,UAA5C;AACA,aAAOuC,GAAP;AACD,KAfI,aAgBI,YAAM;AACbd,MAAAA,UAAU,IAAIlB,QAAQ,CAACL,YAAY,CAAC,sBAAD,CAAb,CAAtB;AACD,KAlBI,CAAP;AAmBD,GA1CmC;AAAA,CAA7B;AA4CP,OAAO,IAAMwB,2BAA2B,GAAG,SAA9BA,2BAA8B,GAAM;AAC/C,SAAO;AACLe,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,IAAMH,2BAA2B,GAAG,SAA9BA,2BAA8B,CAACD,IAAD,EAAU;AACnD,SAAO;AACLI,IAAAA,IAAI,EAAE,uCADD;AAELC,IAAAA,OAAO,EAAEL;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMV,2BAA2B,GAAG,SAA9BA,2BAA8B,CAACgB,KAAD,EAAW;AACpD,SAAO;AACLF,IAAAA,IAAI,EAAE,uCADD;AAELC,IAAAA,OAAO,EAAEC;AAFJ,GAAP;AAID,CALM","sourcesContent":["import { authLogout, addLoader, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\nimport get from 'lodash/get';\r\n\r\nexport const getPolicyInformation = (params) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint } } } = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/claims.actions.getPolicyInformation',\r\n  };\r\n\r\n  const state = getState();\r\n  const policyData = get(state, 'claims.policyData') || {};\r\n  const claimInformation = get(state, 'claims.claimsInformation') || {};\r\n  const policyId = params?.xbPolicyID || policyData?.xbPolicyID || claimInformation?.policyID || '';\r\n  const instanceId = params?.xbInstanceID || policyData?.xbInstanceID || claimInformation?.sourceID || '';\r\n  const viewLoader = params?.viewLoader ?? false;\r\n  dispatch(getPolicyInformationRequest());\r\n  viewLoader && dispatch(addLoader('getPolicyInformation'));\r\n\r\n  if (!policyId || !instanceId) {\r\n    dispatch(getPolicyInformationFailure({ ...defaultError, message: 'Missing requests params' }));\r\n    dispatch(removeLoader('getPolicyInformation'));\r\n    return;\r\n  }\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.claimService,\r\n      path: `api/data/policy/${policyId}/source/${instanceId}/details`,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((data) => {\r\n      dispatch(getPolicyInformationSuccess(data.data));\r\n      return data.data;\r\n    })\r\n    .catch((err) => {\r\n      dispatch(getPolicyInformationFailure(err, defaultError));\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      viewLoader && dispatch(removeLoader('getPolicyInformation'));\r\n    });\r\n};\r\n\r\nexport const getPolicyInformationRequest = () => {\r\n  return {\r\n    type: 'CLAIMS_POLICY_INFORMATION_GET_REQUEST',\r\n  };\r\n};\r\n\r\nexport const getPolicyInformationSuccess = (data) => {\r\n  return {\r\n    type: 'CLAIMS_POLICY_INFORMATION_GET_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const getPolicyInformationFailure = (error) => {\r\n  return {\r\n    type: 'CLAIMS_POLICY_INFORMATION_GET_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}