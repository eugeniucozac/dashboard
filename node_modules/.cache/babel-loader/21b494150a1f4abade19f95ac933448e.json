{"ast":null,"code":"import { authLogout, addLoader, removeLoader } from 'stores';\nimport * as utils from 'utils';\nimport get from 'lodash/get';\nexport var getComplexityValues = function getComplexityValues(divisionID, xbInstanceID) {\n  var includeDefaultValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return function (dispatch, getState) {\n    var _policyData$divisionI, _policyData$xbInstanc;\n\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/claims.actions.getComplexityValues'\n    };\n    dispatch(getComplexityValuesRequest());\n    dispatch(addLoader('getComplexityValues'));\n    var state = getState();\n    var policyData = get(state, 'claims.policyData') || '';\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.claimService,\n      path: 'api/data/claims-triage/complex/complexity-values',\n      params: {\n        departmentID: (_policyData$divisionI = policyData === null || policyData === void 0 ? void 0 : policyData.divisionID) !== null && _policyData$divisionI !== void 0 ? _policyData$divisionI : divisionID,\n        xbInstanceID: (_policyData$xbInstanc = policyData === null || policyData === void 0 ? void 0 : policyData.xbInstanceID) !== null && _policyData$xbInstanc !== void 0 ? _policyData$xbInstanc : xbInstanceID,\n        includeDefaultValues: includeDefaultValues\n      }\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (data) {\n      dispatch(getComplexityValuesSuccess(data.data));\n      dispatch(removeLoader('getComplexityValues'));\n      return data.data;\n    })[\"catch\"](function (err) {\n      dispatch(getComplexityValuesFailure(err, defaultError));\n      dispatch(removeLoader('getComplexityValues'));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      return err;\n    });\n  };\n};\nexport var getComplexityValuesRequest = function getComplexityValuesRequest(data) {\n  return {\n    type: 'CLAIMS_COMPLEXITY_VALUES_GET_REQUEST',\n    payload: data\n  };\n};\nexport var getComplexityValuesSuccess = function getComplexityValuesSuccess(data) {\n  return {\n    type: 'CLAIMS_COMPLEXITY_VALUES_GET_SUCCESS',\n    payload: data\n  };\n};\nexport var getComplexityValuesFailure = function getComplexityValuesFailure(data) {\n  return {\n    type: 'CLAIMS_COMPLEXITY_VALUES_GET_FAILURE',\n    payload: data\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/claims/claims.actions.getComplexityValues.js"],"names":["authLogout","addLoader","removeLoader","utils","get","getComplexityValues","divisionID","xbInstanceID","includeDefaultValues","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","getComplexityValuesRequest","state","policyData","api","token","accessToken","claimService","path","params","departmentID","then","response","handleResponse","data","getComplexityValuesSuccess","err","getComplexityValuesFailure","handleUnauthorized","type","payload"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,YAAhC,QAAoD,QAApD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AAEA,OAAO,IAAMC,mBAAmB,GAC9B,SADWA,mBACX,CAACC,UAAD,EAAaC,YAAb;AAAA,MAA2BC,oBAA3B,uEAAkD,IAAlD;AAAA,SACA,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAAA;;AACtB;AADsB,oBAEmCA,QAAQ,EAF3C;AAAA,QAENC,IAFM,aAEdC,IAFc,CAEND,IAFM;AAAA,QAEoBE,QAFpB,aAEEC,MAFF,CAEYC,IAFZ,CAEoBF,QAFpB;;AAItB,QAAMG,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE;AADa,KAArB;AAIAR,IAAAA,QAAQ,CAACS,0BAA0B,EAA3B,CAAR;AACAT,IAAAA,QAAQ,CAACR,SAAS,CAAC,qBAAD,CAAV,CAAR;AAEA,QAAMkB,KAAK,GAAGT,QAAQ,EAAtB;AACA,QAAMU,UAAU,GAAGhB,GAAG,CAACe,KAAD,EAAQ,mBAAR,CAAH,IAAmC,EAAtD;AAEA,WAAOhB,KAAK,CAACkB,GAAN,CACJjB,GADI,CACA;AACHkB,MAAAA,KAAK,EAAEX,IAAI,CAACY,WADT;AAEHV,MAAAA,QAAQ,EAAEA,QAAQ,CAACW,YAFhB;AAGHC,MAAAA,IAAI,EAAE,kDAHH;AAIHC,MAAAA,MAAM,EAAE;AACNC,QAAAA,YAAY,2BAAEP,UAAF,aAAEA,UAAF,uBAAEA,UAAU,CAAEd,UAAd,yEAA4BA,UADlC;AAENC,QAAAA,YAAY,2BAAEa,UAAF,aAAEA,UAAF,uBAAEA,UAAU,CAAEb,YAAd,yEAA8BA,YAFpC;AAGNC,QAAAA,oBAAoB,EAApBA;AAHM;AAJL,KADA,EAWJoB,IAXI,CAWC,UAACC,QAAD;AAAA,aAAc1B,KAAK,CAACkB,GAAN,CAAUS,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAXD,EAYJD,IAZI,CAYC,UAACG,IAAD,EAAU;AACdtB,MAAAA,QAAQ,CAACuB,0BAA0B,CAACD,IAAI,CAACA,IAAN,CAA3B,CAAR;AACAtB,MAAAA,QAAQ,CAACP,YAAY,CAAC,qBAAD,CAAb,CAAR;AACA,aAAO6B,IAAI,CAACA,IAAZ;AACD,KAhBI,WAiBE,UAACE,GAAD,EAAS;AACdxB,MAAAA,QAAQ,CAACyB,0BAA0B,CAACD,GAAD,EAAMjB,YAAN,CAA3B,CAAR;AACAP,MAAAA,QAAQ,CAACP,YAAY,CAAC,qBAAD,CAAb,CAAR;AACAC,MAAAA,KAAK,CAACkB,GAAN,CAAUc,kBAAV,CAA6BF,GAA7B,EAAkCxB,QAAlC,EAA4CT,UAA5C;AACA,aAAOiC,GAAP;AACD,KAtBI,CAAP;AAuBD,GAtCD;AAAA,CADK;AAyCP,OAAO,IAAMf,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACa,IAAD,EAAU;AAClD,SAAO;AACLK,IAAAA,IAAI,EAAE,sCADD;AAELC,IAAAA,OAAO,EAAEN;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACD,IAAD,EAAU;AAClD,SAAO;AACLK,IAAAA,IAAI,EAAE,sCADD;AAELC,IAAAA,OAAO,EAAEN;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMG,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACH,IAAD,EAAU;AAClD,SAAO;AACLK,IAAAA,IAAI,EAAE,sCADD;AAELC,IAAAA,OAAO,EAAEN;AAFJ,GAAP;AAID,CALM","sourcesContent":["import { authLogout, addLoader, removeLoader } from 'stores';\r\nimport * as utils from 'utils';\r\nimport get from 'lodash/get';\r\n\r\nexport const getComplexityValues =\r\n  (divisionID, xbInstanceID, includeDefaultValues = true) =>\r\n  (dispatch, getState) => {\r\n    // prettier-ignore\r\n    const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n    const defaultError = {\r\n      file: 'stores/claims.actions.getComplexityValues',\r\n    };\r\n\r\n    dispatch(getComplexityValuesRequest());\r\n    dispatch(addLoader('getComplexityValues'));\r\n\r\n    const state = getState();\r\n    const policyData = get(state, 'claims.policyData') || '';\r\n\r\n    return utils.api\r\n      .get({\r\n        token: auth.accessToken,\r\n        endpoint: endpoint.claimService,\r\n        path: 'api/data/claims-triage/complex/complexity-values',\r\n        params: {\r\n          departmentID: policyData?.divisionID ?? divisionID,\r\n          xbInstanceID: policyData?.xbInstanceID ?? xbInstanceID,\r\n          includeDefaultValues,\r\n        },\r\n      })\r\n      .then((response) => utils.api.handleResponse(response))\r\n      .then((data) => {\r\n        dispatch(getComplexityValuesSuccess(data.data));\r\n        dispatch(removeLoader('getComplexityValues'));\r\n        return data.data;\r\n      })\r\n      .catch((err) => {\r\n        dispatch(getComplexityValuesFailure(err, defaultError));\r\n        dispatch(removeLoader('getComplexityValues'));\r\n        utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n        return err;\r\n      });\r\n  };\r\n\r\nexport const getComplexityValuesRequest = (data) => {\r\n  return {\r\n    type: 'CLAIMS_COMPLEXITY_VALUES_GET_REQUEST',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const getComplexityValuesSuccess = (data) => {\r\n  return {\r\n    type: 'CLAIMS_COMPLEXITY_VALUES_GET_SUCCESS',\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const getComplexityValuesFailure = (data) => {\r\n  return {\r\n    type: 'CLAIMS_COMPLEXITY_VALUES_GET_FAILURE',\r\n    payload: data,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}