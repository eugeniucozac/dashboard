{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\LossNotes\\\\LossNotes.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux'; // app\n\nimport LossNotesView from './LossNotes.view';\nimport { MultiSelect, FormDate } from 'components';\nimport { getClaimNotes, getCaseIncidentDetails, resetClaimNotes, selectClaimNotes, selectClaimNotesFilters, selectClaimNotesQuery, selectClaimNotesPagination, selectClaimNotesSort, selectRefDataNewProcessType, selectCaseIncidentDetails, showModal } from 'stores';\nimport { useFlexiColumns, usePagination, useSort } from 'hooks';\nimport * as utils from 'utils';\nimport { CLAIM_LOSS_PROCESS_TYPE_NAME } from 'consts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nLossNotes.propTypes = {\n  lossObj: PropTypes.object.isRequired\n};\nexport default function LossNotes(_ref) {\n  _s();\n\n  var lossObj = _ref.lossObj;\n  var dispatch = useDispatch();\n  var lossDetailId = lossObj.lossDetailId;\n  var claimNotes = useSelector(selectClaimNotes);\n  var users = useSelector(selectClaimNotesFilters);\n  var claimNotesQuery = useSelector(selectClaimNotesQuery);\n  var claimNotesPagination = useSelector(selectClaimNotesPagination);\n  var claimNotesSort = useSelector(selectClaimNotesSort);\n  var processTypes = useSelector(selectRefDataNewProcessType);\n  var lossCaseIncidentData = useSelector(selectCaseIncidentDetails);\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      searchText = _useState2[0],\n      setSearchText = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      resetKey = _useState4[0],\n      setResetKey = _useState4[1];\n\n  var processTypeData = (processTypes === null || processTypes === void 0 ? void 0 : processTypes.find(function (item) {\n    return (item === null || item === void 0 ? void 0 : item.processTypeDetails) === CLAIM_LOSS_PROCESS_TYPE_NAME;\n  })) || null;\n  useEffect(function () {\n    if (lossDetailId && processTypeData) {\n      dispatch(getCaseIncidentDetails({\n        processTypeId: processTypeData === null || processTypeData === void 0 ? void 0 : processTypeData.processTypeID,\n        referenceId: lossDetailId,\n        viewLoader: false\n      })).then(function (res) {\n        if (res) {\n          dispatch(getClaimNotes({\n            caseIncidentID: res === null || res === void 0 ? void 0 : res.caseIncidentID\n          }));\n        }\n      });\n    } // cleanup\n\n\n    return function () {\n      dispatch(resetClaimNotes());\n    };\n  }, [lossDetailId]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var addNote = function addNote() {\n    dispatch(showModal({\n      component: 'ADD_LOSS_NOTES',\n      props: {\n        title: utils.string.t('claims.notes.addNote'),\n        fullWidth: true,\n        maxWidth: 'sm',\n        disableAutoFocus: true,\n        componentProps: {\n          lossObj: lossObj,\n          processTypeData: processTypeData\n        }\n      }\n    }));\n  };\n\n  var editNote = function editNote(note) {\n    dispatch(showModal({\n      component: 'EDIT_LOSS_NOTES_ROW',\n      props: {\n        title: utils.string.t('claims.notes.editNote'),\n        fullWidth: true,\n        hideCompOnBlur: false,\n        maxWidth: 'sm',\n        disableAutoFocus: true,\n        componentProps: {\n          note: note\n        }\n      }\n    }));\n  };\n\n  var searchSubmit = function searchSubmit(_ref2) {\n    var search = _ref2.search;\n    setResetKey(new Date().getTime());\n    reset();\n    setSearchText(search);\n    dispatch(getClaimNotes({\n      caseIncidentID: lossCaseIncidentData === null || lossCaseIncidentData === void 0 ? void 0 : lossCaseIncidentData.caseIncidentID,\n      query: search\n    }));\n  };\n\n  var handleSearchFilter = function handleSearchFilter(_ref3) {\n    var filters = _ref3.filters;\n    dispatch(getClaimNotes({\n      caseIncidentID: lossCaseIncidentData === null || lossCaseIncidentData === void 0 ? void 0 : lossCaseIncidentData.caseIncidentID,\n      query: searchText,\n      filters: filters\n    }));\n  };\n\n  var resetSubmit = function resetSubmit() {\n    dispatch(getClaimNotes({\n      caseIncidentID: lossCaseIncidentData === null || lossCaseIncidentData === void 0 ? void 0 : lossCaseIncidentData.caseIncidentID,\n      filters: {}\n    }));\n    reset();\n  };\n\n  var sortColumn = function sortColumn(by, dir) {\n    dispatch(getClaimNotes({\n      caseIncidentID: lossCaseIncidentData === null || lossCaseIncidentData === void 0 ? void 0 : lossCaseIncidentData.caseIncidentID,\n      sortBy: by,\n      direction: dir,\n      query: searchText\n    }));\n  };\n\n  var changePage = function changePage(newPage) {\n    dispatch(getClaimNotes({\n      caseIncidentID: lossCaseIncidentData === null || lossCaseIncidentData === void 0 ? void 0 : lossCaseIncidentData.caseIncidentID,\n      page: newPage,\n      query: searchText\n    }));\n  };\n\n  var changeRowsPerPage = function changeRowsPerPage(rowsPerPage) {\n    dispatch(getClaimNotes({\n      caseIncidentID: lossCaseIncidentData === null || lossCaseIncidentData === void 0 ? void 0 : lossCaseIncidentData.caseIncidentID,\n      size: rowsPerPage,\n      query: searchText\n    }));\n  };\n\n  var cols = [{\n    id: 'createdDate',\n    sort: {\n      type: 'date',\n      direction: 'desc'\n    },\n    visible: true,\n    label: utils.string.t('claims.notes.columns.dateCreated')\n  }, {\n    id: 'createdBy',\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true,\n    label: utils.string.t('claims.notes.columns.createdBy')\n  }, {\n    id: 'notesDescription',\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true,\n    label: utils.string.t('claims.notes.columns.detail')\n  }, {\n    id: 'updatedDate',\n    sort: {\n      type: 'date',\n      direction: 'asc'\n    },\n    visible: true,\n    label: utils.string.t('claims.notes.columns.dateUpdated')\n  }, {\n    id: 'updatedBy',\n    sort: {\n      type: 'lexical',\n      direction: 'asc'\n    },\n    visible: true,\n    label: utils.string.t('claims.notes.columns.updatedBy')\n  }, {\n    id: 'menu',\n    menu: true,\n    visible: true\n  }];\n  var dateFields = [{\n    name: 'createdDate',\n    type: 'datepicker',\n    value: null\n  }, {\n    name: 'updatedDate',\n    type: 'datepicker',\n    value: null\n  }];\n  var defaultValues = utils.form.getInitialValues(dateFields);\n\n  var _useForm = useForm({\n    defaultValues: defaultValues\n  }),\n      control = _useForm.control,\n      reset = _useForm.reset;\n\n  var filtersArray = [{\n    id: 'createdDate',\n    type: 'datepicker',\n    label: utils.string.t('claims.notes.tableFilters.dateCreated'),\n    value: '',\n    content: /*#__PURE__*/_jsxDEV(FormDate, _objectSpread(_objectSpread({\n      control: control\n    }, utils.form.getFieldProps(dateFields, 'createdDate')), {}, {\n      id: \"datepicker\",\n      label: '',\n      plainText: true,\n      plainTextIcon: true,\n      placeholder: utils.string.t('app.selectDate'),\n      muiComponentProps: {\n        fullWidth: false,\n        margin: 'dense'\n      },\n      muiPickerProps: {\n        clearable: false,\n        variant: 'inline',\n        format: 'DD-MM-YYYY'\n      }\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }, this)\n  }, {\n    id: 'createdBy',\n    type: 'multiSelect',\n    label: utils.string.t('claims.notes.columns.createdBy'),\n    value: [],\n    options: users === null || users === void 0 ? void 0 : users.createdBy,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"createdBy\",\n      search: true,\n      options: users === null || users === void 0 ? void 0 : users.createdBy\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 16\n    }, this)\n  }, {\n    id: 'updatedDate',\n    type: 'datepicker',\n    label: utils.string.t('claims.notes.tableFilters.lastUpdatedDate'),\n    value: '',\n    content: /*#__PURE__*/_jsxDEV(FormDate, _objectSpread(_objectSpread({\n      control: control\n    }, utils.form.getFieldProps(dateFields, 'updatedDate')), {}, {\n      id: \"datepicker\",\n      label: '',\n      plainText: true,\n      plainTextIcon: true,\n      placeholder: utils.string.t('app.selectDate'),\n      muiComponentProps: {\n        fullWidth: false,\n        margin: 'dense'\n      },\n      muiPickerProps: {\n        clearable: false,\n        variant: 'inline',\n        format: 'DD-MM-YYYY'\n      }\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 9\n    }, this)\n  }, {\n    id: 'updatedBy',\n    type: 'multiSelect',\n    label: utils.string.t('claims.notes.columns.updatedBy'),\n    value: [],\n    options: users === null || users === void 0 ? void 0 : users.updatedBy,\n    content: /*#__PURE__*/_jsxDEV(MultiSelect, {\n      id: \"updatedBy\",\n      search: true,\n      options: users === null || users === void 0 ? void 0 : users.updatedBy\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 16\n    }, this)\n  }];\n\n  var _useFlexiColumns = useFlexiColumns(cols),\n      columnsArray = _useFlexiColumns.columns,\n      columnProps = _useFlexiColumns.columnProps;\n\n  var _useSort = useSort(columnsArray, claimNotesSort, sortColumn),\n      colsSorted = _useSort.cols,\n      sort = _useSort.sort;\n\n  var pagination = usePagination(claimNotes, claimNotesPagination, changePage, changeRowsPerPage);\n  return /*#__PURE__*/_jsxDEV(LossNotesView, {\n    notes: claimNotes,\n    cols: colsSorted,\n    columnProps: columnProps,\n    filtersArray: filtersArray,\n    sort: sort,\n    pagination: pagination,\n    query: claimNotesQuery,\n    resetKey: resetKey,\n    handlers: {\n      addNote: addNote,\n      editNote: editNote,\n      searchSubmit: searchSubmit,\n      resetSubmit: resetSubmit,\n      handleSearchFilter: handleSearchFilter\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LossNotes, \"cJsOcqnsjH0EAN9YLbiOUtnpkxc=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useForm, useFlexiColumns, useSort, usePagination];\n});\n\n_c = LossNotes;\n\nvar _c;\n\n$RefreshReg$(_c, \"LossNotes\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/LossNotes/LossNotes.js"],"names":["React","useEffect","useState","useForm","PropTypes","useDispatch","useSelector","LossNotesView","MultiSelect","FormDate","getClaimNotes","getCaseIncidentDetails","resetClaimNotes","selectClaimNotes","selectClaimNotesFilters","selectClaimNotesQuery","selectClaimNotesPagination","selectClaimNotesSort","selectRefDataNewProcessType","selectCaseIncidentDetails","showModal","useFlexiColumns","usePagination","useSort","utils","CLAIM_LOSS_PROCESS_TYPE_NAME","LossNotes","propTypes","lossObj","object","isRequired","dispatch","lossDetailId","claimNotes","users","claimNotesQuery","claimNotesPagination","claimNotesSort","processTypes","lossCaseIncidentData","searchText","setSearchText","resetKey","setResetKey","processTypeData","find","item","processTypeDetails","processTypeId","processTypeID","referenceId","viewLoader","then","res","caseIncidentID","addNote","component","props","title","string","t","fullWidth","maxWidth","disableAutoFocus","componentProps","editNote","note","hideCompOnBlur","searchSubmit","search","Date","getTime","reset","query","handleSearchFilter","filters","resetSubmit","sortColumn","by","dir","sortBy","direction","changePage","newPage","page","changeRowsPerPage","rowsPerPage","size","cols","id","sort","type","visible","label","menu","dateFields","name","value","defaultValues","form","getInitialValues","control","filtersArray","content","getFieldProps","margin","clearable","variant","format","options","createdBy","updatedBy","columnsArray","columns","columnProps","colsSorted","pagination"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n// app\r\nimport LossNotesView from './LossNotes.view';\r\nimport { MultiSelect, FormDate } from 'components';\r\nimport {\r\n  getClaimNotes,\r\n  getCaseIncidentDetails,\r\n  resetClaimNotes,\r\n  selectClaimNotes,\r\n  selectClaimNotesFilters,\r\n  selectClaimNotesQuery,\r\n  selectClaimNotesPagination,\r\n  selectClaimNotesSort,\r\n  selectRefDataNewProcessType,\r\n  selectCaseIncidentDetails,\r\n  showModal,\r\n} from 'stores';\r\nimport { useFlexiColumns, usePagination, useSort } from 'hooks';\r\nimport * as utils from 'utils';\r\nimport {CLAIM_LOSS_PROCESS_TYPE_NAME} from 'consts';\r\n\r\nLossNotes.propTypes = {\r\n  lossObj: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default function LossNotes({ lossObj }) {\r\n  const dispatch = useDispatch();\r\n  const { lossDetailId } = lossObj;\r\n  const claimNotes = useSelector(selectClaimNotes);\r\n  const users = useSelector(selectClaimNotesFilters);\r\n  const claimNotesQuery = useSelector(selectClaimNotesQuery);\r\n  const claimNotesPagination = useSelector(selectClaimNotesPagination);\r\n  const claimNotesSort = useSelector(selectClaimNotesSort);\r\n  const processTypes = useSelector(selectRefDataNewProcessType);\r\n  const lossCaseIncidentData = useSelector(selectCaseIncidentDetails);\r\n\r\n  const [searchText, setSearchText] = useState('');\r\n  const [resetKey, setResetKey] = useState();\r\n  const processTypeData = processTypes?.find((item) => item?.processTypeDetails === CLAIM_LOSS_PROCESS_TYPE_NAME) || null;\r\n  \r\n  useEffect(() => {\r\n    if (lossDetailId && processTypeData) {\r\n      dispatch(getCaseIncidentDetails({ processTypeId: processTypeData?.processTypeID, referenceId: lossDetailId, viewLoader: false })).then((res)=>{\r\n        if(res){\r\n          dispatch(getClaimNotes({ caseIncidentID: res?.caseIncidentID }));\r\n        }\r\n      })\r\n    }\r\n\r\n    // cleanup\r\n    return () => {\r\n      dispatch(resetClaimNotes());\r\n    };\r\n  }, [lossDetailId]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const addNote = () => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'ADD_LOSS_NOTES',\r\n        props: {\r\n          title: utils.string.t('claims.notes.addNote'),\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          disableAutoFocus: true,\r\n          componentProps: { lossObj, processTypeData },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const editNote = (note) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'EDIT_LOSS_NOTES_ROW',\r\n        props: {\r\n          title: utils.string.t('claims.notes.editNote'),\r\n          fullWidth: true,\r\n          hideCompOnBlur: false,\r\n          maxWidth: 'sm',\r\n          disableAutoFocus: true,\r\n          componentProps: { note },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const searchSubmit = ({ search }) => {\r\n    setResetKey(new Date().getTime());\r\n    reset();\r\n    setSearchText(search);\r\n    dispatch(getClaimNotes({ caseIncidentID: lossCaseIncidentData?.caseIncidentID, query: search }));\r\n  };\r\n\r\n  const handleSearchFilter = ({ filters }) => {\r\n    dispatch(getClaimNotes({ caseIncidentID: lossCaseIncidentData?.caseIncidentID, query: searchText, filters }));\r\n  };\r\n\r\n  const resetSubmit = () => {\r\n    dispatch(getClaimNotes({ caseIncidentID: lossCaseIncidentData?.caseIncidentID, filters: {} }));\r\n    reset();\r\n  };\r\n\r\n  const sortColumn = (by, dir) => {\r\n    dispatch(getClaimNotes({ caseIncidentID: lossCaseIncidentData?.caseIncidentID, sortBy: by, direction: dir, query: searchText }));\r\n  };\r\n\r\n  const changePage = (newPage) => {\r\n    dispatch(getClaimNotes({ caseIncidentID: lossCaseIncidentData?.caseIncidentID, page: newPage, query: searchText }));\r\n  };\r\n\r\n  const changeRowsPerPage = (rowsPerPage) => {\r\n    dispatch(getClaimNotes({ caseIncidentID: lossCaseIncidentData?.caseIncidentID, size: rowsPerPage, query: searchText }));\r\n  };\r\n\r\n  const cols = [\r\n    {\r\n      id: 'createdDate',\r\n      sort: { type: 'date', direction: 'desc' },\r\n      visible: true,\r\n      label: utils.string.t('claims.notes.columns.dateCreated'),\r\n    },\r\n    {\r\n      id: 'createdBy',\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: true,\r\n      label: utils.string.t('claims.notes.columns.createdBy'),\r\n    },\r\n    {\r\n      id: 'notesDescription',\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: true,\r\n      label: utils.string.t('claims.notes.columns.detail'),\r\n    },\r\n    {\r\n      id: 'updatedDate',\r\n      sort: { type: 'date', direction: 'asc' },\r\n      visible: true,\r\n      label: utils.string.t('claims.notes.columns.dateUpdated'),\r\n    },\r\n    {\r\n      id: 'updatedBy',\r\n      sort: { type: 'lexical', direction: 'asc' },\r\n      visible: true,\r\n      label: utils.string.t('claims.notes.columns.updatedBy'),\r\n    },\r\n    { id: 'menu', menu: true, visible: true },\r\n  ];\r\n\r\n  const dateFields = [\r\n    {\r\n      name: 'createdDate',\r\n      type: 'datepicker',\r\n      value: null,\r\n    },\r\n    {\r\n      name: 'updatedDate',\r\n      type: 'datepicker',\r\n      value: null,\r\n    },\r\n  ];\r\n\r\n  const defaultValues = utils.form.getInitialValues(dateFields);\r\n  const { control, reset } = useForm({ defaultValues });\r\n\r\n  const filtersArray = [\r\n    {\r\n      id: 'createdDate',\r\n      type: 'datepicker',\r\n      label: utils.string.t('claims.notes.tableFilters.dateCreated'),\r\n      value: '',\r\n      content: (\r\n        <FormDate\r\n          control={control}\r\n          {...utils.form.getFieldProps(dateFields, 'createdDate')}\r\n          id=\"datepicker\"\r\n          label={''}\r\n          plainText\r\n          plainTextIcon\r\n          placeholder={utils.string.t('app.selectDate')}\r\n          muiComponentProps={{\r\n            fullWidth: false,\r\n            margin: 'dense',\r\n          }}\r\n          muiPickerProps={{\r\n            clearable: false,\r\n            variant: 'inline',\r\n            format: 'DD-MM-YYYY',\r\n          }}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      id: 'createdBy',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('claims.notes.columns.createdBy'),\r\n      value: [],\r\n      options: users?.createdBy,\r\n      content: <MultiSelect id=\"createdBy\" search options={users?.createdBy} />,\r\n    },\r\n    {\r\n      id: 'updatedDate',\r\n      type: 'datepicker',\r\n      label: utils.string.t('claims.notes.tableFilters.lastUpdatedDate'),\r\n      value: '',\r\n      content: (\r\n        <FormDate\r\n          control={control}\r\n          {...utils.form.getFieldProps(dateFields, 'updatedDate')}\r\n          id=\"datepicker\"\r\n          label={''}\r\n          plainText\r\n          plainTextIcon\r\n          placeholder={utils.string.t('app.selectDate')}\r\n          muiComponentProps={{\r\n            fullWidth: false,\r\n            margin: 'dense',\r\n          }}\r\n          muiPickerProps={{\r\n            clearable: false,\r\n            variant: 'inline',\r\n            format: 'DD-MM-YYYY',\r\n          }}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      id: 'updatedBy',\r\n      type: 'multiSelect',\r\n      label: utils.string.t('claims.notes.columns.updatedBy'),\r\n      value: [],\r\n      options: users?.updatedBy,\r\n      content: <MultiSelect id=\"updatedBy\" search options={users?.updatedBy} />,\r\n    },\r\n  ];\r\n\r\n  const { columns: columnsArray, columnProps } = useFlexiColumns(cols);\r\n  const { cols: colsSorted, sort } = useSort(columnsArray, claimNotesSort, sortColumn);\r\n  const pagination = usePagination(claimNotes, claimNotesPagination, changePage, changeRowsPerPage);\r\n\r\n  return (\r\n    <LossNotesView\r\n      notes={claimNotes}\r\n      cols={colsSorted}\r\n      columnProps={columnProps}\r\n      filtersArray={filtersArray}\r\n      sort={sort}\r\n      pagination={pagination}\r\n      query={claimNotesQuery}\r\n      resetKey={resetKey}\r\n      handlers={{\r\n        addNote,\r\n        editNote,\r\n        searchSubmit,\r\n        resetSubmit,\r\n        handleSearchFilter,\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}