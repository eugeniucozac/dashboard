{"ast":null,"code":"import _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as utils from 'utils';\nimport { authLogout, getReferenceDataXbInstanceDepartments } from 'stores';\nexport var searchDepartmentsByXbInstance = function searchDepartmentsByXbInstance(xbInstance) {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/fileUpload.actions.searchDepartmentsByXbInstance'\n    };\n    dispatch(searchDepartmentsByXbInstanceRequest(xbInstance));\n\n    if (!xbInstance || !xbInstance.id) {\n      dispatch(searchDepartmentsByXbInstanceFailure(_objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'Missing XB Instance ID param'\n      })));\n      return;\n    }\n\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.dmsService,\n      path: \"data/departments/\".concat(xbInstance.id)\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (json) {\n      dispatch(getReferenceDataXbInstanceDepartments(xbInstance.id, json.data));\n      dispatch(searchDepartmentsByXbInstanceSuccess(xbInstance.id, json.data));\n      return json.data;\n    }).catch(function (err) {\n      utils.api.handleError(err, _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API fetch error (fileUpload.searchDepartmentsByXbInstance)'\n      }));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(searchDepartmentsByXbInstanceFailure(err));\n      return err;\n    });\n  };\n};\nexport var searchDepartmentsByXbInstanceRequest = function searchDepartmentsByXbInstanceRequest(xbInstance) {\n  return {\n    type: 'FILE_UPLOAD_SEARCH_DEPARTMENTS_BY_XBINSTANCE_REQUEST',\n    payload: xbInstance\n  };\n};\nexport var searchDepartmentsByXbInstanceSuccess = function searchDepartmentsByXbInstanceSuccess(xbInstanceId, responseData) {\n  return {\n    type: 'FILE_UPLOAD_SEARCH_DEPARTMENTS_BY_XBINSTANCE_SUCCESS',\n    payload: {\n      id: xbInstanceId,\n      departments: responseData\n    }\n  };\n};\nexport var searchDepartmentsByXbInstanceFailure = function searchDepartmentsByXbInstanceFailure(error) {\n  return {\n    type: 'FILE_UPLOAD_SEARCH_DEPARTMENTS_BY_XBINSTANCE_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/fileUpload/fileUpload.actions.searchDepartmentsByXbInstance.js"],"names":["utils","authLogout","getReferenceDataXbInstanceDepartments","searchDepartmentsByXbInstance","xbInstance","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","searchDepartmentsByXbInstanceRequest","id","searchDepartmentsByXbInstanceFailure","message","api","get","token","accessToken","dmsService","path","then","response","handleResponse","json","handleNewData","data","searchDepartmentsByXbInstanceSuccess","catch","err","handleError","handleUnauthorized","type","payload","xbInstanceId","responseData","departments","error"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,EAAqBC,qCAArB,QAAkE,QAAlE;AAEA,OAAO,IAAMC,6BAA6B,GAAG,SAAhCA,6BAAgC,CAACC,UAAD;AAAA,SAAgB,UAACC,QAAD,EAAWC,QAAX,EAAwB;AACnF;AADmF,oBAE5BA,QAAQ,EAFoB;AAAA,QAEpEC,IAFoE,aAE3EC,IAF2E,CAEpED,IAFoE;AAAA,QAE3CE,QAF2C,aAE7DC,MAF6D,CAEnDC,IAFmD,CAE3CF,QAF2C;;AAInF,QAAMG,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE;AADa,KAArB;AAIAR,IAAAA,QAAQ,CAACS,oCAAoC,CAACV,UAAD,CAArC,CAAR;;AAEA,QAAI,CAACA,UAAD,IAAe,CAACA,UAAU,CAACW,EAA/B,EAAmC;AACjCV,MAAAA,QAAQ,CAACW,oCAAoC,iCAAMJ,YAAN;AAAoBK,QAAAA,OAAO,EAAE;AAA7B,SAArC,CAAR;AACA;AACD;;AAED,WAAOjB,KAAK,CAACkB,GAAN,CACJC,GADI,CACA;AACHC,MAAAA,KAAK,EAAEb,IAAI,CAACc,WADT;AAEHZ,MAAAA,QAAQ,EAAEA,QAAQ,CAACa,UAFhB;AAGHC,MAAAA,IAAI,6BAAsBnB,UAAU,CAACW,EAAjC;AAHD,KADA,EAMJS,IANI,CAMC,UAACC,QAAD;AAAA,aAAczB,KAAK,CAACkB,GAAN,CAAUQ,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAND,EAOJD,IAPI,CAOC,UAACG,IAAD;AAAA,aAAU3B,KAAK,CAACkB,GAAN,CAAUU,aAAV,CAAwBD,IAAxB,CAAV;AAAA,KAPD,EAQJH,IARI,CAQC,UAACG,IAAD,EAAU;AACdtB,MAAAA,QAAQ,CAACH,qCAAqC,CAACE,UAAU,CAACW,EAAZ,EAAgBY,IAAI,CAACE,IAArB,CAAtC,CAAR;AACAxB,MAAAA,QAAQ,CAACyB,oCAAoC,CAAC1B,UAAU,CAACW,EAAZ,EAAgBY,IAAI,CAACE,IAArB,CAArC,CAAR;AACA,aAAOF,IAAI,CAACE,IAAZ;AACD,KAZI,EAaJE,KAbI,CAaE,UAACC,GAAD,EAAS;AACdhC,MAAAA,KAAK,CAACkB,GAAN,CAAUe,WAAV,CAAsBD,GAAtB,kCAAgCpB,YAAhC;AAA8CK,QAAAA,OAAO,EAAE;AAAvD;AACAjB,MAAAA,KAAK,CAACkB,GAAN,CAAUgB,kBAAV,CAA6BF,GAA7B,EAAkC3B,QAAlC,EAA4CJ,UAA5C;AACAI,MAAAA,QAAQ,CAACW,oCAAoC,CAACgB,GAAD,CAArC,CAAR;AACA,aAAOA,GAAP;AACD,KAlBI,CAAP;AAmBD,GAlC4C;AAAA,CAAtC;AAoCP,OAAO,IAAMlB,oCAAoC,GAAG,SAAvCA,oCAAuC,CAACV,UAAD,EAAgB;AAClE,SAAO;AACL+B,IAAAA,IAAI,EAAE,sDADD;AAELC,IAAAA,OAAO,EAAEhC;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAM0B,oCAAoC,GAAG,SAAvCA,oCAAuC,CAACO,YAAD,EAAeC,YAAf,EAAgC;AAClF,SAAO;AACLH,IAAAA,IAAI,EAAE,sDADD;AAELC,IAAAA,OAAO,EAAE;AAAErB,MAAAA,EAAE,EAAEsB,YAAN;AAAoBE,MAAAA,WAAW,EAAED;AAAjC;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMtB,oCAAoC,GAAG,SAAvCA,oCAAuC,CAACwB,KAAD,EAAW;AAC7D,SAAO;AACLL,IAAAA,IAAI,EAAE,sDADD;AAELC,IAAAA,OAAO,EAAEI;AAFJ,GAAP;AAID,CALM","sourcesContent":["import * as utils from 'utils';\r\nimport { authLogout, getReferenceDataXbInstanceDepartments } from 'stores';\r\n\r\nexport const searchDepartmentsByXbInstance = (xbInstance) => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: {auth}, config: { vars: { endpoint }}} = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/fileUpload.actions.searchDepartmentsByXbInstance',\r\n  };\r\n\r\n  dispatch(searchDepartmentsByXbInstanceRequest(xbInstance));\r\n\r\n  if (!xbInstance || !xbInstance.id) {\r\n    dispatch(searchDepartmentsByXbInstanceFailure({ ...defaultError, message: 'Missing XB Instance ID param' }));\r\n    return;\r\n  }\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.dmsService,\r\n      path: `data/departments/${xbInstance.id}`,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((json) => {\r\n      dispatch(getReferenceDataXbInstanceDepartments(xbInstance.id, json.data));\r\n      dispatch(searchDepartmentsByXbInstanceSuccess(xbInstance.id, json.data));\r\n      return json.data;\r\n    })\r\n    .catch((err) => {\r\n      utils.api.handleError(err, { ...defaultError, message: 'API fetch error (fileUpload.searchDepartmentsByXbInstance)' });\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(searchDepartmentsByXbInstanceFailure(err));\r\n      return err;\r\n    });\r\n};\r\n\r\nexport const searchDepartmentsByXbInstanceRequest = (xbInstance) => {\r\n  return {\r\n    type: 'FILE_UPLOAD_SEARCH_DEPARTMENTS_BY_XBINSTANCE_REQUEST',\r\n    payload: xbInstance,\r\n  };\r\n};\r\n\r\nexport const searchDepartmentsByXbInstanceSuccess = (xbInstanceId, responseData) => {\r\n  return {\r\n    type: 'FILE_UPLOAD_SEARCH_DEPARTMENTS_BY_XBINSTANCE_SUCCESS',\r\n    payload: { id: xbInstanceId, departments: responseData },\r\n  };\r\n};\r\n\r\nexport const searchDepartmentsByXbInstanceFailure = (error) => {\r\n  return {\r\n    type: 'FILE_UPLOAD_SEARCH_DEPARTMENTS_BY_XBINSTANCE_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}