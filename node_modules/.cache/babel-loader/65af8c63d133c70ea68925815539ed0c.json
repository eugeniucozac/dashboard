{"ast":null,"code":"var _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\components\\\\HeaderNotifications\\\\HeaderNotifications.view.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment'; // app\n\nimport styles from './HeaderNotifications.styles';\nimport { Avatar, Link, Warning, Button, InfiniteScroll } from 'components';\nimport { useMedia } from 'hooks';\nimport * as utils from 'utils'; // mui\n\nimport { makeStyles, List, ListItem, Divider, ListItemText, ListItemAvatar, Typography, Box } from '@material-ui/core';\nimport SmsFailedIcon from '@material-ui/icons/SmsFailed';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport ScheduleIcon from '@material-ui/icons/Schedule';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nHeaderNotificationsView.propTypes = {\n  notifications: PropTypes.array.isRequired,\n  notificationsError: PropTypes.string,\n  handlers: PropTypes.shape({\n    notificationClick: PropTypes.func.isRequired,\n    clearAllNotifications: PropTypes.func.isRequired,\n    clearNotification: PropTypes.func.isRequired\n  })\n};\nexport default function HeaderNotificationsView(_ref) {\n  _s();\n\n  var _this = this;\n\n  var notifications = _ref.notifications,\n      notificationsError = _ref.notificationsError,\n      handlers = _ref.handlers;\n  var media = useMedia();\n  var classes = makeStyles(styles, {\n    name: 'HeaderNotifications'\n  })({\n    isMobile: media.mobile\n  });\n\n  var renderNotificationComponent = function renderNotificationComponent(index) {\n    var isToday = moment(notifications[index].createdDate).isSame(utils.date.today(), 'day');\n    return /*#__PURE__*/_jsxDEV(List, {\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(ListItem, {\n          alignItems: \"flex-start\",\n          onClick: function onClick() {\n            return handlers.notificationClick(notifications[index]);\n          },\n          children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n            children: /*#__PURE__*/_jsxDEV(Avatar, {\n              avatarClasses: classes.messageAvatar,\n              size: 60,\n              border: false,\n              variant: 'circle',\n              icon: SmsFailedIcon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(ListItemText, {\n            primary: /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(Box, {\n                display: \"flex\",\n                alignItems: \"center\",\n                className: classes.expiryDateContainer,\n                children: [/*#__PURE__*/_jsxDEV(Box, {\n                  className: classes.notificationHeaderSmallLabel,\n                  children: /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"body2\",\n                    children: /*#__PURE__*/_jsxDEV(ScheduleIcon, {\n                      className: classes.notificationDueDateIcon\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 47,\n                      columnNumber: 25\n                    }, _this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 46,\n                    columnNumber: 23\n                  }, _this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 45,\n                  columnNumber: 21\n                }, _this), /*#__PURE__*/_jsxDEV(Box, {\n                  className: classes.expiryDate,\n                  children: utils.string.t('format.date', {\n                    value: {\n                      date: notifications[index].expiryDate\n                    }\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 50,\n                  columnNumber: 21\n                }, _this), /*#__PURE__*/_jsxDEV(Box, {\n                  className: classes.clearNotification,\n                  children: /*#__PURE__*/_jsxDEV(Button, {\n                    icon: CancelIcon,\n                    variant: \"text\",\n                    size: \"xsmall\",\n                    onClick: function onClick(event) {\n                      return handlers.clearNotification(event, notifications[index]);\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 56,\n                    columnNumber: 23\n                  }, _this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 55,\n                  columnNumber: 21\n                }, _this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 44,\n                columnNumber: 19\n              }, _this), /*#__PURE__*/_jsxDEV(Box, {\n                className: classes.description,\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  children: notifications[index].description.replace(/<\\/?.+?>/gi, '')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 65,\n                  columnNumber: 21\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 19\n              }, _this)]\n            }, void 0, true),\n            secondary: isToday ? utils.string.t('time.today') : utils.string.t('globalNotification.receivedDate', {\n              date: notifications[index].createdDate\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(Divider, {\n          variant: \"inset\",\n          component: \"li\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, _this)]\n      }, notifications[index].userNotificationId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, _this);\n  };\n\n  var renderContainerHeightBasedOnLength = function renderContainerHeightBasedOnLength(length) {\n    var containerHeight;\n\n    switch (length) {\n      case 1:\n        containerHeight = 215;\n        break;\n\n      case 2:\n        containerHeight = 345;\n        break;\n\n      case 3:\n        containerHeight = 475;\n        break;\n\n      default:\n        containerHeight = 530;\n        break;\n    }\n\n    return containerHeight;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: utils.generic.isValidArray(notifications, true) ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        className: classes.clearAll,\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          text: utils.string.t('app.clearAll'),\n          color: 'secondary',\n          handleClick: function handleClick() {\n            handlers.clearAllNotifications();\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n        itemCount: notifications === null || notifications === void 0 ? void 0 : notifications.length,\n        content: function content(index) {\n          return renderNotificationComponent(index);\n        },\n        containerHeight: renderContainerHeightBasedOnLength(notifications === null || notifications === void 0 ? void 0 : notifications.length),\n        rowHeight: 60\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(Box, {\n      p: 10,\n      display: 'flex',\n      justifyContent: 'center',\n      children: !notificationsError ? /*#__PURE__*/_jsxDEV(Warning, {\n        text: utils.string.t('app.noNotifications'),\n        type: \"info\",\n        align: \"left\",\n        size: \"small\",\n        icon: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(Warning, {\n        text: notificationsError,\n        type: \"error\",\n        align: \"left\",\n        size: \"small\",\n        icon: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(HeaderNotificationsView, \"Inu6KbwmgyiVqUeOTSx0E+dAczw=\", false, function () {\n  return [useMedia];\n});\n\n_c = HeaderNotificationsView;\n\nvar _c;\n\n$RefreshReg$(_c, \"HeaderNotificationsView\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/HeaderNotifications/HeaderNotifications.view.js"],"names":["React","PropTypes","moment","styles","Avatar","Link","Warning","Button","InfiniteScroll","useMedia","utils","makeStyles","List","ListItem","Divider","ListItemText","ListItemAvatar","Typography","Box","SmsFailedIcon","CancelIcon","ScheduleIcon","HeaderNotificationsView","propTypes","notifications","array","isRequired","notificationsError","string","handlers","shape","notificationClick","func","clearAllNotifications","clearNotification","media","classes","name","isMobile","mobile","renderNotificationComponent","index","isToday","createdDate","isSame","date","today","messageAvatar","expiryDateContainer","notificationHeaderSmallLabel","notificationDueDateIcon","expiryDate","t","value","event","description","replace","userNotificationId","renderContainerHeightBasedOnLength","length","containerHeight","generic","isValidArray","clearAll"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport moment from 'moment';\r\n\r\n// app\r\nimport styles from './HeaderNotifications.styles';\r\nimport { Avatar, Link, Warning, Button, InfiniteScroll } from 'components';\r\nimport { useMedia } from 'hooks';\r\nimport * as utils from 'utils';\r\n\r\n// mui\r\nimport { makeStyles, List, ListItem, Divider, ListItemText, ListItemAvatar, Typography, Box } from '@material-ui/core';\r\nimport SmsFailedIcon from '@material-ui/icons/SmsFailed';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport ScheduleIcon from '@material-ui/icons/Schedule';\r\n\r\nHeaderNotificationsView.propTypes = {\r\n  notifications: PropTypes.array.isRequired,\r\n  notificationsError: PropTypes.string,\r\n  handlers: PropTypes.shape({\r\n    notificationClick: PropTypes.func.isRequired,\r\n    clearAllNotifications: PropTypes.func.isRequired,\r\n    clearNotification: PropTypes.func.isRequired,\r\n  }),\r\n};\r\n\r\nexport default function HeaderNotificationsView({ notifications, notificationsError, handlers }) {\r\n  const media = useMedia();\r\n  const classes = makeStyles(styles, { name: 'HeaderNotifications' })({ isMobile: media.mobile });\r\n\r\n  const renderNotificationComponent = (index) => {\r\n    const isToday = moment(notifications[index].createdDate).isSame(utils.date.today(), 'day');\r\n\r\n    return (\r\n      <List>\r\n        <Box key={notifications[index].userNotificationId}>\r\n          <ListItem alignItems=\"flex-start\" onClick={() => handlers.notificationClick(notifications[index])}>\r\n            <ListItemAvatar>\r\n              <Avatar avatarClasses={classes.messageAvatar} size={60} border={false} variant={'circle'} icon={SmsFailedIcon} />\r\n            </ListItemAvatar>\r\n            <ListItemText\r\n              primary={\r\n                <>\r\n                  <Box display=\"flex\" alignItems=\"center\" className={classes.expiryDateContainer}>\r\n                    <Box className={classes.notificationHeaderSmallLabel}>\r\n                      <Typography variant=\"body2\">\r\n                        <ScheduleIcon className={classes.notificationDueDateIcon} />\r\n                      </Typography>\r\n                    </Box>\r\n                    <Box className={classes.expiryDate}>\r\n                      {utils.string.t('format.date', {\r\n                        value: { date: notifications[index].expiryDate },\r\n                      })}\r\n                    </Box>\r\n                    <Box className={classes.clearNotification}>\r\n                      <Button\r\n                        icon={CancelIcon}\r\n                        variant=\"text\"\r\n                        size=\"xsmall\"\r\n                        onClick={(event) => handlers.clearNotification(event, notifications[index])}\r\n                      />\r\n                    </Box>\r\n                  </Box>\r\n                  <Box className={classes.description}>\r\n                    <Typography variant=\"body2\">{notifications[index].description.replace(/<\\/?.+?>/gi, '')}</Typography>\r\n                  </Box>\r\n                </>\r\n              }\r\n              secondary={\r\n                isToday\r\n                  ? utils.string.t('time.today')\r\n                  : utils.string.t('globalNotification.receivedDate', {\r\n                      date: notifications[index].createdDate,\r\n                    })\r\n              }\r\n            />\r\n          </ListItem>\r\n          <Divider variant=\"inset\" component=\"li\" />\r\n        </Box>\r\n      </List>\r\n    );\r\n  };\r\n\r\n  const renderContainerHeightBasedOnLength = (length) => {\r\n    let containerHeight;\r\n    switch (length) {\r\n      case 1:\r\n        containerHeight = 215;\r\n        break;\r\n      case 2:\r\n        containerHeight = 345;\r\n        break;\r\n      case 3:\r\n        containerHeight = 475;\r\n        break;\r\n      default:\r\n        containerHeight = 530;\r\n        break;\r\n    }\r\n    return containerHeight;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {utils.generic.isValidArray(notifications, true) ? (\r\n        <>\r\n          <Box className={classes.clearAll}>\r\n            <Link\r\n              text={utils.string.t('app.clearAll')}\r\n              color={'secondary'}\r\n              handleClick={() => {\r\n                handlers.clearAllNotifications();\r\n              }}\r\n            />\r\n          </Box>\r\n          <InfiniteScroll\r\n            itemCount={notifications?.length}\r\n            content={(index) => renderNotificationComponent(index)}\r\n            containerHeight={renderContainerHeightBasedOnLength(notifications?.length)}\r\n            rowHeight={60}\r\n          />\r\n        </>\r\n      ) : (\r\n        <Box p={10} display={'flex'} justifyContent={'center'}>\r\n          {!notificationsError ? (\r\n            <Warning text={utils.string.t('app.noNotifications')} type=\"info\" align=\"left\" size=\"small\" icon />\r\n          ) : (\r\n            <Warning text={notificationsError} type=\"error\" align=\"left\" size=\"small\" icon />\r\n          )}\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}