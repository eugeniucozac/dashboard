{"ast":null,"code":"import \"core-js/modules/es.array.includes\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\components\\\\Auth\\\\Auth.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport auth0Js from 'auth0-js';\nimport get from 'lodash/get'; // app\n\nimport { AuthView } from './Auth.view';\nimport { reuseExistingToken, renewAuthentication, parseAuth0Hash, authLogin, authLogout, selectUserAuthenticated, selectUserAuthInProgress } from 'stores';\nimport * as utils from 'utils';\nimport config from 'config';\nimport { BRAND_BISHOPSGATE } from 'consts'; // context\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var AuthContext = /*#__PURE__*/React.createContext({});\nexport default function Auth(_ref) {\n  _s();\n\n  var children = _ref.children;\n  var dispatch = useDispatch();\n  var history = useHistory();\n  var configVars = useSelector(function (state) {\n    return get(state, 'config.vars', {});\n  });\n  var uiBrand = useSelector(function (state) {\n    return get(state, 'ui.brand');\n  });\n  var authenticated = useSelector(selectUserAuthenticated);\n  var authInProgress = useSelector(selectUserAuthInProgress);\n  var auth0 = useMemo(function () {\n    return new auth0Js.WebAuth({\n      domain: config.auth.domain,\n      clientID: uiBrand === BRAND_BISHOPSGATE ? config.auth.bishopsgate.clientID : config.auth.clientID,\n      audience: get(configVars, 'auth0.audience'),\n      redirectUri: config.auth.redirectAuthentication,\n      responseType: config.auth.responseType,\n      scope: config.auth.scope,\n      leeway: config.auth.leeway\n    });\n  }, [] // eslint-disable-line react-hooks/exhaustive-deps\n  ); // check auth status and token expiry\n  // if token is valid --> re-use that token\n  // if token has expired --> renew the authentication\n  // if there's no token --> redirect to /login\n\n  useEffect(function () {\n    var hasToken = utils.user.hasToken();\n    var isTokenValid = utils.user.isTokenValid();\n    var hasValidToken = hasToken && isTokenValid;\n    var hasOldInvalidToken = hasToken && !isTokenValid;\n    var unprotectedRoutes = [config.routes.login.root, config.routes.logout.root, config.routes.authentication.root];\n    var isProtectedRoute = !unprotectedRoutes.includes(history.location.pathname); // if not logged in and trying to access any page other than login, logout or authentication\n    // save the requested path to session storage\n    // this will be used to redirect after a successful Auth0 login\n\n    if (!authenticated && !hasToken && isProtectedRoute) {\n      sessionStorage.setItem('edge-redirect', history.location.pathname);\n    } // if the user still has a valid token, re-use it...\n\n\n    if (hasValidToken) {\n      dispatch(reuseExistingToken(history));\n    } // if the user has an old token but it's not valid anymore, renew it...\n    else if (hasOldInvalidToken) {\n        dispatch(renewAuthentication(auth0, history));\n      } // if there's no token at all, redirect to login...\n      else if (!hasToken) {\n          history.replace(config.routes.login.root);\n        }\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var handleLogin = function handleLogin() {\n    var theme = get(config, \"ui.brand[\".concat(uiBrand, \"]\") || {});\n    dispatch(authLogin(auth0, theme));\n  };\n\n  var handleLogout = function handleLogout() {\n    dispatch(authLogout(auth0));\n    history.push(config.routes.logout.root);\n  };\n\n  var handleCallback = function handleCallback(locationHash) {\n    var redirectUrl = sessionStorage.getItem('edge-redirect');\n    localStorage.removeItem('edge-auth');\n    sessionStorage.removeItem('edge-redirect');\n    dispatch(parseAuth0Hash(auth0, history, locationHash, redirectUrl));\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthView, {\n    isAuthenticated: authenticated,\n    isAuthInProgress: authInProgress,\n    handlers: {\n      login: handleLogin,\n      logout: handleLogout,\n      handleCallback: handleCallback\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Auth, \"s8fpqym7nbrNv+APAGlkgJv4YFo=\", false, function () {\n  return [useDispatch, useHistory, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Auth;\nAuth.displayName = \"Auth\";\nAuth.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"Auth\"\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\components\\\\Auth\\\\Auth.js\"] = {\n    name: \"Auth\",\n    docgenInfo: Auth.__docgenInfo,\n    path: \"src\\\\components\\\\Auth\\\\Auth.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Auth\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/Auth/Auth.js"],"names":["React","useEffect","useMemo","useDispatch","useSelector","useHistory","auth0Js","get","AuthView","reuseExistingToken","renewAuthentication","parseAuth0Hash","authLogin","authLogout","selectUserAuthenticated","selectUserAuthInProgress","utils","config","BRAND_BISHOPSGATE","AuthContext","createContext","Auth","children","dispatch","history","configVars","state","uiBrand","authenticated","authInProgress","auth0","WebAuth","domain","auth","clientID","bishopsgate","audience","redirectUri","redirectAuthentication","responseType","scope","leeway","hasToken","user","isTokenValid","hasValidToken","hasOldInvalidToken","unprotectedRoutes","routes","login","root","logout","authentication","isProtectedRoute","includes","location","pathname","sessionStorage","setItem","replace","handleLogin","theme","handleLogout","push","handleCallback","locationHash","redirectUrl","getItem","localStorage","removeItem"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport auth0Js from 'auth0-js';\r\nimport get from 'lodash/get';\r\n\r\n// app\r\nimport { AuthView } from './Auth.view';\r\nimport {\r\n  reuseExistingToken,\r\n  renewAuthentication,\r\n  parseAuth0Hash,\r\n  authLogin,\r\n  authLogout,\r\n  selectUserAuthenticated,\r\n  selectUserAuthInProgress,\r\n} from 'stores';\r\nimport * as utils from 'utils';\r\nimport config from 'config';\r\nimport { BRAND_BISHOPSGATE } from 'consts';\r\n// context\r\nexport const AuthContext = React.createContext({});\r\n\r\nexport default function Auth({ children }) {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const configVars = useSelector((state) => get(state, 'config.vars', {}));\r\n  const uiBrand = useSelector((state) => get(state, 'ui.brand'));\r\n  const authenticated = useSelector(selectUserAuthenticated);\r\n  const authInProgress = useSelector(selectUserAuthInProgress);\r\n\r\n  const auth0 = useMemo(\r\n    () =>\r\n      new auth0Js.WebAuth({\r\n        domain: config.auth.domain,\r\n        clientID: uiBrand === BRAND_BISHOPSGATE ? config.auth.bishopsgate.clientID : config.auth.clientID,\r\n        audience: get(configVars, 'auth0.audience'),\r\n        redirectUri: config.auth.redirectAuthentication,\r\n        responseType: config.auth.responseType,\r\n        scope: config.auth.scope,\r\n        leeway: config.auth.leeway,\r\n      }),\r\n    [] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  // check auth status and token expiry\r\n  // if token is valid --> re-use that token\r\n  // if token has expired --> renew the authentication\r\n  // if there's no token --> redirect to /login\r\n  useEffect(() => {\r\n    const hasToken = utils.user.hasToken();\r\n    const isTokenValid = utils.user.isTokenValid();\r\n    const hasValidToken = hasToken && isTokenValid;\r\n    const hasOldInvalidToken = hasToken && !isTokenValid;\r\n    const unprotectedRoutes = [config.routes.login.root, config.routes.logout.root, config.routes.authentication.root];\r\n    const isProtectedRoute = !unprotectedRoutes.includes(history.location.pathname);\r\n\r\n    // if not logged in and trying to access any page other than login, logout or authentication\r\n    // save the requested path to session storage\r\n    // this will be used to redirect after a successful Auth0 login\r\n    if (!authenticated && !hasToken && isProtectedRoute) {\r\n      sessionStorage.setItem('edge-redirect', history.location.pathname);\r\n    }\r\n\r\n    // if the user still has a valid token, re-use it...\r\n    if (hasValidToken) {\r\n      dispatch(reuseExistingToken(history));\r\n    }\r\n\r\n    // if the user has an old token but it's not valid anymore, renew it...\r\n    else if (hasOldInvalidToken) {\r\n      dispatch(renewAuthentication(auth0, history));\r\n    }\r\n\r\n    // if there's no token at all, redirect to login...\r\n    else if (!hasToken) {\r\n      history.replace(config.routes.login.root);\r\n    }\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const handleLogin = () => {\r\n    const theme = get(config, `ui.brand[${uiBrand}]` || {});\r\n\r\n    dispatch(authLogin(auth0, theme));\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    dispatch(authLogout(auth0));\r\n    history.push(config.routes.logout.root);\r\n  };\r\n\r\n  const handleCallback = (locationHash) => {\r\n    const redirectUrl = sessionStorage.getItem('edge-redirect');\r\n\r\n    localStorage.removeItem('edge-auth');\r\n    sessionStorage.removeItem('edge-redirect');\r\n    dispatch(parseAuth0Hash(auth0, history, locationHash, redirectUrl));\r\n  };\r\n\r\n  return (\r\n    <AuthView\r\n      isAuthenticated={authenticated}\r\n      isAuthInProgress={authInProgress}\r\n      handlers={{\r\n        login: handleLogin,\r\n        logout: handleLogout,\r\n        handleCallback: handleCallback,\r\n      }}\r\n      children={children}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}