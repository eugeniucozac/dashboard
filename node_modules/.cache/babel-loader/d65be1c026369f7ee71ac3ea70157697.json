{"ast":null,"code":"import \"core-js/modules/es.promise.finally\";\nimport _objectSpread from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as utils from 'utils';\nimport { addLoader, removeLoader, authLogout } from 'stores';\nexport var getFacilityTypes = function getFacilityTypes() {\n  return function (dispatch, getState) {\n    // prettier-ignore\n    var _getState = getState(),\n        auth = _getState.user.auth,\n        endpoint = _getState.config.vars.endpoint;\n\n    var defaultError = {\n      file: 'stores/processingInstructions.actions.getFacilityTypes'\n    };\n    dispatch(getFacilityTypesRequest());\n    dispatch(addLoader('getFacilityTypes'));\n    return utils.api.get({\n      token: auth.accessToken,\n      endpoint: endpoint.odsService,\n      path: \"referenceData/FacilityType\"\n    }).then(function (response) {\n      return utils.api.handleResponse(response);\n    }).then(function (json) {\n      return utils.api.handleNewData(json);\n    }).then(function (data) {\n      dispatch(getFacilityTypesSuccess(data.data.facilityType));\n      return data.data.facilityType;\n    })[\"catch\"](function (err) {\n      utils.api.handleError(err, _objectSpread(_objectSpread({}, defaultError), {}, {\n        message: 'API fetch error (processingInstructions.getFacilityTypes)'\n      }));\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\n      dispatch(getFacilityTypesFailure(err));\n      return err;\n    })[\"finally\"](function () {\n      dispatch(removeLoader('getFacilityTypes'));\n    });\n  };\n};\nexport var getFacilityTypesRequest = function getFacilityTypesRequest(payload) {\n  return {\n    type: 'PROCESSING_INSTRUCTIONS_GET_FACILITY_TYPES_REQUEST',\n    payload: payload\n  };\n};\nexport var getFacilityTypesSuccess = function getFacilityTypesSuccess(responseData) {\n  return {\n    type: 'PROCESSING_INSTRUCTIONS_GET_FACILITY_TYPES_SUCCESS',\n    payload: responseData\n  };\n};\nexport var getFacilityTypesFailure = function getFacilityTypesFailure(error) {\n  return {\n    type: 'PROCESSING_INSTRUCTIONS_GET_FACILITY_TYPES_FAILURE',\n    payload: error\n  };\n};","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/stores/processingInstructions/processingInstructions.actions.getFacilityTypes.js"],"names":["utils","addLoader","removeLoader","authLogout","getFacilityTypes","dispatch","getState","auth","user","endpoint","config","vars","defaultError","file","getFacilityTypesRequest","api","get","token","accessToken","odsService","path","then","response","handleResponse","json","handleNewData","data","getFacilityTypesSuccess","facilityType","err","handleError","message","handleUnauthorized","getFacilityTypesFailure","payload","type","responseData","error"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,EAAoBC,YAApB,EAAkCC,UAAlC,QAAoD,QAApD;AAEA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,SAAM,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC5D;AAD4D,oBAEHA,QAAQ,EAFL;AAAA,QAE5CC,IAF4C,aAEpDC,IAFoD,CAE5CD,IAF4C;AAAA,QAElBE,QAFkB,aAEpCC,MAFoC,CAE1BC,IAF0B,CAElBF,QAFkB;;AAI5D,QAAMG,YAAY,GAAG;AACnBC,MAAAA,IAAI,EAAE;AADa,KAArB;AAIAR,IAAAA,QAAQ,CAACS,uBAAuB,EAAxB,CAAR;AACAT,IAAAA,QAAQ,CAACJ,SAAS,CAAC,kBAAD,CAAV,CAAR;AAEA,WAAOD,KAAK,CAACe,GAAN,CACJC,GADI,CACA;AACHC,MAAAA,KAAK,EAAEV,IAAI,CAACW,WADT;AAEHT,MAAAA,QAAQ,EAAEA,QAAQ,CAACU,UAFhB;AAGHC,MAAAA,IAAI;AAHD,KADA,EAMJC,IANI,CAMC,UAACC,QAAD;AAAA,aAActB,KAAK,CAACe,GAAN,CAAUQ,cAAV,CAAyBD,QAAzB,CAAd;AAAA,KAND,EAOJD,IAPI,CAOC,UAACG,IAAD;AAAA,aAAUxB,KAAK,CAACe,GAAN,CAAUU,aAAV,CAAwBD,IAAxB,CAAV;AAAA,KAPD,EAQJH,IARI,CAQC,UAACK,IAAD,EAAU;AACdrB,MAAAA,QAAQ,CAACsB,uBAAuB,CAACD,IAAI,CAACA,IAAL,CAAUE,YAAX,CAAxB,CAAR;AACA,aAAOF,IAAI,CAACA,IAAL,CAAUE,YAAjB;AACD,KAXI,WAYE,UAACC,GAAD,EAAS;AACd7B,MAAAA,KAAK,CAACe,GAAN,CAAUe,WAAV,CAAsBD,GAAtB,kCAAgCjB,YAAhC;AAA8CmB,QAAAA,OAAO,EAAE;AAAvD;AACA/B,MAAAA,KAAK,CAACe,GAAN,CAAUiB,kBAAV,CAA6BH,GAA7B,EAAkCxB,QAAlC,EAA4CF,UAA5C;AACAE,MAAAA,QAAQ,CAAC4B,uBAAuB,CAACJ,GAAD,CAAxB,CAAR;AACA,aAAOA,GAAP;AACD,KAjBI,aAkBI,YAAM;AACbxB,MAAAA,QAAQ,CAACH,YAAY,CAAC,kBAAD,CAAb,CAAR;AACD,KApBI,CAAP;AAqBD,GAhC+B;AAAA,CAAzB;AAkCP,OAAO,IAAMY,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACoB,OAAD,EAAa;AAClD,SAAO;AACLC,IAAAA,IAAI,EAAE,oDADD;AAELD,IAAAA,OAAO,EAAPA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,IAAMP,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACS,YAAD,EAAkB;AACvD,SAAO;AACLD,IAAAA,IAAI,EAAE,oDADD;AAELD,IAAAA,OAAO,EAAEE;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMH,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACI,KAAD,EAAW;AAChD,SAAO;AACLF,IAAAA,IAAI,EAAE,oDADD;AAELD,IAAAA,OAAO,EAAEG;AAFJ,GAAP;AAID,CALM","sourcesContent":["import * as utils from 'utils';\r\nimport { addLoader, removeLoader, authLogout } from 'stores';\r\n\r\nexport const getFacilityTypes = () => (dispatch, getState) => {\r\n  // prettier-ignore\r\n  const { user: { auth }, config: { vars: { endpoint }}} = getState();\r\n\r\n  const defaultError = {\r\n    file: 'stores/processingInstructions.actions.getFacilityTypes',\r\n  };\r\n\r\n  dispatch(getFacilityTypesRequest());\r\n  dispatch(addLoader('getFacilityTypes'));\r\n\r\n  return utils.api\r\n    .get({\r\n      token: auth.accessToken,\r\n      endpoint: endpoint.odsService,\r\n      path: `referenceData/FacilityType`,\r\n    })\r\n    .then((response) => utils.api.handleResponse(response))\r\n    .then((json) => utils.api.handleNewData(json))\r\n    .then((data) => {\r\n      dispatch(getFacilityTypesSuccess(data.data.facilityType));\r\n      return data.data.facilityType;\r\n    })\r\n    .catch((err) => {\r\n      utils.api.handleError(err, { ...defaultError, message: 'API fetch error (processingInstructions.getFacilityTypes)' });\r\n      utils.api.handleUnauthorized(err, dispatch, authLogout);\r\n      dispatch(getFacilityTypesFailure(err));\r\n      return err;\r\n    })\r\n    .finally(() => {\r\n      dispatch(removeLoader('getFacilityTypes'));\r\n    });\r\n};\r\n\r\nexport const getFacilityTypesRequest = (payload) => {\r\n  return {\r\n    type: 'PROCESSING_INSTRUCTIONS_GET_FACILITY_TYPES_REQUEST',\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const getFacilityTypesSuccess = (responseData) => {\r\n  return {\r\n    type: 'PROCESSING_INSTRUCTIONS_GET_FACILITY_TYPES_SUCCESS',\r\n    payload: responseData,\r\n  };\r\n};\r\n\r\nexport const getFacilityTypesFailure = (error) => {\r\n  return {\r\n    type: 'PROCESSING_INSTRUCTIONS_GET_FACILITY_TYPES_FAILURE',\r\n    payload: error,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}