{"ast":null,"code":"import _slicedToArray from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\components\\\\HeaderNotifications\\\\HeaderNotifications.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router'; // app\n\nimport HeaderNotificationsView from './HeaderNotifications.view';\nimport { updateNotifications, deleteSingleNotification, deleteAllNotifications, enqueueNotification } from 'stores';\nimport * as constants from 'consts';\nimport config from 'config';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nHeaderNotifications.propTypes = {\n  notifications: PropTypes.array.isRequired,\n  notificationsError: PropTypes.string,\n  userId: PropTypes.number.isRequired,\n  handlers: PropTypes.shape({\n    onSuccessfulNotificationReadOrDelete: PropTypes.func.isRequired,\n    setOpenPopover: PropTypes.func.isRequired\n  }).isRequired\n};\nexport default function HeaderNotifications(_ref) {\n  _s();\n\n  var notifications = _ref.notifications,\n      notificationsError = _ref.notificationsError,\n      userId = _ref.userId,\n      handlers = _ref.handlers;\n  var dispatch = useDispatch();\n  var history = useHistory();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      notificationsList = _useState2[0],\n      setNotificationsList = _useState2[1];\n\n  useEffect(function () {\n    setNotificationsList(notifications);\n  }, [notifications]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var notificationClick = function notificationClick() {\n    var notificationObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var allowedToNavigate = notificationObj.allowedToNavigate,\n        refId = notificationObj.refId,\n        refType = notificationObj.refType,\n        source = notificationObj.source,\n        userNotificationId = notificationObj.userNotificationId;\n    var isValidNotification = Boolean(utils.generic.isValidObject(notificationObj) && refType && source && refId);\n    var isTaskPp = refType === constants.NOTIFICATIONS_REF_TYPE_TASK && source === constants.SOURCE_ID_PP;\n    var isTaskClaims = refType === constants.NOTIFICATIONS_REF_TYPE_TASK && source === constants.SOURCE_ID_CLAIMS;\n    var isRfiPp = refType === constants.NOTIFICATIONS_REF_TYPE_RFI && source === constants.SOURCE_ID_PP;\n    var isClientTab = refType === constants.NOTIFICATION_REF_TYPE_CLIENT && source === constants.SOURCE_ID_PP;\n\n    if (isValidNotification && allowedToNavigate) {\n      if (isTaskPp) {\n        history.push(\"\".concat(config.routes.premiumProcessing.root).concat(refId ? \"/\".concat(refId) : ''));\n      } else if (isTaskClaims) {\n        history.push(\"\".concat(config.routes.claimsProcessing.root).concat(refId ? \"/\".concat(refId) : ''));\n      } else if (isRfiPp || isClientTab) {\n        var taskId = refId.split('||')[0];\n        var rfiId = refId.split('||')[1];\n\n        if (taskId) {\n          history.push(\"\".concat(config.routes.premiumProcessing[\"case\"], \"/\").concat(taskId, \"/\").concat(rfiId ? \"\".concat(constants.PREMIUM_PROCESSING_TAB_RFI, \"/\").concat(rfiId) : \"\".concat(constants.PREMIUM_PROCESSING_TAB_ISSUE_DOCUMENTS, \"/\").concat(constants.PREMIUM_PROCESSING_TAB_CLIENT)));\n        }\n      }\n\n      dispatch(updateNotifications(userNotificationId, userId)).then(function (response) {\n        if ((response === null || response === void 0 ? void 0 : response.status) === constants.API_RESPONSE_OK) {\n          handlers.onSuccessfulNotificationReadOrDelete();\n        }\n      });\n      handlers.setOpenPopover(false);\n    }\n  };\n\n  var clearAllNotifications = function clearAllNotifications() {\n    dispatch(deleteAllNotifications(userId)).then(function (response) {\n      if ((response === null || response === void 0 ? void 0 : response.status) === constants.API_RESPONSE_OK) {\n        handlers.onSuccessfulNotificationReadOrDelete();\n        dispatch(enqueueNotification('globalNotification.deleteAllSuccess', 'success'));\n      }\n    });\n  };\n\n  var clearNotification = function clearNotification(event, notificationObj) {\n    event.stopPropagation();\n    var userNotificationId = notificationObj === null || notificationObj === void 0 ? void 0 : notificationObj.userNotificationId;\n    dispatch(deleteSingleNotification(userNotificationId, userId)).then(function (response) {\n      if ((response === null || response === void 0 ? void 0 : response.status) === constants.API_RESPONSE_OK) {\n        handlers.onSuccessfulNotificationReadOrDelete();\n        dispatch(enqueueNotification('globalNotification.deleteSuccess', 'success'));\n      }\n    });\n  }; // abort\n\n\n  if (!notifications) return null;\n  return /*#__PURE__*/_jsxDEV(HeaderNotificationsView, {\n    notifications: notificationsList,\n    notificationsError: notificationsError,\n    handlers: {\n      notificationClick: notificationClick,\n      clearNotification: clearNotification,\n      clearAllNotifications: clearAllNotifications\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n\n_s(HeaderNotifications, \"4OR/gVPES/TWYiZ0FsHpKgrnQaw=\", false, function () {\n  return [useDispatch, useHistory];\n});\n\n_c = HeaderNotifications;\nHeaderNotifications.displayName = \"HeaderNotifications\";\nHeaderNotifications.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"HeaderNotifications\",\n  \"props\": {\n    \"notifications\": {\n      \"type\": {\n        \"name\": \"array\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"notificationsError\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"userId\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"handlers\": {\n      \"type\": {\n        \"name\": \"shape\",\n        \"value\": {\n          \"onSuccessfulNotificationReadOrDelete\": {\n            \"name\": \"func\",\n            \"required\": true\n          },\n          \"setOpenPopover\": {\n            \"name\": \"func\",\n            \"required\": true\n          }\n        }\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src\\\\components\\\\HeaderNotifications\\\\HeaderNotifications.js\"] = {\n    name: \"HeaderNotifications\",\n    docgenInfo: HeaderNotifications.__docgenInfo,\n    path: \"src\\\\components\\\\HeaderNotifications\\\\HeaderNotifications.js\"\n  };\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"HeaderNotifications\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/components/HeaderNotifications/HeaderNotifications.js"],"names":["React","useState","useEffect","PropTypes","useDispatch","useHistory","HeaderNotificationsView","updateNotifications","deleteSingleNotification","deleteAllNotifications","enqueueNotification","constants","config","utils","HeaderNotifications","propTypes","notifications","array","isRequired","notificationsError","string","userId","number","handlers","shape","onSuccessfulNotificationReadOrDelete","func","setOpenPopover","dispatch","history","notificationsList","setNotificationsList","notificationClick","notificationObj","allowedToNavigate","refId","refType","source","userNotificationId","isValidNotification","Boolean","generic","isValidObject","isTaskPp","NOTIFICATIONS_REF_TYPE_TASK","SOURCE_ID_PP","isTaskClaims","SOURCE_ID_CLAIMS","isRfiPp","NOTIFICATIONS_REF_TYPE_RFI","isClientTab","NOTIFICATION_REF_TYPE_CLIENT","push","routes","premiumProcessing","root","claimsProcessing","taskId","split","rfiId","PREMIUM_PROCESSING_TAB_RFI","PREMIUM_PROCESSING_TAB_ISSUE_DOCUMENTS","PREMIUM_PROCESSING_TAB_CLIENT","then","response","status","API_RESPONSE_OK","clearAllNotifications","clearNotification","event","stopPropagation"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\n\r\n// app\r\nimport HeaderNotificationsView from './HeaderNotifications.view';\r\nimport { updateNotifications, deleteSingleNotification, deleteAllNotifications, enqueueNotification } from 'stores';\r\nimport * as constants from 'consts';\r\nimport config from 'config';\r\nimport * as utils from 'utils';\r\n\r\nHeaderNotifications.propTypes = {\r\n  notifications: PropTypes.array.isRequired,\r\n  notificationsError: PropTypes.string,\r\n  userId: PropTypes.number.isRequired,\r\n  handlers: PropTypes.shape({\r\n    onSuccessfulNotificationReadOrDelete: PropTypes.func.isRequired,\r\n    setOpenPopover: PropTypes.func.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default function HeaderNotifications({ notifications, notificationsError, userId, handlers }) {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const [notificationsList, setNotificationsList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setNotificationsList(notifications);\r\n  }, [notifications]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const notificationClick = (notificationObj = {}) => {\r\n    const { allowedToNavigate, refId, refType, source, userNotificationId } = notificationObj;\r\n    const isValidNotification = Boolean(utils.generic.isValidObject(notificationObj) && refType && source && refId);\r\n    const isTaskPp = refType === constants.NOTIFICATIONS_REF_TYPE_TASK && source === constants.SOURCE_ID_PP;\r\n    const isTaskClaims = refType === constants.NOTIFICATIONS_REF_TYPE_TASK && source === constants.SOURCE_ID_CLAIMS;\r\n    const isRfiPp = refType === constants.NOTIFICATIONS_REF_TYPE_RFI && source === constants.SOURCE_ID_PP;\r\n    const isClientTab = refType === constants.NOTIFICATION_REF_TYPE_CLIENT && source === constants.SOURCE_ID_PP;\r\n\r\n    if (isValidNotification && allowedToNavigate) {\r\n      if (isTaskPp) {\r\n        history.push(`${config.routes.premiumProcessing.root}${refId ? `/${refId}` : ''}`);\r\n      } else if (isTaskClaims) {\r\n        history.push(`${config.routes.claimsProcessing.root}${refId ? `/${refId}` : ''}`);\r\n      } else if (isRfiPp || isClientTab) {\r\n        const taskId = refId.split('||')[0];\r\n        const rfiId = refId.split('||')[1];\r\n        if (taskId) {\r\n          history.push(\r\n            `${config.routes.premiumProcessing.case}/${taskId}/${\r\n              rfiId\r\n                ? `${constants.PREMIUM_PROCESSING_TAB_RFI}/${rfiId}`\r\n                : `${constants.PREMIUM_PROCESSING_TAB_ISSUE_DOCUMENTS}/${constants.PREMIUM_PROCESSING_TAB_CLIENT}`\r\n            }`\r\n          );\r\n        }\r\n      }\r\n      dispatch(updateNotifications(userNotificationId, userId)).then((response) => {\r\n        if (response?.status === constants.API_RESPONSE_OK) {\r\n          handlers.onSuccessfulNotificationReadOrDelete();\r\n        }\r\n      });\r\n      handlers.setOpenPopover(false);\r\n    }\r\n  };\r\n\r\n  const clearAllNotifications = () => {\r\n    dispatch(deleteAllNotifications(userId)).then((response) => {\r\n      if (response?.status === constants.API_RESPONSE_OK) {\r\n        handlers.onSuccessfulNotificationReadOrDelete();\r\n        dispatch(enqueueNotification('globalNotification.deleteAllSuccess', 'success'));\r\n      }\r\n    });\r\n  };\r\n\r\n  const clearNotification = (event, notificationObj) => {\r\n    event.stopPropagation();\r\n    const userNotificationId = notificationObj?.userNotificationId;\r\n    dispatch(deleteSingleNotification(userNotificationId, userId)).then((response) => {\r\n      if (response?.status === constants.API_RESPONSE_OK) {\r\n        handlers.onSuccessfulNotificationReadOrDelete();\r\n        dispatch(enqueueNotification('globalNotification.deleteSuccess', 'success'));\r\n      }\r\n    });\r\n  };\r\n\r\n  // abort\r\n  if (!notifications) return null;\r\n\r\n  return (\r\n    <HeaderNotificationsView\r\n      notifications={notificationsList}\r\n      notificationsError={notificationsError}\r\n      handlers={{\r\n        notificationClick: notificationClick,\r\n        clearNotification: clearNotification,\r\n        clearAllNotifications: clearAllNotifications,\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}