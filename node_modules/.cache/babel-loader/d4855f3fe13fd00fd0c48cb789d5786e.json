{"ast":null,"code":"import _regeneratorRuntime from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/MPHASIS/claims-page/Mphasis-Edge/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"E:\\\\MPHASIS\\\\claims-page\\\\Mphasis-Edge\\\\src\\\\modules\\\\ClaimSummaryActions\\\\ClaimSummaryActions.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux'; // app\n\nimport { getClaimsProcessing, returnToTeamQueueClaim, showModal, hideModal } from 'stores';\nimport { ClaimSummaryActionsView } from './ClaimSummaryActions.view';\nimport * as constants from 'consts';\nimport * as utils from 'utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nClaimSummaryActions.propTypes = {\n  claim: PropTypes.object.isRequired\n};\nexport default function ClaimSummaryActions(_ref) {\n  _s();\n\n  var _claim$processState,\n      _user$emailId,\n      _claim$assigneeEmail,\n      _user$organisation,\n      _user$organisation$na,\n      _claim$team,\n      _this = this;\n\n  var claim = _ref.claim;\n  var dispatch = useDispatch();\n  var isReassignFormDirtyRef = useRef(false);\n  var user = useSelector(function (state) {\n    return state.user;\n  });\n  var isClosedClaim = (claim === null || claim === void 0 ? void 0 : (_claim$processState = claim.processState) === null || _claim$processState === void 0 ? void 0 : _claim$processState.toLowerCase()) === constants.CLAIM_STATUS_CLOSED.toLowerCase();\n  var isReassignEnabled = constants.REASSIGN_ENABLED_TASK_STATUSES.includes(claim === null || claim === void 0 ? void 0 : claim.processState);\n  var userHasAllClaimsPermission = utils.app.access.feature('claimsFNOL.allClaims', ['read', 'create', 'update'], user);\n  var isUsersClaim = (user === null || user === void 0 ? void 0 : (_user$emailId = user.emailId) === null || _user$emailId === void 0 ? void 0 : _user$emailId.toLowerCase()) === (claim === null || claim === void 0 ? void 0 : (_claim$assigneeEmail = claim.assigneeEmail) === null || _claim$assigneeEmail === void 0 ? void 0 : _claim$assigneeEmail.toLowerCase());\n  var claimsType = constants.CLAIM_TEAM_TYPE.myClaims;\n  var isTeamClaim = (user === null || user === void 0 ? void 0 : (_user$organisation = user.organisation) === null || _user$organisation === void 0 ? void 0 : (_user$organisation$na = _user$organisation.name) === null || _user$organisation$na === void 0 ? void 0 : _user$organisation$na.toLowerCase()) === (claim === null || claim === void 0 ? void 0 : (_claim$team = claim.team) === null || _claim$team === void 0 ? void 0 : _claim$team.toLowerCase());\n  var searchBy = constants.CLAIMS_SEARCH_OPTION_CLAIM_REF;\n\n  var setIsReassignFormDirty = function setIsReassignFormDirty(isDirty) {\n    isReassignFormDirtyRef.current = isDirty;\n  };\n\n  var bulkAssignConfirm = function bulkAssignConfirm() {\n    if (isReassignFormDirtyRef.current) {\n      dispatch(showModal({\n        component: 'CONFIRM',\n        props: {\n          title: utils.string.t('navigation.form.subtitle'),\n          hint: utils.string.t('navigation.form.title'),\n          fullWidth: true,\n          maxWidth: 'xs',\n          componentProps: {\n            cancelLabel: utils.string.t('app.no'),\n            confirmLabel: utils.string.t('app.yes'),\n            submitHandler: function submitHandler() {\n              dispatch(hideModal('SINGLE_ASSIGN_CLAIM'));\n            }\n          }\n        }\n      }));\n    } else {\n      dispatch(hideModal('SINGLE_ASSIGN_CLAIM'));\n    }\n  };\n\n  var reAssignClaim = function reAssignClaim(claim) {\n    dispatch(showModal({\n      component: 'SINGLE_ASSIGN_CLAIM',\n      props: {\n        title: 'claims.processing.bulkAssign.title',\n        fullWidth: true,\n        maxWidth: 'sm',\n        hideCompOnBlur: false,\n        componentProps: {\n          claimsProcessingSelected: [claim],\n          claimsType: claimsType,\n          setIsDirty: setIsReassignFormDirty,\n          clickXHandler: function clickXHandler() {\n            bulkAssignConfirm();\n          },\n          cancelHandler: function cancelHandler() {\n            bulkAssignConfirm();\n          }\n        }\n      }\n    }));\n  };\n\n  var createRFIModal = function createRFIModal(claim) {\n    var isClaimArray = utils.generic.isValidArray(claim, true);\n    var claimObj = isClaimArray ? claim.length > 0 ? claim[0] : {} : claim;\n    dispatch(showModal({\n      component: 'CREATE_RFI',\n      props: {\n        title: utils.string.t('claims.processing.taskFunction.createRFI'),\n        hideCompOnBlur: false,\n        fullWidth: true,\n        maxWidth: 'md',\n        disableAutoFocus: true,\n        componentProps: {\n          claim: claimObj,\n          cancelHandler: function cancelHandler() {\n            dispatch(hideModal());\n          }\n        }\n      }\n    }));\n  };\n\n  var createAdHocTaskModal = function createAdHocTaskModal(claim) {\n    dispatch(showModal({\n      component: 'CREATE_AD_HOC_TASK',\n      props: {\n        title: utils.string.t('claims.processing.taskFunction.createAdhocTask'),\n        hideCompOnBlur: false,\n        fullWidth: true,\n        maxWidth: 'md',\n        disableAutoFocus: true,\n        componentProps: {\n          claim: claim,\n          cancelHandler: function cancelHandler() {\n            dispatch(hideModal());\n          }\n        }\n      }\n    }));\n  };\n\n  var setClaimPriority = function setClaimPriority(claim) {\n    dispatch(showModal({\n      component: 'SET_CLAIM_PRIORITY',\n      props: {\n        title: utils.string.t('claims.modals.claimFunctions.setClaimPriority'),\n        fullWidth: true,\n        hideCompOnBlur: false,\n        maxWidth: 'sm',\n        disableAutoFocus: true,\n        componentProps: {\n          claim: claim,\n          cancelHandler: function cancelHandler() {\n            dispatch(hideModal());\n          }\n        }\n      }\n    }));\n  };\n\n  var handleSetClaimTaskSelection = function handleSetClaimTaskSelection(claim) {\n    dispatch(showModal({\n      component: 'SET_CLAIM_TASK_SELECTION',\n      props: {\n        title: utils.string.t('claims.modals.claimFunctions.setClaimTaskSelection'),\n        fullWidth: true,\n        maxWidth: 'sm',\n        disableAutoFocus: true,\n        componentProps: {\n          claim: claim,\n          cancelHandler: function cancelHandler() {\n            dispatch(hideModal());\n          }\n        }\n      }\n    }));\n  };\n\n  var handleReOpenClaim = function handleReOpenClaim(claim) {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        title: utils.string.t('claims.claimRef.popOverItems.reOpen'),\n        hint: utils.string.t('claims.claimRef.popOverItems.reOpenClaimMessage'),\n        fullWidth: true,\n        maxWidth: 'xs',\n        componentProps: {\n          cancelLabel: utils.string.t('app.no'),\n          confirmLabel: utils.string.t('app.yes'),\n          submitHandler: function submitHandler() {\n            handleSetClaimTaskSelection(claim);\n          },\n          cancelHandler: function cancelHandler() {\n            dispatch(hideModal());\n          }\n        }\n      }\n    }));\n  };\n\n  var releaseClaimToQ = function releaseClaimToQ(claim) {\n    dispatch(showModal({\n      component: 'CONFIRM',\n      props: {\n        title: utils.string.t('status.alert'),\n        fullWidth: true,\n        maxWidth: 'xs',\n        componentProps: {\n          cancelLabel: utils.string.t('app.no'),\n          confirmLabel: utils.string.t('app.yes'),\n          confirmMessage: /*#__PURE__*/_jsxDEV(\"span\", {\n            dangerouslySetInnerHTML: {\n              __html: \"\".concat(utils.string.t('claims.complexityRulesManagementDetails.alertModal.note'))\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 15\n          }, _this),\n          submitHandler: function () {\n            var _submitHandler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n              return _regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      _context.next = 2;\n                      return dispatch(returnToTeamQueueClaim(claim));\n\n                    case 2:\n                      _context.next = 4;\n                      return dispatch(getClaimsProcessing({\n                        requestType: constants.CLAIM_PROCESSING_REQ_TYPES.search,\n                        claimsType: claimsType,\n                        filterTerm: [],\n                        searchBy: searchBy,\n                        pullClosedRecords: false\n                      }));\n\n                    case 4:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, _callee);\n            }));\n\n            function submitHandler() {\n              return _submitHandler.apply(this, arguments);\n            }\n\n            return submitHandler;\n          }(),\n          cancelHandler: function cancelHandler() {\n            dispatch(hideModal());\n          }\n        }\n      }\n    }));\n  }; // abort\n\n\n  if (!utils.generic.isValidObject(claim)) return null;\n  return /*#__PURE__*/_jsxDEV(ClaimSummaryActionsView, {\n    claim: claim,\n    isClosedClaim: isClosedClaim,\n    isReassignEnabled: isReassignEnabled,\n    userHasAllClaimsPermission: userHasAllClaimsPermission,\n    isUsersClaim: isUsersClaim,\n    isTeamClaim: isTeamClaim,\n    handlers: {\n      createRFIModal: createRFIModal,\n      createAdHocTaskModal: createAdHocTaskModal,\n      reAssignClaim: reAssignClaim,\n      setClaimPriority: setClaimPriority,\n      releaseClaimToQ: releaseClaimToQ,\n      handleReOpenClaim: handleReOpenClaim\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 234,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ClaimSummaryActions, \"geKi+17RjAezyvZZVJ9ov8Z4iqg=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = ClaimSummaryActions;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimSummaryActions\");","map":{"version":3,"sources":["E:/MPHASIS/claims-page/Mphasis-Edge/src/modules/ClaimSummaryActions/ClaimSummaryActions.js"],"names":["React","useRef","PropTypes","useDispatch","useSelector","getClaimsProcessing","returnToTeamQueueClaim","showModal","hideModal","ClaimSummaryActionsView","constants","utils","ClaimSummaryActions","propTypes","claim","object","isRequired","dispatch","isReassignFormDirtyRef","user","state","isClosedClaim","processState","toLowerCase","CLAIM_STATUS_CLOSED","isReassignEnabled","REASSIGN_ENABLED_TASK_STATUSES","includes","userHasAllClaimsPermission","app","access","feature","isUsersClaim","emailId","assigneeEmail","claimsType","CLAIM_TEAM_TYPE","myClaims","isTeamClaim","organisation","name","team","searchBy","CLAIMS_SEARCH_OPTION_CLAIM_REF","setIsReassignFormDirty","isDirty","current","bulkAssignConfirm","component","props","title","string","t","hint","fullWidth","maxWidth","componentProps","cancelLabel","confirmLabel","submitHandler","reAssignClaim","hideCompOnBlur","claimsProcessingSelected","setIsDirty","clickXHandler","cancelHandler","createRFIModal","isClaimArray","generic","isValidArray","claimObj","length","disableAutoFocus","createAdHocTaskModal","setClaimPriority","handleSetClaimTaskSelection","handleReOpenClaim","releaseClaimToQ","confirmMessage","__html","requestType","CLAIM_PROCESSING_REQ_TYPES","search","filterTerm","pullClosedRecords","isValidObject"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC,C,CAEA;;AACA,SAASC,mBAAT,EAA8BC,sBAA9B,EAAsDC,SAAtD,EAAiEC,SAAjE,QAAkF,QAAlF;AACA,SAASC,uBAAT,QAAwC,4BAAxC;AACA,OAAO,KAAKC,SAAZ,MAA2B,QAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;AAEAC,mBAAmB,CAACC,SAApB,GAAgC;AAC9BC,EAAAA,KAAK,EAAEZ,SAAS,CAACa,MAAV,CAAiBC;AADM,CAAhC;AAIA,eAAe,SAASJ,mBAAT,OAAwC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,MAATE,KAAS,QAATA,KAAS;AACrD,MAAMG,QAAQ,GAAGd,WAAW,EAA5B;AAEA,MAAMe,sBAAsB,GAAGjB,MAAM,CAAC,KAAD,CAArC;AACA,MAAMkB,IAAI,GAAGf,WAAW,CAAC,UAACgB,KAAD;AAAA,WAAWA,KAAK,CAACD,IAAjB;AAAA,GAAD,CAAxB;AACA,MAAME,aAAa,GAAG,CAAAP,KAAK,SAAL,IAAAA,KAAK,WAAL,mCAAAA,KAAK,CAAEQ,YAAP,4EAAqBC,WAArB,QAAuCb,SAAS,CAACc,mBAAV,CAA8BD,WAA9B,EAA7D;AACA,MAAME,iBAAiB,GAAGf,SAAS,CAACgB,8BAAV,CAAyCC,QAAzC,CAAkDb,KAAlD,aAAkDA,KAAlD,uBAAkDA,KAAK,CAAEQ,YAAzD,CAA1B;AACA,MAAMM,0BAA0B,GAAGjB,KAAK,CAACkB,GAAN,CAAUC,MAAV,CAAiBC,OAAjB,CAAyB,sBAAzB,EAAiD,CAAC,MAAD,EAAS,QAAT,EAAmB,QAAnB,CAAjD,EAA+EZ,IAA/E,CAAnC;AAEA,MAAMa,YAAY,GAAG,CAAAb,IAAI,SAAJ,IAAAA,IAAI,WAAJ,6BAAAA,IAAI,CAAEc,OAAN,gEAAeV,WAAf,SAAiCT,KAAjC,aAAiCA,KAAjC,+CAAiCA,KAAK,CAAEoB,aAAxC,yDAAiC,qBAAsBX,WAAtB,EAAjC,CAArB;AACA,MAAMY,UAAU,GAAGzB,SAAS,CAAC0B,eAAV,CAA0BC,QAA7C;AACA,MAAMC,WAAW,GAAG,CAAAnB,IAAI,SAAJ,IAAAA,IAAI,WAAJ,kCAAAA,IAAI,CAAEoB,YAAN,mGAAoBC,IAApB,gFAA0BjB,WAA1B,SAA4CT,KAA5C,aAA4CA,KAA5C,sCAA4CA,KAAK,CAAE2B,IAAnD,gDAA4C,YAAalB,WAAb,EAA5C,CAApB;AACA,MAAMmB,QAAQ,GAAGhC,SAAS,CAACiC,8BAA3B;;AAEA,MAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,OAAD,EAAa;AAC1C3B,IAAAA,sBAAsB,CAAC4B,OAAvB,GAAiCD,OAAjC;AACD,GAFD;;AAIA,MAAME,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9B,QAAI7B,sBAAsB,CAAC4B,OAA3B,EAAoC;AAClC7B,MAAAA,QAAQ,CACNV,SAAS,CAAC;AACRyC,QAAAA,SAAS,EAAE,SADH;AAERC,QAAAA,KAAK,EAAE;AACLC,UAAAA,KAAK,EAAEvC,KAAK,CAACwC,MAAN,CAAaC,CAAb,CAAe,0BAAf,CADF;AAELC,UAAAA,IAAI,EAAE1C,KAAK,CAACwC,MAAN,CAAaC,CAAb,CAAe,uBAAf,CAFD;AAGLE,UAAAA,SAAS,EAAE,IAHN;AAILC,UAAAA,QAAQ,EAAE,IAJL;AAKLC,UAAAA,cAAc,EAAE;AACdC,YAAAA,WAAW,EAAE9C,KAAK,CAACwC,MAAN,CAAaC,CAAb,CAAe,QAAf,CADC;AAEdM,YAAAA,YAAY,EAAE/C,KAAK,CAACwC,MAAN,CAAaC,CAAb,CAAe,SAAf,CAFA;AAGdO,YAAAA,aAAa,EAAE,yBAAM;AACnB1C,cAAAA,QAAQ,CAACT,SAAS,CAAC,qBAAD,CAAV,CAAR;AACD;AALa;AALX;AAFC,OAAD,CADH,CAAR;AAkBD,KAnBD,MAmBO;AACLS,MAAAA,QAAQ,CAACT,SAAS,CAAC,qBAAD,CAAV,CAAR;AACD;AACF,GAvBD;;AAyBA,MAAMoD,aAAa,GAAG,SAAhBA,aAAgB,CAAC9C,KAAD,EAAW;AAC/BG,IAAAA,QAAQ,CACNV,SAAS,CAAC;AACRyC,MAAAA,SAAS,EAAE,qBADH;AAERC,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAE,oCADF;AAELI,QAAAA,SAAS,EAAE,IAFN;AAGLC,QAAAA,QAAQ,EAAE,IAHL;AAILM,QAAAA,cAAc,EAAE,KAJX;AAKLL,QAAAA,cAAc,EAAE;AACdM,UAAAA,wBAAwB,EAAE,CAAChD,KAAD,CADZ;AAEdqB,UAAAA,UAAU,EAAVA,UAFc;AAGd4B,UAAAA,UAAU,EAAEnB,sBAHE;AAIdoB,UAAAA,aAAa,EAAE,yBAAM;AACnBjB,YAAAA,iBAAiB;AAClB,WANa;AAOdkB,UAAAA,aAAa,EAAE,yBAAM;AACnBlB,YAAAA,iBAAiB;AAClB;AATa;AALX;AAFC,KAAD,CADH,CAAR;AAsBD,GAvBD;;AAyBA,MAAMmB,cAAc,GAAG,SAAjBA,cAAiB,CAACpD,KAAD,EAAW;AAChC,QAAMqD,YAAY,GAAGxD,KAAK,CAACyD,OAAN,CAAcC,YAAd,CAA2BvD,KAA3B,EAAkC,IAAlC,CAArB;AACA,QAAMwD,QAAQ,GAAGH,YAAY,GAAIrD,KAAK,CAACyD,MAAN,GAAe,CAAf,GAAmBzD,KAAK,CAAC,CAAD,CAAxB,GAA8B,EAAlC,GAAwCA,KAArE;AACAG,IAAAA,QAAQ,CACNV,SAAS,CAAC;AACRyC,MAAAA,SAAS,EAAE,YADH;AAERC,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAEvC,KAAK,CAACwC,MAAN,CAAaC,CAAb,CAAe,0CAAf,CADF;AAELS,QAAAA,cAAc,EAAE,KAFX;AAGLP,QAAAA,SAAS,EAAE,IAHN;AAILC,QAAAA,QAAQ,EAAE,IAJL;AAKLiB,QAAAA,gBAAgB,EAAE,IALb;AAMLhB,QAAAA,cAAc,EAAE;AACd1C,UAAAA,KAAK,EAAEwD,QADO;AAEdL,UAAAA,aAAa,EAAE,yBAAM;AACnBhD,YAAAA,QAAQ,CAACT,SAAS,EAAV,CAAR;AACD;AAJa;AANX;AAFC,KAAD,CADH,CAAR;AAkBD,GArBD;;AAuBA,MAAMiE,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAC3D,KAAD,EAAW;AACtCG,IAAAA,QAAQ,CACNV,SAAS,CAAC;AACRyC,MAAAA,SAAS,EAAE,oBADH;AAERC,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAEvC,KAAK,CAACwC,MAAN,CAAaC,CAAb,CAAe,gDAAf,CADF;AAELS,QAAAA,cAAc,EAAE,KAFX;AAGLP,QAAAA,SAAS,EAAE,IAHN;AAILC,QAAAA,QAAQ,EAAE,IAJL;AAKLiB,QAAAA,gBAAgB,EAAE,IALb;AAMLhB,QAAAA,cAAc,EAAE;AACd1C,UAAAA,KAAK,EAALA,KADc;AAEdmD,UAAAA,aAAa,EAAE,yBAAM;AACnBhD,YAAAA,QAAQ,CAACT,SAAS,EAAV,CAAR;AACD;AAJa;AANX;AAFC,KAAD,CADH,CAAR;AAkBD,GAnBD;;AAqBA,MAAMkE,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAC5D,KAAD,EAAW;AAClCG,IAAAA,QAAQ,CACNV,SAAS,CAAC;AACRyC,MAAAA,SAAS,EAAE,oBADH;AAERC,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAEvC,KAAK,CAACwC,MAAN,CAAaC,CAAb,CAAe,+CAAf,CADF;AAELE,QAAAA,SAAS,EAAE,IAFN;AAGLO,QAAAA,cAAc,EAAE,KAHX;AAILN,QAAAA,QAAQ,EAAE,IAJL;AAKLiB,QAAAA,gBAAgB,EAAE,IALb;AAMLhB,QAAAA,cAAc,EAAE;AACd1C,UAAAA,KAAK,EAALA,KADc;AAEdmD,UAAAA,aAAa,EAAE,yBAAM;AACnBhD,YAAAA,QAAQ,CAACT,SAAS,EAAV,CAAR;AACD;AAJa;AANX;AAFC,KAAD,CADH,CAAR;AAkBD,GAnBD;;AAoBA,MAAMmE,2BAA2B,GAAG,SAA9BA,2BAA8B,CAAC7D,KAAD,EAAW;AAC7CG,IAAAA,QAAQ,CACNV,SAAS,CAAC;AACRyC,MAAAA,SAAS,EAAE,0BADH;AAERC,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAEvC,KAAK,CAACwC,MAAN,CAAaC,CAAb,CAAe,oDAAf,CADF;AAELE,QAAAA,SAAS,EAAE,IAFN;AAGLC,QAAAA,QAAQ,EAAE,IAHL;AAILiB,QAAAA,gBAAgB,EAAE,IAJb;AAKLhB,QAAAA,cAAc,EAAE;AACd1C,UAAAA,KAAK,EAALA,KADc;AAEdmD,UAAAA,aAAa,EAAE,yBAAM;AACnBhD,YAAAA,QAAQ,CAACT,SAAS,EAAV,CAAR;AACD;AAJa;AALX;AAFC,KAAD,CADH,CAAR;AAiBD,GAlBD;;AAoBA,MAAMoE,iBAAiB,GAAG,SAApBA,iBAAoB,CAAC9D,KAAD,EAAW;AACnCG,IAAAA,QAAQ,CACNV,SAAS,CAAC;AACRyC,MAAAA,SAAS,EAAE,SADH;AAERC,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAEvC,KAAK,CAACwC,MAAN,CAAaC,CAAb,CAAe,qCAAf,CADF;AAELC,QAAAA,IAAI,EAAE1C,KAAK,CAACwC,MAAN,CAAaC,CAAb,CAAe,iDAAf,CAFD;AAGLE,QAAAA,SAAS,EAAE,IAHN;AAILC,QAAAA,QAAQ,EAAE,IAJL;AAKLC,QAAAA,cAAc,EAAE;AACdC,UAAAA,WAAW,EAAE9C,KAAK,CAACwC,MAAN,CAAaC,CAAb,CAAe,QAAf,CADC;AAEdM,UAAAA,YAAY,EAAE/C,KAAK,CAACwC,MAAN,CAAaC,CAAb,CAAe,SAAf,CAFA;AAGdO,UAAAA,aAAa,EAAE,yBAAM;AACnBgB,YAAAA,2BAA2B,CAAC7D,KAAD,CAA3B;AACD,WALa;AAMdmD,UAAAA,aAAa,EAAE,yBAAM;AACnBhD,YAAAA,QAAQ,CAACT,SAAS,EAAV,CAAR;AACD;AARa;AALX;AAFC,KAAD,CADH,CAAR;AAqBD,GAtBD;;AAwBA,MAAMqE,eAAe,GAAG,SAAlBA,eAAkB,CAAC/D,KAAD,EAAW;AACjCG,IAAAA,QAAQ,CACNV,SAAS,CAAC;AACRyC,MAAAA,SAAS,EAAE,SADH;AAERC,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAEvC,KAAK,CAACwC,MAAN,CAAaC,CAAb,CAAe,cAAf,CADF;AAELE,QAAAA,SAAS,EAAE,IAFN;AAGLC,QAAAA,QAAQ,EAAE,IAHL;AAILC,QAAAA,cAAc,EAAE;AACdC,UAAAA,WAAW,EAAE9C,KAAK,CAACwC,MAAN,CAAaC,CAAb,CAAe,QAAf,CADC;AAEdM,UAAAA,YAAY,EAAE/C,KAAK,CAACwC,MAAN,CAAaC,CAAb,CAAe,SAAf,CAFA;AAGd0B,UAAAA,cAAc,eACZ;AACE,YAAA,uBAAuB,EAAE;AACvBC,cAAAA,MAAM,YAAKpE,KAAK,CAACwC,MAAN,CAAaC,CAAb,CAAe,yDAAf,CAAL;AADiB;AAD3B;AAAA;AAAA;AAAA;AAAA,mBAJY;AAUdO,UAAAA,aAAa;AAAA,0FAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BACP1C,QAAQ,CAACX,sBAAsB,CAACQ,KAAD,CAAvB,CADD;;AAAA;AAAA;AAAA,6BAEPG,QAAQ,CACZZ,mBAAmB,CAAC;AAClB2E,wBAAAA,WAAW,EAAEtE,SAAS,CAACuE,0BAAV,CAAqCC,MADhC;AAElB/C,wBAAAA,UAAU,EAAVA,UAFkB;AAGlBgD,wBAAAA,UAAU,EAAE,EAHM;AAIlBzC,wBAAAA,QAAQ,EAARA,QAJkB;AAKlB0C,wBAAAA,iBAAiB,EAAE;AALD,uBAAD,CADP,CAFD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,aAVC;AAsBdnB,UAAAA,aAAa,EAAE,yBAAM;AACnBhD,YAAAA,QAAQ,CAACT,SAAS,EAAV,CAAR;AACD;AAxBa;AAJX;AAFC,KAAD,CADH,CAAR;AAoCD,GArCD,CAhLqD,CAuNrD;;;AACA,MAAI,CAACG,KAAK,CAACyD,OAAN,CAAciB,aAAd,CAA4BvE,KAA5B,CAAL,EAAyC,OAAO,IAAP;AAEzC,sBACE,QAAC,uBAAD;AACE,IAAA,KAAK,EAAEA,KADT;AAEE,IAAA,aAAa,EAAEO,aAFjB;AAGE,IAAA,iBAAiB,EAAEI,iBAHrB;AAIE,IAAA,0BAA0B,EAAEG,0BAJ9B;AAKE,IAAA,YAAY,EAAEI,YALhB;AAME,IAAA,WAAW,EAAEM,WANf;AAOE,IAAA,QAAQ,EAAE;AACR4B,MAAAA,cAAc,EAAdA,cADQ;AAERO,MAAAA,oBAAoB,EAApBA,oBAFQ;AAGRb,MAAAA,aAAa,EAAbA,aAHQ;AAIRc,MAAAA,gBAAgB,EAAhBA,gBAJQ;AAKRG,MAAAA,eAAe,EAAfA,eALQ;AAMRD,MAAAA,iBAAiB,EAAjBA;AANQ;AAPZ;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD;;GA5OuBhE,mB;UACLT,W,EAGJC,W;;;KAJSQ,mB","sourcesContent":["import React, { useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n// app\r\nimport { getClaimsProcessing, returnToTeamQueueClaim, showModal, hideModal } from 'stores';\r\nimport { ClaimSummaryActionsView } from './ClaimSummaryActions.view';\r\nimport * as constants from 'consts';\r\nimport * as utils from 'utils';\r\n\r\nClaimSummaryActions.propTypes = {\r\n  claim: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default function ClaimSummaryActions({ claim }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const isReassignFormDirtyRef = useRef(false);\r\n  const user = useSelector((state) => state.user);\r\n  const isClosedClaim = claim?.processState?.toLowerCase() === constants.CLAIM_STATUS_CLOSED.toLowerCase();\r\n  const isReassignEnabled = constants.REASSIGN_ENABLED_TASK_STATUSES.includes(claim?.processState);\r\n  const userHasAllClaimsPermission = utils.app.access.feature('claimsFNOL.allClaims', ['read', 'create', 'update'], user);\r\n\r\n  const isUsersClaim = user?.emailId?.toLowerCase() === claim?.assigneeEmail?.toLowerCase();\r\n  const claimsType = constants.CLAIM_TEAM_TYPE.myClaims;\r\n  const isTeamClaim = user?.organisation?.name?.toLowerCase() === claim?.team?.toLowerCase();\r\n  const searchBy = constants.CLAIMS_SEARCH_OPTION_CLAIM_REF;\r\n\r\n  const setIsReassignFormDirty = (isDirty) => {\r\n    isReassignFormDirtyRef.current = isDirty;\r\n  };\r\n\r\n  const bulkAssignConfirm = () => {\r\n    if (isReassignFormDirtyRef.current) {\r\n      dispatch(\r\n        showModal({\r\n          component: 'CONFIRM',\r\n          props: {\r\n            title: utils.string.t('navigation.form.subtitle'),\r\n            hint: utils.string.t('navigation.form.title'),\r\n            fullWidth: true,\r\n            maxWidth: 'xs',\r\n            componentProps: {\r\n              cancelLabel: utils.string.t('app.no'),\r\n              confirmLabel: utils.string.t('app.yes'),\r\n              submitHandler: () => {\r\n                dispatch(hideModal('SINGLE_ASSIGN_CLAIM'));\r\n              },\r\n            },\r\n          },\r\n        })\r\n      );\r\n    } else {\r\n      dispatch(hideModal('SINGLE_ASSIGN_CLAIM'));\r\n    }\r\n  };\r\n\r\n  const reAssignClaim = (claim) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'SINGLE_ASSIGN_CLAIM',\r\n        props: {\r\n          title: 'claims.processing.bulkAssign.title',\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          hideCompOnBlur: false,\r\n          componentProps: {\r\n            claimsProcessingSelected: [claim],\r\n            claimsType,\r\n            setIsDirty: setIsReassignFormDirty,\r\n            clickXHandler: () => {\r\n              bulkAssignConfirm();\r\n            },\r\n            cancelHandler: () => {\r\n              bulkAssignConfirm();\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const createRFIModal = (claim) => {\r\n    const isClaimArray = utils.generic.isValidArray(claim, true);\r\n    const claimObj = isClaimArray ? (claim.length > 0 ? claim[0] : {}) : claim;\r\n    dispatch(\r\n      showModal({\r\n        component: 'CREATE_RFI',\r\n        props: {\r\n          title: utils.string.t('claims.processing.taskFunction.createRFI'),\r\n          hideCompOnBlur: false,\r\n          fullWidth: true,\r\n          maxWidth: 'md',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            claim: claimObj,\r\n            cancelHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const createAdHocTaskModal = (claim) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CREATE_AD_HOC_TASK',\r\n        props: {\r\n          title: utils.string.t('claims.processing.taskFunction.createAdhocTask'),\r\n          hideCompOnBlur: false,\r\n          fullWidth: true,\r\n          maxWidth: 'md',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            claim,\r\n            cancelHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const setClaimPriority = (claim) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'SET_CLAIM_PRIORITY',\r\n        props: {\r\n          title: utils.string.t('claims.modals.claimFunctions.setClaimPriority'),\r\n          fullWidth: true,\r\n          hideCompOnBlur: false,\r\n          maxWidth: 'sm',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            claim,\r\n            cancelHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n  const handleSetClaimTaskSelection = (claim) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'SET_CLAIM_TASK_SELECTION',\r\n        props: {\r\n          title: utils.string.t('claims.modals.claimFunctions.setClaimTaskSelection'),\r\n          fullWidth: true,\r\n          maxWidth: 'sm',\r\n          disableAutoFocus: true,\r\n          componentProps: {\r\n            claim,\r\n            cancelHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleReOpenClaim = (claim) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          title: utils.string.t('claims.claimRef.popOverItems.reOpen'),\r\n          hint: utils.string.t('claims.claimRef.popOverItems.reOpenClaimMessage'),\r\n          fullWidth: true,\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            cancelLabel: utils.string.t('app.no'),\r\n            confirmLabel: utils.string.t('app.yes'),\r\n            submitHandler: () => {\r\n              handleSetClaimTaskSelection(claim);\r\n            },\r\n            cancelHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const releaseClaimToQ = (claim) => {\r\n    dispatch(\r\n      showModal({\r\n        component: 'CONFIRM',\r\n        props: {\r\n          title: utils.string.t('status.alert'),\r\n          fullWidth: true,\r\n          maxWidth: 'xs',\r\n          componentProps: {\r\n            cancelLabel: utils.string.t('app.no'),\r\n            confirmLabel: utils.string.t('app.yes'),\r\n            confirmMessage: (\r\n              <span\r\n                dangerouslySetInnerHTML={{\r\n                  __html: `${utils.string.t('claims.complexityRulesManagementDetails.alertModal.note')}`,\r\n                }}\r\n              />\r\n            ),\r\n            submitHandler: async () => {\r\n              await dispatch(returnToTeamQueueClaim(claim));\r\n              await dispatch(\r\n                getClaimsProcessing({\r\n                  requestType: constants.CLAIM_PROCESSING_REQ_TYPES.search,\r\n                  claimsType,\r\n                  filterTerm: [],\r\n                  searchBy,\r\n                  pullClosedRecords: false,\r\n                })\r\n              );\r\n            },\r\n            cancelHandler: () => {\r\n              dispatch(hideModal());\r\n            },\r\n          },\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  // abort\r\n  if (!utils.generic.isValidObject(claim)) return null;\r\n\r\n  return (\r\n    <ClaimSummaryActionsView\r\n      claim={claim}\r\n      isClosedClaim={isClosedClaim}\r\n      isReassignEnabled={isReassignEnabled}\r\n      userHasAllClaimsPermission={userHasAllClaimsPermission}\r\n      isUsersClaim={isUsersClaim}\r\n      isTeamClaim={isTeamClaim}\r\n      handlers={{\r\n        createRFIModal,\r\n        createAdHocTaskModal,\r\n        reAssignClaim,\r\n        setClaimPriority,\r\n        releaseClaimToQ,\r\n        handleReOpenClaim,\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}